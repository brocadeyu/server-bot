globalThis.CESIUM_WORKERS = atob("dmFyIENlc2l1bVdvcmtlcnMgPSAoKCkgPT4gewogIHZhciBfX2NyZWF0ZSA9IE9iamVjdC5jcmVhdGU7CiAgdmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTsKICB2YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7CiAgdmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7CiAgdmFyIF9fZ2V0UHJvdG9PZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjsKICB2YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTsKICB2YXIgX19yZXF1aXJlID0gLyogQF9fUFVSRV9fICovICgoeCkgPT4gdHlwZW9mIHJlcXVpcmUgIT09ICJ1bmRlZmluZWQiID8gcmVxdWlyZSA6IHR5cGVvZiBQcm94eSAhPT0gInVuZGVmaW5lZCIgPyBuZXcgUHJveHkoeCwgewogICAgZ2V0OiAoYTMsIGIpID0+ICh0eXBlb2YgcmVxdWlyZSAhPT0gInVuZGVmaW5lZCIgPyByZXF1aXJlIDogYTMpW2JdCiAgfSkgOiB4KShmdW5jdGlvbih4KSB7CiAgICBpZiAodHlwZW9mIHJlcXVpcmUgIT09ICJ1bmRlZmluZWQiKQogICAgICByZXR1cm4gcmVxdWlyZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgdGhyb3cgRXJyb3IoJ0R5bmFtaWMgcmVxdWlyZSBvZiAiJyArIHggKyAnIiBpcyBub3Qgc3VwcG9ydGVkJyk7CiAgfSk7CiAgdmFyIF9fZ2xvYiA9IChtYXApID0+IChwYXRoKSA9PiB7CiAgICB2YXIgZm4gPSBtYXBbcGF0aF07CiAgICBpZiAoZm4pCiAgICAgIHJldHVybiBmbigpOwogICAgdGhyb3cgbmV3IEVycm9yKCJNb2R1bGUgbm90IGZvdW5kIGluIGJ1bmRsZTogIiArIHBhdGgpOwogIH07CiAgdmFyIF9fZXNtID0gKGZuLCByZXMpID0+IGZ1bmN0aW9uIF9faW5pdCgpIHsKICAgIHJldHVybiBmbiAmJiAocmVzID0gKDAsIGZuW19fZ2V0T3duUHJvcE5hbWVzKGZuKVswXV0pKGZuID0gMCkpLCByZXM7CiAgfTsKICB2YXIgX19jb21tb25KUyA9IChjYiwgbW9kKSA9PiBmdW5jdGlvbiBfX3JlcXVpcmUyKCkgewogICAgcmV0dXJuIG1vZCB8fCAoMCwgY2JbX19nZXRPd25Qcm9wTmFtZXMoY2IpWzBdXSkoKG1vZCA9IHsgZXhwb3J0czoge30gfSkuZXhwb3J0cywgbW9kKSwgbW9kLmV4cG9ydHM7CiAgfTsKICB2YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHsKICAgIGZvciAodmFyIG5hbWUgaW4gYWxsKQogICAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pOwogIH07CiAgdmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHsKICAgIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSAib2JqZWN0IiB8fCB0eXBlb2YgZnJvbSA9PT0gImZ1bmN0aW9uIikgewogICAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpCiAgICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdCkKICAgICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTsKICAgIH0KICAgIHJldHVybiB0bzsKICB9OwogIHZhciBfX3RvRVNNID0gKG1vZCwgaXNOb2RlTW9kZSwgdGFyZ2V0KSA9PiAodGFyZ2V0ID0gbW9kICE9IG51bGwgPyBfX2NyZWF0ZShfX2dldFByb3RvT2YobW9kKSkgOiB7fSwgX19jb3B5UHJvcHMoCiAgICAvLyBJZiB0aGUgaW1wb3J0ZXIgaXMgaW4gbm9kZSBjb21wYXRpYmlsaXR5IG1vZGUgb3IgdGhpcyBpcyBub3QgYW4gRVNNCiAgICAvLyBmaWxlIHRoYXQgaGFzIGJlZW4gY29udmVydGVkIHRvIGEgQ29tbW9uSlMgZmlsZSB1c2luZyBhIEJhYmVsLQogICAgLy8gY29tcGF0aWJsZSB0cmFuc2Zvcm0gKGkuZS4gIl9fZXNNb2R1bGUiIGhhcyBub3QgYmVlbiBzZXQpLCB0aGVuIHNldAogICAgLy8gImRlZmF1bHQiIHRvIHRoZSBDb21tb25KUyAibW9kdWxlLmV4cG9ydHMiIGZvciBub2RlIGNvbXBhdGliaWxpdHkuCiAgICBpc05vZGVNb2RlIHx8ICFtb2QgfHwgIW1vZC5fX2VzTW9kdWxlID8gX19kZWZQcm9wKHRhcmdldCwgImRlZmF1bHQiLCB7IHZhbHVlOiBtb2QsIGVudW1lcmFibGU6IHRydWUgfSkgOiB0YXJnZXQsCiAgICBtb2QKICApKTsKICB2YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCAiX19lc01vZHVsZSIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9kZWZpbmVkLmpzCiAgZnVuY3Rpb24gZGVmaW5lZCh2YWx1ZSkgewogICAgcmV0dXJuIHZhbHVlICE9PSB2b2lkIDAgJiYgdmFsdWUgIT09IG51bGw7CiAgfQogIHZhciBkZWZpbmVkX2RlZmF1bHQ7CiAgdmFyIGluaXRfZGVmaW5lZCA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvZGVmaW5lZC5qcyIoKSB7CiAgICAgIGRlZmluZWRfZGVmYXVsdCA9IGRlZmluZWQ7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9EZXZlbG9wZXJFcnJvci5qcwogIGZ1bmN0aW9uIERldmVsb3BlckVycm9yKG1lc3NhZ2UpIHsKICAgIHRoaXMubmFtZSA9ICJEZXZlbG9wZXJFcnJvciI7CiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlOwogICAgbGV0IHN0YWNrOwogICAgdHJ5IHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHN0YWNrID0gZS5zdGFjazsKICAgIH0KICAgIHRoaXMuc3RhY2sgPSBzdGFjazsKICB9CiAgdmFyIERldmVsb3BlckVycm9yX2RlZmF1bHQ7CiAgdmFyIGluaXRfRGV2ZWxvcGVyRXJyb3IgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0RldmVsb3BlckVycm9yLmpzIigpIHsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoT2JqZWN0LmNyZWF0ZSkpIHsKICAgICAgICBEZXZlbG9wZXJFcnJvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7CiAgICAgICAgRGV2ZWxvcGVyRXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRGV2ZWxvcGVyRXJyb3I7CiAgICAgIH0KICAgICAgRGV2ZWxvcGVyRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7CiAgICAgICAgbGV0IHN0ciA9IGAke3RoaXMubmFtZX06ICR7dGhpcy5tZXNzYWdlfWA7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdCh0aGlzLnN0YWNrKSkgewogICAgICAgICAgc3RyICs9IGAKJHt0aGlzLnN0YWNrLnRvU3RyaW5nKCl9YDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHN0cjsKICAgICAgfTsKICAgICAgRGV2ZWxvcGVyRXJyb3IudGhyb3dJbnN0YW50aWF0aW9uRXJyb3IgPSBmdW5jdGlvbigpIHsKICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3IoCiAgICAgICAgICAiVGhpcyBmdW5jdGlvbiBkZWZpbmVzIGFuIGludGVyZmFjZSBhbmQgc2hvdWxkIG5vdCBiZSBjYWxsZWQgZGlyZWN0bHkuIgogICAgICAgICk7CiAgICAgIH07CiAgICAgIERldmVsb3BlckVycm9yX2RlZmF1bHQgPSBEZXZlbG9wZXJFcnJvcjsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0NoZWNrLmpzCiAgZnVuY3Rpb24gZ2V0VW5kZWZpbmVkRXJyb3JNZXNzYWdlKG5hbWUpIHsKICAgIHJldHVybiBgJHtuYW1lfSBpcyByZXF1aXJlZCwgYWN0dWFsIHZhbHVlIHdhcyB1bmRlZmluZWRgOwogIH0KICBmdW5jdGlvbiBnZXRGYWlsZWRUeXBlRXJyb3JNZXNzYWdlKGFjdHVhbCwgZXhwZWN0ZWQsIG5hbWUpIHsKICAgIHJldHVybiBgRXhwZWN0ZWQgJHtuYW1lfSB0byBiZSB0eXBlb2YgJHtleHBlY3RlZH0sIGFjdHVhbCB0eXBlb2Ygd2FzICR7YWN0dWFsfWA7CiAgfQogIHZhciBDaGVjaywgQ2hlY2tfZGVmYXVsdDsKICB2YXIgaW5pdF9DaGVjayA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvQ2hlY2suanMiKCkgewogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBDaGVjayA9IHt9OwogICAgICBDaGVjay50eXBlT2YgPSB7fTsKICAgICAgQ2hlY2suZGVmaW5lZCA9IGZ1bmN0aW9uKG5hbWUsIHRlc3QpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdCh0ZXN0KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoZ2V0VW5kZWZpbmVkRXJyb3JNZXNzYWdlKG5hbWUpKTsKICAgICAgICB9CiAgICAgIH07CiAgICAgIENoZWNrLnR5cGVPZi5mdW5jID0gZnVuY3Rpb24obmFtZSwgdGVzdCkgewogICAgICAgIGlmICh0eXBlb2YgdGVzdCAhPT0gImZ1bmN0aW9uIikgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgIGdldEZhaWxlZFR5cGVFcnJvck1lc3NhZ2UodHlwZW9mIHRlc3QsICJmdW5jdGlvbiIsIG5hbWUpCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgfTsKICAgICAgQ2hlY2sudHlwZU9mLnN0cmluZyA9IGZ1bmN0aW9uKG5hbWUsIHRlc3QpIHsKICAgICAgICBpZiAodHlwZW9mIHRlc3QgIT09ICJzdHJpbmciKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgZ2V0RmFpbGVkVHlwZUVycm9yTWVzc2FnZSh0eXBlb2YgdGVzdCwgInN0cmluZyIsIG5hbWUpCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgfTsKICAgICAgQ2hlY2sudHlwZU9mLm51bWJlciA9IGZ1bmN0aW9uKG5hbWUsIHRlc3QpIHsKICAgICAgICBpZiAodHlwZW9mIHRlc3QgIT09ICJudW1iZXIiKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgZ2V0RmFpbGVkVHlwZUVycm9yTWVzc2FnZSh0eXBlb2YgdGVzdCwgIm51bWJlciIsIG5hbWUpCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgfTsKICAgICAgQ2hlY2sudHlwZU9mLm51bWJlci5sZXNzVGhhbiA9IGZ1bmN0aW9uKG5hbWUsIHRlc3QsIGxpbWl0KSB7CiAgICAgICAgQ2hlY2sudHlwZU9mLm51bWJlcihuYW1lLCB0ZXN0KTsKICAgICAgICBpZiAodGVzdCA+PSBsaW1pdCkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgIGBFeHBlY3RlZCAke25hbWV9IHRvIGJlIGxlc3MgdGhhbiAke2xpbWl0fSwgYWN0dWFsIHZhbHVlIHdhcyAke3Rlc3R9YAogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgIH07CiAgICAgIENoZWNrLnR5cGVPZi5udW1iZXIubGVzc1RoYW5PckVxdWFscyA9IGZ1bmN0aW9uKG5hbWUsIHRlc3QsIGxpbWl0KSB7CiAgICAgICAgQ2hlY2sudHlwZU9mLm51bWJlcihuYW1lLCB0ZXN0KTsKICAgICAgICBpZiAodGVzdCA+IGxpbWl0KSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgYEV4cGVjdGVkICR7bmFtZX0gdG8gYmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvICR7bGltaXR9LCBhY3R1YWwgdmFsdWUgd2FzICR7dGVzdH1gCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgfTsKICAgICAgQ2hlY2sudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbiA9IGZ1bmN0aW9uKG5hbWUsIHRlc3QsIGxpbWl0KSB7CiAgICAgICAgQ2hlY2sudHlwZU9mLm51bWJlcihuYW1lLCB0ZXN0KTsKICAgICAgICBpZiAodGVzdCA8PSBsaW1pdCkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgIGBFeHBlY3RlZCAke25hbWV9IHRvIGJlIGdyZWF0ZXIgdGhhbiAke2xpbWl0fSwgYWN0dWFsIHZhbHVlIHdhcyAke3Rlc3R9YAogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgIH07CiAgICAgIENoZWNrLnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscyA9IGZ1bmN0aW9uKG5hbWUsIHRlc3QsIGxpbWl0KSB7CiAgICAgICAgQ2hlY2sudHlwZU9mLm51bWJlcihuYW1lLCB0ZXN0KTsKICAgICAgICBpZiAodGVzdCA8IGxpbWl0KSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgYEV4cGVjdGVkICR7bmFtZX0gdG8gYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvICR7bGltaXR9LCBhY3R1YWwgdmFsdWUgd2FzICR7dGVzdH1gCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgfTsKICAgICAgQ2hlY2sudHlwZU9mLm9iamVjdCA9IGZ1bmN0aW9uKG5hbWUsIHRlc3QpIHsKICAgICAgICBpZiAodHlwZW9mIHRlc3QgIT09ICJvYmplY3QiKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgZ2V0RmFpbGVkVHlwZUVycm9yTWVzc2FnZSh0eXBlb2YgdGVzdCwgIm9iamVjdCIsIG5hbWUpCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgfTsKICAgICAgQ2hlY2sudHlwZU9mLmJvb2wgPSBmdW5jdGlvbihuYW1lLCB0ZXN0KSB7CiAgICAgICAgaWYgKHR5cGVvZiB0ZXN0ICE9PSAiYm9vbGVhbiIpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgICBnZXRGYWlsZWRUeXBlRXJyb3JNZXNzYWdlKHR5cGVvZiB0ZXN0LCAiYm9vbGVhbiIsIG5hbWUpCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgfTsKICAgICAgQ2hlY2sudHlwZU9mLmJpZ2ludCA9IGZ1bmN0aW9uKG5hbWUsIHRlc3QpIHsKICAgICAgICBpZiAodHlwZW9mIHRlc3QgIT09ICJiaWdpbnQiKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgZ2V0RmFpbGVkVHlwZUVycm9yTWVzc2FnZSh0eXBlb2YgdGVzdCwgImJpZ2ludCIsIG5hbWUpCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgfTsKICAgICAgQ2hlY2sudHlwZU9mLm51bWJlci5lcXVhbHMgPSBmdW5jdGlvbihuYW1lMSwgbmFtZTIsIHRlc3QxLCB0ZXN0MikgewogICAgICAgIENoZWNrLnR5cGVPZi5udW1iZXIobmFtZTEsIHRlc3QxKTsKICAgICAgICBDaGVjay50eXBlT2YubnVtYmVyKG5hbWUyLCB0ZXN0Mik7CiAgICAgICAgaWYgKHRlc3QxICE9PSB0ZXN0MikgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgIGAke25hbWUxfSBtdXN0IGJlIGVxdWFsIHRvICR7bmFtZTJ9LCB0aGUgYWN0dWFsIHZhbHVlcyBhcmUgJHt0ZXN0MX0gYW5kICR7dGVzdDJ9YAogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgIH07CiAgICAgIENoZWNrX2RlZmF1bHQgPSBDaGVjazsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2RlZmF1bHRWYWx1ZS5qcwogIGZ1bmN0aW9uIGRlZmF1bHRWYWx1ZShhMywgYikgewogICAgaWYgKGEzICE9PSB2b2lkIDAgJiYgYTMgIT09IG51bGwpIHsKICAgICAgcmV0dXJuIGEzOwogICAgfQogICAgcmV0dXJuIGI7CiAgfQogIHZhciBkZWZhdWx0VmFsdWVfZGVmYXVsdDsKICB2YXIgaW5pdF9kZWZhdWx0VmFsdWUgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2RlZmF1bHRWYWx1ZS5qcyIoKSB7CiAgICAgIGRlZmF1bHRWYWx1ZS5FTVBUWV9PQkpFQ1QgPSBPYmplY3QuZnJlZXplKHt9KTsKICAgICAgZGVmYXVsdFZhbHVlX2RlZmF1bHQgPSBkZWZhdWx0VmFsdWU7CiAgICB9CiAgfSk7CgogIC8vIG5vZGVfbW9kdWxlcy9tZXJzZW5uZS10d2lzdGVyL3NyYy9tZXJzZW5uZS10d2lzdGVyLmpzCiAgdmFyIHJlcXVpcmVfbWVyc2VubmVfdHdpc3RlciA9IF9fY29tbW9uSlMoewogICAgIm5vZGVfbW9kdWxlcy9tZXJzZW5uZS10d2lzdGVyL3NyYy9tZXJzZW5uZS10d2lzdGVyLmpzIihleHBvcnRzMiwgbW9kdWxlKSB7CiAgICAgIHZhciBNZXJzZW5uZVR3aXN0ZXIyID0gZnVuY3Rpb24oc2VlZCkgewogICAgICAgIGlmIChzZWVkID09IHZvaWQgMCkgewogICAgICAgICAgc2VlZCA9ICgvKiBAX19QVVJFX18gKi8gbmV3IERhdGUoKSkuZ2V0VGltZSgpOwogICAgICAgIH0KICAgICAgICB0aGlzLk4gPSA2MjQ7CiAgICAgICAgdGhpcy5NID0gMzk3OwogICAgICAgIHRoaXMuTUFUUklYX0EgPSAyNTY3NDgzNjE1OwogICAgICAgIHRoaXMuVVBQRVJfTUFTSyA9IDIxNDc0ODM2NDg7CiAgICAgICAgdGhpcy5MT1dFUl9NQVNLID0gMjE0NzQ4MzY0NzsKICAgICAgICB0aGlzLm10ID0gbmV3IEFycmF5KHRoaXMuTik7CiAgICAgICAgdGhpcy5tdGkgPSB0aGlzLk4gKyAxOwogICAgICAgIGlmIChzZWVkLmNvbnN0cnVjdG9yID09IEFycmF5KSB7CiAgICAgICAgICB0aGlzLmluaXRfYnlfYXJyYXkoc2VlZCwgc2VlZC5sZW5ndGgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLmluaXRfc2VlZChzZWVkKTsKICAgICAgICB9CiAgICAgIH07CiAgICAgIE1lcnNlbm5lVHdpc3RlcjIucHJvdG90eXBlLmluaXRfc2VlZCA9IGZ1bmN0aW9uKHMpIHsKICAgICAgICB0aGlzLm10WzBdID0gcyA+Pj4gMDsKICAgICAgICBmb3IgKHRoaXMubXRpID0gMTsgdGhpcy5tdGkgPCB0aGlzLk47IHRoaXMubXRpKyspIHsKICAgICAgICAgIHZhciBzID0gdGhpcy5tdFt0aGlzLm10aSAtIDFdIF4gdGhpcy5tdFt0aGlzLm10aSAtIDFdID4+PiAzMDsKICAgICAgICAgIHRoaXMubXRbdGhpcy5tdGldID0gKCgocyAmIDQyOTQ5MDE3NjApID4+PiAxNikgKiAxODEyNDMzMjUzIDw8IDE2KSArIChzICYgNjU1MzUpICogMTgxMjQzMzI1MyArIHRoaXMubXRpOwogICAgICAgICAgdGhpcy5tdFt0aGlzLm10aV0gPj4+PSAwOwogICAgICAgIH0KICAgICAgfTsKICAgICAgTWVyc2VubmVUd2lzdGVyMi5wcm90b3R5cGUuaW5pdF9ieV9hcnJheSA9IGZ1bmN0aW9uKGluaXRfa2V5LCBrZXlfbGVuZ3RoKSB7CiAgICAgICAgdmFyIGksIGosIGs7CiAgICAgICAgdGhpcy5pbml0X3NlZWQoMTk2NTAyMTgpOwogICAgICAgIGkgPSAxOwogICAgICAgIGogPSAwOwogICAgICAgIGsgPSB0aGlzLk4gPiBrZXlfbGVuZ3RoID8gdGhpcy5OIDoga2V5X2xlbmd0aDsKICAgICAgICBmb3IgKDsgazsgay0tKSB7CiAgICAgICAgICB2YXIgcyA9IHRoaXMubXRbaSAtIDFdIF4gdGhpcy5tdFtpIC0gMV0gPj4+IDMwOwogICAgICAgICAgdGhpcy5tdFtpXSA9ICh0aGlzLm10W2ldIF4gKCgocyAmIDQyOTQ5MDE3NjApID4+PiAxNikgKiAxNjY0NTI1IDw8IDE2KSArIChzICYgNjU1MzUpICogMTY2NDUyNSkgKyBpbml0X2tleVtqXSArIGo7CiAgICAgICAgICB0aGlzLm10W2ldID4+Pj0gMDsKICAgICAgICAgIGkrKzsKICAgICAgICAgIGorKzsKICAgICAgICAgIGlmIChpID49IHRoaXMuTikgewogICAgICAgICAgICB0aGlzLm10WzBdID0gdGhpcy5tdFt0aGlzLk4gLSAxXTsKICAgICAgICAgICAgaSA9IDE7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoaiA+PSBrZXlfbGVuZ3RoKQogICAgICAgICAgICBqID0gMDsKICAgICAgICB9CiAgICAgICAgZm9yIChrID0gdGhpcy5OIC0gMTsgazsgay0tKSB7CiAgICAgICAgICB2YXIgcyA9IHRoaXMubXRbaSAtIDFdIF4gdGhpcy5tdFtpIC0gMV0gPj4+IDMwOwogICAgICAgICAgdGhpcy5tdFtpXSA9ICh0aGlzLm10W2ldIF4gKCgocyAmIDQyOTQ5MDE3NjApID4+PiAxNikgKiAxNTY2MDgzOTQxIDw8IDE2KSArIChzICYgNjU1MzUpICogMTU2NjA4Mzk0MSkgLSBpOwogICAgICAgICAgdGhpcy5tdFtpXSA+Pj49IDA7CiAgICAgICAgICBpKys7CiAgICAgICAgICBpZiAoaSA+PSB0aGlzLk4pIHsKICAgICAgICAgICAgdGhpcy5tdFswXSA9IHRoaXMubXRbdGhpcy5OIC0gMV07CiAgICAgICAgICAgIGkgPSAxOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB0aGlzLm10WzBdID0gMjE0NzQ4MzY0ODsKICAgICAgfTsKICAgICAgTWVyc2VubmVUd2lzdGVyMi5wcm90b3R5cGUucmFuZG9tX2ludCA9IGZ1bmN0aW9uKCkgewogICAgICAgIHZhciB5OwogICAgICAgIHZhciBtYWcwMSA9IG5ldyBBcnJheSgwLCB0aGlzLk1BVFJJWF9BKTsKICAgICAgICBpZiAodGhpcy5tdGkgPj0gdGhpcy5OKSB7CiAgICAgICAgICB2YXIga2s7CiAgICAgICAgICBpZiAodGhpcy5tdGkgPT0gdGhpcy5OICsgMSkKICAgICAgICAgICAgdGhpcy5pbml0X3NlZWQoNTQ4OSk7CiAgICAgICAgICBmb3IgKGtrID0gMDsga2sgPCB0aGlzLk4gLSB0aGlzLk07IGtrKyspIHsKICAgICAgICAgICAgeSA9IHRoaXMubXRba2tdICYgdGhpcy5VUFBFUl9NQVNLIHwgdGhpcy5tdFtrayArIDFdICYgdGhpcy5MT1dFUl9NQVNLOwogICAgICAgICAgICB0aGlzLm10W2trXSA9IHRoaXMubXRba2sgKyB0aGlzLk1dIF4geSA+Pj4gMSBeIG1hZzAxW3kgJiAxXTsKICAgICAgICAgIH0KICAgICAgICAgIGZvciAoOyBrayA8IHRoaXMuTiAtIDE7IGtrKyspIHsKICAgICAgICAgICAgeSA9IHRoaXMubXRba2tdICYgdGhpcy5VUFBFUl9NQVNLIHwgdGhpcy5tdFtrayArIDFdICYgdGhpcy5MT1dFUl9NQVNLOwogICAgICAgICAgICB0aGlzLm10W2trXSA9IHRoaXMubXRba2sgKyAodGhpcy5NIC0gdGhpcy5OKV0gXiB5ID4+PiAxIF4gbWFnMDFbeSAmIDFdOwogICAgICAgICAgfQogICAgICAgICAgeSA9IHRoaXMubXRbdGhpcy5OIC0gMV0gJiB0aGlzLlVQUEVSX01BU0sgfCB0aGlzLm10WzBdICYgdGhpcy5MT1dFUl9NQVNLOwogICAgICAgICAgdGhpcy5tdFt0aGlzLk4gLSAxXSA9IHRoaXMubXRbdGhpcy5NIC0gMV0gXiB5ID4+PiAxIF4gbWFnMDFbeSAmIDFdOwogICAgICAgICAgdGhpcy5tdGkgPSAwOwogICAgICAgIH0KICAgICAgICB5ID0gdGhpcy5tdFt0aGlzLm10aSsrXTsKICAgICAgICB5IF49IHkgPj4+IDExOwogICAgICAgIHkgXj0geSA8PCA3ICYgMjYzNjkyODY0MDsKICAgICAgICB5IF49IHkgPDwgMTUgJiA0MDIyNzMwNzUyOwogICAgICAgIHkgXj0geSA+Pj4gMTg7CiAgICAgICAgcmV0dXJuIHkgPj4+IDA7CiAgICAgIH07CiAgICAgIE1lcnNlbm5lVHdpc3RlcjIucHJvdG90eXBlLnJhbmRvbV9pbnQzMSA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiB0aGlzLnJhbmRvbV9pbnQoKSA+Pj4gMTsKICAgICAgfTsKICAgICAgTWVyc2VubmVUd2lzdGVyMi5wcm90b3R5cGUucmFuZG9tX2luY2wgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gdGhpcy5yYW5kb21faW50KCkgKiAoMSAvIDQyOTQ5NjcyOTUpOwogICAgICB9OwogICAgICBNZXJzZW5uZVR3aXN0ZXIyLnByb3RvdHlwZS5yYW5kb20gPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gdGhpcy5yYW5kb21faW50KCkgKiAoMSAvIDQyOTQ5NjcyOTYpOwogICAgICB9OwogICAgICBNZXJzZW5uZVR3aXN0ZXIyLnByb3RvdHlwZS5yYW5kb21fZXhjbCA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiAodGhpcy5yYW5kb21faW50KCkgKyAwLjUpICogKDEgLyA0Mjk0OTY3Mjk2KTsKICAgICAgfTsKICAgICAgTWVyc2VubmVUd2lzdGVyMi5wcm90b3R5cGUucmFuZG9tX2xvbmcgPSBmdW5jdGlvbigpIHsKICAgICAgICB2YXIgYTMgPSB0aGlzLnJhbmRvbV9pbnQoKSA+Pj4gNSwgYiA9IHRoaXMucmFuZG9tX2ludCgpID4+PiA2OwogICAgICAgIHJldHVybiAoYTMgKiA2NzEwODg2NCArIGIpICogKDEgLyA5MDA3MTk5MjU0NzQwOTkyKTsKICAgICAgfTsKICAgICAgbW9kdWxlLmV4cG9ydHMgPSBNZXJzZW5uZVR3aXN0ZXIyOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvTWF0aC5qcwogIHZhciBpbXBvcnRfbWVyc2VubmVfdHdpc3RlciwgQ2VzaXVtTWF0aCwgZmFjdG9yaWFscywgcmFuZG9tTnVtYmVyR2VuZXJhdG9yLCBNYXRoX2RlZmF1bHQ7CiAgdmFyIGluaXRfTWF0aCA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvTWF0aC5qcyIoKSB7CiAgICAgIGltcG9ydF9tZXJzZW5uZV90d2lzdGVyID0gX190b0VTTShyZXF1aXJlX21lcnNlbm5lX3R3aXN0ZXIoKSwgMSk7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgQ2VzaXVtTWF0aCA9IHt9OwogICAgICBDZXNpdW1NYXRoLkVQU0lMT04xID0gMC4xOwogICAgICBDZXNpdW1NYXRoLkVQU0lMT04yID0gMC4wMTsKICAgICAgQ2VzaXVtTWF0aC5FUFNJTE9OMyA9IDFlLTM7CiAgICAgIENlc2l1bU1hdGguRVBTSUxPTjQgPSAxZS00OwogICAgICBDZXNpdW1NYXRoLkVQU0lMT041ID0gMWUtNTsKICAgICAgQ2VzaXVtTWF0aC5FUFNJTE9ONiA9IDFlLTY7CiAgICAgIENlc2l1bU1hdGguRVBTSUxPTjcgPSAxZS03OwogICAgICBDZXNpdW1NYXRoLkVQU0lMT044ID0gMWUtODsKICAgICAgQ2VzaXVtTWF0aC5FUFNJTE9OOSA9IDFlLTk7CiAgICAgIENlc2l1bU1hdGguRVBTSUxPTjEwID0gMWUtMTA7CiAgICAgIENlc2l1bU1hdGguRVBTSUxPTjExID0gMWUtMTE7CiAgICAgIENlc2l1bU1hdGguRVBTSUxPTjEyID0gMWUtMTI7CiAgICAgIENlc2l1bU1hdGguRVBTSUxPTjEzID0gMWUtMTM7CiAgICAgIENlc2l1bU1hdGguRVBTSUxPTjE0ID0gMWUtMTQ7CiAgICAgIENlc2l1bU1hdGguRVBTSUxPTjE1ID0gMWUtMTU7CiAgICAgIENlc2l1bU1hdGguRVBTSUxPTjE2ID0gMWUtMTY7CiAgICAgIENlc2l1bU1hdGguRVBTSUxPTjE3ID0gMWUtMTc7CiAgICAgIENlc2l1bU1hdGguRVBTSUxPTjE4ID0gMWUtMTg7CiAgICAgIENlc2l1bU1hdGguRVBTSUxPTjE5ID0gMWUtMTk7CiAgICAgIENlc2l1bU1hdGguRVBTSUxPTjIwID0gMWUtMjA7CiAgICAgIENlc2l1bU1hdGguRVBTSUxPTjIxID0gMWUtMjE7CiAgICAgIENlc2l1bU1hdGguR1JBVklUQVRJT05BTFBBUkFNRVRFUiA9IDM5ODYwMDQ0MThlNTsKICAgICAgQ2VzaXVtTWF0aC5TT0xBUl9SQURJVVMgPSA2OTU1ZTU7CiAgICAgIENlc2l1bU1hdGguTFVOQVJfUkFESVVTID0gMTczNzQwMDsKICAgICAgQ2VzaXVtTWF0aC5TSVhUWV9GT1VSX0tJTE9CWVRFUyA9IDY0ICogMTAyNDsKICAgICAgQ2VzaXVtTWF0aC5GT1VSX0dJR0FCWVRFUyA9IDQgKiAxMDI0ICogMTAyNCAqIDEwMjQ7CiAgICAgIENlc2l1bU1hdGguc2lnbiA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KE1hdGguc2lnbiwgZnVuY3Rpb24gc2lnbih2YWx1ZSkgewogICAgICAgIHZhbHVlID0gK3ZhbHVlOwogICAgICAgIGlmICh2YWx1ZSA9PT0gMCB8fCB2YWx1ZSAhPT0gdmFsdWUpIHsKICAgICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHZhbHVlID4gMCA/IDEgOiAtMTsKICAgICAgfSk7CiAgICAgIENlc2l1bU1hdGguc2lnbk5vdFplcm8gPSBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgIHJldHVybiB2YWx1ZSA8IDAgPyAtMSA6IDE7CiAgICAgIH07CiAgICAgIENlc2l1bU1hdGgudG9TTm9ybSA9IGZ1bmN0aW9uKHZhbHVlLCByYW5nZU1heGltdW0pIHsKICAgICAgICByYW5nZU1heGltdW0gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChyYW5nZU1heGltdW0sIDI1NSk7CiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoCiAgICAgICAgICAoQ2VzaXVtTWF0aC5jbGFtcCh2YWx1ZSwgLTEsIDEpICogMC41ICsgMC41KSAqIHJhbmdlTWF4aW11bQogICAgICAgICk7CiAgICAgIH07CiAgICAgIENlc2l1bU1hdGguZnJvbVNOb3JtID0gZnVuY3Rpb24odmFsdWUsIHJhbmdlTWF4aW11bSkgewogICAgICAgIHJhbmdlTWF4aW11bSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHJhbmdlTWF4aW11bSwgMjU1KTsKICAgICAgICByZXR1cm4gQ2VzaXVtTWF0aC5jbGFtcCh2YWx1ZSwgMCwgcmFuZ2VNYXhpbXVtKSAvIHJhbmdlTWF4aW11bSAqIDIgLSAxOwogICAgICB9OwogICAgICBDZXNpdW1NYXRoLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uKHZhbHVlLCByYW5nZU1pbmltdW0sIHJhbmdlTWF4aW11bSkgewogICAgICAgIHJhbmdlTWF4aW11bSA9IE1hdGgubWF4KHJhbmdlTWF4aW11bSAtIHJhbmdlTWluaW11bSwgMCk7CiAgICAgICAgcmV0dXJuIHJhbmdlTWF4aW11bSA9PT0gMCA/IDAgOiBDZXNpdW1NYXRoLmNsYW1wKCh2YWx1ZSAtIHJhbmdlTWluaW11bSkgLyByYW5nZU1heGltdW0sIDAsIDEpOwogICAgICB9OwogICAgICBDZXNpdW1NYXRoLnNpbmggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChNYXRoLnNpbmgsIGZ1bmN0aW9uIHNpbmgodmFsdWUpIHsKICAgICAgICByZXR1cm4gKE1hdGguZXhwKHZhbHVlKSAtIE1hdGguZXhwKC12YWx1ZSkpIC8gMjsKICAgICAgfSk7CiAgICAgIENlc2l1bU1hdGguY29zaCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KE1hdGguY29zaCwgZnVuY3Rpb24gY29zaCh2YWx1ZSkgewogICAgICAgIHJldHVybiAoTWF0aC5leHAodmFsdWUpICsgTWF0aC5leHAoLXZhbHVlKSkgLyAyOwogICAgICB9KTsKICAgICAgQ2VzaXVtTWF0aC5sZXJwID0gZnVuY3Rpb24ocCwgcSwgdGltZSkgewogICAgICAgIHJldHVybiAoMSAtIHRpbWUpICogcCArIHRpbWUgKiBxOwogICAgICB9OwogICAgICBDZXNpdW1NYXRoLlBJID0gTWF0aC5QSTsKICAgICAgQ2VzaXVtTWF0aC5PTkVfT1ZFUl9QSSA9IDEgLyBNYXRoLlBJOwogICAgICBDZXNpdW1NYXRoLlBJX09WRVJfVFdPID0gTWF0aC5QSSAvIDI7CiAgICAgIENlc2l1bU1hdGguUElfT1ZFUl9USFJFRSA9IE1hdGguUEkgLyAzOwogICAgICBDZXNpdW1NYXRoLlBJX09WRVJfRk9VUiA9IE1hdGguUEkgLyA0OwogICAgICBDZXNpdW1NYXRoLlBJX09WRVJfU0lYID0gTWF0aC5QSSAvIDY7CiAgICAgIENlc2l1bU1hdGguVEhSRUVfUElfT1ZFUl9UV08gPSAzICogTWF0aC5QSSAvIDI7CiAgICAgIENlc2l1bU1hdGguVFdPX1BJID0gMiAqIE1hdGguUEk7CiAgICAgIENlc2l1bU1hdGguT05FX09WRVJfVFdPX1BJID0gMSAvICgyICogTWF0aC5QSSk7CiAgICAgIENlc2l1bU1hdGguUkFESUFOU19QRVJfREVHUkVFID0gTWF0aC5QSSAvIDE4MDsKICAgICAgQ2VzaXVtTWF0aC5ERUdSRUVTX1BFUl9SQURJQU4gPSAxODAgLyBNYXRoLlBJOwogICAgICBDZXNpdW1NYXRoLlJBRElBTlNfUEVSX0FSQ1NFQ09ORCA9IENlc2l1bU1hdGguUkFESUFOU19QRVJfREVHUkVFIC8gMzYwMDsKICAgICAgQ2VzaXVtTWF0aC50b1JhZGlhbnMgPSBmdW5jdGlvbihkZWdyZWVzKSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoZGVncmVlcykpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJkZWdyZWVzIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZGVncmVlcyAqIENlc2l1bU1hdGguUkFESUFOU19QRVJfREVHUkVFOwogICAgICB9OwogICAgICBDZXNpdW1NYXRoLnRvRGVncmVlcyA9IGZ1bmN0aW9uKHJhZGlhbnMpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyYWRpYW5zKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInJhZGlhbnMgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIHJldHVybiByYWRpYW5zICogQ2VzaXVtTWF0aC5ERUdSRUVTX1BFUl9SQURJQU47CiAgICAgIH07CiAgICAgIENlc2l1bU1hdGguY29udmVydExvbmdpdHVkZVJhbmdlID0gZnVuY3Rpb24oYW5nbGUpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChhbmdsZSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJhbmdsZSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgdHdvUGkgPSBDZXNpdW1NYXRoLlRXT19QSTsKICAgICAgICBjb25zdCBzaW1wbGlmaWVkID0gYW5nbGUgLSBNYXRoLmZsb29yKGFuZ2xlIC8gdHdvUGkpICogdHdvUGk7CiAgICAgICAgaWYgKHNpbXBsaWZpZWQgPCAtTWF0aC5QSSkgewogICAgICAgICAgcmV0dXJuIHNpbXBsaWZpZWQgKyB0d29QaTsKICAgICAgICB9CiAgICAgICAgaWYgKHNpbXBsaWZpZWQgPj0gTWF0aC5QSSkgewogICAgICAgICAgcmV0dXJuIHNpbXBsaWZpZWQgLSB0d29QaTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHNpbXBsaWZpZWQ7CiAgICAgIH07CiAgICAgIENlc2l1bU1hdGguY2xhbXBUb0xhdGl0dWRlUmFuZ2UgPSBmdW5jdGlvbihhbmdsZSkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGFuZ2xlKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImFuZ2xlIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gQ2VzaXVtTWF0aC5jbGFtcCgKICAgICAgICAgIGFuZ2xlLAogICAgICAgICAgLTEgKiBDZXNpdW1NYXRoLlBJX09WRVJfVFdPLAogICAgICAgICAgQ2VzaXVtTWF0aC5QSV9PVkVSX1RXTwogICAgICAgICk7CiAgICAgIH07CiAgICAgIENlc2l1bU1hdGgubmVnYXRpdmVQaVRvUGkgPSBmdW5jdGlvbihhbmdsZSkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGFuZ2xlKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImFuZ2xlIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoYW5nbGUgPj0gLUNlc2l1bU1hdGguUEkgJiYgYW5nbGUgPD0gQ2VzaXVtTWF0aC5QSSkgewogICAgICAgICAgcmV0dXJuIGFuZ2xlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gQ2VzaXVtTWF0aC56ZXJvVG9Ud29QaShhbmdsZSArIENlc2l1bU1hdGguUEkpIC0gQ2VzaXVtTWF0aC5QSTsKICAgICAgfTsKICAgICAgQ2VzaXVtTWF0aC56ZXJvVG9Ud29QaSA9IGZ1bmN0aW9uKGFuZ2xlKSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoYW5nbGUpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYW5nbGUgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmIChhbmdsZSA+PSAwICYmIGFuZ2xlIDw9IENlc2l1bU1hdGguVFdPX1BJKSB7CiAgICAgICAgICByZXR1cm4gYW5nbGU7CiAgICAgICAgfQogICAgICAgIGNvbnN0IG1vZCA9IENlc2l1bU1hdGgubW9kKGFuZ2xlLCBDZXNpdW1NYXRoLlRXT19QSSk7CiAgICAgICAgaWYgKE1hdGguYWJzKG1vZCkgPCBDZXNpdW1NYXRoLkVQU0lMT04xNCAmJiBNYXRoLmFicyhhbmdsZSkgPiBDZXNpdW1NYXRoLkVQU0lMT04xNCkgewogICAgICAgICAgcmV0dXJuIENlc2l1bU1hdGguVFdPX1BJOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbW9kOwogICAgICB9OwogICAgICBDZXNpdW1NYXRoLm1vZCA9IGZ1bmN0aW9uKG0sIG4pIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChtKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoIm0gaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KG4pKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgibiBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKG4gPT09IDApIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJkaXZpc29yIGNhbm5vdCBiZSAwLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoQ2VzaXVtTWF0aC5zaWduKG0pID09PSBDZXNpdW1NYXRoLnNpZ24obikgJiYgTWF0aC5hYnMobSkgPCBNYXRoLmFicyhuKSkgewogICAgICAgICAgcmV0dXJuIG07CiAgICAgICAgfQogICAgICAgIHJldHVybiAobSAlIG4gKyBuKSAlIG47CiAgICAgIH07CiAgICAgIENlc2l1bU1hdGguZXF1YWxzRXBzaWxvbiA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCByZWxhdGl2ZUVwc2lsb24sIGFic29sdXRlRXBzaWxvbikgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGxlZnQpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgibGVmdCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmlnaHQpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgicmlnaHQgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIHJlbGF0aXZlRXBzaWxvbiA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHJlbGF0aXZlRXBzaWxvbiwgMCk7CiAgICAgICAgYWJzb2x1dGVFcHNpbG9uID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoYWJzb2x1dGVFcHNpbG9uLCByZWxhdGl2ZUVwc2lsb24pOwogICAgICAgIGNvbnN0IGFic0RpZmYgPSBNYXRoLmFicyhsZWZ0IC0gcmlnaHQpOwogICAgICAgIHJldHVybiBhYnNEaWZmIDw9IGFic29sdXRlRXBzaWxvbiB8fCBhYnNEaWZmIDw9IHJlbGF0aXZlRXBzaWxvbiAqIE1hdGgubWF4KE1hdGguYWJzKGxlZnQpLCBNYXRoLmFicyhyaWdodCkpOwogICAgICB9OwogICAgICBDZXNpdW1NYXRoLmxlc3NUaGFuID0gZnVuY3Rpb24obGVmdCwgcmlnaHQsIGFic29sdXRlRXBzaWxvbikgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGxlZnQpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiZmlyc3QgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJpZ2h0KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInNlY29uZCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoYWJzb2x1dGVFcHNpbG9uKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImFic29sdXRlRXBzaWxvbiBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGxlZnQgLSByaWdodCA8IC1hYnNvbHV0ZUVwc2lsb247CiAgICAgIH07CiAgICAgIENlc2l1bU1hdGgubGVzc1RoYW5PckVxdWFscyA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBhYnNvbHV0ZUVwc2lsb24pIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChsZWZ0KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImZpcnN0IGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyaWdodCkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJzZWNvbmQgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGFic29sdXRlRXBzaWxvbikpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJhYnNvbHV0ZUVwc2lsb24gaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIHJldHVybiBsZWZ0IC0gcmlnaHQgPCBhYnNvbHV0ZUVwc2lsb247CiAgICAgIH07CiAgICAgIENlc2l1bU1hdGguZ3JlYXRlclRoYW4gPSBmdW5jdGlvbihsZWZ0LCByaWdodCwgYWJzb2x1dGVFcHNpbG9uKSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQobGVmdCkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJmaXJzdCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmlnaHQpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgic2Vjb25kIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChhYnNvbHV0ZUVwc2lsb24pKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYWJzb2x1dGVFcHNpbG9uIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbGVmdCAtIHJpZ2h0ID4gYWJzb2x1dGVFcHNpbG9uOwogICAgICB9OwogICAgICBDZXNpdW1NYXRoLmdyZWF0ZXJUaGFuT3JFcXVhbHMgPSBmdW5jdGlvbihsZWZ0LCByaWdodCwgYWJzb2x1dGVFcHNpbG9uKSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQobGVmdCkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJmaXJzdCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmlnaHQpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgic2Vjb25kIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChhYnNvbHV0ZUVwc2lsb24pKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYWJzb2x1dGVFcHNpbG9uIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbGVmdCAtIHJpZ2h0ID4gLWFic29sdXRlRXBzaWxvbjsKICAgICAgfTsKICAgICAgZmFjdG9yaWFscyA9IFsxXTsKICAgICAgQ2VzaXVtTWF0aC5mYWN0b3JpYWwgPSBmdW5jdGlvbihuKSB7CiAgICAgICAgaWYgKHR5cGVvZiBuICE9PSAibnVtYmVyIiB8fCBuIDwgMCkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgICJBIG51bWJlciBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gMCBpcyByZXF1aXJlZC4iCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBjb25zdCBsZW5ndGggPSBmYWN0b3JpYWxzLmxlbmd0aDsKICAgICAgICBpZiAobiA+PSBsZW5ndGgpIHsKICAgICAgICAgIGxldCBzdW0gPSBmYWN0b3JpYWxzW2xlbmd0aCAtIDFdOwogICAgICAgICAgZm9yIChsZXQgaSA9IGxlbmd0aDsgaSA8PSBuOyBpKyspIHsKICAgICAgICAgICAgY29uc3QgbmV4dCA9IHN1bSAqIGk7CiAgICAgICAgICAgIGZhY3RvcmlhbHMucHVzaChuZXh0KTsKICAgICAgICAgICAgc3VtID0gbmV4dDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZhY3RvcmlhbHNbbl07CiAgICAgIH07CiAgICAgIENlc2l1bU1hdGguaW5jcmVtZW50V3JhcCA9IGZ1bmN0aW9uKG4sIG1heGltdW1WYWx1ZSwgbWluaW11bVZhbHVlKSB7CiAgICAgICAgbWluaW11bVZhbHVlID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQobWluaW11bVZhbHVlLCAwKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChuKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoIm4gaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmIChtYXhpbXVtVmFsdWUgPD0gbWluaW11bVZhbHVlKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgibWF4aW11bVZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuIG1pbmltdW1WYWx1ZS4iKTsKICAgICAgICB9CiAgICAgICAgKytuOwogICAgICAgIGlmIChuID4gbWF4aW11bVZhbHVlKSB7CiAgICAgICAgICBuID0gbWluaW11bVZhbHVlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbjsKICAgICAgfTsKICAgICAgQ2VzaXVtTWF0aC5pc1Bvd2VyT2ZUd28gPSBmdW5jdGlvbihuKSB7CiAgICAgICAgaWYgKHR5cGVvZiBuICE9PSAibnVtYmVyIiB8fCBuIDwgMCB8fCBuID4gNDI5NDk2NzI5NSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoIkEgbnVtYmVyIGJldHdlZW4gMCBhbmQgKDJeMzIpLTEgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIHJldHVybiBuICE9PSAwICYmIChuICYgbiAtIDEpID09PSAwOwogICAgICB9OwogICAgICBDZXNpdW1NYXRoLm5leHRQb3dlck9mVHdvID0gZnVuY3Rpb24obikgewogICAgICAgIGlmICh0eXBlb2YgbiAhPT0gIm51bWJlciIgfHwgbiA8IDAgfHwgbiA+IDIxNDc0ODM2NDgpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJBIG51bWJlciBiZXR3ZWVuIDAgYW5kIDJeMzEgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIC0tbjsKICAgICAgICBuIHw9IG4gPj4gMTsKICAgICAgICBuIHw9IG4gPj4gMjsKICAgICAgICBuIHw9IG4gPj4gNDsKICAgICAgICBuIHw9IG4gPj4gODsKICAgICAgICBuIHw9IG4gPj4gMTY7CiAgICAgICAgKytuOwogICAgICAgIHJldHVybiBuOwogICAgICB9OwogICAgICBDZXNpdW1NYXRoLnByZXZpb3VzUG93ZXJPZlR3byA9IGZ1bmN0aW9uKG4pIHsKICAgICAgICBpZiAodHlwZW9mIG4gIT09ICJudW1iZXIiIHx8IG4gPCAwIHx8IG4gPiA0Mjk0OTY3Mjk1KSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiQSBudW1iZXIgYmV0d2VlbiAwIGFuZCAoMl4zMiktMSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgbiB8PSBuID4+IDE7CiAgICAgICAgbiB8PSBuID4+IDI7CiAgICAgICAgbiB8PSBuID4+IDQ7CiAgICAgICAgbiB8PSBuID4+IDg7CiAgICAgICAgbiB8PSBuID4+IDE2OwogICAgICAgIG4gfD0gbiA+PiAzMjsKICAgICAgICBuID0gKG4gPj4+IDApIC0gKG4gPj4+IDEpOwogICAgICAgIHJldHVybiBuOwogICAgICB9OwogICAgICBDZXNpdW1NYXRoLmNsYW1wID0gZnVuY3Rpb24odmFsdWUsIG1pbjMsIG1heDMpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoInZhbHVlIiwgdmFsdWUpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigibWluIiwgbWluMyk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJtYXgiLCBtYXgzKTsKICAgICAgICByZXR1cm4gdmFsdWUgPCBtaW4zID8gbWluMyA6IHZhbHVlID4gbWF4MyA/IG1heDMgOiB2YWx1ZTsKICAgICAgfTsKICAgICAgcmFuZG9tTnVtYmVyR2VuZXJhdG9yID0gbmV3IGltcG9ydF9tZXJzZW5uZV90d2lzdGVyLmRlZmF1bHQoKTsKICAgICAgQ2VzaXVtTWF0aC5zZXRSYW5kb21OdW1iZXJTZWVkID0gZnVuY3Rpb24oc2VlZCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHNlZWQpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgic2VlZCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgcmFuZG9tTnVtYmVyR2VuZXJhdG9yID0gbmV3IGltcG9ydF9tZXJzZW5uZV90d2lzdGVyLmRlZmF1bHQoc2VlZCk7CiAgICAgIH07CiAgICAgIENlc2l1bU1hdGgubmV4dFJhbmRvbU51bWJlciA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiByYW5kb21OdW1iZXJHZW5lcmF0b3IucmFuZG9tKCk7CiAgICAgIH07CiAgICAgIENlc2l1bU1hdGgucmFuZG9tQmV0d2VlbiA9IGZ1bmN0aW9uKG1pbjMsIG1heDMpIHsKICAgICAgICByZXR1cm4gQ2VzaXVtTWF0aC5uZXh0UmFuZG9tTnVtYmVyKCkgKiAobWF4MyAtIG1pbjMpICsgbWluMzsKICAgICAgfTsKICAgICAgQ2VzaXVtTWF0aC5hY29zQ2xhbXBlZCA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQodmFsdWUpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgidmFsdWUgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIHJldHVybiBNYXRoLmFjb3MoQ2VzaXVtTWF0aC5jbGFtcCh2YWx1ZSwgLTEsIDEpKTsKICAgICAgfTsKICAgICAgQ2VzaXVtTWF0aC5hc2luQ2xhbXBlZCA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQodmFsdWUpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgidmFsdWUgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIHJldHVybiBNYXRoLmFzaW4oQ2VzaXVtTWF0aC5jbGFtcCh2YWx1ZSwgLTEsIDEpKTsKICAgICAgfTsKICAgICAgQ2VzaXVtTWF0aC5jaG9yZExlbmd0aCA9IGZ1bmN0aW9uKGFuZ2xlLCByYWRpdXMpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChhbmdsZSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJhbmdsZSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmFkaXVzKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInJhZGl1cyBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIDIgKiByYWRpdXMgKiBNYXRoLnNpbihhbmdsZSAqIDAuNSk7CiAgICAgIH07CiAgICAgIENlc2l1bU1hdGgubG9nQmFzZSA9IGZ1bmN0aW9uKG51bWJlciwgYmFzZSkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KG51bWJlcikpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJudW1iZXIgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGJhc2UpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYmFzZSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIE1hdGgubG9nKG51bWJlcikgLyBNYXRoLmxvZyhiYXNlKTsKICAgICAgfTsKICAgICAgQ2VzaXVtTWF0aC5jYnJ0ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoTWF0aC5jYnJ0LCBmdW5jdGlvbiBjYnJ0KG51bWJlcikgewogICAgICAgIGNvbnN0IHJlc3VsdCA9IE1hdGgucG93KE1hdGguYWJzKG51bWJlciksIDEgLyAzKTsKICAgICAgICByZXR1cm4gbnVtYmVyIDwgMCA/IC1yZXN1bHQgOiByZXN1bHQ7CiAgICAgIH0pOwogICAgICBDZXNpdW1NYXRoLmxvZzIgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChNYXRoLmxvZzIsIGZ1bmN0aW9uIGxvZzIobnVtYmVyKSB7CiAgICAgICAgcmV0dXJuIE1hdGgubG9nKG51bWJlcikgKiBNYXRoLkxPRzJFOwogICAgICB9KTsKICAgICAgQ2VzaXVtTWF0aC5mb2cgPSBmdW5jdGlvbihkaXN0YW5jZVRvQ2FtZXJhLCBkZW5zaXR5KSB7CiAgICAgICAgY29uc3Qgc2NhbGFyID0gZGlzdGFuY2VUb0NhbWVyYSAqIGRlbnNpdHk7CiAgICAgICAgcmV0dXJuIDEgLSBNYXRoLmV4cCgtKHNjYWxhciAqIHNjYWxhcikpOwogICAgICB9OwogICAgICBDZXNpdW1NYXRoLmZhc3RBcHByb3hpbWF0ZUF0YW4gPSBmdW5jdGlvbih4KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJ4IiwgeCk7CiAgICAgICAgcmV0dXJuIHggKiAoLTAuMTc4NCAqIE1hdGguYWJzKHgpIC0gMC4wNjYzICogeCAqIHggKyAxLjAzMDEpOwogICAgICB9OwogICAgICBDZXNpdW1NYXRoLmZhc3RBcHByb3hpbWF0ZUF0YW4yID0gZnVuY3Rpb24oeCwgeSkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigieCIsIHgpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigieSIsIHkpOwogICAgICAgIGxldCBvcHBvc2l0ZTsKICAgICAgICBsZXQgdCA9IE1hdGguYWJzKHgpOwogICAgICAgIG9wcG9zaXRlID0gTWF0aC5hYnMoeSk7CiAgICAgICAgY29uc3QgYWRqYWNlbnQgPSBNYXRoLm1heCh0LCBvcHBvc2l0ZSk7CiAgICAgICAgb3Bwb3NpdGUgPSBNYXRoLm1pbih0LCBvcHBvc2l0ZSk7CiAgICAgICAgY29uc3Qgb3Bwb3NpdGVPdmVyQWRqYWNlbnQgPSBvcHBvc2l0ZSAvIGFkamFjZW50OwogICAgICAgIGlmIChpc05hTihvcHBvc2l0ZU92ZXJBZGphY2VudCkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJlaXRoZXIgeCBvciB5IG11c3QgYmUgbm9uemVybyIpOwogICAgICAgIH0KICAgICAgICB0ID0gQ2VzaXVtTWF0aC5mYXN0QXBwcm94aW1hdGVBdGFuKG9wcG9zaXRlT3ZlckFkamFjZW50KTsKICAgICAgICB0ID0gTWF0aC5hYnMoeSkgPiBNYXRoLmFicyh4KSA/IENlc2l1bU1hdGguUElfT1ZFUl9UV08gLSB0IDogdDsKICAgICAgICB0ID0geCA8IDAgPyBDZXNpdW1NYXRoLlBJIC0gdCA6IHQ7CiAgICAgICAgdCA9IHkgPCAwID8gLXQgOiB0OwogICAgICAgIHJldHVybiB0OwogICAgICB9OwogICAgICBNYXRoX2RlZmF1bHQgPSBDZXNpdW1NYXRoOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvQ2FydGVzaWFuMy5qcwogIGZ1bmN0aW9uIENhcnRlc2lhbjMoeCwgeSwgeikgewogICAgdGhpcy54ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoeCwgMCk7CiAgICB0aGlzLnkgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh5LCAwKTsKICAgIHRoaXMueiA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHosIDApOwogIH0KICB2YXIgZGlzdGFuY2VTY3JhdGNoLCBsZXJwU2NyYXRjaCwgYW5nbGVCZXR3ZWVuU2NyYXRjaCwgYW5nbGVCZXR3ZWVuU2NyYXRjaDIsIG1vc3RPcnRob2dvbmFsQXhpc1NjcmF0Y2gsIHNjcmF0Y2hOLCBzY3JhdGNoSywgQ2FydGVzaWFuM19kZWZhdWx0OwogIHZhciBpbml0X0NhcnRlc2lhbjMgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0NhcnRlc2lhbjMuanMiKCkgewogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBDYXJ0ZXNpYW4zLmZyb21TcGhlcmljYWwgPSBmdW5jdGlvbihzcGhlcmljYWwsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgic3BoZXJpY2FsIiwgc3BoZXJpY2FsKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQ2FydGVzaWFuMygpOwogICAgICAgIH0KICAgICAgICBjb25zdCBjbG9jayA9IHNwaGVyaWNhbC5jbG9jazsKICAgICAgICBjb25zdCBjb25lID0gc3BoZXJpY2FsLmNvbmU7CiAgICAgICAgY29uc3QgbWFnbml0dWRlID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3BoZXJpY2FsLm1hZ25pdHVkZSwgMSk7CiAgICAgICAgY29uc3QgcmFkaWFsID0gbWFnbml0dWRlICogTWF0aC5zaW4oY29uZSk7CiAgICAgICAgcmVzdWx0LnggPSByYWRpYWwgKiBNYXRoLmNvcyhjbG9jayk7CiAgICAgICAgcmVzdWx0LnkgPSByYWRpYWwgKiBNYXRoLnNpbihjbG9jayk7CiAgICAgICAgcmVzdWx0LnogPSBtYWduaXR1ZGUgKiBNYXRoLmNvcyhjb25lKTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4zLmZyb21FbGVtZW50cyA9IGZ1bmN0aW9uKHgsIHksIHosIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgQ2FydGVzaWFuMyh4LCB5LCB6KTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LnggPSB4OwogICAgICAgIHJlc3VsdC55ID0geTsKICAgICAgICByZXN1bHQueiA9IHo7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMy5jbG9uZSA9IGZ1bmN0aW9uKGNhcnRlc2lhbjExLCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChjYXJ0ZXNpYW4xMSkpIHsKICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgQ2FydGVzaWFuMyhjYXJ0ZXNpYW4xMS54LCBjYXJ0ZXNpYW4xMS55LCBjYXJ0ZXNpYW4xMS56KTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LnggPSBjYXJ0ZXNpYW4xMS54OwogICAgICAgIHJlc3VsdC55ID0gY2FydGVzaWFuMTEueTsKICAgICAgICByZXN1bHQueiA9IGNhcnRlc2lhbjExLno7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMy5mcm9tQ2FydGVzaWFuNCA9IENhcnRlc2lhbjMuY2xvbmU7CiAgICAgIENhcnRlc2lhbjMucGFja2VkTGVuZ3RoID0gMzsKICAgICAgQ2FydGVzaWFuMy5wYWNrID0gZnVuY3Rpb24odmFsdWUsIGFycmF5LCBzdGFydGluZ0luZGV4KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJ2YWx1ZSIsIHZhbHVlKTsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUueDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUueTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4XSA9IHZhbHVlLno7CiAgICAgICAgcmV0dXJuIGFycmF5OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4zLnVucGFjayA9IGZ1bmN0aW9uKGFycmF5LCBzdGFydGluZ0luZGV4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQ2FydGVzaWFuMygpOwogICAgICAgIH0KICAgICAgICByZXN1bHQueCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgcmVzdWx0LnkgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIHJlc3VsdC56ID0gYXJyYXlbc3RhcnRpbmdJbmRleF07CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMy5wYWNrQXJyYXkgPSBmdW5jdGlvbihhcnJheSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBjb25zdCBsZW5ndGggPSBhcnJheS5sZW5ndGg7CiAgICAgICAgY29uc3QgcmVzdWx0TGVuZ3RoID0gbGVuZ3RoICogMzsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQXJyYXkocmVzdWx0TGVuZ3RoKTsKICAgICAgICB9IGVsc2UgaWYgKCFBcnJheS5pc0FycmF5KHJlc3VsdCkgJiYgcmVzdWx0Lmxlbmd0aCAhPT0gcmVzdWx0TGVuZ3RoKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgIklmIHJlc3VsdCBpcyBhIHR5cGVkIGFycmF5LCBpdCBtdXN0IGhhdmUgZXhhY3RseSBhcnJheS5sZW5ndGggKiAzIGVsZW1lbnRzIgogICAgICAgICAgKTsKICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdC5sZW5ndGggIT09IHJlc3VsdExlbmd0aCkgewogICAgICAgICAgcmVzdWx0Lmxlbmd0aCA9IHJlc3VsdExlbmd0aDsKICAgICAgICB9CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgICAgICAgQ2FydGVzaWFuMy5wYWNrKGFycmF5W2ldLCByZXN1bHQsIGkgKiAzKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMy51bnBhY2tBcnJheSA9IGZ1bmN0aW9uKGFycmF5LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbk9yRXF1YWxzKCJhcnJheS5sZW5ndGgiLCBhcnJheS5sZW5ndGgsIDMpOwogICAgICAgIGlmIChhcnJheS5sZW5ndGggJSAzICE9PSAwKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYXJyYXkgbGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBsZW5ndGggPSBhcnJheS5sZW5ndGg7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IEFycmF5KGxlbmd0aCAvIDMpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXN1bHQubGVuZ3RoID0gbGVuZ3RoIC8gMzsKICAgICAgICB9CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMykgewogICAgICAgICAgY29uc3QgaW5kZXggPSBpIC8gMzsKICAgICAgICAgIHJlc3VsdFtpbmRleF0gPSBDYXJ0ZXNpYW4zLnVucGFjayhhcnJheSwgaSwgcmVzdWx0W2luZGV4XSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjMuZnJvbUFycmF5ID0gQ2FydGVzaWFuMy51bnBhY2s7CiAgICAgIENhcnRlc2lhbjMubWF4aW11bUNvbXBvbmVudCA9IGZ1bmN0aW9uKGNhcnRlc2lhbjExKSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjYXJ0ZXNpYW4iLCBjYXJ0ZXNpYW4xMSk7CiAgICAgICAgcmV0dXJuIE1hdGgubWF4KGNhcnRlc2lhbjExLngsIGNhcnRlc2lhbjExLnksIGNhcnRlc2lhbjExLnopOwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4zLm1pbmltdW1Db21wb25lbnQgPSBmdW5jdGlvbihjYXJ0ZXNpYW4xMSkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiY2FydGVzaWFuIiwgY2FydGVzaWFuMTEpOwogICAgICAgIHJldHVybiBNYXRoLm1pbihjYXJ0ZXNpYW4xMS54LCBjYXJ0ZXNpYW4xMS55LCBjYXJ0ZXNpYW4xMS56KTsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMy5taW5pbXVtQnlDb21wb25lbnQgPSBmdW5jdGlvbihmaXJzdCwgc2Vjb25kLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImZpcnN0IiwgZmlyc3QpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgic2Vjb25kIiwgc2Vjb25kKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0LnggPSBNYXRoLm1pbihmaXJzdC54LCBzZWNvbmQueCk7CiAgICAgICAgcmVzdWx0LnkgPSBNYXRoLm1pbihmaXJzdC55LCBzZWNvbmQueSk7CiAgICAgICAgcmVzdWx0LnogPSBNYXRoLm1pbihmaXJzdC56LCBzZWNvbmQueik7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMy5tYXhpbXVtQnlDb21wb25lbnQgPSBmdW5jdGlvbihmaXJzdCwgc2Vjb25kLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImZpcnN0IiwgZmlyc3QpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgic2Vjb25kIiwgc2Vjb25kKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0LnggPSBNYXRoLm1heChmaXJzdC54LCBzZWNvbmQueCk7CiAgICAgICAgcmVzdWx0LnkgPSBNYXRoLm1heChmaXJzdC55LCBzZWNvbmQueSk7CiAgICAgICAgcmVzdWx0LnogPSBNYXRoLm1heChmaXJzdC56LCBzZWNvbmQueik7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMy5jbGFtcCA9IGZ1bmN0aW9uKHZhbHVlLCBtaW4zLCBtYXgzLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInZhbHVlIiwgdmFsdWUpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWluIiwgbWluMyk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXgiLCBtYXgzKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgY29uc3QgeCA9IE1hdGhfZGVmYXVsdC5jbGFtcCh2YWx1ZS54LCBtaW4zLngsIG1heDMueCk7CiAgICAgICAgY29uc3QgeSA9IE1hdGhfZGVmYXVsdC5jbGFtcCh2YWx1ZS55LCBtaW4zLnksIG1heDMueSk7CiAgICAgICAgY29uc3QgeiA9IE1hdGhfZGVmYXVsdC5jbGFtcCh2YWx1ZS56LCBtaW4zLnosIG1heDMueik7CiAgICAgICAgcmVzdWx0LnggPSB4OwogICAgICAgIHJlc3VsdC55ID0geTsKICAgICAgICByZXN1bHQueiA9IHo7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMy5tYWduaXR1ZGVTcXVhcmVkID0gZnVuY3Rpb24oY2FydGVzaWFuMTEpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImNhcnRlc2lhbiIsIGNhcnRlc2lhbjExKTsKICAgICAgICByZXR1cm4gY2FydGVzaWFuMTEueCAqIGNhcnRlc2lhbjExLnggKyBjYXJ0ZXNpYW4xMS55ICogY2FydGVzaWFuMTEueSArIGNhcnRlc2lhbjExLnogKiBjYXJ0ZXNpYW4xMS56OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4zLm1hZ25pdHVkZSA9IGZ1bmN0aW9uKGNhcnRlc2lhbjExKSB7CiAgICAgICAgcmV0dXJuIE1hdGguc3FydChDYXJ0ZXNpYW4zLm1hZ25pdHVkZVNxdWFyZWQoY2FydGVzaWFuMTEpKTsKICAgICAgfTsKICAgICAgZGlzdGFuY2VTY3JhdGNoID0gbmV3IENhcnRlc2lhbjMoKTsKICAgICAgQ2FydGVzaWFuMy5kaXN0YW5jZSA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJsZWZ0IiwgbGVmdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyaWdodCIsIHJpZ2h0KTsKICAgICAgICBDYXJ0ZXNpYW4zLnN1YnRyYWN0KGxlZnQsIHJpZ2h0LCBkaXN0YW5jZVNjcmF0Y2gpOwogICAgICAgIHJldHVybiBDYXJ0ZXNpYW4zLm1hZ25pdHVkZShkaXN0YW5jZVNjcmF0Y2gpOwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4zLmRpc3RhbmNlU3F1YXJlZCA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJsZWZ0IiwgbGVmdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyaWdodCIsIHJpZ2h0KTsKICAgICAgICBDYXJ0ZXNpYW4zLnN1YnRyYWN0KGxlZnQsIHJpZ2h0LCBkaXN0YW5jZVNjcmF0Y2gpOwogICAgICAgIHJldHVybiBDYXJ0ZXNpYW4zLm1hZ25pdHVkZVNxdWFyZWQoZGlzdGFuY2VTY3JhdGNoKTsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMy5ub3JtYWxpemUgPSBmdW5jdGlvbihjYXJ0ZXNpYW4xMSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjYXJ0ZXNpYW4iLCBjYXJ0ZXNpYW4xMSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGNvbnN0IG1hZ25pdHVkZSA9IENhcnRlc2lhbjMubWFnbml0dWRlKGNhcnRlc2lhbjExKTsKICAgICAgICByZXN1bHQueCA9IGNhcnRlc2lhbjExLnggLyBtYWduaXR1ZGU7CiAgICAgICAgcmVzdWx0LnkgPSBjYXJ0ZXNpYW4xMS55IC8gbWFnbml0dWRlOwogICAgICAgIHJlc3VsdC56ID0gY2FydGVzaWFuMTEueiAvIG1hZ25pdHVkZTsKICAgICAgICBpZiAoaXNOYU4ocmVzdWx0LngpIHx8IGlzTmFOKHJlc3VsdC55KSB8fCBpc05hTihyZXN1bHQueikpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJub3JtYWxpemVkIHJlc3VsdCBpcyBub3QgYSBudW1iZXIiKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMy5kb3QgPSBmdW5jdGlvbihsZWZ0LCByaWdodCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibGVmdCIsIGxlZnQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmlnaHQiLCByaWdodCk7CiAgICAgICAgcmV0dXJuIGxlZnQueCAqIHJpZ2h0LnggKyBsZWZ0LnkgKiByaWdodC55ICsgbGVmdC56ICogcmlnaHQuejsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMy5tdWx0aXBseUNvbXBvbmVudHMgPSBmdW5jdGlvbihsZWZ0LCByaWdodCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJsZWZ0IiwgbGVmdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyaWdodCIsIHJpZ2h0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0LnggPSBsZWZ0LnggKiByaWdodC54OwogICAgICAgIHJlc3VsdC55ID0gbGVmdC55ICogcmlnaHQueTsKICAgICAgICByZXN1bHQueiA9IGxlZnQueiAqIHJpZ2h0Lno7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMy5kaXZpZGVDb21wb25lbnRzID0gZnVuY3Rpb24obGVmdCwgcmlnaHQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibGVmdCIsIGxlZnQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmlnaHQiLCByaWdodCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdC54ID0gbGVmdC54IC8gcmlnaHQueDsKICAgICAgICByZXN1bHQueSA9IGxlZnQueSAvIHJpZ2h0Lnk7CiAgICAgICAgcmVzdWx0LnogPSBsZWZ0LnogLyByaWdodC56OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjMuYWRkID0gZnVuY3Rpb24obGVmdCwgcmlnaHQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibGVmdCIsIGxlZnQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmlnaHQiLCByaWdodCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdC54ID0gbGVmdC54ICsgcmlnaHQueDsKICAgICAgICByZXN1bHQueSA9IGxlZnQueSArIHJpZ2h0Lnk7CiAgICAgICAgcmVzdWx0LnogPSBsZWZ0LnogKyByaWdodC56OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjMuc3VidHJhY3QgPSBmdW5jdGlvbihsZWZ0LCByaWdodCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJsZWZ0IiwgbGVmdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyaWdodCIsIHJpZ2h0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0LnggPSBsZWZ0LnggLSByaWdodC54OwogICAgICAgIHJlc3VsdC55ID0gbGVmdC55IC0gcmlnaHQueTsKICAgICAgICByZXN1bHQueiA9IGxlZnQueiAtIHJpZ2h0Lno7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMy5tdWx0aXBseUJ5U2NhbGFyID0gZnVuY3Rpb24oY2FydGVzaWFuMTEsIHNjYWxhciwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjYXJ0ZXNpYW4iLCBjYXJ0ZXNpYW4xMSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJzY2FsYXIiLCBzY2FsYXIpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHQueCA9IGNhcnRlc2lhbjExLnggKiBzY2FsYXI7CiAgICAgICAgcmVzdWx0LnkgPSBjYXJ0ZXNpYW4xMS55ICogc2NhbGFyOwogICAgICAgIHJlc3VsdC56ID0gY2FydGVzaWFuMTEueiAqIHNjYWxhcjsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4zLmRpdmlkZUJ5U2NhbGFyID0gZnVuY3Rpb24oY2FydGVzaWFuMTEsIHNjYWxhciwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjYXJ0ZXNpYW4iLCBjYXJ0ZXNpYW4xMSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJzY2FsYXIiLCBzY2FsYXIpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHQueCA9IGNhcnRlc2lhbjExLnggLyBzY2FsYXI7CiAgICAgICAgcmVzdWx0LnkgPSBjYXJ0ZXNpYW4xMS55IC8gc2NhbGFyOwogICAgICAgIHJlc3VsdC56ID0gY2FydGVzaWFuMTEueiAvIHNjYWxhcjsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4zLm5lZ2F0ZSA9IGZ1bmN0aW9uKGNhcnRlc2lhbjExLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImNhcnRlc2lhbiIsIGNhcnRlc2lhbjExKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0LnggPSAtY2FydGVzaWFuMTEueDsKICAgICAgICByZXN1bHQueSA9IC1jYXJ0ZXNpYW4xMS55OwogICAgICAgIHJlc3VsdC56ID0gLWNhcnRlc2lhbjExLno7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMy5hYnMgPSBmdW5jdGlvbihjYXJ0ZXNpYW4xMSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjYXJ0ZXNpYW4iLCBjYXJ0ZXNpYW4xMSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdC54ID0gTWF0aC5hYnMoY2FydGVzaWFuMTEueCk7CiAgICAgICAgcmVzdWx0LnkgPSBNYXRoLmFicyhjYXJ0ZXNpYW4xMS55KTsKICAgICAgICByZXN1bHQueiA9IE1hdGguYWJzKGNhcnRlc2lhbjExLnopOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIGxlcnBTY3JhdGNoID0gbmV3IENhcnRlc2lhbjMoKTsKICAgICAgQ2FydGVzaWFuMy5sZXJwID0gZnVuY3Rpb24oc3RhcnQsIGVuZCwgdCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJzdGFydCIsIHN0YXJ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImVuZCIsIGVuZCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJ0IiwgdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIENhcnRlc2lhbjMubXVsdGlwbHlCeVNjYWxhcihlbmQsIHQsIGxlcnBTY3JhdGNoKTsKICAgICAgICByZXN1bHQgPSBDYXJ0ZXNpYW4zLm11bHRpcGx5QnlTY2FsYXIoc3RhcnQsIDEgLSB0LCByZXN1bHQpOwogICAgICAgIHJldHVybiBDYXJ0ZXNpYW4zLmFkZChsZXJwU2NyYXRjaCwgcmVzdWx0LCByZXN1bHQpOwogICAgICB9OwogICAgICBhbmdsZUJldHdlZW5TY3JhdGNoID0gbmV3IENhcnRlc2lhbjMoKTsKICAgICAgYW5nbGVCZXR3ZWVuU2NyYXRjaDIgPSBuZXcgQ2FydGVzaWFuMygpOwogICAgICBDYXJ0ZXNpYW4zLmFuZ2xlQmV0d2VlbiA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJsZWZ0IiwgbGVmdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyaWdodCIsIHJpZ2h0KTsKICAgICAgICBDYXJ0ZXNpYW4zLm5vcm1hbGl6ZShsZWZ0LCBhbmdsZUJldHdlZW5TY3JhdGNoKTsKICAgICAgICBDYXJ0ZXNpYW4zLm5vcm1hbGl6ZShyaWdodCwgYW5nbGVCZXR3ZWVuU2NyYXRjaDIpOwogICAgICAgIGNvbnN0IGNvc2luZSA9IENhcnRlc2lhbjMuZG90KGFuZ2xlQmV0d2VlblNjcmF0Y2gsIGFuZ2xlQmV0d2VlblNjcmF0Y2gyKTsKICAgICAgICBjb25zdCBzaW5lID0gQ2FydGVzaWFuMy5tYWduaXR1ZGUoCiAgICAgICAgICBDYXJ0ZXNpYW4zLmNyb3NzKAogICAgICAgICAgICBhbmdsZUJldHdlZW5TY3JhdGNoLAogICAgICAgICAgICBhbmdsZUJldHdlZW5TY3JhdGNoMiwKICAgICAgICAgICAgYW5nbGVCZXR3ZWVuU2NyYXRjaAogICAgICAgICAgKQogICAgICAgICk7CiAgICAgICAgcmV0dXJuIE1hdGguYXRhbjIoc2luZSwgY29zaW5lKTsKICAgICAgfTsKICAgICAgbW9zdE9ydGhvZ29uYWxBeGlzU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zKCk7CiAgICAgIENhcnRlc2lhbjMubW9zdE9ydGhvZ29uYWxBeGlzID0gZnVuY3Rpb24oY2FydGVzaWFuMTEsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiY2FydGVzaWFuIiwgY2FydGVzaWFuMTEpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCBmID0gQ2FydGVzaWFuMy5ub3JtYWxpemUoY2FydGVzaWFuMTEsIG1vc3RPcnRob2dvbmFsQXhpc1NjcmF0Y2gpOwogICAgICAgIENhcnRlc2lhbjMuYWJzKGYsIGYpOwogICAgICAgIGlmIChmLnggPD0gZi55KSB7CiAgICAgICAgICBpZiAoZi54IDw9IGYueikgewogICAgICAgICAgICByZXN1bHQgPSBDYXJ0ZXNpYW4zLmNsb25lKENhcnRlc2lhbjMuVU5JVF9YLCByZXN1bHQpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVzdWx0ID0gQ2FydGVzaWFuMy5jbG9uZShDYXJ0ZXNpYW4zLlVOSVRfWiwgcmVzdWx0KTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKGYueSA8PSBmLnopIHsKICAgICAgICAgIHJlc3VsdCA9IENhcnRlc2lhbjMuY2xvbmUoQ2FydGVzaWFuMy5VTklUX1ksIHJlc3VsdCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlc3VsdCA9IENhcnRlc2lhbjMuY2xvbmUoQ2FydGVzaWFuMy5VTklUX1osIHJlc3VsdCk7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjMucHJvamVjdFZlY3RvciA9IGZ1bmN0aW9uKGEzLCBiLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImEiLCBhMyk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJiIiwgYik7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGNvbnN0IHNjYWxhciA9IENhcnRlc2lhbjMuZG90KGEzLCBiKSAvIENhcnRlc2lhbjMuZG90KGIsIGIpOwogICAgICAgIHJldHVybiBDYXJ0ZXNpYW4zLm11bHRpcGx5QnlTY2FsYXIoYiwgc2NhbGFyLCByZXN1bHQpOwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4zLmVxdWFscyA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7CiAgICAgICAgcmV0dXJuIGxlZnQgPT09IHJpZ2h0IHx8IGRlZmluZWRfZGVmYXVsdChsZWZ0KSAmJiBkZWZpbmVkX2RlZmF1bHQocmlnaHQpICYmIGxlZnQueCA9PT0gcmlnaHQueCAmJiBsZWZ0LnkgPT09IHJpZ2h0LnkgJiYgbGVmdC56ID09PSByaWdodC56OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4zLmVxdWFsc0FycmF5ID0gZnVuY3Rpb24oY2FydGVzaWFuMTEsIGFycmF5LCBvZmZzZXQpIHsKICAgICAgICByZXR1cm4gY2FydGVzaWFuMTEueCA9PT0gYXJyYXlbb2Zmc2V0XSAmJiBjYXJ0ZXNpYW4xMS55ID09PSBhcnJheVtvZmZzZXQgKyAxXSAmJiBjYXJ0ZXNpYW4xMS56ID09PSBhcnJheVtvZmZzZXQgKyAyXTsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMy5lcXVhbHNFcHNpbG9uID0gZnVuY3Rpb24obGVmdCwgcmlnaHQsIHJlbGF0aXZlRXBzaWxvbiwgYWJzb2x1dGVFcHNpbG9uKSB7CiAgICAgICAgcmV0dXJuIGxlZnQgPT09IHJpZ2h0IHx8IGRlZmluZWRfZGVmYXVsdChsZWZ0KSAmJiBkZWZpbmVkX2RlZmF1bHQocmlnaHQpICYmIE1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgbGVmdC54LAogICAgICAgICAgcmlnaHQueCwKICAgICAgICAgIHJlbGF0aXZlRXBzaWxvbiwKICAgICAgICAgIGFic29sdXRlRXBzaWxvbgogICAgICAgICkgJiYgTWF0aF9kZWZhdWx0LmVxdWFsc0Vwc2lsb24oCiAgICAgICAgICBsZWZ0LnksCiAgICAgICAgICByaWdodC55LAogICAgICAgICAgcmVsYXRpdmVFcHNpbG9uLAogICAgICAgICAgYWJzb2x1dGVFcHNpbG9uCiAgICAgICAgKSAmJiBNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbigKICAgICAgICAgIGxlZnQueiwKICAgICAgICAgIHJpZ2h0LnosCiAgICAgICAgICByZWxhdGl2ZUVwc2lsb24sCiAgICAgICAgICBhYnNvbHV0ZUVwc2lsb24KICAgICAgICApOwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4zLmNyb3NzID0gZnVuY3Rpb24obGVmdCwgcmlnaHQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibGVmdCIsIGxlZnQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmlnaHQiLCByaWdodCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGNvbnN0IGxlZnRYID0gbGVmdC54OwogICAgICAgIGNvbnN0IGxlZnRZID0gbGVmdC55OwogICAgICAgIGNvbnN0IGxlZnRaID0gbGVmdC56OwogICAgICAgIGNvbnN0IHJpZ2h0WCA9IHJpZ2h0Lng7CiAgICAgICAgY29uc3QgcmlnaHRZID0gcmlnaHQueTsKICAgICAgICBjb25zdCByaWdodFogPSByaWdodC56OwogICAgICAgIGNvbnN0IHggPSBsZWZ0WSAqIHJpZ2h0WiAtIGxlZnRaICogcmlnaHRZOwogICAgICAgIGNvbnN0IHkgPSBsZWZ0WiAqIHJpZ2h0WCAtIGxlZnRYICogcmlnaHRaOwogICAgICAgIGNvbnN0IHogPSBsZWZ0WCAqIHJpZ2h0WSAtIGxlZnRZICogcmlnaHRYOwogICAgICAgIHJlc3VsdC54ID0geDsKICAgICAgICByZXN1bHQueSA9IHk7CiAgICAgICAgcmVzdWx0LnogPSB6OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjMubWlkcG9pbnQgPSBmdW5jdGlvbihsZWZ0LCByaWdodCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJsZWZ0IiwgbGVmdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyaWdodCIsIHJpZ2h0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0LnggPSAobGVmdC54ICsgcmlnaHQueCkgKiAwLjU7CiAgICAgICAgcmVzdWx0LnkgPSAobGVmdC55ICsgcmlnaHQueSkgKiAwLjU7CiAgICAgICAgcmVzdWx0LnogPSAobGVmdC56ICsgcmlnaHQueikgKiAwLjU7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMy5mcm9tRGVncmVlcyA9IGZ1bmN0aW9uKGxvbmdpdHVkZSwgbGF0aXR1ZGUsIGhlaWdodCwgZWxsaXBzb2lkLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoImxvbmdpdHVkZSIsIGxvbmdpdHVkZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJsYXRpdHVkZSIsIGxhdGl0dWRlKTsKICAgICAgICBsb25naXR1ZGUgPSBNYXRoX2RlZmF1bHQudG9SYWRpYW5zKGxvbmdpdHVkZSk7CiAgICAgICAgbGF0aXR1ZGUgPSBNYXRoX2RlZmF1bHQudG9SYWRpYW5zKGxhdGl0dWRlKTsKICAgICAgICByZXR1cm4gQ2FydGVzaWFuMy5mcm9tUmFkaWFucyhsb25naXR1ZGUsIGxhdGl0dWRlLCBoZWlnaHQsIGVsbGlwc29pZCwgcmVzdWx0KTsKICAgICAgfTsKICAgICAgc2NyYXRjaE4gPSBuZXcgQ2FydGVzaWFuMygpOwogICAgICBzY3JhdGNoSyA9IG5ldyBDYXJ0ZXNpYW4zKCk7CiAgICAgIENhcnRlc2lhbjMuX2VsbGlwc29pZFJhZGlpU3F1YXJlZCA9IG5ldyBDYXJ0ZXNpYW4zKAogICAgICAgIDYzNzgxMzcgKiA2Mzc4MTM3LAogICAgICAgIDYzNzgxMzcgKiA2Mzc4MTM3LAogICAgICAgIDYzNTY3NTIzMTQyNDUxNzllLTkgKiA2MzU2NzUyMzE0MjQ1MTc5ZS05CiAgICAgICk7CiAgICAgIENhcnRlc2lhbjMuZnJvbVJhZGlhbnMgPSBmdW5jdGlvbihsb25naXR1ZGUsIGxhdGl0dWRlLCBoZWlnaHQsIGVsbGlwc29pZCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJsb25naXR1ZGUiLCBsb25naXR1ZGUpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigibGF0aXR1ZGUiLCBsYXRpdHVkZSk7CiAgICAgICAgaGVpZ2h0ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoaGVpZ2h0LCAwKTsKICAgICAgICBjb25zdCByYWRpaVNxdWFyZWQgPSAhZGVmaW5lZF9kZWZhdWx0KGVsbGlwc29pZCkgPyBDYXJ0ZXNpYW4zLl9lbGxpcHNvaWRSYWRpaVNxdWFyZWQgOiBlbGxpcHNvaWQucmFkaWlTcXVhcmVkOwogICAgICAgIGNvbnN0IGNvc0xhdGl0dWRlID0gTWF0aC5jb3MobGF0aXR1ZGUpOwogICAgICAgIHNjcmF0Y2hOLnggPSBjb3NMYXRpdHVkZSAqIE1hdGguY29zKGxvbmdpdHVkZSk7CiAgICAgICAgc2NyYXRjaE4ueSA9IGNvc0xhdGl0dWRlICogTWF0aC5zaW4obG9uZ2l0dWRlKTsKICAgICAgICBzY3JhdGNoTi56ID0gTWF0aC5zaW4obGF0aXR1ZGUpOwogICAgICAgIHNjcmF0Y2hOID0gQ2FydGVzaWFuMy5ub3JtYWxpemUoc2NyYXRjaE4sIHNjcmF0Y2hOKTsKICAgICAgICBDYXJ0ZXNpYW4zLm11bHRpcGx5Q29tcG9uZW50cyhyYWRpaVNxdWFyZWQsIHNjcmF0Y2hOLCBzY3JhdGNoSyk7CiAgICAgICAgY29uc3QgZ2FtbWEgPSBNYXRoLnNxcnQoQ2FydGVzaWFuMy5kb3Qoc2NyYXRjaE4sIHNjcmF0Y2hLKSk7CiAgICAgICAgc2NyYXRjaEsgPSBDYXJ0ZXNpYW4zLmRpdmlkZUJ5U2NhbGFyKHNjcmF0Y2hLLCBnYW1tYSwgc2NyYXRjaEspOwogICAgICAgIHNjcmF0Y2hOID0gQ2FydGVzaWFuMy5tdWx0aXBseUJ5U2NhbGFyKHNjcmF0Y2hOLCBoZWlnaHQsIHNjcmF0Y2hOKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQ2FydGVzaWFuMygpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gQ2FydGVzaWFuMy5hZGQoc2NyYXRjaEssIHNjcmF0Y2hOLCByZXN1bHQpOwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4zLmZyb21EZWdyZWVzQXJyYXkgPSBmdW5jdGlvbihjb29yZGluYXRlcywgZWxsaXBzb2lkLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImNvb3JkaW5hdGVzIiwgY29vcmRpbmF0ZXMpOwogICAgICAgIGlmIChjb29yZGluYXRlcy5sZW5ndGggPCAyIHx8IGNvb3JkaW5hdGVzLmxlbmd0aCAlIDIgIT09IDApIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgICAidGhlIG51bWJlciBvZiBjb29yZGluYXRlcyBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMiBhbmQgYXQgbGVhc3QgMiIKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGxlbmd0aCA9IGNvb3JkaW5hdGVzLmxlbmd0aDsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQXJyYXkobGVuZ3RoIC8gMik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlc3VsdC5sZW5ndGggPSBsZW5ndGggLyAyOwogICAgICAgIH0KICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAyKSB7CiAgICAgICAgICBjb25zdCBsb25naXR1ZGUgPSBjb29yZGluYXRlc1tpXTsKICAgICAgICAgIGNvbnN0IGxhdGl0dWRlID0gY29vcmRpbmF0ZXNbaSArIDFdOwogICAgICAgICAgY29uc3QgaW5kZXggPSBpIC8gMjsKICAgICAgICAgIHJlc3VsdFtpbmRleF0gPSBDYXJ0ZXNpYW4zLmZyb21EZWdyZWVzKAogICAgICAgICAgICBsb25naXR1ZGUsCiAgICAgICAgICAgIGxhdGl0dWRlLAogICAgICAgICAgICAwLAogICAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICAgIHJlc3VsdFtpbmRleF0KICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjMuZnJvbVJhZGlhbnNBcnJheSA9IGZ1bmN0aW9uKGNvb3JkaW5hdGVzLCBlbGxpcHNvaWQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiY29vcmRpbmF0ZXMiLCBjb29yZGluYXRlcyk7CiAgICAgICAgaWYgKGNvb3JkaW5hdGVzLmxlbmd0aCA8IDIgfHwgY29vcmRpbmF0ZXMubGVuZ3RoICUgMiAhPT0gMCkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgICJ0aGUgbnVtYmVyIG9mIGNvb3JkaW5hdGVzIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAyIGFuZCBhdCBsZWFzdCAyIgogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgbGVuZ3RoID0gY29vcmRpbmF0ZXMubGVuZ3RoOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBBcnJheShsZW5ndGggLyAyKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVzdWx0Lmxlbmd0aCA9IGxlbmd0aCAvIDI7CiAgICAgICAgfQogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDIpIHsKICAgICAgICAgIGNvbnN0IGxvbmdpdHVkZSA9IGNvb3JkaW5hdGVzW2ldOwogICAgICAgICAgY29uc3QgbGF0aXR1ZGUgPSBjb29yZGluYXRlc1tpICsgMV07CiAgICAgICAgICBjb25zdCBpbmRleCA9IGkgLyAyOwogICAgICAgICAgcmVzdWx0W2luZGV4XSA9IENhcnRlc2lhbjMuZnJvbVJhZGlhbnMoCiAgICAgICAgICAgIGxvbmdpdHVkZSwKICAgICAgICAgICAgbGF0aXR1ZGUsCiAgICAgICAgICAgIDAsCiAgICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgICAgcmVzdWx0W2luZGV4XQogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMy5mcm9tRGVncmVlc0FycmF5SGVpZ2h0cyA9IGZ1bmN0aW9uKGNvb3JkaW5hdGVzLCBlbGxpcHNvaWQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiY29vcmRpbmF0ZXMiLCBjb29yZGluYXRlcyk7CiAgICAgICAgaWYgKGNvb3JkaW5hdGVzLmxlbmd0aCA8IDMgfHwgY29vcmRpbmF0ZXMubGVuZ3RoICUgMyAhPT0gMCkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgICJ0aGUgbnVtYmVyIG9mIGNvb3JkaW5hdGVzIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzIGFuZCBhdCBsZWFzdCAzIgogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgbGVuZ3RoID0gY29vcmRpbmF0ZXMubGVuZ3RoOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBBcnJheShsZW5ndGggLyAzKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVzdWx0Lmxlbmd0aCA9IGxlbmd0aCAvIDM7CiAgICAgICAgfQogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDMpIHsKICAgICAgICAgIGNvbnN0IGxvbmdpdHVkZSA9IGNvb3JkaW5hdGVzW2ldOwogICAgICAgICAgY29uc3QgbGF0aXR1ZGUgPSBjb29yZGluYXRlc1tpICsgMV07CiAgICAgICAgICBjb25zdCBoZWlnaHQgPSBjb29yZGluYXRlc1tpICsgMl07CiAgICAgICAgICBjb25zdCBpbmRleCA9IGkgLyAzOwogICAgICAgICAgcmVzdWx0W2luZGV4XSA9IENhcnRlc2lhbjMuZnJvbURlZ3JlZXMoCiAgICAgICAgICAgIGxvbmdpdHVkZSwKICAgICAgICAgICAgbGF0aXR1ZGUsCiAgICAgICAgICAgIGhlaWdodCwKICAgICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgICByZXN1bHRbaW5kZXhdCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4zLmZyb21SYWRpYW5zQXJyYXlIZWlnaHRzID0gZnVuY3Rpb24oY29vcmRpbmF0ZXMsIGVsbGlwc29pZCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJjb29yZGluYXRlcyIsIGNvb3JkaW5hdGVzKTsKICAgICAgICBpZiAoY29vcmRpbmF0ZXMubGVuZ3RoIDwgMyB8fCBjb29yZGluYXRlcy5sZW5ndGggJSAzICE9PSAwKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgInRoZSBudW1iZXIgb2YgY29vcmRpbmF0ZXMgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMgYW5kIGF0IGxlYXN0IDMiCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBjb25zdCBsZW5ndGggPSBjb29yZGluYXRlcy5sZW5ndGg7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IEFycmF5KGxlbmd0aCAvIDMpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXN1bHQubGVuZ3RoID0gbGVuZ3RoIC8gMzsKICAgICAgICB9CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMykgewogICAgICAgICAgY29uc3QgbG9uZ2l0dWRlID0gY29vcmRpbmF0ZXNbaV07CiAgICAgICAgICBjb25zdCBsYXRpdHVkZSA9IGNvb3JkaW5hdGVzW2kgKyAxXTsKICAgICAgICAgIGNvbnN0IGhlaWdodCA9IGNvb3JkaW5hdGVzW2kgKyAyXTsKICAgICAgICAgIGNvbnN0IGluZGV4ID0gaSAvIDM7CiAgICAgICAgICByZXN1bHRbaW5kZXhdID0gQ2FydGVzaWFuMy5mcm9tUmFkaWFucygKICAgICAgICAgICAgbG9uZ2l0dWRlLAogICAgICAgICAgICBsYXRpdHVkZSwKICAgICAgICAgICAgaGVpZ2h0LAogICAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICAgIHJlc3VsdFtpbmRleF0KICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjMuWkVSTyA9IE9iamVjdC5mcmVlemUobmV3IENhcnRlc2lhbjMoMCwgMCwgMCkpOwogICAgICBDYXJ0ZXNpYW4zLk9ORSA9IE9iamVjdC5mcmVlemUobmV3IENhcnRlc2lhbjMoMSwgMSwgMSkpOwogICAgICBDYXJ0ZXNpYW4zLlVOSVRfWCA9IE9iamVjdC5mcmVlemUobmV3IENhcnRlc2lhbjMoMSwgMCwgMCkpOwogICAgICBDYXJ0ZXNpYW4zLlVOSVRfWSA9IE9iamVjdC5mcmVlemUobmV3IENhcnRlc2lhbjMoMCwgMSwgMCkpOwogICAgICBDYXJ0ZXNpYW4zLlVOSVRfWiA9IE9iamVjdC5mcmVlemUobmV3IENhcnRlc2lhbjMoMCwgMCwgMSkpOwogICAgICBDYXJ0ZXNpYW4zLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKHJlc3VsdCkgewogICAgICAgIHJldHVybiBDYXJ0ZXNpYW4zLmNsb25lKHRoaXMsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjMucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uKHJpZ2h0KSB7CiAgICAgICAgcmV0dXJuIENhcnRlc2lhbjMuZXF1YWxzKHRoaXMsIHJpZ2h0KTsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMy5wcm90b3R5cGUuZXF1YWxzRXBzaWxvbiA9IGZ1bmN0aW9uKHJpZ2h0LCByZWxhdGl2ZUVwc2lsb24sIGFic29sdXRlRXBzaWxvbikgewogICAgICAgIHJldHVybiBDYXJ0ZXNpYW4zLmVxdWFsc0Vwc2lsb24oCiAgICAgICAgICB0aGlzLAogICAgICAgICAgcmlnaHQsCiAgICAgICAgICByZWxhdGl2ZUVwc2lsb24sCiAgICAgICAgICBhYnNvbHV0ZUVwc2lsb24KICAgICAgICApOwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4zLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBgKCR7dGhpcy54fSwgJHt0aGlzLnl9LCAke3RoaXMuen0pYDsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0ID0gQ2FydGVzaWFuMzsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL3NjYWxlVG9HZW9kZXRpY1N1cmZhY2UuanMKICBmdW5jdGlvbiBzY2FsZVRvR2VvZGV0aWNTdXJmYWNlKGNhcnRlc2lhbjExLCBvbmVPdmVyUmFkaWksIG9uZU92ZXJSYWRpaVNxdWFyZWQsIGNlbnRlclRvbGVyYW5jZVNxdWFyZWQsIHJlc3VsdCkgewogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoY2FydGVzaWFuMTEpKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJjYXJ0ZXNpYW4gaXMgcmVxdWlyZWQuIik7CiAgICB9CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChvbmVPdmVyUmFkaWkpKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJvbmVPdmVyUmFkaWkgaXMgcmVxdWlyZWQuIik7CiAgICB9CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChvbmVPdmVyUmFkaWlTcXVhcmVkKSkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgib25lT3ZlclJhZGlpU3F1YXJlZCBpcyByZXF1aXJlZC4iKTsKICAgIH0KICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGNlbnRlclRvbGVyYW5jZVNxdWFyZWQpKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJjZW50ZXJUb2xlcmFuY2VTcXVhcmVkIGlzIHJlcXVpcmVkLiIpOwogICAgfQogICAgY29uc3QgcG9zaXRpb25YID0gY2FydGVzaWFuMTEueDsKICAgIGNvbnN0IHBvc2l0aW9uWSA9IGNhcnRlc2lhbjExLnk7CiAgICBjb25zdCBwb3NpdGlvblogPSBjYXJ0ZXNpYW4xMS56OwogICAgY29uc3Qgb25lT3ZlclJhZGlpWCA9IG9uZU92ZXJSYWRpaS54OwogICAgY29uc3Qgb25lT3ZlclJhZGlpWSA9IG9uZU92ZXJSYWRpaS55OwogICAgY29uc3Qgb25lT3ZlclJhZGlpWiA9IG9uZU92ZXJSYWRpaS56OwogICAgY29uc3QgeDIgPSBwb3NpdGlvblggKiBwb3NpdGlvblggKiBvbmVPdmVyUmFkaWlYICogb25lT3ZlclJhZGlpWDsKICAgIGNvbnN0IHkyID0gcG9zaXRpb25ZICogcG9zaXRpb25ZICogb25lT3ZlclJhZGlpWSAqIG9uZU92ZXJSYWRpaVk7CiAgICBjb25zdCB6MiA9IHBvc2l0aW9uWiAqIHBvc2l0aW9uWiAqIG9uZU92ZXJSYWRpaVogKiBvbmVPdmVyUmFkaWlaOwogICAgY29uc3Qgc3F1YXJlZE5vcm0gPSB4MiArIHkyICsgejI7CiAgICBjb25zdCByYXRpbyA9IE1hdGguc3FydCgxIC8gc3F1YXJlZE5vcm0pOwogICAgY29uc3QgaW50ZXJzZWN0aW9uID0gQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIoCiAgICAgIGNhcnRlc2lhbjExLAogICAgICByYXRpbywKICAgICAgc2NhbGVUb0dlb2RldGljU3VyZmFjZUludGVyc2VjdGlvbgogICAgKTsKICAgIGlmIChzcXVhcmVkTm9ybSA8IGNlbnRlclRvbGVyYW5jZVNxdWFyZWQpIHsKICAgICAgcmV0dXJuICFpc0Zpbml0ZShyYXRpbykgPyB2b2lkIDAgOiBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoaW50ZXJzZWN0aW9uLCByZXN1bHQpOwogICAgfQogICAgY29uc3Qgb25lT3ZlclJhZGlpU3F1YXJlZFggPSBvbmVPdmVyUmFkaWlTcXVhcmVkLng7CiAgICBjb25zdCBvbmVPdmVyUmFkaWlTcXVhcmVkWSA9IG9uZU92ZXJSYWRpaVNxdWFyZWQueTsKICAgIGNvbnN0IG9uZU92ZXJSYWRpaVNxdWFyZWRaID0gb25lT3ZlclJhZGlpU3F1YXJlZC56OwogICAgY29uc3QgZ3JhZGllbnQgPSBzY2FsZVRvR2VvZGV0aWNTdXJmYWNlR3JhZGllbnQ7CiAgICBncmFkaWVudC54ID0gaW50ZXJzZWN0aW9uLnggKiBvbmVPdmVyUmFkaWlTcXVhcmVkWCAqIDI7CiAgICBncmFkaWVudC55ID0gaW50ZXJzZWN0aW9uLnkgKiBvbmVPdmVyUmFkaWlTcXVhcmVkWSAqIDI7CiAgICBncmFkaWVudC56ID0gaW50ZXJzZWN0aW9uLnogKiBvbmVPdmVyUmFkaWlTcXVhcmVkWiAqIDI7CiAgICBsZXQgbGFtYmRhID0gKDEgLSByYXRpbykgKiBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlKGNhcnRlc2lhbjExKSAvICgwLjUgKiBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlKGdyYWRpZW50KSk7CiAgICBsZXQgY29ycmVjdGlvbiA9IDA7CiAgICBsZXQgZnVuYzsKICAgIGxldCBkZW5vbWluYXRvcjsKICAgIGxldCB4TXVsdGlwbGllcjsKICAgIGxldCB5TXVsdGlwbGllcjsKICAgIGxldCB6TXVsdGlwbGllcjsKICAgIGxldCB4TXVsdGlwbGllcjI7CiAgICBsZXQgeU11bHRpcGxpZXIyOwogICAgbGV0IHpNdWx0aXBsaWVyMjsKICAgIGxldCB4TXVsdGlwbGllcjM7CiAgICBsZXQgeU11bHRpcGxpZXIzOwogICAgbGV0IHpNdWx0aXBsaWVyMzsKICAgIGRvIHsKICAgICAgbGFtYmRhIC09IGNvcnJlY3Rpb247CiAgICAgIHhNdWx0aXBsaWVyID0gMSAvICgxICsgbGFtYmRhICogb25lT3ZlclJhZGlpU3F1YXJlZFgpOwogICAgICB5TXVsdGlwbGllciA9IDEgLyAoMSArIGxhbWJkYSAqIG9uZU92ZXJSYWRpaVNxdWFyZWRZKTsKICAgICAgek11bHRpcGxpZXIgPSAxIC8gKDEgKyBsYW1iZGEgKiBvbmVPdmVyUmFkaWlTcXVhcmVkWik7CiAgICAgIHhNdWx0aXBsaWVyMiA9IHhNdWx0aXBsaWVyICogeE11bHRpcGxpZXI7CiAgICAgIHlNdWx0aXBsaWVyMiA9IHlNdWx0aXBsaWVyICogeU11bHRpcGxpZXI7CiAgICAgIHpNdWx0aXBsaWVyMiA9IHpNdWx0aXBsaWVyICogek11bHRpcGxpZXI7CiAgICAgIHhNdWx0aXBsaWVyMyA9IHhNdWx0aXBsaWVyMiAqIHhNdWx0aXBsaWVyOwogICAgICB5TXVsdGlwbGllcjMgPSB5TXVsdGlwbGllcjIgKiB5TXVsdGlwbGllcjsKICAgICAgek11bHRpcGxpZXIzID0gek11bHRpcGxpZXIyICogek11bHRpcGxpZXI7CiAgICAgIGZ1bmMgPSB4MiAqIHhNdWx0aXBsaWVyMiArIHkyICogeU11bHRpcGxpZXIyICsgejIgKiB6TXVsdGlwbGllcjIgLSAxOwogICAgICBkZW5vbWluYXRvciA9IHgyICogeE11bHRpcGxpZXIzICogb25lT3ZlclJhZGlpU3F1YXJlZFggKyB5MiAqIHlNdWx0aXBsaWVyMyAqIG9uZU92ZXJSYWRpaVNxdWFyZWRZICsgejIgKiB6TXVsdGlwbGllcjMgKiBvbmVPdmVyUmFkaWlTcXVhcmVkWjsKICAgICAgY29uc3QgZGVyaXZhdGl2ZSA9IC0yICogZGVub21pbmF0b3I7CiAgICAgIGNvcnJlY3Rpb24gPSBmdW5jIC8gZGVyaXZhdGl2ZTsKICAgIH0gd2hpbGUgKE1hdGguYWJzKGZ1bmMpID4gTWF0aF9kZWZhdWx0LkVQU0lMT04xMik7CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgIHJldHVybiBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KAogICAgICAgIHBvc2l0aW9uWCAqIHhNdWx0aXBsaWVyLAogICAgICAgIHBvc2l0aW9uWSAqIHlNdWx0aXBsaWVyLAogICAgICAgIHBvc2l0aW9uWiAqIHpNdWx0aXBsaWVyCiAgICAgICk7CiAgICB9CiAgICByZXN1bHQueCA9IHBvc2l0aW9uWCAqIHhNdWx0aXBsaWVyOwogICAgcmVzdWx0LnkgPSBwb3NpdGlvblkgKiB5TXVsdGlwbGllcjsKICAgIHJlc3VsdC56ID0gcG9zaXRpb25aICogek11bHRpcGxpZXI7CiAgICByZXR1cm4gcmVzdWx0OwogIH0KICB2YXIgc2NhbGVUb0dlb2RldGljU3VyZmFjZUludGVyc2VjdGlvbiwgc2NhbGVUb0dlb2RldGljU3VyZmFjZUdyYWRpZW50LCBzY2FsZVRvR2VvZGV0aWNTdXJmYWNlX2RlZmF1bHQ7CiAgdmFyIGluaXRfc2NhbGVUb0dlb2RldGljU3VyZmFjZSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvc2NhbGVUb0dlb2RldGljU3VyZmFjZS5qcyIoKSB7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgc2NhbGVUb0dlb2RldGljU3VyZmFjZUludGVyc2VjdGlvbiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NhbGVUb0dlb2RldGljU3VyZmFjZUdyYWRpZW50ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY2FsZVRvR2VvZGV0aWNTdXJmYWNlX2RlZmF1bHQgPSBzY2FsZVRvR2VvZGV0aWNTdXJmYWNlOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvQ2FydG9ncmFwaGljLmpzCiAgZnVuY3Rpb24gQ2FydG9ncmFwaGljKGxvbmdpdHVkZSwgbGF0aXR1ZGUsIGhlaWdodCkgewogICAgdGhpcy5sb25naXR1ZGUgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChsb25naXR1ZGUsIDApOwogICAgdGhpcy5sYXRpdHVkZSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGxhdGl0dWRlLCAwKTsKICAgIHRoaXMuaGVpZ2h0ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoaGVpZ2h0LCAwKTsKICB9CiAgdmFyIGNhcnRlc2lhblRvQ2FydG9ncmFwaGljTiwgY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWNQLCBjYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpY0gsIENhcnRvZ3JhcGhpY19kZWZhdWx0OwogIHZhciBpbml0X0NhcnRvZ3JhcGhpYyA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvQ2FydG9ncmFwaGljLmpzIigpIHsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X3NjYWxlVG9HZW9kZXRpY1N1cmZhY2UoKTsKICAgICAgQ2FydG9ncmFwaGljLmZyb21SYWRpYW5zID0gZnVuY3Rpb24obG9uZ2l0dWRlLCBsYXRpdHVkZSwgaGVpZ2h0LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoImxvbmdpdHVkZSIsIGxvbmdpdHVkZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJsYXRpdHVkZSIsIGxhdGl0dWRlKTsKICAgICAgICBoZWlnaHQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChoZWlnaHQsIDApOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgQ2FydG9ncmFwaGljKGxvbmdpdHVkZSwgbGF0aXR1ZGUsIGhlaWdodCk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5sb25naXR1ZGUgPSBsb25naXR1ZGU7CiAgICAgICAgcmVzdWx0LmxhdGl0dWRlID0gbGF0aXR1ZGU7CiAgICAgICAgcmVzdWx0LmhlaWdodCA9IGhlaWdodDsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0b2dyYXBoaWMuZnJvbURlZ3JlZXMgPSBmdW5jdGlvbihsb25naXR1ZGUsIGxhdGl0dWRlLCBoZWlnaHQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigibG9uZ2l0dWRlIiwgbG9uZ2l0dWRlKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoImxhdGl0dWRlIiwgbGF0aXR1ZGUpOwogICAgICAgIGxvbmdpdHVkZSA9IE1hdGhfZGVmYXVsdC50b1JhZGlhbnMobG9uZ2l0dWRlKTsKICAgICAgICBsYXRpdHVkZSA9IE1hdGhfZGVmYXVsdC50b1JhZGlhbnMobGF0aXR1ZGUpOwogICAgICAgIHJldHVybiBDYXJ0b2dyYXBoaWMuZnJvbVJhZGlhbnMobG9uZ2l0dWRlLCBsYXRpdHVkZSwgaGVpZ2h0LCByZXN1bHQpOwogICAgICB9OwogICAgICBjYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpY04gPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGNhcnRlc2lhblRvQ2FydG9ncmFwaGljUCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWNIID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBDYXJ0b2dyYXBoaWMuX2VsbGlwc29pZE9uZU92ZXJSYWRpaSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoCiAgICAgICAgMSAvIDYzNzgxMzcsCiAgICAgICAgMSAvIDYzNzgxMzcsCiAgICAgICAgMSAvIDYzNTY3NTIzMTQyNDUxNzllLTkKICAgICAgKTsKICAgICAgQ2FydG9ncmFwaGljLl9lbGxpcHNvaWRPbmVPdmVyUmFkaWlTcXVhcmVkID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgKICAgICAgICAxIC8gKDYzNzgxMzcgKiA2Mzc4MTM3KSwKICAgICAgICAxIC8gKDYzNzgxMzcgKiA2Mzc4MTM3KSwKICAgICAgICAxIC8gKDYzNTY3NTIzMTQyNDUxNzllLTkgKiA2MzU2NzUyMzE0MjQ1MTc5ZS05KQogICAgICApOwogICAgICBDYXJ0b2dyYXBoaWMuX2VsbGlwc29pZENlbnRlclRvbGVyYW5jZVNxdWFyZWQgPSBNYXRoX2RlZmF1bHQuRVBTSUxPTjE7CiAgICAgIENhcnRvZ3JhcGhpYy5mcm9tQ2FydGVzaWFuID0gZnVuY3Rpb24oY2FydGVzaWFuMTEsIGVsbGlwc29pZCwgcmVzdWx0KSB7CiAgICAgICAgY29uc3Qgb25lT3ZlclJhZGlpID0gZGVmaW5lZF9kZWZhdWx0KGVsbGlwc29pZCkgPyBlbGxpcHNvaWQub25lT3ZlclJhZGlpIDogQ2FydG9ncmFwaGljLl9lbGxpcHNvaWRPbmVPdmVyUmFkaWk7CiAgICAgICAgY29uc3Qgb25lT3ZlclJhZGlpU3F1YXJlZCA9IGRlZmluZWRfZGVmYXVsdChlbGxpcHNvaWQpID8gZWxsaXBzb2lkLm9uZU92ZXJSYWRpaVNxdWFyZWQgOiBDYXJ0b2dyYXBoaWMuX2VsbGlwc29pZE9uZU92ZXJSYWRpaVNxdWFyZWQ7CiAgICAgICAgY29uc3QgY2VudGVyVG9sZXJhbmNlU3F1YXJlZCA9IGRlZmluZWRfZGVmYXVsdChlbGxpcHNvaWQpID8gZWxsaXBzb2lkLl9jZW50ZXJUb2xlcmFuY2VTcXVhcmVkIDogQ2FydG9ncmFwaGljLl9lbGxpcHNvaWRDZW50ZXJUb2xlcmFuY2VTcXVhcmVkOwogICAgICAgIGNvbnN0IHAgPSBzY2FsZVRvR2VvZGV0aWNTdXJmYWNlX2RlZmF1bHQoCiAgICAgICAgICBjYXJ0ZXNpYW4xMSwKICAgICAgICAgIG9uZU92ZXJSYWRpaSwKICAgICAgICAgIG9uZU92ZXJSYWRpaVNxdWFyZWQsCiAgICAgICAgICBjZW50ZXJUb2xlcmFuY2VTcXVhcmVkLAogICAgICAgICAgY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWNQCiAgICAgICAgKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwKSkgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgbGV0IG4gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlDb21wb25lbnRzKAogICAgICAgICAgcCwKICAgICAgICAgIG9uZU92ZXJSYWRpaVNxdWFyZWQsCiAgICAgICAgICBjYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpY04KICAgICAgICApOwogICAgICAgIG4gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKG4sIG4pOwogICAgICAgIGNvbnN0IGggPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoY2FydGVzaWFuMTEsIHAsIGNhcnRlc2lhblRvQ2FydG9ncmFwaGljSCk7CiAgICAgICAgY29uc3QgbG9uZ2l0dWRlID0gTWF0aC5hdGFuMihuLnksIG4ueCk7CiAgICAgICAgY29uc3QgbGF0aXR1ZGUgPSBNYXRoLmFzaW4obi56KTsKICAgICAgICBjb25zdCBoZWlnaHQgPSBNYXRoX2RlZmF1bHQuc2lnbihDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KGgsIGNhcnRlc2lhbjExKSkgKiBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlKGgpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgQ2FydG9ncmFwaGljKGxvbmdpdHVkZSwgbGF0aXR1ZGUsIGhlaWdodCk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5sb25naXR1ZGUgPSBsb25naXR1ZGU7CiAgICAgICAgcmVzdWx0LmxhdGl0dWRlID0gbGF0aXR1ZGU7CiAgICAgICAgcmVzdWx0LmhlaWdodCA9IGhlaWdodDsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0b2dyYXBoaWMudG9DYXJ0ZXNpYW4gPSBmdW5jdGlvbihjYXJ0b2dyYXBoaWMyLCBlbGxpcHNvaWQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiY2FydG9ncmFwaGljIiwgY2FydG9ncmFwaGljMik7CiAgICAgICAgcmV0dXJuIENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tUmFkaWFucygKICAgICAgICAgIGNhcnRvZ3JhcGhpYzIubG9uZ2l0dWRlLAogICAgICAgICAgY2FydG9ncmFwaGljMi5sYXRpdHVkZSwKICAgICAgICAgIGNhcnRvZ3JhcGhpYzIuaGVpZ2h0LAogICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgcmVzdWx0CiAgICAgICAgKTsKICAgICAgfTsKICAgICAgQ2FydG9ncmFwaGljLmNsb25lID0gZnVuY3Rpb24oY2FydG9ncmFwaGljMiwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoY2FydG9ncmFwaGljMikpIHsKICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgQ2FydG9ncmFwaGljKAogICAgICAgICAgICBjYXJ0b2dyYXBoaWMyLmxvbmdpdHVkZSwKICAgICAgICAgICAgY2FydG9ncmFwaGljMi5sYXRpdHVkZSwKICAgICAgICAgICAgY2FydG9ncmFwaGljMi5oZWlnaHQKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5sb25naXR1ZGUgPSBjYXJ0b2dyYXBoaWMyLmxvbmdpdHVkZTsKICAgICAgICByZXN1bHQubGF0aXR1ZGUgPSBjYXJ0b2dyYXBoaWMyLmxhdGl0dWRlOwogICAgICAgIHJlc3VsdC5oZWlnaHQgPSBjYXJ0b2dyYXBoaWMyLmhlaWdodDsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0b2dyYXBoaWMuZXF1YWxzID0gZnVuY3Rpb24obGVmdCwgcmlnaHQpIHsKICAgICAgICByZXR1cm4gbGVmdCA9PT0gcmlnaHQgfHwgZGVmaW5lZF9kZWZhdWx0KGxlZnQpICYmIGRlZmluZWRfZGVmYXVsdChyaWdodCkgJiYgbGVmdC5sb25naXR1ZGUgPT09IHJpZ2h0LmxvbmdpdHVkZSAmJiBsZWZ0LmxhdGl0dWRlID09PSByaWdodC5sYXRpdHVkZSAmJiBsZWZ0LmhlaWdodCA9PT0gcmlnaHQuaGVpZ2h0OwogICAgICB9OwogICAgICBDYXJ0b2dyYXBoaWMuZXF1YWxzRXBzaWxvbiA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBlcHNpbG9uKSB7CiAgICAgICAgZXBzaWxvbiA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGVwc2lsb24sIDApOwogICAgICAgIHJldHVybiBsZWZ0ID09PSByaWdodCB8fCBkZWZpbmVkX2RlZmF1bHQobGVmdCkgJiYgZGVmaW5lZF9kZWZhdWx0KHJpZ2h0KSAmJiBNYXRoLmFicyhsZWZ0LmxvbmdpdHVkZSAtIHJpZ2h0LmxvbmdpdHVkZSkgPD0gZXBzaWxvbiAmJiBNYXRoLmFicyhsZWZ0LmxhdGl0dWRlIC0gcmlnaHQubGF0aXR1ZGUpIDw9IGVwc2lsb24gJiYgTWF0aC5hYnMobGVmdC5oZWlnaHQgLSByaWdodC5oZWlnaHQpIDw9IGVwc2lsb247CiAgICAgIH07CiAgICAgIENhcnRvZ3JhcGhpYy5aRVJPID0gT2JqZWN0LmZyZWV6ZShuZXcgQ2FydG9ncmFwaGljKDAsIDAsIDApKTsKICAgICAgQ2FydG9ncmFwaGljLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKHJlc3VsdCkgewogICAgICAgIHJldHVybiBDYXJ0b2dyYXBoaWMuY2xvbmUodGhpcywgcmVzdWx0KTsKICAgICAgfTsKICAgICAgQ2FydG9ncmFwaGljLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbihyaWdodCkgewogICAgICAgIHJldHVybiBDYXJ0b2dyYXBoaWMuZXF1YWxzKHRoaXMsIHJpZ2h0KTsKICAgICAgfTsKICAgICAgQ2FydG9ncmFwaGljLnByb3RvdHlwZS5lcXVhbHNFcHNpbG9uID0gZnVuY3Rpb24ocmlnaHQsIGVwc2lsb24pIHsKICAgICAgICByZXR1cm4gQ2FydG9ncmFwaGljLmVxdWFsc0Vwc2lsb24odGhpcywgcmlnaHQsIGVwc2lsb24pOwogICAgICB9OwogICAgICBDYXJ0b2dyYXBoaWMucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIGAoJHt0aGlzLmxvbmdpdHVkZX0sICR7dGhpcy5sYXRpdHVkZX0sICR7dGhpcy5oZWlnaHR9KWA7CiAgICAgIH07CiAgICAgIENhcnRvZ3JhcGhpY19kZWZhdWx0ID0gQ2FydG9ncmFwaGljOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvQ2FydGVzaWFuMi5qcwogIGZ1bmN0aW9uIENhcnRlc2lhbjIoeCwgeSkgewogICAgdGhpcy54ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoeCwgMCk7CiAgICB0aGlzLnkgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh5LCAwKTsKICB9CiAgdmFyIGRpc3RhbmNlU2NyYXRjaDIsIGxlcnBTY3JhdGNoMiwgYW5nbGVCZXR3ZWVuU2NyYXRjaDMsIGFuZ2xlQmV0d2VlblNjcmF0Y2gyMiwgbW9zdE9ydGhvZ29uYWxBeGlzU2NyYXRjaDIsIENhcnRlc2lhbjJfZGVmYXVsdDsKICB2YXIgaW5pdF9DYXJ0ZXNpYW4yID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9DYXJ0ZXNpYW4yLmpzIigpIHsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgQ2FydGVzaWFuMi5mcm9tRWxlbWVudHMgPSBmdW5jdGlvbih4LCB5LCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IENhcnRlc2lhbjIoeCwgeSk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC54ID0geDsKICAgICAgICByZXN1bHQueSA9IHk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMi5jbG9uZSA9IGZ1bmN0aW9uKGNhcnRlc2lhbjExLCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChjYXJ0ZXNpYW4xMSkpIHsKICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgQ2FydGVzaWFuMihjYXJ0ZXNpYW4xMS54LCBjYXJ0ZXNpYW4xMS55KTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LnggPSBjYXJ0ZXNpYW4xMS54OwogICAgICAgIHJlc3VsdC55ID0gY2FydGVzaWFuMTEueTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4yLmZyb21DYXJ0ZXNpYW4zID0gQ2FydGVzaWFuMi5jbG9uZTsKICAgICAgQ2FydGVzaWFuMi5mcm9tQ2FydGVzaWFuNCA9IENhcnRlc2lhbjIuY2xvbmU7CiAgICAgIENhcnRlc2lhbjIucGFja2VkTGVuZ3RoID0gMjsKICAgICAgQ2FydGVzaWFuMi5wYWNrID0gZnVuY3Rpb24odmFsdWUsIGFycmF5LCBzdGFydGluZ0luZGV4KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJ2YWx1ZSIsIHZhbHVlKTsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUueDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4XSA9IHZhbHVlLnk7CiAgICAgICAgcmV0dXJuIGFycmF5OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4yLnVucGFjayA9IGZ1bmN0aW9uKGFycmF5LCBzdGFydGluZ0luZGV4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQ2FydGVzaWFuMigpOwogICAgICAgIH0KICAgICAgICByZXN1bHQueCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgcmVzdWx0LnkgPSBhcnJheVtzdGFydGluZ0luZGV4XTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4yLnBhY2tBcnJheSA9IGZ1bmN0aW9uKGFycmF5LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIGNvbnN0IGxlbmd0aCA9IGFycmF5Lmxlbmd0aDsKICAgICAgICBjb25zdCByZXN1bHRMZW5ndGggPSBsZW5ndGggKiAyOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBBcnJheShyZXN1bHRMZW5ndGgpOwogICAgICAgIH0gZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkocmVzdWx0KSAmJiByZXN1bHQubGVuZ3RoICE9PSByZXN1bHRMZW5ndGgpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgICAiSWYgcmVzdWx0IGlzIGEgdHlwZWQgYXJyYXksIGl0IG11c3QgaGF2ZSBleGFjdGx5IGFycmF5Lmxlbmd0aCAqIDIgZWxlbWVudHMiCiAgICAgICAgICApOwogICAgICAgIH0gZWxzZSBpZiAocmVzdWx0Lmxlbmd0aCAhPT0gcmVzdWx0TGVuZ3RoKSB7CiAgICAgICAgICByZXN1bHQubGVuZ3RoID0gcmVzdWx0TGVuZ3RoOwogICAgICAgIH0KICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgICBDYXJ0ZXNpYW4yLnBhY2soYXJyYXlbaV0sIHJlc3VsdCwgaSAqIDIpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4yLnVucGFja0FycmF5ID0gZnVuY3Rpb24oYXJyYXksIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuT3JFcXVhbHMoImFycmF5Lmxlbmd0aCIsIGFycmF5Lmxlbmd0aCwgMik7CiAgICAgICAgaWYgKGFycmF5Lmxlbmd0aCAlIDIgIT09IDApIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJhcnJheSBsZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDIuIik7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGxlbmd0aCA9IGFycmF5Lmxlbmd0aDsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQXJyYXkobGVuZ3RoIC8gMik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlc3VsdC5sZW5ndGggPSBsZW5ndGggLyAyOwogICAgICAgIH0KICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAyKSB7CiAgICAgICAgICBjb25zdCBpbmRleCA9IGkgLyAyOwogICAgICAgICAgcmVzdWx0W2luZGV4XSA9IENhcnRlc2lhbjIudW5wYWNrKGFycmF5LCBpLCByZXN1bHRbaW5kZXhdKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMi5mcm9tQXJyYXkgPSBDYXJ0ZXNpYW4yLnVucGFjazsKICAgICAgQ2FydGVzaWFuMi5tYXhpbXVtQ29tcG9uZW50ID0gZnVuY3Rpb24oY2FydGVzaWFuMTEpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImNhcnRlc2lhbiIsIGNhcnRlc2lhbjExKTsKICAgICAgICByZXR1cm4gTWF0aC5tYXgoY2FydGVzaWFuMTEueCwgY2FydGVzaWFuMTEueSk7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjIubWluaW11bUNvbXBvbmVudCA9IGZ1bmN0aW9uKGNhcnRlc2lhbjExKSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjYXJ0ZXNpYW4iLCBjYXJ0ZXNpYW4xMSk7CiAgICAgICAgcmV0dXJuIE1hdGgubWluKGNhcnRlc2lhbjExLngsIGNhcnRlc2lhbjExLnkpOwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4yLm1pbmltdW1CeUNvbXBvbmVudCA9IGZ1bmN0aW9uKGZpcnN0LCBzZWNvbmQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiZmlyc3QiLCBmaXJzdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJzZWNvbmQiLCBzZWNvbmQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHQueCA9IE1hdGgubWluKGZpcnN0LngsIHNlY29uZC54KTsKICAgICAgICByZXN1bHQueSA9IE1hdGgubWluKGZpcnN0LnksIHNlY29uZC55KTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4yLm1heGltdW1CeUNvbXBvbmVudCA9IGZ1bmN0aW9uKGZpcnN0LCBzZWNvbmQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiZmlyc3QiLCBmaXJzdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJzZWNvbmQiLCBzZWNvbmQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHQueCA9IE1hdGgubWF4KGZpcnN0LngsIHNlY29uZC54KTsKICAgICAgICByZXN1bHQueSA9IE1hdGgubWF4KGZpcnN0LnksIHNlY29uZC55KTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4yLmNsYW1wID0gZnVuY3Rpb24odmFsdWUsIG1pbjMsIG1heDMsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidmFsdWUiLCB2YWx1ZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtaW4iLCBtaW4zKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1heCIsIG1heDMpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCB4ID0gTWF0aF9kZWZhdWx0LmNsYW1wKHZhbHVlLngsIG1pbjMueCwgbWF4My54KTsKICAgICAgICBjb25zdCB5ID0gTWF0aF9kZWZhdWx0LmNsYW1wKHZhbHVlLnksIG1pbjMueSwgbWF4My55KTsKICAgICAgICByZXN1bHQueCA9IHg7CiAgICAgICAgcmVzdWx0LnkgPSB5OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjIubWFnbml0dWRlU3F1YXJlZCA9IGZ1bmN0aW9uKGNhcnRlc2lhbjExKSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjYXJ0ZXNpYW4iLCBjYXJ0ZXNpYW4xMSk7CiAgICAgICAgcmV0dXJuIGNhcnRlc2lhbjExLnggKiBjYXJ0ZXNpYW4xMS54ICsgY2FydGVzaWFuMTEueSAqIGNhcnRlc2lhbjExLnk7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjIubWFnbml0dWRlID0gZnVuY3Rpb24oY2FydGVzaWFuMTEpIHsKICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KENhcnRlc2lhbjIubWFnbml0dWRlU3F1YXJlZChjYXJ0ZXNpYW4xMSkpOwogICAgICB9OwogICAgICBkaXN0YW5jZVNjcmF0Y2gyID0gbmV3IENhcnRlc2lhbjIoKTsKICAgICAgQ2FydGVzaWFuMi5kaXN0YW5jZSA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJsZWZ0IiwgbGVmdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyaWdodCIsIHJpZ2h0KTsKICAgICAgICBDYXJ0ZXNpYW4yLnN1YnRyYWN0KGxlZnQsIHJpZ2h0LCBkaXN0YW5jZVNjcmF0Y2gyKTsKICAgICAgICByZXR1cm4gQ2FydGVzaWFuMi5tYWduaXR1ZGUoZGlzdGFuY2VTY3JhdGNoMik7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjIuZGlzdGFuY2VTcXVhcmVkID0gZnVuY3Rpb24obGVmdCwgcmlnaHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImxlZnQiLCBsZWZ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJpZ2h0IiwgcmlnaHQpOwogICAgICAgIENhcnRlc2lhbjIuc3VidHJhY3QobGVmdCwgcmlnaHQsIGRpc3RhbmNlU2NyYXRjaDIpOwogICAgICAgIHJldHVybiBDYXJ0ZXNpYW4yLm1hZ25pdHVkZVNxdWFyZWQoZGlzdGFuY2VTY3JhdGNoMik7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjIubm9ybWFsaXplID0gZnVuY3Rpb24oY2FydGVzaWFuMTEsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiY2FydGVzaWFuIiwgY2FydGVzaWFuMTEpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCBtYWduaXR1ZGUgPSBDYXJ0ZXNpYW4yLm1hZ25pdHVkZShjYXJ0ZXNpYW4xMSk7CiAgICAgICAgcmVzdWx0LnggPSBjYXJ0ZXNpYW4xMS54IC8gbWFnbml0dWRlOwogICAgICAgIHJlc3VsdC55ID0gY2FydGVzaWFuMTEueSAvIG1hZ25pdHVkZTsKICAgICAgICBpZiAoaXNOYU4ocmVzdWx0LngpIHx8IGlzTmFOKHJlc3VsdC55KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoIm5vcm1hbGl6ZWQgcmVzdWx0IGlzIG5vdCBhIG51bWJlciIpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4yLmRvdCA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJsZWZ0IiwgbGVmdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyaWdodCIsIHJpZ2h0KTsKICAgICAgICByZXR1cm4gbGVmdC54ICogcmlnaHQueCArIGxlZnQueSAqIHJpZ2h0Lnk7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjIuY3Jvc3MgPSBmdW5jdGlvbihsZWZ0LCByaWdodCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibGVmdCIsIGxlZnQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmlnaHQiLCByaWdodCk7CiAgICAgICAgcmV0dXJuIGxlZnQueCAqIHJpZ2h0LnkgLSBsZWZ0LnkgKiByaWdodC54OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4yLm11bHRpcGx5Q29tcG9uZW50cyA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImxlZnQiLCBsZWZ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJpZ2h0IiwgcmlnaHQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHQueCA9IGxlZnQueCAqIHJpZ2h0Lng7CiAgICAgICAgcmVzdWx0LnkgPSBsZWZ0LnkgKiByaWdodC55OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjIuZGl2aWRlQ29tcG9uZW50cyA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImxlZnQiLCBsZWZ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJpZ2h0IiwgcmlnaHQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHQueCA9IGxlZnQueCAvIHJpZ2h0Lng7CiAgICAgICAgcmVzdWx0LnkgPSBsZWZ0LnkgLyByaWdodC55OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjIuYWRkID0gZnVuY3Rpb24obGVmdCwgcmlnaHQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibGVmdCIsIGxlZnQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmlnaHQiLCByaWdodCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdC54ID0gbGVmdC54ICsgcmlnaHQueDsKICAgICAgICByZXN1bHQueSA9IGxlZnQueSArIHJpZ2h0Lnk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMi5zdWJ0cmFjdCA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImxlZnQiLCBsZWZ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJpZ2h0IiwgcmlnaHQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHQueCA9IGxlZnQueCAtIHJpZ2h0Lng7CiAgICAgICAgcmVzdWx0LnkgPSBsZWZ0LnkgLSByaWdodC55OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjIubXVsdGlwbHlCeVNjYWxhciA9IGZ1bmN0aW9uKGNhcnRlc2lhbjExLCBzY2FsYXIsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiY2FydGVzaWFuIiwgY2FydGVzaWFuMTEpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigic2NhbGFyIiwgc2NhbGFyKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0LnggPSBjYXJ0ZXNpYW4xMS54ICogc2NhbGFyOwogICAgICAgIHJlc3VsdC55ID0gY2FydGVzaWFuMTEueSAqIHNjYWxhcjsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4yLmRpdmlkZUJ5U2NhbGFyID0gZnVuY3Rpb24oY2FydGVzaWFuMTEsIHNjYWxhciwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjYXJ0ZXNpYW4iLCBjYXJ0ZXNpYW4xMSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJzY2FsYXIiLCBzY2FsYXIpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHQueCA9IGNhcnRlc2lhbjExLnggLyBzY2FsYXI7CiAgICAgICAgcmVzdWx0LnkgPSBjYXJ0ZXNpYW4xMS55IC8gc2NhbGFyOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjIubmVnYXRlID0gZnVuY3Rpb24oY2FydGVzaWFuMTEsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiY2FydGVzaWFuIiwgY2FydGVzaWFuMTEpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHQueCA9IC1jYXJ0ZXNpYW4xMS54OwogICAgICAgIHJlc3VsdC55ID0gLWNhcnRlc2lhbjExLnk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMi5hYnMgPSBmdW5jdGlvbihjYXJ0ZXNpYW4xMSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjYXJ0ZXNpYW4iLCBjYXJ0ZXNpYW4xMSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdC54ID0gTWF0aC5hYnMoY2FydGVzaWFuMTEueCk7CiAgICAgICAgcmVzdWx0LnkgPSBNYXRoLmFicyhjYXJ0ZXNpYW4xMS55KTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBsZXJwU2NyYXRjaDIgPSBuZXcgQ2FydGVzaWFuMigpOwogICAgICBDYXJ0ZXNpYW4yLmxlcnAgPSBmdW5jdGlvbihzdGFydCwgZW5kLCB0LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInN0YXJ0Iiwgc3RhcnQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiZW5kIiwgZW5kKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoInQiLCB0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgQ2FydGVzaWFuMi5tdWx0aXBseUJ5U2NhbGFyKGVuZCwgdCwgbGVycFNjcmF0Y2gyKTsKICAgICAgICByZXN1bHQgPSBDYXJ0ZXNpYW4yLm11bHRpcGx5QnlTY2FsYXIoc3RhcnQsIDEgLSB0LCByZXN1bHQpOwogICAgICAgIHJldHVybiBDYXJ0ZXNpYW4yLmFkZChsZXJwU2NyYXRjaDIsIHJlc3VsdCwgcmVzdWx0KTsKICAgICAgfTsKICAgICAgYW5nbGVCZXR3ZWVuU2NyYXRjaDMgPSBuZXcgQ2FydGVzaWFuMigpOwogICAgICBhbmdsZUJldHdlZW5TY3JhdGNoMjIgPSBuZXcgQ2FydGVzaWFuMigpOwogICAgICBDYXJ0ZXNpYW4yLmFuZ2xlQmV0d2VlbiA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJsZWZ0IiwgbGVmdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyaWdodCIsIHJpZ2h0KTsKICAgICAgICBDYXJ0ZXNpYW4yLm5vcm1hbGl6ZShsZWZ0LCBhbmdsZUJldHdlZW5TY3JhdGNoMyk7CiAgICAgICAgQ2FydGVzaWFuMi5ub3JtYWxpemUocmlnaHQsIGFuZ2xlQmV0d2VlblNjcmF0Y2gyMik7CiAgICAgICAgcmV0dXJuIE1hdGhfZGVmYXVsdC5hY29zQ2xhbXBlZCgKICAgICAgICAgIENhcnRlc2lhbjIuZG90KGFuZ2xlQmV0d2VlblNjcmF0Y2gzLCBhbmdsZUJldHdlZW5TY3JhdGNoMjIpCiAgICAgICAgKTsKICAgICAgfTsKICAgICAgbW9zdE9ydGhvZ29uYWxBeGlzU2NyYXRjaDIgPSBuZXcgQ2FydGVzaWFuMigpOwogICAgICBDYXJ0ZXNpYW4yLm1vc3RPcnRob2dvbmFsQXhpcyA9IGZ1bmN0aW9uKGNhcnRlc2lhbjExLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImNhcnRlc2lhbiIsIGNhcnRlc2lhbjExKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgY29uc3QgZiA9IENhcnRlc2lhbjIubm9ybWFsaXplKGNhcnRlc2lhbjExLCBtb3N0T3J0aG9nb25hbEF4aXNTY3JhdGNoMik7CiAgICAgICAgQ2FydGVzaWFuMi5hYnMoZiwgZik7CiAgICAgICAgaWYgKGYueCA8PSBmLnkpIHsKICAgICAgICAgIHJlc3VsdCA9IENhcnRlc2lhbjIuY2xvbmUoQ2FydGVzaWFuMi5VTklUX1gsIHJlc3VsdCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlc3VsdCA9IENhcnRlc2lhbjIuY2xvbmUoQ2FydGVzaWFuMi5VTklUX1ksIHJlc3VsdCk7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjIuZXF1YWxzID0gZnVuY3Rpb24obGVmdCwgcmlnaHQpIHsKICAgICAgICByZXR1cm4gbGVmdCA9PT0gcmlnaHQgfHwgZGVmaW5lZF9kZWZhdWx0KGxlZnQpICYmIGRlZmluZWRfZGVmYXVsdChyaWdodCkgJiYgbGVmdC54ID09PSByaWdodC54ICYmIGxlZnQueSA9PT0gcmlnaHQueTsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMi5lcXVhbHNBcnJheSA9IGZ1bmN0aW9uKGNhcnRlc2lhbjExLCBhcnJheSwgb2Zmc2V0KSB7CiAgICAgICAgcmV0dXJuIGNhcnRlc2lhbjExLnggPT09IGFycmF5W29mZnNldF0gJiYgY2FydGVzaWFuMTEueSA9PT0gYXJyYXlbb2Zmc2V0ICsgMV07CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjIuZXF1YWxzRXBzaWxvbiA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCByZWxhdGl2ZUVwc2lsb24sIGFic29sdXRlRXBzaWxvbikgewogICAgICAgIHJldHVybiBsZWZ0ID09PSByaWdodCB8fCBkZWZpbmVkX2RlZmF1bHQobGVmdCkgJiYgZGVmaW5lZF9kZWZhdWx0KHJpZ2h0KSAmJiBNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbigKICAgICAgICAgIGxlZnQueCwKICAgICAgICAgIHJpZ2h0LngsCiAgICAgICAgICByZWxhdGl2ZUVwc2lsb24sCiAgICAgICAgICBhYnNvbHV0ZUVwc2lsb24KICAgICAgICApICYmIE1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgbGVmdC55LAogICAgICAgICAgcmlnaHQueSwKICAgICAgICAgIHJlbGF0aXZlRXBzaWxvbiwKICAgICAgICAgIGFic29sdXRlRXBzaWxvbgogICAgICAgICk7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjIuWkVSTyA9IE9iamVjdC5mcmVlemUobmV3IENhcnRlc2lhbjIoMCwgMCkpOwogICAgICBDYXJ0ZXNpYW4yLk9ORSA9IE9iamVjdC5mcmVlemUobmV3IENhcnRlc2lhbjIoMSwgMSkpOwogICAgICBDYXJ0ZXNpYW4yLlVOSVRfWCA9IE9iamVjdC5mcmVlemUobmV3IENhcnRlc2lhbjIoMSwgMCkpOwogICAgICBDYXJ0ZXNpYW4yLlVOSVRfWSA9IE9iamVjdC5mcmVlemUobmV3IENhcnRlc2lhbjIoMCwgMSkpOwogICAgICBDYXJ0ZXNpYW4yLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKHJlc3VsdCkgewogICAgICAgIHJldHVybiBDYXJ0ZXNpYW4yLmNsb25lKHRoaXMsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uKHJpZ2h0KSB7CiAgICAgICAgcmV0dXJuIENhcnRlc2lhbjIuZXF1YWxzKHRoaXMsIHJpZ2h0KTsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuMi5wcm90b3R5cGUuZXF1YWxzRXBzaWxvbiA9IGZ1bmN0aW9uKHJpZ2h0LCByZWxhdGl2ZUVwc2lsb24sIGFic29sdXRlRXBzaWxvbikgewogICAgICAgIHJldHVybiBDYXJ0ZXNpYW4yLmVxdWFsc0Vwc2lsb24oCiAgICAgICAgICB0aGlzLAogICAgICAgICAgcmlnaHQsCiAgICAgICAgICByZWxhdGl2ZUVwc2lsb24sCiAgICAgICAgICBhYnNvbHV0ZUVwc2lsb24KICAgICAgICApOwogICAgICB9OwogICAgICBDYXJ0ZXNpYW4yLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBgKCR7dGhpcy54fSwgJHt0aGlzLnl9KWA7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjJfZGVmYXVsdCA9IENhcnRlc2lhbjI7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9FbGxpcHNvaWQuanMKICBmdW5jdGlvbiBpbml0aWFsaXplKGVsbGlwc29pZCwgeCwgeSwgeikgewogICAgeCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHgsIDApOwogICAgeSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHksIDApOwogICAgeiA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHosIDApOwogICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuT3JFcXVhbHMoIngiLCB4LCAwKTsKICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbk9yRXF1YWxzKCJ5IiwgeSwgMCk7CiAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygieiIsIHosIDApOwogICAgZWxsaXBzb2lkLl9yYWRpaSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoeCwgeSwgeik7CiAgICBlbGxpcHNvaWQuX3JhZGlpU3F1YXJlZCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoeCAqIHgsIHkgKiB5LCB6ICogeik7CiAgICBlbGxpcHNvaWQuX3JhZGlpVG9UaGVGb3VydGggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KAogICAgICB4ICogeCAqIHggKiB4LAogICAgICB5ICogeSAqIHkgKiB5LAogICAgICB6ICogeiAqIHogKiB6CiAgICApOwogICAgZWxsaXBzb2lkLl9vbmVPdmVyUmFkaWkgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KAogICAgICB4ID09PSAwID8gMCA6IDEgLyB4LAogICAgICB5ID09PSAwID8gMCA6IDEgLyB5LAogICAgICB6ID09PSAwID8gMCA6IDEgLyB6CiAgICApOwogICAgZWxsaXBzb2lkLl9vbmVPdmVyUmFkaWlTcXVhcmVkID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgKICAgICAgeCA9PT0gMCA/IDAgOiAxIC8gKHggKiB4KSwKICAgICAgeSA9PT0gMCA/IDAgOiAxIC8gKHkgKiB5KSwKICAgICAgeiA9PT0gMCA/IDAgOiAxIC8gKHogKiB6KQogICAgKTsKICAgIGVsbGlwc29pZC5fbWluaW11bVJhZGl1cyA9IE1hdGgubWluKHgsIHksIHopOwogICAgZWxsaXBzb2lkLl9tYXhpbXVtUmFkaXVzID0gTWF0aC5tYXgoeCwgeSwgeik7CiAgICBlbGxpcHNvaWQuX2NlbnRlclRvbGVyYW5jZVNxdWFyZWQgPSBNYXRoX2RlZmF1bHQuRVBTSUxPTjE7CiAgICBpZiAoZWxsaXBzb2lkLl9yYWRpaVNxdWFyZWQueiAhPT0gMCkgewogICAgICBlbGxpcHNvaWQuX3NxdWFyZWRYT3ZlclNxdWFyZWRaID0gZWxsaXBzb2lkLl9yYWRpaVNxdWFyZWQueCAvIGVsbGlwc29pZC5fcmFkaWlTcXVhcmVkLno7CiAgICB9CiAgfQogIGZ1bmN0aW9uIEVsbGlwc29pZCh4LCB5LCB6KSB7CiAgICB0aGlzLl9yYWRpaSA9IHZvaWQgMDsKICAgIHRoaXMuX3JhZGlpU3F1YXJlZCA9IHZvaWQgMDsKICAgIHRoaXMuX3JhZGlpVG9UaGVGb3VydGggPSB2b2lkIDA7CiAgICB0aGlzLl9vbmVPdmVyUmFkaWkgPSB2b2lkIDA7CiAgICB0aGlzLl9vbmVPdmVyUmFkaWlTcXVhcmVkID0gdm9pZCAwOwogICAgdGhpcy5fbWluaW11bVJhZGl1cyA9IHZvaWQgMDsKICAgIHRoaXMuX21heGltdW1SYWRpdXMgPSB2b2lkIDA7CiAgICB0aGlzLl9jZW50ZXJUb2xlcmFuY2VTcXVhcmVkID0gdm9pZCAwOwogICAgdGhpcy5fc3F1YXJlZFhPdmVyU3F1YXJlZFogPSB2b2lkIDA7CiAgICBpbml0aWFsaXplKHRoaXMsIHgsIHksIHopOwogIH0KICBmdW5jdGlvbiBnYXVzc0xlZ2VuZHJlUXVhZHJhdHVyZShhMywgYiwgZnVuYykgewogICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJhIiwgYTMpOwogICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJiIiwgYik7CiAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5mdW5jKCJmdW5jIiwgZnVuYyk7CiAgICBjb25zdCB4TWVhbiA9IDAuNSAqIChiICsgYTMpOwogICAgY29uc3QgeFJhbmdlID0gMC41ICogKGIgLSBhMyk7CiAgICBsZXQgc3VtID0gMDsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNTsgaSsrKSB7CiAgICAgIGNvbnN0IGR4ID0geFJhbmdlICogYWJzY2lzc2FzW2ldOwogICAgICBzdW0gKz0gd2VpZ2h0c1tpXSAqIChmdW5jKHhNZWFuICsgZHgpICsgZnVuYyh4TWVhbiAtIGR4KSk7CiAgICB9CiAgICBzdW0gKj0geFJhbmdlOwogICAgcmV0dXJuIHN1bTsKICB9CiAgdmFyIGNhcnRvZ3JhcGhpY1RvQ2FydGVzaWFuTm9ybWFsLCBjYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbkssIGNhcnRlc2lhblRvQ2FydG9ncmFwaGljTjIsIGNhcnRlc2lhblRvQ2FydG9ncmFwaGljUDIsIGNhcnRlc2lhblRvQ2FydG9ncmFwaGljSDIsIHNjcmF0Y2hFbmRwb2ludCwgYWJzY2lzc2FzLCB3ZWlnaHRzLCBFbGxpcHNvaWRfZGVmYXVsdDsKICB2YXIgaW5pdF9FbGxpcHNvaWQgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0VsbGlwc29pZC5qcyIoKSB7CiAgICAgIGluaXRfQ2FydGVzaWFuMigpOwogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DYXJ0b2dyYXBoaWMoKTsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgaW5pdF9zY2FsZVRvR2VvZGV0aWNTdXJmYWNlKCk7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEVsbGlwc29pZC5wcm90b3R5cGUsIHsKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIHRoZSByYWRpaSBvZiB0aGUgZWxsaXBzb2lkLgogICAgICAgICAqIEBtZW1iZXJvZiBFbGxpcHNvaWQucHJvdG90eXBlCiAgICAgICAgICogQHR5cGUge0NhcnRlc2lhbjN9CiAgICAgICAgICogQHJlYWRvbmx5CiAgICAgICAgICovCiAgICAgICAgcmFkaWk6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yYWRpaTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIEdldHMgdGhlIHNxdWFyZWQgcmFkaWkgb2YgdGhlIGVsbGlwc29pZC4KICAgICAgICAgKiBAbWVtYmVyb2YgRWxsaXBzb2lkLnByb3RvdHlwZQogICAgICAgICAqIEB0eXBlIHtDYXJ0ZXNpYW4zfQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqLwogICAgICAgIHJhZGlpU3F1YXJlZDogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JhZGlpU3F1YXJlZDsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIEdldHMgdGhlIHJhZGlpIG9mIHRoZSBlbGxpcHNvaWQgcmFpc2UgdG8gdGhlIGZvdXJ0aCBwb3dlci4KICAgICAgICAgKiBAbWVtYmVyb2YgRWxsaXBzb2lkLnByb3RvdHlwZQogICAgICAgICAqIEB0eXBlIHtDYXJ0ZXNpYW4zfQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqLwogICAgICAgIHJhZGlpVG9UaGVGb3VydGg6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yYWRpaVRvVGhlRm91cnRoOwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgLyoqCiAgICAgICAgICogR2V0cyBvbmUgb3ZlciB0aGUgcmFkaWkgb2YgdGhlIGVsbGlwc29pZC4KICAgICAgICAgKiBAbWVtYmVyb2YgRWxsaXBzb2lkLnByb3RvdHlwZQogICAgICAgICAqIEB0eXBlIHtDYXJ0ZXNpYW4zfQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqLwogICAgICAgIG9uZU92ZXJSYWRpaTogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29uZU92ZXJSYWRpaTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIEdldHMgb25lIG92ZXIgdGhlIHNxdWFyZWQgcmFkaWkgb2YgdGhlIGVsbGlwc29pZC4KICAgICAgICAgKiBAbWVtYmVyb2YgRWxsaXBzb2lkLnByb3RvdHlwZQogICAgICAgICAqIEB0eXBlIHtDYXJ0ZXNpYW4zfQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqLwogICAgICAgIG9uZU92ZXJSYWRpaVNxdWFyZWQ6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9vbmVPdmVyUmFkaWlTcXVhcmVkOwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgLyoqCiAgICAgICAgICogR2V0cyB0aGUgbWluaW11bSByYWRpdXMgb2YgdGhlIGVsbGlwc29pZC4KICAgICAgICAgKiBAbWVtYmVyb2YgRWxsaXBzb2lkLnByb3RvdHlwZQogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQHJlYWRvbmx5CiAgICAgICAgICovCiAgICAgICAgbWluaW11bVJhZGl1czogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21pbmltdW1SYWRpdXM7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIHRoZSBtYXhpbXVtIHJhZGl1cyBvZiB0aGUgZWxsaXBzb2lkLgogICAgICAgICAqIEBtZW1iZXJvZiBFbGxpcHNvaWQucHJvdG90eXBlCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAcmVhZG9ubHkKICAgICAgICAgKi8KICAgICAgICBtYXhpbXVtUmFkaXVzOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5fbWF4aW11bVJhZGl1czsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgICBFbGxpcHNvaWQuY2xvbmUgPSBmdW5jdGlvbihlbGxpcHNvaWQsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGVsbGlwc29pZCkpIHsKICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHJhZGlpID0gZWxsaXBzb2lkLl9yYWRpaTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IEVsbGlwc29pZChyYWRpaS54LCByYWRpaS55LCByYWRpaS56KTsKICAgICAgICB9CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKHJhZGlpLCByZXN1bHQuX3JhZGlpKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoZWxsaXBzb2lkLl9yYWRpaVNxdWFyZWQsIHJlc3VsdC5fcmFkaWlTcXVhcmVkKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoZWxsaXBzb2lkLl9yYWRpaVRvVGhlRm91cnRoLCByZXN1bHQuX3JhZGlpVG9UaGVGb3VydGgpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShlbGxpcHNvaWQuX29uZU92ZXJSYWRpaSwgcmVzdWx0Ll9vbmVPdmVyUmFkaWkpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShlbGxpcHNvaWQuX29uZU92ZXJSYWRpaVNxdWFyZWQsIHJlc3VsdC5fb25lT3ZlclJhZGlpU3F1YXJlZCk7CiAgICAgICAgcmVzdWx0Ll9taW5pbXVtUmFkaXVzID0gZWxsaXBzb2lkLl9taW5pbXVtUmFkaXVzOwogICAgICAgIHJlc3VsdC5fbWF4aW11bVJhZGl1cyA9IGVsbGlwc29pZC5fbWF4aW11bVJhZGl1czsKICAgICAgICByZXN1bHQuX2NlbnRlclRvbGVyYW5jZVNxdWFyZWQgPSBlbGxpcHNvaWQuX2NlbnRlclRvbGVyYW5jZVNxdWFyZWQ7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgRWxsaXBzb2lkLmZyb21DYXJ0ZXNpYW4zID0gZnVuY3Rpb24oY2FydGVzaWFuMTEsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBFbGxpcHNvaWQoKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoY2FydGVzaWFuMTEpKSB7CiAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0KICAgICAgICBpbml0aWFsaXplKHJlc3VsdCwgY2FydGVzaWFuMTEueCwgY2FydGVzaWFuMTEueSwgY2FydGVzaWFuMTEueik7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgRWxsaXBzb2lkLldHUzg0ID0gT2JqZWN0LmZyZWV6ZSgKICAgICAgICBuZXcgRWxsaXBzb2lkKDYzNzgxMzcsIDYzNzgxMzcsIDYzNTY3NTIzMTQyNDUxNzllLTkpCiAgICAgICk7CiAgICAgIEVsbGlwc29pZC5VTklUX1NQSEVSRSA9IE9iamVjdC5mcmVlemUobmV3IEVsbGlwc29pZCgxLCAxLCAxKSk7CiAgICAgIEVsbGlwc29pZC5NT09OID0gT2JqZWN0LmZyZWV6ZSgKICAgICAgICBuZXcgRWxsaXBzb2lkKAogICAgICAgICAgTWF0aF9kZWZhdWx0LkxVTkFSX1JBRElVUywKICAgICAgICAgIE1hdGhfZGVmYXVsdC5MVU5BUl9SQURJVVMsCiAgICAgICAgICBNYXRoX2RlZmF1bHQuTFVOQVJfUkFESVVTCiAgICAgICAgKQogICAgICApOwogICAgICBFbGxpcHNvaWQuX2RlZmF1bHQgPSBFbGxpcHNvaWQuV0dTODQ7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEVsbGlwc29pZCwgewogICAgICAgIC8qKgogICAgICAgICAqIFRoZSBkZWZhdWx0IGVsbGlwc29pZCB1c2VkIHdoZW4gbm90IG90aGVyd2lzZSBzcGVjaWZpZWQuCiAgICAgICAgICogQG1lbWJlcm9mIEVsbGlwc29pZAogICAgICAgICAqIEB0eXBlIHtFbGxpcHNvaWR9CiAgICAgICAgICogQGV4YW1wbGUKICAgICAgICAgKiBDZXNpdW0uRWxsaXBzb2lkLmRlZmF1bHQgPSBDZXNpdW0uRWxsaXBzb2lkLk1PT047CiAgICAgICAgICoKICAgICAgICAgKiAvLyBBcG9sbG8gMTEgbGFuZGluZyBzaXRlCiAgICAgICAgICogY29uc3QgcG9zaXRpb24gPSBDZXNpdW0uQ2FydGVzaWFuMy5mcm9tUmFkaWFucygKICAgICAgICAgKiAgIDAuNjc0MTYsCiAgICAgICAgICogICAyMy40NzMxNSwKICAgICAgICAgKiApOwogICAgICAgICAqLwogICAgICAgIGRlZmF1bHQ6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBFbGxpcHNvaWQuX2RlZmF1bHQ7CiAgICAgICAgICB9LAogICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInZhbHVlIiwgdmFsdWUpOwogICAgICAgICAgICBFbGxpcHNvaWQuX2RlZmF1bHQgPSB2YWx1ZTsKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Ll9lbGxpcHNvaWRSYWRpaVNxdWFyZWQgPSB2YWx1ZS5yYWRpaVNxdWFyZWQ7CiAgICAgICAgICAgIENhcnRvZ3JhcGhpY19kZWZhdWx0Ll9lbGxpcHNvaWRPbmVPdmVyUmFkaWkgPSB2YWx1ZS5vbmVPdmVyUmFkaWk7CiAgICAgICAgICAgIENhcnRvZ3JhcGhpY19kZWZhdWx0Ll9lbGxpcHNvaWRPbmVPdmVyUmFkaWlTcXVhcmVkID0gdmFsdWUub25lT3ZlclJhZGlpU3F1YXJlZDsKICAgICAgICAgICAgQ2FydG9ncmFwaGljX2RlZmF1bHQuX2VsbGlwc29pZENlbnRlclRvbGVyYW5jZVNxdWFyZWQgPSB2YWx1ZS5fY2VudGVyVG9sZXJhbmNlU3F1YXJlZDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgICBFbGxpcHNvaWQucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24ocmVzdWx0KSB7CiAgICAgICAgcmV0dXJuIEVsbGlwc29pZC5jbG9uZSh0aGlzLCByZXN1bHQpOwogICAgICB9OwogICAgICBFbGxpcHNvaWQucGFja2VkTGVuZ3RoID0gQ2FydGVzaWFuM19kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgRWxsaXBzb2lkLnBhY2sgPSBmdW5jdGlvbih2YWx1ZSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInZhbHVlIiwgdmFsdWUpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKHZhbHVlLl9yYWRpaSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIHJldHVybiBhcnJheTsKICAgICAgfTsKICAgICAgRWxsaXBzb2lkLnVucGFjayA9IGZ1bmN0aW9uKGFycmF5LCBzdGFydGluZ0luZGV4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBjb25zdCByYWRpaSA9IENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2soYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIHJldHVybiBFbGxpcHNvaWQuZnJvbUNhcnRlc2lhbjMocmFkaWksIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIEVsbGlwc29pZC5wcm90b3R5cGUuZ2VvY2VudHJpY1N1cmZhY2VOb3JtYWwgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplOwogICAgICBFbGxpcHNvaWQucHJvdG90eXBlLmdlb2RldGljU3VyZmFjZU5vcm1hbENhcnRvZ3JhcGhpYyA9IGZ1bmN0aW9uKGNhcnRvZ3JhcGhpYzIsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiY2FydG9ncmFwaGljIiwgY2FydG9ncmFwaGljMik7CiAgICAgICAgY29uc3QgbG9uZ2l0dWRlID0gY2FydG9ncmFwaGljMi5sb25naXR1ZGU7CiAgICAgICAgY29uc3QgbGF0aXR1ZGUgPSBjYXJ0b2dyYXBoaWMyLmxhdGl0dWRlOwogICAgICAgIGNvbnN0IGNvc0xhdGl0dWRlID0gTWF0aC5jb3MobGF0aXR1ZGUpOwogICAgICAgIGNvbnN0IHggPSBjb3NMYXRpdHVkZSAqIE1hdGguY29zKGxvbmdpdHVkZSk7CiAgICAgICAgY29uc3QgeSA9IGNvc0xhdGl0dWRlICogTWF0aC5zaW4obG9uZ2l0dWRlKTsKICAgICAgICBjb25zdCB6ID0gTWF0aC5zaW4obGF0aXR1ZGUpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LnggPSB4OwogICAgICAgIHJlc3VsdC55ID0geTsKICAgICAgICByZXN1bHQueiA9IHo7CiAgICAgICAgcmV0dXJuIENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUocmVzdWx0LCByZXN1bHQpOwogICAgICB9OwogICAgICBFbGxpcHNvaWQucHJvdG90eXBlLmdlb2RldGljU3VyZmFjZU5vcm1hbCA9IGZ1bmN0aW9uKGNhcnRlc2lhbjExLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImNhcnRlc2lhbiIsIGNhcnRlc2lhbjExKTsKICAgICAgICBpZiAoaXNOYU4oY2FydGVzaWFuMTEueCkgfHwgaXNOYU4oY2FydGVzaWFuMTEueSkgfHwgaXNOYU4oY2FydGVzaWFuMTEueikpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJjYXJ0ZXNpYW4gaGFzIGEgTmFOIGNvbXBvbmVudCIpOwogICAgICAgIH0KICAgICAgICBpZiAoQ2FydGVzaWFuM19kZWZhdWx0LmVxdWFsc0Vwc2lsb24oY2FydGVzaWFuMTEsIENhcnRlc2lhbjNfZGVmYXVsdC5aRVJPLCBNYXRoX2RlZmF1bHQuRVBTSUxPTjE0KSkgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICAgIH0KICAgICAgICByZXN1bHQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlDb21wb25lbnRzKAogICAgICAgICAgY2FydGVzaWFuMTEsCiAgICAgICAgICB0aGlzLl9vbmVPdmVyUmFkaWlTcXVhcmVkLAogICAgICAgICAgcmVzdWx0CiAgICAgICAgKTsKICAgICAgICByZXR1cm4gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShyZXN1bHQsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIGNhcnRvZ3JhcGhpY1RvQ2FydGVzaWFuTm9ybWFsID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBjYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbksgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIEVsbGlwc29pZC5wcm90b3R5cGUuY2FydG9ncmFwaGljVG9DYXJ0ZXNpYW4gPSBmdW5jdGlvbihjYXJ0b2dyYXBoaWMyLCByZXN1bHQpIHsKICAgICAgICBjb25zdCBuID0gY2FydG9ncmFwaGljVG9DYXJ0ZXNpYW5Ob3JtYWw7CiAgICAgICAgY29uc3QgayA9IGNhcnRvZ3JhcGhpY1RvQ2FydGVzaWFuSzsKICAgICAgICB0aGlzLmdlb2RldGljU3VyZmFjZU5vcm1hbENhcnRvZ3JhcGhpYyhjYXJ0b2dyYXBoaWMyLCBuKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlDb21wb25lbnRzKHRoaXMuX3JhZGlpU3F1YXJlZCwgbiwgayk7CiAgICAgICAgY29uc3QgZ2FtbWEgPSBNYXRoLnNxcnQoQ2FydGVzaWFuM19kZWZhdWx0LmRvdChuLCBrKSk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmRpdmlkZUJ5U2NhbGFyKGssIGdhbW1hLCBrKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcihuLCBjYXJ0b2dyYXBoaWMyLmhlaWdodCwgbik7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gQ2FydGVzaWFuM19kZWZhdWx0LmFkZChrLCBuLCByZXN1bHQpOwogICAgICB9OwogICAgICBFbGxpcHNvaWQucHJvdG90eXBlLmNhcnRvZ3JhcGhpY0FycmF5VG9DYXJ0ZXNpYW5BcnJheSA9IGZ1bmN0aW9uKGNhcnRvZ3JhcGhpY3MsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiY2FydG9ncmFwaGljcyIsIGNhcnRvZ3JhcGhpY3MpOwogICAgICAgIGNvbnN0IGxlbmd0aCA9IGNhcnRvZ3JhcGhpY3MubGVuZ3RoOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBBcnJheShsZW5ndGgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXN1bHQubGVuZ3RoID0gbGVuZ3RoOwogICAgICAgIH0KICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgICByZXN1bHRbaV0gPSB0aGlzLmNhcnRvZ3JhcGhpY1RvQ2FydGVzaWFuKGNhcnRvZ3JhcGhpY3NbaV0sIHJlc3VsdFtpXSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIGNhcnRlc2lhblRvQ2FydG9ncmFwaGljTjIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGNhcnRlc2lhblRvQ2FydG9ncmFwaGljUDIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGNhcnRlc2lhblRvQ2FydG9ncmFwaGljSDIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIEVsbGlwc29pZC5wcm90b3R5cGUuY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWMgPSBmdW5jdGlvbihjYXJ0ZXNpYW4xMSwgcmVzdWx0KSB7CiAgICAgICAgY29uc3QgcCA9IHRoaXMuc2NhbGVUb0dlb2RldGljU3VyZmFjZShjYXJ0ZXNpYW4xMSwgY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWNQMik7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocCkpIHsKICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgfQogICAgICAgIGNvbnN0IG4gPSB0aGlzLmdlb2RldGljU3VyZmFjZU5vcm1hbChwLCBjYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpY04yKTsKICAgICAgICBjb25zdCBoID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KGNhcnRlc2lhbjExLCBwLCBjYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpY0gyKTsKICAgICAgICBjb25zdCBsb25naXR1ZGUgPSBNYXRoLmF0YW4yKG4ueSwgbi54KTsKICAgICAgICBjb25zdCBsYXRpdHVkZSA9IE1hdGguYXNpbihuLnopOwogICAgICAgIGNvbnN0IGhlaWdodCA9IE1hdGhfZGVmYXVsdC5zaWduKENhcnRlc2lhbjNfZGVmYXVsdC5kb3QoaCwgY2FydGVzaWFuMTEpKSAqIENhcnRlc2lhbjNfZGVmYXVsdC5tYWduaXR1ZGUoaCk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdChsb25naXR1ZGUsIGxhdGl0dWRlLCBoZWlnaHQpOwogICAgICAgIH0KICAgICAgICByZXN1bHQubG9uZ2l0dWRlID0gbG9uZ2l0dWRlOwogICAgICAgIHJlc3VsdC5sYXRpdHVkZSA9IGxhdGl0dWRlOwogICAgICAgIHJlc3VsdC5oZWlnaHQgPSBoZWlnaHQ7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgRWxsaXBzb2lkLnByb3RvdHlwZS5jYXJ0ZXNpYW5BcnJheVRvQ2FydG9ncmFwaGljQXJyYXkgPSBmdW5jdGlvbihjYXJ0ZXNpYW5zLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImNhcnRlc2lhbnMiLCBjYXJ0ZXNpYW5zKTsKICAgICAgICBjb25zdCBsZW5ndGggPSBjYXJ0ZXNpYW5zLmxlbmd0aDsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQXJyYXkobGVuZ3RoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVzdWx0Lmxlbmd0aCA9IGxlbmd0aDsKICAgICAgICB9CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgICAgICAgcmVzdWx0W2ldID0gdGhpcy5jYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpYyhjYXJ0ZXNpYW5zW2ldLCByZXN1bHRbaV0pOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBFbGxpcHNvaWQucHJvdG90eXBlLnNjYWxlVG9HZW9kZXRpY1N1cmZhY2UgPSBmdW5jdGlvbihjYXJ0ZXNpYW4xMSwgcmVzdWx0KSB7CiAgICAgICAgcmV0dXJuIHNjYWxlVG9HZW9kZXRpY1N1cmZhY2VfZGVmYXVsdCgKICAgICAgICAgIGNhcnRlc2lhbjExLAogICAgICAgICAgdGhpcy5fb25lT3ZlclJhZGlpLAogICAgICAgICAgdGhpcy5fb25lT3ZlclJhZGlpU3F1YXJlZCwKICAgICAgICAgIHRoaXMuX2NlbnRlclRvbGVyYW5jZVNxdWFyZWQsCiAgICAgICAgICByZXN1bHQKICAgICAgICApOwogICAgICB9OwogICAgICBFbGxpcHNvaWQucHJvdG90eXBlLnNjYWxlVG9HZW9jZW50cmljU3VyZmFjZSA9IGZ1bmN0aW9uKGNhcnRlc2lhbjExLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImNhcnRlc2lhbiIsIGNhcnRlc2lhbjExKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHBvc2l0aW9uWCA9IGNhcnRlc2lhbjExLng7CiAgICAgICAgY29uc3QgcG9zaXRpb25ZID0gY2FydGVzaWFuMTEueTsKICAgICAgICBjb25zdCBwb3NpdGlvblogPSBjYXJ0ZXNpYW4xMS56OwogICAgICAgIGNvbnN0IG9uZU92ZXJSYWRpaVNxdWFyZWQgPSB0aGlzLl9vbmVPdmVyUmFkaWlTcXVhcmVkOwogICAgICAgIGNvbnN0IGJldGEgPSAxIC8gTWF0aC5zcXJ0KAogICAgICAgICAgcG9zaXRpb25YICogcG9zaXRpb25YICogb25lT3ZlclJhZGlpU3F1YXJlZC54ICsgcG9zaXRpb25ZICogcG9zaXRpb25ZICogb25lT3ZlclJhZGlpU3F1YXJlZC55ICsgcG9zaXRpb25aICogcG9zaXRpb25aICogb25lT3ZlclJhZGlpU3F1YXJlZC56CiAgICAgICAgKTsKICAgICAgICByZXR1cm4gQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIoY2FydGVzaWFuMTEsIGJldGEsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIEVsbGlwc29pZC5wcm90b3R5cGUudHJhbnNmb3JtUG9zaXRpb25Ub1NjYWxlZFNwYWNlID0gZnVuY3Rpb24ocG9zaXRpb24sIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUNvbXBvbmVudHMocG9zaXRpb24sIHRoaXMuX29uZU92ZXJSYWRpaSwgcmVzdWx0KTsKICAgICAgfTsKICAgICAgRWxsaXBzb2lkLnByb3RvdHlwZS50cmFuc2Zvcm1Qb3NpdGlvbkZyb21TY2FsZWRTcGFjZSA9IGZ1bmN0aW9uKHBvc2l0aW9uLCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlDb21wb25lbnRzKHBvc2l0aW9uLCB0aGlzLl9yYWRpaSwgcmVzdWx0KTsKICAgICAgfTsKICAgICAgRWxsaXBzb2lkLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbihyaWdodCkgewogICAgICAgIHJldHVybiB0aGlzID09PSByaWdodCB8fCBkZWZpbmVkX2RlZmF1bHQocmlnaHQpICYmIENhcnRlc2lhbjNfZGVmYXVsdC5lcXVhbHModGhpcy5fcmFkaWksIHJpZ2h0Ll9yYWRpaSk7CiAgICAgIH07CiAgICAgIEVsbGlwc29pZC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gdGhpcy5fcmFkaWkudG9TdHJpbmcoKTsKICAgICAgfTsKICAgICAgRWxsaXBzb2lkLnByb3RvdHlwZS5nZXRTdXJmYWNlTm9ybWFsSW50ZXJzZWN0aW9uV2l0aFpBeGlzID0gZnVuY3Rpb24ocG9zaXRpb24sIGJ1ZmZlciwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJwb3NpdGlvbiIsIHBvc2l0aW9uKTsKICAgICAgICBpZiAoIU1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgdGhpcy5fcmFkaWkueCwKICAgICAgICAgIHRoaXMuX3JhZGlpLnksCiAgICAgICAgICBNYXRoX2RlZmF1bHQuRVBTSUxPTjE1CiAgICAgICAgKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgICJFbGxpcHNvaWQgbXVzdCBiZSBhbiBlbGxpcHNvaWQgb2YgcmV2b2x1dGlvbiAocmFkaWkueCA9PSByYWRpaS55KSIKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbigiRWxsaXBzb2lkLnJhZGlpLnoiLCB0aGlzLl9yYWRpaS56LCAwKTsKICAgICAgICBidWZmZXIgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChidWZmZXIsIDApOwogICAgICAgIGNvbnN0IHNxdWFyZWRYT3ZlclNxdWFyZWRaID0gdGhpcy5fc3F1YXJlZFhPdmVyU3F1YXJlZFo7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICAgIH0KICAgICAgICByZXN1bHQueCA9IDA7CiAgICAgICAgcmVzdWx0LnkgPSAwOwogICAgICAgIHJlc3VsdC56ID0gcG9zaXRpb24ueiAqICgxIC0gc3F1YXJlZFhPdmVyU3F1YXJlZFopOwogICAgICAgIGlmIChNYXRoLmFicyhyZXN1bHQueikgPj0gdGhpcy5fcmFkaWkueiAtIGJ1ZmZlcikgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgc2NyYXRjaEVuZHBvaW50ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBFbGxpcHNvaWQucHJvdG90eXBlLmdldExvY2FsQ3VydmF0dXJlID0gZnVuY3Rpb24oc3VyZmFjZVBvc2l0aW9uLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInN1cmZhY2VQb3NpdGlvbiIsIHN1cmZhY2VQb3NpdGlvbik7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IENhcnRlc2lhbjJfZGVmYXVsdCgpOwogICAgICAgIH0KICAgICAgICBjb25zdCBwcmltZVZlcnRpY2FsRW5kcG9pbnQgPSB0aGlzLmdldFN1cmZhY2VOb3JtYWxJbnRlcnNlY3Rpb25XaXRoWkF4aXMoCiAgICAgICAgICBzdXJmYWNlUG9zaXRpb24sCiAgICAgICAgICAwLAogICAgICAgICAgc2NyYXRjaEVuZHBvaW50CiAgICAgICAgKTsKICAgICAgICBjb25zdCBwcmltZVZlcnRpY2FsUmFkaXVzID0gQ2FydGVzaWFuM19kZWZhdWx0LmRpc3RhbmNlKAogICAgICAgICAgc3VyZmFjZVBvc2l0aW9uLAogICAgICAgICAgcHJpbWVWZXJ0aWNhbEVuZHBvaW50CiAgICAgICAgKTsKICAgICAgICBjb25zdCByYWRpdXNSYXRpbyA9IHRoaXMubWluaW11bVJhZGl1cyAqIHByaW1lVmVydGljYWxSYWRpdXMgLyB0aGlzLm1heGltdW1SYWRpdXMgKiogMjsKICAgICAgICBjb25zdCBtZXJpZGlvbmFsUmFkaXVzID0gcHJpbWVWZXJ0aWNhbFJhZGl1cyAqIHJhZGl1c1JhdGlvICoqIDI7CiAgICAgICAgcmV0dXJuIENhcnRlc2lhbjJfZGVmYXVsdC5mcm9tRWxlbWVudHMoCiAgICAgICAgICAxIC8gcHJpbWVWZXJ0aWNhbFJhZGl1cywKICAgICAgICAgIDEgLyBtZXJpZGlvbmFsUmFkaXVzLAogICAgICAgICAgcmVzdWx0CiAgICAgICAgKTsKICAgICAgfTsKICAgICAgYWJzY2lzc2FzID0gWwogICAgICAgIDAuMTQ4ODc0MzM4OTgxNjMsCiAgICAgICAgMC40MzMzOTUzOTQxMjkyNSwKICAgICAgICAwLjY3OTQwOTU2ODI5OTAyLAogICAgICAgIDAuODY1MDYzMzY2Njg4OTgsCiAgICAgICAgMC45NzM5MDY1Mjg1MTcxNywKICAgICAgICAwCiAgICAgIF07CiAgICAgIHdlaWdodHMgPSBbCiAgICAgICAgMC4yOTU1MjQyMjQ3MTQ3NSwKICAgICAgICAwLjI2OTI2NjcxOTMwOTk5LAogICAgICAgIDAuMjE5MDg2MzYyNTE1OTgsCiAgICAgICAgMC4xNDk0NTEzNDkxNTA1OCwKICAgICAgICAwLjA2NjY3MTM0NDMwODY4NCwKICAgICAgICAwCiAgICAgIF07CiAgICAgIEVsbGlwc29pZC5wcm90b3R5cGUuc3VyZmFjZUFyZWEgPSBmdW5jdGlvbihyZWN0YW5nbGUpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlY3RhbmdsZSIsIHJlY3RhbmdsZSk7CiAgICAgICAgY29uc3QgbWluTG9uZ2l0dWRlID0gcmVjdGFuZ2xlLndlc3Q7CiAgICAgICAgbGV0IG1heExvbmdpdHVkZSA9IHJlY3RhbmdsZS5lYXN0OwogICAgICAgIGNvbnN0IG1pbkxhdGl0dWRlID0gcmVjdGFuZ2xlLnNvdXRoOwogICAgICAgIGNvbnN0IG1heExhdGl0dWRlID0gcmVjdGFuZ2xlLm5vcnRoOwogICAgICAgIHdoaWxlIChtYXhMb25naXR1ZGUgPCBtaW5Mb25naXR1ZGUpIHsKICAgICAgICAgIG1heExvbmdpdHVkZSArPSBNYXRoX2RlZmF1bHQuVFdPX1BJOwogICAgICAgIH0KICAgICAgICBjb25zdCByYWRpaVNxdWFyZWQgPSB0aGlzLl9yYWRpaVNxdWFyZWQ7CiAgICAgICAgY29uc3QgYTIyID0gcmFkaWlTcXVhcmVkLng7CiAgICAgICAgY29uc3QgYjIgPSByYWRpaVNxdWFyZWQueTsKICAgICAgICBjb25zdCBjMiA9IHJhZGlpU3F1YXJlZC56OwogICAgICAgIGNvbnN0IGEyYjIgPSBhMjIgKiBiMjsKICAgICAgICByZXR1cm4gZ2F1c3NMZWdlbmRyZVF1YWRyYXR1cmUobWluTGF0aXR1ZGUsIG1heExhdGl0dWRlLCBmdW5jdGlvbihsYXQpIHsKICAgICAgICAgIGNvbnN0IHNpblBoaSA9IE1hdGguY29zKGxhdCk7CiAgICAgICAgICBjb25zdCBjb3NQaGkgPSBNYXRoLnNpbihsYXQpOwogICAgICAgICAgcmV0dXJuIE1hdGguY29zKGxhdCkgKiBnYXVzc0xlZ2VuZHJlUXVhZHJhdHVyZShtaW5Mb25naXR1ZGUsIG1heExvbmdpdHVkZSwgZnVuY3Rpb24obG9uKSB7CiAgICAgICAgICAgIGNvbnN0IGNvc1RoZXRhID0gTWF0aC5jb3MobG9uKTsKICAgICAgICAgICAgY29uc3Qgc2luVGhldGEgPSBNYXRoLnNpbihsb24pOwogICAgICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KAogICAgICAgICAgICAgIGEyYjIgKiBjb3NQaGkgKiBjb3NQaGkgKyBjMiAqIChiMiAqIGNvc1RoZXRhICogY29zVGhldGEgKyBhMjIgKiBzaW5UaGV0YSAqIHNpblRoZXRhKSAqIHNpblBoaSAqIHNpblBoaQogICAgICAgICAgICApOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH07CiAgICAgIEVsbGlwc29pZF9kZWZhdWx0ID0gRWxsaXBzb2lkOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvR2VvZ3JhcGhpY1Byb2plY3Rpb24uanMKICBmdW5jdGlvbiBHZW9ncmFwaGljUHJvamVjdGlvbihlbGxpcHNvaWQpIHsKICAgIHRoaXMuX2VsbGlwc29pZCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGVsbGlwc29pZCwgRWxsaXBzb2lkX2RlZmF1bHQuZGVmYXVsdCk7CiAgICB0aGlzLl9zZW1pbWFqb3JBeGlzID0gdGhpcy5fZWxsaXBzb2lkLm1heGltdW1SYWRpdXM7CiAgICB0aGlzLl9vbmVPdmVyU2VtaW1ham9yQXhpcyA9IDEgLyB0aGlzLl9zZW1pbWFqb3JBeGlzOwogIH0KICB2YXIgR2VvZ3JhcGhpY1Byb2plY3Rpb25fZGVmYXVsdDsKICB2YXIgaW5pdF9HZW9ncmFwaGljUHJvamVjdGlvbiA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvR2VvZ3JhcGhpY1Byb2plY3Rpb24uanMiKCkgewogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DYXJ0b2dyYXBoaWMoKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoR2VvZ3JhcGhpY1Byb2plY3Rpb24ucHJvdG90eXBlLCB7CiAgICAgICAgLyoqCiAgICAgICAgICogR2V0cyB0aGUge0BsaW5rIEVsbGlwc29pZH0uCiAgICAgICAgICoKICAgICAgICAgKiBAbWVtYmVyb2YgR2VvZ3JhcGhpY1Byb2plY3Rpb24ucHJvdG90eXBlCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7RWxsaXBzb2lkfQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqLwogICAgICAgIGVsbGlwc29pZDogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VsbGlwc29pZDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgICBHZW9ncmFwaGljUHJvamVjdGlvbi5wcm90b3R5cGUucHJvamVjdCA9IGZ1bmN0aW9uKGNhcnRvZ3JhcGhpYzIsIHJlc3VsdCkgewogICAgICAgIGNvbnN0IHNlbWltYWpvckF4aXMgPSB0aGlzLl9zZW1pbWFqb3JBeGlzOwogICAgICAgIGNvbnN0IHggPSBjYXJ0b2dyYXBoaWMyLmxvbmdpdHVkZSAqIHNlbWltYWpvckF4aXM7CiAgICAgICAgY29uc3QgeSA9IGNhcnRvZ3JhcGhpYzIubGF0aXR1ZGUgKiBzZW1pbWFqb3JBeGlzOwogICAgICAgIGNvbnN0IHogPSBjYXJ0b2dyYXBoaWMyLmhlaWdodDsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCh4LCB5LCB6KTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LnggPSB4OwogICAgICAgIHJlc3VsdC55ID0geTsKICAgICAgICByZXN1bHQueiA9IHo7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgR2VvZ3JhcGhpY1Byb2plY3Rpb24ucHJvdG90eXBlLnVucHJvamVjdCA9IGZ1bmN0aW9uKGNhcnRlc2lhbjExLCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChjYXJ0ZXNpYW4xMSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJjYXJ0ZXNpYW4gaXMgcmVxdWlyZWQiKTsKICAgICAgICB9CiAgICAgICAgY29uc3Qgb25lT3ZlckVhcnRoU2VtaW1ham9yQXhpcyA9IHRoaXMuX29uZU92ZXJTZW1pbWFqb3JBeGlzOwogICAgICAgIGNvbnN0IGxvbmdpdHVkZSA9IGNhcnRlc2lhbjExLnggKiBvbmVPdmVyRWFydGhTZW1pbWFqb3JBeGlzOwogICAgICAgIGNvbnN0IGxhdGl0dWRlID0gY2FydGVzaWFuMTEueSAqIG9uZU92ZXJFYXJ0aFNlbWltYWpvckF4aXM7CiAgICAgICAgY29uc3QgaGVpZ2h0ID0gY2FydGVzaWFuMTEuejsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KGxvbmdpdHVkZSwgbGF0aXR1ZGUsIGhlaWdodCk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5sb25naXR1ZGUgPSBsb25naXR1ZGU7CiAgICAgICAgcmVzdWx0LmxhdGl0dWRlID0gbGF0aXR1ZGU7CiAgICAgICAgcmVzdWx0LmhlaWdodCA9IGhlaWdodDsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBHZW9ncmFwaGljUHJvamVjdGlvbl9kZWZhdWx0ID0gR2VvZ3JhcGhpY1Byb2plY3Rpb247CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9JbnRlcnNlY3QuanMKICB2YXIgSW50ZXJzZWN0LCBJbnRlcnNlY3RfZGVmYXVsdDsKICB2YXIgaW5pdF9JbnRlcnNlY3QgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0ludGVyc2VjdC5qcyIoKSB7CiAgICAgIEludGVyc2VjdCA9IHsKICAgICAgICAvKioKICAgICAgICAgKiBSZXByZXNlbnRzIHRoYXQgYW4gb2JqZWN0IGlzIG5vdCBjb250YWluZWQgd2l0aGluIHRoZSBmcnVzdHVtLgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBPVVRTSURFOiAtMSwKICAgICAgICAvKioKICAgICAgICAgKiBSZXByZXNlbnRzIHRoYXQgYW4gb2JqZWN0IGludGVyc2VjdHMgb25lIG9mIHRoZSBmcnVzdHVtJ3MgcGxhbmVzLgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBJTlRFUlNFQ1RJTkc6IDAsCiAgICAgICAgLyoqCiAgICAgICAgICogUmVwcmVzZW50cyB0aGF0IGFuIG9iamVjdCBpcyBmdWxseSB3aXRoaW4gdGhlIGZydXN0dW0uCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIElOU0lERTogMQogICAgICB9OwogICAgICBJbnRlcnNlY3RfZGVmYXVsdCA9IE9iamVjdC5mcmVlemUoSW50ZXJzZWN0KTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0ludGVydmFsLmpzCiAgZnVuY3Rpb24gSW50ZXJ2YWwoc3RhcnQsIHN0b3ApIHsKICAgIHRoaXMuc3RhcnQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydCwgMCk7CiAgICB0aGlzLnN0b3AgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdG9wLCAwKTsKICB9CiAgdmFyIEludGVydmFsX2RlZmF1bHQ7CiAgdmFyIGluaXRfSW50ZXJ2YWwgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0ludGVydmFsLmpzIigpIHsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgSW50ZXJ2YWxfZGVmYXVsdCA9IEludGVydmFsOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvTWF0cml4My5qcwogIGZ1bmN0aW9uIE1hdHJpeDMoY29sdW1uMFJvdzAsIGNvbHVtbjFSb3cwLCBjb2x1bW4yUm93MCwgY29sdW1uMFJvdzEsIGNvbHVtbjFSb3cxLCBjb2x1bW4yUm93MSwgY29sdW1uMFJvdzIsIGNvbHVtbjFSb3cyLCBjb2x1bW4yUm93MikgewogICAgdGhpc1swXSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGNvbHVtbjBSb3cwLCAwKTsKICAgIHRoaXNbMV0gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChjb2x1bW4wUm93MSwgMCk7CiAgICB0aGlzWzJdID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoY29sdW1uMFJvdzIsIDApOwogICAgdGhpc1szXSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGNvbHVtbjFSb3cwLCAwKTsKICAgIHRoaXNbNF0gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChjb2x1bW4xUm93MSwgMCk7CiAgICB0aGlzWzVdID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoY29sdW1uMVJvdzIsIDApOwogICAgdGhpc1s2XSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGNvbHVtbjJSb3cwLCAwKTsKICAgIHRoaXNbN10gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChjb2x1bW4yUm93MSwgMCk7CiAgICB0aGlzWzhdID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoY29sdW1uMlJvdzIsIDApOwogIH0KICBmdW5jdGlvbiBjb21wdXRlRnJvYmVuaXVzTm9ybShtYXRyaXgpIHsKICAgIGxldCBub3JtID0gMDsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgOTsgKytpKSB7CiAgICAgIGNvbnN0IHRlbXAgPSBtYXRyaXhbaV07CiAgICAgIG5vcm0gKz0gdGVtcCAqIHRlbXA7CiAgICB9CiAgICByZXR1cm4gTWF0aC5zcXJ0KG5vcm0pOwogIH0KICBmdW5jdGlvbiBvZmZEaWFnb25hbEZyb2Jlbml1c05vcm0obWF0cml4KSB7CiAgICBsZXQgbm9ybSA9IDA7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDM7ICsraSkgewogICAgICBjb25zdCB0ZW1wID0gbWF0cml4W01hdHJpeDMuZ2V0RWxlbWVudEluZGV4KGNvbFZhbFtpXSwgcm93VmFsW2ldKV07CiAgICAgIG5vcm0gKz0gMiAqIHRlbXAgKiB0ZW1wOwogICAgfQogICAgcmV0dXJuIE1hdGguc3FydChub3JtKTsKICB9CiAgZnVuY3Rpb24gc2h1ckRlY29tcG9zaXRpb24obWF0cml4LCByZXN1bHQpIHsKICAgIGNvbnN0IHRvbGVyYW5jZSA9IE1hdGhfZGVmYXVsdC5FUFNJTE9OMTU7CiAgICBsZXQgbWF4RGlhZ29uYWwgPSAwOwogICAgbGV0IHJvdEF4aXMyID0gMTsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgKytpKSB7CiAgICAgIGNvbnN0IHRlbXAgPSBNYXRoLmFicygKICAgICAgICBtYXRyaXhbTWF0cml4My5nZXRFbGVtZW50SW5kZXgoY29sVmFsW2ldLCByb3dWYWxbaV0pXQogICAgICApOwogICAgICBpZiAodGVtcCA+IG1heERpYWdvbmFsKSB7CiAgICAgICAgcm90QXhpczIgPSBpOwogICAgICAgIG1heERpYWdvbmFsID0gdGVtcDsKICAgICAgfQogICAgfQogICAgbGV0IGMgPSAxOwogICAgbGV0IHMgPSAwOwogICAgY29uc3QgcCA9IHJvd1ZhbFtyb3RBeGlzMl07CiAgICBjb25zdCBxID0gY29sVmFsW3JvdEF4aXMyXTsKICAgIGlmIChNYXRoLmFicyhtYXRyaXhbTWF0cml4My5nZXRFbGVtZW50SW5kZXgocSwgcCldKSA+IHRvbGVyYW5jZSkgewogICAgICBjb25zdCBxcSA9IG1hdHJpeFtNYXRyaXgzLmdldEVsZW1lbnRJbmRleChxLCBxKV07CiAgICAgIGNvbnN0IHBwID0gbWF0cml4W01hdHJpeDMuZ2V0RWxlbWVudEluZGV4KHAsIHApXTsKICAgICAgY29uc3QgcXAgPSBtYXRyaXhbTWF0cml4My5nZXRFbGVtZW50SW5kZXgocSwgcCldOwogICAgICBjb25zdCB0YXUgPSAocXEgLSBwcCkgLyAyIC8gcXA7CiAgICAgIGxldCB0OwogICAgICBpZiAodGF1IDwgMCkgewogICAgICAgIHQgPSAtMSAvICgtdGF1ICsgTWF0aC5zcXJ0KDEgKyB0YXUgKiB0YXUpKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0ID0gMSAvICh0YXUgKyBNYXRoLnNxcnQoMSArIHRhdSAqIHRhdSkpOwogICAgICB9CiAgICAgIGMgPSAxIC8gTWF0aC5zcXJ0KDEgKyB0ICogdCk7CiAgICAgIHMgPSB0ICogYzsKICAgIH0KICAgIHJlc3VsdCA9IE1hdHJpeDMuY2xvbmUoTWF0cml4My5JREVOVElUWSwgcmVzdWx0KTsKICAgIHJlc3VsdFtNYXRyaXgzLmdldEVsZW1lbnRJbmRleChwLCBwKV0gPSByZXN1bHRbTWF0cml4My5nZXRFbGVtZW50SW5kZXgocSwgcSldID0gYzsKICAgIHJlc3VsdFtNYXRyaXgzLmdldEVsZW1lbnRJbmRleChxLCBwKV0gPSBzOwogICAgcmVzdWx0W01hdHJpeDMuZ2V0RWxlbWVudEluZGV4KHAsIHEpXSA9IC1zOwogICAgcmV0dXJuIHJlc3VsdDsKICB9CiAgdmFyIHNjYWxlU2NyYXRjaDEsIHNjYWxlU2NyYXRjaDIsIHNjcmF0Y2hDb2x1bW4sIHNjYWxlU2NyYXRjaDMsIHNjYWxlU2NyYXRjaDQsIHNjYWxlU2NyYXRjaDUsIHJvd1ZhbCwgY29sVmFsLCBqTWF0cml4LCBqTWF0cml4VHJhbnNwb3NlLCBzY3JhdGNoVHJhbnNwb3NlTWF0cml4LCBNYXRyaXgzX2RlZmF1bHQ7CiAgdmFyIGluaXRfTWF0cml4MyA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvTWF0cml4My5qcyIoKSB7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBNYXRyaXgzLnBhY2tlZExlbmd0aCA9IDk7CiAgICAgIE1hdHJpeDMucGFjayA9IGZ1bmN0aW9uKHZhbHVlLCBhcnJheSwgc3RhcnRpbmdJbmRleCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidmFsdWUiLCB2YWx1ZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlWzBdOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZVsxXTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWVbMl07CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlWzNdOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZVs0XTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWVbNV07CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlWzZdOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZVs3XTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWVbOF07CiAgICAgICAgcmV0dXJuIGFycmF5OwogICAgICB9OwogICAgICBNYXRyaXgzLnVucGFjayA9IGZ1bmN0aW9uKGFycmF5LCBzdGFydGluZ0luZGV4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgTWF0cml4MygpOwogICAgICAgIH0KICAgICAgICByZXN1bHRbMF0gPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIHJlc3VsdFsxXSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgcmVzdWx0WzJdID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICByZXN1bHRbM10gPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIHJlc3VsdFs0XSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgcmVzdWx0WzVdID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICByZXN1bHRbNl0gPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIHJlc3VsdFs3XSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgcmVzdWx0WzhdID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXgzLnBhY2tBcnJheSA9IGZ1bmN0aW9uKGFycmF5LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIGNvbnN0IGxlbmd0aCA9IGFycmF5Lmxlbmd0aDsKICAgICAgICBjb25zdCByZXN1bHRMZW5ndGggPSBsZW5ndGggKiA5OwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBBcnJheShyZXN1bHRMZW5ndGgpOwogICAgICAgIH0gZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkocmVzdWx0KSAmJiByZXN1bHQubGVuZ3RoICE9PSByZXN1bHRMZW5ndGgpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgICAiSWYgcmVzdWx0IGlzIGEgdHlwZWQgYXJyYXksIGl0IG11c3QgaGF2ZSBleGFjdGx5IGFycmF5Lmxlbmd0aCAqIDkgZWxlbWVudHMiCiAgICAgICAgICApOwogICAgICAgIH0gZWxzZSBpZiAocmVzdWx0Lmxlbmd0aCAhPT0gcmVzdWx0TGVuZ3RoKSB7CiAgICAgICAgICByZXN1bHQubGVuZ3RoID0gcmVzdWx0TGVuZ3RoOwogICAgICAgIH0KICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgICBNYXRyaXgzLnBhY2soYXJyYXlbaV0sIHJlc3VsdCwgaSAqIDkpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXgzLnVucGFja0FycmF5ID0gZnVuY3Rpb24oYXJyYXksIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuT3JFcXVhbHMoImFycmF5Lmxlbmd0aCIsIGFycmF5Lmxlbmd0aCwgOSk7CiAgICAgICAgaWYgKGFycmF5Lmxlbmd0aCAlIDkgIT09IDApIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJhcnJheSBsZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDkuIik7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGxlbmd0aCA9IGFycmF5Lmxlbmd0aDsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQXJyYXkobGVuZ3RoIC8gOSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlc3VsdC5sZW5ndGggPSBsZW5ndGggLyA5OwogICAgICAgIH0KICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSA5KSB7CiAgICAgICAgICBjb25zdCBpbmRleCA9IGkgLyA5OwogICAgICAgICAgcmVzdWx0W2luZGV4XSA9IE1hdHJpeDMudW5wYWNrKGFycmF5LCBpLCByZXN1bHRbaW5kZXhdKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4My5jbG9uZSA9IGZ1bmN0aW9uKG1hdHJpeCwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQobWF0cml4KSkgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBNYXRyaXgzKAogICAgICAgICAgICBtYXRyaXhbMF0sCiAgICAgICAgICAgIG1hdHJpeFszXSwKICAgICAgICAgICAgbWF0cml4WzZdLAogICAgICAgICAgICBtYXRyaXhbMV0sCiAgICAgICAgICAgIG1hdHJpeFs0XSwKICAgICAgICAgICAgbWF0cml4WzddLAogICAgICAgICAgICBtYXRyaXhbMl0sCiAgICAgICAgICAgIG1hdHJpeFs1XSwKICAgICAgICAgICAgbWF0cml4WzhdCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICByZXN1bHRbMF0gPSBtYXRyaXhbMF07CiAgICAgICAgcmVzdWx0WzFdID0gbWF0cml4WzFdOwogICAgICAgIHJlc3VsdFsyXSA9IG1hdHJpeFsyXTsKICAgICAgICByZXN1bHRbM10gPSBtYXRyaXhbM107CiAgICAgICAgcmVzdWx0WzRdID0gbWF0cml4WzRdOwogICAgICAgIHJlc3VsdFs1XSA9IG1hdHJpeFs1XTsKICAgICAgICByZXN1bHRbNl0gPSBtYXRyaXhbNl07CiAgICAgICAgcmVzdWx0WzddID0gbWF0cml4WzddOwogICAgICAgIHJlc3VsdFs4XSA9IG1hdHJpeFs4XTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXgzLmZyb21BcnJheSA9IE1hdHJpeDMudW5wYWNrOwogICAgICBNYXRyaXgzLmZyb21Db2x1bW5NYWpvckFycmF5ID0gZnVuY3Rpb24odmFsdWVzLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoInZhbHVlcyIsIHZhbHVlcyk7CiAgICAgICAgcmV0dXJuIE1hdHJpeDMuY2xvbmUodmFsdWVzLCByZXN1bHQpOwogICAgICB9OwogICAgICBNYXRyaXgzLmZyb21Sb3dNYWpvckFycmF5ID0gZnVuY3Rpb24odmFsdWVzLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoInZhbHVlcyIsIHZhbHVlcyk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBNYXRyaXgzKAogICAgICAgICAgICB2YWx1ZXNbMF0sCiAgICAgICAgICAgIHZhbHVlc1sxXSwKICAgICAgICAgICAgdmFsdWVzWzJdLAogICAgICAgICAgICB2YWx1ZXNbM10sCiAgICAgICAgICAgIHZhbHVlc1s0XSwKICAgICAgICAgICAgdmFsdWVzWzVdLAogICAgICAgICAgICB2YWx1ZXNbNl0sCiAgICAgICAgICAgIHZhbHVlc1s3XSwKICAgICAgICAgICAgdmFsdWVzWzhdCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICByZXN1bHRbMF0gPSB2YWx1ZXNbMF07CiAgICAgICAgcmVzdWx0WzFdID0gdmFsdWVzWzNdOwogICAgICAgIHJlc3VsdFsyXSA9IHZhbHVlc1s2XTsKICAgICAgICByZXN1bHRbM10gPSB2YWx1ZXNbMV07CiAgICAgICAgcmVzdWx0WzRdID0gdmFsdWVzWzRdOwogICAgICAgIHJlc3VsdFs1XSA9IHZhbHVlc1s3XTsKICAgICAgICByZXN1bHRbNl0gPSB2YWx1ZXNbMl07CiAgICAgICAgcmVzdWx0WzddID0gdmFsdWVzWzVdOwogICAgICAgIHJlc3VsdFs4XSA9IHZhbHVlc1s4XTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXgzLmZyb21RdWF0ZXJuaW9uID0gZnVuY3Rpb24ocXVhdGVybmlvbiwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJxdWF0ZXJuaW9uIiwgcXVhdGVybmlvbik7CiAgICAgICAgY29uc3QgeDIgPSBxdWF0ZXJuaW9uLnggKiBxdWF0ZXJuaW9uLng7CiAgICAgICAgY29uc3QgeHkgPSBxdWF0ZXJuaW9uLnggKiBxdWF0ZXJuaW9uLnk7CiAgICAgICAgY29uc3QgeHogPSBxdWF0ZXJuaW9uLnggKiBxdWF0ZXJuaW9uLno7CiAgICAgICAgY29uc3QgeHcgPSBxdWF0ZXJuaW9uLnggKiBxdWF0ZXJuaW9uLnc7CiAgICAgICAgY29uc3QgeTIgPSBxdWF0ZXJuaW9uLnkgKiBxdWF0ZXJuaW9uLnk7CiAgICAgICAgY29uc3QgeXogPSBxdWF0ZXJuaW9uLnkgKiBxdWF0ZXJuaW9uLno7CiAgICAgICAgY29uc3QgeXcgPSBxdWF0ZXJuaW9uLnkgKiBxdWF0ZXJuaW9uLnc7CiAgICAgICAgY29uc3QgejIgPSBxdWF0ZXJuaW9uLnogKiBxdWF0ZXJuaW9uLno7CiAgICAgICAgY29uc3QgencgPSBxdWF0ZXJuaW9uLnogKiBxdWF0ZXJuaW9uLnc7CiAgICAgICAgY29uc3QgdzIgPSBxdWF0ZXJuaW9uLncgKiBxdWF0ZXJuaW9uLnc7CiAgICAgICAgY29uc3QgbTAwID0geDIgLSB5MiAtIHoyICsgdzI7CiAgICAgICAgY29uc3QgbTAxID0gMiAqICh4eSAtIHp3KTsKICAgICAgICBjb25zdCBtMDIgPSAyICogKHh6ICsgeXcpOwogICAgICAgIGNvbnN0IG0xMCA9IDIgKiAoeHkgKyB6dyk7CiAgICAgICAgY29uc3QgbTExID0gLXgyICsgeTIgLSB6MiArIHcyOwogICAgICAgIGNvbnN0IG0xMiA9IDIgKiAoeXogLSB4dyk7CiAgICAgICAgY29uc3QgbTIwID0gMiAqICh4eiAtIHl3KTsKICAgICAgICBjb25zdCBtMjEgPSAyICogKHl6ICsgeHcpOwogICAgICAgIGNvbnN0IG0yMiA9IC14MiAtIHkyICsgejIgKyB3MjsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IE1hdHJpeDMobTAwLCBtMDEsIG0wMiwgbTEwLCBtMTEsIG0xMiwgbTIwLCBtMjEsIG0yMik7CiAgICAgICAgfQogICAgICAgIHJlc3VsdFswXSA9IG0wMDsKICAgICAgICByZXN1bHRbMV0gPSBtMTA7CiAgICAgICAgcmVzdWx0WzJdID0gbTIwOwogICAgICAgIHJlc3VsdFszXSA9IG0wMTsKICAgICAgICByZXN1bHRbNF0gPSBtMTE7CiAgICAgICAgcmVzdWx0WzVdID0gbTIxOwogICAgICAgIHJlc3VsdFs2XSA9IG0wMjsKICAgICAgICByZXN1bHRbN10gPSBtMTI7CiAgICAgICAgcmVzdWx0WzhdID0gbTIyOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDMuZnJvbUhlYWRpbmdQaXRjaFJvbGwgPSBmdW5jdGlvbihoZWFkaW5nUGl0Y2hSb2xsLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImhlYWRpbmdQaXRjaFJvbGwiLCBoZWFkaW5nUGl0Y2hSb2xsKTsKICAgICAgICBjb25zdCBjb3NUaGV0YSA9IE1hdGguY29zKC1oZWFkaW5nUGl0Y2hSb2xsLnBpdGNoKTsKICAgICAgICBjb25zdCBjb3NQc2kgPSBNYXRoLmNvcygtaGVhZGluZ1BpdGNoUm9sbC5oZWFkaW5nKTsKICAgICAgICBjb25zdCBjb3NQaGkgPSBNYXRoLmNvcyhoZWFkaW5nUGl0Y2hSb2xsLnJvbGwpOwogICAgICAgIGNvbnN0IHNpblRoZXRhID0gTWF0aC5zaW4oLWhlYWRpbmdQaXRjaFJvbGwucGl0Y2gpOwogICAgICAgIGNvbnN0IHNpblBzaSA9IE1hdGguc2luKC1oZWFkaW5nUGl0Y2hSb2xsLmhlYWRpbmcpOwogICAgICAgIGNvbnN0IHNpblBoaSA9IE1hdGguc2luKGhlYWRpbmdQaXRjaFJvbGwucm9sbCk7CiAgICAgICAgY29uc3QgbTAwID0gY29zVGhldGEgKiBjb3NQc2k7CiAgICAgICAgY29uc3QgbTAxID0gLWNvc1BoaSAqIHNpblBzaSArIHNpblBoaSAqIHNpblRoZXRhICogY29zUHNpOwogICAgICAgIGNvbnN0IG0wMiA9IHNpblBoaSAqIHNpblBzaSArIGNvc1BoaSAqIHNpblRoZXRhICogY29zUHNpOwogICAgICAgIGNvbnN0IG0xMCA9IGNvc1RoZXRhICogc2luUHNpOwogICAgICAgIGNvbnN0IG0xMSA9IGNvc1BoaSAqIGNvc1BzaSArIHNpblBoaSAqIHNpblRoZXRhICogc2luUHNpOwogICAgICAgIGNvbnN0IG0xMiA9IC1zaW5QaGkgKiBjb3NQc2kgKyBjb3NQaGkgKiBzaW5UaGV0YSAqIHNpblBzaTsKICAgICAgICBjb25zdCBtMjAgPSAtc2luVGhldGE7CiAgICAgICAgY29uc3QgbTIxID0gc2luUGhpICogY29zVGhldGE7CiAgICAgICAgY29uc3QgbTIyID0gY29zUGhpICogY29zVGhldGE7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBNYXRyaXgzKG0wMCwgbTAxLCBtMDIsIG0xMCwgbTExLCBtMTIsIG0yMCwgbTIxLCBtMjIpOwogICAgICAgIH0KICAgICAgICByZXN1bHRbMF0gPSBtMDA7CiAgICAgICAgcmVzdWx0WzFdID0gbTEwOwogICAgICAgIHJlc3VsdFsyXSA9IG0yMDsKICAgICAgICByZXN1bHRbM10gPSBtMDE7CiAgICAgICAgcmVzdWx0WzRdID0gbTExOwogICAgICAgIHJlc3VsdFs1XSA9IG0yMTsKICAgICAgICByZXN1bHRbNl0gPSBtMDI7CiAgICAgICAgcmVzdWx0WzddID0gbTEyOwogICAgICAgIHJlc3VsdFs4XSA9IG0yMjsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXgzLmZyb21TY2FsZSA9IGZ1bmN0aW9uKHNjYWxlLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInNjYWxlIiwgc2NhbGUpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgTWF0cml4MyhzY2FsZS54LCAwLCAwLCAwLCBzY2FsZS55LCAwLCAwLCAwLCBzY2FsZS56KTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0WzBdID0gc2NhbGUueDsKICAgICAgICByZXN1bHRbMV0gPSAwOwogICAgICAgIHJlc3VsdFsyXSA9IDA7CiAgICAgICAgcmVzdWx0WzNdID0gMDsKICAgICAgICByZXN1bHRbNF0gPSBzY2FsZS55OwogICAgICAgIHJlc3VsdFs1XSA9IDA7CiAgICAgICAgcmVzdWx0WzZdID0gMDsKICAgICAgICByZXN1bHRbN10gPSAwOwogICAgICAgIHJlc3VsdFs4XSA9IHNjYWxlLno7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4My5mcm9tVW5pZm9ybVNjYWxlID0gZnVuY3Rpb24oc2NhbGUsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigic2NhbGUiLCBzY2FsZSk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBNYXRyaXgzKHNjYWxlLCAwLCAwLCAwLCBzY2FsZSwgMCwgMCwgMCwgc2NhbGUpOwogICAgICAgIH0KICAgICAgICByZXN1bHRbMF0gPSBzY2FsZTsKICAgICAgICByZXN1bHRbMV0gPSAwOwogICAgICAgIHJlc3VsdFsyXSA9IDA7CiAgICAgICAgcmVzdWx0WzNdID0gMDsKICAgICAgICByZXN1bHRbNF0gPSBzY2FsZTsKICAgICAgICByZXN1bHRbNV0gPSAwOwogICAgICAgIHJlc3VsdFs2XSA9IDA7CiAgICAgICAgcmVzdWx0WzddID0gMDsKICAgICAgICByZXN1bHRbOF0gPSBzY2FsZTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXgzLmZyb21Dcm9zc1Byb2R1Y3QgPSBmdW5jdGlvbih2ZWN0b3IsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidmVjdG9yIiwgdmVjdG9yKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IE1hdHJpeDMoCiAgICAgICAgICAgIDAsCiAgICAgICAgICAgIC12ZWN0b3IueiwKICAgICAgICAgICAgdmVjdG9yLnksCiAgICAgICAgICAgIHZlY3Rvci56LAogICAgICAgICAgICAwLAogICAgICAgICAgICAtdmVjdG9yLngsCiAgICAgICAgICAgIC12ZWN0b3IueSwKICAgICAgICAgICAgdmVjdG9yLngsCiAgICAgICAgICAgIDAKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdFswXSA9IDA7CiAgICAgICAgcmVzdWx0WzFdID0gdmVjdG9yLno7CiAgICAgICAgcmVzdWx0WzJdID0gLXZlY3Rvci55OwogICAgICAgIHJlc3VsdFszXSA9IC12ZWN0b3IuejsKICAgICAgICByZXN1bHRbNF0gPSAwOwogICAgICAgIHJlc3VsdFs1XSA9IHZlY3Rvci54OwogICAgICAgIHJlc3VsdFs2XSA9IHZlY3Rvci55OwogICAgICAgIHJlc3VsdFs3XSA9IC12ZWN0b3IueDsKICAgICAgICByZXN1bHRbOF0gPSAwOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDMuZnJvbVJvdGF0aW9uWCA9IGZ1bmN0aW9uKGFuZ2xlLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoImFuZ2xlIiwgYW5nbGUpOwogICAgICAgIGNvbnN0IGNvc0FuZ2xlID0gTWF0aC5jb3MoYW5nbGUpOwogICAgICAgIGNvbnN0IHNpbkFuZ2xlID0gTWF0aC5zaW4oYW5nbGUpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgTWF0cml4MygKICAgICAgICAgICAgMSwKICAgICAgICAgICAgMCwKICAgICAgICAgICAgMCwKICAgICAgICAgICAgMCwKICAgICAgICAgICAgY29zQW5nbGUsCiAgICAgICAgICAgIC1zaW5BbmdsZSwKICAgICAgICAgICAgMCwKICAgICAgICAgICAgc2luQW5nbGUsCiAgICAgICAgICAgIGNvc0FuZ2xlCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICByZXN1bHRbMF0gPSAxOwogICAgICAgIHJlc3VsdFsxXSA9IDA7CiAgICAgICAgcmVzdWx0WzJdID0gMDsKICAgICAgICByZXN1bHRbM10gPSAwOwogICAgICAgIHJlc3VsdFs0XSA9IGNvc0FuZ2xlOwogICAgICAgIHJlc3VsdFs1XSA9IHNpbkFuZ2xlOwogICAgICAgIHJlc3VsdFs2XSA9IDA7CiAgICAgICAgcmVzdWx0WzddID0gLXNpbkFuZ2xlOwogICAgICAgIHJlc3VsdFs4XSA9IGNvc0FuZ2xlOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDMuZnJvbVJvdGF0aW9uWSA9IGZ1bmN0aW9uKGFuZ2xlLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoImFuZ2xlIiwgYW5nbGUpOwogICAgICAgIGNvbnN0IGNvc0FuZ2xlID0gTWF0aC5jb3MoYW5nbGUpOwogICAgICAgIGNvbnN0IHNpbkFuZ2xlID0gTWF0aC5zaW4oYW5nbGUpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgTWF0cml4MygKICAgICAgICAgICAgY29zQW5nbGUsCiAgICAgICAgICAgIDAsCiAgICAgICAgICAgIHNpbkFuZ2xlLAogICAgICAgICAgICAwLAogICAgICAgICAgICAxLAogICAgICAgICAgICAwLAogICAgICAgICAgICAtc2luQW5nbGUsCiAgICAgICAgICAgIDAsCiAgICAgICAgICAgIGNvc0FuZ2xlCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICByZXN1bHRbMF0gPSBjb3NBbmdsZTsKICAgICAgICByZXN1bHRbMV0gPSAwOwogICAgICAgIHJlc3VsdFsyXSA9IC1zaW5BbmdsZTsKICAgICAgICByZXN1bHRbM10gPSAwOwogICAgICAgIHJlc3VsdFs0XSA9IDE7CiAgICAgICAgcmVzdWx0WzVdID0gMDsKICAgICAgICByZXN1bHRbNl0gPSBzaW5BbmdsZTsKICAgICAgICByZXN1bHRbN10gPSAwOwogICAgICAgIHJlc3VsdFs4XSA9IGNvc0FuZ2xlOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDMuZnJvbVJvdGF0aW9uWiA9IGZ1bmN0aW9uKGFuZ2xlLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoImFuZ2xlIiwgYW5nbGUpOwogICAgICAgIGNvbnN0IGNvc0FuZ2xlID0gTWF0aC5jb3MoYW5nbGUpOwogICAgICAgIGNvbnN0IHNpbkFuZ2xlID0gTWF0aC5zaW4oYW5nbGUpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgTWF0cml4MygKICAgICAgICAgICAgY29zQW5nbGUsCiAgICAgICAgICAgIC1zaW5BbmdsZSwKICAgICAgICAgICAgMCwKICAgICAgICAgICAgc2luQW5nbGUsCiAgICAgICAgICAgIGNvc0FuZ2xlLAogICAgICAgICAgICAwLAogICAgICAgICAgICAwLAogICAgICAgICAgICAwLAogICAgICAgICAgICAxCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICByZXN1bHRbMF0gPSBjb3NBbmdsZTsKICAgICAgICByZXN1bHRbMV0gPSBzaW5BbmdsZTsKICAgICAgICByZXN1bHRbMl0gPSAwOwogICAgICAgIHJlc3VsdFszXSA9IC1zaW5BbmdsZTsKICAgICAgICByZXN1bHRbNF0gPSBjb3NBbmdsZTsKICAgICAgICByZXN1bHRbNV0gPSAwOwogICAgICAgIHJlc3VsdFs2XSA9IDA7CiAgICAgICAgcmVzdWx0WzddID0gMDsKICAgICAgICByZXN1bHRbOF0gPSAxOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDMudG9BcnJheSA9IGZ1bmN0aW9uKG1hdHJpeCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXRyaXgiLCBtYXRyaXgpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBbCiAgICAgICAgICAgIG1hdHJpeFswXSwKICAgICAgICAgICAgbWF0cml4WzFdLAogICAgICAgICAgICBtYXRyaXhbMl0sCiAgICAgICAgICAgIG1hdHJpeFszXSwKICAgICAgICAgICAgbWF0cml4WzRdLAogICAgICAgICAgICBtYXRyaXhbNV0sCiAgICAgICAgICAgIG1hdHJpeFs2XSwKICAgICAgICAgICAgbWF0cml4WzddLAogICAgICAgICAgICBtYXRyaXhbOF0KICAgICAgICAgIF07CiAgICAgICAgfQogICAgICAgIHJlc3VsdFswXSA9IG1hdHJpeFswXTsKICAgICAgICByZXN1bHRbMV0gPSBtYXRyaXhbMV07CiAgICAgICAgcmVzdWx0WzJdID0gbWF0cml4WzJdOwogICAgICAgIHJlc3VsdFszXSA9IG1hdHJpeFszXTsKICAgICAgICByZXN1bHRbNF0gPSBtYXRyaXhbNF07CiAgICAgICAgcmVzdWx0WzVdID0gbWF0cml4WzVdOwogICAgICAgIHJlc3VsdFs2XSA9IG1hdHJpeFs2XTsKICAgICAgICByZXN1bHRbN10gPSBtYXRyaXhbN107CiAgICAgICAgcmVzdWx0WzhdID0gbWF0cml4WzhdOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDMuZ2V0RWxlbWVudEluZGV4ID0gZnVuY3Rpb24oY29sdW1uLCByb3cpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygicm93Iiwgcm93LCAwKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIubGVzc1RoYW5PckVxdWFscygicm93Iiwgcm93LCAyKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygiY29sdW1uIiwgY29sdW1uLCAwKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIubGVzc1RoYW5PckVxdWFscygiY29sdW1uIiwgY29sdW1uLCAyKTsKICAgICAgICByZXR1cm4gY29sdW1uICogMyArIHJvdzsKICAgICAgfTsKICAgICAgTWF0cml4My5nZXRDb2x1bW4gPSBmdW5jdGlvbihtYXRyaXgsIGluZGV4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuT3JFcXVhbHMoImluZGV4IiwgaW5kZXgsIDApOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5sZXNzVGhhbk9yRXF1YWxzKCJpbmRleCIsIGluZGV4LCAyKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgY29uc3Qgc3RhcnRJbmRleCA9IGluZGV4ICogMzsKICAgICAgICBjb25zdCB4ID0gbWF0cml4W3N0YXJ0SW5kZXhdOwogICAgICAgIGNvbnN0IHkgPSBtYXRyaXhbc3RhcnRJbmRleCArIDFdOwogICAgICAgIGNvbnN0IHogPSBtYXRyaXhbc3RhcnRJbmRleCArIDJdOwogICAgICAgIHJlc3VsdC54ID0geDsKICAgICAgICByZXN1bHQueSA9IHk7CiAgICAgICAgcmVzdWx0LnogPSB6OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDMuc2V0Q29sdW1uID0gZnVuY3Rpb24obWF0cml4LCBpbmRleCwgY2FydGVzaWFuMTEsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygiaW5kZXgiLCBpbmRleCwgMCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmxlc3NUaGFuT3JFcXVhbHMoImluZGV4IiwgaW5kZXgsIDIpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiY2FydGVzaWFuIiwgY2FydGVzaWFuMTEpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHQgPSBNYXRyaXgzLmNsb25lKG1hdHJpeCwgcmVzdWx0KTsKICAgICAgICBjb25zdCBzdGFydEluZGV4ID0gaW5kZXggKiAzOwogICAgICAgIHJlc3VsdFtzdGFydEluZGV4XSA9IGNhcnRlc2lhbjExLng7CiAgICAgICAgcmVzdWx0W3N0YXJ0SW5kZXggKyAxXSA9IGNhcnRlc2lhbjExLnk7CiAgICAgICAgcmVzdWx0W3N0YXJ0SW5kZXggKyAyXSA9IGNhcnRlc2lhbjExLno7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4My5nZXRSb3cgPSBmdW5jdGlvbihtYXRyaXgsIGluZGV4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuT3JFcXVhbHMoImluZGV4IiwgaW5kZXgsIDApOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5sZXNzVGhhbk9yRXF1YWxzKCJpbmRleCIsIGluZGV4LCAyKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgY29uc3QgeCA9IG1hdHJpeFtpbmRleF07CiAgICAgICAgY29uc3QgeSA9IG1hdHJpeFtpbmRleCArIDNdOwogICAgICAgIGNvbnN0IHogPSBtYXRyaXhbaW5kZXggKyA2XTsKICAgICAgICByZXN1bHQueCA9IHg7CiAgICAgICAgcmVzdWx0LnkgPSB5OwogICAgICAgIHJlc3VsdC56ID0gejsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXgzLnNldFJvdyA9IGZ1bmN0aW9uKG1hdHJpeCwgaW5kZXgsIGNhcnRlc2lhbjExLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuT3JFcXVhbHMoImluZGV4IiwgaW5kZXgsIDApOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5sZXNzVGhhbk9yRXF1YWxzKCJpbmRleCIsIGluZGV4LCAyKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImNhcnRlc2lhbiIsIGNhcnRlc2lhbjExKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0ID0gTWF0cml4My5jbG9uZShtYXRyaXgsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0W2luZGV4XSA9IGNhcnRlc2lhbjExLng7CiAgICAgICAgcmVzdWx0W2luZGV4ICsgM10gPSBjYXJ0ZXNpYW4xMS55OwogICAgICAgIHJlc3VsdFtpbmRleCArIDZdID0gY2FydGVzaWFuMTEuejsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBzY2FsZVNjcmF0Y2gxID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBNYXRyaXgzLnNldFNjYWxlID0gZnVuY3Rpb24obWF0cml4LCBzY2FsZSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXRyaXgiLCBtYXRyaXgpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgic2NhbGUiLCBzY2FsZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGNvbnN0IGV4aXN0aW5nU2NhbGUgPSBNYXRyaXgzLmdldFNjYWxlKG1hdHJpeCwgc2NhbGVTY3JhdGNoMSk7CiAgICAgICAgY29uc3Qgc2NhbGVSYXRpb1ggPSBzY2FsZS54IC8gZXhpc3RpbmdTY2FsZS54OwogICAgICAgIGNvbnN0IHNjYWxlUmF0aW9ZID0gc2NhbGUueSAvIGV4aXN0aW5nU2NhbGUueTsKICAgICAgICBjb25zdCBzY2FsZVJhdGlvWiA9IHNjYWxlLnogLyBleGlzdGluZ1NjYWxlLno7CiAgICAgICAgcmVzdWx0WzBdID0gbWF0cml4WzBdICogc2NhbGVSYXRpb1g7CiAgICAgICAgcmVzdWx0WzFdID0gbWF0cml4WzFdICogc2NhbGVSYXRpb1g7CiAgICAgICAgcmVzdWx0WzJdID0gbWF0cml4WzJdICogc2NhbGVSYXRpb1g7CiAgICAgICAgcmVzdWx0WzNdID0gbWF0cml4WzNdICogc2NhbGVSYXRpb1k7CiAgICAgICAgcmVzdWx0WzRdID0gbWF0cml4WzRdICogc2NhbGVSYXRpb1k7CiAgICAgICAgcmVzdWx0WzVdID0gbWF0cml4WzVdICogc2NhbGVSYXRpb1k7CiAgICAgICAgcmVzdWx0WzZdID0gbWF0cml4WzZdICogc2NhbGVSYXRpb1o7CiAgICAgICAgcmVzdWx0WzddID0gbWF0cml4WzddICogc2NhbGVSYXRpb1o7CiAgICAgICAgcmVzdWx0WzhdID0gbWF0cml4WzhdICogc2NhbGVSYXRpb1o7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgc2NhbGVTY3JhdGNoMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgTWF0cml4My5zZXRVbmlmb3JtU2NhbGUgPSBmdW5jdGlvbihtYXRyaXgsIHNjYWxlLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJzY2FsZSIsIHNjYWxlKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgY29uc3QgZXhpc3RpbmdTY2FsZSA9IE1hdHJpeDMuZ2V0U2NhbGUobWF0cml4LCBzY2FsZVNjcmF0Y2gyKTsKICAgICAgICBjb25zdCBzY2FsZVJhdGlvWCA9IHNjYWxlIC8gZXhpc3RpbmdTY2FsZS54OwogICAgICAgIGNvbnN0IHNjYWxlUmF0aW9ZID0gc2NhbGUgLyBleGlzdGluZ1NjYWxlLnk7CiAgICAgICAgY29uc3Qgc2NhbGVSYXRpb1ogPSBzY2FsZSAvIGV4aXN0aW5nU2NhbGUuejsKICAgICAgICByZXN1bHRbMF0gPSBtYXRyaXhbMF0gKiBzY2FsZVJhdGlvWDsKICAgICAgICByZXN1bHRbMV0gPSBtYXRyaXhbMV0gKiBzY2FsZVJhdGlvWDsKICAgICAgICByZXN1bHRbMl0gPSBtYXRyaXhbMl0gKiBzY2FsZVJhdGlvWDsKICAgICAgICByZXN1bHRbM10gPSBtYXRyaXhbM10gKiBzY2FsZVJhdGlvWTsKICAgICAgICByZXN1bHRbNF0gPSBtYXRyaXhbNF0gKiBzY2FsZVJhdGlvWTsKICAgICAgICByZXN1bHRbNV0gPSBtYXRyaXhbNV0gKiBzY2FsZVJhdGlvWTsKICAgICAgICByZXN1bHRbNl0gPSBtYXRyaXhbNl0gKiBzY2FsZVJhdGlvWjsKICAgICAgICByZXN1bHRbN10gPSBtYXRyaXhbN10gKiBzY2FsZVJhdGlvWjsKICAgICAgICByZXN1bHRbOF0gPSBtYXRyaXhbOF0gKiBzY2FsZVJhdGlvWjsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBzY3JhdGNoQ29sdW1uID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBNYXRyaXgzLmdldFNjYWxlID0gZnVuY3Rpb24obWF0cml4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdC54ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZSgKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tRWxlbWVudHMobWF0cml4WzBdLCBtYXRyaXhbMV0sIG1hdHJpeFsyXSwgc2NyYXRjaENvbHVtbikKICAgICAgICApOwogICAgICAgIHJlc3VsdC55ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZSgKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tRWxlbWVudHMobWF0cml4WzNdLCBtYXRyaXhbNF0sIG1hdHJpeFs1XSwgc2NyYXRjaENvbHVtbikKICAgICAgICApOwogICAgICAgIHJlc3VsdC56ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZSgKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tRWxlbWVudHMobWF0cml4WzZdLCBtYXRyaXhbN10sIG1hdHJpeFs4XSwgc2NyYXRjaENvbHVtbikKICAgICAgICApOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIHNjYWxlU2NyYXRjaDMgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIE1hdHJpeDMuZ2V0TWF4aW11bVNjYWxlID0gZnVuY3Rpb24obWF0cml4KSB7CiAgICAgICAgTWF0cml4My5nZXRTY2FsZShtYXRyaXgsIHNjYWxlU2NyYXRjaDMpOwogICAgICAgIHJldHVybiBDYXJ0ZXNpYW4zX2RlZmF1bHQubWF4aW11bUNvbXBvbmVudChzY2FsZVNjcmF0Y2gzKTsKICAgICAgfTsKICAgICAgc2NhbGVTY3JhdGNoNCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgTWF0cml4My5zZXRSb3RhdGlvbiA9IGZ1bmN0aW9uKG1hdHJpeCwgcm90YXRpb24sIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgY29uc3Qgc2NhbGUgPSBNYXRyaXgzLmdldFNjYWxlKG1hdHJpeCwgc2NhbGVTY3JhdGNoNCk7CiAgICAgICAgcmVzdWx0WzBdID0gcm90YXRpb25bMF0gKiBzY2FsZS54OwogICAgICAgIHJlc3VsdFsxXSA9IHJvdGF0aW9uWzFdICogc2NhbGUueDsKICAgICAgICByZXN1bHRbMl0gPSByb3RhdGlvblsyXSAqIHNjYWxlLng7CiAgICAgICAgcmVzdWx0WzNdID0gcm90YXRpb25bM10gKiBzY2FsZS55OwogICAgICAgIHJlc3VsdFs0XSA9IHJvdGF0aW9uWzRdICogc2NhbGUueTsKICAgICAgICByZXN1bHRbNV0gPSByb3RhdGlvbls1XSAqIHNjYWxlLnk7CiAgICAgICAgcmVzdWx0WzZdID0gcm90YXRpb25bNl0gKiBzY2FsZS56OwogICAgICAgIHJlc3VsdFs3XSA9IHJvdGF0aW9uWzddICogc2NhbGUuejsKICAgICAgICByZXN1bHRbOF0gPSByb3RhdGlvbls4XSAqIHNjYWxlLno7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgc2NhbGVTY3JhdGNoNSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgTWF0cml4My5nZXRSb3RhdGlvbiA9IGZ1bmN0aW9uKG1hdHJpeCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXRyaXgiLCBtYXRyaXgpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCBzY2FsZSA9IE1hdHJpeDMuZ2V0U2NhbGUobWF0cml4LCBzY2FsZVNjcmF0Y2g1KTsKICAgICAgICByZXN1bHRbMF0gPSBtYXRyaXhbMF0gLyBzY2FsZS54OwogICAgICAgIHJlc3VsdFsxXSA9IG1hdHJpeFsxXSAvIHNjYWxlLng7CiAgICAgICAgcmVzdWx0WzJdID0gbWF0cml4WzJdIC8gc2NhbGUueDsKICAgICAgICByZXN1bHRbM10gPSBtYXRyaXhbM10gLyBzY2FsZS55OwogICAgICAgIHJlc3VsdFs0XSA9IG1hdHJpeFs0XSAvIHNjYWxlLnk7CiAgICAgICAgcmVzdWx0WzVdID0gbWF0cml4WzVdIC8gc2NhbGUueTsKICAgICAgICByZXN1bHRbNl0gPSBtYXRyaXhbNl0gLyBzY2FsZS56OwogICAgICAgIHJlc3VsdFs3XSA9IG1hdHJpeFs3XSAvIHNjYWxlLno7CiAgICAgICAgcmVzdWx0WzhdID0gbWF0cml4WzhdIC8gc2NhbGUuejsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXgzLm11bHRpcGx5ID0gZnVuY3Rpb24obGVmdCwgcmlnaHQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibGVmdCIsIGxlZnQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmlnaHQiLCByaWdodCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGNvbnN0IGNvbHVtbjBSb3cwID0gbGVmdFswXSAqIHJpZ2h0WzBdICsgbGVmdFszXSAqIHJpZ2h0WzFdICsgbGVmdFs2XSAqIHJpZ2h0WzJdOwogICAgICAgIGNvbnN0IGNvbHVtbjBSb3cxID0gbGVmdFsxXSAqIHJpZ2h0WzBdICsgbGVmdFs0XSAqIHJpZ2h0WzFdICsgbGVmdFs3XSAqIHJpZ2h0WzJdOwogICAgICAgIGNvbnN0IGNvbHVtbjBSb3cyID0gbGVmdFsyXSAqIHJpZ2h0WzBdICsgbGVmdFs1XSAqIHJpZ2h0WzFdICsgbGVmdFs4XSAqIHJpZ2h0WzJdOwogICAgICAgIGNvbnN0IGNvbHVtbjFSb3cwID0gbGVmdFswXSAqIHJpZ2h0WzNdICsgbGVmdFszXSAqIHJpZ2h0WzRdICsgbGVmdFs2XSAqIHJpZ2h0WzVdOwogICAgICAgIGNvbnN0IGNvbHVtbjFSb3cxID0gbGVmdFsxXSAqIHJpZ2h0WzNdICsgbGVmdFs0XSAqIHJpZ2h0WzRdICsgbGVmdFs3XSAqIHJpZ2h0WzVdOwogICAgICAgIGNvbnN0IGNvbHVtbjFSb3cyID0gbGVmdFsyXSAqIHJpZ2h0WzNdICsgbGVmdFs1XSAqIHJpZ2h0WzRdICsgbGVmdFs4XSAqIHJpZ2h0WzVdOwogICAgICAgIGNvbnN0IGNvbHVtbjJSb3cwID0gbGVmdFswXSAqIHJpZ2h0WzZdICsgbGVmdFszXSAqIHJpZ2h0WzddICsgbGVmdFs2XSAqIHJpZ2h0WzhdOwogICAgICAgIGNvbnN0IGNvbHVtbjJSb3cxID0gbGVmdFsxXSAqIHJpZ2h0WzZdICsgbGVmdFs0XSAqIHJpZ2h0WzddICsgbGVmdFs3XSAqIHJpZ2h0WzhdOwogICAgICAgIGNvbnN0IGNvbHVtbjJSb3cyID0gbGVmdFsyXSAqIHJpZ2h0WzZdICsgbGVmdFs1XSAqIHJpZ2h0WzddICsgbGVmdFs4XSAqIHJpZ2h0WzhdOwogICAgICAgIHJlc3VsdFswXSA9IGNvbHVtbjBSb3cwOwogICAgICAgIHJlc3VsdFsxXSA9IGNvbHVtbjBSb3cxOwogICAgICAgIHJlc3VsdFsyXSA9IGNvbHVtbjBSb3cyOwogICAgICAgIHJlc3VsdFszXSA9IGNvbHVtbjFSb3cwOwogICAgICAgIHJlc3VsdFs0XSA9IGNvbHVtbjFSb3cxOwogICAgICAgIHJlc3VsdFs1XSA9IGNvbHVtbjFSb3cyOwogICAgICAgIHJlc3VsdFs2XSA9IGNvbHVtbjJSb3cwOwogICAgICAgIHJlc3VsdFs3XSA9IGNvbHVtbjJSb3cxOwogICAgICAgIHJlc3VsdFs4XSA9IGNvbHVtbjJSb3cyOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDMuYWRkID0gZnVuY3Rpb24obGVmdCwgcmlnaHQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibGVmdCIsIGxlZnQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmlnaHQiLCByaWdodCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdFswXSA9IGxlZnRbMF0gKyByaWdodFswXTsKICAgICAgICByZXN1bHRbMV0gPSBsZWZ0WzFdICsgcmlnaHRbMV07CiAgICAgICAgcmVzdWx0WzJdID0gbGVmdFsyXSArIHJpZ2h0WzJdOwogICAgICAgIHJlc3VsdFszXSA9IGxlZnRbM10gKyByaWdodFszXTsKICAgICAgICByZXN1bHRbNF0gPSBsZWZ0WzRdICsgcmlnaHRbNF07CiAgICAgICAgcmVzdWx0WzVdID0gbGVmdFs1XSArIHJpZ2h0WzVdOwogICAgICAgIHJlc3VsdFs2XSA9IGxlZnRbNl0gKyByaWdodFs2XTsKICAgICAgICByZXN1bHRbN10gPSBsZWZ0WzddICsgcmlnaHRbN107CiAgICAgICAgcmVzdWx0WzhdID0gbGVmdFs4XSArIHJpZ2h0WzhdOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDMuc3VidHJhY3QgPSBmdW5jdGlvbihsZWZ0LCByaWdodCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJsZWZ0IiwgbGVmdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyaWdodCIsIHJpZ2h0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0WzBdID0gbGVmdFswXSAtIHJpZ2h0WzBdOwogICAgICAgIHJlc3VsdFsxXSA9IGxlZnRbMV0gLSByaWdodFsxXTsKICAgICAgICByZXN1bHRbMl0gPSBsZWZ0WzJdIC0gcmlnaHRbMl07CiAgICAgICAgcmVzdWx0WzNdID0gbGVmdFszXSAtIHJpZ2h0WzNdOwogICAgICAgIHJlc3VsdFs0XSA9IGxlZnRbNF0gLSByaWdodFs0XTsKICAgICAgICByZXN1bHRbNV0gPSBsZWZ0WzVdIC0gcmlnaHRbNV07CiAgICAgICAgcmVzdWx0WzZdID0gbGVmdFs2XSAtIHJpZ2h0WzZdOwogICAgICAgIHJlc3VsdFs3XSA9IGxlZnRbN10gLSByaWdodFs3XTsKICAgICAgICByZXN1bHRbOF0gPSBsZWZ0WzhdIC0gcmlnaHRbOF07CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4My5tdWx0aXBseUJ5VmVjdG9yID0gZnVuY3Rpb24obWF0cml4LCBjYXJ0ZXNpYW4xMSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXRyaXgiLCBtYXRyaXgpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiY2FydGVzaWFuIiwgY2FydGVzaWFuMTEpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCB2WCA9IGNhcnRlc2lhbjExLng7CiAgICAgICAgY29uc3QgdlkgPSBjYXJ0ZXNpYW4xMS55OwogICAgICAgIGNvbnN0IHZaID0gY2FydGVzaWFuMTEuejsKICAgICAgICBjb25zdCB4ID0gbWF0cml4WzBdICogdlggKyBtYXRyaXhbM10gKiB2WSArIG1hdHJpeFs2XSAqIHZaOwogICAgICAgIGNvbnN0IHkgPSBtYXRyaXhbMV0gKiB2WCArIG1hdHJpeFs0XSAqIHZZICsgbWF0cml4WzddICogdlo7CiAgICAgICAgY29uc3QgeiA9IG1hdHJpeFsyXSAqIHZYICsgbWF0cml4WzVdICogdlkgKyBtYXRyaXhbOF0gKiB2WjsKICAgICAgICByZXN1bHQueCA9IHg7CiAgICAgICAgcmVzdWx0LnkgPSB5OwogICAgICAgIHJlc3VsdC56ID0gejsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXgzLm11bHRpcGx5QnlTY2FsYXIgPSBmdW5jdGlvbihtYXRyaXgsIHNjYWxhciwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXRyaXgiLCBtYXRyaXgpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigic2NhbGFyIiwgc2NhbGFyKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0WzBdID0gbWF0cml4WzBdICogc2NhbGFyOwogICAgICAgIHJlc3VsdFsxXSA9IG1hdHJpeFsxXSAqIHNjYWxhcjsKICAgICAgICByZXN1bHRbMl0gPSBtYXRyaXhbMl0gKiBzY2FsYXI7CiAgICAgICAgcmVzdWx0WzNdID0gbWF0cml4WzNdICogc2NhbGFyOwogICAgICAgIHJlc3VsdFs0XSA9IG1hdHJpeFs0XSAqIHNjYWxhcjsKICAgICAgICByZXN1bHRbNV0gPSBtYXRyaXhbNV0gKiBzY2FsYXI7CiAgICAgICAgcmVzdWx0WzZdID0gbWF0cml4WzZdICogc2NhbGFyOwogICAgICAgIHJlc3VsdFs3XSA9IG1hdHJpeFs3XSAqIHNjYWxhcjsKICAgICAgICByZXN1bHRbOF0gPSBtYXRyaXhbOF0gKiBzY2FsYXI7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4My5tdWx0aXBseUJ5U2NhbGUgPSBmdW5jdGlvbihtYXRyaXgsIHNjYWxlLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJzY2FsZSIsIHNjYWxlKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0WzBdID0gbWF0cml4WzBdICogc2NhbGUueDsKICAgICAgICByZXN1bHRbMV0gPSBtYXRyaXhbMV0gKiBzY2FsZS54OwogICAgICAgIHJlc3VsdFsyXSA9IG1hdHJpeFsyXSAqIHNjYWxlLng7CiAgICAgICAgcmVzdWx0WzNdID0gbWF0cml4WzNdICogc2NhbGUueTsKICAgICAgICByZXN1bHRbNF0gPSBtYXRyaXhbNF0gKiBzY2FsZS55OwogICAgICAgIHJlc3VsdFs1XSA9IG1hdHJpeFs1XSAqIHNjYWxlLnk7CiAgICAgICAgcmVzdWx0WzZdID0gbWF0cml4WzZdICogc2NhbGUuejsKICAgICAgICByZXN1bHRbN10gPSBtYXRyaXhbN10gKiBzY2FsZS56OwogICAgICAgIHJlc3VsdFs4XSA9IG1hdHJpeFs4XSAqIHNjYWxlLno7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4My5tdWx0aXBseUJ5VW5pZm9ybVNjYWxlID0gZnVuY3Rpb24obWF0cml4LCBzY2FsZSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXRyaXgiLCBtYXRyaXgpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigic2NhbGUiLCBzY2FsZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdFswXSA9IG1hdHJpeFswXSAqIHNjYWxlOwogICAgICAgIHJlc3VsdFsxXSA9IG1hdHJpeFsxXSAqIHNjYWxlOwogICAgICAgIHJlc3VsdFsyXSA9IG1hdHJpeFsyXSAqIHNjYWxlOwogICAgICAgIHJlc3VsdFszXSA9IG1hdHJpeFszXSAqIHNjYWxlOwogICAgICAgIHJlc3VsdFs0XSA9IG1hdHJpeFs0XSAqIHNjYWxlOwogICAgICAgIHJlc3VsdFs1XSA9IG1hdHJpeFs1XSAqIHNjYWxlOwogICAgICAgIHJlc3VsdFs2XSA9IG1hdHJpeFs2XSAqIHNjYWxlOwogICAgICAgIHJlc3VsdFs3XSA9IG1hdHJpeFs3XSAqIHNjYWxlOwogICAgICAgIHJlc3VsdFs4XSA9IG1hdHJpeFs4XSAqIHNjYWxlOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDMubmVnYXRlID0gZnVuY3Rpb24obWF0cml4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdFswXSA9IC1tYXRyaXhbMF07CiAgICAgICAgcmVzdWx0WzFdID0gLW1hdHJpeFsxXTsKICAgICAgICByZXN1bHRbMl0gPSAtbWF0cml4WzJdOwogICAgICAgIHJlc3VsdFszXSA9IC1tYXRyaXhbM107CiAgICAgICAgcmVzdWx0WzRdID0gLW1hdHJpeFs0XTsKICAgICAgICByZXN1bHRbNV0gPSAtbWF0cml4WzVdOwogICAgICAgIHJlc3VsdFs2XSA9IC1tYXRyaXhbNl07CiAgICAgICAgcmVzdWx0WzddID0gLW1hdHJpeFs3XTsKICAgICAgICByZXN1bHRbOF0gPSAtbWF0cml4WzhdOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDMudHJhbnNwb3NlID0gZnVuY3Rpb24obWF0cml4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGNvbnN0IGNvbHVtbjBSb3cwID0gbWF0cml4WzBdOwogICAgICAgIGNvbnN0IGNvbHVtbjBSb3cxID0gbWF0cml4WzNdOwogICAgICAgIGNvbnN0IGNvbHVtbjBSb3cyID0gbWF0cml4WzZdOwogICAgICAgIGNvbnN0IGNvbHVtbjFSb3cwID0gbWF0cml4WzFdOwogICAgICAgIGNvbnN0IGNvbHVtbjFSb3cxID0gbWF0cml4WzRdOwogICAgICAgIGNvbnN0IGNvbHVtbjFSb3cyID0gbWF0cml4WzddOwogICAgICAgIGNvbnN0IGNvbHVtbjJSb3cwID0gbWF0cml4WzJdOwogICAgICAgIGNvbnN0IGNvbHVtbjJSb3cxID0gbWF0cml4WzVdOwogICAgICAgIGNvbnN0IGNvbHVtbjJSb3cyID0gbWF0cml4WzhdOwogICAgICAgIHJlc3VsdFswXSA9IGNvbHVtbjBSb3cwOwogICAgICAgIHJlc3VsdFsxXSA9IGNvbHVtbjBSb3cxOwogICAgICAgIHJlc3VsdFsyXSA9IGNvbHVtbjBSb3cyOwogICAgICAgIHJlc3VsdFszXSA9IGNvbHVtbjFSb3cwOwogICAgICAgIHJlc3VsdFs0XSA9IGNvbHVtbjFSb3cxOwogICAgICAgIHJlc3VsdFs1XSA9IGNvbHVtbjFSb3cyOwogICAgICAgIHJlc3VsdFs2XSA9IGNvbHVtbjJSb3cwOwogICAgICAgIHJlc3VsdFs3XSA9IGNvbHVtbjJSb3cxOwogICAgICAgIHJlc3VsdFs4XSA9IGNvbHVtbjJSb3cyOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIHJvd1ZhbCA9IFsxLCAwLCAwXTsKICAgICAgY29sVmFsID0gWzIsIDIsIDFdOwogICAgICBqTWF0cml4ID0gbmV3IE1hdHJpeDMoKTsKICAgICAgak1hdHJpeFRyYW5zcG9zZSA9IG5ldyBNYXRyaXgzKCk7CiAgICAgIE1hdHJpeDMuY29tcHV0ZUVpZ2VuRGVjb21wb3NpdGlvbiA9IGZ1bmN0aW9uKG1hdHJpeCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXRyaXgiLCBtYXRyaXgpOwogICAgICAgIGNvbnN0IHRvbGVyYW5jZSA9IE1hdGhfZGVmYXVsdC5FUFNJTE9OMjA7CiAgICAgICAgY29uc3QgbWF4U3dlZXBzID0gMTA7CiAgICAgICAgbGV0IGNvdW50ID0gMDsKICAgICAgICBsZXQgc3dlZXAgPSAwOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IHt9OwogICAgICAgIH0KICAgICAgICBjb25zdCB1bml0YXJ5TWF0cml4ID0gcmVzdWx0LnVuaXRhcnkgPSBNYXRyaXgzLmNsb25lKAogICAgICAgICAgTWF0cml4My5JREVOVElUWSwKICAgICAgICAgIHJlc3VsdC51bml0YXJ5CiAgICAgICAgKTsKICAgICAgICBjb25zdCBkaWFnTWF0cml4ID0gcmVzdWx0LmRpYWdvbmFsID0gTWF0cml4My5jbG9uZShtYXRyaXgsIHJlc3VsdC5kaWFnb25hbCk7CiAgICAgICAgY29uc3QgZXBzaWxvbiA9IHRvbGVyYW5jZSAqIGNvbXB1dGVGcm9iZW5pdXNOb3JtKGRpYWdNYXRyaXgpOwogICAgICAgIHdoaWxlIChzd2VlcCA8IG1heFN3ZWVwcyAmJiBvZmZEaWFnb25hbEZyb2Jlbml1c05vcm0oZGlhZ01hdHJpeCkgPiBlcHNpbG9uKSB7CiAgICAgICAgICBzaHVyRGVjb21wb3NpdGlvbihkaWFnTWF0cml4LCBqTWF0cml4KTsKICAgICAgICAgIE1hdHJpeDMudHJhbnNwb3NlKGpNYXRyaXgsIGpNYXRyaXhUcmFuc3Bvc2UpOwogICAgICAgICAgTWF0cml4My5tdWx0aXBseShkaWFnTWF0cml4LCBqTWF0cml4LCBkaWFnTWF0cml4KTsKICAgICAgICAgIE1hdHJpeDMubXVsdGlwbHkoak1hdHJpeFRyYW5zcG9zZSwgZGlhZ01hdHJpeCwgZGlhZ01hdHJpeCk7CiAgICAgICAgICBNYXRyaXgzLm11bHRpcGx5KHVuaXRhcnlNYXRyaXgsIGpNYXRyaXgsIHVuaXRhcnlNYXRyaXgpOwogICAgICAgICAgaWYgKCsrY291bnQgPiAyKSB7CiAgICAgICAgICAgICsrc3dlZXA7CiAgICAgICAgICAgIGNvdW50ID0gMDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4My5hYnMgPSBmdW5jdGlvbihtYXRyaXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0WzBdID0gTWF0aC5hYnMobWF0cml4WzBdKTsKICAgICAgICByZXN1bHRbMV0gPSBNYXRoLmFicyhtYXRyaXhbMV0pOwogICAgICAgIHJlc3VsdFsyXSA9IE1hdGguYWJzKG1hdHJpeFsyXSk7CiAgICAgICAgcmVzdWx0WzNdID0gTWF0aC5hYnMobWF0cml4WzNdKTsKICAgICAgICByZXN1bHRbNF0gPSBNYXRoLmFicyhtYXRyaXhbNF0pOwogICAgICAgIHJlc3VsdFs1XSA9IE1hdGguYWJzKG1hdHJpeFs1XSk7CiAgICAgICAgcmVzdWx0WzZdID0gTWF0aC5hYnMobWF0cml4WzZdKTsKICAgICAgICByZXN1bHRbN10gPSBNYXRoLmFicyhtYXRyaXhbN10pOwogICAgICAgIHJlc3VsdFs4XSA9IE1hdGguYWJzKG1hdHJpeFs4XSk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4My5kZXRlcm1pbmFudCA9IGZ1bmN0aW9uKG1hdHJpeCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBjb25zdCBtMTEgPSBtYXRyaXhbMF07CiAgICAgICAgY29uc3QgbTIxID0gbWF0cml4WzNdOwogICAgICAgIGNvbnN0IG0zMSA9IG1hdHJpeFs2XTsKICAgICAgICBjb25zdCBtMTIgPSBtYXRyaXhbMV07CiAgICAgICAgY29uc3QgbTIyID0gbWF0cml4WzRdOwogICAgICAgIGNvbnN0IG0zMiA9IG1hdHJpeFs3XTsKICAgICAgICBjb25zdCBtMTMgPSBtYXRyaXhbMl07CiAgICAgICAgY29uc3QgbTIzID0gbWF0cml4WzVdOwogICAgICAgIGNvbnN0IG0zMyA9IG1hdHJpeFs4XTsKICAgICAgICByZXR1cm4gbTExICogKG0yMiAqIG0zMyAtIG0yMyAqIG0zMikgKyBtMTIgKiAobTIzICogbTMxIC0gbTIxICogbTMzKSArIG0xMyAqIChtMjEgKiBtMzIgLSBtMjIgKiBtMzEpOwogICAgICB9OwogICAgICBNYXRyaXgzLmludmVyc2UgPSBmdW5jdGlvbihtYXRyaXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgY29uc3QgbTExID0gbWF0cml4WzBdOwogICAgICAgIGNvbnN0IG0yMSA9IG1hdHJpeFsxXTsKICAgICAgICBjb25zdCBtMzEgPSBtYXRyaXhbMl07CiAgICAgICAgY29uc3QgbTEyID0gbWF0cml4WzNdOwogICAgICAgIGNvbnN0IG0yMiA9IG1hdHJpeFs0XTsKICAgICAgICBjb25zdCBtMzIgPSBtYXRyaXhbNV07CiAgICAgICAgY29uc3QgbTEzID0gbWF0cml4WzZdOwogICAgICAgIGNvbnN0IG0yMyA9IG1hdHJpeFs3XTsKICAgICAgICBjb25zdCBtMzMgPSBtYXRyaXhbOF07CiAgICAgICAgY29uc3QgZGV0ZXJtaW5hbnQgPSBNYXRyaXgzLmRldGVybWluYW50KG1hdHJpeCk7CiAgICAgICAgaWYgKE1hdGguYWJzKGRldGVybWluYW50KSA8PSBNYXRoX2RlZmF1bHQuRVBTSUxPTjE1KSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgibWF0cml4IGlzIG5vdCBpbnZlcnRpYmxlIik7CiAgICAgICAgfQogICAgICAgIHJlc3VsdFswXSA9IG0yMiAqIG0zMyAtIG0yMyAqIG0zMjsKICAgICAgICByZXN1bHRbMV0gPSBtMjMgKiBtMzEgLSBtMjEgKiBtMzM7CiAgICAgICAgcmVzdWx0WzJdID0gbTIxICogbTMyIC0gbTIyICogbTMxOwogICAgICAgIHJlc3VsdFszXSA9IG0xMyAqIG0zMiAtIG0xMiAqIG0zMzsKICAgICAgICByZXN1bHRbNF0gPSBtMTEgKiBtMzMgLSBtMTMgKiBtMzE7CiAgICAgICAgcmVzdWx0WzVdID0gbTEyICogbTMxIC0gbTExICogbTMyOwogICAgICAgIHJlc3VsdFs2XSA9IG0xMiAqIG0yMyAtIG0xMyAqIG0yMjsKICAgICAgICByZXN1bHRbN10gPSBtMTMgKiBtMjEgLSBtMTEgKiBtMjM7CiAgICAgICAgcmVzdWx0WzhdID0gbTExICogbTIyIC0gbTEyICogbTIxOwogICAgICAgIGNvbnN0IHNjYWxlID0gMSAvIGRldGVybWluYW50OwogICAgICAgIHJldHVybiBNYXRyaXgzLm11bHRpcGx5QnlTY2FsYXIocmVzdWx0LCBzY2FsZSwgcmVzdWx0KTsKICAgICAgfTsKICAgICAgc2NyYXRjaFRyYW5zcG9zZU1hdHJpeCA9IG5ldyBNYXRyaXgzKCk7CiAgICAgIE1hdHJpeDMuaW52ZXJzZVRyYW5zcG9zZSA9IGZ1bmN0aW9uKG1hdHJpeCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXRyaXgiLCBtYXRyaXgpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXR1cm4gTWF0cml4My5pbnZlcnNlKAogICAgICAgICAgTWF0cml4My50cmFuc3Bvc2UobWF0cml4LCBzY3JhdGNoVHJhbnNwb3NlTWF0cml4KSwKICAgICAgICAgIHJlc3VsdAogICAgICAgICk7CiAgICAgIH07CiAgICAgIE1hdHJpeDMuZXF1YWxzID0gZnVuY3Rpb24obGVmdCwgcmlnaHQpIHsKICAgICAgICByZXR1cm4gbGVmdCA9PT0gcmlnaHQgfHwgZGVmaW5lZF9kZWZhdWx0KGxlZnQpICYmIGRlZmluZWRfZGVmYXVsdChyaWdodCkgJiYgbGVmdFswXSA9PT0gcmlnaHRbMF0gJiYgbGVmdFsxXSA9PT0gcmlnaHRbMV0gJiYgbGVmdFsyXSA9PT0gcmlnaHRbMl0gJiYgbGVmdFszXSA9PT0gcmlnaHRbM10gJiYgbGVmdFs0XSA9PT0gcmlnaHRbNF0gJiYgbGVmdFs1XSA9PT0gcmlnaHRbNV0gJiYgbGVmdFs2XSA9PT0gcmlnaHRbNl0gJiYgbGVmdFs3XSA9PT0gcmlnaHRbN10gJiYgbGVmdFs4XSA9PT0gcmlnaHRbOF07CiAgICAgIH07CiAgICAgIE1hdHJpeDMuZXF1YWxzRXBzaWxvbiA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBlcHNpbG9uKSB7CiAgICAgICAgZXBzaWxvbiA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGVwc2lsb24sIDApOwogICAgICAgIHJldHVybiBsZWZ0ID09PSByaWdodCB8fCBkZWZpbmVkX2RlZmF1bHQobGVmdCkgJiYgZGVmaW5lZF9kZWZhdWx0KHJpZ2h0KSAmJiBNYXRoLmFicyhsZWZ0WzBdIC0gcmlnaHRbMF0pIDw9IGVwc2lsb24gJiYgTWF0aC5hYnMobGVmdFsxXSAtIHJpZ2h0WzFdKSA8PSBlcHNpbG9uICYmIE1hdGguYWJzKGxlZnRbMl0gLSByaWdodFsyXSkgPD0gZXBzaWxvbiAmJiBNYXRoLmFicyhsZWZ0WzNdIC0gcmlnaHRbM10pIDw9IGVwc2lsb24gJiYgTWF0aC5hYnMobGVmdFs0XSAtIHJpZ2h0WzRdKSA8PSBlcHNpbG9uICYmIE1hdGguYWJzKGxlZnRbNV0gLSByaWdodFs1XSkgPD0gZXBzaWxvbiAmJiBNYXRoLmFicyhsZWZ0WzZdIC0gcmlnaHRbNl0pIDw9IGVwc2lsb24gJiYgTWF0aC5hYnMobGVmdFs3XSAtIHJpZ2h0WzddKSA8PSBlcHNpbG9uICYmIE1hdGguYWJzKGxlZnRbOF0gLSByaWdodFs4XSkgPD0gZXBzaWxvbjsKICAgICAgfTsKICAgICAgTWF0cml4My5JREVOVElUWSA9IE9iamVjdC5mcmVlemUoCiAgICAgICAgbmV3IE1hdHJpeDMoMSwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMSkKICAgICAgKTsKICAgICAgTWF0cml4My5aRVJPID0gT2JqZWN0LmZyZWV6ZSgKICAgICAgICBuZXcgTWF0cml4MygwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwKQogICAgICApOwogICAgICBNYXRyaXgzLkNPTFVNTjBST1cwID0gMDsKICAgICAgTWF0cml4My5DT0xVTU4wUk9XMSA9IDE7CiAgICAgIE1hdHJpeDMuQ09MVU1OMFJPVzIgPSAyOwogICAgICBNYXRyaXgzLkNPTFVNTjFST1cwID0gMzsKICAgICAgTWF0cml4My5DT0xVTU4xUk9XMSA9IDQ7CiAgICAgIE1hdHJpeDMuQ09MVU1OMVJPVzIgPSA1OwogICAgICBNYXRyaXgzLkNPTFVNTjJST1cwID0gNjsKICAgICAgTWF0cml4My5DT0xVTU4yUk9XMSA9IDc7CiAgICAgIE1hdHJpeDMuQ09MVU1OMlJPVzIgPSA4OwogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhNYXRyaXgzLnByb3RvdHlwZSwgewogICAgICAgIC8qKgogICAgICAgICAqIEdldHMgdGhlIG51bWJlciBvZiBpdGVtcyBpbiB0aGUgY29sbGVjdGlvbi4KICAgICAgICAgKiBAbWVtYmVyb2YgTWF0cml4My5wcm90b3R5cGUKICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICovCiAgICAgICAgbGVuZ3RoOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gTWF0cml4My5wYWNrZWRMZW5ndGg7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgICAgTWF0cml4My5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbihyZXN1bHQpIHsKICAgICAgICByZXR1cm4gTWF0cml4My5jbG9uZSh0aGlzLCByZXN1bHQpOwogICAgICB9OwogICAgICBNYXRyaXgzLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbihyaWdodCkgewogICAgICAgIHJldHVybiBNYXRyaXgzLmVxdWFscyh0aGlzLCByaWdodCk7CiAgICAgIH07CiAgICAgIE1hdHJpeDMuZXF1YWxzQXJyYXkgPSBmdW5jdGlvbihtYXRyaXgsIGFycmF5LCBvZmZzZXQpIHsKICAgICAgICByZXR1cm4gbWF0cml4WzBdID09PSBhcnJheVtvZmZzZXRdICYmIG1hdHJpeFsxXSA9PT0gYXJyYXlbb2Zmc2V0ICsgMV0gJiYgbWF0cml4WzJdID09PSBhcnJheVtvZmZzZXQgKyAyXSAmJiBtYXRyaXhbM10gPT09IGFycmF5W29mZnNldCArIDNdICYmIG1hdHJpeFs0XSA9PT0gYXJyYXlbb2Zmc2V0ICsgNF0gJiYgbWF0cml4WzVdID09PSBhcnJheVtvZmZzZXQgKyA1XSAmJiBtYXRyaXhbNl0gPT09IGFycmF5W29mZnNldCArIDZdICYmIG1hdHJpeFs3XSA9PT0gYXJyYXlbb2Zmc2V0ICsgN10gJiYgbWF0cml4WzhdID09PSBhcnJheVtvZmZzZXQgKyA4XTsKICAgICAgfTsKICAgICAgTWF0cml4My5wcm90b3R5cGUuZXF1YWxzRXBzaWxvbiA9IGZ1bmN0aW9uKHJpZ2h0LCBlcHNpbG9uKSB7CiAgICAgICAgcmV0dXJuIE1hdHJpeDMuZXF1YWxzRXBzaWxvbih0aGlzLCByaWdodCwgZXBzaWxvbik7CiAgICAgIH07CiAgICAgIE1hdHJpeDMucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIGAoJHt0aGlzWzBdfSwgJHt0aGlzWzNdfSwgJHt0aGlzWzZdfSkKKCR7dGhpc1sxXX0sICR7dGhpc1s0XX0sICR7dGhpc1s3XX0pCigke3RoaXNbMl19LCAke3RoaXNbNV19LCAke3RoaXNbOF19KWA7CiAgICAgIH07CiAgICAgIE1hdHJpeDNfZGVmYXVsdCA9IE1hdHJpeDM7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9DYXJ0ZXNpYW40LmpzCiAgZnVuY3Rpb24gQ2FydGVzaWFuNCh4LCB5LCB6LCB3KSB7CiAgICB0aGlzLnggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh4LCAwKTsKICAgIHRoaXMueSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHksIDApOwogICAgdGhpcy56ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoeiwgMCk7CiAgICB0aGlzLncgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh3LCAwKTsKICB9CiAgdmFyIGRpc3RhbmNlU2NyYXRjaDMsIGxlcnBTY3JhdGNoMywgbW9zdE9ydGhvZ29uYWxBeGlzU2NyYXRjaDMsIHNjcmF0Y2hGMzJBcnJheSwgc2NyYXRjaFU4QXJyYXksIHRlc3RVMzIsIHRlc3RVOCwgbGl0dGxlRW5kaWFuLCBDYXJ0ZXNpYW40X2RlZmF1bHQ7CiAgdmFyIGluaXRfQ2FydGVzaWFuNCA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvQ2FydGVzaWFuNC5qcyIoKSB7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIENhcnRlc2lhbjQuZnJvbUVsZW1lbnRzID0gZnVuY3Rpb24oeCwgeSwgeiwgdywgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBDYXJ0ZXNpYW40KHgsIHksIHosIHcpOwogICAgICAgIH0KICAgICAgICByZXN1bHQueCA9IHg7CiAgICAgICAgcmVzdWx0LnkgPSB5OwogICAgICAgIHJlc3VsdC56ID0gejsKICAgICAgICByZXN1bHQudyA9IHc7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuNC5mcm9tQ29sb3IgPSBmdW5jdGlvbihjb2xvciwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjb2xvciIsIGNvbG9yKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IENhcnRlc2lhbjQoY29sb3IucmVkLCBjb2xvci5ncmVlbiwgY29sb3IuYmx1ZSwgY29sb3IuYWxwaGEpOwogICAgICAgIH0KICAgICAgICByZXN1bHQueCA9IGNvbG9yLnJlZDsKICAgICAgICByZXN1bHQueSA9IGNvbG9yLmdyZWVuOwogICAgICAgIHJlc3VsdC56ID0gY29sb3IuYmx1ZTsKICAgICAgICByZXN1bHQudyA9IGNvbG9yLmFscGhhOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjQuY2xvbmUgPSBmdW5jdGlvbihjYXJ0ZXNpYW4xMSwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoY2FydGVzaWFuMTEpKSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IENhcnRlc2lhbjQoY2FydGVzaWFuMTEueCwgY2FydGVzaWFuMTEueSwgY2FydGVzaWFuMTEueiwgY2FydGVzaWFuMTEudyk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC54ID0gY2FydGVzaWFuMTEueDsKICAgICAgICByZXN1bHQueSA9IGNhcnRlc2lhbjExLnk7CiAgICAgICAgcmVzdWx0LnogPSBjYXJ0ZXNpYW4xMS56OwogICAgICAgIHJlc3VsdC53ID0gY2FydGVzaWFuMTEudzsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW40LnBhY2tlZExlbmd0aCA9IDQ7CiAgICAgIENhcnRlc2lhbjQucGFjayA9IGZ1bmN0aW9uKHZhbHVlLCBhcnJheSwgc3RhcnRpbmdJbmRleCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidmFsdWUiLCB2YWx1ZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLng7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLnk7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLno7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleF0gPSB2YWx1ZS53OwogICAgICAgIHJldHVybiBhcnJheTsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuNC51bnBhY2sgPSBmdW5jdGlvbihhcnJheSwgc3RhcnRpbmdJbmRleCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IENhcnRlc2lhbjQoKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LnggPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIHJlc3VsdC55ID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICByZXN1bHQueiA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgcmVzdWx0LncgPSBhcnJheVtzdGFydGluZ0luZGV4XTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW40LnBhY2tBcnJheSA9IGZ1bmN0aW9uKGFycmF5LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIGNvbnN0IGxlbmd0aCA9IGFycmF5Lmxlbmd0aDsKICAgICAgICBjb25zdCByZXN1bHRMZW5ndGggPSBsZW5ndGggKiA0OwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBBcnJheShyZXN1bHRMZW5ndGgpOwogICAgICAgIH0gZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkocmVzdWx0KSAmJiByZXN1bHQubGVuZ3RoICE9PSByZXN1bHRMZW5ndGgpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgICAiSWYgcmVzdWx0IGlzIGEgdHlwZWQgYXJyYXksIGl0IG11c3QgaGF2ZSBleGFjdGx5IGFycmF5Lmxlbmd0aCAqIDQgZWxlbWVudHMiCiAgICAgICAgICApOwogICAgICAgIH0gZWxzZSBpZiAocmVzdWx0Lmxlbmd0aCAhPT0gcmVzdWx0TGVuZ3RoKSB7CiAgICAgICAgICByZXN1bHQubGVuZ3RoID0gcmVzdWx0TGVuZ3RoOwogICAgICAgIH0KICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgICBDYXJ0ZXNpYW40LnBhY2soYXJyYXlbaV0sIHJlc3VsdCwgaSAqIDQpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW40LnVucGFja0FycmF5ID0gZnVuY3Rpb24oYXJyYXksIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuT3JFcXVhbHMoImFycmF5Lmxlbmd0aCIsIGFycmF5Lmxlbmd0aCwgNCk7CiAgICAgICAgaWYgKGFycmF5Lmxlbmd0aCAlIDQgIT09IDApIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJhcnJheSBsZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQuIik7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGxlbmd0aCA9IGFycmF5Lmxlbmd0aDsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQXJyYXkobGVuZ3RoIC8gNCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlc3VsdC5sZW5ndGggPSBsZW5ndGggLyA0OwogICAgICAgIH0KICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSA0KSB7CiAgICAgICAgICBjb25zdCBpbmRleCA9IGkgLyA0OwogICAgICAgICAgcmVzdWx0W2luZGV4XSA9IENhcnRlc2lhbjQudW5wYWNrKGFycmF5LCBpLCByZXN1bHRbaW5kZXhdKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuNC5mcm9tQXJyYXkgPSBDYXJ0ZXNpYW40LnVucGFjazsKICAgICAgQ2FydGVzaWFuNC5tYXhpbXVtQ29tcG9uZW50ID0gZnVuY3Rpb24oY2FydGVzaWFuMTEpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImNhcnRlc2lhbiIsIGNhcnRlc2lhbjExKTsKICAgICAgICByZXR1cm4gTWF0aC5tYXgoY2FydGVzaWFuMTEueCwgY2FydGVzaWFuMTEueSwgY2FydGVzaWFuMTEueiwgY2FydGVzaWFuMTEudyk7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjQubWluaW11bUNvbXBvbmVudCA9IGZ1bmN0aW9uKGNhcnRlc2lhbjExKSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjYXJ0ZXNpYW4iLCBjYXJ0ZXNpYW4xMSk7CiAgICAgICAgcmV0dXJuIE1hdGgubWluKGNhcnRlc2lhbjExLngsIGNhcnRlc2lhbjExLnksIGNhcnRlc2lhbjExLnosIGNhcnRlc2lhbjExLncpOwogICAgICB9OwogICAgICBDYXJ0ZXNpYW40Lm1pbmltdW1CeUNvbXBvbmVudCA9IGZ1bmN0aW9uKGZpcnN0LCBzZWNvbmQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiZmlyc3QiLCBmaXJzdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJzZWNvbmQiLCBzZWNvbmQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHQueCA9IE1hdGgubWluKGZpcnN0LngsIHNlY29uZC54KTsKICAgICAgICByZXN1bHQueSA9IE1hdGgubWluKGZpcnN0LnksIHNlY29uZC55KTsKICAgICAgICByZXN1bHQueiA9IE1hdGgubWluKGZpcnN0LnosIHNlY29uZC56KTsKICAgICAgICByZXN1bHQudyA9IE1hdGgubWluKGZpcnN0LncsIHNlY29uZC53KTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW40Lm1heGltdW1CeUNvbXBvbmVudCA9IGZ1bmN0aW9uKGZpcnN0LCBzZWNvbmQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiZmlyc3QiLCBmaXJzdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJzZWNvbmQiLCBzZWNvbmQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHQueCA9IE1hdGgubWF4KGZpcnN0LngsIHNlY29uZC54KTsKICAgICAgICByZXN1bHQueSA9IE1hdGgubWF4KGZpcnN0LnksIHNlY29uZC55KTsKICAgICAgICByZXN1bHQueiA9IE1hdGgubWF4KGZpcnN0LnosIHNlY29uZC56KTsKICAgICAgICByZXN1bHQudyA9IE1hdGgubWF4KGZpcnN0LncsIHNlY29uZC53KTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW40LmNsYW1wID0gZnVuY3Rpb24odmFsdWUsIG1pbjMsIG1heDMsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidmFsdWUiLCB2YWx1ZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtaW4iLCBtaW4zKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1heCIsIG1heDMpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCB4ID0gTWF0aF9kZWZhdWx0LmNsYW1wKHZhbHVlLngsIG1pbjMueCwgbWF4My54KTsKICAgICAgICBjb25zdCB5ID0gTWF0aF9kZWZhdWx0LmNsYW1wKHZhbHVlLnksIG1pbjMueSwgbWF4My55KTsKICAgICAgICBjb25zdCB6ID0gTWF0aF9kZWZhdWx0LmNsYW1wKHZhbHVlLnosIG1pbjMueiwgbWF4My56KTsKICAgICAgICBjb25zdCB3ID0gTWF0aF9kZWZhdWx0LmNsYW1wKHZhbHVlLncsIG1pbjMudywgbWF4My53KTsKICAgICAgICByZXN1bHQueCA9IHg7CiAgICAgICAgcmVzdWx0LnkgPSB5OwogICAgICAgIHJlc3VsdC56ID0gejsKICAgICAgICByZXN1bHQudyA9IHc7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuNC5tYWduaXR1ZGVTcXVhcmVkID0gZnVuY3Rpb24oY2FydGVzaWFuMTEpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImNhcnRlc2lhbiIsIGNhcnRlc2lhbjExKTsKICAgICAgICByZXR1cm4gY2FydGVzaWFuMTEueCAqIGNhcnRlc2lhbjExLnggKyBjYXJ0ZXNpYW4xMS55ICogY2FydGVzaWFuMTEueSArIGNhcnRlc2lhbjExLnogKiBjYXJ0ZXNpYW4xMS56ICsgY2FydGVzaWFuMTEudyAqIGNhcnRlc2lhbjExLnc7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjQubWFnbml0dWRlID0gZnVuY3Rpb24oY2FydGVzaWFuMTEpIHsKICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KENhcnRlc2lhbjQubWFnbml0dWRlU3F1YXJlZChjYXJ0ZXNpYW4xMSkpOwogICAgICB9OwogICAgICBkaXN0YW5jZVNjcmF0Y2gzID0gbmV3IENhcnRlc2lhbjQoKTsKICAgICAgQ2FydGVzaWFuNC5kaXN0YW5jZSA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJsZWZ0IiwgbGVmdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyaWdodCIsIHJpZ2h0KTsKICAgICAgICBDYXJ0ZXNpYW40LnN1YnRyYWN0KGxlZnQsIHJpZ2h0LCBkaXN0YW5jZVNjcmF0Y2gzKTsKICAgICAgICByZXR1cm4gQ2FydGVzaWFuNC5tYWduaXR1ZGUoZGlzdGFuY2VTY3JhdGNoMyk7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjQuZGlzdGFuY2VTcXVhcmVkID0gZnVuY3Rpb24obGVmdCwgcmlnaHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImxlZnQiLCBsZWZ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJpZ2h0IiwgcmlnaHQpOwogICAgICAgIENhcnRlc2lhbjQuc3VidHJhY3QobGVmdCwgcmlnaHQsIGRpc3RhbmNlU2NyYXRjaDMpOwogICAgICAgIHJldHVybiBDYXJ0ZXNpYW40Lm1hZ25pdHVkZVNxdWFyZWQoZGlzdGFuY2VTY3JhdGNoMyk7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjQubm9ybWFsaXplID0gZnVuY3Rpb24oY2FydGVzaWFuMTEsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiY2FydGVzaWFuIiwgY2FydGVzaWFuMTEpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCBtYWduaXR1ZGUgPSBDYXJ0ZXNpYW40Lm1hZ25pdHVkZShjYXJ0ZXNpYW4xMSk7CiAgICAgICAgcmVzdWx0LnggPSBjYXJ0ZXNpYW4xMS54IC8gbWFnbml0dWRlOwogICAgICAgIHJlc3VsdC55ID0gY2FydGVzaWFuMTEueSAvIG1hZ25pdHVkZTsKICAgICAgICByZXN1bHQueiA9IGNhcnRlc2lhbjExLnogLyBtYWduaXR1ZGU7CiAgICAgICAgcmVzdWx0LncgPSBjYXJ0ZXNpYW4xMS53IC8gbWFnbml0dWRlOwogICAgICAgIGlmIChpc05hTihyZXN1bHQueCkgfHwgaXNOYU4ocmVzdWx0LnkpIHx8IGlzTmFOKHJlc3VsdC56KSB8fCBpc05hTihyZXN1bHQudykpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJub3JtYWxpemVkIHJlc3VsdCBpcyBub3QgYSBudW1iZXIiKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuNC5kb3QgPSBmdW5jdGlvbihsZWZ0LCByaWdodCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibGVmdCIsIGxlZnQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmlnaHQiLCByaWdodCk7CiAgICAgICAgcmV0dXJuIGxlZnQueCAqIHJpZ2h0LnggKyBsZWZ0LnkgKiByaWdodC55ICsgbGVmdC56ICogcmlnaHQueiArIGxlZnQudyAqIHJpZ2h0Lnc7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjQubXVsdGlwbHlDb21wb25lbnRzID0gZnVuY3Rpb24obGVmdCwgcmlnaHQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibGVmdCIsIGxlZnQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmlnaHQiLCByaWdodCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdC54ID0gbGVmdC54ICogcmlnaHQueDsKICAgICAgICByZXN1bHQueSA9IGxlZnQueSAqIHJpZ2h0Lnk7CiAgICAgICAgcmVzdWx0LnogPSBsZWZ0LnogKiByaWdodC56OwogICAgICAgIHJlc3VsdC53ID0gbGVmdC53ICogcmlnaHQudzsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW40LmRpdmlkZUNvbXBvbmVudHMgPSBmdW5jdGlvbihsZWZ0LCByaWdodCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJsZWZ0IiwgbGVmdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyaWdodCIsIHJpZ2h0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0LnggPSBsZWZ0LnggLyByaWdodC54OwogICAgICAgIHJlc3VsdC55ID0gbGVmdC55IC8gcmlnaHQueTsKICAgICAgICByZXN1bHQueiA9IGxlZnQueiAvIHJpZ2h0Lno7CiAgICAgICAgcmVzdWx0LncgPSBsZWZ0LncgLyByaWdodC53OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjQuYWRkID0gZnVuY3Rpb24obGVmdCwgcmlnaHQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibGVmdCIsIGxlZnQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmlnaHQiLCByaWdodCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdC54ID0gbGVmdC54ICsgcmlnaHQueDsKICAgICAgICByZXN1bHQueSA9IGxlZnQueSArIHJpZ2h0Lnk7CiAgICAgICAgcmVzdWx0LnogPSBsZWZ0LnogKyByaWdodC56OwogICAgICAgIHJlc3VsdC53ID0gbGVmdC53ICsgcmlnaHQudzsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW40LnN1YnRyYWN0ID0gZnVuY3Rpb24obGVmdCwgcmlnaHQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibGVmdCIsIGxlZnQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmlnaHQiLCByaWdodCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdC54ID0gbGVmdC54IC0gcmlnaHQueDsKICAgICAgICByZXN1bHQueSA9IGxlZnQueSAtIHJpZ2h0Lnk7CiAgICAgICAgcmVzdWx0LnogPSBsZWZ0LnogLSByaWdodC56OwogICAgICAgIHJlc3VsdC53ID0gbGVmdC53IC0gcmlnaHQudzsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW40Lm11bHRpcGx5QnlTY2FsYXIgPSBmdW5jdGlvbihjYXJ0ZXNpYW4xMSwgc2NhbGFyLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImNhcnRlc2lhbiIsIGNhcnRlc2lhbjExKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoInNjYWxhciIsIHNjYWxhcik7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdC54ID0gY2FydGVzaWFuMTEueCAqIHNjYWxhcjsKICAgICAgICByZXN1bHQueSA9IGNhcnRlc2lhbjExLnkgKiBzY2FsYXI7CiAgICAgICAgcmVzdWx0LnogPSBjYXJ0ZXNpYW4xMS56ICogc2NhbGFyOwogICAgICAgIHJlc3VsdC53ID0gY2FydGVzaWFuMTEudyAqIHNjYWxhcjsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW40LmRpdmlkZUJ5U2NhbGFyID0gZnVuY3Rpb24oY2FydGVzaWFuMTEsIHNjYWxhciwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjYXJ0ZXNpYW4iLCBjYXJ0ZXNpYW4xMSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJzY2FsYXIiLCBzY2FsYXIpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHQueCA9IGNhcnRlc2lhbjExLnggLyBzY2FsYXI7CiAgICAgICAgcmVzdWx0LnkgPSBjYXJ0ZXNpYW4xMS55IC8gc2NhbGFyOwogICAgICAgIHJlc3VsdC56ID0gY2FydGVzaWFuMTEueiAvIHNjYWxhcjsKICAgICAgICByZXN1bHQudyA9IGNhcnRlc2lhbjExLncgLyBzY2FsYXI7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuNC5uZWdhdGUgPSBmdW5jdGlvbihjYXJ0ZXNpYW4xMSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjYXJ0ZXNpYW4iLCBjYXJ0ZXNpYW4xMSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdC54ID0gLWNhcnRlc2lhbjExLng7CiAgICAgICAgcmVzdWx0LnkgPSAtY2FydGVzaWFuMTEueTsKICAgICAgICByZXN1bHQueiA9IC1jYXJ0ZXNpYW4xMS56OwogICAgICAgIHJlc3VsdC53ID0gLWNhcnRlc2lhbjExLnc7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuNC5hYnMgPSBmdW5jdGlvbihjYXJ0ZXNpYW4xMSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjYXJ0ZXNpYW4iLCBjYXJ0ZXNpYW4xMSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdC54ID0gTWF0aC5hYnMoY2FydGVzaWFuMTEueCk7CiAgICAgICAgcmVzdWx0LnkgPSBNYXRoLmFicyhjYXJ0ZXNpYW4xMS55KTsKICAgICAgICByZXN1bHQueiA9IE1hdGguYWJzKGNhcnRlc2lhbjExLnopOwogICAgICAgIHJlc3VsdC53ID0gTWF0aC5hYnMoY2FydGVzaWFuMTEudyk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgbGVycFNjcmF0Y2gzID0gbmV3IENhcnRlc2lhbjQoKTsKICAgICAgQ2FydGVzaWFuNC5sZXJwID0gZnVuY3Rpb24oc3RhcnQsIGVuZCwgdCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJzdGFydCIsIHN0YXJ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImVuZCIsIGVuZCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJ0IiwgdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIENhcnRlc2lhbjQubXVsdGlwbHlCeVNjYWxhcihlbmQsIHQsIGxlcnBTY3JhdGNoMyk7CiAgICAgICAgcmVzdWx0ID0gQ2FydGVzaWFuNC5tdWx0aXBseUJ5U2NhbGFyKHN0YXJ0LCAxIC0gdCwgcmVzdWx0KTsKICAgICAgICByZXR1cm4gQ2FydGVzaWFuNC5hZGQobGVycFNjcmF0Y2gzLCByZXN1bHQsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIG1vc3RPcnRob2dvbmFsQXhpc1NjcmF0Y2gzID0gbmV3IENhcnRlc2lhbjQoKTsKICAgICAgQ2FydGVzaWFuNC5tb3N0T3J0aG9nb25hbEF4aXMgPSBmdW5jdGlvbihjYXJ0ZXNpYW4xMSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjYXJ0ZXNpYW4iLCBjYXJ0ZXNpYW4xMSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGNvbnN0IGYgPSBDYXJ0ZXNpYW40Lm5vcm1hbGl6ZShjYXJ0ZXNpYW4xMSwgbW9zdE9ydGhvZ29uYWxBeGlzU2NyYXRjaDMpOwogICAgICAgIENhcnRlc2lhbjQuYWJzKGYsIGYpOwogICAgICAgIGlmIChmLnggPD0gZi55KSB7CiAgICAgICAgICBpZiAoZi54IDw9IGYueikgewogICAgICAgICAgICBpZiAoZi54IDw9IGYudykgewogICAgICAgICAgICAgIHJlc3VsdCA9IENhcnRlc2lhbjQuY2xvbmUoQ2FydGVzaWFuNC5VTklUX1gsIHJlc3VsdCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgcmVzdWx0ID0gQ2FydGVzaWFuNC5jbG9uZShDYXJ0ZXNpYW40LlVOSVRfVywgcmVzdWx0KTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIGlmIChmLnogPD0gZi53KSB7CiAgICAgICAgICAgIHJlc3VsdCA9IENhcnRlc2lhbjQuY2xvbmUoQ2FydGVzaWFuNC5VTklUX1osIHJlc3VsdCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXN1bHQgPSBDYXJ0ZXNpYW40LmNsb25lKENhcnRlc2lhbjQuVU5JVF9XLCByZXN1bHQpOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAoZi55IDw9IGYueikgewogICAgICAgICAgaWYgKGYueSA8PSBmLncpIHsKICAgICAgICAgICAgcmVzdWx0ID0gQ2FydGVzaWFuNC5jbG9uZShDYXJ0ZXNpYW40LlVOSVRfWSwgcmVzdWx0KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlc3VsdCA9IENhcnRlc2lhbjQuY2xvbmUoQ2FydGVzaWFuNC5VTklUX1csIHJlc3VsdCk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmIChmLnogPD0gZi53KSB7CiAgICAgICAgICByZXN1bHQgPSBDYXJ0ZXNpYW40LmNsb25lKENhcnRlc2lhbjQuVU5JVF9aLCByZXN1bHQpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXN1bHQgPSBDYXJ0ZXNpYW40LmNsb25lKENhcnRlc2lhbjQuVU5JVF9XLCByZXN1bHQpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW40LmVxdWFscyA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7CiAgICAgICAgcmV0dXJuIGxlZnQgPT09IHJpZ2h0IHx8IGRlZmluZWRfZGVmYXVsdChsZWZ0KSAmJiBkZWZpbmVkX2RlZmF1bHQocmlnaHQpICYmIGxlZnQueCA9PT0gcmlnaHQueCAmJiBsZWZ0LnkgPT09IHJpZ2h0LnkgJiYgbGVmdC56ID09PSByaWdodC56ICYmIGxlZnQudyA9PT0gcmlnaHQudzsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuNC5lcXVhbHNBcnJheSA9IGZ1bmN0aW9uKGNhcnRlc2lhbjExLCBhcnJheSwgb2Zmc2V0KSB7CiAgICAgICAgcmV0dXJuIGNhcnRlc2lhbjExLnggPT09IGFycmF5W29mZnNldF0gJiYgY2FydGVzaWFuMTEueSA9PT0gYXJyYXlbb2Zmc2V0ICsgMV0gJiYgY2FydGVzaWFuMTEueiA9PT0gYXJyYXlbb2Zmc2V0ICsgMl0gJiYgY2FydGVzaWFuMTEudyA9PT0gYXJyYXlbb2Zmc2V0ICsgM107CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjQuZXF1YWxzRXBzaWxvbiA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCByZWxhdGl2ZUVwc2lsb24sIGFic29sdXRlRXBzaWxvbikgewogICAgICAgIHJldHVybiBsZWZ0ID09PSByaWdodCB8fCBkZWZpbmVkX2RlZmF1bHQobGVmdCkgJiYgZGVmaW5lZF9kZWZhdWx0KHJpZ2h0KSAmJiBNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbigKICAgICAgICAgIGxlZnQueCwKICAgICAgICAgIHJpZ2h0LngsCiAgICAgICAgICByZWxhdGl2ZUVwc2lsb24sCiAgICAgICAgICBhYnNvbHV0ZUVwc2lsb24KICAgICAgICApICYmIE1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgbGVmdC55LAogICAgICAgICAgcmlnaHQueSwKICAgICAgICAgIHJlbGF0aXZlRXBzaWxvbiwKICAgICAgICAgIGFic29sdXRlRXBzaWxvbgogICAgICAgICkgJiYgTWF0aF9kZWZhdWx0LmVxdWFsc0Vwc2lsb24oCiAgICAgICAgICBsZWZ0LnosCiAgICAgICAgICByaWdodC56LAogICAgICAgICAgcmVsYXRpdmVFcHNpbG9uLAogICAgICAgICAgYWJzb2x1dGVFcHNpbG9uCiAgICAgICAgKSAmJiBNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbigKICAgICAgICAgIGxlZnQudywKICAgICAgICAgIHJpZ2h0LncsCiAgICAgICAgICByZWxhdGl2ZUVwc2lsb24sCiAgICAgICAgICBhYnNvbHV0ZUVwc2lsb24KICAgICAgICApOwogICAgICB9OwogICAgICBDYXJ0ZXNpYW40LlpFUk8gPSBPYmplY3QuZnJlZXplKG5ldyBDYXJ0ZXNpYW40KDAsIDAsIDAsIDApKTsKICAgICAgQ2FydGVzaWFuNC5PTkUgPSBPYmplY3QuZnJlZXplKG5ldyBDYXJ0ZXNpYW40KDEsIDEsIDEsIDEpKTsKICAgICAgQ2FydGVzaWFuNC5VTklUX1ggPSBPYmplY3QuZnJlZXplKG5ldyBDYXJ0ZXNpYW40KDEsIDAsIDAsIDApKTsKICAgICAgQ2FydGVzaWFuNC5VTklUX1kgPSBPYmplY3QuZnJlZXplKG5ldyBDYXJ0ZXNpYW40KDAsIDEsIDAsIDApKTsKICAgICAgQ2FydGVzaWFuNC5VTklUX1ogPSBPYmplY3QuZnJlZXplKG5ldyBDYXJ0ZXNpYW40KDAsIDAsIDEsIDApKTsKICAgICAgQ2FydGVzaWFuNC5VTklUX1cgPSBPYmplY3QuZnJlZXplKG5ldyBDYXJ0ZXNpYW40KDAsIDAsIDAsIDEpKTsKICAgICAgQ2FydGVzaWFuNC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbihyZXN1bHQpIHsKICAgICAgICByZXR1cm4gQ2FydGVzaWFuNC5jbG9uZSh0aGlzLCByZXN1bHQpOwogICAgICB9OwogICAgICBDYXJ0ZXNpYW40LnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbihyaWdodCkgewogICAgICAgIHJldHVybiBDYXJ0ZXNpYW40LmVxdWFscyh0aGlzLCByaWdodCk7CiAgICAgIH07CiAgICAgIENhcnRlc2lhbjQucHJvdG90eXBlLmVxdWFsc0Vwc2lsb24gPSBmdW5jdGlvbihyaWdodCwgcmVsYXRpdmVFcHNpbG9uLCBhYnNvbHV0ZUVwc2lsb24pIHsKICAgICAgICByZXR1cm4gQ2FydGVzaWFuNC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgdGhpcywKICAgICAgICAgIHJpZ2h0LAogICAgICAgICAgcmVsYXRpdmVFcHNpbG9uLAogICAgICAgICAgYWJzb2x1dGVFcHNpbG9uCiAgICAgICAgKTsKICAgICAgfTsKICAgICAgQ2FydGVzaWFuNC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gYCgke3RoaXMueH0sICR7dGhpcy55fSwgJHt0aGlzLnp9LCAke3RoaXMud30pYDsKICAgICAgfTsKICAgICAgc2NyYXRjaEYzMkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheSgxKTsKICAgICAgc2NyYXRjaFU4QXJyYXkgPSBuZXcgVWludDhBcnJheShzY3JhdGNoRjMyQXJyYXkuYnVmZmVyKTsKICAgICAgdGVzdFUzMiA9IG5ldyBVaW50MzJBcnJheShbMjg3NDU0MDIwXSk7CiAgICAgIHRlc3RVOCA9IG5ldyBVaW50OEFycmF5KHRlc3RVMzIuYnVmZmVyKTsKICAgICAgbGl0dGxlRW5kaWFuID0gdGVzdFU4WzBdID09PSA2ODsKICAgICAgQ2FydGVzaWFuNC5wYWNrRmxvYXQgPSBmdW5jdGlvbih2YWx1ZSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJ2YWx1ZSIsIHZhbHVlKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQ2FydGVzaWFuNCgpOwogICAgICAgIH0KICAgICAgICBzY3JhdGNoRjMyQXJyYXlbMF0gPSB2YWx1ZTsKICAgICAgICBpZiAobGl0dGxlRW5kaWFuKSB7CiAgICAgICAgICByZXN1bHQueCA9IHNjcmF0Y2hVOEFycmF5WzBdOwogICAgICAgICAgcmVzdWx0LnkgPSBzY3JhdGNoVThBcnJheVsxXTsKICAgICAgICAgIHJlc3VsdC56ID0gc2NyYXRjaFU4QXJyYXlbMl07CiAgICAgICAgICByZXN1bHQudyA9IHNjcmF0Y2hVOEFycmF5WzNdOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXN1bHQueCA9IHNjcmF0Y2hVOEFycmF5WzNdOwogICAgICAgICAgcmVzdWx0LnkgPSBzY3JhdGNoVThBcnJheVsyXTsKICAgICAgICAgIHJlc3VsdC56ID0gc2NyYXRjaFU4QXJyYXlbMV07CiAgICAgICAgICByZXN1bHQudyA9IHNjcmF0Y2hVOEFycmF5WzBdOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDYXJ0ZXNpYW40LnVucGFja0Zsb2F0ID0gZnVuY3Rpb24ocGFja2VkRmxvYXQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInBhY2tlZEZsb2F0IiwgcGFja2VkRmxvYXQpOwogICAgICAgIGlmIChsaXR0bGVFbmRpYW4pIHsKICAgICAgICAgIHNjcmF0Y2hVOEFycmF5WzBdID0gcGFja2VkRmxvYXQueDsKICAgICAgICAgIHNjcmF0Y2hVOEFycmF5WzFdID0gcGFja2VkRmxvYXQueTsKICAgICAgICAgIHNjcmF0Y2hVOEFycmF5WzJdID0gcGFja2VkRmxvYXQuejsKICAgICAgICAgIHNjcmF0Y2hVOEFycmF5WzNdID0gcGFja2VkRmxvYXQudzsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgc2NyYXRjaFU4QXJyYXlbMF0gPSBwYWNrZWRGbG9hdC53OwogICAgICAgICAgc2NyYXRjaFU4QXJyYXlbMV0gPSBwYWNrZWRGbG9hdC56OwogICAgICAgICAgc2NyYXRjaFU4QXJyYXlbMl0gPSBwYWNrZWRGbG9hdC55OwogICAgICAgICAgc2NyYXRjaFU4QXJyYXlbM10gPSBwYWNrZWRGbG9hdC54OwogICAgICAgIH0KICAgICAgICByZXR1cm4gc2NyYXRjaEYzMkFycmF5WzBdOwogICAgICB9OwogICAgICBDYXJ0ZXNpYW40X2RlZmF1bHQgPSBDYXJ0ZXNpYW40OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUnVudGltZUVycm9yLmpzCiAgZnVuY3Rpb24gUnVudGltZUVycm9yKG1lc3NhZ2UpIHsKICAgIHRoaXMubmFtZSA9ICJSdW50aW1lRXJyb3IiOwogICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTsKICAgIGxldCBzdGFjazsKICAgIHRyeSB7CiAgICAgIHRocm93IG5ldyBFcnJvcigpOwogICAgfSBjYXRjaCAoZSkgewogICAgICBzdGFjayA9IGUuc3RhY2s7CiAgICB9CiAgICB0aGlzLnN0YWNrID0gc3RhY2s7CiAgfQogIHZhciBSdW50aW1lRXJyb3JfZGVmYXVsdDsKICB2YXIgaW5pdF9SdW50aW1lRXJyb3IgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1J1bnRpbWVFcnJvci5qcyIoKSB7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KE9iamVjdC5jcmVhdGUpKSB7CiAgICAgICAgUnVudGltZUVycm9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTsKICAgICAgICBSdW50aW1lRXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUnVudGltZUVycm9yOwogICAgICB9CiAgICAgIFJ1bnRpbWVFcnJvci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsKICAgICAgICBsZXQgc3RyID0gYCR7dGhpcy5uYW1lfTogJHt0aGlzLm1lc3NhZ2V9YDsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHRoaXMuc3RhY2spKSB7CiAgICAgICAgICBzdHIgKz0gYAoke3RoaXMuc3RhY2sudG9TdHJpbmcoKX1gOwogICAgICAgIH0KICAgICAgICByZXR1cm4gc3RyOwogICAgICB9OwogICAgICBSdW50aW1lRXJyb3JfZGVmYXVsdCA9IFJ1bnRpbWVFcnJvcjsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL01hdHJpeDQuanMKICBmdW5jdGlvbiBNYXRyaXg0KGNvbHVtbjBSb3cwLCBjb2x1bW4xUm93MCwgY29sdW1uMlJvdzAsIGNvbHVtbjNSb3cwLCBjb2x1bW4wUm93MSwgY29sdW1uMVJvdzEsIGNvbHVtbjJSb3cxLCBjb2x1bW4zUm93MSwgY29sdW1uMFJvdzIsIGNvbHVtbjFSb3cyLCBjb2x1bW4yUm93MiwgY29sdW1uM1JvdzIsIGNvbHVtbjBSb3czLCBjb2x1bW4xUm93MywgY29sdW1uMlJvdzMsIGNvbHVtbjNSb3czKSB7CiAgICB0aGlzWzBdID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoY29sdW1uMFJvdzAsIDApOwogICAgdGhpc1sxXSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGNvbHVtbjBSb3cxLCAwKTsKICAgIHRoaXNbMl0gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChjb2x1bW4wUm93MiwgMCk7CiAgICB0aGlzWzNdID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoY29sdW1uMFJvdzMsIDApOwogICAgdGhpc1s0XSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGNvbHVtbjFSb3cwLCAwKTsKICAgIHRoaXNbNV0gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChjb2x1bW4xUm93MSwgMCk7CiAgICB0aGlzWzZdID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoY29sdW1uMVJvdzIsIDApOwogICAgdGhpc1s3XSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGNvbHVtbjFSb3czLCAwKTsKICAgIHRoaXNbOF0gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChjb2x1bW4yUm93MCwgMCk7CiAgICB0aGlzWzldID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoY29sdW1uMlJvdzEsIDApOwogICAgdGhpc1sxMF0gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChjb2x1bW4yUm93MiwgMCk7CiAgICB0aGlzWzExXSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGNvbHVtbjJSb3czLCAwKTsKICAgIHRoaXNbMTJdID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoY29sdW1uM1JvdzAsIDApOwogICAgdGhpc1sxM10gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChjb2x1bW4zUm93MSwgMCk7CiAgICB0aGlzWzE0XSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGNvbHVtbjNSb3cyLCAwKTsKICAgIHRoaXNbMTVdID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoY29sdW1uM1JvdzMsIDApOwogIH0KICB2YXIgZnJvbUNhbWVyYUYsIGZyb21DYW1lcmFSLCBmcm9tQ2FtZXJhVSwgc2NhbGVTY3JhdGNoMTIsIHNjYWxlU2NyYXRjaDIyLCBzY3JhdGNoQ29sdW1uMiwgc2NhbGVTY3JhdGNoMzIsIHNjYWxlU2NyYXRjaDQyLCBzY2FsZVNjcmF0Y2g1Miwgc2NyYXRjaEludmVyc2VSb3RhdGlvbiwgc2NyYXRjaE1hdHJpeDNaZXJvLCBzY3JhdGNoQm90dG9tUm93LCBzY3JhdGNoRXhwZWN0ZWRCb3R0b21Sb3csIHNjcmF0Y2hUcmFuc3Bvc2VNYXRyaXgyLCBNYXRyaXg0X2RlZmF1bHQ7CiAgdmFyIGluaXRfTWF0cml4NCA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvTWF0cml4NC5qcyIoKSB7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NhcnRlc2lhbjQoKTsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgaW5pdF9NYXRyaXgzKCk7CiAgICAgIGluaXRfUnVudGltZUVycm9yKCk7CiAgICAgIE1hdHJpeDQucGFja2VkTGVuZ3RoID0gMTY7CiAgICAgIE1hdHJpeDQucGFjayA9IGZ1bmN0aW9uKHZhbHVlLCBhcnJheSwgc3RhcnRpbmdJbmRleCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidmFsdWUiLCB2YWx1ZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlWzBdOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZVsxXTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWVbMl07CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlWzNdOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZVs0XTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWVbNV07CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlWzZdOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZVs3XTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWVbOF07CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlWzldOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZVsxMF07CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlWzExXTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWVbMTJdOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZVsxM107CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlWzE0XTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4XSA9IHZhbHVlWzE1XTsKICAgICAgICByZXR1cm4gYXJyYXk7CiAgICAgIH07CiAgICAgIE1hdHJpeDQudW5wYWNrID0gZnVuY3Rpb24oYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBNYXRyaXg0KCk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdFswXSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgcmVzdWx0WzFdID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICByZXN1bHRbMl0gPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIHJlc3VsdFszXSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgcmVzdWx0WzRdID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICByZXN1bHRbNV0gPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIHJlc3VsdFs2XSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgcmVzdWx0WzddID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICByZXN1bHRbOF0gPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIHJlc3VsdFs5XSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgcmVzdWx0WzEwXSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgcmVzdWx0WzExXSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgcmVzdWx0WzEyXSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgcmVzdWx0WzEzXSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgcmVzdWx0WzE0XSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgcmVzdWx0WzE1XSA9IGFycmF5W3N0YXJ0aW5nSW5kZXhdOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDQucGFja0FycmF5ID0gZnVuY3Rpb24oYXJyYXksIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgY29uc3QgbGVuZ3RoID0gYXJyYXkubGVuZ3RoOwogICAgICAgIGNvbnN0IHJlc3VsdExlbmd0aCA9IGxlbmd0aCAqIDE2OwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBBcnJheShyZXN1bHRMZW5ndGgpOwogICAgICAgIH0gZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkocmVzdWx0KSAmJiByZXN1bHQubGVuZ3RoICE9PSByZXN1bHRMZW5ndGgpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgICAiSWYgcmVzdWx0IGlzIGEgdHlwZWQgYXJyYXksIGl0IG11c3QgaGF2ZSBleGFjdGx5IGFycmF5Lmxlbmd0aCAqIDE2IGVsZW1lbnRzIgogICAgICAgICAgKTsKICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdC5sZW5ndGggIT09IHJlc3VsdExlbmd0aCkgewogICAgICAgICAgcmVzdWx0Lmxlbmd0aCA9IHJlc3VsdExlbmd0aDsKICAgICAgICB9CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgICAgICAgTWF0cml4NC5wYWNrKGFycmF5W2ldLCByZXN1bHQsIGkgKiAxNik7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDQudW5wYWNrQXJyYXkgPSBmdW5jdGlvbihhcnJheSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygiYXJyYXkubGVuZ3RoIiwgYXJyYXkubGVuZ3RoLCAxNik7CiAgICAgICAgaWYgKGFycmF5Lmxlbmd0aCAlIDE2ICE9PSAwKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYXJyYXkgbGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi4iKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgbGVuZ3RoID0gYXJyYXkubGVuZ3RoOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBBcnJheShsZW5ndGggLyAxNik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlc3VsdC5sZW5ndGggPSBsZW5ndGggLyAxNjsKICAgICAgICB9CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMTYpIHsKICAgICAgICAgIGNvbnN0IGluZGV4ID0gaSAvIDE2OwogICAgICAgICAgcmVzdWx0W2luZGV4XSA9IE1hdHJpeDQudW5wYWNrKGFycmF5LCBpLCByZXN1bHRbaW5kZXhdKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4NC5jbG9uZSA9IGZ1bmN0aW9uKG1hdHJpeCwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQobWF0cml4KSkgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBNYXRyaXg0KAogICAgICAgICAgICBtYXRyaXhbMF0sCiAgICAgICAgICAgIG1hdHJpeFs0XSwKICAgICAgICAgICAgbWF0cml4WzhdLAogICAgICAgICAgICBtYXRyaXhbMTJdLAogICAgICAgICAgICBtYXRyaXhbMV0sCiAgICAgICAgICAgIG1hdHJpeFs1XSwKICAgICAgICAgICAgbWF0cml4WzldLAogICAgICAgICAgICBtYXRyaXhbMTNdLAogICAgICAgICAgICBtYXRyaXhbMl0sCiAgICAgICAgICAgIG1hdHJpeFs2XSwKICAgICAgICAgICAgbWF0cml4WzEwXSwKICAgICAgICAgICAgbWF0cml4WzE0XSwKICAgICAgICAgICAgbWF0cml4WzNdLAogICAgICAgICAgICBtYXRyaXhbN10sCiAgICAgICAgICAgIG1hdHJpeFsxMV0sCiAgICAgICAgICAgIG1hdHJpeFsxNV0KICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdFswXSA9IG1hdHJpeFswXTsKICAgICAgICByZXN1bHRbMV0gPSBtYXRyaXhbMV07CiAgICAgICAgcmVzdWx0WzJdID0gbWF0cml4WzJdOwogICAgICAgIHJlc3VsdFszXSA9IG1hdHJpeFszXTsKICAgICAgICByZXN1bHRbNF0gPSBtYXRyaXhbNF07CiAgICAgICAgcmVzdWx0WzVdID0gbWF0cml4WzVdOwogICAgICAgIHJlc3VsdFs2XSA9IG1hdHJpeFs2XTsKICAgICAgICByZXN1bHRbN10gPSBtYXRyaXhbN107CiAgICAgICAgcmVzdWx0WzhdID0gbWF0cml4WzhdOwogICAgICAgIHJlc3VsdFs5XSA9IG1hdHJpeFs5XTsKICAgICAgICByZXN1bHRbMTBdID0gbWF0cml4WzEwXTsKICAgICAgICByZXN1bHRbMTFdID0gbWF0cml4WzExXTsKICAgICAgICByZXN1bHRbMTJdID0gbWF0cml4WzEyXTsKICAgICAgICByZXN1bHRbMTNdID0gbWF0cml4WzEzXTsKICAgICAgICByZXN1bHRbMTRdID0gbWF0cml4WzE0XTsKICAgICAgICByZXN1bHRbMTVdID0gbWF0cml4WzE1XTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXg0LmZyb21BcnJheSA9IE1hdHJpeDQudW5wYWNrOwogICAgICBNYXRyaXg0LmZyb21Db2x1bW5NYWpvckFycmF5ID0gZnVuY3Rpb24odmFsdWVzLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoInZhbHVlcyIsIHZhbHVlcyk7CiAgICAgICAgcmV0dXJuIE1hdHJpeDQuY2xvbmUodmFsdWVzLCByZXN1bHQpOwogICAgICB9OwogICAgICBNYXRyaXg0LmZyb21Sb3dNYWpvckFycmF5ID0gZnVuY3Rpb24odmFsdWVzLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoInZhbHVlcyIsIHZhbHVlcyk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBNYXRyaXg0KAogICAgICAgICAgICB2YWx1ZXNbMF0sCiAgICAgICAgICAgIHZhbHVlc1sxXSwKICAgICAgICAgICAgdmFsdWVzWzJdLAogICAgICAgICAgICB2YWx1ZXNbM10sCiAgICAgICAgICAgIHZhbHVlc1s0XSwKICAgICAgICAgICAgdmFsdWVzWzVdLAogICAgICAgICAgICB2YWx1ZXNbNl0sCiAgICAgICAgICAgIHZhbHVlc1s3XSwKICAgICAgICAgICAgdmFsdWVzWzhdLAogICAgICAgICAgICB2YWx1ZXNbOV0sCiAgICAgICAgICAgIHZhbHVlc1sxMF0sCiAgICAgICAgICAgIHZhbHVlc1sxMV0sCiAgICAgICAgICAgIHZhbHVlc1sxMl0sCiAgICAgICAgICAgIHZhbHVlc1sxM10sCiAgICAgICAgICAgIHZhbHVlc1sxNF0sCiAgICAgICAgICAgIHZhbHVlc1sxNV0KICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdFswXSA9IHZhbHVlc1swXTsKICAgICAgICByZXN1bHRbMV0gPSB2YWx1ZXNbNF07CiAgICAgICAgcmVzdWx0WzJdID0gdmFsdWVzWzhdOwogICAgICAgIHJlc3VsdFszXSA9IHZhbHVlc1sxMl07CiAgICAgICAgcmVzdWx0WzRdID0gdmFsdWVzWzFdOwogICAgICAgIHJlc3VsdFs1XSA9IHZhbHVlc1s1XTsKICAgICAgICByZXN1bHRbNl0gPSB2YWx1ZXNbOV07CiAgICAgICAgcmVzdWx0WzddID0gdmFsdWVzWzEzXTsKICAgICAgICByZXN1bHRbOF0gPSB2YWx1ZXNbMl07CiAgICAgICAgcmVzdWx0WzldID0gdmFsdWVzWzZdOwogICAgICAgIHJlc3VsdFsxMF0gPSB2YWx1ZXNbMTBdOwogICAgICAgIHJlc3VsdFsxMV0gPSB2YWx1ZXNbMTRdOwogICAgICAgIHJlc3VsdFsxMl0gPSB2YWx1ZXNbM107CiAgICAgICAgcmVzdWx0WzEzXSA9IHZhbHVlc1s3XTsKICAgICAgICByZXN1bHRbMTRdID0gdmFsdWVzWzExXTsKICAgICAgICByZXN1bHRbMTVdID0gdmFsdWVzWzE1XTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXg0LmZyb21Sb3RhdGlvblRyYW5zbGF0aW9uID0gZnVuY3Rpb24ocm90YXRpb24sIHRyYW5zbGF0aW9uMiwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyb3RhdGlvbiIsIHJvdGF0aW9uKTsKICAgICAgICB0cmFuc2xhdGlvbjIgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh0cmFuc2xhdGlvbjIsIENhcnRlc2lhbjNfZGVmYXVsdC5aRVJPKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IE1hdHJpeDQoCiAgICAgICAgICAgIHJvdGF0aW9uWzBdLAogICAgICAgICAgICByb3RhdGlvblszXSwKICAgICAgICAgICAgcm90YXRpb25bNl0sCiAgICAgICAgICAgIHRyYW5zbGF0aW9uMi54LAogICAgICAgICAgICByb3RhdGlvblsxXSwKICAgICAgICAgICAgcm90YXRpb25bNF0sCiAgICAgICAgICAgIHJvdGF0aW9uWzddLAogICAgICAgICAgICB0cmFuc2xhdGlvbjIueSwKICAgICAgICAgICAgcm90YXRpb25bMl0sCiAgICAgICAgICAgIHJvdGF0aW9uWzVdLAogICAgICAgICAgICByb3RhdGlvbls4XSwKICAgICAgICAgICAgdHJhbnNsYXRpb24yLnosCiAgICAgICAgICAgIDAsCiAgICAgICAgICAgIDAsCiAgICAgICAgICAgIDAsCiAgICAgICAgICAgIDEKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdFswXSA9IHJvdGF0aW9uWzBdOwogICAgICAgIHJlc3VsdFsxXSA9IHJvdGF0aW9uWzFdOwogICAgICAgIHJlc3VsdFsyXSA9IHJvdGF0aW9uWzJdOwogICAgICAgIHJlc3VsdFszXSA9IDA7CiAgICAgICAgcmVzdWx0WzRdID0gcm90YXRpb25bM107CiAgICAgICAgcmVzdWx0WzVdID0gcm90YXRpb25bNF07CiAgICAgICAgcmVzdWx0WzZdID0gcm90YXRpb25bNV07CiAgICAgICAgcmVzdWx0WzddID0gMDsKICAgICAgICByZXN1bHRbOF0gPSByb3RhdGlvbls2XTsKICAgICAgICByZXN1bHRbOV0gPSByb3RhdGlvbls3XTsKICAgICAgICByZXN1bHRbMTBdID0gcm90YXRpb25bOF07CiAgICAgICAgcmVzdWx0WzExXSA9IDA7CiAgICAgICAgcmVzdWx0WzEyXSA9IHRyYW5zbGF0aW9uMi54OwogICAgICAgIHJlc3VsdFsxM10gPSB0cmFuc2xhdGlvbjIueTsKICAgICAgICByZXN1bHRbMTRdID0gdHJhbnNsYXRpb24yLno7CiAgICAgICAgcmVzdWx0WzE1XSA9IDE7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4NC5mcm9tVHJhbnNsYXRpb25RdWF0ZXJuaW9uUm90YXRpb25TY2FsZSA9IGZ1bmN0aW9uKHRyYW5zbGF0aW9uMiwgcm90YXRpb24sIHNjYWxlLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInRyYW5zbGF0aW9uIiwgdHJhbnNsYXRpb24yKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJvdGF0aW9uIiwgcm90YXRpb24pOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgic2NhbGUiLCBzY2FsZSk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IE1hdHJpeDQoKTsKICAgICAgICB9CiAgICAgICAgY29uc3Qgc2NhbGVYID0gc2NhbGUueDsKICAgICAgICBjb25zdCBzY2FsZVkgPSBzY2FsZS55OwogICAgICAgIGNvbnN0IHNjYWxlWiA9IHNjYWxlLno7CiAgICAgICAgY29uc3QgeDIgPSByb3RhdGlvbi54ICogcm90YXRpb24ueDsKICAgICAgICBjb25zdCB4eSA9IHJvdGF0aW9uLnggKiByb3RhdGlvbi55OwogICAgICAgIGNvbnN0IHh6ID0gcm90YXRpb24ueCAqIHJvdGF0aW9uLno7CiAgICAgICAgY29uc3QgeHcgPSByb3RhdGlvbi54ICogcm90YXRpb24udzsKICAgICAgICBjb25zdCB5MiA9IHJvdGF0aW9uLnkgKiByb3RhdGlvbi55OwogICAgICAgIGNvbnN0IHl6ID0gcm90YXRpb24ueSAqIHJvdGF0aW9uLno7CiAgICAgICAgY29uc3QgeXcgPSByb3RhdGlvbi55ICogcm90YXRpb24udzsKICAgICAgICBjb25zdCB6MiA9IHJvdGF0aW9uLnogKiByb3RhdGlvbi56OwogICAgICAgIGNvbnN0IHp3ID0gcm90YXRpb24ueiAqIHJvdGF0aW9uLnc7CiAgICAgICAgY29uc3QgdzIgPSByb3RhdGlvbi53ICogcm90YXRpb24udzsKICAgICAgICBjb25zdCBtMDAgPSB4MiAtIHkyIC0gejIgKyB3MjsKICAgICAgICBjb25zdCBtMDEgPSAyICogKHh5IC0gencpOwogICAgICAgIGNvbnN0IG0wMiA9IDIgKiAoeHogKyB5dyk7CiAgICAgICAgY29uc3QgbTEwID0gMiAqICh4eSArIHp3KTsKICAgICAgICBjb25zdCBtMTEgPSAteDIgKyB5MiAtIHoyICsgdzI7CiAgICAgICAgY29uc3QgbTEyID0gMiAqICh5eiAtIHh3KTsKICAgICAgICBjb25zdCBtMjAgPSAyICogKHh6IC0geXcpOwogICAgICAgIGNvbnN0IG0yMSA9IDIgKiAoeXogKyB4dyk7CiAgICAgICAgY29uc3QgbTIyID0gLXgyIC0geTIgKyB6MiArIHcyOwogICAgICAgIHJlc3VsdFswXSA9IG0wMCAqIHNjYWxlWDsKICAgICAgICByZXN1bHRbMV0gPSBtMTAgKiBzY2FsZVg7CiAgICAgICAgcmVzdWx0WzJdID0gbTIwICogc2NhbGVYOwogICAgICAgIHJlc3VsdFszXSA9IDA7CiAgICAgICAgcmVzdWx0WzRdID0gbTAxICogc2NhbGVZOwogICAgICAgIHJlc3VsdFs1XSA9IG0xMSAqIHNjYWxlWTsKICAgICAgICByZXN1bHRbNl0gPSBtMjEgKiBzY2FsZVk7CiAgICAgICAgcmVzdWx0WzddID0gMDsKICAgICAgICByZXN1bHRbOF0gPSBtMDIgKiBzY2FsZVo7CiAgICAgICAgcmVzdWx0WzldID0gbTEyICogc2NhbGVaOwogICAgICAgIHJlc3VsdFsxMF0gPSBtMjIgKiBzY2FsZVo7CiAgICAgICAgcmVzdWx0WzExXSA9IDA7CiAgICAgICAgcmVzdWx0WzEyXSA9IHRyYW5zbGF0aW9uMi54OwogICAgICAgIHJlc3VsdFsxM10gPSB0cmFuc2xhdGlvbjIueTsKICAgICAgICByZXN1bHRbMTRdID0gdHJhbnNsYXRpb24yLno7CiAgICAgICAgcmVzdWx0WzE1XSA9IDE7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4NC5mcm9tVHJhbnNsYXRpb25Sb3RhdGlvblNjYWxlID0gZnVuY3Rpb24odHJhbnNsYXRpb25Sb3RhdGlvblNjYWxlLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInRyYW5zbGF0aW9uUm90YXRpb25TY2FsZSIsIHRyYW5zbGF0aW9uUm90YXRpb25TY2FsZSk7CiAgICAgICAgcmV0dXJuIE1hdHJpeDQuZnJvbVRyYW5zbGF0aW9uUXVhdGVybmlvblJvdGF0aW9uU2NhbGUoCiAgICAgICAgICB0cmFuc2xhdGlvblJvdGF0aW9uU2NhbGUudHJhbnNsYXRpb24sCiAgICAgICAgICB0cmFuc2xhdGlvblJvdGF0aW9uU2NhbGUucm90YXRpb24sCiAgICAgICAgICB0cmFuc2xhdGlvblJvdGF0aW9uU2NhbGUuc2NhbGUsCiAgICAgICAgICByZXN1bHQKICAgICAgICApOwogICAgICB9OwogICAgICBNYXRyaXg0LmZyb21UcmFuc2xhdGlvbiA9IGZ1bmN0aW9uKHRyYW5zbGF0aW9uMiwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJ0cmFuc2xhdGlvbiIsIHRyYW5zbGF0aW9uMik7CiAgICAgICAgcmV0dXJuIE1hdHJpeDQuZnJvbVJvdGF0aW9uVHJhbnNsYXRpb24oTWF0cml4M19kZWZhdWx0LklERU5USVRZLCB0cmFuc2xhdGlvbjIsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIE1hdHJpeDQuZnJvbVNjYWxlID0gZnVuY3Rpb24oc2NhbGUsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgic2NhbGUiLCBzY2FsZSk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBNYXRyaXg0KAogICAgICAgICAgICBzY2FsZS54LAogICAgICAgICAgICAwLAogICAgICAgICAgICAwLAogICAgICAgICAgICAwLAogICAgICAgICAgICAwLAogICAgICAgICAgICBzY2FsZS55LAogICAgICAgICAgICAwLAogICAgICAgICAgICAwLAogICAgICAgICAgICAwLAogICAgICAgICAgICAwLAogICAgICAgICAgICBzY2FsZS56LAogICAgICAgICAgICAwLAogICAgICAgICAgICAwLAogICAgICAgICAgICAwLAogICAgICAgICAgICAwLAogICAgICAgICAgICAxCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICByZXN1bHRbMF0gPSBzY2FsZS54OwogICAgICAgIHJlc3VsdFsxXSA9IDA7CiAgICAgICAgcmVzdWx0WzJdID0gMDsKICAgICAgICByZXN1bHRbM10gPSAwOwogICAgICAgIHJlc3VsdFs0XSA9IDA7CiAgICAgICAgcmVzdWx0WzVdID0gc2NhbGUueTsKICAgICAgICByZXN1bHRbNl0gPSAwOwogICAgICAgIHJlc3VsdFs3XSA9IDA7CiAgICAgICAgcmVzdWx0WzhdID0gMDsKICAgICAgICByZXN1bHRbOV0gPSAwOwogICAgICAgIHJlc3VsdFsxMF0gPSBzY2FsZS56OwogICAgICAgIHJlc3VsdFsxMV0gPSAwOwogICAgICAgIHJlc3VsdFsxMl0gPSAwOwogICAgICAgIHJlc3VsdFsxM10gPSAwOwogICAgICAgIHJlc3VsdFsxNF0gPSAwOwogICAgICAgIHJlc3VsdFsxNV0gPSAxOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDQuZnJvbVVuaWZvcm1TY2FsZSA9IGZ1bmN0aW9uKHNjYWxlLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoInNjYWxlIiwgc2NhbGUpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgTWF0cml4NCgKICAgICAgICAgICAgc2NhbGUsCiAgICAgICAgICAgIDAsCiAgICAgICAgICAgIDAsCiAgICAgICAgICAgIDAsCiAgICAgICAgICAgIDAsCiAgICAgICAgICAgIHNjYWxlLAogICAgICAgICAgICAwLAogICAgICAgICAgICAwLAogICAgICAgICAgICAwLAogICAgICAgICAgICAwLAogICAgICAgICAgICBzY2FsZSwKICAgICAgICAgICAgMCwKICAgICAgICAgICAgMCwKICAgICAgICAgICAgMCwKICAgICAgICAgICAgMCwKICAgICAgICAgICAgMQogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0WzBdID0gc2NhbGU7CiAgICAgICAgcmVzdWx0WzFdID0gMDsKICAgICAgICByZXN1bHRbMl0gPSAwOwogICAgICAgIHJlc3VsdFszXSA9IDA7CiAgICAgICAgcmVzdWx0WzRdID0gMDsKICAgICAgICByZXN1bHRbNV0gPSBzY2FsZTsKICAgICAgICByZXN1bHRbNl0gPSAwOwogICAgICAgIHJlc3VsdFs3XSA9IDA7CiAgICAgICAgcmVzdWx0WzhdID0gMDsKICAgICAgICByZXN1bHRbOV0gPSAwOwogICAgICAgIHJlc3VsdFsxMF0gPSBzY2FsZTsKICAgICAgICByZXN1bHRbMTFdID0gMDsKICAgICAgICByZXN1bHRbMTJdID0gMDsKICAgICAgICByZXN1bHRbMTNdID0gMDsKICAgICAgICByZXN1bHRbMTRdID0gMDsKICAgICAgICByZXN1bHRbMTVdID0gMTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXg0LmZyb21Sb3RhdGlvbiA9IGZ1bmN0aW9uKHJvdGF0aW9uLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJvdGF0aW9uIiwgcm90YXRpb24pOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBNYXRyaXg0KCk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdFswXSA9IHJvdGF0aW9uWzBdOwogICAgICAgIHJlc3VsdFsxXSA9IHJvdGF0aW9uWzFdOwogICAgICAgIHJlc3VsdFsyXSA9IHJvdGF0aW9uWzJdOwogICAgICAgIHJlc3VsdFszXSA9IDA7CiAgICAgICAgcmVzdWx0WzRdID0gcm90YXRpb25bM107CiAgICAgICAgcmVzdWx0WzVdID0gcm90YXRpb25bNF07CiAgICAgICAgcmVzdWx0WzZdID0gcm90YXRpb25bNV07CiAgICAgICAgcmVzdWx0WzddID0gMDsKICAgICAgICByZXN1bHRbOF0gPSByb3RhdGlvbls2XTsKICAgICAgICByZXN1bHRbOV0gPSByb3RhdGlvbls3XTsKICAgICAgICByZXN1bHRbMTBdID0gcm90YXRpb25bOF07CiAgICAgICAgcmVzdWx0WzExXSA9IDA7CiAgICAgICAgcmVzdWx0WzEyXSA9IDA7CiAgICAgICAgcmVzdWx0WzEzXSA9IDA7CiAgICAgICAgcmVzdWx0WzE0XSA9IDA7CiAgICAgICAgcmVzdWx0WzE1XSA9IDE7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgZnJvbUNhbWVyYUYgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGZyb21DYW1lcmFSID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBmcm9tQ2FtZXJhVSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgTWF0cml4NC5mcm9tQ2FtZXJhID0gZnVuY3Rpb24oY2FtZXJhLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImNhbWVyYSIsIGNhbWVyYSk7CiAgICAgICAgY29uc3QgcG9zaXRpb24gPSBjYW1lcmEucG9zaXRpb247CiAgICAgICAgY29uc3QgZGlyZWN0aW9uMiA9IGNhbWVyYS5kaXJlY3Rpb247CiAgICAgICAgY29uc3QgdXAgPSBjYW1lcmEudXA7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjYW1lcmEucG9zaXRpb24iLCBwb3NpdGlvbik7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjYW1lcmEuZGlyZWN0aW9uIiwgZGlyZWN0aW9uMik7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjYW1lcmEudXAiLCB1cCk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShkaXJlY3Rpb24yLCBmcm9tQ2FtZXJhRik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSgKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyhmcm9tQ2FtZXJhRiwgdXAsIGZyb21DYW1lcmFSKSwKICAgICAgICAgIGZyb21DYW1lcmFSCiAgICAgICAgKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKGZyb21DYW1lcmFSLCBmcm9tQ2FtZXJhRiwgZnJvbUNhbWVyYVUpLAogICAgICAgICAgZnJvbUNhbWVyYVUKICAgICAgICApOwogICAgICAgIGNvbnN0IHNYID0gZnJvbUNhbWVyYVIueDsKICAgICAgICBjb25zdCBzWSA9IGZyb21DYW1lcmFSLnk7CiAgICAgICAgY29uc3Qgc1ogPSBmcm9tQ2FtZXJhUi56OwogICAgICAgIGNvbnN0IGZYID0gZnJvbUNhbWVyYUYueDsKICAgICAgICBjb25zdCBmWSA9IGZyb21DYW1lcmFGLnk7CiAgICAgICAgY29uc3QgZlogPSBmcm9tQ2FtZXJhRi56OwogICAgICAgIGNvbnN0IHVYID0gZnJvbUNhbWVyYVUueDsKICAgICAgICBjb25zdCB1WSA9IGZyb21DYW1lcmFVLnk7CiAgICAgICAgY29uc3QgdVogPSBmcm9tQ2FtZXJhVS56OwogICAgICAgIGNvbnN0IHBvc2l0aW9uWCA9IHBvc2l0aW9uLng7CiAgICAgICAgY29uc3QgcG9zaXRpb25ZID0gcG9zaXRpb24ueTsKICAgICAgICBjb25zdCBwb3NpdGlvblogPSBwb3NpdGlvbi56OwogICAgICAgIGNvbnN0IHQwID0gc1ggKiAtcG9zaXRpb25YICsgc1kgKiAtcG9zaXRpb25ZICsgc1ogKiAtcG9zaXRpb25aOwogICAgICAgIGNvbnN0IHQxID0gdVggKiAtcG9zaXRpb25YICsgdVkgKiAtcG9zaXRpb25ZICsgdVogKiAtcG9zaXRpb25aOwogICAgICAgIGNvbnN0IHQyID0gZlggKiBwb3NpdGlvblggKyBmWSAqIHBvc2l0aW9uWSArIGZaICogcG9zaXRpb25aOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgTWF0cml4NCgKICAgICAgICAgICAgc1gsCiAgICAgICAgICAgIHNZLAogICAgICAgICAgICBzWiwKICAgICAgICAgICAgdDAsCiAgICAgICAgICAgIHVYLAogICAgICAgICAgICB1WSwKICAgICAgICAgICAgdVosCiAgICAgICAgICAgIHQxLAogICAgICAgICAgICAtZlgsCiAgICAgICAgICAgIC1mWSwKICAgICAgICAgICAgLWZaLAogICAgICAgICAgICB0MiwKICAgICAgICAgICAgMCwKICAgICAgICAgICAgMCwKICAgICAgICAgICAgMCwKICAgICAgICAgICAgMQogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0WzBdID0gc1g7CiAgICAgICAgcmVzdWx0WzFdID0gdVg7CiAgICAgICAgcmVzdWx0WzJdID0gLWZYOwogICAgICAgIHJlc3VsdFszXSA9IDA7CiAgICAgICAgcmVzdWx0WzRdID0gc1k7CiAgICAgICAgcmVzdWx0WzVdID0gdVk7CiAgICAgICAgcmVzdWx0WzZdID0gLWZZOwogICAgICAgIHJlc3VsdFs3XSA9IDA7CiAgICAgICAgcmVzdWx0WzhdID0gc1o7CiAgICAgICAgcmVzdWx0WzldID0gdVo7CiAgICAgICAgcmVzdWx0WzEwXSA9IC1mWjsKICAgICAgICByZXN1bHRbMTFdID0gMDsKICAgICAgICByZXN1bHRbMTJdID0gdDA7CiAgICAgICAgcmVzdWx0WzEzXSA9IHQxOwogICAgICAgIHJlc3VsdFsxNF0gPSB0MjsKICAgICAgICByZXN1bHRbMTVdID0gMTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXg0LmNvbXB1dGVQZXJzcGVjdGl2ZUZpZWxkT2ZWaWV3ID0gZnVuY3Rpb24oZm92WSwgYXNwZWN0UmF0aW8sIG5lYXIsIGZhciwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuKCJmb3ZZIiwgZm92WSwgMCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmxlc3NUaGFuKCJmb3ZZIiwgZm92WSwgTWF0aC5QSSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuKCJuZWFyIiwgbmVhciwgMCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuKCJmYXIiLCBmYXIsIDApOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCBib3R0b20gPSBNYXRoLnRhbihmb3ZZICogMC41KTsKICAgICAgICBjb25zdCBjb2x1bW4xUm93MSA9IDEgLyBib3R0b207CiAgICAgICAgY29uc3QgY29sdW1uMFJvdzAgPSBjb2x1bW4xUm93MSAvIGFzcGVjdFJhdGlvOwogICAgICAgIGNvbnN0IGNvbHVtbjJSb3cyID0gKGZhciArIG5lYXIpIC8gKG5lYXIgLSBmYXIpOwogICAgICAgIGNvbnN0IGNvbHVtbjNSb3cyID0gMiAqIGZhciAqIG5lYXIgLyAobmVhciAtIGZhcik7CiAgICAgICAgcmVzdWx0WzBdID0gY29sdW1uMFJvdzA7CiAgICAgICAgcmVzdWx0WzFdID0gMDsKICAgICAgICByZXN1bHRbMl0gPSAwOwogICAgICAgIHJlc3VsdFszXSA9IDA7CiAgICAgICAgcmVzdWx0WzRdID0gMDsKICAgICAgICByZXN1bHRbNV0gPSBjb2x1bW4xUm93MTsKICAgICAgICByZXN1bHRbNl0gPSAwOwogICAgICAgIHJlc3VsdFs3XSA9IDA7CiAgICAgICAgcmVzdWx0WzhdID0gMDsKICAgICAgICByZXN1bHRbOV0gPSAwOwogICAgICAgIHJlc3VsdFsxMF0gPSBjb2x1bW4yUm93MjsKICAgICAgICByZXN1bHRbMTFdID0gLTE7CiAgICAgICAgcmVzdWx0WzEyXSA9IDA7CiAgICAgICAgcmVzdWx0WzEzXSA9IDA7CiAgICAgICAgcmVzdWx0WzE0XSA9IGNvbHVtbjNSb3cyOwogICAgICAgIHJlc3VsdFsxNV0gPSAwOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDQuY29tcHV0ZU9ydGhvZ3JhcGhpY09mZkNlbnRlciA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgbmVhciwgZmFyLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoImxlZnQiLCBsZWZ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoInJpZ2h0IiwgcmlnaHQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigiYm90dG9tIiwgYm90dG9tKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoInRvcCIsIHRvcCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJuZWFyIiwgbmVhcik7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJmYXIiLCBmYXIpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBsZXQgYTMgPSAxIC8gKHJpZ2h0IC0gbGVmdCk7CiAgICAgICAgbGV0IGIgPSAxIC8gKHRvcCAtIGJvdHRvbSk7CiAgICAgICAgbGV0IGMgPSAxIC8gKGZhciAtIG5lYXIpOwogICAgICAgIGNvbnN0IHR4ID0gLShyaWdodCArIGxlZnQpICogYTM7CiAgICAgICAgY29uc3QgdHkgPSAtKHRvcCArIGJvdHRvbSkgKiBiOwogICAgICAgIGNvbnN0IHR6ID0gLShmYXIgKyBuZWFyKSAqIGM7CiAgICAgICAgYTMgKj0gMjsKICAgICAgICBiICo9IDI7CiAgICAgICAgYyAqPSAtMjsKICAgICAgICByZXN1bHRbMF0gPSBhMzsKICAgICAgICByZXN1bHRbMV0gPSAwOwogICAgICAgIHJlc3VsdFsyXSA9IDA7CiAgICAgICAgcmVzdWx0WzNdID0gMDsKICAgICAgICByZXN1bHRbNF0gPSAwOwogICAgICAgIHJlc3VsdFs1XSA9IGI7CiAgICAgICAgcmVzdWx0WzZdID0gMDsKICAgICAgICByZXN1bHRbN10gPSAwOwogICAgICAgIHJlc3VsdFs4XSA9IDA7CiAgICAgICAgcmVzdWx0WzldID0gMDsKICAgICAgICByZXN1bHRbMTBdID0gYzsKICAgICAgICByZXN1bHRbMTFdID0gMDsKICAgICAgICByZXN1bHRbMTJdID0gdHg7CiAgICAgICAgcmVzdWx0WzEzXSA9IHR5OwogICAgICAgIHJlc3VsdFsxNF0gPSB0ejsKICAgICAgICByZXN1bHRbMTVdID0gMTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXg0LmNvbXB1dGVQZXJzcGVjdGl2ZU9mZkNlbnRlciA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgbmVhciwgZmFyLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoImxlZnQiLCBsZWZ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoInJpZ2h0IiwgcmlnaHQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigiYm90dG9tIiwgYm90dG9tKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoInRvcCIsIHRvcCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJuZWFyIiwgbmVhcik7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJmYXIiLCBmYXIpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCBjb2x1bW4wUm93MCA9IDIgKiBuZWFyIC8gKHJpZ2h0IC0gbGVmdCk7CiAgICAgICAgY29uc3QgY29sdW1uMVJvdzEgPSAyICogbmVhciAvICh0b3AgLSBib3R0b20pOwogICAgICAgIGNvbnN0IGNvbHVtbjJSb3cwID0gKHJpZ2h0ICsgbGVmdCkgLyAocmlnaHQgLSBsZWZ0KTsKICAgICAgICBjb25zdCBjb2x1bW4yUm93MSA9ICh0b3AgKyBib3R0b20pIC8gKHRvcCAtIGJvdHRvbSk7CiAgICAgICAgY29uc3QgY29sdW1uMlJvdzIgPSAtKGZhciArIG5lYXIpIC8gKGZhciAtIG5lYXIpOwogICAgICAgIGNvbnN0IGNvbHVtbjJSb3czID0gLTE7CiAgICAgICAgY29uc3QgY29sdW1uM1JvdzIgPSAtMiAqIGZhciAqIG5lYXIgLyAoZmFyIC0gbmVhcik7CiAgICAgICAgcmVzdWx0WzBdID0gY29sdW1uMFJvdzA7CiAgICAgICAgcmVzdWx0WzFdID0gMDsKICAgICAgICByZXN1bHRbMl0gPSAwOwogICAgICAgIHJlc3VsdFszXSA9IDA7CiAgICAgICAgcmVzdWx0WzRdID0gMDsKICAgICAgICByZXN1bHRbNV0gPSBjb2x1bW4xUm93MTsKICAgICAgICByZXN1bHRbNl0gPSAwOwogICAgICAgIHJlc3VsdFs3XSA9IDA7CiAgICAgICAgcmVzdWx0WzhdID0gY29sdW1uMlJvdzA7CiAgICAgICAgcmVzdWx0WzldID0gY29sdW1uMlJvdzE7CiAgICAgICAgcmVzdWx0WzEwXSA9IGNvbHVtbjJSb3cyOwogICAgICAgIHJlc3VsdFsxMV0gPSBjb2x1bW4yUm93MzsKICAgICAgICByZXN1bHRbMTJdID0gMDsKICAgICAgICByZXN1bHRbMTNdID0gMDsKICAgICAgICByZXN1bHRbMTRdID0gY29sdW1uM1JvdzI7CiAgICAgICAgcmVzdWx0WzE1XSA9IDA7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4NC5jb21wdXRlSW5maW5pdGVQZXJzcGVjdGl2ZU9mZkNlbnRlciA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgbmVhciwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJsZWZ0IiwgbGVmdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJyaWdodCIsIHJpZ2h0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoImJvdHRvbSIsIGJvdHRvbSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJ0b3AiLCB0b3ApOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigibmVhciIsIG5lYXIpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCBjb2x1bW4wUm93MCA9IDIgKiBuZWFyIC8gKHJpZ2h0IC0gbGVmdCk7CiAgICAgICAgY29uc3QgY29sdW1uMVJvdzEgPSAyICogbmVhciAvICh0b3AgLSBib3R0b20pOwogICAgICAgIGNvbnN0IGNvbHVtbjJSb3cwID0gKHJpZ2h0ICsgbGVmdCkgLyAocmlnaHQgLSBsZWZ0KTsKICAgICAgICBjb25zdCBjb2x1bW4yUm93MSA9ICh0b3AgKyBib3R0b20pIC8gKHRvcCAtIGJvdHRvbSk7CiAgICAgICAgY29uc3QgY29sdW1uMlJvdzIgPSAtMTsKICAgICAgICBjb25zdCBjb2x1bW4yUm93MyA9IC0xOwogICAgICAgIGNvbnN0IGNvbHVtbjNSb3cyID0gLTIgKiBuZWFyOwogICAgICAgIHJlc3VsdFswXSA9IGNvbHVtbjBSb3cwOwogICAgICAgIHJlc3VsdFsxXSA9IDA7CiAgICAgICAgcmVzdWx0WzJdID0gMDsKICAgICAgICByZXN1bHRbM10gPSAwOwogICAgICAgIHJlc3VsdFs0XSA9IDA7CiAgICAgICAgcmVzdWx0WzVdID0gY29sdW1uMVJvdzE7CiAgICAgICAgcmVzdWx0WzZdID0gMDsKICAgICAgICByZXN1bHRbN10gPSAwOwogICAgICAgIHJlc3VsdFs4XSA9IGNvbHVtbjJSb3cwOwogICAgICAgIHJlc3VsdFs5XSA9IGNvbHVtbjJSb3cxOwogICAgICAgIHJlc3VsdFsxMF0gPSBjb2x1bW4yUm93MjsKICAgICAgICByZXN1bHRbMTFdID0gY29sdW1uMlJvdzM7CiAgICAgICAgcmVzdWx0WzEyXSA9IDA7CiAgICAgICAgcmVzdWx0WzEzXSA9IDA7CiAgICAgICAgcmVzdWx0WzE0XSA9IGNvbHVtbjNSb3cyOwogICAgICAgIHJlc3VsdFsxNV0gPSAwOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDQuY29tcHV0ZVZpZXdwb3J0VHJhbnNmb3JtYXRpb24gPSBmdW5jdGlvbih2aWV3cG9ydCwgbmVhckRlcHRoUmFuZ2UsIGZhckRlcHRoUmFuZ2UsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBNYXRyaXg0KCk7CiAgICAgICAgfQogICAgICAgIHZpZXdwb3J0ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQodmlld3BvcnQsIGRlZmF1bHRWYWx1ZV9kZWZhdWx0LkVNUFRZX09CSkVDVCk7CiAgICAgICAgY29uc3QgeCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHZpZXdwb3J0LngsIDApOwogICAgICAgIGNvbnN0IHkgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh2aWV3cG9ydC55LCAwKTsKICAgICAgICBjb25zdCB3aWR0aCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHZpZXdwb3J0LndpZHRoLCAwKTsKICAgICAgICBjb25zdCBoZWlnaHQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh2aWV3cG9ydC5oZWlnaHQsIDApOwogICAgICAgIG5lYXJEZXB0aFJhbmdlID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQobmVhckRlcHRoUmFuZ2UsIDApOwogICAgICAgIGZhckRlcHRoUmFuZ2UgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChmYXJEZXB0aFJhbmdlLCAxKTsKICAgICAgICBjb25zdCBoYWxmV2lkdGggPSB3aWR0aCAqIDAuNTsKICAgICAgICBjb25zdCBoYWxmSGVpZ2h0ID0gaGVpZ2h0ICogMC41OwogICAgICAgIGNvbnN0IGhhbGZEZXB0aCA9IChmYXJEZXB0aFJhbmdlIC0gbmVhckRlcHRoUmFuZ2UpICogMC41OwogICAgICAgIGNvbnN0IGNvbHVtbjBSb3cwID0gaGFsZldpZHRoOwogICAgICAgIGNvbnN0IGNvbHVtbjFSb3cxID0gaGFsZkhlaWdodDsKICAgICAgICBjb25zdCBjb2x1bW4yUm93MiA9IGhhbGZEZXB0aDsKICAgICAgICBjb25zdCBjb2x1bW4zUm93MCA9IHggKyBoYWxmV2lkdGg7CiAgICAgICAgY29uc3QgY29sdW1uM1JvdzEgPSB5ICsgaGFsZkhlaWdodDsKICAgICAgICBjb25zdCBjb2x1bW4zUm93MiA9IG5lYXJEZXB0aFJhbmdlICsgaGFsZkRlcHRoOwogICAgICAgIGNvbnN0IGNvbHVtbjNSb3czID0gMTsKICAgICAgICByZXN1bHRbMF0gPSBjb2x1bW4wUm93MDsKICAgICAgICByZXN1bHRbMV0gPSAwOwogICAgICAgIHJlc3VsdFsyXSA9IDA7CiAgICAgICAgcmVzdWx0WzNdID0gMDsKICAgICAgICByZXN1bHRbNF0gPSAwOwogICAgICAgIHJlc3VsdFs1XSA9IGNvbHVtbjFSb3cxOwogICAgICAgIHJlc3VsdFs2XSA9IDA7CiAgICAgICAgcmVzdWx0WzddID0gMDsKICAgICAgICByZXN1bHRbOF0gPSAwOwogICAgICAgIHJlc3VsdFs5XSA9IDA7CiAgICAgICAgcmVzdWx0WzEwXSA9IGNvbHVtbjJSb3cyOwogICAgICAgIHJlc3VsdFsxMV0gPSAwOwogICAgICAgIHJlc3VsdFsxMl0gPSBjb2x1bW4zUm93MDsKICAgICAgICByZXN1bHRbMTNdID0gY29sdW1uM1JvdzE7CiAgICAgICAgcmVzdWx0WzE0XSA9IGNvbHVtbjNSb3cyOwogICAgICAgIHJlc3VsdFsxNV0gPSBjb2x1bW4zUm93MzsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXg0LmNvbXB1dGVWaWV3ID0gZnVuY3Rpb24ocG9zaXRpb24sIGRpcmVjdGlvbjIsIHVwLCByaWdodCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJwb3NpdGlvbiIsIHBvc2l0aW9uKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImRpcmVjdGlvbiIsIGRpcmVjdGlvbjIpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidXAiLCB1cCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyaWdodCIsIHJpZ2h0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0WzBdID0gcmlnaHQueDsKICAgICAgICByZXN1bHRbMV0gPSB1cC54OwogICAgICAgIHJlc3VsdFsyXSA9IC1kaXJlY3Rpb24yLng7CiAgICAgICAgcmVzdWx0WzNdID0gMDsKICAgICAgICByZXN1bHRbNF0gPSByaWdodC55OwogICAgICAgIHJlc3VsdFs1XSA9IHVwLnk7CiAgICAgICAgcmVzdWx0WzZdID0gLWRpcmVjdGlvbjIueTsKICAgICAgICByZXN1bHRbN10gPSAwOwogICAgICAgIHJlc3VsdFs4XSA9IHJpZ2h0Lno7CiAgICAgICAgcmVzdWx0WzldID0gdXAuejsKICAgICAgICByZXN1bHRbMTBdID0gLWRpcmVjdGlvbjIuejsKICAgICAgICByZXN1bHRbMTFdID0gMDsKICAgICAgICByZXN1bHRbMTJdID0gLUNhcnRlc2lhbjNfZGVmYXVsdC5kb3QocmlnaHQsIHBvc2l0aW9uKTsKICAgICAgICByZXN1bHRbMTNdID0gLUNhcnRlc2lhbjNfZGVmYXVsdC5kb3QodXAsIHBvc2l0aW9uKTsKICAgICAgICByZXN1bHRbMTRdID0gQ2FydGVzaWFuM19kZWZhdWx0LmRvdChkaXJlY3Rpb24yLCBwb3NpdGlvbik7CiAgICAgICAgcmVzdWx0WzE1XSA9IDE7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4NC50b0FycmF5ID0gZnVuY3Rpb24obWF0cml4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIFsKICAgICAgICAgICAgbWF0cml4WzBdLAogICAgICAgICAgICBtYXRyaXhbMV0sCiAgICAgICAgICAgIG1hdHJpeFsyXSwKICAgICAgICAgICAgbWF0cml4WzNdLAogICAgICAgICAgICBtYXRyaXhbNF0sCiAgICAgICAgICAgIG1hdHJpeFs1XSwKICAgICAgICAgICAgbWF0cml4WzZdLAogICAgICAgICAgICBtYXRyaXhbN10sCiAgICAgICAgICAgIG1hdHJpeFs4XSwKICAgICAgICAgICAgbWF0cml4WzldLAogICAgICAgICAgICBtYXRyaXhbMTBdLAogICAgICAgICAgICBtYXRyaXhbMTFdLAogICAgICAgICAgICBtYXRyaXhbMTJdLAogICAgICAgICAgICBtYXRyaXhbMTNdLAogICAgICAgICAgICBtYXRyaXhbMTRdLAogICAgICAgICAgICBtYXRyaXhbMTVdCiAgICAgICAgICBdOwogICAgICAgIH0KICAgICAgICByZXN1bHRbMF0gPSBtYXRyaXhbMF07CiAgICAgICAgcmVzdWx0WzFdID0gbWF0cml4WzFdOwogICAgICAgIHJlc3VsdFsyXSA9IG1hdHJpeFsyXTsKICAgICAgICByZXN1bHRbM10gPSBtYXRyaXhbM107CiAgICAgICAgcmVzdWx0WzRdID0gbWF0cml4WzRdOwogICAgICAgIHJlc3VsdFs1XSA9IG1hdHJpeFs1XTsKICAgICAgICByZXN1bHRbNl0gPSBtYXRyaXhbNl07CiAgICAgICAgcmVzdWx0WzddID0gbWF0cml4WzddOwogICAgICAgIHJlc3VsdFs4XSA9IG1hdHJpeFs4XTsKICAgICAgICByZXN1bHRbOV0gPSBtYXRyaXhbOV07CiAgICAgICAgcmVzdWx0WzEwXSA9IG1hdHJpeFsxMF07CiAgICAgICAgcmVzdWx0WzExXSA9IG1hdHJpeFsxMV07CiAgICAgICAgcmVzdWx0WzEyXSA9IG1hdHJpeFsxMl07CiAgICAgICAgcmVzdWx0WzEzXSA9IG1hdHJpeFsxM107CiAgICAgICAgcmVzdWx0WzE0XSA9IG1hdHJpeFsxNF07CiAgICAgICAgcmVzdWx0WzE1XSA9IG1hdHJpeFsxNV07CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4NC5nZXRFbGVtZW50SW5kZXggPSBmdW5jdGlvbihjb2x1bW4sIHJvdykgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbk9yRXF1YWxzKCJyb3ciLCByb3csIDApOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5sZXNzVGhhbk9yRXF1YWxzKCJyb3ciLCByb3csIDMpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbk9yRXF1YWxzKCJjb2x1bW4iLCBjb2x1bW4sIDApOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5sZXNzVGhhbk9yRXF1YWxzKCJjb2x1bW4iLCBjb2x1bW4sIDMpOwogICAgICAgIHJldHVybiBjb2x1bW4gKiA0ICsgcm93OwogICAgICB9OwogICAgICBNYXRyaXg0LmdldENvbHVtbiA9IGZ1bmN0aW9uKG1hdHJpeCwgaW5kZXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygiaW5kZXgiLCBpbmRleCwgMCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmxlc3NUaGFuT3JFcXVhbHMoImluZGV4IiwgaW5kZXgsIDMpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCBzdGFydEluZGV4ID0gaW5kZXggKiA0OwogICAgICAgIGNvbnN0IHggPSBtYXRyaXhbc3RhcnRJbmRleF07CiAgICAgICAgY29uc3QgeSA9IG1hdHJpeFtzdGFydEluZGV4ICsgMV07CiAgICAgICAgY29uc3QgeiA9IG1hdHJpeFtzdGFydEluZGV4ICsgMl07CiAgICAgICAgY29uc3QgdyA9IG1hdHJpeFtzdGFydEluZGV4ICsgM107CiAgICAgICAgcmVzdWx0LnggPSB4OwogICAgICAgIHJlc3VsdC55ID0geTsKICAgICAgICByZXN1bHQueiA9IHo7CiAgICAgICAgcmVzdWx0LncgPSB3OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDQuc2V0Q29sdW1uID0gZnVuY3Rpb24obWF0cml4LCBpbmRleCwgY2FydGVzaWFuMTEsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygiaW5kZXgiLCBpbmRleCwgMCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmxlc3NUaGFuT3JFcXVhbHMoImluZGV4IiwgaW5kZXgsIDMpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiY2FydGVzaWFuIiwgY2FydGVzaWFuMTEpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHQgPSBNYXRyaXg0LmNsb25lKG1hdHJpeCwgcmVzdWx0KTsKICAgICAgICBjb25zdCBzdGFydEluZGV4ID0gaW5kZXggKiA0OwogICAgICAgIHJlc3VsdFtzdGFydEluZGV4XSA9IGNhcnRlc2lhbjExLng7CiAgICAgICAgcmVzdWx0W3N0YXJ0SW5kZXggKyAxXSA9IGNhcnRlc2lhbjExLnk7CiAgICAgICAgcmVzdWx0W3N0YXJ0SW5kZXggKyAyXSA9IGNhcnRlc2lhbjExLno7CiAgICAgICAgcmVzdWx0W3N0YXJ0SW5kZXggKyAzXSA9IGNhcnRlc2lhbjExLnc7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4NC5nZXRSb3cgPSBmdW5jdGlvbihtYXRyaXgsIGluZGV4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuT3JFcXVhbHMoImluZGV4IiwgaW5kZXgsIDApOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5sZXNzVGhhbk9yRXF1YWxzKCJpbmRleCIsIGluZGV4LCAzKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgY29uc3QgeCA9IG1hdHJpeFtpbmRleF07CiAgICAgICAgY29uc3QgeSA9IG1hdHJpeFtpbmRleCArIDRdOwogICAgICAgIGNvbnN0IHogPSBtYXRyaXhbaW5kZXggKyA4XTsKICAgICAgICBjb25zdCB3ID0gbWF0cml4W2luZGV4ICsgMTJdOwogICAgICAgIHJlc3VsdC54ID0geDsKICAgICAgICByZXN1bHQueSA9IHk7CiAgICAgICAgcmVzdWx0LnogPSB6OwogICAgICAgIHJlc3VsdC53ID0gdzsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXg0LnNldFJvdyA9IGZ1bmN0aW9uKG1hdHJpeCwgaW5kZXgsIGNhcnRlc2lhbjExLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuT3JFcXVhbHMoImluZGV4IiwgaW5kZXgsIDApOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5sZXNzVGhhbk9yRXF1YWxzKCJpbmRleCIsIGluZGV4LCAzKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImNhcnRlc2lhbiIsIGNhcnRlc2lhbjExKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0ID0gTWF0cml4NC5jbG9uZShtYXRyaXgsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0W2luZGV4XSA9IGNhcnRlc2lhbjExLng7CiAgICAgICAgcmVzdWx0W2luZGV4ICsgNF0gPSBjYXJ0ZXNpYW4xMS55OwogICAgICAgIHJlc3VsdFtpbmRleCArIDhdID0gY2FydGVzaWFuMTEuejsKICAgICAgICByZXN1bHRbaW5kZXggKyAxMl0gPSBjYXJ0ZXNpYW4xMS53OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDQuc2V0VHJhbnNsYXRpb24gPSBmdW5jdGlvbihtYXRyaXgsIHRyYW5zbGF0aW9uMiwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXRyaXgiLCBtYXRyaXgpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidHJhbnNsYXRpb24iLCB0cmFuc2xhdGlvbjIpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHRbMF0gPSBtYXRyaXhbMF07CiAgICAgICAgcmVzdWx0WzFdID0gbWF0cml4WzFdOwogICAgICAgIHJlc3VsdFsyXSA9IG1hdHJpeFsyXTsKICAgICAgICByZXN1bHRbM10gPSBtYXRyaXhbM107CiAgICAgICAgcmVzdWx0WzRdID0gbWF0cml4WzRdOwogICAgICAgIHJlc3VsdFs1XSA9IG1hdHJpeFs1XTsKICAgICAgICByZXN1bHRbNl0gPSBtYXRyaXhbNl07CiAgICAgICAgcmVzdWx0WzddID0gbWF0cml4WzddOwogICAgICAgIHJlc3VsdFs4XSA9IG1hdHJpeFs4XTsKICAgICAgICByZXN1bHRbOV0gPSBtYXRyaXhbOV07CiAgICAgICAgcmVzdWx0WzEwXSA9IG1hdHJpeFsxMF07CiAgICAgICAgcmVzdWx0WzExXSA9IG1hdHJpeFsxMV07CiAgICAgICAgcmVzdWx0WzEyXSA9IHRyYW5zbGF0aW9uMi54OwogICAgICAgIHJlc3VsdFsxM10gPSB0cmFuc2xhdGlvbjIueTsKICAgICAgICByZXN1bHRbMTRdID0gdHJhbnNsYXRpb24yLno7CiAgICAgICAgcmVzdWx0WzE1XSA9IG1hdHJpeFsxNV07CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgc2NhbGVTY3JhdGNoMTIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIE1hdHJpeDQuc2V0U2NhbGUgPSBmdW5jdGlvbihtYXRyaXgsIHNjYWxlLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJzY2FsZSIsIHNjYWxlKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgY29uc3QgZXhpc3RpbmdTY2FsZSA9IE1hdHJpeDQuZ2V0U2NhbGUobWF0cml4LCBzY2FsZVNjcmF0Y2gxMik7CiAgICAgICAgY29uc3Qgc2NhbGVSYXRpb1ggPSBzY2FsZS54IC8gZXhpc3RpbmdTY2FsZS54OwogICAgICAgIGNvbnN0IHNjYWxlUmF0aW9ZID0gc2NhbGUueSAvIGV4aXN0aW5nU2NhbGUueTsKICAgICAgICBjb25zdCBzY2FsZVJhdGlvWiA9IHNjYWxlLnogLyBleGlzdGluZ1NjYWxlLno7CiAgICAgICAgcmVzdWx0WzBdID0gbWF0cml4WzBdICogc2NhbGVSYXRpb1g7CiAgICAgICAgcmVzdWx0WzFdID0gbWF0cml4WzFdICogc2NhbGVSYXRpb1g7CiAgICAgICAgcmVzdWx0WzJdID0gbWF0cml4WzJdICogc2NhbGVSYXRpb1g7CiAgICAgICAgcmVzdWx0WzNdID0gbWF0cml4WzNdOwogICAgICAgIHJlc3VsdFs0XSA9IG1hdHJpeFs0XSAqIHNjYWxlUmF0aW9ZOwogICAgICAgIHJlc3VsdFs1XSA9IG1hdHJpeFs1XSAqIHNjYWxlUmF0aW9ZOwogICAgICAgIHJlc3VsdFs2XSA9IG1hdHJpeFs2XSAqIHNjYWxlUmF0aW9ZOwogICAgICAgIHJlc3VsdFs3XSA9IG1hdHJpeFs3XTsKICAgICAgICByZXN1bHRbOF0gPSBtYXRyaXhbOF0gKiBzY2FsZVJhdGlvWjsKICAgICAgICByZXN1bHRbOV0gPSBtYXRyaXhbOV0gKiBzY2FsZVJhdGlvWjsKICAgICAgICByZXN1bHRbMTBdID0gbWF0cml4WzEwXSAqIHNjYWxlUmF0aW9aOwogICAgICAgIHJlc3VsdFsxMV0gPSBtYXRyaXhbMTFdOwogICAgICAgIHJlc3VsdFsxMl0gPSBtYXRyaXhbMTJdOwogICAgICAgIHJlc3VsdFsxM10gPSBtYXRyaXhbMTNdOwogICAgICAgIHJlc3VsdFsxNF0gPSBtYXRyaXhbMTRdOwogICAgICAgIHJlc3VsdFsxNV0gPSBtYXRyaXhbMTVdOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIHNjYWxlU2NyYXRjaDIyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBNYXRyaXg0LnNldFVuaWZvcm1TY2FsZSA9IGZ1bmN0aW9uKG1hdHJpeCwgc2NhbGUsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoInNjYWxlIiwgc2NhbGUpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCBleGlzdGluZ1NjYWxlID0gTWF0cml4NC5nZXRTY2FsZShtYXRyaXgsIHNjYWxlU2NyYXRjaDIyKTsKICAgICAgICBjb25zdCBzY2FsZVJhdGlvWCA9IHNjYWxlIC8gZXhpc3RpbmdTY2FsZS54OwogICAgICAgIGNvbnN0IHNjYWxlUmF0aW9ZID0gc2NhbGUgLyBleGlzdGluZ1NjYWxlLnk7CiAgICAgICAgY29uc3Qgc2NhbGVSYXRpb1ogPSBzY2FsZSAvIGV4aXN0aW5nU2NhbGUuejsKICAgICAgICByZXN1bHRbMF0gPSBtYXRyaXhbMF0gKiBzY2FsZVJhdGlvWDsKICAgICAgICByZXN1bHRbMV0gPSBtYXRyaXhbMV0gKiBzY2FsZVJhdGlvWDsKICAgICAgICByZXN1bHRbMl0gPSBtYXRyaXhbMl0gKiBzY2FsZVJhdGlvWDsKICAgICAgICByZXN1bHRbM10gPSBtYXRyaXhbM107CiAgICAgICAgcmVzdWx0WzRdID0gbWF0cml4WzRdICogc2NhbGVSYXRpb1k7CiAgICAgICAgcmVzdWx0WzVdID0gbWF0cml4WzVdICogc2NhbGVSYXRpb1k7CiAgICAgICAgcmVzdWx0WzZdID0gbWF0cml4WzZdICogc2NhbGVSYXRpb1k7CiAgICAgICAgcmVzdWx0WzddID0gbWF0cml4WzddOwogICAgICAgIHJlc3VsdFs4XSA9IG1hdHJpeFs4XSAqIHNjYWxlUmF0aW9aOwogICAgICAgIHJlc3VsdFs5XSA9IG1hdHJpeFs5XSAqIHNjYWxlUmF0aW9aOwogICAgICAgIHJlc3VsdFsxMF0gPSBtYXRyaXhbMTBdICogc2NhbGVSYXRpb1o7CiAgICAgICAgcmVzdWx0WzExXSA9IG1hdHJpeFsxMV07CiAgICAgICAgcmVzdWx0WzEyXSA9IG1hdHJpeFsxMl07CiAgICAgICAgcmVzdWx0WzEzXSA9IG1hdHJpeFsxM107CiAgICAgICAgcmVzdWx0WzE0XSA9IG1hdHJpeFsxNF07CiAgICAgICAgcmVzdWx0WzE1XSA9IG1hdHJpeFsxNV07CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgc2NyYXRjaENvbHVtbjIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIE1hdHJpeDQuZ2V0U2NhbGUgPSBmdW5jdGlvbihtYXRyaXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0LnggPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlKAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmZyb21FbGVtZW50cyhtYXRyaXhbMF0sIG1hdHJpeFsxXSwgbWF0cml4WzJdLCBzY3JhdGNoQ29sdW1uMikKICAgICAgICApOwogICAgICAgIHJlc3VsdC55ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZSgKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tRWxlbWVudHMobWF0cml4WzRdLCBtYXRyaXhbNV0sIG1hdHJpeFs2XSwgc2NyYXRjaENvbHVtbjIpCiAgICAgICAgKTsKICAgICAgICByZXN1bHQueiA9IENhcnRlc2lhbjNfZGVmYXVsdC5tYWduaXR1ZGUoCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUVsZW1lbnRzKG1hdHJpeFs4XSwgbWF0cml4WzldLCBtYXRyaXhbMTBdLCBzY3JhdGNoQ29sdW1uMikKICAgICAgICApOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIHNjYWxlU2NyYXRjaDMyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBNYXRyaXg0LmdldE1heGltdW1TY2FsZSA9IGZ1bmN0aW9uKG1hdHJpeCkgewogICAgICAgIE1hdHJpeDQuZ2V0U2NhbGUobWF0cml4LCBzY2FsZVNjcmF0Y2gzMik7CiAgICAgICAgcmV0dXJuIENhcnRlc2lhbjNfZGVmYXVsdC5tYXhpbXVtQ29tcG9uZW50KHNjYWxlU2NyYXRjaDMyKTsKICAgICAgfTsKICAgICAgc2NhbGVTY3JhdGNoNDIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIE1hdHJpeDQuc2V0Um90YXRpb24gPSBmdW5jdGlvbihtYXRyaXgsIHJvdGF0aW9uLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGNvbnN0IHNjYWxlID0gTWF0cml4NC5nZXRTY2FsZShtYXRyaXgsIHNjYWxlU2NyYXRjaDQyKTsKICAgICAgICByZXN1bHRbMF0gPSByb3RhdGlvblswXSAqIHNjYWxlLng7CiAgICAgICAgcmVzdWx0WzFdID0gcm90YXRpb25bMV0gKiBzY2FsZS54OwogICAgICAgIHJlc3VsdFsyXSA9IHJvdGF0aW9uWzJdICogc2NhbGUueDsKICAgICAgICByZXN1bHRbM10gPSBtYXRyaXhbM107CiAgICAgICAgcmVzdWx0WzRdID0gcm90YXRpb25bM10gKiBzY2FsZS55OwogICAgICAgIHJlc3VsdFs1XSA9IHJvdGF0aW9uWzRdICogc2NhbGUueTsKICAgICAgICByZXN1bHRbNl0gPSByb3RhdGlvbls1XSAqIHNjYWxlLnk7CiAgICAgICAgcmVzdWx0WzddID0gbWF0cml4WzddOwogICAgICAgIHJlc3VsdFs4XSA9IHJvdGF0aW9uWzZdICogc2NhbGUuejsKICAgICAgICByZXN1bHRbOV0gPSByb3RhdGlvbls3XSAqIHNjYWxlLno7CiAgICAgICAgcmVzdWx0WzEwXSA9IHJvdGF0aW9uWzhdICogc2NhbGUuejsKICAgICAgICByZXN1bHRbMTFdID0gbWF0cml4WzExXTsKICAgICAgICByZXN1bHRbMTJdID0gbWF0cml4WzEyXTsKICAgICAgICByZXN1bHRbMTNdID0gbWF0cml4WzEzXTsKICAgICAgICByZXN1bHRbMTRdID0gbWF0cml4WzE0XTsKICAgICAgICByZXN1bHRbMTVdID0gbWF0cml4WzE1XTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBzY2FsZVNjcmF0Y2g1MiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgTWF0cml4NC5nZXRSb3RhdGlvbiA9IGZ1bmN0aW9uKG1hdHJpeCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXRyaXgiLCBtYXRyaXgpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCBzY2FsZSA9IE1hdHJpeDQuZ2V0U2NhbGUobWF0cml4LCBzY2FsZVNjcmF0Y2g1Mik7CiAgICAgICAgcmVzdWx0WzBdID0gbWF0cml4WzBdIC8gc2NhbGUueDsKICAgICAgICByZXN1bHRbMV0gPSBtYXRyaXhbMV0gLyBzY2FsZS54OwogICAgICAgIHJlc3VsdFsyXSA9IG1hdHJpeFsyXSAvIHNjYWxlLng7CiAgICAgICAgcmVzdWx0WzNdID0gbWF0cml4WzRdIC8gc2NhbGUueTsKICAgICAgICByZXN1bHRbNF0gPSBtYXRyaXhbNV0gLyBzY2FsZS55OwogICAgICAgIHJlc3VsdFs1XSA9IG1hdHJpeFs2XSAvIHNjYWxlLnk7CiAgICAgICAgcmVzdWx0WzZdID0gbWF0cml4WzhdIC8gc2NhbGUuejsKICAgICAgICByZXN1bHRbN10gPSBtYXRyaXhbOV0gLyBzY2FsZS56OwogICAgICAgIHJlc3VsdFs4XSA9IG1hdHJpeFsxMF0gLyBzY2FsZS56OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDQubXVsdGlwbHkgPSBmdW5jdGlvbihsZWZ0LCByaWdodCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJsZWZ0IiwgbGVmdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyaWdodCIsIHJpZ2h0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgY29uc3QgbGVmdDAgPSBsZWZ0WzBdOwogICAgICAgIGNvbnN0IGxlZnQxID0gbGVmdFsxXTsKICAgICAgICBjb25zdCBsZWZ0MiA9IGxlZnRbMl07CiAgICAgICAgY29uc3QgbGVmdDMgPSBsZWZ0WzNdOwogICAgICAgIGNvbnN0IGxlZnQ0ID0gbGVmdFs0XTsKICAgICAgICBjb25zdCBsZWZ0NSA9IGxlZnRbNV07CiAgICAgICAgY29uc3QgbGVmdDYgPSBsZWZ0WzZdOwogICAgICAgIGNvbnN0IGxlZnQ3ID0gbGVmdFs3XTsKICAgICAgICBjb25zdCBsZWZ0OCA9IGxlZnRbOF07CiAgICAgICAgY29uc3QgbGVmdDkgPSBsZWZ0WzldOwogICAgICAgIGNvbnN0IGxlZnQxMCA9IGxlZnRbMTBdOwogICAgICAgIGNvbnN0IGxlZnQxMSA9IGxlZnRbMTFdOwogICAgICAgIGNvbnN0IGxlZnQxMiA9IGxlZnRbMTJdOwogICAgICAgIGNvbnN0IGxlZnQxMyA9IGxlZnRbMTNdOwogICAgICAgIGNvbnN0IGxlZnQxNCA9IGxlZnRbMTRdOwogICAgICAgIGNvbnN0IGxlZnQxNSA9IGxlZnRbMTVdOwogICAgICAgIGNvbnN0IHJpZ2h0MCA9IHJpZ2h0WzBdOwogICAgICAgIGNvbnN0IHJpZ2h0MSA9IHJpZ2h0WzFdOwogICAgICAgIGNvbnN0IHJpZ2h0MiA9IHJpZ2h0WzJdOwogICAgICAgIGNvbnN0IHJpZ2h0MyA9IHJpZ2h0WzNdOwogICAgICAgIGNvbnN0IHJpZ2h0NCA9IHJpZ2h0WzRdOwogICAgICAgIGNvbnN0IHJpZ2h0NSA9IHJpZ2h0WzVdOwogICAgICAgIGNvbnN0IHJpZ2h0NiA9IHJpZ2h0WzZdOwogICAgICAgIGNvbnN0IHJpZ2h0NyA9IHJpZ2h0WzddOwogICAgICAgIGNvbnN0IHJpZ2h0OCA9IHJpZ2h0WzhdOwogICAgICAgIGNvbnN0IHJpZ2h0OSA9IHJpZ2h0WzldOwogICAgICAgIGNvbnN0IHJpZ2h0MTAgPSByaWdodFsxMF07CiAgICAgICAgY29uc3QgcmlnaHQxMSA9IHJpZ2h0WzExXTsKICAgICAgICBjb25zdCByaWdodDEyID0gcmlnaHRbMTJdOwogICAgICAgIGNvbnN0IHJpZ2h0MTMgPSByaWdodFsxM107CiAgICAgICAgY29uc3QgcmlnaHQxNCA9IHJpZ2h0WzE0XTsKICAgICAgICBjb25zdCByaWdodDE1ID0gcmlnaHRbMTVdOwogICAgICAgIGNvbnN0IGNvbHVtbjBSb3cwID0gbGVmdDAgKiByaWdodDAgKyBsZWZ0NCAqIHJpZ2h0MSArIGxlZnQ4ICogcmlnaHQyICsgbGVmdDEyICogcmlnaHQzOwogICAgICAgIGNvbnN0IGNvbHVtbjBSb3cxID0gbGVmdDEgKiByaWdodDAgKyBsZWZ0NSAqIHJpZ2h0MSArIGxlZnQ5ICogcmlnaHQyICsgbGVmdDEzICogcmlnaHQzOwogICAgICAgIGNvbnN0IGNvbHVtbjBSb3cyID0gbGVmdDIgKiByaWdodDAgKyBsZWZ0NiAqIHJpZ2h0MSArIGxlZnQxMCAqIHJpZ2h0MiArIGxlZnQxNCAqIHJpZ2h0MzsKICAgICAgICBjb25zdCBjb2x1bW4wUm93MyA9IGxlZnQzICogcmlnaHQwICsgbGVmdDcgKiByaWdodDEgKyBsZWZ0MTEgKiByaWdodDIgKyBsZWZ0MTUgKiByaWdodDM7CiAgICAgICAgY29uc3QgY29sdW1uMVJvdzAgPSBsZWZ0MCAqIHJpZ2h0NCArIGxlZnQ0ICogcmlnaHQ1ICsgbGVmdDggKiByaWdodDYgKyBsZWZ0MTIgKiByaWdodDc7CiAgICAgICAgY29uc3QgY29sdW1uMVJvdzEgPSBsZWZ0MSAqIHJpZ2h0NCArIGxlZnQ1ICogcmlnaHQ1ICsgbGVmdDkgKiByaWdodDYgKyBsZWZ0MTMgKiByaWdodDc7CiAgICAgICAgY29uc3QgY29sdW1uMVJvdzIgPSBsZWZ0MiAqIHJpZ2h0NCArIGxlZnQ2ICogcmlnaHQ1ICsgbGVmdDEwICogcmlnaHQ2ICsgbGVmdDE0ICogcmlnaHQ3OwogICAgICAgIGNvbnN0IGNvbHVtbjFSb3czID0gbGVmdDMgKiByaWdodDQgKyBsZWZ0NyAqIHJpZ2h0NSArIGxlZnQxMSAqIHJpZ2h0NiArIGxlZnQxNSAqIHJpZ2h0NzsKICAgICAgICBjb25zdCBjb2x1bW4yUm93MCA9IGxlZnQwICogcmlnaHQ4ICsgbGVmdDQgKiByaWdodDkgKyBsZWZ0OCAqIHJpZ2h0MTAgKyBsZWZ0MTIgKiByaWdodDExOwogICAgICAgIGNvbnN0IGNvbHVtbjJSb3cxID0gbGVmdDEgKiByaWdodDggKyBsZWZ0NSAqIHJpZ2h0OSArIGxlZnQ5ICogcmlnaHQxMCArIGxlZnQxMyAqIHJpZ2h0MTE7CiAgICAgICAgY29uc3QgY29sdW1uMlJvdzIgPSBsZWZ0MiAqIHJpZ2h0OCArIGxlZnQ2ICogcmlnaHQ5ICsgbGVmdDEwICogcmlnaHQxMCArIGxlZnQxNCAqIHJpZ2h0MTE7CiAgICAgICAgY29uc3QgY29sdW1uMlJvdzMgPSBsZWZ0MyAqIHJpZ2h0OCArIGxlZnQ3ICogcmlnaHQ5ICsgbGVmdDExICogcmlnaHQxMCArIGxlZnQxNSAqIHJpZ2h0MTE7CiAgICAgICAgY29uc3QgY29sdW1uM1JvdzAgPSBsZWZ0MCAqIHJpZ2h0MTIgKyBsZWZ0NCAqIHJpZ2h0MTMgKyBsZWZ0OCAqIHJpZ2h0MTQgKyBsZWZ0MTIgKiByaWdodDE1OwogICAgICAgIGNvbnN0IGNvbHVtbjNSb3cxID0gbGVmdDEgKiByaWdodDEyICsgbGVmdDUgKiByaWdodDEzICsgbGVmdDkgKiByaWdodDE0ICsgbGVmdDEzICogcmlnaHQxNTsKICAgICAgICBjb25zdCBjb2x1bW4zUm93MiA9IGxlZnQyICogcmlnaHQxMiArIGxlZnQ2ICogcmlnaHQxMyArIGxlZnQxMCAqIHJpZ2h0MTQgKyBsZWZ0MTQgKiByaWdodDE1OwogICAgICAgIGNvbnN0IGNvbHVtbjNSb3czID0gbGVmdDMgKiByaWdodDEyICsgbGVmdDcgKiByaWdodDEzICsgbGVmdDExICogcmlnaHQxNCArIGxlZnQxNSAqIHJpZ2h0MTU7CiAgICAgICAgcmVzdWx0WzBdID0gY29sdW1uMFJvdzA7CiAgICAgICAgcmVzdWx0WzFdID0gY29sdW1uMFJvdzE7CiAgICAgICAgcmVzdWx0WzJdID0gY29sdW1uMFJvdzI7CiAgICAgICAgcmVzdWx0WzNdID0gY29sdW1uMFJvdzM7CiAgICAgICAgcmVzdWx0WzRdID0gY29sdW1uMVJvdzA7CiAgICAgICAgcmVzdWx0WzVdID0gY29sdW1uMVJvdzE7CiAgICAgICAgcmVzdWx0WzZdID0gY29sdW1uMVJvdzI7CiAgICAgICAgcmVzdWx0WzddID0gY29sdW1uMVJvdzM7CiAgICAgICAgcmVzdWx0WzhdID0gY29sdW1uMlJvdzA7CiAgICAgICAgcmVzdWx0WzldID0gY29sdW1uMlJvdzE7CiAgICAgICAgcmVzdWx0WzEwXSA9IGNvbHVtbjJSb3cyOwogICAgICAgIHJlc3VsdFsxMV0gPSBjb2x1bW4yUm93MzsKICAgICAgICByZXN1bHRbMTJdID0gY29sdW1uM1JvdzA7CiAgICAgICAgcmVzdWx0WzEzXSA9IGNvbHVtbjNSb3cxOwogICAgICAgIHJlc3VsdFsxNF0gPSBjb2x1bW4zUm93MjsKICAgICAgICByZXN1bHRbMTVdID0gY29sdW1uM1JvdzM7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4NC5hZGQgPSBmdW5jdGlvbihsZWZ0LCByaWdodCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJsZWZ0IiwgbGVmdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyaWdodCIsIHJpZ2h0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0WzBdID0gbGVmdFswXSArIHJpZ2h0WzBdOwogICAgICAgIHJlc3VsdFsxXSA9IGxlZnRbMV0gKyByaWdodFsxXTsKICAgICAgICByZXN1bHRbMl0gPSBsZWZ0WzJdICsgcmlnaHRbMl07CiAgICAgICAgcmVzdWx0WzNdID0gbGVmdFszXSArIHJpZ2h0WzNdOwogICAgICAgIHJlc3VsdFs0XSA9IGxlZnRbNF0gKyByaWdodFs0XTsKICAgICAgICByZXN1bHRbNV0gPSBsZWZ0WzVdICsgcmlnaHRbNV07CiAgICAgICAgcmVzdWx0WzZdID0gbGVmdFs2XSArIHJpZ2h0WzZdOwogICAgICAgIHJlc3VsdFs3XSA9IGxlZnRbN10gKyByaWdodFs3XTsKICAgICAgICByZXN1bHRbOF0gPSBsZWZ0WzhdICsgcmlnaHRbOF07CiAgICAgICAgcmVzdWx0WzldID0gbGVmdFs5XSArIHJpZ2h0WzldOwogICAgICAgIHJlc3VsdFsxMF0gPSBsZWZ0WzEwXSArIHJpZ2h0WzEwXTsKICAgICAgICByZXN1bHRbMTFdID0gbGVmdFsxMV0gKyByaWdodFsxMV07CiAgICAgICAgcmVzdWx0WzEyXSA9IGxlZnRbMTJdICsgcmlnaHRbMTJdOwogICAgICAgIHJlc3VsdFsxM10gPSBsZWZ0WzEzXSArIHJpZ2h0WzEzXTsKICAgICAgICByZXN1bHRbMTRdID0gbGVmdFsxNF0gKyByaWdodFsxNF07CiAgICAgICAgcmVzdWx0WzE1XSA9IGxlZnRbMTVdICsgcmlnaHRbMTVdOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDQuc3VidHJhY3QgPSBmdW5jdGlvbihsZWZ0LCByaWdodCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJsZWZ0IiwgbGVmdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyaWdodCIsIHJpZ2h0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0WzBdID0gbGVmdFswXSAtIHJpZ2h0WzBdOwogICAgICAgIHJlc3VsdFsxXSA9IGxlZnRbMV0gLSByaWdodFsxXTsKICAgICAgICByZXN1bHRbMl0gPSBsZWZ0WzJdIC0gcmlnaHRbMl07CiAgICAgICAgcmVzdWx0WzNdID0gbGVmdFszXSAtIHJpZ2h0WzNdOwogICAgICAgIHJlc3VsdFs0XSA9IGxlZnRbNF0gLSByaWdodFs0XTsKICAgICAgICByZXN1bHRbNV0gPSBsZWZ0WzVdIC0gcmlnaHRbNV07CiAgICAgICAgcmVzdWx0WzZdID0gbGVmdFs2XSAtIHJpZ2h0WzZdOwogICAgICAgIHJlc3VsdFs3XSA9IGxlZnRbN10gLSByaWdodFs3XTsKICAgICAgICByZXN1bHRbOF0gPSBsZWZ0WzhdIC0gcmlnaHRbOF07CiAgICAgICAgcmVzdWx0WzldID0gbGVmdFs5XSAtIHJpZ2h0WzldOwogICAgICAgIHJlc3VsdFsxMF0gPSBsZWZ0WzEwXSAtIHJpZ2h0WzEwXTsKICAgICAgICByZXN1bHRbMTFdID0gbGVmdFsxMV0gLSByaWdodFsxMV07CiAgICAgICAgcmVzdWx0WzEyXSA9IGxlZnRbMTJdIC0gcmlnaHRbMTJdOwogICAgICAgIHJlc3VsdFsxM10gPSBsZWZ0WzEzXSAtIHJpZ2h0WzEzXTsKICAgICAgICByZXN1bHRbMTRdID0gbGVmdFsxNF0gLSByaWdodFsxNF07CiAgICAgICAgcmVzdWx0WzE1XSA9IGxlZnRbMTVdIC0gcmlnaHRbMTVdOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDQubXVsdGlwbHlUcmFuc2Zvcm1hdGlvbiA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImxlZnQiLCBsZWZ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJpZ2h0IiwgcmlnaHQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCBsZWZ0MCA9IGxlZnRbMF07CiAgICAgICAgY29uc3QgbGVmdDEgPSBsZWZ0WzFdOwogICAgICAgIGNvbnN0IGxlZnQyID0gbGVmdFsyXTsKICAgICAgICBjb25zdCBsZWZ0NCA9IGxlZnRbNF07CiAgICAgICAgY29uc3QgbGVmdDUgPSBsZWZ0WzVdOwogICAgICAgIGNvbnN0IGxlZnQ2ID0gbGVmdFs2XTsKICAgICAgICBjb25zdCBsZWZ0OCA9IGxlZnRbOF07CiAgICAgICAgY29uc3QgbGVmdDkgPSBsZWZ0WzldOwogICAgICAgIGNvbnN0IGxlZnQxMCA9IGxlZnRbMTBdOwogICAgICAgIGNvbnN0IGxlZnQxMiA9IGxlZnRbMTJdOwogICAgICAgIGNvbnN0IGxlZnQxMyA9IGxlZnRbMTNdOwogICAgICAgIGNvbnN0IGxlZnQxNCA9IGxlZnRbMTRdOwogICAgICAgIGNvbnN0IHJpZ2h0MCA9IHJpZ2h0WzBdOwogICAgICAgIGNvbnN0IHJpZ2h0MSA9IHJpZ2h0WzFdOwogICAgICAgIGNvbnN0IHJpZ2h0MiA9IHJpZ2h0WzJdOwogICAgICAgIGNvbnN0IHJpZ2h0NCA9IHJpZ2h0WzRdOwogICAgICAgIGNvbnN0IHJpZ2h0NSA9IHJpZ2h0WzVdOwogICAgICAgIGNvbnN0IHJpZ2h0NiA9IHJpZ2h0WzZdOwogICAgICAgIGNvbnN0IHJpZ2h0OCA9IHJpZ2h0WzhdOwogICAgICAgIGNvbnN0IHJpZ2h0OSA9IHJpZ2h0WzldOwogICAgICAgIGNvbnN0IHJpZ2h0MTAgPSByaWdodFsxMF07CiAgICAgICAgY29uc3QgcmlnaHQxMiA9IHJpZ2h0WzEyXTsKICAgICAgICBjb25zdCByaWdodDEzID0gcmlnaHRbMTNdOwogICAgICAgIGNvbnN0IHJpZ2h0MTQgPSByaWdodFsxNF07CiAgICAgICAgY29uc3QgY29sdW1uMFJvdzAgPSBsZWZ0MCAqIHJpZ2h0MCArIGxlZnQ0ICogcmlnaHQxICsgbGVmdDggKiByaWdodDI7CiAgICAgICAgY29uc3QgY29sdW1uMFJvdzEgPSBsZWZ0MSAqIHJpZ2h0MCArIGxlZnQ1ICogcmlnaHQxICsgbGVmdDkgKiByaWdodDI7CiAgICAgICAgY29uc3QgY29sdW1uMFJvdzIgPSBsZWZ0MiAqIHJpZ2h0MCArIGxlZnQ2ICogcmlnaHQxICsgbGVmdDEwICogcmlnaHQyOwogICAgICAgIGNvbnN0IGNvbHVtbjFSb3cwID0gbGVmdDAgKiByaWdodDQgKyBsZWZ0NCAqIHJpZ2h0NSArIGxlZnQ4ICogcmlnaHQ2OwogICAgICAgIGNvbnN0IGNvbHVtbjFSb3cxID0gbGVmdDEgKiByaWdodDQgKyBsZWZ0NSAqIHJpZ2h0NSArIGxlZnQ5ICogcmlnaHQ2OwogICAgICAgIGNvbnN0IGNvbHVtbjFSb3cyID0gbGVmdDIgKiByaWdodDQgKyBsZWZ0NiAqIHJpZ2h0NSArIGxlZnQxMCAqIHJpZ2h0NjsKICAgICAgICBjb25zdCBjb2x1bW4yUm93MCA9IGxlZnQwICogcmlnaHQ4ICsgbGVmdDQgKiByaWdodDkgKyBsZWZ0OCAqIHJpZ2h0MTA7CiAgICAgICAgY29uc3QgY29sdW1uMlJvdzEgPSBsZWZ0MSAqIHJpZ2h0OCArIGxlZnQ1ICogcmlnaHQ5ICsgbGVmdDkgKiByaWdodDEwOwogICAgICAgIGNvbnN0IGNvbHVtbjJSb3cyID0gbGVmdDIgKiByaWdodDggKyBsZWZ0NiAqIHJpZ2h0OSArIGxlZnQxMCAqIHJpZ2h0MTA7CiAgICAgICAgY29uc3QgY29sdW1uM1JvdzAgPSBsZWZ0MCAqIHJpZ2h0MTIgKyBsZWZ0NCAqIHJpZ2h0MTMgKyBsZWZ0OCAqIHJpZ2h0MTQgKyBsZWZ0MTI7CiAgICAgICAgY29uc3QgY29sdW1uM1JvdzEgPSBsZWZ0MSAqIHJpZ2h0MTIgKyBsZWZ0NSAqIHJpZ2h0MTMgKyBsZWZ0OSAqIHJpZ2h0MTQgKyBsZWZ0MTM7CiAgICAgICAgY29uc3QgY29sdW1uM1JvdzIgPSBsZWZ0MiAqIHJpZ2h0MTIgKyBsZWZ0NiAqIHJpZ2h0MTMgKyBsZWZ0MTAgKiByaWdodDE0ICsgbGVmdDE0OwogICAgICAgIHJlc3VsdFswXSA9IGNvbHVtbjBSb3cwOwogICAgICAgIHJlc3VsdFsxXSA9IGNvbHVtbjBSb3cxOwogICAgICAgIHJlc3VsdFsyXSA9IGNvbHVtbjBSb3cyOwogICAgICAgIHJlc3VsdFszXSA9IDA7CiAgICAgICAgcmVzdWx0WzRdID0gY29sdW1uMVJvdzA7CiAgICAgICAgcmVzdWx0WzVdID0gY29sdW1uMVJvdzE7CiAgICAgICAgcmVzdWx0WzZdID0gY29sdW1uMVJvdzI7CiAgICAgICAgcmVzdWx0WzddID0gMDsKICAgICAgICByZXN1bHRbOF0gPSBjb2x1bW4yUm93MDsKICAgICAgICByZXN1bHRbOV0gPSBjb2x1bW4yUm93MTsKICAgICAgICByZXN1bHRbMTBdID0gY29sdW1uMlJvdzI7CiAgICAgICAgcmVzdWx0WzExXSA9IDA7CiAgICAgICAgcmVzdWx0WzEyXSA9IGNvbHVtbjNSb3cwOwogICAgICAgIHJlc3VsdFsxM10gPSBjb2x1bW4zUm93MTsKICAgICAgICByZXN1bHRbMTRdID0gY29sdW1uM1JvdzI7CiAgICAgICAgcmVzdWx0WzE1XSA9IDE7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4NC5tdWx0aXBseUJ5TWF0cml4MyA9IGZ1bmN0aW9uKG1hdHJpeCwgcm90YXRpb24sIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJvdGF0aW9uIiwgcm90YXRpb24pOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCBsZWZ0MCA9IG1hdHJpeFswXTsKICAgICAgICBjb25zdCBsZWZ0MSA9IG1hdHJpeFsxXTsKICAgICAgICBjb25zdCBsZWZ0MiA9IG1hdHJpeFsyXTsKICAgICAgICBjb25zdCBsZWZ0NCA9IG1hdHJpeFs0XTsKICAgICAgICBjb25zdCBsZWZ0NSA9IG1hdHJpeFs1XTsKICAgICAgICBjb25zdCBsZWZ0NiA9IG1hdHJpeFs2XTsKICAgICAgICBjb25zdCBsZWZ0OCA9IG1hdHJpeFs4XTsKICAgICAgICBjb25zdCBsZWZ0OSA9IG1hdHJpeFs5XTsKICAgICAgICBjb25zdCBsZWZ0MTAgPSBtYXRyaXhbMTBdOwogICAgICAgIGNvbnN0IHJpZ2h0MCA9IHJvdGF0aW9uWzBdOwogICAgICAgIGNvbnN0IHJpZ2h0MSA9IHJvdGF0aW9uWzFdOwogICAgICAgIGNvbnN0IHJpZ2h0MiA9IHJvdGF0aW9uWzJdOwogICAgICAgIGNvbnN0IHJpZ2h0NCA9IHJvdGF0aW9uWzNdOwogICAgICAgIGNvbnN0IHJpZ2h0NSA9IHJvdGF0aW9uWzRdOwogICAgICAgIGNvbnN0IHJpZ2h0NiA9IHJvdGF0aW9uWzVdOwogICAgICAgIGNvbnN0IHJpZ2h0OCA9IHJvdGF0aW9uWzZdOwogICAgICAgIGNvbnN0IHJpZ2h0OSA9IHJvdGF0aW9uWzddOwogICAgICAgIGNvbnN0IHJpZ2h0MTAgPSByb3RhdGlvbls4XTsKICAgICAgICBjb25zdCBjb2x1bW4wUm93MCA9IGxlZnQwICogcmlnaHQwICsgbGVmdDQgKiByaWdodDEgKyBsZWZ0OCAqIHJpZ2h0MjsKICAgICAgICBjb25zdCBjb2x1bW4wUm93MSA9IGxlZnQxICogcmlnaHQwICsgbGVmdDUgKiByaWdodDEgKyBsZWZ0OSAqIHJpZ2h0MjsKICAgICAgICBjb25zdCBjb2x1bW4wUm93MiA9IGxlZnQyICogcmlnaHQwICsgbGVmdDYgKiByaWdodDEgKyBsZWZ0MTAgKiByaWdodDI7CiAgICAgICAgY29uc3QgY29sdW1uMVJvdzAgPSBsZWZ0MCAqIHJpZ2h0NCArIGxlZnQ0ICogcmlnaHQ1ICsgbGVmdDggKiByaWdodDY7CiAgICAgICAgY29uc3QgY29sdW1uMVJvdzEgPSBsZWZ0MSAqIHJpZ2h0NCArIGxlZnQ1ICogcmlnaHQ1ICsgbGVmdDkgKiByaWdodDY7CiAgICAgICAgY29uc3QgY29sdW1uMVJvdzIgPSBsZWZ0MiAqIHJpZ2h0NCArIGxlZnQ2ICogcmlnaHQ1ICsgbGVmdDEwICogcmlnaHQ2OwogICAgICAgIGNvbnN0IGNvbHVtbjJSb3cwID0gbGVmdDAgKiByaWdodDggKyBsZWZ0NCAqIHJpZ2h0OSArIGxlZnQ4ICogcmlnaHQxMDsKICAgICAgICBjb25zdCBjb2x1bW4yUm93MSA9IGxlZnQxICogcmlnaHQ4ICsgbGVmdDUgKiByaWdodDkgKyBsZWZ0OSAqIHJpZ2h0MTA7CiAgICAgICAgY29uc3QgY29sdW1uMlJvdzIgPSBsZWZ0MiAqIHJpZ2h0OCArIGxlZnQ2ICogcmlnaHQ5ICsgbGVmdDEwICogcmlnaHQxMDsKICAgICAgICByZXN1bHRbMF0gPSBjb2x1bW4wUm93MDsKICAgICAgICByZXN1bHRbMV0gPSBjb2x1bW4wUm93MTsKICAgICAgICByZXN1bHRbMl0gPSBjb2x1bW4wUm93MjsKICAgICAgICByZXN1bHRbM10gPSAwOwogICAgICAgIHJlc3VsdFs0XSA9IGNvbHVtbjFSb3cwOwogICAgICAgIHJlc3VsdFs1XSA9IGNvbHVtbjFSb3cxOwogICAgICAgIHJlc3VsdFs2XSA9IGNvbHVtbjFSb3cyOwogICAgICAgIHJlc3VsdFs3XSA9IDA7CiAgICAgICAgcmVzdWx0WzhdID0gY29sdW1uMlJvdzA7CiAgICAgICAgcmVzdWx0WzldID0gY29sdW1uMlJvdzE7CiAgICAgICAgcmVzdWx0WzEwXSA9IGNvbHVtbjJSb3cyOwogICAgICAgIHJlc3VsdFsxMV0gPSAwOwogICAgICAgIHJlc3VsdFsxMl0gPSBtYXRyaXhbMTJdOwogICAgICAgIHJlc3VsdFsxM10gPSBtYXRyaXhbMTNdOwogICAgICAgIHJlc3VsdFsxNF0gPSBtYXRyaXhbMTRdOwogICAgICAgIHJlc3VsdFsxNV0gPSBtYXRyaXhbMTVdOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDQubXVsdGlwbHlCeVRyYW5zbGF0aW9uID0gZnVuY3Rpb24obWF0cml4LCB0cmFuc2xhdGlvbjIsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInRyYW5zbGF0aW9uIiwgdHJhbnNsYXRpb24yKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgY29uc3QgeCA9IHRyYW5zbGF0aW9uMi54OwogICAgICAgIGNvbnN0IHkgPSB0cmFuc2xhdGlvbjIueTsKICAgICAgICBjb25zdCB6ID0gdHJhbnNsYXRpb24yLno7CiAgICAgICAgY29uc3QgdHggPSB4ICogbWF0cml4WzBdICsgeSAqIG1hdHJpeFs0XSArIHogKiBtYXRyaXhbOF0gKyBtYXRyaXhbMTJdOwogICAgICAgIGNvbnN0IHR5ID0geCAqIG1hdHJpeFsxXSArIHkgKiBtYXRyaXhbNV0gKyB6ICogbWF0cml4WzldICsgbWF0cml4WzEzXTsKICAgICAgICBjb25zdCB0eiA9IHggKiBtYXRyaXhbMl0gKyB5ICogbWF0cml4WzZdICsgeiAqIG1hdHJpeFsxMF0gKyBtYXRyaXhbMTRdOwogICAgICAgIHJlc3VsdFswXSA9IG1hdHJpeFswXTsKICAgICAgICByZXN1bHRbMV0gPSBtYXRyaXhbMV07CiAgICAgICAgcmVzdWx0WzJdID0gbWF0cml4WzJdOwogICAgICAgIHJlc3VsdFszXSA9IG1hdHJpeFszXTsKICAgICAgICByZXN1bHRbNF0gPSBtYXRyaXhbNF07CiAgICAgICAgcmVzdWx0WzVdID0gbWF0cml4WzVdOwogICAgICAgIHJlc3VsdFs2XSA9IG1hdHJpeFs2XTsKICAgICAgICByZXN1bHRbN10gPSBtYXRyaXhbN107CiAgICAgICAgcmVzdWx0WzhdID0gbWF0cml4WzhdOwogICAgICAgIHJlc3VsdFs5XSA9IG1hdHJpeFs5XTsKICAgICAgICByZXN1bHRbMTBdID0gbWF0cml4WzEwXTsKICAgICAgICByZXN1bHRbMTFdID0gbWF0cml4WzExXTsKICAgICAgICByZXN1bHRbMTJdID0gdHg7CiAgICAgICAgcmVzdWx0WzEzXSA9IHR5OwogICAgICAgIHJlc3VsdFsxNF0gPSB0ejsKICAgICAgICByZXN1bHRbMTVdID0gbWF0cml4WzE1XTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXg0Lm11bHRpcGx5QnlTY2FsZSA9IGZ1bmN0aW9uKG1hdHJpeCwgc2NhbGUsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInNjYWxlIiwgc2NhbGUpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCBzY2FsZVggPSBzY2FsZS54OwogICAgICAgIGNvbnN0IHNjYWxlWSA9IHNjYWxlLnk7CiAgICAgICAgY29uc3Qgc2NhbGVaID0gc2NhbGUuejsKICAgICAgICBpZiAoc2NhbGVYID09PSAxICYmIHNjYWxlWSA9PT0gMSAmJiBzY2FsZVogPT09IDEpIHsKICAgICAgICAgIHJldHVybiBNYXRyaXg0LmNsb25lKG1hdHJpeCwgcmVzdWx0KTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0WzBdID0gc2NhbGVYICogbWF0cml4WzBdOwogICAgICAgIHJlc3VsdFsxXSA9IHNjYWxlWCAqIG1hdHJpeFsxXTsKICAgICAgICByZXN1bHRbMl0gPSBzY2FsZVggKiBtYXRyaXhbMl07CiAgICAgICAgcmVzdWx0WzNdID0gbWF0cml4WzNdOwogICAgICAgIHJlc3VsdFs0XSA9IHNjYWxlWSAqIG1hdHJpeFs0XTsKICAgICAgICByZXN1bHRbNV0gPSBzY2FsZVkgKiBtYXRyaXhbNV07CiAgICAgICAgcmVzdWx0WzZdID0gc2NhbGVZICogbWF0cml4WzZdOwogICAgICAgIHJlc3VsdFs3XSA9IG1hdHJpeFs3XTsKICAgICAgICByZXN1bHRbOF0gPSBzY2FsZVogKiBtYXRyaXhbOF07CiAgICAgICAgcmVzdWx0WzldID0gc2NhbGVaICogbWF0cml4WzldOwogICAgICAgIHJlc3VsdFsxMF0gPSBzY2FsZVogKiBtYXRyaXhbMTBdOwogICAgICAgIHJlc3VsdFsxMV0gPSBtYXRyaXhbMTFdOwogICAgICAgIHJlc3VsdFsxMl0gPSBtYXRyaXhbMTJdOwogICAgICAgIHJlc3VsdFsxM10gPSBtYXRyaXhbMTNdOwogICAgICAgIHJlc3VsdFsxNF0gPSBtYXRyaXhbMTRdOwogICAgICAgIHJlc3VsdFsxNV0gPSBtYXRyaXhbMTVdOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDQubXVsdGlwbHlCeVVuaWZvcm1TY2FsZSA9IGZ1bmN0aW9uKG1hdHJpeCwgc2NhbGUsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoInNjYWxlIiwgc2NhbGUpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHRbMF0gPSBtYXRyaXhbMF0gKiBzY2FsZTsKICAgICAgICByZXN1bHRbMV0gPSBtYXRyaXhbMV0gKiBzY2FsZTsKICAgICAgICByZXN1bHRbMl0gPSBtYXRyaXhbMl0gKiBzY2FsZTsKICAgICAgICByZXN1bHRbM10gPSBtYXRyaXhbM107CiAgICAgICAgcmVzdWx0WzRdID0gbWF0cml4WzRdICogc2NhbGU7CiAgICAgICAgcmVzdWx0WzVdID0gbWF0cml4WzVdICogc2NhbGU7CiAgICAgICAgcmVzdWx0WzZdID0gbWF0cml4WzZdICogc2NhbGU7CiAgICAgICAgcmVzdWx0WzddID0gbWF0cml4WzddOwogICAgICAgIHJlc3VsdFs4XSA9IG1hdHJpeFs4XSAqIHNjYWxlOwogICAgICAgIHJlc3VsdFs5XSA9IG1hdHJpeFs5XSAqIHNjYWxlOwogICAgICAgIHJlc3VsdFsxMF0gPSBtYXRyaXhbMTBdICogc2NhbGU7CiAgICAgICAgcmVzdWx0WzExXSA9IG1hdHJpeFsxMV07CiAgICAgICAgcmVzdWx0WzEyXSA9IG1hdHJpeFsxMl07CiAgICAgICAgcmVzdWx0WzEzXSA9IG1hdHJpeFsxM107CiAgICAgICAgcmVzdWx0WzE0XSA9IG1hdHJpeFsxNF07CiAgICAgICAgcmVzdWx0WzE1XSA9IG1hdHJpeFsxNV07CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4NC5tdWx0aXBseUJ5VmVjdG9yID0gZnVuY3Rpb24obWF0cml4LCBjYXJ0ZXNpYW4xMSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXRyaXgiLCBtYXRyaXgpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiY2FydGVzaWFuIiwgY2FydGVzaWFuMTEpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCB2WCA9IGNhcnRlc2lhbjExLng7CiAgICAgICAgY29uc3QgdlkgPSBjYXJ0ZXNpYW4xMS55OwogICAgICAgIGNvbnN0IHZaID0gY2FydGVzaWFuMTEuejsKICAgICAgICBjb25zdCB2VyA9IGNhcnRlc2lhbjExLnc7CiAgICAgICAgY29uc3QgeCA9IG1hdHJpeFswXSAqIHZYICsgbWF0cml4WzRdICogdlkgKyBtYXRyaXhbOF0gKiB2WiArIG1hdHJpeFsxMl0gKiB2VzsKICAgICAgICBjb25zdCB5ID0gbWF0cml4WzFdICogdlggKyBtYXRyaXhbNV0gKiB2WSArIG1hdHJpeFs5XSAqIHZaICsgbWF0cml4WzEzXSAqIHZXOwogICAgICAgIGNvbnN0IHogPSBtYXRyaXhbMl0gKiB2WCArIG1hdHJpeFs2XSAqIHZZICsgbWF0cml4WzEwXSAqIHZaICsgbWF0cml4WzE0XSAqIHZXOwogICAgICAgIGNvbnN0IHcgPSBtYXRyaXhbM10gKiB2WCArIG1hdHJpeFs3XSAqIHZZICsgbWF0cml4WzExXSAqIHZaICsgbWF0cml4WzE1XSAqIHZXOwogICAgICAgIHJlc3VsdC54ID0geDsKICAgICAgICByZXN1bHQueSA9IHk7CiAgICAgICAgcmVzdWx0LnogPSB6OwogICAgICAgIHJlc3VsdC53ID0gdzsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXg0Lm11bHRpcGx5QnlQb2ludEFzVmVjdG9yID0gZnVuY3Rpb24obWF0cml4LCBjYXJ0ZXNpYW4xMSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXRyaXgiLCBtYXRyaXgpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiY2FydGVzaWFuIiwgY2FydGVzaWFuMTEpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCB2WCA9IGNhcnRlc2lhbjExLng7CiAgICAgICAgY29uc3QgdlkgPSBjYXJ0ZXNpYW4xMS55OwogICAgICAgIGNvbnN0IHZaID0gY2FydGVzaWFuMTEuejsKICAgICAgICBjb25zdCB4ID0gbWF0cml4WzBdICogdlggKyBtYXRyaXhbNF0gKiB2WSArIG1hdHJpeFs4XSAqIHZaOwogICAgICAgIGNvbnN0IHkgPSBtYXRyaXhbMV0gKiB2WCArIG1hdHJpeFs1XSAqIHZZICsgbWF0cml4WzldICogdlo7CiAgICAgICAgY29uc3QgeiA9IG1hdHJpeFsyXSAqIHZYICsgbWF0cml4WzZdICogdlkgKyBtYXRyaXhbMTBdICogdlo7CiAgICAgICAgcmVzdWx0LnggPSB4OwogICAgICAgIHJlc3VsdC55ID0geTsKICAgICAgICByZXN1bHQueiA9IHo7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4NC5tdWx0aXBseUJ5UG9pbnQgPSBmdW5jdGlvbihtYXRyaXgsIGNhcnRlc2lhbjExLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjYXJ0ZXNpYW4iLCBjYXJ0ZXNpYW4xMSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGNvbnN0IHZYID0gY2FydGVzaWFuMTEueDsKICAgICAgICBjb25zdCB2WSA9IGNhcnRlc2lhbjExLnk7CiAgICAgICAgY29uc3QgdlogPSBjYXJ0ZXNpYW4xMS56OwogICAgICAgIGNvbnN0IHggPSBtYXRyaXhbMF0gKiB2WCArIG1hdHJpeFs0XSAqIHZZICsgbWF0cml4WzhdICogdlogKyBtYXRyaXhbMTJdOwogICAgICAgIGNvbnN0IHkgPSBtYXRyaXhbMV0gKiB2WCArIG1hdHJpeFs1XSAqIHZZICsgbWF0cml4WzldICogdlogKyBtYXRyaXhbMTNdOwogICAgICAgIGNvbnN0IHogPSBtYXRyaXhbMl0gKiB2WCArIG1hdHJpeFs2XSAqIHZZICsgbWF0cml4WzEwXSAqIHZaICsgbWF0cml4WzE0XTsKICAgICAgICByZXN1bHQueCA9IHg7CiAgICAgICAgcmVzdWx0LnkgPSB5OwogICAgICAgIHJlc3VsdC56ID0gejsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXg0Lm11bHRpcGx5QnlTY2FsYXIgPSBmdW5jdGlvbihtYXRyaXgsIHNjYWxhciwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXRyaXgiLCBtYXRyaXgpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigic2NhbGFyIiwgc2NhbGFyKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0WzBdID0gbWF0cml4WzBdICogc2NhbGFyOwogICAgICAgIHJlc3VsdFsxXSA9IG1hdHJpeFsxXSAqIHNjYWxhcjsKICAgICAgICByZXN1bHRbMl0gPSBtYXRyaXhbMl0gKiBzY2FsYXI7CiAgICAgICAgcmVzdWx0WzNdID0gbWF0cml4WzNdICogc2NhbGFyOwogICAgICAgIHJlc3VsdFs0XSA9IG1hdHJpeFs0XSAqIHNjYWxhcjsKICAgICAgICByZXN1bHRbNV0gPSBtYXRyaXhbNV0gKiBzY2FsYXI7CiAgICAgICAgcmVzdWx0WzZdID0gbWF0cml4WzZdICogc2NhbGFyOwogICAgICAgIHJlc3VsdFs3XSA9IG1hdHJpeFs3XSAqIHNjYWxhcjsKICAgICAgICByZXN1bHRbOF0gPSBtYXRyaXhbOF0gKiBzY2FsYXI7CiAgICAgICAgcmVzdWx0WzldID0gbWF0cml4WzldICogc2NhbGFyOwogICAgICAgIHJlc3VsdFsxMF0gPSBtYXRyaXhbMTBdICogc2NhbGFyOwogICAgICAgIHJlc3VsdFsxMV0gPSBtYXRyaXhbMTFdICogc2NhbGFyOwogICAgICAgIHJlc3VsdFsxMl0gPSBtYXRyaXhbMTJdICogc2NhbGFyOwogICAgICAgIHJlc3VsdFsxM10gPSBtYXRyaXhbMTNdICogc2NhbGFyOwogICAgICAgIHJlc3VsdFsxNF0gPSBtYXRyaXhbMTRdICogc2NhbGFyOwogICAgICAgIHJlc3VsdFsxNV0gPSBtYXRyaXhbMTVdICogc2NhbGFyOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDQubmVnYXRlID0gZnVuY3Rpb24obWF0cml4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdFswXSA9IC1tYXRyaXhbMF07CiAgICAgICAgcmVzdWx0WzFdID0gLW1hdHJpeFsxXTsKICAgICAgICByZXN1bHRbMl0gPSAtbWF0cml4WzJdOwogICAgICAgIHJlc3VsdFszXSA9IC1tYXRyaXhbM107CiAgICAgICAgcmVzdWx0WzRdID0gLW1hdHJpeFs0XTsKICAgICAgICByZXN1bHRbNV0gPSAtbWF0cml4WzVdOwogICAgICAgIHJlc3VsdFs2XSA9IC1tYXRyaXhbNl07CiAgICAgICAgcmVzdWx0WzddID0gLW1hdHJpeFs3XTsKICAgICAgICByZXN1bHRbOF0gPSAtbWF0cml4WzhdOwogICAgICAgIHJlc3VsdFs5XSA9IC1tYXRyaXhbOV07CiAgICAgICAgcmVzdWx0WzEwXSA9IC1tYXRyaXhbMTBdOwogICAgICAgIHJlc3VsdFsxMV0gPSAtbWF0cml4WzExXTsKICAgICAgICByZXN1bHRbMTJdID0gLW1hdHJpeFsxMl07CiAgICAgICAgcmVzdWx0WzEzXSA9IC1tYXRyaXhbMTNdOwogICAgICAgIHJlc3VsdFsxNF0gPSAtbWF0cml4WzE0XTsKICAgICAgICByZXN1bHRbMTVdID0gLW1hdHJpeFsxNV07CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4NC50cmFuc3Bvc2UgPSBmdW5jdGlvbihtYXRyaXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgY29uc3QgbWF0cml4MSA9IG1hdHJpeFsxXTsKICAgICAgICBjb25zdCBtYXRyaXgyID0gbWF0cml4WzJdOwogICAgICAgIGNvbnN0IG1hdHJpeDMgPSBtYXRyaXhbM107CiAgICAgICAgY29uc3QgbWF0cml4NiA9IG1hdHJpeFs2XTsKICAgICAgICBjb25zdCBtYXRyaXg3ID0gbWF0cml4WzddOwogICAgICAgIGNvbnN0IG1hdHJpeDExID0gbWF0cml4WzExXTsKICAgICAgICByZXN1bHRbMF0gPSBtYXRyaXhbMF07CiAgICAgICAgcmVzdWx0WzFdID0gbWF0cml4WzRdOwogICAgICAgIHJlc3VsdFsyXSA9IG1hdHJpeFs4XTsKICAgICAgICByZXN1bHRbM10gPSBtYXRyaXhbMTJdOwogICAgICAgIHJlc3VsdFs0XSA9IG1hdHJpeDE7CiAgICAgICAgcmVzdWx0WzVdID0gbWF0cml4WzVdOwogICAgICAgIHJlc3VsdFs2XSA9IG1hdHJpeFs5XTsKICAgICAgICByZXN1bHRbN10gPSBtYXRyaXhbMTNdOwogICAgICAgIHJlc3VsdFs4XSA9IG1hdHJpeDI7CiAgICAgICAgcmVzdWx0WzldID0gbWF0cml4NjsKICAgICAgICByZXN1bHRbMTBdID0gbWF0cml4WzEwXTsKICAgICAgICByZXN1bHRbMTFdID0gbWF0cml4WzE0XTsKICAgICAgICByZXN1bHRbMTJdID0gbWF0cml4MzsKICAgICAgICByZXN1bHRbMTNdID0gbWF0cml4NzsKICAgICAgICByZXN1bHRbMTRdID0gbWF0cml4MTE7CiAgICAgICAgcmVzdWx0WzE1XSA9IG1hdHJpeFsxNV07CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4NC5hYnMgPSBmdW5jdGlvbihtYXRyaXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0WzBdID0gTWF0aC5hYnMobWF0cml4WzBdKTsKICAgICAgICByZXN1bHRbMV0gPSBNYXRoLmFicyhtYXRyaXhbMV0pOwogICAgICAgIHJlc3VsdFsyXSA9IE1hdGguYWJzKG1hdHJpeFsyXSk7CiAgICAgICAgcmVzdWx0WzNdID0gTWF0aC5hYnMobWF0cml4WzNdKTsKICAgICAgICByZXN1bHRbNF0gPSBNYXRoLmFicyhtYXRyaXhbNF0pOwogICAgICAgIHJlc3VsdFs1XSA9IE1hdGguYWJzKG1hdHJpeFs1XSk7CiAgICAgICAgcmVzdWx0WzZdID0gTWF0aC5hYnMobWF0cml4WzZdKTsKICAgICAgICByZXN1bHRbN10gPSBNYXRoLmFicyhtYXRyaXhbN10pOwogICAgICAgIHJlc3VsdFs4XSA9IE1hdGguYWJzKG1hdHJpeFs4XSk7CiAgICAgICAgcmVzdWx0WzldID0gTWF0aC5hYnMobWF0cml4WzldKTsKICAgICAgICByZXN1bHRbMTBdID0gTWF0aC5hYnMobWF0cml4WzEwXSk7CiAgICAgICAgcmVzdWx0WzExXSA9IE1hdGguYWJzKG1hdHJpeFsxMV0pOwogICAgICAgIHJlc3VsdFsxMl0gPSBNYXRoLmFicyhtYXRyaXhbMTJdKTsKICAgICAgICByZXN1bHRbMTNdID0gTWF0aC5hYnMobWF0cml4WzEzXSk7CiAgICAgICAgcmVzdWx0WzE0XSA9IE1hdGguYWJzKG1hdHJpeFsxNF0pOwogICAgICAgIHJlc3VsdFsxNV0gPSBNYXRoLmFicyhtYXRyaXhbMTVdKTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXg0LmVxdWFscyA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7CiAgICAgICAgcmV0dXJuIGxlZnQgPT09IHJpZ2h0IHx8IGRlZmluZWRfZGVmYXVsdChsZWZ0KSAmJiBkZWZpbmVkX2RlZmF1bHQocmlnaHQpICYmIC8vIFRyYW5zbGF0aW9uCiAgICAgICAgbGVmdFsxMl0gPT09IHJpZ2h0WzEyXSAmJiBsZWZ0WzEzXSA9PT0gcmlnaHRbMTNdICYmIGxlZnRbMTRdID09PSByaWdodFsxNF0gJiYgLy8gUm90YXRpb24vc2NhbGUKICAgICAgICBsZWZ0WzBdID09PSByaWdodFswXSAmJiBsZWZ0WzFdID09PSByaWdodFsxXSAmJiBsZWZ0WzJdID09PSByaWdodFsyXSAmJiBsZWZ0WzRdID09PSByaWdodFs0XSAmJiBsZWZ0WzVdID09PSByaWdodFs1XSAmJiBsZWZ0WzZdID09PSByaWdodFs2XSAmJiBsZWZ0WzhdID09PSByaWdodFs4XSAmJiBsZWZ0WzldID09PSByaWdodFs5XSAmJiBsZWZ0WzEwXSA9PT0gcmlnaHRbMTBdICYmIC8vIEJvdHRvbSByb3cKICAgICAgICBsZWZ0WzNdID09PSByaWdodFszXSAmJiBsZWZ0WzddID09PSByaWdodFs3XSAmJiBsZWZ0WzExXSA9PT0gcmlnaHRbMTFdICYmIGxlZnRbMTVdID09PSByaWdodFsxNV07CiAgICAgIH07CiAgICAgIE1hdHJpeDQuZXF1YWxzRXBzaWxvbiA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBlcHNpbG9uKSB7CiAgICAgICAgZXBzaWxvbiA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGVwc2lsb24sIDApOwogICAgICAgIHJldHVybiBsZWZ0ID09PSByaWdodCB8fCBkZWZpbmVkX2RlZmF1bHQobGVmdCkgJiYgZGVmaW5lZF9kZWZhdWx0KHJpZ2h0KSAmJiBNYXRoLmFicyhsZWZ0WzBdIC0gcmlnaHRbMF0pIDw9IGVwc2lsb24gJiYgTWF0aC5hYnMobGVmdFsxXSAtIHJpZ2h0WzFdKSA8PSBlcHNpbG9uICYmIE1hdGguYWJzKGxlZnRbMl0gLSByaWdodFsyXSkgPD0gZXBzaWxvbiAmJiBNYXRoLmFicyhsZWZ0WzNdIC0gcmlnaHRbM10pIDw9IGVwc2lsb24gJiYgTWF0aC5hYnMobGVmdFs0XSAtIHJpZ2h0WzRdKSA8PSBlcHNpbG9uICYmIE1hdGguYWJzKGxlZnRbNV0gLSByaWdodFs1XSkgPD0gZXBzaWxvbiAmJiBNYXRoLmFicyhsZWZ0WzZdIC0gcmlnaHRbNl0pIDw9IGVwc2lsb24gJiYgTWF0aC5hYnMobGVmdFs3XSAtIHJpZ2h0WzddKSA8PSBlcHNpbG9uICYmIE1hdGguYWJzKGxlZnRbOF0gLSByaWdodFs4XSkgPD0gZXBzaWxvbiAmJiBNYXRoLmFicyhsZWZ0WzldIC0gcmlnaHRbOV0pIDw9IGVwc2lsb24gJiYgTWF0aC5hYnMobGVmdFsxMF0gLSByaWdodFsxMF0pIDw9IGVwc2lsb24gJiYgTWF0aC5hYnMobGVmdFsxMV0gLSByaWdodFsxMV0pIDw9IGVwc2lsb24gJiYgTWF0aC5hYnMobGVmdFsxMl0gLSByaWdodFsxMl0pIDw9IGVwc2lsb24gJiYgTWF0aC5hYnMobGVmdFsxM10gLSByaWdodFsxM10pIDw9IGVwc2lsb24gJiYgTWF0aC5hYnMobGVmdFsxNF0gLSByaWdodFsxNF0pIDw9IGVwc2lsb24gJiYgTWF0aC5hYnMobGVmdFsxNV0gLSByaWdodFsxNV0pIDw9IGVwc2lsb247CiAgICAgIH07CiAgICAgIE1hdHJpeDQuZ2V0VHJhbnNsYXRpb24gPSBmdW5jdGlvbihtYXRyaXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0LnggPSBtYXRyaXhbMTJdOwogICAgICAgIHJlc3VsdC55ID0gbWF0cml4WzEzXTsKICAgICAgICByZXN1bHQueiA9IG1hdHJpeFsxNF07CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4NC5nZXRNYXRyaXgzID0gZnVuY3Rpb24obWF0cml4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdFswXSA9IG1hdHJpeFswXTsKICAgICAgICByZXN1bHRbMV0gPSBtYXRyaXhbMV07CiAgICAgICAgcmVzdWx0WzJdID0gbWF0cml4WzJdOwogICAgICAgIHJlc3VsdFszXSA9IG1hdHJpeFs0XTsKICAgICAgICByZXN1bHRbNF0gPSBtYXRyaXhbNV07CiAgICAgICAgcmVzdWx0WzVdID0gbWF0cml4WzZdOwogICAgICAgIHJlc3VsdFs2XSA9IG1hdHJpeFs4XTsKICAgICAgICByZXN1bHRbN10gPSBtYXRyaXhbOV07CiAgICAgICAgcmVzdWx0WzhdID0gbWF0cml4WzEwXTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBzY3JhdGNoSW52ZXJzZVJvdGF0aW9uID0gbmV3IE1hdHJpeDNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoTWF0cml4M1plcm8gPSBuZXcgTWF0cml4M19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hCb3R0b21Sb3cgPSBuZXcgQ2FydGVzaWFuNF9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hFeHBlY3RlZEJvdHRvbVJvdyA9IG5ldyBDYXJ0ZXNpYW40X2RlZmF1bHQoMCwgMCwgMCwgMSk7CiAgICAgIE1hdHJpeDQuaW52ZXJzZSA9IGZ1bmN0aW9uKG1hdHJpeCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXRyaXgiLCBtYXRyaXgpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCBzcmMwID0gbWF0cml4WzBdOwogICAgICAgIGNvbnN0IHNyYzEgPSBtYXRyaXhbNF07CiAgICAgICAgY29uc3Qgc3JjMiA9IG1hdHJpeFs4XTsKICAgICAgICBjb25zdCBzcmMzID0gbWF0cml4WzEyXTsKICAgICAgICBjb25zdCBzcmM0ID0gbWF0cml4WzFdOwogICAgICAgIGNvbnN0IHNyYzUgPSBtYXRyaXhbNV07CiAgICAgICAgY29uc3Qgc3JjNiA9IG1hdHJpeFs5XTsKICAgICAgICBjb25zdCBzcmM3ID0gbWF0cml4WzEzXTsKICAgICAgICBjb25zdCBzcmM4ID0gbWF0cml4WzJdOwogICAgICAgIGNvbnN0IHNyYzkgPSBtYXRyaXhbNl07CiAgICAgICAgY29uc3Qgc3JjMTAgPSBtYXRyaXhbMTBdOwogICAgICAgIGNvbnN0IHNyYzExID0gbWF0cml4WzE0XTsKICAgICAgICBjb25zdCBzcmMxMiA9IG1hdHJpeFszXTsKICAgICAgICBjb25zdCBzcmMxMyA9IG1hdHJpeFs3XTsKICAgICAgICBjb25zdCBzcmMxNCA9IG1hdHJpeFsxMV07CiAgICAgICAgY29uc3Qgc3JjMTUgPSBtYXRyaXhbMTVdOwogICAgICAgIGxldCB0bXAwID0gc3JjMTAgKiBzcmMxNTsKICAgICAgICBsZXQgdG1wMSA9IHNyYzExICogc3JjMTQ7CiAgICAgICAgbGV0IHRtcDIgPSBzcmM5ICogc3JjMTU7CiAgICAgICAgbGV0IHRtcDMgPSBzcmMxMSAqIHNyYzEzOwogICAgICAgIGxldCB0bXA0ID0gc3JjOSAqIHNyYzE0OwogICAgICAgIGxldCB0bXA1ID0gc3JjMTAgKiBzcmMxMzsKICAgICAgICBsZXQgdG1wNiA9IHNyYzggKiBzcmMxNTsKICAgICAgICBsZXQgdG1wNyA9IHNyYzExICogc3JjMTI7CiAgICAgICAgbGV0IHRtcDggPSBzcmM4ICogc3JjMTQ7CiAgICAgICAgbGV0IHRtcDkgPSBzcmMxMCAqIHNyYzEyOwogICAgICAgIGxldCB0bXAxMCA9IHNyYzggKiBzcmMxMzsKICAgICAgICBsZXQgdG1wMTEgPSBzcmM5ICogc3JjMTI7CiAgICAgICAgY29uc3QgZHN0MCA9IHRtcDAgKiBzcmM1ICsgdG1wMyAqIHNyYzYgKyB0bXA0ICogc3JjNyAtICh0bXAxICogc3JjNSArIHRtcDIgKiBzcmM2ICsgdG1wNSAqIHNyYzcpOwogICAgICAgIGNvbnN0IGRzdDEgPSB0bXAxICogc3JjNCArIHRtcDYgKiBzcmM2ICsgdG1wOSAqIHNyYzcgLSAodG1wMCAqIHNyYzQgKyB0bXA3ICogc3JjNiArIHRtcDggKiBzcmM3KTsKICAgICAgICBjb25zdCBkc3QyID0gdG1wMiAqIHNyYzQgKyB0bXA3ICogc3JjNSArIHRtcDEwICogc3JjNyAtICh0bXAzICogc3JjNCArIHRtcDYgKiBzcmM1ICsgdG1wMTEgKiBzcmM3KTsKICAgICAgICBjb25zdCBkc3QzID0gdG1wNSAqIHNyYzQgKyB0bXA4ICogc3JjNSArIHRtcDExICogc3JjNiAtICh0bXA0ICogc3JjNCArIHRtcDkgKiBzcmM1ICsgdG1wMTAgKiBzcmM2KTsKICAgICAgICBjb25zdCBkc3Q0ID0gdG1wMSAqIHNyYzEgKyB0bXAyICogc3JjMiArIHRtcDUgKiBzcmMzIC0gKHRtcDAgKiBzcmMxICsgdG1wMyAqIHNyYzIgKyB0bXA0ICogc3JjMyk7CiAgICAgICAgY29uc3QgZHN0NSA9IHRtcDAgKiBzcmMwICsgdG1wNyAqIHNyYzIgKyB0bXA4ICogc3JjMyAtICh0bXAxICogc3JjMCArIHRtcDYgKiBzcmMyICsgdG1wOSAqIHNyYzMpOwogICAgICAgIGNvbnN0IGRzdDYgPSB0bXAzICogc3JjMCArIHRtcDYgKiBzcmMxICsgdG1wMTEgKiBzcmMzIC0gKHRtcDIgKiBzcmMwICsgdG1wNyAqIHNyYzEgKyB0bXAxMCAqIHNyYzMpOwogICAgICAgIGNvbnN0IGRzdDcgPSB0bXA0ICogc3JjMCArIHRtcDkgKiBzcmMxICsgdG1wMTAgKiBzcmMyIC0gKHRtcDUgKiBzcmMwICsgdG1wOCAqIHNyYzEgKyB0bXAxMSAqIHNyYzIpOwogICAgICAgIHRtcDAgPSBzcmMyICogc3JjNzsKICAgICAgICB0bXAxID0gc3JjMyAqIHNyYzY7CiAgICAgICAgdG1wMiA9IHNyYzEgKiBzcmM3OwogICAgICAgIHRtcDMgPSBzcmMzICogc3JjNTsKICAgICAgICB0bXA0ID0gc3JjMSAqIHNyYzY7CiAgICAgICAgdG1wNSA9IHNyYzIgKiBzcmM1OwogICAgICAgIHRtcDYgPSBzcmMwICogc3JjNzsKICAgICAgICB0bXA3ID0gc3JjMyAqIHNyYzQ7CiAgICAgICAgdG1wOCA9IHNyYzAgKiBzcmM2OwogICAgICAgIHRtcDkgPSBzcmMyICogc3JjNDsKICAgICAgICB0bXAxMCA9IHNyYzAgKiBzcmM1OwogICAgICAgIHRtcDExID0gc3JjMSAqIHNyYzQ7CiAgICAgICAgY29uc3QgZHN0OCA9IHRtcDAgKiBzcmMxMyArIHRtcDMgKiBzcmMxNCArIHRtcDQgKiBzcmMxNSAtICh0bXAxICogc3JjMTMgKyB0bXAyICogc3JjMTQgKyB0bXA1ICogc3JjMTUpOwogICAgICAgIGNvbnN0IGRzdDkgPSB0bXAxICogc3JjMTIgKyB0bXA2ICogc3JjMTQgKyB0bXA5ICogc3JjMTUgLSAodG1wMCAqIHNyYzEyICsgdG1wNyAqIHNyYzE0ICsgdG1wOCAqIHNyYzE1KTsKICAgICAgICBjb25zdCBkc3QxMCA9IHRtcDIgKiBzcmMxMiArIHRtcDcgKiBzcmMxMyArIHRtcDEwICogc3JjMTUgLSAodG1wMyAqIHNyYzEyICsgdG1wNiAqIHNyYzEzICsgdG1wMTEgKiBzcmMxNSk7CiAgICAgICAgY29uc3QgZHN0MTEgPSB0bXA1ICogc3JjMTIgKyB0bXA4ICogc3JjMTMgKyB0bXAxMSAqIHNyYzE0IC0gKHRtcDQgKiBzcmMxMiArIHRtcDkgKiBzcmMxMyArIHRtcDEwICogc3JjMTQpOwogICAgICAgIGNvbnN0IGRzdDEyID0gdG1wMiAqIHNyYzEwICsgdG1wNSAqIHNyYzExICsgdG1wMSAqIHNyYzkgLSAodG1wNCAqIHNyYzExICsgdG1wMCAqIHNyYzkgKyB0bXAzICogc3JjMTApOwogICAgICAgIGNvbnN0IGRzdDEzID0gdG1wOCAqIHNyYzExICsgdG1wMCAqIHNyYzggKyB0bXA3ICogc3JjMTAgLSAodG1wNiAqIHNyYzEwICsgdG1wOSAqIHNyYzExICsgdG1wMSAqIHNyYzgpOwogICAgICAgIGNvbnN0IGRzdDE0ID0gdG1wNiAqIHNyYzkgKyB0bXAxMSAqIHNyYzExICsgdG1wMyAqIHNyYzggLSAodG1wMTAgKiBzcmMxMSArIHRtcDIgKiBzcmM4ICsgdG1wNyAqIHNyYzkpOwogICAgICAgIGNvbnN0IGRzdDE1ID0gdG1wMTAgKiBzcmMxMCArIHRtcDQgKiBzcmM4ICsgdG1wOSAqIHNyYzkgLSAodG1wOCAqIHNyYzkgKyB0bXAxMSAqIHNyYzEwICsgdG1wNSAqIHNyYzgpOwogICAgICAgIGxldCBkZXQgPSBzcmMwICogZHN0MCArIHNyYzEgKiBkc3QxICsgc3JjMiAqIGRzdDIgKyBzcmMzICogZHN0MzsKICAgICAgICBpZiAoTWF0aC5hYnMoZGV0KSA8IE1hdGhfZGVmYXVsdC5FUFNJTE9OMjEpIHsKICAgICAgICAgIGlmIChNYXRyaXgzX2RlZmF1bHQuZXF1YWxzRXBzaWxvbigKICAgICAgICAgICAgTWF0cml4NC5nZXRNYXRyaXgzKG1hdHJpeCwgc2NyYXRjaEludmVyc2VSb3RhdGlvbiksCiAgICAgICAgICAgIHNjcmF0Y2hNYXRyaXgzWmVybywKICAgICAgICAgICAgTWF0aF9kZWZhdWx0LkVQU0lMT043CiAgICAgICAgICApICYmIENhcnRlc2lhbjRfZGVmYXVsdC5lcXVhbHMoCiAgICAgICAgICAgIE1hdHJpeDQuZ2V0Um93KG1hdHJpeCwgMywgc2NyYXRjaEJvdHRvbVJvdyksCiAgICAgICAgICAgIHNjcmF0Y2hFeHBlY3RlZEJvdHRvbVJvdwogICAgICAgICAgKSkgewogICAgICAgICAgICByZXN1bHRbMF0gPSAwOwogICAgICAgICAgICByZXN1bHRbMV0gPSAwOwogICAgICAgICAgICByZXN1bHRbMl0gPSAwOwogICAgICAgICAgICByZXN1bHRbM10gPSAwOwogICAgICAgICAgICByZXN1bHRbNF0gPSAwOwogICAgICAgICAgICByZXN1bHRbNV0gPSAwOwogICAgICAgICAgICByZXN1bHRbNl0gPSAwOwogICAgICAgICAgICByZXN1bHRbN10gPSAwOwogICAgICAgICAgICByZXN1bHRbOF0gPSAwOwogICAgICAgICAgICByZXN1bHRbOV0gPSAwOwogICAgICAgICAgICByZXN1bHRbMTBdID0gMDsKICAgICAgICAgICAgcmVzdWx0WzExXSA9IDA7CiAgICAgICAgICAgIHJlc3VsdFsxMl0gPSAtbWF0cml4WzEyXTsKICAgICAgICAgICAgcmVzdWx0WzEzXSA9IC1tYXRyaXhbMTNdOwogICAgICAgICAgICByZXN1bHRbMTRdID0gLW1hdHJpeFsxNF07CiAgICAgICAgICAgIHJlc3VsdFsxNV0gPSAxOwogICAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgICAgfQogICAgICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcl9kZWZhdWx0KAogICAgICAgICAgICAibWF0cml4IGlzIG5vdCBpbnZlcnRpYmxlIGJlY2F1c2UgaXRzIGRldGVybWluYXRlIGlzIHplcm8uIgogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgZGV0ID0gMSAvIGRldDsKICAgICAgICByZXN1bHRbMF0gPSBkc3QwICogZGV0OwogICAgICAgIHJlc3VsdFsxXSA9IGRzdDEgKiBkZXQ7CiAgICAgICAgcmVzdWx0WzJdID0gZHN0MiAqIGRldDsKICAgICAgICByZXN1bHRbM10gPSBkc3QzICogZGV0OwogICAgICAgIHJlc3VsdFs0XSA9IGRzdDQgKiBkZXQ7CiAgICAgICAgcmVzdWx0WzVdID0gZHN0NSAqIGRldDsKICAgICAgICByZXN1bHRbNl0gPSBkc3Q2ICogZGV0OwogICAgICAgIHJlc3VsdFs3XSA9IGRzdDcgKiBkZXQ7CiAgICAgICAgcmVzdWx0WzhdID0gZHN0OCAqIGRldDsKICAgICAgICByZXN1bHRbOV0gPSBkc3Q5ICogZGV0OwogICAgICAgIHJlc3VsdFsxMF0gPSBkc3QxMCAqIGRldDsKICAgICAgICByZXN1bHRbMTFdID0gZHN0MTEgKiBkZXQ7CiAgICAgICAgcmVzdWx0WzEyXSA9IGRzdDEyICogZGV0OwogICAgICAgIHJlc3VsdFsxM10gPSBkc3QxMyAqIGRldDsKICAgICAgICByZXN1bHRbMTRdID0gZHN0MTQgKiBkZXQ7CiAgICAgICAgcmVzdWx0WzE1XSA9IGRzdDE1ICogZGV0OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDQuaW52ZXJzZVRyYW5zZm9ybWF0aW9uID0gZnVuY3Rpb24obWF0cml4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGNvbnN0IG1hdHJpeDAgPSBtYXRyaXhbMF07CiAgICAgICAgY29uc3QgbWF0cml4MSA9IG1hdHJpeFsxXTsKICAgICAgICBjb25zdCBtYXRyaXgyID0gbWF0cml4WzJdOwogICAgICAgIGNvbnN0IG1hdHJpeDQgPSBtYXRyaXhbNF07CiAgICAgICAgY29uc3QgbWF0cml4NSA9IG1hdHJpeFs1XTsKICAgICAgICBjb25zdCBtYXRyaXg2ID0gbWF0cml4WzZdOwogICAgICAgIGNvbnN0IG1hdHJpeDggPSBtYXRyaXhbOF07CiAgICAgICAgY29uc3QgbWF0cml4OSA9IG1hdHJpeFs5XTsKICAgICAgICBjb25zdCBtYXRyaXgxMCA9IG1hdHJpeFsxMF07CiAgICAgICAgY29uc3QgdlggPSBtYXRyaXhbMTJdOwogICAgICAgIGNvbnN0IHZZID0gbWF0cml4WzEzXTsKICAgICAgICBjb25zdCB2WiA9IG1hdHJpeFsxNF07CiAgICAgICAgY29uc3QgeCA9IC1tYXRyaXgwICogdlggLSBtYXRyaXgxICogdlkgLSBtYXRyaXgyICogdlo7CiAgICAgICAgY29uc3QgeSA9IC1tYXRyaXg0ICogdlggLSBtYXRyaXg1ICogdlkgLSBtYXRyaXg2ICogdlo7CiAgICAgICAgY29uc3QgeiA9IC1tYXRyaXg4ICogdlggLSBtYXRyaXg5ICogdlkgLSBtYXRyaXgxMCAqIHZaOwogICAgICAgIHJlc3VsdFswXSA9IG1hdHJpeDA7CiAgICAgICAgcmVzdWx0WzFdID0gbWF0cml4NDsKICAgICAgICByZXN1bHRbMl0gPSBtYXRyaXg4OwogICAgICAgIHJlc3VsdFszXSA9IDA7CiAgICAgICAgcmVzdWx0WzRdID0gbWF0cml4MTsKICAgICAgICByZXN1bHRbNV0gPSBtYXRyaXg1OwogICAgICAgIHJlc3VsdFs2XSA9IG1hdHJpeDk7CiAgICAgICAgcmVzdWx0WzddID0gMDsKICAgICAgICByZXN1bHRbOF0gPSBtYXRyaXgyOwogICAgICAgIHJlc3VsdFs5XSA9IG1hdHJpeDY7CiAgICAgICAgcmVzdWx0WzEwXSA9IG1hdHJpeDEwOwogICAgICAgIHJlc3VsdFsxMV0gPSAwOwogICAgICAgIHJlc3VsdFsxMl0gPSB4OwogICAgICAgIHJlc3VsdFsxM10gPSB5OwogICAgICAgIHJlc3VsdFsxNF0gPSB6OwogICAgICAgIHJlc3VsdFsxNV0gPSAxOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hUcmFuc3Bvc2VNYXRyaXgyID0gbmV3IE1hdHJpeDQoKTsKICAgICAgTWF0cml4NC5pbnZlcnNlVHJhbnNwb3NlID0gZnVuY3Rpb24obWF0cml4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJldHVybiBNYXRyaXg0LmludmVyc2UoCiAgICAgICAgICBNYXRyaXg0LnRyYW5zcG9zZShtYXRyaXgsIHNjcmF0Y2hUcmFuc3Bvc2VNYXRyaXgyKSwKICAgICAgICAgIHJlc3VsdAogICAgICAgICk7CiAgICAgIH07CiAgICAgIE1hdHJpeDQuSURFTlRJVFkgPSBPYmplY3QuZnJlZXplKAogICAgICAgIG5ldyBNYXRyaXg0KAogICAgICAgICAgMSwKICAgICAgICAgIDAsCiAgICAgICAgICAwLAogICAgICAgICAgMCwKICAgICAgICAgIDAsCiAgICAgICAgICAxLAogICAgICAgICAgMCwKICAgICAgICAgIDAsCiAgICAgICAgICAwLAogICAgICAgICAgMCwKICAgICAgICAgIDEsCiAgICAgICAgICAwLAogICAgICAgICAgMCwKICAgICAgICAgIDAsCiAgICAgICAgICAwLAogICAgICAgICAgMQogICAgICAgICkKICAgICAgKTsKICAgICAgTWF0cml4NC5aRVJPID0gT2JqZWN0LmZyZWV6ZSgKICAgICAgICBuZXcgTWF0cml4NCgKICAgICAgICAgIDAsCiAgICAgICAgICAwLAogICAgICAgICAgMCwKICAgICAgICAgIDAsCiAgICAgICAgICAwLAogICAgICAgICAgMCwKICAgICAgICAgIDAsCiAgICAgICAgICAwLAogICAgICAgICAgMCwKICAgICAgICAgIDAsCiAgICAgICAgICAwLAogICAgICAgICAgMCwKICAgICAgICAgIDAsCiAgICAgICAgICAwLAogICAgICAgICAgMCwKICAgICAgICAgIDAKICAgICAgICApCiAgICAgICk7CiAgICAgIE1hdHJpeDQuQ09MVU1OMFJPVzAgPSAwOwogICAgICBNYXRyaXg0LkNPTFVNTjBST1cxID0gMTsKICAgICAgTWF0cml4NC5DT0xVTU4wUk9XMiA9IDI7CiAgICAgIE1hdHJpeDQuQ09MVU1OMFJPVzMgPSAzOwogICAgICBNYXRyaXg0LkNPTFVNTjFST1cwID0gNDsKICAgICAgTWF0cml4NC5DT0xVTU4xUk9XMSA9IDU7CiAgICAgIE1hdHJpeDQuQ09MVU1OMVJPVzIgPSA2OwogICAgICBNYXRyaXg0LkNPTFVNTjFST1czID0gNzsKICAgICAgTWF0cml4NC5DT0xVTU4yUk9XMCA9IDg7CiAgICAgIE1hdHJpeDQuQ09MVU1OMlJPVzEgPSA5OwogICAgICBNYXRyaXg0LkNPTFVNTjJST1cyID0gMTA7CiAgICAgIE1hdHJpeDQuQ09MVU1OMlJPVzMgPSAxMTsKICAgICAgTWF0cml4NC5DT0xVTU4zUk9XMCA9IDEyOwogICAgICBNYXRyaXg0LkNPTFVNTjNST1cxID0gMTM7CiAgICAgIE1hdHJpeDQuQ09MVU1OM1JPVzIgPSAxNDsKICAgICAgTWF0cml4NC5DT0xVTU4zUk9XMyA9IDE1OwogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhNYXRyaXg0LnByb3RvdHlwZSwgewogICAgICAgIC8qKgogICAgICAgICAqIEdldHMgdGhlIG51bWJlciBvZiBpdGVtcyBpbiB0aGUgY29sbGVjdGlvbi4KICAgICAgICAgKiBAbWVtYmVyb2YgTWF0cml4NC5wcm90b3R5cGUKICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICovCiAgICAgICAgbGVuZ3RoOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gTWF0cml4NC5wYWNrZWRMZW5ndGg7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgICAgTWF0cml4NC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbihyZXN1bHQpIHsKICAgICAgICByZXR1cm4gTWF0cml4NC5jbG9uZSh0aGlzLCByZXN1bHQpOwogICAgICB9OwogICAgICBNYXRyaXg0LnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbihyaWdodCkgewogICAgICAgIHJldHVybiBNYXRyaXg0LmVxdWFscyh0aGlzLCByaWdodCk7CiAgICAgIH07CiAgICAgIE1hdHJpeDQuZXF1YWxzQXJyYXkgPSBmdW5jdGlvbihtYXRyaXgsIGFycmF5LCBvZmZzZXQpIHsKICAgICAgICByZXR1cm4gbWF0cml4WzBdID09PSBhcnJheVtvZmZzZXRdICYmIG1hdHJpeFsxXSA9PT0gYXJyYXlbb2Zmc2V0ICsgMV0gJiYgbWF0cml4WzJdID09PSBhcnJheVtvZmZzZXQgKyAyXSAmJiBtYXRyaXhbM10gPT09IGFycmF5W29mZnNldCArIDNdICYmIG1hdHJpeFs0XSA9PT0gYXJyYXlbb2Zmc2V0ICsgNF0gJiYgbWF0cml4WzVdID09PSBhcnJheVtvZmZzZXQgKyA1XSAmJiBtYXRyaXhbNl0gPT09IGFycmF5W29mZnNldCArIDZdICYmIG1hdHJpeFs3XSA9PT0gYXJyYXlbb2Zmc2V0ICsgN10gJiYgbWF0cml4WzhdID09PSBhcnJheVtvZmZzZXQgKyA4XSAmJiBtYXRyaXhbOV0gPT09IGFycmF5W29mZnNldCArIDldICYmIG1hdHJpeFsxMF0gPT09IGFycmF5W29mZnNldCArIDEwXSAmJiBtYXRyaXhbMTFdID09PSBhcnJheVtvZmZzZXQgKyAxMV0gJiYgbWF0cml4WzEyXSA9PT0gYXJyYXlbb2Zmc2V0ICsgMTJdICYmIG1hdHJpeFsxM10gPT09IGFycmF5W29mZnNldCArIDEzXSAmJiBtYXRyaXhbMTRdID09PSBhcnJheVtvZmZzZXQgKyAxNF0gJiYgbWF0cml4WzE1XSA9PT0gYXJyYXlbb2Zmc2V0ICsgMTVdOwogICAgICB9OwogICAgICBNYXRyaXg0LnByb3RvdHlwZS5lcXVhbHNFcHNpbG9uID0gZnVuY3Rpb24ocmlnaHQsIGVwc2lsb24pIHsKICAgICAgICByZXR1cm4gTWF0cml4NC5lcXVhbHNFcHNpbG9uKHRoaXMsIHJpZ2h0LCBlcHNpbG9uKTsKICAgICAgfTsKICAgICAgTWF0cml4NC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gYCgke3RoaXNbMF19LCAke3RoaXNbNF19LCAke3RoaXNbOF19LCAke3RoaXNbMTJdfSkKKCR7dGhpc1sxXX0sICR7dGhpc1s1XX0sICR7dGhpc1s5XX0sICR7dGhpc1sxM119KQooJHt0aGlzWzJdfSwgJHt0aGlzWzZdfSwgJHt0aGlzWzEwXX0sICR7dGhpc1sxNF19KQooJHt0aGlzWzNdfSwgJHt0aGlzWzddfSwgJHt0aGlzWzExXX0sICR7dGhpc1sxNV19KWA7CiAgICAgIH07CiAgICAgIE1hdHJpeDRfZGVmYXVsdCA9IE1hdHJpeDQ7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9iaW5hcnlTZWFyY2guanMKICBmdW5jdGlvbiBiaW5hcnlTZWFyY2goYXJyYXksIGl0ZW1Ub0ZpbmQsIGNvbXBhcmF0b3IpIHsKICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoIml0ZW1Ub0ZpbmQiLCBpdGVtVG9GaW5kKTsKICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiY29tcGFyYXRvciIsIGNvbXBhcmF0b3IpOwogICAgbGV0IGxvdyA9IDA7CiAgICBsZXQgaGlnaCA9IGFycmF5Lmxlbmd0aCAtIDE7CiAgICBsZXQgaTsKICAgIGxldCBjb21wYXJpc29uOwogICAgd2hpbGUgKGxvdyA8PSBoaWdoKSB7CiAgICAgIGkgPSB+figobG93ICsgaGlnaCkgLyAyKTsKICAgICAgY29tcGFyaXNvbiA9IGNvbXBhcmF0b3IoYXJyYXlbaV0sIGl0ZW1Ub0ZpbmQpOwogICAgICBpZiAoY29tcGFyaXNvbiA8IDApIHsKICAgICAgICBsb3cgPSBpICsgMTsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBpZiAoY29tcGFyaXNvbiA+IDApIHsKICAgICAgICBoaWdoID0gaSAtIDE7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgcmV0dXJuIGk7CiAgICB9CiAgICByZXR1cm4gfihoaWdoICsgMSk7CiAgfQogIHZhciBiaW5hcnlTZWFyY2hfZGVmYXVsdDsKICB2YXIgaW5pdF9iaW5hcnlTZWFyY2ggPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2JpbmFyeVNlYXJjaC5qcyIoKSB7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgYmluYXJ5U2VhcmNoX2RlZmF1bHQgPSBiaW5hcnlTZWFyY2g7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9FYXJ0aE9yaWVudGF0aW9uUGFyYW1ldGVyc1NhbXBsZS5qcwogIGZ1bmN0aW9uIEVhcnRoT3JpZW50YXRpb25QYXJhbWV0ZXJzU2FtcGxlKHhQb2xlV2FuZGVyLCB5UG9sZVdhbmRlciwgeFBvbGVPZmZzZXQsIHlQb2xlT2Zmc2V0LCB1dDFNaW51c1V0YykgewogICAgdGhpcy54UG9sZVdhbmRlciA9IHhQb2xlV2FuZGVyOwogICAgdGhpcy55UG9sZVdhbmRlciA9IHlQb2xlV2FuZGVyOwogICAgdGhpcy54UG9sZU9mZnNldCA9IHhQb2xlT2Zmc2V0OwogICAgdGhpcy55UG9sZU9mZnNldCA9IHlQb2xlT2Zmc2V0OwogICAgdGhpcy51dDFNaW51c1V0YyA9IHV0MU1pbnVzVXRjOwogIH0KICB2YXIgRWFydGhPcmllbnRhdGlvblBhcmFtZXRlcnNTYW1wbGVfZGVmYXVsdDsKICB2YXIgaW5pdF9FYXJ0aE9yaWVudGF0aW9uUGFyYW1ldGVyc1NhbXBsZSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvRWFydGhPcmllbnRhdGlvblBhcmFtZXRlcnNTYW1wbGUuanMiKCkgewogICAgICBFYXJ0aE9yaWVudGF0aW9uUGFyYW1ldGVyc1NhbXBsZV9kZWZhdWx0ID0gRWFydGhPcmllbnRhdGlvblBhcmFtZXRlcnNTYW1wbGU7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9pc0xlYXBZZWFyLmpzCiAgZnVuY3Rpb24gaXNMZWFwWWVhcih5ZWFyKSB7CiAgICBpZiAoeWVhciA9PT0gbnVsbCB8fCBpc05hTih5ZWFyKSkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgieWVhciBpcyByZXF1aXJlZCBhbmQgbXVzdCBiZSBhIG51bWJlci4iKTsKICAgIH0KICAgIHJldHVybiB5ZWFyICUgNCA9PT0gMCAmJiB5ZWFyICUgMTAwICE9PSAwIHx8IHllYXIgJSA0MDAgPT09IDA7CiAgfQogIHZhciBpc0xlYXBZZWFyX2RlZmF1bHQ7CiAgdmFyIGluaXRfaXNMZWFwWWVhciA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvaXNMZWFwWWVhci5qcyIoKSB7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgaXNMZWFwWWVhcl9kZWZhdWx0ID0gaXNMZWFwWWVhcjsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0dyZWdvcmlhbkRhdGUuanMKICBmdW5jdGlvbiBHcmVnb3JpYW5EYXRlKHllYXIsIG1vbnRoLCBkYXksIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtaWxsaXNlY29uZCwgaXNMZWFwU2Vjb25kKSB7CiAgICBjb25zdCBtaW5pbXVtWWVhciA9IDE7CiAgICBjb25zdCBtaW5pbXVtTW9udGggPSAxOwogICAgY29uc3QgbWluaW11bURheSA9IDE7CiAgICBjb25zdCBtaW5pbXVtSG91ciA9IDA7CiAgICBjb25zdCBtaW5pbXVtTWludXRlID0gMDsKICAgIGNvbnN0IG1pbmltdW1TZWNvbmQgPSAwOwogICAgY29uc3QgbWluaW11bU1pbGxpc2Vjb25kID0gMDsKICAgIHllYXIgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh5ZWFyLCBtaW5pbXVtWWVhcik7CiAgICBtb250aCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG1vbnRoLCBtaW5pbXVtTW9udGgpOwogICAgZGF5ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoZGF5LCBtaW5pbXVtRGF5KTsKICAgIGhvdXIgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChob3VyLCBtaW5pbXVtSG91cik7CiAgICBtaW51dGUgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChtaW51dGUsIG1pbmltdW1NaW51dGUpOwogICAgc2Vjb25kID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc2Vjb25kLCBtaW5pbXVtU2Vjb25kKTsKICAgIG1pbGxpc2Vjb25kID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQobWlsbGlzZWNvbmQsIG1pbmltdW1NaWxsaXNlY29uZCk7CiAgICBpc0xlYXBTZWNvbmQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChpc0xlYXBTZWNvbmQsIGZhbHNlKTsKICAgIHZhbGlkYXRlUmFuZ2UoKTsKICAgIHZhbGlkYXRlRGF0ZSgpOwogICAgdGhpcy55ZWFyID0geWVhcjsKICAgIHRoaXMubW9udGggPSBtb250aDsKICAgIHRoaXMuZGF5ID0gZGF5OwogICAgdGhpcy5ob3VyID0gaG91cjsKICAgIHRoaXMubWludXRlID0gbWludXRlOwogICAgdGhpcy5zZWNvbmQgPSBzZWNvbmQ7CiAgICB0aGlzLm1pbGxpc2Vjb25kID0gbWlsbGlzZWNvbmQ7CiAgICB0aGlzLmlzTGVhcFNlY29uZCA9IGlzTGVhcFNlY29uZDsKICAgIGZ1bmN0aW9uIHZhbGlkYXRlUmFuZ2UoKSB7CiAgICAgIGNvbnN0IG1heGltdW1ZZWFyID0gOTk5OTsKICAgICAgY29uc3QgbWF4aW11bU1vbnRoID0gMTI7CiAgICAgIGNvbnN0IG1heGltdW1EYXkgPSAzMTsKICAgICAgY29uc3QgbWF4aW11bUhvdXIgPSAyMzsKICAgICAgY29uc3QgbWF4aW11bU1pbnV0ZSA9IDU5OwogICAgICBjb25zdCBtYXhpbXVtU2Vjb25kID0gNTk7CiAgICAgIGNvbnN0IGV4Y2x1ZGVkTWF4aW11bU1pbGlzZWNvbmQgPSAxZTM7CiAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbk9yRXF1YWxzKCJZZWFyIiwgeWVhciwgbWluaW11bVllYXIpOwogICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIubGVzc1RoYW5PckVxdWFscygiWWVhciIsIHllYXIsIG1heGltdW1ZZWFyKTsKICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuT3JFcXVhbHMoIk1vbnRoIiwgbW9udGgsIG1pbmltdW1Nb250aCk7CiAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5sZXNzVGhhbk9yRXF1YWxzKCJNb250aCIsIG1vbnRoLCBtYXhpbXVtTW9udGgpOwogICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygiRGF5IiwgZGF5LCBtaW5pbXVtRGF5KTsKICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmxlc3NUaGFuT3JFcXVhbHMoIkRheSIsIGRheSwgbWF4aW11bURheSk7CiAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbk9yRXF1YWxzKCJIb3VyIiwgaG91ciwgbWluaW11bUhvdXIpOwogICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIubGVzc1RoYW5PckVxdWFscygiSG91ciIsIGhvdXIsIG1heGltdW1Ib3VyKTsKICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuT3JFcXVhbHMoIk1pbnV0ZSIsIG1pbnV0ZSwgbWluaW11bU1pbnV0ZSk7CiAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5sZXNzVGhhbk9yRXF1YWxzKCJNaW51dGUiLCBtaW51dGUsIG1heGltdW1NaW51dGUpOwogICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5ib29sKCJJc0xlYXBTZWNvbmQiLCBpc0xlYXBTZWNvbmQpOwogICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygiU2Vjb25kIiwgc2Vjb25kLCBtaW5pbXVtU2Vjb25kKTsKICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmxlc3NUaGFuT3JFcXVhbHMoCiAgICAgICAgIlNlY29uZCIsCiAgICAgICAgc2Vjb25kLAogICAgICAgIGlzTGVhcFNlY29uZCA/IG1heGltdW1TZWNvbmQgKyAxIDogbWF4aW11bVNlY29uZAogICAgICApOwogICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygKICAgICAgICAiTWlsbGlzZWNvbmQiLAogICAgICAgIG1pbGxpc2Vjb25kLAogICAgICAgIG1pbmltdW1NaWxsaXNlY29uZAogICAgICApOwogICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIubGVzc1RoYW4oCiAgICAgICAgIk1pbGxpc2Vjb25kIiwKICAgICAgICBtaWxsaXNlY29uZCwKICAgICAgICBleGNsdWRlZE1heGltdW1NaWxpc2Vjb25kCiAgICAgICk7CiAgICB9CiAgICBmdW5jdGlvbiB2YWxpZGF0ZURhdGUoKSB7CiAgICAgIGNvbnN0IGRheXNJbk1vbnRoMiA9IG1vbnRoID09PSAyICYmIGlzTGVhcFllYXJfZGVmYXVsdCh5ZWFyKSA/IGRheXNJblllYXJbbW9udGggLSAxXSArIDEgOiBkYXlzSW5ZZWFyW21vbnRoIC0gMV07CiAgICAgIGlmIChkYXkgPiBkYXlzSW5Nb250aDIpIHsKICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiTW9udGggYW5kIERheSByZXByZXNlbnRzIGludmFsaWQgZGF0ZSIpOwogICAgICB9CiAgICB9CiAgfQogIHZhciBkYXlzSW5ZZWFyLCBHcmVnb3JpYW5EYXRlX2RlZmF1bHQ7CiAgdmFyIGluaXRfR3JlZ29yaWFuRGF0ZSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvR3JlZ29yaWFuRGF0ZS5qcyIoKSB7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X2lzTGVhcFllYXIoKTsKICAgICAgZGF5c0luWWVhciA9IFszMSwgMjgsIDMxLCAzMCwgMzEsIDMwLCAzMSwgMzEsIDMwLCAzMSwgMzAsIDMxXTsKICAgICAgR3JlZ29yaWFuRGF0ZV9kZWZhdWx0ID0gR3JlZ29yaWFuRGF0ZTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0xlYXBTZWNvbmQuanMKICBmdW5jdGlvbiBMZWFwU2Vjb25kKGRhdGUsIG9mZnNldCkgewogICAgdGhpcy5qdWxpYW5EYXRlID0gZGF0ZTsKICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0OwogIH0KICB2YXIgTGVhcFNlY29uZF9kZWZhdWx0OwogIHZhciBpbml0X0xlYXBTZWNvbmQgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0xlYXBTZWNvbmQuanMiKCkgewogICAgICBMZWFwU2Vjb25kX2RlZmF1bHQgPSBMZWFwU2Vjb25kOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvVGltZUNvbnN0YW50cy5qcwogIHZhciBUaW1lQ29uc3RhbnRzLCBUaW1lQ29uc3RhbnRzX2RlZmF1bHQ7CiAgdmFyIGluaXRfVGltZUNvbnN0YW50cyA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvVGltZUNvbnN0YW50cy5qcyIoKSB7CiAgICAgIFRpbWVDb25zdGFudHMgPSB7CiAgICAgICAgLyoqCiAgICAgICAgICogVGhlIG51bWJlciBvZiBzZWNvbmRzIGluIG9uZSBtaWxsaXNlY29uZDogPGNvZGU+MC4wMDE8L2NvZGU+CiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBTRUNPTkRTX1BFUl9NSUxMSVNFQ09ORDogMWUtMywKICAgICAgICAvKioKICAgICAgICAgKiBUaGUgbnVtYmVyIG9mIHNlY29uZHMgaW4gb25lIG1pbnV0ZTogPGNvZGU+NjA8L2NvZGU+LgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgU0VDT05EU19QRVJfTUlOVVRFOiA2MCwKICAgICAgICAvKioKICAgICAgICAgKiBUaGUgbnVtYmVyIG9mIG1pbnV0ZXMgaW4gb25lIGhvdXI6IDxjb2RlPjYwPC9jb2RlPi4KICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIE1JTlVURVNfUEVSX0hPVVI6IDYwLAogICAgICAgIC8qKgogICAgICAgICAqIFRoZSBudW1iZXIgb2YgaG91cnMgaW4gb25lIGRheTogPGNvZGU+MjQ8L2NvZGU+LgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgSE9VUlNfUEVSX0RBWTogMjQsCiAgICAgICAgLyoqCiAgICAgICAgICogVGhlIG51bWJlciBvZiBzZWNvbmRzIGluIG9uZSBob3VyOiA8Y29kZT4zNjAwPC9jb2RlPi4KICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIFNFQ09ORFNfUEVSX0hPVVI6IDM2MDAsCiAgICAgICAgLyoqCiAgICAgICAgICogVGhlIG51bWJlciBvZiBtaW51dGVzIGluIG9uZSBkYXk6IDxjb2RlPjE0NDA8L2NvZGU+LgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgTUlOVVRFU19QRVJfREFZOiAxNDQwLAogICAgICAgIC8qKgogICAgICAgICAqIFRoZSBudW1iZXIgb2Ygc2Vjb25kcyBpbiBvbmUgZGF5LCBpZ25vcmluZyBsZWFwIHNlY29uZHM6IDxjb2RlPjg2NDAwPC9jb2RlPi4KICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIFNFQ09ORFNfUEVSX0RBWTogODY0MDAsCiAgICAgICAgLyoqCiAgICAgICAgICogVGhlIG51bWJlciBvZiBkYXlzIGluIG9uZSBKdWxpYW4gY2VudHVyeTogPGNvZGU+MzY1MjU8L2NvZGU+LgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgREFZU19QRVJfSlVMSUFOX0NFTlRVUlk6IDM2NTI1LAogICAgICAgIC8qKgogICAgICAgICAqIE9uZSB0cmlsbGlvbnRoIG9mIGEgc2Vjb25kLgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgUElDT1NFQ09ORDogMWUtOSwKICAgICAgICAvKioKICAgICAgICAgKiBUaGUgbnVtYmVyIG9mIGRheXMgdG8gc3VidHJhY3QgZnJvbSBhIEp1bGlhbiBkYXRlIHRvIGRldGVybWluZSB0aGUKICAgICAgICAgKiBtb2RpZmllZCBKdWxpYW4gZGF0ZSwgd2hpY2ggZ2l2ZXMgdGhlIG51bWJlciBvZiBkYXlzIHNpbmNlIG1pZG5pZ2h0CiAgICAgICAgICogb24gTm92ZW1iZXIgMTcsIDE4NTguCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBNT0RJRklFRF9KVUxJQU5fREFURV9ESUZGRVJFTkNFOiAyNDAwMDAwNWUtMQogICAgICB9OwogICAgICBUaW1lQ29uc3RhbnRzX2RlZmF1bHQgPSBPYmplY3QuZnJlZXplKFRpbWVDb25zdGFudHMpOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvVGltZVN0YW5kYXJkLmpzCiAgdmFyIFRpbWVTdGFuZGFyZCwgVGltZVN0YW5kYXJkX2RlZmF1bHQ7CiAgdmFyIGluaXRfVGltZVN0YW5kYXJkID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9UaW1lU3RhbmRhcmQuanMiKCkgewogICAgICBUaW1lU3RhbmRhcmQgPSB7CiAgICAgICAgLyoqCiAgICAgICAgICogUmVwcmVzZW50cyB0aGUgY29vcmRpbmF0ZWQgVW5pdmVyc2FsIFRpbWUgKFVUQykgdGltZSBzdGFuZGFyZC4KICAgICAgICAgKgogICAgICAgICAqIFVUQyBpcyByZWxhdGVkIHRvIFRBSSBhY2NvcmRpbmcgdG8gdGhlIHJlbGF0aW9uc2hpcAogICAgICAgICAqIDxjb2RlPlVUQyA9IFRBSSAtIGRlbHRhVDwvY29kZT4gd2hlcmUgPGNvZGU+ZGVsdGFUPC9jb2RlPiBpcyB0aGUgbnVtYmVyIG9mIGxlYXAKICAgICAgICAgKiBzZWNvbmRzIHdoaWNoIGhhdmUgYmVlbiBpbnRyb2R1Y2VkIGFzIG9mIHRoZSB0aW1lIGluIFRBSS4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgVVRDOiAwLAogICAgICAgIC8qKgogICAgICAgICAqIFJlcHJlc2VudHMgdGhlIEludGVybmF0aW9uYWwgQXRvbWljIFRpbWUgKFRBSSkgdGltZSBzdGFuZGFyZC4KICAgICAgICAgKiBUQUkgaXMgdGhlIHByaW5jaXBhbCB0aW1lIHN0YW5kYXJkIHRvIHdoaWNoIHRoZSBvdGhlciB0aW1lIHN0YW5kYXJkcyBhcmUgcmVsYXRlZC4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgVEFJOiAxCiAgICAgIH07CiAgICAgIFRpbWVTdGFuZGFyZF9kZWZhdWx0ID0gT2JqZWN0LmZyZWV6ZShUaW1lU3RhbmRhcmQpOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvSnVsaWFuRGF0ZS5qcwogIGZ1bmN0aW9uIGNvbXBhcmVMZWFwU2Vjb25kRGF0ZXMobGVhcFNlY29uZCwgZGF0ZVRvRmluZCkgewogICAgcmV0dXJuIEp1bGlhbkRhdGUuY29tcGFyZShsZWFwU2Vjb25kLmp1bGlhbkRhdGUsIGRhdGVUb0ZpbmQuanVsaWFuRGF0ZSk7CiAgfQogIGZ1bmN0aW9uIGNvbnZlcnRVdGNUb1RhaShqdWxpYW5EYXRlKSB7CiAgICBiaW5hcnlTZWFyY2hTY3JhdGNoTGVhcFNlY29uZC5qdWxpYW5EYXRlID0ganVsaWFuRGF0ZTsKICAgIGNvbnN0IGxlYXBTZWNvbmRzID0gSnVsaWFuRGF0ZS5sZWFwU2Vjb25kczsKICAgIGxldCBpbmRleCA9IGJpbmFyeVNlYXJjaF9kZWZhdWx0KAogICAgICBsZWFwU2Vjb25kcywKICAgICAgYmluYXJ5U2VhcmNoU2NyYXRjaExlYXBTZWNvbmQsCiAgICAgIGNvbXBhcmVMZWFwU2Vjb25kRGF0ZXMKICAgICk7CiAgICBpZiAoaW5kZXggPCAwKSB7CiAgICAgIGluZGV4ID0gfmluZGV4OwogICAgfQogICAgaWYgKGluZGV4ID49IGxlYXBTZWNvbmRzLmxlbmd0aCkgewogICAgICBpbmRleCA9IGxlYXBTZWNvbmRzLmxlbmd0aCAtIDE7CiAgICB9CiAgICBsZXQgb2Zmc2V0ID0gbGVhcFNlY29uZHNbaW5kZXhdLm9mZnNldDsKICAgIGlmIChpbmRleCA+IDApIHsKICAgICAgY29uc3QgZGlmZmVyZW5jZSA9IEp1bGlhbkRhdGUuc2Vjb25kc0RpZmZlcmVuY2UoCiAgICAgICAgbGVhcFNlY29uZHNbaW5kZXhdLmp1bGlhbkRhdGUsCiAgICAgICAganVsaWFuRGF0ZQogICAgICApOwogICAgICBpZiAoZGlmZmVyZW5jZSA+IG9mZnNldCkgewogICAgICAgIGluZGV4LS07CiAgICAgICAgb2Zmc2V0ID0gbGVhcFNlY29uZHNbaW5kZXhdLm9mZnNldDsKICAgICAgfQogICAgfQogICAgSnVsaWFuRGF0ZS5hZGRTZWNvbmRzKGp1bGlhbkRhdGUsIG9mZnNldCwganVsaWFuRGF0ZSk7CiAgfQogIGZ1bmN0aW9uIGNvbnZlcnRUYWlUb1V0YyhqdWxpYW5EYXRlLCByZXN1bHQpIHsKICAgIGJpbmFyeVNlYXJjaFNjcmF0Y2hMZWFwU2Vjb25kLmp1bGlhbkRhdGUgPSBqdWxpYW5EYXRlOwogICAgY29uc3QgbGVhcFNlY29uZHMgPSBKdWxpYW5EYXRlLmxlYXBTZWNvbmRzOwogICAgbGV0IGluZGV4ID0gYmluYXJ5U2VhcmNoX2RlZmF1bHQoCiAgICAgIGxlYXBTZWNvbmRzLAogICAgICBiaW5hcnlTZWFyY2hTY3JhdGNoTGVhcFNlY29uZCwKICAgICAgY29tcGFyZUxlYXBTZWNvbmREYXRlcwogICAgKTsKICAgIGlmIChpbmRleCA8IDApIHsKICAgICAgaW5kZXggPSB+aW5kZXg7CiAgICB9CiAgICBpZiAoaW5kZXggPT09IDApIHsKICAgICAgcmV0dXJuIEp1bGlhbkRhdGUuYWRkU2Vjb25kcyhqdWxpYW5EYXRlLCAtbGVhcFNlY29uZHNbMF0ub2Zmc2V0LCByZXN1bHQpOwogICAgfQogICAgaWYgKGluZGV4ID49IGxlYXBTZWNvbmRzLmxlbmd0aCkgewogICAgICByZXR1cm4gSnVsaWFuRGF0ZS5hZGRTZWNvbmRzKAogICAgICAgIGp1bGlhbkRhdGUsCiAgICAgICAgLWxlYXBTZWNvbmRzW2luZGV4IC0gMV0ub2Zmc2V0LAogICAgICAgIHJlc3VsdAogICAgICApOwogICAgfQogICAgY29uc3QgZGlmZmVyZW5jZSA9IEp1bGlhbkRhdGUuc2Vjb25kc0RpZmZlcmVuY2UoCiAgICAgIGxlYXBTZWNvbmRzW2luZGV4XS5qdWxpYW5EYXRlLAogICAgICBqdWxpYW5EYXRlCiAgICApOwogICAgaWYgKGRpZmZlcmVuY2UgPT09IDApIHsKICAgICAgcmV0dXJuIEp1bGlhbkRhdGUuYWRkU2Vjb25kcygKICAgICAgICBqdWxpYW5EYXRlLAogICAgICAgIC1sZWFwU2Vjb25kc1tpbmRleF0ub2Zmc2V0LAogICAgICAgIHJlc3VsdAogICAgICApOwogICAgfQogICAgaWYgKGRpZmZlcmVuY2UgPD0gMSkgewogICAgICByZXR1cm4gdm9pZCAwOwogICAgfQogICAgcmV0dXJuIEp1bGlhbkRhdGUuYWRkU2Vjb25kcygKICAgICAganVsaWFuRGF0ZSwKICAgICAgLWxlYXBTZWNvbmRzWy0taW5kZXhdLm9mZnNldCwKICAgICAgcmVzdWx0CiAgICApOwogIH0KICBmdW5jdGlvbiBzZXRDb21wb25lbnRzKHdob2xlRGF5cywgc2Vjb25kc09mRGF5LCBqdWxpYW5EYXRlKSB7CiAgICBjb25zdCBleHRyYURheXMgPSBzZWNvbmRzT2ZEYXkgLyBUaW1lQ29uc3RhbnRzX2RlZmF1bHQuU0VDT05EU19QRVJfREFZIHwgMDsKICAgIHdob2xlRGF5cyArPSBleHRyYURheXM7CiAgICBzZWNvbmRzT2ZEYXkgLT0gVGltZUNvbnN0YW50c19kZWZhdWx0LlNFQ09ORFNfUEVSX0RBWSAqIGV4dHJhRGF5czsKICAgIGlmIChzZWNvbmRzT2ZEYXkgPCAwKSB7CiAgICAgIHdob2xlRGF5cy0tOwogICAgICBzZWNvbmRzT2ZEYXkgKz0gVGltZUNvbnN0YW50c19kZWZhdWx0LlNFQ09ORFNfUEVSX0RBWTsKICAgIH0KICAgIGp1bGlhbkRhdGUuZGF5TnVtYmVyID0gd2hvbGVEYXlzOwogICAganVsaWFuRGF0ZS5zZWNvbmRzT2ZEYXkgPSBzZWNvbmRzT2ZEYXk7CiAgICByZXR1cm4ganVsaWFuRGF0ZTsKICB9CiAgZnVuY3Rpb24gY29tcHV0ZUp1bGlhbkRhdGVDb21wb25lbnRzKHllYXIsIG1vbnRoLCBkYXksIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtaWxsaXNlY29uZCkgewogICAgY29uc3QgYTMgPSAobW9udGggLSAxNCkgLyAxMiB8IDA7CiAgICBjb25zdCBiID0geWVhciArIDQ4MDAgKyBhMzsKICAgIGxldCBkYXlOdW1iZXIgPSAoMTQ2MSAqIGIgLyA0IHwgMCkgKyAoMzY3ICogKG1vbnRoIC0gMiAtIDEyICogYTMpIC8gMTIgfCAwKSAtICgzICogKChiICsgMTAwKSAvIDEwMCB8IDApIC8gNCB8IDApICsgZGF5IC0gMzIwNzU7CiAgICBob3VyID0gaG91ciAtIDEyOwogICAgaWYgKGhvdXIgPCAwKSB7CiAgICAgIGhvdXIgKz0gMjQ7CiAgICB9CiAgICBjb25zdCBzZWNvbmRzT2ZEYXkgPSBzZWNvbmQgKyAoaG91ciAqIFRpbWVDb25zdGFudHNfZGVmYXVsdC5TRUNPTkRTX1BFUl9IT1VSICsgbWludXRlICogVGltZUNvbnN0YW50c19kZWZhdWx0LlNFQ09ORFNfUEVSX01JTlVURSArIG1pbGxpc2Vjb25kICogVGltZUNvbnN0YW50c19kZWZhdWx0LlNFQ09ORFNfUEVSX01JTExJU0VDT05EKTsKICAgIGlmIChzZWNvbmRzT2ZEYXkgPj0gNDMyMDApIHsKICAgICAgZGF5TnVtYmVyIC09IDE7CiAgICB9CiAgICByZXR1cm4gW2RheU51bWJlciwgc2Vjb25kc09mRGF5XTsKICB9CiAgZnVuY3Rpb24gSnVsaWFuRGF0ZShqdWxpYW5EYXlOdW1iZXIsIHNlY29uZHNPZkRheSwgdGltZVN0YW5kYXJkKSB7CiAgICB0aGlzLmRheU51bWJlciA9IHZvaWQgMDsKICAgIHRoaXMuc2Vjb25kc09mRGF5ID0gdm9pZCAwOwogICAganVsaWFuRGF5TnVtYmVyID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoanVsaWFuRGF5TnVtYmVyLCAwKTsKICAgIHNlY29uZHNPZkRheSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHNlY29uZHNPZkRheSwgMCk7CiAgICB0aW1lU3RhbmRhcmQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh0aW1lU3RhbmRhcmQsIFRpbWVTdGFuZGFyZF9kZWZhdWx0LlVUQyk7CiAgICBjb25zdCB3aG9sZURheXMgPSBqdWxpYW5EYXlOdW1iZXIgfCAwOwogICAgc2Vjb25kc09mRGF5ID0gc2Vjb25kc09mRGF5ICsgKGp1bGlhbkRheU51bWJlciAtIHdob2xlRGF5cykgKiBUaW1lQ29uc3RhbnRzX2RlZmF1bHQuU0VDT05EU19QRVJfREFZOwogICAgc2V0Q29tcG9uZW50cyh3aG9sZURheXMsIHNlY29uZHNPZkRheSwgdGhpcyk7CiAgICBpZiAodGltZVN0YW5kYXJkID09PSBUaW1lU3RhbmRhcmRfZGVmYXVsdC5VVEMpIHsKICAgICAgY29udmVydFV0Y1RvVGFpKHRoaXMpOwogICAgfQogIH0KICB2YXIgZ3JlZ29yaWFuRGF0ZVNjcmF0Y2gsIGRheXNJbk1vbnRoLCBkYXlzSW5MZWFwRmVicnVhcnksIGJpbmFyeVNlYXJjaFNjcmF0Y2hMZWFwU2Vjb25kLCBtYXRjaENhbGVuZGFyWWVhciwgbWF0Y2hDYWxlbmRhck1vbnRoLCBtYXRjaE9yZGluYWxEYXRlLCBtYXRjaFdlZWtEYXRlLCBtYXRjaENhbGVuZGFyRGF0ZSwgdXRjT2Zmc2V0LCBtYXRjaEhvdXJzLCBtYXRjaEhvdXJzTWludXRlcywgbWF0Y2hIb3Vyc01pbnV0ZXNTZWNvbmRzLCBpc284NjAxRXJyb3JNZXNzYWdlLCB0b0dyZWdvcmlhbkRhdGVTY3JhdGNoLCBKdWxpYW5EYXRlX2RlZmF1bHQ7CiAgdmFyIGluaXRfSnVsaWFuRGF0ZSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvSnVsaWFuRGF0ZS5qcyIoKSB7CiAgICAgIGluaXRfYmluYXJ5U2VhcmNoKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfR3JlZ29yaWFuRGF0ZSgpOwogICAgICBpbml0X2lzTGVhcFllYXIoKTsKICAgICAgaW5pdF9MZWFwU2Vjb25kKCk7CiAgICAgIGluaXRfVGltZUNvbnN0YW50cygpOwogICAgICBpbml0X1RpbWVTdGFuZGFyZCgpOwogICAgICBncmVnb3JpYW5EYXRlU2NyYXRjaCA9IG5ldyBHcmVnb3JpYW5EYXRlX2RlZmF1bHQoKTsKICAgICAgZGF5c0luTW9udGggPSBbMzEsIDI4LCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMV07CiAgICAgIGRheXNJbkxlYXBGZWJydWFyeSA9IDI5OwogICAgICBiaW5hcnlTZWFyY2hTY3JhdGNoTGVhcFNlY29uZCA9IG5ldyBMZWFwU2Vjb25kX2RlZmF1bHQoKTsKICAgICAgbWF0Y2hDYWxlbmRhclllYXIgPSAvXihcZHs0fSkkLzsKICAgICAgbWF0Y2hDYWxlbmRhck1vbnRoID0gL14oXGR7NH0pLShcZHsyfSkkLzsKICAgICAgbWF0Y2hPcmRpbmFsRGF0ZSA9IC9eKFxkezR9KS0/KFxkezN9KSQvOwogICAgICBtYXRjaFdlZWtEYXRlID0gL14oXGR7NH0pLT9XKFxkezJ9KS0/KFxkezF9KT8kLzsKICAgICAgbWF0Y2hDYWxlbmRhckRhdGUgPSAvXihcZHs0fSktPyhcZHsyfSktPyhcZHsyfSkkLzsKICAgICAgdXRjT2Zmc2V0ID0gLyhbWitcLV0pPyhcZHsyfSk/Oj8oXGR7Mn0pPyQvOwogICAgICBtYXRjaEhvdXJzID0gL14oXGR7Mn0pKFwuXGQrKT8vLnNvdXJjZSArIHV0Y09mZnNldC5zb3VyY2U7CiAgICAgIG1hdGNoSG91cnNNaW51dGVzID0gL14oXGR7Mn0pOj8oXGR7Mn0pKFwuXGQrKT8vLnNvdXJjZSArIHV0Y09mZnNldC5zb3VyY2U7CiAgICAgIG1hdGNoSG91cnNNaW51dGVzU2Vjb25kcyA9IC9eKFxkezJ9KTo/KFxkezJ9KTo/KFxkezJ9KShcLlxkKyk/Ly5zb3VyY2UgKyB1dGNPZmZzZXQuc291cmNlOwogICAgICBpc284NjAxRXJyb3JNZXNzYWdlID0gIkludmFsaWQgSVNPIDg2MDEgZGF0ZS4iOwogICAgICBKdWxpYW5EYXRlLmZyb21HcmVnb3JpYW5EYXRlID0gZnVuY3Rpb24oZGF0ZSwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCEoZGF0ZSBpbnN0YW5jZW9mIEdyZWdvcmlhbkRhdGVfZGVmYXVsdCkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJkYXRlIG11c3QgYmUgYSB2YWxpZCBHcmVnb3JpYW5EYXRlLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBjb21wb25lbnRzID0gY29tcHV0ZUp1bGlhbkRhdGVDb21wb25lbnRzKAogICAgICAgICAgZGF0ZS55ZWFyLAogICAgICAgICAgZGF0ZS5tb250aCwKICAgICAgICAgIGRhdGUuZGF5LAogICAgICAgICAgZGF0ZS5ob3VyLAogICAgICAgICAgZGF0ZS5taW51dGUsCiAgICAgICAgICBkYXRlLnNlY29uZCwKICAgICAgICAgIGRhdGUubWlsbGlzZWNvbmQKICAgICAgICApOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgSnVsaWFuRGF0ZShjb21wb25lbnRzWzBdLCBjb21wb25lbnRzWzFdLCBUaW1lU3RhbmRhcmRfZGVmYXVsdC5VVEMpOwogICAgICAgIH0KICAgICAgICBzZXRDb21wb25lbnRzKGNvbXBvbmVudHNbMF0sIGNvbXBvbmVudHNbMV0sIHJlc3VsdCk7CiAgICAgICAgY29udmVydFV0Y1RvVGFpKHJlc3VsdCk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgSnVsaWFuRGF0ZS5mcm9tRGF0ZSA9IGZ1bmN0aW9uKGRhdGUsIHJlc3VsdCkgewogICAgICAgIGlmICghKGRhdGUgaW5zdGFuY2VvZiBEYXRlKSB8fCBpc05hTihkYXRlLmdldFRpbWUoKSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJkYXRlIG11c3QgYmUgYSB2YWxpZCBKYXZhU2NyaXB0IERhdGUuIik7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGNvbXBvbmVudHMgPSBjb21wdXRlSnVsaWFuRGF0ZUNvbXBvbmVudHMoCiAgICAgICAgICBkYXRlLmdldFVUQ0Z1bGxZZWFyKCksCiAgICAgICAgICBkYXRlLmdldFVUQ01vbnRoKCkgKyAxLAogICAgICAgICAgZGF0ZS5nZXRVVENEYXRlKCksCiAgICAgICAgICBkYXRlLmdldFVUQ0hvdXJzKCksCiAgICAgICAgICBkYXRlLmdldFVUQ01pbnV0ZXMoKSwKICAgICAgICAgIGRhdGUuZ2V0VVRDU2Vjb25kcygpLAogICAgICAgICAgZGF0ZS5nZXRVVENNaWxsaXNlY29uZHMoKQogICAgICAgICk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBKdWxpYW5EYXRlKGNvbXBvbmVudHNbMF0sIGNvbXBvbmVudHNbMV0sIFRpbWVTdGFuZGFyZF9kZWZhdWx0LlVUQyk7CiAgICAgICAgfQogICAgICAgIHNldENvbXBvbmVudHMoY29tcG9uZW50c1swXSwgY29tcG9uZW50c1sxXSwgcmVzdWx0KTsKICAgICAgICBjb252ZXJ0VXRjVG9UYWkocmVzdWx0KTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBKdWxpYW5EYXRlLmZyb21Jc284NjAxID0gZnVuY3Rpb24oaXNvODYwMVN0cmluZywgcmVzdWx0KSB7CiAgICAgICAgaWYgKHR5cGVvZiBpc284NjAxU3RyaW5nICE9PSAic3RyaW5nIikgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoaXNvODYwMUVycm9yTWVzc2FnZSk7CiAgICAgICAgfQogICAgICAgIGlzbzg2MDFTdHJpbmcgPSBpc284NjAxU3RyaW5nLnJlcGxhY2UoIiwiLCAiLiIpOwogICAgICAgIGxldCB0b2tlbnMgPSBpc284NjAxU3RyaW5nLnNwbGl0KCJUIik7CiAgICAgICAgbGV0IHllYXI7CiAgICAgICAgbGV0IG1vbnRoID0gMTsKICAgICAgICBsZXQgZGF5ID0gMTsKICAgICAgICBsZXQgaG91ciA9IDA7CiAgICAgICAgbGV0IG1pbnV0ZSA9IDA7CiAgICAgICAgbGV0IHNlY29uZCA9IDA7CiAgICAgICAgbGV0IG1pbGxpc2Vjb25kID0gMDsKICAgICAgICBjb25zdCBkYXRlID0gdG9rZW5zWzBdOwogICAgICAgIGNvbnN0IHRpbWUgPSB0b2tlbnNbMV07CiAgICAgICAgbGV0IHRtcDI7CiAgICAgICAgbGV0IGluTGVhcFllYXI7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoZGF0ZSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KGlzbzg2MDFFcnJvck1lc3NhZ2UpOwogICAgICAgIH0KICAgICAgICBsZXQgZGFzaENvdW50OwogICAgICAgIHRva2VucyA9IGRhdGUubWF0Y2gobWF0Y2hDYWxlbmRhckRhdGUpOwogICAgICAgIGlmICh0b2tlbnMgIT09IG51bGwpIHsKICAgICAgICAgIGRhc2hDb3VudCA9IGRhdGUuc3BsaXQoIi0iKS5sZW5ndGggLSAxOwogICAgICAgICAgaWYgKGRhc2hDb3VudCA+IDAgJiYgZGFzaENvdW50ICE9PSAyKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KGlzbzg2MDFFcnJvck1lc3NhZ2UpOwogICAgICAgICAgfQogICAgICAgICAgeWVhciA9ICt0b2tlbnNbMV07CiAgICAgICAgICBtb250aCA9ICt0b2tlbnNbMl07CiAgICAgICAgICBkYXkgPSArdG9rZW5zWzNdOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0b2tlbnMgPSBkYXRlLm1hdGNoKG1hdGNoQ2FsZW5kYXJNb250aCk7CiAgICAgICAgICBpZiAodG9rZW5zICE9PSBudWxsKSB7CiAgICAgICAgICAgIHllYXIgPSArdG9rZW5zWzFdOwogICAgICAgICAgICBtb250aCA9ICt0b2tlbnNbMl07CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0b2tlbnMgPSBkYXRlLm1hdGNoKG1hdGNoQ2FsZW5kYXJZZWFyKTsKICAgICAgICAgICAgaWYgKHRva2VucyAhPT0gbnVsbCkgewogICAgICAgICAgICAgIHllYXIgPSArdG9rZW5zWzFdOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGxldCBkYXlPZlllYXI7CiAgICAgICAgICAgICAgdG9rZW5zID0gZGF0ZS5tYXRjaChtYXRjaE9yZGluYWxEYXRlKTsKICAgICAgICAgICAgICBpZiAodG9rZW5zICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgICB5ZWFyID0gK3Rva2Vuc1sxXTsKICAgICAgICAgICAgICAgIGRheU9mWWVhciA9ICt0b2tlbnNbMl07CiAgICAgICAgICAgICAgICBpbkxlYXBZZWFyID0gaXNMZWFwWWVhcl9kZWZhdWx0KHllYXIpOwogICAgICAgICAgICAgICAgaWYgKGRheU9mWWVhciA8IDEgfHwgaW5MZWFwWWVhciAmJiBkYXlPZlllYXIgPiAzNjYgfHwgIWluTGVhcFllYXIgJiYgZGF5T2ZZZWFyID4gMzY1KSB7CiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KGlzbzg2MDFFcnJvck1lc3NhZ2UpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0b2tlbnMgPSBkYXRlLm1hdGNoKG1hdGNoV2Vla0RhdGUpOwogICAgICAgICAgICAgICAgaWYgKHRva2VucyAhPT0gbnVsbCkgewogICAgICAgICAgICAgICAgICB5ZWFyID0gK3Rva2Vuc1sxXTsKICAgICAgICAgICAgICAgICAgY29uc3Qgd2Vla051bWJlciA9ICt0b2tlbnNbMl07CiAgICAgICAgICAgICAgICAgIGNvbnN0IGRheU9mV2VlayA9ICt0b2tlbnNbM10gfHwgMDsKICAgICAgICAgICAgICAgICAgZGFzaENvdW50ID0gZGF0ZS5zcGxpdCgiLSIpLmxlbmd0aCAtIDE7CiAgICAgICAgICAgICAgICAgIGlmIChkYXNoQ291bnQgPiAwICYmICghZGVmaW5lZF9kZWZhdWx0KHRva2Vuc1szXSkgJiYgZGFzaENvdW50ICE9PSAxIHx8IGRlZmluZWRfZGVmYXVsdCh0b2tlbnNbM10pICYmIGRhc2hDb3VudCAhPT0gMikpIHsKICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdChpc284NjAxRXJyb3JNZXNzYWdlKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBjb25zdCBqYW51YXJ5NCA9IG5ldyBEYXRlKERhdGUuVVRDKHllYXIsIDAsIDQpKTsKICAgICAgICAgICAgICAgICAgZGF5T2ZZZWFyID0gd2Vla051bWJlciAqIDcgKyBkYXlPZldlZWsgLSBqYW51YXJ5NC5nZXRVVENEYXkoKSAtIDM7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdChpc284NjAxRXJyb3JNZXNzYWdlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdG1wMiA9IG5ldyBEYXRlKERhdGUuVVRDKHllYXIsIDAsIDEpKTsKICAgICAgICAgICAgICB0bXAyLnNldFVUQ0RhdGUoZGF5T2ZZZWFyKTsKICAgICAgICAgICAgICBtb250aCA9IHRtcDIuZ2V0VVRDTW9udGgoKSArIDE7CiAgICAgICAgICAgICAgZGF5ID0gdG1wMi5nZXRVVENEYXRlKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaW5MZWFwWWVhciA9IGlzTGVhcFllYXJfZGVmYXVsdCh5ZWFyKTsKICAgICAgICBpZiAobW9udGggPCAxIHx8IG1vbnRoID4gMTIgfHwgZGF5IDwgMSB8fCAobW9udGggIT09IDIgfHwgIWluTGVhcFllYXIpICYmIGRheSA+IGRheXNJbk1vbnRoW21vbnRoIC0gMV0gfHwgaW5MZWFwWWVhciAmJiBtb250aCA9PT0gMiAmJiBkYXkgPiBkYXlzSW5MZWFwRmVicnVhcnkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KGlzbzg2MDFFcnJvck1lc3NhZ2UpOwogICAgICAgIH0KICAgICAgICBsZXQgb2Zmc2V0SW5kZXg7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdCh0aW1lKSkgewogICAgICAgICAgdG9rZW5zID0gdGltZS5tYXRjaChtYXRjaEhvdXJzTWludXRlc1NlY29uZHMpOwogICAgICAgICAgaWYgKHRva2VucyAhPT0gbnVsbCkgewogICAgICAgICAgICBkYXNoQ291bnQgPSB0aW1lLnNwbGl0KCI6IikubGVuZ3RoIC0gMTsKICAgICAgICAgICAgaWYgKGRhc2hDb3VudCA+IDAgJiYgZGFzaENvdW50ICE9PSAyICYmIGRhc2hDb3VudCAhPT0gMykgewogICAgICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KGlzbzg2MDFFcnJvck1lc3NhZ2UpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGhvdXIgPSArdG9rZW5zWzFdOwogICAgICAgICAgICBtaW51dGUgPSArdG9rZW5zWzJdOwogICAgICAgICAgICBzZWNvbmQgPSArdG9rZW5zWzNdOwogICAgICAgICAgICBtaWxsaXNlY29uZCA9ICsodG9rZW5zWzRdIHx8IDApICogMWUzOwogICAgICAgICAgICBvZmZzZXRJbmRleCA9IDU7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0b2tlbnMgPSB0aW1lLm1hdGNoKG1hdGNoSG91cnNNaW51dGVzKTsKICAgICAgICAgICAgaWYgKHRva2VucyAhPT0gbnVsbCkgewogICAgICAgICAgICAgIGRhc2hDb3VudCA9IHRpbWUuc3BsaXQoIjoiKS5sZW5ndGggLSAxOwogICAgICAgICAgICAgIGlmIChkYXNoQ291bnQgPiAyKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdChpc284NjAxRXJyb3JNZXNzYWdlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaG91ciA9ICt0b2tlbnNbMV07CiAgICAgICAgICAgICAgbWludXRlID0gK3Rva2Vuc1syXTsKICAgICAgICAgICAgICBzZWNvbmQgPSArKHRva2Vuc1szXSB8fCAwKSAqIDYwOwogICAgICAgICAgICAgIG9mZnNldEluZGV4ID0gNDsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICB0b2tlbnMgPSB0aW1lLm1hdGNoKG1hdGNoSG91cnMpOwogICAgICAgICAgICAgIGlmICh0b2tlbnMgIT09IG51bGwpIHsKICAgICAgICAgICAgICAgIGhvdXIgPSArdG9rZW5zWzFdOwogICAgICAgICAgICAgICAgbWludXRlID0gKyh0b2tlbnNbMl0gfHwgMCkgKiA2MDsKICAgICAgICAgICAgICAgIG9mZnNldEluZGV4ID0gMzsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoaXNvODYwMUVycm9yTWVzc2FnZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZiAobWludXRlID49IDYwIHx8IHNlY29uZCA+PSA2MSB8fCBob3VyID4gMjQgfHwgaG91ciA9PT0gMjQgJiYgKG1pbnV0ZSA+IDAgfHwgc2Vjb25kID4gMCB8fCBtaWxsaXNlY29uZCA+IDApKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KGlzbzg2MDFFcnJvck1lc3NhZ2UpOwogICAgICAgICAgfQogICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gdG9rZW5zW29mZnNldEluZGV4XTsKICAgICAgICAgIGNvbnN0IG9mZnNldEhvdXJzID0gK3Rva2Vuc1tvZmZzZXRJbmRleCArIDFdOwogICAgICAgICAgY29uc3Qgb2Zmc2V0TWludXRlcyA9ICsodG9rZW5zW29mZnNldEluZGV4ICsgMl0gfHwgMCk7CiAgICAgICAgICBzd2l0Y2ggKG9mZnNldCkgewogICAgICAgICAgICBjYXNlICIrIjoKICAgICAgICAgICAgICBob3VyID0gaG91ciAtIG9mZnNldEhvdXJzOwogICAgICAgICAgICAgIG1pbnV0ZSA9IG1pbnV0ZSAtIG9mZnNldE1pbnV0ZXM7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgIi0iOgogICAgICAgICAgICAgIGhvdXIgPSBob3VyICsgb2Zmc2V0SG91cnM7CiAgICAgICAgICAgICAgbWludXRlID0gbWludXRlICsgb2Zmc2V0TWludXRlczsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAiWiI6CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgbWludXRlID0gbWludXRlICsgbmV3IERhdGUoCiAgICAgICAgICAgICAgICBEYXRlLlVUQyh5ZWFyLCBtb250aCAtIDEsIGRheSwgaG91ciwgbWludXRlKQogICAgICAgICAgICAgICkuZ2V0VGltZXpvbmVPZmZzZXQoKTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY29uc3QgaXNMZWFwU2Vjb25kID0gc2Vjb25kID09PSA2MDsKICAgICAgICBpZiAoaXNMZWFwU2Vjb25kKSB7CiAgICAgICAgICBzZWNvbmQtLTsKICAgICAgICB9CiAgICAgICAgd2hpbGUgKG1pbnV0ZSA+PSA2MCkgewogICAgICAgICAgbWludXRlIC09IDYwOwogICAgICAgICAgaG91cisrOwogICAgICAgIH0KICAgICAgICB3aGlsZSAoaG91ciA+PSAyNCkgewogICAgICAgICAgaG91ciAtPSAyNDsKICAgICAgICAgIGRheSsrOwogICAgICAgIH0KICAgICAgICB0bXAyID0gaW5MZWFwWWVhciAmJiBtb250aCA9PT0gMiA/IGRheXNJbkxlYXBGZWJydWFyeSA6IGRheXNJbk1vbnRoW21vbnRoIC0gMV07CiAgICAgICAgd2hpbGUgKGRheSA+IHRtcDIpIHsKICAgICAgICAgIGRheSAtPSB0bXAyOwogICAgICAgICAgbW9udGgrKzsKICAgICAgICAgIGlmIChtb250aCA+IDEyKSB7CiAgICAgICAgICAgIG1vbnRoIC09IDEyOwogICAgICAgICAgICB5ZWFyKys7CiAgICAgICAgICB9CiAgICAgICAgICB0bXAyID0gaW5MZWFwWWVhciAmJiBtb250aCA9PT0gMiA/IGRheXNJbkxlYXBGZWJydWFyeSA6IGRheXNJbk1vbnRoW21vbnRoIC0gMV07CiAgICAgICAgfQogICAgICAgIHdoaWxlIChtaW51dGUgPCAwKSB7CiAgICAgICAgICBtaW51dGUgKz0gNjA7CiAgICAgICAgICBob3VyLS07CiAgICAgICAgfQogICAgICAgIHdoaWxlIChob3VyIDwgMCkgewogICAgICAgICAgaG91ciArPSAyNDsKICAgICAgICAgIGRheS0tOwogICAgICAgIH0KICAgICAgICB3aGlsZSAoZGF5IDwgMSkgewogICAgICAgICAgbW9udGgtLTsKICAgICAgICAgIGlmIChtb250aCA8IDEpIHsKICAgICAgICAgICAgbW9udGggKz0gMTI7CiAgICAgICAgICAgIHllYXItLTsKICAgICAgICAgIH0KICAgICAgICAgIHRtcDIgPSBpbkxlYXBZZWFyICYmIG1vbnRoID09PSAyID8gZGF5c0luTGVhcEZlYnJ1YXJ5IDogZGF5c0luTW9udGhbbW9udGggLSAxXTsKICAgICAgICAgIGRheSArPSB0bXAyOwogICAgICAgIH0KICAgICAgICBjb25zdCBjb21wb25lbnRzID0gY29tcHV0ZUp1bGlhbkRhdGVDb21wb25lbnRzKAogICAgICAgICAgeWVhciwKICAgICAgICAgIG1vbnRoLAogICAgICAgICAgZGF5LAogICAgICAgICAgaG91ciwKICAgICAgICAgIG1pbnV0ZSwKICAgICAgICAgIHNlY29uZCwKICAgICAgICAgIG1pbGxpc2Vjb25kCiAgICAgICAgKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgSnVsaWFuRGF0ZShjb21wb25lbnRzWzBdLCBjb21wb25lbnRzWzFdLCBUaW1lU3RhbmRhcmRfZGVmYXVsdC5VVEMpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBzZXRDb21wb25lbnRzKGNvbXBvbmVudHNbMF0sIGNvbXBvbmVudHNbMV0sIHJlc3VsdCk7CiAgICAgICAgICBjb252ZXJ0VXRjVG9UYWkocmVzdWx0KTsKICAgICAgICB9CiAgICAgICAgaWYgKGlzTGVhcFNlY29uZCkgewogICAgICAgICAgSnVsaWFuRGF0ZS5hZGRTZWNvbmRzKHJlc3VsdCwgMSwgcmVzdWx0KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgSnVsaWFuRGF0ZS5ub3cgPSBmdW5jdGlvbihyZXN1bHQpIHsKICAgICAgICByZXR1cm4gSnVsaWFuRGF0ZS5mcm9tRGF0ZSgvKiBAX19QVVJFX18gKi8gbmV3IERhdGUoKSwgcmVzdWx0KTsKICAgICAgfTsKICAgICAgdG9HcmVnb3JpYW5EYXRlU2NyYXRjaCA9IG5ldyBKdWxpYW5EYXRlKDAsIDAsIFRpbWVTdGFuZGFyZF9kZWZhdWx0LlRBSSk7CiAgICAgIEp1bGlhbkRhdGUudG9HcmVnb3JpYW5EYXRlID0gZnVuY3Rpb24oanVsaWFuRGF0ZSwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoanVsaWFuRGF0ZSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJqdWxpYW5EYXRlIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBsZXQgaXNMZWFwU2Vjb25kID0gZmFsc2U7CiAgICAgICAgbGV0IHRoaXNVdGMgPSBjb252ZXJ0VGFpVG9VdGMoanVsaWFuRGF0ZSwgdG9HcmVnb3JpYW5EYXRlU2NyYXRjaCk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQodGhpc1V0YykpIHsKICAgICAgICAgIEp1bGlhbkRhdGUuYWRkU2Vjb25kcyhqdWxpYW5EYXRlLCAtMSwgdG9HcmVnb3JpYW5EYXRlU2NyYXRjaCk7CiAgICAgICAgICB0aGlzVXRjID0gY29udmVydFRhaVRvVXRjKHRvR3JlZ29yaWFuRGF0ZVNjcmF0Y2gsIHRvR3JlZ29yaWFuRGF0ZVNjcmF0Y2gpOwogICAgICAgICAgaXNMZWFwU2Vjb25kID0gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgbGV0IGp1bGlhbkRheU51bWJlciA9IHRoaXNVdGMuZGF5TnVtYmVyOwogICAgICAgIGNvbnN0IHNlY29uZHNPZkRheSA9IHRoaXNVdGMuc2Vjb25kc09mRGF5OwogICAgICAgIGlmIChzZWNvbmRzT2ZEYXkgPj0gNDMyMDApIHsKICAgICAgICAgIGp1bGlhbkRheU51bWJlciArPSAxOwogICAgICAgIH0KICAgICAgICBsZXQgTCA9IGp1bGlhbkRheU51bWJlciArIDY4NTY5IHwgMDsKICAgICAgICBjb25zdCBOID0gNCAqIEwgLyAxNDYwOTcgfCAwOwogICAgICAgIEwgPSBMIC0gKCgxNDYwOTcgKiBOICsgMykgLyA0IHwgMCkgfCAwOwogICAgICAgIGNvbnN0IEkgPSA0ZTMgKiAoTCArIDEpIC8gMTQ2MTAwMSB8IDA7CiAgICAgICAgTCA9IEwgLSAoMTQ2MSAqIEkgLyA0IHwgMCkgKyAzMSB8IDA7CiAgICAgICAgY29uc3QgSiA9IDgwICogTCAvIDI0NDcgfCAwOwogICAgICAgIGNvbnN0IGRheSA9IEwgLSAoMjQ0NyAqIEogLyA4MCB8IDApIHwgMDsKICAgICAgICBMID0gSiAvIDExIHwgMDsKICAgICAgICBjb25zdCBtb250aCA9IEogKyAyIC0gMTIgKiBMIHwgMDsKICAgICAgICBjb25zdCB5ZWFyID0gMTAwICogKE4gLSA0OSkgKyBJICsgTCB8IDA7CiAgICAgICAgbGV0IGhvdXIgPSBzZWNvbmRzT2ZEYXkgLyBUaW1lQ29uc3RhbnRzX2RlZmF1bHQuU0VDT05EU19QRVJfSE9VUiB8IDA7CiAgICAgICAgbGV0IHJlbWFpbmluZ1NlY29uZHMgPSBzZWNvbmRzT2ZEYXkgLSBob3VyICogVGltZUNvbnN0YW50c19kZWZhdWx0LlNFQ09ORFNfUEVSX0hPVVI7CiAgICAgICAgY29uc3QgbWludXRlID0gcmVtYWluaW5nU2Vjb25kcyAvIFRpbWVDb25zdGFudHNfZGVmYXVsdC5TRUNPTkRTX1BFUl9NSU5VVEUgfCAwOwogICAgICAgIHJlbWFpbmluZ1NlY29uZHMgPSByZW1haW5pbmdTZWNvbmRzIC0gbWludXRlICogVGltZUNvbnN0YW50c19kZWZhdWx0LlNFQ09ORFNfUEVSX01JTlVURTsKICAgICAgICBsZXQgc2Vjb25kID0gcmVtYWluaW5nU2Vjb25kcyB8IDA7CiAgICAgICAgY29uc3QgbWlsbGlzZWNvbmQgPSAocmVtYWluaW5nU2Vjb25kcyAtIHNlY29uZCkgLyBUaW1lQ29uc3RhbnRzX2RlZmF1bHQuU0VDT05EU19QRVJfTUlMTElTRUNPTkQ7CiAgICAgICAgaG91ciArPSAxMjsKICAgICAgICBpZiAoaG91ciA+IDIzKSB7CiAgICAgICAgICBob3VyIC09IDI0OwogICAgICAgIH0KICAgICAgICBpZiAoaXNMZWFwU2Vjb25kKSB7CiAgICAgICAgICBzZWNvbmQgKz0gMTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBHcmVnb3JpYW5EYXRlX2RlZmF1bHQoCiAgICAgICAgICAgIHllYXIsCiAgICAgICAgICAgIG1vbnRoLAogICAgICAgICAgICBkYXksCiAgICAgICAgICAgIGhvdXIsCiAgICAgICAgICAgIG1pbnV0ZSwKICAgICAgICAgICAgc2Vjb25kLAogICAgICAgICAgICBtaWxsaXNlY29uZCwKICAgICAgICAgICAgaXNMZWFwU2Vjb25kCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICByZXN1bHQueWVhciA9IHllYXI7CiAgICAgICAgcmVzdWx0Lm1vbnRoID0gbW9udGg7CiAgICAgICAgcmVzdWx0LmRheSA9IGRheTsKICAgICAgICByZXN1bHQuaG91ciA9IGhvdXI7CiAgICAgICAgcmVzdWx0Lm1pbnV0ZSA9IG1pbnV0ZTsKICAgICAgICByZXN1bHQuc2Vjb25kID0gc2Vjb25kOwogICAgICAgIHJlc3VsdC5taWxsaXNlY29uZCA9IG1pbGxpc2Vjb25kOwogICAgICAgIHJlc3VsdC5pc0xlYXBTZWNvbmQgPSBpc0xlYXBTZWNvbmQ7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgSnVsaWFuRGF0ZS50b0RhdGUgPSBmdW5jdGlvbihqdWxpYW5EYXRlKSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoanVsaWFuRGF0ZSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJqdWxpYW5EYXRlIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBnRGF0ZSA9IEp1bGlhbkRhdGUudG9HcmVnb3JpYW5EYXRlKGp1bGlhbkRhdGUsIGdyZWdvcmlhbkRhdGVTY3JhdGNoKTsKICAgICAgICBsZXQgc2Vjb25kID0gZ0RhdGUuc2Vjb25kOwogICAgICAgIGlmIChnRGF0ZS5pc0xlYXBTZWNvbmQpIHsKICAgICAgICAgIHNlY29uZCAtPSAxOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3IERhdGUoCiAgICAgICAgICBEYXRlLlVUQygKICAgICAgICAgICAgZ0RhdGUueWVhciwKICAgICAgICAgICAgZ0RhdGUubW9udGggLSAxLAogICAgICAgICAgICBnRGF0ZS5kYXksCiAgICAgICAgICAgIGdEYXRlLmhvdXIsCiAgICAgICAgICAgIGdEYXRlLm1pbnV0ZSwKICAgICAgICAgICAgc2Vjb25kLAogICAgICAgICAgICBnRGF0ZS5taWxsaXNlY29uZAogICAgICAgICAgKQogICAgICAgICk7CiAgICAgIH07CiAgICAgIEp1bGlhbkRhdGUudG9Jc284NjAxID0gZnVuY3Rpb24oanVsaWFuRGF0ZSwgcHJlY2lzaW9uKSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoanVsaWFuRGF0ZSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJqdWxpYW5EYXRlIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBnRGF0ZSA9IEp1bGlhbkRhdGUudG9HcmVnb3JpYW5EYXRlKGp1bGlhbkRhdGUsIGdyZWdvcmlhbkRhdGVTY3JhdGNoKTsKICAgICAgICBsZXQgeWVhciA9IGdEYXRlLnllYXI7CiAgICAgICAgbGV0IG1vbnRoID0gZ0RhdGUubW9udGg7CiAgICAgICAgbGV0IGRheSA9IGdEYXRlLmRheTsKICAgICAgICBsZXQgaG91ciA9IGdEYXRlLmhvdXI7CiAgICAgICAgY29uc3QgbWludXRlID0gZ0RhdGUubWludXRlOwogICAgICAgIGNvbnN0IHNlY29uZCA9IGdEYXRlLnNlY29uZDsKICAgICAgICBjb25zdCBtaWxsaXNlY29uZCA9IGdEYXRlLm1pbGxpc2Vjb25kOwogICAgICAgIGlmICh5ZWFyID09PSAxZTQgJiYgbW9udGggPT09IDEgJiYgZGF5ID09PSAxICYmIGhvdXIgPT09IDAgJiYgbWludXRlID09PSAwICYmIHNlY29uZCA9PT0gMCAmJiBtaWxsaXNlY29uZCA9PT0gMCkgewogICAgICAgICAgeWVhciA9IDk5OTk7CiAgICAgICAgICBtb250aCA9IDEyOwogICAgICAgICAgZGF5ID0gMzE7CiAgICAgICAgICBob3VyID0gMjQ7CiAgICAgICAgfQogICAgICAgIGxldCBtaWxsaXNlY29uZFN0cjsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwcmVjaXNpb24pICYmIG1pbGxpc2Vjb25kICE9PSAwKSB7CiAgICAgICAgICBjb25zdCBtaWxsaXNlY29uZEh1bmRyZWRzID0gbWlsbGlzZWNvbmQgKiAwLjAxOwogICAgICAgICAgbWlsbGlzZWNvbmRTdHIgPSBtaWxsaXNlY29uZEh1bmRyZWRzIDwgMWUtNiA/IG1pbGxpc2Vjb25kSHVuZHJlZHMudG9GaXhlZCgyMCkucmVwbGFjZSgiLiIsICIiKS5yZXBsYWNlKC8wKyQvLCAiIikgOiBtaWxsaXNlY29uZEh1bmRyZWRzLnRvU3RyaW5nKCkucmVwbGFjZSgiLiIsICIiKTsKICAgICAgICAgIHJldHVybiBgJHt5ZWFyLnRvU3RyaW5nKCkucGFkU3RhcnQoNCwgIjAiKX0tJHttb250aC50b1N0cmluZygpLnBhZFN0YXJ0KDIsICIwIil9LSR7ZGF5LnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgIjAiKX1UJHtob3VyLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgIjAiKX06JHttaW51dGUudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAiMCIpfToke3NlY29uZC50b1N0cmluZygpLnBhZFN0YXJ0KDIsICIwIil9LiR7bWlsbGlzZWNvbmRTdHJ9WmA7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHByZWNpc2lvbikgfHwgcHJlY2lzaW9uID09PSAwKSB7CiAgICAgICAgICByZXR1cm4gYCR7eWVhci50b1N0cmluZygpLnBhZFN0YXJ0KDQsICIwIil9LSR7bW9udGgudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAiMCIpfS0ke2RheS50b1N0cmluZygpLnBhZFN0YXJ0KDIsICIwIil9VCR7aG91ci50b1N0cmluZygpLnBhZFN0YXJ0KDIsICIwIil9OiR7bWludXRlLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgIjAiKX06JHtzZWNvbmQudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAiMCIpfVpgOwogICAgICAgIH0KICAgICAgICBtaWxsaXNlY29uZFN0ciA9IChtaWxsaXNlY29uZCAqIDAuMDEpLnRvRml4ZWQocHJlY2lzaW9uKS5yZXBsYWNlKCIuIiwgIiIpLnNsaWNlKDAsIHByZWNpc2lvbik7CiAgICAgICAgcmV0dXJuIGAke3llYXIudG9TdHJpbmcoKS5wYWRTdGFydCg0LCAiMCIpfS0ke21vbnRoLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgIjAiKX0tJHtkYXkudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAiMCIpfVQke2hvdXIudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAiMCIpfToke21pbnV0ZS50b1N0cmluZygpLnBhZFN0YXJ0KDIsICIwIil9OiR7c2Vjb25kLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgIjAiKX0uJHttaWxsaXNlY29uZFN0cn1aYDsKICAgICAgfTsKICAgICAgSnVsaWFuRGF0ZS5jbG9uZSA9IGZ1bmN0aW9uKGp1bGlhbkRhdGUsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGp1bGlhbkRhdGUpKSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IEp1bGlhbkRhdGUoCiAgICAgICAgICAgIGp1bGlhbkRhdGUuZGF5TnVtYmVyLAogICAgICAgICAgICBqdWxpYW5EYXRlLnNlY29uZHNPZkRheSwKICAgICAgICAgICAgVGltZVN0YW5kYXJkX2RlZmF1bHQuVEFJCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICByZXN1bHQuZGF5TnVtYmVyID0ganVsaWFuRGF0ZS5kYXlOdW1iZXI7CiAgICAgICAgcmVzdWx0LnNlY29uZHNPZkRheSA9IGp1bGlhbkRhdGUuc2Vjb25kc09mRGF5OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIEp1bGlhbkRhdGUuY29tcGFyZSA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQobGVmdCkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJsZWZ0IGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyaWdodCkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJyaWdodCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgY29uc3QganVsaWFuRGF5TnVtYmVyRGlmZmVyZW5jZSA9IGxlZnQuZGF5TnVtYmVyIC0gcmlnaHQuZGF5TnVtYmVyOwogICAgICAgIGlmIChqdWxpYW5EYXlOdW1iZXJEaWZmZXJlbmNlICE9PSAwKSB7CiAgICAgICAgICByZXR1cm4ganVsaWFuRGF5TnVtYmVyRGlmZmVyZW5jZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGxlZnQuc2Vjb25kc09mRGF5IC0gcmlnaHQuc2Vjb25kc09mRGF5OwogICAgICB9OwogICAgICBKdWxpYW5EYXRlLmVxdWFscyA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7CiAgICAgICAgcmV0dXJuIGxlZnQgPT09IHJpZ2h0IHx8IGRlZmluZWRfZGVmYXVsdChsZWZ0KSAmJiBkZWZpbmVkX2RlZmF1bHQocmlnaHQpICYmIGxlZnQuZGF5TnVtYmVyID09PSByaWdodC5kYXlOdW1iZXIgJiYgbGVmdC5zZWNvbmRzT2ZEYXkgPT09IHJpZ2h0LnNlY29uZHNPZkRheTsKICAgICAgfTsKICAgICAgSnVsaWFuRGF0ZS5lcXVhbHNFcHNpbG9uID0gZnVuY3Rpb24obGVmdCwgcmlnaHQsIGVwc2lsb24pIHsKICAgICAgICBlcHNpbG9uID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoZXBzaWxvbiwgMCk7CiAgICAgICAgcmV0dXJuIGxlZnQgPT09IHJpZ2h0IHx8IGRlZmluZWRfZGVmYXVsdChsZWZ0KSAmJiBkZWZpbmVkX2RlZmF1bHQocmlnaHQpICYmIE1hdGguYWJzKEp1bGlhbkRhdGUuc2Vjb25kc0RpZmZlcmVuY2UobGVmdCwgcmlnaHQpKSA8PSBlcHNpbG9uOwogICAgICB9OwogICAgICBKdWxpYW5EYXRlLnRvdGFsRGF5cyA9IGZ1bmN0aW9uKGp1bGlhbkRhdGUpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChqdWxpYW5EYXRlKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImp1bGlhbkRhdGUgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIHJldHVybiBqdWxpYW5EYXRlLmRheU51bWJlciArIGp1bGlhbkRhdGUuc2Vjb25kc09mRGF5IC8gVGltZUNvbnN0YW50c19kZWZhdWx0LlNFQ09ORFNfUEVSX0RBWTsKICAgICAgfTsKICAgICAgSnVsaWFuRGF0ZS5zZWNvbmRzRGlmZmVyZW5jZSA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQobGVmdCkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJsZWZ0IGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyaWdodCkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJyaWdodCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgZGF5RGlmZmVyZW5jZSA9IChsZWZ0LmRheU51bWJlciAtIHJpZ2h0LmRheU51bWJlcikgKiBUaW1lQ29uc3RhbnRzX2RlZmF1bHQuU0VDT05EU19QRVJfREFZOwogICAgICAgIHJldHVybiBkYXlEaWZmZXJlbmNlICsgKGxlZnQuc2Vjb25kc09mRGF5IC0gcmlnaHQuc2Vjb25kc09mRGF5KTsKICAgICAgfTsKICAgICAgSnVsaWFuRGF0ZS5kYXlzRGlmZmVyZW5jZSA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQobGVmdCkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJsZWZ0IGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyaWdodCkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJyaWdodCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgZGF5RGlmZmVyZW5jZSA9IGxlZnQuZGF5TnVtYmVyIC0gcmlnaHQuZGF5TnVtYmVyOwogICAgICAgIGNvbnN0IHNlY29uZERpZmZlcmVuY2UgPSAobGVmdC5zZWNvbmRzT2ZEYXkgLSByaWdodC5zZWNvbmRzT2ZEYXkpIC8gVGltZUNvbnN0YW50c19kZWZhdWx0LlNFQ09ORFNfUEVSX0RBWTsKICAgICAgICByZXR1cm4gZGF5RGlmZmVyZW5jZSArIHNlY29uZERpZmZlcmVuY2U7CiAgICAgIH07CiAgICAgIEp1bGlhbkRhdGUuY29tcHV0ZVRhaU1pbnVzVXRjID0gZnVuY3Rpb24oanVsaWFuRGF0ZSkgewogICAgICAgIGJpbmFyeVNlYXJjaFNjcmF0Y2hMZWFwU2Vjb25kLmp1bGlhbkRhdGUgPSBqdWxpYW5EYXRlOwogICAgICAgIGNvbnN0IGxlYXBTZWNvbmRzID0gSnVsaWFuRGF0ZS5sZWFwU2Vjb25kczsKICAgICAgICBsZXQgaW5kZXggPSBiaW5hcnlTZWFyY2hfZGVmYXVsdCgKICAgICAgICAgIGxlYXBTZWNvbmRzLAogICAgICAgICAgYmluYXJ5U2VhcmNoU2NyYXRjaExlYXBTZWNvbmQsCiAgICAgICAgICBjb21wYXJlTGVhcFNlY29uZERhdGVzCiAgICAgICAgKTsKICAgICAgICBpZiAoaW5kZXggPCAwKSB7CiAgICAgICAgICBpbmRleCA9IH5pbmRleDsKICAgICAgICAgIC0taW5kZXg7CiAgICAgICAgICBpZiAoaW5kZXggPCAwKSB7CiAgICAgICAgICAgIGluZGV4ID0gMDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGxlYXBTZWNvbmRzW2luZGV4XS5vZmZzZXQ7CiAgICAgIH07CiAgICAgIEp1bGlhbkRhdGUuYWRkU2Vjb25kcyA9IGZ1bmN0aW9uKGp1bGlhbkRhdGUsIHNlY29uZHMsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGp1bGlhbkRhdGUpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgianVsaWFuRGF0ZSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoc2Vjb25kcykpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJzZWNvbmRzIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgicmVzdWx0IGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gc2V0Q29tcG9uZW50cygKICAgICAgICAgIGp1bGlhbkRhdGUuZGF5TnVtYmVyLAogICAgICAgICAganVsaWFuRGF0ZS5zZWNvbmRzT2ZEYXkgKyBzZWNvbmRzLAogICAgICAgICAgcmVzdWx0CiAgICAgICAgKTsKICAgICAgfTsKICAgICAgSnVsaWFuRGF0ZS5hZGRNaW51dGVzID0gZnVuY3Rpb24oanVsaWFuRGF0ZSwgbWludXRlcywgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoanVsaWFuRGF0ZSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJqdWxpYW5EYXRlIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChtaW51dGVzKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoIm1pbnV0ZXMgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJyZXN1bHQgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGNvbnN0IG5ld1NlY29uZHNPZkRheSA9IGp1bGlhbkRhdGUuc2Vjb25kc09mRGF5ICsgbWludXRlcyAqIFRpbWVDb25zdGFudHNfZGVmYXVsdC5TRUNPTkRTX1BFUl9NSU5VVEU7CiAgICAgICAgcmV0dXJuIHNldENvbXBvbmVudHMoanVsaWFuRGF0ZS5kYXlOdW1iZXIsIG5ld1NlY29uZHNPZkRheSwgcmVzdWx0KTsKICAgICAgfTsKICAgICAgSnVsaWFuRGF0ZS5hZGRIb3VycyA9IGZ1bmN0aW9uKGp1bGlhbkRhdGUsIGhvdXJzLCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChqdWxpYW5EYXRlKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImp1bGlhbkRhdGUgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGhvdXJzKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImhvdXJzIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgicmVzdWx0IGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBuZXdTZWNvbmRzT2ZEYXkgPSBqdWxpYW5EYXRlLnNlY29uZHNPZkRheSArIGhvdXJzICogVGltZUNvbnN0YW50c19kZWZhdWx0LlNFQ09ORFNfUEVSX0hPVVI7CiAgICAgICAgcmV0dXJuIHNldENvbXBvbmVudHMoanVsaWFuRGF0ZS5kYXlOdW1iZXIsIG5ld1NlY29uZHNPZkRheSwgcmVzdWx0KTsKICAgICAgfTsKICAgICAgSnVsaWFuRGF0ZS5hZGREYXlzID0gZnVuY3Rpb24oanVsaWFuRGF0ZSwgZGF5cywgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoanVsaWFuRGF0ZSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJqdWxpYW5EYXRlIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChkYXlzKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImRheXMgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJyZXN1bHQgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGNvbnN0IG5ld0p1bGlhbkRheU51bWJlciA9IGp1bGlhbkRhdGUuZGF5TnVtYmVyICsgZGF5czsKICAgICAgICByZXR1cm4gc2V0Q29tcG9uZW50cyhuZXdKdWxpYW5EYXlOdW1iZXIsIGp1bGlhbkRhdGUuc2Vjb25kc09mRGF5LCByZXN1bHQpOwogICAgICB9OwogICAgICBKdWxpYW5EYXRlLmxlc3NUaGFuID0gZnVuY3Rpb24obGVmdCwgcmlnaHQpIHsKICAgICAgICByZXR1cm4gSnVsaWFuRGF0ZS5jb21wYXJlKGxlZnQsIHJpZ2h0KSA8IDA7CiAgICAgIH07CiAgICAgIEp1bGlhbkRhdGUubGVzc1RoYW5PckVxdWFscyA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7CiAgICAgICAgcmV0dXJuIEp1bGlhbkRhdGUuY29tcGFyZShsZWZ0LCByaWdodCkgPD0gMDsKICAgICAgfTsKICAgICAgSnVsaWFuRGF0ZS5ncmVhdGVyVGhhbiA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7CiAgICAgICAgcmV0dXJuIEp1bGlhbkRhdGUuY29tcGFyZShsZWZ0LCByaWdodCkgPiAwOwogICAgICB9OwogICAgICBKdWxpYW5EYXRlLmdyZWF0ZXJUaGFuT3JFcXVhbHMgPSBmdW5jdGlvbihsZWZ0LCByaWdodCkgewogICAgICAgIHJldHVybiBKdWxpYW5EYXRlLmNvbXBhcmUobGVmdCwgcmlnaHQpID49IDA7CiAgICAgIH07CiAgICAgIEp1bGlhbkRhdGUucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24ocmVzdWx0KSB7CiAgICAgICAgcmV0dXJuIEp1bGlhbkRhdGUuY2xvbmUodGhpcywgcmVzdWx0KTsKICAgICAgfTsKICAgICAgSnVsaWFuRGF0ZS5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24ocmlnaHQpIHsKICAgICAgICByZXR1cm4gSnVsaWFuRGF0ZS5lcXVhbHModGhpcywgcmlnaHQpOwogICAgICB9OwogICAgICBKdWxpYW5EYXRlLnByb3RvdHlwZS5lcXVhbHNFcHNpbG9uID0gZnVuY3Rpb24ocmlnaHQsIGVwc2lsb24pIHsKICAgICAgICByZXR1cm4gSnVsaWFuRGF0ZS5lcXVhbHNFcHNpbG9uKHRoaXMsIHJpZ2h0LCBlcHNpbG9uKTsKICAgICAgfTsKICAgICAgSnVsaWFuRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gSnVsaWFuRGF0ZS50b0lzbzg2MDEodGhpcyk7CiAgICAgIH07CiAgICAgIEp1bGlhbkRhdGUubGVhcFNlY29uZHMgPSBbCiAgICAgICAgbmV3IExlYXBTZWNvbmRfZGVmYXVsdChuZXcgSnVsaWFuRGF0ZSgyNDQxMzE3LCA0MzIxMCwgVGltZVN0YW5kYXJkX2RlZmF1bHQuVEFJKSwgMTApLAogICAgICAgIC8vIEphbnVhcnkgMSwgMTk3MiAwMDowMDowMCBVVEMKICAgICAgICBuZXcgTGVhcFNlY29uZF9kZWZhdWx0KG5ldyBKdWxpYW5EYXRlKDI0NDE0OTksIDQzMjExLCBUaW1lU3RhbmRhcmRfZGVmYXVsdC5UQUkpLCAxMSksCiAgICAgICAgLy8gSnVseSAxLCAxOTcyIDAwOjAwOjAwIFVUQwogICAgICAgIG5ldyBMZWFwU2Vjb25kX2RlZmF1bHQobmV3IEp1bGlhbkRhdGUoMjQ0MTY4MywgNDMyMTIsIFRpbWVTdGFuZGFyZF9kZWZhdWx0LlRBSSksIDEyKSwKICAgICAgICAvLyBKYW51YXJ5IDEsIDE5NzMgMDA6MDA6MDAgVVRDCiAgICAgICAgbmV3IExlYXBTZWNvbmRfZGVmYXVsdChuZXcgSnVsaWFuRGF0ZSgyNDQyMDQ4LCA0MzIxMywgVGltZVN0YW5kYXJkX2RlZmF1bHQuVEFJKSwgMTMpLAogICAgICAgIC8vIEphbnVhcnkgMSwgMTk3NCAwMDowMDowMCBVVEMKICAgICAgICBuZXcgTGVhcFNlY29uZF9kZWZhdWx0KG5ldyBKdWxpYW5EYXRlKDI0NDI0MTMsIDQzMjE0LCBUaW1lU3RhbmRhcmRfZGVmYXVsdC5UQUkpLCAxNCksCiAgICAgICAgLy8gSmFudWFyeSAxLCAxOTc1IDAwOjAwOjAwIFVUQwogICAgICAgIG5ldyBMZWFwU2Vjb25kX2RlZmF1bHQobmV3IEp1bGlhbkRhdGUoMjQ0Mjc3OCwgNDMyMTUsIFRpbWVTdGFuZGFyZF9kZWZhdWx0LlRBSSksIDE1KSwKICAgICAgICAvLyBKYW51YXJ5IDEsIDE5NzYgMDA6MDA6MDAgVVRDCiAgICAgICAgbmV3IExlYXBTZWNvbmRfZGVmYXVsdChuZXcgSnVsaWFuRGF0ZSgyNDQzMTQ0LCA0MzIxNiwgVGltZVN0YW5kYXJkX2RlZmF1bHQuVEFJKSwgMTYpLAogICAgICAgIC8vIEphbnVhcnkgMSwgMTk3NyAwMDowMDowMCBVVEMKICAgICAgICBuZXcgTGVhcFNlY29uZF9kZWZhdWx0KG5ldyBKdWxpYW5EYXRlKDI0NDM1MDksIDQzMjE3LCBUaW1lU3RhbmRhcmRfZGVmYXVsdC5UQUkpLCAxNyksCiAgICAgICAgLy8gSmFudWFyeSAxLCAxOTc4IDAwOjAwOjAwIFVUQwogICAgICAgIG5ldyBMZWFwU2Vjb25kX2RlZmF1bHQobmV3IEp1bGlhbkRhdGUoMjQ0Mzg3NCwgNDMyMTgsIFRpbWVTdGFuZGFyZF9kZWZhdWx0LlRBSSksIDE4KSwKICAgICAgICAvLyBKYW51YXJ5IDEsIDE5NzkgMDA6MDA6MDAgVVRDCiAgICAgICAgbmV3IExlYXBTZWNvbmRfZGVmYXVsdChuZXcgSnVsaWFuRGF0ZSgyNDQ0MjM5LCA0MzIxOSwgVGltZVN0YW5kYXJkX2RlZmF1bHQuVEFJKSwgMTkpLAogICAgICAgIC8vIEphbnVhcnkgMSwgMTk4MCAwMDowMDowMCBVVEMKICAgICAgICBuZXcgTGVhcFNlY29uZF9kZWZhdWx0KG5ldyBKdWxpYW5EYXRlKDI0NDQ3ODYsIDQzMjIwLCBUaW1lU3RhbmRhcmRfZGVmYXVsdC5UQUkpLCAyMCksCiAgICAgICAgLy8gSnVseSAxLCAxOTgxIDAwOjAwOjAwIFVUQwogICAgICAgIG5ldyBMZWFwU2Vjb25kX2RlZmF1bHQobmV3IEp1bGlhbkRhdGUoMjQ0NTE1MSwgNDMyMjEsIFRpbWVTdGFuZGFyZF9kZWZhdWx0LlRBSSksIDIxKSwKICAgICAgICAvLyBKdWx5IDEsIDE5ODIgMDA6MDA6MDAgVVRDCiAgICAgICAgbmV3IExlYXBTZWNvbmRfZGVmYXVsdChuZXcgSnVsaWFuRGF0ZSgyNDQ1NTE2LCA0MzIyMiwgVGltZVN0YW5kYXJkX2RlZmF1bHQuVEFJKSwgMjIpLAogICAgICAgIC8vIEp1bHkgMSwgMTk4MyAwMDowMDowMCBVVEMKICAgICAgICBuZXcgTGVhcFNlY29uZF9kZWZhdWx0KG5ldyBKdWxpYW5EYXRlKDI0NDYyNDcsIDQzMjIzLCBUaW1lU3RhbmRhcmRfZGVmYXVsdC5UQUkpLCAyMyksCiAgICAgICAgLy8gSnVseSAxLCAxOTg1IDAwOjAwOjAwIFVUQwogICAgICAgIG5ldyBMZWFwU2Vjb25kX2RlZmF1bHQobmV3IEp1bGlhbkRhdGUoMjQ0NzE2MSwgNDMyMjQsIFRpbWVTdGFuZGFyZF9kZWZhdWx0LlRBSSksIDI0KSwKICAgICAgICAvLyBKYW51YXJ5IDEsIDE5ODggMDA6MDA6MDAgVVRDCiAgICAgICAgbmV3IExlYXBTZWNvbmRfZGVmYXVsdChuZXcgSnVsaWFuRGF0ZSgyNDQ3ODkyLCA0MzIyNSwgVGltZVN0YW5kYXJkX2RlZmF1bHQuVEFJKSwgMjUpLAogICAgICAgIC8vIEphbnVhcnkgMSwgMTk5MCAwMDowMDowMCBVVEMKICAgICAgICBuZXcgTGVhcFNlY29uZF9kZWZhdWx0KG5ldyBKdWxpYW5EYXRlKDI0NDgyNTcsIDQzMjI2LCBUaW1lU3RhbmRhcmRfZGVmYXVsdC5UQUkpLCAyNiksCiAgICAgICAgLy8gSmFudWFyeSAxLCAxOTkxIDAwOjAwOjAwIFVUQwogICAgICAgIG5ldyBMZWFwU2Vjb25kX2RlZmF1bHQobmV3IEp1bGlhbkRhdGUoMjQ0ODgwNCwgNDMyMjcsIFRpbWVTdGFuZGFyZF9kZWZhdWx0LlRBSSksIDI3KSwKICAgICAgICAvLyBKdWx5IDEsIDE5OTIgMDA6MDA6MDAgVVRDCiAgICAgICAgbmV3IExlYXBTZWNvbmRfZGVmYXVsdChuZXcgSnVsaWFuRGF0ZSgyNDQ5MTY5LCA0MzIyOCwgVGltZVN0YW5kYXJkX2RlZmF1bHQuVEFJKSwgMjgpLAogICAgICAgIC8vIEp1bHkgMSwgMTk5MyAwMDowMDowMCBVVEMKICAgICAgICBuZXcgTGVhcFNlY29uZF9kZWZhdWx0KG5ldyBKdWxpYW5EYXRlKDI0NDk1MzQsIDQzMjI5LCBUaW1lU3RhbmRhcmRfZGVmYXVsdC5UQUkpLCAyOSksCiAgICAgICAgLy8gSnVseSAxLCAxOTk0IDAwOjAwOjAwIFVUQwogICAgICAgIG5ldyBMZWFwU2Vjb25kX2RlZmF1bHQobmV3IEp1bGlhbkRhdGUoMjQ1MDA4MywgNDMyMzAsIFRpbWVTdGFuZGFyZF9kZWZhdWx0LlRBSSksIDMwKSwKICAgICAgICAvLyBKYW51YXJ5IDEsIDE5OTYgMDA6MDA6MDAgVVRDCiAgICAgICAgbmV3IExlYXBTZWNvbmRfZGVmYXVsdChuZXcgSnVsaWFuRGF0ZSgyNDUwNjMwLCA0MzIzMSwgVGltZVN0YW5kYXJkX2RlZmF1bHQuVEFJKSwgMzEpLAogICAgICAgIC8vIEp1bHkgMSwgMTk5NyAwMDowMDowMCBVVEMKICAgICAgICBuZXcgTGVhcFNlY29uZF9kZWZhdWx0KG5ldyBKdWxpYW5EYXRlKDI0NTExNzksIDQzMjMyLCBUaW1lU3RhbmRhcmRfZGVmYXVsdC5UQUkpLCAzMiksCiAgICAgICAgLy8gSmFudWFyeSAxLCAxOTk5IDAwOjAwOjAwIFVUQwogICAgICAgIG5ldyBMZWFwU2Vjb25kX2RlZmF1bHQobmV3IEp1bGlhbkRhdGUoMjQ1MzczNiwgNDMyMzMsIFRpbWVTdGFuZGFyZF9kZWZhdWx0LlRBSSksIDMzKSwKICAgICAgICAvLyBKYW51YXJ5IDEsIDIwMDYgMDA6MDA6MDAgVVRDCiAgICAgICAgbmV3IExlYXBTZWNvbmRfZGVmYXVsdChuZXcgSnVsaWFuRGF0ZSgyNDU0ODMyLCA0MzIzNCwgVGltZVN0YW5kYXJkX2RlZmF1bHQuVEFJKSwgMzQpLAogICAgICAgIC8vIEphbnVhcnkgMSwgMjAwOSAwMDowMDowMCBVVEMKICAgICAgICBuZXcgTGVhcFNlY29uZF9kZWZhdWx0KG5ldyBKdWxpYW5EYXRlKDI0NTYxMDksIDQzMjM1LCBUaW1lU3RhbmRhcmRfZGVmYXVsdC5UQUkpLCAzNSksCiAgICAgICAgLy8gSnVseSAxLCAyMDEyIDAwOjAwOjAwIFVUQwogICAgICAgIG5ldyBMZWFwU2Vjb25kX2RlZmF1bHQobmV3IEp1bGlhbkRhdGUoMjQ1NzIwNCwgNDMyMzYsIFRpbWVTdGFuZGFyZF9kZWZhdWx0LlRBSSksIDM2KSwKICAgICAgICAvLyBKdWx5IDEsIDIwMTUgMDA6MDA6MDAgVVRDCiAgICAgICAgbmV3IExlYXBTZWNvbmRfZGVmYXVsdChuZXcgSnVsaWFuRGF0ZSgyNDU3NzU0LCA0MzIzNywgVGltZVN0YW5kYXJkX2RlZmF1bHQuVEFJKSwgMzcpCiAgICAgICAgLy8gSmFudWFyeSAxLCAyMDE3IDAwOjAwOjAwIFVUQwogICAgICBdOwogICAgICBKdWxpYW5EYXRlX2RlZmF1bHQgPSBKdWxpYW5EYXRlOwogICAgfQogIH0pOwoKICAvLyBub2RlX21vZHVsZXMvdXJpanMvc3JjL3B1bnljb2RlLmpzCiAgdmFyIHJlcXVpcmVfcHVueWNvZGUgPSBfX2NvbW1vbkpTKHsKICAgICJub2RlX21vZHVsZXMvdXJpanMvc3JjL3B1bnljb2RlLmpzIihleHBvcnRzMiwgbW9kdWxlKSB7CiAgICAgIC8qISBodHRwczovL210aHMuYmUvcHVueWNvZGUgdjEuNC4wIGJ5IEBtYXRoaWFzICovCiAgICAgIChmdW5jdGlvbihyb290KSB7CiAgICAgICAgdmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMyID09ICJvYmplY3QiICYmIGV4cG9ydHMyICYmICFleHBvcnRzMi5ub2RlVHlwZSAmJiBleHBvcnRzMjsKICAgICAgICB2YXIgZnJlZU1vZHVsZSA9IHR5cGVvZiBtb2R1bGUgPT0gIm9iamVjdCIgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlOwogICAgICAgIHZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAib2JqZWN0IiAmJiBnbG9iYWw7CiAgICAgICAgaWYgKGZyZWVHbG9iYWwuZ2xvYmFsID09PSBmcmVlR2xvYmFsIHx8IGZyZWVHbG9iYWwud2luZG93ID09PSBmcmVlR2xvYmFsIHx8IGZyZWVHbG9iYWwuc2VsZiA9PT0gZnJlZUdsb2JhbCkgewogICAgICAgICAgcm9vdCA9IGZyZWVHbG9iYWw7CiAgICAgICAgfQogICAgICAgIHZhciBwdW55Y29kZSwgbWF4SW50ID0gMjE0NzQ4MzY0NywgYmFzZSA9IDM2LCB0TWluID0gMSwgdE1heCA9IDI2LCBza2V3ID0gMzgsIGRhbXAgPSA3MDAsIGluaXRpYWxCaWFzID0gNzIsIGluaXRpYWxOID0gMTI4LCBkZWxpbWl0ZXIgPSAiLSIsIHJlZ2V4UHVueWNvZGUgPSAvXnhuLS0vLCByZWdleE5vbkFTQ0lJID0gL1teXHgyMC1ceDdFXS8sIHJlZ2V4U2VwYXJhdG9ycyA9IC9bXHgyRVx1MzAwMlx1RkYwRVx1RkY2MV0vZywgZXJyb3JzID0gewogICAgICAgICAgIm92ZXJmbG93IjogIk92ZXJmbG93OiBpbnB1dCBuZWVkcyB3aWRlciBpbnRlZ2VycyB0byBwcm9jZXNzIiwKICAgICAgICAgICJub3QtYmFzaWMiOiAiSWxsZWdhbCBpbnB1dCA+PSAweDgwIChub3QgYSBiYXNpYyBjb2RlIHBvaW50KSIsCiAgICAgICAgICAiaW52YWxpZC1pbnB1dCI6ICJJbnZhbGlkIGlucHV0IgogICAgICAgIH0sIGJhc2VNaW51c1RNaW4gPSBiYXNlIC0gdE1pbiwgZmxvb3IgPSBNYXRoLmZsb29yLCBzdHJpbmdGcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLCBrZXk7CiAgICAgICAgZnVuY3Rpb24gZXJyb3IodHlwZSkgewogICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoZXJyb3JzW3R5cGVdKTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gbWFwKGFycmF5LCBmbikgewogICAgICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDsKICAgICAgICAgIHZhciByZXN1bHQgPSBbXTsKICAgICAgICAgIHdoaWxlIChsZW5ndGgtLSkgewogICAgICAgICAgICByZXN1bHRbbGVuZ3RoXSA9IGZuKGFycmF5W2xlbmd0aF0pOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gbWFwRG9tYWluKHN0cmluZywgZm4pIHsKICAgICAgICAgIHZhciBwYXJ0cyA9IHN0cmluZy5zcGxpdCgiQCIpOwogICAgICAgICAgdmFyIHJlc3VsdCA9ICIiOwogICAgICAgICAgaWYgKHBhcnRzLmxlbmd0aCA+IDEpIHsKICAgICAgICAgICAgcmVzdWx0ID0gcGFydHNbMF0gKyAiQCI7CiAgICAgICAgICAgIHN0cmluZyA9IHBhcnRzWzFdOwogICAgICAgICAgfQogICAgICAgICAgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocmVnZXhTZXBhcmF0b3JzLCAiLiIpOwogICAgICAgICAgdmFyIGxhYmVscyA9IHN0cmluZy5zcGxpdCgiLiIpOwogICAgICAgICAgdmFyIGVuY29kZWQgPSBtYXAobGFiZWxzLCBmbikuam9pbigiLiIpOwogICAgICAgICAgcmV0dXJuIHJlc3VsdCArIGVuY29kZWQ7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIHVjczJkZWNvZGUoc3RyaW5nKSB7CiAgICAgICAgICB2YXIgb3V0cHV0ID0gW10sIGNvdW50ZXIgPSAwLCBsZW5ndGggPSBzdHJpbmcubGVuZ3RoLCB2YWx1ZSwgZXh0cmE7CiAgICAgICAgICB3aGlsZSAoY291bnRlciA8IGxlbmd0aCkgewogICAgICAgICAgICB2YWx1ZSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7CiAgICAgICAgICAgIGlmICh2YWx1ZSA+PSA1NTI5NiAmJiB2YWx1ZSA8PSA1NjMxOSAmJiBjb3VudGVyIDwgbGVuZ3RoKSB7CiAgICAgICAgICAgICAgZXh0cmEgPSBzdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspOwogICAgICAgICAgICAgIGlmICgoZXh0cmEgJiA2NDUxMikgPT0gNTYzMjApIHsKICAgICAgICAgICAgICAgIG91dHB1dC5wdXNoKCgodmFsdWUgJiAxMDIzKSA8PCAxMCkgKyAoZXh0cmEgJiAxMDIzKSArIDY1NTM2KTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgb3V0cHV0LnB1c2godmFsdWUpOwogICAgICAgICAgICAgICAgY291bnRlci0tOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBvdXRwdXQucHVzaCh2YWx1ZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBvdXRwdXQ7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIHVjczJlbmNvZGUoYXJyYXkpIHsKICAgICAgICAgIHJldHVybiBtYXAoYXJyYXksIGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICAgIHZhciBvdXRwdXQgPSAiIjsKICAgICAgICAgICAgaWYgKHZhbHVlID4gNjU1MzUpIHsKICAgICAgICAgICAgICB2YWx1ZSAtPSA2NTUzNjsKICAgICAgICAgICAgICBvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlID4+PiAxMCAmIDEwMjMgfCA1NTI5Nik7CiAgICAgICAgICAgICAgdmFsdWUgPSA1NjMyMCB8IHZhbHVlICYgMTAyMzsKICAgICAgICAgICAgfQogICAgICAgICAgICBvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlKTsKICAgICAgICAgICAgcmV0dXJuIG91dHB1dDsKICAgICAgICAgIH0pLmpvaW4oIiIpOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBiYXNpY1RvRGlnaXQoY29kZVBvaW50KSB7CiAgICAgICAgICBpZiAoY29kZVBvaW50IC0gNDggPCAxMCkgewogICAgICAgICAgICByZXR1cm4gY29kZVBvaW50IC0gMjI7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoY29kZVBvaW50IC0gNjUgPCAyNikgewogICAgICAgICAgICByZXR1cm4gY29kZVBvaW50IC0gNjU7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoY29kZVBvaW50IC0gOTcgPCAyNikgewogICAgICAgICAgICByZXR1cm4gY29kZVBvaW50IC0gOTc7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gYmFzZTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gZGlnaXRUb0Jhc2ljKGRpZ2l0LCBmbGFnKSB7CiAgICAgICAgICByZXR1cm4gZGlnaXQgKyAyMiArIDc1ICogKGRpZ2l0IDwgMjYpIC0gKChmbGFnICE9IDApIDw8IDUpOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBhZGFwdChkZWx0YSwgbnVtUG9pbnRzLCBmaXJzdFRpbWUpIHsKICAgICAgICAgIHZhciBrID0gMDsKICAgICAgICAgIGRlbHRhID0gZmlyc3RUaW1lID8gZmxvb3IoZGVsdGEgLyBkYW1wKSA6IGRlbHRhID4+IDE7CiAgICAgICAgICBkZWx0YSArPSBmbG9vcihkZWx0YSAvIG51bVBvaW50cyk7CiAgICAgICAgICBmb3IgKDsgZGVsdGEgPiBiYXNlTWludXNUTWluICogdE1heCA+PiAxOyBrICs9IGJhc2UpIHsKICAgICAgICAgICAgZGVsdGEgPSBmbG9vcihkZWx0YSAvIGJhc2VNaW51c1RNaW4pOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIGZsb29yKGsgKyAoYmFzZU1pbnVzVE1pbiArIDEpICogZGVsdGEgLyAoZGVsdGEgKyBza2V3KSk7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIGRlY29kZTMoaW5wdXQpIHsKICAgICAgICAgIHZhciBvdXRwdXQgPSBbXSwgaW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGgsIG91dCwgaSA9IDAsIG4gPSBpbml0aWFsTiwgYmlhcyA9IGluaXRpYWxCaWFzLCBiYXNpYywgaiwgaW5kZXgsIG9sZGksIHcsIGssIGRpZ2l0LCB0LCBiYXNlTWludXNUOwogICAgICAgICAgYmFzaWMgPSBpbnB1dC5sYXN0SW5kZXhPZihkZWxpbWl0ZXIpOwogICAgICAgICAgaWYgKGJhc2ljIDwgMCkgewogICAgICAgICAgICBiYXNpYyA9IDA7CiAgICAgICAgICB9CiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgYmFzaWM7ICsraikgewogICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChqKSA+PSAxMjgpIHsKICAgICAgICAgICAgICBlcnJvcigibm90LWJhc2ljIik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgb3V0cHV0LnB1c2goaW5wdXQuY2hhckNvZGVBdChqKSk7CiAgICAgICAgICB9CiAgICAgICAgICBmb3IgKGluZGV4ID0gYmFzaWMgPiAwID8gYmFzaWMgKyAxIDogMDsgaW5kZXggPCBpbnB1dExlbmd0aDsgKSB7CiAgICAgICAgICAgIGZvciAob2xkaSA9IGksIHcgPSAxLCBrID0gYmFzZTsgOyBrICs9IGJhc2UpIHsKICAgICAgICAgICAgICBpZiAoaW5kZXggPj0gaW5wdXRMZW5ndGgpIHsKICAgICAgICAgICAgICAgIGVycm9yKCJpbnZhbGlkLWlucHV0Iik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGRpZ2l0ID0gYmFzaWNUb0RpZ2l0KGlucHV0LmNoYXJDb2RlQXQoaW5kZXgrKykpOwogICAgICAgICAgICAgIGlmIChkaWdpdCA+PSBiYXNlIHx8IGRpZ2l0ID4gZmxvb3IoKG1heEludCAtIGkpIC8gdykpIHsKICAgICAgICAgICAgICAgIGVycm9yKCJvdmVyZmxvdyIpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpICs9IGRpZ2l0ICogdzsKICAgICAgICAgICAgICB0ID0gayA8PSBiaWFzID8gdE1pbiA6IGsgPj0gYmlhcyArIHRNYXggPyB0TWF4IDogayAtIGJpYXM7CiAgICAgICAgICAgICAgaWYgKGRpZ2l0IDwgdCkgewogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGJhc2VNaW51c1QgPSBiYXNlIC0gdDsKICAgICAgICAgICAgICBpZiAodyA+IGZsb29yKG1heEludCAvIGJhc2VNaW51c1QpKSB7CiAgICAgICAgICAgICAgICBlcnJvcigib3ZlcmZsb3ciKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdyAqPSBiYXNlTWludXNUOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG91dCA9IG91dHB1dC5sZW5ndGggKyAxOwogICAgICAgICAgICBiaWFzID0gYWRhcHQoaSAtIG9sZGksIG91dCwgb2xkaSA9PSAwKTsKICAgICAgICAgICAgaWYgKGZsb29yKGkgLyBvdXQpID4gbWF4SW50IC0gbikgewogICAgICAgICAgICAgIGVycm9yKCJvdmVyZmxvdyIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG4gKz0gZmxvb3IoaSAvIG91dCk7CiAgICAgICAgICAgIGkgJT0gb3V0OwogICAgICAgICAgICBvdXRwdXQuc3BsaWNlKGkrKywgMCwgbik7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gdWNzMmVuY29kZShvdXRwdXQpOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBlbmNvZGUoaW5wdXQpIHsKICAgICAgICAgIHZhciBuLCBkZWx0YSwgaGFuZGxlZENQQ291bnQsIGJhc2ljTGVuZ3RoLCBiaWFzLCBqLCBtLCBxLCBrLCB0LCBjdXJyZW50VmFsdWUsIG91dHB1dCA9IFtdLCBpbnB1dExlbmd0aCwgaGFuZGxlZENQQ291bnRQbHVzT25lLCBiYXNlTWludXNULCBxTWludXNUOwogICAgICAgICAgaW5wdXQgPSB1Y3MyZGVjb2RlKGlucHV0KTsKICAgICAgICAgIGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoOwogICAgICAgICAgbiA9IGluaXRpYWxOOwogICAgICAgICAgZGVsdGEgPSAwOwogICAgICAgICAgYmlhcyA9IGluaXRpYWxCaWFzOwogICAgICAgICAgZm9yIChqID0gMDsgaiA8IGlucHV0TGVuZ3RoOyArK2opIHsKICAgICAgICAgICAgY3VycmVudFZhbHVlID0gaW5wdXRbal07CiAgICAgICAgICAgIGlmIChjdXJyZW50VmFsdWUgPCAxMjgpIHsKICAgICAgICAgICAgICBvdXRwdXQucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUoY3VycmVudFZhbHVlKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGhhbmRsZWRDUENvdW50ID0gYmFzaWNMZW5ndGggPSBvdXRwdXQubGVuZ3RoOwogICAgICAgICAgaWYgKGJhc2ljTGVuZ3RoKSB7CiAgICAgICAgICAgIG91dHB1dC5wdXNoKGRlbGltaXRlcik7CiAgICAgICAgICB9CiAgICAgICAgICB3aGlsZSAoaGFuZGxlZENQQ291bnQgPCBpbnB1dExlbmd0aCkgewogICAgICAgICAgICBmb3IgKG0gPSBtYXhJbnQsIGogPSAwOyBqIDwgaW5wdXRMZW5ndGg7ICsraikgewogICAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSA9IGlucHV0W2pdOwogICAgICAgICAgICAgIGlmIChjdXJyZW50VmFsdWUgPj0gbiAmJiBjdXJyZW50VmFsdWUgPCBtKSB7CiAgICAgICAgICAgICAgICBtID0gY3VycmVudFZhbHVlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBoYW5kbGVkQ1BDb3VudFBsdXNPbmUgPSBoYW5kbGVkQ1BDb3VudCArIDE7CiAgICAgICAgICAgIGlmIChtIC0gbiA+IGZsb29yKChtYXhJbnQgLSBkZWx0YSkgLyBoYW5kbGVkQ1BDb3VudFBsdXNPbmUpKSB7CiAgICAgICAgICAgICAgZXJyb3IoIm92ZXJmbG93Iik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZGVsdGEgKz0gKG0gLSBuKSAqIGhhbmRsZWRDUENvdW50UGx1c09uZTsKICAgICAgICAgICAgbiA9IG07CiAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBpbnB1dExlbmd0aDsgKytqKSB7CiAgICAgICAgICAgICAgY3VycmVudFZhbHVlID0gaW5wdXRbal07CiAgICAgICAgICAgICAgaWYgKGN1cnJlbnRWYWx1ZSA8IG4gJiYgKytkZWx0YSA+IG1heEludCkgewogICAgICAgICAgICAgICAgZXJyb3IoIm92ZXJmbG93Iik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmIChjdXJyZW50VmFsdWUgPT0gbikgewogICAgICAgICAgICAgICAgZm9yIChxID0gZGVsdGEsIGsgPSBiYXNlOyA7IGsgKz0gYmFzZSkgewogICAgICAgICAgICAgICAgICB0ID0gayA8PSBiaWFzID8gdE1pbiA6IGsgPj0gYmlhcyArIHRNYXggPyB0TWF4IDogayAtIGJpYXM7CiAgICAgICAgICAgICAgICAgIGlmIChxIDwgdCkgewogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIHFNaW51c1QgPSBxIC0gdDsKICAgICAgICAgICAgICAgICAgYmFzZU1pbnVzVCA9IGJhc2UgLSB0OwogICAgICAgICAgICAgICAgICBvdXRwdXQucHVzaCgKICAgICAgICAgICAgICAgICAgICBzdHJpbmdGcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHQgKyBxTWludXNUICUgYmFzZU1pbnVzVCwgMCkpCiAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgIHEgPSBmbG9vcihxTWludXNUIC8gYmFzZU1pbnVzVCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBvdXRwdXQucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHEsIDApKSk7CiAgICAgICAgICAgICAgICBiaWFzID0gYWRhcHQoZGVsdGEsIGhhbmRsZWRDUENvdW50UGx1c09uZSwgaGFuZGxlZENQQ291bnQgPT0gYmFzaWNMZW5ndGgpOwogICAgICAgICAgICAgICAgZGVsdGEgPSAwOwogICAgICAgICAgICAgICAgKytoYW5kbGVkQ1BDb3VudDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgKytkZWx0YTsKICAgICAgICAgICAgKytuOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIG91dHB1dC5qb2luKCIiKTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gdG9Vbmljb2RlKGlucHV0KSB7CiAgICAgICAgICByZXR1cm4gbWFwRG9tYWluKGlucHV0LCBmdW5jdGlvbihzdHJpbmcpIHsKICAgICAgICAgICAgcmV0dXJuIHJlZ2V4UHVueWNvZGUudGVzdChzdHJpbmcpID8gZGVjb2RlMyhzdHJpbmcuc2xpY2UoNCkudG9Mb3dlckNhc2UoKSkgOiBzdHJpbmc7CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gdG9BU0NJSShpbnB1dCkgewogICAgICAgICAgcmV0dXJuIG1hcERvbWFpbihpbnB1dCwgZnVuY3Rpb24oc3RyaW5nKSB7CiAgICAgICAgICAgIHJldHVybiByZWdleE5vbkFTQ0lJLnRlc3Qoc3RyaW5nKSA/ICJ4bi0tIiArIGVuY29kZShzdHJpbmcpIDogc3RyaW5nOwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIHB1bnljb2RlID0gewogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBBIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGN1cnJlbnQgUHVueWNvZGUuanMgdmVyc2lvbiBudW1iZXIuCiAgICAgICAgICAgKiBAbWVtYmVyT2YgcHVueWNvZGUKICAgICAgICAgICAqIEB0eXBlIFN0cmluZwogICAgICAgICAgICovCiAgICAgICAgICAidmVyc2lvbiI6ICIxLjMuMiIsCiAgICAgICAgICAvKioKICAgICAgICAgICAqIEFuIG9iamVjdCBvZiBtZXRob2RzIHRvIGNvbnZlcnQgZnJvbSBKYXZhU2NyaXB0J3MgaW50ZXJuYWwgY2hhcmFjdGVyCiAgICAgICAgICAgKiByZXByZXNlbnRhdGlvbiAoVUNTLTIpIHRvIFVuaWNvZGUgY29kZSBwb2ludHMsIGFuZCBiYWNrLgogICAgICAgICAgICogQHNlZSA8aHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtZW5jb2Rpbmc+CiAgICAgICAgICAgKiBAbWVtYmVyT2YgcHVueWNvZGUKICAgICAgICAgICAqIEB0eXBlIE9iamVjdAogICAgICAgICAgICovCiAgICAgICAgICAidWNzMiI6IHsKICAgICAgICAgICAgImRlY29kZSI6IHVjczJkZWNvZGUsCiAgICAgICAgICAgICJlbmNvZGUiOiB1Y3MyZW5jb2RlCiAgICAgICAgICB9LAogICAgICAgICAgImRlY29kZSI6IGRlY29kZTMsCiAgICAgICAgICAiZW5jb2RlIjogZW5jb2RlLAogICAgICAgICAgInRvQVNDSUkiOiB0b0FTQ0lJLAogICAgICAgICAgInRvVW5pY29kZSI6IHRvVW5pY29kZQogICAgICAgIH07CiAgICAgICAgaWYgKHR5cGVvZiBkZWZpbmUgPT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PSAib2JqZWN0IiAmJiBkZWZpbmUuYW1kKSB7CiAgICAgICAgICBkZWZpbmUoInB1bnljb2RlIiwgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBwdW55Y29kZTsKICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSBpZiAoZnJlZUV4cG9ydHMgJiYgZnJlZU1vZHVsZSkgewogICAgICAgICAgaWYgKG1vZHVsZS5leHBvcnRzID09IGZyZWVFeHBvcnRzKSB7CiAgICAgICAgICAgIGZyZWVNb2R1bGUuZXhwb3J0cyA9IHB1bnljb2RlOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZm9yIChrZXkgaW4gcHVueWNvZGUpIHsKICAgICAgICAgICAgICBwdW55Y29kZS5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIChmcmVlRXhwb3J0c1trZXldID0gcHVueWNvZGVba2V5XSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgcm9vdC5wdW55Y29kZSA9IHB1bnljb2RlOwogICAgICAgIH0KICAgICAgfSkoZXhwb3J0czIpOwogICAgfQogIH0pOwoKICAvLyBub2RlX21vZHVsZXMvdXJpanMvc3JjL0lQdjYuanMKICB2YXIgcmVxdWlyZV9JUHY2ID0gX19jb21tb25KUyh7CiAgICAibm9kZV9tb2R1bGVzL3VyaWpzL3NyYy9JUHY2LmpzIihleHBvcnRzMiwgbW9kdWxlKSB7CiAgICAgIC8qIQogICAgICAgKiBVUkkuanMgLSBNdXRhdGluZyBVUkxzCiAgICAgICAqIElQdjYgU3VwcG9ydAogICAgICAgKgogICAgICAgKiBWZXJzaW9uOiAxLjE5LjExCiAgICAgICAqCiAgICAgICAqIEF1dGhvcjogUm9kbmV5IFJlaG0KICAgICAgICogV2ViOiBodHRwOi8vbWVkaWFsaXplLmdpdGh1Yi5pby9VUkkuanMvCiAgICAgICAqCiAgICAgICAqIExpY2Vuc2VkIHVuZGVyCiAgICAgICAqICAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZQogICAgICAgKgogICAgICAgKi8KICAgICAgKGZ1bmN0aW9uKHJvb3QsIGZhY3RvcnkpIHsKICAgICAgICAidXNlIHN0cmljdCI7CiAgICAgICAgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICJvYmplY3QiICYmIG1vZHVsZS5leHBvcnRzKSB7CiAgICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTsKICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICJmdW5jdGlvbiIgJiYgZGVmaW5lLmFtZCkgewogICAgICAgICAgZGVmaW5lKGZhY3RvcnkpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByb290LklQdjYgPSBmYWN0b3J5KHJvb3QpOwogICAgICAgIH0KICAgICAgfSkoZXhwb3J0czIsIGZ1bmN0aW9uKHJvb3QpIHsKICAgICAgICAidXNlIHN0cmljdCI7CiAgICAgICAgdmFyIF9JUHY2ID0gcm9vdCAmJiByb290LklQdjY7CiAgICAgICAgZnVuY3Rpb24gYmVzdFByZXNlbnRhdGlvbihhZGRyZXNzKSB7CiAgICAgICAgICB2YXIgX2FkZHJlc3MgPSBhZGRyZXNzLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgICB2YXIgc2VnbWVudHMgPSBfYWRkcmVzcy5zcGxpdCgiOiIpOwogICAgICAgICAgdmFyIGxlbmd0aCA9IHNlZ21lbnRzLmxlbmd0aDsKICAgICAgICAgIHZhciB0b3RhbCA9IDg7CiAgICAgICAgICBpZiAoc2VnbWVudHNbMF0gPT09ICIiICYmIHNlZ21lbnRzWzFdID09PSAiIiAmJiBzZWdtZW50c1syXSA9PT0gIiIpIHsKICAgICAgICAgICAgc2VnbWVudHMuc2hpZnQoKTsKICAgICAgICAgICAgc2VnbWVudHMuc2hpZnQoKTsKICAgICAgICAgIH0gZWxzZSBpZiAoc2VnbWVudHNbMF0gPT09ICIiICYmIHNlZ21lbnRzWzFdID09PSAiIikgewogICAgICAgICAgICBzZWdtZW50cy5zaGlmdCgpOwogICAgICAgICAgfSBlbHNlIGlmIChzZWdtZW50c1tsZW5ndGggLSAxXSA9PT0gIiIgJiYgc2VnbWVudHNbbGVuZ3RoIC0gMl0gPT09ICIiKSB7CiAgICAgICAgICAgIHNlZ21lbnRzLnBvcCgpOwogICAgICAgICAgfQogICAgICAgICAgbGVuZ3RoID0gc2VnbWVudHMubGVuZ3RoOwogICAgICAgICAgaWYgKHNlZ21lbnRzW2xlbmd0aCAtIDFdLmluZGV4T2YoIi4iKSAhPT0gLTEpIHsKICAgICAgICAgICAgdG90YWwgPSA3OwogICAgICAgICAgfQogICAgICAgICAgdmFyIHBvczsKICAgICAgICAgIGZvciAocG9zID0gMDsgcG9zIDwgbGVuZ3RoOyBwb3MrKykgewogICAgICAgICAgICBpZiAoc2VnbWVudHNbcG9zXSA9PT0gIiIpIHsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgaWYgKHBvcyA8IHRvdGFsKSB7CiAgICAgICAgICAgIHNlZ21lbnRzLnNwbGljZShwb3MsIDEsICIwMDAwIik7CiAgICAgICAgICAgIHdoaWxlIChzZWdtZW50cy5sZW5ndGggPCB0b3RhbCkgewogICAgICAgICAgICAgIHNlZ21lbnRzLnNwbGljZShwb3MsIDAsICIwMDAwIik7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHZhciBfc2VnbWVudHM7CiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRvdGFsOyBpKyspIHsKICAgICAgICAgICAgX3NlZ21lbnRzID0gc2VnbWVudHNbaV0uc3BsaXQoIiIpOwogICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IDM7IGorKykgewogICAgICAgICAgICAgIGlmIChfc2VnbWVudHNbMF0gPT09ICIwIiAmJiBfc2VnbWVudHMubGVuZ3RoID4gMSkgewogICAgICAgICAgICAgICAgX3NlZ21lbnRzLnNwbGljZSgwLCAxKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHNlZ21lbnRzW2ldID0gX3NlZ21lbnRzLmpvaW4oIiIpOwogICAgICAgICAgfQogICAgICAgICAgdmFyIGJlc3QgPSAtMTsKICAgICAgICAgIHZhciBfYmVzdCA9IDA7CiAgICAgICAgICB2YXIgX2N1cnJlbnQgPSAwOwogICAgICAgICAgdmFyIGN1cnJlbnQgPSAtMTsKICAgICAgICAgIHZhciBpbnplcm9lcyA9IGZhbHNlOwogICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRvdGFsOyBpKyspIHsKICAgICAgICAgICAgaWYgKGluemVyb2VzKSB7CiAgICAgICAgICAgICAgaWYgKHNlZ21lbnRzW2ldID09PSAiMCIpIHsKICAgICAgICAgICAgICAgIF9jdXJyZW50ICs9IDE7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGluemVyb2VzID0gZmFsc2U7CiAgICAgICAgICAgICAgICBpZiAoX2N1cnJlbnQgPiBfYmVzdCkgewogICAgICAgICAgICAgICAgICBiZXN0ID0gY3VycmVudDsKICAgICAgICAgICAgICAgICAgX2Jlc3QgPSBfY3VycmVudDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgaWYgKHNlZ21lbnRzW2ldID09PSAiMCIpIHsKICAgICAgICAgICAgICAgIGluemVyb2VzID0gdHJ1ZTsKICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBpOwogICAgICAgICAgICAgICAgX2N1cnJlbnQgPSAxOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgaWYgKF9jdXJyZW50ID4gX2Jlc3QpIHsKICAgICAgICAgICAgYmVzdCA9IGN1cnJlbnQ7CiAgICAgICAgICAgIF9iZXN0ID0gX2N1cnJlbnQ7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoX2Jlc3QgPiAxKSB7CiAgICAgICAgICAgIHNlZ21lbnRzLnNwbGljZShiZXN0LCBfYmVzdCwgIiIpOwogICAgICAgICAgfQogICAgICAgICAgbGVuZ3RoID0gc2VnbWVudHMubGVuZ3RoOwogICAgICAgICAgdmFyIHJlc3VsdCA9ICIiOwogICAgICAgICAgaWYgKHNlZ21lbnRzWzBdID09PSAiIikgewogICAgICAgICAgICByZXN1bHQgPSAiOiI7CiAgICAgICAgICB9CiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgcmVzdWx0ICs9IHNlZ21lbnRzW2ldOwogICAgICAgICAgICBpZiAoaSA9PT0gbGVuZ3RoIC0gMSkgewogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJlc3VsdCArPSAiOiI7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoc2VnbWVudHNbbGVuZ3RoIC0gMV0gPT09ICIiKSB7CiAgICAgICAgICAgIHJlc3VsdCArPSAiOiI7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBub0NvbmZsaWN0KCkgewogICAgICAgICAgaWYgKHJvb3QuSVB2NiA9PT0gdGhpcykgewogICAgICAgICAgICByb290LklQdjYgPSBfSVB2NjsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0KICAgICAgICByZXR1cm4gewogICAgICAgICAgYmVzdDogYmVzdFByZXNlbnRhdGlvbiwKICAgICAgICAgIG5vQ29uZmxpY3QKICAgICAgICB9OwogICAgICB9KTsKICAgIH0KICB9KTsKCiAgLy8gbm9kZV9tb2R1bGVzL3VyaWpzL3NyYy9TZWNvbmRMZXZlbERvbWFpbnMuanMKICB2YXIgcmVxdWlyZV9TZWNvbmRMZXZlbERvbWFpbnMgPSBfX2NvbW1vbkpTKHsKICAgICJub2RlX21vZHVsZXMvdXJpanMvc3JjL1NlY29uZExldmVsRG9tYWlucy5qcyIoZXhwb3J0czIsIG1vZHVsZSkgewogICAgICAvKiEKICAgICAgICogVVJJLmpzIC0gTXV0YXRpbmcgVVJMcwogICAgICAgKiBTZWNvbmQgTGV2ZWwgRG9tYWluIChTTEQpIFN1cHBvcnQKICAgICAgICoKICAgICAgICogVmVyc2lvbjogMS4xOS4xMQogICAgICAgKgogICAgICAgKiBBdXRob3I6IFJvZG5leSBSZWhtCiAgICAgICAqIFdlYjogaHR0cDovL21lZGlhbGl6ZS5naXRodWIuaW8vVVJJLmpzLwogICAgICAgKgogICAgICAgKiBMaWNlbnNlZCB1bmRlcgogICAgICAgKiAgIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UKICAgICAgICoKICAgICAgICovCiAgICAgIChmdW5jdGlvbihyb290LCBmYWN0b3J5KSB7CiAgICAgICAgInVzZSBzdHJpY3QiOwogICAgICAgIGlmICh0eXBlb2YgbW9kdWxlID09PSAib2JqZWN0IiAmJiBtb2R1bGUuZXhwb3J0cykgewogICAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7CiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAiZnVuY3Rpb24iICYmIGRlZmluZS5hbWQpIHsKICAgICAgICAgIGRlZmluZShmYWN0b3J5KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcm9vdC5TZWNvbmRMZXZlbERvbWFpbnMgPSBmYWN0b3J5KHJvb3QpOwogICAgICAgIH0KICAgICAgfSkoZXhwb3J0czIsIGZ1bmN0aW9uKHJvb3QpIHsKICAgICAgICAidXNlIHN0cmljdCI7CiAgICAgICAgdmFyIF9TZWNvbmRMZXZlbERvbWFpbnMgPSByb290ICYmIHJvb3QuU2Vjb25kTGV2ZWxEb21haW5zOwogICAgICAgIHZhciBTTEQgPSB7CiAgICAgICAgICAvLyBsaXN0IG9mIGtub3duIFNlY29uZCBMZXZlbCBEb21haW5zCiAgICAgICAgICAvLyBjb252ZXJ0ZWQgbGlzdCBvZiBTTERzIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2dhdmluZ21pbGxlci9zZWNvbmQtbGV2ZWwtZG9tYWlucwogICAgICAgICAgLy8gLS0tLQogICAgICAgICAgLy8gcHVibGljc3VmZml4Lm9yZyBpcyBtb3JlIGN1cnJlbnQgYW5kIGFjdHVhbGx5IHVzZWQgYnkgYSBjb3VwbGUgb2YgYnJvd3NlcnMgaW50ZXJuYWxseS4KICAgICAgICAgIC8vIGRvd25zaWRlIGlzIGl0IGFsc28gY29udGFpbnMgZG9tYWlucyBsaWtlICJkeW5kbnMub3JnIiAtIHdoaWNoIGlzIGZpbmUgZm9yIHRoZSBzZWN1cml0eQogICAgICAgICAgLy8gaXNzdWVzIGJyb3dzZXIgaGF2ZSB0byBkZWFsIHdpdGggKFNPUCBmb3IgY29va2llcywgZXRjKSAtIGJ1dCBpcyB3YXkgb3ZlcmJvYXJkIGZvciBVUkkuanMKICAgICAgICAgIC8vIC0tLS0KICAgICAgICAgIGxpc3Q6IHsKICAgICAgICAgICAgImFjIjogIiBjb20gZ292IG1pbCBuZXQgb3JnICIsCiAgICAgICAgICAgICJhZSI6ICIgYWMgY28gZ292IG1pbCBuYW1lIG5ldCBvcmcgcHJvIHNjaCAiLAogICAgICAgICAgICAiYWYiOiAiIGNvbSBlZHUgZ292IG5ldCBvcmcgIiwKICAgICAgICAgICAgImFsIjogIiBjb20gZWR1IGdvdiBtaWwgbmV0IG9yZyAiLAogICAgICAgICAgICAiYW8iOiAiIGNvIGVkIGd2IGl0IG9nIHBiICIsCiAgICAgICAgICAgICJhciI6ICIgY29tIGVkdSBnb2IgZ292IGludCBtaWwgbmV0IG9yZyB0dXIgIiwKICAgICAgICAgICAgImF0IjogIiBhYyBjbyBndiBvciAiLAogICAgICAgICAgICAiYXUiOiAiIGFzbiBjb20gY3Npcm8gZWR1IGdvdiBpZCBuZXQgb3JnICIsCiAgICAgICAgICAgICJiYSI6ICIgY28gY29tIGVkdSBnb3YgbWlsIG5ldCBvcmcgcnMgdW5iaSB1bm1vIHVuc2EgdW50eiB1bnplICIsCiAgICAgICAgICAgICJiYiI6ICIgYml6IGNvIGNvbSBlZHUgZ292IGluZm8gbmV0IG9yZyBzdG9yZSB0diAiLAogICAgICAgICAgICAiYmgiOiAiIGJpeiBjYyBjb20gZWR1IGdvdiBpbmZvIG5ldCBvcmcgIiwKICAgICAgICAgICAgImJuIjogIiBjb20gZWR1IGdvdiBuZXQgb3JnICIsCiAgICAgICAgICAgICJibyI6ICIgY29tIGVkdSBnb2IgZ292IGludCBtaWwgbmV0IG9yZyB0diAiLAogICAgICAgICAgICAiYnIiOiAiIGFkbSBhZHYgYWdyIGFtIGFycSBhcnQgYXRvIGIgYmlvIGJsb2cgYm1kIGNpbSBjbmcgY250IGNvbSBjb29wIGVjbiBlZHUgZW5nIGVzcCBldGMgZXRpIGZhciBmbG9nIGZtIGZuZCBmb3QgZnN0IGcxMiBnZ2YgZ292IGltYiBpbmQgaW5mIGpvciBqdXMgbGVsIG1hdCBtZWQgbWlsIG11cyBuZXQgbm9tIG5vdCBudHIgb2RvIG9yZyBwcGcgcHJvIHBzYyBwc2kgcXNsIHJlYyBzbGcgc3J2IHRtcCB0cmQgdHVyIHR2IHZldCB2bG9nIHdpa2kgemxnICIsCiAgICAgICAgICAgICJicyI6ICIgY29tIGVkdSBnb3YgbmV0IG9yZyAiLAogICAgICAgICAgICAiYnoiOiAiIGR1IGV0IG9tIG92IHJnICIsCiAgICAgICAgICAgICJjYSI6ICIgYWIgYmMgbWIgbmIgbmYgbmwgbnMgbnQgbnUgb24gcGUgcWMgc2sgeWsgIiwKICAgICAgICAgICAgImNrIjogIiBiaXogY28gZWR1IGdlbiBnb3YgaW5mbyBuZXQgb3JnICIsCiAgICAgICAgICAgICJjbiI6ICIgYWMgYWggYmogY29tIGNxIGVkdSBmaiBnZCBnb3YgZ3MgZ3ggZ3ogaGEgaGIgaGUgaGkgaGwgaG4gamwganMganggbG4gbWlsIG5ldCBubSBueCBvcmcgcWggc2Mgc2Qgc2ggc24gc3ggdGogdHcgeGogeHogeW4gemogIiwKICAgICAgICAgICAgImNvIjogIiBjb20gZWR1IGdvdiBtaWwgbmV0IG5vbSBvcmcgIiwKICAgICAgICAgICAgImNyIjogIiBhYyBjIGNvIGVkIGZpIGdvIG9yIHNhICIsCiAgICAgICAgICAgICJjeSI6ICIgYWMgYml6IGNvbSBla2xvZ2VzIGdvdiBsdGQgbmFtZSBuZXQgb3JnIHBhcmxpYW1lbnQgcHJlc3MgcHJvIHRtICIsCiAgICAgICAgICAgICJkbyI6ICIgYXJ0IGNvbSBlZHUgZ29iIGdvdiBtaWwgbmV0IG9yZyBzbGQgd2ViICIsCiAgICAgICAgICAgICJkeiI6ICIgYXJ0IGFzc28gY29tIGVkdSBnb3YgbmV0IG9yZyBwb2wgIiwKICAgICAgICAgICAgImVjIjogIiBjb20gZWR1IGZpbiBnb3YgaW5mbyBtZWQgbWlsIG5ldCBvcmcgcHJvICIsCiAgICAgICAgICAgICJlZyI6ICIgY29tIGVkdSBldW4gZ292IG1pbCBuYW1lIG5ldCBvcmcgc2NpICIsCiAgICAgICAgICAgICJlciI6ICIgY29tIGVkdSBnb3YgaW5kIG1pbCBuZXQgb3JnIHJvY2hlc3QgdyAiLAogICAgICAgICAgICAiZXMiOiAiIGNvbSBlZHUgZ29iIG5vbSBvcmcgIiwKICAgICAgICAgICAgImV0IjogIiBiaXogY29tIGVkdSBnb3YgaW5mbyBuYW1lIG5ldCBvcmcgIiwKICAgICAgICAgICAgImZqIjogIiBhYyBiaXogY29tIGluZm8gbWlsIG5hbWUgbmV0IG9yZyBwcm8gIiwKICAgICAgICAgICAgImZrIjogIiBhYyBjbyBnb3YgbmV0IG5vbSBvcmcgIiwKICAgICAgICAgICAgImZyIjogIiBhc3NvIGNvbSBmIGdvdXYgbm9tIHByZCBwcmVzc2UgdG0gIiwKICAgICAgICAgICAgImdnIjogIiBjbyBuZXQgb3JnICIsCiAgICAgICAgICAgICJnaCI6ICIgY29tIGVkdSBnb3YgbWlsIG9yZyAiLAogICAgICAgICAgICAiZ24iOiAiIGFjIGNvbSBnb3YgbmV0IG9yZyAiLAogICAgICAgICAgICAiZ3IiOiAiIGNvbSBlZHUgZ292IG1pbCBuZXQgb3JnICIsCiAgICAgICAgICAgICJndCI6ICIgY29tIGVkdSBnb2IgaW5kIG1pbCBuZXQgb3JnICIsCiAgICAgICAgICAgICJndSI6ICIgY29tIGVkdSBnb3YgbmV0IG9yZyAiLAogICAgICAgICAgICAiaGsiOiAiIGNvbSBlZHUgZ292IGlkdiBuZXQgb3JnICIsCiAgICAgICAgICAgICJodSI6ICIgMjAwMCBhZ3JhciBib2x0IGNhc2lubyBjaXR5IGNvIGVyb3RpY2EgZXJvdGlrYSBmaWxtIGZvcnVtIGdhbWVzIGhvdGVsIGluZm8gaW5nYXRsYW4gam9nYXN6IGtvbnl2ZWxvIGxha2FzIG1lZGlhIG5ld3Mgb3JnIHByaXYgcmVrbGFtIHNleCBzaG9wIHNwb3J0IHN1bGkgc3pleCB0bSB0b3pzZGUgdXRhemFzIHZpZGVvICIsCiAgICAgICAgICAgICJpZCI6ICIgYWMgY28gZ28gbWlsIG5ldCBvciBzY2ggd2ViICIsCiAgICAgICAgICAgICJpbCI6ICIgYWMgY28gZ292IGlkZiBrMTIgbXVuaSBuZXQgb3JnICIsCiAgICAgICAgICAgICJpbiI6ICIgYWMgY28gZWR1IGVybmV0IGZpcm0gZ2VuIGdvdiBpIGluZCBtaWwgbmV0IG5pYyBvcmcgcmVzICIsCiAgICAgICAgICAgICJpcSI6ICIgY29tIGVkdSBnb3YgaSBtaWwgbmV0IG9yZyAiLAogICAgICAgICAgICAiaXIiOiAiIGFjIGNvIGRuc3NlYyBnb3YgaSBpZCBuZXQgb3JnIHNjaCAiLAogICAgICAgICAgICAiaXQiOiAiIGVkdSBnb3YgIiwKICAgICAgICAgICAgImplIjogIiBjbyBuZXQgb3JnICIsCiAgICAgICAgICAgICJqbyI6ICIgY29tIGVkdSBnb3YgbWlsIG5hbWUgbmV0IG9yZyBzY2ggIiwKICAgICAgICAgICAgImpwIjogIiBhYyBhZCBjbyBlZCBnbyBnciBsZyBuZSBvciAiLAogICAgICAgICAgICAia2UiOiAiIGFjIGNvIGdvIGluZm8gbWUgbW9iaSBuZSBvciBzYyAiLAogICAgICAgICAgICAia2giOiAiIGNvbSBlZHUgZ292IG1pbCBuZXQgb3JnIHBlciAiLAogICAgICAgICAgICAia2kiOiAiIGJpeiBjb20gZGUgZWR1IGdvdiBpbmZvIG1vYiBuZXQgb3JnIHRlbCAiLAogICAgICAgICAgICAia20iOiAiIGFzc28gY29tIGNvb3AgZWR1IGdvdXYgayBtZWRlY2luIG1pbCBub20gbm90YWlyZXMgcGhhcm1hY2llbnMgcHJlc3NlIHRtIHZldGVyaW5haXJlICIsCiAgICAgICAgICAgICJrbiI6ICIgZWR1IGdvdiBuZXQgb3JnICIsCiAgICAgICAgICAgICJrciI6ICIgYWMgYnVzYW4gY2h1bmdidWsgY2h1bmduYW0gY28gZGFlZ3UgZGFlamVvbiBlcyBnYW5nd29uIGdvIGd3YW5nanUgZ3llb25nYnVrIGd5ZW9uZ2dpIGd5ZW9uZ25hbSBocyBpbmNoZW9uIGplanUgamVvbmJ1ayBqZW9ubmFtIGsga2cgbWlsIG1zIG5lIG9yIHBlIHJlIHNjIHNlb3VsIHVsc2FuICIsCiAgICAgICAgICAgICJrdyI6ICIgY29tIGVkdSBnb3YgbmV0IG9yZyAiLAogICAgICAgICAgICAia3kiOiAiIGNvbSBlZHUgZ292IG5ldCBvcmcgIiwKICAgICAgICAgICAgImt6IjogIiBjb20gZWR1IGdvdiBtaWwgbmV0IG9yZyAiLAogICAgICAgICAgICAibGIiOiAiIGNvbSBlZHUgZ292IG5ldCBvcmcgIiwKICAgICAgICAgICAgImxrIjogIiBhc3NuIGNvbSBlZHUgZ292IGdycCBob3RlbCBpbnQgbHRkIG5ldCBuZ28gb3JnIHNjaCBzb2Mgd2ViICIsCiAgICAgICAgICAgICJsciI6ICIgY29tIGVkdSBnb3YgbmV0IG9yZyAiLAogICAgICAgICAgICAibHYiOiAiIGFzbiBjb20gY29uZiBlZHUgZ292IGlkIG1pbCBuZXQgb3JnICIsCiAgICAgICAgICAgICJseSI6ICIgY29tIGVkdSBnb3YgaWQgbWVkIG5ldCBvcmcgcGxjIHNjaCAiLAogICAgICAgICAgICAibWEiOiAiIGFjIGNvIGdvdiBtIG5ldCBvcmcgcHJlc3MgIiwKICAgICAgICAgICAgIm1jIjogIiBhc3NvIHRtICIsCiAgICAgICAgICAgICJtZSI6ICIgYWMgY28gZWR1IGdvdiBpdHMgbmV0IG9yZyBwcml2ICIsCiAgICAgICAgICAgICJtZyI6ICIgY29tIGVkdSBnb3YgbWlsIG5vbSBvcmcgcHJkIHRtICIsCiAgICAgICAgICAgICJtayI6ICIgY29tIGVkdSBnb3YgaW5mIG5hbWUgbmV0IG9yZyBwcm8gIiwKICAgICAgICAgICAgIm1sIjogIiBjb20gZWR1IGdvdiBuZXQgb3JnIHByZXNzZSAiLAogICAgICAgICAgICAibW4iOiAiIGVkdSBnb3Ygb3JnICIsCiAgICAgICAgICAgICJtbyI6ICIgY29tIGVkdSBnb3YgbmV0IG9yZyAiLAogICAgICAgICAgICAibXQiOiAiIGNvbSBlZHUgZ292IG5ldCBvcmcgIiwKICAgICAgICAgICAgIm12IjogIiBhZXJvIGJpeiBjb20gY29vcCBlZHUgZ292IGluZm8gaW50IG1pbCBtdXNldW0gbmFtZSBuZXQgb3JnIHBybyAiLAogICAgICAgICAgICAibXciOiAiIGFjIGNvIGNvbSBjb29wIGVkdSBnb3YgaW50IG11c2V1bSBuZXQgb3JnICIsCiAgICAgICAgICAgICJteCI6ICIgY29tIGVkdSBnb2IgbmV0IG9yZyAiLAogICAgICAgICAgICAibXkiOiAiIGNvbSBlZHUgZ292IG1pbCBuYW1lIG5ldCBvcmcgc2NoICIsCiAgICAgICAgICAgICJuZiI6ICIgYXJ0cyBjb20gZmlybSBpbmZvIG5ldCBvdGhlciBwZXIgcmVjIHN0b3JlIHdlYiAiLAogICAgICAgICAgICAibmciOiAiIGJpeiBjb20gZWR1IGdvdiBtaWwgbW9iaSBuYW1lIG5ldCBvcmcgc2NoICIsCiAgICAgICAgICAgICJuaSI6ICIgYWMgY28gY29tIGVkdSBnb2IgbWlsIG5ldCBub20gb3JnICIsCiAgICAgICAgICAgICJucCI6ICIgY29tIGVkdSBnb3YgbWlsIG5ldCBvcmcgIiwKICAgICAgICAgICAgIm5yIjogIiBiaXogY29tIGVkdSBnb3YgaW5mbyBuZXQgb3JnICIsCiAgICAgICAgICAgICJvbSI6ICIgYWMgYml6IGNvIGNvbSBlZHUgZ292IG1lZCBtaWwgbXVzZXVtIG5ldCBvcmcgcHJvIHNjaCAiLAogICAgICAgICAgICAicGUiOiAiIGNvbSBlZHUgZ29iIG1pbCBuZXQgbm9tIG9yZyBzbGQgIiwKICAgICAgICAgICAgInBoIjogIiBjb20gZWR1IGdvdiBpIG1pbCBuZXQgbmdvIG9yZyAiLAogICAgICAgICAgICAicGsiOiAiIGJpeiBjb20gZWR1IGZhbSBnb2IgZ29rIGdvbiBnb3AgZ29zIGdvdiBuZXQgb3JnIHdlYiAiLAogICAgICAgICAgICAicGwiOiAiIGFydCBiaWFseXN0b2sgYml6IGNvbSBlZHUgZ2RhIGdkYW5zayBnb3J6b3cgZ292IGluZm8ga2F0b3dpY2Uga3Jha293IGxvZHogbHVibGluIG1pbCBuZXQgbmdvIG9sc3p0eW4gb3JnIHBvem5hbiBwd3IgcmFkb20gc2x1cHNrIHN6Y3plY2luIHRvcnVuIHdhcnN6YXdhIHdhdyB3cm9jIHdyb2NsYXcgemdvcmEgIiwKICAgICAgICAgICAgInByIjogIiBhYyBiaXogY29tIGVkdSBlc3QgZ292IGluZm8gaXNsYSBuYW1lIG5ldCBvcmcgcHJvIHByb2YgIiwKICAgICAgICAgICAgInBzIjogIiBjb20gZWR1IGdvdiBuZXQgb3JnIHBsbyBzZWMgIiwKICAgICAgICAgICAgInB3IjogIiBiZWxhdSBjbyBlZCBnbyBuZSBvciAiLAogICAgICAgICAgICAicm8iOiAiIGFydHMgY29tIGZpcm0gaW5mbyBub20gbnQgb3JnIHJlYyBzdG9yZSB0bSB3d3cgIiwKICAgICAgICAgICAgInJzIjogIiBhYyBjbyBlZHUgZ292IGluIG9yZyAiLAogICAgICAgICAgICAic2IiOiAiIGNvbSBlZHUgZ292IG5ldCBvcmcgIiwKICAgICAgICAgICAgInNjIjogIiBjb20gZWR1IGdvdiBuZXQgb3JnICIsCiAgICAgICAgICAgICJzaCI6ICIgY28gY29tIGVkdSBnb3YgbmV0IG5vbSBvcmcgIiwKICAgICAgICAgICAgInNsIjogIiBjb20gZWR1IGdvdiBuZXQgb3JnICIsCiAgICAgICAgICAgICJzdCI6ICIgY28gY29tIGNvbnN1bGFkbyBlZHUgZW1iYWl4YWRhIGdvdiBtaWwgbmV0IG9yZyBwcmluY2lwZSBzYW90b21lIHN0b3JlICIsCiAgICAgICAgICAgICJzdiI6ICIgY29tIGVkdSBnb2Igb3JnIHJlZCAiLAogICAgICAgICAgICAic3oiOiAiIGFjIGNvIG9yZyAiLAogICAgICAgICAgICAidHIiOiAiIGF2IGJicyBiZWwgYml6IGNvbSBkciBlZHUgZ2VuIGdvdiBpbmZvIGsxMiBuYW1lIG5ldCBvcmcgcG9sIHRlbCB0c2sgdHYgd2ViICIsCiAgICAgICAgICAgICJ0dCI6ICIgYWVybyBiaXogY2F0IGNvIGNvbSBjb29wIGVkdSBnb3YgaW5mbyBpbnQgam9icyBtaWwgbW9iaSBtdXNldW0gbmFtZSBuZXQgb3JnIHBybyB0ZWwgdHJhdmVsICIsCiAgICAgICAgICAgICJ0dyI6ICIgY2x1YiBjb20gZWJpeiBlZHUgZ2FtZSBnb3YgaWR2IG1pbCBuZXQgb3JnICIsCiAgICAgICAgICAgICJtdSI6ICIgYWMgY28gY29tIGdvdiBuZXQgb3Igb3JnICIsCiAgICAgICAgICAgICJteiI6ICIgYWMgY28gZWR1IGdvdiBvcmcgIiwKICAgICAgICAgICAgIm5hIjogIiBjbyBjb20gIiwKICAgICAgICAgICAgIm56IjogIiBhYyBjbyBjcmkgZ2VlayBnZW4gZ292dCBoZWFsdGggaXdpIG1hb3JpIG1pbCBuZXQgb3JnIHBhcmxpYW1lbnQgc2Nob29sICIsCiAgICAgICAgICAgICJwYSI6ICIgYWJvIGFjIGNvbSBlZHUgZ29iIGluZyBtZWQgbmV0IG5vbSBvcmcgc2xkICIsCiAgICAgICAgICAgICJwdCI6ICIgY29tIGVkdSBnb3YgaW50IG5ldCBub21lIG9yZyBwdWJsICIsCiAgICAgICAgICAgICJweSI6ICIgY29tIGVkdSBnb3YgbWlsIG5ldCBvcmcgIiwKICAgICAgICAgICAgInFhIjogIiBjb20gZWR1IGdvdiBtaWwgbmV0IG9yZyAiLAogICAgICAgICAgICAicmUiOiAiIGFzc28gY29tIG5vbSAiLAogICAgICAgICAgICAicnUiOiAiIGFjIGFkeWdleWEgYWx0YWkgYW11ciBhcmtoYW5nZWxzayBhc3RyYWtoYW4gYmFzaGtpcmlhIGJlbGdvcm9kIGJpciBicnlhbnNrIGJ1cnlhdGlhIGNiZyBjaGVsIGNoZWx5YWJpbnNrIGNoaXRhIGNodWtvdGthIGNodXZhc2hpYSBjb20gZGFnZXN0YW4gZS1idXJnIGVkdSBnb3YgZ3Jvem55IGludCBpcmt1dHNrIGl2YW5vdm8gaXpoZXZzayBqYXIgam9zaGthci1vbGEga2FsbXlraWEga2FsdWdhIGthbWNoYXRrYSBrYXJlbGlhIGthemFuIGtjaHIga2VtZXJvdm8ga2hhYmFyb3ZzayBraGFrYXNzaWEga2h2IGtpcm92IGtvZW5pZyBrb21pIGtvc3Ryb21hIGtyYW5veWFyc2sga3ViYW4ga3VyZ2FuIGt1cnNrIGxpcGV0c2sgbWFnYWRhbiBtYXJpIG1hcmktZWwgbWFyaW5lIG1pbCBtb3Jkb3ZpYSBtb3NyZWcgbXNrIG11cm1hbnNrIG5hbGNoaWsgbmV0IG5ub3Ygbm92IG5vdm9zaWJpcnNrIG5zayBvbXNrIG9yZW5idXJnIG9yZyBvcnlvbCBwZW56YSBwZXJtIHBwIHBza292IHB0eiBybmQgcnlhemFuIHNha2hhbGluIHNhbWFyYSBzYXJhdG92IHNpbWJpcnNrIHNtb2xlbnNrIHNwYiBzdGF2cm9wb2wgc3R2IHN1cmd1dCB0YW1ib3YgdGF0YXJzdGFuIHRvbSB0b21zayB0c2FyaXRzeW4gdHNrIHR1bGEgdHV2YSB0dmVyIHR5dW1lbiB1ZG0gdWRtdXJ0aWEgdWxhbi11ZGUgdmxhZGlrYXZrYXogdmxhZGltaXIgdmxhZGl2b3N0b2sgdm9sZ29ncmFkIHZvbG9nZGEgdm9yb25lemggdnJuIHZ5YXRrYSB5YWt1dGlhIHlhbWFsIHlla2F0ZXJpbmJ1cmcgeXV6aG5vLXNha2hhbGluc2sgIiwKICAgICAgICAgICAgInJ3IjogIiBhYyBjbyBjb20gZWR1IGdvdXYgZ292IGludCBtaWwgbmV0ICIsCiAgICAgICAgICAgICJzYSI6ICIgY29tIGVkdSBnb3YgbWVkIG5ldCBvcmcgcHViIHNjaCAiLAogICAgICAgICAgICAic2QiOiAiIGNvbSBlZHUgZ292IGluZm8gbWVkIG5ldCBvcmcgdHYgIiwKICAgICAgICAgICAgInNlIjogIiBhIGFjIGIgYmQgYyBkIGUgZiBnIGggaSBrIGwgbSBuIG8gb3JnIHAgcGFydGkgcHAgcHJlc3MgciBzIHQgdG0gdSB3IHggeSB6ICIsCiAgICAgICAgICAgICJzZyI6ICIgY29tIGVkdSBnb3YgaWRuIG5ldCBvcmcgcGVyICIsCiAgICAgICAgICAgICJzbiI6ICIgYXJ0IGNvbSBlZHUgZ291diBvcmcgcGVyc28gdW5pdiAiLAogICAgICAgICAgICAic3kiOiAiIGNvbSBlZHUgZ292IG1pbCBuZXQgbmV3cyBvcmcgIiwKICAgICAgICAgICAgInRoIjogIiBhYyBjbyBnbyBpbiBtaSBuZXQgb3IgIiwKICAgICAgICAgICAgInRqIjogIiBhYyBiaXogY28gY29tIGVkdSBnbyBnb3YgaW5mbyBpbnQgbWlsIG5hbWUgbmV0IG5pYyBvcmcgdGVzdCB3ZWIgIiwKICAgICAgICAgICAgInRuIjogIiBhZ3JpbmV0IGNvbSBkZWZlbnNlIGVkdW5ldCBlbnMgZmluIGdvdiBpbmQgaW5mbyBpbnRsIG1pbmNvbSBuYXQgbmV0IG9yZyBwZXJzbyBybnJ0IHJucyBybnUgdG91cmlzbSAiLAogICAgICAgICAgICAidHoiOiAiIGFjIGNvIGdvIG5lIG9yICIsCiAgICAgICAgICAgICJ1YSI6ICIgYml6IGNoZXJrYXNzeSBjaGVybmlnb3YgY2hlcm5vdnRzeSBjayBjbiBjbyBjb20gY3JpbWVhIGN2IGRuIGRuZXByb3BldHJvdnNrIGRvbmV0c2sgZHAgZWR1IGdvdiBpZiBpbiBpdmFuby1mcmFua2l2c2sga2gga2hhcmtvdiBraGVyc29uIGtobWVsbml0c2tpeSBraWV2IGtpcm92b2dyYWQga20ga3Iga3Mga3YgbGcgbHVnYW5zayBsdXRzayBsdml2IG1lIG1rIG5ldCBuaWtvbGFldiBvZCBvZGVzc2Egb3JnIHBsIHBvbHRhdmEgcHAgcm92bm8gcnYgc2ViYXN0b3BvbCBzdW15IHRlIHRlcm5vcGlsIHV6aGdvcm9kIHZpbm5pY2Egdm4gemFwb3Jpemh6aGUgemhpdG9taXIgenAgenQgIiwKICAgICAgICAgICAgInVnIjogIiBhYyBjbyBnbyBuZSBvciBvcmcgc2MgIiwKICAgICAgICAgICAgInVrIjogIiBhYyBibCBicml0aXNoLWxpYnJhcnkgY28gY3ltIGdvdiBnb3Z0IGljbmV0IGpldCBsZWEgbHRkIG1lIG1pbCBtb2QgbmF0aW9uYWwtbGlicmFyeS1zY290bGFuZCBuZWwgbmV0IG5ocyBuaWMgbmxzIG9yZyBvcmduIHBhcmxpYW1lbnQgcGxjIHBvbGljZSBzY2ggc2NvdCBzb2MgIiwKICAgICAgICAgICAgInVzIjogIiBkbmkgZmVkIGlzYSBraWRzIG5zbiAiLAogICAgICAgICAgICAidXkiOiAiIGNvbSBlZHUgZ3ViIG1pbCBuZXQgb3JnICIsCiAgICAgICAgICAgICJ2ZSI6ICIgY28gY29tIGVkdSBnb2IgaW5mbyBtaWwgbmV0IG9yZyB3ZWIgIiwKICAgICAgICAgICAgInZpIjogIiBjbyBjb20gazEyIG5ldCBvcmcgIiwKICAgICAgICAgICAgInZuIjogIiBhYyBiaXogY29tIGVkdSBnb3YgaGVhbHRoIGluZm8gaW50IG5hbWUgbmV0IG9yZyBwcm8gIiwKICAgICAgICAgICAgInllIjogIiBjbyBjb20gZ292IGx0ZCBtZSBuZXQgb3JnIHBsYyAiLAogICAgICAgICAgICAieXUiOiAiIGFjIGNvIGVkdSBnb3Ygb3JnICIsCiAgICAgICAgICAgICJ6YSI6ICIgYWMgYWdyaWMgYWx0IGJvdXJzZSBjaXR5IGNvIGN5YmVybmV0IGRiIGVkdSBnb3YgZ3JvbmRhciBpYWNjZXNzIGltdCBpbmNhIGxhbmRlc2lnbiBsYXcgbWlsIG5ldCBuZ28gbmlzIG5vbSBvbGl2ZXR0aSBvcmcgcGl4IHNjaG9vbCB0bSB3ZWIgIiwKICAgICAgICAgICAgInptIjogIiBhYyBjbyBjb20gZWR1IGdvdiBuZXQgb3JnIHNjaCAiLAogICAgICAgICAgICAvLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DZW50cmFsTmljI1NlY29uZC1sZXZlbF9kb21haW5zCiAgICAgICAgICAgICJjb20iOiAiYXIgYnIgY24gZGUgZXUgZ2IgZ3IgaHUganBuIGtyIG5vIHFjIHJ1IHNhIHNlIHVrIHVzIHV5IHphICIsCiAgICAgICAgICAgICJuZXQiOiAiZ2IganAgc2UgdWsgIiwKICAgICAgICAgICAgIm9yZyI6ICJhZSIsCiAgICAgICAgICAgICJkZSI6ICJjb20gIgogICAgICAgICAgfSwKICAgICAgICAgIC8vIGdvcmhpbGwgMjAxMy0xMC0yNTogVXNpbmcgaW5kZXhPZigpIGluc3RlYWQgUmVnZXhwKCkuIFNpZ25pZmljYW50IGJvb3N0CiAgICAgICAgICAvLyBpbiBib3RoIHBlcmZvcm1hbmNlIGFuZCBtZW1vcnkgZm9vdHByaW50LiBObyBpbml0aWFsaXphdGlvbiByZXF1aXJlZC4KICAgICAgICAgIC8vIGh0dHA6Ly9qc3BlcmYuY29tL3VyaS1qcy1zbGQtcmVnZXgtdnMtYmluYXJ5LXNlYXJjaC80CiAgICAgICAgICAvLyBGb2xsb3dpbmcgbWV0aG9kcyB1c2UgbGFzdEluZGV4T2YoKSByYXRoZXIgdGhhbiBhcnJheS5zcGxpdCgpIGluIG9yZGVyCiAgICAgICAgICAvLyB0byBhdm9pZCBhbnkgbWVtb3J5IGFsbG9jYXRpb25zLgogICAgICAgICAgaGFzOiBmdW5jdGlvbihkb21haW4pIHsKICAgICAgICAgICAgdmFyIHRsZE9mZnNldCA9IGRvbWFpbi5sYXN0SW5kZXhPZigiLiIpOwogICAgICAgICAgICBpZiAodGxkT2Zmc2V0IDw9IDAgfHwgdGxkT2Zmc2V0ID49IGRvbWFpbi5sZW5ndGggLSAxKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBzbGRPZmZzZXQgPSBkb21haW4ubGFzdEluZGV4T2YoIi4iLCB0bGRPZmZzZXQgLSAxKTsKICAgICAgICAgICAgaWYgKHNsZE9mZnNldCA8PSAwIHx8IHNsZE9mZnNldCA+PSB0bGRPZmZzZXQgLSAxKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBzbGRMaXN0ID0gU0xELmxpc3RbZG9tYWluLnNsaWNlKHRsZE9mZnNldCArIDEpXTsKICAgICAgICAgICAgaWYgKCFzbGRMaXN0KSB7CiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBzbGRMaXN0LmluZGV4T2YoIiAiICsgZG9tYWluLnNsaWNlKHNsZE9mZnNldCArIDEsIHRsZE9mZnNldCkgKyAiICIpID49IDA7CiAgICAgICAgICB9LAogICAgICAgICAgaXM6IGZ1bmN0aW9uKGRvbWFpbikgewogICAgICAgICAgICB2YXIgdGxkT2Zmc2V0ID0gZG9tYWluLmxhc3RJbmRleE9mKCIuIik7CiAgICAgICAgICAgIGlmICh0bGRPZmZzZXQgPD0gMCB8fCB0bGRPZmZzZXQgPj0gZG9tYWluLmxlbmd0aCAtIDEpIHsKICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIHNsZE9mZnNldCA9IGRvbWFpbi5sYXN0SW5kZXhPZigiLiIsIHRsZE9mZnNldCAtIDEpOwogICAgICAgICAgICBpZiAoc2xkT2Zmc2V0ID49IDApIHsKICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIHNsZExpc3QgPSBTTEQubGlzdFtkb21haW4uc2xpY2UodGxkT2Zmc2V0ICsgMSldOwogICAgICAgICAgICBpZiAoIXNsZExpc3QpIHsKICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHNsZExpc3QuaW5kZXhPZigiICIgKyBkb21haW4uc2xpY2UoMCwgdGxkT2Zmc2V0KSArICIgIikgPj0gMDsKICAgICAgICAgIH0sCiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKGRvbWFpbikgewogICAgICAgICAgICB2YXIgdGxkT2Zmc2V0ID0gZG9tYWluLmxhc3RJbmRleE9mKCIuIik7CiAgICAgICAgICAgIGlmICh0bGRPZmZzZXQgPD0gMCB8fCB0bGRPZmZzZXQgPj0gZG9tYWluLmxlbmd0aCAtIDEpIHsKICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgc2xkT2Zmc2V0ID0gZG9tYWluLmxhc3RJbmRleE9mKCIuIiwgdGxkT2Zmc2V0IC0gMSk7CiAgICAgICAgICAgIGlmIChzbGRPZmZzZXQgPD0gMCB8fCBzbGRPZmZzZXQgPj0gdGxkT2Zmc2V0IC0gMSkgewogICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBzbGRMaXN0ID0gU0xELmxpc3RbZG9tYWluLnNsaWNlKHRsZE9mZnNldCArIDEpXTsKICAgICAgICAgICAgaWYgKCFzbGRMaXN0KSB7CiAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHNsZExpc3QuaW5kZXhPZigiICIgKyBkb21haW4uc2xpY2Uoc2xkT2Zmc2V0ICsgMSwgdGxkT2Zmc2V0KSArICIgIikgPCAwKSB7CiAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGRvbWFpbi5zbGljZShzbGRPZmZzZXQgKyAxKTsKICAgICAgICAgIH0sCiAgICAgICAgICBub0NvbmZsaWN0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaWYgKHJvb3QuU2Vjb25kTGV2ZWxEb21haW5zID09PSB0aGlzKSB7CiAgICAgICAgICAgICAgcm9vdC5TZWNvbmRMZXZlbERvbWFpbnMgPSBfU2Vjb25kTGV2ZWxEb21haW5zOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgcmV0dXJuIFNMRDsKICAgICAgfSk7CiAgICB9CiAgfSk7CgogIC8vIG5vZGVfbW9kdWxlcy91cmlqcy9zcmMvVVJJLmpzCiAgdmFyIHJlcXVpcmVfVVJJID0gX19jb21tb25KUyh7CiAgICAibm9kZV9tb2R1bGVzL3VyaWpzL3NyYy9VUkkuanMiKGV4cG9ydHMyLCBtb2R1bGUpIHsKICAgICAgLyohCiAgICAgICAqIFVSSS5qcyAtIE11dGF0aW5nIFVSTHMKICAgICAgICoKICAgICAgICogVmVyc2lvbjogMS4xOS4xMQogICAgICAgKgogICAgICAgKiBBdXRob3I6IFJvZG5leSBSZWhtCiAgICAgICAqIFdlYjogaHR0cDovL21lZGlhbGl6ZS5naXRodWIuaW8vVVJJLmpzLwogICAgICAgKgogICAgICAgKiBMaWNlbnNlZCB1bmRlcgogICAgICAgKiAgIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UKICAgICAgICoKICAgICAgICovCiAgICAgIChmdW5jdGlvbihyb290LCBmYWN0b3J5KSB7CiAgICAgICAgInVzZSBzdHJpY3QiOwogICAgICAgIGlmICh0eXBlb2YgbW9kdWxlID09PSAib2JqZWN0IiAmJiBtb2R1bGUuZXhwb3J0cykgewogICAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmVfcHVueWNvZGUoKSwgcmVxdWlyZV9JUHY2KCksIHJlcXVpcmVfU2Vjb25kTGV2ZWxEb21haW5zKCkpOwogICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gImZ1bmN0aW9uIiAmJiBkZWZpbmUuYW1kKSB7CiAgICAgICAgICBkZWZpbmUoWyIuL3B1bnljb2RlIiwgIi4vSVB2NiIsICIuL1NlY29uZExldmVsRG9tYWlucyJdLCBmYWN0b3J5KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcm9vdC5VUkkgPSBmYWN0b3J5KHJvb3QucHVueWNvZGUsIHJvb3QuSVB2Niwgcm9vdC5TZWNvbmRMZXZlbERvbWFpbnMsIHJvb3QpOwogICAgICAgIH0KICAgICAgfSkoZXhwb3J0czIsIGZ1bmN0aW9uKHB1bnljb2RlLCBJUHY2LCBTTEQsIHJvb3QpIHsKICAgICAgICAidXNlIHN0cmljdCI7CiAgICAgICAgdmFyIF9VUkkgPSByb290ICYmIHJvb3QuVVJJOwogICAgICAgIGZ1bmN0aW9uIFVSSSh1cmwsIGJhc2UpIHsKICAgICAgICAgIHZhciBfdXJsU3VwcGxpZWQgPSBhcmd1bWVudHMubGVuZ3RoID49IDE7CiAgICAgICAgICB2YXIgX2Jhc2VTdXBwbGllZCA9IGFyZ3VtZW50cy5sZW5ndGggPj0gMjsKICAgICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBVUkkpKSB7CiAgICAgICAgICAgIGlmIChfdXJsU3VwcGxpZWQpIHsKICAgICAgICAgICAgICBpZiAoX2Jhc2VTdXBwbGllZCkgewogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBVUkkodXJsLCBiYXNlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBVUkkodXJsKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gbmV3IFVSSSgpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHVybCA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgIGlmIChfdXJsU3VwcGxpZWQpIHsKICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJ1bmRlZmluZWQgaXMgbm90IGEgdmFsaWQgYXJndW1lbnQgZm9yIFVSSSIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh0eXBlb2YgbG9jYXRpb24gIT09ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICAgICAgdXJsID0gbG9jYXRpb24uaHJlZiArICIiOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHVybCA9ICIiOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodXJsID09PSBudWxsKSB7CiAgICAgICAgICAgIGlmIChfdXJsU3VwcGxpZWQpIHsKICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJudWxsIGlzIG5vdCBhIHZhbGlkIGFyZ3VtZW50IGZvciBVUkkiKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgdGhpcy5ocmVmKHVybCk7CiAgICAgICAgICBpZiAoYmFzZSAhPT0gdm9pZCAwKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmFic29sdXRlVG8oYmFzZSk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gaXNJbnRlZ2VyKHZhbHVlKSB7CiAgICAgICAgICByZXR1cm4gL15bMC05XSskLy50ZXN0KHZhbHVlKTsKICAgICAgICB9CiAgICAgICAgVVJJLnZlcnNpb24gPSAiMS4xOS4xMSI7CiAgICAgICAgdmFyIHAgPSBVUkkucHJvdG90eXBlOwogICAgICAgIHZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5OwogICAgICAgIGZ1bmN0aW9uIGVzY2FwZVJlZ0V4KHN0cmluZykgewogICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC8oWy4qKz9ePSE6JHt9KCl8W1xdXC9cXF0pL2csICJcXCQxIik7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIGdldFR5cGUodmFsdWUpIHsKICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgIHJldHVybiAiVW5kZWZpbmVkIjsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBTdHJpbmcoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSkuc2xpY2UoOCwgLTEpOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBpc0FycmF5KG9iaikgewogICAgICAgICAgcmV0dXJuIGdldFR5cGUob2JqKSA9PT0gIkFycmF5IjsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gZmlsdGVyQXJyYXlWYWx1ZXMoZGF0YSwgdmFsdWUpIHsKICAgICAgICAgIHZhciBsb29rdXAgPSB7fTsKICAgICAgICAgIHZhciBpLCBsZW5ndGg7CiAgICAgICAgICBpZiAoZ2V0VHlwZSh2YWx1ZSkgPT09ICJSZWdFeHAiKSB7CiAgICAgICAgICAgIGxvb2t1cCA9IG51bGw7CiAgICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkodmFsdWUpKSB7CiAgICAgICAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgbG9va3VwW3ZhbHVlW2ldXSA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGxvb2t1cFt2YWx1ZV0gPSB0cnVlOwogICAgICAgICAgfQogICAgICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gZGF0YS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgICAgICB2YXIgX21hdGNoID0gbG9va3VwICYmIGxvb2t1cFtkYXRhW2ldXSAhPT0gdm9pZCAwIHx8ICFsb29rdXAgJiYgdmFsdWUudGVzdChkYXRhW2ldKTsKICAgICAgICAgICAgaWYgKF9tYXRjaCkgewogICAgICAgICAgICAgIGRhdGEuc3BsaWNlKGksIDEpOwogICAgICAgICAgICAgIGxlbmd0aC0tOwogICAgICAgICAgICAgIGktLTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIGRhdGE7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIGFycmF5Q29udGFpbnMobGlzdCwgdmFsdWUpIHsKICAgICAgICAgIHZhciBpLCBsZW5ndGg7CiAgICAgICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHsKICAgICAgICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gdmFsdWUubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICBpZiAoIWFycmF5Q29udGFpbnMobGlzdCwgdmFsdWVbaV0pKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgfQogICAgICAgICAgdmFyIF90eXBlID0gZ2V0VHlwZSh2YWx1ZSk7CiAgICAgICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBsaXN0Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmIChfdHlwZSA9PT0gIlJlZ0V4cCIpIHsKICAgICAgICAgICAgICBpZiAodHlwZW9mIGxpc3RbaV0gPT09ICJzdHJpbmciICYmIGxpc3RbaV0ubWF0Y2godmFsdWUpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSBpZiAobGlzdFtpXSA9PT0gdmFsdWUpIHsKICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBhcnJheXNFcXVhbChvbmUsIHR3bykgewogICAgICAgICAgaWYgKCFpc0FycmF5KG9uZSkgfHwgIWlzQXJyYXkodHdvKSkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAob25lLmxlbmd0aCAhPT0gdHdvLmxlbmd0aCkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICB9CiAgICAgICAgICBvbmUuc29ydCgpOwogICAgICAgICAgdHdvLnNvcnQoKTsKICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gb25lLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgICAgICBpZiAob25lW2ldICE9PSB0d29baV0pIHsKICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiB0cmltU2xhc2hlcyh0ZXh0KSB7CiAgICAgICAgICB2YXIgdHJpbV9leHByZXNzaW9uID0gL15cLyt8XC8rJC9nOwogICAgICAgICAgcmV0dXJuIHRleHQucmVwbGFjZSh0cmltX2V4cHJlc3Npb24sICIiKTsKICAgICAgICB9CiAgICAgICAgVVJJLl9wYXJ0cyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgcHJvdG9jb2w6IG51bGwsCiAgICAgICAgICAgIHVzZXJuYW1lOiBudWxsLAogICAgICAgICAgICBwYXNzd29yZDogbnVsbCwKICAgICAgICAgICAgaG9zdG5hbWU6IG51bGwsCiAgICAgICAgICAgIHVybjogbnVsbCwKICAgICAgICAgICAgcG9ydDogbnVsbCwKICAgICAgICAgICAgcGF0aDogbnVsbCwKICAgICAgICAgICAgcXVlcnk6IG51bGwsCiAgICAgICAgICAgIGZyYWdtZW50OiBudWxsLAogICAgICAgICAgICAvLyBzdGF0ZQogICAgICAgICAgICBwcmV2ZW50SW52YWxpZEhvc3RuYW1lOiBVUkkucHJldmVudEludmFsaWRIb3N0bmFtZSwKICAgICAgICAgICAgZHVwbGljYXRlUXVlcnlQYXJhbWV0ZXJzOiBVUkkuZHVwbGljYXRlUXVlcnlQYXJhbWV0ZXJzLAogICAgICAgICAgICBlc2NhcGVRdWVyeVNwYWNlOiBVUkkuZXNjYXBlUXVlcnlTcGFjZQogICAgICAgICAgfTsKICAgICAgICB9OwogICAgICAgIFVSSS5wcmV2ZW50SW52YWxpZEhvc3RuYW1lID0gZmFsc2U7CiAgICAgICAgVVJJLmR1cGxpY2F0ZVF1ZXJ5UGFyYW1ldGVycyA9IGZhbHNlOwogICAgICAgIFVSSS5lc2NhcGVRdWVyeVNwYWNlID0gdHJ1ZTsKICAgICAgICBVUkkucHJvdG9jb2xfZXhwcmVzc2lvbiA9IC9eW2Etel1bYS16MC05ListXSokL2k7CiAgICAgICAgVVJJLmlkbl9leHByZXNzaW9uID0gL1teYS16MC05XC5fLV0vaTsKICAgICAgICBVUkkucHVueWNvZGVfZXhwcmVzc2lvbiA9IC8oeG4tLSkvaTsKICAgICAgICBVUkkuaXA0X2V4cHJlc3Npb24gPSAvXlxkezEsM31cLlxkezEsM31cLlxkezEsM31cLlxkezEsM30kLzsKICAgICAgICBVUkkuaXA2X2V4cHJlc3Npb24gPSAvXlxzKigoKFswLTlBLUZhLWZdezEsNH06KXs3fShbMC05QS1GYS1mXXsxLDR9fDopKXwoKFswLTlBLUZhLWZdezEsNH06KXs2fSg6WzAtOUEtRmEtZl17MSw0fXwoKDI1WzAtNV18MlswLTRdXGR8MVxkXGR8WzEtOV0/XGQpKFwuKDI1WzAtNV18MlswLTRdXGR8MVxkXGR8WzEtOV0/XGQpKXszfSl8OikpfCgoWzAtOUEtRmEtZl17MSw0fTopezV9KCgoOlswLTlBLUZhLWZdezEsNH0pezEsMn0pfDooKDI1WzAtNV18MlswLTRdXGR8MVxkXGR8WzEtOV0/XGQpKFwuKDI1WzAtNV18MlswLTRdXGR8MVxkXGR8WzEtOV0/XGQpKXszfSl8OikpfCgoWzAtOUEtRmEtZl17MSw0fTopezR9KCgoOlswLTlBLUZhLWZdezEsNH0pezEsM30pfCgoOlswLTlBLUZhLWZdezEsNH0pPzooKDI1WzAtNV18MlswLTRdXGR8MVxkXGR8WzEtOV0/XGQpKFwuKDI1WzAtNV18MlswLTRdXGR8MVxkXGR8WzEtOV0/XGQpKXszfSkpfDopKXwoKFswLTlBLUZhLWZdezEsNH06KXszfSgoKDpbMC05QS1GYS1mXXsxLDR9KXsxLDR9KXwoKDpbMC05QS1GYS1mXXsxLDR9KXswLDJ9OigoMjVbMC01XXwyWzAtNF1cZHwxXGRcZHxbMS05XT9cZCkoXC4oMjVbMC01XXwyWzAtNF1cZHwxXGRcZHxbMS05XT9cZCkpezN9KSl8OikpfCgoWzAtOUEtRmEtZl17MSw0fTopezJ9KCgoOlswLTlBLUZhLWZdezEsNH0pezEsNX0pfCgoOlswLTlBLUZhLWZdezEsNH0pezAsM306KCgyNVswLTVdfDJbMC00XVxkfDFcZFxkfFsxLTldP1xkKShcLigyNVswLTVdfDJbMC00XVxkfDFcZFxkfFsxLTldP1xkKSl7M30pKXw6KSl8KChbMC05QS1GYS1mXXsxLDR9Oil7MX0oKCg6WzAtOUEtRmEtZl17MSw0fSl7MSw2fSl8KCg6WzAtOUEtRmEtZl17MSw0fSl7MCw0fTooKDI1WzAtNV18MlswLTRdXGR8MVxkXGR8WzEtOV0/XGQpKFwuKDI1WzAtNV18MlswLTRdXGR8MVxkXGR8WzEtOV0/XGQpKXszfSkpfDopKXwoOigoKDpbMC05QS1GYS1mXXsxLDR9KXsxLDd9KXwoKDpbMC05QS1GYS1mXXsxLDR9KXswLDV9OigoMjVbMC01XXwyWzAtNF1cZHwxXGRcZHxbMS05XT9cZCkoXC4oMjVbMC01XXwyWzAtNF1cZHwxXGRcZHxbMS05XT9cZCkpezN9KSl8OikpKSglLispP1xzKiQvOwogICAgICAgIFVSSS5maW5kX3VyaV9leHByZXNzaW9uID0gL1xiKCg/OlthLXpdW1x3LV0rOig/OlwvezEsM318W2EtejAtOSVdKXx3d3dcZHswLDN9Wy5dfFthLXowLTkuXC1dK1suXVthLXpdezIsNH1cLykoPzpbXlxzKCk8Pl0rfFwoKFteXHMoKTw+XSt8KFwoW15ccygpPD5dK1wpKSkqXCkpKyg/OlwoKFteXHMoKTw+XSt8KFwoW15ccygpPD5dK1wpKSkqXCl8W15cc2AhKClcW1xde307OiciLiw8Pj/Cq8K74oCc4oCd4oCY4oCZXSkpL2lnOwogICAgICAgIFVSSS5maW5kVXJpID0gewogICAgICAgICAgLy8gdmFsaWQgInNjaGVtZTovLyIgb3IgInd3dy4iCiAgICAgICAgICBzdGFydDogL1xiKD86KFthLXpdW2EtejAtOS4rLV0qOlwvXC8pfHd3d1wuKS9naSwKICAgICAgICAgIC8vIGV2ZXJ5dGhpbmcgdXAgdG8gdGhlIG5leHQgd2hpdGVzcGFjZQogICAgICAgICAgZW5kOiAvW1xzXHJcbl18JC8sCiAgICAgICAgICAvLyB0cmltIHRyYWlsaW5nIHB1bmN0dWF0aW9uIGNhcHR1cmVkIGJ5IGVuZCBSZWdFeHAKICAgICAgICAgIHRyaW06IC9bYCEoKVxbXF17fTs6JyIuLDw+P8KrwrvigJzigJ3igJ7igJjigJldKyQvLAogICAgICAgICAgLy8gYmFsYW5jZWQgcGFyZW5zIGluY2x1c2lvbiAoKSwgW10sIHt9LCA8PgogICAgICAgICAgcGFyZW5zOiAvKFwoW15cKV0qXCl8XFtbXlxdXSpcXXxce1tefV0qXH18PFtePl0qPikvZwogICAgICAgIH07CiAgICAgICAgVVJJLmxlYWRpbmdfd2hpdGVzcGFjZV9leHByZXNzaW9uID0gL15bXHgwMC1ceDIwXHUwMGEwXHUxNjgwXHUyMDAwLVx1MjAwYVx1MjAyOFx1MjAyOVx1MjAyZlx1MjA1Zlx1MzAwMFx1ZmVmZl0rLzsKICAgICAgICBVUkkuYXNjaWlfdGFiX3doaXRlc3BhY2UgPSAvW1x1MDAwOVx1MDAwQVx1MDAwRF0rL2c7CiAgICAgICAgVVJJLmRlZmF1bHRQb3J0cyA9IHsKICAgICAgICAgIGh0dHA6ICI4MCIsCiAgICAgICAgICBodHRwczogIjQ0MyIsCiAgICAgICAgICBmdHA6ICIyMSIsCiAgICAgICAgICBnb3BoZXI6ICI3MCIsCiAgICAgICAgICB3czogIjgwIiwKICAgICAgICAgIHdzczogIjQ0MyIKICAgICAgICB9OwogICAgICAgIFVSSS5ob3N0UHJvdG9jb2xzID0gWwogICAgICAgICAgImh0dHAiLAogICAgICAgICAgImh0dHBzIgogICAgICAgIF07CiAgICAgICAgVVJJLmludmFsaWRfaG9zdG5hbWVfY2hhcmFjdGVycyA9IC9bXmEtekEtWjAtOVwuXC06X10vOwogICAgICAgIFVSSS5kb21BdHRyaWJ1dGVzID0gewogICAgICAgICAgImEiOiAiaHJlZiIsCiAgICAgICAgICAiYmxvY2txdW90ZSI6ICJjaXRlIiwKICAgICAgICAgICJsaW5rIjogImhyZWYiLAogICAgICAgICAgImJhc2UiOiAiaHJlZiIsCiAgICAgICAgICAic2NyaXB0IjogInNyYyIsCiAgICAgICAgICAiZm9ybSI6ICJhY3Rpb24iLAogICAgICAgICAgImltZyI6ICJzcmMiLAogICAgICAgICAgImFyZWEiOiAiaHJlZiIsCiAgICAgICAgICAiaWZyYW1lIjogInNyYyIsCiAgICAgICAgICAiZW1iZWQiOiAic3JjIiwKICAgICAgICAgICJzb3VyY2UiOiAic3JjIiwKICAgICAgICAgICJ0cmFjayI6ICJzcmMiLAogICAgICAgICAgImlucHV0IjogInNyYyIsCiAgICAgICAgICAvLyBidXQgb25seSBpZiB0eXBlPSJpbWFnZSIKICAgICAgICAgICJhdWRpbyI6ICJzcmMiLAogICAgICAgICAgInZpZGVvIjogInNyYyIKICAgICAgICB9OwogICAgICAgIFVSSS5nZXREb21BdHRyaWJ1dGUgPSBmdW5jdGlvbihub2RlKSB7CiAgICAgICAgICBpZiAoIW5vZGUgfHwgIW5vZGUubm9kZU5hbWUpIHsKICAgICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBub2RlTmFtZSA9IG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTsKICAgICAgICAgIGlmIChub2RlTmFtZSA9PT0gImlucHV0IiAmJiBub2RlLnR5cGUgIT09ICJpbWFnZSIpIHsKICAgICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBVUkkuZG9tQXR0cmlidXRlc1tub2RlTmFtZV07CiAgICAgICAgfTsKICAgICAgICBmdW5jdGlvbiBlc2NhcGVGb3JEdW1iRmlyZWZveDM2KHZhbHVlKSB7CiAgICAgICAgICByZXR1cm4gZXNjYXBlKHZhbHVlKTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gc3RyaWN0RW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZykgewogICAgICAgICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmcpLnJlcGxhY2UoL1shJygpKl0vZywgZXNjYXBlRm9yRHVtYkZpcmVmb3gzNikucmVwbGFjZSgvXCovZywgIiUyQSIpOwogICAgICAgIH0KICAgICAgICBVUkkuZW5jb2RlID0gc3RyaWN0RW5jb2RlVVJJQ29tcG9uZW50OwogICAgICAgIFVSSS5kZWNvZGUgPSBkZWNvZGVVUklDb21wb25lbnQ7CiAgICAgICAgVVJJLmlzbzg4NTkgPSBmdW5jdGlvbigpIHsKICAgICAgICAgIFVSSS5lbmNvZGUgPSBlc2NhcGU7CiAgICAgICAgICBVUkkuZGVjb2RlID0gdW5lc2NhcGU7CiAgICAgICAgfTsKICAgICAgICBVUkkudW5pY29kZSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgVVJJLmVuY29kZSA9IHN0cmljdEVuY29kZVVSSUNvbXBvbmVudDsKICAgICAgICAgIFVSSS5kZWNvZGUgPSBkZWNvZGVVUklDb21wb25lbnQ7CiAgICAgICAgfTsKICAgICAgICBVUkkuY2hhcmFjdGVycyA9IHsKICAgICAgICAgIHBhdGhuYW1lOiB7CiAgICAgICAgICAgIGVuY29kZTogewogICAgICAgICAgICAgIC8vIFJGQzM5ODYgMi4xOiBGb3IgY29uc2lzdGVuY3ksIFVSSSBwcm9kdWNlcnMgYW5kIG5vcm1hbGl6ZXJzIHNob3VsZAogICAgICAgICAgICAgIC8vIHVzZSB1cHBlcmNhc2UgaGV4YWRlY2ltYWwgZGlnaXRzIGZvciBhbGwgcGVyY2VudC1lbmNvZGluZ3MuCiAgICAgICAgICAgICAgZXhwcmVzc2lvbjogLyUoMjR8MjZ8MkJ8MkN8M0J8M0R8M0F8NDApL2lnLAogICAgICAgICAgICAgIG1hcDogewogICAgICAgICAgICAgICAgLy8gLS5ffiEnKCkqCiAgICAgICAgICAgICAgICAiJTI0IjogIiQiLAogICAgICAgICAgICAgICAgIiUyNiI6ICImIiwKICAgICAgICAgICAgICAgICIlMkIiOiAiKyIsCiAgICAgICAgICAgICAgICAiJTJDIjogIiwiLAogICAgICAgICAgICAgICAgIiUzQiI6ICI7IiwKICAgICAgICAgICAgICAgICIlM0QiOiAiPSIsCiAgICAgICAgICAgICAgICAiJTNBIjogIjoiLAogICAgICAgICAgICAgICAgIiU0MCI6ICJAIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgZGVjb2RlOiB7CiAgICAgICAgICAgICAgZXhwcmVzc2lvbjogL1tcL1w/I10vZywKICAgICAgICAgICAgICBtYXA6IHsKICAgICAgICAgICAgICAgICIvIjogIiUyRiIsCiAgICAgICAgICAgICAgICAiPyI6ICIlM0YiLAogICAgICAgICAgICAgICAgIiMiOiAiJTIzIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIHJlc2VydmVkOiB7CiAgICAgICAgICAgIGVuY29kZTogewogICAgICAgICAgICAgIC8vIFJGQzM5ODYgMi4xOiBGb3IgY29uc2lzdGVuY3ksIFVSSSBwcm9kdWNlcnMgYW5kIG5vcm1hbGl6ZXJzIHNob3VsZAogICAgICAgICAgICAgIC8vIHVzZSB1cHBlcmNhc2UgaGV4YWRlY2ltYWwgZGlnaXRzIGZvciBhbGwgcGVyY2VudC1lbmNvZGluZ3MuCiAgICAgICAgICAgICAgZXhwcmVzc2lvbjogLyUoMjF8MjN8MjR8MjZ8Mjd8Mjh8Mjl8MkF8MkJ8MkN8MkZ8M0F8M0J8M0R8M0Z8NDB8NUJ8NUQpL2lnLAogICAgICAgICAgICAgIG1hcDogewogICAgICAgICAgICAgICAgLy8gZ2VuLWRlbGltcwogICAgICAgICAgICAgICAgIiUzQSI6ICI6IiwKICAgICAgICAgICAgICAgICIlMkYiOiAiLyIsCiAgICAgICAgICAgICAgICAiJTNGIjogIj8iLAogICAgICAgICAgICAgICAgIiUyMyI6ICIjIiwKICAgICAgICAgICAgICAgICIlNUIiOiAiWyIsCiAgICAgICAgICAgICAgICAiJTVEIjogIl0iLAogICAgICAgICAgICAgICAgIiU0MCI6ICJAIiwKICAgICAgICAgICAgICAgIC8vIHN1Yi1kZWxpbXMKICAgICAgICAgICAgICAgICIlMjEiOiAiISIsCiAgICAgICAgICAgICAgICAiJTI0IjogIiQiLAogICAgICAgICAgICAgICAgIiUyNiI6ICImIiwKICAgICAgICAgICAgICAgICIlMjciOiAiJyIsCiAgICAgICAgICAgICAgICAiJTI4IjogIigiLAogICAgICAgICAgICAgICAgIiUyOSI6ICIpIiwKICAgICAgICAgICAgICAgICIlMkEiOiAiKiIsCiAgICAgICAgICAgICAgICAiJTJCIjogIisiLAogICAgICAgICAgICAgICAgIiUyQyI6ICIsIiwKICAgICAgICAgICAgICAgICIlM0IiOiAiOyIsCiAgICAgICAgICAgICAgICAiJTNEIjogIj0iCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgdXJucGF0aDogewogICAgICAgICAgICAvLyBUaGUgY2hhcmFjdGVycyB1bmRlciBgZW5jb2RlYCBhcmUgdGhlIGNoYXJhY3RlcnMgY2FsbGVkIG91dCBieSBSRkMgMjE0MSBhcyBiZWluZyBhY2NlcHRhYmxlCiAgICAgICAgICAgIC8vIGZvciB1c2FnZSBpbiBhIFVSTi4gUkZDMjE0MSBhbHNvIGNhbGxzIG91dCAiLSIsICIuIiwgYW5kICJfIiBhcyBhY2NlcHRhYmxlIGNoYXJhY3RlcnMsIGJ1dAogICAgICAgICAgICAvLyB0aGVzZSBhcmVuJ3QgZW5jb2RlZCBieSBlbmNvZGVVUklDb21wb25lbnQsIHNvIHdlIGRvbid0IGhhdmUgdG8gY2FsbCB0aGVtIG91dCBoZXJlLiBBbHNvCiAgICAgICAgICAgIC8vIG5vdGUgdGhhdCB0aGUgY29sb24gY2hhcmFjdGVyIGlzIG5vdCBmZWF0dXJlZCBpbiB0aGUgZW5jb2RpbmcgbWFwOyB0aGlzIGlzIGJlY2F1c2UgVVJJLmpzCiAgICAgICAgICAgIC8vIGdpdmVzIHRoZSBjb2xvbnMgaW4gVVJOcyBzZW1hbnRpYyBtZWFuaW5nIGFzIHRoZSBkZWxpbWl0ZXJzIG9mIHBhdGggc2VnZW1lbnRzLCBhbmQgc28gaXQKICAgICAgICAgICAgLy8gc2hvdWxkIG5vdCBhcHBlYXIgdW5lbmNvZGVkIGluIGEgc2VnbWVudCBpdHNlbGYuCiAgICAgICAgICAgIC8vIFNlZSBhbHNvIHRoZSBub3RlIGFib3ZlIGFib3V0IFJGQzM5ODYgYW5kIGNhcGl0YWxhbGl6ZWQgaGV4IGRpZ2l0cy4KICAgICAgICAgICAgZW5jb2RlOiB7CiAgICAgICAgICAgICAgZXhwcmVzc2lvbjogLyUoMjF8MjR8Mjd8Mjh8Mjl8MkF8MkJ8MkN8M0J8M0R8NDApL2lnLAogICAgICAgICAgICAgIG1hcDogewogICAgICAgICAgICAgICAgIiUyMSI6ICIhIiwKICAgICAgICAgICAgICAgICIlMjQiOiAiJCIsCiAgICAgICAgICAgICAgICAiJTI3IjogIiciLAogICAgICAgICAgICAgICAgIiUyOCI6ICIoIiwKICAgICAgICAgICAgICAgICIlMjkiOiAiKSIsCiAgICAgICAgICAgICAgICAiJTJBIjogIioiLAogICAgICAgICAgICAgICAgIiUyQiI6ICIrIiwKICAgICAgICAgICAgICAgICIlMkMiOiAiLCIsCiAgICAgICAgICAgICAgICAiJTNCIjogIjsiLAogICAgICAgICAgICAgICAgIiUzRCI6ICI9IiwKICAgICAgICAgICAgICAgICIlNDAiOiAiQCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIC8vIFRoZXNlIGNoYXJhY3RlcnMgYXJlIHRoZSBjaGFyYWN0ZXJzIGNhbGxlZCBvdXQgYnkgUkZDMjE0MSBhcyAicmVzZXJ2ZWQiIGNoYXJhY3RlcnMgdGhhdAogICAgICAgICAgICAvLyBzaG91bGQgbmV2ZXIgYXBwZWFyIGluIGEgVVJOLCBwbHVzIHRoZSBjb2xvbiBjaGFyYWN0ZXIgKHNlZSBub3RlIGFib3ZlKS4KICAgICAgICAgICAgZGVjb2RlOiB7CiAgICAgICAgICAgICAgZXhwcmVzc2lvbjogL1tcL1w/IzpdL2csCiAgICAgICAgICAgICAgbWFwOiB7CiAgICAgICAgICAgICAgICAiLyI6ICIlMkYiLAogICAgICAgICAgICAgICAgIj8iOiAiJTNGIiwKICAgICAgICAgICAgICAgICIjIjogIiUyMyIsCiAgICAgICAgICAgICAgICAiOiI6ICIlM0EiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICBVUkkuZW5jb2RlUXVlcnkgPSBmdW5jdGlvbihzdHJpbmcsIGVzY2FwZVF1ZXJ5U3BhY2UpIHsKICAgICAgICAgIHZhciBlc2NhcGVkID0gVVJJLmVuY29kZShzdHJpbmcgKyAiIik7CiAgICAgICAgICBpZiAoZXNjYXBlUXVlcnlTcGFjZSA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgIGVzY2FwZVF1ZXJ5U3BhY2UgPSBVUkkuZXNjYXBlUXVlcnlTcGFjZTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBlc2NhcGVRdWVyeVNwYWNlID8gZXNjYXBlZC5yZXBsYWNlKC8lMjAvZywgIisiKSA6IGVzY2FwZWQ7CiAgICAgICAgfTsKICAgICAgICBVUkkuZGVjb2RlUXVlcnkgPSBmdW5jdGlvbihzdHJpbmcsIGVzY2FwZVF1ZXJ5U3BhY2UpIHsKICAgICAgICAgIHN0cmluZyArPSAiIjsKICAgICAgICAgIGlmIChlc2NhcGVRdWVyeVNwYWNlID09PSB2b2lkIDApIHsKICAgICAgICAgICAgZXNjYXBlUXVlcnlTcGFjZSA9IFVSSS5lc2NhcGVRdWVyeVNwYWNlOwogICAgICAgICAgfQogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgcmV0dXJuIFVSSS5kZWNvZGUoZXNjYXBlUXVlcnlTcGFjZSA/IHN0cmluZy5yZXBsYWNlKC9cKy9nLCAiJTIwIikgOiBzdHJpbmcpOwogICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICByZXR1cm4gc3RyaW5nOwogICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgdmFyIF9wYXJ0cyA9IHsgImVuY29kZSI6ICJlbmNvZGUiLCAiZGVjb2RlIjogImRlY29kZSIgfTsKICAgICAgICB2YXIgX3BhcnQ7CiAgICAgICAgdmFyIGdlbmVyYXRlQWNjZXNzb3IgPSBmdW5jdGlvbihfZ3JvdXAsIF9wYXJ0MikgewogICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgIHJldHVybiBVUklbX3BhcnQyXShzdHJpbmcgKyAiIikucmVwbGFjZShVUkkuY2hhcmFjdGVyc1tfZ3JvdXBdW19wYXJ0Ml0uZXhwcmVzc2lvbiwgZnVuY3Rpb24oYykgewogICAgICAgICAgICAgICAgcmV0dXJuIFVSSS5jaGFyYWN0ZXJzW19ncm91cF1bX3BhcnQyXS5tYXBbY107CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICByZXR1cm4gc3RyaW5nOwogICAgICAgICAgICB9CiAgICAgICAgICB9OwogICAgICAgIH07CiAgICAgICAgZm9yIChfcGFydCBpbiBfcGFydHMpIHsKICAgICAgICAgIFVSSVtfcGFydCArICJQYXRoU2VnbWVudCJdID0gZ2VuZXJhdGVBY2Nlc3NvcigicGF0aG5hbWUiLCBfcGFydHNbX3BhcnRdKTsKICAgICAgICAgIFVSSVtfcGFydCArICJVcm5QYXRoU2VnbWVudCJdID0gZ2VuZXJhdGVBY2Nlc3NvcigidXJucGF0aCIsIF9wYXJ0c1tfcGFydF0pOwogICAgICAgIH0KICAgICAgICB2YXIgZ2VuZXJhdGVTZWdtZW50ZWRQYXRoRnVuY3Rpb24gPSBmdW5jdGlvbihfc2VwLCBfY29kaW5nRnVuY05hbWUsIF9pbm5lckNvZGluZ0Z1bmNOYW1lKSB7CiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7CiAgICAgICAgICAgIHZhciBhY3R1YWxDb2RpbmdGdW5jOwogICAgICAgICAgICBpZiAoIV9pbm5lckNvZGluZ0Z1bmNOYW1lKSB7CiAgICAgICAgICAgICAgYWN0dWFsQ29kaW5nRnVuYyA9IFVSSVtfY29kaW5nRnVuY05hbWVdOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGFjdHVhbENvZGluZ0Z1bmMgPSBmdW5jdGlvbihzdHJpbmcyKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gVVJJW19jb2RpbmdGdW5jTmFtZV0oVVJJW19pbm5lckNvZGluZ0Z1bmNOYW1lXShzdHJpbmcyKSk7CiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgc2VnbWVudHMgPSAoc3RyaW5nICsgIiIpLnNwbGl0KF9zZXApOwogICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gc2VnbWVudHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICBzZWdtZW50c1tpXSA9IGFjdHVhbENvZGluZ0Z1bmMoc2VnbWVudHNbaV0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBzZWdtZW50cy5qb2luKF9zZXApOwogICAgICAgICAgfTsKICAgICAgICB9OwogICAgICAgIFVSSS5kZWNvZGVQYXRoID0gZ2VuZXJhdGVTZWdtZW50ZWRQYXRoRnVuY3Rpb24oIi8iLCAiZGVjb2RlUGF0aFNlZ21lbnQiKTsKICAgICAgICBVUkkuZGVjb2RlVXJuUGF0aCA9IGdlbmVyYXRlU2VnbWVudGVkUGF0aEZ1bmN0aW9uKCI6IiwgImRlY29kZVVyblBhdGhTZWdtZW50Iik7CiAgICAgICAgVVJJLnJlY29kZVBhdGggPSBnZW5lcmF0ZVNlZ21lbnRlZFBhdGhGdW5jdGlvbigiLyIsICJlbmNvZGVQYXRoU2VnbWVudCIsICJkZWNvZGUiKTsKICAgICAgICBVUkkucmVjb2RlVXJuUGF0aCA9IGdlbmVyYXRlU2VnbWVudGVkUGF0aEZ1bmN0aW9uKCI6IiwgImVuY29kZVVyblBhdGhTZWdtZW50IiwgImRlY29kZSIpOwogICAgICAgIFVSSS5lbmNvZGVSZXNlcnZlZCA9IGdlbmVyYXRlQWNjZXNzb3IoInJlc2VydmVkIiwgImVuY29kZSIpOwogICAgICAgIFVSSS5wYXJzZSA9IGZ1bmN0aW9uKHN0cmluZywgcGFydHMpIHsKICAgICAgICAgIHZhciBwb3M7CiAgICAgICAgICBpZiAoIXBhcnRzKSB7CiAgICAgICAgICAgIHBhcnRzID0gewogICAgICAgICAgICAgIHByZXZlbnRJbnZhbGlkSG9zdG5hbWU6IFVSSS5wcmV2ZW50SW52YWxpZEhvc3RuYW1lCiAgICAgICAgICAgIH07CiAgICAgICAgICB9CiAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShVUkkubGVhZGluZ193aGl0ZXNwYWNlX2V4cHJlc3Npb24sICIiKTsKICAgICAgICAgIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKFVSSS5hc2NpaV90YWJfd2hpdGVzcGFjZSwgIiIpOwogICAgICAgICAgcG9zID0gc3RyaW5nLmluZGV4T2YoIiMiKTsKICAgICAgICAgIGlmIChwb3MgPiAtMSkgewogICAgICAgICAgICBwYXJ0cy5mcmFnbWVudCA9IHN0cmluZy5zdWJzdHJpbmcocG9zICsgMSkgfHwgbnVsbDsKICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nLnN1YnN0cmluZygwLCBwb3MpOwogICAgICAgICAgfQogICAgICAgICAgcG9zID0gc3RyaW5nLmluZGV4T2YoIj8iKTsKICAgICAgICAgIGlmIChwb3MgPiAtMSkgewogICAgICAgICAgICBwYXJ0cy5xdWVyeSA9IHN0cmluZy5zdWJzdHJpbmcocG9zICsgMSkgfHwgbnVsbDsKICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nLnN1YnN0cmluZygwLCBwb3MpOwogICAgICAgICAgfQogICAgICAgICAgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UoL14oaHR0cHM/fGZ0cHx3c3M/KT86K1svXFxdKi9pLCAiJDE6Ly8iKTsKICAgICAgICAgIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKC9eWy9cXF17Mix9L2ksICIvLyIpOwogICAgICAgICAgaWYgKHN0cmluZy5zdWJzdHJpbmcoMCwgMikgPT09ICIvLyIpIHsKICAgICAgICAgICAgcGFydHMucHJvdG9jb2wgPSBudWxsOwogICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcuc3Vic3RyaW5nKDIpOwogICAgICAgICAgICBzdHJpbmcgPSBVUkkucGFyc2VBdXRob3JpdHkoc3RyaW5nLCBwYXJ0cyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBwb3MgPSBzdHJpbmcuaW5kZXhPZigiOiIpOwogICAgICAgICAgICBpZiAocG9zID4gLTEpIHsKICAgICAgICAgICAgICBwYXJ0cy5wcm90b2NvbCA9IHN0cmluZy5zdWJzdHJpbmcoMCwgcG9zKSB8fCBudWxsOwogICAgICAgICAgICAgIGlmIChwYXJ0cy5wcm90b2NvbCAmJiAhcGFydHMucHJvdG9jb2wubWF0Y2goVVJJLnByb3RvY29sX2V4cHJlc3Npb24pKSB7CiAgICAgICAgICAgICAgICBwYXJ0cy5wcm90b2NvbCA9IHZvaWQgMDsKICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0cmluZy5zdWJzdHJpbmcocG9zICsgMSwgcG9zICsgMykucmVwbGFjZSgvXFwvZywgIi8iKSA9PT0gIi8vIikgewogICAgICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nLnN1YnN0cmluZyhwb3MgKyAzKTsKICAgICAgICAgICAgICAgIHN0cmluZyA9IFVSSS5wYXJzZUF1dGhvcml0eShzdHJpbmcsIHBhcnRzKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nLnN1YnN0cmluZyhwb3MgKyAxKTsKICAgICAgICAgICAgICAgIHBhcnRzLnVybiA9IHRydWU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBwYXJ0cy5wYXRoID0gc3RyaW5nOwogICAgICAgICAgcmV0dXJuIHBhcnRzOwogICAgICAgIH07CiAgICAgICAgVVJJLnBhcnNlSG9zdCA9IGZ1bmN0aW9uKHN0cmluZywgcGFydHMpIHsKICAgICAgICAgIGlmICghc3RyaW5nKSB7CiAgICAgICAgICAgIHN0cmluZyA9ICIiOwogICAgICAgICAgfQogICAgICAgICAgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UoL1xcL2csICIvIik7CiAgICAgICAgICB2YXIgcG9zID0gc3RyaW5nLmluZGV4T2YoIi8iKTsKICAgICAgICAgIHZhciBicmFja2V0UG9zOwogICAgICAgICAgdmFyIHQ7CiAgICAgICAgICBpZiAocG9zID09PSAtMSkgewogICAgICAgICAgICBwb3MgPSBzdHJpbmcubGVuZ3RoOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHN0cmluZy5jaGFyQXQoMCkgPT09ICJbIikgewogICAgICAgICAgICBicmFja2V0UG9zID0gc3RyaW5nLmluZGV4T2YoIl0iKTsKICAgICAgICAgICAgcGFydHMuaG9zdG5hbWUgPSBzdHJpbmcuc3Vic3RyaW5nKDEsIGJyYWNrZXRQb3MpIHx8IG51bGw7CiAgICAgICAgICAgIHBhcnRzLnBvcnQgPSBzdHJpbmcuc3Vic3RyaW5nKGJyYWNrZXRQb3MgKyAyLCBwb3MpIHx8IG51bGw7CiAgICAgICAgICAgIGlmIChwYXJ0cy5wb3J0ID09PSAiLyIpIHsKICAgICAgICAgICAgICBwYXJ0cy5wb3J0ID0gbnVsbDsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdmFyIGZpcnN0Q29sb24gPSBzdHJpbmcuaW5kZXhPZigiOiIpOwogICAgICAgICAgICB2YXIgZmlyc3RTbGFzaCA9IHN0cmluZy5pbmRleE9mKCIvIik7CiAgICAgICAgICAgIHZhciBuZXh0Q29sb24gPSBzdHJpbmcuaW5kZXhPZigiOiIsIGZpcnN0Q29sb24gKyAxKTsKICAgICAgICAgICAgaWYgKG5leHRDb2xvbiAhPT0gLTEgJiYgKGZpcnN0U2xhc2ggPT09IC0xIHx8IG5leHRDb2xvbiA8IGZpcnN0U2xhc2gpKSB7CiAgICAgICAgICAgICAgcGFydHMuaG9zdG5hbWUgPSBzdHJpbmcuc3Vic3RyaW5nKDAsIHBvcykgfHwgbnVsbDsKICAgICAgICAgICAgICBwYXJ0cy5wb3J0ID0gbnVsbDsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICB0ID0gc3RyaW5nLnN1YnN0cmluZygwLCBwb3MpLnNwbGl0KCI6Iik7CiAgICAgICAgICAgICAgcGFydHMuaG9zdG5hbWUgPSB0WzBdIHx8IG51bGw7CiAgICAgICAgICAgICAgcGFydHMucG9ydCA9IHRbMV0gfHwgbnVsbDsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgaWYgKHBhcnRzLmhvc3RuYW1lICYmIHN0cmluZy5zdWJzdHJpbmcocG9zKS5jaGFyQXQoMCkgIT09ICIvIikgewogICAgICAgICAgICBwb3MrKzsKICAgICAgICAgICAgc3RyaW5nID0gIi8iICsgc3RyaW5nOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHBhcnRzLnByZXZlbnRJbnZhbGlkSG9zdG5hbWUpIHsKICAgICAgICAgICAgVVJJLmVuc3VyZVZhbGlkSG9zdG5hbWUocGFydHMuaG9zdG5hbWUsIHBhcnRzLnByb3RvY29sKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChwYXJ0cy5wb3J0KSB7CiAgICAgICAgICAgIFVSSS5lbnN1cmVWYWxpZFBvcnQocGFydHMucG9ydCk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gc3RyaW5nLnN1YnN0cmluZyhwb3MpIHx8ICIvIjsKICAgICAgICB9OwogICAgICAgIFVSSS5wYXJzZUF1dGhvcml0eSA9IGZ1bmN0aW9uKHN0cmluZywgcGFydHMpIHsKICAgICAgICAgIHN0cmluZyA9IFVSSS5wYXJzZVVzZXJpbmZvKHN0cmluZywgcGFydHMpOwogICAgICAgICAgcmV0dXJuIFVSSS5wYXJzZUhvc3Qoc3RyaW5nLCBwYXJ0cyk7CiAgICAgICAgfTsKICAgICAgICBVUkkucGFyc2VVc2VyaW5mbyA9IGZ1bmN0aW9uKHN0cmluZywgcGFydHMpIHsKICAgICAgICAgIHZhciBfc3RyaW5nID0gc3RyaW5nOwogICAgICAgICAgdmFyIGZpcnN0QmFja1NsYXNoID0gc3RyaW5nLmluZGV4T2YoIlxcIik7CiAgICAgICAgICBpZiAoZmlyc3RCYWNrU2xhc2ggIT09IC0xKSB7CiAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKC9cXC9nLCAiLyIpOwogICAgICAgICAgfQogICAgICAgICAgdmFyIGZpcnN0U2xhc2ggPSBzdHJpbmcuaW5kZXhPZigiLyIpOwogICAgICAgICAgdmFyIHBvcyA9IHN0cmluZy5sYXN0SW5kZXhPZigiQCIsIGZpcnN0U2xhc2ggPiAtMSA/IGZpcnN0U2xhc2ggOiBzdHJpbmcubGVuZ3RoIC0gMSk7CiAgICAgICAgICB2YXIgdDsKICAgICAgICAgIGlmIChwb3MgPiAtMSAmJiAoZmlyc3RTbGFzaCA9PT0gLTEgfHwgcG9zIDwgZmlyc3RTbGFzaCkpIHsKICAgICAgICAgICAgdCA9IHN0cmluZy5zdWJzdHJpbmcoMCwgcG9zKS5zcGxpdCgiOiIpOwogICAgICAgICAgICBwYXJ0cy51c2VybmFtZSA9IHRbMF0gPyBVUkkuZGVjb2RlKHRbMF0pIDogbnVsbDsKICAgICAgICAgICAgdC5zaGlmdCgpOwogICAgICAgICAgICBwYXJ0cy5wYXNzd29yZCA9IHRbMF0gPyBVUkkuZGVjb2RlKHQuam9pbigiOiIpKSA6IG51bGw7CiAgICAgICAgICAgIHN0cmluZyA9IF9zdHJpbmcuc3Vic3RyaW5nKHBvcyArIDEpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcGFydHMudXNlcm5hbWUgPSBudWxsOwogICAgICAgICAgICBwYXJ0cy5wYXNzd29yZCA9IG51bGw7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gc3RyaW5nOwogICAgICAgIH07CiAgICAgICAgVVJJLnBhcnNlUXVlcnkgPSBmdW5jdGlvbihzdHJpbmcsIGVzY2FwZVF1ZXJ5U3BhY2UpIHsKICAgICAgICAgIGlmICghc3RyaW5nKSB7CiAgICAgICAgICAgIHJldHVybiB7fTsKICAgICAgICAgIH0KICAgICAgICAgIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKC8mKy9nLCAiJiIpLnJlcGxhY2UoL15cPyomKnwmKyQvZywgIiIpOwogICAgICAgICAgaWYgKCFzdHJpbmcpIHsKICAgICAgICAgICAgcmV0dXJuIHt9OwogICAgICAgICAgfQogICAgICAgICAgdmFyIGl0ZW1zID0ge307CiAgICAgICAgICB2YXIgc3BsaXRzID0gc3RyaW5nLnNwbGl0KCImIik7CiAgICAgICAgICB2YXIgbGVuZ3RoID0gc3BsaXRzLmxlbmd0aDsKICAgICAgICAgIHZhciB2MywgbmFtZSwgdmFsdWU7CiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHYzID0gc3BsaXRzW2ldLnNwbGl0KCI9Iik7CiAgICAgICAgICAgIG5hbWUgPSBVUkkuZGVjb2RlUXVlcnkodjMuc2hpZnQoKSwgZXNjYXBlUXVlcnlTcGFjZSk7CiAgICAgICAgICAgIHZhbHVlID0gdjMubGVuZ3RoID8gVVJJLmRlY29kZVF1ZXJ5KHYzLmpvaW4oIj0iKSwgZXNjYXBlUXVlcnlTcGFjZSkgOiBudWxsOwogICAgICAgICAgICBpZiAobmFtZSA9PT0gIl9fcHJvdG9fXyIpIHsKICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfSBlbHNlIGlmIChoYXNPd24uY2FsbChpdGVtcywgbmFtZSkpIHsKICAgICAgICAgICAgICBpZiAodHlwZW9mIGl0ZW1zW25hbWVdID09PSAic3RyaW5nIiB8fCBpdGVtc1tuYW1lXSA9PT0gbnVsbCkgewogICAgICAgICAgICAgICAgaXRlbXNbbmFtZV0gPSBbaXRlbXNbbmFtZV1dOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpdGVtc1tuYW1lXS5wdXNoKHZhbHVlKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBpdGVtc1tuYW1lXSA9IHZhbHVlOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gaXRlbXM7CiAgICAgICAgfTsKICAgICAgICBVUkkuYnVpbGQgPSBmdW5jdGlvbihwYXJ0cykgewogICAgICAgICAgdmFyIHQgPSAiIjsKICAgICAgICAgIHZhciByZXF1aXJlQWJzb2x1dGVQYXRoID0gZmFsc2U7CiAgICAgICAgICBpZiAocGFydHMucHJvdG9jb2wpIHsKICAgICAgICAgICAgdCArPSBwYXJ0cy5wcm90b2NvbCArICI6IjsKICAgICAgICAgIH0KICAgICAgICAgIGlmICghcGFydHMudXJuICYmICh0IHx8IHBhcnRzLmhvc3RuYW1lKSkgewogICAgICAgICAgICB0ICs9ICIvLyI7CiAgICAgICAgICAgIHJlcXVpcmVBYnNvbHV0ZVBhdGggPSB0cnVlOwogICAgICAgICAgfQogICAgICAgICAgdCArPSBVUkkuYnVpbGRBdXRob3JpdHkocGFydHMpIHx8ICIiOwogICAgICAgICAgaWYgKHR5cGVvZiBwYXJ0cy5wYXRoID09PSAic3RyaW5nIikgewogICAgICAgICAgICBpZiAocGFydHMucGF0aC5jaGFyQXQoMCkgIT09ICIvIiAmJiByZXF1aXJlQWJzb2x1dGVQYXRoKSB7CiAgICAgICAgICAgICAgdCArPSAiLyI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdCArPSBwYXJ0cy5wYXRoOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHR5cGVvZiBwYXJ0cy5xdWVyeSA9PT0gInN0cmluZyIgJiYgcGFydHMucXVlcnkpIHsKICAgICAgICAgICAgdCArPSAiPyIgKyBwYXJ0cy5xdWVyeTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh0eXBlb2YgcGFydHMuZnJhZ21lbnQgPT09ICJzdHJpbmciICYmIHBhcnRzLmZyYWdtZW50KSB7CiAgICAgICAgICAgIHQgKz0gIiMiICsgcGFydHMuZnJhZ21lbnQ7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gdDsKICAgICAgICB9OwogICAgICAgIFVSSS5idWlsZEhvc3QgPSBmdW5jdGlvbihwYXJ0cykgewogICAgICAgICAgdmFyIHQgPSAiIjsKICAgICAgICAgIGlmICghcGFydHMuaG9zdG5hbWUpIHsKICAgICAgICAgICAgcmV0dXJuICIiOwogICAgICAgICAgfSBlbHNlIGlmIChVUkkuaXA2X2V4cHJlc3Npb24udGVzdChwYXJ0cy5ob3N0bmFtZSkpIHsKICAgICAgICAgICAgdCArPSAiWyIgKyBwYXJ0cy5ob3N0bmFtZSArICJdIjsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHQgKz0gcGFydHMuaG9zdG5hbWU7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAocGFydHMucG9ydCkgewogICAgICAgICAgICB0ICs9ICI6IiArIHBhcnRzLnBvcnQ7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gdDsKICAgICAgICB9OwogICAgICAgIFVSSS5idWlsZEF1dGhvcml0eSA9IGZ1bmN0aW9uKHBhcnRzKSB7CiAgICAgICAgICByZXR1cm4gVVJJLmJ1aWxkVXNlcmluZm8ocGFydHMpICsgVVJJLmJ1aWxkSG9zdChwYXJ0cyk7CiAgICAgICAgfTsKICAgICAgICBVUkkuYnVpbGRVc2VyaW5mbyA9IGZ1bmN0aW9uKHBhcnRzKSB7CiAgICAgICAgICB2YXIgdCA9ICIiOwogICAgICAgICAgaWYgKHBhcnRzLnVzZXJuYW1lKSB7CiAgICAgICAgICAgIHQgKz0gVVJJLmVuY29kZShwYXJ0cy51c2VybmFtZSk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAocGFydHMucGFzc3dvcmQpIHsKICAgICAgICAgICAgdCArPSAiOiIgKyBVUkkuZW5jb2RlKHBhcnRzLnBhc3N3b3JkKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh0KSB7CiAgICAgICAgICAgIHQgKz0gIkAiOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHQ7CiAgICAgICAgfTsKICAgICAgICBVUkkuYnVpbGRRdWVyeSA9IGZ1bmN0aW9uKGRhdGEsIGR1cGxpY2F0ZVF1ZXJ5UGFyYW1ldGVycywgZXNjYXBlUXVlcnlTcGFjZSkgewogICAgICAgICAgdmFyIHQgPSAiIjsKICAgICAgICAgIHZhciB1bmlxdWUsIGtleSwgaSwgbGVuZ3RoOwogICAgICAgICAgZm9yIChrZXkgaW4gZGF0YSkgewogICAgICAgICAgICBpZiAoa2V5ID09PSAiX19wcm90b19fIikgewogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9IGVsc2UgaWYgKGhhc093bi5jYWxsKGRhdGEsIGtleSkpIHsKICAgICAgICAgICAgICBpZiAoaXNBcnJheShkYXRhW2tleV0pKSB7CiAgICAgICAgICAgICAgICB1bmlxdWUgPSB7fTsKICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IGRhdGFba2V5XS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICBpZiAoZGF0YVtrZXldW2ldICE9PSB2b2lkIDAgJiYgdW5pcXVlW2RhdGFba2V5XVtpXSArICIiXSA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgICAgICAgICAgdCArPSAiJiIgKyBVUkkuYnVpbGRRdWVyeVBhcmFtZXRlcihrZXksIGRhdGFba2V5XVtpXSwgZXNjYXBlUXVlcnlTcGFjZSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKGR1cGxpY2F0ZVF1ZXJ5UGFyYW1ldGVycyAhPT0gdHJ1ZSkgewogICAgICAgICAgICAgICAgICAgICAgdW5pcXVlW2RhdGFba2V5XVtpXSArICIiXSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhW2tleV0gIT09IHZvaWQgMCkgewogICAgICAgICAgICAgICAgdCArPSAiJiIgKyBVUkkuYnVpbGRRdWVyeVBhcmFtZXRlcihrZXksIGRhdGFba2V5XSwgZXNjYXBlUXVlcnlTcGFjZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gdC5zdWJzdHJpbmcoMSk7CiAgICAgICAgfTsKICAgICAgICBVUkkuYnVpbGRRdWVyeVBhcmFtZXRlciA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBlc2NhcGVRdWVyeVNwYWNlKSB7CiAgICAgICAgICByZXR1cm4gVVJJLmVuY29kZVF1ZXJ5KG5hbWUsIGVzY2FwZVF1ZXJ5U3BhY2UpICsgKHZhbHVlICE9PSBudWxsID8gIj0iICsgVVJJLmVuY29kZVF1ZXJ5KHZhbHVlLCBlc2NhcGVRdWVyeVNwYWNlKSA6ICIiKTsKICAgICAgICB9OwogICAgICAgIFVSSS5hZGRRdWVyeSA9IGZ1bmN0aW9uKGRhdGEsIG5hbWUsIHZhbHVlKSB7CiAgICAgICAgICBpZiAodHlwZW9mIG5hbWUgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBuYW1lKSB7CiAgICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKG5hbWUsIGtleSkpIHsKICAgICAgICAgICAgICAgIFVSSS5hZGRRdWVyeShkYXRhLCBrZXksIG5hbWVba2V5XSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBuYW1lID09PSAic3RyaW5nIikgewogICAgICAgICAgICBpZiAoZGF0YVtuYW1lXSA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgICAgZGF0YVtuYW1lXSA9IHZhbHVlOwogICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZGF0YVtuYW1lXSA9PT0gInN0cmluZyIpIHsKICAgICAgICAgICAgICBkYXRhW25hbWVdID0gW2RhdGFbbmFtZV1dOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICghaXNBcnJheSh2YWx1ZSkpIHsKICAgICAgICAgICAgICB2YWx1ZSA9IFt2YWx1ZV07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZGF0YVtuYW1lXSA9IChkYXRhW25hbWVdIHx8IFtdKS5jb25jYXQodmFsdWUpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiVVJJLmFkZFF1ZXJ5KCkgYWNjZXB0cyBhbiBvYmplY3QsIHN0cmluZyBhcyB0aGUgbmFtZSBwYXJhbWV0ZXIiKTsKICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIFVSSS5zZXRRdWVyeSA9IGZ1bmN0aW9uKGRhdGEsIG5hbWUsIHZhbHVlKSB7CiAgICAgICAgICBpZiAodHlwZW9mIG5hbWUgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBuYW1lKSB7CiAgICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKG5hbWUsIGtleSkpIHsKICAgICAgICAgICAgICAgIFVSSS5zZXRRdWVyeShkYXRhLCBrZXksIG5hbWVba2V5XSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBuYW1lID09PSAic3RyaW5nIikgewogICAgICAgICAgICBkYXRhW25hbWVdID0gdmFsdWUgPT09IHZvaWQgMCA/IG51bGwgOiB2YWx1ZTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIlVSSS5zZXRRdWVyeSgpIGFjY2VwdHMgYW4gb2JqZWN0LCBzdHJpbmcgYXMgdGhlIG5hbWUgcGFyYW1ldGVyIik7CiAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICBVUkkucmVtb3ZlUXVlcnkgPSBmdW5jdGlvbihkYXRhLCBuYW1lLCB2YWx1ZSkgewogICAgICAgICAgdmFyIGksIGxlbmd0aCwga2V5OwogICAgICAgICAgaWYgKGlzQXJyYXkobmFtZSkpIHsKICAgICAgICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gbmFtZS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgICAgICAgIGRhdGFbbmFtZVtpXV0gPSB2b2lkIDA7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSBpZiAoZ2V0VHlwZShuYW1lKSA9PT0gIlJlZ0V4cCIpIHsKICAgICAgICAgICAgZm9yIChrZXkgaW4gZGF0YSkgewogICAgICAgICAgICAgIGlmIChuYW1lLnRlc3Qoa2V5KSkgewogICAgICAgICAgICAgICAgZGF0YVtrZXldID0gdm9pZCAwOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbmFtZSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgZm9yIChrZXkgaW4gbmFtZSkgewogICAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChuYW1lLCBrZXkpKSB7CiAgICAgICAgICAgICAgICBVUkkucmVtb3ZlUXVlcnkoZGF0YSwga2V5LCBuYW1lW2tleV0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbmFtZSA9PT0gInN0cmluZyIpIHsKICAgICAgICAgICAgaWYgKHZhbHVlICE9PSB2b2lkIDApIHsKICAgICAgICAgICAgICBpZiAoZ2V0VHlwZSh2YWx1ZSkgPT09ICJSZWdFeHAiKSB7CiAgICAgICAgICAgICAgICBpZiAoIWlzQXJyYXkoZGF0YVtuYW1lXSkgJiYgdmFsdWUudGVzdChkYXRhW25hbWVdKSkgewogICAgICAgICAgICAgICAgICBkYXRhW25hbWVdID0gdm9pZCAwOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgZGF0YVtuYW1lXSA9IGZpbHRlckFycmF5VmFsdWVzKGRhdGFbbmFtZV0sIHZhbHVlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFbbmFtZV0gPT09IFN0cmluZyh2YWx1ZSkgJiYgKCFpc0FycmF5KHZhbHVlKSB8fCB2YWx1ZS5sZW5ndGggPT09IDEpKSB7CiAgICAgICAgICAgICAgICBkYXRhW25hbWVdID0gdm9pZCAwOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShkYXRhW25hbWVdKSkgewogICAgICAgICAgICAgICAgZGF0YVtuYW1lXSA9IGZpbHRlckFycmF5VmFsdWVzKGRhdGFbbmFtZV0sIHZhbHVlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgZGF0YVtuYW1lXSA9IHZvaWQgMDsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiVVJJLnJlbW92ZVF1ZXJ5KCkgYWNjZXB0cyBhbiBvYmplY3QsIHN0cmluZywgUmVnRXhwIGFzIHRoZSBmaXJzdCBwYXJhbWV0ZXIiKTsKICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIFVSSS5oYXNRdWVyeSA9IGZ1bmN0aW9uKGRhdGEsIG5hbWUsIHZhbHVlLCB3aXRoaW5BcnJheSkgewogICAgICAgICAgc3dpdGNoIChnZXRUeXBlKG5hbWUpKSB7CiAgICAgICAgICAgIGNhc2UgIlN0cmluZyI6CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgIlJlZ0V4cCI6CiAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHsKICAgICAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChkYXRhLCBrZXkpKSB7CiAgICAgICAgICAgICAgICAgIGlmIChuYW1lLnRlc3Qoa2V5KSAmJiAodmFsdWUgPT09IHZvaWQgMCB8fCBVUkkuaGFzUXVlcnkoZGF0YSwga2V5LCB2YWx1ZSkpKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICBjYXNlICJPYmplY3QiOgogICAgICAgICAgICAgIGZvciAodmFyIF9rZXkgaW4gbmFtZSkgewogICAgICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKG5hbWUsIF9rZXkpKSB7CiAgICAgICAgICAgICAgICAgIGlmICghVVJJLmhhc1F1ZXJ5KGRhdGEsIF9rZXksIG5hbWVbX2tleV0pKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIlVSSS5oYXNRdWVyeSgpIGFjY2VwdHMgYSBzdHJpbmcsIHJlZ3VsYXIgZXhwcmVzc2lvbiBvciBvYmplY3QgYXMgdGhlIG5hbWUgcGFyYW1ldGVyIik7CiAgICAgICAgICB9CiAgICAgICAgICBzd2l0Y2ggKGdldFR5cGUodmFsdWUpKSB7CiAgICAgICAgICAgIGNhc2UgIlVuZGVmaW5lZCI6CiAgICAgICAgICAgICAgcmV0dXJuIG5hbWUgaW4gZGF0YTsKICAgICAgICAgICAgY2FzZSAiQm9vbGVhbiI6CiAgICAgICAgICAgICAgdmFyIF9ib29seSA9IEJvb2xlYW4oaXNBcnJheShkYXRhW25hbWVdKSA/IGRhdGFbbmFtZV0ubGVuZ3RoIDogZGF0YVtuYW1lXSk7CiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlID09PSBfYm9vbHk7CiAgICAgICAgICAgIGNhc2UgIkZ1bmN0aW9uIjoKICAgICAgICAgICAgICByZXR1cm4gISF2YWx1ZShkYXRhW25hbWVdLCBuYW1lLCBkYXRhKTsKICAgICAgICAgICAgY2FzZSAiQXJyYXkiOgogICAgICAgICAgICAgIGlmICghaXNBcnJheShkYXRhW25hbWVdKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB2YXIgb3AgPSB3aXRoaW5BcnJheSA/IGFycmF5Q29udGFpbnMgOiBhcnJheXNFcXVhbDsKICAgICAgICAgICAgICByZXR1cm4gb3AoZGF0YVtuYW1lXSwgdmFsdWUpOwogICAgICAgICAgICBjYXNlICJSZWdFeHAiOgogICAgICAgICAgICAgIGlmICghaXNBcnJheShkYXRhW25hbWVdKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIEJvb2xlYW4oZGF0YVtuYW1lXSAmJiBkYXRhW25hbWVdLm1hdGNoKHZhbHVlKSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmICghd2l0aGluQXJyYXkpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuIGFycmF5Q29udGFpbnMoZGF0YVtuYW1lXSwgdmFsdWUpOwogICAgICAgICAgICBjYXNlICJOdW1iZXIiOgogICAgICAgICAgICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKTsKICAgICAgICAgICAgY2FzZSAiU3RyaW5nIjoKICAgICAgICAgICAgICBpZiAoIWlzQXJyYXkoZGF0YVtuYW1lXSkpIHsKICAgICAgICAgICAgICAgIHJldHVybiBkYXRhW25hbWVdID09PSB2YWx1ZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKCF3aXRoaW5BcnJheSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gYXJyYXlDb250YWlucyhkYXRhW25hbWVdLCB2YWx1ZSk7CiAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiVVJJLmhhc1F1ZXJ5KCkgYWNjZXB0cyB1bmRlZmluZWQsIGJvb2xlYW4sIHN0cmluZywgbnVtYmVyLCBSZWdFeHAsIEZ1bmN0aW9uIGFzIHRoZSB2YWx1ZSBwYXJhbWV0ZXIiKTsKICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIFVSSS5qb2luUGF0aHMgPSBmdW5jdGlvbigpIHsKICAgICAgICAgIHZhciBpbnB1dCA9IFtdOwogICAgICAgICAgdmFyIHNlZ21lbnRzID0gW107CiAgICAgICAgICB2YXIgbm9uRW1wdHlTZWdtZW50cyA9IDA7CiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICB2YXIgdXJsID0gbmV3IFVSSShhcmd1bWVudHNbaV0pOwogICAgICAgICAgICBpbnB1dC5wdXNoKHVybCk7CiAgICAgICAgICAgIHZhciBfc2VnbWVudHMgPSB1cmwuc2VnbWVudCgpOwogICAgICAgICAgICBmb3IgKHZhciBzID0gMDsgcyA8IF9zZWdtZW50cy5sZW5ndGg7IHMrKykgewogICAgICAgICAgICAgIGlmICh0eXBlb2YgX3NlZ21lbnRzW3NdID09PSAic3RyaW5nIikgewogICAgICAgICAgICAgICAgc2VnbWVudHMucHVzaChfc2VnbWVudHNbc10pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAoX3NlZ21lbnRzW3NdKSB7CiAgICAgICAgICAgICAgICBub25FbXB0eVNlZ21lbnRzKys7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoIXNlZ21lbnRzLmxlbmd0aCB8fCAhbm9uRW1wdHlTZWdtZW50cykgewogICAgICAgICAgICByZXR1cm4gbmV3IFVSSSgiIik7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgdXJpID0gbmV3IFVSSSgiIikuc2VnbWVudChzZWdtZW50cyk7CiAgICAgICAgICBpZiAoaW5wdXRbMF0ucGF0aCgpID09PSAiIiB8fCBpbnB1dFswXS5wYXRoKCkuc2xpY2UoMCwgMSkgPT09ICIvIikgewogICAgICAgICAgICB1cmkucGF0aCgiLyIgKyB1cmkucGF0aCgpKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiB1cmkubm9ybWFsaXplKCk7CiAgICAgICAgfTsKICAgICAgICBVUkkuY29tbW9uUGF0aCA9IGZ1bmN0aW9uKG9uZSwgdHdvKSB7CiAgICAgICAgICB2YXIgbGVuZ3RoID0gTWF0aC5taW4ob25lLmxlbmd0aCwgdHdvLmxlbmd0aCk7CiAgICAgICAgICB2YXIgcG9zOwogICAgICAgICAgZm9yIChwb3MgPSAwOyBwb3MgPCBsZW5ndGg7IHBvcysrKSB7CiAgICAgICAgICAgIGlmIChvbmUuY2hhckF0KHBvcykgIT09IHR3by5jaGFyQXQocG9zKSkgewogICAgICAgICAgICAgIHBvcy0tOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZiAocG9zIDwgMSkgewogICAgICAgICAgICByZXR1cm4gb25lLmNoYXJBdCgwKSA9PT0gdHdvLmNoYXJBdCgwKSAmJiBvbmUuY2hhckF0KDApID09PSAiLyIgPyAiLyIgOiAiIjsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChvbmUuY2hhckF0KHBvcykgIT09ICIvIiB8fCB0d28uY2hhckF0KHBvcykgIT09ICIvIikgewogICAgICAgICAgICBwb3MgPSBvbmUuc3Vic3RyaW5nKDAsIHBvcykubGFzdEluZGV4T2YoIi8iKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBvbmUuc3Vic3RyaW5nKDAsIHBvcyArIDEpOwogICAgICAgIH07CiAgICAgICAgVVJJLndpdGhpblN0cmluZyA9IGZ1bmN0aW9uKHN0cmluZywgY2FsbGJhY2ssIG9wdGlvbnMpIHsKICAgICAgICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7CiAgICAgICAgICB2YXIgX3N0YXJ0ID0gb3B0aW9ucy5zdGFydCB8fCBVUkkuZmluZFVyaS5zdGFydDsKICAgICAgICAgIHZhciBfZW5kID0gb3B0aW9ucy5lbmQgfHwgVVJJLmZpbmRVcmkuZW5kOwogICAgICAgICAgdmFyIF90cmltID0gb3B0aW9ucy50cmltIHx8IFVSSS5maW5kVXJpLnRyaW07CiAgICAgICAgICB2YXIgX3BhcmVucyA9IG9wdGlvbnMucGFyZW5zIHx8IFVSSS5maW5kVXJpLnBhcmVuczsKICAgICAgICAgIHZhciBfYXR0cmlidXRlT3BlbiA9IC9bYS16MC05LV09WyInXT8kL2k7CiAgICAgICAgICBfc3RhcnQubGFzdEluZGV4ID0gMDsKICAgICAgICAgIHdoaWxlICh0cnVlKSB7CiAgICAgICAgICAgIHZhciBtYXRjaCA9IF9zdGFydC5leGVjKHN0cmluZyk7CiAgICAgICAgICAgIGlmICghbWF0Y2gpIHsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgc3RhcnQgPSBtYXRjaC5pbmRleDsKICAgICAgICAgICAgaWYgKG9wdGlvbnMuaWdub3JlSHRtbCkgewogICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGVPcGVuID0gc3RyaW5nLnNsaWNlKE1hdGgubWF4KHN0YXJ0IC0gMywgMCksIHN0YXJ0KTsKICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlT3BlbiAmJiBfYXR0cmlidXRlT3Blbi50ZXN0KGF0dHJpYnV0ZU9wZW4pKSB7CiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGVuZCA9IHN0YXJ0ICsgc3RyaW5nLnNsaWNlKHN0YXJ0KS5zZWFyY2goX2VuZCk7CiAgICAgICAgICAgIHZhciBzbGljZSA9IHN0cmluZy5zbGljZShzdGFydCwgZW5kKTsKICAgICAgICAgICAgdmFyIHBhcmVuc0VuZCA9IC0xOwogICAgICAgICAgICB3aGlsZSAodHJ1ZSkgewogICAgICAgICAgICAgIHZhciBwYXJlbnNNYXRjaCA9IF9wYXJlbnMuZXhlYyhzbGljZSk7CiAgICAgICAgICAgICAgaWYgKCFwYXJlbnNNYXRjaCkgewogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHZhciBwYXJlbnNNYXRjaEVuZCA9IHBhcmVuc01hdGNoLmluZGV4ICsgcGFyZW5zTWF0Y2hbMF0ubGVuZ3RoOwogICAgICAgICAgICAgIHBhcmVuc0VuZCA9IE1hdGgubWF4KHBhcmVuc0VuZCwgcGFyZW5zTWF0Y2hFbmQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChwYXJlbnNFbmQgPiAtMSkgewogICAgICAgICAgICAgIHNsaWNlID0gc2xpY2Uuc2xpY2UoMCwgcGFyZW5zRW5kKSArIHNsaWNlLnNsaWNlKHBhcmVuc0VuZCkucmVwbGFjZShfdHJpbSwgIiIpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHNsaWNlID0gc2xpY2UucmVwbGFjZShfdHJpbSwgIiIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChzbGljZS5sZW5ndGggPD0gbWF0Y2hbMF0ubGVuZ3RoKSB7CiAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKG9wdGlvbnMuaWdub3JlICYmIG9wdGlvbnMuaWdub3JlLnRlc3Qoc2xpY2UpKSB7CiAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZW5kID0gc3RhcnQgKyBzbGljZS5sZW5ndGg7CiAgICAgICAgICAgIHZhciByZXN1bHQgPSBjYWxsYmFjayhzbGljZSwgc3RhcnQsIGVuZCwgc3RyaW5nKTsKICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgICAgX3N0YXJ0Lmxhc3RJbmRleCA9IGVuZDsKICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXN1bHQgPSBTdHJpbmcocmVzdWx0KTsKICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nLnNsaWNlKDAsIHN0YXJ0KSArIHJlc3VsdCArIHN0cmluZy5zbGljZShlbmQpOwogICAgICAgICAgICBfc3RhcnQubGFzdEluZGV4ID0gc3RhcnQgKyByZXN1bHQubGVuZ3RoOwogICAgICAgICAgfQogICAgICAgICAgX3N0YXJ0Lmxhc3RJbmRleCA9IDA7CiAgICAgICAgICByZXR1cm4gc3RyaW5nOwogICAgICAgIH07CiAgICAgICAgVVJJLmVuc3VyZVZhbGlkSG9zdG5hbWUgPSBmdW5jdGlvbih2MywgcHJvdG9jb2wpIHsKICAgICAgICAgIHZhciBoYXNIb3N0bmFtZSA9ICEhdjM7CiAgICAgICAgICB2YXIgaGFzUHJvdG9jb2wgPSAhIXByb3RvY29sOwogICAgICAgICAgdmFyIHJlamVjdEVtcHR5SG9zdG5hbWUgPSBmYWxzZTsKICAgICAgICAgIGlmIChoYXNQcm90b2NvbCkgewogICAgICAgICAgICByZWplY3RFbXB0eUhvc3RuYW1lID0gYXJyYXlDb250YWlucyhVUkkuaG9zdFByb3RvY29scywgcHJvdG9jb2wpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHJlamVjdEVtcHR5SG9zdG5hbWUgJiYgIWhhc0hvc3RuYW1lKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIkhvc3RuYW1lIGNhbm5vdCBiZSBlbXB0eSwgaWYgcHJvdG9jb2wgaXMgIiArIHByb3RvY29sKTsKICAgICAgICAgIH0gZWxzZSBpZiAodjMgJiYgdjMubWF0Y2goVVJJLmludmFsaWRfaG9zdG5hbWVfY2hhcmFjdGVycykpIHsKICAgICAgICAgICAgaWYgKCFwdW55Y29kZSkgewogICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0hvc3RuYW1lICInICsgdjMgKyAnIiBjb250YWlucyBjaGFyYWN0ZXJzIG90aGVyIHRoYW4gW0EtWjAtOS4tOl9dIGFuZCBQdW55Y29kZS5qcyBpcyBub3QgYXZhaWxhYmxlJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHB1bnljb2RlLnRvQVNDSUkodjMpLm1hdGNoKFVSSS5pbnZhbGlkX2hvc3RuYW1lX2NoYXJhY3RlcnMpKSB7CiAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSG9zdG5hbWUgIicgKyB2MyArICciIGNvbnRhaW5zIGNoYXJhY3RlcnMgb3RoZXIgdGhhbiBbQS1aMC05Li06X10nKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgVVJJLmVuc3VyZVZhbGlkUG9ydCA9IGZ1bmN0aW9uKHYzKSB7CiAgICAgICAgICBpZiAoIXYzKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBwb3J0ID0gTnVtYmVyKHYzKTsKICAgICAgICAgIGlmIChpc0ludGVnZXIocG9ydCkgJiYgcG9ydCA+IDAgJiYgcG9ydCA8IDY1NTM2KSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1BvcnQgIicgKyB2MyArICciIGlzIG5vdCBhIHZhbGlkIHBvcnQnKTsKICAgICAgICB9OwogICAgICAgIFVSSS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24ocmVtb3ZlQWxsKSB7CiAgICAgICAgICBpZiAocmVtb3ZlQWxsKSB7CiAgICAgICAgICAgIHZhciB1bmNvbmZsaWN0ZWQgPSB7CiAgICAgICAgICAgICAgVVJJOiB0aGlzLm5vQ29uZmxpY3QoKQogICAgICAgICAgICB9OwogICAgICAgICAgICBpZiAocm9vdC5VUklUZW1wbGF0ZSAmJiB0eXBlb2Ygcm9vdC5VUklUZW1wbGF0ZS5ub0NvbmZsaWN0ID09PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgICAgICAgdW5jb25mbGljdGVkLlVSSVRlbXBsYXRlID0gcm9vdC5VUklUZW1wbGF0ZS5ub0NvbmZsaWN0KCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHJvb3QuSVB2NiAmJiB0eXBlb2Ygcm9vdC5JUHY2Lm5vQ29uZmxpY3QgPT09ICJmdW5jdGlvbiIpIHsKICAgICAgICAgICAgICB1bmNvbmZsaWN0ZWQuSVB2NiA9IHJvb3QuSVB2Ni5ub0NvbmZsaWN0KCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHJvb3QuU2Vjb25kTGV2ZWxEb21haW5zICYmIHR5cGVvZiByb290LlNlY29uZExldmVsRG9tYWlucy5ub0NvbmZsaWN0ID09PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgICAgICAgdW5jb25mbGljdGVkLlNlY29uZExldmVsRG9tYWlucyA9IHJvb3QuU2Vjb25kTGV2ZWxEb21haW5zLm5vQ29uZmxpY3QoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdW5jb25mbGljdGVkOwogICAgICAgICAgfSBlbHNlIGlmIChyb290LlVSSSA9PT0gdGhpcykgewogICAgICAgICAgICByb290LlVSSSA9IF9VUkk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9OwogICAgICAgIHAuYnVpbGQgPSBmdW5jdGlvbihkZWZlckJ1aWxkKSB7CiAgICAgICAgICBpZiAoZGVmZXJCdWlsZCA9PT0gdHJ1ZSkgewogICAgICAgICAgICB0aGlzLl9kZWZlcnJlZF9idWlsZCA9IHRydWU7CiAgICAgICAgICB9IGVsc2UgaWYgKGRlZmVyQnVpbGQgPT09IHZvaWQgMCB8fCB0aGlzLl9kZWZlcnJlZF9idWlsZCkgewogICAgICAgICAgICB0aGlzLl9zdHJpbmcgPSBVUkkuYnVpbGQodGhpcy5fcGFydHMpOwogICAgICAgICAgICB0aGlzLl9kZWZlcnJlZF9idWlsZCA9IGZhbHNlOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfTsKICAgICAgICBwLmNsb25lID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICByZXR1cm4gbmV3IFVSSSh0aGlzKTsKICAgICAgICB9OwogICAgICAgIHAudmFsdWVPZiA9IHAudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsKICAgICAgICAgIHJldHVybiB0aGlzLmJ1aWxkKGZhbHNlKS5fc3RyaW5nOwogICAgICAgIH07CiAgICAgICAgZnVuY3Rpb24gZ2VuZXJhdGVTaW1wbGVBY2Nlc3NvcihfcGFydDIpIHsKICAgICAgICAgIHJldHVybiBmdW5jdGlvbih2MywgYnVpbGQpIHsKICAgICAgICAgICAgaWYgKHYzID09PSB2b2lkIDApIHsKICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcGFydHNbX3BhcnQyXSB8fCAiIjsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICB0aGlzLl9wYXJ0c1tfcGFydDJdID0gdjMgfHwgbnVsbDsKICAgICAgICAgICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7CiAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgIH0KICAgICAgICAgIH07CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIGdlbmVyYXRlUHJlZml4QWNjZXNzb3IoX3BhcnQyLCBfa2V5KSB7CiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odjMsIGJ1aWxkKSB7CiAgICAgICAgICAgIGlmICh2MyA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BhcnRzW19wYXJ0Ml0gfHwgIiI7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgaWYgKHYzICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgICB2MyA9IHYzICsgIiI7CiAgICAgICAgICAgICAgICBpZiAodjMuY2hhckF0KDApID09PSBfa2V5KSB7CiAgICAgICAgICAgICAgICAgIHYzID0gdjMuc3Vic3RyaW5nKDEpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB0aGlzLl9wYXJ0c1tfcGFydDJdID0gdjM7CiAgICAgICAgICAgICAgdGhpcy5idWlsZCghYnVpbGQpOwogICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICB9CiAgICAgICAgICB9OwogICAgICAgIH0KICAgICAgICBwLnByb3RvY29sID0gZ2VuZXJhdGVTaW1wbGVBY2Nlc3NvcigicHJvdG9jb2wiKTsKICAgICAgICBwLnVzZXJuYW1lID0gZ2VuZXJhdGVTaW1wbGVBY2Nlc3NvcigidXNlcm5hbWUiKTsKICAgICAgICBwLnBhc3N3b3JkID0gZ2VuZXJhdGVTaW1wbGVBY2Nlc3NvcigicGFzc3dvcmQiKTsKICAgICAgICBwLmhvc3RuYW1lID0gZ2VuZXJhdGVTaW1wbGVBY2Nlc3NvcigiaG9zdG5hbWUiKTsKICAgICAgICBwLnBvcnQgPSBnZW5lcmF0ZVNpbXBsZUFjY2Vzc29yKCJwb3J0Iik7CiAgICAgICAgcC5xdWVyeSA9IGdlbmVyYXRlUHJlZml4QWNjZXNzb3IoInF1ZXJ5IiwgIj8iKTsKICAgICAgICBwLmZyYWdtZW50ID0gZ2VuZXJhdGVQcmVmaXhBY2Nlc3NvcigiZnJhZ21lbnQiLCAiIyIpOwogICAgICAgIHAuc2VhcmNoID0gZnVuY3Rpb24odjMsIGJ1aWxkKSB7CiAgICAgICAgICB2YXIgdCA9IHRoaXMucXVlcnkodjMsIGJ1aWxkKTsKICAgICAgICAgIHJldHVybiB0eXBlb2YgdCA9PT0gInN0cmluZyIgJiYgdC5sZW5ndGggPyAiPyIgKyB0IDogdDsKICAgICAgICB9OwogICAgICAgIHAuaGFzaCA9IGZ1bmN0aW9uKHYzLCBidWlsZCkgewogICAgICAgICAgdmFyIHQgPSB0aGlzLmZyYWdtZW50KHYzLCBidWlsZCk7CiAgICAgICAgICByZXR1cm4gdHlwZW9mIHQgPT09ICJzdHJpbmciICYmIHQubGVuZ3RoID8gIiMiICsgdCA6IHQ7CiAgICAgICAgfTsKICAgICAgICBwLnBhdGhuYW1lID0gZnVuY3Rpb24odjMsIGJ1aWxkKSB7CiAgICAgICAgICBpZiAodjMgPT09IHZvaWQgMCB8fCB2MyA9PT0gdHJ1ZSkgewogICAgICAgICAgICB2YXIgcmVzID0gdGhpcy5fcGFydHMucGF0aCB8fCAodGhpcy5fcGFydHMuaG9zdG5hbWUgPyAiLyIgOiAiIik7CiAgICAgICAgICAgIHJldHVybiB2MyA/ICh0aGlzLl9wYXJ0cy51cm4gPyBVUkkuZGVjb2RlVXJuUGF0aCA6IFVSSS5kZWNvZGVQYXRoKShyZXMpIDogcmVzOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYgKHRoaXMuX3BhcnRzLnVybikgewogICAgICAgICAgICAgIHRoaXMuX3BhcnRzLnBhdGggPSB2MyA/IFVSSS5yZWNvZGVVcm5QYXRoKHYzKSA6ICIiOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHRoaXMuX3BhcnRzLnBhdGggPSB2MyA/IFVSSS5yZWNvZGVQYXRoKHYzKSA6ICIvIjsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgcC5wYXRoID0gcC5wYXRobmFtZTsKICAgICAgICBwLmhyZWYgPSBmdW5jdGlvbihocmVmLCBidWlsZCkgewogICAgICAgICAgdmFyIGtleTsKICAgICAgICAgIGlmIChocmVmID09PSB2b2lkIDApIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTsKICAgICAgICAgIH0KICAgICAgICAgIHRoaXMuX3N0cmluZyA9ICIiOwogICAgICAgICAgdGhpcy5fcGFydHMgPSBVUkkuX3BhcnRzKCk7CiAgICAgICAgICB2YXIgX1VSSTIgPSBocmVmIGluc3RhbmNlb2YgVVJJOwogICAgICAgICAgdmFyIF9vYmplY3QgPSB0eXBlb2YgaHJlZiA9PT0gIm9iamVjdCIgJiYgKGhyZWYuaG9zdG5hbWUgfHwgaHJlZi5wYXRoIHx8IGhyZWYucGF0aG5hbWUpOwogICAgICAgICAgaWYgKGhyZWYubm9kZU5hbWUpIHsKICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IFVSSS5nZXREb21BdHRyaWJ1dGUoaHJlZik7CiAgICAgICAgICAgIGhyZWYgPSBocmVmW2F0dHJpYnV0ZV0gfHwgIiI7CiAgICAgICAgICAgIF9vYmplY3QgPSBmYWxzZTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICghX1VSSTIgJiYgX29iamVjdCAmJiBocmVmLnBhdGhuYW1lICE9PSB2b2lkIDApIHsKICAgICAgICAgICAgaHJlZiA9IGhyZWYudG9TdHJpbmcoKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh0eXBlb2YgaHJlZiA9PT0gInN0cmluZyIgfHwgaHJlZiBpbnN0YW5jZW9mIFN0cmluZykgewogICAgICAgICAgICB0aGlzLl9wYXJ0cyA9IFVSSS5wYXJzZShTdHJpbmcoaHJlZiksIHRoaXMuX3BhcnRzKTsKICAgICAgICAgIH0gZWxzZSBpZiAoX1VSSTIgfHwgX29iamVjdCkgewogICAgICAgICAgICB2YXIgc3JjID0gX1VSSTIgPyBocmVmLl9wYXJ0cyA6IGhyZWY7CiAgICAgICAgICAgIGZvciAoa2V5IGluIHNyYykgewogICAgICAgICAgICAgIGlmIChrZXkgPT09ICJxdWVyeSIpIHsKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwodGhpcy5fcGFydHMsIGtleSkpIHsKICAgICAgICAgICAgICAgIHRoaXMuX3BhcnRzW2tleV0gPSBzcmNba2V5XTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHNyYy5xdWVyeSkgewogICAgICAgICAgICAgIHRoaXMucXVlcnkoc3JjLnF1ZXJ5LCBmYWxzZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoImludmFsaWQgaW5wdXQiKTsKICAgICAgICAgIH0KICAgICAgICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTsKICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH07CiAgICAgICAgcC5pcyA9IGZ1bmN0aW9uKHdoYXQpIHsKICAgICAgICAgIHZhciBpcCA9IGZhbHNlOwogICAgICAgICAgdmFyIGlwNCA9IGZhbHNlOwogICAgICAgICAgdmFyIGlwNiA9IGZhbHNlOwogICAgICAgICAgdmFyIG5hbWUgPSBmYWxzZTsKICAgICAgICAgIHZhciBzbGQgPSBmYWxzZTsKICAgICAgICAgIHZhciBpZG4gPSBmYWxzZTsKICAgICAgICAgIHZhciBwdW55Y29kZTIgPSBmYWxzZTsKICAgICAgICAgIHZhciByZWxhdGl2ZSA9ICF0aGlzLl9wYXJ0cy51cm47CiAgICAgICAgICBpZiAodGhpcy5fcGFydHMuaG9zdG5hbWUpIHsKICAgICAgICAgICAgcmVsYXRpdmUgPSBmYWxzZTsKICAgICAgICAgICAgaXA0ID0gVVJJLmlwNF9leHByZXNzaW9uLnRlc3QodGhpcy5fcGFydHMuaG9zdG5hbWUpOwogICAgICAgICAgICBpcDYgPSBVUkkuaXA2X2V4cHJlc3Npb24udGVzdCh0aGlzLl9wYXJ0cy5ob3N0bmFtZSk7CiAgICAgICAgICAgIGlwID0gaXA0IHx8IGlwNjsKICAgICAgICAgICAgbmFtZSA9ICFpcDsKICAgICAgICAgICAgc2xkID0gbmFtZSAmJiBTTEQgJiYgU0xELmhhcyh0aGlzLl9wYXJ0cy5ob3N0bmFtZSk7CiAgICAgICAgICAgIGlkbiA9IG5hbWUgJiYgVVJJLmlkbl9leHByZXNzaW9uLnRlc3QodGhpcy5fcGFydHMuaG9zdG5hbWUpOwogICAgICAgICAgICBwdW55Y29kZTIgPSBuYW1lICYmIFVSSS5wdW55Y29kZV9leHByZXNzaW9uLnRlc3QodGhpcy5fcGFydHMuaG9zdG5hbWUpOwogICAgICAgICAgfQogICAgICAgICAgc3dpdGNoICh3aGF0LnRvTG93ZXJDYXNlKCkpIHsKICAgICAgICAgICAgY2FzZSAicmVsYXRpdmUiOgogICAgICAgICAgICAgIHJldHVybiByZWxhdGl2ZTsKICAgICAgICAgICAgY2FzZSAiYWJzb2x1dGUiOgogICAgICAgICAgICAgIHJldHVybiAhcmVsYXRpdmU7CiAgICAgICAgICAgIGNhc2UgImRvbWFpbiI6CiAgICAgICAgICAgIGNhc2UgIm5hbWUiOgogICAgICAgICAgICAgIHJldHVybiBuYW1lOwogICAgICAgICAgICBjYXNlICJzbGQiOgogICAgICAgICAgICAgIHJldHVybiBzbGQ7CiAgICAgICAgICAgIGNhc2UgImlwIjoKICAgICAgICAgICAgICByZXR1cm4gaXA7CiAgICAgICAgICAgIGNhc2UgImlwNCI6CiAgICAgICAgICAgIGNhc2UgImlwdjQiOgogICAgICAgICAgICBjYXNlICJpbmV0NCI6CiAgICAgICAgICAgICAgcmV0dXJuIGlwNDsKICAgICAgICAgICAgY2FzZSAiaXA2IjoKICAgICAgICAgICAgY2FzZSAiaXB2NiI6CiAgICAgICAgICAgIGNhc2UgImluZXQ2IjoKICAgICAgICAgICAgICByZXR1cm4gaXA2OwogICAgICAgICAgICBjYXNlICJpZG4iOgogICAgICAgICAgICAgIHJldHVybiBpZG47CiAgICAgICAgICAgIGNhc2UgInVybCI6CiAgICAgICAgICAgICAgcmV0dXJuICF0aGlzLl9wYXJ0cy51cm47CiAgICAgICAgICAgIGNhc2UgInVybiI6CiAgICAgICAgICAgICAgcmV0dXJuICEhdGhpcy5fcGFydHMudXJuOwogICAgICAgICAgICBjYXNlICJwdW55Y29kZSI6CiAgICAgICAgICAgICAgcmV0dXJuIHB1bnljb2RlMjsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH07CiAgICAgICAgdmFyIF9wcm90b2NvbCA9IHAucHJvdG9jb2w7CiAgICAgICAgdmFyIF9wb3J0ID0gcC5wb3J0OwogICAgICAgIHZhciBfaG9zdG5hbWUgPSBwLmhvc3RuYW1lOwogICAgICAgIHAucHJvdG9jb2wgPSBmdW5jdGlvbih2MywgYnVpbGQpIHsKICAgICAgICAgIGlmICh2MykgewogICAgICAgICAgICB2MyA9IHYzLnJlcGxhY2UoLzooXC9cLyk/JC8sICIiKTsKICAgICAgICAgICAgaWYgKCF2My5tYXRjaChVUkkucHJvdG9jb2xfZXhwcmVzc2lvbikpIHsKICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQcm90b2NvbCAiJyArIHYzICsgYCIgY29udGFpbnMgY2hhcmFjdGVycyBvdGhlciB0aGFuIFtBLVowLTkuKy1dIG9yIGRvZXNuJ3Qgc3RhcnQgd2l0aCBbQS1aXWApOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gX3Byb3RvY29sLmNhbGwodGhpcywgdjMsIGJ1aWxkKTsKICAgICAgICB9OwogICAgICAgIHAuc2NoZW1lID0gcC5wcm90b2NvbDsKICAgICAgICBwLnBvcnQgPSBmdW5jdGlvbih2MywgYnVpbGQpIHsKICAgICAgICAgIGlmICh0aGlzLl9wYXJ0cy51cm4pIHsKICAgICAgICAgICAgcmV0dXJuIHYzID09PSB2b2lkIDAgPyAiIiA6IHRoaXM7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodjMgIT09IHZvaWQgMCkgewogICAgICAgICAgICBpZiAodjMgPT09IDApIHsKICAgICAgICAgICAgICB2MyA9IG51bGw7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHYzKSB7CiAgICAgICAgICAgICAgdjMgKz0gIiI7CiAgICAgICAgICAgICAgaWYgKHYzLmNoYXJBdCgwKSA9PT0gIjoiKSB7CiAgICAgICAgICAgICAgICB2MyA9IHYzLnN1YnN0cmluZygxKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgVVJJLmVuc3VyZVZhbGlkUG9ydCh2Myk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBfcG9ydC5jYWxsKHRoaXMsIHYzLCBidWlsZCk7CiAgICAgICAgfTsKICAgICAgICBwLmhvc3RuYW1lID0gZnVuY3Rpb24odjMsIGJ1aWxkKSB7CiAgICAgICAgICBpZiAodGhpcy5fcGFydHMudXJuKSB7CiAgICAgICAgICAgIHJldHVybiB2MyA9PT0gdm9pZCAwID8gIiIgOiB0aGlzOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHYzICE9PSB2b2lkIDApIHsKICAgICAgICAgICAgdmFyIHggPSB7IHByZXZlbnRJbnZhbGlkSG9zdG5hbWU6IHRoaXMuX3BhcnRzLnByZXZlbnRJbnZhbGlkSG9zdG5hbWUgfTsKICAgICAgICAgICAgdmFyIHJlcyA9IFVSSS5wYXJzZUhvc3QodjMsIHgpOwogICAgICAgICAgICBpZiAocmVzICE9PSAiLyIpIHsKICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdIb3N0bmFtZSAiJyArIHYzICsgJyIgY29udGFpbnMgY2hhcmFjdGVycyBvdGhlciB0aGFuIFtBLVowLTkuLV0nKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2MyA9IHguaG9zdG5hbWU7CiAgICAgICAgICAgIGlmICh0aGlzLl9wYXJ0cy5wcmV2ZW50SW52YWxpZEhvc3RuYW1lKSB7CiAgICAgICAgICAgICAgVVJJLmVuc3VyZVZhbGlkSG9zdG5hbWUodjMsIHRoaXMuX3BhcnRzLnByb3RvY29sKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIF9ob3N0bmFtZS5jYWxsKHRoaXMsIHYzLCBidWlsZCk7CiAgICAgICAgfTsKICAgICAgICBwLm9yaWdpbiA9IGZ1bmN0aW9uKHYzLCBidWlsZCkgewogICAgICAgICAgaWYgKHRoaXMuX3BhcnRzLnVybikgewogICAgICAgICAgICByZXR1cm4gdjMgPT09IHZvaWQgMCA/ICIiIDogdGhpczsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh2MyA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgIHZhciBwcm90b2NvbCA9IHRoaXMucHJvdG9jb2woKTsKICAgICAgICAgICAgdmFyIGF1dGhvcml0eSA9IHRoaXMuYXV0aG9yaXR5KCk7CiAgICAgICAgICAgIGlmICghYXV0aG9yaXR5KSB7CiAgICAgICAgICAgICAgcmV0dXJuICIiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiAocHJvdG9jb2wgPyBwcm90b2NvbCArICI6Ly8iIDogIiIpICsgdGhpcy5hdXRob3JpdHkoKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHZhciBvcmlnaW4gPSBVUkkodjMpOwogICAgICAgICAgICB0aGlzLnByb3RvY29sKG9yaWdpbi5wcm90b2NvbCgpKS5hdXRob3JpdHkob3JpZ2luLmF1dGhvcml0eSgpKS5idWlsZCghYnVpbGQpOwogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIHAuaG9zdCA9IGZ1bmN0aW9uKHYzLCBidWlsZCkgewogICAgICAgICAgaWYgKHRoaXMuX3BhcnRzLnVybikgewogICAgICAgICAgICByZXR1cm4gdjMgPT09IHZvaWQgMCA/ICIiIDogdGhpczsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh2MyA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9wYXJ0cy5ob3N0bmFtZSA/IFVSSS5idWlsZEhvc3QodGhpcy5fcGFydHMpIDogIiI7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB2YXIgcmVzID0gVVJJLnBhcnNlSG9zdCh2MywgdGhpcy5fcGFydHMpOwogICAgICAgICAgICBpZiAocmVzICE9PSAiLyIpIHsKICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdIb3N0bmFtZSAiJyArIHYzICsgJyIgY29udGFpbnMgY2hhcmFjdGVycyBvdGhlciB0aGFuIFtBLVowLTkuLV0nKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgcC5hdXRob3JpdHkgPSBmdW5jdGlvbih2MywgYnVpbGQpIHsKICAgICAgICAgIGlmICh0aGlzLl9wYXJ0cy51cm4pIHsKICAgICAgICAgICAgcmV0dXJuIHYzID09PSB2b2lkIDAgPyAiIiA6IHRoaXM7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodjMgPT09IHZvaWQgMCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5fcGFydHMuaG9zdG5hbWUgPyBVUkkuYnVpbGRBdXRob3JpdHkodGhpcy5fcGFydHMpIDogIiI7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB2YXIgcmVzID0gVVJJLnBhcnNlQXV0aG9yaXR5KHYzLCB0aGlzLl9wYXJ0cyk7CiAgICAgICAgICAgIGlmIChyZXMgIT09ICIvIikgewogICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0hvc3RuYW1lICInICsgdjMgKyAnIiBjb250YWlucyBjaGFyYWN0ZXJzIG90aGVyIHRoYW4gW0EtWjAtOS4tXScpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICBwLnVzZXJpbmZvID0gZnVuY3Rpb24odjMsIGJ1aWxkKSB7CiAgICAgICAgICBpZiAodGhpcy5fcGFydHMudXJuKSB7CiAgICAgICAgICAgIHJldHVybiB2MyA9PT0gdm9pZCAwID8gIiIgOiB0aGlzOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHYzID09PSB2b2lkIDApIHsKICAgICAgICAgICAgdmFyIHQgPSBVUkkuYnVpbGRVc2VyaW5mbyh0aGlzLl9wYXJ0cyk7CiAgICAgICAgICAgIHJldHVybiB0ID8gdC5zdWJzdHJpbmcoMCwgdC5sZW5ndGggLSAxKSA6IHQ7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZiAodjNbdjMubGVuZ3RoIC0gMV0gIT09ICJAIikgewogICAgICAgICAgICAgIHYzICs9ICJAIjsKICAgICAgICAgICAgfQogICAgICAgICAgICBVUkkucGFyc2VVc2VyaW5mbyh2MywgdGhpcy5fcGFydHMpOwogICAgICAgICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgcC5yZXNvdXJjZSA9IGZ1bmN0aW9uKHYzLCBidWlsZCkgewogICAgICAgICAgdmFyIHBhcnRzOwogICAgICAgICAgaWYgKHYzID09PSB2b2lkIDApIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMucGF0aCgpICsgdGhpcy5zZWFyY2goKSArIHRoaXMuaGFzaCgpOwogICAgICAgICAgfQogICAgICAgICAgcGFydHMgPSBVUkkucGFyc2UodjMpOwogICAgICAgICAgdGhpcy5fcGFydHMucGF0aCA9IHBhcnRzLnBhdGg7CiAgICAgICAgICB0aGlzLl9wYXJ0cy5xdWVyeSA9IHBhcnRzLnF1ZXJ5OwogICAgICAgICAgdGhpcy5fcGFydHMuZnJhZ21lbnQgPSBwYXJ0cy5mcmFnbWVudDsKICAgICAgICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTsKICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH07CiAgICAgICAgcC5zdWJkb21haW4gPSBmdW5jdGlvbih2MywgYnVpbGQpIHsKICAgICAgICAgIGlmICh0aGlzLl9wYXJ0cy51cm4pIHsKICAgICAgICAgICAgcmV0dXJuIHYzID09PSB2b2lkIDAgPyAiIiA6IHRoaXM7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodjMgPT09IHZvaWQgMCkgewogICAgICAgICAgICBpZiAoIXRoaXMuX3BhcnRzLmhvc3RuYW1lIHx8IHRoaXMuaXMoIklQIikpIHsKICAgICAgICAgICAgICByZXR1cm4gIiI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGVuZCA9IHRoaXMuX3BhcnRzLmhvc3RuYW1lLmxlbmd0aCAtIHRoaXMuZG9tYWluKCkubGVuZ3RoIC0gMTsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BhcnRzLmhvc3RuYW1lLnN1YnN0cmluZygwLCBlbmQpIHx8ICIiOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdmFyIGUgPSB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5sZW5ndGggLSB0aGlzLmRvbWFpbigpLmxlbmd0aDsKICAgICAgICAgICAgdmFyIHN1YiA9IHRoaXMuX3BhcnRzLmhvc3RuYW1lLnN1YnN0cmluZygwLCBlKTsKICAgICAgICAgICAgdmFyIHJlcGxhY2UgPSBuZXcgUmVnRXhwKCJeIiArIGVzY2FwZVJlZ0V4KHN1YikpOwogICAgICAgICAgICBpZiAodjMgJiYgdjMuY2hhckF0KHYzLmxlbmd0aCAtIDEpICE9PSAiLiIpIHsKICAgICAgICAgICAgICB2MyArPSAiLiI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHYzLmluZGV4T2YoIjoiKSAhPT0gLTEpIHsKICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJEb21haW5zIGNhbm5vdCBjb250YWluIGNvbG9ucyIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh2MykgewogICAgICAgICAgICAgIFVSSS5lbnN1cmVWYWxpZEhvc3RuYW1lKHYzLCB0aGlzLl9wYXJ0cy5wcm90b2NvbCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy5fcGFydHMuaG9zdG5hbWUgPSB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5yZXBsYWNlKHJlcGxhY2UsIHYzKTsKICAgICAgICAgICAgdGhpcy5idWlsZCghYnVpbGQpOwogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIHAuZG9tYWluID0gZnVuY3Rpb24odjMsIGJ1aWxkKSB7CiAgICAgICAgICBpZiAodGhpcy5fcGFydHMudXJuKSB7CiAgICAgICAgICAgIHJldHVybiB2MyA9PT0gdm9pZCAwID8gIiIgOiB0aGlzOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHR5cGVvZiB2MyA9PT0gImJvb2xlYW4iKSB7CiAgICAgICAgICAgIGJ1aWxkID0gdjM7CiAgICAgICAgICAgIHYzID0gdm9pZCAwOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHYzID09PSB2b2lkIDApIHsKICAgICAgICAgICAgaWYgKCF0aGlzLl9wYXJ0cy5ob3N0bmFtZSB8fCB0aGlzLmlzKCJJUCIpKSB7CiAgICAgICAgICAgICAgcmV0dXJuICIiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciB0ID0gdGhpcy5fcGFydHMuaG9zdG5hbWUubWF0Y2goL1wuL2cpOwogICAgICAgICAgICBpZiAodCAmJiB0Lmxlbmd0aCA8IDIpIHsKICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcGFydHMuaG9zdG5hbWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGVuZCA9IHRoaXMuX3BhcnRzLmhvc3RuYW1lLmxlbmd0aCAtIHRoaXMudGxkKGJ1aWxkKS5sZW5ndGggLSAxOwogICAgICAgICAgICBlbmQgPSB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5sYXN0SW5kZXhPZigiLiIsIGVuZCAtIDEpICsgMTsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BhcnRzLmhvc3RuYW1lLnN1YnN0cmluZyhlbmQpIHx8ICIiOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYgKCF2MykgewogICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoImNhbm5vdCBzZXQgZG9tYWluIGVtcHR5Iik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHYzLmluZGV4T2YoIjoiKSAhPT0gLTEpIHsKICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJEb21haW5zIGNhbm5vdCBjb250YWluIGNvbG9ucyIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIFVSSS5lbnN1cmVWYWxpZEhvc3RuYW1lKHYzLCB0aGlzLl9wYXJ0cy5wcm90b2NvbCk7CiAgICAgICAgICAgIGlmICghdGhpcy5fcGFydHMuaG9zdG5hbWUgfHwgdGhpcy5pcygiSVAiKSkgewogICAgICAgICAgICAgIHRoaXMuX3BhcnRzLmhvc3RuYW1lID0gdjM7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgdmFyIHJlcGxhY2UgPSBuZXcgUmVnRXhwKGVzY2FwZVJlZ0V4KHRoaXMuZG9tYWluKCkpICsgIiQiKTsKICAgICAgICAgICAgICB0aGlzLl9wYXJ0cy5ob3N0bmFtZSA9IHRoaXMuX3BhcnRzLmhvc3RuYW1lLnJlcGxhY2UocmVwbGFjZSwgdjMpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICBwLnRsZCA9IGZ1bmN0aW9uKHYzLCBidWlsZCkgewogICAgICAgICAgaWYgKHRoaXMuX3BhcnRzLnVybikgewogICAgICAgICAgICByZXR1cm4gdjMgPT09IHZvaWQgMCA/ICIiIDogdGhpczsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh0eXBlb2YgdjMgPT09ICJib29sZWFuIikgewogICAgICAgICAgICBidWlsZCA9IHYzOwogICAgICAgICAgICB2MyA9IHZvaWQgMDsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh2MyA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgIGlmICghdGhpcy5fcGFydHMuaG9zdG5hbWUgfHwgdGhpcy5pcygiSVAiKSkgewogICAgICAgICAgICAgIHJldHVybiAiIjsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgcG9zID0gdGhpcy5fcGFydHMuaG9zdG5hbWUubGFzdEluZGV4T2YoIi4iKTsKICAgICAgICAgICAgdmFyIHRsZCA9IHRoaXMuX3BhcnRzLmhvc3RuYW1lLnN1YnN0cmluZyhwb3MgKyAxKTsKICAgICAgICAgICAgaWYgKGJ1aWxkICE9PSB0cnVlICYmIFNMRCAmJiBTTEQubGlzdFt0bGQudG9Mb3dlckNhc2UoKV0pIHsKICAgICAgICAgICAgICByZXR1cm4gU0xELmdldCh0aGlzLl9wYXJ0cy5ob3N0bmFtZSkgfHwgdGxkOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB0bGQ7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB2YXIgcmVwbGFjZTsKICAgICAgICAgICAgaWYgKCF2MykgewogICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoImNhbm5vdCBzZXQgVExEIGVtcHR5Iik7CiAgICAgICAgICAgIH0gZWxzZSBpZiAodjMubWF0Y2goL1teYS16QS1aMC05LV0vKSkgewogICAgICAgICAgICAgIGlmIChTTEQgJiYgU0xELmlzKHYzKSkgewogICAgICAgICAgICAgICAgcmVwbGFjZSA9IG5ldyBSZWdFeHAoZXNjYXBlUmVnRXgodGhpcy50bGQoKSkgKyAiJCIpOwogICAgICAgICAgICAgICAgdGhpcy5fcGFydHMuaG9zdG5hbWUgPSB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5yZXBsYWNlKHJlcGxhY2UsIHYzKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVExEICInICsgdjMgKyAnIiBjb250YWlucyBjaGFyYWN0ZXJzIG90aGVyIHRoYW4gW0EtWjAtOV0nKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuX3BhcnRzLmhvc3RuYW1lIHx8IHRoaXMuaXMoIklQIikpIHsKICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoImNhbm5vdCBzZXQgVExEIG9uIG5vbi1kb21haW4gaG9zdCIpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHJlcGxhY2UgPSBuZXcgUmVnRXhwKGVzY2FwZVJlZ0V4KHRoaXMudGxkKCkpICsgIiQiKTsKICAgICAgICAgICAgICB0aGlzLl9wYXJ0cy5ob3N0bmFtZSA9IHRoaXMuX3BhcnRzLmhvc3RuYW1lLnJlcGxhY2UocmVwbGFjZSwgdjMpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICBwLmRpcmVjdG9yeSA9IGZ1bmN0aW9uKHYzLCBidWlsZCkgewogICAgICAgICAgaWYgKHRoaXMuX3BhcnRzLnVybikgewogICAgICAgICAgICByZXR1cm4gdjMgPT09IHZvaWQgMCA/ICIiIDogdGhpczsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh2MyA9PT0gdm9pZCAwIHx8IHYzID09PSB0cnVlKSB7CiAgICAgICAgICAgIGlmICghdGhpcy5fcGFydHMucGF0aCAmJiAhdGhpcy5fcGFydHMuaG9zdG5hbWUpIHsKICAgICAgICAgICAgICByZXR1cm4gIiI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHRoaXMuX3BhcnRzLnBhdGggPT09ICIvIikgewogICAgICAgICAgICAgIHJldHVybiAiLyI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGVuZCA9IHRoaXMuX3BhcnRzLnBhdGgubGVuZ3RoIC0gdGhpcy5maWxlbmFtZSgpLmxlbmd0aCAtIDE7CiAgICAgICAgICAgIHZhciByZXMgPSB0aGlzLl9wYXJ0cy5wYXRoLnN1YnN0cmluZygwLCBlbmQpIHx8ICh0aGlzLl9wYXJ0cy5ob3N0bmFtZSA/ICIvIiA6ICIiKTsKICAgICAgICAgICAgcmV0dXJuIHYzID8gVVJJLmRlY29kZVBhdGgocmVzKSA6IHJlczsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHZhciBlID0gdGhpcy5fcGFydHMucGF0aC5sZW5ndGggLSB0aGlzLmZpbGVuYW1lKCkubGVuZ3RoOwogICAgICAgICAgICB2YXIgZGlyZWN0b3J5ID0gdGhpcy5fcGFydHMucGF0aC5zdWJzdHJpbmcoMCwgZSk7CiAgICAgICAgICAgIHZhciByZXBsYWNlID0gbmV3IFJlZ0V4cCgiXiIgKyBlc2NhcGVSZWdFeChkaXJlY3RvcnkpKTsKICAgICAgICAgICAgaWYgKCF0aGlzLmlzKCJyZWxhdGl2ZSIpKSB7CiAgICAgICAgICAgICAgaWYgKCF2MykgewogICAgICAgICAgICAgICAgdjMgPSAiLyI7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmICh2My5jaGFyQXQoMCkgIT09ICIvIikgewogICAgICAgICAgICAgICAgdjMgPSAiLyIgKyB2MzsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHYzICYmIHYzLmNoYXJBdCh2My5sZW5ndGggLSAxKSAhPT0gIi8iKSB7CiAgICAgICAgICAgICAgdjMgKz0gIi8iOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHYzID0gVVJJLnJlY29kZVBhdGgodjMpOwogICAgICAgICAgICB0aGlzLl9wYXJ0cy5wYXRoID0gdGhpcy5fcGFydHMucGF0aC5yZXBsYWNlKHJlcGxhY2UsIHYzKTsKICAgICAgICAgICAgdGhpcy5idWlsZCghYnVpbGQpOwogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIHAuZmlsZW5hbWUgPSBmdW5jdGlvbih2MywgYnVpbGQpIHsKICAgICAgICAgIGlmICh0aGlzLl9wYXJ0cy51cm4pIHsKICAgICAgICAgICAgcmV0dXJuIHYzID09PSB2b2lkIDAgPyAiIiA6IHRoaXM7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodHlwZW9mIHYzICE9PSAic3RyaW5nIikgewogICAgICAgICAgICBpZiAoIXRoaXMuX3BhcnRzLnBhdGggfHwgdGhpcy5fcGFydHMucGF0aCA9PT0gIi8iKSB7CiAgICAgICAgICAgICAgcmV0dXJuICIiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBwb3MgPSB0aGlzLl9wYXJ0cy5wYXRoLmxhc3RJbmRleE9mKCIvIik7CiAgICAgICAgICAgIHZhciByZXMgPSB0aGlzLl9wYXJ0cy5wYXRoLnN1YnN0cmluZyhwb3MgKyAxKTsKICAgICAgICAgICAgcmV0dXJuIHYzID8gVVJJLmRlY29kZVBhdGhTZWdtZW50KHJlcykgOiByZXM7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB2YXIgbXV0YXRlZERpcmVjdG9yeSA9IGZhbHNlOwogICAgICAgICAgICBpZiAodjMuY2hhckF0KDApID09PSAiLyIpIHsKICAgICAgICAgICAgICB2MyA9IHYzLnN1YnN0cmluZygxKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodjMubWF0Y2goL1wuP1wvLykpIHsKICAgICAgICAgICAgICBtdXRhdGVkRGlyZWN0b3J5ID0gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgcmVwbGFjZSA9IG5ldyBSZWdFeHAoZXNjYXBlUmVnRXgodGhpcy5maWxlbmFtZSgpKSArICIkIik7CiAgICAgICAgICAgIHYzID0gVVJJLnJlY29kZVBhdGgodjMpOwogICAgICAgICAgICB0aGlzLl9wYXJ0cy5wYXRoID0gdGhpcy5fcGFydHMucGF0aC5yZXBsYWNlKHJlcGxhY2UsIHYzKTsKICAgICAgICAgICAgaWYgKG11dGF0ZWREaXJlY3RvcnkpIHsKICAgICAgICAgICAgICB0aGlzLm5vcm1hbGl6ZVBhdGgoYnVpbGQpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIHAuc3VmZml4ID0gZnVuY3Rpb24odjMsIGJ1aWxkKSB7CiAgICAgICAgICBpZiAodGhpcy5fcGFydHMudXJuKSB7CiAgICAgICAgICAgIHJldHVybiB2MyA9PT0gdm9pZCAwID8gIiIgOiB0aGlzOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHYzID09PSB2b2lkIDAgfHwgdjMgPT09IHRydWUpIHsKICAgICAgICAgICAgaWYgKCF0aGlzLl9wYXJ0cy5wYXRoIHx8IHRoaXMuX3BhcnRzLnBhdGggPT09ICIvIikgewogICAgICAgICAgICAgIHJldHVybiAiIjsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgZmlsZW5hbWUgPSB0aGlzLmZpbGVuYW1lKCk7CiAgICAgICAgICAgIHZhciBwb3MgPSBmaWxlbmFtZS5sYXN0SW5kZXhPZigiLiIpOwogICAgICAgICAgICB2YXIgcywgcmVzOwogICAgICAgICAgICBpZiAocG9zID09PSAtMSkgewogICAgICAgICAgICAgIHJldHVybiAiIjsKICAgICAgICAgICAgfQogICAgICAgICAgICBzID0gZmlsZW5hbWUuc3Vic3RyaW5nKHBvcyArIDEpOwogICAgICAgICAgICByZXMgPSAvXlthLXowLTklXSskL2kudGVzdChzKSA/IHMgOiAiIjsKICAgICAgICAgICAgcmV0dXJuIHYzID8gVVJJLmRlY29kZVBhdGhTZWdtZW50KHJlcykgOiByZXM7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZiAodjMuY2hhckF0KDApID09PSAiLiIpIHsKICAgICAgICAgICAgICB2MyA9IHYzLnN1YnN0cmluZygxKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgc3VmZml4ID0gdGhpcy5zdWZmaXgoKTsKICAgICAgICAgICAgdmFyIHJlcGxhY2U7CiAgICAgICAgICAgIGlmICghc3VmZml4KSB7CiAgICAgICAgICAgICAgaWYgKCF2MykgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHRoaXMuX3BhcnRzLnBhdGggKz0gIi4iICsgVVJJLnJlY29kZVBhdGgodjMpOwogICAgICAgICAgICB9IGVsc2UgaWYgKCF2MykgewogICAgICAgICAgICAgIHJlcGxhY2UgPSBuZXcgUmVnRXhwKGVzY2FwZVJlZ0V4KCIuIiArIHN1ZmZpeCkgKyAiJCIpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHJlcGxhY2UgPSBuZXcgUmVnRXhwKGVzY2FwZVJlZ0V4KHN1ZmZpeCkgKyAiJCIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChyZXBsYWNlKSB7CiAgICAgICAgICAgICAgdjMgPSBVUkkucmVjb2RlUGF0aCh2Myk7CiAgICAgICAgICAgICAgdGhpcy5fcGFydHMucGF0aCA9IHRoaXMuX3BhcnRzLnBhdGgucmVwbGFjZShyZXBsYWNlLCB2Myk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy5idWlsZCghYnVpbGQpOwogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIHAuc2VnbWVudCA9IGZ1bmN0aW9uKHNlZ21lbnQsIHYzLCBidWlsZCkgewogICAgICAgICAgdmFyIHNlcGFyYXRvciA9IHRoaXMuX3BhcnRzLnVybiA/ICI6IiA6ICIvIjsKICAgICAgICAgIHZhciBwYXRoID0gdGhpcy5wYXRoKCk7CiAgICAgICAgICB2YXIgYWJzb2x1dGUgPSBwYXRoLnN1YnN0cmluZygwLCAxKSA9PT0gIi8iOwogICAgICAgICAgdmFyIHNlZ21lbnRzID0gcGF0aC5zcGxpdChzZXBhcmF0b3IpOwogICAgICAgICAgaWYgKHNlZ21lbnQgIT09IHZvaWQgMCAmJiB0eXBlb2Ygc2VnbWVudCAhPT0gIm51bWJlciIpIHsKICAgICAgICAgICAgYnVpbGQgPSB2MzsKICAgICAgICAgICAgdjMgPSBzZWdtZW50OwogICAgICAgICAgICBzZWdtZW50ID0gdm9pZCAwOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHNlZ21lbnQgIT09IHZvaWQgMCAmJiB0eXBlb2Ygc2VnbWVudCAhPT0gIm51bWJlciIpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdCYWQgc2VnbWVudCAiJyArIHNlZ21lbnQgKyAnIiwgbXVzdCBiZSAwLWJhc2VkIGludGVnZXInKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChhYnNvbHV0ZSkgewogICAgICAgICAgICBzZWdtZW50cy5zaGlmdCgpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHNlZ21lbnQgPCAwKSB7CiAgICAgICAgICAgIHNlZ21lbnQgPSBNYXRoLm1heChzZWdtZW50cy5sZW5ndGggKyBzZWdtZW50LCAwKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh2MyA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgIHJldHVybiBzZWdtZW50ID09PSB2b2lkIDAgPyBzZWdtZW50cyA6IHNlZ21lbnRzW3NlZ21lbnRdOwogICAgICAgICAgfSBlbHNlIGlmIChzZWdtZW50ID09PSBudWxsIHx8IHNlZ21lbnRzW3NlZ21lbnRdID09PSB2b2lkIDApIHsKICAgICAgICAgICAgaWYgKGlzQXJyYXkodjMpKSB7CiAgICAgICAgICAgICAgc2VnbWVudHMgPSBbXTsKICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHYzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgICAgICAgICAgaWYgKCF2M1tpXS5sZW5ndGggJiYgKCFzZWdtZW50cy5sZW5ndGggfHwgIXNlZ21lbnRzW3NlZ21lbnRzLmxlbmd0aCAtIDFdLmxlbmd0aCkpIHsKICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoc2VnbWVudHMubGVuZ3RoICYmICFzZWdtZW50c1tzZWdtZW50cy5sZW5ndGggLSAxXS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgc2VnbWVudHMucG9wKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBzZWdtZW50cy5wdXNoKHRyaW1TbGFzaGVzKHYzW2ldKSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgaWYgKHYzIHx8IHR5cGVvZiB2MyA9PT0gInN0cmluZyIpIHsKICAgICAgICAgICAgICB2MyA9IHRyaW1TbGFzaGVzKHYzKTsKICAgICAgICAgICAgICBpZiAoc2VnbWVudHNbc2VnbWVudHMubGVuZ3RoIC0gMV0gPT09ICIiKSB7CiAgICAgICAgICAgICAgICBzZWdtZW50c1tzZWdtZW50cy5sZW5ndGggLSAxXSA9IHYzOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBzZWdtZW50cy5wdXNoKHYzKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmICh2MykgewogICAgICAgICAgICAgIHNlZ21lbnRzW3NlZ21lbnRdID0gdHJpbVNsYXNoZXModjMpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHNlZ21lbnRzLnNwbGljZShzZWdtZW50LCAxKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgaWYgKGFic29sdXRlKSB7CiAgICAgICAgICAgIHNlZ21lbnRzLnVuc2hpZnQoIiIpOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHRoaXMucGF0aChzZWdtZW50cy5qb2luKHNlcGFyYXRvciksIGJ1aWxkKTsKICAgICAgICB9OwogICAgICAgIHAuc2VnbWVudENvZGVkID0gZnVuY3Rpb24oc2VnbWVudCwgdjMsIGJ1aWxkKSB7CiAgICAgICAgICB2YXIgc2VnbWVudHMsIGksIGw7CiAgICAgICAgICBpZiAodHlwZW9mIHNlZ21lbnQgIT09ICJudW1iZXIiKSB7CiAgICAgICAgICAgIGJ1aWxkID0gdjM7CiAgICAgICAgICAgIHYzID0gc2VnbWVudDsKICAgICAgICAgICAgc2VnbWVudCA9IHZvaWQgMDsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh2MyA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgIHNlZ21lbnRzID0gdGhpcy5zZWdtZW50KHNlZ21lbnQsIHYzLCBidWlsZCk7CiAgICAgICAgICAgIGlmICghaXNBcnJheShzZWdtZW50cykpIHsKICAgICAgICAgICAgICBzZWdtZW50cyA9IHNlZ21lbnRzICE9PSB2b2lkIDAgPyBVUkkuZGVjb2RlKHNlZ21lbnRzKSA6IHZvaWQgMDsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gc2VnbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgICAgICAgICAgICBzZWdtZW50c1tpXSA9IFVSSS5kZWNvZGUoc2VnbWVudHNbaV0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gc2VnbWVudHM7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoIWlzQXJyYXkodjMpKSB7CiAgICAgICAgICAgIHYzID0gdHlwZW9mIHYzID09PSAic3RyaW5nIiB8fCB2MyBpbnN0YW5jZW9mIFN0cmluZyA/IFVSSS5lbmNvZGUodjMpIDogdjM7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gdjMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgICAgICAgICAgdjNbaV0gPSBVUkkuZW5jb2RlKHYzW2ldKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHRoaXMuc2VnbWVudChzZWdtZW50LCB2MywgYnVpbGQpOwogICAgICAgIH07CiAgICAgICAgdmFyIHEgPSBwLnF1ZXJ5OwogICAgICAgIHAucXVlcnkgPSBmdW5jdGlvbih2MywgYnVpbGQpIHsKICAgICAgICAgIGlmICh2MyA9PT0gdHJ1ZSkgewogICAgICAgICAgICByZXR1cm4gVVJJLnBhcnNlUXVlcnkodGhpcy5fcGFydHMucXVlcnksIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpOwogICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdjMgPT09ICJmdW5jdGlvbiIpIHsKICAgICAgICAgICAgdmFyIGRhdGEgPSBVUkkucGFyc2VRdWVyeSh0aGlzLl9wYXJ0cy5xdWVyeSwgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSk7CiAgICAgICAgICAgIHZhciByZXN1bHQgPSB2My5jYWxsKHRoaXMsIGRhdGEpOwogICAgICAgICAgICB0aGlzLl9wYXJ0cy5xdWVyeSA9IFVSSS5idWlsZFF1ZXJ5KHJlc3VsdCB8fCBkYXRhLCB0aGlzLl9wYXJ0cy5kdXBsaWNhdGVRdWVyeVBhcmFtZXRlcnMsIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpOwogICAgICAgICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgfSBlbHNlIGlmICh2MyAhPT0gdm9pZCAwICYmIHR5cGVvZiB2MyAhPT0gInN0cmluZyIpIHsKICAgICAgICAgICAgdGhpcy5fcGFydHMucXVlcnkgPSBVUkkuYnVpbGRRdWVyeSh2MywgdGhpcy5fcGFydHMuZHVwbGljYXRlUXVlcnlQYXJhbWV0ZXJzLCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKTsKICAgICAgICAgICAgdGhpcy5idWlsZCghYnVpbGQpOwogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBxLmNhbGwodGhpcywgdjMsIGJ1aWxkKTsKICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIHAuc2V0UXVlcnkgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgYnVpbGQpIHsKICAgICAgICAgIHZhciBkYXRhID0gVVJJLnBhcnNlUXVlcnkodGhpcy5fcGFydHMucXVlcnksIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpOwogICAgICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSAic3RyaW5nIiB8fCBuYW1lIGluc3RhbmNlb2YgU3RyaW5nKSB7CiAgICAgICAgICAgIGRhdGFbbmFtZV0gPSB2YWx1ZSAhPT0gdm9pZCAwID8gdmFsdWUgOiBudWxsOwogICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbmFtZSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIG5hbWUpIHsKICAgICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwobmFtZSwga2V5KSkgewogICAgICAgICAgICAgICAgZGF0YVtrZXldID0gbmFtZVtrZXldOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiVVJJLmFkZFF1ZXJ5KCkgYWNjZXB0cyBhbiBvYmplY3QsIHN0cmluZyBhcyB0aGUgbmFtZSBwYXJhbWV0ZXIiKTsKICAgICAgICAgIH0KICAgICAgICAgIHRoaXMuX3BhcnRzLnF1ZXJ5ID0gVVJJLmJ1aWxkUXVlcnkoZGF0YSwgdGhpcy5fcGFydHMuZHVwbGljYXRlUXVlcnlQYXJhbWV0ZXJzLCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKTsKICAgICAgICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gInN0cmluZyIpIHsKICAgICAgICAgICAgYnVpbGQgPSB2YWx1ZTsKICAgICAgICAgIH0KICAgICAgICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTsKICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH07CiAgICAgICAgcC5hZGRRdWVyeSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBidWlsZCkgewogICAgICAgICAgdmFyIGRhdGEgPSBVUkkucGFyc2VRdWVyeSh0aGlzLl9wYXJ0cy5xdWVyeSwgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSk7CiAgICAgICAgICBVUkkuYWRkUXVlcnkoZGF0YSwgbmFtZSwgdmFsdWUgPT09IHZvaWQgMCA/IG51bGwgOiB2YWx1ZSk7CiAgICAgICAgICB0aGlzLl9wYXJ0cy5xdWVyeSA9IFVSSS5idWlsZFF1ZXJ5KGRhdGEsIHRoaXMuX3BhcnRzLmR1cGxpY2F0ZVF1ZXJ5UGFyYW1ldGVycywgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSk7CiAgICAgICAgICBpZiAodHlwZW9mIG5hbWUgIT09ICJzdHJpbmciKSB7CiAgICAgICAgICAgIGJ1aWxkID0gdmFsdWU7CiAgICAgICAgICB9CiAgICAgICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7CiAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9OwogICAgICAgIHAucmVtb3ZlUXVlcnkgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgYnVpbGQpIHsKICAgICAgICAgIHZhciBkYXRhID0gVVJJLnBhcnNlUXVlcnkodGhpcy5fcGFydHMucXVlcnksIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpOwogICAgICAgICAgVVJJLnJlbW92ZVF1ZXJ5KGRhdGEsIG5hbWUsIHZhbHVlKTsKICAgICAgICAgIHRoaXMuX3BhcnRzLnF1ZXJ5ID0gVVJJLmJ1aWxkUXVlcnkoZGF0YSwgdGhpcy5fcGFydHMuZHVwbGljYXRlUXVlcnlQYXJhbWV0ZXJzLCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKTsKICAgICAgICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gInN0cmluZyIpIHsKICAgICAgICAgICAgYnVpbGQgPSB2YWx1ZTsKICAgICAgICAgIH0KICAgICAgICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTsKICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH07CiAgICAgICAgcC5oYXNRdWVyeSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCB3aXRoaW5BcnJheSkgewogICAgICAgICAgdmFyIGRhdGEgPSBVUkkucGFyc2VRdWVyeSh0aGlzLl9wYXJ0cy5xdWVyeSwgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSk7CiAgICAgICAgICByZXR1cm4gVVJJLmhhc1F1ZXJ5KGRhdGEsIG5hbWUsIHZhbHVlLCB3aXRoaW5BcnJheSk7CiAgICAgICAgfTsKICAgICAgICBwLnNldFNlYXJjaCA9IHAuc2V0UXVlcnk7CiAgICAgICAgcC5hZGRTZWFyY2ggPSBwLmFkZFF1ZXJ5OwogICAgICAgIHAucmVtb3ZlU2VhcmNoID0gcC5yZW1vdmVRdWVyeTsKICAgICAgICBwLmhhc1NlYXJjaCA9IHAuaGFzUXVlcnk7CiAgICAgICAgcC5ub3JtYWxpemUgPSBmdW5jdGlvbigpIHsKICAgICAgICAgIGlmICh0aGlzLl9wYXJ0cy51cm4pIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMubm9ybWFsaXplUHJvdG9jb2woZmFsc2UpLm5vcm1hbGl6ZVBhdGgoZmFsc2UpLm5vcm1hbGl6ZVF1ZXJ5KGZhbHNlKS5ub3JtYWxpemVGcmFnbWVudChmYWxzZSkuYnVpbGQoKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiB0aGlzLm5vcm1hbGl6ZVByb3RvY29sKGZhbHNlKS5ub3JtYWxpemVIb3N0bmFtZShmYWxzZSkubm9ybWFsaXplUG9ydChmYWxzZSkubm9ybWFsaXplUGF0aChmYWxzZSkubm9ybWFsaXplUXVlcnkoZmFsc2UpLm5vcm1hbGl6ZUZyYWdtZW50KGZhbHNlKS5idWlsZCgpOwogICAgICAgIH07CiAgICAgICAgcC5ub3JtYWxpemVQcm90b2NvbCA9IGZ1bmN0aW9uKGJ1aWxkKSB7CiAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuX3BhcnRzLnByb3RvY29sID09PSAic3RyaW5nIikgewogICAgICAgICAgICB0aGlzLl9wYXJ0cy5wcm90b2NvbCA9IHRoaXMuX3BhcnRzLnByb3RvY29sLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH07CiAgICAgICAgcC5ub3JtYWxpemVIb3N0bmFtZSA9IGZ1bmN0aW9uKGJ1aWxkKSB7CiAgICAgICAgICBpZiAodGhpcy5fcGFydHMuaG9zdG5hbWUpIHsKICAgICAgICAgICAgaWYgKHRoaXMuaXMoIklETiIpICYmIHB1bnljb2RlKSB7CiAgICAgICAgICAgICAgdGhpcy5fcGFydHMuaG9zdG5hbWUgPSBwdW55Y29kZS50b0FTQ0lJKHRoaXMuX3BhcnRzLmhvc3RuYW1lKTsKICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzKCJJUHY2IikgJiYgSVB2NikgewogICAgICAgICAgICAgIHRoaXMuX3BhcnRzLmhvc3RuYW1lID0gSVB2Ni5iZXN0KHRoaXMuX3BhcnRzLmhvc3RuYW1lKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLl9wYXJ0cy5ob3N0bmFtZSA9IHRoaXMuX3BhcnRzLmhvc3RuYW1lLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH07CiAgICAgICAgcC5ub3JtYWxpemVQb3J0ID0gZnVuY3Rpb24oYnVpbGQpIHsKICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5fcGFydHMucHJvdG9jb2wgPT09ICJzdHJpbmciICYmIHRoaXMuX3BhcnRzLnBvcnQgPT09IFVSSS5kZWZhdWx0UG9ydHNbdGhpcy5fcGFydHMucHJvdG9jb2xdKSB7CiAgICAgICAgICAgIHRoaXMuX3BhcnRzLnBvcnQgPSBudWxsOwogICAgICAgICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9OwogICAgICAgIHAubm9ybWFsaXplUGF0aCA9IGZ1bmN0aW9uKGJ1aWxkKSB7CiAgICAgICAgICB2YXIgX3BhdGggPSB0aGlzLl9wYXJ0cy5wYXRoOwogICAgICAgICAgaWYgKCFfcGF0aCkgewogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh0aGlzLl9wYXJ0cy51cm4pIHsKICAgICAgICAgICAgdGhpcy5fcGFydHMucGF0aCA9IFVSSS5yZWNvZGVVcm5QYXRoKHRoaXMuX3BhcnRzLnBhdGgpOwogICAgICAgICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHRoaXMuX3BhcnRzLnBhdGggPT09ICIvIikgewogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgIH0KICAgICAgICAgIF9wYXRoID0gVVJJLnJlY29kZVBhdGgoX3BhdGgpOwogICAgICAgICAgdmFyIF93YXNfcmVsYXRpdmU7CiAgICAgICAgICB2YXIgX2xlYWRpbmdQYXJlbnRzID0gIiI7CiAgICAgICAgICB2YXIgX3BhcmVudCwgX3BvczsKICAgICAgICAgIGlmIChfcGF0aC5jaGFyQXQoMCkgIT09ICIvIikgewogICAgICAgICAgICBfd2FzX3JlbGF0aXZlID0gdHJ1ZTsKICAgICAgICAgICAgX3BhdGggPSAiLyIgKyBfcGF0aDsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChfcGF0aC5zbGljZSgtMykgPT09ICIvLi4iIHx8IF9wYXRoLnNsaWNlKC0yKSA9PT0gIi8uIikgewogICAgICAgICAgICBfcGF0aCArPSAiLyI7CiAgICAgICAgICB9CiAgICAgICAgICBfcGF0aCA9IF9wYXRoLnJlcGxhY2UoLyhcLyhcLlwvKSspfChcL1wuJCkvZywgIi8iKS5yZXBsYWNlKC9cL3syLH0vZywgIi8iKTsKICAgICAgICAgIGlmIChfd2FzX3JlbGF0aXZlKSB7CiAgICAgICAgICAgIF9sZWFkaW5nUGFyZW50cyA9IF9wYXRoLnN1YnN0cmluZygxKS5tYXRjaCgvXihcLlwuXC8pKy8pIHx8ICIiOwogICAgICAgICAgICBpZiAoX2xlYWRpbmdQYXJlbnRzKSB7CiAgICAgICAgICAgICAgX2xlYWRpbmdQYXJlbnRzID0gX2xlYWRpbmdQYXJlbnRzWzBdOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICB3aGlsZSAodHJ1ZSkgewogICAgICAgICAgICBfcGFyZW50ID0gX3BhdGguc2VhcmNoKC9cL1wuXC4oXC98JCkvKTsKICAgICAgICAgICAgaWYgKF9wYXJlbnQgPT09IC0xKSB7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoX3BhcmVudCA9PT0gMCkgewogICAgICAgICAgICAgIF9wYXRoID0gX3BhdGguc3Vic3RyaW5nKDMpOwogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIF9wb3MgPSBfcGF0aC5zdWJzdHJpbmcoMCwgX3BhcmVudCkubGFzdEluZGV4T2YoIi8iKTsKICAgICAgICAgICAgaWYgKF9wb3MgPT09IC0xKSB7CiAgICAgICAgICAgICAgX3BvcyA9IF9wYXJlbnQ7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgX3BhdGggPSBfcGF0aC5zdWJzdHJpbmcoMCwgX3BvcykgKyBfcGF0aC5zdWJzdHJpbmcoX3BhcmVudCArIDMpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKF93YXNfcmVsYXRpdmUgJiYgdGhpcy5pcygicmVsYXRpdmUiKSkgewogICAgICAgICAgICBfcGF0aCA9IF9sZWFkaW5nUGFyZW50cyArIF9wYXRoLnN1YnN0cmluZygxKTsKICAgICAgICAgIH0KICAgICAgICAgIHRoaXMuX3BhcnRzLnBhdGggPSBfcGF0aDsKICAgICAgICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTsKICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH07CiAgICAgICAgcC5ub3JtYWxpemVQYXRobmFtZSA9IHAubm9ybWFsaXplUGF0aDsKICAgICAgICBwLm5vcm1hbGl6ZVF1ZXJ5ID0gZnVuY3Rpb24oYnVpbGQpIHsKICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5fcGFydHMucXVlcnkgPT09ICJzdHJpbmciKSB7CiAgICAgICAgICAgIGlmICghdGhpcy5fcGFydHMucXVlcnkubGVuZ3RoKSB7CiAgICAgICAgICAgICAgdGhpcy5fcGFydHMucXVlcnkgPSBudWxsOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHRoaXMucXVlcnkoVVJJLnBhcnNlUXVlcnkodGhpcy5fcGFydHMucXVlcnksIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9OwogICAgICAgIHAubm9ybWFsaXplRnJhZ21lbnQgPSBmdW5jdGlvbihidWlsZCkgewogICAgICAgICAgaWYgKCF0aGlzLl9wYXJ0cy5mcmFnbWVudCkgewogICAgICAgICAgICB0aGlzLl9wYXJ0cy5mcmFnbWVudCA9IG51bGw7CiAgICAgICAgICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH07CiAgICAgICAgcC5ub3JtYWxpemVTZWFyY2ggPSBwLm5vcm1hbGl6ZVF1ZXJ5OwogICAgICAgIHAubm9ybWFsaXplSGFzaCA9IHAubm9ybWFsaXplRnJhZ21lbnQ7CiAgICAgICAgcC5pc284ODU5ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICB2YXIgZSA9IFVSSS5lbmNvZGU7CiAgICAgICAgICB2YXIgZCA9IFVSSS5kZWNvZGU7CiAgICAgICAgICBVUkkuZW5jb2RlID0gZXNjYXBlOwogICAgICAgICAgVVJJLmRlY29kZSA9IGRlY29kZVVSSUNvbXBvbmVudDsKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIHRoaXMubm9ybWFsaXplKCk7CiAgICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgICBVUkkuZW5jb2RlID0gZTsKICAgICAgICAgICAgVVJJLmRlY29kZSA9IGQ7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9OwogICAgICAgIHAudW5pY29kZSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgdmFyIGUgPSBVUkkuZW5jb2RlOwogICAgICAgICAgdmFyIGQgPSBVUkkuZGVjb2RlOwogICAgICAgICAgVVJJLmVuY29kZSA9IHN0cmljdEVuY29kZVVSSUNvbXBvbmVudDsKICAgICAgICAgIFVSSS5kZWNvZGUgPSB1bmVzY2FwZTsKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIHRoaXMubm9ybWFsaXplKCk7CiAgICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgICBVUkkuZW5jb2RlID0gZTsKICAgICAgICAgICAgVVJJLmRlY29kZSA9IGQ7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9OwogICAgICAgIHAucmVhZGFibGUgPSBmdW5jdGlvbigpIHsKICAgICAgICAgIHZhciB1cmkgPSB0aGlzLmNsb25lKCk7CiAgICAgICAgICB1cmkudXNlcm5hbWUoIiIpLnBhc3N3b3JkKCIiKS5ub3JtYWxpemUoKTsKICAgICAgICAgIHZhciB0ID0gIiI7CiAgICAgICAgICBpZiAodXJpLl9wYXJ0cy5wcm90b2NvbCkgewogICAgICAgICAgICB0ICs9IHVyaS5fcGFydHMucHJvdG9jb2wgKyAiOi8vIjsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh1cmkuX3BhcnRzLmhvc3RuYW1lKSB7CiAgICAgICAgICAgIGlmICh1cmkuaXMoInB1bnljb2RlIikgJiYgcHVueWNvZGUpIHsKICAgICAgICAgICAgICB0ICs9IHB1bnljb2RlLnRvVW5pY29kZSh1cmkuX3BhcnRzLmhvc3RuYW1lKTsKICAgICAgICAgICAgICBpZiAodXJpLl9wYXJ0cy5wb3J0KSB7CiAgICAgICAgICAgICAgICB0ICs9ICI6IiArIHVyaS5fcGFydHMucG9ydDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgdCArPSB1cmkuaG9zdCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodXJpLl9wYXJ0cy5ob3N0bmFtZSAmJiB1cmkuX3BhcnRzLnBhdGggJiYgdXJpLl9wYXJ0cy5wYXRoLmNoYXJBdCgwKSAhPT0gIi8iKSB7CiAgICAgICAgICAgIHQgKz0gIi8iOwogICAgICAgICAgfQogICAgICAgICAgdCArPSB1cmkucGF0aCh0cnVlKTsKICAgICAgICAgIGlmICh1cmkuX3BhcnRzLnF1ZXJ5KSB7CiAgICAgICAgICAgIHZhciBxMyA9ICIiOwogICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgcXAgPSB1cmkuX3BhcnRzLnF1ZXJ5LnNwbGl0KCImIiksIGwgPSBxcC5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgICAgICAgICB2YXIga3YgPSAocXBbaV0gfHwgIiIpLnNwbGl0KCI9Iik7CiAgICAgICAgICAgICAgcTMgKz0gIiYiICsgVVJJLmRlY29kZVF1ZXJ5KGt2WzBdLCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKS5yZXBsYWNlKC8mL2csICIlMjYiKTsKICAgICAgICAgICAgICBpZiAoa3ZbMV0gIT09IHZvaWQgMCkgewogICAgICAgICAgICAgICAgcTMgKz0gIj0iICsgVVJJLmRlY29kZVF1ZXJ5KGt2WzFdLCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKS5yZXBsYWNlKC8mL2csICIlMjYiKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdCArPSAiPyIgKyBxMy5zdWJzdHJpbmcoMSk7CiAgICAgICAgICB9CiAgICAgICAgICB0ICs9IFVSSS5kZWNvZGVRdWVyeSh1cmkuaGFzaCgpLCB0cnVlKTsKICAgICAgICAgIHJldHVybiB0OwogICAgICAgIH07CiAgICAgICAgcC5hYnNvbHV0ZVRvID0gZnVuY3Rpb24oYmFzZSkgewogICAgICAgICAgdmFyIHJlc29sdmVkID0gdGhpcy5jbG9uZSgpOwogICAgICAgICAgdmFyIHByb3BlcnRpZXMgPSBbInByb3RvY29sIiwgInVzZXJuYW1lIiwgInBhc3N3b3JkIiwgImhvc3RuYW1lIiwgInBvcnQiXTsKICAgICAgICAgIHZhciBiYXNlZGlyLCBpLCBwMjsKICAgICAgICAgIGlmICh0aGlzLl9wYXJ0cy51cm4pIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJVUk5zIGRvIG5vdCBoYXZlIGFueSBnZW5lcmFsbHkgZGVmaW5lZCBoaWVyYXJjaGljYWwgY29tcG9uZW50cyIpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKCEoYmFzZSBpbnN0YW5jZW9mIFVSSSkpIHsKICAgICAgICAgICAgYmFzZSA9IG5ldyBVUkkoYmFzZSk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAocmVzb2x2ZWQuX3BhcnRzLnByb3RvY29sKSB7CiAgICAgICAgICAgIHJldHVybiByZXNvbHZlZDsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlc29sdmVkLl9wYXJ0cy5wcm90b2NvbCA9IGJhc2UuX3BhcnRzLnByb3RvY29sOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHRoaXMuX3BhcnRzLmhvc3RuYW1lKSB7CiAgICAgICAgICAgIHJldHVybiByZXNvbHZlZDsKICAgICAgICAgIH0KICAgICAgICAgIGZvciAoaSA9IDA7IHAyID0gcHJvcGVydGllc1tpXTsgaSsrKSB7CiAgICAgICAgICAgIHJlc29sdmVkLl9wYXJ0c1twMl0gPSBiYXNlLl9wYXJ0c1twMl07CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoIXJlc29sdmVkLl9wYXJ0cy5wYXRoKSB7CiAgICAgICAgICAgIHJlc29sdmVkLl9wYXJ0cy5wYXRoID0gYmFzZS5fcGFydHMucGF0aDsKICAgICAgICAgICAgaWYgKCFyZXNvbHZlZC5fcGFydHMucXVlcnkpIHsKICAgICAgICAgICAgICByZXNvbHZlZC5fcGFydHMucXVlcnkgPSBiYXNlLl9wYXJ0cy5xdWVyeTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYgKHJlc29sdmVkLl9wYXJ0cy5wYXRoLnN1YnN0cmluZygtMikgPT09ICIuLiIpIHsKICAgICAgICAgICAgICByZXNvbHZlZC5fcGFydHMucGF0aCArPSAiLyI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHJlc29sdmVkLnBhdGgoKS5jaGFyQXQoMCkgIT09ICIvIikgewogICAgICAgICAgICAgIGJhc2VkaXIgPSBiYXNlLmRpcmVjdG9yeSgpOwogICAgICAgICAgICAgIGJhc2VkaXIgPSBiYXNlZGlyID8gYmFzZWRpciA6IGJhc2UucGF0aCgpLmluZGV4T2YoIi8iKSA9PT0gMCA/ICIvIiA6ICIiOwogICAgICAgICAgICAgIHJlc29sdmVkLl9wYXJ0cy5wYXRoID0gKGJhc2VkaXIgPyBiYXNlZGlyICsgIi8iIDogIiIpICsgcmVzb2x2ZWQuX3BhcnRzLnBhdGg7CiAgICAgICAgICAgICAgcmVzb2x2ZWQubm9ybWFsaXplUGF0aCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICByZXNvbHZlZC5idWlsZCgpOwogICAgICAgICAgcmV0dXJuIHJlc29sdmVkOwogICAgICAgIH07CiAgICAgICAgcC5yZWxhdGl2ZVRvID0gZnVuY3Rpb24oYmFzZSkgewogICAgICAgICAgdmFyIHJlbGF0aXZlID0gdGhpcy5jbG9uZSgpLm5vcm1hbGl6ZSgpOwogICAgICAgICAgdmFyIHJlbGF0aXZlUGFydHMsIGJhc2VQYXJ0cywgY29tbW9uLCByZWxhdGl2ZVBhdGgsIGJhc2VQYXRoOwogICAgICAgICAgaWYgKHJlbGF0aXZlLl9wYXJ0cy51cm4pIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJVUk5zIGRvIG5vdCBoYXZlIGFueSBnZW5lcmFsbHkgZGVmaW5lZCBoaWVyYXJjaGljYWwgY29tcG9uZW50cyIpOwogICAgICAgICAgfQogICAgICAgICAgYmFzZSA9IG5ldyBVUkkoYmFzZSkubm9ybWFsaXplKCk7CiAgICAgICAgICByZWxhdGl2ZVBhcnRzID0gcmVsYXRpdmUuX3BhcnRzOwogICAgICAgICAgYmFzZVBhcnRzID0gYmFzZS5fcGFydHM7CiAgICAgICAgICByZWxhdGl2ZVBhdGggPSByZWxhdGl2ZS5wYXRoKCk7CiAgICAgICAgICBiYXNlUGF0aCA9IGJhc2UucGF0aCgpOwogICAgICAgICAgaWYgKHJlbGF0aXZlUGF0aC5jaGFyQXQoMCkgIT09ICIvIikgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIlVSSSBpcyBhbHJlYWR5IHJlbGF0aXZlIik7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoYmFzZVBhdGguY2hhckF0KDApICE9PSAiLyIpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJDYW5ub3QgY2FsY3VsYXRlIGEgVVJJIHJlbGF0aXZlIHRvIGFub3RoZXIgcmVsYXRpdmUgVVJJIik7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAocmVsYXRpdmVQYXJ0cy5wcm90b2NvbCA9PT0gYmFzZVBhcnRzLnByb3RvY29sKSB7CiAgICAgICAgICAgIHJlbGF0aXZlUGFydHMucHJvdG9jb2wgPSBudWxsOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHJlbGF0aXZlUGFydHMudXNlcm5hbWUgIT09IGJhc2VQYXJ0cy51c2VybmFtZSB8fCByZWxhdGl2ZVBhcnRzLnBhc3N3b3JkICE9PSBiYXNlUGFydHMucGFzc3dvcmQpIHsKICAgICAgICAgICAgcmV0dXJuIHJlbGF0aXZlLmJ1aWxkKCk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAocmVsYXRpdmVQYXJ0cy5wcm90b2NvbCAhPT0gbnVsbCB8fCByZWxhdGl2ZVBhcnRzLnVzZXJuYW1lICE9PSBudWxsIHx8IHJlbGF0aXZlUGFydHMucGFzc3dvcmQgIT09IG51bGwpIHsKICAgICAgICAgICAgcmV0dXJuIHJlbGF0aXZlLmJ1aWxkKCk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAocmVsYXRpdmVQYXJ0cy5ob3N0bmFtZSA9PT0gYmFzZVBhcnRzLmhvc3RuYW1lICYmIHJlbGF0aXZlUGFydHMucG9ydCA9PT0gYmFzZVBhcnRzLnBvcnQpIHsKICAgICAgICAgICAgcmVsYXRpdmVQYXJ0cy5ob3N0bmFtZSA9IG51bGw7CiAgICAgICAgICAgIHJlbGF0aXZlUGFydHMucG9ydCA9IG51bGw7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gcmVsYXRpdmUuYnVpbGQoKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChyZWxhdGl2ZVBhdGggPT09IGJhc2VQYXRoKSB7CiAgICAgICAgICAgIHJlbGF0aXZlUGFydHMucGF0aCA9ICIiOwogICAgICAgICAgICByZXR1cm4gcmVsYXRpdmUuYnVpbGQoKTsKICAgICAgICAgIH0KICAgICAgICAgIGNvbW1vbiA9IFVSSS5jb21tb25QYXRoKHJlbGF0aXZlUGF0aCwgYmFzZVBhdGgpOwogICAgICAgICAgaWYgKCFjb21tb24pIHsKICAgICAgICAgICAgcmV0dXJuIHJlbGF0aXZlLmJ1aWxkKCk7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgcGFyZW50cyA9IGJhc2VQYXJ0cy5wYXRoLnN1YnN0cmluZyhjb21tb24ubGVuZ3RoKS5yZXBsYWNlKC9bXlwvXSokLywgIiIpLnJlcGxhY2UoLy4qP1wvL2csICIuLi8iKTsKICAgICAgICAgIHJlbGF0aXZlUGFydHMucGF0aCA9IHBhcmVudHMgKyByZWxhdGl2ZVBhcnRzLnBhdGguc3Vic3RyaW5nKGNvbW1vbi5sZW5ndGgpIHx8ICIuLyI7CiAgICAgICAgICByZXR1cm4gcmVsYXRpdmUuYnVpbGQoKTsKICAgICAgICB9OwogICAgICAgIHAuZXF1YWxzID0gZnVuY3Rpb24odXJpKSB7CiAgICAgICAgICB2YXIgb25lID0gdGhpcy5jbG9uZSgpOwogICAgICAgICAgdmFyIHR3byA9IG5ldyBVUkkodXJpKTsKICAgICAgICAgIHZhciBvbmVfbWFwID0ge307CiAgICAgICAgICB2YXIgdHdvX21hcCA9IHt9OwogICAgICAgICAgdmFyIGNoZWNrZWQgPSB7fTsKICAgICAgICAgIHZhciBvbmVfcXVlcnksIHR3b19xdWVyeSwga2V5OwogICAgICAgICAgb25lLm5vcm1hbGl6ZSgpOwogICAgICAgICAgdHdvLm5vcm1hbGl6ZSgpOwogICAgICAgICAgaWYgKG9uZS50b1N0cmluZygpID09PSB0d28udG9TdHJpbmcoKSkgewogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgIH0KICAgICAgICAgIG9uZV9xdWVyeSA9IG9uZS5xdWVyeSgpOwogICAgICAgICAgdHdvX3F1ZXJ5ID0gdHdvLnF1ZXJ5KCk7CiAgICAgICAgICBvbmUucXVlcnkoIiIpOwogICAgICAgICAgdHdvLnF1ZXJ5KCIiKTsKICAgICAgICAgIGlmIChvbmUudG9TdHJpbmcoKSAhPT0gdHdvLnRvU3RyaW5nKCkpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgfQogICAgICAgICAgaWYgKG9uZV9xdWVyeS5sZW5ndGggIT09IHR3b19xdWVyeS5sZW5ndGgpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgfQogICAgICAgICAgb25lX21hcCA9IFVSSS5wYXJzZVF1ZXJ5KG9uZV9xdWVyeSwgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSk7CiAgICAgICAgICB0d29fbWFwID0gVVJJLnBhcnNlUXVlcnkodHdvX3F1ZXJ5LCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKTsKICAgICAgICAgIGZvciAoa2V5IGluIG9uZV9tYXApIHsKICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKG9uZV9tYXAsIGtleSkpIHsKICAgICAgICAgICAgICBpZiAoIWlzQXJyYXkob25lX21hcFtrZXldKSkgewogICAgICAgICAgICAgICAgaWYgKG9uZV9tYXBba2V5XSAhPT0gdHdvX21hcFtrZXldKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFhcnJheXNFcXVhbChvbmVfbWFwW2tleV0sIHR3b19tYXBba2V5XSkpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgY2hlY2tlZFtrZXldID0gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgZm9yIChrZXkgaW4gdHdvX21hcCkgewogICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwodHdvX21hcCwga2V5KSkgewogICAgICAgICAgICAgIGlmICghY2hlY2tlZFtrZXldKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9OwogICAgICAgIHAucHJldmVudEludmFsaWRIb3N0bmFtZSA9IGZ1bmN0aW9uKHYzKSB7CiAgICAgICAgICB0aGlzLl9wYXJ0cy5wcmV2ZW50SW52YWxpZEhvc3RuYW1lID0gISF2MzsKICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH07CiAgICAgICAgcC5kdXBsaWNhdGVRdWVyeVBhcmFtZXRlcnMgPSBmdW5jdGlvbih2MykgewogICAgICAgICAgdGhpcy5fcGFydHMuZHVwbGljYXRlUXVlcnlQYXJhbWV0ZXJzID0gISF2MzsKICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH07CiAgICAgICAgcC5lc2NhcGVRdWVyeVNwYWNlID0gZnVuY3Rpb24odjMpIHsKICAgICAgICAgIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UgPSAhIXYzOwogICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfTsKICAgICAgICByZXR1cm4gVVJJOwogICAgICB9KTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2FwcGVuZEZvcndhcmRTbGFzaC5qcwogIGZ1bmN0aW9uIGFwcGVuZEZvcndhcmRTbGFzaCh1cmwpIHsKICAgIGlmICh1cmwubGVuZ3RoID09PSAwIHx8IHVybFt1cmwubGVuZ3RoIC0gMV0gIT09ICIvIikgewogICAgICB1cmwgPSBgJHt1cmx9L2A7CiAgICB9CiAgICByZXR1cm4gdXJsOwogIH0KICB2YXIgYXBwZW5kRm9yd2FyZFNsYXNoX2RlZmF1bHQ7CiAgdmFyIGluaXRfYXBwZW5kRm9yd2FyZFNsYXNoID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9hcHBlbmRGb3J3YXJkU2xhc2guanMiKCkgewogICAgICBhcHBlbmRGb3J3YXJkU2xhc2hfZGVmYXVsdCA9IGFwcGVuZEZvcndhcmRTbGFzaDsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2Nsb25lLmpzCiAgZnVuY3Rpb24gY2xvbmUob2JqZWN0LCBkZWVwKSB7CiAgICBpZiAob2JqZWN0ID09PSBudWxsIHx8IHR5cGVvZiBvYmplY3QgIT09ICJvYmplY3QiKSB7CiAgICAgIHJldHVybiBvYmplY3Q7CiAgICB9CiAgICBkZWVwID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoZGVlcCwgZmFsc2UpOwogICAgY29uc3QgcmVzdWx0ID0gbmV3IG9iamVjdC5jb25zdHJ1Y3RvcigpOwogICAgZm9yIChjb25zdCBwcm9wZXJ0eU5hbWUgaW4gb2JqZWN0KSB7CiAgICAgIGlmIChvYmplY3QuaGFzT3duUHJvcGVydHkocHJvcGVydHlOYW1lKSkgewogICAgICAgIGxldCB2YWx1ZSA9IG9iamVjdFtwcm9wZXJ0eU5hbWVdOwogICAgICAgIGlmIChkZWVwKSB7CiAgICAgICAgICB2YWx1ZSA9IGNsb25lKHZhbHVlLCBkZWVwKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0W3Byb3BlcnR5TmFtZV0gPSB2YWx1ZTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIHJlc3VsdDsKICB9CiAgdmFyIGNsb25lX2RlZmF1bHQ7CiAgdmFyIGluaXRfY2xvbmUgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2Nsb25lLmpzIigpIHsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgY2xvbmVfZGVmYXVsdCA9IGNsb25lOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvY29tYmluZS5qcwogIGZ1bmN0aW9uIGNvbWJpbmUob2JqZWN0MSwgb2JqZWN0MiwgZGVlcCkgewogICAgZGVlcCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGRlZXAsIGZhbHNlKTsKICAgIGNvbnN0IHJlc3VsdCA9IHt9OwogICAgY29uc3Qgb2JqZWN0MURlZmluZWQgPSBkZWZpbmVkX2RlZmF1bHQob2JqZWN0MSk7CiAgICBjb25zdCBvYmplY3QyRGVmaW5lZCA9IGRlZmluZWRfZGVmYXVsdChvYmplY3QyKTsKICAgIGxldCBwcm9wZXJ0eTsKICAgIGxldCBvYmplY3QxVmFsdWU7CiAgICBsZXQgb2JqZWN0MlZhbHVlOwogICAgaWYgKG9iamVjdDFEZWZpbmVkKSB7CiAgICAgIGZvciAocHJvcGVydHkgaW4gb2JqZWN0MSkgewogICAgICAgIGlmIChvYmplY3QxLmhhc093blByb3BlcnR5KHByb3BlcnR5KSkgewogICAgICAgICAgb2JqZWN0MVZhbHVlID0gb2JqZWN0MVtwcm9wZXJ0eV07CiAgICAgICAgICBpZiAob2JqZWN0MkRlZmluZWQgJiYgZGVlcCAmJiB0eXBlb2Ygb2JqZWN0MVZhbHVlID09PSAib2JqZWN0IiAmJiBvYmplY3QyLmhhc093blByb3BlcnR5KHByb3BlcnR5KSkgewogICAgICAgICAgICBvYmplY3QyVmFsdWUgPSBvYmplY3QyW3Byb3BlcnR5XTsKICAgICAgICAgICAgaWYgKHR5cGVvZiBvYmplY3QyVmFsdWUgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgcmVzdWx0W3Byb3BlcnR5XSA9IGNvbWJpbmUob2JqZWN0MVZhbHVlLCBvYmplY3QyVmFsdWUsIGRlZXApOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHJlc3VsdFtwcm9wZXJ0eV0gPSBvYmplY3QxVmFsdWU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlc3VsdFtwcm9wZXJ0eV0gPSBvYmplY3QxVmFsdWU7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBpZiAob2JqZWN0MkRlZmluZWQpIHsKICAgICAgZm9yIChwcm9wZXJ0eSBpbiBvYmplY3QyKSB7CiAgICAgICAgaWYgKG9iamVjdDIuaGFzT3duUHJvcGVydHkocHJvcGVydHkpICYmICFyZXN1bHQuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7CiAgICAgICAgICBvYmplY3QyVmFsdWUgPSBvYmplY3QyW3Byb3BlcnR5XTsKICAgICAgICAgIHJlc3VsdFtwcm9wZXJ0eV0gPSBvYmplY3QyVmFsdWU7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICByZXR1cm4gcmVzdWx0OwogIH0KICB2YXIgY29tYmluZV9kZWZhdWx0OwogIHZhciBpbml0X2NvbWJpbmUgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2NvbWJpbmUuanMiKCkgewogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgY29tYmluZV9kZWZhdWx0ID0gY29tYmluZTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2RlZmVyLmpzCiAgZnVuY3Rpb24gZGVmZXIoKSB7CiAgICBsZXQgcmVzb2x2ZTsKICAgIGxldCByZWplY3Q7CiAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzLCByZWopIHsKICAgICAgcmVzb2x2ZSA9IHJlczsKICAgICAgcmVqZWN0ID0gcmVqOwogICAgfSk7CiAgICByZXR1cm4gewogICAgICByZXNvbHZlLAogICAgICByZWplY3QsCiAgICAgIHByb21pc2UKICAgIH07CiAgfQogIHZhciBkZWZlcl9kZWZhdWx0OwogIHZhciBpbml0X2RlZmVyID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9kZWZlci5qcyIoKSB7CiAgICAgIGRlZmVyX2RlZmF1bHQgPSBkZWZlcjsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2dldEFic29sdXRlVXJpLmpzCiAgZnVuY3Rpb24gZ2V0QWJzb2x1dGVVcmkocmVsYXRpdmUsIGJhc2UpIHsKICAgIGxldCBkb2N1bWVudE9iamVjdDsKICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICJ1bmRlZmluZWQiKSB7CiAgICAgIGRvY3VtZW50T2JqZWN0ID0gZG9jdW1lbnQ7CiAgICB9CiAgICByZXR1cm4gZ2V0QWJzb2x1dGVVcmkuX2ltcGxlbWVudGF0aW9uKHJlbGF0aXZlLCBiYXNlLCBkb2N1bWVudE9iamVjdCk7CiAgfQogIHZhciBpbXBvcnRfdXJpanMsIGdldEFic29sdXRlVXJpX2RlZmF1bHQ7CiAgdmFyIGluaXRfZ2V0QWJzb2x1dGVVcmkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2dldEFic29sdXRlVXJpLmpzIigpIHsKICAgICAgaW1wb3J0X3VyaWpzID0gX190b0VTTShyZXF1aXJlX1VSSSgpLCAxKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgZ2V0QWJzb2x1dGVVcmkuX2ltcGxlbWVudGF0aW9uID0gZnVuY3Rpb24ocmVsYXRpdmUsIGJhc2UsIGRvY3VtZW50T2JqZWN0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVsYXRpdmUpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgicmVsYXRpdmUgdXJpIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChiYXNlKSkgewogICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudE9iamVjdCA9PT0gInVuZGVmaW5lZCIpIHsKICAgICAgICAgICAgcmV0dXJuIHJlbGF0aXZlOwogICAgICAgICAgfQogICAgICAgICAgYmFzZSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGRvY3VtZW50T2JqZWN0LmJhc2VVUkksIGRvY3VtZW50T2JqZWN0LmxvY2F0aW9uLmhyZWYpOwogICAgICAgIH0KICAgICAgICBjb25zdCByZWxhdGl2ZVVyaSA9IG5ldyBpbXBvcnRfdXJpanMuZGVmYXVsdChyZWxhdGl2ZSk7CiAgICAgICAgaWYgKHJlbGF0aXZlVXJpLnNjaGVtZSgpICE9PSAiIikgewogICAgICAgICAgcmV0dXJuIHJlbGF0aXZlVXJpLnRvU3RyaW5nKCk7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZWxhdGl2ZVVyaS5hYnNvbHV0ZVRvKGJhc2UpLnRvU3RyaW5nKCk7CiAgICAgIH07CiAgICAgIGdldEFic29sdXRlVXJpX2RlZmF1bHQgPSBnZXRBYnNvbHV0ZVVyaTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2dldEJhc2VVcmkuanMKICBmdW5jdGlvbiBnZXRCYXNlVXJpKHVyaSwgaW5jbHVkZVF1ZXJ5KSB7CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdCh1cmkpKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJ1cmkgaXMgcmVxdWlyZWQuIik7CiAgICB9CiAgICBsZXQgYmFzZVBhdGggPSAiIjsKICAgIGNvbnN0IGkgPSB1cmkubGFzdEluZGV4T2YoIi8iKTsKICAgIGlmIChpICE9PSAtMSkgewogICAgICBiYXNlUGF0aCA9IHVyaS5zdWJzdHJpbmcoMCwgaSArIDEpOwogICAgfQogICAgaWYgKCFpbmNsdWRlUXVlcnkpIHsKICAgICAgcmV0dXJuIGJhc2VQYXRoOwogICAgfQogICAgdXJpID0gbmV3IGltcG9ydF91cmlqczIuZGVmYXVsdCh1cmkpOwogICAgaWYgKHVyaS5xdWVyeSgpLmxlbmd0aCAhPT0gMCkgewogICAgICBiYXNlUGF0aCArPSBgPyR7dXJpLnF1ZXJ5KCl9YDsKICAgIH0KICAgIGlmICh1cmkuZnJhZ21lbnQoKS5sZW5ndGggIT09IDApIHsKICAgICAgYmFzZVBhdGggKz0gYCMke3VyaS5mcmFnbWVudCgpfWA7CiAgICB9CiAgICByZXR1cm4gYmFzZVBhdGg7CiAgfQogIHZhciBpbXBvcnRfdXJpanMyLCBnZXRCYXNlVXJpX2RlZmF1bHQ7CiAgdmFyIGluaXRfZ2V0QmFzZVVyaSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvZ2V0QmFzZVVyaS5qcyIoKSB7CiAgICAgIGltcG9ydF91cmlqczIgPSBfX3RvRVNNKHJlcXVpcmVfVVJJKCksIDEpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBnZXRCYXNlVXJpX2RlZmF1bHQgPSBnZXRCYXNlVXJpOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvZ2V0RXh0ZW5zaW9uRnJvbVVyaS5qcwogIGZ1bmN0aW9uIGdldEV4dGVuc2lvbkZyb21VcmkodXJpKSB7CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdCh1cmkpKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJ1cmkgaXMgcmVxdWlyZWQuIik7CiAgICB9CiAgICBjb25zdCB1cmlPYmplY3QgPSBuZXcgaW1wb3J0X3VyaWpzMy5kZWZhdWx0KHVyaSk7CiAgICB1cmlPYmplY3Qubm9ybWFsaXplKCk7CiAgICBsZXQgcGF0aCA9IHVyaU9iamVjdC5wYXRoKCk7CiAgICBsZXQgaW5kZXggPSBwYXRoLmxhc3RJbmRleE9mKCIvIik7CiAgICBpZiAoaW5kZXggIT09IC0xKSB7CiAgICAgIHBhdGggPSBwYXRoLnN1YnN0cihpbmRleCArIDEpOwogICAgfQogICAgaW5kZXggPSBwYXRoLmxhc3RJbmRleE9mKCIuIik7CiAgICBpZiAoaW5kZXggPT09IC0xKSB7CiAgICAgIHBhdGggPSAiIjsKICAgIH0gZWxzZSB7CiAgICAgIHBhdGggPSBwYXRoLnN1YnN0cihpbmRleCArIDEpOwogICAgfQogICAgcmV0dXJuIHBhdGg7CiAgfQogIHZhciBpbXBvcnRfdXJpanMzLCBnZXRFeHRlbnNpb25Gcm9tVXJpX2RlZmF1bHQ7CiAgdmFyIGluaXRfZ2V0RXh0ZW5zaW9uRnJvbVVyaSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvZ2V0RXh0ZW5zaW9uRnJvbVVyaS5qcyIoKSB7CiAgICAgIGltcG9ydF91cmlqczMgPSBfX3RvRVNNKHJlcXVpcmVfVVJJKCksIDEpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBnZXRFeHRlbnNpb25Gcm9tVXJpX2RlZmF1bHQgPSBnZXRFeHRlbnNpb25Gcm9tVXJpOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvZ2V0SW1hZ2VQaXhlbHMuanMKICBmdW5jdGlvbiBnZXRJbWFnZVBpeGVscyhpbWFnZSwgd2lkdGgsIGhlaWdodCkgewogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQod2lkdGgpKSB7CiAgICAgIHdpZHRoID0gaW1hZ2Uud2lkdGg7CiAgICB9CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChoZWlnaHQpKSB7CiAgICAgIGhlaWdodCA9IGltYWdlLmhlaWdodDsKICAgIH0KICAgIGxldCBjb250ZXh0MkRzQnlIZWlnaHQgPSBjb250ZXh0MkRzQnlXaWR0aEFuZEhlaWdodFt3aWR0aF07CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChjb250ZXh0MkRzQnlIZWlnaHQpKSB7CiAgICAgIGNvbnRleHQyRHNCeUhlaWdodCA9IHt9OwogICAgICBjb250ZXh0MkRzQnlXaWR0aEFuZEhlaWdodFt3aWR0aF0gPSBjb250ZXh0MkRzQnlIZWlnaHQ7CiAgICB9CiAgICBsZXQgY29udGV4dDJkID0gY29udGV4dDJEc0J5SGVpZ2h0W2hlaWdodF07CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChjb250ZXh0MmQpKSB7CiAgICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImNhbnZhcyIpOwogICAgICBjYW52YXMud2lkdGggPSB3aWR0aDsKICAgICAgY2FudmFzLmhlaWdodCA9IGhlaWdodDsKICAgICAgY29udGV4dDJkID0gY2FudmFzLmdldENvbnRleHQoIjJkIiwgeyB3aWxsUmVhZEZyZXF1ZW50bHk6IHRydWUgfSk7CiAgICAgIGNvbnRleHQyZC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSAiY29weSI7CiAgICAgIGNvbnRleHQyRHNCeUhlaWdodFtoZWlnaHRdID0gY29udGV4dDJkOwogICAgfQogICAgY29udGV4dDJkLmRyYXdJbWFnZShpbWFnZSwgMCwgMCwgd2lkdGgsIGhlaWdodCk7CiAgICByZXR1cm4gY29udGV4dDJkLmdldEltYWdlRGF0YSgwLCAwLCB3aWR0aCwgaGVpZ2h0KS5kYXRhOwogIH0KICB2YXIgY29udGV4dDJEc0J5V2lkdGhBbmRIZWlnaHQsIGdldEltYWdlUGl4ZWxzX2RlZmF1bHQ7CiAgdmFyIGluaXRfZ2V0SW1hZ2VQaXhlbHMgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2dldEltYWdlUGl4ZWxzLmpzIigpIHsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGNvbnRleHQyRHNCeVdpZHRoQW5kSGVpZ2h0ID0ge307CiAgICAgIGdldEltYWdlUGl4ZWxzX2RlZmF1bHQgPSBnZXRJbWFnZVBpeGVsczsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2lzQmxvYlVyaS5qcwogIGZ1bmN0aW9uIGlzQmxvYlVyaSh1cmkpIHsKICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLnN0cmluZygidXJpIiwgdXJpKTsKICAgIHJldHVybiBibG9iVXJpUmVnZXgudGVzdCh1cmkpOwogIH0KICB2YXIgYmxvYlVyaVJlZ2V4LCBpc0Jsb2JVcmlfZGVmYXVsdDsKICB2YXIgaW5pdF9pc0Jsb2JVcmkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2lzQmxvYlVyaS5qcyIoKSB7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgYmxvYlVyaVJlZ2V4ID0gL15ibG9iOi9pOwogICAgICBpc0Jsb2JVcmlfZGVmYXVsdCA9IGlzQmxvYlVyaTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2lzQ3Jvc3NPcmlnaW5VcmwuanMKICBmdW5jdGlvbiBpc0Nyb3NzT3JpZ2luVXJsKHVybCkgewogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoYSkpIHsKICAgICAgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImEiKTsKICAgIH0KICAgIGEuaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmOwogICAgY29uc3QgaG9zdCA9IGEuaG9zdDsKICAgIGNvbnN0IHByb3RvY29sID0gYS5wcm90b2NvbDsKICAgIGEuaHJlZiA9IHVybDsKICAgIGEuaHJlZiA9IGEuaHJlZjsKICAgIHJldHVybiBwcm90b2NvbCAhPT0gYS5wcm90b2NvbCB8fCBob3N0ICE9PSBhLmhvc3Q7CiAgfQogIHZhciBhLCBpc0Nyb3NzT3JpZ2luVXJsX2RlZmF1bHQ7CiAgdmFyIGluaXRfaXNDcm9zc09yaWdpblVybCA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvaXNDcm9zc09yaWdpblVybC5qcyIoKSB7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpc0Nyb3NzT3JpZ2luVXJsX2RlZmF1bHQgPSBpc0Nyb3NzT3JpZ2luVXJsOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvaXNEYXRhVXJpLmpzCiAgZnVuY3Rpb24gaXNEYXRhVXJpKHVyaSkgewogICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yuc3RyaW5nKCJ1cmkiLCB1cmkpOwogICAgcmV0dXJuIGRhdGFVcmlSZWdleC50ZXN0KHVyaSk7CiAgfQogIHZhciBkYXRhVXJpUmVnZXgsIGlzRGF0YVVyaV9kZWZhdWx0OwogIHZhciBpbml0X2lzRGF0YVVyaSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvaXNEYXRhVXJpLmpzIigpIHsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBkYXRhVXJpUmVnZXggPSAvXmRhdGE6L2k7CiAgICAgIGlzRGF0YVVyaV9kZWZhdWx0ID0gaXNEYXRhVXJpOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvbG9hZEFuZEV4ZWN1dGVTY3JpcHQuanMKICBmdW5jdGlvbiBsb2FkQW5kRXhlY3V0ZVNjcmlwdCh1cmwpIHsKICAgIGNvbnN0IHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNjcmlwdCIpOwogICAgc2NyaXB0LmFzeW5jID0gdHJ1ZTsKICAgIHNjcmlwdC5zcmMgPSB1cmw7CiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gewogICAgICBpZiAod2luZG93LmNyb3NzT3JpZ2luSXNvbGF0ZWQpIHsKICAgICAgICBzY3JpcHQuc2V0QXR0cmlidXRlKCJjcm9zc29yaWdpbiIsICJhbm9ueW1vdXMiKTsKICAgICAgfQogICAgICBjb25zdCBoZWFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImhlYWQiKVswXTsKICAgICAgc2NyaXB0Lm9ubG9hZCA9IGZ1bmN0aW9uKCkgewogICAgICAgIHNjcmlwdC5vbmxvYWQgPSB2b2lkIDA7CiAgICAgICAgaGVhZC5yZW1vdmVDaGlsZChzY3JpcHQpOwogICAgICAgIHJlc29sdmUoKTsKICAgICAgfTsKICAgICAgc2NyaXB0Lm9uZXJyb3IgPSBmdW5jdGlvbihlKSB7CiAgICAgICAgcmVqZWN0KGUpOwogICAgICB9OwogICAgICBoZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7CiAgICB9KTsKICB9CiAgdmFyIGxvYWRBbmRFeGVjdXRlU2NyaXB0X2RlZmF1bHQ7CiAgdmFyIGluaXRfbG9hZEFuZEV4ZWN1dGVTY3JpcHQgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2xvYWRBbmRFeGVjdXRlU2NyaXB0LmpzIigpIHsKICAgICAgbG9hZEFuZEV4ZWN1dGVTY3JpcHRfZGVmYXVsdCA9IGxvYWRBbmRFeGVjdXRlU2NyaXB0OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvb2JqZWN0VG9RdWVyeS5qcwogIGZ1bmN0aW9uIG9iamVjdFRvUXVlcnkob2JqKSB7CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChvYmopKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJvYmogaXMgcmVxdWlyZWQuIik7CiAgICB9CiAgICBsZXQgcmVzdWx0ID0gIiI7CiAgICBmb3IgKGNvbnN0IHByb3BOYW1lIGluIG9iaikgewogICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkgewogICAgICAgIGNvbnN0IHZhbHVlID0gb2JqW3Byb3BOYW1lXTsKICAgICAgICBjb25zdCBwYXJ0ID0gYCR7ZW5jb2RlVVJJQ29tcG9uZW50KHByb3BOYW1lKX09YDsKICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHsKICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB2YWx1ZS5sZW5ndGg7IGkgPCBsZW47ICsraSkgewogICAgICAgICAgICByZXN1bHQgKz0gYCR7cGFydCArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZVtpXSl9JmA7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlc3VsdCArPSBgJHtwYXJ0ICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKX0mYDsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgwLCAtMSk7CiAgICByZXR1cm4gcmVzdWx0OwogIH0KICB2YXIgb2JqZWN0VG9RdWVyeV9kZWZhdWx0OwogIHZhciBpbml0X29iamVjdFRvUXVlcnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL29iamVjdFRvUXVlcnkuanMiKCkgewogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBvYmplY3RUb1F1ZXJ5X2RlZmF1bHQgPSBvYmplY3RUb1F1ZXJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvcXVlcnlUb09iamVjdC5qcwogIGZ1bmN0aW9uIHF1ZXJ5VG9PYmplY3QocXVlcnlTdHJpbmcpIHsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHF1ZXJ5U3RyaW5nKSkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgicXVlcnlTdHJpbmcgaXMgcmVxdWlyZWQuIik7CiAgICB9CiAgICBjb25zdCByZXN1bHQgPSB7fTsKICAgIGlmIChxdWVyeVN0cmluZyA9PT0gIiIpIHsKICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KICAgIGNvbnN0IHBhcnRzID0gcXVlcnlTdHJpbmcucmVwbGFjZSgvXCsvZywgIiUyMCIpLnNwbGl0KC9bJjtdLyk7CiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gcGFydHMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHsKICAgICAgY29uc3Qgc3VicGFydHMgPSBwYXJ0c1tpXS5zcGxpdCgiPSIpOwogICAgICBjb25zdCBuYW1lID0gZGVjb2RlVVJJQ29tcG9uZW50KHN1YnBhcnRzWzBdKTsKICAgICAgbGV0IHZhbHVlID0gc3VicGFydHNbMV07CiAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQodmFsdWUpKSB7CiAgICAgICAgdmFsdWUgPSBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpOwogICAgICB9IGVsc2UgewogICAgICAgIHZhbHVlID0gIiI7CiAgICAgIH0KICAgICAgY29uc3QgcmVzdWx0VmFsdWUgPSByZXN1bHRbbmFtZV07CiAgICAgIGlmICh0eXBlb2YgcmVzdWx0VmFsdWUgPT09ICJzdHJpbmciKSB7CiAgICAgICAgcmVzdWx0W25hbWVdID0gW3Jlc3VsdFZhbHVlLCB2YWx1ZV07CiAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyZXN1bHRWYWx1ZSkpIHsKICAgICAgICByZXN1bHRWYWx1ZS5wdXNoKHZhbHVlKTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXN1bHRbbmFtZV0gPSB2YWx1ZTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIHJlc3VsdDsKICB9CiAgdmFyIHF1ZXJ5VG9PYmplY3RfZGVmYXVsdDsKICB2YXIgaW5pdF9xdWVyeVRvT2JqZWN0ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9xdWVyeVRvT2JqZWN0LmpzIigpIHsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgcXVlcnlUb09iamVjdF9kZWZhdWx0ID0gcXVlcnlUb09iamVjdDsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1JlcXVlc3RTdGF0ZS5qcwogIHZhciBSZXF1ZXN0U3RhdGUsIFJlcXVlc3RTdGF0ZV9kZWZhdWx0OwogIHZhciBpbml0X1JlcXVlc3RTdGF0ZSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUmVxdWVzdFN0YXRlLmpzIigpIHsKICAgICAgUmVxdWVzdFN0YXRlID0gewogICAgICAgIC8qKgogICAgICAgICAqIEluaXRpYWwgdW5pc3N1ZWQgc3RhdGUuCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIFVOSVNTVUVEOiAwLAogICAgICAgIC8qKgogICAgICAgICAqIElzc3VlZCBidXQgbm90IHlldCBhY3RpdmUuIFdpbGwgYmVjb21lIGFjdGl2ZSB3aGVuIG9wZW4gc2xvdHMgYXJlIGF2YWlsYWJsZS4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgSVNTVUVEOiAxLAogICAgICAgIC8qKgogICAgICAgICAqIEFjdHVhbCBodHRwIHJlcXVlc3QgaGFzIGJlZW4gc2VudC4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgQUNUSVZFOiAyLAogICAgICAgIC8qKgogICAgICAgICAqIFJlcXVlc3QgY29tcGxldGVkIHN1Y2Nlc3NmdWxseS4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgUkVDRUlWRUQ6IDMsCiAgICAgICAgLyoqCiAgICAgICAgICogUmVxdWVzdCB3YXMgY2FuY2VsbGVkLCBlaXRoZXIgZXhwbGljaXRseSBvciBhdXRvbWF0aWNhbGx5IGJlY2F1c2Ugb2YgbG93IHByaW9yaXR5LgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBDQU5DRUxMRUQ6IDQsCiAgICAgICAgLyoqCiAgICAgICAgICogUmVxdWVzdCBmYWlsZWQuCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIEZBSUxFRDogNQogICAgICB9OwogICAgICBSZXF1ZXN0U3RhdGVfZGVmYXVsdCA9IE9iamVjdC5mcmVlemUoUmVxdWVzdFN0YXRlKTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1JlcXVlc3RUeXBlLmpzCiAgdmFyIFJlcXVlc3RUeXBlLCBSZXF1ZXN0VHlwZV9kZWZhdWx0OwogIHZhciBpbml0X1JlcXVlc3RUeXBlID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9SZXF1ZXN0VHlwZS5qcyIoKSB7CiAgICAgIFJlcXVlc3RUeXBlID0gewogICAgICAgIC8qKgogICAgICAgICAqIFRlcnJhaW4gcmVxdWVzdC4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgVEVSUkFJTjogMCwKICAgICAgICAvKioKICAgICAgICAgKiBJbWFnZXJ5IHJlcXVlc3QuCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIElNQUdFUlk6IDEsCiAgICAgICAgLyoqCiAgICAgICAgICogM0QgVGlsZXMgcmVxdWVzdC4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgVElMRVMzRDogMiwKICAgICAgICAvKioKICAgICAgICAgKiBPdGhlciByZXF1ZXN0LgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBPVEhFUjogMwogICAgICB9OwogICAgICBSZXF1ZXN0VHlwZV9kZWZhdWx0ID0gT2JqZWN0LmZyZWV6ZShSZXF1ZXN0VHlwZSk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9SZXF1ZXN0LmpzCiAgZnVuY3Rpb24gUmVxdWVzdChvcHRpb25zKSB7CiAgICBvcHRpb25zID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucywgZGVmYXVsdFZhbHVlX2RlZmF1bHQuRU1QVFlfT0JKRUNUKTsKICAgIGNvbnN0IHRocm90dGxlQnlTZXJ2ZXIgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLnRocm90dGxlQnlTZXJ2ZXIsIGZhbHNlKTsKICAgIGNvbnN0IHRocm90dGxlID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy50aHJvdHRsZSwgZmFsc2UpOwogICAgdGhpcy51cmwgPSBvcHRpb25zLnVybDsKICAgIHRoaXMucmVxdWVzdEZ1bmN0aW9uID0gb3B0aW9ucy5yZXF1ZXN0RnVuY3Rpb247CiAgICB0aGlzLmNhbmNlbEZ1bmN0aW9uID0gb3B0aW9ucy5jYW5jZWxGdW5jdGlvbjsKICAgIHRoaXMucHJpb3JpdHlGdW5jdGlvbiA9IG9wdGlvbnMucHJpb3JpdHlGdW5jdGlvbjsKICAgIHRoaXMucHJpb3JpdHkgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLnByaW9yaXR5LCAwKTsKICAgIHRoaXMudGhyb3R0bGUgPSB0aHJvdHRsZTsKICAgIHRoaXMudGhyb3R0bGVCeVNlcnZlciA9IHRocm90dGxlQnlTZXJ2ZXI7CiAgICB0aGlzLnR5cGUgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLnR5cGUsIFJlcXVlc3RUeXBlX2RlZmF1bHQuT1RIRVIpOwogICAgdGhpcy5zZXJ2ZXJLZXkgPSBvcHRpb25zLnNlcnZlcktleTsKICAgIHRoaXMuc3RhdGUgPSBSZXF1ZXN0U3RhdGVfZGVmYXVsdC5VTklTU1VFRDsKICAgIHRoaXMuZGVmZXJyZWQgPSB2b2lkIDA7CiAgICB0aGlzLmNhbmNlbGxlZCA9IGZhbHNlOwogIH0KICB2YXIgUmVxdWVzdF9kZWZhdWx0OwogIHZhciBpbml0X1JlcXVlc3QgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1JlcXVlc3QuanMiKCkgewogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9SZXF1ZXN0U3RhdGUoKTsKICAgICAgaW5pdF9SZXF1ZXN0VHlwZSgpOwogICAgICBSZXF1ZXN0LnByb3RvdHlwZS5jYW5jZWwgPSBmdW5jdGlvbigpIHsKICAgICAgICB0aGlzLmNhbmNlbGxlZCA9IHRydWU7CiAgICAgIH07CiAgICAgIFJlcXVlc3QucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24ocmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBSZXF1ZXN0KHRoaXMpOwogICAgICAgIH0KICAgICAgICByZXN1bHQudXJsID0gdGhpcy51cmw7CiAgICAgICAgcmVzdWx0LnJlcXVlc3RGdW5jdGlvbiA9IHRoaXMucmVxdWVzdEZ1bmN0aW9uOwogICAgICAgIHJlc3VsdC5jYW5jZWxGdW5jdGlvbiA9IHRoaXMuY2FuY2VsRnVuY3Rpb247CiAgICAgICAgcmVzdWx0LnByaW9yaXR5RnVuY3Rpb24gPSB0aGlzLnByaW9yaXR5RnVuY3Rpb247CiAgICAgICAgcmVzdWx0LnByaW9yaXR5ID0gdGhpcy5wcmlvcml0eTsKICAgICAgICByZXN1bHQudGhyb3R0bGUgPSB0aGlzLnRocm90dGxlOwogICAgICAgIHJlc3VsdC50aHJvdHRsZUJ5U2VydmVyID0gdGhpcy50aHJvdHRsZUJ5U2VydmVyOwogICAgICAgIHJlc3VsdC50eXBlID0gdGhpcy50eXBlOwogICAgICAgIHJlc3VsdC5zZXJ2ZXJLZXkgPSB0aGlzLnNlcnZlcktleTsKICAgICAgICByZXN1bHQuc3RhdGUgPSBSZXF1ZXN0U3RhdGVfZGVmYXVsdC5VTklTU1VFRDsKICAgICAgICByZXN1bHQuZGVmZXJyZWQgPSB2b2lkIDA7CiAgICAgICAgcmVzdWx0LmNhbmNlbGxlZCA9IGZhbHNlOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFJlcXVlc3RfZGVmYXVsdCA9IFJlcXVlc3Q7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9wYXJzZVJlc3BvbnNlSGVhZGVycy5qcwogIGZ1bmN0aW9uIHBhcnNlUmVzcG9uc2VIZWFkZXJzKGhlYWRlclN0cmluZykgewogICAgY29uc3QgaGVhZGVycyA9IHt9OwogICAgaWYgKCFoZWFkZXJTdHJpbmcpIHsKICAgICAgcmV0dXJuIGhlYWRlcnM7CiAgICB9CiAgICBjb25zdCBoZWFkZXJQYWlycyA9IGhlYWRlclN0cmluZy5zcGxpdCgiXHJcbiIpOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBoZWFkZXJQYWlycy5sZW5ndGg7ICsraSkgewogICAgICBjb25zdCBoZWFkZXJQYWlyID0gaGVhZGVyUGFpcnNbaV07CiAgICAgIGNvbnN0IGluZGV4ID0gaGVhZGVyUGFpci5pbmRleE9mKCI6ICIpOwogICAgICBpZiAoaW5kZXggPiAwKSB7CiAgICAgICAgY29uc3Qga2V5ID0gaGVhZGVyUGFpci5zdWJzdHJpbmcoMCwgaW5kZXgpOwogICAgICAgIGNvbnN0IHZhbCA9IGhlYWRlclBhaXIuc3Vic3RyaW5nKGluZGV4ICsgMik7CiAgICAgICAgaGVhZGVyc1trZXldID0gdmFsOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gaGVhZGVyczsKICB9CiAgdmFyIHBhcnNlUmVzcG9uc2VIZWFkZXJzX2RlZmF1bHQ7CiAgdmFyIGluaXRfcGFyc2VSZXNwb25zZUhlYWRlcnMgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL3BhcnNlUmVzcG9uc2VIZWFkZXJzLmpzIigpIHsKICAgICAgcGFyc2VSZXNwb25zZUhlYWRlcnNfZGVmYXVsdCA9IHBhcnNlUmVzcG9uc2VIZWFkZXJzOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUmVxdWVzdEVycm9yRXZlbnQuanMKICBmdW5jdGlvbiBSZXF1ZXN0RXJyb3JFdmVudChzdGF0dXNDb2RlLCByZXNwb25zZSwgcmVzcG9uc2VIZWFkZXJzKSB7CiAgICB0aGlzLnN0YXR1c0NvZGUgPSBzdGF0dXNDb2RlOwogICAgdGhpcy5yZXNwb25zZSA9IHJlc3BvbnNlOwogICAgdGhpcy5yZXNwb25zZUhlYWRlcnMgPSByZXNwb25zZUhlYWRlcnM7CiAgICBpZiAodHlwZW9mIHRoaXMucmVzcG9uc2VIZWFkZXJzID09PSAic3RyaW5nIikgewogICAgICB0aGlzLnJlc3BvbnNlSGVhZGVycyA9IHBhcnNlUmVzcG9uc2VIZWFkZXJzX2RlZmF1bHQodGhpcy5yZXNwb25zZUhlYWRlcnMpOwogICAgfQogIH0KICB2YXIgUmVxdWVzdEVycm9yRXZlbnRfZGVmYXVsdDsKICB2YXIgaW5pdF9SZXF1ZXN0RXJyb3JFdmVudCA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUmVxdWVzdEVycm9yRXZlbnQuanMiKCkgewogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9wYXJzZVJlc3BvbnNlSGVhZGVycygpOwogICAgICBSZXF1ZXN0RXJyb3JFdmVudC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsKICAgICAgICBsZXQgc3RyID0gIlJlcXVlc3QgaGFzIGZhaWxlZC4iOwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQodGhpcy5zdGF0dXNDb2RlKSkgewogICAgICAgICAgc3RyICs9IGAgU3RhdHVzIENvZGU6ICR7dGhpcy5zdGF0dXNDb2RlfWA7CiAgICAgICAgfQogICAgICAgIHJldHVybiBzdHI7CiAgICAgIH07CiAgICAgIFJlcXVlc3RFcnJvckV2ZW50X2RlZmF1bHQgPSBSZXF1ZXN0RXJyb3JFdmVudDsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0V2ZW50LmpzCiAgZnVuY3Rpb24gRXZlbnQoKSB7CiAgICB0aGlzLl9saXN0ZW5lcnMgPSBbXTsKICAgIHRoaXMuX3Njb3BlcyA9IFtdOwogICAgdGhpcy5fdG9SZW1vdmUgPSBbXTsKICAgIHRoaXMuX2luc2lkZVJhaXNlRXZlbnQgPSBmYWxzZTsKICB9CiAgZnVuY3Rpb24gY29tcGFyZU51bWJlcihhMywgYikgewogICAgcmV0dXJuIGIgLSBhMzsKICB9CiAgdmFyIEV2ZW50X2RlZmF1bHQ7CiAgdmFyIGluaXRfRXZlbnQgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0V2ZW50LmpzIigpIHsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoRXZlbnQucHJvdG90eXBlLCB7CiAgICAgICAgLyoqCiAgICAgICAgICogVGhlIG51bWJlciBvZiBsaXN0ZW5lcnMgY3VycmVudGx5IHN1YnNjcmliZWQgdG8gdGhlIGV2ZW50LgogICAgICAgICAqIEBtZW1iZXJvZiBFdmVudC5wcm90b3R5cGUKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqLwogICAgICAgIG51bWJlck9mTGlzdGVuZXJzOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5fbGlzdGVuZXJzLmxlbmd0aCAtIHRoaXMuX3RvUmVtb3ZlLmxlbmd0aDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgICBFdmVudC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGxpc3RlbmVyLCBzY29wZSkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLmZ1bmMoImxpc3RlbmVyIiwgbGlzdGVuZXIpOwogICAgICAgIHRoaXMuX2xpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTsKICAgICAgICB0aGlzLl9zY29wZXMucHVzaChzY29wZSk7CiAgICAgICAgY29uc3QgZXZlbnQgPSB0aGlzOwogICAgICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgICAgIGV2ZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIobGlzdGVuZXIsIHNjb3BlKTsKICAgICAgICB9OwogICAgICB9OwogICAgICBFdmVudC5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGxpc3RlbmVyLCBzY29wZSkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLmZ1bmMoImxpc3RlbmVyIiwgbGlzdGVuZXIpOwogICAgICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVyczsKICAgICAgICBjb25zdCBzY29wZXMgPSB0aGlzLl9zY29wZXM7CiAgICAgICAgbGV0IGluZGV4ID0gLTE7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIGlmIChsaXN0ZW5lcnNbaV0gPT09IGxpc3RlbmVyICYmIHNjb3Blc1tpXSA9PT0gc2NvcGUpIHsKICAgICAgICAgICAgaW5kZXggPSBpOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkgewogICAgICAgICAgaWYgKHRoaXMuX2luc2lkZVJhaXNlRXZlbnQpIHsKICAgICAgICAgICAgdGhpcy5fdG9SZW1vdmUucHVzaChpbmRleCk7CiAgICAgICAgICAgIGxpc3RlbmVyc1tpbmRleF0gPSB2b2lkIDA7CiAgICAgICAgICAgIHNjb3Blc1tpbmRleF0gPSB2b2lkIDA7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBsaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTsKICAgICAgICAgICAgc2NvcGVzLnNwbGljZShpbmRleCwgMSk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9OwogICAgICBFdmVudC5wcm90b3R5cGUucmFpc2VFdmVudCA9IGZ1bmN0aW9uKCkgewogICAgICAgIHRoaXMuX2luc2lkZVJhaXNlRXZlbnQgPSB0cnVlOwogICAgICAgIGxldCBpOwogICAgICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVyczsKICAgICAgICBjb25zdCBzY29wZXMgPSB0aGlzLl9zY29wZXM7CiAgICAgICAgbGV0IGxlbmd0aCA9IGxpc3RlbmVycy5sZW5ndGg7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgICBjb25zdCBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTsKICAgICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQobGlzdGVuZXIpKSB7CiAgICAgICAgICAgIGxpc3RlbmVyc1tpXS5hcHBseShzY29wZXNbaV0sIGFyZ3VtZW50cyk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNvbnN0IHRvUmVtb3ZlID0gdGhpcy5fdG9SZW1vdmU7CiAgICAgICAgbGVuZ3RoID0gdG9SZW1vdmUubGVuZ3RoOwogICAgICAgIGlmIChsZW5ndGggPiAwKSB7CiAgICAgICAgICB0b1JlbW92ZS5zb3J0KGNvbXBhcmVOdW1iZXIpOwogICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdG9SZW1vdmVbaV07CiAgICAgICAgICAgIGxpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpOwogICAgICAgICAgICBzY29wZXMuc3BsaWNlKGluZGV4LCAxKTsKICAgICAgICAgIH0KICAgICAgICAgIHRvUmVtb3ZlLmxlbmd0aCA9IDA7CiAgICAgICAgfQogICAgICAgIHRoaXMuX2luc2lkZVJhaXNlRXZlbnQgPSBmYWxzZTsKICAgICAgfTsKICAgICAgRXZlbnRfZGVmYXVsdCA9IEV2ZW50OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvSGVhcC5qcwogIGZ1bmN0aW9uIEhlYXAob3B0aW9ucykgewogICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJvcHRpb25zIiwgb3B0aW9ucyk7CiAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoIm9wdGlvbnMuY29tcGFyYXRvciIsIG9wdGlvbnMuY29tcGFyYXRvcik7CiAgICB0aGlzLl9jb21wYXJhdG9yID0gb3B0aW9ucy5jb21wYXJhdG9yOwogICAgdGhpcy5fYXJyYXkgPSBbXTsKICAgIHRoaXMuX2xlbmd0aCA9IDA7CiAgICB0aGlzLl9tYXhpbXVtTGVuZ3RoID0gdm9pZCAwOwogIH0KICBmdW5jdGlvbiBzd2FwKGFycmF5LCBhMywgYikgewogICAgY29uc3QgdGVtcCA9IGFycmF5W2EzXTsKICAgIGFycmF5W2EzXSA9IGFycmF5W2JdOwogICAgYXJyYXlbYl0gPSB0ZW1wOwogIH0KICB2YXIgSGVhcF9kZWZhdWx0OwogIHZhciBpbml0X0hlYXAgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0hlYXAuanMiKCkgewogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhIZWFwLnByb3RvdHlwZSwgewogICAgICAgIC8qKgogICAgICAgICAqIEdldHMgdGhlIGxlbmd0aCBvZiB0aGUgaGVhcC4KICAgICAgICAgKgogICAgICAgICAqIEBtZW1iZXJvZiBIZWFwLnByb3RvdHlwZQogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAcmVhZG9ubHkKICAgICAgICAgKi8KICAgICAgICBsZW5ndGg6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9sZW5ndGg7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIHRoZSBpbnRlcm5hbCBhcnJheS4KICAgICAgICAgKgogICAgICAgICAqIEBtZW1iZXJvZiBIZWFwLnByb3RvdHlwZQogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge0FycmF5fQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqLwogICAgICAgIGludGVybmFsQXJyYXk6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9hcnJheTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIEdldHMgYW5kIHNldHMgdGhlIG1heGltdW0gbGVuZ3RoIG9mIHRoZSBoZWFwLgogICAgICAgICAqCiAgICAgICAgICogQG1lbWJlcm9mIEhlYXAucHJvdG90eXBlCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqLwogICAgICAgIG1heGltdW1MZW5ndGg6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tYXhpbXVtTGVuZ3RoOwogICAgICAgICAgfSwKICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuT3JFcXVhbHMoIm1heGltdW1MZW5ndGgiLCB2YWx1ZSwgMCk7CiAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsTGVuZ3RoID0gdGhpcy5fbGVuZ3RoOwogICAgICAgICAgICBpZiAodmFsdWUgPCBvcmlnaW5hbExlbmd0aCkgewogICAgICAgICAgICAgIGNvbnN0IGFycmF5ID0gdGhpcy5fYXJyYXk7CiAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IHZhbHVlOyBpIDwgb3JpZ2luYWxMZW5ndGg7ICsraSkgewogICAgICAgICAgICAgICAgYXJyYXlbaV0gPSB2b2lkIDA7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHRoaXMuX2xlbmd0aCA9IHZhbHVlOwogICAgICAgICAgICAgIGFycmF5Lmxlbmd0aCA9IHZhbHVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuX21heGltdW1MZW5ndGggPSB2YWx1ZTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIFRoZSBjb21wYXJhdG9yIHRvIHVzZSBmb3IgdGhlIGhlYXAuIElmIGNvbXBhcmF0b3IoYSwgYikgaXMgbGVzcyB0aGFuIDAsIHNvcnQgYSB0byBhIGxvd2VyIGluZGV4IHRoYW4gYiwgb3RoZXJ3aXNlIHNvcnQgdG8gYSBoaWdoZXIgaW5kZXguCiAgICAgICAgICoKICAgICAgICAgKiBAbWVtYmVyb2YgSGVhcC5wcm90b3R5cGUKICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtIZWFwLkNvbXBhcmF0b3JDYWxsYmFja30KICAgICAgICAgKi8KICAgICAgICBjb21wYXJhdG9yOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5fY29tcGFyYXRvcjsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgICBIZWFwLnByb3RvdHlwZS5yZXNlcnZlID0gZnVuY3Rpb24obGVuZ3RoKSB7CiAgICAgICAgbGVuZ3RoID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQobGVuZ3RoLCB0aGlzLl9sZW5ndGgpOwogICAgICAgIHRoaXMuX2FycmF5Lmxlbmd0aCA9IGxlbmd0aDsKICAgICAgfTsKICAgICAgSGVhcC5wcm90b3R5cGUuaGVhcGlmeSA9IGZ1bmN0aW9uKGluZGV4KSB7CiAgICAgICAgaW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChpbmRleCwgMCk7CiAgICAgICAgY29uc3QgbGVuZ3RoID0gdGhpcy5fbGVuZ3RoOwogICAgICAgIGNvbnN0IGNvbXBhcmF0b3IgPSB0aGlzLl9jb21wYXJhdG9yOwogICAgICAgIGNvbnN0IGFycmF5ID0gdGhpcy5fYXJyYXk7CiAgICAgICAgbGV0IGNhbmRpZGF0ZSA9IC0xOwogICAgICAgIGxldCBpbnNlcnRpbmcgPSB0cnVlOwogICAgICAgIHdoaWxlIChpbnNlcnRpbmcpIHsKICAgICAgICAgIGNvbnN0IHJpZ2h0ID0gMiAqIChpbmRleCArIDEpOwogICAgICAgICAgY29uc3QgbGVmdCA9IHJpZ2h0IC0gMTsKICAgICAgICAgIGlmIChsZWZ0IDwgbGVuZ3RoICYmIGNvbXBhcmF0b3IoYXJyYXlbbGVmdF0sIGFycmF5W2luZGV4XSkgPCAwKSB7CiAgICAgICAgICAgIGNhbmRpZGF0ZSA9IGxlZnQ7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBjYW5kaWRhdGUgPSBpbmRleDsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChyaWdodCA8IGxlbmd0aCAmJiBjb21wYXJhdG9yKGFycmF5W3JpZ2h0XSwgYXJyYXlbY2FuZGlkYXRlXSkgPCAwKSB7CiAgICAgICAgICAgIGNhbmRpZGF0ZSA9IHJpZ2h0OwogICAgICAgICAgfQogICAgICAgICAgaWYgKGNhbmRpZGF0ZSAhPT0gaW5kZXgpIHsKICAgICAgICAgICAgc3dhcChhcnJheSwgY2FuZGlkYXRlLCBpbmRleCk7CiAgICAgICAgICAgIGluZGV4ID0gY2FuZGlkYXRlOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaW5zZXJ0aW5nID0gZmFsc2U7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9OwogICAgICBIZWFwLnByb3RvdHlwZS5yZXNvcnQgPSBmdW5jdGlvbigpIHsKICAgICAgICBjb25zdCBsZW5ndGggPSB0aGlzLl9sZW5ndGg7CiAgICAgICAgZm9yIChsZXQgaSA9IE1hdGguY2VpbChsZW5ndGggLyAyKTsgaSA+PSAwOyAtLWkpIHsKICAgICAgICAgIHRoaXMuaGVhcGlmeShpKTsKICAgICAgICB9CiAgICAgIH07CiAgICAgIEhlYXAucHJvdG90eXBlLmluc2VydCA9IGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImVsZW1lbnQiLCBlbGVtZW50KTsKICAgICAgICBjb25zdCBhcnJheSA9IHRoaXMuX2FycmF5OwogICAgICAgIGNvbnN0IGNvbXBhcmF0b3IgPSB0aGlzLl9jb21wYXJhdG9yOwogICAgICAgIGNvbnN0IG1heGltdW1MZW5ndGggPSB0aGlzLl9tYXhpbXVtTGVuZ3RoOwogICAgICAgIGxldCBpbmRleCA9IHRoaXMuX2xlbmd0aCsrOwogICAgICAgIGlmIChpbmRleCA8IGFycmF5Lmxlbmd0aCkgewogICAgICAgICAgYXJyYXlbaW5kZXhdID0gZWxlbWVudDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgYXJyYXkucHVzaChlbGVtZW50KTsKICAgICAgICB9CiAgICAgICAgd2hpbGUgKGluZGV4ICE9PSAwKSB7CiAgICAgICAgICBjb25zdCBwYXJlbnQgPSBNYXRoLmZsb29yKChpbmRleCAtIDEpIC8gMik7CiAgICAgICAgICBpZiAoY29tcGFyYXRvcihhcnJheVtpbmRleF0sIGFycmF5W3BhcmVudF0pIDwgMCkgewogICAgICAgICAgICBzd2FwKGFycmF5LCBpbmRleCwgcGFyZW50KTsKICAgICAgICAgICAgaW5kZXggPSBwYXJlbnQ7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgbGV0IHJlbW92ZWRFbGVtZW50OwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQobWF4aW11bUxlbmd0aCkgJiYgdGhpcy5fbGVuZ3RoID4gbWF4aW11bUxlbmd0aCkgewogICAgICAgICAgcmVtb3ZlZEVsZW1lbnQgPSBhcnJheVttYXhpbXVtTGVuZ3RoXTsKICAgICAgICAgIHRoaXMuX2xlbmd0aCA9IG1heGltdW1MZW5ndGg7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZW1vdmVkRWxlbWVudDsKICAgICAgfTsKICAgICAgSGVhcC5wcm90b3R5cGUucG9wID0gZnVuY3Rpb24oaW5kZXgpIHsKICAgICAgICBpbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGluZGV4LCAwKTsKICAgICAgICBpZiAodGhpcy5fbGVuZ3RoID09PSAwKSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIubGVzc1RoYW4oImluZGV4IiwgaW5kZXgsIHRoaXMuX2xlbmd0aCk7CiAgICAgICAgY29uc3QgYXJyYXkgPSB0aGlzLl9hcnJheTsKICAgICAgICBjb25zdCByb290ID0gYXJyYXlbaW5kZXhdOwogICAgICAgIHN3YXAoYXJyYXksIGluZGV4LCAtLXRoaXMuX2xlbmd0aCk7CiAgICAgICAgdGhpcy5oZWFwaWZ5KGluZGV4KTsKICAgICAgICBhcnJheVt0aGlzLl9sZW5ndGhdID0gdm9pZCAwOwogICAgICAgIHJldHVybiByb290OwogICAgICB9OwogICAgICBIZWFwX2RlZmF1bHQgPSBIZWFwOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUmVxdWVzdFNjaGVkdWxlci5qcwogIGZ1bmN0aW9uIHNvcnRSZXF1ZXN0cyhhMywgYikgewogICAgcmV0dXJuIGEzLnByaW9yaXR5IC0gYi5wcmlvcml0eTsKICB9CiAgZnVuY3Rpb24gUmVxdWVzdFNjaGVkdWxlcigpIHsKICB9CiAgZnVuY3Rpb24gdXBkYXRlUHJpb3JpdHkocmVxdWVzdCkgewogICAgaWYgKGRlZmluZWRfZGVmYXVsdChyZXF1ZXN0LnByaW9yaXR5RnVuY3Rpb24pKSB7CiAgICAgIHJlcXVlc3QucHJpb3JpdHkgPSByZXF1ZXN0LnByaW9yaXR5RnVuY3Rpb24oKTsKICAgIH0KICB9CiAgZnVuY3Rpb24gaXNzdWVSZXF1ZXN0KHJlcXVlc3QpIHsKICAgIGlmIChyZXF1ZXN0LnN0YXRlID09PSBSZXF1ZXN0U3RhdGVfZGVmYXVsdC5VTklTU1VFRCkgewogICAgICByZXF1ZXN0LnN0YXRlID0gUmVxdWVzdFN0YXRlX2RlZmF1bHQuSVNTVUVEOwogICAgICByZXF1ZXN0LmRlZmVycmVkID0gZGVmZXJfZGVmYXVsdCgpOwogICAgfQogICAgcmV0dXJuIHJlcXVlc3QuZGVmZXJyZWQucHJvbWlzZTsKICB9CiAgZnVuY3Rpb24gZ2V0UmVxdWVzdFJlY2VpdmVkRnVuY3Rpb24ocmVxdWVzdCkgewogICAgcmV0dXJuIGZ1bmN0aW9uKHJlc3VsdHMpIHsKICAgICAgaWYgKHJlcXVlc3Quc3RhdGUgPT09IFJlcXVlc3RTdGF0ZV9kZWZhdWx0LkNBTkNFTExFRCkgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBjb25zdCBkZWZlcnJlZCA9IHJlcXVlc3QuZGVmZXJyZWQ7CiAgICAgIC0tc3RhdGlzdGljcy5udW1iZXJPZkFjdGl2ZVJlcXVlc3RzOwogICAgICAtLW51bWJlck9mQWN0aXZlUmVxdWVzdHNCeVNlcnZlcltyZXF1ZXN0LnNlcnZlcktleV07CiAgICAgIHJlcXVlc3RDb21wbGV0ZWRFdmVudC5yYWlzZUV2ZW50KCk7CiAgICAgIHJlcXVlc3Quc3RhdGUgPSBSZXF1ZXN0U3RhdGVfZGVmYXVsdC5SRUNFSVZFRDsKICAgICAgcmVxdWVzdC5kZWZlcnJlZCA9IHZvaWQgMDsKICAgICAgZGVmZXJyZWQucmVzb2x2ZShyZXN1bHRzKTsKICAgIH07CiAgfQogIGZ1bmN0aW9uIGdldFJlcXVlc3RGYWlsZWRGdW5jdGlvbihyZXF1ZXN0KSB7CiAgICByZXR1cm4gZnVuY3Rpb24oZXJyb3IpIHsKICAgICAgaWYgKHJlcXVlc3Quc3RhdGUgPT09IFJlcXVlc3RTdGF0ZV9kZWZhdWx0LkNBTkNFTExFRCkgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICArK3N0YXRpc3RpY3MubnVtYmVyT2ZGYWlsZWRSZXF1ZXN0czsKICAgICAgLS1zdGF0aXN0aWNzLm51bWJlck9mQWN0aXZlUmVxdWVzdHM7CiAgICAgIC0tbnVtYmVyT2ZBY3RpdmVSZXF1ZXN0c0J5U2VydmVyW3JlcXVlc3Quc2VydmVyS2V5XTsKICAgICAgcmVxdWVzdENvbXBsZXRlZEV2ZW50LnJhaXNlRXZlbnQoZXJyb3IpOwogICAgICByZXF1ZXN0LnN0YXRlID0gUmVxdWVzdFN0YXRlX2RlZmF1bHQuRkFJTEVEOwogICAgICByZXF1ZXN0LmRlZmVycmVkLnJlamVjdChlcnJvcik7CiAgICB9OwogIH0KICBmdW5jdGlvbiBzdGFydFJlcXVlc3QocmVxdWVzdCkgewogICAgY29uc3QgcHJvbWlzZSA9IGlzc3VlUmVxdWVzdChyZXF1ZXN0KTsKICAgIHJlcXVlc3Quc3RhdGUgPSBSZXF1ZXN0U3RhdGVfZGVmYXVsdC5BQ1RJVkU7CiAgICBhY3RpdmVSZXF1ZXN0cy5wdXNoKHJlcXVlc3QpOwogICAgKytzdGF0aXN0aWNzLm51bWJlck9mQWN0aXZlUmVxdWVzdHM7CiAgICArK3N0YXRpc3RpY3MubnVtYmVyT2ZBY3RpdmVSZXF1ZXN0c0V2ZXI7CiAgICArK251bWJlck9mQWN0aXZlUmVxdWVzdHNCeVNlcnZlcltyZXF1ZXN0LnNlcnZlcktleV07CiAgICByZXF1ZXN0LnJlcXVlc3RGdW5jdGlvbigpLnRoZW4oZ2V0UmVxdWVzdFJlY2VpdmVkRnVuY3Rpb24ocmVxdWVzdCkpLmNhdGNoKGdldFJlcXVlc3RGYWlsZWRGdW5jdGlvbihyZXF1ZXN0KSk7CiAgICByZXR1cm4gcHJvbWlzZTsKICB9CiAgZnVuY3Rpb24gY2FuY2VsUmVxdWVzdChyZXF1ZXN0KSB7CiAgICBjb25zdCBhY3RpdmUgPSByZXF1ZXN0LnN0YXRlID09PSBSZXF1ZXN0U3RhdGVfZGVmYXVsdC5BQ1RJVkU7CiAgICByZXF1ZXN0LnN0YXRlID0gUmVxdWVzdFN0YXRlX2RlZmF1bHQuQ0FOQ0VMTEVEOwogICAgKytzdGF0aXN0aWNzLm51bWJlck9mQ2FuY2VsbGVkUmVxdWVzdHM7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHJlcXVlc3QuZGVmZXJyZWQpKSB7CiAgICAgIGNvbnN0IGRlZmVycmVkID0gcmVxdWVzdC5kZWZlcnJlZDsKICAgICAgcmVxdWVzdC5kZWZlcnJlZCA9IHZvaWQgMDsKICAgICAgZGVmZXJyZWQucmVqZWN0KCk7CiAgICB9CiAgICBpZiAoYWN0aXZlKSB7CiAgICAgIC0tc3RhdGlzdGljcy5udW1iZXJPZkFjdGl2ZVJlcXVlc3RzOwogICAgICAtLW51bWJlck9mQWN0aXZlUmVxdWVzdHNCeVNlcnZlcltyZXF1ZXN0LnNlcnZlcktleV07CiAgICAgICsrc3RhdGlzdGljcy5udW1iZXJPZkNhbmNlbGxlZEFjdGl2ZVJlcXVlc3RzOwogICAgfQogICAgaWYgKGRlZmluZWRfZGVmYXVsdChyZXF1ZXN0LmNhbmNlbEZ1bmN0aW9uKSkgewogICAgICByZXF1ZXN0LmNhbmNlbEZ1bmN0aW9uKCk7CiAgICB9CiAgfQogIGZ1bmN0aW9uIHVwZGF0ZVN0YXRpc3RpY3MoKSB7CiAgICBpZiAoIVJlcXVlc3RTY2hlZHVsZXIuZGVidWdTaG93U3RhdGlzdGljcykgewogICAgICByZXR1cm47CiAgICB9CiAgICBpZiAoc3RhdGlzdGljcy5udW1iZXJPZkFjdGl2ZVJlcXVlc3RzID09PSAwICYmIHN0YXRpc3RpY3MubGFzdE51bWJlck9mQWN0aXZlUmVxdWVzdHMgPiAwKSB7CiAgICAgIGlmIChzdGF0aXN0aWNzLm51bWJlck9mQXR0ZW1wdGVkUmVxdWVzdHMgPiAwKSB7CiAgICAgICAgY29uc29sZS5sb2coCiAgICAgICAgICBgTnVtYmVyIG9mIGF0dGVtcHRlZCByZXF1ZXN0czogJHtzdGF0aXN0aWNzLm51bWJlck9mQXR0ZW1wdGVkUmVxdWVzdHN9YAogICAgICAgICk7CiAgICAgICAgc3RhdGlzdGljcy5udW1iZXJPZkF0dGVtcHRlZFJlcXVlc3RzID0gMDsKICAgICAgfQogICAgICBpZiAoc3RhdGlzdGljcy5udW1iZXJPZkNhbmNlbGxlZFJlcXVlc3RzID4gMCkgewogICAgICAgIGNvbnNvbGUubG9nKAogICAgICAgICAgYE51bWJlciBvZiBjYW5jZWxsZWQgcmVxdWVzdHM6ICR7c3RhdGlzdGljcy5udW1iZXJPZkNhbmNlbGxlZFJlcXVlc3RzfWAKICAgICAgICApOwogICAgICAgIHN0YXRpc3RpY3MubnVtYmVyT2ZDYW5jZWxsZWRSZXF1ZXN0cyA9IDA7CiAgICAgIH0KICAgICAgaWYgKHN0YXRpc3RpY3MubnVtYmVyT2ZDYW5jZWxsZWRBY3RpdmVSZXF1ZXN0cyA+IDApIHsKICAgICAgICBjb25zb2xlLmxvZygKICAgICAgICAgIGBOdW1iZXIgb2YgY2FuY2VsbGVkIGFjdGl2ZSByZXF1ZXN0czogJHtzdGF0aXN0aWNzLm51bWJlck9mQ2FuY2VsbGVkQWN0aXZlUmVxdWVzdHN9YAogICAgICAgICk7CiAgICAgICAgc3RhdGlzdGljcy5udW1iZXJPZkNhbmNlbGxlZEFjdGl2ZVJlcXVlc3RzID0gMDsKICAgICAgfQogICAgICBpZiAoc3RhdGlzdGljcy5udW1iZXJPZkZhaWxlZFJlcXVlc3RzID4gMCkgewogICAgICAgIGNvbnNvbGUubG9nKAogICAgICAgICAgYE51bWJlciBvZiBmYWlsZWQgcmVxdWVzdHM6ICR7c3RhdGlzdGljcy5udW1iZXJPZkZhaWxlZFJlcXVlc3RzfWAKICAgICAgICApOwogICAgICAgIHN0YXRpc3RpY3MubnVtYmVyT2ZGYWlsZWRSZXF1ZXN0cyA9IDA7CiAgICAgIH0KICAgIH0KICAgIHN0YXRpc3RpY3MubGFzdE51bWJlck9mQWN0aXZlUmVxdWVzdHMgPSBzdGF0aXN0aWNzLm51bWJlck9mQWN0aXZlUmVxdWVzdHM7CiAgfQogIHZhciBpbXBvcnRfdXJpanM0LCBzdGF0aXN0aWNzLCBwcmlvcml0eUhlYXBMZW5ndGgsIHJlcXVlc3RIZWFwLCBhY3RpdmVSZXF1ZXN0cywgbnVtYmVyT2ZBY3RpdmVSZXF1ZXN0c0J5U2VydmVyLCBwYWdlVXJpLCByZXF1ZXN0Q29tcGxldGVkRXZlbnQsIFJlcXVlc3RTY2hlZHVsZXJfZGVmYXVsdDsKICB2YXIgaW5pdF9SZXF1ZXN0U2NoZWR1bGVyID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9SZXF1ZXN0U2NoZWR1bGVyLmpzIigpIHsKICAgICAgaW1wb3J0X3VyaWpzNCA9IF9fdG9FU00ocmVxdWlyZV9VUkkoKSwgMSk7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZlcigpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9FdmVudCgpOwogICAgICBpbml0X0hlYXAoKTsKICAgICAgaW5pdF9pc0Jsb2JVcmkoKTsKICAgICAgaW5pdF9pc0RhdGFVcmkoKTsKICAgICAgaW5pdF9SZXF1ZXN0U3RhdGUoKTsKICAgICAgc3RhdGlzdGljcyA9IHsKICAgICAgICBudW1iZXJPZkF0dGVtcHRlZFJlcXVlc3RzOiAwLAogICAgICAgIG51bWJlck9mQWN0aXZlUmVxdWVzdHM6IDAsCiAgICAgICAgbnVtYmVyT2ZDYW5jZWxsZWRSZXF1ZXN0czogMCwKICAgICAgICBudW1iZXJPZkNhbmNlbGxlZEFjdGl2ZVJlcXVlc3RzOiAwLAogICAgICAgIG51bWJlck9mRmFpbGVkUmVxdWVzdHM6IDAsCiAgICAgICAgbnVtYmVyT2ZBY3RpdmVSZXF1ZXN0c0V2ZXI6IDAsCiAgICAgICAgbGFzdE51bWJlck9mQWN0aXZlUmVxdWVzdHM6IDAKICAgICAgfTsKICAgICAgcHJpb3JpdHlIZWFwTGVuZ3RoID0gMjA7CiAgICAgIHJlcXVlc3RIZWFwID0gbmV3IEhlYXBfZGVmYXVsdCh7CiAgICAgICAgY29tcGFyYXRvcjogc29ydFJlcXVlc3RzCiAgICAgIH0pOwogICAgICByZXF1ZXN0SGVhcC5tYXhpbXVtTGVuZ3RoID0gcHJpb3JpdHlIZWFwTGVuZ3RoOwogICAgICByZXF1ZXN0SGVhcC5yZXNlcnZlKHByaW9yaXR5SGVhcExlbmd0aCk7CiAgICAgIGFjdGl2ZVJlcXVlc3RzID0gW107CiAgICAgIG51bWJlck9mQWN0aXZlUmVxdWVzdHNCeVNlcnZlciA9IHt9OwogICAgICBwYWdlVXJpID0gdHlwZW9mIGRvY3VtZW50ICE9PSAidW5kZWZpbmVkIiA/IG5ldyBpbXBvcnRfdXJpanM0LmRlZmF1bHQoZG9jdW1lbnQubG9jYXRpb24uaHJlZikgOiBuZXcgaW1wb3J0X3VyaWpzNC5kZWZhdWx0KCk7CiAgICAgIHJlcXVlc3RDb21wbGV0ZWRFdmVudCA9IG5ldyBFdmVudF9kZWZhdWx0KCk7CiAgICAgIFJlcXVlc3RTY2hlZHVsZXIubWF4aW11bVJlcXVlc3RzID0gNTA7CiAgICAgIFJlcXVlc3RTY2hlZHVsZXIubWF4aW11bVJlcXVlc3RzUGVyU2VydmVyID0gMTg7CiAgICAgIFJlcXVlc3RTY2hlZHVsZXIucmVxdWVzdHNCeVNlcnZlciA9IHt9OwogICAgICBSZXF1ZXN0U2NoZWR1bGVyLnRocm90dGxlUmVxdWVzdHMgPSB0cnVlOwogICAgICBSZXF1ZXN0U2NoZWR1bGVyLmRlYnVnU2hvd1N0YXRpc3RpY3MgPSBmYWxzZTsKICAgICAgUmVxdWVzdFNjaGVkdWxlci5yZXF1ZXN0Q29tcGxldGVkRXZlbnQgPSByZXF1ZXN0Q29tcGxldGVkRXZlbnQ7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFJlcXVlc3RTY2hlZHVsZXIsIHsKICAgICAgICAvKioKICAgICAgICAgKiBSZXR1cm5zIHRoZSBzdGF0aXN0aWNzIHVzZWQgYnkgdGhlIHJlcXVlc3Qgc2NoZWR1bGVyLgogICAgICAgICAqCiAgICAgICAgICogQG1lbWJlcm9mIFJlcXVlc3RTY2hlZHVsZXIKICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtvYmplY3R9CiAgICAgICAgICogQHJlYWRvbmx5CiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKi8KICAgICAgICBzdGF0aXN0aWNzOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gc3RhdGlzdGljczsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIFRoZSBtYXhpbXVtIHNpemUgb2YgdGhlIHByaW9yaXR5IGhlYXAuIFRoaXMgbGltaXRzIHRoZSBudW1iZXIgb2YgcmVxdWVzdHMgdGhhdCBhcmUgc29ydGVkIGJ5IHByaW9yaXR5LiBPbmx5IGFwcGxpZXMgdG8gcmVxdWVzdHMgdGhhdCBhcmUgbm90IHlldCBhY3RpdmUuCiAgICAgICAgICoKICAgICAgICAgKiBAbWVtYmVyb2YgUmVxdWVzdFNjaGVkdWxlcgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAZGVmYXVsdCAyMAogICAgICAgICAqIEBwcml2YXRlCiAgICAgICAgICovCiAgICAgICAgcHJpb3JpdHlIZWFwTGVuZ3RoOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gcHJpb3JpdHlIZWFwTGVuZ3RoOwogICAgICAgICAgfSwKICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICAgICAgaWYgKHZhbHVlIDwgcHJpb3JpdHlIZWFwTGVuZ3RoKSB7CiAgICAgICAgICAgICAgd2hpbGUgKHJlcXVlc3RIZWFwLmxlbmd0aCA+IHZhbHVlKSB7CiAgICAgICAgICAgICAgICBjb25zdCByZXF1ZXN0ID0gcmVxdWVzdEhlYXAucG9wKCk7CiAgICAgICAgICAgICAgICBjYW5jZWxSZXF1ZXN0KHJlcXVlc3QpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwcmlvcml0eUhlYXBMZW5ndGggPSB2YWx1ZTsKICAgICAgICAgICAgcmVxdWVzdEhlYXAubWF4aW11bUxlbmd0aCA9IHZhbHVlOwogICAgICAgICAgICByZXF1ZXN0SGVhcC5yZXNlcnZlKHZhbHVlKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgICBSZXF1ZXN0U2NoZWR1bGVyLnNlcnZlckhhc09wZW5TbG90cyA9IGZ1bmN0aW9uKHNlcnZlcktleSwgZGVzaXJlZFJlcXVlc3RzKSB7CiAgICAgICAgZGVzaXJlZFJlcXVlc3RzID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoZGVzaXJlZFJlcXVlc3RzLCAxKTsKICAgICAgICBjb25zdCBtYXhSZXF1ZXN0cyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KAogICAgICAgICAgUmVxdWVzdFNjaGVkdWxlci5yZXF1ZXN0c0J5U2VydmVyW3NlcnZlcktleV0sCiAgICAgICAgICBSZXF1ZXN0U2NoZWR1bGVyLm1heGltdW1SZXF1ZXN0c1BlclNlcnZlcgogICAgICAgICk7CiAgICAgICAgY29uc3QgaGFzT3BlblNsb3RzU2VydmVyID0gbnVtYmVyT2ZBY3RpdmVSZXF1ZXN0c0J5U2VydmVyW3NlcnZlcktleV0gKyBkZXNpcmVkUmVxdWVzdHMgPD0gbWF4UmVxdWVzdHM7CiAgICAgICAgcmV0dXJuIGhhc09wZW5TbG90c1NlcnZlcjsKICAgICAgfTsKICAgICAgUmVxdWVzdFNjaGVkdWxlci5oZWFwSGFzT3BlblNsb3RzID0gZnVuY3Rpb24oZGVzaXJlZFJlcXVlc3RzKSB7CiAgICAgICAgY29uc3QgaGFzT3BlblNsb3RzSGVhcCA9IHJlcXVlc3RIZWFwLmxlbmd0aCArIGRlc2lyZWRSZXF1ZXN0cyA8PSBwcmlvcml0eUhlYXBMZW5ndGg7CiAgICAgICAgcmV0dXJuIGhhc09wZW5TbG90c0hlYXA7CiAgICAgIH07CiAgICAgIFJlcXVlc3RTY2hlZHVsZXIudXBkYXRlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgbGV0IGk7CiAgICAgICAgbGV0IHJlcXVlc3Q7CiAgICAgICAgbGV0IHJlbW92ZUNvdW50ID0gMDsKICAgICAgICBjb25zdCBhY3RpdmVMZW5ndGggPSBhY3RpdmVSZXF1ZXN0cy5sZW5ndGg7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGFjdGl2ZUxlbmd0aDsgKytpKSB7CiAgICAgICAgICByZXF1ZXN0ID0gYWN0aXZlUmVxdWVzdHNbaV07CiAgICAgICAgICBpZiAocmVxdWVzdC5jYW5jZWxsZWQpIHsKICAgICAgICAgICAgY2FuY2VsUmVxdWVzdChyZXF1ZXN0KTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChyZXF1ZXN0LnN0YXRlICE9PSBSZXF1ZXN0U3RhdGVfZGVmYXVsdC5BQ1RJVkUpIHsKICAgICAgICAgICAgKytyZW1vdmVDb3VudDsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAocmVtb3ZlQ291bnQgPiAwKSB7CiAgICAgICAgICAgIGFjdGl2ZVJlcXVlc3RzW2kgLSByZW1vdmVDb3VudF0gPSByZXF1ZXN0OwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBhY3RpdmVSZXF1ZXN0cy5sZW5ndGggLT0gcmVtb3ZlQ291bnQ7CiAgICAgICAgY29uc3QgaXNzdWVkUmVxdWVzdHMgPSByZXF1ZXN0SGVhcC5pbnRlcm5hbEFycmF5OwogICAgICAgIGNvbnN0IGlzc3VlZExlbmd0aCA9IHJlcXVlc3RIZWFwLmxlbmd0aDsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaXNzdWVkTGVuZ3RoOyArK2kpIHsKICAgICAgICAgIHVwZGF0ZVByaW9yaXR5KGlzc3VlZFJlcXVlc3RzW2ldKTsKICAgICAgICB9CiAgICAgICAgcmVxdWVzdEhlYXAucmVzb3J0KCk7CiAgICAgICAgY29uc3Qgb3BlblNsb3RzID0gTWF0aC5tYXgoCiAgICAgICAgICBSZXF1ZXN0U2NoZWR1bGVyLm1heGltdW1SZXF1ZXN0cyAtIGFjdGl2ZVJlcXVlc3RzLmxlbmd0aCwKICAgICAgICAgIDAKICAgICAgICApOwogICAgICAgIGxldCBmaWxsZWRTbG90cyA9IDA7CiAgICAgICAgd2hpbGUgKGZpbGxlZFNsb3RzIDwgb3BlblNsb3RzICYmIHJlcXVlc3RIZWFwLmxlbmd0aCA+IDApIHsKICAgICAgICAgIHJlcXVlc3QgPSByZXF1ZXN0SGVhcC5wb3AoKTsKICAgICAgICAgIGlmIChyZXF1ZXN0LmNhbmNlbGxlZCkgewogICAgICAgICAgICBjYW5jZWxSZXF1ZXN0KHJlcXVlc3QpOwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChyZXF1ZXN0LnRocm90dGxlQnlTZXJ2ZXIgJiYgIVJlcXVlc3RTY2hlZHVsZXIuc2VydmVySGFzT3BlblNsb3RzKHJlcXVlc3Quc2VydmVyS2V5KSkgewogICAgICAgICAgICBjYW5jZWxSZXF1ZXN0KHJlcXVlc3QpOwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICAgIHN0YXJ0UmVxdWVzdChyZXF1ZXN0KTsKICAgICAgICAgICsrZmlsbGVkU2xvdHM7CiAgICAgICAgfQogICAgICAgIHVwZGF0ZVN0YXRpc3RpY3MoKTsKICAgICAgfTsKICAgICAgUmVxdWVzdFNjaGVkdWxlci5nZXRTZXJ2ZXJLZXkgPSBmdW5jdGlvbih1cmwpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5zdHJpbmcoInVybCIsIHVybCk7CiAgICAgICAgbGV0IHVyaSA9IG5ldyBpbXBvcnRfdXJpanM0LmRlZmF1bHQodXJsKTsKICAgICAgICBpZiAodXJpLnNjaGVtZSgpID09PSAiIikgewogICAgICAgICAgdXJpID0gdXJpLmFic29sdXRlVG8ocGFnZVVyaSk7CiAgICAgICAgICB1cmkubm9ybWFsaXplKCk7CiAgICAgICAgfQogICAgICAgIGxldCBzZXJ2ZXJLZXkgPSB1cmkuYXV0aG9yaXR5KCk7CiAgICAgICAgaWYgKCEvOi8udGVzdChzZXJ2ZXJLZXkpKSB7CiAgICAgICAgICBzZXJ2ZXJLZXkgPSBgJHtzZXJ2ZXJLZXl9OiR7dXJpLnNjaGVtZSgpID09PSAiaHR0cHMiID8gIjQ0MyIgOiAiODAifWA7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGxlbmd0aCA9IG51bWJlck9mQWN0aXZlUmVxdWVzdHNCeVNlcnZlcltzZXJ2ZXJLZXldOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGxlbmd0aCkpIHsKICAgICAgICAgIG51bWJlck9mQWN0aXZlUmVxdWVzdHNCeVNlcnZlcltzZXJ2ZXJLZXldID0gMDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHNlcnZlcktleTsKICAgICAgfTsKICAgICAgUmVxdWVzdFNjaGVkdWxlci5yZXF1ZXN0ID0gZnVuY3Rpb24ocmVxdWVzdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVxdWVzdCIsIHJlcXVlc3QpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLnN0cmluZygicmVxdWVzdC51cmwiLCByZXF1ZXN0LnVybCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YuZnVuYygicmVxdWVzdC5yZXF1ZXN0RnVuY3Rpb24iLCByZXF1ZXN0LnJlcXVlc3RGdW5jdGlvbik7CiAgICAgICAgaWYgKGlzRGF0YVVyaV9kZWZhdWx0KHJlcXVlc3QudXJsKSB8fCBpc0Jsb2JVcmlfZGVmYXVsdChyZXF1ZXN0LnVybCkpIHsKICAgICAgICAgIHJlcXVlc3RDb21wbGV0ZWRFdmVudC5yYWlzZUV2ZW50KCk7CiAgICAgICAgICByZXF1ZXN0LnN0YXRlID0gUmVxdWVzdFN0YXRlX2RlZmF1bHQuUkVDRUlWRUQ7CiAgICAgICAgICByZXR1cm4gcmVxdWVzdC5yZXF1ZXN0RnVuY3Rpb24oKTsKICAgICAgICB9CiAgICAgICAgKytzdGF0aXN0aWNzLm51bWJlck9mQXR0ZW1wdGVkUmVxdWVzdHM7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVxdWVzdC5zZXJ2ZXJLZXkpKSB7CiAgICAgICAgICByZXF1ZXN0LnNlcnZlcktleSA9IFJlcXVlc3RTY2hlZHVsZXIuZ2V0U2VydmVyS2V5KHJlcXVlc3QudXJsKTsKICAgICAgICB9CiAgICAgICAgaWYgKFJlcXVlc3RTY2hlZHVsZXIudGhyb3R0bGVSZXF1ZXN0cyAmJiByZXF1ZXN0LnRocm90dGxlQnlTZXJ2ZXIgJiYgIVJlcXVlc3RTY2hlZHVsZXIuc2VydmVySGFzT3BlblNsb3RzKHJlcXVlc3Quc2VydmVyS2V5KSkgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgaWYgKCFSZXF1ZXN0U2NoZWR1bGVyLnRocm90dGxlUmVxdWVzdHMgfHwgIXJlcXVlc3QudGhyb3R0bGUpIHsKICAgICAgICAgIHJldHVybiBzdGFydFJlcXVlc3QocmVxdWVzdCk7CiAgICAgICAgfQogICAgICAgIGlmIChhY3RpdmVSZXF1ZXN0cy5sZW5ndGggPj0gUmVxdWVzdFNjaGVkdWxlci5tYXhpbXVtUmVxdWVzdHMpIHsKICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgfQogICAgICAgIHVwZGF0ZVByaW9yaXR5KHJlcXVlc3QpOwogICAgICAgIGNvbnN0IHJlbW92ZWRSZXF1ZXN0ID0gcmVxdWVzdEhlYXAuaW5zZXJ0KHJlcXVlc3QpOwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQocmVtb3ZlZFJlcXVlc3QpKSB7CiAgICAgICAgICBpZiAocmVtb3ZlZFJlcXVlc3QgPT09IHJlcXVlc3QpIHsKICAgICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICAgIH0KICAgICAgICAgIGNhbmNlbFJlcXVlc3QocmVtb3ZlZFJlcXVlc3QpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gaXNzdWVSZXF1ZXN0KHJlcXVlc3QpOwogICAgICB9OwogICAgICBSZXF1ZXN0U2NoZWR1bGVyLmNsZWFyRm9yU3BlY3MgPSBmdW5jdGlvbigpIHsKICAgICAgICB3aGlsZSAocmVxdWVzdEhlYXAubGVuZ3RoID4gMCkgewogICAgICAgICAgY29uc3QgcmVxdWVzdCA9IHJlcXVlc3RIZWFwLnBvcCgpOwogICAgICAgICAgY2FuY2VsUmVxdWVzdChyZXF1ZXN0KTsKICAgICAgICB9CiAgICAgICAgY29uc3QgbGVuZ3RoID0gYWN0aXZlUmVxdWVzdHMubGVuZ3RoOwogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgICAgIGNhbmNlbFJlcXVlc3QoYWN0aXZlUmVxdWVzdHNbaV0pOwogICAgICAgIH0KICAgICAgICBhY3RpdmVSZXF1ZXN0cy5sZW5ndGggPSAwOwogICAgICAgIG51bWJlck9mQWN0aXZlUmVxdWVzdHNCeVNlcnZlciA9IHt9OwogICAgICAgIHN0YXRpc3RpY3MubnVtYmVyT2ZBdHRlbXB0ZWRSZXF1ZXN0cyA9IDA7CiAgICAgICAgc3RhdGlzdGljcy5udW1iZXJPZkFjdGl2ZVJlcXVlc3RzID0gMDsKICAgICAgICBzdGF0aXN0aWNzLm51bWJlck9mQ2FuY2VsbGVkUmVxdWVzdHMgPSAwOwogICAgICAgIHN0YXRpc3RpY3MubnVtYmVyT2ZDYW5jZWxsZWRBY3RpdmVSZXF1ZXN0cyA9IDA7CiAgICAgICAgc3RhdGlzdGljcy5udW1iZXJPZkZhaWxlZFJlcXVlc3RzID0gMDsKICAgICAgICBzdGF0aXN0aWNzLm51bWJlck9mQWN0aXZlUmVxdWVzdHNFdmVyID0gMDsKICAgICAgICBzdGF0aXN0aWNzLmxhc3ROdW1iZXJPZkFjdGl2ZVJlcXVlc3RzID0gMDsKICAgICAgfTsKICAgICAgUmVxdWVzdFNjaGVkdWxlci5udW1iZXJPZkFjdGl2ZVJlcXVlc3RzQnlTZXJ2ZXIgPSBmdW5jdGlvbihzZXJ2ZXJLZXkpIHsKICAgICAgICByZXR1cm4gbnVtYmVyT2ZBY3RpdmVSZXF1ZXN0c0J5U2VydmVyW3NlcnZlcktleV07CiAgICAgIH07CiAgICAgIFJlcXVlc3RTY2hlZHVsZXIucmVxdWVzdEhlYXAgPSByZXF1ZXN0SGVhcDsKICAgICAgUmVxdWVzdFNjaGVkdWxlcl9kZWZhdWx0ID0gUmVxdWVzdFNjaGVkdWxlcjsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1RydXN0ZWRTZXJ2ZXJzLmpzCiAgZnVuY3Rpb24gZ2V0QXV0aG9yaXR5KHVybCkgewogICAgY29uc3QgdXJpID0gbmV3IGltcG9ydF91cmlqczUuZGVmYXVsdCh1cmwpOwogICAgdXJpLm5vcm1hbGl6ZSgpOwogICAgbGV0IGF1dGhvcml0eSA9IHVyaS5hdXRob3JpdHkoKTsKICAgIGlmIChhdXRob3JpdHkubGVuZ3RoID09PSAwKSB7CiAgICAgIHJldHVybiB2b2lkIDA7CiAgICB9CiAgICB1cmkuYXV0aG9yaXR5KGF1dGhvcml0eSk7CiAgICBpZiAoYXV0aG9yaXR5LmluZGV4T2YoIkAiKSAhPT0gLTEpIHsKICAgICAgY29uc3QgcGFydHMgPSBhdXRob3JpdHkuc3BsaXQoIkAiKTsKICAgICAgYXV0aG9yaXR5ID0gcGFydHNbMV07CiAgICB9CiAgICBpZiAoYXV0aG9yaXR5LmluZGV4T2YoIjoiKSA9PT0gLTEpIHsKICAgICAgbGV0IHNjaGVtZSA9IHVyaS5zY2hlbWUoKTsKICAgICAgaWYgKHNjaGVtZS5sZW5ndGggPT09IDApIHsKICAgICAgICBzY2hlbWUgPSB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2w7CiAgICAgICAgc2NoZW1lID0gc2NoZW1lLnN1YnN0cmluZygwLCBzY2hlbWUubGVuZ3RoIC0gMSk7CiAgICAgIH0KICAgICAgaWYgKHNjaGVtZSA9PT0gImh0dHAiKSB7CiAgICAgICAgYXV0aG9yaXR5ICs9ICI6ODAiOwogICAgICB9IGVsc2UgaWYgKHNjaGVtZSA9PT0gImh0dHBzIikgewogICAgICAgIGF1dGhvcml0eSArPSAiOjQ0MyI7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgfQogICAgfQogICAgcmV0dXJuIGF1dGhvcml0eTsKICB9CiAgdmFyIGltcG9ydF91cmlqczUsIFRydXN0ZWRTZXJ2ZXJzLCBfc2VydmVycywgVHJ1c3RlZFNlcnZlcnNfZGVmYXVsdDsKICB2YXIgaW5pdF9UcnVzdGVkU2VydmVycyA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvVHJ1c3RlZFNlcnZlcnMuanMiKCkgewogICAgICBpbXBvcnRfdXJpanM1ID0gX190b0VTTShyZXF1aXJlX1VSSSgpLCAxKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgVHJ1c3RlZFNlcnZlcnMgPSB7fTsKICAgICAgX3NlcnZlcnMgPSB7fTsKICAgICAgVHJ1c3RlZFNlcnZlcnMuYWRkID0gZnVuY3Rpb24oaG9zdCwgcG9ydCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGhvc3QpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiaG9zdCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocG9ydCkgfHwgcG9ydCA8PSAwKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgicG9ydCBpcyByZXF1aXJlZCB0byBiZSBncmVhdGVyIHRoYW4gMC4iKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgYXV0aG9yaXR5ID0gYCR7aG9zdC50b0xvd2VyQ2FzZSgpfToke3BvcnR9YDsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChfc2VydmVyc1thdXRob3JpdHldKSkgewogICAgICAgICAgX3NlcnZlcnNbYXV0aG9yaXR5XSA9IHRydWU7CiAgICAgICAgfQogICAgICB9OwogICAgICBUcnVzdGVkU2VydmVycy5yZW1vdmUgPSBmdW5jdGlvbihob3N0LCBwb3J0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoaG9zdCkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJob3N0IGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwb3J0KSB8fCBwb3J0IDw9IDApIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJwb3J0IGlzIHJlcXVpcmVkIHRvIGJlIGdyZWF0ZXIgdGhhbiAwLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBhdXRob3JpdHkgPSBgJHtob3N0LnRvTG93ZXJDYXNlKCl9OiR7cG9ydH1gOwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoX3NlcnZlcnNbYXV0aG9yaXR5XSkpIHsKICAgICAgICAgIGRlbGV0ZSBfc2VydmVyc1thdXRob3JpdHldOwogICAgICAgIH0KICAgICAgfTsKICAgICAgVHJ1c3RlZFNlcnZlcnMuY29udGFpbnMgPSBmdW5jdGlvbih1cmwpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdCh1cmwpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgidXJsIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBhdXRob3JpdHkgPSBnZXRBdXRob3JpdHkodXJsKTsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGF1dGhvcml0eSkgJiYgZGVmaW5lZF9kZWZhdWx0KF9zZXJ2ZXJzW2F1dGhvcml0eV0pKSB7CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9OwogICAgICBUcnVzdGVkU2VydmVycy5jbGVhciA9IGZ1bmN0aW9uKCkgewogICAgICAgIF9zZXJ2ZXJzID0ge307CiAgICAgIH07CiAgICAgIFRydXN0ZWRTZXJ2ZXJzX2RlZmF1bHQgPSBUcnVzdGVkU2VydmVyczsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1Jlc291cmNlLmpzCiAgZnVuY3Rpb24gUmVzb3VyY2Uob3B0aW9ucykgewogICAgb3B0aW9ucyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMsIGRlZmF1bHRWYWx1ZV9kZWZhdWx0LkVNUFRZX09CSkVDVCk7CiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICJzdHJpbmciKSB7CiAgICAgIG9wdGlvbnMgPSB7CiAgICAgICAgdXJsOiBvcHRpb25zCiAgICAgIH07CiAgICB9CiAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5zdHJpbmcoIm9wdGlvbnMudXJsIiwgb3B0aW9ucy51cmwpOwogICAgdGhpcy5fdXJsID0gdm9pZCAwOwogICAgdGhpcy5fdGVtcGxhdGVWYWx1ZXMgPSBkZWZhdWx0Q2xvbmUob3B0aW9ucy50ZW1wbGF0ZVZhbHVlcywge30pOwogICAgdGhpcy5fcXVlcnlQYXJhbWV0ZXJzID0gZGVmYXVsdENsb25lKG9wdGlvbnMucXVlcnlQYXJhbWV0ZXJzLCB7fSk7CiAgICB0aGlzLmhlYWRlcnMgPSBkZWZhdWx0Q2xvbmUob3B0aW9ucy5oZWFkZXJzLCB7fSk7CiAgICB0aGlzLnJlcXVlc3QgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLnJlcXVlc3QsIG5ldyBSZXF1ZXN0X2RlZmF1bHQoKSk7CiAgICB0aGlzLnByb3h5ID0gb3B0aW9ucy5wcm94eTsKICAgIHRoaXMucmV0cnlDYWxsYmFjayA9IG9wdGlvbnMucmV0cnlDYWxsYmFjazsKICAgIHRoaXMucmV0cnlBdHRlbXB0cyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMucmV0cnlBdHRlbXB0cywgMCk7CiAgICB0aGlzLl9yZXRyeUNvdW50ID0gMDsKICAgIGNvbnN0IHBhcnNlVXJsID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5wYXJzZVVybCwgdHJ1ZSk7CiAgICBpZiAocGFyc2VVcmwpIHsKICAgICAgdGhpcy5wYXJzZVVybChvcHRpb25zLnVybCwgdHJ1ZSwgdHJ1ZSk7CiAgICB9IGVsc2UgewogICAgICB0aGlzLl91cmwgPSBvcHRpb25zLnVybDsKICAgIH0KICAgIHRoaXMuX2NyZWRpdHMgPSBvcHRpb25zLmNyZWRpdHM7CiAgfQogIGZ1bmN0aW9uIGRlZmF1bHRDbG9uZSh2YWx1ZSwgZGVmYXVsdFZhbHVlMikgewogICAgcmV0dXJuIGRlZmluZWRfZGVmYXVsdCh2YWx1ZSkgPyBjbG9uZV9kZWZhdWx0KHZhbHVlKSA6IGRlZmF1bHRWYWx1ZTI7CiAgfQogIGZ1bmN0aW9uIHBhcnNlUXVlcnlTdHJpbmcocXVlcnlTdHJpbmcpIHsKICAgIGlmIChxdWVyeVN0cmluZy5sZW5ndGggPT09IDApIHsKICAgICAgcmV0dXJuIHt9OwogICAgfQogICAgaWYgKHF1ZXJ5U3RyaW5nLmluZGV4T2YoIj0iKSA9PT0gLTEpIHsKICAgICAgcmV0dXJuIHsgW3F1ZXJ5U3RyaW5nXTogdm9pZCAwIH07CiAgICB9CiAgICByZXR1cm4gcXVlcnlUb09iamVjdF9kZWZhdWx0KHF1ZXJ5U3RyaW5nKTsKICB9CiAgZnVuY3Rpb24gY29tYmluZVF1ZXJ5UGFyYW1ldGVycyhxMTIsIHEyMiwgcHJlc2VydmVRdWVyeVBhcmFtZXRlcnMpIHsKICAgIGlmICghcHJlc2VydmVRdWVyeVBhcmFtZXRlcnMpIHsKICAgICAgcmV0dXJuIGNvbWJpbmVfZGVmYXVsdChxMTIsIHEyMik7CiAgICB9CiAgICBjb25zdCByZXN1bHQgPSBjbG9uZV9kZWZhdWx0KHExMiwgdHJ1ZSk7CiAgICBmb3IgKGNvbnN0IHBhcmFtIGluIHEyMikgewogICAgICBpZiAocTIyLmhhc093blByb3BlcnR5KHBhcmFtKSkgewogICAgICAgIGxldCB2YWx1ZSA9IHJlc3VsdFtwYXJhbV07CiAgICAgICAgY29uc3QgcTJWYWx1ZSA9IHEyMltwYXJhbV07CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdCh2YWx1ZSkpIHsKICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHsKICAgICAgICAgICAgdmFsdWUgPSByZXN1bHRbcGFyYW1dID0gW3ZhbHVlXTsKICAgICAgICAgIH0KICAgICAgICAgIHJlc3VsdFtwYXJhbV0gPSB2YWx1ZS5jb25jYXQocTJWYWx1ZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlc3VsdFtwYXJhbV0gPSBBcnJheS5pc0FycmF5KHEyVmFsdWUpID8gcTJWYWx1ZS5zbGljZSgpIDogcTJWYWx1ZTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIHJldHVybiByZXN1bHQ7CiAgfQogIGZ1bmN0aW9uIHN0cmluZ2lmeVF1ZXJ5KHF1ZXJ5T2JqZWN0KSB7CiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMocXVlcnlPYmplY3QpOwogICAgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7CiAgICAgIHJldHVybiAiIjsKICAgIH0KICAgIGlmIChrZXlzLmxlbmd0aCA9PT0gMSAmJiAhZGVmaW5lZF9kZWZhdWx0KHF1ZXJ5T2JqZWN0W2tleXNbMF1dKSkgewogICAgICByZXR1cm4gYD8ke2tleXNbMF19YDsKICAgIH0KICAgIHJldHVybiBgPyR7b2JqZWN0VG9RdWVyeV9kZWZhdWx0KHF1ZXJ5T2JqZWN0KX1gOwogIH0KICBmdW5jdGlvbiBmZXRjaEltYWdlKG9wdGlvbnMpIHsKICAgIGNvbnN0IHJlc291cmNlID0gb3B0aW9ucy5yZXNvdXJjZTsKICAgIGNvbnN0IGZsaXBZID0gb3B0aW9ucy5mbGlwWTsKICAgIGNvbnN0IHNraXBDb2xvclNwYWNlQ29udmVyc2lvbiA9IG9wdGlvbnMuc2tpcENvbG9yU3BhY2VDb252ZXJzaW9uOwogICAgY29uc3QgcHJlZmVySW1hZ2VCaXRtYXAgPSBvcHRpb25zLnByZWZlckltYWdlQml0bWFwOwogICAgY29uc3QgcmVxdWVzdCA9IHJlc291cmNlLnJlcXVlc3Q7CiAgICByZXF1ZXN0LnVybCA9IHJlc291cmNlLnVybDsKICAgIHJlcXVlc3QucmVxdWVzdEZ1bmN0aW9uID0gZnVuY3Rpb24oKSB7CiAgICAgIGxldCBjcm9zc09yaWdpbiA9IGZhbHNlOwogICAgICBpZiAoIXJlc291cmNlLmlzRGF0YVVyaSAmJiAhcmVzb3VyY2UuaXNCbG9iVXJpKSB7CiAgICAgICAgY3Jvc3NPcmlnaW4gPSByZXNvdXJjZS5pc0Nyb3NzT3JpZ2luVXJsOwogICAgICB9CiAgICAgIGNvbnN0IGRlZmVycmVkID0gZGVmZXJfZGVmYXVsdCgpOwogICAgICBSZXNvdXJjZS5fSW1wbGVtZW50YXRpb25zLmNyZWF0ZUltYWdlKAogICAgICAgIHJlcXVlc3QsCiAgICAgICAgY3Jvc3NPcmlnaW4sCiAgICAgICAgZGVmZXJyZWQsCiAgICAgICAgZmxpcFksCiAgICAgICAgc2tpcENvbG9yU3BhY2VDb252ZXJzaW9uLAogICAgICAgIHByZWZlckltYWdlQml0bWFwCiAgICAgICk7CiAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlOwogICAgfTsKICAgIGNvbnN0IHByb21pc2UgPSBSZXF1ZXN0U2NoZWR1bGVyX2RlZmF1bHQucmVxdWVzdChyZXF1ZXN0KTsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHByb21pc2UpKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIHJldHVybiBwcm9taXNlLmNhdGNoKGZ1bmN0aW9uKGUpIHsKICAgICAgaWYgKHJlcXVlc3Quc3RhdGUgIT09IFJlcXVlc3RTdGF0ZV9kZWZhdWx0LkZBSUxFRCkgewogICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlKTsKICAgICAgfQogICAgICByZXR1cm4gcmVzb3VyY2UucmV0cnlPbkVycm9yKGUpLnRoZW4oZnVuY3Rpb24ocmV0cnkpIHsKICAgICAgICBpZiAocmV0cnkpIHsKICAgICAgICAgIHJlcXVlc3Quc3RhdGUgPSBSZXF1ZXN0U3RhdGVfZGVmYXVsdC5VTklTU1VFRDsKICAgICAgICAgIHJlcXVlc3QuZGVmZXJyZWQgPSB2b2lkIDA7CiAgICAgICAgICByZXR1cm4gZmV0Y2hJbWFnZSh7CiAgICAgICAgICAgIHJlc291cmNlLAogICAgICAgICAgICBmbGlwWSwKICAgICAgICAgICAgc2tpcENvbG9yU3BhY2VDb252ZXJzaW9uLAogICAgICAgICAgICBwcmVmZXJJbWFnZUJpdG1hcAogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlKTsKICAgICAgfSk7CiAgICB9KTsKICB9CiAgZnVuY3Rpb24gZmV0Y2hKc29ucChyZXNvdXJjZSwgY2FsbGJhY2tQYXJhbWV0ZXJOYW1lLCBmdW5jdGlvbk5hbWUpIHsKICAgIGNvbnN0IGNhbGxiYWNrUXVlcnkgPSB7fTsKICAgIGNhbGxiYWNrUXVlcnlbY2FsbGJhY2tQYXJhbWV0ZXJOYW1lXSA9IGZ1bmN0aW9uTmFtZTsKICAgIHJlc291cmNlLnNldFF1ZXJ5UGFyYW1ldGVycyhjYWxsYmFja1F1ZXJ5KTsKICAgIGNvbnN0IHJlcXVlc3QgPSByZXNvdXJjZS5yZXF1ZXN0OwogICAgY29uc3QgdXJsID0gcmVzb3VyY2UudXJsOwogICAgcmVxdWVzdC51cmwgPSB1cmw7CiAgICByZXF1ZXN0LnJlcXVlc3RGdW5jdGlvbiA9IGZ1bmN0aW9uKCkgewogICAgICBjb25zdCBkZWZlcnJlZCA9IGRlZmVyX2RlZmF1bHQoKTsKICAgICAgd2luZG93W2Z1bmN0aW9uTmFtZV0gPSBmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShkYXRhKTsKICAgICAgICB0cnkgewogICAgICAgICAgZGVsZXRlIHdpbmRvd1tmdW5jdGlvbk5hbWVdOwogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgIHdpbmRvd1tmdW5jdGlvbk5hbWVdID0gdm9pZCAwOwogICAgICAgIH0KICAgICAgfTsKICAgICAgUmVzb3VyY2UuX0ltcGxlbWVudGF0aW9ucy5sb2FkQW5kRXhlY3V0ZVNjcmlwdCh1cmwsIGZ1bmN0aW9uTmFtZSwgZGVmZXJyZWQpOwogICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTsKICAgIH07CiAgICBjb25zdCBwcm9taXNlID0gUmVxdWVzdFNjaGVkdWxlcl9kZWZhdWx0LnJlcXVlc3QocmVxdWVzdCk7CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwcm9taXNlKSkgewogICAgICByZXR1cm47CiAgICB9CiAgICByZXR1cm4gcHJvbWlzZS5jYXRjaChmdW5jdGlvbihlKSB7CiAgICAgIGlmIChyZXF1ZXN0LnN0YXRlICE9PSBSZXF1ZXN0U3RhdGVfZGVmYXVsdC5GQUlMRUQpIHsKICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZSk7CiAgICAgIH0KICAgICAgcmV0dXJuIHJlc291cmNlLnJldHJ5T25FcnJvcihlKS50aGVuKGZ1bmN0aW9uKHJldHJ5KSB7CiAgICAgICAgaWYgKHJldHJ5KSB7CiAgICAgICAgICByZXF1ZXN0LnN0YXRlID0gUmVxdWVzdFN0YXRlX2RlZmF1bHQuVU5JU1NVRUQ7CiAgICAgICAgICByZXF1ZXN0LmRlZmVycmVkID0gdm9pZCAwOwogICAgICAgICAgcmV0dXJuIGZldGNoSnNvbnAocmVzb3VyY2UsIGNhbGxiYWNrUGFyYW1ldGVyTmFtZSwgZnVuY3Rpb25OYW1lKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGUpOwogICAgICB9KTsKICAgIH0pOwogIH0KICBmdW5jdGlvbiBjaGVja0FuZFJlc2V0UmVxdWVzdChyZXF1ZXN0KSB7CiAgICBpZiAocmVxdWVzdC5zdGF0ZSA9PT0gUmVxdWVzdFN0YXRlX2RlZmF1bHQuSVNTVUVEIHx8IHJlcXVlc3Quc3RhdGUgPT09IFJlcXVlc3RTdGF0ZV9kZWZhdWx0LkFDVElWRSkgewogICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yX2RlZmF1bHQoIlRoZSBSZXNvdXJjZSBpcyBhbHJlYWR5IGJlaW5nIGZldGNoZWQuIik7CiAgICB9CiAgICByZXF1ZXN0LnN0YXRlID0gUmVxdWVzdFN0YXRlX2RlZmF1bHQuVU5JU1NVRUQ7CiAgICByZXF1ZXN0LmRlZmVycmVkID0gdm9pZCAwOwogIH0KICBmdW5jdGlvbiBkZWNvZGVEYXRhVXJpVGV4dChpc0Jhc2U2NCwgZGF0YSkgewogICAgY29uc3QgcmVzdWx0ID0gZGVjb2RlVVJJQ29tcG9uZW50KGRhdGEpOwogICAgaWYgKGlzQmFzZTY0KSB7CiAgICAgIHJldHVybiBhdG9iKHJlc3VsdCk7CiAgICB9CiAgICByZXR1cm4gcmVzdWx0OwogIH0KICBmdW5jdGlvbiBkZWNvZGVEYXRhVXJpQXJyYXlCdWZmZXIoaXNCYXNlNjQsIGRhdGEpIHsKICAgIGNvbnN0IGJ5dGVTdHJpbmcgPSBkZWNvZGVEYXRhVXJpVGV4dChpc0Jhc2U2NCwgZGF0YSk7CiAgICBjb25zdCBidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoYnl0ZVN0cmluZy5sZW5ndGgpOwogICAgY29uc3QgdmlldyA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlcik7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVTdHJpbmcubGVuZ3RoOyBpKyspIHsKICAgICAgdmlld1tpXSA9IGJ5dGVTdHJpbmcuY2hhckNvZGVBdChpKTsKICAgIH0KICAgIHJldHVybiBidWZmZXI7CiAgfQogIGZ1bmN0aW9uIGRlY29kZURhdGFVcmkoZGF0YVVyaVJlZ2V4UmVzdWx0LCByZXNwb25zZVR5cGUpIHsKICAgIHJlc3BvbnNlVHlwZSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHJlc3BvbnNlVHlwZSwgIiIpOwogICAgY29uc3QgbWltZVR5cGUgPSBkYXRhVXJpUmVnZXhSZXN1bHRbMV07CiAgICBjb25zdCBpc0Jhc2U2NCA9ICEhZGF0YVVyaVJlZ2V4UmVzdWx0WzJdOwogICAgY29uc3QgZGF0YSA9IGRhdGFVcmlSZWdleFJlc3VsdFszXTsKICAgIGxldCBidWZmZXI7CiAgICBsZXQgcGFyc2VyOwogICAgc3dpdGNoIChyZXNwb25zZVR5cGUpIHsKICAgICAgY2FzZSAiIjoKICAgICAgY2FzZSAidGV4dCI6CiAgICAgICAgcmV0dXJuIGRlY29kZURhdGFVcmlUZXh0KGlzQmFzZTY0LCBkYXRhKTsKICAgICAgY2FzZSAiYXJyYXlidWZmZXIiOgogICAgICAgIHJldHVybiBkZWNvZGVEYXRhVXJpQXJyYXlCdWZmZXIoaXNCYXNlNjQsIGRhdGEpOwogICAgICBjYXNlICJibG9iIjoKICAgICAgICBidWZmZXIgPSBkZWNvZGVEYXRhVXJpQXJyYXlCdWZmZXIoaXNCYXNlNjQsIGRhdGEpOwogICAgICAgIHJldHVybiBuZXcgQmxvYihbYnVmZmVyXSwgewogICAgICAgICAgdHlwZTogbWltZVR5cGUKICAgICAgICB9KTsKICAgICAgY2FzZSAiZG9jdW1lbnQiOgogICAgICAgIHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTsKICAgICAgICByZXR1cm4gcGFyc2VyLnBhcnNlRnJvbVN0cmluZygKICAgICAgICAgIGRlY29kZURhdGFVcmlUZXh0KGlzQmFzZTY0LCBkYXRhKSwKICAgICAgICAgIG1pbWVUeXBlCiAgICAgICAgKTsKICAgICAgY2FzZSAianNvbiI6CiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoZGVjb2RlRGF0YVVyaVRleHQoaXNCYXNlNjQsIGRhdGEpKTsKICAgICAgZGVmYXVsdDoKICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdChgVW5oYW5kbGVkIHJlc3BvbnNlVHlwZTogJHtyZXNwb25zZVR5cGV9YCk7CiAgICB9CiAgfQogIGZ1bmN0aW9uIGxvYWRXaXRoSHR0cFJlcXVlc3QodXJsLCByZXNwb25zZVR5cGUsIG1ldGhvZCwgZGF0YSwgaGVhZGVycywgZGVmZXJyZWQsIG92ZXJyaWRlTWltZVR5cGUpIHsKICAgIGZldGNoKHVybCwgewogICAgICBtZXRob2QsCiAgICAgIGhlYWRlcnMKICAgIH0pLnRoZW4oYXN5bmMgKHJlc3BvbnNlKSA9PiB7CiAgICAgIGlmICghcmVzcG9uc2Uub2spIHsKICAgICAgICBjb25zdCByZXNwb25zZUhlYWRlcnMgPSB7fTsKICAgICAgICByZXNwb25zZS5oZWFkZXJzLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHsKICAgICAgICAgIHJlc3BvbnNlSGVhZGVyc1trZXldID0gdmFsdWU7CiAgICAgICAgfSk7CiAgICAgICAgZGVmZXJyZWQucmVqZWN0KAogICAgICAgICAgbmV3IFJlcXVlc3RFcnJvckV2ZW50X2RlZmF1bHQocmVzcG9uc2Uuc3RhdHVzLCByZXNwb25zZSwgcmVzcG9uc2VIZWFkZXJzKQogICAgICAgICk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIHN3aXRjaCAocmVzcG9uc2VUeXBlKSB7CiAgICAgICAgY2FzZSAidGV4dCI6CiAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHJlc3BvbnNlLnRleHQoKSk7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJqc29uIjoKICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocmVzcG9uc2UuanNvbigpKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKG5ldyBVaW50OEFycmF5KGF3YWl0IHJlc3BvbnNlLmFycmF5QnVmZmVyKCkpLmJ1ZmZlcik7CiAgICAgICAgICBicmVhazsKICAgICAgfQogICAgfSkuY2F0Y2goKCkgPT4gewogICAgICBkZWZlcnJlZC5yZWplY3QobmV3IFJlcXVlc3RFcnJvckV2ZW50X2RlZmF1bHQoKSk7CiAgICB9KTsKICB9CiAgdmFyIGltcG9ydF91cmlqczYsIHhockJsb2JTdXBwb3J0ZWQsIHN1cHBvcnRzSW1hZ2VCaXRtYXBPcHRpb25zUHJvbWlzZSwgZGF0YVVyaVJlZ2V4Miwgbm9YTUxIdHRwUmVxdWVzdCwgUmVzb3VyY2VfZGVmYXVsdDsKICB2YXIgaW5pdF9SZXNvdXJjZSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUmVzb3VyY2UuanMiKCkgewogICAgICBpbXBvcnRfdXJpanM2ID0gX190b0VTTShyZXF1aXJlX1VSSSgpLCAxKTsKICAgICAgaW5pdF9hcHBlbmRGb3J3YXJkU2xhc2goKTsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X2Nsb25lKCk7CiAgICAgIGluaXRfY29tYmluZSgpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmVyKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfZ2V0QWJzb2x1dGVVcmkoKTsKICAgICAgaW5pdF9nZXRCYXNlVXJpKCk7CiAgICAgIGluaXRfZ2V0RXh0ZW5zaW9uRnJvbVVyaSgpOwogICAgICBpbml0X2dldEltYWdlUGl4ZWxzKCk7CiAgICAgIGluaXRfaXNCbG9iVXJpKCk7CiAgICAgIGluaXRfaXNDcm9zc09yaWdpblVybCgpOwogICAgICBpbml0X2lzRGF0YVVyaSgpOwogICAgICBpbml0X2xvYWRBbmRFeGVjdXRlU2NyaXB0KCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X29iamVjdFRvUXVlcnkoKTsKICAgICAgaW5pdF9xdWVyeVRvT2JqZWN0KCk7CiAgICAgIGluaXRfUmVxdWVzdCgpOwogICAgICBpbml0X1JlcXVlc3RFcnJvckV2ZW50KCk7CiAgICAgIGluaXRfUmVxdWVzdFNjaGVkdWxlcigpOwogICAgICBpbml0X1JlcXVlc3RTdGF0ZSgpOwogICAgICBpbml0X1J1bnRpbWVFcnJvcigpOwogICAgICBpbml0X1RydXN0ZWRTZXJ2ZXJzKCk7CiAgICAgIHhockJsb2JTdXBwb3J0ZWQgPSBmdW5jdGlvbigpIHsKICAgICAgICB0cnkgewogICAgICAgICAgY29uc3QgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7CiAgICAgICAgICB4aHIub3BlbigiR0VUIiwgIiMiLCB0cnVlKTsKICAgICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAiYmxvYiI7CiAgICAgICAgICByZXR1cm4geGhyLnJlc3BvbnNlVHlwZSA9PT0gImJsb2IiOwogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgIH0oKTsKICAgICAgUmVzb3VyY2UuY3JlYXRlSWZOZWVkZWQgPSBmdW5jdGlvbihyZXNvdXJjZSkgewogICAgICAgIGlmIChyZXNvdXJjZSBpbnN0YW5jZW9mIFJlc291cmNlKSB7CiAgICAgICAgICByZXR1cm4gcmVzb3VyY2UuZ2V0RGVyaXZlZFJlc291cmNlKHsKICAgICAgICAgICAgcmVxdWVzdDogcmVzb3VyY2UucmVxdWVzdAogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIGlmICh0eXBlb2YgcmVzb3VyY2UgIT09ICJzdHJpbmciKSB7CiAgICAgICAgICByZXR1cm4gcmVzb3VyY2U7CiAgICAgICAgfQogICAgICAgIHJldHVybiBuZXcgUmVzb3VyY2UoewogICAgICAgICAgdXJsOiByZXNvdXJjZQogICAgICAgIH0pOwogICAgICB9OwogICAgICBSZXNvdXJjZS5zdXBwb3J0c0ltYWdlQml0bWFwT3B0aW9ucyA9IGZ1bmN0aW9uKCkgewogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoc3VwcG9ydHNJbWFnZUJpdG1hcE9wdGlvbnNQcm9taXNlKSkgewogICAgICAgICAgcmV0dXJuIHN1cHBvcnRzSW1hZ2VCaXRtYXBPcHRpb25zUHJvbWlzZTsKICAgICAgICB9CiAgICAgICAgaWYgKHR5cGVvZiBjcmVhdGVJbWFnZUJpdG1hcCAhPT0gImZ1bmN0aW9uIikgewogICAgICAgICAgc3VwcG9ydHNJbWFnZUJpdG1hcE9wdGlvbnNQcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGZhbHNlKTsKICAgICAgICAgIHJldHVybiBzdXBwb3J0c0ltYWdlQml0bWFwT3B0aW9uc1Byb21pc2U7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGltYWdlRGF0YVVyaSA9ICJkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFFQUFBQUJDQUlBQUFDUWQxUGVBQUFBQkdkQlRVRUFBRTRnM3JFaURnQUFBQ0JqU0ZKTkFBQjZKZ0FBZ0lRQUFQb0FBQUNBNkFBQWRUQUFBT3BnQUFBNm1BQUFGM0NjdWxFOEFBQUFERWxFUVZRSTEyTmc2R0FBQUFFVUFJbmdFM1ppQUFBQUFFbEZUa1N1UW1DQyI7CiAgICAgICAgc3VwcG9ydHNJbWFnZUJpdG1hcE9wdGlvbnNQcm9taXNlID0gUmVzb3VyY2UuZmV0Y2hCbG9iKHsKICAgICAgICAgIHVybDogaW1hZ2VEYXRhVXJpCiAgICAgICAgfSkudGhlbihmdW5jdGlvbihibG9iKSB7CiAgICAgICAgICBjb25zdCBpbWFnZUJpdG1hcE9wdGlvbnMgPSB7CiAgICAgICAgICAgIGltYWdlT3JpZW50YXRpb246ICJmbGlwWSIsCiAgICAgICAgICAgIC8vIGRlZmF1bHQgaXMgIm5vbmUiCiAgICAgICAgICAgIHByZW11bHRpcGx5QWxwaGE6ICJub25lIiwKICAgICAgICAgICAgLy8gZGVmYXVsdCBpcyAiZGVmYXVsdCIKICAgICAgICAgICAgY29sb3JTcGFjZUNvbnZlcnNpb246ICJub25lIgogICAgICAgICAgICAvLyBkZWZhdWx0IGlzICJkZWZhdWx0IgogICAgICAgICAgfTsKICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChbCiAgICAgICAgICAgIGNyZWF0ZUltYWdlQml0bWFwKGJsb2IsIGltYWdlQml0bWFwT3B0aW9ucyksCiAgICAgICAgICAgIGNyZWF0ZUltYWdlQml0bWFwKGJsb2IpCiAgICAgICAgICBdKTsKICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKGltYWdlQml0bWFwcykgewogICAgICAgICAgY29uc3QgY29sb3JXaXRoT3B0aW9ucyA9IGdldEltYWdlUGl4ZWxzX2RlZmF1bHQoaW1hZ2VCaXRtYXBzWzBdKTsKICAgICAgICAgIGNvbnN0IGNvbG9yV2l0aERlZmF1bHRzID0gZ2V0SW1hZ2VQaXhlbHNfZGVmYXVsdChpbWFnZUJpdG1hcHNbMV0pOwogICAgICAgICAgcmV0dXJuIGNvbG9yV2l0aE9wdGlvbnNbMV0gIT09IGNvbG9yV2l0aERlZmF1bHRzWzFdOwogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKCkgewogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0pOwogICAgICAgIHJldHVybiBzdXBwb3J0c0ltYWdlQml0bWFwT3B0aW9uc1Byb21pc2U7CiAgICAgIH07CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFJlc291cmNlLCB7CiAgICAgICAgLyoqCiAgICAgICAgICogUmV0dXJucyB0cnVlIGlmIGJsb2JzIGFyZSBzdXBwb3J0ZWQuCiAgICAgICAgICoKICAgICAgICAgKiBAbWVtYmVyb2YgUmVzb3VyY2UKICAgICAgICAgKiBAdHlwZSB7Ym9vbGVhbn0KICAgICAgICAgKgogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqLwogICAgICAgIGlzQmxvYlN1cHBvcnRlZDogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHhockJsb2JTdXBwb3J0ZWQ7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoUmVzb3VyY2UucHJvdG90eXBlLCB7CiAgICAgICAgLyoqCiAgICAgICAgICogUXVlcnkgcGFyYW1ldGVycyBhcHBlbmRlZCB0byB0aGUgdXJsLgogICAgICAgICAqCiAgICAgICAgICogQG1lbWJlcm9mIFJlc291cmNlLnByb3RvdHlwZQogICAgICAgICAqIEB0eXBlIHtvYmplY3R9CiAgICAgICAgICoKICAgICAgICAgKiBAcmVhZG9ubHkKICAgICAgICAgKi8KICAgICAgICBxdWVyeVBhcmFtZXRlcnM6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9xdWVyeVBhcmFtZXRlcnM7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBUaGUga2V5L3ZhbHVlIHBhaXJzIHVzZWQgdG8gcmVwbGFjZSB0ZW1wbGF0ZSBwYXJhbWV0ZXJzIGluIHRoZSB1cmwuCiAgICAgICAgICoKICAgICAgICAgKiBAbWVtYmVyb2YgUmVzb3VyY2UucHJvdG90eXBlCiAgICAgICAgICogQHR5cGUge29iamVjdH0KICAgICAgICAgKgogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqLwogICAgICAgIHRlbXBsYXRlVmFsdWVzOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5fdGVtcGxhdGVWYWx1ZXM7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBUaGUgdXJsIHRvIHRoZSByZXNvdXJjZSB3aXRoIHRlbXBsYXRlIHZhbHVlcyByZXBsYWNlZCwgcXVlcnkgc3RyaW5nIGFwcGVuZGVkIGFuZCBlbmNvZGVkIGJ5IHByb3h5IGlmIG9uZSB3YXMgc2V0LgogICAgICAgICAqCiAgICAgICAgICogQG1lbWJlcm9mIFJlc291cmNlLnByb3RvdHlwZQogICAgICAgICAqIEB0eXBlIHtzdHJpbmd9CiAgICAgICAgICovCiAgICAgICAgdXJsOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRVcmxDb21wb25lbnQodHJ1ZSwgdHJ1ZSk7CiAgICAgICAgICB9LAogICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgICAgICB0aGlzLnBhcnNlVXJsKHZhbHVlLCBmYWxzZSwgZmFsc2UpOwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgLyoqCiAgICAgICAgICogVGhlIGZpbGUgZXh0ZW5zaW9uIG9mIHRoZSByZXNvdXJjZS4KICAgICAgICAgKgogICAgICAgICAqIEBtZW1iZXJvZiBSZXNvdXJjZS5wcm90b3R5cGUKICAgICAgICAgKiBAdHlwZSB7c3RyaW5nfQogICAgICAgICAqCiAgICAgICAgICogQHJlYWRvbmx5CiAgICAgICAgICovCiAgICAgICAgZXh0ZW5zaW9uOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gZ2V0RXh0ZW5zaW9uRnJvbVVyaV9kZWZhdWx0KHRoaXMuX3VybCk7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBUcnVlIGlmIHRoZSBSZXNvdXJjZSByZWZlcnMgdG8gYSBkYXRhIFVSSS4KICAgICAgICAgKgogICAgICAgICAqIEBtZW1iZXJvZiBSZXNvdXJjZS5wcm90b3R5cGUKICAgICAgICAgKiBAdHlwZSB7Ym9vbGVhbn0KICAgICAgICAgKi8KICAgICAgICBpc0RhdGFVcmk6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBpc0RhdGFVcmlfZGVmYXVsdCh0aGlzLl91cmwpOwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgLyoqCiAgICAgICAgICogVHJ1ZSBpZiB0aGUgUmVzb3VyY2UgcmVmZXJzIHRvIGEgYmxvYiBVUkkuCiAgICAgICAgICoKICAgICAgICAgKiBAbWVtYmVyb2YgUmVzb3VyY2UucHJvdG90eXBlCiAgICAgICAgICogQHR5cGUge2Jvb2xlYW59CiAgICAgICAgICovCiAgICAgICAgaXNCbG9iVXJpOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gaXNCbG9iVXJpX2RlZmF1bHQodGhpcy5fdXJsKTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIFRydWUgaWYgdGhlIFJlc291cmNlIHJlZmVycyB0byBhIGNyb3NzIG9yaWdpbiBVUkwuCiAgICAgICAgICoKICAgICAgICAgKiBAbWVtYmVyb2YgUmVzb3VyY2UucHJvdG90eXBlCiAgICAgICAgICogQHR5cGUge2Jvb2xlYW59CiAgICAgICAgICovCiAgICAgICAgaXNDcm9zc09yaWdpblVybDogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIGlzQ3Jvc3NPcmlnaW5VcmxfZGVmYXVsdCh0aGlzLl91cmwpOwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgLyoqCiAgICAgICAgICogVHJ1ZSBpZiB0aGUgUmVzb3VyY2UgaGFzIHJlcXVlc3QgaGVhZGVycy4gVGhpcyBpcyBlcXVpdmFsZW50IHRvIGNoZWNraW5nIGlmIHRoZSBoZWFkZXJzIHByb3BlcnR5IGhhcyBhbnkga2V5cy4KICAgICAgICAgKgogICAgICAgICAqIEBtZW1iZXJvZiBSZXNvdXJjZS5wcm90b3R5cGUKICAgICAgICAgKiBAdHlwZSB7Ym9vbGVhbn0KICAgICAgICAgKi8KICAgICAgICBoYXNIZWFkZXJzOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5oZWFkZXJzKS5sZW5ndGggPiAwOwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgLyoqCiAgICAgICAgICogR2V0cyB0aGUgY3JlZGl0cyByZXF1aXJlZCBmb3IgYXR0cmlidXRpb24gb2YgYW4gYXNzZXQuCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKi8KICAgICAgICBjcmVkaXRzOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5fY3JlZGl0czsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgICBSZXNvdXJjZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gdGhpcy5nZXRVcmxDb21wb25lbnQodHJ1ZSwgdHJ1ZSk7CiAgICAgIH07CiAgICAgIFJlc291cmNlLnByb3RvdHlwZS5wYXJzZVVybCA9IGZ1bmN0aW9uKHVybCwgbWVyZ2UsIHByZXNlcnZlUXVlcnksIGJhc2VVcmwpIHsKICAgICAgICBsZXQgdXJpID0gbmV3IGltcG9ydF91cmlqczYuZGVmYXVsdCh1cmwpOwogICAgICAgIGNvbnN0IHF1ZXJ5ID0gcGFyc2VRdWVyeVN0cmluZyh1cmkucXVlcnkoKSk7CiAgICAgICAgdGhpcy5fcXVlcnlQYXJhbWV0ZXJzID0gbWVyZ2UgPyBjb21iaW5lUXVlcnlQYXJhbWV0ZXJzKHF1ZXJ5LCB0aGlzLnF1ZXJ5UGFyYW1ldGVycywgcHJlc2VydmVRdWVyeSkgOiBxdWVyeTsKICAgICAgICB1cmkuc2VhcmNoKCIiKTsKICAgICAgICB1cmkuZnJhZ21lbnQoIiIpOwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoYmFzZVVybCkgJiYgdXJpLnNjaGVtZSgpID09PSAiIikgewogICAgICAgICAgdXJpID0gdXJpLmFic29sdXRlVG8oZ2V0QWJzb2x1dGVVcmlfZGVmYXVsdChiYXNlVXJsKSk7CiAgICAgICAgfQogICAgICAgIHRoaXMuX3VybCA9IHVyaS50b1N0cmluZygpOwogICAgICB9OwogICAgICBSZXNvdXJjZS5wcm90b3R5cGUuZ2V0VXJsQ29tcG9uZW50ID0gZnVuY3Rpb24ocXVlcnksIHByb3h5KSB7CiAgICAgICAgaWYgKHRoaXMuaXNEYXRhVXJpKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy5fdXJsOwogICAgICAgIH0KICAgICAgICBsZXQgdXJsID0gdGhpcy5fdXJsOwogICAgICAgIGlmIChxdWVyeSkgewogICAgICAgICAgdXJsID0gYCR7dXJsfSR7c3RyaW5naWZ5UXVlcnkodGhpcy5xdWVyeVBhcmFtZXRlcnMpfWA7CiAgICAgICAgfQogICAgICAgIHVybCA9IHVybC5yZXBsYWNlKC8lN0IvZywgInsiKS5yZXBsYWNlKC8lN0QvZywgIn0iKTsKICAgICAgICBjb25zdCB0ZW1wbGF0ZVZhbHVlcyA9IHRoaXMuX3RlbXBsYXRlVmFsdWVzOwogICAgICAgIGlmIChPYmplY3Qua2V5cyh0ZW1wbGF0ZVZhbHVlcykubGVuZ3RoID4gMCkgewogICAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UoL3soLio/KX0vZywgZnVuY3Rpb24obWF0Y2gsIGtleSkgewogICAgICAgICAgICBjb25zdCByZXBsYWNlbWVudCA9IHRlbXBsYXRlVmFsdWVzW2tleV07CiAgICAgICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQocmVwbGFjZW1lbnQpKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChyZXBsYWNlbWVudCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIG1hdGNoOwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIGlmIChwcm94eSAmJiBkZWZpbmVkX2RlZmF1bHQodGhpcy5wcm94eSkpIHsKICAgICAgICAgIHVybCA9IHRoaXMucHJveHkuZ2V0VVJMKHVybCk7CiAgICAgICAgfQogICAgICAgIHJldHVybiB1cmw7CiAgICAgIH07CiAgICAgIFJlc291cmNlLnByb3RvdHlwZS5zZXRRdWVyeVBhcmFtZXRlcnMgPSBmdW5jdGlvbihwYXJhbXMsIHVzZUFzRGVmYXVsdCkgewogICAgICAgIGlmICh1c2VBc0RlZmF1bHQpIHsKICAgICAgICAgIHRoaXMuX3F1ZXJ5UGFyYW1ldGVycyA9IGNvbWJpbmVRdWVyeVBhcmFtZXRlcnMoCiAgICAgICAgICAgIHRoaXMuX3F1ZXJ5UGFyYW1ldGVycywKICAgICAgICAgICAgcGFyYW1zLAogICAgICAgICAgICBmYWxzZQogICAgICAgICAgKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy5fcXVlcnlQYXJhbWV0ZXJzID0gY29tYmluZVF1ZXJ5UGFyYW1ldGVycygKICAgICAgICAgICAgcGFyYW1zLAogICAgICAgICAgICB0aGlzLl9xdWVyeVBhcmFtZXRlcnMsCiAgICAgICAgICAgIGZhbHNlCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgfTsKICAgICAgUmVzb3VyY2UucHJvdG90eXBlLmFwcGVuZFF1ZXJ5UGFyYW1ldGVycyA9IGZ1bmN0aW9uKHBhcmFtcykgewogICAgICAgIHRoaXMuX3F1ZXJ5UGFyYW1ldGVycyA9IGNvbWJpbmVRdWVyeVBhcmFtZXRlcnMoCiAgICAgICAgICBwYXJhbXMsCiAgICAgICAgICB0aGlzLl9xdWVyeVBhcmFtZXRlcnMsCiAgICAgICAgICB0cnVlCiAgICAgICAgKTsKICAgICAgfTsKICAgICAgUmVzb3VyY2UucHJvdG90eXBlLnNldFRlbXBsYXRlVmFsdWVzID0gZnVuY3Rpb24odGVtcGxhdGUsIHVzZUFzRGVmYXVsdCkgewogICAgICAgIGlmICh1c2VBc0RlZmF1bHQpIHsKICAgICAgICAgIHRoaXMuX3RlbXBsYXRlVmFsdWVzID0gY29tYmluZV9kZWZhdWx0KHRoaXMuX3RlbXBsYXRlVmFsdWVzLCB0ZW1wbGF0ZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRoaXMuX3RlbXBsYXRlVmFsdWVzID0gY29tYmluZV9kZWZhdWx0KHRlbXBsYXRlLCB0aGlzLl90ZW1wbGF0ZVZhbHVlcyk7CiAgICAgICAgfQogICAgICB9OwogICAgICBSZXNvdXJjZS5wcm90b3R5cGUuZ2V0RGVyaXZlZFJlc291cmNlID0gZnVuY3Rpb24ob3B0aW9ucykgewogICAgICAgIGNvbnN0IHJlc291cmNlID0gdGhpcy5jbG9uZSgpOwogICAgICAgIHJlc291cmNlLl9yZXRyeUNvdW50ID0gMDsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG9wdGlvbnMudXJsKSkgewogICAgICAgICAgY29uc3QgcHJlc2VydmVRdWVyeSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMucHJlc2VydmVRdWVyeVBhcmFtZXRlcnMsIGZhbHNlKTsKICAgICAgICAgIHJlc291cmNlLnBhcnNlVXJsKG9wdGlvbnMudXJsLCB0cnVlLCBwcmVzZXJ2ZVF1ZXJ5LCB0aGlzLl91cmwpOwogICAgICAgIH0KICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG9wdGlvbnMucXVlcnlQYXJhbWV0ZXJzKSkgewogICAgICAgICAgcmVzb3VyY2UuX3F1ZXJ5UGFyYW1ldGVycyA9IGNvbWJpbmVfZGVmYXVsdCgKICAgICAgICAgICAgb3B0aW9ucy5xdWVyeVBhcmFtZXRlcnMsCiAgICAgICAgICAgIHJlc291cmNlLnF1ZXJ5UGFyYW1ldGVycwogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChvcHRpb25zLnRlbXBsYXRlVmFsdWVzKSkgewogICAgICAgICAgcmVzb3VyY2UuX3RlbXBsYXRlVmFsdWVzID0gY29tYmluZV9kZWZhdWx0KAogICAgICAgICAgICBvcHRpb25zLnRlbXBsYXRlVmFsdWVzLAogICAgICAgICAgICByZXNvdXJjZS50ZW1wbGF0ZVZhbHVlcwogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChvcHRpb25zLmhlYWRlcnMpKSB7CiAgICAgICAgICByZXNvdXJjZS5oZWFkZXJzID0gY29tYmluZV9kZWZhdWx0KG9wdGlvbnMuaGVhZGVycywgcmVzb3VyY2UuaGVhZGVycyk7CiAgICAgICAgfQogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQob3B0aW9ucy5wcm94eSkpIHsKICAgICAgICAgIHJlc291cmNlLnByb3h5ID0gb3B0aW9ucy5wcm94eTsKICAgICAgICB9CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChvcHRpb25zLnJlcXVlc3QpKSB7CiAgICAgICAgICByZXNvdXJjZS5yZXF1ZXN0ID0gb3B0aW9ucy5yZXF1ZXN0OwogICAgICAgIH0KICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG9wdGlvbnMucmV0cnlDYWxsYmFjaykpIHsKICAgICAgICAgIHJlc291cmNlLnJldHJ5Q2FsbGJhY2sgPSBvcHRpb25zLnJldHJ5Q2FsbGJhY2s7CiAgICAgICAgfQogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQob3B0aW9ucy5yZXRyeUF0dGVtcHRzKSkgewogICAgICAgICAgcmVzb3VyY2UucmV0cnlBdHRlbXB0cyA9IG9wdGlvbnMucmV0cnlBdHRlbXB0czsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc291cmNlOwogICAgICB9OwogICAgICBSZXNvdXJjZS5wcm90b3R5cGUucmV0cnlPbkVycm9yID0gZnVuY3Rpb24oZXJyb3IpIHsKICAgICAgICBjb25zdCByZXRyeUNhbGxiYWNrID0gdGhpcy5yZXRyeUNhbGxiYWNrOwogICAgICAgIGlmICh0eXBlb2YgcmV0cnlDYWxsYmFjayAhPT0gImZ1bmN0aW9uIiB8fCB0aGlzLl9yZXRyeUNvdW50ID49IHRoaXMucmV0cnlBdHRlbXB0cykgewogICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmYWxzZSk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHRoYXQgPSB0aGlzOwogICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmV0cnlDYWxsYmFjayh0aGlzLCBlcnJvcikpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7CiAgICAgICAgICArK3RoYXQuX3JldHJ5Q291bnQ7CiAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0pOwogICAgICB9OwogICAgICBSZXNvdXJjZS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbihyZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IFJlc291cmNlKHsKICAgICAgICAgICAgdXJsOiB0aGlzLl91cmwsCiAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVyczogdGhpcy5xdWVyeVBhcmFtZXRlcnMsCiAgICAgICAgICAgIHRlbXBsYXRlVmFsdWVzOiB0aGlzLnRlbXBsYXRlVmFsdWVzLAogICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsCiAgICAgICAgICAgIHByb3h5OiB0aGlzLnByb3h5LAogICAgICAgICAgICByZXRyeUNhbGxiYWNrOiB0aGlzLnJldHJ5Q2FsbGJhY2ssCiAgICAgICAgICAgIHJldHJ5QXR0ZW1wdHM6IHRoaXMucmV0cnlBdHRlbXB0cywKICAgICAgICAgICAgcmVxdWVzdDogdGhpcy5yZXF1ZXN0LmNsb25lKCksCiAgICAgICAgICAgIHBhcnNlVXJsOiBmYWxzZSwKICAgICAgICAgICAgY3JlZGl0czogZGVmaW5lZF9kZWZhdWx0KHRoaXMuY3JlZGl0cykgPyB0aGlzLmNyZWRpdHMuc2xpY2UoKSA6IHZvaWQgMAogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5fdXJsID0gdGhpcy5fdXJsOwogICAgICAgIHJlc3VsdC5fcXVlcnlQYXJhbWV0ZXJzID0gY2xvbmVfZGVmYXVsdCh0aGlzLl9xdWVyeVBhcmFtZXRlcnMpOwogICAgICAgIHJlc3VsdC5fdGVtcGxhdGVWYWx1ZXMgPSBjbG9uZV9kZWZhdWx0KHRoaXMuX3RlbXBsYXRlVmFsdWVzKTsKICAgICAgICByZXN1bHQuaGVhZGVycyA9IGNsb25lX2RlZmF1bHQodGhpcy5oZWFkZXJzKTsKICAgICAgICByZXN1bHQucHJveHkgPSB0aGlzLnByb3h5OwogICAgICAgIHJlc3VsdC5yZXRyeUNhbGxiYWNrID0gdGhpcy5yZXRyeUNhbGxiYWNrOwogICAgICAgIHJlc3VsdC5yZXRyeUF0dGVtcHRzID0gdGhpcy5yZXRyeUF0dGVtcHRzOwogICAgICAgIHJlc3VsdC5fcmV0cnlDb3VudCA9IDA7CiAgICAgICAgcmVzdWx0LnJlcXVlc3QgPSB0aGlzLnJlcXVlc3QuY2xvbmUoKTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBSZXNvdXJjZS5wcm90b3R5cGUuZ2V0QmFzZVVyaSA9IGZ1bmN0aW9uKGluY2x1ZGVRdWVyeSkgewogICAgICAgIHJldHVybiBnZXRCYXNlVXJpX2RlZmF1bHQodGhpcy5nZXRVcmxDb21wb25lbnQoaW5jbHVkZVF1ZXJ5KSwgaW5jbHVkZVF1ZXJ5KTsKICAgICAgfTsKICAgICAgUmVzb3VyY2UucHJvdG90eXBlLmFwcGVuZEZvcndhcmRTbGFzaCA9IGZ1bmN0aW9uKCkgewogICAgICAgIHRoaXMuX3VybCA9IGFwcGVuZEZvcndhcmRTbGFzaF9kZWZhdWx0KHRoaXMuX3VybCk7CiAgICAgIH07CiAgICAgIFJlc291cmNlLnByb3RvdHlwZS5mZXRjaEFycmF5QnVmZmVyID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2goewogICAgICAgICAgcmVzcG9uc2VUeXBlOiAiYXJyYXlidWZmZXIiCiAgICAgICAgfSk7CiAgICAgIH07CiAgICAgIFJlc291cmNlLmZldGNoQXJyYXlCdWZmZXIgPSBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgICAgY29uc3QgcmVzb3VyY2UgPSBuZXcgUmVzb3VyY2Uob3B0aW9ucyk7CiAgICAgICAgcmV0dXJuIHJlc291cmNlLmZldGNoQXJyYXlCdWZmZXIoKTsKICAgICAgfTsKICAgICAgUmVzb3VyY2UucHJvdG90eXBlLmZldGNoQmxvYiA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiB0aGlzLmZldGNoKHsKICAgICAgICAgIHJlc3BvbnNlVHlwZTogImJsb2IiCiAgICAgICAgfSk7CiAgICAgIH07CiAgICAgIFJlc291cmNlLmZldGNoQmxvYiA9IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgICBjb25zdCByZXNvdXJjZSA9IG5ldyBSZXNvdXJjZShvcHRpb25zKTsKICAgICAgICByZXR1cm4gcmVzb3VyY2UuZmV0Y2hCbG9iKCk7CiAgICAgIH07CiAgICAgIFJlc291cmNlLnByb3RvdHlwZS5mZXRjaEltYWdlID0gZnVuY3Rpb24ob3B0aW9ucykgewogICAgICAgIG9wdGlvbnMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLCBkZWZhdWx0VmFsdWVfZGVmYXVsdC5FTVBUWV9PQkpFQ1QpOwogICAgICAgIGNvbnN0IHByZWZlckltYWdlQml0bWFwID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5wcmVmZXJJbWFnZUJpdG1hcCwgZmFsc2UpOwogICAgICAgIGNvbnN0IHByZWZlckJsb2IgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLnByZWZlckJsb2IsIGZhbHNlKTsKICAgICAgICBjb25zdCBmbGlwWSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuZmxpcFksIGZhbHNlKTsKICAgICAgICBjb25zdCBza2lwQ29sb3JTcGFjZUNvbnZlcnNpb24gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCgKICAgICAgICAgIG9wdGlvbnMuc2tpcENvbG9yU3BhY2VDb252ZXJzaW9uLAogICAgICAgICAgZmFsc2UKICAgICAgICApOwogICAgICAgIGNoZWNrQW5kUmVzZXRSZXF1ZXN0KHRoaXMucmVxdWVzdCk7CiAgICAgICAgaWYgKCF4aHJCbG9iU3VwcG9ydGVkIHx8IHRoaXMuaXNEYXRhVXJpIHx8IHRoaXMuaXNCbG9iVXJpIHx8ICF0aGlzLmhhc0hlYWRlcnMgJiYgIXByZWZlckJsb2IpIHsKICAgICAgICAgIHJldHVybiBmZXRjaEltYWdlKHsKICAgICAgICAgICAgcmVzb3VyY2U6IHRoaXMsCiAgICAgICAgICAgIGZsaXBZLAogICAgICAgICAgICBza2lwQ29sb3JTcGFjZUNvbnZlcnNpb24sCiAgICAgICAgICAgIHByZWZlckltYWdlQml0bWFwCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgY29uc3QgYmxvYlByb21pc2UgPSB0aGlzLmZldGNoQmxvYigpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGJsb2JQcm9taXNlKSkgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBsZXQgc3VwcG9ydHNJbWFnZUJpdG1hcDsKICAgICAgICBsZXQgdXNlSW1hZ2VCaXRtYXA7CiAgICAgICAgbGV0IGdlbmVyYXRlZEJsb2JSZXNvdXJjZTsKICAgICAgICBsZXQgZ2VuZXJhdGVkQmxvYjsKICAgICAgICByZXR1cm4gUmVzb3VyY2Uuc3VwcG9ydHNJbWFnZUJpdG1hcE9wdGlvbnMoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkgewogICAgICAgICAgc3VwcG9ydHNJbWFnZUJpdG1hcCA9IHJlc3VsdDsKICAgICAgICAgIHVzZUltYWdlQml0bWFwID0gc3VwcG9ydHNJbWFnZUJpdG1hcCAmJiBwcmVmZXJJbWFnZUJpdG1hcDsKICAgICAgICAgIHJldHVybiBibG9iUHJvbWlzZTsKICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKGJsb2IpIHsKICAgICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGJsb2IpKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KICAgICAgICAgIGdlbmVyYXRlZEJsb2IgPSBibG9iOwogICAgICAgICAgaWYgKHVzZUltYWdlQml0bWFwKSB7CiAgICAgICAgICAgIHJldHVybiBSZXNvdXJjZS5jcmVhdGVJbWFnZUJpdG1hcEZyb21CbG9iKGJsb2IsIHsKICAgICAgICAgICAgICBmbGlwWSwKICAgICAgICAgICAgICBwcmVtdWx0aXBseUFscGhhOiBmYWxzZSwKICAgICAgICAgICAgICBza2lwQ29sb3JTcGFjZUNvbnZlcnNpb24KICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgICBjb25zdCBibG9iVXJsID0gd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7CiAgICAgICAgICBnZW5lcmF0ZWRCbG9iUmVzb3VyY2UgPSBuZXcgUmVzb3VyY2UoewogICAgICAgICAgICB1cmw6IGJsb2JVcmwKICAgICAgICAgIH0pOwogICAgICAgICAgcmV0dXJuIGZldGNoSW1hZ2UoewogICAgICAgICAgICByZXNvdXJjZTogZ2VuZXJhdGVkQmxvYlJlc291cmNlLAogICAgICAgICAgICBmbGlwWSwKICAgICAgICAgICAgc2tpcENvbG9yU3BhY2VDb252ZXJzaW9uLAogICAgICAgICAgICBwcmVmZXJJbWFnZUJpdG1hcDogZmFsc2UKICAgICAgICAgIH0pOwogICAgICAgIH0pLnRoZW4oZnVuY3Rpb24oaW1hZ2UpIHsKICAgICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGltYWdlKSkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CiAgICAgICAgICBpbWFnZS5ibG9iID0gZ2VuZXJhdGVkQmxvYjsKICAgICAgICAgIGlmICh1c2VJbWFnZUJpdG1hcCkgewogICAgICAgICAgICByZXR1cm4gaW1hZ2U7CiAgICAgICAgICB9CiAgICAgICAgICB3aW5kb3cuVVJMLnJldm9rZU9iamVjdFVSTChnZW5lcmF0ZWRCbG9iUmVzb3VyY2UudXJsKTsKICAgICAgICAgIHJldHVybiBpbWFnZTsKICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnJvcikgewogICAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChnZW5lcmF0ZWRCbG9iUmVzb3VyY2UpKSB7CiAgICAgICAgICAgIHdpbmRvdy5VUkwucmV2b2tlT2JqZWN0VVJMKGdlbmVyYXRlZEJsb2JSZXNvdXJjZS51cmwpOwogICAgICAgICAgfQogICAgICAgICAgZXJyb3IuYmxvYiA9IGdlbmVyYXRlZEJsb2I7CiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpOwogICAgICAgIH0pOwogICAgICB9OwogICAgICBSZXNvdXJjZS5mZXRjaEltYWdlID0gZnVuY3Rpb24ob3B0aW9ucykgewogICAgICAgIGNvbnN0IHJlc291cmNlID0gbmV3IFJlc291cmNlKG9wdGlvbnMpOwogICAgICAgIHJldHVybiByZXNvdXJjZS5mZXRjaEltYWdlKHsKICAgICAgICAgIGZsaXBZOiBvcHRpb25zLmZsaXBZLAogICAgICAgICAgc2tpcENvbG9yU3BhY2VDb252ZXJzaW9uOiBvcHRpb25zLnNraXBDb2xvclNwYWNlQ29udmVyc2lvbiwKICAgICAgICAgIHByZWZlckJsb2I6IG9wdGlvbnMucHJlZmVyQmxvYiwKICAgICAgICAgIHByZWZlckltYWdlQml0bWFwOiBvcHRpb25zLnByZWZlckltYWdlQml0bWFwCiAgICAgICAgfSk7CiAgICAgIH07CiAgICAgIFJlc291cmNlLnByb3RvdHlwZS5mZXRjaFRleHQgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gdGhpcy5mZXRjaCh7CiAgICAgICAgICByZXNwb25zZVR5cGU6ICJ0ZXh0IgogICAgICAgIH0pOwogICAgICB9OwogICAgICBSZXNvdXJjZS5mZXRjaFRleHQgPSBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgICAgY29uc3QgcmVzb3VyY2UgPSBuZXcgUmVzb3VyY2Uob3B0aW9ucyk7CiAgICAgICAgcmV0dXJuIHJlc291cmNlLmZldGNoVGV4dCgpOwogICAgICB9OwogICAgICBSZXNvdXJjZS5wcm90b3R5cGUuZmV0Y2hKc29uID0gZnVuY3Rpb24oKSB7CiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMuZmV0Y2goewogICAgICAgICAgcmVzcG9uc2VUeXBlOiAidGV4dCIsCiAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgIEFjY2VwdDogImFwcGxpY2F0aW9uL2pzb24sKi8qO3E9MC4wMSIKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwcm9taXNlKSkgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHByb21pc2UudGhlbihmdW5jdGlvbih2YWx1ZSkgewogICAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQodmFsdWUpKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKHZhbHVlKTsKICAgICAgICB9KTsKICAgICAgfTsKICAgICAgUmVzb3VyY2UuZmV0Y2hKc29uID0gZnVuY3Rpb24ob3B0aW9ucykgewogICAgICAgIGNvbnN0IHJlc291cmNlID0gbmV3IFJlc291cmNlKG9wdGlvbnMpOwogICAgICAgIHJldHVybiByZXNvdXJjZS5mZXRjaEpzb24oKTsKICAgICAgfTsKICAgICAgUmVzb3VyY2UucHJvdG90eXBlLmZldGNoWE1MID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2goewogICAgICAgICAgcmVzcG9uc2VUeXBlOiAiZG9jdW1lbnQiLAogICAgICAgICAgb3ZlcnJpZGVNaW1lVHlwZTogInRleHQveG1sIgogICAgICAgIH0pOwogICAgICB9OwogICAgICBSZXNvdXJjZS5mZXRjaFhNTCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgICBjb25zdCByZXNvdXJjZSA9IG5ldyBSZXNvdXJjZShvcHRpb25zKTsKICAgICAgICByZXR1cm4gcmVzb3VyY2UuZmV0Y2hYTUwoKTsKICAgICAgfTsKICAgICAgUmVzb3VyY2UucHJvdG90eXBlLmZldGNoSnNvbnAgPSBmdW5jdGlvbihjYWxsYmFja1BhcmFtZXRlck5hbWUpIHsKICAgICAgICBjYWxsYmFja1BhcmFtZXRlck5hbWUgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChjYWxsYmFja1BhcmFtZXRlck5hbWUsICJjYWxsYmFjayIpOwogICAgICAgIGNoZWNrQW5kUmVzZXRSZXF1ZXN0KHRoaXMucmVxdWVzdCk7CiAgICAgICAgbGV0IGZ1bmN0aW9uTmFtZTsKICAgICAgICBkbyB7CiAgICAgICAgICBmdW5jdGlvbk5hbWUgPSBgbG9hZEpzb25wJHtNYXRoX2RlZmF1bHQubmV4dFJhbmRvbU51bWJlcigpLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDIsIDgpfWA7CiAgICAgICAgfSB3aGlsZSAoZGVmaW5lZF9kZWZhdWx0KHdpbmRvd1tmdW5jdGlvbk5hbWVdKSk7CiAgICAgICAgcmV0dXJuIGZldGNoSnNvbnAodGhpcywgY2FsbGJhY2tQYXJhbWV0ZXJOYW1lLCBmdW5jdGlvbk5hbWUpOwogICAgICB9OwogICAgICBSZXNvdXJjZS5mZXRjaEpzb25wID0gZnVuY3Rpb24ob3B0aW9ucykgewogICAgICAgIGNvbnN0IHJlc291cmNlID0gbmV3IFJlc291cmNlKG9wdGlvbnMpOwogICAgICAgIHJldHVybiByZXNvdXJjZS5mZXRjaEpzb25wKG9wdGlvbnMuY2FsbGJhY2tQYXJhbWV0ZXJOYW1lKTsKICAgICAgfTsKICAgICAgUmVzb3VyY2UucHJvdG90eXBlLl9tYWtlUmVxdWVzdCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgICBjb25zdCByZXNvdXJjZSA9IHRoaXM7CiAgICAgICAgY2hlY2tBbmRSZXNldFJlcXVlc3QocmVzb3VyY2UucmVxdWVzdCk7CiAgICAgICAgY29uc3QgcmVxdWVzdCA9IHJlc291cmNlLnJlcXVlc3Q7CiAgICAgICAgY29uc3QgdXJsID0gcmVzb3VyY2UudXJsOwogICAgICAgIHJlcXVlc3QudXJsID0gdXJsOwogICAgICAgIHJlcXVlc3QucmVxdWVzdEZ1bmN0aW9uID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICBjb25zdCByZXNwb25zZVR5cGUgPSBvcHRpb25zLnJlc3BvbnNlVHlwZTsKICAgICAgICAgIGNvbnN0IGhlYWRlcnMgPSBjb21iaW5lX2RlZmF1bHQob3B0aW9ucy5oZWFkZXJzLCByZXNvdXJjZS5oZWFkZXJzKTsKICAgICAgICAgIGNvbnN0IG92ZXJyaWRlTWltZVR5cGUgPSBvcHRpb25zLm92ZXJyaWRlTWltZVR5cGU7CiAgICAgICAgICBjb25zdCBtZXRob2QgPSBvcHRpb25zLm1ldGhvZDsKICAgICAgICAgIGNvbnN0IGRhdGEgPSBvcHRpb25zLmRhdGE7CiAgICAgICAgICBjb25zdCBkZWZlcnJlZCA9IGRlZmVyX2RlZmF1bHQoKTsKICAgICAgICAgIGNvbnN0IHhociA9IFJlc291cmNlLl9JbXBsZW1lbnRhdGlvbnMubG9hZFdpdGhYaHIoCiAgICAgICAgICAgIHVybCwKICAgICAgICAgICAgcmVzcG9uc2VUeXBlLAogICAgICAgICAgICBtZXRob2QsCiAgICAgICAgICAgIGRhdGEsCiAgICAgICAgICAgIGhlYWRlcnMsCiAgICAgICAgICAgIGRlZmVycmVkLAogICAgICAgICAgICBvdmVycmlkZU1pbWVUeXBlCiAgICAgICAgICApOwogICAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdCh4aHIpICYmIGRlZmluZWRfZGVmYXVsdCh4aHIuYWJvcnQpKSB7CiAgICAgICAgICAgIHJlcXVlc3QuY2FuY2VsRnVuY3Rpb24gPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICB4aHIuYWJvcnQoKTsKICAgICAgICAgICAgfTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlOwogICAgICAgIH07CiAgICAgICAgY29uc3QgcHJvbWlzZSA9IFJlcXVlc3RTY2hlZHVsZXJfZGVmYXVsdC5yZXF1ZXN0KHJlcXVlc3QpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHByb21pc2UpKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIHJldHVybiBwcm9taXNlLnRoZW4oZnVuY3Rpb24oZGF0YSkgewogICAgICAgICAgcmVxdWVzdC5jYW5jZWxGdW5jdGlvbiA9IHZvaWQgMDsKICAgICAgICAgIHJldHVybiBkYXRhOwogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGUpIHsKICAgICAgICAgIHJlcXVlc3QuY2FuY2VsRnVuY3Rpb24gPSB2b2lkIDA7CiAgICAgICAgICBpZiAocmVxdWVzdC5zdGF0ZSAhPT0gUmVxdWVzdFN0YXRlX2RlZmF1bHQuRkFJTEVEKSB7CiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiByZXNvdXJjZS5yZXRyeU9uRXJyb3IoZSkudGhlbihmdW5jdGlvbihyZXRyeSkgewogICAgICAgICAgICBpZiAocmV0cnkpIHsKICAgICAgICAgICAgICByZXF1ZXN0LnN0YXRlID0gUmVxdWVzdFN0YXRlX2RlZmF1bHQuVU5JU1NVRUQ7CiAgICAgICAgICAgICAgcmVxdWVzdC5kZWZlcnJlZCA9IHZvaWQgMDsKICAgICAgICAgICAgICByZXR1cm4gcmVzb3VyY2UuZmV0Y2gob3B0aW9ucyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGUpOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH07CiAgICAgIGRhdGFVcmlSZWdleDIgPSAvXmRhdGE6KC4qPykoO2Jhc2U2NCk/LCguKikkLzsKICAgICAgUmVzb3VyY2UucHJvdG90eXBlLmZldGNoID0gZnVuY3Rpb24ob3B0aW9ucykgewogICAgICAgIG9wdGlvbnMgPSBkZWZhdWx0Q2xvbmUob3B0aW9ucywge30pOwogICAgICAgIG9wdGlvbnMubWV0aG9kID0gIkdFVCI7CiAgICAgICAgcmV0dXJuIHRoaXMuX21ha2VSZXF1ZXN0KG9wdGlvbnMpOwogICAgICB9OwogICAgICBSZXNvdXJjZS5mZXRjaCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgICBjb25zdCByZXNvdXJjZSA9IG5ldyBSZXNvdXJjZShvcHRpb25zKTsKICAgICAgICByZXR1cm4gcmVzb3VyY2UuZmV0Y2goewogICAgICAgICAgLy8gTWFrZSBjb3B5IG9mIGp1c3QgdGhlIG5lZWRlZCBmaWVsZHMgYmVjYXVzZSBoZWFkZXJzIGNhbiBiZSBwYXNzZWQgdG8gYm90aCB0aGUgY29uc3RydWN0b3IgYW5kIHRvIGZldGNoCiAgICAgICAgICByZXNwb25zZVR5cGU6IG9wdGlvbnMucmVzcG9uc2VUeXBlLAogICAgICAgICAgb3ZlcnJpZGVNaW1lVHlwZTogb3B0aW9ucy5vdmVycmlkZU1pbWVUeXBlCiAgICAgICAgfSk7CiAgICAgIH07CiAgICAgIFJlc291cmNlLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgICAgb3B0aW9ucyA9IGRlZmF1bHRDbG9uZShvcHRpb25zLCB7fSk7CiAgICAgICAgb3B0aW9ucy5tZXRob2QgPSAiREVMRVRFIjsKICAgICAgICByZXR1cm4gdGhpcy5fbWFrZVJlcXVlc3Qob3B0aW9ucyk7CiAgICAgIH07CiAgICAgIFJlc291cmNlLmRlbGV0ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgICBjb25zdCByZXNvdXJjZSA9IG5ldyBSZXNvdXJjZShvcHRpb25zKTsKICAgICAgICByZXR1cm4gcmVzb3VyY2UuZGVsZXRlKHsKICAgICAgICAgIC8vIE1ha2UgY29weSBvZiBqdXN0IHRoZSBuZWVkZWQgZmllbGRzIGJlY2F1c2UgaGVhZGVycyBjYW4gYmUgcGFzc2VkIHRvIGJvdGggdGhlIGNvbnN0cnVjdG9yIGFuZCB0byBmZXRjaAogICAgICAgICAgcmVzcG9uc2VUeXBlOiBvcHRpb25zLnJlc3BvbnNlVHlwZSwKICAgICAgICAgIG92ZXJyaWRlTWltZVR5cGU6IG9wdGlvbnMub3ZlcnJpZGVNaW1lVHlwZSwKICAgICAgICAgIGRhdGE6IG9wdGlvbnMuZGF0YQogICAgICAgIH0pOwogICAgICB9OwogICAgICBSZXNvdXJjZS5wcm90b3R5cGUuaGVhZCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgICBvcHRpb25zID0gZGVmYXVsdENsb25lKG9wdGlvbnMsIHt9KTsKICAgICAgICBvcHRpb25zLm1ldGhvZCA9ICJIRUFEIjsKICAgICAgICByZXR1cm4gdGhpcy5fbWFrZVJlcXVlc3Qob3B0aW9ucyk7CiAgICAgIH07CiAgICAgIFJlc291cmNlLmhlYWQgPSBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgICAgY29uc3QgcmVzb3VyY2UgPSBuZXcgUmVzb3VyY2Uob3B0aW9ucyk7CiAgICAgICAgcmV0dXJuIHJlc291cmNlLmhlYWQoewogICAgICAgICAgLy8gTWFrZSBjb3B5IG9mIGp1c3QgdGhlIG5lZWRlZCBmaWVsZHMgYmVjYXVzZSBoZWFkZXJzIGNhbiBiZSBwYXNzZWQgdG8gYm90aCB0aGUgY29uc3RydWN0b3IgYW5kIHRvIGZldGNoCiAgICAgICAgICByZXNwb25zZVR5cGU6IG9wdGlvbnMucmVzcG9uc2VUeXBlLAogICAgICAgICAgb3ZlcnJpZGVNaW1lVHlwZTogb3B0aW9ucy5vdmVycmlkZU1pbWVUeXBlCiAgICAgICAgfSk7CiAgICAgIH07CiAgICAgIFJlc291cmNlLnByb3RvdHlwZS5vcHRpb25zID0gZnVuY3Rpb24ob3B0aW9ucykgewogICAgICAgIG9wdGlvbnMgPSBkZWZhdWx0Q2xvbmUob3B0aW9ucywge30pOwogICAgICAgIG9wdGlvbnMubWV0aG9kID0gIk9QVElPTlMiOwogICAgICAgIHJldHVybiB0aGlzLl9tYWtlUmVxdWVzdChvcHRpb25zKTsKICAgICAgfTsKICAgICAgUmVzb3VyY2Uub3B0aW9ucyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgICBjb25zdCByZXNvdXJjZSA9IG5ldyBSZXNvdXJjZShvcHRpb25zKTsKICAgICAgICByZXR1cm4gcmVzb3VyY2Uub3B0aW9ucyh7CiAgICAgICAgICAvLyBNYWtlIGNvcHkgb2YganVzdCB0aGUgbmVlZGVkIGZpZWxkcyBiZWNhdXNlIGhlYWRlcnMgY2FuIGJlIHBhc3NlZCB0byBib3RoIHRoZSBjb25zdHJ1Y3RvciBhbmQgdG8gZmV0Y2gKICAgICAgICAgIHJlc3BvbnNlVHlwZTogb3B0aW9ucy5yZXNwb25zZVR5cGUsCiAgICAgICAgICBvdmVycmlkZU1pbWVUeXBlOiBvcHRpb25zLm92ZXJyaWRlTWltZVR5cGUKICAgICAgICB9KTsKICAgICAgfTsKICAgICAgUmVzb3VyY2UucHJvdG90eXBlLnBvc3QgPSBmdW5jdGlvbihkYXRhLCBvcHRpb25zKSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJkYXRhIiwgZGF0YSk7CiAgICAgICAgb3B0aW9ucyA9IGRlZmF1bHRDbG9uZShvcHRpb25zLCB7fSk7CiAgICAgICAgb3B0aW9ucy5tZXRob2QgPSAiUE9TVCI7CiAgICAgICAgb3B0aW9ucy5kYXRhID0gZGF0YTsKICAgICAgICByZXR1cm4gdGhpcy5fbWFrZVJlcXVlc3Qob3B0aW9ucyk7CiAgICAgIH07CiAgICAgIFJlc291cmNlLnBvc3QgPSBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgICAgY29uc3QgcmVzb3VyY2UgPSBuZXcgUmVzb3VyY2Uob3B0aW9ucyk7CiAgICAgICAgcmV0dXJuIHJlc291cmNlLnBvc3Qob3B0aW9ucy5kYXRhLCB7CiAgICAgICAgICAvLyBNYWtlIGNvcHkgb2YganVzdCB0aGUgbmVlZGVkIGZpZWxkcyBiZWNhdXNlIGhlYWRlcnMgY2FuIGJlIHBhc3NlZCB0byBib3RoIHRoZSBjb25zdHJ1Y3RvciBhbmQgdG8gcG9zdAogICAgICAgICAgcmVzcG9uc2VUeXBlOiBvcHRpb25zLnJlc3BvbnNlVHlwZSwKICAgICAgICAgIG92ZXJyaWRlTWltZVR5cGU6IG9wdGlvbnMub3ZlcnJpZGVNaW1lVHlwZQogICAgICAgIH0pOwogICAgICB9OwogICAgICBSZXNvdXJjZS5wcm90b3R5cGUucHV0ID0gZnVuY3Rpb24oZGF0YSwgb3B0aW9ucykgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiZGF0YSIsIGRhdGEpOwogICAgICAgIG9wdGlvbnMgPSBkZWZhdWx0Q2xvbmUob3B0aW9ucywge30pOwogICAgICAgIG9wdGlvbnMubWV0aG9kID0gIlBVVCI7CiAgICAgICAgb3B0aW9ucy5kYXRhID0gZGF0YTsKICAgICAgICByZXR1cm4gdGhpcy5fbWFrZVJlcXVlc3Qob3B0aW9ucyk7CiAgICAgIH07CiAgICAgIFJlc291cmNlLnB1dCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgICBjb25zdCByZXNvdXJjZSA9IG5ldyBSZXNvdXJjZShvcHRpb25zKTsKICAgICAgICByZXR1cm4gcmVzb3VyY2UucHV0KG9wdGlvbnMuZGF0YSwgewogICAgICAgICAgLy8gTWFrZSBjb3B5IG9mIGp1c3QgdGhlIG5lZWRlZCBmaWVsZHMgYmVjYXVzZSBoZWFkZXJzIGNhbiBiZSBwYXNzZWQgdG8gYm90aCB0aGUgY29uc3RydWN0b3IgYW5kIHRvIHBvc3QKICAgICAgICAgIHJlc3BvbnNlVHlwZTogb3B0aW9ucy5yZXNwb25zZVR5cGUsCiAgICAgICAgICBvdmVycmlkZU1pbWVUeXBlOiBvcHRpb25zLm92ZXJyaWRlTWltZVR5cGUKICAgICAgICB9KTsKICAgICAgfTsKICAgICAgUmVzb3VyY2UucHJvdG90eXBlLnBhdGNoID0gZnVuY3Rpb24oZGF0YSwgb3B0aW9ucykgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiZGF0YSIsIGRhdGEpOwogICAgICAgIG9wdGlvbnMgPSBkZWZhdWx0Q2xvbmUob3B0aW9ucywge30pOwogICAgICAgIG9wdGlvbnMubWV0aG9kID0gIlBBVENIIjsKICAgICAgICBvcHRpb25zLmRhdGEgPSBkYXRhOwogICAgICAgIHJldHVybiB0aGlzLl9tYWtlUmVxdWVzdChvcHRpb25zKTsKICAgICAgfTsKICAgICAgUmVzb3VyY2UucGF0Y2ggPSBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgICAgY29uc3QgcmVzb3VyY2UgPSBuZXcgUmVzb3VyY2Uob3B0aW9ucyk7CiAgICAgICAgcmV0dXJuIHJlc291cmNlLnBhdGNoKG9wdGlvbnMuZGF0YSwgewogICAgICAgICAgLy8gTWFrZSBjb3B5IG9mIGp1c3QgdGhlIG5lZWRlZCBmaWVsZHMgYmVjYXVzZSBoZWFkZXJzIGNhbiBiZSBwYXNzZWQgdG8gYm90aCB0aGUgY29uc3RydWN0b3IgYW5kIHRvIHBvc3QKICAgICAgICAgIHJlc3BvbnNlVHlwZTogb3B0aW9ucy5yZXNwb25zZVR5cGUsCiAgICAgICAgICBvdmVycmlkZU1pbWVUeXBlOiBvcHRpb25zLm92ZXJyaWRlTWltZVR5cGUKICAgICAgICB9KTsKICAgICAgfTsKICAgICAgUmVzb3VyY2UuX0ltcGxlbWVudGF0aW9ucyA9IHt9OwogICAgICBSZXNvdXJjZS5fSW1wbGVtZW50YXRpb25zLmxvYWRJbWFnZUVsZW1lbnQgPSBmdW5jdGlvbih1cmwsIGNyb3NzT3JpZ2luLCBkZWZlcnJlZCkgewogICAgICAgIGNvbnN0IGltYWdlID0gbmV3IEltYWdlKCk7CiAgICAgICAgaW1hZ2Uub25sb2FkID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICBpZiAoaW1hZ2UubmF0dXJhbFdpZHRoID09PSAwICYmIGltYWdlLm5hdHVyYWxIZWlnaHQgPT09IDAgJiYgaW1hZ2Uud2lkdGggPT09IDAgJiYgaW1hZ2UuaGVpZ2h0ID09PSAwKSB7CiAgICAgICAgICAgIGltYWdlLndpZHRoID0gMzAwOwogICAgICAgICAgICBpbWFnZS5oZWlnaHQgPSAxNTA7CiAgICAgICAgICB9CiAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGltYWdlKTsKICAgICAgICB9OwogICAgICAgIGltYWdlLm9uZXJyb3IgPSBmdW5jdGlvbihlKSB7CiAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoZSk7CiAgICAgICAgfTsKICAgICAgICBpZiAoY3Jvc3NPcmlnaW4pIHsKICAgICAgICAgIGlmIChUcnVzdGVkU2VydmVyc19kZWZhdWx0LmNvbnRhaW5zKHVybCkpIHsKICAgICAgICAgICAgaW1hZ2UuY3Jvc3NPcmlnaW4gPSAidXNlLWNyZWRlbnRpYWxzIjsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGltYWdlLmNyb3NzT3JpZ2luID0gIiI7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGltYWdlLnNyYyA9IHVybDsKICAgICAgfTsKICAgICAgUmVzb3VyY2UuX0ltcGxlbWVudGF0aW9ucy5jcmVhdGVJbWFnZSA9IGZ1bmN0aW9uKHJlcXVlc3QsIGNyb3NzT3JpZ2luLCBkZWZlcnJlZCwgZmxpcFksIHNraXBDb2xvclNwYWNlQ29udmVyc2lvbiwgcHJlZmVySW1hZ2VCaXRtYXApIHsKICAgICAgICBjb25zdCB1cmwgPSByZXF1ZXN0LnVybDsKICAgICAgICBSZXNvdXJjZS5zdXBwb3J0c0ltYWdlQml0bWFwT3B0aW9ucygpLnRoZW4oZnVuY3Rpb24oc3VwcG9ydHNJbWFnZUJpdG1hcCkgewogICAgICAgICAgaWYgKCEoc3VwcG9ydHNJbWFnZUJpdG1hcCAmJiBwcmVmZXJJbWFnZUJpdG1hcCkpIHsKICAgICAgICAgICAgUmVzb3VyY2UuX0ltcGxlbWVudGF0aW9ucy5sb2FkSW1hZ2VFbGVtZW50KHVybCwgY3Jvc3NPcmlnaW4sIGRlZmVycmVkKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQogICAgICAgICAgY29uc3QgcmVzcG9uc2VUeXBlID0gImJsb2IiOwogICAgICAgICAgY29uc3QgbWV0aG9kID0gIkdFVCI7CiAgICAgICAgICBjb25zdCB4aHJEZWZlcnJlZCA9IGRlZmVyX2RlZmF1bHQoKTsKICAgICAgICAgIGNvbnN0IHhociA9IFJlc291cmNlLl9JbXBsZW1lbnRhdGlvbnMubG9hZFdpdGhYaHIoCiAgICAgICAgICAgIHVybCwKICAgICAgICAgICAgcmVzcG9uc2VUeXBlLAogICAgICAgICAgICBtZXRob2QsCiAgICAgICAgICAgIHZvaWQgMCwKICAgICAgICAgICAgdm9pZCAwLAogICAgICAgICAgICB4aHJEZWZlcnJlZCwKICAgICAgICAgICAgdm9pZCAwLAogICAgICAgICAgICB2b2lkIDAsCiAgICAgICAgICAgIHZvaWQgMAogICAgICAgICAgKTsKICAgICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoeGhyKSAmJiBkZWZpbmVkX2RlZmF1bHQoeGhyLmFib3J0KSkgewogICAgICAgICAgICByZXF1ZXN0LmNhbmNlbEZ1bmN0aW9uID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgeGhyLmFib3J0KCk7CiAgICAgICAgICAgIH07CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4geGhyRGVmZXJyZWQucHJvbWlzZS50aGVuKGZ1bmN0aW9uKGJsb2IpIHsKICAgICAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoYmxvYikpIHsKICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoCiAgICAgICAgICAgICAgICBuZXcgUnVudGltZUVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgICAgICAgIGBTdWNjZXNzZnVsbHkgcmV0cmlldmVkICR7dXJsfSBidXQgaXQgY29udGFpbmVkIG5vIGNvbnRlbnQuYAogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBSZXNvdXJjZS5jcmVhdGVJbWFnZUJpdG1hcEZyb21CbG9iKGJsb2IsIHsKICAgICAgICAgICAgICBmbGlwWSwKICAgICAgICAgICAgICBwcmVtdWx0aXBseUFscGhhOiBmYWxzZSwKICAgICAgICAgICAgICBza2lwQ29sb3JTcGFjZUNvbnZlcnNpb24KICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKGltYWdlKSB7CiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoaW1hZ2UpOwogICAgICAgICAgfSk7CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZSkgewogICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGUpOwogICAgICAgIH0pOwogICAgICB9OwogICAgICBSZXNvdXJjZS5jcmVhdGVJbWFnZUJpdG1hcEZyb21CbG9iID0gZnVuY3Rpb24oYmxvYiwgb3B0aW9ucykgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgib3B0aW9ucyIsIG9wdGlvbnMpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLmJvb2woIm9wdGlvbnMuZmxpcFkiLCBvcHRpb25zLmZsaXBZKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5ib29sKCJvcHRpb25zLnByZW11bHRpcGx5QWxwaGEiLCBvcHRpb25zLnByZW11bHRpcGx5QWxwaGEpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLmJvb2woCiAgICAgICAgICAib3B0aW9ucy5za2lwQ29sb3JTcGFjZUNvbnZlcnNpb24iLAogICAgICAgICAgb3B0aW9ucy5za2lwQ29sb3JTcGFjZUNvbnZlcnNpb24KICAgICAgICApOwogICAgICAgIHJldHVybiBjcmVhdGVJbWFnZUJpdG1hcChibG9iLCB7CiAgICAgICAgICBpbWFnZU9yaWVudGF0aW9uOiBvcHRpb25zLmZsaXBZID8gImZsaXBZIiA6ICJub25lIiwKICAgICAgICAgIHByZW11bHRpcGx5QWxwaGE6IG9wdGlvbnMucHJlbXVsdGlwbHlBbHBoYSA/ICJwcmVtdWx0aXBseSIgOiAibm9uZSIsCiAgICAgICAgICBjb2xvclNwYWNlQ29udmVyc2lvbjogb3B0aW9ucy5za2lwQ29sb3JTcGFjZUNvbnZlcnNpb24gPyAibm9uZSIgOiAiZGVmYXVsdCIKICAgICAgICB9KTsKICAgICAgfTsKICAgICAgbm9YTUxIdHRwUmVxdWVzdCA9IHR5cGVvZiBYTUxIdHRwUmVxdWVzdCA9PT0gInVuZGVmaW5lZCI7CiAgICAgIFJlc291cmNlLl9JbXBsZW1lbnRhdGlvbnMubG9hZFdpdGhYaHIgPSBmdW5jdGlvbih1cmwsIHJlc3BvbnNlVHlwZSwgbWV0aG9kLCBkYXRhLCBoZWFkZXJzLCBkZWZlcnJlZCwgb3ZlcnJpZGVNaW1lVHlwZSkgewogICAgICAgIGNvbnN0IGRhdGFVcmlSZWdleFJlc3VsdCA9IGRhdGFVcmlSZWdleDIuZXhlYyh1cmwpOwogICAgICAgIGlmIChkYXRhVXJpUmVnZXhSZXN1bHQgIT09IG51bGwpIHsKICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoZGVjb2RlRGF0YVVyaShkYXRhVXJpUmVnZXhSZXN1bHQsIHJlc3BvbnNlVHlwZSkpOwogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBpZiAobm9YTUxIdHRwUmVxdWVzdCkgewogICAgICAgICAgbG9hZFdpdGhIdHRwUmVxdWVzdCgKICAgICAgICAgICAgdXJsLAogICAgICAgICAgICByZXNwb25zZVR5cGUsCiAgICAgICAgICAgIG1ldGhvZCwKICAgICAgICAgICAgZGF0YSwKICAgICAgICAgICAgaGVhZGVycywKICAgICAgICAgICAgZGVmZXJyZWQsCiAgICAgICAgICAgIG92ZXJyaWRlTWltZVR5cGUKICAgICAgICAgICk7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGNvbnN0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpOwogICAgICAgIGlmIChUcnVzdGVkU2VydmVyc19kZWZhdWx0LmNvbnRhaW5zKHVybCkpIHsKICAgICAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlOwogICAgICAgIH0KICAgICAgICB4aHIub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChvdmVycmlkZU1pbWVUeXBlKSAmJiBkZWZpbmVkX2RlZmF1bHQoeGhyLm92ZXJyaWRlTWltZVR5cGUpKSB7CiAgICAgICAgICB4aHIub3ZlcnJpZGVNaW1lVHlwZShvdmVycmlkZU1pbWVUeXBlKTsKICAgICAgICB9CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChoZWFkZXJzKSkgewogICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gaGVhZGVycykgewogICAgICAgICAgICBpZiAoaGVhZGVycy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7CiAgICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoa2V5LCBoZWFkZXJzW2tleV0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQocmVzcG9uc2VUeXBlKSkgewogICAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9IHJlc3BvbnNlVHlwZTsKICAgICAgICB9CiAgICAgICAgbGV0IGxvY2FsRmlsZSA9IGZhbHNlOwogICAgICAgIGlmICh0eXBlb2YgdXJsID09PSAic3RyaW5nIikgewogICAgICAgICAgbG9jYWxGaWxlID0gdXJsLmluZGV4T2YoImZpbGU6Ly8iKSA9PT0gMCB8fCB0eXBlb2Ygd2luZG93ICE9PSAidW5kZWZpbmVkIiAmJiB3aW5kb3cubG9jYXRpb24ub3JpZ2luID09PSAiZmlsZTovLyI7CiAgICAgICAgfQogICAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbigpIHsKICAgICAgICAgIGlmICgoeGhyLnN0YXR1cyA8IDIwMCB8fCB4aHIuc3RhdHVzID49IDMwMCkgJiYgIShsb2NhbEZpbGUgJiYgeGhyLnN0YXR1cyA9PT0gMCkpIHsKICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KAogICAgICAgICAgICAgIG5ldyBSZXF1ZXN0RXJyb3JFdmVudF9kZWZhdWx0KAogICAgICAgICAgICAgICAgeGhyLnN0YXR1cywKICAgICAgICAgICAgICAgIHhoci5yZXNwb25zZSwKICAgICAgICAgICAgICAgIHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKQogICAgICAgICAgICAgICkKICAgICAgICAgICAgKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQogICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB4aHIucmVzcG9uc2U7CiAgICAgICAgICBjb25zdCBicm93c2VyUmVzcG9uc2VUeXBlID0geGhyLnJlc3BvbnNlVHlwZTsKICAgICAgICAgIGlmIChtZXRob2QgPT09ICJIRUFEIiB8fCBtZXRob2QgPT09ICJPUFRJT05TIikgewogICAgICAgICAgICBjb25zdCByZXNwb25zZUhlYWRlclN0cmluZyA9IHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKTsKICAgICAgICAgICAgY29uc3Qgc3BsaXRIZWFkZXJzID0gcmVzcG9uc2VIZWFkZXJTdHJpbmcudHJpbSgpLnNwbGl0KC9bXHJcbl0rLyk7CiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlSGVhZGVycyA9IHt9OwogICAgICAgICAgICBzcGxpdEhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbihsaW5lKSB7CiAgICAgICAgICAgICAgY29uc3QgcGFydHMgPSBsaW5lLnNwbGl0KCI6ICIpOwogICAgICAgICAgICAgIGNvbnN0IGhlYWRlciA9IHBhcnRzLnNoaWZ0KCk7CiAgICAgICAgICAgICAgcmVzcG9uc2VIZWFkZXJzW2hlYWRlcl0gPSBwYXJ0cy5qb2luKCI6ICIpOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShyZXNwb25zZUhlYWRlcnMpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjA0KSB7CiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUodm9pZCAwKTsKICAgICAgICAgIH0gZWxzZSBpZiAoZGVmaW5lZF9kZWZhdWx0KHJlc3BvbnNlKSAmJiAoIWRlZmluZWRfZGVmYXVsdChyZXNwb25zZVR5cGUpIHx8IGJyb3dzZXJSZXNwb25zZVR5cGUgPT09IHJlc3BvbnNlVHlwZSkpIHsKICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShyZXNwb25zZSk7CiAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlVHlwZSA9PT0gImpzb24iICYmIHR5cGVvZiByZXNwb25zZSA9PT0gInN0cmluZyIpIHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKEpTT04ucGFyc2UocmVzcG9uc2UpKTsKICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIGlmICgoYnJvd3NlclJlc3BvbnNlVHlwZSA9PT0gIiIgfHwgYnJvd3NlclJlc3BvbnNlVHlwZSA9PT0gImRvY3VtZW50IikgJiYgZGVmaW5lZF9kZWZhdWx0KHhoci5yZXNwb25zZVhNTCkgJiYgeGhyLnJlc3BvbnNlWE1MLmhhc0NoaWxkTm9kZXMoKSkgewogICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHhoci5yZXNwb25zZVhNTCk7CiAgICAgICAgICB9IGVsc2UgaWYgKChicm93c2VyUmVzcG9uc2VUeXBlID09PSAiIiB8fCBicm93c2VyUmVzcG9uc2VUeXBlID09PSAidGV4dCIpICYmIGRlZmluZWRfZGVmYXVsdCh4aHIucmVzcG9uc2VUZXh0KSkgewogICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHhoci5yZXNwb25zZVRleHQpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KAogICAgICAgICAgICAgIG5ldyBSdW50aW1lRXJyb3JfZGVmYXVsdCgiSW52YWxpZCBYTUxIdHRwUmVxdWVzdCByZXNwb25zZSB0eXBlLiIpCiAgICAgICAgICAgICk7CiAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uKGUpIHsKICAgICAgICAgIGRlZmVycmVkLnJlamVjdChuZXcgUmVxdWVzdEVycm9yRXZlbnRfZGVmYXVsdCgpKTsKICAgICAgICB9OwogICAgICAgIHhoci5zZW5kKGRhdGEpOwogICAgICAgIHJldHVybiB4aHI7CiAgICAgIH07CiAgICAgIFJlc291cmNlLl9JbXBsZW1lbnRhdGlvbnMubG9hZEFuZEV4ZWN1dGVTY3JpcHQgPSBmdW5jdGlvbih1cmwsIGZ1bmN0aW9uTmFtZSwgZGVmZXJyZWQpIHsKICAgICAgICByZXR1cm4gbG9hZEFuZEV4ZWN1dGVTY3JpcHRfZGVmYXVsdCh1cmwsIGZ1bmN0aW9uTmFtZSkuY2F0Y2goZnVuY3Rpb24oZSkgewogICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGUpOwogICAgICAgIH0pOwogICAgICB9OwogICAgICBSZXNvdXJjZS5fRGVmYXVsdEltcGxlbWVudGF0aW9ucyA9IHt9OwogICAgICBSZXNvdXJjZS5fRGVmYXVsdEltcGxlbWVudGF0aW9ucy5jcmVhdGVJbWFnZSA9IFJlc291cmNlLl9JbXBsZW1lbnRhdGlvbnMuY3JlYXRlSW1hZ2U7CiAgICAgIFJlc291cmNlLl9EZWZhdWx0SW1wbGVtZW50YXRpb25zLmxvYWRXaXRoWGhyID0gUmVzb3VyY2UuX0ltcGxlbWVudGF0aW9ucy5sb2FkV2l0aFhocjsKICAgICAgUmVzb3VyY2UuX0RlZmF1bHRJbXBsZW1lbnRhdGlvbnMubG9hZEFuZEV4ZWN1dGVTY3JpcHQgPSBSZXNvdXJjZS5fSW1wbGVtZW50YXRpb25zLmxvYWRBbmRFeGVjdXRlU2NyaXB0OwogICAgICBSZXNvdXJjZS5ERUZBVUxUID0gT2JqZWN0LmZyZWV6ZSgKICAgICAgICBuZXcgUmVzb3VyY2UoewogICAgICAgICAgdXJsOiB0eXBlb2YgZG9jdW1lbnQgPT09ICJ1bmRlZmluZWQiID8gIiIgOiBkb2N1bWVudC5sb2NhdGlvbi5ocmVmLnNwbGl0KCI/IilbMF0KICAgICAgICB9KQogICAgICApOwogICAgICBSZXNvdXJjZV9kZWZhdWx0ID0gUmVzb3VyY2U7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9FYXJ0aE9yaWVudGF0aW9uUGFyYW1ldGVycy5qcwogIGZ1bmN0aW9uIEVhcnRoT3JpZW50YXRpb25QYXJhbWV0ZXJzKG9wdGlvbnMpIHsKICAgIG9wdGlvbnMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLCBkZWZhdWx0VmFsdWVfZGVmYXVsdC5FTVBUWV9PQkpFQ1QpOwogICAgdGhpcy5fZGF0ZXMgPSB2b2lkIDA7CiAgICB0aGlzLl9zYW1wbGVzID0gdm9pZCAwOwogICAgdGhpcy5fZGF0ZUNvbHVtbiA9IC0xOwogICAgdGhpcy5feFBvbGVXYW5kZXJSYWRpYW5zQ29sdW1uID0gLTE7CiAgICB0aGlzLl95UG9sZVdhbmRlclJhZGlhbnNDb2x1bW4gPSAtMTsKICAgIHRoaXMuX3V0MU1pbnVzVXRjU2Vjb25kc0NvbHVtbiA9IC0xOwogICAgdGhpcy5feENlbGVzdGlhbFBvbGVPZmZzZXRSYWRpYW5zQ29sdW1uID0gLTE7CiAgICB0aGlzLl95Q2VsZXN0aWFsUG9sZU9mZnNldFJhZGlhbnNDb2x1bW4gPSAtMTsKICAgIHRoaXMuX3RhaU1pbnVzVXRjU2Vjb25kc0NvbHVtbiA9IC0xOwogICAgdGhpcy5fY29sdW1uQ291bnQgPSAwOwogICAgdGhpcy5fbGFzdEluZGV4ID0gLTE7CiAgICB0aGlzLl9hZGROZXdMZWFwU2Vjb25kcyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuYWRkTmV3TGVhcFNlY29uZHMsIHRydWUpOwogICAgaWYgKGRlZmluZWRfZGVmYXVsdChvcHRpb25zLmRhdGEpKSB7CiAgICAgIG9uRGF0YVJlYWR5KHRoaXMsIG9wdGlvbnMuZGF0YSk7CiAgICB9IGVsc2UgewogICAgICBvbkRhdGFSZWFkeSh0aGlzLCB7CiAgICAgICAgY29sdW1uTmFtZXM6IFsKICAgICAgICAgICJkYXRlSXNvODYwMSIsCiAgICAgICAgICAibW9kaWZpZWRKdWxpYW5EYXRlVXRjIiwKICAgICAgICAgICJ4UG9sZVdhbmRlclJhZGlhbnMiLAogICAgICAgICAgInlQb2xlV2FuZGVyUmFkaWFucyIsCiAgICAgICAgICAidXQxTWludXNVdGNTZWNvbmRzIiwKICAgICAgICAgICJsZW5ndGhPZkRheUNvcnJlY3Rpb25TZWNvbmRzIiwKICAgICAgICAgICJ4Q2VsZXN0aWFsUG9sZU9mZnNldFJhZGlhbnMiLAogICAgICAgICAgInlDZWxlc3RpYWxQb2xlT2Zmc2V0UmFkaWFucyIsCiAgICAgICAgICAidGFpTWludXNVdGNTZWNvbmRzIgogICAgICAgIF0sCiAgICAgICAgc2FtcGxlczogW10KICAgICAgfSk7CiAgICB9CiAgfQogIGZ1bmN0aW9uIGNvbXBhcmVMZWFwU2Vjb25kRGF0ZXMyKGxlYXBTZWNvbmQsIGRhdGVUb0ZpbmQpIHsKICAgIHJldHVybiBKdWxpYW5EYXRlX2RlZmF1bHQuY29tcGFyZShsZWFwU2Vjb25kLmp1bGlhbkRhdGUsIGRhdGVUb0ZpbmQpOwogIH0KICBmdW5jdGlvbiBvbkRhdGFSZWFkeShlb3AsIGVvcERhdGEpIHsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGVvcERhdGEuY29sdW1uTmFtZXMpKSB7CiAgICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3JfZGVmYXVsdCgKICAgICAgICAiRXJyb3IgaW4gbG9hZGVkIEVPUCBkYXRhOiBUaGUgY29sdW1uTmFtZXMgcHJvcGVydHkgaXMgcmVxdWlyZWQuIgogICAgICApOwogICAgfQogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoZW9wRGF0YS5zYW1wbGVzKSkgewogICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yX2RlZmF1bHQoCiAgICAgICAgIkVycm9yIGluIGxvYWRlZCBFT1AgZGF0YTogVGhlIHNhbXBsZXMgcHJvcGVydHkgaXMgcmVxdWlyZWQuIgogICAgICApOwogICAgfQogICAgY29uc3QgZGF0ZUNvbHVtbiA9IGVvcERhdGEuY29sdW1uTmFtZXMuaW5kZXhPZigibW9kaWZpZWRKdWxpYW5EYXRlVXRjIik7CiAgICBjb25zdCB4UG9sZVdhbmRlclJhZGlhbnNDb2x1bW4gPSBlb3BEYXRhLmNvbHVtbk5hbWVzLmluZGV4T2YoInhQb2xlV2FuZGVyUmFkaWFucyIpOwogICAgY29uc3QgeVBvbGVXYW5kZXJSYWRpYW5zQ29sdW1uID0gZW9wRGF0YS5jb2x1bW5OYW1lcy5pbmRleE9mKCJ5UG9sZVdhbmRlclJhZGlhbnMiKTsKICAgIGNvbnN0IHV0MU1pbnVzVXRjU2Vjb25kc0NvbHVtbiA9IGVvcERhdGEuY29sdW1uTmFtZXMuaW5kZXhPZigidXQxTWludXNVdGNTZWNvbmRzIik7CiAgICBjb25zdCB4Q2VsZXN0aWFsUG9sZU9mZnNldFJhZGlhbnNDb2x1bW4gPSBlb3BEYXRhLmNvbHVtbk5hbWVzLmluZGV4T2YoCiAgICAgICJ4Q2VsZXN0aWFsUG9sZU9mZnNldFJhZGlhbnMiCiAgICApOwogICAgY29uc3QgeUNlbGVzdGlhbFBvbGVPZmZzZXRSYWRpYW5zQ29sdW1uID0gZW9wRGF0YS5jb2x1bW5OYW1lcy5pbmRleE9mKAogICAgICAieUNlbGVzdGlhbFBvbGVPZmZzZXRSYWRpYW5zIgogICAgKTsKICAgIGNvbnN0IHRhaU1pbnVzVXRjU2Vjb25kc0NvbHVtbiA9IGVvcERhdGEuY29sdW1uTmFtZXMuaW5kZXhPZigidGFpTWludXNVdGNTZWNvbmRzIik7CiAgICBpZiAoZGF0ZUNvbHVtbiA8IDAgfHwgeFBvbGVXYW5kZXJSYWRpYW5zQ29sdW1uIDwgMCB8fCB5UG9sZVdhbmRlclJhZGlhbnNDb2x1bW4gPCAwIHx8IHV0MU1pbnVzVXRjU2Vjb25kc0NvbHVtbiA8IDAgfHwgeENlbGVzdGlhbFBvbGVPZmZzZXRSYWRpYW5zQ29sdW1uIDwgMCB8fCB5Q2VsZXN0aWFsUG9sZU9mZnNldFJhZGlhbnNDb2x1bW4gPCAwIHx8IHRhaU1pbnVzVXRjU2Vjb25kc0NvbHVtbiA8IDApIHsKICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcl9kZWZhdWx0KAogICAgICAgICJFcnJvciBpbiBsb2FkZWQgRU9QIGRhdGE6IFRoZSBjb2x1bW5OYW1lcyBwcm9wZXJ0eSBtdXN0IGluY2x1ZGUgbW9kaWZpZWRKdWxpYW5EYXRlVXRjLCB4UG9sZVdhbmRlclJhZGlhbnMsIHlQb2xlV2FuZGVyUmFkaWFucywgdXQxTWludXNVdGNTZWNvbmRzLCB4Q2VsZXN0aWFsUG9sZU9mZnNldFJhZGlhbnMsIHlDZWxlc3RpYWxQb2xlT2Zmc2V0UmFkaWFucywgYW5kIHRhaU1pbnVzVXRjU2Vjb25kcyBjb2x1bW5zIgogICAgICApOwogICAgfQogICAgY29uc3Qgc2FtcGxlcyA9IGVvcC5fc2FtcGxlcyA9IGVvcERhdGEuc2FtcGxlczsKICAgIGNvbnN0IGRhdGVzID0gZW9wLl9kYXRlcyA9IFtdOwogICAgZW9wLl9kYXRlQ29sdW1uID0gZGF0ZUNvbHVtbjsKICAgIGVvcC5feFBvbGVXYW5kZXJSYWRpYW5zQ29sdW1uID0geFBvbGVXYW5kZXJSYWRpYW5zQ29sdW1uOwogICAgZW9wLl95UG9sZVdhbmRlclJhZGlhbnNDb2x1bW4gPSB5UG9sZVdhbmRlclJhZGlhbnNDb2x1bW47CiAgICBlb3AuX3V0MU1pbnVzVXRjU2Vjb25kc0NvbHVtbiA9IHV0MU1pbnVzVXRjU2Vjb25kc0NvbHVtbjsKICAgIGVvcC5feENlbGVzdGlhbFBvbGVPZmZzZXRSYWRpYW5zQ29sdW1uID0geENlbGVzdGlhbFBvbGVPZmZzZXRSYWRpYW5zQ29sdW1uOwogICAgZW9wLl95Q2VsZXN0aWFsUG9sZU9mZnNldFJhZGlhbnNDb2x1bW4gPSB5Q2VsZXN0aWFsUG9sZU9mZnNldFJhZGlhbnNDb2x1bW47CiAgICBlb3AuX3RhaU1pbnVzVXRjU2Vjb25kc0NvbHVtbiA9IHRhaU1pbnVzVXRjU2Vjb25kc0NvbHVtbjsKICAgIGVvcC5fY29sdW1uQ291bnQgPSBlb3BEYXRhLmNvbHVtbk5hbWVzLmxlbmd0aDsKICAgIGVvcC5fbGFzdEluZGV4ID0gdm9pZCAwOwogICAgbGV0IGxhc3RUYWlNaW51c1V0YzsKICAgIGNvbnN0IGFkZE5ld0xlYXBTZWNvbmRzID0gZW9wLl9hZGROZXdMZWFwU2Vjb25kczsKICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBzYW1wbGVzLmxlbmd0aDsgaSA8IGxlbjsgaSArPSBlb3AuX2NvbHVtbkNvdW50KSB7CiAgICAgIGNvbnN0IG1qZCA9IHNhbXBsZXNbaSArIGRhdGVDb2x1bW5dOwogICAgICBjb25zdCB0YWlNaW51c1V0YyA9IHNhbXBsZXNbaSArIHRhaU1pbnVzVXRjU2Vjb25kc0NvbHVtbl07CiAgICAgIGNvbnN0IGRheSA9IG1qZCArIFRpbWVDb25zdGFudHNfZGVmYXVsdC5NT0RJRklFRF9KVUxJQU5fREFURV9ESUZGRVJFTkNFOwogICAgICBjb25zdCBkYXRlID0gbmV3IEp1bGlhbkRhdGVfZGVmYXVsdChkYXksIHRhaU1pbnVzVXRjLCBUaW1lU3RhbmRhcmRfZGVmYXVsdC5UQUkpOwogICAgICBkYXRlcy5wdXNoKGRhdGUpOwogICAgICBpZiAoYWRkTmV3TGVhcFNlY29uZHMpIHsKICAgICAgICBpZiAodGFpTWludXNVdGMgIT09IGxhc3RUYWlNaW51c1V0YyAmJiBkZWZpbmVkX2RlZmF1bHQobGFzdFRhaU1pbnVzVXRjKSkgewogICAgICAgICAgY29uc3QgbGVhcFNlY29uZHMgPSBKdWxpYW5EYXRlX2RlZmF1bHQubGVhcFNlY29uZHM7CiAgICAgICAgICBjb25zdCBsZWFwU2Vjb25kSW5kZXggPSBiaW5hcnlTZWFyY2hfZGVmYXVsdCgKICAgICAgICAgICAgbGVhcFNlY29uZHMsCiAgICAgICAgICAgIGRhdGUsCiAgICAgICAgICAgIGNvbXBhcmVMZWFwU2Vjb25kRGF0ZXMyCiAgICAgICAgICApOwogICAgICAgICAgaWYgKGxlYXBTZWNvbmRJbmRleCA8IDApIHsKICAgICAgICAgICAgY29uc3QgbGVhcFNlY29uZCA9IG5ldyBMZWFwU2Vjb25kX2RlZmF1bHQoZGF0ZSwgdGFpTWludXNVdGMpOwogICAgICAgICAgICBsZWFwU2Vjb25kcy5zcGxpY2UofmxlYXBTZWNvbmRJbmRleCwgMCwgbGVhcFNlY29uZCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGxhc3RUYWlNaW51c1V0YyA9IHRhaU1pbnVzVXRjOwogICAgICB9CiAgICB9CiAgfQogIGZ1bmN0aW9uIGZpbGxSZXN1bHRGcm9tSW5kZXgoZW9wLCBzYW1wbGVzLCBpbmRleCwgY29sdW1uQ291bnQsIHJlc3VsdCkgewogICAgY29uc3Qgc3RhcnQgPSBpbmRleCAqIGNvbHVtbkNvdW50OwogICAgcmVzdWx0LnhQb2xlV2FuZGVyID0gc2FtcGxlc1tzdGFydCArIGVvcC5feFBvbGVXYW5kZXJSYWRpYW5zQ29sdW1uXTsKICAgIHJlc3VsdC55UG9sZVdhbmRlciA9IHNhbXBsZXNbc3RhcnQgKyBlb3AuX3lQb2xlV2FuZGVyUmFkaWFuc0NvbHVtbl07CiAgICByZXN1bHQueFBvbGVPZmZzZXQgPSBzYW1wbGVzW3N0YXJ0ICsgZW9wLl94Q2VsZXN0aWFsUG9sZU9mZnNldFJhZGlhbnNDb2x1bW5dOwogICAgcmVzdWx0LnlQb2xlT2Zmc2V0ID0gc2FtcGxlc1tzdGFydCArIGVvcC5feUNlbGVzdGlhbFBvbGVPZmZzZXRSYWRpYW5zQ29sdW1uXTsKICAgIHJlc3VsdC51dDFNaW51c1V0YyA9IHNhbXBsZXNbc3RhcnQgKyBlb3AuX3V0MU1pbnVzVXRjU2Vjb25kc0NvbHVtbl07CiAgfQogIGZ1bmN0aW9uIGxpbmVhckludGVycChkeCwgeTEsIHkyKSB7CiAgICByZXR1cm4geTEgKyBkeCAqICh5MiAtIHkxKTsKICB9CiAgZnVuY3Rpb24gaW50ZXJwb2xhdGUoZW9wLCBkYXRlcywgc2FtcGxlcywgZGF0ZSwgYmVmb3JlLCBhZnRlciwgcmVzdWx0KSB7CiAgICBjb25zdCBjb2x1bW5Db3VudCA9IGVvcC5fY29sdW1uQ291bnQ7CiAgICBpZiAoYWZ0ZXIgPiBkYXRlcy5sZW5ndGggLSAxKSB7CiAgICAgIHJlc3VsdC54UG9sZVdhbmRlciA9IDA7CiAgICAgIHJlc3VsdC55UG9sZVdhbmRlciA9IDA7CiAgICAgIHJlc3VsdC54UG9sZU9mZnNldCA9IDA7CiAgICAgIHJlc3VsdC55UG9sZU9mZnNldCA9IDA7CiAgICAgIHJlc3VsdC51dDFNaW51c1V0YyA9IDA7CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CiAgICBjb25zdCBiZWZvcmVEYXRlID0gZGF0ZXNbYmVmb3JlXTsKICAgIGNvbnN0IGFmdGVyRGF0ZSA9IGRhdGVzW2FmdGVyXTsKICAgIGlmIChiZWZvcmVEYXRlLmVxdWFscyhhZnRlckRhdGUpIHx8IGRhdGUuZXF1YWxzKGJlZm9yZURhdGUpKSB7CiAgICAgIGZpbGxSZXN1bHRGcm9tSW5kZXgoZW9wLCBzYW1wbGVzLCBiZWZvcmUsIGNvbHVtbkNvdW50LCByZXN1bHQpOwogICAgICByZXR1cm4gcmVzdWx0OwogICAgfSBlbHNlIGlmIChkYXRlLmVxdWFscyhhZnRlckRhdGUpKSB7CiAgICAgIGZpbGxSZXN1bHRGcm9tSW5kZXgoZW9wLCBzYW1wbGVzLCBhZnRlciwgY29sdW1uQ291bnQsIHJlc3VsdCk7CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CiAgICBjb25zdCBmYWN0b3IgPSBKdWxpYW5EYXRlX2RlZmF1bHQuc2Vjb25kc0RpZmZlcmVuY2UoZGF0ZSwgYmVmb3JlRGF0ZSkgLyBKdWxpYW5EYXRlX2RlZmF1bHQuc2Vjb25kc0RpZmZlcmVuY2UoYWZ0ZXJEYXRlLCBiZWZvcmVEYXRlKTsKICAgIGNvbnN0IHN0YXJ0QmVmb3JlID0gYmVmb3JlICogY29sdW1uQ291bnQ7CiAgICBjb25zdCBzdGFydEFmdGVyID0gYWZ0ZXIgKiBjb2x1bW5Db3VudDsKICAgIGxldCBiZWZvcmVVdDFNaW51c1V0YyA9IHNhbXBsZXNbc3RhcnRCZWZvcmUgKyBlb3AuX3V0MU1pbnVzVXRjU2Vjb25kc0NvbHVtbl07CiAgICBsZXQgYWZ0ZXJVdDFNaW51c1V0YyA9IHNhbXBsZXNbc3RhcnRBZnRlciArIGVvcC5fdXQxTWludXNVdGNTZWNvbmRzQ29sdW1uXTsKICAgIGNvbnN0IG9mZnNldERpZmZlcmVuY2UgPSBhZnRlclV0MU1pbnVzVXRjIC0gYmVmb3JlVXQxTWludXNVdGM7CiAgICBpZiAob2Zmc2V0RGlmZmVyZW5jZSA+IDAuNSB8fCBvZmZzZXREaWZmZXJlbmNlIDwgLTAuNSkgewogICAgICBjb25zdCBiZWZvcmVUYWlNaW51c1V0YyA9IHNhbXBsZXNbc3RhcnRCZWZvcmUgKyBlb3AuX3RhaU1pbnVzVXRjU2Vjb25kc0NvbHVtbl07CiAgICAgIGNvbnN0IGFmdGVyVGFpTWludXNVdGMgPSBzYW1wbGVzW3N0YXJ0QWZ0ZXIgKyBlb3AuX3RhaU1pbnVzVXRjU2Vjb25kc0NvbHVtbl07CiAgICAgIGlmIChiZWZvcmVUYWlNaW51c1V0YyAhPT0gYWZ0ZXJUYWlNaW51c1V0YykgewogICAgICAgIGlmIChhZnRlckRhdGUuZXF1YWxzKGRhdGUpKSB7CiAgICAgICAgICBiZWZvcmVVdDFNaW51c1V0YyA9IGFmdGVyVXQxTWludXNVdGM7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGFmdGVyVXQxTWludXNVdGMgLT0gYWZ0ZXJUYWlNaW51c1V0YyAtIGJlZm9yZVRhaU1pbnVzVXRjOwogICAgICAgIH0KICAgICAgfQogICAgfQogICAgcmVzdWx0LnhQb2xlV2FuZGVyID0gbGluZWFySW50ZXJwKAogICAgICBmYWN0b3IsCiAgICAgIHNhbXBsZXNbc3RhcnRCZWZvcmUgKyBlb3AuX3hQb2xlV2FuZGVyUmFkaWFuc0NvbHVtbl0sCiAgICAgIHNhbXBsZXNbc3RhcnRBZnRlciArIGVvcC5feFBvbGVXYW5kZXJSYWRpYW5zQ29sdW1uXQogICAgKTsKICAgIHJlc3VsdC55UG9sZVdhbmRlciA9IGxpbmVhckludGVycCgKICAgICAgZmFjdG9yLAogICAgICBzYW1wbGVzW3N0YXJ0QmVmb3JlICsgZW9wLl95UG9sZVdhbmRlclJhZGlhbnNDb2x1bW5dLAogICAgICBzYW1wbGVzW3N0YXJ0QWZ0ZXIgKyBlb3AuX3lQb2xlV2FuZGVyUmFkaWFuc0NvbHVtbl0KICAgICk7CiAgICByZXN1bHQueFBvbGVPZmZzZXQgPSBsaW5lYXJJbnRlcnAoCiAgICAgIGZhY3RvciwKICAgICAgc2FtcGxlc1tzdGFydEJlZm9yZSArIGVvcC5feENlbGVzdGlhbFBvbGVPZmZzZXRSYWRpYW5zQ29sdW1uXSwKICAgICAgc2FtcGxlc1tzdGFydEFmdGVyICsgZW9wLl94Q2VsZXN0aWFsUG9sZU9mZnNldFJhZGlhbnNDb2x1bW5dCiAgICApOwogICAgcmVzdWx0LnlQb2xlT2Zmc2V0ID0gbGluZWFySW50ZXJwKAogICAgICBmYWN0b3IsCiAgICAgIHNhbXBsZXNbc3RhcnRCZWZvcmUgKyBlb3AuX3lDZWxlc3RpYWxQb2xlT2Zmc2V0UmFkaWFuc0NvbHVtbl0sCiAgICAgIHNhbXBsZXNbc3RhcnRBZnRlciArIGVvcC5feUNlbGVzdGlhbFBvbGVPZmZzZXRSYWRpYW5zQ29sdW1uXQogICAgKTsKICAgIHJlc3VsdC51dDFNaW51c1V0YyA9IGxpbmVhckludGVycCgKICAgICAgZmFjdG9yLAogICAgICBiZWZvcmVVdDFNaW51c1V0YywKICAgICAgYWZ0ZXJVdDFNaW51c1V0YwogICAgKTsKICAgIHJldHVybiByZXN1bHQ7CiAgfQogIHZhciBFYXJ0aE9yaWVudGF0aW9uUGFyYW1ldGVyc19kZWZhdWx0OwogIHZhciBpbml0X0VhcnRoT3JpZW50YXRpb25QYXJhbWV0ZXJzID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9FYXJ0aE9yaWVudGF0aW9uUGFyYW1ldGVycy5qcyIoKSB7CiAgICAgIGluaXRfYmluYXJ5U2VhcmNoKCk7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRWFydGhPcmllbnRhdGlvblBhcmFtZXRlcnNTYW1wbGUoKTsKICAgICAgaW5pdF9KdWxpYW5EYXRlKCk7CiAgICAgIGluaXRfTGVhcFNlY29uZCgpOwogICAgICBpbml0X1Jlc291cmNlKCk7CiAgICAgIGluaXRfUnVudGltZUVycm9yKCk7CiAgICAgIGluaXRfVGltZUNvbnN0YW50cygpOwogICAgICBpbml0X1RpbWVTdGFuZGFyZCgpOwogICAgICBFYXJ0aE9yaWVudGF0aW9uUGFyYW1ldGVycy5mcm9tVXJsID0gYXN5bmMgZnVuY3Rpb24odXJsLCBvcHRpb25zKSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJ1cmwiLCB1cmwpOwogICAgICAgIG9wdGlvbnMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLCBkZWZhdWx0VmFsdWVfZGVmYXVsdC5FTVBUWV9PQkpFQ1QpOwogICAgICAgIGNvbnN0IHJlc291cmNlID0gUmVzb3VyY2VfZGVmYXVsdC5jcmVhdGVJZk5lZWRlZCh1cmwpOwogICAgICAgIGxldCBlb3BEYXRhOwogICAgICAgIHRyeSB7CiAgICAgICAgICBlb3BEYXRhID0gYXdhaXQgcmVzb3VyY2UuZmV0Y2hKc29uKCk7CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcl9kZWZhdWx0KAogICAgICAgICAgICBgQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgcmV0cmlldmluZyB0aGUgRU9QIGRhdGEgZnJvbSB0aGUgVVJMICR7cmVzb3VyY2UudXJsfS5gCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3IEVhcnRoT3JpZW50YXRpb25QYXJhbWV0ZXJzKHsKICAgICAgICAgIGFkZE5ld0xlYXBTZWNvbmRzOiBvcHRpb25zLmFkZE5ld0xlYXBTZWNvbmRzLAogICAgICAgICAgZGF0YTogZW9wRGF0YQogICAgICAgIH0pOwogICAgICB9OwogICAgICBFYXJ0aE9yaWVudGF0aW9uUGFyYW1ldGVycy5OT05FID0gT2JqZWN0LmZyZWV6ZSh7CiAgICAgICAgY29tcHV0ZTogZnVuY3Rpb24oZGF0ZSwgcmVzdWx0KSB7CiAgICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBFYXJ0aE9yaWVudGF0aW9uUGFyYW1ldGVyc1NhbXBsZV9kZWZhdWx0KDAsIDAsIDAsIDAsIDApOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVzdWx0LnhQb2xlV2FuZGVyID0gMDsKICAgICAgICAgICAgcmVzdWx0LnlQb2xlV2FuZGVyID0gMDsKICAgICAgICAgICAgcmVzdWx0LnhQb2xlT2Zmc2V0ID0gMDsKICAgICAgICAgICAgcmVzdWx0LnlQb2xlT2Zmc2V0ID0gMDsKICAgICAgICAgICAgcmVzdWx0LnV0MU1pbnVzVXRjID0gMDsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgRWFydGhPcmllbnRhdGlvblBhcmFtZXRlcnMucHJvdG90eXBlLmNvbXB1dGUgPSBmdW5jdGlvbihkYXRlLCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdCh0aGlzLl9zYW1wbGVzKSkgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IEVhcnRoT3JpZW50YXRpb25QYXJhbWV0ZXJzU2FtcGxlX2RlZmF1bHQoMCwgMCwgMCwgMCwgMCk7CiAgICAgICAgfQogICAgICAgIGlmICh0aGlzLl9zYW1wbGVzLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgcmVzdWx0LnhQb2xlV2FuZGVyID0gMDsKICAgICAgICAgIHJlc3VsdC55UG9sZVdhbmRlciA9IDA7CiAgICAgICAgICByZXN1bHQueFBvbGVPZmZzZXQgPSAwOwogICAgICAgICAgcmVzdWx0LnlQb2xlT2Zmc2V0ID0gMDsKICAgICAgICAgIHJlc3VsdC51dDFNaW51c1V0YyA9IDA7CiAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0KICAgICAgICBjb25zdCBkYXRlcyA9IHRoaXMuX2RhdGVzOwogICAgICAgIGNvbnN0IGxhc3RJbmRleCA9IHRoaXMuX2xhc3RJbmRleDsKICAgICAgICBsZXQgYmVmb3JlID0gMDsKICAgICAgICBsZXQgYWZ0ZXIgPSAwOwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQobGFzdEluZGV4KSkgewogICAgICAgICAgY29uc3QgcHJldmlvdXNJbmRleERhdGUgPSBkYXRlc1tsYXN0SW5kZXhdOwogICAgICAgICAgY29uc3QgbmV4dEluZGV4RGF0ZSA9IGRhdGVzW2xhc3RJbmRleCArIDFdOwogICAgICAgICAgY29uc3QgaXNBZnRlclByZXZpb3VzID0gSnVsaWFuRGF0ZV9kZWZhdWx0Lmxlc3NUaGFuT3JFcXVhbHMoCiAgICAgICAgICAgIHByZXZpb3VzSW5kZXhEYXRlLAogICAgICAgICAgICBkYXRlCiAgICAgICAgICApOwogICAgICAgICAgY29uc3QgaXNBZnRlckxhc3RTYW1wbGUgPSAhZGVmaW5lZF9kZWZhdWx0KG5leHRJbmRleERhdGUpOwogICAgICAgICAgY29uc3QgaXNCZWZvcmVOZXh0ID0gaXNBZnRlckxhc3RTYW1wbGUgfHwgSnVsaWFuRGF0ZV9kZWZhdWx0LmdyZWF0ZXJUaGFuT3JFcXVhbHMobmV4dEluZGV4RGF0ZSwgZGF0ZSk7CiAgICAgICAgICBpZiAoaXNBZnRlclByZXZpb3VzICYmIGlzQmVmb3JlTmV4dCkgewogICAgICAgICAgICBiZWZvcmUgPSBsYXN0SW5kZXg7CiAgICAgICAgICAgIGlmICghaXNBZnRlckxhc3RTYW1wbGUgJiYgbmV4dEluZGV4RGF0ZS5lcXVhbHMoZGF0ZSkpIHsKICAgICAgICAgICAgICArK2JlZm9yZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBhZnRlciA9IGJlZm9yZSArIDE7CiAgICAgICAgICAgIGludGVycG9sYXRlKHRoaXMsIGRhdGVzLCB0aGlzLl9zYW1wbGVzLCBkYXRlLCBiZWZvcmUsIGFmdGVyLCByZXN1bHQpOwogICAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBsZXQgaW5kZXggPSBiaW5hcnlTZWFyY2hfZGVmYXVsdChkYXRlcywgZGF0ZSwgSnVsaWFuRGF0ZV9kZWZhdWx0LmNvbXBhcmUsIHRoaXMuX2RhdGVDb2x1bW4pOwogICAgICAgIGlmIChpbmRleCA+PSAwKSB7CiAgICAgICAgICBpZiAoaW5kZXggPCBkYXRlcy5sZW5ndGggLSAxICYmIGRhdGVzW2luZGV4ICsgMV0uZXF1YWxzKGRhdGUpKSB7CiAgICAgICAgICAgICsraW5kZXg7CiAgICAgICAgICB9CiAgICAgICAgICBiZWZvcmUgPSBpbmRleDsKICAgICAgICAgIGFmdGVyID0gaW5kZXg7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGFmdGVyID0gfmluZGV4OwogICAgICAgICAgYmVmb3JlID0gYWZ0ZXIgLSAxOwogICAgICAgICAgaWYgKGJlZm9yZSA8IDApIHsKICAgICAgICAgICAgYmVmb3JlID0gMDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgdGhpcy5fbGFzdEluZGV4ID0gYmVmb3JlOwogICAgICAgIGludGVycG9sYXRlKHRoaXMsIGRhdGVzLCB0aGlzLl9zYW1wbGVzLCBkYXRlLCBiZWZvcmUsIGFmdGVyLCByZXN1bHQpOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIEVhcnRoT3JpZW50YXRpb25QYXJhbWV0ZXJzX2RlZmF1bHQgPSBFYXJ0aE9yaWVudGF0aW9uUGFyYW1ldGVyczsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0hlYWRpbmdQaXRjaFJvbGwuanMKICBmdW5jdGlvbiBIZWFkaW5nUGl0Y2hSb2xsKGhlYWRpbmcsIHBpdGNoLCByb2xsKSB7CiAgICB0aGlzLmhlYWRpbmcgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChoZWFkaW5nLCAwKTsKICAgIHRoaXMucGl0Y2ggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChwaXRjaCwgMCk7CiAgICB0aGlzLnJvbGwgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChyb2xsLCAwKTsKICB9CiAgdmFyIEhlYWRpbmdQaXRjaFJvbGxfZGVmYXVsdDsKICB2YXIgaW5pdF9IZWFkaW5nUGl0Y2hSb2xsID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9IZWFkaW5nUGl0Y2hSb2xsLmpzIigpIHsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIEhlYWRpbmdQaXRjaFJvbGwuZnJvbVF1YXRlcm5pb24gPSBmdW5jdGlvbihxdWF0ZXJuaW9uLCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChxdWF0ZXJuaW9uKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInF1YXRlcm5pb24gaXMgcmVxdWlyZWQiKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IEhlYWRpbmdQaXRjaFJvbGwoKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgdGVzdCA9IDIgKiAocXVhdGVybmlvbi53ICogcXVhdGVybmlvbi55IC0gcXVhdGVybmlvbi56ICogcXVhdGVybmlvbi54KTsKICAgICAgICBjb25zdCBkZW5vbWluYXRvclJvbGwgPSAxIC0gMiAqIChxdWF0ZXJuaW9uLnggKiBxdWF0ZXJuaW9uLnggKyBxdWF0ZXJuaW9uLnkgKiBxdWF0ZXJuaW9uLnkpOwogICAgICAgIGNvbnN0IG51bWVyYXRvclJvbGwgPSAyICogKHF1YXRlcm5pb24udyAqIHF1YXRlcm5pb24ueCArIHF1YXRlcm5pb24ueSAqIHF1YXRlcm5pb24ueik7CiAgICAgICAgY29uc3QgZGVub21pbmF0b3JIZWFkaW5nID0gMSAtIDIgKiAocXVhdGVybmlvbi55ICogcXVhdGVybmlvbi55ICsgcXVhdGVybmlvbi56ICogcXVhdGVybmlvbi56KTsKICAgICAgICBjb25zdCBudW1lcmF0b3JIZWFkaW5nID0gMiAqIChxdWF0ZXJuaW9uLncgKiBxdWF0ZXJuaW9uLnogKyBxdWF0ZXJuaW9uLnggKiBxdWF0ZXJuaW9uLnkpOwogICAgICAgIHJlc3VsdC5oZWFkaW5nID0gLU1hdGguYXRhbjIobnVtZXJhdG9ySGVhZGluZywgZGVub21pbmF0b3JIZWFkaW5nKTsKICAgICAgICByZXN1bHQucm9sbCA9IE1hdGguYXRhbjIobnVtZXJhdG9yUm9sbCwgZGVub21pbmF0b3JSb2xsKTsKICAgICAgICByZXN1bHQucGl0Y2ggPSAtTWF0aF9kZWZhdWx0LmFzaW5DbGFtcGVkKHRlc3QpOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIEhlYWRpbmdQaXRjaFJvbGwuZnJvbURlZ3JlZXMgPSBmdW5jdGlvbihoZWFkaW5nLCBwaXRjaCwgcm9sbCwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoaGVhZGluZykpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJoZWFkaW5nIGlzIHJlcXVpcmVkIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHBpdGNoKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInBpdGNoIGlzIHJlcXVpcmVkIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJvbGwpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgicm9sbCBpcyByZXF1aXJlZCIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgSGVhZGluZ1BpdGNoUm9sbCgpOwogICAgICAgIH0KICAgICAgICByZXN1bHQuaGVhZGluZyA9IGhlYWRpbmcgKiBNYXRoX2RlZmF1bHQuUkFESUFOU19QRVJfREVHUkVFOwogICAgICAgIHJlc3VsdC5waXRjaCA9IHBpdGNoICogTWF0aF9kZWZhdWx0LlJBRElBTlNfUEVSX0RFR1JFRTsKICAgICAgICByZXN1bHQucm9sbCA9IHJvbGwgKiBNYXRoX2RlZmF1bHQuUkFESUFOU19QRVJfREVHUkVFOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIEhlYWRpbmdQaXRjaFJvbGwuY2xvbmUgPSBmdW5jdGlvbihoZWFkaW5nUGl0Y2hSb2xsLCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChoZWFkaW5nUGl0Y2hSb2xsKSkgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBIZWFkaW5nUGl0Y2hSb2xsKAogICAgICAgICAgICBoZWFkaW5nUGl0Y2hSb2xsLmhlYWRpbmcsCiAgICAgICAgICAgIGhlYWRpbmdQaXRjaFJvbGwucGl0Y2gsCiAgICAgICAgICAgIGhlYWRpbmdQaXRjaFJvbGwucm9sbAogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LmhlYWRpbmcgPSBoZWFkaW5nUGl0Y2hSb2xsLmhlYWRpbmc7CiAgICAgICAgcmVzdWx0LnBpdGNoID0gaGVhZGluZ1BpdGNoUm9sbC5waXRjaDsKICAgICAgICByZXN1bHQucm9sbCA9IGhlYWRpbmdQaXRjaFJvbGwucm9sbDsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBIZWFkaW5nUGl0Y2hSb2xsLmVxdWFscyA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7CiAgICAgICAgcmV0dXJuIGxlZnQgPT09IHJpZ2h0IHx8IGRlZmluZWRfZGVmYXVsdChsZWZ0KSAmJiBkZWZpbmVkX2RlZmF1bHQocmlnaHQpICYmIGxlZnQuaGVhZGluZyA9PT0gcmlnaHQuaGVhZGluZyAmJiBsZWZ0LnBpdGNoID09PSByaWdodC5waXRjaCAmJiBsZWZ0LnJvbGwgPT09IHJpZ2h0LnJvbGw7CiAgICAgIH07CiAgICAgIEhlYWRpbmdQaXRjaFJvbGwuZXF1YWxzRXBzaWxvbiA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCByZWxhdGl2ZUVwc2lsb24sIGFic29sdXRlRXBzaWxvbikgewogICAgICAgIHJldHVybiBsZWZ0ID09PSByaWdodCB8fCBkZWZpbmVkX2RlZmF1bHQobGVmdCkgJiYgZGVmaW5lZF9kZWZhdWx0KHJpZ2h0KSAmJiBNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbigKICAgICAgICAgIGxlZnQuaGVhZGluZywKICAgICAgICAgIHJpZ2h0LmhlYWRpbmcsCiAgICAgICAgICByZWxhdGl2ZUVwc2lsb24sCiAgICAgICAgICBhYnNvbHV0ZUVwc2lsb24KICAgICAgICApICYmIE1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgbGVmdC5waXRjaCwKICAgICAgICAgIHJpZ2h0LnBpdGNoLAogICAgICAgICAgcmVsYXRpdmVFcHNpbG9uLAogICAgICAgICAgYWJzb2x1dGVFcHNpbG9uCiAgICAgICAgKSAmJiBNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbigKICAgICAgICAgIGxlZnQucm9sbCwKICAgICAgICAgIHJpZ2h0LnJvbGwsCiAgICAgICAgICByZWxhdGl2ZUVwc2lsb24sCiAgICAgICAgICBhYnNvbHV0ZUVwc2lsb24KICAgICAgICApOwogICAgICB9OwogICAgICBIZWFkaW5nUGl0Y2hSb2xsLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKHJlc3VsdCkgewogICAgICAgIHJldHVybiBIZWFkaW5nUGl0Y2hSb2xsLmNsb25lKHRoaXMsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIEhlYWRpbmdQaXRjaFJvbGwucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uKHJpZ2h0KSB7CiAgICAgICAgcmV0dXJuIEhlYWRpbmdQaXRjaFJvbGwuZXF1YWxzKHRoaXMsIHJpZ2h0KTsKICAgICAgfTsKICAgICAgSGVhZGluZ1BpdGNoUm9sbC5wcm90b3R5cGUuZXF1YWxzRXBzaWxvbiA9IGZ1bmN0aW9uKHJpZ2h0LCByZWxhdGl2ZUVwc2lsb24sIGFic29sdXRlRXBzaWxvbikgewogICAgICAgIHJldHVybiBIZWFkaW5nUGl0Y2hSb2xsLmVxdWFsc0Vwc2lsb24oCiAgICAgICAgICB0aGlzLAogICAgICAgICAgcmlnaHQsCiAgICAgICAgICByZWxhdGl2ZUVwc2lsb24sCiAgICAgICAgICBhYnNvbHV0ZUVwc2lsb24KICAgICAgICApOwogICAgICB9OwogICAgICBIZWFkaW5nUGl0Y2hSb2xsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBgKCR7dGhpcy5oZWFkaW5nfSwgJHt0aGlzLnBpdGNofSwgJHt0aGlzLnJvbGx9KWA7CiAgICAgIH07CiAgICAgIEhlYWRpbmdQaXRjaFJvbGxfZGVmYXVsdCA9IEhlYWRpbmdQaXRjaFJvbGw7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9idWlsZE1vZHVsZVVybC5qcwogIGZ1bmN0aW9uIGdldEJhc2VVcmxGcm9tQ2VzaXVtU2NyaXB0KCkgewogICAgY29uc3Qgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJzY3JpcHQiKTsKICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBzY3JpcHRzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7CiAgICAgIGNvbnN0IHNyYyA9IHNjcmlwdHNbaV0uZ2V0QXR0cmlidXRlKCJzcmMiKTsKICAgICAgY29uc3QgcmVzdWx0ID0gY2VzaXVtU2NyaXB0UmVnZXguZXhlYyhzcmMpOwogICAgICBpZiAocmVzdWx0ICE9PSBudWxsKSB7CiAgICAgICAgcmV0dXJuIHJlc3VsdFsxXTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIHZvaWQgMDsKICB9CiAgZnVuY3Rpb24gdHJ5TWFrZUFic29sdXRlKHVybCkgewogICAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gInVuZGVmaW5lZCIpIHsKICAgICAgcmV0dXJuIHVybDsKICAgIH0KICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGEyKSkgewogICAgICBhMiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImEiKTsKICAgIH0KICAgIGEyLmhyZWYgPSB1cmw7CiAgICByZXR1cm4gYTIuaHJlZjsKICB9CiAgZnVuY3Rpb24gZ2V0Q2VzaXVtQmFzZVVybCgpIHsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoYmFzZVJlc291cmNlKSkgewogICAgICByZXR1cm4gYmFzZVJlc291cmNlOwogICAgfQogICAgbGV0IGJhc2VVcmxTdHJpbmc7CiAgICBpZiAodHlwZW9mIENFU0lVTV9CQVNFX1VSTCAhPT0gInVuZGVmaW5lZCIpIHsKICAgICAgYmFzZVVybFN0cmluZyA9IENFU0lVTV9CQVNFX1VSTDsKICAgIH0gZWxzZSBpZiAoZGVmaW5lZF9kZWZhdWx0KGltcG9ydF9tZXRhPy51cmwpKSB7CiAgICAgIGJhc2VVcmxTdHJpbmcgPSBnZXRBYnNvbHV0ZVVyaV9kZWZhdWx0KCIuIiwgaW1wb3J0X21ldGEudXJsKTsKICAgIH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gIm9iamVjdCIgJiYgZGVmaW5lZF9kZWZhdWx0KGRlZmluZS5hbWQpICYmICFkZWZpbmUuYW1kLnRvVXJsVW5kZWZpbmVkICYmIGRlZmluZWRfZGVmYXVsdChfX3JlcXVpcmUudG9VcmwpKSB7CiAgICAgIGJhc2VVcmxTdHJpbmcgPSBnZXRBYnNvbHV0ZVVyaV9kZWZhdWx0KAogICAgICAgICIuLiIsCiAgICAgICAgYnVpbGRNb2R1bGVVcmwoIkNvcmUvYnVpbGRNb2R1bGVVcmwuanMiKQogICAgICApOwogICAgfSBlbHNlIHsKICAgICAgYmFzZVVybFN0cmluZyA9IGdldEJhc2VVcmxGcm9tQ2VzaXVtU2NyaXB0KCk7CiAgICB9CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChiYXNlVXJsU3RyaW5nKSkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAiVW5hYmxlIHRvIGRldGVybWluZSBDZXNpdW0gYmFzZSBVUkwgYXV0b21hdGljYWxseSwgdHJ5IGRlZmluaW5nIGEgZ2xvYmFsIHZhcmlhYmxlIGNhbGxlZCBDRVNJVU1fQkFTRV9VUkwuIgogICAgICApOwogICAgfQogICAgYmFzZVJlc291cmNlID0gbmV3IFJlc291cmNlX2RlZmF1bHQoewogICAgICB1cmw6IHRyeU1ha2VBYnNvbHV0ZShiYXNlVXJsU3RyaW5nKQogICAgfSk7CiAgICBiYXNlUmVzb3VyY2UuYXBwZW5kRm9yd2FyZFNsYXNoKCk7CiAgICByZXR1cm4gYmFzZVJlc291cmNlOwogIH0KICBmdW5jdGlvbiBidWlsZE1vZHVsZVVybEZyb21SZXF1aXJlVG9VcmwobW9kdWxlSUQpIHsKICAgIHJldHVybiB0cnlNYWtlQWJzb2x1dGUoX19yZXF1aXJlLnRvVXJsKGAuLi8ke21vZHVsZUlEfWApKTsKICB9CiAgZnVuY3Rpb24gYnVpbGRNb2R1bGVVcmxGcm9tQmFzZVVybChtb2R1bGVJRCkgewogICAgY29uc3QgcmVzb3VyY2UgPSBnZXRDZXNpdW1CYXNlVXJsKCkuZ2V0RGVyaXZlZFJlc291cmNlKHsKICAgICAgdXJsOiBtb2R1bGVJRAogICAgfSk7CiAgICByZXR1cm4gcmVzb3VyY2UudXJsOwogIH0KICBmdW5jdGlvbiBidWlsZE1vZHVsZVVybChyZWxhdGl2ZVVybCkgewogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoaW1wbGVtZW50YXRpb24pKSB7CiAgICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAib2JqZWN0IiAmJiBkZWZpbmVkX2RlZmF1bHQoZGVmaW5lLmFtZCkgJiYgIWRlZmluZS5hbWQudG9VcmxVbmRlZmluZWQgJiYgZGVmaW5lZF9kZWZhdWx0KF9fcmVxdWlyZS50b1VybCkpIHsKICAgICAgICBpbXBsZW1lbnRhdGlvbiA9IGJ1aWxkTW9kdWxlVXJsRnJvbVJlcXVpcmVUb1VybDsKICAgICAgfSBlbHNlIHsKICAgICAgICBpbXBsZW1lbnRhdGlvbiA9IGJ1aWxkTW9kdWxlVXJsRnJvbUJhc2VVcmw7CiAgICAgIH0KICAgIH0KICAgIGNvbnN0IHVybCA9IGltcGxlbWVudGF0aW9uKHJlbGF0aXZlVXJsKTsKICAgIHJldHVybiB1cmw7CiAgfQogIHZhciBpbXBvcnRfbWV0YSwgY2VzaXVtU2NyaXB0UmVnZXgsIGEyLCBiYXNlUmVzb3VyY2UsIGltcGxlbWVudGF0aW9uLCBidWlsZE1vZHVsZVVybF9kZWZhdWx0OwogIHZhciBpbml0X2J1aWxkTW9kdWxlVXJsID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9idWlsZE1vZHVsZVVybC5qcyIoKSB7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfZ2V0QWJzb2x1dGVVcmkoKTsKICAgICAgaW5pdF9SZXNvdXJjZSgpOwogICAgICBpbXBvcnRfbWV0YSA9IHt9OwogICAgICBjZXNpdW1TY3JpcHRSZWdleCA9IC8oKD86LipcLyl8XilDZXNpdW1cLmpzKD86XD98XCN8JCkvOwogICAgICBidWlsZE1vZHVsZVVybC5fY2VzaXVtU2NyaXB0UmVnZXggPSBjZXNpdW1TY3JpcHRSZWdleDsKICAgICAgYnVpbGRNb2R1bGVVcmwuX2J1aWxkTW9kdWxlVXJsRnJvbUJhc2VVcmwgPSBidWlsZE1vZHVsZVVybEZyb21CYXNlVXJsOwogICAgICBidWlsZE1vZHVsZVVybC5fY2xlYXJCYXNlUmVzb3VyY2UgPSBmdW5jdGlvbigpIHsKICAgICAgICBiYXNlUmVzb3VyY2UgPSB2b2lkIDA7CiAgICAgIH07CiAgICAgIGJ1aWxkTW9kdWxlVXJsLnNldEJhc2VVcmwgPSBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgIGJhc2VSZXNvdXJjZSA9IFJlc291cmNlX2RlZmF1bHQuREVGQVVMVC5nZXREZXJpdmVkUmVzb3VyY2UoewogICAgICAgICAgdXJsOiB2YWx1ZQogICAgICAgIH0pOwogICAgICB9OwogICAgICBidWlsZE1vZHVsZVVybC5nZXRDZXNpdW1CYXNlVXJsID0gZ2V0Q2VzaXVtQmFzZVVybDsKICAgICAgYnVpbGRNb2R1bGVVcmxfZGVmYXVsdCA9IGJ1aWxkTW9kdWxlVXJsOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvSWF1MjAwNlh5c1NhbXBsZS5qcwogIGZ1bmN0aW9uIElhdTIwMDZYeXNTYW1wbGUoeCwgeSwgcykgewogICAgdGhpcy54ID0geDsKICAgIHRoaXMueSA9IHk7CiAgICB0aGlzLnMgPSBzOwogIH0KICB2YXIgSWF1MjAwNlh5c1NhbXBsZV9kZWZhdWx0OwogIHZhciBpbml0X0lhdTIwMDZYeXNTYW1wbGUgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0lhdTIwMDZYeXNTYW1wbGUuanMiKCkgewogICAgICBJYXUyMDA2WHlzU2FtcGxlX2RlZmF1bHQgPSBJYXUyMDA2WHlzU2FtcGxlOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvSWF1MjAwNlh5c0RhdGEuanMKICBmdW5jdGlvbiBJYXUyMDA2WHlzRGF0YShvcHRpb25zKSB7CiAgICBvcHRpb25zID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucywgZGVmYXVsdFZhbHVlX2RlZmF1bHQuRU1QVFlfT0JKRUNUKTsKICAgIHRoaXMuX3h5c0ZpbGVVcmxUZW1wbGF0ZSA9IFJlc291cmNlX2RlZmF1bHQuY3JlYXRlSWZOZWVkZWQoCiAgICAgIG9wdGlvbnMueHlzRmlsZVVybFRlbXBsYXRlCiAgICApOwogICAgdGhpcy5faW50ZXJwb2xhdGlvbk9yZGVyID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5pbnRlcnBvbGF0aW9uT3JkZXIsIDkpOwogICAgdGhpcy5fc2FtcGxlWmVyb0p1bGlhbkVwaGVtZXJpc0RhdGUgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCgKICAgICAgb3B0aW9ucy5zYW1wbGVaZXJvSnVsaWFuRXBoZW1lcmlzRGF0ZSwKICAgICAgMjQ0MjM5NjVlLTEKICAgICk7CiAgICB0aGlzLl9zYW1wbGVaZXJvRGF0ZVRUID0gbmV3IEp1bGlhbkRhdGVfZGVmYXVsdCgKICAgICAgdGhpcy5fc2FtcGxlWmVyb0p1bGlhbkVwaGVtZXJpc0RhdGUsCiAgICAgIDAsCiAgICAgIFRpbWVTdGFuZGFyZF9kZWZhdWx0LlRBSQogICAgKTsKICAgIHRoaXMuX3N0ZXBTaXplRGF5cyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuc3RlcFNpemVEYXlzLCAxKTsKICAgIHRoaXMuX3NhbXBsZXNQZXJYeXNGaWxlID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5zYW1wbGVzUGVyWHlzRmlsZSwgMWUzKTsKICAgIHRoaXMuX3RvdGFsU2FtcGxlcyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMudG90YWxTYW1wbGVzLCAyNzQyNik7CiAgICB0aGlzLl9zYW1wbGVzID0gbmV3IEFycmF5KHRoaXMuX3RvdGFsU2FtcGxlcyAqIDMpOwogICAgdGhpcy5fY2h1bmtEb3dubG9hZHNJblByb2dyZXNzID0gW107CiAgICBjb25zdCBvcmRlciA9IHRoaXMuX2ludGVycG9sYXRpb25PcmRlcjsKICAgIGNvbnN0IGRlbm9tID0gdGhpcy5fZGVub21pbmF0b3JzID0gbmV3IEFycmF5KG9yZGVyICsgMSk7CiAgICBjb25zdCB4VGFibGUgPSB0aGlzLl94VGFibGUgPSBuZXcgQXJyYXkob3JkZXIgKyAxKTsKICAgIGNvbnN0IHN0ZXBOID0gTWF0aC5wb3codGhpcy5fc3RlcFNpemVEYXlzLCBvcmRlcik7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBvcmRlcjsgKytpKSB7CiAgICAgIGRlbm9tW2ldID0gc3RlcE47CiAgICAgIHhUYWJsZVtpXSA9IGkgKiB0aGlzLl9zdGVwU2l6ZURheXM7CiAgICAgIGZvciAobGV0IGogPSAwOyBqIDw9IG9yZGVyOyArK2opIHsKICAgICAgICBpZiAoaiAhPT0gaSkgewogICAgICAgICAgZGVub21baV0gKj0gaSAtIGo7CiAgICAgICAgfQogICAgICB9CiAgICAgIGRlbm9tW2ldID0gMSAvIGRlbm9tW2ldOwogICAgfQogICAgdGhpcy5fd29yayA9IG5ldyBBcnJheShvcmRlciArIDEpOwogICAgdGhpcy5fY29lZiA9IG5ldyBBcnJheShvcmRlciArIDEpOwogIH0KICBmdW5jdGlvbiBnZXREYXlzU2luY2VFcG9jaCh4eXMsIGRheVRULCBzZWNvbmRUVCkgewogICAgY29uc3QgZGF0ZVRUID0ganVsaWFuRGF0ZVNjcmF0Y2g7CiAgICBkYXRlVFQuZGF5TnVtYmVyID0gZGF5VFQ7CiAgICBkYXRlVFQuc2Vjb25kc09mRGF5ID0gc2Vjb25kVFQ7CiAgICByZXR1cm4gSnVsaWFuRGF0ZV9kZWZhdWx0LmRheXNEaWZmZXJlbmNlKGRhdGVUVCwgeHlzLl9zYW1wbGVaZXJvRGF0ZVRUKTsKICB9CiAgZnVuY3Rpb24gcmVxdWVzdFh5c0NodW5rKHh5c0RhdGEsIGNodW5rSW5kZXgpIHsKICAgIGlmICh4eXNEYXRhLl9jaHVua0Rvd25sb2Fkc0luUHJvZ3Jlc3NbY2h1bmtJbmRleF0pIHsKICAgICAgcmV0dXJuIHh5c0RhdGEuX2NodW5rRG93bmxvYWRzSW5Qcm9ncmVzc1tjaHVua0luZGV4XTsKICAgIH0KICAgIGxldCBjaHVua1VybDsKICAgIGNvbnN0IHh5c0ZpbGVVcmxUZW1wbGF0ZSA9IHh5c0RhdGEuX3h5c0ZpbGVVcmxUZW1wbGF0ZTsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoeHlzRmlsZVVybFRlbXBsYXRlKSkgewogICAgICBjaHVua1VybCA9IHh5c0ZpbGVVcmxUZW1wbGF0ZS5nZXREZXJpdmVkUmVzb3VyY2UoewogICAgICAgIHRlbXBsYXRlVmFsdWVzOiB7CiAgICAgICAgICAwOiBjaHVua0luZGV4CiAgICAgICAgfQogICAgICB9KTsKICAgIH0gZWxzZSB7CiAgICAgIGNodW5rVXJsID0gbmV3IFJlc291cmNlX2RlZmF1bHQoewogICAgICAgIHVybDogYnVpbGRNb2R1bGVVcmxfZGVmYXVsdChgQXNzZXRzL0lBVTIwMDZfWFlTL0lBVTIwMDZfWFlTXyR7Y2h1bmtJbmRleH0uanNvbmApCiAgICAgIH0pOwogICAgfQogICAgY29uc3QgcHJvbWlzZSA9IGNodW5rVXJsLmZldGNoSnNvbigpLnRoZW4oZnVuY3Rpb24oY2h1bmspIHsKICAgICAgeHlzRGF0YS5fY2h1bmtEb3dubG9hZHNJblByb2dyZXNzW2NodW5rSW5kZXhdID0gZmFsc2U7CiAgICAgIGNvbnN0IHNhbXBsZXMgPSB4eXNEYXRhLl9zYW1wbGVzOwogICAgICBjb25zdCBuZXdTYW1wbGVzID0gY2h1bmsuc2FtcGxlczsKICAgICAgY29uc3Qgc3RhcnRJbmRleCA9IGNodW5rSW5kZXggKiB4eXNEYXRhLl9zYW1wbGVzUGVyWHlzRmlsZSAqIDM7CiAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBuZXdTYW1wbGVzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7CiAgICAgICAgc2FtcGxlc1tzdGFydEluZGV4ICsgaV0gPSBuZXdTYW1wbGVzW2ldOwogICAgICB9CiAgICB9KTsKICAgIHh5c0RhdGEuX2NodW5rRG93bmxvYWRzSW5Qcm9ncmVzc1tjaHVua0luZGV4XSA9IHByb21pc2U7CiAgICByZXR1cm4gcHJvbWlzZTsKICB9CiAgdmFyIGp1bGlhbkRhdGVTY3JhdGNoLCBJYXUyMDA2WHlzRGF0YV9kZWZhdWx0OwogIHZhciBpbml0X0lhdTIwMDZYeXNEYXRhID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9JYXUyMDA2WHlzRGF0YS5qcyIoKSB7CiAgICAgIGluaXRfYnVpbGRNb2R1bGVVcmwoKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfSWF1MjAwNlh5c1NhbXBsZSgpOwogICAgICBpbml0X0p1bGlhbkRhdGUoKTsKICAgICAgaW5pdF9SZXNvdXJjZSgpOwogICAgICBpbml0X1RpbWVTdGFuZGFyZCgpOwogICAgICBqdWxpYW5EYXRlU2NyYXRjaCA9IG5ldyBKdWxpYW5EYXRlX2RlZmF1bHQoMCwgMCwgVGltZVN0YW5kYXJkX2RlZmF1bHQuVEFJKTsKICAgICAgSWF1MjAwNlh5c0RhdGEucHJvdG90eXBlLnByZWxvYWQgPSBmdW5jdGlvbihzdGFydERheVRULCBzdGFydFNlY29uZFRULCBzdG9wRGF5VFQsIHN0b3BTZWNvbmRUVCkgewogICAgICAgIGNvbnN0IHN0YXJ0RGF5c1NpbmNlRXBvY2ggPSBnZXREYXlzU2luY2VFcG9jaCgKICAgICAgICAgIHRoaXMsCiAgICAgICAgICBzdGFydERheVRULAogICAgICAgICAgc3RhcnRTZWNvbmRUVAogICAgICAgICk7CiAgICAgICAgY29uc3Qgc3RvcERheXNTaW5jZUVwb2NoID0gZ2V0RGF5c1NpbmNlRXBvY2godGhpcywgc3RvcERheVRULCBzdG9wU2Vjb25kVFQpOwogICAgICAgIGxldCBzdGFydEluZGV4ID0gc3RhcnREYXlzU2luY2VFcG9jaCAvIHRoaXMuX3N0ZXBTaXplRGF5cyAtIHRoaXMuX2ludGVycG9sYXRpb25PcmRlciAvIDIgfCAwOwogICAgICAgIGlmIChzdGFydEluZGV4IDwgMCkgewogICAgICAgICAgc3RhcnRJbmRleCA9IDA7CiAgICAgICAgfQogICAgICAgIGxldCBzdG9wSW5kZXggPSBzdG9wRGF5c1NpbmNlRXBvY2ggLyB0aGlzLl9zdGVwU2l6ZURheXMgLSB0aGlzLl9pbnRlcnBvbGF0aW9uT3JkZXIgLyAyIHwgMCArIHRoaXMuX2ludGVycG9sYXRpb25PcmRlcjsKICAgICAgICBpZiAoc3RvcEluZGV4ID49IHRoaXMuX3RvdGFsU2FtcGxlcykgewogICAgICAgICAgc3RvcEluZGV4ID0gdGhpcy5fdG90YWxTYW1wbGVzIC0gMTsKICAgICAgICB9CiAgICAgICAgY29uc3Qgc3RhcnRDaHVuayA9IHN0YXJ0SW5kZXggLyB0aGlzLl9zYW1wbGVzUGVyWHlzRmlsZSB8IDA7CiAgICAgICAgY29uc3Qgc3RvcENodW5rID0gc3RvcEluZGV4IC8gdGhpcy5fc2FtcGxlc1Blclh5c0ZpbGUgfCAwOwogICAgICAgIGNvbnN0IHByb21pc2VzID0gW107CiAgICAgICAgZm9yIChsZXQgaSA9IHN0YXJ0Q2h1bms7IGkgPD0gc3RvcENodW5rOyArK2kpIHsKICAgICAgICAgIHByb21pc2VzLnB1c2gocmVxdWVzdFh5c0NodW5rKHRoaXMsIGkpKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTsKICAgICAgfTsKICAgICAgSWF1MjAwNlh5c0RhdGEucHJvdG90eXBlLmNvbXB1dGVYeXNSYWRpYW5zID0gZnVuY3Rpb24oZGF5VFQsIHNlY29uZFRULCByZXN1bHQpIHsKICAgICAgICBjb25zdCBkYXlzU2luY2VFcG9jaCA9IGdldERheXNTaW5jZUVwb2NoKHRoaXMsIGRheVRULCBzZWNvbmRUVCk7CiAgICAgICAgaWYgKGRheXNTaW5jZUVwb2NoIDwgMCkgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgY29uc3QgY2VudGVySW5kZXggPSBkYXlzU2luY2VFcG9jaCAvIHRoaXMuX3N0ZXBTaXplRGF5cyB8IDA7CiAgICAgICAgaWYgKGNlbnRlckluZGV4ID49IHRoaXMuX3RvdGFsU2FtcGxlcykgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgY29uc3QgZGVncmVlID0gdGhpcy5faW50ZXJwb2xhdGlvbk9yZGVyOwogICAgICAgIGxldCBmaXJzdEluZGV4ID0gY2VudGVySW5kZXggLSAoZGVncmVlIC8gMiB8IDApOwogICAgICAgIGlmIChmaXJzdEluZGV4IDwgMCkgewogICAgICAgICAgZmlyc3RJbmRleCA9IDA7CiAgICAgICAgfQogICAgICAgIGxldCBsYXN0SW5kZXggPSBmaXJzdEluZGV4ICsgZGVncmVlOwogICAgICAgIGlmIChsYXN0SW5kZXggPj0gdGhpcy5fdG90YWxTYW1wbGVzKSB7CiAgICAgICAgICBsYXN0SW5kZXggPSB0aGlzLl90b3RhbFNhbXBsZXMgLSAxOwogICAgICAgICAgZmlyc3RJbmRleCA9IGxhc3RJbmRleCAtIGRlZ3JlZTsKICAgICAgICAgIGlmIChmaXJzdEluZGV4IDwgMCkgewogICAgICAgICAgICBmaXJzdEluZGV4ID0gMDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgbGV0IGlzRGF0YU1pc3NpbmcgPSBmYWxzZTsKICAgICAgICBjb25zdCBzYW1wbGVzID0gdGhpcy5fc2FtcGxlczsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChzYW1wbGVzW2ZpcnN0SW5kZXggKiAzXSkpIHsKICAgICAgICAgIHJlcXVlc3RYeXNDaHVuayh0aGlzLCBmaXJzdEluZGV4IC8gdGhpcy5fc2FtcGxlc1Blclh5c0ZpbGUgfCAwKTsKICAgICAgICAgIGlzRGF0YU1pc3NpbmcgPSB0cnVlOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChzYW1wbGVzW2xhc3RJbmRleCAqIDNdKSkgewogICAgICAgICAgcmVxdWVzdFh5c0NodW5rKHRoaXMsIGxhc3RJbmRleCAvIHRoaXMuX3NhbXBsZXNQZXJYeXNGaWxlIHwgMCk7CiAgICAgICAgICBpc0RhdGFNaXNzaW5nID0gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgaWYgKGlzRGF0YU1pc3NpbmcpIHsKICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBJYXUyMDA2WHlzU2FtcGxlX2RlZmF1bHQoMCwgMCwgMCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlc3VsdC54ID0gMDsKICAgICAgICAgIHJlc3VsdC55ID0gMDsKICAgICAgICAgIHJlc3VsdC5zID0gMDsKICAgICAgICB9CiAgICAgICAgY29uc3QgeCA9IGRheXNTaW5jZUVwb2NoIC0gZmlyc3RJbmRleCAqIHRoaXMuX3N0ZXBTaXplRGF5czsKICAgICAgICBjb25zdCB3b3JrID0gdGhpcy5fd29yazsKICAgICAgICBjb25zdCBkZW5vbSA9IHRoaXMuX2Rlbm9taW5hdG9yczsKICAgICAgICBjb25zdCBjb2VmID0gdGhpcy5fY29lZjsKICAgICAgICBjb25zdCB4VGFibGUgPSB0aGlzLl94VGFibGU7CiAgICAgICAgbGV0IGksIGo7CiAgICAgICAgZm9yIChpID0gMDsgaSA8PSBkZWdyZWU7ICsraSkgewogICAgICAgICAgd29ya1tpXSA9IHggLSB4VGFibGVbaV07CiAgICAgICAgfQogICAgICAgIGZvciAoaSA9IDA7IGkgPD0gZGVncmVlOyArK2kpIHsKICAgICAgICAgIGNvZWZbaV0gPSAxOwogICAgICAgICAgZm9yIChqID0gMDsgaiA8PSBkZWdyZWU7ICsraikgewogICAgICAgICAgICBpZiAoaiAhPT0gaSkgewogICAgICAgICAgICAgIGNvZWZbaV0gKj0gd29ya1tqXTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgY29lZltpXSAqPSBkZW5vbVtpXTsKICAgICAgICAgIGxldCBzYW1wbGVJbmRleCA9IChmaXJzdEluZGV4ICsgaSkgKiAzOwogICAgICAgICAgcmVzdWx0LnggKz0gY29lZltpXSAqIHNhbXBsZXNbc2FtcGxlSW5kZXgrK107CiAgICAgICAgICByZXN1bHQueSArPSBjb2VmW2ldICogc2FtcGxlc1tzYW1wbGVJbmRleCsrXTsKICAgICAgICAgIHJlc3VsdC5zICs9IGNvZWZbaV0gKiBzYW1wbGVzW3NhbXBsZUluZGV4XTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgSWF1MjAwNlh5c0RhdGFfZGVmYXVsdCA9IElhdTIwMDZYeXNEYXRhOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvRnVsbHNjcmVlbi5qcwogIHZhciBfc3VwcG9ydHNGdWxsc2NyZWVuLCBfbmFtZXMsIEZ1bGxzY3JlZW4sIEZ1bGxzY3JlZW5fZGVmYXVsdDsKICB2YXIgaW5pdF9GdWxsc2NyZWVuID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9GdWxsc2NyZWVuLmpzIigpIHsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIF9uYW1lcyA9IHsKICAgICAgICByZXF1ZXN0RnVsbHNjcmVlbjogdm9pZCAwLAogICAgICAgIGV4aXRGdWxsc2NyZWVuOiB2b2lkIDAsCiAgICAgICAgZnVsbHNjcmVlbkVuYWJsZWQ6IHZvaWQgMCwKICAgICAgICBmdWxsc2NyZWVuRWxlbWVudDogdm9pZCAwLAogICAgICAgIGZ1bGxzY3JlZW5jaGFuZ2U6IHZvaWQgMCwKICAgICAgICBmdWxsc2NyZWVuZXJyb3I6IHZvaWQgMAogICAgICB9OwogICAgICBGdWxsc2NyZWVuID0ge307CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEZ1bGxzY3JlZW4sIHsKICAgICAgICAvKioKICAgICAgICAgKiBUaGUgZWxlbWVudCB0aGF0IGlzIGN1cnJlbnRseSBmdWxsc2NyZWVuLCBpZiBhbnkuICBUbyBzaW1wbHkgY2hlY2sgaWYgdGhlCiAgICAgICAgICogYnJvd3NlciBpcyBpbiBmdWxsc2NyZWVuIG1vZGUgb3Igbm90LCB1c2Uge0BsaW5rIEZ1bGxzY3JlZW4jZnVsbHNjcmVlbn0uCiAgICAgICAgICogQG1lbWJlcm9mIEZ1bGxzY3JlZW4KICAgICAgICAgKiBAdHlwZSB7b2JqZWN0fQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqLwogICAgICAgIGVsZW1lbnQ6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlmICghRnVsbHNjcmVlbi5zdXBwb3J0c0Z1bGxzY3JlZW4oKSkgewogICAgICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50W19uYW1lcy5mdWxsc2NyZWVuRWxlbWVudF07CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBUaGUgbmFtZSBvZiB0aGUgZXZlbnQgb24gdGhlIGRvY3VtZW50IHRoYXQgaXMgZmlyZWQgd2hlbiBmdWxsc2NyZWVuIGlzCiAgICAgICAgICogZW50ZXJlZCBvciBleGl0ZWQuICBUaGlzIGV2ZW50IG5hbWUgaXMgaW50ZW5kZWQgZm9yIHVzZSB3aXRoIGFkZEV2ZW50TGlzdGVuZXIuCiAgICAgICAgICogSW4geW91ciBldmVudCBoYW5kbGVyLCB0byBkZXRlcm1pbmUgaWYgdGhlIGJyb3dzZXIgaXMgaW4gZnVsbHNjcmVlbiBtb2RlIG9yIG5vdCwKICAgICAgICAgKiB1c2Uge0BsaW5rIEZ1bGxzY3JlZW4jZnVsbHNjcmVlbn0uCiAgICAgICAgICogQG1lbWJlcm9mIEZ1bGxzY3JlZW4KICAgICAgICAgKiBAdHlwZSB7c3RyaW5nfQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqLwogICAgICAgIGNoYW5nZUV2ZW50TmFtZTogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaWYgKCFGdWxsc2NyZWVuLnN1cHBvcnRzRnVsbHNjcmVlbigpKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gX25hbWVzLmZ1bGxzY3JlZW5jaGFuZ2U7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBUaGUgbmFtZSBvZiB0aGUgZXZlbnQgdGhhdCBpcyBmaXJlZCB3aGVuIGEgZnVsbHNjcmVlbiBlcnJvcgogICAgICAgICAqIG9jY3Vycy4gIFRoaXMgZXZlbnQgbmFtZSBpcyBpbnRlbmRlZCBmb3IgdXNlIHdpdGggYWRkRXZlbnRMaXN0ZW5lci4KICAgICAgICAgKiBAbWVtYmVyb2YgRnVsbHNjcmVlbgogICAgICAgICAqIEB0eXBlIHtzdHJpbmd9CiAgICAgICAgICogQHJlYWRvbmx5CiAgICAgICAgICovCiAgICAgICAgZXJyb3JFdmVudE5hbWU6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlmICghRnVsbHNjcmVlbi5zdXBwb3J0c0Z1bGxzY3JlZW4oKSkgewogICAgICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIF9uYW1lcy5mdWxsc2NyZWVuZXJyb3I7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBEZXRlcm1pbmUgd2hldGhlciB0aGUgYnJvd3NlciB3aWxsIGFsbG93IGFuIGVsZW1lbnQgdG8gYmUgbWFkZSBmdWxsc2NyZWVuLCBvciBub3QuCiAgICAgICAgICogRm9yIGV4YW1wbGUsIGJ5IGRlZmF1bHQsIGlmcmFtZXMgY2Fubm90IGdvIGZ1bGxzY3JlZW4gdW5sZXNzIHRoZSBjb250YWluaW5nIHBhZ2UKICAgICAgICAgKiBhZGRzIGFuICJhbGxvd2Z1bGxzY3JlZW4iIGF0dHJpYnV0ZSAob3IgcHJlZml4ZWQgZXF1aXZhbGVudCkuCiAgICAgICAgICogQG1lbWJlcm9mIEZ1bGxzY3JlZW4KICAgICAgICAgKiBAdHlwZSB7Ym9vbGVhbn0KICAgICAgICAgKiBAcmVhZG9ubHkKICAgICAgICAgKi8KICAgICAgICBlbmFibGVkOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpZiAoIUZ1bGxzY3JlZW4uc3VwcG9ydHNGdWxsc2NyZWVuKCkpIHsKICAgICAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBkb2N1bWVudFtfbmFtZXMuZnVsbHNjcmVlbkVuYWJsZWRdOwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgLyoqCiAgICAgICAgICogRGV0ZXJtaW5lcyBpZiB0aGUgYnJvd3NlciBpcyBjdXJyZW50bHkgaW4gZnVsbHNjcmVlbiBtb2RlLgogICAgICAgICAqIEBtZW1iZXJvZiBGdWxsc2NyZWVuCiAgICAgICAgICogQHR5cGUge2Jvb2xlYW59CiAgICAgICAgICogQHJlYWRvbmx5CiAgICAgICAgICovCiAgICAgICAgZnVsbHNjcmVlbjogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaWYgKCFGdWxsc2NyZWVuLnN1cHBvcnRzRnVsbHNjcmVlbigpKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gRnVsbHNjcmVlbi5lbGVtZW50ICE9PSBudWxsOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICAgIEZ1bGxzY3JlZW4uc3VwcG9ydHNGdWxsc2NyZWVuID0gZnVuY3Rpb24oKSB7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChfc3VwcG9ydHNGdWxsc2NyZWVuKSkgewogICAgICAgICAgcmV0dXJuIF9zdXBwb3J0c0Z1bGxzY3JlZW47CiAgICAgICAgfQogICAgICAgIF9zdXBwb3J0c0Z1bGxzY3JlZW4gPSBmYWxzZTsKICAgICAgICBjb25zdCBib2R5ID0gZG9jdW1lbnQuYm9keTsKICAgICAgICBpZiAodHlwZW9mIGJvZHkucmVxdWVzdEZ1bGxzY3JlZW4gPT09ICJmdW5jdGlvbiIpIHsKICAgICAgICAgIF9uYW1lcy5yZXF1ZXN0RnVsbHNjcmVlbiA9ICJyZXF1ZXN0RnVsbHNjcmVlbiI7CiAgICAgICAgICBfbmFtZXMuZXhpdEZ1bGxzY3JlZW4gPSAiZXhpdEZ1bGxzY3JlZW4iOwogICAgICAgICAgX25hbWVzLmZ1bGxzY3JlZW5FbmFibGVkID0gImZ1bGxzY3JlZW5FbmFibGVkIjsKICAgICAgICAgIF9uYW1lcy5mdWxsc2NyZWVuRWxlbWVudCA9ICJmdWxsc2NyZWVuRWxlbWVudCI7CiAgICAgICAgICBfbmFtZXMuZnVsbHNjcmVlbmNoYW5nZSA9ICJmdWxsc2NyZWVuY2hhbmdlIjsKICAgICAgICAgIF9uYW1lcy5mdWxsc2NyZWVuZXJyb3IgPSAiZnVsbHNjcmVlbmVycm9yIjsKICAgICAgICAgIF9zdXBwb3J0c0Z1bGxzY3JlZW4gPSB0cnVlOwogICAgICAgICAgcmV0dXJuIF9zdXBwb3J0c0Z1bGxzY3JlZW47CiAgICAgICAgfQogICAgICAgIGNvbnN0IHByZWZpeGVzID0gWyJ3ZWJraXQiLCAibW96IiwgIm8iLCAibXMiLCAia2h0bWwiXTsKICAgICAgICBsZXQgbmFtZTsKICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gcHJlZml4ZXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHsKICAgICAgICAgIGNvbnN0IHByZWZpeCA9IHByZWZpeGVzW2ldOwogICAgICAgICAgbmFtZSA9IGAke3ByZWZpeH1SZXF1ZXN0RnVsbHNjcmVlbmA7CiAgICAgICAgICBpZiAodHlwZW9mIGJvZHlbbmFtZV0gPT09ICJmdW5jdGlvbiIpIHsKICAgICAgICAgICAgX25hbWVzLnJlcXVlc3RGdWxsc2NyZWVuID0gbmFtZTsKICAgICAgICAgICAgX3N1cHBvcnRzRnVsbHNjcmVlbiA9IHRydWU7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBuYW1lID0gYCR7cHJlZml4fVJlcXVlc3RGdWxsU2NyZWVuYDsKICAgICAgICAgICAgaWYgKHR5cGVvZiBib2R5W25hbWVdID09PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgICAgICAgX25hbWVzLnJlcXVlc3RGdWxsc2NyZWVuID0gbmFtZTsKICAgICAgICAgICAgICBfc3VwcG9ydHNGdWxsc2NyZWVuID0gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgbmFtZSA9IGAke3ByZWZpeH1FeGl0RnVsbHNjcmVlbmA7CiAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50W25hbWVdID09PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgICAgIF9uYW1lcy5leGl0RnVsbHNjcmVlbiA9IG5hbWU7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBuYW1lID0gYCR7cHJlZml4fUNhbmNlbEZ1bGxTY3JlZW5gOwogICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50W25hbWVdID09PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgICAgICAgX25hbWVzLmV4aXRGdWxsc2NyZWVuID0gbmFtZTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgbmFtZSA9IGAke3ByZWZpeH1GdWxsc2NyZWVuRW5hYmxlZGA7CiAgICAgICAgICBpZiAoZG9jdW1lbnRbbmFtZV0gIT09IHZvaWQgMCkgewogICAgICAgICAgICBfbmFtZXMuZnVsbHNjcmVlbkVuYWJsZWQgPSBuYW1lOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbmFtZSA9IGAke3ByZWZpeH1GdWxsU2NyZWVuRW5hYmxlZGA7CiAgICAgICAgICAgIGlmIChkb2N1bWVudFtuYW1lXSAhPT0gdm9pZCAwKSB7CiAgICAgICAgICAgICAgX25hbWVzLmZ1bGxzY3JlZW5FbmFibGVkID0gbmFtZTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgbmFtZSA9IGAke3ByZWZpeH1GdWxsc2NyZWVuRWxlbWVudGA7CiAgICAgICAgICBpZiAoZG9jdW1lbnRbbmFtZV0gIT09IHZvaWQgMCkgewogICAgICAgICAgICBfbmFtZXMuZnVsbHNjcmVlbkVsZW1lbnQgPSBuYW1lOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbmFtZSA9IGAke3ByZWZpeH1GdWxsU2NyZWVuRWxlbWVudGA7CiAgICAgICAgICAgIGlmIChkb2N1bWVudFtuYW1lXSAhPT0gdm9pZCAwKSB7CiAgICAgICAgICAgICAgX25hbWVzLmZ1bGxzY3JlZW5FbGVtZW50ID0gbmFtZTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgbmFtZSA9IGAke3ByZWZpeH1mdWxsc2NyZWVuY2hhbmdlYDsKICAgICAgICAgIGlmIChkb2N1bWVudFtgb24ke25hbWV9YF0gIT09IHZvaWQgMCkgewogICAgICAgICAgICBpZiAocHJlZml4ID09PSAibXMiKSB7CiAgICAgICAgICAgICAgbmFtZSA9ICJNU0Z1bGxzY3JlZW5DaGFuZ2UiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIF9uYW1lcy5mdWxsc2NyZWVuY2hhbmdlID0gbmFtZTsKICAgICAgICAgIH0KICAgICAgICAgIG5hbWUgPSBgJHtwcmVmaXh9ZnVsbHNjcmVlbmVycm9yYDsKICAgICAgICAgIGlmIChkb2N1bWVudFtgb24ke25hbWV9YF0gIT09IHZvaWQgMCkgewogICAgICAgICAgICBpZiAocHJlZml4ID09PSAibXMiKSB7CiAgICAgICAgICAgICAgbmFtZSA9ICJNU0Z1bGxzY3JlZW5FcnJvciI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgX25hbWVzLmZ1bGxzY3JlZW5lcnJvciA9IG5hbWU7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBfc3VwcG9ydHNGdWxsc2NyZWVuOwogICAgICB9OwogICAgICBGdWxsc2NyZWVuLnJlcXVlc3RGdWxsc2NyZWVuID0gZnVuY3Rpb24oZWxlbWVudCwgdnJEZXZpY2UpIHsKICAgICAgICBpZiAoIUZ1bGxzY3JlZW4uc3VwcG9ydHNGdWxsc2NyZWVuKCkpIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgZWxlbWVudFtfbmFtZXMucmVxdWVzdEZ1bGxzY3JlZW5dKHsgdnJEaXNwbGF5OiB2ckRldmljZSB9KTsKICAgICAgfTsKICAgICAgRnVsbHNjcmVlbi5leGl0RnVsbHNjcmVlbiA9IGZ1bmN0aW9uKCkgewogICAgICAgIGlmICghRnVsbHNjcmVlbi5zdXBwb3J0c0Z1bGxzY3JlZW4oKSkgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBkb2N1bWVudFtfbmFtZXMuZXhpdEZ1bGxzY3JlZW5dKCk7CiAgICAgIH07CiAgICAgIEZ1bGxzY3JlZW4uX25hbWVzID0gX25hbWVzOwogICAgICBGdWxsc2NyZWVuX2RlZmF1bHQgPSBGdWxsc2NyZWVuOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvRmVhdHVyZURldGVjdGlvbi5qcwogIGZ1bmN0aW9uIGV4dHJhY3RWZXJzaW9uKHZlcnNpb25TdHJpbmcpIHsKICAgIGNvbnN0IHBhcnRzID0gdmVyc2lvblN0cmluZy5zcGxpdCgiLiIpOwogICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHBhcnRzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7CiAgICAgIHBhcnRzW2ldID0gcGFyc2VJbnQocGFydHNbaV0sIDEwKTsKICAgIH0KICAgIHJldHVybiBwYXJ0czsKICB9CiAgZnVuY3Rpb24gaXNDaHJvbWUoKSB7CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChpc0Nocm9tZVJlc3VsdCkpIHsKICAgICAgaXNDaHJvbWVSZXN1bHQgPSBmYWxzZTsKICAgICAgaWYgKCFpc0VkZ2UoKSkgewogICAgICAgIGNvbnN0IGZpZWxkcyA9IC8gQ2hyb21lXC8oW1wuMC05XSspLy5leGVjKHRoZU5hdmlnYXRvci51c2VyQWdlbnQpOwogICAgICAgIGlmIChmaWVsZHMgIT09IG51bGwpIHsKICAgICAgICAgIGlzQ2hyb21lUmVzdWx0ID0gdHJ1ZTsKICAgICAgICAgIGNocm9tZVZlcnNpb25SZXN1bHQgPSBleHRyYWN0VmVyc2lvbihmaWVsZHNbMV0pOwogICAgICAgIH0KICAgICAgfQogICAgfQogICAgcmV0dXJuIGlzQ2hyb21lUmVzdWx0OwogIH0KICBmdW5jdGlvbiBjaHJvbWVWZXJzaW9uKCkgewogICAgcmV0dXJuIGlzQ2hyb21lKCkgJiYgY2hyb21lVmVyc2lvblJlc3VsdDsKICB9CiAgZnVuY3Rpb24gaXNTYWZhcmkoKSB7CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChpc1NhZmFyaVJlc3VsdCkpIHsKICAgICAgaXNTYWZhcmlSZXN1bHQgPSBmYWxzZTsKICAgICAgaWYgKCFpc0Nocm9tZSgpICYmICFpc0VkZ2UoKSAmJiAvIFNhZmFyaVwvW1wuMC05XSsvLnRlc3QodGhlTmF2aWdhdG9yLnVzZXJBZ2VudCkpIHsKICAgICAgICBjb25zdCBmaWVsZHMgPSAvIFZlcnNpb25cLyhbXC4wLTldKykvLmV4ZWModGhlTmF2aWdhdG9yLnVzZXJBZ2VudCk7CiAgICAgICAgaWYgKGZpZWxkcyAhPT0gbnVsbCkgewogICAgICAgICAgaXNTYWZhcmlSZXN1bHQgPSB0cnVlOwogICAgICAgICAgc2FmYXJpVmVyc2lvblJlc3VsdCA9IGV4dHJhY3RWZXJzaW9uKGZpZWxkc1sxXSk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICByZXR1cm4gaXNTYWZhcmlSZXN1bHQ7CiAgfQogIGZ1bmN0aW9uIHNhZmFyaVZlcnNpb24oKSB7CiAgICByZXR1cm4gaXNTYWZhcmkoKSAmJiBzYWZhcmlWZXJzaW9uUmVzdWx0OwogIH0KICBmdW5jdGlvbiBpc1dlYmtpdCgpIHsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGlzV2Via2l0UmVzdWx0KSkgewogICAgICBpc1dlYmtpdFJlc3VsdCA9IGZhbHNlOwogICAgICBjb25zdCBmaWVsZHMgPSAvIEFwcGxlV2ViS2l0XC8oW1wuMC05XSspKFwrPykvLmV4ZWModGhlTmF2aWdhdG9yLnVzZXJBZ2VudCk7CiAgICAgIGlmIChmaWVsZHMgIT09IG51bGwpIHsKICAgICAgICBpc1dlYmtpdFJlc3VsdCA9IHRydWU7CiAgICAgICAgd2Via2l0VmVyc2lvblJlc3VsdCA9IGV4dHJhY3RWZXJzaW9uKGZpZWxkc1sxXSk7CiAgICAgICAgd2Via2l0VmVyc2lvblJlc3VsdC5pc05pZ2h0bHkgPSAhIWZpZWxkc1syXTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIGlzV2Via2l0UmVzdWx0OwogIH0KICBmdW5jdGlvbiB3ZWJraXRWZXJzaW9uKCkgewogICAgcmV0dXJuIGlzV2Via2l0KCkgJiYgd2Via2l0VmVyc2lvblJlc3VsdDsKICB9CiAgZnVuY3Rpb24gaXNJbnRlcm5ldEV4cGxvcmVyKCkgewogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoaXNJbnRlcm5ldEV4cGxvcmVyUmVzdWx0KSkgewogICAgICBpc0ludGVybmV0RXhwbG9yZXJSZXN1bHQgPSBmYWxzZTsKICAgICAgbGV0IGZpZWxkczsKICAgICAgaWYgKHRoZU5hdmlnYXRvci5hcHBOYW1lID09PSAiTWljcm9zb2Z0IEludGVybmV0IEV4cGxvcmVyIikgewogICAgICAgIGZpZWxkcyA9IC9NU0lFIChbMC05XXsxLH1bXC4wLTldezAsfSkvLmV4ZWModGhlTmF2aWdhdG9yLnVzZXJBZ2VudCk7CiAgICAgICAgaWYgKGZpZWxkcyAhPT0gbnVsbCkgewogICAgICAgICAgaXNJbnRlcm5ldEV4cGxvcmVyUmVzdWx0ID0gdHJ1ZTsKICAgICAgICAgIGludGVybmV0RXhwbG9yZXJWZXJzaW9uUmVzdWx0ID0gZXh0cmFjdFZlcnNpb24oZmllbGRzWzFdKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAodGhlTmF2aWdhdG9yLmFwcE5hbWUgPT09ICJOZXRzY2FwZSIpIHsKICAgICAgICBmaWVsZHMgPSAvVHJpZGVudFwvLipydjooWzAtOV17MSx9W1wuMC05XXswLH0pLy5leGVjKAogICAgICAgICAgdGhlTmF2aWdhdG9yLnVzZXJBZ2VudAogICAgICAgICk7CiAgICAgICAgaWYgKGZpZWxkcyAhPT0gbnVsbCkgewogICAgICAgICAgaXNJbnRlcm5ldEV4cGxvcmVyUmVzdWx0ID0gdHJ1ZTsKICAgICAgICAgIGludGVybmV0RXhwbG9yZXJWZXJzaW9uUmVzdWx0ID0gZXh0cmFjdFZlcnNpb24oZmllbGRzWzFdKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBpc0ludGVybmV0RXhwbG9yZXJSZXN1bHQ7CiAgfQogIGZ1bmN0aW9uIGludGVybmV0RXhwbG9yZXJWZXJzaW9uKCkgewogICAgcmV0dXJuIGlzSW50ZXJuZXRFeHBsb3JlcigpICYmIGludGVybmV0RXhwbG9yZXJWZXJzaW9uUmVzdWx0OwogIH0KICBmdW5jdGlvbiBpc0VkZ2UoKSB7CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChpc0VkZ2VSZXN1bHQpKSB7CiAgICAgIGlzRWRnZVJlc3VsdCA9IGZhbHNlOwogICAgICBjb25zdCBmaWVsZHMgPSAvIEVkZ1wvKFtcLjAtOV0rKS8uZXhlYyh0aGVOYXZpZ2F0b3IudXNlckFnZW50KTsKICAgICAgaWYgKGZpZWxkcyAhPT0gbnVsbCkgewogICAgICAgIGlzRWRnZVJlc3VsdCA9IHRydWU7CiAgICAgICAgZWRnZVZlcnNpb25SZXN1bHQgPSBleHRyYWN0VmVyc2lvbihmaWVsZHNbMV0pOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gaXNFZGdlUmVzdWx0OwogIH0KICBmdW5jdGlvbiBlZGdlVmVyc2lvbigpIHsKICAgIHJldHVybiBpc0VkZ2UoKSAmJiBlZGdlVmVyc2lvblJlc3VsdDsKICB9CiAgZnVuY3Rpb24gaXNGaXJlZm94KCkgewogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoaXNGaXJlZm94UmVzdWx0KSkgewogICAgICBpc0ZpcmVmb3hSZXN1bHQgPSBmYWxzZTsKICAgICAgY29uc3QgZmllbGRzID0gL0ZpcmVmb3hcLyhbXC4wLTldKykvLmV4ZWModGhlTmF2aWdhdG9yLnVzZXJBZ2VudCk7CiAgICAgIGlmIChmaWVsZHMgIT09IG51bGwpIHsKICAgICAgICBpc0ZpcmVmb3hSZXN1bHQgPSB0cnVlOwogICAgICAgIGZpcmVmb3hWZXJzaW9uUmVzdWx0ID0gZXh0cmFjdFZlcnNpb24oZmllbGRzWzFdKTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIGlzRmlyZWZveFJlc3VsdDsKICB9CiAgZnVuY3Rpb24gaXNXaW5kb3dzKCkgewogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoaXNXaW5kb3dzUmVzdWx0KSkgewogICAgICBpc1dpbmRvd3NSZXN1bHQgPSAvV2luZG93cy9pLnRlc3QodGhlTmF2aWdhdG9yLmFwcFZlcnNpb24pOwogICAgfQogICAgcmV0dXJuIGlzV2luZG93c1Jlc3VsdDsKICB9CiAgZnVuY3Rpb24gaXNJUGFkT3JJT1MoKSB7CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChpc0lQYWRPcklPU1Jlc3VsdCkpIHsKICAgICAgaXNJUGFkT3JJT1NSZXN1bHQgPSBuYXZpZ2F0b3IucGxhdGZvcm0gPT09ICJpUGhvbmUiIHx8IG5hdmlnYXRvci5wbGF0Zm9ybSA9PT0gImlQb2QiIHx8IG5hdmlnYXRvci5wbGF0Zm9ybSA9PT0gImlQYWQiOwogICAgfQogICAgcmV0dXJuIGlzSVBhZE9ySU9TUmVzdWx0OwogIH0KICBmdW5jdGlvbiBmaXJlZm94VmVyc2lvbigpIHsKICAgIHJldHVybiBpc0ZpcmVmb3goKSAmJiBmaXJlZm94VmVyc2lvblJlc3VsdDsKICB9CiAgZnVuY3Rpb24gc3VwcG9ydHNQb2ludGVyRXZlbnRzKCkgewogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoaGFzUG9pbnRlckV2ZW50cykpIHsKICAgICAgaGFzUG9pbnRlckV2ZW50cyA9ICFpc0ZpcmVmb3goKSAmJiB0eXBlb2YgUG9pbnRlckV2ZW50ICE9PSAidW5kZWZpbmVkIiAmJiAoIWRlZmluZWRfZGVmYXVsdCh0aGVOYXZpZ2F0b3IucG9pbnRlckVuYWJsZWQpIHx8IHRoZU5hdmlnYXRvci5wb2ludGVyRW5hYmxlZCk7CiAgICB9CiAgICByZXR1cm4gaGFzUG9pbnRlckV2ZW50czsKICB9CiAgZnVuY3Rpb24gc3VwcG9ydHNJbWFnZVJlbmRlcmluZ1BpeGVsYXRlZCgpIHsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHN1cHBvcnRzSW1hZ2VSZW5kZXJpbmdQaXhlbGF0ZWRSZXN1bHQpKSB7CiAgICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImNhbnZhcyIpOwogICAgICBjYW52YXMuc2V0QXR0cmlidXRlKAogICAgICAgICJzdHlsZSIsCiAgICAgICAgImltYWdlLXJlbmRlcmluZzogLW1vei1jcmlzcC1lZGdlcztpbWFnZS1yZW5kZXJpbmc6IHBpeGVsYXRlZDsiCiAgICAgICk7CiAgICAgIGNvbnN0IHRtcDIgPSBjYW52YXMuc3R5bGUuaW1hZ2VSZW5kZXJpbmc7CiAgICAgIHN1cHBvcnRzSW1hZ2VSZW5kZXJpbmdQaXhlbGF0ZWRSZXN1bHQgPSBkZWZpbmVkX2RlZmF1bHQodG1wMikgJiYgdG1wMiAhPT0gIiI7CiAgICAgIGlmIChzdXBwb3J0c0ltYWdlUmVuZGVyaW5nUGl4ZWxhdGVkUmVzdWx0KSB7CiAgICAgICAgaW1hZ2VSZW5kZXJpbmdWYWx1ZVJlc3VsdCA9IHRtcDI7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBzdXBwb3J0c0ltYWdlUmVuZGVyaW5nUGl4ZWxhdGVkUmVzdWx0OwogIH0KICBmdW5jdGlvbiBpbWFnZVJlbmRlcmluZ1ZhbHVlKCkgewogICAgcmV0dXJuIHN1cHBvcnRzSW1hZ2VSZW5kZXJpbmdQaXhlbGF0ZWQoKSA/IGltYWdlUmVuZGVyaW5nVmFsdWVSZXN1bHQgOiB2b2lkIDA7CiAgfQogIGZ1bmN0aW9uIHN1cHBvcnRzV2ViUCgpIHsKICAgIGlmICghc3VwcG9ydHNXZWJQLmluaXRpYWxpemVkKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICJZb3UgbXVzdCBjYWxsIEZlYXR1cmVEZXRlY3Rpb24uc3VwcG9ydHNXZWJQLmluaXRpYWxpemUgYW5kIHdhaXQgZm9yIHRoZSBwcm9taXNlIHRvIHJlc29sdmUgYmVmb3JlIGNhbGxpbmcgRmVhdHVyZURldGVjdGlvbi5zdXBwb3J0c1dlYlAiCiAgICAgICk7CiAgICB9CiAgICByZXR1cm4gc3VwcG9ydHNXZWJQLl9yZXN1bHQ7CiAgfQogIHZhciB0aGVOYXZpZ2F0b3IsIGlzQ2hyb21lUmVzdWx0LCBjaHJvbWVWZXJzaW9uUmVzdWx0LCBpc1NhZmFyaVJlc3VsdCwgc2FmYXJpVmVyc2lvblJlc3VsdCwgaXNXZWJraXRSZXN1bHQsIHdlYmtpdFZlcnNpb25SZXN1bHQsIGlzSW50ZXJuZXRFeHBsb3JlclJlc3VsdCwgaW50ZXJuZXRFeHBsb3JlclZlcnNpb25SZXN1bHQsIGlzRWRnZVJlc3VsdCwgZWRnZVZlcnNpb25SZXN1bHQsIGlzRmlyZWZveFJlc3VsdCwgZmlyZWZveFZlcnNpb25SZXN1bHQsIGlzV2luZG93c1Jlc3VsdCwgaXNJUGFkT3JJT1NSZXN1bHQsIGhhc1BvaW50ZXJFdmVudHMsIGltYWdlUmVuZGVyaW5nVmFsdWVSZXN1bHQsIHN1cHBvcnRzSW1hZ2VSZW5kZXJpbmdQaXhlbGF0ZWRSZXN1bHQsIHR5cGVkQXJyYXlUeXBlcywgRmVhdHVyZURldGVjdGlvbiwgRmVhdHVyZURldGVjdGlvbl9kZWZhdWx0OwogIHZhciBpbml0X0ZlYXR1cmVEZXRlY3Rpb24gPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0ZlYXR1cmVEZXRlY3Rpb24uanMiKCkgewogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfRnVsbHNjcmVlbigpOwogICAgICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gInVuZGVmaW5lZCIpIHsKICAgICAgICB0aGVOYXZpZ2F0b3IgPSBuYXZpZ2F0b3I7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhlTmF2aWdhdG9yID0ge307CiAgICAgIH0KICAgICAgc3VwcG9ydHNXZWJQLl9wcm9taXNlID0gdm9pZCAwOwogICAgICBzdXBwb3J0c1dlYlAuX3Jlc3VsdCA9IHZvaWQgMDsKICAgICAgc3VwcG9ydHNXZWJQLmluaXRpYWxpemUgPSBmdW5jdGlvbigpIHsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHN1cHBvcnRzV2ViUC5fcHJvbWlzZSkpIHsKICAgICAgICAgIHJldHVybiBzdXBwb3J0c1dlYlAuX3Byb21pc2U7CiAgICAgICAgfQogICAgICAgIHN1cHBvcnRzV2ViUC5fcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgICAgICBjb25zdCBpbWFnZSA9IG5ldyBJbWFnZSgpOwogICAgICAgICAgaW1hZ2Uub25sb2FkID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHN1cHBvcnRzV2ViUC5fcmVzdWx0ID0gaW1hZ2Uud2lkdGggPiAwICYmIGltYWdlLmhlaWdodCA+IDA7CiAgICAgICAgICAgIHJlc29sdmUoc3VwcG9ydHNXZWJQLl9yZXN1bHQpOwogICAgICAgICAgfTsKICAgICAgICAgIGltYWdlLm9uZXJyb3IgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgc3VwcG9ydHNXZWJQLl9yZXN1bHQgPSBmYWxzZTsKICAgICAgICAgICAgcmVzb2x2ZShzdXBwb3J0c1dlYlAuX3Jlc3VsdCk7CiAgICAgICAgICB9OwogICAgICAgICAgaW1hZ2Uuc3JjID0gImRhdGE6aW1hZ2Uvd2VicDtiYXNlNjQsVWtsR1JpSUFBQUJYUlVKUVZsQTRJQllBQUFBd0FRQ2RBU29CQUFFQURzRCtKYVFBQTNBQUFBQUEiOwogICAgICAgIH0pOwogICAgICAgIHJldHVybiBzdXBwb3J0c1dlYlAuX3Byb21pc2U7CiAgICAgIH07CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHN1cHBvcnRzV2ViUCwgewogICAgICAgIGluaXRpYWxpemVkOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gZGVmaW5lZF9kZWZhdWx0KHN1cHBvcnRzV2ViUC5fcmVzdWx0KTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgICB0eXBlZEFycmF5VHlwZXMgPSBbXTsKICAgICAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gInVuZGVmaW5lZCIpIHsKICAgICAgICB0eXBlZEFycmF5VHlwZXMucHVzaCgKICAgICAgICAgIEludDhBcnJheSwKICAgICAgICAgIFVpbnQ4QXJyYXksCiAgICAgICAgICBJbnQxNkFycmF5LAogICAgICAgICAgVWludDE2QXJyYXksCiAgICAgICAgICBJbnQzMkFycmF5LAogICAgICAgICAgVWludDMyQXJyYXksCiAgICAgICAgICBGbG9hdDMyQXJyYXksCiAgICAgICAgICBGbG9hdDY0QXJyYXkKICAgICAgICApOwogICAgICAgIGlmICh0eXBlb2YgVWludDhDbGFtcGVkQXJyYXkgIT09ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICB0eXBlZEFycmF5VHlwZXMucHVzaChVaW50OENsYW1wZWRBcnJheSk7CiAgICAgICAgfQogICAgICAgIGlmICh0eXBlb2YgVWludDhDbGFtcGVkQXJyYXkgIT09ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICB0eXBlZEFycmF5VHlwZXMucHVzaChVaW50OENsYW1wZWRBcnJheSk7CiAgICAgICAgfQogICAgICAgIGlmICh0eXBlb2YgQmlnSW50NjRBcnJheSAhPT0gInVuZGVmaW5lZCIpIHsKICAgICAgICAgIHR5cGVkQXJyYXlUeXBlcy5wdXNoKEJpZ0ludDY0QXJyYXkpOwogICAgICAgIH0KICAgICAgICBpZiAodHlwZW9mIEJpZ1VpbnQ2NEFycmF5ICE9PSAidW5kZWZpbmVkIikgewogICAgICAgICAgdHlwZWRBcnJheVR5cGVzLnB1c2goQmlnVWludDY0QXJyYXkpOwogICAgICAgIH0KICAgICAgfQogICAgICBGZWF0dXJlRGV0ZWN0aW9uID0gewogICAgICAgIGlzQ2hyb21lLAogICAgICAgIGNocm9tZVZlcnNpb24sCiAgICAgICAgaXNTYWZhcmksCiAgICAgICAgc2FmYXJpVmVyc2lvbiwKICAgICAgICBpc1dlYmtpdCwKICAgICAgICB3ZWJraXRWZXJzaW9uLAogICAgICAgIGlzSW50ZXJuZXRFeHBsb3JlciwKICAgICAgICBpbnRlcm5ldEV4cGxvcmVyVmVyc2lvbiwKICAgICAgICBpc0VkZ2UsCiAgICAgICAgZWRnZVZlcnNpb24sCiAgICAgICAgaXNGaXJlZm94LAogICAgICAgIGZpcmVmb3hWZXJzaW9uLAogICAgICAgIGlzV2luZG93cywKICAgICAgICBpc0lQYWRPcklPUywKICAgICAgICBoYXJkd2FyZUNvbmN1cnJlbmN5OiBkZWZhdWx0VmFsdWVfZGVmYXVsdCh0aGVOYXZpZ2F0b3IuaGFyZHdhcmVDb25jdXJyZW5jeSwgMyksCiAgICAgICAgc3VwcG9ydHNQb2ludGVyRXZlbnRzLAogICAgICAgIHN1cHBvcnRzSW1hZ2VSZW5kZXJpbmdQaXhlbGF0ZWQsCiAgICAgICAgc3VwcG9ydHNXZWJQLAogICAgICAgIGltYWdlUmVuZGVyaW5nVmFsdWUsCiAgICAgICAgdHlwZWRBcnJheVR5cGVzCiAgICAgIH07CiAgICAgIEZlYXR1cmVEZXRlY3Rpb24uc3VwcG9ydHNCYXNpcyA9IGZ1bmN0aW9uKHNjZW5lKSB7CiAgICAgICAgcmV0dXJuIEZlYXR1cmVEZXRlY3Rpb24uc3VwcG9ydHNXZWJBc3NlbWJseSgpICYmIHNjZW5lLmNvbnRleHQuc3VwcG9ydHNCYXNpczsKICAgICAgfTsKICAgICAgRmVhdHVyZURldGVjdGlvbi5zdXBwb3J0c0Z1bGxzY3JlZW4gPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gRnVsbHNjcmVlbl9kZWZhdWx0LnN1cHBvcnRzRnVsbHNjcmVlbigpOwogICAgICB9OwogICAgICBGZWF0dXJlRGV0ZWN0aW9uLnN1cHBvcnRzVHlwZWRBcnJheXMgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gdHlwZW9mIEFycmF5QnVmZmVyICE9PSAidW5kZWZpbmVkIjsKICAgICAgfTsKICAgICAgRmVhdHVyZURldGVjdGlvbi5zdXBwb3J0c0JpZ0ludDY0QXJyYXkgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gdHlwZW9mIEJpZ0ludDY0QXJyYXkgIT09ICJ1bmRlZmluZWQiOwogICAgICB9OwogICAgICBGZWF0dXJlRGV0ZWN0aW9uLnN1cHBvcnRzQmlnVWludDY0QXJyYXkgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gdHlwZW9mIEJpZ1VpbnQ2NEFycmF5ICE9PSAidW5kZWZpbmVkIjsKICAgICAgfTsKICAgICAgRmVhdHVyZURldGVjdGlvbi5zdXBwb3J0c0JpZ0ludCA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiB0eXBlb2YgQmlnSW50ICE9PSAidW5kZWZpbmVkIjsKICAgICAgfTsKICAgICAgRmVhdHVyZURldGVjdGlvbi5zdXBwb3J0c1dlYldvcmtlcnMgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gdHlwZW9mIFdvcmtlciAhPT0gInVuZGVmaW5lZCI7CiAgICAgIH07CiAgICAgIEZlYXR1cmVEZXRlY3Rpb24uc3VwcG9ydHNXZWJBc3NlbWJseSA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiB0eXBlb2YgV2ViQXNzZW1ibHkgIT09ICJ1bmRlZmluZWQiOwogICAgICB9OwogICAgICBGZWF0dXJlRGV0ZWN0aW9uLnN1cHBvcnRzV2ViZ2wyID0gZnVuY3Rpb24oc2NlbmUpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoInNjZW5lIiwgc2NlbmUpOwogICAgICAgIHJldHVybiBzY2VuZS5jb250ZXh0LndlYmdsMjsKICAgICAgfTsKICAgICAgRmVhdHVyZURldGVjdGlvbi5zdXBwb3J0c0VzbVdlYldvcmtlcnMgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gIWlzRmlyZWZveCgpIHx8IHBhcnNlSW50KGZpcmVmb3hWZXJzaW9uUmVzdWx0KSA+PSAxMTQ7CiAgICAgIH07CiAgICAgIEZlYXR1cmVEZXRlY3Rpb25fZGVmYXVsdCA9IEZlYXR1cmVEZXRlY3Rpb247CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9RdWF0ZXJuaW9uLmpzCiAgZnVuY3Rpb24gUXVhdGVybmlvbih4LCB5LCB6LCB3KSB7CiAgICB0aGlzLnggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh4LCAwKTsKICAgIHRoaXMueSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHksIDApOwogICAgdGhpcy56ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoeiwgMCk7CiAgICB0aGlzLncgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh3LCAwKTsKICB9CiAgdmFyIGZyb21BeGlzQW5nbGVTY3JhdGNoLCBmcm9tUm90YXRpb25NYXRyaXhOZXh0LCBmcm9tUm90YXRpb25NYXRyaXhRdWF0LCBzY3JhdGNoSFBSUXVhdGVybmlvbiwgc2NyYXRjaEhlYWRpbmdRdWF0ZXJuaW9uLCBzY3JhdGNoUGl0Y2hRdWF0ZXJuaW9uLCBzY3JhdGNoUm9sbFF1YXRlcm5pb24sIHNhbXBsZWRRdWF0ZXJuaW9uQXhpcywgc2FtcGxlZFF1YXRlcm5pb25Sb3RhdGlvbiwgc2FtcGxlZFF1YXRlcm5pb25UZW1wUXVhdGVybmlvbiwgc2FtcGxlZFF1YXRlcm5pb25RdWF0ZXJuaW9uMCwgc2FtcGxlZFF1YXRlcm5pb25RdWF0ZXJuaW9uMENvbmp1Z2F0ZSwgbGVycFNjcmF0Y2g0LCBzbGVycEVuZE5lZ2F0ZWQsIHNsZXJwU2NhbGVkUCwgc2xlcnBTY2FsZWRSLCBzcXVhZFNjcmF0Y2hDYXJ0ZXNpYW4wLCBzcXVhZFNjcmF0Y2hDYXJ0ZXNpYW4xLCBzcXVhZFNjcmF0Y2hRdWF0ZXJuaW9uMCwgc3F1YWRTY3JhdGNoUXVhdGVybmlvbjEsIGZhc3RTbGVycFNjcmF0Y2hRdWF0ZXJuaW9uLCBvcG11LCB1LCB2LCBiVCwgYkQsIFF1YXRlcm5pb25fZGVmYXVsdDsKICB2YXIgaW5pdF9RdWF0ZXJuaW9uID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9RdWF0ZXJuaW9uLmpzIigpIHsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRmVhdHVyZURldGVjdGlvbigpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgaW5pdF9NYXRyaXgzKCk7CiAgICAgIGZyb21BeGlzQW5nbGVTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBRdWF0ZXJuaW9uLmZyb21BeGlzQW5nbGUgPSBmdW5jdGlvbihheGlzLCBhbmdsZSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJheGlzIiwgYXhpcyk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJhbmdsZSIsIGFuZ2xlKTsKICAgICAgICBjb25zdCBoYWxmQW5nbGUgPSBhbmdsZSAvIDI7CiAgICAgICAgY29uc3QgcyA9IE1hdGguc2luKGhhbGZBbmdsZSk7CiAgICAgICAgZnJvbUF4aXNBbmdsZVNjcmF0Y2ggPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKGF4aXMsIGZyb21BeGlzQW5nbGVTY3JhdGNoKTsKICAgICAgICBjb25zdCB4ID0gZnJvbUF4aXNBbmdsZVNjcmF0Y2gueCAqIHM7CiAgICAgICAgY29uc3QgeSA9IGZyb21BeGlzQW5nbGVTY3JhdGNoLnkgKiBzOwogICAgICAgIGNvbnN0IHogPSBmcm9tQXhpc0FuZ2xlU2NyYXRjaC56ICogczsKICAgICAgICBjb25zdCB3ID0gTWF0aC5jb3MoaGFsZkFuZ2xlKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IFF1YXRlcm5pb24oeCwgeSwgeiwgdyk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC54ID0geDsKICAgICAgICByZXN1bHQueSA9IHk7CiAgICAgICAgcmVzdWx0LnogPSB6OwogICAgICAgIHJlc3VsdC53ID0gdzsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBmcm9tUm90YXRpb25NYXRyaXhOZXh0ID0gWzEsIDIsIDBdOwogICAgICBmcm9tUm90YXRpb25NYXRyaXhRdWF0ID0gbmV3IEFycmF5KDMpOwogICAgICBRdWF0ZXJuaW9uLmZyb21Sb3RhdGlvbk1hdHJpeCA9IGZ1bmN0aW9uKG1hdHJpeCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXRyaXgiLCBtYXRyaXgpOwogICAgICAgIGxldCByb290OwogICAgICAgIGxldCB4OwogICAgICAgIGxldCB5OwogICAgICAgIGxldCB6OwogICAgICAgIGxldCB3OwogICAgICAgIGNvbnN0IG0wMCA9IG1hdHJpeFtNYXRyaXgzX2RlZmF1bHQuQ09MVU1OMFJPVzBdOwogICAgICAgIGNvbnN0IG0xMSA9IG1hdHJpeFtNYXRyaXgzX2RlZmF1bHQuQ09MVU1OMVJPVzFdOwogICAgICAgIGNvbnN0IG0yMiA9IG1hdHJpeFtNYXRyaXgzX2RlZmF1bHQuQ09MVU1OMlJPVzJdOwogICAgICAgIGNvbnN0IHRyYWNlID0gbTAwICsgbTExICsgbTIyOwogICAgICAgIGlmICh0cmFjZSA+IDApIHsKICAgICAgICAgIHJvb3QgPSBNYXRoLnNxcnQodHJhY2UgKyAxKTsKICAgICAgICAgIHcgPSAwLjUgKiByb290OwogICAgICAgICAgcm9vdCA9IDAuNSAvIHJvb3Q7CiAgICAgICAgICB4ID0gKG1hdHJpeFtNYXRyaXgzX2RlZmF1bHQuQ09MVU1OMVJPVzJdIC0gbWF0cml4W01hdHJpeDNfZGVmYXVsdC5DT0xVTU4yUk9XMV0pICogcm9vdDsKICAgICAgICAgIHkgPSAobWF0cml4W01hdHJpeDNfZGVmYXVsdC5DT0xVTU4yUk9XMF0gLSBtYXRyaXhbTWF0cml4M19kZWZhdWx0LkNPTFVNTjBST1cyXSkgKiByb290OwogICAgICAgICAgeiA9IChtYXRyaXhbTWF0cml4M19kZWZhdWx0LkNPTFVNTjBST1cxXSAtIG1hdHJpeFtNYXRyaXgzX2RlZmF1bHQuQ09MVU1OMVJPVzBdKSAqIHJvb3Q7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNvbnN0IG5leHQgPSBmcm9tUm90YXRpb25NYXRyaXhOZXh0OwogICAgICAgICAgbGV0IGkgPSAwOwogICAgICAgICAgaWYgKG0xMSA+IG0wMCkgewogICAgICAgICAgICBpID0gMTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChtMjIgPiBtMDAgJiYgbTIyID4gbTExKSB7CiAgICAgICAgICAgIGkgPSAyOwogICAgICAgICAgfQogICAgICAgICAgY29uc3QgaiA9IG5leHRbaV07CiAgICAgICAgICBjb25zdCBrID0gbmV4dFtqXTsKICAgICAgICAgIHJvb3QgPSBNYXRoLnNxcnQoCiAgICAgICAgICAgIG1hdHJpeFtNYXRyaXgzX2RlZmF1bHQuZ2V0RWxlbWVudEluZGV4KGksIGkpXSAtIG1hdHJpeFtNYXRyaXgzX2RlZmF1bHQuZ2V0RWxlbWVudEluZGV4KGosIGopXSAtIG1hdHJpeFtNYXRyaXgzX2RlZmF1bHQuZ2V0RWxlbWVudEluZGV4KGssIGspXSArIDEKICAgICAgICAgICk7CiAgICAgICAgICBjb25zdCBxdWF0ID0gZnJvbVJvdGF0aW9uTWF0cml4UXVhdDsKICAgICAgICAgIHF1YXRbaV0gPSAwLjUgKiByb290OwogICAgICAgICAgcm9vdCA9IDAuNSAvIHJvb3Q7CiAgICAgICAgICB3ID0gKG1hdHJpeFtNYXRyaXgzX2RlZmF1bHQuZ2V0RWxlbWVudEluZGV4KGssIGopXSAtIG1hdHJpeFtNYXRyaXgzX2RlZmF1bHQuZ2V0RWxlbWVudEluZGV4KGosIGspXSkgKiByb290OwogICAgICAgICAgcXVhdFtqXSA9IChtYXRyaXhbTWF0cml4M19kZWZhdWx0LmdldEVsZW1lbnRJbmRleChqLCBpKV0gKyBtYXRyaXhbTWF0cml4M19kZWZhdWx0LmdldEVsZW1lbnRJbmRleChpLCBqKV0pICogcm9vdDsKICAgICAgICAgIHF1YXRba10gPSAobWF0cml4W01hdHJpeDNfZGVmYXVsdC5nZXRFbGVtZW50SW5kZXgoaywgaSldICsgbWF0cml4W01hdHJpeDNfZGVmYXVsdC5nZXRFbGVtZW50SW5kZXgoaSwgayldKSAqIHJvb3Q7CiAgICAgICAgICB4ID0gLXF1YXRbMF07CiAgICAgICAgICB5ID0gLXF1YXRbMV07CiAgICAgICAgICB6ID0gLXF1YXRbMl07CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgUXVhdGVybmlvbih4LCB5LCB6LCB3KTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LnggPSB4OwogICAgICAgIHJlc3VsdC55ID0geTsKICAgICAgICByZXN1bHQueiA9IHo7CiAgICAgICAgcmVzdWx0LncgPSB3OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hIUFJRdWF0ZXJuaW9uID0gbmV3IFF1YXRlcm5pb24oKTsKICAgICAgc2NyYXRjaEhlYWRpbmdRdWF0ZXJuaW9uID0gbmV3IFF1YXRlcm5pb24oKTsKICAgICAgc2NyYXRjaFBpdGNoUXVhdGVybmlvbiA9IG5ldyBRdWF0ZXJuaW9uKCk7CiAgICAgIHNjcmF0Y2hSb2xsUXVhdGVybmlvbiA9IG5ldyBRdWF0ZXJuaW9uKCk7CiAgICAgIFF1YXRlcm5pb24uZnJvbUhlYWRpbmdQaXRjaFJvbGwgPSBmdW5jdGlvbihoZWFkaW5nUGl0Y2hSb2xsLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImhlYWRpbmdQaXRjaFJvbGwiLCBoZWFkaW5nUGl0Y2hSb2xsKTsKICAgICAgICBzY3JhdGNoUm9sbFF1YXRlcm5pb24gPSBRdWF0ZXJuaW9uLmZyb21BeGlzQW5nbGUoCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuVU5JVF9YLAogICAgICAgICAgaGVhZGluZ1BpdGNoUm9sbC5yb2xsLAogICAgICAgICAgc2NyYXRjaEhQUlF1YXRlcm5pb24KICAgICAgICApOwogICAgICAgIHNjcmF0Y2hQaXRjaFF1YXRlcm5pb24gPSBRdWF0ZXJuaW9uLmZyb21BeGlzQW5nbGUoCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuVU5JVF9ZLAogICAgICAgICAgLWhlYWRpbmdQaXRjaFJvbGwucGl0Y2gsCiAgICAgICAgICByZXN1bHQKICAgICAgICApOwogICAgICAgIHJlc3VsdCA9IFF1YXRlcm5pb24ubXVsdGlwbHkoCiAgICAgICAgICBzY3JhdGNoUGl0Y2hRdWF0ZXJuaW9uLAogICAgICAgICAgc2NyYXRjaFJvbGxRdWF0ZXJuaW9uLAogICAgICAgICAgc2NyYXRjaFBpdGNoUXVhdGVybmlvbgogICAgICAgICk7CiAgICAgICAgc2NyYXRjaEhlYWRpbmdRdWF0ZXJuaW9uID0gUXVhdGVybmlvbi5mcm9tQXhpc0FuZ2xlKAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LlVOSVRfWiwKICAgICAgICAgIC1oZWFkaW5nUGl0Y2hSb2xsLmhlYWRpbmcsCiAgICAgICAgICBzY3JhdGNoSFBSUXVhdGVybmlvbgogICAgICAgICk7CiAgICAgICAgcmV0dXJuIFF1YXRlcm5pb24ubXVsdGlwbHkoc2NyYXRjaEhlYWRpbmdRdWF0ZXJuaW9uLCByZXN1bHQsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIHNhbXBsZWRRdWF0ZXJuaW9uQXhpcyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2FtcGxlZFF1YXRlcm5pb25Sb3RhdGlvbiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2FtcGxlZFF1YXRlcm5pb25UZW1wUXVhdGVybmlvbiA9IG5ldyBRdWF0ZXJuaW9uKCk7CiAgICAgIHNhbXBsZWRRdWF0ZXJuaW9uUXVhdGVybmlvbjAgPSBuZXcgUXVhdGVybmlvbigpOwogICAgICBzYW1wbGVkUXVhdGVybmlvblF1YXRlcm5pb24wQ29uanVnYXRlID0gbmV3IFF1YXRlcm5pb24oKTsKICAgICAgUXVhdGVybmlvbi5wYWNrZWRMZW5ndGggPSA0OwogICAgICBRdWF0ZXJuaW9uLnBhY2sgPSBmdW5jdGlvbih2YWx1ZSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInZhbHVlIiwgdmFsdWUpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS54OwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS55OwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS56OwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXhdID0gdmFsdWUudzsKICAgICAgICByZXR1cm4gYXJyYXk7CiAgICAgIH07CiAgICAgIFF1YXRlcm5pb24udW5wYWNrID0gZnVuY3Rpb24oYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBRdWF0ZXJuaW9uKCk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC54ID0gYXJyYXlbc3RhcnRpbmdJbmRleF07CiAgICAgICAgcmVzdWx0LnkgPSBhcnJheVtzdGFydGluZ0luZGV4ICsgMV07CiAgICAgICAgcmVzdWx0LnogPSBhcnJheVtzdGFydGluZ0luZGV4ICsgMl07CiAgICAgICAgcmVzdWx0LncgPSBhcnJheVtzdGFydGluZ0luZGV4ICsgM107CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgUXVhdGVybmlvbi5wYWNrZWRJbnRlcnBvbGF0aW9uTGVuZ3RoID0gMzsKICAgICAgUXVhdGVybmlvbi5jb252ZXJ0UGFja2VkQXJyYXlGb3JJbnRlcnBvbGF0aW9uID0gZnVuY3Rpb24ocGFja2VkQXJyYXksIHN0YXJ0aW5nSW5kZXgsIGxhc3RJbmRleCwgcmVzdWx0KSB7CiAgICAgICAgUXVhdGVybmlvbi51bnBhY2soCiAgICAgICAgICBwYWNrZWRBcnJheSwKICAgICAgICAgIGxhc3RJbmRleCAqIDQsCiAgICAgICAgICBzYW1wbGVkUXVhdGVybmlvblF1YXRlcm5pb24wQ29uanVnYXRlCiAgICAgICAgKTsKICAgICAgICBRdWF0ZXJuaW9uLmNvbmp1Z2F0ZSgKICAgICAgICAgIHNhbXBsZWRRdWF0ZXJuaW9uUXVhdGVybmlvbjBDb25qdWdhdGUsCiAgICAgICAgICBzYW1wbGVkUXVhdGVybmlvblF1YXRlcm5pb24wQ29uanVnYXRlCiAgICAgICAgKTsKICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gbGFzdEluZGV4IC0gc3RhcnRpbmdJbmRleCArIDE7IGkgPCBsZW47IGkrKykgewogICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gaSAqIDM7CiAgICAgICAgICBRdWF0ZXJuaW9uLnVucGFjaygKICAgICAgICAgICAgcGFja2VkQXJyYXksCiAgICAgICAgICAgIChzdGFydGluZ0luZGV4ICsgaSkgKiA0LAogICAgICAgICAgICBzYW1wbGVkUXVhdGVybmlvblRlbXBRdWF0ZXJuaW9uCiAgICAgICAgICApOwogICAgICAgICAgUXVhdGVybmlvbi5tdWx0aXBseSgKICAgICAgICAgICAgc2FtcGxlZFF1YXRlcm5pb25UZW1wUXVhdGVybmlvbiwKICAgICAgICAgICAgc2FtcGxlZFF1YXRlcm5pb25RdWF0ZXJuaW9uMENvbmp1Z2F0ZSwKICAgICAgICAgICAgc2FtcGxlZFF1YXRlcm5pb25UZW1wUXVhdGVybmlvbgogICAgICAgICAgKTsKICAgICAgICAgIGlmIChzYW1wbGVkUXVhdGVybmlvblRlbXBRdWF0ZXJuaW9uLncgPCAwKSB7CiAgICAgICAgICAgIFF1YXRlcm5pb24ubmVnYXRlKAogICAgICAgICAgICAgIHNhbXBsZWRRdWF0ZXJuaW9uVGVtcFF1YXRlcm5pb24sCiAgICAgICAgICAgICAgc2FtcGxlZFF1YXRlcm5pb25UZW1wUXVhdGVybmlvbgogICAgICAgICAgICApOwogICAgICAgICAgfQogICAgICAgICAgUXVhdGVybmlvbi5jb21wdXRlQXhpcygKICAgICAgICAgICAgc2FtcGxlZFF1YXRlcm5pb25UZW1wUXVhdGVybmlvbiwKICAgICAgICAgICAgc2FtcGxlZFF1YXRlcm5pb25BeGlzCiAgICAgICAgICApOwogICAgICAgICAgY29uc3QgYW5nbGUgPSBRdWF0ZXJuaW9uLmNvbXB1dGVBbmdsZShzYW1wbGVkUXVhdGVybmlvblRlbXBRdWF0ZXJuaW9uKTsKICAgICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgICAgcmVzdWx0ID0gW107CiAgICAgICAgICB9CiAgICAgICAgICByZXN1bHRbb2Zmc2V0XSA9IHNhbXBsZWRRdWF0ZXJuaW9uQXhpcy54ICogYW5nbGU7CiAgICAgICAgICByZXN1bHRbb2Zmc2V0ICsgMV0gPSBzYW1wbGVkUXVhdGVybmlvbkF4aXMueSAqIGFuZ2xlOwogICAgICAgICAgcmVzdWx0W29mZnNldCArIDJdID0gc2FtcGxlZFF1YXRlcm5pb25BeGlzLnogKiBhbmdsZTsKICAgICAgICB9CiAgICAgIH07CiAgICAgIFF1YXRlcm5pb24udW5wYWNrSW50ZXJwb2xhdGlvblJlc3VsdCA9IGZ1bmN0aW9uKGFycmF5LCBzb3VyY2VBcnJheSwgZmlyc3RJbmRleCwgbGFzdEluZGV4LCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgUXVhdGVybmlvbigpOwogICAgICAgIH0KICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KGFycmF5LCAwLCBzYW1wbGVkUXVhdGVybmlvblJvdGF0aW9uKTsKICAgICAgICBjb25zdCBtYWduaXR1ZGUgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlKHNhbXBsZWRRdWF0ZXJuaW9uUm90YXRpb24pOwogICAgICAgIFF1YXRlcm5pb24udW5wYWNrKHNvdXJjZUFycmF5LCBsYXN0SW5kZXggKiA0LCBzYW1wbGVkUXVhdGVybmlvblF1YXRlcm5pb24wKTsKICAgICAgICBpZiAobWFnbml0dWRlID09PSAwKSB7CiAgICAgICAgICBRdWF0ZXJuaW9uLmNsb25lKFF1YXRlcm5pb24uSURFTlRJVFksIHNhbXBsZWRRdWF0ZXJuaW9uVGVtcFF1YXRlcm5pb24pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBRdWF0ZXJuaW9uLmZyb21BeGlzQW5nbGUoCiAgICAgICAgICAgIHNhbXBsZWRRdWF0ZXJuaW9uUm90YXRpb24sCiAgICAgICAgICAgIG1hZ25pdHVkZSwKICAgICAgICAgICAgc2FtcGxlZFF1YXRlcm5pb25UZW1wUXVhdGVybmlvbgogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIFF1YXRlcm5pb24ubXVsdGlwbHkoCiAgICAgICAgICBzYW1wbGVkUXVhdGVybmlvblRlbXBRdWF0ZXJuaW9uLAogICAgICAgICAgc2FtcGxlZFF1YXRlcm5pb25RdWF0ZXJuaW9uMCwKICAgICAgICAgIHJlc3VsdAogICAgICAgICk7CiAgICAgIH07CiAgICAgIFF1YXRlcm5pb24uY2xvbmUgPSBmdW5jdGlvbihxdWF0ZXJuaW9uLCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChxdWF0ZXJuaW9uKSkgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBRdWF0ZXJuaW9uKAogICAgICAgICAgICBxdWF0ZXJuaW9uLngsCiAgICAgICAgICAgIHF1YXRlcm5pb24ueSwKICAgICAgICAgICAgcXVhdGVybmlvbi56LAogICAgICAgICAgICBxdWF0ZXJuaW9uLncKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC54ID0gcXVhdGVybmlvbi54OwogICAgICAgIHJlc3VsdC55ID0gcXVhdGVybmlvbi55OwogICAgICAgIHJlc3VsdC56ID0gcXVhdGVybmlvbi56OwogICAgICAgIHJlc3VsdC53ID0gcXVhdGVybmlvbi53OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFF1YXRlcm5pb24uY29uanVnYXRlID0gZnVuY3Rpb24ocXVhdGVybmlvbiwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJxdWF0ZXJuaW9uIiwgcXVhdGVybmlvbik7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdC54ID0gLXF1YXRlcm5pb24ueDsKICAgICAgICByZXN1bHQueSA9IC1xdWF0ZXJuaW9uLnk7CiAgICAgICAgcmVzdWx0LnogPSAtcXVhdGVybmlvbi56OwogICAgICAgIHJlc3VsdC53ID0gcXVhdGVybmlvbi53OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFF1YXRlcm5pb24ubWFnbml0dWRlU3F1YXJlZCA9IGZ1bmN0aW9uKHF1YXRlcm5pb24pIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInF1YXRlcm5pb24iLCBxdWF0ZXJuaW9uKTsKICAgICAgICByZXR1cm4gcXVhdGVybmlvbi54ICogcXVhdGVybmlvbi54ICsgcXVhdGVybmlvbi55ICogcXVhdGVybmlvbi55ICsgcXVhdGVybmlvbi56ICogcXVhdGVybmlvbi56ICsgcXVhdGVybmlvbi53ICogcXVhdGVybmlvbi53OwogICAgICB9OwogICAgICBRdWF0ZXJuaW9uLm1hZ25pdHVkZSA9IGZ1bmN0aW9uKHF1YXRlcm5pb24pIHsKICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KFF1YXRlcm5pb24ubWFnbml0dWRlU3F1YXJlZChxdWF0ZXJuaW9uKSk7CiAgICAgIH07CiAgICAgIFF1YXRlcm5pb24ubm9ybWFsaXplID0gZnVuY3Rpb24ocXVhdGVybmlvbiwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGNvbnN0IGludmVyc2VNYWduaXR1ZGUgPSAxIC8gUXVhdGVybmlvbi5tYWduaXR1ZGUocXVhdGVybmlvbik7CiAgICAgICAgY29uc3QgeCA9IHF1YXRlcm5pb24ueCAqIGludmVyc2VNYWduaXR1ZGU7CiAgICAgICAgY29uc3QgeSA9IHF1YXRlcm5pb24ueSAqIGludmVyc2VNYWduaXR1ZGU7CiAgICAgICAgY29uc3QgeiA9IHF1YXRlcm5pb24ueiAqIGludmVyc2VNYWduaXR1ZGU7CiAgICAgICAgY29uc3QgdyA9IHF1YXRlcm5pb24udyAqIGludmVyc2VNYWduaXR1ZGU7CiAgICAgICAgcmVzdWx0LnggPSB4OwogICAgICAgIHJlc3VsdC55ID0geTsKICAgICAgICByZXN1bHQueiA9IHo7CiAgICAgICAgcmVzdWx0LncgPSB3OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFF1YXRlcm5pb24uaW52ZXJzZSA9IGZ1bmN0aW9uKHF1YXRlcm5pb24sIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCBtYWduaXR1ZGVTcXVhcmVkID0gUXVhdGVybmlvbi5tYWduaXR1ZGVTcXVhcmVkKHF1YXRlcm5pb24pOwogICAgICAgIHJlc3VsdCA9IFF1YXRlcm5pb24uY29uanVnYXRlKHF1YXRlcm5pb24sIHJlc3VsdCk7CiAgICAgICAgcmV0dXJuIFF1YXRlcm5pb24ubXVsdGlwbHlCeVNjYWxhcihyZXN1bHQsIDEgLyBtYWduaXR1ZGVTcXVhcmVkLCByZXN1bHQpOwogICAgICB9OwogICAgICBRdWF0ZXJuaW9uLmFkZCA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImxlZnQiLCBsZWZ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJpZ2h0IiwgcmlnaHQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHQueCA9IGxlZnQueCArIHJpZ2h0Lng7CiAgICAgICAgcmVzdWx0LnkgPSBsZWZ0LnkgKyByaWdodC55OwogICAgICAgIHJlc3VsdC56ID0gbGVmdC56ICsgcmlnaHQuejsKICAgICAgICByZXN1bHQudyA9IGxlZnQudyArIHJpZ2h0Lnc7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgUXVhdGVybmlvbi5zdWJ0cmFjdCA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImxlZnQiLCBsZWZ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJpZ2h0IiwgcmlnaHQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHQueCA9IGxlZnQueCAtIHJpZ2h0Lng7CiAgICAgICAgcmVzdWx0LnkgPSBsZWZ0LnkgLSByaWdodC55OwogICAgICAgIHJlc3VsdC56ID0gbGVmdC56IC0gcmlnaHQuejsKICAgICAgICByZXN1bHQudyA9IGxlZnQudyAtIHJpZ2h0Lnc7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgUXVhdGVybmlvbi5uZWdhdGUgPSBmdW5jdGlvbihxdWF0ZXJuaW9uLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInF1YXRlcm5pb24iLCBxdWF0ZXJuaW9uKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0LnggPSAtcXVhdGVybmlvbi54OwogICAgICAgIHJlc3VsdC55ID0gLXF1YXRlcm5pb24ueTsKICAgICAgICByZXN1bHQueiA9IC1xdWF0ZXJuaW9uLno7CiAgICAgICAgcmVzdWx0LncgPSAtcXVhdGVybmlvbi53OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFF1YXRlcm5pb24uZG90ID0gZnVuY3Rpb24obGVmdCwgcmlnaHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImxlZnQiLCBsZWZ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJpZ2h0IiwgcmlnaHQpOwogICAgICAgIHJldHVybiBsZWZ0LnggKiByaWdodC54ICsgbGVmdC55ICogcmlnaHQueSArIGxlZnQueiAqIHJpZ2h0LnogKyBsZWZ0LncgKiByaWdodC53OwogICAgICB9OwogICAgICBRdWF0ZXJuaW9uLm11bHRpcGx5ID0gZnVuY3Rpb24obGVmdCwgcmlnaHQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibGVmdCIsIGxlZnQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmlnaHQiLCByaWdodCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGNvbnN0IGxlZnRYID0gbGVmdC54OwogICAgICAgIGNvbnN0IGxlZnRZID0gbGVmdC55OwogICAgICAgIGNvbnN0IGxlZnRaID0gbGVmdC56OwogICAgICAgIGNvbnN0IGxlZnRXID0gbGVmdC53OwogICAgICAgIGNvbnN0IHJpZ2h0WCA9IHJpZ2h0Lng7CiAgICAgICAgY29uc3QgcmlnaHRZID0gcmlnaHQueTsKICAgICAgICBjb25zdCByaWdodFogPSByaWdodC56OwogICAgICAgIGNvbnN0IHJpZ2h0VyA9IHJpZ2h0Lnc7CiAgICAgICAgY29uc3QgeCA9IGxlZnRXICogcmlnaHRYICsgbGVmdFggKiByaWdodFcgKyBsZWZ0WSAqIHJpZ2h0WiAtIGxlZnRaICogcmlnaHRZOwogICAgICAgIGNvbnN0IHkgPSBsZWZ0VyAqIHJpZ2h0WSAtIGxlZnRYICogcmlnaHRaICsgbGVmdFkgKiByaWdodFcgKyBsZWZ0WiAqIHJpZ2h0WDsKICAgICAgICBjb25zdCB6ID0gbGVmdFcgKiByaWdodFogKyBsZWZ0WCAqIHJpZ2h0WSAtIGxlZnRZICogcmlnaHRYICsgbGVmdFogKiByaWdodFc7CiAgICAgICAgY29uc3QgdyA9IGxlZnRXICogcmlnaHRXIC0gbGVmdFggKiByaWdodFggLSBsZWZ0WSAqIHJpZ2h0WSAtIGxlZnRaICogcmlnaHRaOwogICAgICAgIHJlc3VsdC54ID0geDsKICAgICAgICByZXN1bHQueSA9IHk7CiAgICAgICAgcmVzdWx0LnogPSB6OwogICAgICAgIHJlc3VsdC53ID0gdzsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBRdWF0ZXJuaW9uLm11bHRpcGx5QnlTY2FsYXIgPSBmdW5jdGlvbihxdWF0ZXJuaW9uLCBzY2FsYXIsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicXVhdGVybmlvbiIsIHF1YXRlcm5pb24pOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigic2NhbGFyIiwgc2NhbGFyKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0LnggPSBxdWF0ZXJuaW9uLnggKiBzY2FsYXI7CiAgICAgICAgcmVzdWx0LnkgPSBxdWF0ZXJuaW9uLnkgKiBzY2FsYXI7CiAgICAgICAgcmVzdWx0LnogPSBxdWF0ZXJuaW9uLnogKiBzY2FsYXI7CiAgICAgICAgcmVzdWx0LncgPSBxdWF0ZXJuaW9uLncgKiBzY2FsYXI7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgUXVhdGVybmlvbi5kaXZpZGVCeVNjYWxhciA9IGZ1bmN0aW9uKHF1YXRlcm5pb24sIHNjYWxhciwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJxdWF0ZXJuaW9uIiwgcXVhdGVybmlvbik7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJzY2FsYXIiLCBzY2FsYXIpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHQueCA9IHF1YXRlcm5pb24ueCAvIHNjYWxhcjsKICAgICAgICByZXN1bHQueSA9IHF1YXRlcm5pb24ueSAvIHNjYWxhcjsKICAgICAgICByZXN1bHQueiA9IHF1YXRlcm5pb24ueiAvIHNjYWxhcjsKICAgICAgICByZXN1bHQudyA9IHF1YXRlcm5pb24udyAvIHNjYWxhcjsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBRdWF0ZXJuaW9uLmNvbXB1dGVBeGlzID0gZnVuY3Rpb24ocXVhdGVybmlvbiwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJxdWF0ZXJuaW9uIiwgcXVhdGVybmlvbik7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGNvbnN0IHcgPSBxdWF0ZXJuaW9uLnc7CiAgICAgICAgaWYgKE1hdGguYWJzKHcgLSAxKSA8IE1hdGhfZGVmYXVsdC5FUFNJTE9ONiB8fCBNYXRoLmFicyh3ICsgMSkgPCBNYXRoX2RlZmF1bHQuRVBTSUxPTjYpIHsKICAgICAgICAgIHJlc3VsdC54ID0gMTsKICAgICAgICAgIHJlc3VsdC55ID0gcmVzdWx0LnogPSAwOwogICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9CiAgICAgICAgY29uc3Qgc2NhbGFyID0gMSAvIE1hdGguc3FydCgxIC0gdyAqIHcpOwogICAgICAgIHJlc3VsdC54ID0gcXVhdGVybmlvbi54ICogc2NhbGFyOwogICAgICAgIHJlc3VsdC55ID0gcXVhdGVybmlvbi55ICogc2NhbGFyOwogICAgICAgIHJlc3VsdC56ID0gcXVhdGVybmlvbi56ICogc2NhbGFyOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFF1YXRlcm5pb24uY29tcHV0ZUFuZ2xlID0gZnVuY3Rpb24ocXVhdGVybmlvbikgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicXVhdGVybmlvbiIsIHF1YXRlcm5pb24pOwogICAgICAgIGlmIChNYXRoLmFicyhxdWF0ZXJuaW9uLncgLSAxKSA8IE1hdGhfZGVmYXVsdC5FUFNJTE9ONikgewogICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfQogICAgICAgIHJldHVybiAyICogTWF0aC5hY29zKHF1YXRlcm5pb24udyk7CiAgICAgIH07CiAgICAgIGxlcnBTY3JhdGNoNCA9IG5ldyBRdWF0ZXJuaW9uKCk7CiAgICAgIFF1YXRlcm5pb24ubGVycCA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQsIHQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgic3RhcnQiLCBzdGFydCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJlbmQiLCBlbmQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigidCIsIHQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBsZXJwU2NyYXRjaDQgPSBRdWF0ZXJuaW9uLm11bHRpcGx5QnlTY2FsYXIoZW5kLCB0LCBsZXJwU2NyYXRjaDQpOwogICAgICAgIHJlc3VsdCA9IFF1YXRlcm5pb24ubXVsdGlwbHlCeVNjYWxhcihzdGFydCwgMSAtIHQsIHJlc3VsdCk7CiAgICAgICAgcmV0dXJuIFF1YXRlcm5pb24uYWRkKGxlcnBTY3JhdGNoNCwgcmVzdWx0LCByZXN1bHQpOwogICAgICB9OwogICAgICBzbGVycEVuZE5lZ2F0ZWQgPSBuZXcgUXVhdGVybmlvbigpOwogICAgICBzbGVycFNjYWxlZFAgPSBuZXcgUXVhdGVybmlvbigpOwogICAgICBzbGVycFNjYWxlZFIgPSBuZXcgUXVhdGVybmlvbigpOwogICAgICBRdWF0ZXJuaW9uLnNsZXJwID0gZnVuY3Rpb24oc3RhcnQsIGVuZCwgdCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJzdGFydCIsIHN0YXJ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImVuZCIsIGVuZCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJ0IiwgdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGxldCBkb3QgPSBRdWF0ZXJuaW9uLmRvdChzdGFydCwgZW5kKTsKICAgICAgICBsZXQgciA9IGVuZDsKICAgICAgICBpZiAoZG90IDwgMCkgewogICAgICAgICAgZG90ID0gLWRvdDsKICAgICAgICAgIHIgPSBzbGVycEVuZE5lZ2F0ZWQgPSBRdWF0ZXJuaW9uLm5lZ2F0ZShlbmQsIHNsZXJwRW5kTmVnYXRlZCk7CiAgICAgICAgfQogICAgICAgIGlmICgxIC0gZG90IDwgTWF0aF9kZWZhdWx0LkVQU0lMT042KSB7CiAgICAgICAgICByZXR1cm4gUXVhdGVybmlvbi5sZXJwKHN0YXJ0LCByLCB0LCByZXN1bHQpOwogICAgICAgIH0KICAgICAgICBjb25zdCB0aGV0YSA9IE1hdGguYWNvcyhkb3QpOwogICAgICAgIHNsZXJwU2NhbGVkUCA9IFF1YXRlcm5pb24ubXVsdGlwbHlCeVNjYWxhcigKICAgICAgICAgIHN0YXJ0LAogICAgICAgICAgTWF0aC5zaW4oKDEgLSB0KSAqIHRoZXRhKSwKICAgICAgICAgIHNsZXJwU2NhbGVkUAogICAgICAgICk7CiAgICAgICAgc2xlcnBTY2FsZWRSID0gUXVhdGVybmlvbi5tdWx0aXBseUJ5U2NhbGFyKAogICAgICAgICAgciwKICAgICAgICAgIE1hdGguc2luKHQgKiB0aGV0YSksCiAgICAgICAgICBzbGVycFNjYWxlZFIKICAgICAgICApOwogICAgICAgIHJlc3VsdCA9IFF1YXRlcm5pb24uYWRkKHNsZXJwU2NhbGVkUCwgc2xlcnBTY2FsZWRSLCByZXN1bHQpOwogICAgICAgIHJldHVybiBRdWF0ZXJuaW9uLm11bHRpcGx5QnlTY2FsYXIocmVzdWx0LCAxIC8gTWF0aC5zaW4odGhldGEpLCByZXN1bHQpOwogICAgICB9OwogICAgICBRdWF0ZXJuaW9uLmxvZyA9IGZ1bmN0aW9uKHF1YXRlcm5pb24sIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicXVhdGVybmlvbiIsIHF1YXRlcm5pb24pOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCB0aGV0YSA9IE1hdGhfZGVmYXVsdC5hY29zQ2xhbXBlZChxdWF0ZXJuaW9uLncpOwogICAgICAgIGxldCB0aGV0YU92ZXJTaW5UaGV0YSA9IDA7CiAgICAgICAgaWYgKHRoZXRhICE9PSAwKSB7CiAgICAgICAgICB0aGV0YU92ZXJTaW5UaGV0YSA9IHRoZXRhIC8gTWF0aC5zaW4odGhldGEpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIocXVhdGVybmlvbiwgdGhldGFPdmVyU2luVGhldGEsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIFF1YXRlcm5pb24uZXhwID0gZnVuY3Rpb24oY2FydGVzaWFuMTEsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiY2FydGVzaWFuIiwgY2FydGVzaWFuMTEpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCB0aGV0YSA9IENhcnRlc2lhbjNfZGVmYXVsdC5tYWduaXR1ZGUoY2FydGVzaWFuMTEpOwogICAgICAgIGxldCBzaW5UaGV0YU92ZXJUaGV0YSA9IDA7CiAgICAgICAgaWYgKHRoZXRhICE9PSAwKSB7CiAgICAgICAgICBzaW5UaGV0YU92ZXJUaGV0YSA9IE1hdGguc2luKHRoZXRhKSAvIHRoZXRhOwogICAgICAgIH0KICAgICAgICByZXN1bHQueCA9IGNhcnRlc2lhbjExLnggKiBzaW5UaGV0YU92ZXJUaGV0YTsKICAgICAgICByZXN1bHQueSA9IGNhcnRlc2lhbjExLnkgKiBzaW5UaGV0YU92ZXJUaGV0YTsKICAgICAgICByZXN1bHQueiA9IGNhcnRlc2lhbjExLnogKiBzaW5UaGV0YU92ZXJUaGV0YTsKICAgICAgICByZXN1bHQudyA9IE1hdGguY29zKHRoZXRhKTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBzcXVhZFNjcmF0Y2hDYXJ0ZXNpYW4wID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzcXVhZFNjcmF0Y2hDYXJ0ZXNpYW4xID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzcXVhZFNjcmF0Y2hRdWF0ZXJuaW9uMCA9IG5ldyBRdWF0ZXJuaW9uKCk7CiAgICAgIHNxdWFkU2NyYXRjaFF1YXRlcm5pb24xID0gbmV3IFF1YXRlcm5pb24oKTsKICAgICAgUXVhdGVybmlvbi5jb21wdXRlSW5uZXJRdWFkcmFuZ2xlID0gZnVuY3Rpb24ocTAsIHExMiwgcTIyLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInEwIiwgcTApOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicTEiLCBxMTIpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicTIiLCBxMjIpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCBxSW52ID0gUXVhdGVybmlvbi5jb25qdWdhdGUocTEyLCBzcXVhZFNjcmF0Y2hRdWF0ZXJuaW9uMCk7CiAgICAgICAgUXVhdGVybmlvbi5tdWx0aXBseShxSW52LCBxMjIsIHNxdWFkU2NyYXRjaFF1YXRlcm5pb24xKTsKICAgICAgICBjb25zdCBjYXJ0MCA9IFF1YXRlcm5pb24ubG9nKHNxdWFkU2NyYXRjaFF1YXRlcm5pb24xLCBzcXVhZFNjcmF0Y2hDYXJ0ZXNpYW4wKTsKICAgICAgICBRdWF0ZXJuaW9uLm11bHRpcGx5KHFJbnYsIHEwLCBzcXVhZFNjcmF0Y2hRdWF0ZXJuaW9uMSk7CiAgICAgICAgY29uc3QgY2FydDEgPSBRdWF0ZXJuaW9uLmxvZyhzcXVhZFNjcmF0Y2hRdWF0ZXJuaW9uMSwgc3F1YWRTY3JhdGNoQ2FydGVzaWFuMSk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChjYXJ0MCwgY2FydDEsIGNhcnQwKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcihjYXJ0MCwgMC4yNSwgY2FydDApOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5uZWdhdGUoY2FydDAsIGNhcnQwKTsKICAgICAgICBRdWF0ZXJuaW9uLmV4cChjYXJ0MCwgc3F1YWRTY3JhdGNoUXVhdGVybmlvbjApOwogICAgICAgIHJldHVybiBRdWF0ZXJuaW9uLm11bHRpcGx5KHExMiwgc3F1YWRTY3JhdGNoUXVhdGVybmlvbjAsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIFF1YXRlcm5pb24uc3F1YWQgPSBmdW5jdGlvbihxMCwgcTEyLCBzMCwgczEsIHQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicTAiLCBxMCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJxMSIsIHExMik7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJzMCIsIHMwKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInMxIiwgczEpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigidCIsIHQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCBzbGVycDAgPSBRdWF0ZXJuaW9uLnNsZXJwKHEwLCBxMTIsIHQsIHNxdWFkU2NyYXRjaFF1YXRlcm5pb24wKTsKICAgICAgICBjb25zdCBzbGVycDEgPSBRdWF0ZXJuaW9uLnNsZXJwKHMwLCBzMSwgdCwgc3F1YWRTY3JhdGNoUXVhdGVybmlvbjEpOwogICAgICAgIHJldHVybiBRdWF0ZXJuaW9uLnNsZXJwKHNsZXJwMCwgc2xlcnAxLCAyICogdCAqICgxIC0gdCksIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIGZhc3RTbGVycFNjcmF0Y2hRdWF0ZXJuaW9uID0gbmV3IFF1YXRlcm5pb24oKTsKICAgICAgb3BtdSA9IDEuOTAxMTA3NDUzNTE3MzAwMzsKICAgICAgdSA9IEZlYXR1cmVEZXRlY3Rpb25fZGVmYXVsdC5zdXBwb3J0c1R5cGVkQXJyYXlzKCkgPyBuZXcgRmxvYXQzMkFycmF5KDgpIDogW107CiAgICAgIHYgPSBGZWF0dXJlRGV0ZWN0aW9uX2RlZmF1bHQuc3VwcG9ydHNUeXBlZEFycmF5cygpID8gbmV3IEZsb2F0MzJBcnJheSg4KSA6IFtdOwogICAgICBiVCA9IEZlYXR1cmVEZXRlY3Rpb25fZGVmYXVsdC5zdXBwb3J0c1R5cGVkQXJyYXlzKCkgPyBuZXcgRmxvYXQzMkFycmF5KDgpIDogW107CiAgICAgIGJEID0gRmVhdHVyZURldGVjdGlvbl9kZWZhdWx0LnN1cHBvcnRzVHlwZWRBcnJheXMoKSA/IG5ldyBGbG9hdDMyQXJyYXkoOCkgOiBbXTsKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA3OyArK2kpIHsKICAgICAgICBjb25zdCBzID0gaSArIDE7CiAgICAgICAgY29uc3QgdCA9IDIgKiBzICsgMTsKICAgICAgICB1W2ldID0gMSAvIChzICogdCk7CiAgICAgICAgdltpXSA9IHMgLyB0OwogICAgICB9CiAgICAgIHVbN10gPSBvcG11IC8gKDggKiAxNyk7CiAgICAgIHZbN10gPSBvcG11ICogOCAvIDE3OwogICAgICBRdWF0ZXJuaW9uLmZhc3RTbGVycCA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQsIHQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgic3RhcnQiLCBzdGFydCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJlbmQiLCBlbmQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigidCIsIHQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBsZXQgeCA9IFF1YXRlcm5pb24uZG90KHN0YXJ0LCBlbmQpOwogICAgICAgIGxldCBzaWduMjsKICAgICAgICBpZiAoeCA+PSAwKSB7CiAgICAgICAgICBzaWduMiA9IDE7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHNpZ24yID0gLTE7CiAgICAgICAgICB4ID0gLXg7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHhtMSA9IHggLSAxOwogICAgICAgIGNvbnN0IGQgPSAxIC0gdDsKICAgICAgICBjb25zdCBzcXJUID0gdCAqIHQ7CiAgICAgICAgY29uc3Qgc3FyRCA9IGQgKiBkOwogICAgICAgIGZvciAobGV0IGkgPSA3OyBpID49IDA7IC0taSkgewogICAgICAgICAgYlRbaV0gPSAodVtpXSAqIHNxclQgLSB2W2ldKSAqIHhtMTsKICAgICAgICAgIGJEW2ldID0gKHVbaV0gKiBzcXJEIC0gdltpXSkgKiB4bTE7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGNUID0gc2lnbjIgKiB0ICogKDEgKyBiVFswXSAqICgxICsgYlRbMV0gKiAoMSArIGJUWzJdICogKDEgKyBiVFszXSAqICgxICsgYlRbNF0gKiAoMSArIGJUWzVdICogKDEgKyBiVFs2XSAqICgxICsgYlRbN10pKSkpKSkpKTsKICAgICAgICBjb25zdCBjRCA9IGQgKiAoMSArIGJEWzBdICogKDEgKyBiRFsxXSAqICgxICsgYkRbMl0gKiAoMSArIGJEWzNdICogKDEgKyBiRFs0XSAqICgxICsgYkRbNV0gKiAoMSArIGJEWzZdICogKDEgKyBiRFs3XSkpKSkpKSkpOwogICAgICAgIGNvbnN0IHRlbXAgPSBRdWF0ZXJuaW9uLm11bHRpcGx5QnlTY2FsYXIoCiAgICAgICAgICBzdGFydCwKICAgICAgICAgIGNELAogICAgICAgICAgZmFzdFNsZXJwU2NyYXRjaFF1YXRlcm5pb24KICAgICAgICApOwogICAgICAgIFF1YXRlcm5pb24ubXVsdGlwbHlCeVNjYWxhcihlbmQsIGNULCByZXN1bHQpOwogICAgICAgIHJldHVybiBRdWF0ZXJuaW9uLmFkZCh0ZW1wLCByZXN1bHQsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIFF1YXRlcm5pb24uZmFzdFNxdWFkID0gZnVuY3Rpb24ocTAsIHExMiwgczAsIHMxLCB0LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInEwIiwgcTApOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicTEiLCBxMTIpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiczAiLCBzMCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJzMSIsIHMxKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoInQiLCB0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgY29uc3Qgc2xlcnAwID0gUXVhdGVybmlvbi5mYXN0U2xlcnAocTAsIHExMiwgdCwgc3F1YWRTY3JhdGNoUXVhdGVybmlvbjApOwogICAgICAgIGNvbnN0IHNsZXJwMSA9IFF1YXRlcm5pb24uZmFzdFNsZXJwKHMwLCBzMSwgdCwgc3F1YWRTY3JhdGNoUXVhdGVybmlvbjEpOwogICAgICAgIHJldHVybiBRdWF0ZXJuaW9uLmZhc3RTbGVycChzbGVycDAsIHNsZXJwMSwgMiAqIHQgKiAoMSAtIHQpLCByZXN1bHQpOwogICAgICB9OwogICAgICBRdWF0ZXJuaW9uLmVxdWFscyA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7CiAgICAgICAgcmV0dXJuIGxlZnQgPT09IHJpZ2h0IHx8IGRlZmluZWRfZGVmYXVsdChsZWZ0KSAmJiBkZWZpbmVkX2RlZmF1bHQocmlnaHQpICYmIGxlZnQueCA9PT0gcmlnaHQueCAmJiBsZWZ0LnkgPT09IHJpZ2h0LnkgJiYgbGVmdC56ID09PSByaWdodC56ICYmIGxlZnQudyA9PT0gcmlnaHQudzsKICAgICAgfTsKICAgICAgUXVhdGVybmlvbi5lcXVhbHNFcHNpbG9uID0gZnVuY3Rpb24obGVmdCwgcmlnaHQsIGVwc2lsb24pIHsKICAgICAgICBlcHNpbG9uID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoZXBzaWxvbiwgMCk7CiAgICAgICAgcmV0dXJuIGxlZnQgPT09IHJpZ2h0IHx8IGRlZmluZWRfZGVmYXVsdChsZWZ0KSAmJiBkZWZpbmVkX2RlZmF1bHQocmlnaHQpICYmIE1hdGguYWJzKGxlZnQueCAtIHJpZ2h0LngpIDw9IGVwc2lsb24gJiYgTWF0aC5hYnMobGVmdC55IC0gcmlnaHQueSkgPD0gZXBzaWxvbiAmJiBNYXRoLmFicyhsZWZ0LnogLSByaWdodC56KSA8PSBlcHNpbG9uICYmIE1hdGguYWJzKGxlZnQudyAtIHJpZ2h0LncpIDw9IGVwc2lsb247CiAgICAgIH07CiAgICAgIFF1YXRlcm5pb24uWkVSTyA9IE9iamVjdC5mcmVlemUobmV3IFF1YXRlcm5pb24oMCwgMCwgMCwgMCkpOwogICAgICBRdWF0ZXJuaW9uLklERU5USVRZID0gT2JqZWN0LmZyZWV6ZShuZXcgUXVhdGVybmlvbigwLCAwLCAwLCAxKSk7CiAgICAgIFF1YXRlcm5pb24ucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24ocmVzdWx0KSB7CiAgICAgICAgcmV0dXJuIFF1YXRlcm5pb24uY2xvbmUodGhpcywgcmVzdWx0KTsKICAgICAgfTsKICAgICAgUXVhdGVybmlvbi5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24ocmlnaHQpIHsKICAgICAgICByZXR1cm4gUXVhdGVybmlvbi5lcXVhbHModGhpcywgcmlnaHQpOwogICAgICB9OwogICAgICBRdWF0ZXJuaW9uLnByb3RvdHlwZS5lcXVhbHNFcHNpbG9uID0gZnVuY3Rpb24ocmlnaHQsIGVwc2lsb24pIHsKICAgICAgICByZXR1cm4gUXVhdGVybmlvbi5lcXVhbHNFcHNpbG9uKHRoaXMsIHJpZ2h0LCBlcHNpbG9uKTsKICAgICAgfTsKICAgICAgUXVhdGVybmlvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gYCgke3RoaXMueH0sICR7dGhpcy55fSwgJHt0aGlzLnp9LCAke3RoaXMud30pYDsKICAgICAgfTsKICAgICAgUXVhdGVybmlvbl9kZWZhdWx0ID0gUXVhdGVybmlvbjsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1RyYW5zZm9ybXMuanMKICB2YXIgVHJhbnNmb3JtcywgdmVjdG9yUHJvZHVjdExvY2FsRnJhbWUsIGRlZ2VuZXJhdGVQb3NpdGlvbkxvY2FsRnJhbWUsIGxvY2FsRnJhbWVUb0ZpeGVkRnJhbWVDYWNoZSwgc2NyYXRjaENhbGN1bGF0ZUNhcnRlc2lhbiwgc2NyYXRjaEZpcnN0Q2FydGVzaWFuLCBzY3JhdGNoU2Vjb25kQ2FydGVzaWFuLCBzY3JhdGNoVGhpcmRDYXJ0ZXNpYW4sIHNjcmF0Y2hIUFJRdWF0ZXJuaW9uMiwgc2NyYXRjaFNjYWxlLCBzY3JhdGNoSFBSTWF0cml4NCwgc2NyYXRjaEVOVU1hdHJpeDQsIHNjcmF0Y2hIUFJNYXRyaXgzLCBub1NjYWxlLCBocHJDZW50ZXJTY3JhdGNoLCBmZlNjcmF0Y2gsIGhwclRyYW5zZm9ybVNjcmF0Y2gsIGhwclJvdGF0aW9uU2NyYXRjaCwgaHByUXVhdGVybmlvblNjcmF0Y2gsIGdtc3RDb25zdGFudDAsIGdtc3RDb25zdGFudDEsIGdtc3RDb25zdGFudDIsIGdtc3RDb25zdGFudDMsIHJhdGVDb2VmLCB3Z3M4NFdSUHJlY2Vzc2luZywgdHdvUGlPdmVyU2Vjb25kc0luRGF5LCBkYXRlSW5VdGMsIHR0TWludXNUYWksIGoyMDAwdHREYXlzLCBUZHRNaW51c1RhaSwgSjIwMDBkLCBzY3JhdGNoSHByLCBzY3JhdGNoUm90YXRpb25NYXRyaXgsIGRhdGVTY3JhdGNoLCB4eXNTY3JhdGNoLCBlb3BTY3JhdGNoLCByb3RhdGlvbjFTY3JhdGNoLCByb3RhdGlvbjJTY3JhdGNoLCBwb2ludFRvV2luZG93Q29vcmRpbmF0ZXNUZW1wLCBub3JtYWxTY3JhdGNoLCByaWdodFNjcmF0Y2gsIHVwU2NyYXRjaCwgc3dpenpsZU1hdHJpeCwgc2NyYXRjaENhcnRvZ3JhcGhpYywgc2NyYXRjaENhcnRlc2lhbjNQcm9qZWN0aW9uLCBzY3JhdGNoQ2VudGVyLCBzY3JhdGNoUm90YXRpb24sIHNjcmF0Y2hGcm9tRU5VLCBzY3JhdGNoVG9FTlUsIFRyYW5zZm9ybXNfZGVmYXVsdDsKICB2YXIgaW5pdF9UcmFuc2Zvcm1zID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9UcmFuc2Zvcm1zLmpzIigpIHsKICAgICAgaW5pdF9DYXJ0ZXNpYW4yKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NhcnRlc2lhbjQoKTsKICAgICAgaW5pdF9DYXJ0b2dyYXBoaWMoKTsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X0VhcnRoT3JpZW50YXRpb25QYXJhbWV0ZXJzKCk7CiAgICAgIGluaXRfRWFydGhPcmllbnRhdGlvblBhcmFtZXRlcnNTYW1wbGUoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9IZWFkaW5nUGl0Y2hSb2xsKCk7CiAgICAgIGluaXRfSWF1MjAwNlh5c0RhdGEoKTsKICAgICAgaW5pdF9JYXUyMDA2WHlzU2FtcGxlKCk7CiAgICAgIGluaXRfSnVsaWFuRGF0ZSgpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgaW5pdF9NYXRyaXgzKCk7CiAgICAgIGluaXRfTWF0cml4NCgpOwogICAgICBpbml0X1F1YXRlcm5pb24oKTsKICAgICAgaW5pdF9UaW1lQ29uc3RhbnRzKCk7CiAgICAgIFRyYW5zZm9ybXMgPSB7fTsKICAgICAgdmVjdG9yUHJvZHVjdExvY2FsRnJhbWUgPSB7CiAgICAgICAgdXA6IHsKICAgICAgICAgIHNvdXRoOiAiZWFzdCIsCiAgICAgICAgICBub3J0aDogIndlc3QiLAogICAgICAgICAgd2VzdDogInNvdXRoIiwKICAgICAgICAgIGVhc3Q6ICJub3J0aCIKICAgICAgICB9LAogICAgICAgIGRvd246IHsKICAgICAgICAgIHNvdXRoOiAid2VzdCIsCiAgICAgICAgICBub3J0aDogImVhc3QiLAogICAgICAgICAgd2VzdDogIm5vcnRoIiwKICAgICAgICAgIGVhc3Q6ICJzb3V0aCIKICAgICAgICB9LAogICAgICAgIHNvdXRoOiB7CiAgICAgICAgICB1cDogIndlc3QiLAogICAgICAgICAgZG93bjogImVhc3QiLAogICAgICAgICAgd2VzdDogImRvd24iLAogICAgICAgICAgZWFzdDogInVwIgogICAgICAgIH0sCiAgICAgICAgbm9ydGg6IHsKICAgICAgICAgIHVwOiAiZWFzdCIsCiAgICAgICAgICBkb3duOiAid2VzdCIsCiAgICAgICAgICB3ZXN0OiAidXAiLAogICAgICAgICAgZWFzdDogImRvd24iCiAgICAgICAgfSwKICAgICAgICB3ZXN0OiB7CiAgICAgICAgICB1cDogIm5vcnRoIiwKICAgICAgICAgIGRvd246ICJzb3V0aCIsCiAgICAgICAgICBub3J0aDogImRvd24iLAogICAgICAgICAgc291dGg6ICJ1cCIKICAgICAgICB9LAogICAgICAgIGVhc3Q6IHsKICAgICAgICAgIHVwOiAic291dGgiLAogICAgICAgICAgZG93bjogIm5vcnRoIiwKICAgICAgICAgIG5vcnRoOiAidXAiLAogICAgICAgICAgc291dGg6ICJkb3duIgogICAgICAgIH0KICAgICAgfTsKICAgICAgZGVnZW5lcmF0ZVBvc2l0aW9uTG9jYWxGcmFtZSA9IHsKICAgICAgICBub3J0aDogWy0xLCAwLCAwXSwKICAgICAgICBlYXN0OiBbMCwgMSwgMF0sCiAgICAgICAgdXA6IFswLCAwLCAxXSwKICAgICAgICBzb3V0aDogWzEsIDAsIDBdLAogICAgICAgIHdlc3Q6IFswLCAtMSwgMF0sCiAgICAgICAgZG93bjogWzAsIDAsIC0xXQogICAgICB9OwogICAgICBsb2NhbEZyYW1lVG9GaXhlZEZyYW1lQ2FjaGUgPSB7fTsKICAgICAgc2NyYXRjaENhbGN1bGF0ZUNhcnRlc2lhbiA9IHsKICAgICAgICBlYXN0OiBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCksCiAgICAgICAgbm9ydGg6IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKSwKICAgICAgICB1cDogbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpLAogICAgICAgIHdlc3Q6IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKSwKICAgICAgICBzb3V0aDogbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpLAogICAgICAgIGRvd246IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKQogICAgICB9OwogICAgICBzY3JhdGNoRmlyc3RDYXJ0ZXNpYW4gPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hTZWNvbmRDYXJ0ZXNpYW4gPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hUaGlyZENhcnRlc2lhbiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgVHJhbnNmb3Jtcy5sb2NhbEZyYW1lVG9GaXhlZEZyYW1lR2VuZXJhdG9yID0gZnVuY3Rpb24oZmlyc3RBeGlzLCBzZWNvbmRBeGlzKSB7CiAgICAgICAgaWYgKCF2ZWN0b3JQcm9kdWN0TG9jYWxGcmFtZS5oYXNPd25Qcm9wZXJ0eShmaXJzdEF4aXMpIHx8ICF2ZWN0b3JQcm9kdWN0TG9jYWxGcmFtZVtmaXJzdEF4aXNdLmhhc093blByb3BlcnR5KHNlY29uZEF4aXMpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgImZpcnN0QXhpcyBhbmQgc2Vjb25kQXhpcyBtdXN0IGJlIGVhc3QsIG5vcnRoLCB1cCwgd2VzdCwgc291dGggb3IgZG93bi4iCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBjb25zdCB0aGlyZEF4aXMgPSB2ZWN0b3JQcm9kdWN0TG9jYWxGcmFtZVtmaXJzdEF4aXNdW3NlY29uZEF4aXNdOwogICAgICAgIGxldCByZXN1bHRhdDsKICAgICAgICBjb25zdCBoYXNoQXhpcyA9IGZpcnN0QXhpcyArIHNlY29uZEF4aXM7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChsb2NhbEZyYW1lVG9GaXhlZEZyYW1lQ2FjaGVbaGFzaEF4aXNdKSkgewogICAgICAgICAgcmVzdWx0YXQgPSBsb2NhbEZyYW1lVG9GaXhlZEZyYW1lQ2FjaGVbaGFzaEF4aXNdOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXN1bHRhdCA9IGZ1bmN0aW9uKG9yaWdpbiwgZWxsaXBzb2lkLCByZXN1bHQpIHsKICAgICAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQob3JpZ2luKSkgewogICAgICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJvcmlnaW4gaXMgcmVxdWlyZWQuIik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGlzTmFOKG9yaWdpbi54KSB8fCBpc05hTihvcmlnaW4ueSkgfHwgaXNOYU4ob3JpZ2luLnopKSB7CiAgICAgICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoIm9yaWdpbiBoYXMgYSBOYU4gY29tcG9uZW50Iik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBNYXRyaXg0X2RlZmF1bHQoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoQ2FydGVzaWFuM19kZWZhdWx0LmVxdWFsc0Vwc2lsb24ob3JpZ2luLCBDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTywgTWF0aF9kZWZhdWx0LkVQU0lMT04xNCkpIHsKICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKAogICAgICAgICAgICAgICAgZGVnZW5lcmF0ZVBvc2l0aW9uTG9jYWxGcmFtZVtmaXJzdEF4aXNdLAogICAgICAgICAgICAgICAgMCwKICAgICAgICAgICAgICAgIHNjcmF0Y2hGaXJzdENhcnRlc2lhbgogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjaygKICAgICAgICAgICAgICAgIGRlZ2VuZXJhdGVQb3NpdGlvbkxvY2FsRnJhbWVbc2Vjb25kQXhpc10sCiAgICAgICAgICAgICAgICAwLAogICAgICAgICAgICAgICAgc2NyYXRjaFNlY29uZENhcnRlc2lhbgogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjaygKICAgICAgICAgICAgICAgIGRlZ2VuZXJhdGVQb3NpdGlvbkxvY2FsRnJhbWVbdGhpcmRBeGlzXSwKICAgICAgICAgICAgICAgIDAsCiAgICAgICAgICAgICAgICBzY3JhdGNoVGhpcmRDYXJ0ZXNpYW4KICAgICAgICAgICAgICApOwogICAgICAgICAgICB9IGVsc2UgaWYgKE1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKG9yaWdpbi54LCAwLCBNYXRoX2RlZmF1bHQuRVBTSUxPTjE0KSAmJiBNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbihvcmlnaW4ueSwgMCwgTWF0aF9kZWZhdWx0LkVQU0lMT04xNCkpIHsKICAgICAgICAgICAgICBjb25zdCBzaWduMiA9IE1hdGhfZGVmYXVsdC5zaWduKG9yaWdpbi56KTsKICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKAogICAgICAgICAgICAgICAgZGVnZW5lcmF0ZVBvc2l0aW9uTG9jYWxGcmFtZVtmaXJzdEF4aXNdLAogICAgICAgICAgICAgICAgMCwKICAgICAgICAgICAgICAgIHNjcmF0Y2hGaXJzdENhcnRlc2lhbgogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgaWYgKGZpcnN0QXhpcyAhPT0gImVhc3QiICYmIGZpcnN0QXhpcyAhPT0gIndlc3QiKSB7CiAgICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcigKICAgICAgICAgICAgICAgICAgc2NyYXRjaEZpcnN0Q2FydGVzaWFuLAogICAgICAgICAgICAgICAgICBzaWduMiwKICAgICAgICAgICAgICAgICAgc2NyYXRjaEZpcnN0Q2FydGVzaWFuCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKAogICAgICAgICAgICAgICAgZGVnZW5lcmF0ZVBvc2l0aW9uTG9jYWxGcmFtZVtzZWNvbmRBeGlzXSwKICAgICAgICAgICAgICAgIDAsCiAgICAgICAgICAgICAgICBzY3JhdGNoU2Vjb25kQ2FydGVzaWFuCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICBpZiAoc2Vjb25kQXhpcyAhPT0gImVhc3QiICYmIHNlY29uZEF4aXMgIT09ICJ3ZXN0IikgewogICAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIoCiAgICAgICAgICAgICAgICAgIHNjcmF0Y2hTZWNvbmRDYXJ0ZXNpYW4sCiAgICAgICAgICAgICAgICAgIHNpZ24yLAogICAgICAgICAgICAgICAgICBzY3JhdGNoU2Vjb25kQ2FydGVzaWFuCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKAogICAgICAgICAgICAgICAgZGVnZW5lcmF0ZVBvc2l0aW9uTG9jYWxGcmFtZVt0aGlyZEF4aXNdLAogICAgICAgICAgICAgICAgMCwKICAgICAgICAgICAgICAgIHNjcmF0Y2hUaGlyZENhcnRlc2lhbgogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgaWYgKHRoaXJkQXhpcyAhPT0gImVhc3QiICYmIHRoaXJkQXhpcyAhPT0gIndlc3QiKSB7CiAgICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcigKICAgICAgICAgICAgICAgICAgc2NyYXRjaFRoaXJkQ2FydGVzaWFuLAogICAgICAgICAgICAgICAgICBzaWduMiwKICAgICAgICAgICAgICAgICAgc2NyYXRjaFRoaXJkQ2FydGVzaWFuCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBlbGxpcHNvaWQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChlbGxpcHNvaWQsIEVsbGlwc29pZF9kZWZhdWx0LmRlZmF1bHQpOwogICAgICAgICAgICAgIGVsbGlwc29pZC5nZW9kZXRpY1N1cmZhY2VOb3JtYWwob3JpZ2luLCBzY3JhdGNoQ2FsY3VsYXRlQ2FydGVzaWFuLnVwKTsKICAgICAgICAgICAgICBjb25zdCB1cCA9IHNjcmF0Y2hDYWxjdWxhdGVDYXJ0ZXNpYW4udXA7CiAgICAgICAgICAgICAgY29uc3QgZWFzdCA9IHNjcmF0Y2hDYWxjdWxhdGVDYXJ0ZXNpYW4uZWFzdDsKICAgICAgICAgICAgICBlYXN0LnggPSAtb3JpZ2luLnk7CiAgICAgICAgICAgICAgZWFzdC55ID0gb3JpZ2luLng7CiAgICAgICAgICAgICAgZWFzdC56ID0gMDsKICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKGVhc3QsIHNjcmF0Y2hDYWxjdWxhdGVDYXJ0ZXNpYW4uZWFzdCk7CiAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKHVwLCBlYXN0LCBzY3JhdGNoQ2FsY3VsYXRlQ2FydGVzaWFuLm5vcnRoKTsKICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcigKICAgICAgICAgICAgICAgIHNjcmF0Y2hDYWxjdWxhdGVDYXJ0ZXNpYW4udXAsCiAgICAgICAgICAgICAgICAtMSwKICAgICAgICAgICAgICAgIHNjcmF0Y2hDYWxjdWxhdGVDYXJ0ZXNpYW4uZG93bgogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIoCiAgICAgICAgICAgICAgICBzY3JhdGNoQ2FsY3VsYXRlQ2FydGVzaWFuLmVhc3QsCiAgICAgICAgICAgICAgICAtMSwKICAgICAgICAgICAgICAgIHNjcmF0Y2hDYWxjdWxhdGVDYXJ0ZXNpYW4ud2VzdAogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIoCiAgICAgICAgICAgICAgICBzY3JhdGNoQ2FsY3VsYXRlQ2FydGVzaWFuLm5vcnRoLAogICAgICAgICAgICAgICAgLTEsCiAgICAgICAgICAgICAgICBzY3JhdGNoQ2FsY3VsYXRlQ2FydGVzaWFuLnNvdXRoCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICBzY3JhdGNoRmlyc3RDYXJ0ZXNpYW4gPSBzY3JhdGNoQ2FsY3VsYXRlQ2FydGVzaWFuW2ZpcnN0QXhpc107CiAgICAgICAgICAgICAgc2NyYXRjaFNlY29uZENhcnRlc2lhbiA9IHNjcmF0Y2hDYWxjdWxhdGVDYXJ0ZXNpYW5bc2Vjb25kQXhpc107CiAgICAgICAgICAgICAgc2NyYXRjaFRoaXJkQ2FydGVzaWFuID0gc2NyYXRjaENhbGN1bGF0ZUNhcnRlc2lhblt0aGlyZEF4aXNdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJlc3VsdFswXSA9IHNjcmF0Y2hGaXJzdENhcnRlc2lhbi54OwogICAgICAgICAgICByZXN1bHRbMV0gPSBzY3JhdGNoRmlyc3RDYXJ0ZXNpYW4ueTsKICAgICAgICAgICAgcmVzdWx0WzJdID0gc2NyYXRjaEZpcnN0Q2FydGVzaWFuLno7CiAgICAgICAgICAgIHJlc3VsdFszXSA9IDA7CiAgICAgICAgICAgIHJlc3VsdFs0XSA9IHNjcmF0Y2hTZWNvbmRDYXJ0ZXNpYW4ueDsKICAgICAgICAgICAgcmVzdWx0WzVdID0gc2NyYXRjaFNlY29uZENhcnRlc2lhbi55OwogICAgICAgICAgICByZXN1bHRbNl0gPSBzY3JhdGNoU2Vjb25kQ2FydGVzaWFuLno7CiAgICAgICAgICAgIHJlc3VsdFs3XSA9IDA7CiAgICAgICAgICAgIHJlc3VsdFs4XSA9IHNjcmF0Y2hUaGlyZENhcnRlc2lhbi54OwogICAgICAgICAgICByZXN1bHRbOV0gPSBzY3JhdGNoVGhpcmRDYXJ0ZXNpYW4ueTsKICAgICAgICAgICAgcmVzdWx0WzEwXSA9IHNjcmF0Y2hUaGlyZENhcnRlc2lhbi56OwogICAgICAgICAgICByZXN1bHRbMTFdID0gMDsKICAgICAgICAgICAgcmVzdWx0WzEyXSA9IG9yaWdpbi54OwogICAgICAgICAgICByZXN1bHRbMTNdID0gb3JpZ2luLnk7CiAgICAgICAgICAgIHJlc3VsdFsxNF0gPSBvcmlnaW4uejsKICAgICAgICAgICAgcmVzdWx0WzE1XSA9IDE7CiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgICB9OwogICAgICAgICAgbG9jYWxGcmFtZVRvRml4ZWRGcmFtZUNhY2hlW2hhc2hBeGlzXSA9IHJlc3VsdGF0OwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0YXQ7CiAgICAgIH07CiAgICAgIFRyYW5zZm9ybXMuZWFzdE5vcnRoVXBUb0ZpeGVkRnJhbWUgPSBUcmFuc2Zvcm1zLmxvY2FsRnJhbWVUb0ZpeGVkRnJhbWVHZW5lcmF0b3IoCiAgICAgICAgImVhc3QiLAogICAgICAgICJub3J0aCIKICAgICAgKTsKICAgICAgVHJhbnNmb3Jtcy5ub3J0aEVhc3REb3duVG9GaXhlZEZyYW1lID0gVHJhbnNmb3Jtcy5sb2NhbEZyYW1lVG9GaXhlZEZyYW1lR2VuZXJhdG9yKCJub3J0aCIsICJlYXN0Iik7CiAgICAgIFRyYW5zZm9ybXMubm9ydGhVcEVhc3RUb0ZpeGVkRnJhbWUgPSBUcmFuc2Zvcm1zLmxvY2FsRnJhbWVUb0ZpeGVkRnJhbWVHZW5lcmF0b3IoCiAgICAgICAgIm5vcnRoIiwKICAgICAgICAidXAiCiAgICAgICk7CiAgICAgIFRyYW5zZm9ybXMubm9ydGhXZXN0VXBUb0ZpeGVkRnJhbWUgPSBUcmFuc2Zvcm1zLmxvY2FsRnJhbWVUb0ZpeGVkRnJhbWVHZW5lcmF0b3IoCiAgICAgICAgIm5vcnRoIiwKICAgICAgICAid2VzdCIKICAgICAgKTsKICAgICAgc2NyYXRjaEhQUlF1YXRlcm5pb24yID0gbmV3IFF1YXRlcm5pb25fZGVmYXVsdCgpOwogICAgICBzY3JhdGNoU2NhbGUgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KDEsIDEsIDEpOwogICAgICBzY3JhdGNoSFBSTWF0cml4NCA9IG5ldyBNYXRyaXg0X2RlZmF1bHQoKTsKICAgICAgVHJhbnNmb3Jtcy5oZWFkaW5nUGl0Y2hSb2xsVG9GaXhlZEZyYW1lID0gZnVuY3Rpb24ob3JpZ2luLCBoZWFkaW5nUGl0Y2hSb2xsLCBlbGxpcHNvaWQsIGZpeGVkRnJhbWVUcmFuc2Zvcm0sIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiSGVhZGluZ1BpdGNoUm9sbCIsIGhlYWRpbmdQaXRjaFJvbGwpOwogICAgICAgIGZpeGVkRnJhbWVUcmFuc2Zvcm0gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCgKICAgICAgICAgIGZpeGVkRnJhbWVUcmFuc2Zvcm0sCiAgICAgICAgICBUcmFuc2Zvcm1zLmVhc3ROb3J0aFVwVG9GaXhlZEZyYW1lCiAgICAgICAgKTsKICAgICAgICBjb25zdCBocHJRdWF0ZXJuaW9uID0gUXVhdGVybmlvbl9kZWZhdWx0LmZyb21IZWFkaW5nUGl0Y2hSb2xsKAogICAgICAgICAgaGVhZGluZ1BpdGNoUm9sbCwKICAgICAgICAgIHNjcmF0Y2hIUFJRdWF0ZXJuaW9uMgogICAgICAgICk7CiAgICAgICAgY29uc3QgaHByTWF0cml4ID0gTWF0cml4NF9kZWZhdWx0LmZyb21UcmFuc2xhdGlvblF1YXRlcm5pb25Sb3RhdGlvblNjYWxlKAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8sCiAgICAgICAgICBocHJRdWF0ZXJuaW9uLAogICAgICAgICAgc2NyYXRjaFNjYWxlLAogICAgICAgICAgc2NyYXRjaEhQUk1hdHJpeDQKICAgICAgICApOwogICAgICAgIHJlc3VsdCA9IGZpeGVkRnJhbWVUcmFuc2Zvcm0ob3JpZ2luLCBlbGxpcHNvaWQsIHJlc3VsdCk7CiAgICAgICAgcmV0dXJuIE1hdHJpeDRfZGVmYXVsdC5tdWx0aXBseShyZXN1bHQsIGhwck1hdHJpeCwgcmVzdWx0KTsKICAgICAgfTsKICAgICAgc2NyYXRjaEVOVU1hdHJpeDQgPSBuZXcgTWF0cml4NF9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hIUFJNYXRyaXgzID0gbmV3IE1hdHJpeDNfZGVmYXVsdCgpOwogICAgICBUcmFuc2Zvcm1zLmhlYWRpbmdQaXRjaFJvbGxRdWF0ZXJuaW9uID0gZnVuY3Rpb24ob3JpZ2luLCBoZWFkaW5nUGl0Y2hSb2xsLCBlbGxpcHNvaWQsIGZpeGVkRnJhbWVUcmFuc2Zvcm0sIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiSGVhZGluZ1BpdGNoUm9sbCIsIGhlYWRpbmdQaXRjaFJvbGwpOwogICAgICAgIGNvbnN0IHRyYW5zZm9ybTIgPSBUcmFuc2Zvcm1zLmhlYWRpbmdQaXRjaFJvbGxUb0ZpeGVkRnJhbWUoCiAgICAgICAgICBvcmlnaW4sCiAgICAgICAgICBoZWFkaW5nUGl0Y2hSb2xsLAogICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgZml4ZWRGcmFtZVRyYW5zZm9ybSwKICAgICAgICAgIHNjcmF0Y2hFTlVNYXRyaXg0CiAgICAgICAgKTsKICAgICAgICBjb25zdCByb3RhdGlvbiA9IE1hdHJpeDRfZGVmYXVsdC5nZXRNYXRyaXgzKHRyYW5zZm9ybTIsIHNjcmF0Y2hIUFJNYXRyaXgzKTsKICAgICAgICByZXR1cm4gUXVhdGVybmlvbl9kZWZhdWx0LmZyb21Sb3RhdGlvbk1hdHJpeChyb3RhdGlvbiwgcmVzdWx0KTsKICAgICAgfTsKICAgICAgbm9TY2FsZSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoMSwgMSwgMSk7CiAgICAgIGhwckNlbnRlclNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGZmU2NyYXRjaCA9IG5ldyBNYXRyaXg0X2RlZmF1bHQoKTsKICAgICAgaHByVHJhbnNmb3JtU2NyYXRjaCA9IG5ldyBNYXRyaXg0X2RlZmF1bHQoKTsKICAgICAgaHByUm90YXRpb25TY3JhdGNoID0gbmV3IE1hdHJpeDNfZGVmYXVsdCgpOwogICAgICBocHJRdWF0ZXJuaW9uU2NyYXRjaCA9IG5ldyBRdWF0ZXJuaW9uX2RlZmF1bHQoKTsKICAgICAgVHJhbnNmb3Jtcy5maXhlZEZyYW1lVG9IZWFkaW5nUGl0Y2hSb2xsID0gZnVuY3Rpb24odHJhbnNmb3JtMiwgZWxsaXBzb2lkLCBmaXhlZEZyYW1lVHJhbnNmb3JtLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoInRyYW5zZm9ybSIsIHRyYW5zZm9ybTIpOwogICAgICAgIGVsbGlwc29pZCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGVsbGlwc29pZCwgRWxsaXBzb2lkX2RlZmF1bHQuZGVmYXVsdCk7CiAgICAgICAgZml4ZWRGcmFtZVRyYW5zZm9ybSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KAogICAgICAgICAgZml4ZWRGcmFtZVRyYW5zZm9ybSwKICAgICAgICAgIFRyYW5zZm9ybXMuZWFzdE5vcnRoVXBUb0ZpeGVkRnJhbWUKICAgICAgICApOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBIZWFkaW5nUGl0Y2hSb2xsX2RlZmF1bHQoKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgY2VudGVyID0gTWF0cml4NF9kZWZhdWx0LmdldFRyYW5zbGF0aW9uKHRyYW5zZm9ybTIsIGhwckNlbnRlclNjcmF0Y2gpOwogICAgICAgIGlmIChDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzKGNlbnRlciwgQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8pKSB7CiAgICAgICAgICByZXN1bHQuaGVhZGluZyA9IDA7CiAgICAgICAgICByZXN1bHQucGl0Y2ggPSAwOwogICAgICAgICAgcmVzdWx0LnJvbGwgPSAwOwogICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9CiAgICAgICAgbGV0IHRvRml4ZWRGcmFtZSA9IE1hdHJpeDRfZGVmYXVsdC5pbnZlcnNlVHJhbnNmb3JtYXRpb24oCiAgICAgICAgICBmaXhlZEZyYW1lVHJhbnNmb3JtKGNlbnRlciwgZWxsaXBzb2lkLCBmZlNjcmF0Y2gpLAogICAgICAgICAgZmZTY3JhdGNoCiAgICAgICAgKTsKICAgICAgICBsZXQgdHJhbnNmb3JtQ29weSA9IE1hdHJpeDRfZGVmYXVsdC5zZXRTY2FsZSh0cmFuc2Zvcm0yLCBub1NjYWxlLCBocHJUcmFuc2Zvcm1TY3JhdGNoKTsKICAgICAgICB0cmFuc2Zvcm1Db3B5ID0gTWF0cml4NF9kZWZhdWx0LnNldFRyYW5zbGF0aW9uKAogICAgICAgICAgdHJhbnNmb3JtQ29weSwKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5aRVJPLAogICAgICAgICAgdHJhbnNmb3JtQ29weQogICAgICAgICk7CiAgICAgICAgdG9GaXhlZEZyYW1lID0gTWF0cml4NF9kZWZhdWx0Lm11bHRpcGx5KHRvRml4ZWRGcmFtZSwgdHJhbnNmb3JtQ29weSwgdG9GaXhlZEZyYW1lKTsKICAgICAgICBsZXQgcXVhdGVybmlvblJvdGF0aW9uID0gUXVhdGVybmlvbl9kZWZhdWx0LmZyb21Sb3RhdGlvbk1hdHJpeCgKICAgICAgICAgIE1hdHJpeDRfZGVmYXVsdC5nZXRNYXRyaXgzKHRvRml4ZWRGcmFtZSwgaHByUm90YXRpb25TY3JhdGNoKSwKICAgICAgICAgIGhwclF1YXRlcm5pb25TY3JhdGNoCiAgICAgICAgKTsKICAgICAgICBxdWF0ZXJuaW9uUm90YXRpb24gPSBRdWF0ZXJuaW9uX2RlZmF1bHQubm9ybWFsaXplKAogICAgICAgICAgcXVhdGVybmlvblJvdGF0aW9uLAogICAgICAgICAgcXVhdGVybmlvblJvdGF0aW9uCiAgICAgICAgKTsKICAgICAgICByZXR1cm4gSGVhZGluZ1BpdGNoUm9sbF9kZWZhdWx0LmZyb21RdWF0ZXJuaW9uKHF1YXRlcm5pb25Sb3RhdGlvbiwgcmVzdWx0KTsKICAgICAgfTsKICAgICAgZ21zdENvbnN0YW50MCA9IDYgKiAzNjAwICsgNDEgKiA2MCArIDUwLjU0ODQxOwogICAgICBnbXN0Q29uc3RhbnQxID0gODY0MDE4NDgxMjg2NmUtNjsKICAgICAgZ21zdENvbnN0YW50MiA9IDAuMDkzMTA0OwogICAgICBnbXN0Q29uc3RhbnQzID0gLTYyZS03OwogICAgICByYXRlQ29lZiA9IDExNzcyNzU4Mzg0NjY4ZS0zMjsKICAgICAgd2dzODRXUlByZWNlc3NpbmcgPSA3MjkyMTE1ODU1M2UtMTU7CiAgICAgIHR3b1BpT3ZlclNlY29uZHNJbkRheSA9IE1hdGhfZGVmYXVsdC5UV09fUEkgLyA4NjQwMDsKICAgICAgZGF0ZUluVXRjID0gbmV3IEp1bGlhbkRhdGVfZGVmYXVsdCgpOwogICAgICBUcmFuc2Zvcm1zLmNvbXB1dGVJY3JmVG9DZW50cmFsQm9keUZpeGVkTWF0cml4ID0gZnVuY3Rpb24oZGF0ZSwgcmVzdWx0KSB7CiAgICAgICAgbGV0IHRyYW5zZm9ybU1hdHJpeCA9IFRyYW5zZm9ybXMuY29tcHV0ZUljcmZUb0ZpeGVkTWF0cml4KGRhdGUsIHJlc3VsdCk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQodHJhbnNmb3JtTWF0cml4KSkgewogICAgICAgICAgdHJhbnNmb3JtTWF0cml4ID0gVHJhbnNmb3Jtcy5jb21wdXRlVGVtZVRvUHNldWRvRml4ZWRNYXRyaXgoZGF0ZSwgcmVzdWx0KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRyYW5zZm9ybU1hdHJpeDsKICAgICAgfTsKICAgICAgVHJhbnNmb3Jtcy5jb21wdXRlVGVtZVRvUHNldWRvRml4ZWRNYXRyaXggPSBmdW5jdGlvbihkYXRlLCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChkYXRlKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImRhdGUgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGRhdGVJblV0YyA9IEp1bGlhbkRhdGVfZGVmYXVsdC5hZGRTZWNvbmRzKAogICAgICAgICAgZGF0ZSwKICAgICAgICAgIC1KdWxpYW5EYXRlX2RlZmF1bHQuY29tcHV0ZVRhaU1pbnVzVXRjKGRhdGUpLAogICAgICAgICAgZGF0ZUluVXRjCiAgICAgICAgKTsKICAgICAgICBjb25zdCB1dGNEYXlOdW1iZXIgPSBkYXRlSW5VdGMuZGF5TnVtYmVyOwogICAgICAgIGNvbnN0IHV0Y1NlY29uZHNJbnRvRGF5ID0gZGF0ZUluVXRjLnNlY29uZHNPZkRheTsKICAgICAgICBsZXQgdDsKICAgICAgICBjb25zdCBkaWZmRGF5cyA9IHV0Y0RheU51bWJlciAtIDI0NTE1NDU7CiAgICAgICAgaWYgKHV0Y1NlY29uZHNJbnRvRGF5ID49IDQzMjAwKSB7CiAgICAgICAgICB0ID0gKGRpZmZEYXlzICsgMC41KSAvIFRpbWVDb25zdGFudHNfZGVmYXVsdC5EQVlTX1BFUl9KVUxJQU5fQ0VOVFVSWTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdCA9IChkaWZmRGF5cyAtIDAuNSkgLyBUaW1lQ29uc3RhbnRzX2RlZmF1bHQuREFZU19QRVJfSlVMSUFOX0NFTlRVUlk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGdtc3QwID0gZ21zdENvbnN0YW50MCArIHQgKiAoZ21zdENvbnN0YW50MSArIHQgKiAoZ21zdENvbnN0YW50MiArIHQgKiBnbXN0Q29uc3RhbnQzKSk7CiAgICAgICAgY29uc3QgYW5nbGUgPSBnbXN0MCAqIHR3b1BpT3ZlclNlY29uZHNJbkRheSAlIE1hdGhfZGVmYXVsdC5UV09fUEk7CiAgICAgICAgY29uc3QgcmF0aW8gPSB3Z3M4NFdSUHJlY2Vzc2luZyArIHJhdGVDb2VmICogKHV0Y0RheU51bWJlciAtIDI0NTE1NDU1ZS0xKTsKICAgICAgICBjb25zdCBzZWNvbmRzU2luY2VNaWRuaWdodCA9ICh1dGNTZWNvbmRzSW50b0RheSArIFRpbWVDb25zdGFudHNfZGVmYXVsdC5TRUNPTkRTX1BFUl9EQVkgKiAwLjUpICUgVGltZUNvbnN0YW50c19kZWZhdWx0LlNFQ09ORFNfUEVSX0RBWTsKICAgICAgICBjb25zdCBnaGEgPSBhbmdsZSArIHJhdGlvICogc2Vjb25kc1NpbmNlTWlkbmlnaHQ7CiAgICAgICAgY29uc3QgY29zR2hhID0gTWF0aC5jb3MoZ2hhKTsKICAgICAgICBjb25zdCBzaW5HaGEgPSBNYXRoLnNpbihnaGEpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgTWF0cml4M19kZWZhdWx0KAogICAgICAgICAgICBjb3NHaGEsCiAgICAgICAgICAgIHNpbkdoYSwKICAgICAgICAgICAgMCwKICAgICAgICAgICAgLXNpbkdoYSwKICAgICAgICAgICAgY29zR2hhLAogICAgICAgICAgICAwLAogICAgICAgICAgICAwLAogICAgICAgICAgICAwLAogICAgICAgICAgICAxCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICByZXN1bHRbMF0gPSBjb3NHaGE7CiAgICAgICAgcmVzdWx0WzFdID0gLXNpbkdoYTsKICAgICAgICByZXN1bHRbMl0gPSAwOwogICAgICAgIHJlc3VsdFszXSA9IHNpbkdoYTsKICAgICAgICByZXN1bHRbNF0gPSBjb3NHaGE7CiAgICAgICAgcmVzdWx0WzVdID0gMDsKICAgICAgICByZXN1bHRbNl0gPSAwOwogICAgICAgIHJlc3VsdFs3XSA9IDA7CiAgICAgICAgcmVzdWx0WzhdID0gMTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBUcmFuc2Zvcm1zLmlhdTIwMDZYeXNEYXRhID0gbmV3IElhdTIwMDZYeXNEYXRhX2RlZmF1bHQoKTsKICAgICAgVHJhbnNmb3Jtcy5lYXJ0aE9yaWVudGF0aW9uUGFyYW1ldGVycyA9IEVhcnRoT3JpZW50YXRpb25QYXJhbWV0ZXJzX2RlZmF1bHQuTk9ORTsKICAgICAgdHRNaW51c1RhaSA9IDMyLjE4NDsKICAgICAgajIwMDB0dERheXMgPSAyNDUxNTQ1OwogICAgICBUcmFuc2Zvcm1zLnByZWxvYWRJY3JmRml4ZWQgPSBmdW5jdGlvbih0aW1lSW50ZXJ2YWwpIHsKICAgICAgICBjb25zdCBzdGFydERheVRUID0gdGltZUludGVydmFsLnN0YXJ0LmRheU51bWJlcjsKICAgICAgICBjb25zdCBzdGFydFNlY29uZFRUID0gdGltZUludGVydmFsLnN0YXJ0LnNlY29uZHNPZkRheSArIHR0TWludXNUYWk7CiAgICAgICAgY29uc3Qgc3RvcERheVRUID0gdGltZUludGVydmFsLnN0b3AuZGF5TnVtYmVyOwogICAgICAgIGNvbnN0IHN0b3BTZWNvbmRUVCA9IHRpbWVJbnRlcnZhbC5zdG9wLnNlY29uZHNPZkRheSArIHR0TWludXNUYWk7CiAgICAgICAgcmV0dXJuIFRyYW5zZm9ybXMuaWF1MjAwNlh5c0RhdGEucHJlbG9hZCgKICAgICAgICAgIHN0YXJ0RGF5VFQsCiAgICAgICAgICBzdGFydFNlY29uZFRULAogICAgICAgICAgc3RvcERheVRULAogICAgICAgICAgc3RvcFNlY29uZFRUCiAgICAgICAgKTsKICAgICAgfTsKICAgICAgVHJhbnNmb3Jtcy5jb21wdXRlSWNyZlRvRml4ZWRNYXRyaXggPSBmdW5jdGlvbihkYXRlLCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChkYXRlKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImRhdGUgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBNYXRyaXgzX2RlZmF1bHQoKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgZml4ZWRUb0ljcmZNdHggPSBUcmFuc2Zvcm1zLmNvbXB1dGVGaXhlZFRvSWNyZk1hdHJpeChkYXRlLCByZXN1bHQpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGZpeGVkVG9JY3JmTXR4KSkgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIE1hdHJpeDNfZGVmYXVsdC50cmFuc3Bvc2UoZml4ZWRUb0ljcmZNdHgsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIFRkdE1pbnVzVGFpID0gMzIuMTg0OwogICAgICBKMjAwMGQgPSAyNDUxNTQ1OwogICAgICBzY3JhdGNoSHByID0gbmV3IEhlYWRpbmdQaXRjaFJvbGxfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoUm90YXRpb25NYXRyaXggPSBuZXcgTWF0cml4M19kZWZhdWx0KCk7CiAgICAgIGRhdGVTY3JhdGNoID0gbmV3IEp1bGlhbkRhdGVfZGVmYXVsdCgpOwogICAgICBUcmFuc2Zvcm1zLmNvbXB1dGVNb29uRml4ZWRUb0ljcmZNYXRyaXggPSBmdW5jdGlvbihkYXRlLCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChkYXRlKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImRhdGUgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBNYXRyaXgzX2RlZmF1bHQoKTsKICAgICAgICB9CiAgICAgICAgY29uc3Qgc2Vjb25kc1RUID0gSnVsaWFuRGF0ZV9kZWZhdWx0LmFkZFNlY29uZHMoZGF0ZSwgVGR0TWludXNUYWksIGRhdGVTY3JhdGNoKTsKICAgICAgICBjb25zdCBkID0gSnVsaWFuRGF0ZV9kZWZhdWx0LnRvdGFsRGF5cyhzZWNvbmRzVFQpIC0gSjIwMDBkOwogICAgICAgIGNvbnN0IGUxID0gTWF0aF9kZWZhdWx0LnRvUmFkaWFucygxMi4xMTIpIC0gTWF0aF9kZWZhdWx0LnRvUmFkaWFucygwLjA1Mjk5MikgKiBkOwogICAgICAgIGNvbnN0IGUyID0gTWF0aF9kZWZhdWx0LnRvUmFkaWFucygyNC4yMjQpIC0gTWF0aF9kZWZhdWx0LnRvUmFkaWFucygwLjEwNTk4NCkgKiBkOwogICAgICAgIGNvbnN0IGUzID0gTWF0aF9kZWZhdWx0LnRvUmFkaWFucygyMjcuNjQ1KSArIE1hdGhfZGVmYXVsdC50b1JhZGlhbnMoMTMuMDEyKSAqIGQ7CiAgICAgICAgY29uc3QgZTQgPSBNYXRoX2RlZmF1bHQudG9SYWRpYW5zKDI2MS4xMDUpICsgTWF0aF9kZWZhdWx0LnRvUmFkaWFucygxMy4zNDA3MTYpICogZDsKICAgICAgICBjb25zdCBlNSA9IE1hdGhfZGVmYXVsdC50b1JhZGlhbnMoMzU4KSArIE1hdGhfZGVmYXVsdC50b1JhZGlhbnMoMC45ODU2KSAqIGQ7CiAgICAgICAgc2NyYXRjaEhwci5waXRjaCA9IE1hdGhfZGVmYXVsdC50b1JhZGlhbnMoMjcwIC0gOTApIC0gTWF0aF9kZWZhdWx0LnRvUmFkaWFucygzLjg3OCkgKiBNYXRoLnNpbihlMSkgLSBNYXRoX2RlZmF1bHQudG9SYWRpYW5zKDAuMTIpICogTWF0aC5zaW4oZTIpICsgTWF0aF9kZWZhdWx0LnRvUmFkaWFucygwLjA3KSAqIE1hdGguc2luKGUzKSAtIE1hdGhfZGVmYXVsdC50b1JhZGlhbnMoMC4wMTcpICogTWF0aC5zaW4oZTQpOwogICAgICAgIHNjcmF0Y2hIcHIucm9sbCA9IE1hdGhfZGVmYXVsdC50b1JhZGlhbnMoNjYuNTMgLSA5MCkgKyBNYXRoX2RlZmF1bHQudG9SYWRpYW5zKDEuNTQzKSAqIE1hdGguY29zKGUxKSArIE1hdGhfZGVmYXVsdC50b1JhZGlhbnMoMC4yNCkgKiBNYXRoLmNvcyhlMikgLSBNYXRoX2RlZmF1bHQudG9SYWRpYW5zKDAuMDI4KSAqIE1hdGguY29zKGUzKSArIE1hdGhfZGVmYXVsdC50b1JhZGlhbnMoN2UtMykgKiBNYXRoLmNvcyhlNCk7CiAgICAgICAgc2NyYXRjaEhwci5oZWFkaW5nID0gTWF0aF9kZWZhdWx0LnRvUmFkaWFucygyNDQuMzc1IC0gOTApICsgTWF0aF9kZWZhdWx0LnRvUmFkaWFucygxMy4xNzYzNTgzMSkgKiBkICsgTWF0aF9kZWZhdWx0LnRvUmFkaWFucygzLjU1OCkgKiBNYXRoLnNpbihlMSkgKyBNYXRoX2RlZmF1bHQudG9SYWRpYW5zKDAuMTIxKSAqIE1hdGguc2luKGUyKSAtIE1hdGhfZGVmYXVsdC50b1JhZGlhbnMoMC4wNjQpICogTWF0aC5zaW4oZTMpICsgTWF0aF9kZWZhdWx0LnRvUmFkaWFucygwLjAxNikgKiBNYXRoLnNpbihlNCkgKyBNYXRoX2RlZmF1bHQudG9SYWRpYW5zKDAuMDI1KSAqIE1hdGguc2luKGU1KTsKICAgICAgICByZXR1cm4gTWF0cml4M19kZWZhdWx0LmZyb21IZWFkaW5nUGl0Y2hSb2xsKHNjcmF0Y2hIcHIsIHNjcmF0Y2hSb3RhdGlvbk1hdHJpeCk7CiAgICAgIH07CiAgICAgIFRyYW5zZm9ybXMuY29tcHV0ZUljcmZUb01vb25GaXhlZE1hdHJpeCA9IGZ1bmN0aW9uKGRhdGUsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGRhdGUpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiZGF0ZSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IE1hdHJpeDNfZGVmYXVsdCgpOwogICAgICAgIH0KICAgICAgICBjb25zdCBmaXhlZFRvSWNyZk10eCA9IFRyYW5zZm9ybXMuY29tcHV0ZU1vb25GaXhlZFRvSWNyZk1hdHJpeChkYXRlLCByZXN1bHQpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGZpeGVkVG9JY3JmTXR4KSkgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIE1hdHJpeDNfZGVmYXVsdC50cmFuc3Bvc2UoZml4ZWRUb0ljcmZNdHgsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIHh5c1NjcmF0Y2ggPSBuZXcgSWF1MjAwNlh5c1NhbXBsZV9kZWZhdWx0KDAsIDAsIDApOwogICAgICBlb3BTY3JhdGNoID0gbmV3IEVhcnRoT3JpZW50YXRpb25QYXJhbWV0ZXJzU2FtcGxlX2RlZmF1bHQoCiAgICAgICAgMCwKICAgICAgICAwLAogICAgICAgIDAsCiAgICAgICAgMCwKICAgICAgICAwLAogICAgICAgIDAKICAgICAgKTsKICAgICAgcm90YXRpb24xU2NyYXRjaCA9IG5ldyBNYXRyaXgzX2RlZmF1bHQoKTsKICAgICAgcm90YXRpb24yU2NyYXRjaCA9IG5ldyBNYXRyaXgzX2RlZmF1bHQoKTsKICAgICAgVHJhbnNmb3Jtcy5jb21wdXRlRml4ZWRUb0ljcmZNYXRyaXggPSBmdW5jdGlvbihkYXRlLCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChkYXRlKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImRhdGUgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBNYXRyaXgzX2RlZmF1bHQoKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgZW9wID0gVHJhbnNmb3Jtcy5lYXJ0aE9yaWVudGF0aW9uUGFyYW1ldGVycy5jb21wdXRlKGRhdGUsIGVvcFNjcmF0Y2gpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGVvcCkpIHsKICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGRheVRUID0gZGF0ZS5kYXlOdW1iZXI7CiAgICAgICAgY29uc3Qgc2Vjb25kVFQgPSBkYXRlLnNlY29uZHNPZkRheSArIHR0TWludXNUYWk7CiAgICAgICAgY29uc3QgeHlzID0gVHJhbnNmb3Jtcy5pYXUyMDA2WHlzRGF0YS5jb21wdXRlWHlzUmFkaWFucygKICAgICAgICAgIGRheVRULAogICAgICAgICAgc2Vjb25kVFQsCiAgICAgICAgICB4eXNTY3JhdGNoCiAgICAgICAgKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdCh4eXMpKSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICBjb25zdCB4ID0geHlzLnggKyBlb3AueFBvbGVPZmZzZXQ7CiAgICAgICAgY29uc3QgeSA9IHh5cy55ICsgZW9wLnlQb2xlT2Zmc2V0OwogICAgICAgIGNvbnN0IGEzID0gMSAvICgxICsgTWF0aC5zcXJ0KDEgLSB4ICogeCAtIHkgKiB5KSk7CiAgICAgICAgY29uc3Qgcm90YXRpb24xID0gcm90YXRpb24xU2NyYXRjaDsKICAgICAgICByb3RhdGlvbjFbMF0gPSAxIC0gYTMgKiB4ICogeDsKICAgICAgICByb3RhdGlvbjFbM10gPSAtYTMgKiB4ICogeTsKICAgICAgICByb3RhdGlvbjFbNl0gPSB4OwogICAgICAgIHJvdGF0aW9uMVsxXSA9IC1hMyAqIHggKiB5OwogICAgICAgIHJvdGF0aW9uMVs0XSA9IDEgLSBhMyAqIHkgKiB5OwogICAgICAgIHJvdGF0aW9uMVs3XSA9IHk7CiAgICAgICAgcm90YXRpb24xWzJdID0gLXg7CiAgICAgICAgcm90YXRpb24xWzVdID0gLXk7CiAgICAgICAgcm90YXRpb24xWzhdID0gMSAtIGEzICogKHggKiB4ICsgeSAqIHkpOwogICAgICAgIGNvbnN0IHJvdGF0aW9uMiA9IE1hdHJpeDNfZGVmYXVsdC5mcm9tUm90YXRpb25aKC14eXMucywgcm90YXRpb24yU2NyYXRjaCk7CiAgICAgICAgY29uc3QgbWF0cml4USA9IE1hdHJpeDNfZGVmYXVsdC5tdWx0aXBseShyb3RhdGlvbjEsIHJvdGF0aW9uMiwgcm90YXRpb24xU2NyYXRjaCk7CiAgICAgICAgY29uc3QgZGF0ZVV0MWRheSA9IGRhdGUuZGF5TnVtYmVyOwogICAgICAgIGNvbnN0IGRhdGVVdDFzZWMgPSBkYXRlLnNlY29uZHNPZkRheSAtIEp1bGlhbkRhdGVfZGVmYXVsdC5jb21wdXRlVGFpTWludXNVdGMoZGF0ZSkgKyBlb3AudXQxTWludXNVdGM7CiAgICAgICAgY29uc3QgZGF5c1NpbmNlSjIwMDAgPSBkYXRlVXQxZGF5IC0gMjQ1MTU0NTsKICAgICAgICBjb25zdCBmcmFjdGlvbk9mRGF5ID0gZGF0ZVV0MXNlYyAvIFRpbWVDb25zdGFudHNfZGVmYXVsdC5TRUNPTkRTX1BFUl9EQVk7CiAgICAgICAgbGV0IGVyYSA9IDAuNzc5MDU3MjczMjY0ICsgZnJhY3Rpb25PZkRheSArIDAuMDAyNzM3ODExOTExMzU0NDggKiAoZGF5c1NpbmNlSjIwMDAgKyBmcmFjdGlvbk9mRGF5KTsKICAgICAgICBlcmEgPSBlcmEgJSAxICogTWF0aF9kZWZhdWx0LlRXT19QSTsKICAgICAgICBjb25zdCBlYXJ0aFJvdGF0aW9uID0gTWF0cml4M19kZWZhdWx0LmZyb21Sb3RhdGlvblooZXJhLCByb3RhdGlvbjJTY3JhdGNoKTsKICAgICAgICBjb25zdCBwZlRvSWNyZiA9IE1hdHJpeDNfZGVmYXVsdC5tdWx0aXBseShtYXRyaXhRLCBlYXJ0aFJvdGF0aW9uLCByb3RhdGlvbjFTY3JhdGNoKTsKICAgICAgICBjb25zdCBjb3N4cCA9IE1hdGguY29zKGVvcC54UG9sZVdhbmRlcik7CiAgICAgICAgY29uc3QgY29zeXAgPSBNYXRoLmNvcyhlb3AueVBvbGVXYW5kZXIpOwogICAgICAgIGNvbnN0IHNpbnhwID0gTWF0aC5zaW4oZW9wLnhQb2xlV2FuZGVyKTsKICAgICAgICBjb25zdCBzaW55cCA9IE1hdGguc2luKGVvcC55UG9sZVdhbmRlcik7CiAgICAgICAgbGV0IHR0dCA9IGRheVRUIC0gajIwMDB0dERheXMgKyBzZWNvbmRUVCAvIFRpbWVDb25zdGFudHNfZGVmYXVsdC5TRUNPTkRTX1BFUl9EQVk7CiAgICAgICAgdHR0IC89IDM2NTI1OwogICAgICAgIGNvbnN0IHNwID0gLTQ3ZS02ICogdHR0ICogTWF0aF9kZWZhdWx0LlJBRElBTlNfUEVSX0RFR1JFRSAvIDM2MDA7CiAgICAgICAgY29uc3QgY29zc3AgPSBNYXRoLmNvcyhzcCk7CiAgICAgICAgY29uc3Qgc2luc3AgPSBNYXRoLnNpbihzcCk7CiAgICAgICAgY29uc3QgZlRvUGZNdHggPSByb3RhdGlvbjJTY3JhdGNoOwogICAgICAgIGZUb1BmTXR4WzBdID0gY29zeHAgKiBjb3NzcDsKICAgICAgICBmVG9QZk10eFsxXSA9IGNvc3hwICogc2luc3A7CiAgICAgICAgZlRvUGZNdHhbMl0gPSBzaW54cDsKICAgICAgICBmVG9QZk10eFszXSA9IC1jb3N5cCAqIHNpbnNwICsgc2lueXAgKiBzaW54cCAqIGNvc3NwOwogICAgICAgIGZUb1BmTXR4WzRdID0gY29zeXAgKiBjb3NzcCArIHNpbnlwICogc2lueHAgKiBzaW5zcDsKICAgICAgICBmVG9QZk10eFs1XSA9IC1zaW55cCAqIGNvc3hwOwogICAgICAgIGZUb1BmTXR4WzZdID0gLXNpbnlwICogc2luc3AgLSBjb3N5cCAqIHNpbnhwICogY29zc3A7CiAgICAgICAgZlRvUGZNdHhbN10gPSBzaW55cCAqIGNvc3NwIC0gY29zeXAgKiBzaW54cCAqIHNpbnNwOwogICAgICAgIGZUb1BmTXR4WzhdID0gY29zeXAgKiBjb3N4cDsKICAgICAgICByZXR1cm4gTWF0cml4M19kZWZhdWx0Lm11bHRpcGx5KHBmVG9JY3JmLCBmVG9QZk10eCwgcmVzdWx0KTsKICAgICAgfTsKICAgICAgcG9pbnRUb1dpbmRvd0Nvb3JkaW5hdGVzVGVtcCA9IG5ldyBDYXJ0ZXNpYW40X2RlZmF1bHQoKTsKICAgICAgVHJhbnNmb3Jtcy5wb2ludFRvV2luZG93Q29vcmRpbmF0ZXMgPSBmdW5jdGlvbihtb2RlbFZpZXdQcm9qZWN0aW9uTWF0cml4LCB2aWV3cG9ydFRyYW5zZm9ybWF0aW9uLCBwb2ludCwgcmVzdWx0KSB7CiAgICAgICAgcmVzdWx0ID0gVHJhbnNmb3Jtcy5wb2ludFRvR0xXaW5kb3dDb29yZGluYXRlcygKICAgICAgICAgIG1vZGVsVmlld1Byb2plY3Rpb25NYXRyaXgsCiAgICAgICAgICB2aWV3cG9ydFRyYW5zZm9ybWF0aW9uLAogICAgICAgICAgcG9pbnQsCiAgICAgICAgICByZXN1bHQKICAgICAgICApOwogICAgICAgIHJlc3VsdC55ID0gMiAqIHZpZXdwb3J0VHJhbnNmb3JtYXRpb25bNV0gLSByZXN1bHQueTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBUcmFuc2Zvcm1zLnBvaW50VG9HTFdpbmRvd0Nvb3JkaW5hdGVzID0gZnVuY3Rpb24obW9kZWxWaWV3UHJvamVjdGlvbk1hdHJpeCwgdmlld3BvcnRUcmFuc2Zvcm1hdGlvbiwgcG9pbnQsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KG1vZGVsVmlld1Byb2plY3Rpb25NYXRyaXgpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgibW9kZWxWaWV3UHJvamVjdGlvbk1hdHJpeCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQodmlld3BvcnRUcmFuc2Zvcm1hdGlvbikpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJ2aWV3cG9ydFRyYW5zZm9ybWF0aW9uIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwb2ludCkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJwb2ludCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IENhcnRlc2lhbjJfZGVmYXVsdCgpOwogICAgICAgIH0KICAgICAgICBjb25zdCB0bXAyID0gcG9pbnRUb1dpbmRvd0Nvb3JkaW5hdGVzVGVtcDsKICAgICAgICBNYXRyaXg0X2RlZmF1bHQubXVsdGlwbHlCeVZlY3RvcigKICAgICAgICAgIG1vZGVsVmlld1Byb2plY3Rpb25NYXRyaXgsCiAgICAgICAgICBDYXJ0ZXNpYW40X2RlZmF1bHQuZnJvbUVsZW1lbnRzKHBvaW50LngsIHBvaW50LnksIHBvaW50LnosIDEsIHRtcDIpLAogICAgICAgICAgdG1wMgogICAgICAgICk7CiAgICAgICAgQ2FydGVzaWFuNF9kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIodG1wMiwgMSAvIHRtcDIudywgdG1wMik7CiAgICAgICAgTWF0cml4NF9kZWZhdWx0Lm11bHRpcGx5QnlWZWN0b3Iodmlld3BvcnRUcmFuc2Zvcm1hdGlvbiwgdG1wMiwgdG1wMik7CiAgICAgICAgcmV0dXJuIENhcnRlc2lhbjJfZGVmYXVsdC5mcm9tQ2FydGVzaWFuNCh0bXAyLCByZXN1bHQpOwogICAgICB9OwogICAgICBub3JtYWxTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICByaWdodFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHVwU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgVHJhbnNmb3Jtcy5yb3RhdGlvbk1hdHJpeEZyb21Qb3NpdGlvblZlbG9jaXR5ID0gZnVuY3Rpb24ocG9zaXRpb24sIHZlbG9jaXR5LCBlbGxpcHNvaWQsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHBvc2l0aW9uKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInBvc2l0aW9uIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdCh2ZWxvY2l0eSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJ2ZWxvY2l0eSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgY29uc3Qgbm9ybWFsMiA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KAogICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgRWxsaXBzb2lkX2RlZmF1bHQuZGVmYXVsdAogICAgICAgICkuZ2VvZGV0aWNTdXJmYWNlTm9ybWFsKHBvc2l0aW9uLCBub3JtYWxTY3JhdGNoKTsKICAgICAgICBsZXQgcmlnaHQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY3Jvc3ModmVsb2NpdHksIG5vcm1hbDIsIHJpZ2h0U2NyYXRjaCk7CiAgICAgICAgaWYgKENhcnRlc2lhbjNfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKHJpZ2h0LCBDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTywgTWF0aF9kZWZhdWx0LkVQU0lMT042KSkgewogICAgICAgICAgcmlnaHQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoQ2FydGVzaWFuM19kZWZhdWx0LlVOSVRfWCwgcmlnaHQpOwogICAgICAgIH0KICAgICAgICBjb25zdCB1cCA9IENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyhyaWdodCwgdmVsb2NpdHksIHVwU2NyYXRjaCk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSh1cCwgdXApOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyh2ZWxvY2l0eSwgdXAsIHJpZ2h0KTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubmVnYXRlKHJpZ2h0LCByaWdodCk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShyaWdodCwgcmlnaHQpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBNYXRyaXgzX2RlZmF1bHQoKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0WzBdID0gdmVsb2NpdHkueDsKICAgICAgICByZXN1bHRbMV0gPSB2ZWxvY2l0eS55OwogICAgICAgIHJlc3VsdFsyXSA9IHZlbG9jaXR5Lno7CiAgICAgICAgcmVzdWx0WzNdID0gcmlnaHQueDsKICAgICAgICByZXN1bHRbNF0gPSByaWdodC55OwogICAgICAgIHJlc3VsdFs1XSA9IHJpZ2h0Lno7CiAgICAgICAgcmVzdWx0WzZdID0gdXAueDsKICAgICAgICByZXN1bHRbN10gPSB1cC55OwogICAgICAgIHJlc3VsdFs4XSA9IHVwLno7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgc3dpenpsZU1hdHJpeCA9IG5ldyBNYXRyaXg0X2RlZmF1bHQoCiAgICAgICAgMCwKICAgICAgICAwLAogICAgICAgIDEsCiAgICAgICAgMCwKICAgICAgICAxLAogICAgICAgIDAsCiAgICAgICAgMCwKICAgICAgICAwLAogICAgICAgIDAsCiAgICAgICAgMSwKICAgICAgICAwLAogICAgICAgIDAsCiAgICAgICAgMCwKICAgICAgICAwLAogICAgICAgIDAsCiAgICAgICAgMQogICAgICApOwogICAgICBzY3JhdGNoQ2FydG9ncmFwaGljID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4zUHJvamVjdGlvbiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaENlbnRlciA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFJvdGF0aW9uID0gbmV3IE1hdHJpeDNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoRnJvbUVOVSA9IG5ldyBNYXRyaXg0X2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFRvRU5VID0gbmV3IE1hdHJpeDRfZGVmYXVsdCgpOwogICAgICBUcmFuc2Zvcm1zLmJhc2lzVG8yRCA9IGZ1bmN0aW9uKHByb2plY3Rpb24sIG1hdHJpeCwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocHJvamVjdGlvbikpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJwcm9qZWN0aW9uIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChtYXRyaXgpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgibWF0cml4IGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgicmVzdWx0IGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBydGNDZW50ZXIgPSBNYXRyaXg0X2RlZmF1bHQuZ2V0VHJhbnNsYXRpb24obWF0cml4LCBzY3JhdGNoQ2VudGVyKTsKICAgICAgICBjb25zdCBlbGxpcHNvaWQgPSBwcm9qZWN0aW9uLmVsbGlwc29pZDsKICAgICAgICBsZXQgcHJvamVjdGVkUG9zaXRpb247CiAgICAgICAgaWYgKENhcnRlc2lhbjNfZGVmYXVsdC5lcXVhbHMocnRjQ2VudGVyLCBDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTykpIHsKICAgICAgICAgIHByb2plY3RlZFBvc2l0aW9uID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKAogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTywKICAgICAgICAgICAgc2NyYXRjaENhcnRlc2lhbjNQcm9qZWN0aW9uCiAgICAgICAgICApOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjb25zdCBjYXJ0b2dyYXBoaWMyID0gZWxsaXBzb2lkLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljKAogICAgICAgICAgICBydGNDZW50ZXIsCiAgICAgICAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWMKICAgICAgICAgICk7CiAgICAgICAgICBwcm9qZWN0ZWRQb3NpdGlvbiA9IHByb2plY3Rpb24ucHJvamVjdCgKICAgICAgICAgICAgY2FydG9ncmFwaGljMiwKICAgICAgICAgICAgc2NyYXRjaENhcnRlc2lhbjNQcm9qZWN0aW9uCiAgICAgICAgICApOwogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmZyb21FbGVtZW50cygKICAgICAgICAgICAgcHJvamVjdGVkUG9zaXRpb24ueiwKICAgICAgICAgICAgcHJvamVjdGVkUG9zaXRpb24ueCwKICAgICAgICAgICAgcHJvamVjdGVkUG9zaXRpb24ueSwKICAgICAgICAgICAgcHJvamVjdGVkUG9zaXRpb24KICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGZyb21FTlUgPSBUcmFuc2Zvcm1zLmVhc3ROb3J0aFVwVG9GaXhlZEZyYW1lKAogICAgICAgICAgcnRjQ2VudGVyLAogICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgc2NyYXRjaEZyb21FTlUKICAgICAgICApOwogICAgICAgIGNvbnN0IHRvRU5VID0gTWF0cml4NF9kZWZhdWx0LmludmVyc2VUcmFuc2Zvcm1hdGlvbihmcm9tRU5VLCBzY3JhdGNoVG9FTlUpOwogICAgICAgIGNvbnN0IHJvdGF0aW9uID0gTWF0cml4NF9kZWZhdWx0LmdldE1hdHJpeDMobWF0cml4LCBzY3JhdGNoUm90YXRpb24pOwogICAgICAgIGNvbnN0IGxvY2FsID0gTWF0cml4NF9kZWZhdWx0Lm11bHRpcGx5QnlNYXRyaXgzKHRvRU5VLCByb3RhdGlvbiwgcmVzdWx0KTsKICAgICAgICBNYXRyaXg0X2RlZmF1bHQubXVsdGlwbHkoc3dpenpsZU1hdHJpeCwgbG9jYWwsIHJlc3VsdCk7CiAgICAgICAgTWF0cml4NF9kZWZhdWx0LnNldFRyYW5zbGF0aW9uKHJlc3VsdCwgcHJvamVjdGVkUG9zaXRpb24sIHJlc3VsdCk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgVHJhbnNmb3Jtcy5lbGxpcHNvaWRUbzJETW9kZWxNYXRyaXggPSBmdW5jdGlvbihwcm9qZWN0aW9uLCBjZW50ZXIsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHByb2plY3Rpb24pKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgicHJvamVjdGlvbiBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoY2VudGVyKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImNlbnRlciBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInJlc3VsdCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgZWxsaXBzb2lkID0gcHJvamVjdGlvbi5lbGxpcHNvaWQ7CiAgICAgICAgY29uc3QgZnJvbUVOVSA9IFRyYW5zZm9ybXMuZWFzdE5vcnRoVXBUb0ZpeGVkRnJhbWUoCiAgICAgICAgICBjZW50ZXIsCiAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICBzY3JhdGNoRnJvbUVOVQogICAgICAgICk7CiAgICAgICAgY29uc3QgdG9FTlUgPSBNYXRyaXg0X2RlZmF1bHQuaW52ZXJzZVRyYW5zZm9ybWF0aW9uKGZyb21FTlUsIHNjcmF0Y2hUb0VOVSk7CiAgICAgICAgY29uc3QgY2FydG9ncmFwaGljMiA9IGVsbGlwc29pZC5jYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpYygKICAgICAgICAgIGNlbnRlciwKICAgICAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWMKICAgICAgICApOwogICAgICAgIGNvbnN0IHByb2plY3RlZFBvc2l0aW9uID0gcHJvamVjdGlvbi5wcm9qZWN0KAogICAgICAgICAgY2FydG9ncmFwaGljMiwKICAgICAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4zUHJvamVjdGlvbgogICAgICAgICk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmZyb21FbGVtZW50cygKICAgICAgICAgIHByb2plY3RlZFBvc2l0aW9uLnosCiAgICAgICAgICBwcm9qZWN0ZWRQb3NpdGlvbi54LAogICAgICAgICAgcHJvamVjdGVkUG9zaXRpb24ueSwKICAgICAgICAgIHByb2plY3RlZFBvc2l0aW9uCiAgICAgICAgKTsKICAgICAgICBjb25zdCB0cmFuc2xhdGlvbjIgPSBNYXRyaXg0X2RlZmF1bHQuZnJvbVRyYW5zbGF0aW9uKAogICAgICAgICAgcHJvamVjdGVkUG9zaXRpb24sCiAgICAgICAgICBzY3JhdGNoRnJvbUVOVQogICAgICAgICk7CiAgICAgICAgTWF0cml4NF9kZWZhdWx0Lm11bHRpcGx5KHN3aXp6bGVNYXRyaXgsIHRvRU5VLCByZXN1bHQpOwogICAgICAgIE1hdHJpeDRfZGVmYXVsdC5tdWx0aXBseSh0cmFuc2xhdGlvbjIsIHJlc3VsdCwgcmVzdWx0KTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBUcmFuc2Zvcm1zX2RlZmF1bHQgPSBUcmFuc2Zvcm1zOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUmVjdGFuZ2xlLmpzCiAgZnVuY3Rpb24gUmVjdGFuZ2xlKHdlc3QsIHNvdXRoLCBlYXN0LCBub3J0aCkgewogICAgdGhpcy53ZXN0ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQod2VzdCwgMCk7CiAgICB0aGlzLnNvdXRoID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc291dGgsIDApOwogICAgdGhpcy5lYXN0ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoZWFzdCwgMCk7CiAgICB0aGlzLm5vcnRoID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQobm9ydGgsIDApOwogIH0KICB2YXIgZnJvbUJvdW5kaW5nU3BoZXJlTWF0cml4U2NyYXRjaCwgZnJvbUJvdW5kaW5nU3BoZXJlRWFzdFNjcmF0Y2gsIGZyb21Cb3VuZGluZ1NwaGVyZU5vcnRoU2NyYXRjaCwgZnJvbUJvdW5kaW5nU3BoZXJlV2VzdFNjcmF0Y2gsIGZyb21Cb3VuZGluZ1NwaGVyZVNvdXRoU2NyYXRjaCwgZnJvbUJvdW5kaW5nU3BoZXJlUG9zaXRpb25zU2NyYXRjaCwgc3Vic2FtcGxlTGxhU2NyYXRjaCwgUmVjdGFuZ2xlX2RlZmF1bHQ7CiAgdmFyIGluaXRfUmVjdGFuZ2xlID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9SZWN0YW5nbGUuanMiKCkgewogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DYXJ0b2dyYXBoaWMoKTsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIGluaXRfVHJhbnNmb3JtcygpOwogICAgICBpbml0X01hdHJpeDQoKTsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoUmVjdGFuZ2xlLnByb3RvdHlwZSwgewogICAgICAgIC8qKgogICAgICAgICAqIEdldHMgdGhlIHdpZHRoIG9mIHRoZSByZWN0YW5nbGUgaW4gcmFkaWFucy4KICAgICAgICAgKiBAbWVtYmVyb2YgUmVjdGFuZ2xlLnByb3RvdHlwZQogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQHJlYWRvbmx5CiAgICAgICAgICovCiAgICAgICAgd2lkdGg6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBSZWN0YW5nbGUuY29tcHV0ZVdpZHRoKHRoaXMpOwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgLyoqCiAgICAgICAgICogR2V0cyB0aGUgaGVpZ2h0IG9mIHRoZSByZWN0YW5nbGUgaW4gcmFkaWFucy4KICAgICAgICAgKiBAbWVtYmVyb2YgUmVjdGFuZ2xlLnByb3RvdHlwZQogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQHJlYWRvbmx5CiAgICAgICAgICovCiAgICAgICAgaGVpZ2h0OiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gUmVjdGFuZ2xlLmNvbXB1dGVIZWlnaHQodGhpcyk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgICAgUmVjdGFuZ2xlLnBhY2tlZExlbmd0aCA9IDQ7CiAgICAgIFJlY3RhbmdsZS5wYWNrID0gZnVuY3Rpb24odmFsdWUsIGFycmF5LCBzdGFydGluZ0luZGV4KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJ2YWx1ZSIsIHZhbHVlKTsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUud2VzdDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuc291dGg7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLmVhc3Q7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleF0gPSB2YWx1ZS5ub3J0aDsKICAgICAgICByZXR1cm4gYXJyYXk7CiAgICAgIH07CiAgICAgIFJlY3RhbmdsZS51bnBhY2sgPSBmdW5jdGlvbihhcnJheSwgc3RhcnRpbmdJbmRleCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IFJlY3RhbmdsZSgpOwogICAgICAgIH0KICAgICAgICByZXN1bHQud2VzdCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgcmVzdWx0LnNvdXRoID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICByZXN1bHQuZWFzdCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgcmVzdWx0Lm5vcnRoID0gYXJyYXlbc3RhcnRpbmdJbmRleF07CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgUmVjdGFuZ2xlLmNvbXB1dGVXaWR0aCA9IGZ1bmN0aW9uKHJlY3RhbmdsZSkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVjdGFuZ2xlIiwgcmVjdGFuZ2xlKTsKICAgICAgICBsZXQgZWFzdCA9IHJlY3RhbmdsZS5lYXN0OwogICAgICAgIGNvbnN0IHdlc3QgPSByZWN0YW5nbGUud2VzdDsKICAgICAgICBpZiAoZWFzdCA8IHdlc3QpIHsKICAgICAgICAgIGVhc3QgKz0gTWF0aF9kZWZhdWx0LlRXT19QSTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGVhc3QgLSB3ZXN0OwogICAgICB9OwogICAgICBSZWN0YW5nbGUuY29tcHV0ZUhlaWdodCA9IGZ1bmN0aW9uKHJlY3RhbmdsZSkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVjdGFuZ2xlIiwgcmVjdGFuZ2xlKTsKICAgICAgICByZXR1cm4gcmVjdGFuZ2xlLm5vcnRoIC0gcmVjdGFuZ2xlLnNvdXRoOwogICAgICB9OwogICAgICBSZWN0YW5nbGUuZnJvbURlZ3JlZXMgPSBmdW5jdGlvbih3ZXN0LCBzb3V0aCwgZWFzdCwgbm9ydGgsIHJlc3VsdCkgewogICAgICAgIHdlc3QgPSBNYXRoX2RlZmF1bHQudG9SYWRpYW5zKGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHdlc3QsIDApKTsKICAgICAgICBzb3V0aCA9IE1hdGhfZGVmYXVsdC50b1JhZGlhbnMoZGVmYXVsdFZhbHVlX2RlZmF1bHQoc291dGgsIDApKTsKICAgICAgICBlYXN0ID0gTWF0aF9kZWZhdWx0LnRvUmFkaWFucyhkZWZhdWx0VmFsdWVfZGVmYXVsdChlYXN0LCAwKSk7CiAgICAgICAgbm9ydGggPSBNYXRoX2RlZmF1bHQudG9SYWRpYW5zKGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG5vcnRoLCAwKSk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBSZWN0YW5nbGUod2VzdCwgc291dGgsIGVhc3QsIG5vcnRoKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0Lndlc3QgPSB3ZXN0OwogICAgICAgIHJlc3VsdC5zb3V0aCA9IHNvdXRoOwogICAgICAgIHJlc3VsdC5lYXN0ID0gZWFzdDsKICAgICAgICByZXN1bHQubm9ydGggPSBub3J0aDsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBSZWN0YW5nbGUuZnJvbVJhZGlhbnMgPSBmdW5jdGlvbih3ZXN0LCBzb3V0aCwgZWFzdCwgbm9ydGgsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgUmVjdGFuZ2xlKHdlc3QsIHNvdXRoLCBlYXN0LCBub3J0aCk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC53ZXN0ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQod2VzdCwgMCk7CiAgICAgICAgcmVzdWx0LnNvdXRoID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc291dGgsIDApOwogICAgICAgIHJlc3VsdC5lYXN0ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoZWFzdCwgMCk7CiAgICAgICAgcmVzdWx0Lm5vcnRoID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQobm9ydGgsIDApOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFJlY3RhbmdsZS5mcm9tQ2FydG9ncmFwaGljQXJyYXkgPSBmdW5jdGlvbihjYXJ0b2dyYXBoaWNzLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImNhcnRvZ3JhcGhpY3MiLCBjYXJ0b2dyYXBoaWNzKTsKICAgICAgICBsZXQgd2VzdCA9IE51bWJlci5NQVhfVkFMVUU7CiAgICAgICAgbGV0IGVhc3QgPSAtTnVtYmVyLk1BWF9WQUxVRTsKICAgICAgICBsZXQgd2VzdE92ZXJJREwgPSBOdW1iZXIuTUFYX1ZBTFVFOwogICAgICAgIGxldCBlYXN0T3ZlcklETCA9IC1OdW1iZXIuTUFYX1ZBTFVFOwogICAgICAgIGxldCBzb3V0aCA9IE51bWJlci5NQVhfVkFMVUU7CiAgICAgICAgbGV0IG5vcnRoID0gLU51bWJlci5NQVhfVkFMVUU7CiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGNhcnRvZ3JhcGhpY3MubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gY2FydG9ncmFwaGljc1tpXTsKICAgICAgICAgIHdlc3QgPSBNYXRoLm1pbih3ZXN0LCBwb3NpdGlvbi5sb25naXR1ZGUpOwogICAgICAgICAgZWFzdCA9IE1hdGgubWF4KGVhc3QsIHBvc2l0aW9uLmxvbmdpdHVkZSk7CiAgICAgICAgICBzb3V0aCA9IE1hdGgubWluKHNvdXRoLCBwb3NpdGlvbi5sYXRpdHVkZSk7CiAgICAgICAgICBub3J0aCA9IE1hdGgubWF4KG5vcnRoLCBwb3NpdGlvbi5sYXRpdHVkZSk7CiAgICAgICAgICBjb25zdCBsb25BZGp1c3RlZCA9IHBvc2l0aW9uLmxvbmdpdHVkZSA+PSAwID8gcG9zaXRpb24ubG9uZ2l0dWRlIDogcG9zaXRpb24ubG9uZ2l0dWRlICsgTWF0aF9kZWZhdWx0LlRXT19QSTsKICAgICAgICAgIHdlc3RPdmVySURMID0gTWF0aC5taW4od2VzdE92ZXJJREwsIGxvbkFkanVzdGVkKTsKICAgICAgICAgIGVhc3RPdmVySURMID0gTWF0aC5tYXgoZWFzdE92ZXJJREwsIGxvbkFkanVzdGVkKTsKICAgICAgICB9CiAgICAgICAgaWYgKGVhc3QgLSB3ZXN0ID4gZWFzdE92ZXJJREwgLSB3ZXN0T3ZlcklETCkgewogICAgICAgICAgd2VzdCA9IHdlc3RPdmVySURMOwogICAgICAgICAgZWFzdCA9IGVhc3RPdmVySURMOwogICAgICAgICAgaWYgKGVhc3QgPiBNYXRoX2RlZmF1bHQuUEkpIHsKICAgICAgICAgICAgZWFzdCA9IGVhc3QgLSBNYXRoX2RlZmF1bHQuVFdPX1BJOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHdlc3QgPiBNYXRoX2RlZmF1bHQuUEkpIHsKICAgICAgICAgICAgd2VzdCA9IHdlc3QgLSBNYXRoX2RlZmF1bHQuVFdPX1BJOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IFJlY3RhbmdsZSh3ZXN0LCBzb3V0aCwgZWFzdCwgbm9ydGgpOwogICAgICAgIH0KICAgICAgICByZXN1bHQud2VzdCA9IHdlc3Q7CiAgICAgICAgcmVzdWx0LnNvdXRoID0gc291dGg7CiAgICAgICAgcmVzdWx0LmVhc3QgPSBlYXN0OwogICAgICAgIHJlc3VsdC5ub3J0aCA9IG5vcnRoOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFJlY3RhbmdsZS5mcm9tQ2FydGVzaWFuQXJyYXkgPSBmdW5jdGlvbihjYXJ0ZXNpYW5zLCBlbGxpcHNvaWQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiY2FydGVzaWFucyIsIGNhcnRlc2lhbnMpOwogICAgICAgIGVsbGlwc29pZCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGVsbGlwc29pZCwgRWxsaXBzb2lkX2RlZmF1bHQuZGVmYXVsdCk7CiAgICAgICAgbGV0IHdlc3QgPSBOdW1iZXIuTUFYX1ZBTFVFOwogICAgICAgIGxldCBlYXN0ID0gLU51bWJlci5NQVhfVkFMVUU7CiAgICAgICAgbGV0IHdlc3RPdmVySURMID0gTnVtYmVyLk1BWF9WQUxVRTsKICAgICAgICBsZXQgZWFzdE92ZXJJREwgPSAtTnVtYmVyLk1BWF9WQUxVRTsKICAgICAgICBsZXQgc291dGggPSBOdW1iZXIuTUFYX1ZBTFVFOwogICAgICAgIGxldCBub3J0aCA9IC1OdW1iZXIuTUFYX1ZBTFVFOwogICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBjYXJ0ZXNpYW5zLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CiAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IGVsbGlwc29pZC5jYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpYyhjYXJ0ZXNpYW5zW2ldKTsKICAgICAgICAgIHdlc3QgPSBNYXRoLm1pbih3ZXN0LCBwb3NpdGlvbi5sb25naXR1ZGUpOwogICAgICAgICAgZWFzdCA9IE1hdGgubWF4KGVhc3QsIHBvc2l0aW9uLmxvbmdpdHVkZSk7CiAgICAgICAgICBzb3V0aCA9IE1hdGgubWluKHNvdXRoLCBwb3NpdGlvbi5sYXRpdHVkZSk7CiAgICAgICAgICBub3J0aCA9IE1hdGgubWF4KG5vcnRoLCBwb3NpdGlvbi5sYXRpdHVkZSk7CiAgICAgICAgICBjb25zdCBsb25BZGp1c3RlZCA9IHBvc2l0aW9uLmxvbmdpdHVkZSA+PSAwID8gcG9zaXRpb24ubG9uZ2l0dWRlIDogcG9zaXRpb24ubG9uZ2l0dWRlICsgTWF0aF9kZWZhdWx0LlRXT19QSTsKICAgICAgICAgIHdlc3RPdmVySURMID0gTWF0aC5taW4od2VzdE92ZXJJREwsIGxvbkFkanVzdGVkKTsKICAgICAgICAgIGVhc3RPdmVySURMID0gTWF0aC5tYXgoZWFzdE92ZXJJREwsIGxvbkFkanVzdGVkKTsKICAgICAgICB9CiAgICAgICAgaWYgKGVhc3QgLSB3ZXN0ID4gZWFzdE92ZXJJREwgLSB3ZXN0T3ZlcklETCkgewogICAgICAgICAgd2VzdCA9IHdlc3RPdmVySURMOwogICAgICAgICAgZWFzdCA9IGVhc3RPdmVySURMOwogICAgICAgICAgaWYgKGVhc3QgPiBNYXRoX2RlZmF1bHQuUEkpIHsKICAgICAgICAgICAgZWFzdCA9IGVhc3QgLSBNYXRoX2RlZmF1bHQuVFdPX1BJOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHdlc3QgPiBNYXRoX2RlZmF1bHQuUEkpIHsKICAgICAgICAgICAgd2VzdCA9IHdlc3QgLSBNYXRoX2RlZmF1bHQuVFdPX1BJOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IFJlY3RhbmdsZSh3ZXN0LCBzb3V0aCwgZWFzdCwgbm9ydGgpOwogICAgICAgIH0KICAgICAgICByZXN1bHQud2VzdCA9IHdlc3Q7CiAgICAgICAgcmVzdWx0LnNvdXRoID0gc291dGg7CiAgICAgICAgcmVzdWx0LmVhc3QgPSBlYXN0OwogICAgICAgIHJlc3VsdC5ub3J0aCA9IG5vcnRoOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIGZyb21Cb3VuZGluZ1NwaGVyZU1hdHJpeFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGZyb21Cb3VuZGluZ1NwaGVyZUVhc3RTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBmcm9tQm91bmRpbmdTcGhlcmVOb3J0aFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGZyb21Cb3VuZGluZ1NwaGVyZVdlc3RTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBmcm9tQm91bmRpbmdTcGhlcmVTb3V0aFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGZyb21Cb3VuZGluZ1NwaGVyZVBvc2l0aW9uc1NjcmF0Y2ggPSBuZXcgQXJyYXkoNSk7CiAgICAgIGZvciAobGV0IG4gPSAwOyBuIDwgZnJvbUJvdW5kaW5nU3BoZXJlUG9zaXRpb25zU2NyYXRjaC5sZW5ndGg7ICsrbikgewogICAgICAgIGZyb21Cb3VuZGluZ1NwaGVyZVBvc2l0aW9uc1NjcmF0Y2hbbl0gPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIH0KICAgICAgUmVjdGFuZ2xlLmZyb21Cb3VuZGluZ1NwaGVyZSA9IGZ1bmN0aW9uKGJvdW5kaW5nU3BoZXJlLCBlbGxpcHNvaWQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiYm91bmRpbmdTcGhlcmUiLCBib3VuZGluZ1NwaGVyZSk7CiAgICAgICAgY29uc3QgY2VudGVyID0gYm91bmRpbmdTcGhlcmUuY2VudGVyOwogICAgICAgIGNvbnN0IHJhZGl1cyA9IGJvdW5kaW5nU3BoZXJlLnJhZGl1czsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChlbGxpcHNvaWQpKSB7CiAgICAgICAgICBlbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC5kZWZhdWx0OwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgUmVjdGFuZ2xlKCk7CiAgICAgICAgfQogICAgICAgIGlmIChDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzKGNlbnRlciwgQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8pKSB7CiAgICAgICAgICBSZWN0YW5nbGUuY2xvbmUoUmVjdGFuZ2xlLk1BWF9WQUxVRSwgcmVzdWx0KTsKICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGZyb21FTlUgPSBUcmFuc2Zvcm1zX2RlZmF1bHQuZWFzdE5vcnRoVXBUb0ZpeGVkRnJhbWUoCiAgICAgICAgICBjZW50ZXIsCiAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICBmcm9tQm91bmRpbmdTcGhlcmVNYXRyaXhTY3JhdGNoCiAgICAgICAgKTsKICAgICAgICBjb25zdCBlYXN0ID0gTWF0cml4NF9kZWZhdWx0Lm11bHRpcGx5QnlQb2ludEFzVmVjdG9yKAogICAgICAgICAgZnJvbUVOVSwKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5VTklUX1gsCiAgICAgICAgICBmcm9tQm91bmRpbmdTcGhlcmVFYXN0U2NyYXRjaAogICAgICAgICk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShlYXN0LCBlYXN0KTsKICAgICAgICBjb25zdCBub3J0aCA9IE1hdHJpeDRfZGVmYXVsdC5tdWx0aXBseUJ5UG9pbnRBc1ZlY3RvcigKICAgICAgICAgIGZyb21FTlUsCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuVU5JVF9ZLAogICAgICAgICAgZnJvbUJvdW5kaW5nU3BoZXJlTm9ydGhTY3JhdGNoCiAgICAgICAgKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKG5vcnRoLCBub3J0aCk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIobm9ydGgsIHJhZGl1cywgbm9ydGgpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKGVhc3QsIHJhZGl1cywgZWFzdCk7CiAgICAgICAgY29uc3Qgc291dGggPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubmVnYXRlKG5vcnRoLCBmcm9tQm91bmRpbmdTcGhlcmVTb3V0aFNjcmF0Y2gpOwogICAgICAgIGNvbnN0IHdlc3QgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubmVnYXRlKGVhc3QsIGZyb21Cb3VuZGluZ1NwaGVyZVdlc3RTY3JhdGNoKTsKICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSBmcm9tQm91bmRpbmdTcGhlcmVQb3NpdGlvbnNTY3JhdGNoOwogICAgICAgIGxldCBjb3JuZXIgPSBwb3NpdGlvbnNbMF07CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChjZW50ZXIsIG5vcnRoLCBjb3JuZXIpOwogICAgICAgIGNvcm5lciA9IHBvc2l0aW9uc1sxXTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKGNlbnRlciwgd2VzdCwgY29ybmVyKTsKICAgICAgICBjb3JuZXIgPSBwb3NpdGlvbnNbMl07CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChjZW50ZXIsIHNvdXRoLCBjb3JuZXIpOwogICAgICAgIGNvcm5lciA9IHBvc2l0aW9uc1szXTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKGNlbnRlciwgZWFzdCwgY29ybmVyKTsKICAgICAgICBwb3NpdGlvbnNbNF0gPSBjZW50ZXI7CiAgICAgICAgcmV0dXJuIFJlY3RhbmdsZS5mcm9tQ2FydGVzaWFuQXJyYXkocG9zaXRpb25zLCBlbGxpcHNvaWQsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIFJlY3RhbmdsZS5jbG9uZSA9IGZ1bmN0aW9uKHJlY3RhbmdsZSwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVjdGFuZ2xlKSkgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBSZWN0YW5nbGUoCiAgICAgICAgICAgIHJlY3RhbmdsZS53ZXN0LAogICAgICAgICAgICByZWN0YW5nbGUuc291dGgsCiAgICAgICAgICAgIHJlY3RhbmdsZS5lYXN0LAogICAgICAgICAgICByZWN0YW5nbGUubm9ydGgKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC53ZXN0ID0gcmVjdGFuZ2xlLndlc3Q7CiAgICAgICAgcmVzdWx0LnNvdXRoID0gcmVjdGFuZ2xlLnNvdXRoOwogICAgICAgIHJlc3VsdC5lYXN0ID0gcmVjdGFuZ2xlLmVhc3Q7CiAgICAgICAgcmVzdWx0Lm5vcnRoID0gcmVjdGFuZ2xlLm5vcnRoOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFJlY3RhbmdsZS5lcXVhbHNFcHNpbG9uID0gZnVuY3Rpb24obGVmdCwgcmlnaHQsIGFic29sdXRlRXBzaWxvbikgewogICAgICAgIGFic29sdXRlRXBzaWxvbiA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGFic29sdXRlRXBzaWxvbiwgMCk7CiAgICAgICAgcmV0dXJuIGxlZnQgPT09IHJpZ2h0IHx8IGRlZmluZWRfZGVmYXVsdChsZWZ0KSAmJiBkZWZpbmVkX2RlZmF1bHQocmlnaHQpICYmIE1hdGguYWJzKGxlZnQud2VzdCAtIHJpZ2h0Lndlc3QpIDw9IGFic29sdXRlRXBzaWxvbiAmJiBNYXRoLmFicyhsZWZ0LnNvdXRoIC0gcmlnaHQuc291dGgpIDw9IGFic29sdXRlRXBzaWxvbiAmJiBNYXRoLmFicyhsZWZ0LmVhc3QgLSByaWdodC5lYXN0KSA8PSBhYnNvbHV0ZUVwc2lsb24gJiYgTWF0aC5hYnMobGVmdC5ub3J0aCAtIHJpZ2h0Lm5vcnRoKSA8PSBhYnNvbHV0ZUVwc2lsb247CiAgICAgIH07CiAgICAgIFJlY3RhbmdsZS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbihyZXN1bHQpIHsKICAgICAgICByZXR1cm4gUmVjdGFuZ2xlLmNsb25lKHRoaXMsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIFJlY3RhbmdsZS5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24ob3RoZXIpIHsKICAgICAgICByZXR1cm4gUmVjdGFuZ2xlLmVxdWFscyh0aGlzLCBvdGhlcik7CiAgICAgIH07CiAgICAgIFJlY3RhbmdsZS5lcXVhbHMgPSBmdW5jdGlvbihsZWZ0LCByaWdodCkgewogICAgICAgIHJldHVybiBsZWZ0ID09PSByaWdodCB8fCBkZWZpbmVkX2RlZmF1bHQobGVmdCkgJiYgZGVmaW5lZF9kZWZhdWx0KHJpZ2h0KSAmJiBsZWZ0Lndlc3QgPT09IHJpZ2h0Lndlc3QgJiYgbGVmdC5zb3V0aCA9PT0gcmlnaHQuc291dGggJiYgbGVmdC5lYXN0ID09PSByaWdodC5lYXN0ICYmIGxlZnQubm9ydGggPT09IHJpZ2h0Lm5vcnRoOwogICAgICB9OwogICAgICBSZWN0YW5nbGUucHJvdG90eXBlLmVxdWFsc0Vwc2lsb24gPSBmdW5jdGlvbihvdGhlciwgZXBzaWxvbikgewogICAgICAgIHJldHVybiBSZWN0YW5nbGUuZXF1YWxzRXBzaWxvbih0aGlzLCBvdGhlciwgZXBzaWxvbik7CiAgICAgIH07CiAgICAgIFJlY3RhbmdsZS5fdmFsaWRhdGUgPSBmdW5jdGlvbihyZWN0YW5nbGUpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlY3RhbmdsZSIsIHJlY3RhbmdsZSk7CiAgICAgICAgY29uc3Qgbm9ydGggPSByZWN0YW5nbGUubm9ydGg7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuT3JFcXVhbHMoCiAgICAgICAgICAibm9ydGgiLAogICAgICAgICAgbm9ydGgsCiAgICAgICAgICAtTWF0aF9kZWZhdWx0LlBJX09WRVJfVFdPCiAgICAgICAgKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIubGVzc1RoYW5PckVxdWFscygibm9ydGgiLCBub3J0aCwgTWF0aF9kZWZhdWx0LlBJX09WRVJfVFdPKTsKICAgICAgICBjb25zdCBzb3V0aCA9IHJlY3RhbmdsZS5zb3V0aDsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygKICAgICAgICAgICJzb3V0aCIsCiAgICAgICAgICBzb3V0aCwKICAgICAgICAgIC1NYXRoX2RlZmF1bHQuUElfT1ZFUl9UV08KICAgICAgICApOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5sZXNzVGhhbk9yRXF1YWxzKCJzb3V0aCIsIHNvdXRoLCBNYXRoX2RlZmF1bHQuUElfT1ZFUl9UV08pOwogICAgICAgIGNvbnN0IHdlc3QgPSByZWN0YW5nbGUud2VzdDsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygid2VzdCIsIHdlc3QsIC1NYXRoLlBJKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIubGVzc1RoYW5PckVxdWFscygid2VzdCIsIHdlc3QsIE1hdGguUEkpOwogICAgICAgIGNvbnN0IGVhc3QgPSByZWN0YW5nbGUuZWFzdDsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygiZWFzdCIsIGVhc3QsIC1NYXRoLlBJKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIubGVzc1RoYW5PckVxdWFscygiZWFzdCIsIGVhc3QsIE1hdGguUEkpOwogICAgICB9OwogICAgICBSZWN0YW5nbGUuc291dGh3ZXN0ID0gZnVuY3Rpb24ocmVjdGFuZ2xlLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlY3RhbmdsZSIsIHJlY3RhbmdsZSk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdChyZWN0YW5nbGUud2VzdCwgcmVjdGFuZ2xlLnNvdXRoKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LmxvbmdpdHVkZSA9IHJlY3RhbmdsZS53ZXN0OwogICAgICAgIHJlc3VsdC5sYXRpdHVkZSA9IHJlY3RhbmdsZS5zb3V0aDsKICAgICAgICByZXN1bHQuaGVpZ2h0ID0gMDsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBSZWN0YW5nbGUubm9ydGh3ZXN0ID0gZnVuY3Rpb24ocmVjdGFuZ2xlLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlY3RhbmdsZSIsIHJlY3RhbmdsZSk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdChyZWN0YW5nbGUud2VzdCwgcmVjdGFuZ2xlLm5vcnRoKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LmxvbmdpdHVkZSA9IHJlY3RhbmdsZS53ZXN0OwogICAgICAgIHJlc3VsdC5sYXRpdHVkZSA9IHJlY3RhbmdsZS5ub3J0aDsKICAgICAgICByZXN1bHQuaGVpZ2h0ID0gMDsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBSZWN0YW5nbGUubm9ydGhlYXN0ID0gZnVuY3Rpb24ocmVjdGFuZ2xlLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlY3RhbmdsZSIsIHJlY3RhbmdsZSk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdChyZWN0YW5nbGUuZWFzdCwgcmVjdGFuZ2xlLm5vcnRoKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LmxvbmdpdHVkZSA9IHJlY3RhbmdsZS5lYXN0OwogICAgICAgIHJlc3VsdC5sYXRpdHVkZSA9IHJlY3RhbmdsZS5ub3J0aDsKICAgICAgICByZXN1bHQuaGVpZ2h0ID0gMDsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBSZWN0YW5nbGUuc291dGhlYXN0ID0gZnVuY3Rpb24ocmVjdGFuZ2xlLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlY3RhbmdsZSIsIHJlY3RhbmdsZSk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdChyZWN0YW5nbGUuZWFzdCwgcmVjdGFuZ2xlLnNvdXRoKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LmxvbmdpdHVkZSA9IHJlY3RhbmdsZS5lYXN0OwogICAgICAgIHJlc3VsdC5sYXRpdHVkZSA9IHJlY3RhbmdsZS5zb3V0aDsKICAgICAgICByZXN1bHQuaGVpZ2h0ID0gMDsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBSZWN0YW5nbGUuY2VudGVyID0gZnVuY3Rpb24ocmVjdGFuZ2xlLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlY3RhbmdsZSIsIHJlY3RhbmdsZSk7CiAgICAgICAgbGV0IGVhc3QgPSByZWN0YW5nbGUuZWFzdDsKICAgICAgICBjb25zdCB3ZXN0ID0gcmVjdGFuZ2xlLndlc3Q7CiAgICAgICAgaWYgKGVhc3QgPCB3ZXN0KSB7CiAgICAgICAgICBlYXN0ICs9IE1hdGhfZGVmYXVsdC5UV09fUEk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGxvbmdpdHVkZSA9IE1hdGhfZGVmYXVsdC5uZWdhdGl2ZVBpVG9QaSgod2VzdCArIGVhc3QpICogMC41KTsKICAgICAgICBjb25zdCBsYXRpdHVkZSA9IChyZWN0YW5nbGUuc291dGggKyByZWN0YW5nbGUubm9ydGgpICogMC41OwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQobG9uZ2l0dWRlLCBsYXRpdHVkZSk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5sb25naXR1ZGUgPSBsb25naXR1ZGU7CiAgICAgICAgcmVzdWx0LmxhdGl0dWRlID0gbGF0aXR1ZGU7CiAgICAgICAgcmVzdWx0LmhlaWdodCA9IDA7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgUmVjdGFuZ2xlLmludGVyc2VjdGlvbiA9IGZ1bmN0aW9uKHJlY3RhbmdsZSwgb3RoZXJSZWN0YW5nbGUsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVjdGFuZ2xlIiwgcmVjdGFuZ2xlKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm90aGVyUmVjdGFuZ2xlIiwgb3RoZXJSZWN0YW5nbGUpOwogICAgICAgIGxldCByZWN0YW5nbGVFYXN0ID0gcmVjdGFuZ2xlLmVhc3Q7CiAgICAgICAgbGV0IHJlY3RhbmdsZVdlc3QgPSByZWN0YW5nbGUud2VzdDsKICAgICAgICBsZXQgb3RoZXJSZWN0YW5nbGVFYXN0ID0gb3RoZXJSZWN0YW5nbGUuZWFzdDsKICAgICAgICBsZXQgb3RoZXJSZWN0YW5nbGVXZXN0ID0gb3RoZXJSZWN0YW5nbGUud2VzdDsKICAgICAgICBpZiAocmVjdGFuZ2xlRWFzdCA8IHJlY3RhbmdsZVdlc3QgJiYgb3RoZXJSZWN0YW5nbGVFYXN0ID4gMCkgewogICAgICAgICAgcmVjdGFuZ2xlRWFzdCArPSBNYXRoX2RlZmF1bHQuVFdPX1BJOwogICAgICAgIH0gZWxzZSBpZiAob3RoZXJSZWN0YW5nbGVFYXN0IDwgb3RoZXJSZWN0YW5nbGVXZXN0ICYmIHJlY3RhbmdsZUVhc3QgPiAwKSB7CiAgICAgICAgICBvdGhlclJlY3RhbmdsZUVhc3QgKz0gTWF0aF9kZWZhdWx0LlRXT19QSTsKICAgICAgICB9CiAgICAgICAgaWYgKHJlY3RhbmdsZUVhc3QgPCByZWN0YW5nbGVXZXN0ICYmIG90aGVyUmVjdGFuZ2xlV2VzdCA8IDApIHsKICAgICAgICAgIG90aGVyUmVjdGFuZ2xlV2VzdCArPSBNYXRoX2RlZmF1bHQuVFdPX1BJOwogICAgICAgIH0gZWxzZSBpZiAob3RoZXJSZWN0YW5nbGVFYXN0IDwgb3RoZXJSZWN0YW5nbGVXZXN0ICYmIHJlY3RhbmdsZVdlc3QgPCAwKSB7CiAgICAgICAgICByZWN0YW5nbGVXZXN0ICs9IE1hdGhfZGVmYXVsdC5UV09fUEk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHdlc3QgPSBNYXRoX2RlZmF1bHQubmVnYXRpdmVQaVRvUGkoCiAgICAgICAgICBNYXRoLm1heChyZWN0YW5nbGVXZXN0LCBvdGhlclJlY3RhbmdsZVdlc3QpCiAgICAgICAgKTsKICAgICAgICBjb25zdCBlYXN0ID0gTWF0aF9kZWZhdWx0Lm5lZ2F0aXZlUGlUb1BpKAogICAgICAgICAgTWF0aC5taW4ocmVjdGFuZ2xlRWFzdCwgb3RoZXJSZWN0YW5nbGVFYXN0KQogICAgICAgICk7CiAgICAgICAgaWYgKChyZWN0YW5nbGUud2VzdCA8IHJlY3RhbmdsZS5lYXN0IHx8IG90aGVyUmVjdGFuZ2xlLndlc3QgPCBvdGhlclJlY3RhbmdsZS5lYXN0KSAmJiBlYXN0IDw9IHdlc3QpIHsKICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHNvdXRoID0gTWF0aC5tYXgocmVjdGFuZ2xlLnNvdXRoLCBvdGhlclJlY3RhbmdsZS5zb3V0aCk7CiAgICAgICAgY29uc3Qgbm9ydGggPSBNYXRoLm1pbihyZWN0YW5nbGUubm9ydGgsIG90aGVyUmVjdGFuZ2xlLm5vcnRoKTsKICAgICAgICBpZiAoc291dGggPj0gbm9ydGgpIHsKICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgUmVjdGFuZ2xlKHdlc3QsIHNvdXRoLCBlYXN0LCBub3J0aCk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC53ZXN0ID0gd2VzdDsKICAgICAgICByZXN1bHQuc291dGggPSBzb3V0aDsKICAgICAgICByZXN1bHQuZWFzdCA9IGVhc3Q7CiAgICAgICAgcmVzdWx0Lm5vcnRoID0gbm9ydGg7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgUmVjdGFuZ2xlLnNpbXBsZUludGVyc2VjdGlvbiA9IGZ1bmN0aW9uKHJlY3RhbmdsZSwgb3RoZXJSZWN0YW5nbGUsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVjdGFuZ2xlIiwgcmVjdGFuZ2xlKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm90aGVyUmVjdGFuZ2xlIiwgb3RoZXJSZWN0YW5nbGUpOwogICAgICAgIGNvbnN0IHdlc3QgPSBNYXRoLm1heChyZWN0YW5nbGUud2VzdCwgb3RoZXJSZWN0YW5nbGUud2VzdCk7CiAgICAgICAgY29uc3Qgc291dGggPSBNYXRoLm1heChyZWN0YW5nbGUuc291dGgsIG90aGVyUmVjdGFuZ2xlLnNvdXRoKTsKICAgICAgICBjb25zdCBlYXN0ID0gTWF0aC5taW4ocmVjdGFuZ2xlLmVhc3QsIG90aGVyUmVjdGFuZ2xlLmVhc3QpOwogICAgICAgIGNvbnN0IG5vcnRoID0gTWF0aC5taW4ocmVjdGFuZ2xlLm5vcnRoLCBvdGhlclJlY3RhbmdsZS5ub3J0aCk7CiAgICAgICAgaWYgKHNvdXRoID49IG5vcnRoIHx8IHdlc3QgPj0gZWFzdCkgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBSZWN0YW5nbGUod2VzdCwgc291dGgsIGVhc3QsIG5vcnRoKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0Lndlc3QgPSB3ZXN0OwogICAgICAgIHJlc3VsdC5zb3V0aCA9IHNvdXRoOwogICAgICAgIHJlc3VsdC5lYXN0ID0gZWFzdDsKICAgICAgICByZXN1bHQubm9ydGggPSBub3J0aDsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBSZWN0YW5nbGUudW5pb24gPSBmdW5jdGlvbihyZWN0YW5nbGUsIG90aGVyUmVjdGFuZ2xlLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlY3RhbmdsZSIsIHJlY3RhbmdsZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJvdGhlclJlY3RhbmdsZSIsIG90aGVyUmVjdGFuZ2xlKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgUmVjdGFuZ2xlKCk7CiAgICAgICAgfQogICAgICAgIGxldCByZWN0YW5nbGVFYXN0ID0gcmVjdGFuZ2xlLmVhc3Q7CiAgICAgICAgbGV0IHJlY3RhbmdsZVdlc3QgPSByZWN0YW5nbGUud2VzdDsKICAgICAgICBsZXQgb3RoZXJSZWN0YW5nbGVFYXN0ID0gb3RoZXJSZWN0YW5nbGUuZWFzdDsKICAgICAgICBsZXQgb3RoZXJSZWN0YW5nbGVXZXN0ID0gb3RoZXJSZWN0YW5nbGUud2VzdDsKICAgICAgICBpZiAocmVjdGFuZ2xlRWFzdCA8IHJlY3RhbmdsZVdlc3QgJiYgb3RoZXJSZWN0YW5nbGVFYXN0ID4gMCkgewogICAgICAgICAgcmVjdGFuZ2xlRWFzdCArPSBNYXRoX2RlZmF1bHQuVFdPX1BJOwogICAgICAgIH0gZWxzZSBpZiAob3RoZXJSZWN0YW5nbGVFYXN0IDwgb3RoZXJSZWN0YW5nbGVXZXN0ICYmIHJlY3RhbmdsZUVhc3QgPiAwKSB7CiAgICAgICAgICBvdGhlclJlY3RhbmdsZUVhc3QgKz0gTWF0aF9kZWZhdWx0LlRXT19QSTsKICAgICAgICB9CiAgICAgICAgaWYgKHJlY3RhbmdsZUVhc3QgPCByZWN0YW5nbGVXZXN0ICYmIG90aGVyUmVjdGFuZ2xlV2VzdCA8IDApIHsKICAgICAgICAgIG90aGVyUmVjdGFuZ2xlV2VzdCArPSBNYXRoX2RlZmF1bHQuVFdPX1BJOwogICAgICAgIH0gZWxzZSBpZiAob3RoZXJSZWN0YW5nbGVFYXN0IDwgb3RoZXJSZWN0YW5nbGVXZXN0ICYmIHJlY3RhbmdsZVdlc3QgPCAwKSB7CiAgICAgICAgICByZWN0YW5nbGVXZXN0ICs9IE1hdGhfZGVmYXVsdC5UV09fUEk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHdlc3QgPSBNYXRoX2RlZmF1bHQubmVnYXRpdmVQaVRvUGkoCiAgICAgICAgICBNYXRoLm1pbihyZWN0YW5nbGVXZXN0LCBvdGhlclJlY3RhbmdsZVdlc3QpCiAgICAgICAgKTsKICAgICAgICBjb25zdCBlYXN0ID0gTWF0aF9kZWZhdWx0Lm5lZ2F0aXZlUGlUb1BpKAogICAgICAgICAgTWF0aC5tYXgocmVjdGFuZ2xlRWFzdCwgb3RoZXJSZWN0YW5nbGVFYXN0KQogICAgICAgICk7CiAgICAgICAgcmVzdWx0Lndlc3QgPSB3ZXN0OwogICAgICAgIHJlc3VsdC5zb3V0aCA9IE1hdGgubWluKHJlY3RhbmdsZS5zb3V0aCwgb3RoZXJSZWN0YW5nbGUuc291dGgpOwogICAgICAgIHJlc3VsdC5lYXN0ID0gZWFzdDsKICAgICAgICByZXN1bHQubm9ydGggPSBNYXRoLm1heChyZWN0YW5nbGUubm9ydGgsIG90aGVyUmVjdGFuZ2xlLm5vcnRoKTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBSZWN0YW5nbGUuZXhwYW5kID0gZnVuY3Rpb24ocmVjdGFuZ2xlLCBjYXJ0b2dyYXBoaWMyLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlY3RhbmdsZSIsIHJlY3RhbmdsZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjYXJ0b2dyYXBoaWMiLCBjYXJ0b2dyYXBoaWMyKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgUmVjdGFuZ2xlKCk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC53ZXN0ID0gTWF0aC5taW4ocmVjdGFuZ2xlLndlc3QsIGNhcnRvZ3JhcGhpYzIubG9uZ2l0dWRlKTsKICAgICAgICByZXN1bHQuc291dGggPSBNYXRoLm1pbihyZWN0YW5nbGUuc291dGgsIGNhcnRvZ3JhcGhpYzIubGF0aXR1ZGUpOwogICAgICAgIHJlc3VsdC5lYXN0ID0gTWF0aC5tYXgocmVjdGFuZ2xlLmVhc3QsIGNhcnRvZ3JhcGhpYzIubG9uZ2l0dWRlKTsKICAgICAgICByZXN1bHQubm9ydGggPSBNYXRoLm1heChyZWN0YW5nbGUubm9ydGgsIGNhcnRvZ3JhcGhpYzIubGF0aXR1ZGUpOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFJlY3RhbmdsZS5jb250YWlucyA9IGZ1bmN0aW9uKHJlY3RhbmdsZSwgY2FydG9ncmFwaGljMikgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVjdGFuZ2xlIiwgcmVjdGFuZ2xlKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImNhcnRvZ3JhcGhpYyIsIGNhcnRvZ3JhcGhpYzIpOwogICAgICAgIGxldCBsb25naXR1ZGUgPSBjYXJ0b2dyYXBoaWMyLmxvbmdpdHVkZTsKICAgICAgICBjb25zdCBsYXRpdHVkZSA9IGNhcnRvZ3JhcGhpYzIubGF0aXR1ZGU7CiAgICAgICAgY29uc3Qgd2VzdCA9IHJlY3RhbmdsZS53ZXN0OwogICAgICAgIGxldCBlYXN0ID0gcmVjdGFuZ2xlLmVhc3Q7CiAgICAgICAgaWYgKGVhc3QgPCB3ZXN0KSB7CiAgICAgICAgICBlYXN0ICs9IE1hdGhfZGVmYXVsdC5UV09fUEk7CiAgICAgICAgICBpZiAobG9uZ2l0dWRlIDwgMCkgewogICAgICAgICAgICBsb25naXR1ZGUgKz0gTWF0aF9kZWZhdWx0LlRXT19QSTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIChsb25naXR1ZGUgPiB3ZXN0IHx8IE1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKGxvbmdpdHVkZSwgd2VzdCwgTWF0aF9kZWZhdWx0LkVQU0lMT04xNCkpICYmIChsb25naXR1ZGUgPCBlYXN0IHx8IE1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKGxvbmdpdHVkZSwgZWFzdCwgTWF0aF9kZWZhdWx0LkVQU0lMT04xNCkpICYmIGxhdGl0dWRlID49IHJlY3RhbmdsZS5zb3V0aCAmJiBsYXRpdHVkZSA8PSByZWN0YW5nbGUubm9ydGg7CiAgICAgIH07CiAgICAgIHN1YnNhbXBsZUxsYVNjcmF0Y2ggPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgUmVjdGFuZ2xlLnN1YnNhbXBsZSA9IGZ1bmN0aW9uKHJlY3RhbmdsZSwgZWxsaXBzb2lkLCBzdXJmYWNlSGVpZ2h0LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlY3RhbmdsZSIsIHJlY3RhbmdsZSk7CiAgICAgICAgZWxsaXBzb2lkID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoZWxsaXBzb2lkLCBFbGxpcHNvaWRfZGVmYXVsdC5kZWZhdWx0KTsKICAgICAgICBzdXJmYWNlSGVpZ2h0ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3VyZmFjZUhlaWdodCwgMCk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gW107CiAgICAgICAgfQogICAgICAgIGxldCBsZW5ndGggPSAwOwogICAgICAgIGNvbnN0IG5vcnRoID0gcmVjdGFuZ2xlLm5vcnRoOwogICAgICAgIGNvbnN0IHNvdXRoID0gcmVjdGFuZ2xlLnNvdXRoOwogICAgICAgIGNvbnN0IGVhc3QgPSByZWN0YW5nbGUuZWFzdDsKICAgICAgICBjb25zdCB3ZXN0ID0gcmVjdGFuZ2xlLndlc3Q7CiAgICAgICAgY29uc3QgbGxhID0gc3Vic2FtcGxlTGxhU2NyYXRjaDsKICAgICAgICBsbGEuaGVpZ2h0ID0gc3VyZmFjZUhlaWdodDsKICAgICAgICBsbGEubG9uZ2l0dWRlID0gd2VzdDsKICAgICAgICBsbGEubGF0aXR1ZGUgPSBub3J0aDsKICAgICAgICByZXN1bHRbbGVuZ3RoXSA9IGVsbGlwc29pZC5jYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbihsbGEsIHJlc3VsdFtsZW5ndGhdKTsKICAgICAgICBsZW5ndGgrKzsKICAgICAgICBsbGEubG9uZ2l0dWRlID0gZWFzdDsKICAgICAgICByZXN1bHRbbGVuZ3RoXSA9IGVsbGlwc29pZC5jYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbihsbGEsIHJlc3VsdFtsZW5ndGhdKTsKICAgICAgICBsZW5ndGgrKzsKICAgICAgICBsbGEubGF0aXR1ZGUgPSBzb3V0aDsKICAgICAgICByZXN1bHRbbGVuZ3RoXSA9IGVsbGlwc29pZC5jYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbihsbGEsIHJlc3VsdFtsZW5ndGhdKTsKICAgICAgICBsZW5ndGgrKzsKICAgICAgICBsbGEubG9uZ2l0dWRlID0gd2VzdDsKICAgICAgICByZXN1bHRbbGVuZ3RoXSA9IGVsbGlwc29pZC5jYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbihsbGEsIHJlc3VsdFtsZW5ndGhdKTsKICAgICAgICBsZW5ndGgrKzsKICAgICAgICBpZiAobm9ydGggPCAwKSB7CiAgICAgICAgICBsbGEubGF0aXR1ZGUgPSBub3J0aDsKICAgICAgICB9IGVsc2UgaWYgKHNvdXRoID4gMCkgewogICAgICAgICAgbGxhLmxhdGl0dWRlID0gc291dGg7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGxsYS5sYXRpdHVkZSA9IDA7CiAgICAgICAgfQogICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgODsgKytpKSB7CiAgICAgICAgICBsbGEubG9uZ2l0dWRlID0gLU1hdGguUEkgKyBpICogTWF0aF9kZWZhdWx0LlBJX09WRVJfVFdPOwogICAgICAgICAgaWYgKFJlY3RhbmdsZS5jb250YWlucyhyZWN0YW5nbGUsIGxsYSkpIHsKICAgICAgICAgICAgcmVzdWx0W2xlbmd0aF0gPSBlbGxpcHNvaWQuY2FydG9ncmFwaGljVG9DYXJ0ZXNpYW4obGxhLCByZXN1bHRbbGVuZ3RoXSk7CiAgICAgICAgICAgIGxlbmd0aCsrOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAobGxhLmxhdGl0dWRlID09PSAwKSB7CiAgICAgICAgICBsbGEubG9uZ2l0dWRlID0gd2VzdDsKICAgICAgICAgIHJlc3VsdFtsZW5ndGhdID0gZWxsaXBzb2lkLmNhcnRvZ3JhcGhpY1RvQ2FydGVzaWFuKGxsYSwgcmVzdWx0W2xlbmd0aF0pOwogICAgICAgICAgbGVuZ3RoKys7CiAgICAgICAgICBsbGEubG9uZ2l0dWRlID0gZWFzdDsKICAgICAgICAgIHJlc3VsdFtsZW5ndGhdID0gZWxsaXBzb2lkLmNhcnRvZ3JhcGhpY1RvQ2FydGVzaWFuKGxsYSwgcmVzdWx0W2xlbmd0aF0pOwogICAgICAgICAgbGVuZ3RoKys7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5sZW5ndGggPSBsZW5ndGg7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgUmVjdGFuZ2xlLnN1YnNlY3Rpb24gPSBmdW5jdGlvbihyZWN0YW5nbGUsIHdlc3RMZXJwLCBzb3V0aExlcnAsIGVhc3RMZXJwLCBub3J0aExlcnAsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVjdGFuZ2xlIiwgcmVjdGFuZ2xlKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygid2VzdExlcnAiLCB3ZXN0TGVycCwgMCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmxlc3NUaGFuT3JFcXVhbHMoIndlc3RMZXJwIiwgd2VzdExlcnAsIDEpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbk9yRXF1YWxzKCJzb3V0aExlcnAiLCBzb3V0aExlcnAsIDApOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5sZXNzVGhhbk9yRXF1YWxzKCJzb3V0aExlcnAiLCBzb3V0aExlcnAsIDEpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbk9yRXF1YWxzKCJlYXN0TGVycCIsIGVhc3RMZXJwLCAwKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIubGVzc1RoYW5PckVxdWFscygiZWFzdExlcnAiLCBlYXN0TGVycCwgMSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuT3JFcXVhbHMoIm5vcnRoTGVycCIsIG5vcnRoTGVycCwgMCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmxlc3NUaGFuT3JFcXVhbHMoIm5vcnRoTGVycCIsIG5vcnRoTGVycCwgMSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmxlc3NUaGFuT3JFcXVhbHMoIndlc3RMZXJwIiwgd2VzdExlcnAsIGVhc3RMZXJwKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIubGVzc1RoYW5PckVxdWFscygic291dGhMZXJwIiwgc291dGhMZXJwLCBub3J0aExlcnApOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBSZWN0YW5nbGUoKTsKICAgICAgICB9CiAgICAgICAgaWYgKHJlY3RhbmdsZS53ZXN0IDw9IHJlY3RhbmdsZS5lYXN0KSB7CiAgICAgICAgICBjb25zdCB3aWR0aCA9IHJlY3RhbmdsZS5lYXN0IC0gcmVjdGFuZ2xlLndlc3Q7CiAgICAgICAgICByZXN1bHQud2VzdCA9IHJlY3RhbmdsZS53ZXN0ICsgd2VzdExlcnAgKiB3aWR0aDsKICAgICAgICAgIHJlc3VsdC5lYXN0ID0gcmVjdGFuZ2xlLndlc3QgKyBlYXN0TGVycCAqIHdpZHRoOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjb25zdCB3aWR0aCA9IE1hdGhfZGVmYXVsdC5UV09fUEkgKyByZWN0YW5nbGUuZWFzdCAtIHJlY3RhbmdsZS53ZXN0OwogICAgICAgICAgcmVzdWx0Lndlc3QgPSBNYXRoX2RlZmF1bHQubmVnYXRpdmVQaVRvUGkocmVjdGFuZ2xlLndlc3QgKyB3ZXN0TGVycCAqIHdpZHRoKTsKICAgICAgICAgIHJlc3VsdC5lYXN0ID0gTWF0aF9kZWZhdWx0Lm5lZ2F0aXZlUGlUb1BpKHJlY3RhbmdsZS53ZXN0ICsgZWFzdExlcnAgKiB3aWR0aCk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGhlaWdodCA9IHJlY3RhbmdsZS5ub3J0aCAtIHJlY3RhbmdsZS5zb3V0aDsKICAgICAgICByZXN1bHQuc291dGggPSByZWN0YW5nbGUuc291dGggKyBzb3V0aExlcnAgKiBoZWlnaHQ7CiAgICAgICAgcmVzdWx0Lm5vcnRoID0gcmVjdGFuZ2xlLnNvdXRoICsgbm9ydGhMZXJwICogaGVpZ2h0OwogICAgICAgIGlmICh3ZXN0TGVycCA9PT0gMSkgewogICAgICAgICAgcmVzdWx0Lndlc3QgPSByZWN0YW5nbGUuZWFzdDsKICAgICAgICB9CiAgICAgICAgaWYgKGVhc3RMZXJwID09PSAxKSB7CiAgICAgICAgICByZXN1bHQuZWFzdCA9IHJlY3RhbmdsZS5lYXN0OwogICAgICAgIH0KICAgICAgICBpZiAoc291dGhMZXJwID09PSAxKSB7CiAgICAgICAgICByZXN1bHQuc291dGggPSByZWN0YW5nbGUubm9ydGg7CiAgICAgICAgfQogICAgICAgIGlmIChub3J0aExlcnAgPT09IDEpIHsKICAgICAgICAgIHJlc3VsdC5ub3J0aCA9IHJlY3RhbmdsZS5ub3J0aDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgUmVjdGFuZ2xlLk1BWF9WQUxVRSA9IE9iamVjdC5mcmVlemUoCiAgICAgICAgbmV3IFJlY3RhbmdsZSgKICAgICAgICAgIC1NYXRoLlBJLAogICAgICAgICAgLU1hdGhfZGVmYXVsdC5QSV9PVkVSX1RXTywKICAgICAgICAgIE1hdGguUEksCiAgICAgICAgICBNYXRoX2RlZmF1bHQuUElfT1ZFUl9UV08KICAgICAgICApCiAgICAgICk7CiAgICAgIFJlY3RhbmdsZV9kZWZhdWx0ID0gUmVjdGFuZ2xlOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvQm91bmRpbmdTcGhlcmUuanMKICBmdW5jdGlvbiBCb3VuZGluZ1NwaGVyZShjZW50ZXIsIHJhZGl1cykgewogICAgdGhpcy5jZW50ZXIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoZGVmYXVsdFZhbHVlX2RlZmF1bHQoY2VudGVyLCBDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTykpOwogICAgdGhpcy5yYWRpdXMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChyYWRpdXMsIDApOwogIH0KICB2YXIgZnJvbVBvaW50c1hNaW4sIGZyb21Qb2ludHNZTWluLCBmcm9tUG9pbnRzWk1pbiwgZnJvbVBvaW50c1hNYXgsIGZyb21Qb2ludHNZTWF4LCBmcm9tUG9pbnRzWk1heCwgZnJvbVBvaW50c0N1cnJlbnRQb3MsIGZyb21Qb2ludHNTY3JhdGNoLCBmcm9tUG9pbnRzUml0dGVyQ2VudGVyLCBmcm9tUG9pbnRzTWluQm94UHQsIGZyb21Qb2ludHNNYXhCb3hQdCwgZnJvbVBvaW50c05haXZlQ2VudGVyU2NyYXRjaCwgdm9sdW1lQ29uc3RhbnQsIGRlZmF1bHRQcm9qZWN0aW9uLCBmcm9tUmVjdGFuZ2xlMkRMb3dlckxlZnQsIGZyb21SZWN0YW5nbGUyRFVwcGVyUmlnaHQsIGZyb21SZWN0YW5nbGUyRFNvdXRod2VzdCwgZnJvbVJlY3RhbmdsZTJETm9ydGhlYXN0LCBmcm9tUmVjdGFuZ2xlM0RTY3JhdGNoLCBmcm9tQm91bmRpbmdTcGhlcmVzU2NyYXRjaCwgZnJvbU9yaWVudGVkQm91bmRpbmdCb3hTY3JhdGNoVSwgZnJvbU9yaWVudGVkQm91bmRpbmdCb3hTY3JhdGNoViwgZnJvbU9yaWVudGVkQm91bmRpbmdCb3hTY3JhdGNoVywgc2NyYXRjaEZyb21UcmFuc2Zvcm1hdGlvbkNlbnRlciwgc2NyYXRjaEZyb21UcmFuc2Zvcm1hdGlvblNjYWxlLCB1bmlvblNjcmF0Y2gsIHVuaW9uU2NyYXRjaENlbnRlciwgZXhwYW5kU2NyYXRjaCwgZGlzdGFuY2VTcXVhcmVkVG9TY3JhdGNoLCBzY3JhdGNoQ2FydGVzaWFuMywgcHJvamVjdFRvMkROb3JtYWxTY3JhdGNoLCBwcm9qZWN0VG8yREVhc3RTY3JhdGNoLCBwcm9qZWN0VG8yRE5vcnRoU2NyYXRjaCwgcHJvamVjdFRvMkRXZXN0U2NyYXRjaCwgcHJvamVjdFRvMkRTb3V0aFNjcmF0Y2gsIHByb2plY3RUbzJEQ2FydG9ncmFwaGljU2NyYXRjaCwgcHJvamVjdFRvMkRQb3NpdGlvbnNTY3JhdGNoLCBwcm9qZWN0VG8yRFByb2plY3Rpb24sIEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQ7CiAgdmFyIGluaXRfQm91bmRpbmdTcGhlcmUgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0JvdW5kaW5nU3BoZXJlLmpzIigpIHsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ2FydG9ncmFwaGljKCk7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkKCk7CiAgICAgIGluaXRfR2VvZ3JhcGhpY1Byb2plY3Rpb24oKTsKICAgICAgaW5pdF9JbnRlcnNlY3QoKTsKICAgICAgaW5pdF9JbnRlcnZhbCgpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgaW5pdF9NYXRyaXgzKCk7CiAgICAgIGluaXRfTWF0cml4NCgpOwogICAgICBpbml0X1JlY3RhbmdsZSgpOwogICAgICBmcm9tUG9pbnRzWE1pbiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgZnJvbVBvaW50c1lNaW4gPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGZyb21Qb2ludHNaTWluID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBmcm9tUG9pbnRzWE1heCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgZnJvbVBvaW50c1lNYXggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGZyb21Qb2ludHNaTWF4ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBmcm9tUG9pbnRzQ3VycmVudFBvcyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgZnJvbVBvaW50c1NjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGZyb21Qb2ludHNSaXR0ZXJDZW50ZXIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGZyb21Qb2ludHNNaW5Cb3hQdCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgZnJvbVBvaW50c01heEJveFB0ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBmcm9tUG9pbnRzTmFpdmVDZW50ZXJTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICB2b2x1bWVDb25zdGFudCA9IDQgLyAzICogTWF0aF9kZWZhdWx0LlBJOwogICAgICBCb3VuZGluZ1NwaGVyZS5mcm9tUG9pbnRzID0gZnVuY3Rpb24ocG9zaXRpb25zLCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQm91bmRpbmdTcGhlcmUoKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocG9zaXRpb25zKSB8fCBwb3NpdGlvbnMubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICByZXN1bHQuY2VudGVyID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKENhcnRlc2lhbjNfZGVmYXVsdC5aRVJPLCByZXN1bHQuY2VudGVyKTsKICAgICAgICAgIHJlc3VsdC5yYWRpdXMgPSAwOwogICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9CiAgICAgICAgY29uc3QgY3VycmVudFBvcyA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShwb3NpdGlvbnNbMF0sIGZyb21Qb2ludHNDdXJyZW50UG9zKTsKICAgICAgICBjb25zdCB4TWluID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGN1cnJlbnRQb3MsIGZyb21Qb2ludHNYTWluKTsKICAgICAgICBjb25zdCB5TWluID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGN1cnJlbnRQb3MsIGZyb21Qb2ludHNZTWluKTsKICAgICAgICBjb25zdCB6TWluID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGN1cnJlbnRQb3MsIGZyb21Qb2ludHNaTWluKTsKICAgICAgICBjb25zdCB4TWF4ID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGN1cnJlbnRQb3MsIGZyb21Qb2ludHNYTWF4KTsKICAgICAgICBjb25zdCB5TWF4ID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGN1cnJlbnRQb3MsIGZyb21Qb2ludHNZTWF4KTsKICAgICAgICBjb25zdCB6TWF4ID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGN1cnJlbnRQb3MsIGZyb21Qb2ludHNaTWF4KTsKICAgICAgICBjb25zdCBudW1Qb3NpdGlvbnMgPSBwb3NpdGlvbnMubGVuZ3RoOwogICAgICAgIGxldCBpOwogICAgICAgIGZvciAoaSA9IDE7IGkgPCBudW1Qb3NpdGlvbnM7IGkrKykgewogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKHBvc2l0aW9uc1tpXSwgY3VycmVudFBvcyk7CiAgICAgICAgICBjb25zdCB4ID0gY3VycmVudFBvcy54OwogICAgICAgICAgY29uc3QgeSA9IGN1cnJlbnRQb3MueTsKICAgICAgICAgIGNvbnN0IHogPSBjdXJyZW50UG9zLno7CiAgICAgICAgICBpZiAoeCA8IHhNaW4ueCkgewogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoY3VycmVudFBvcywgeE1pbik7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoeCA+IHhNYXgueCkgewogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoY3VycmVudFBvcywgeE1heCk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoeSA8IHlNaW4ueSkgewogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoY3VycmVudFBvcywgeU1pbik7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoeSA+IHlNYXgueSkgewogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoY3VycmVudFBvcywgeU1heCk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoeiA8IHpNaW4ueikgewogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoY3VycmVudFBvcywgek1pbik7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoeiA+IHpNYXgueikgewogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoY3VycmVudFBvcywgek1heCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNvbnN0IHhTcGFuID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZVNxdWFyZWQoCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoeE1heCwgeE1pbiwgZnJvbVBvaW50c1NjcmF0Y2gpCiAgICAgICAgKTsKICAgICAgICBjb25zdCB5U3BhbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5tYWduaXR1ZGVTcXVhcmVkKAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHlNYXgsIHlNaW4sIGZyb21Qb2ludHNTY3JhdGNoKQogICAgICAgICk7CiAgICAgICAgY29uc3QgelNwYW4gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlU3F1YXJlZCgKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdCh6TWF4LCB6TWluLCBmcm9tUG9pbnRzU2NyYXRjaCkKICAgICAgICApOwogICAgICAgIGxldCBkaWFtZXRlcjEgPSB4TWluOwogICAgICAgIGxldCBkaWFtZXRlcjIgPSB4TWF4OwogICAgICAgIGxldCBtYXhTcGFuID0geFNwYW47CiAgICAgICAgaWYgKHlTcGFuID4gbWF4U3BhbikgewogICAgICAgICAgbWF4U3BhbiA9IHlTcGFuOwogICAgICAgICAgZGlhbWV0ZXIxID0geU1pbjsKICAgICAgICAgIGRpYW1ldGVyMiA9IHlNYXg7CiAgICAgICAgfQogICAgICAgIGlmICh6U3BhbiA+IG1heFNwYW4pIHsKICAgICAgICAgIG1heFNwYW4gPSB6U3BhbjsKICAgICAgICAgIGRpYW1ldGVyMSA9IHpNaW47CiAgICAgICAgICBkaWFtZXRlcjIgPSB6TWF4OwogICAgICAgIH0KICAgICAgICBjb25zdCByaXR0ZXJDZW50ZXIgPSBmcm9tUG9pbnRzUml0dGVyQ2VudGVyOwogICAgICAgIHJpdHRlckNlbnRlci54ID0gKGRpYW1ldGVyMS54ICsgZGlhbWV0ZXIyLngpICogMC41OwogICAgICAgIHJpdHRlckNlbnRlci55ID0gKGRpYW1ldGVyMS55ICsgZGlhbWV0ZXIyLnkpICogMC41OwogICAgICAgIHJpdHRlckNlbnRlci56ID0gKGRpYW1ldGVyMS56ICsgZGlhbWV0ZXIyLnopICogMC41OwogICAgICAgIGxldCByYWRpdXNTcXVhcmVkID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZVNxdWFyZWQoCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoZGlhbWV0ZXIyLCByaXR0ZXJDZW50ZXIsIGZyb21Qb2ludHNTY3JhdGNoKQogICAgICAgICk7CiAgICAgICAgbGV0IHJpdHRlclJhZGl1cyA9IE1hdGguc3FydChyYWRpdXNTcXVhcmVkKTsKICAgICAgICBjb25zdCBtaW5Cb3hQdCA9IGZyb21Qb2ludHNNaW5Cb3hQdDsKICAgICAgICBtaW5Cb3hQdC54ID0geE1pbi54OwogICAgICAgIG1pbkJveFB0LnkgPSB5TWluLnk7CiAgICAgICAgbWluQm94UHQueiA9IHpNaW4uejsKICAgICAgICBjb25zdCBtYXhCb3hQdCA9IGZyb21Qb2ludHNNYXhCb3hQdDsKICAgICAgICBtYXhCb3hQdC54ID0geE1heC54OwogICAgICAgIG1heEJveFB0LnkgPSB5TWF4Lnk7CiAgICAgICAgbWF4Qm94UHQueiA9IHpNYXguejsKICAgICAgICBjb25zdCBuYWl2ZUNlbnRlciA9IENhcnRlc2lhbjNfZGVmYXVsdC5taWRwb2ludCgKICAgICAgICAgIG1pbkJveFB0LAogICAgICAgICAgbWF4Qm94UHQsCiAgICAgICAgICBmcm9tUG9pbnRzTmFpdmVDZW50ZXJTY3JhdGNoCiAgICAgICAgKTsKICAgICAgICBsZXQgbmFpdmVSYWRpdXMgPSAwOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1Qb3NpdGlvbnM7IGkrKykgewogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKHBvc2l0aW9uc1tpXSwgY3VycmVudFBvcyk7CiAgICAgICAgICBjb25zdCByID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZSgKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KGN1cnJlbnRQb3MsIG5haXZlQ2VudGVyLCBmcm9tUG9pbnRzU2NyYXRjaCkKICAgICAgICAgICk7CiAgICAgICAgICBpZiAociA+IG5haXZlUmFkaXVzKSB7CiAgICAgICAgICAgIG5haXZlUmFkaXVzID0gcjsKICAgICAgICAgIH0KICAgICAgICAgIGNvbnN0IG9sZENlbnRlclRvUG9pbnRTcXVhcmVkID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZVNxdWFyZWQoCiAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChjdXJyZW50UG9zLCByaXR0ZXJDZW50ZXIsIGZyb21Qb2ludHNTY3JhdGNoKQogICAgICAgICAgKTsKICAgICAgICAgIGlmIChvbGRDZW50ZXJUb1BvaW50U3F1YXJlZCA+IHJhZGl1c1NxdWFyZWQpIHsKICAgICAgICAgICAgY29uc3Qgb2xkQ2VudGVyVG9Qb2ludCA9IE1hdGguc3FydChvbGRDZW50ZXJUb1BvaW50U3F1YXJlZCk7CiAgICAgICAgICAgIHJpdHRlclJhZGl1cyA9IChyaXR0ZXJSYWRpdXMgKyBvbGRDZW50ZXJUb1BvaW50KSAqIDAuNTsKICAgICAgICAgICAgcmFkaXVzU3F1YXJlZCA9IHJpdHRlclJhZGl1cyAqIHJpdHRlclJhZGl1czsKICAgICAgICAgICAgY29uc3Qgb2xkVG9OZXcgPSBvbGRDZW50ZXJUb1BvaW50IC0gcml0dGVyUmFkaXVzOwogICAgICAgICAgICByaXR0ZXJDZW50ZXIueCA9IChyaXR0ZXJSYWRpdXMgKiByaXR0ZXJDZW50ZXIueCArIG9sZFRvTmV3ICogY3VycmVudFBvcy54KSAvIG9sZENlbnRlclRvUG9pbnQ7CiAgICAgICAgICAgIHJpdHRlckNlbnRlci55ID0gKHJpdHRlclJhZGl1cyAqIHJpdHRlckNlbnRlci55ICsgb2xkVG9OZXcgKiBjdXJyZW50UG9zLnkpIC8gb2xkQ2VudGVyVG9Qb2ludDsKICAgICAgICAgICAgcml0dGVyQ2VudGVyLnogPSAocml0dGVyUmFkaXVzICogcml0dGVyQ2VudGVyLnogKyBvbGRUb05ldyAqIGN1cnJlbnRQb3MueikgLyBvbGRDZW50ZXJUb1BvaW50OwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAocml0dGVyUmFkaXVzIDwgbmFpdmVSYWRpdXMpIHsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShyaXR0ZXJDZW50ZXIsIHJlc3VsdC5jZW50ZXIpOwogICAgICAgICAgcmVzdWx0LnJhZGl1cyA9IHJpdHRlclJhZGl1czsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKG5haXZlQ2VudGVyLCByZXN1bHQuY2VudGVyKTsKICAgICAgICAgIHJlc3VsdC5yYWRpdXMgPSBuYWl2ZVJhZGl1czsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgZGVmYXVsdFByb2plY3Rpb24gPSBuZXcgR2VvZ3JhcGhpY1Byb2plY3Rpb25fZGVmYXVsdCgpOwogICAgICBmcm9tUmVjdGFuZ2xlMkRMb3dlckxlZnQgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGZyb21SZWN0YW5nbGUyRFVwcGVyUmlnaHQgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGZyb21SZWN0YW5nbGUyRFNvdXRod2VzdCA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICBmcm9tUmVjdGFuZ2xlMkROb3J0aGVhc3QgPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgQm91bmRpbmdTcGhlcmUuZnJvbVJlY3RhbmdsZTJEID0gZnVuY3Rpb24ocmVjdGFuZ2xlLCBwcm9qZWN0aW9uLCByZXN1bHQpIHsKICAgICAgICByZXR1cm4gQm91bmRpbmdTcGhlcmUuZnJvbVJlY3RhbmdsZVdpdGhIZWlnaHRzMkQoCiAgICAgICAgICByZWN0YW5nbGUsCiAgICAgICAgICBwcm9qZWN0aW9uLAogICAgICAgICAgMCwKICAgICAgICAgIDAsCiAgICAgICAgICByZXN1bHQKICAgICAgICApOwogICAgICB9OwogICAgICBCb3VuZGluZ1NwaGVyZS5mcm9tUmVjdGFuZ2xlV2l0aEhlaWdodHMyRCA9IGZ1bmN0aW9uKHJlY3RhbmdsZSwgcHJvamVjdGlvbiwgbWluaW11bUhlaWdodCwgbWF4aW11bUhlaWdodCwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IEJvdW5kaW5nU3BoZXJlKCk7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlY3RhbmdsZSkpIHsKICAgICAgICAgIHJlc3VsdC5jZW50ZXIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8sIHJlc3VsdC5jZW50ZXIpOwogICAgICAgICAgcmVzdWx0LnJhZGl1cyA9IDA7CiAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0KICAgICAgICBkZWZhdWx0UHJvamVjdGlvbi5fZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuZGVmYXVsdDsKICAgICAgICBwcm9qZWN0aW9uID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQocHJvamVjdGlvbiwgZGVmYXVsdFByb2plY3Rpb24pOwogICAgICAgIFJlY3RhbmdsZV9kZWZhdWx0LnNvdXRod2VzdChyZWN0YW5nbGUsIGZyb21SZWN0YW5nbGUyRFNvdXRod2VzdCk7CiAgICAgICAgZnJvbVJlY3RhbmdsZTJEU291dGh3ZXN0LmhlaWdodCA9IG1pbmltdW1IZWlnaHQ7CiAgICAgICAgUmVjdGFuZ2xlX2RlZmF1bHQubm9ydGhlYXN0KHJlY3RhbmdsZSwgZnJvbVJlY3RhbmdsZTJETm9ydGhlYXN0KTsKICAgICAgICBmcm9tUmVjdGFuZ2xlMkROb3J0aGVhc3QuaGVpZ2h0ID0gbWF4aW11bUhlaWdodDsKICAgICAgICBjb25zdCBsb3dlckxlZnQgPSBwcm9qZWN0aW9uLnByb2plY3QoCiAgICAgICAgICBmcm9tUmVjdGFuZ2xlMkRTb3V0aHdlc3QsCiAgICAgICAgICBmcm9tUmVjdGFuZ2xlMkRMb3dlckxlZnQKICAgICAgICApOwogICAgICAgIGNvbnN0IHVwcGVyUmlnaHQgPSBwcm9qZWN0aW9uLnByb2plY3QoCiAgICAgICAgICBmcm9tUmVjdGFuZ2xlMkROb3J0aGVhc3QsCiAgICAgICAgICBmcm9tUmVjdGFuZ2xlMkRVcHBlclJpZ2h0CiAgICAgICAgKTsKICAgICAgICBjb25zdCB3aWR0aCA9IHVwcGVyUmlnaHQueCAtIGxvd2VyTGVmdC54OwogICAgICAgIGNvbnN0IGhlaWdodCA9IHVwcGVyUmlnaHQueSAtIGxvd2VyTGVmdC55OwogICAgICAgIGNvbnN0IGVsZXZhdGlvbiA9IHVwcGVyUmlnaHQueiAtIGxvd2VyTGVmdC56OwogICAgICAgIHJlc3VsdC5yYWRpdXMgPSBNYXRoLnNxcnQod2lkdGggKiB3aWR0aCArIGhlaWdodCAqIGhlaWdodCArIGVsZXZhdGlvbiAqIGVsZXZhdGlvbikgKiAwLjU7CiAgICAgICAgY29uc3QgY2VudGVyID0gcmVzdWx0LmNlbnRlcjsKICAgICAgICBjZW50ZXIueCA9IGxvd2VyTGVmdC54ICsgd2lkdGggKiAwLjU7CiAgICAgICAgY2VudGVyLnkgPSBsb3dlckxlZnQueSArIGhlaWdodCAqIDAuNTsKICAgICAgICBjZW50ZXIueiA9IGxvd2VyTGVmdC56ICsgZWxldmF0aW9uICogMC41OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIGZyb21SZWN0YW5nbGUzRFNjcmF0Y2ggPSBbXTsKICAgICAgQm91bmRpbmdTcGhlcmUuZnJvbVJlY3RhbmdsZTNEID0gZnVuY3Rpb24ocmVjdGFuZ2xlLCBlbGxpcHNvaWQsIHN1cmZhY2VIZWlnaHQsIHJlc3VsdCkgewogICAgICAgIGVsbGlwc29pZCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGVsbGlwc29pZCwgRWxsaXBzb2lkX2RlZmF1bHQuZGVmYXVsdCk7CiAgICAgICAgc3VyZmFjZUhlaWdodCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN1cmZhY2VIZWlnaHQsIDApOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBCb3VuZGluZ1NwaGVyZSgpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZWN0YW5nbGUpKSB7CiAgICAgICAgICByZXN1bHQuY2VudGVyID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKENhcnRlc2lhbjNfZGVmYXVsdC5aRVJPLCByZXN1bHQuY2VudGVyKTsKICAgICAgICAgIHJlc3VsdC5yYWRpdXMgPSAwOwogICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gUmVjdGFuZ2xlX2RlZmF1bHQuc3Vic2FtcGxlKAogICAgICAgICAgcmVjdGFuZ2xlLAogICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgc3VyZmFjZUhlaWdodCwKICAgICAgICAgIGZyb21SZWN0YW5nbGUzRFNjcmF0Y2gKICAgICAgICApOwogICAgICAgIHJldHVybiBCb3VuZGluZ1NwaGVyZS5mcm9tUG9pbnRzKHBvc2l0aW9ucywgcmVzdWx0KTsKICAgICAgfTsKICAgICAgQm91bmRpbmdTcGhlcmUuZnJvbVZlcnRpY2VzID0gZnVuY3Rpb24ocG9zaXRpb25zLCBjZW50ZXIsIHN0cmlkZSwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IEJvdW5kaW5nU3BoZXJlKCk7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHBvc2l0aW9ucykgfHwgcG9zaXRpb25zLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgcmVzdWx0LmNlbnRlciA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTywgcmVzdWx0LmNlbnRlcik7CiAgICAgICAgICByZXN1bHQucmFkaXVzID0gMDsKICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfQogICAgICAgIGNlbnRlciA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGNlbnRlciwgQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8pOwogICAgICAgIHN0cmlkZSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0cmlkZSwgMyk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuT3JFcXVhbHMoInN0cmlkZSIsIHN0cmlkZSwgMyk7CiAgICAgICAgY29uc3QgY3VycmVudFBvcyA9IGZyb21Qb2ludHNDdXJyZW50UG9zOwogICAgICAgIGN1cnJlbnRQb3MueCA9IHBvc2l0aW9uc1swXSArIGNlbnRlci54OwogICAgICAgIGN1cnJlbnRQb3MueSA9IHBvc2l0aW9uc1sxXSArIGNlbnRlci55OwogICAgICAgIGN1cnJlbnRQb3MueiA9IHBvc2l0aW9uc1syXSArIGNlbnRlci56OwogICAgICAgIGNvbnN0IHhNaW4gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoY3VycmVudFBvcywgZnJvbVBvaW50c1hNaW4pOwogICAgICAgIGNvbnN0IHlNaW4gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoY3VycmVudFBvcywgZnJvbVBvaW50c1lNaW4pOwogICAgICAgIGNvbnN0IHpNaW4gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoY3VycmVudFBvcywgZnJvbVBvaW50c1pNaW4pOwogICAgICAgIGNvbnN0IHhNYXggPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoY3VycmVudFBvcywgZnJvbVBvaW50c1hNYXgpOwogICAgICAgIGNvbnN0IHlNYXggPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoY3VycmVudFBvcywgZnJvbVBvaW50c1lNYXgpOwogICAgICAgIGNvbnN0IHpNYXggPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoY3VycmVudFBvcywgZnJvbVBvaW50c1pNYXgpOwogICAgICAgIGNvbnN0IG51bUVsZW1lbnRzID0gcG9zaXRpb25zLmxlbmd0aDsKICAgICAgICBsZXQgaTsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbnVtRWxlbWVudHM7IGkgKz0gc3RyaWRlKSB7CiAgICAgICAgICBjb25zdCB4ID0gcG9zaXRpb25zW2ldICsgY2VudGVyLng7CiAgICAgICAgICBjb25zdCB5ID0gcG9zaXRpb25zW2kgKyAxXSArIGNlbnRlci55OwogICAgICAgICAgY29uc3QgeiA9IHBvc2l0aW9uc1tpICsgMl0gKyBjZW50ZXIuejsKICAgICAgICAgIGN1cnJlbnRQb3MueCA9IHg7CiAgICAgICAgICBjdXJyZW50UG9zLnkgPSB5OwogICAgICAgICAgY3VycmVudFBvcy56ID0gejsKICAgICAgICAgIGlmICh4IDwgeE1pbi54KSB7CiAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShjdXJyZW50UG9zLCB4TWluKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh4ID4geE1heC54KSB7CiAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShjdXJyZW50UG9zLCB4TWF4KTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh5IDwgeU1pbi55KSB7CiAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShjdXJyZW50UG9zLCB5TWluKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh5ID4geU1heC55KSB7CiAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShjdXJyZW50UG9zLCB5TWF4KTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh6IDwgek1pbi56KSB7CiAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShjdXJyZW50UG9zLCB6TWluKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh6ID4gek1heC56KSB7CiAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShjdXJyZW50UG9zLCB6TWF4KTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY29uc3QgeFNwYW4gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlU3F1YXJlZCgKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdCh4TWF4LCB4TWluLCBmcm9tUG9pbnRzU2NyYXRjaCkKICAgICAgICApOwogICAgICAgIGNvbnN0IHlTcGFuID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZVNxdWFyZWQoCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoeU1heCwgeU1pbiwgZnJvbVBvaW50c1NjcmF0Y2gpCiAgICAgICAgKTsKICAgICAgICBjb25zdCB6U3BhbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5tYWduaXR1ZGVTcXVhcmVkKAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHpNYXgsIHpNaW4sIGZyb21Qb2ludHNTY3JhdGNoKQogICAgICAgICk7CiAgICAgICAgbGV0IGRpYW1ldGVyMSA9IHhNaW47CiAgICAgICAgbGV0IGRpYW1ldGVyMiA9IHhNYXg7CiAgICAgICAgbGV0IG1heFNwYW4gPSB4U3BhbjsKICAgICAgICBpZiAoeVNwYW4gPiBtYXhTcGFuKSB7CiAgICAgICAgICBtYXhTcGFuID0geVNwYW47CiAgICAgICAgICBkaWFtZXRlcjEgPSB5TWluOwogICAgICAgICAgZGlhbWV0ZXIyID0geU1heDsKICAgICAgICB9CiAgICAgICAgaWYgKHpTcGFuID4gbWF4U3BhbikgewogICAgICAgICAgbWF4U3BhbiA9IHpTcGFuOwogICAgICAgICAgZGlhbWV0ZXIxID0gek1pbjsKICAgICAgICAgIGRpYW1ldGVyMiA9IHpNYXg7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHJpdHRlckNlbnRlciA9IGZyb21Qb2ludHNSaXR0ZXJDZW50ZXI7CiAgICAgICAgcml0dGVyQ2VudGVyLnggPSAoZGlhbWV0ZXIxLnggKyBkaWFtZXRlcjIueCkgKiAwLjU7CiAgICAgICAgcml0dGVyQ2VudGVyLnkgPSAoZGlhbWV0ZXIxLnkgKyBkaWFtZXRlcjIueSkgKiAwLjU7CiAgICAgICAgcml0dGVyQ2VudGVyLnogPSAoZGlhbWV0ZXIxLnogKyBkaWFtZXRlcjIueikgKiAwLjU7CiAgICAgICAgbGV0IHJhZGl1c1NxdWFyZWQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlU3F1YXJlZCgKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChkaWFtZXRlcjIsIHJpdHRlckNlbnRlciwgZnJvbVBvaW50c1NjcmF0Y2gpCiAgICAgICAgKTsKICAgICAgICBsZXQgcml0dGVyUmFkaXVzID0gTWF0aC5zcXJ0KHJhZGl1c1NxdWFyZWQpOwogICAgICAgIGNvbnN0IG1pbkJveFB0ID0gZnJvbVBvaW50c01pbkJveFB0OwogICAgICAgIG1pbkJveFB0LnggPSB4TWluLng7CiAgICAgICAgbWluQm94UHQueSA9IHlNaW4ueTsKICAgICAgICBtaW5Cb3hQdC56ID0gek1pbi56OwogICAgICAgIGNvbnN0IG1heEJveFB0ID0gZnJvbVBvaW50c01heEJveFB0OwogICAgICAgIG1heEJveFB0LnggPSB4TWF4Lng7CiAgICAgICAgbWF4Qm94UHQueSA9IHlNYXgueTsKICAgICAgICBtYXhCb3hQdC56ID0gek1heC56OwogICAgICAgIGNvbnN0IG5haXZlQ2VudGVyID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1pZHBvaW50KAogICAgICAgICAgbWluQm94UHQsCiAgICAgICAgICBtYXhCb3hQdCwKICAgICAgICAgIGZyb21Qb2ludHNOYWl2ZUNlbnRlclNjcmF0Y2gKICAgICAgICApOwogICAgICAgIGxldCBuYWl2ZVJhZGl1cyA9IDA7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IG51bUVsZW1lbnRzOyBpICs9IHN0cmlkZSkgewogICAgICAgICAgY3VycmVudFBvcy54ID0gcG9zaXRpb25zW2ldICsgY2VudGVyLng7CiAgICAgICAgICBjdXJyZW50UG9zLnkgPSBwb3NpdGlvbnNbaSArIDFdICsgY2VudGVyLnk7CiAgICAgICAgICBjdXJyZW50UG9zLnogPSBwb3NpdGlvbnNbaSArIDJdICsgY2VudGVyLno7CiAgICAgICAgICBjb25zdCByID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZSgKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KGN1cnJlbnRQb3MsIG5haXZlQ2VudGVyLCBmcm9tUG9pbnRzU2NyYXRjaCkKICAgICAgICAgICk7CiAgICAgICAgICBpZiAociA+IG5haXZlUmFkaXVzKSB7CiAgICAgICAgICAgIG5haXZlUmFkaXVzID0gcjsKICAgICAgICAgIH0KICAgICAgICAgIGNvbnN0IG9sZENlbnRlclRvUG9pbnRTcXVhcmVkID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZVNxdWFyZWQoCiAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChjdXJyZW50UG9zLCByaXR0ZXJDZW50ZXIsIGZyb21Qb2ludHNTY3JhdGNoKQogICAgICAgICAgKTsKICAgICAgICAgIGlmIChvbGRDZW50ZXJUb1BvaW50U3F1YXJlZCA+IHJhZGl1c1NxdWFyZWQpIHsKICAgICAgICAgICAgY29uc3Qgb2xkQ2VudGVyVG9Qb2ludCA9IE1hdGguc3FydChvbGRDZW50ZXJUb1BvaW50U3F1YXJlZCk7CiAgICAgICAgICAgIHJpdHRlclJhZGl1cyA9IChyaXR0ZXJSYWRpdXMgKyBvbGRDZW50ZXJUb1BvaW50KSAqIDAuNTsKICAgICAgICAgICAgcmFkaXVzU3F1YXJlZCA9IHJpdHRlclJhZGl1cyAqIHJpdHRlclJhZGl1czsKICAgICAgICAgICAgY29uc3Qgb2xkVG9OZXcgPSBvbGRDZW50ZXJUb1BvaW50IC0gcml0dGVyUmFkaXVzOwogICAgICAgICAgICByaXR0ZXJDZW50ZXIueCA9IChyaXR0ZXJSYWRpdXMgKiByaXR0ZXJDZW50ZXIueCArIG9sZFRvTmV3ICogY3VycmVudFBvcy54KSAvIG9sZENlbnRlclRvUG9pbnQ7CiAgICAgICAgICAgIHJpdHRlckNlbnRlci55ID0gKHJpdHRlclJhZGl1cyAqIHJpdHRlckNlbnRlci55ICsgb2xkVG9OZXcgKiBjdXJyZW50UG9zLnkpIC8gb2xkQ2VudGVyVG9Qb2ludDsKICAgICAgICAgICAgcml0dGVyQ2VudGVyLnogPSAocml0dGVyUmFkaXVzICogcml0dGVyQ2VudGVyLnogKyBvbGRUb05ldyAqIGN1cnJlbnRQb3MueikgLyBvbGRDZW50ZXJUb1BvaW50OwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAocml0dGVyUmFkaXVzIDwgbmFpdmVSYWRpdXMpIHsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShyaXR0ZXJDZW50ZXIsIHJlc3VsdC5jZW50ZXIpOwogICAgICAgICAgcmVzdWx0LnJhZGl1cyA9IHJpdHRlclJhZGl1czsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKG5haXZlQ2VudGVyLCByZXN1bHQuY2VudGVyKTsKICAgICAgICAgIHJlc3VsdC5yYWRpdXMgPSBuYWl2ZVJhZGl1czsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQm91bmRpbmdTcGhlcmUuZnJvbUVuY29kZWRDYXJ0ZXNpYW5WZXJ0aWNlcyA9IGZ1bmN0aW9uKHBvc2l0aW9uc0hpZ2gsIHBvc2l0aW9uc0xvdywgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IEJvdW5kaW5nU3BoZXJlKCk7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHBvc2l0aW9uc0hpZ2gpIHx8ICFkZWZpbmVkX2RlZmF1bHQocG9zaXRpb25zTG93KSB8fCBwb3NpdGlvbnNIaWdoLmxlbmd0aCAhPT0gcG9zaXRpb25zTG93Lmxlbmd0aCB8fCBwb3NpdGlvbnNIaWdoLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgcmVzdWx0LmNlbnRlciA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTywgcmVzdWx0LmNlbnRlcik7CiAgICAgICAgICByZXN1bHQucmFkaXVzID0gMDsKICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGN1cnJlbnRQb3MgPSBmcm9tUG9pbnRzQ3VycmVudFBvczsKICAgICAgICBjdXJyZW50UG9zLnggPSBwb3NpdGlvbnNIaWdoWzBdICsgcG9zaXRpb25zTG93WzBdOwogICAgICAgIGN1cnJlbnRQb3MueSA9IHBvc2l0aW9uc0hpZ2hbMV0gKyBwb3NpdGlvbnNMb3dbMV07CiAgICAgICAgY3VycmVudFBvcy56ID0gcG9zaXRpb25zSGlnaFsyXSArIHBvc2l0aW9uc0xvd1syXTsKICAgICAgICBjb25zdCB4TWluID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGN1cnJlbnRQb3MsIGZyb21Qb2ludHNYTWluKTsKICAgICAgICBjb25zdCB5TWluID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGN1cnJlbnRQb3MsIGZyb21Qb2ludHNZTWluKTsKICAgICAgICBjb25zdCB6TWluID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGN1cnJlbnRQb3MsIGZyb21Qb2ludHNaTWluKTsKICAgICAgICBjb25zdCB4TWF4ID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGN1cnJlbnRQb3MsIGZyb21Qb2ludHNYTWF4KTsKICAgICAgICBjb25zdCB5TWF4ID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGN1cnJlbnRQb3MsIGZyb21Qb2ludHNZTWF4KTsKICAgICAgICBjb25zdCB6TWF4ID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGN1cnJlbnRQb3MsIGZyb21Qb2ludHNaTWF4KTsKICAgICAgICBjb25zdCBudW1FbGVtZW50cyA9IHBvc2l0aW9uc0hpZ2gubGVuZ3RoOwogICAgICAgIGxldCBpOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1FbGVtZW50czsgaSArPSAzKSB7CiAgICAgICAgICBjb25zdCB4ID0gcG9zaXRpb25zSGlnaFtpXSArIHBvc2l0aW9uc0xvd1tpXTsKICAgICAgICAgIGNvbnN0IHkgPSBwb3NpdGlvbnNIaWdoW2kgKyAxXSArIHBvc2l0aW9uc0xvd1tpICsgMV07CiAgICAgICAgICBjb25zdCB6ID0gcG9zaXRpb25zSGlnaFtpICsgMl0gKyBwb3NpdGlvbnNMb3dbaSArIDJdOwogICAgICAgICAgY3VycmVudFBvcy54ID0geDsKICAgICAgICAgIGN1cnJlbnRQb3MueSA9IHk7CiAgICAgICAgICBjdXJyZW50UG9zLnogPSB6OwogICAgICAgICAgaWYgKHggPCB4TWluLngpIHsKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGN1cnJlbnRQb3MsIHhNaW4pOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHggPiB4TWF4LngpIHsKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGN1cnJlbnRQb3MsIHhNYXgpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHkgPCB5TWluLnkpIHsKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGN1cnJlbnRQb3MsIHlNaW4pOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHkgPiB5TWF4LnkpIHsKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGN1cnJlbnRQb3MsIHlNYXgpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHogPCB6TWluLnopIHsKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGN1cnJlbnRQb3MsIHpNaW4pOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHogPiB6TWF4LnopIHsKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGN1cnJlbnRQb3MsIHpNYXgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBjb25zdCB4U3BhbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5tYWduaXR1ZGVTcXVhcmVkKAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHhNYXgsIHhNaW4sIGZyb21Qb2ludHNTY3JhdGNoKQogICAgICAgICk7CiAgICAgICAgY29uc3QgeVNwYW4gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlU3F1YXJlZCgKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdCh5TWF4LCB5TWluLCBmcm9tUG9pbnRzU2NyYXRjaCkKICAgICAgICApOwogICAgICAgIGNvbnN0IHpTcGFuID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZVNxdWFyZWQoCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3Qoek1heCwgek1pbiwgZnJvbVBvaW50c1NjcmF0Y2gpCiAgICAgICAgKTsKICAgICAgICBsZXQgZGlhbWV0ZXIxID0geE1pbjsKICAgICAgICBsZXQgZGlhbWV0ZXIyID0geE1heDsKICAgICAgICBsZXQgbWF4U3BhbiA9IHhTcGFuOwogICAgICAgIGlmICh5U3BhbiA+IG1heFNwYW4pIHsKICAgICAgICAgIG1heFNwYW4gPSB5U3BhbjsKICAgICAgICAgIGRpYW1ldGVyMSA9IHlNaW47CiAgICAgICAgICBkaWFtZXRlcjIgPSB5TWF4OwogICAgICAgIH0KICAgICAgICBpZiAoelNwYW4gPiBtYXhTcGFuKSB7CiAgICAgICAgICBtYXhTcGFuID0gelNwYW47CiAgICAgICAgICBkaWFtZXRlcjEgPSB6TWluOwogICAgICAgICAgZGlhbWV0ZXIyID0gek1heDsKICAgICAgICB9CiAgICAgICAgY29uc3Qgcml0dGVyQ2VudGVyID0gZnJvbVBvaW50c1JpdHRlckNlbnRlcjsKICAgICAgICByaXR0ZXJDZW50ZXIueCA9IChkaWFtZXRlcjEueCArIGRpYW1ldGVyMi54KSAqIDAuNTsKICAgICAgICByaXR0ZXJDZW50ZXIueSA9IChkaWFtZXRlcjEueSArIGRpYW1ldGVyMi55KSAqIDAuNTsKICAgICAgICByaXR0ZXJDZW50ZXIueiA9IChkaWFtZXRlcjEueiArIGRpYW1ldGVyMi56KSAqIDAuNTsKICAgICAgICBsZXQgcmFkaXVzU3F1YXJlZCA9IENhcnRlc2lhbjNfZGVmYXVsdC5tYWduaXR1ZGVTcXVhcmVkKAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KGRpYW1ldGVyMiwgcml0dGVyQ2VudGVyLCBmcm9tUG9pbnRzU2NyYXRjaCkKICAgICAgICApOwogICAgICAgIGxldCByaXR0ZXJSYWRpdXMgPSBNYXRoLnNxcnQocmFkaXVzU3F1YXJlZCk7CiAgICAgICAgY29uc3QgbWluQm94UHQgPSBmcm9tUG9pbnRzTWluQm94UHQ7CiAgICAgICAgbWluQm94UHQueCA9IHhNaW4ueDsKICAgICAgICBtaW5Cb3hQdC55ID0geU1pbi55OwogICAgICAgIG1pbkJveFB0LnogPSB6TWluLno7CiAgICAgICAgY29uc3QgbWF4Qm94UHQgPSBmcm9tUG9pbnRzTWF4Qm94UHQ7CiAgICAgICAgbWF4Qm94UHQueCA9IHhNYXgueDsKICAgICAgICBtYXhCb3hQdC55ID0geU1heC55OwogICAgICAgIG1heEJveFB0LnogPSB6TWF4Lno7CiAgICAgICAgY29uc3QgbmFpdmVDZW50ZXIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWlkcG9pbnQoCiAgICAgICAgICBtaW5Cb3hQdCwKICAgICAgICAgIG1heEJveFB0LAogICAgICAgICAgZnJvbVBvaW50c05haXZlQ2VudGVyU2NyYXRjaAogICAgICAgICk7CiAgICAgICAgbGV0IG5haXZlUmFkaXVzID0gMDsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbnVtRWxlbWVudHM7IGkgKz0gMykgewogICAgICAgICAgY3VycmVudFBvcy54ID0gcG9zaXRpb25zSGlnaFtpXSArIHBvc2l0aW9uc0xvd1tpXTsKICAgICAgICAgIGN1cnJlbnRQb3MueSA9IHBvc2l0aW9uc0hpZ2hbaSArIDFdICsgcG9zaXRpb25zTG93W2kgKyAxXTsKICAgICAgICAgIGN1cnJlbnRQb3MueiA9IHBvc2l0aW9uc0hpZ2hbaSArIDJdICsgcG9zaXRpb25zTG93W2kgKyAyXTsKICAgICAgICAgIGNvbnN0IHIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlKAogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoY3VycmVudFBvcywgbmFpdmVDZW50ZXIsIGZyb21Qb2ludHNTY3JhdGNoKQogICAgICAgICAgKTsKICAgICAgICAgIGlmIChyID4gbmFpdmVSYWRpdXMpIHsKICAgICAgICAgICAgbmFpdmVSYWRpdXMgPSByOwogICAgICAgICAgfQogICAgICAgICAgY29uc3Qgb2xkQ2VudGVyVG9Qb2ludFNxdWFyZWQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlU3F1YXJlZCgKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KGN1cnJlbnRQb3MsIHJpdHRlckNlbnRlciwgZnJvbVBvaW50c1NjcmF0Y2gpCiAgICAgICAgICApOwogICAgICAgICAgaWYgKG9sZENlbnRlclRvUG9pbnRTcXVhcmVkID4gcmFkaXVzU3F1YXJlZCkgewogICAgICAgICAgICBjb25zdCBvbGRDZW50ZXJUb1BvaW50ID0gTWF0aC5zcXJ0KG9sZENlbnRlclRvUG9pbnRTcXVhcmVkKTsKICAgICAgICAgICAgcml0dGVyUmFkaXVzID0gKHJpdHRlclJhZGl1cyArIG9sZENlbnRlclRvUG9pbnQpICogMC41OwogICAgICAgICAgICByYWRpdXNTcXVhcmVkID0gcml0dGVyUmFkaXVzICogcml0dGVyUmFkaXVzOwogICAgICAgICAgICBjb25zdCBvbGRUb05ldyA9IG9sZENlbnRlclRvUG9pbnQgLSByaXR0ZXJSYWRpdXM7CiAgICAgICAgICAgIHJpdHRlckNlbnRlci54ID0gKHJpdHRlclJhZGl1cyAqIHJpdHRlckNlbnRlci54ICsgb2xkVG9OZXcgKiBjdXJyZW50UG9zLngpIC8gb2xkQ2VudGVyVG9Qb2ludDsKICAgICAgICAgICAgcml0dGVyQ2VudGVyLnkgPSAocml0dGVyUmFkaXVzICogcml0dGVyQ2VudGVyLnkgKyBvbGRUb05ldyAqIGN1cnJlbnRQb3MueSkgLyBvbGRDZW50ZXJUb1BvaW50OwogICAgICAgICAgICByaXR0ZXJDZW50ZXIueiA9IChyaXR0ZXJSYWRpdXMgKiByaXR0ZXJDZW50ZXIueiArIG9sZFRvTmV3ICogY3VycmVudFBvcy56KSAvIG9sZENlbnRlclRvUG9pbnQ7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChyaXR0ZXJSYWRpdXMgPCBuYWl2ZVJhZGl1cykgewogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKHJpdHRlckNlbnRlciwgcmVzdWx0LmNlbnRlcik7CiAgICAgICAgICByZXN1bHQucmFkaXVzID0gcml0dGVyUmFkaXVzOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUobmFpdmVDZW50ZXIsIHJlc3VsdC5jZW50ZXIpOwogICAgICAgICAgcmVzdWx0LnJhZGl1cyA9IG5haXZlUmFkaXVzOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBCb3VuZGluZ1NwaGVyZS5mcm9tQ29ybmVyUG9pbnRzID0gZnVuY3Rpb24oY29ybmVyLCBvcHBvc2l0ZUNvcm5lciwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjb3JuZXIiLCBjb3JuZXIpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgib3Bwb3NpdGVDb3JuZXIiLCBvcHBvc2l0ZUNvcm5lcik7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IEJvdW5kaW5nU3BoZXJlKCk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGNlbnRlciA9IENhcnRlc2lhbjNfZGVmYXVsdC5taWRwb2ludChjb3JuZXIsIG9wcG9zaXRlQ29ybmVyLCByZXN1bHQuY2VudGVyKTsKICAgICAgICByZXN1bHQucmFkaXVzID0gQ2FydGVzaWFuM19kZWZhdWx0LmRpc3RhbmNlKGNlbnRlciwgb3Bwb3NpdGVDb3JuZXIpOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIEJvdW5kaW5nU3BoZXJlLmZyb21FbGxpcHNvaWQgPSBmdW5jdGlvbihlbGxpcHNvaWQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiZWxsaXBzb2lkIiwgZWxsaXBzb2lkKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQm91bmRpbmdTcGhlcmUoKTsKICAgICAgICB9CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKENhcnRlc2lhbjNfZGVmYXVsdC5aRVJPLCByZXN1bHQuY2VudGVyKTsKICAgICAgICByZXN1bHQucmFkaXVzID0gZWxsaXBzb2lkLm1heGltdW1SYWRpdXM7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgZnJvbUJvdW5kaW5nU3BoZXJlc1NjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIEJvdW5kaW5nU3BoZXJlLmZyb21Cb3VuZGluZ1NwaGVyZXMgPSBmdW5jdGlvbihib3VuZGluZ1NwaGVyZXMsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBCb3VuZGluZ1NwaGVyZSgpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChib3VuZGluZ1NwaGVyZXMpIHx8IGJvdW5kaW5nU3BoZXJlcy5sZW5ndGggPT09IDApIHsKICAgICAgICAgIHJlc3VsdC5jZW50ZXIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8sIHJlc3VsdC5jZW50ZXIpOwogICAgICAgICAgcmVzdWx0LnJhZGl1cyA9IDA7CiAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0KICAgICAgICBjb25zdCBsZW5ndGggPSBib3VuZGluZ1NwaGVyZXMubGVuZ3RoOwogICAgICAgIGlmIChsZW5ndGggPT09IDEpIHsKICAgICAgICAgIHJldHVybiBCb3VuZGluZ1NwaGVyZS5jbG9uZShib3VuZGluZ1NwaGVyZXNbMF0sIHJlc3VsdCk7CiAgICAgICAgfQogICAgICAgIGlmIChsZW5ndGggPT09IDIpIHsKICAgICAgICAgIHJldHVybiBCb3VuZGluZ1NwaGVyZS51bmlvbihib3VuZGluZ1NwaGVyZXNbMF0sIGJvdW5kaW5nU3BoZXJlc1sxXSwgcmVzdWx0KTsKICAgICAgICB9CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gW107CiAgICAgICAgbGV0IGk7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgICBwb3NpdGlvbnMucHVzaChib3VuZGluZ1NwaGVyZXNbaV0uY2VudGVyKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0ID0gQm91bmRpbmdTcGhlcmUuZnJvbVBvaW50cyhwb3NpdGlvbnMsIHJlc3VsdCk7CiAgICAgICAgY29uc3QgY2VudGVyID0gcmVzdWx0LmNlbnRlcjsKICAgICAgICBsZXQgcmFkaXVzID0gcmVzdWx0LnJhZGl1czsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICAgIGNvbnN0IHRtcDIgPSBib3VuZGluZ1NwaGVyZXNbaV07CiAgICAgICAgICByYWRpdXMgPSBNYXRoLm1heCgKICAgICAgICAgICAgcmFkaXVzLAogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuZGlzdGFuY2UoY2VudGVyLCB0bXAyLmNlbnRlciwgZnJvbUJvdW5kaW5nU3BoZXJlc1NjcmF0Y2gpICsgdG1wMi5yYWRpdXMKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5yYWRpdXMgPSByYWRpdXM7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgZnJvbU9yaWVudGVkQm91bmRpbmdCb3hTY3JhdGNoVSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgZnJvbU9yaWVudGVkQm91bmRpbmdCb3hTY3JhdGNoViA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgZnJvbU9yaWVudGVkQm91bmRpbmdCb3hTY3JhdGNoVyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgQm91bmRpbmdTcGhlcmUuZnJvbU9yaWVudGVkQm91bmRpbmdCb3ggPSBmdW5jdGlvbihvcmllbnRlZEJvdW5kaW5nQm94LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoIm9yaWVudGVkQm91bmRpbmdCb3giLCBvcmllbnRlZEJvdW5kaW5nQm94KTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQm91bmRpbmdTcGhlcmUoKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgaGFsZkF4ZXMgPSBvcmllbnRlZEJvdW5kaW5nQm94LmhhbGZBeGVzOwogICAgICAgIGNvbnN0IHUzID0gTWF0cml4M19kZWZhdWx0LmdldENvbHVtbihoYWxmQXhlcywgMCwgZnJvbU9yaWVudGVkQm91bmRpbmdCb3hTY3JhdGNoVSk7CiAgICAgICAgY29uc3QgdjMgPSBNYXRyaXgzX2RlZmF1bHQuZ2V0Q29sdW1uKGhhbGZBeGVzLCAxLCBmcm9tT3JpZW50ZWRCb3VuZGluZ0JveFNjcmF0Y2hWKTsKICAgICAgICBjb25zdCB3ID0gTWF0cml4M19kZWZhdWx0LmdldENvbHVtbihoYWxmQXhlcywgMiwgZnJvbU9yaWVudGVkQm91bmRpbmdCb3hTY3JhdGNoVyk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZCh1MywgdjMsIHUzKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKHUzLCB3LCB1Myk7CiAgICAgICAgcmVzdWx0LmNlbnRlciA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShvcmllbnRlZEJvdW5kaW5nQm94LmNlbnRlciwgcmVzdWx0LmNlbnRlcik7CiAgICAgICAgcmVzdWx0LnJhZGl1cyA9IENhcnRlc2lhbjNfZGVmYXVsdC5tYWduaXR1ZGUodTMpOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hGcm9tVHJhbnNmb3JtYXRpb25DZW50ZXIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hGcm9tVHJhbnNmb3JtYXRpb25TY2FsZSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgQm91bmRpbmdTcGhlcmUuZnJvbVRyYW5zZm9ybWF0aW9uID0gZnVuY3Rpb24odHJhbnNmb3JtYXRpb24sIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidHJhbnNmb3JtYXRpb24iLCB0cmFuc2Zvcm1hdGlvbik7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IEJvdW5kaW5nU3BoZXJlKCk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGNlbnRlciA9IE1hdHJpeDRfZGVmYXVsdC5nZXRUcmFuc2xhdGlvbigKICAgICAgICAgIHRyYW5zZm9ybWF0aW9uLAogICAgICAgICAgc2NyYXRjaEZyb21UcmFuc2Zvcm1hdGlvbkNlbnRlcgogICAgICAgICk7CiAgICAgICAgY29uc3Qgc2NhbGUgPSBNYXRyaXg0X2RlZmF1bHQuZ2V0U2NhbGUoCiAgICAgICAgICB0cmFuc2Zvcm1hdGlvbiwKICAgICAgICAgIHNjcmF0Y2hGcm9tVHJhbnNmb3JtYXRpb25TY2FsZQogICAgICAgICk7CiAgICAgICAgY29uc3QgcmFkaXVzID0gMC41ICogQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZShzY2FsZSk7CiAgICAgICAgcmVzdWx0LmNlbnRlciA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShjZW50ZXIsIHJlc3VsdC5jZW50ZXIpOwogICAgICAgIHJlc3VsdC5yYWRpdXMgPSByYWRpdXM7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQm91bmRpbmdTcGhlcmUuY2xvbmUgPSBmdW5jdGlvbihzcGhlcmUsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHNwaGVyZSkpIHsKICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgQm91bmRpbmdTcGhlcmUoc3BoZXJlLmNlbnRlciwgc3BoZXJlLnJhZGl1cyk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5jZW50ZXIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoc3BoZXJlLmNlbnRlciwgcmVzdWx0LmNlbnRlcik7CiAgICAgICAgcmVzdWx0LnJhZGl1cyA9IHNwaGVyZS5yYWRpdXM7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQm91bmRpbmdTcGhlcmUucGFja2VkTGVuZ3RoID0gNDsKICAgICAgQm91bmRpbmdTcGhlcmUucGFjayA9IGZ1bmN0aW9uKHZhbHVlLCBhcnJheSwgc3RhcnRpbmdJbmRleCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidmFsdWUiLCB2YWx1ZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgY29uc3QgY2VudGVyID0gdmFsdWUuY2VudGVyOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSBjZW50ZXIueDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gY2VudGVyLnk7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IGNlbnRlci56OwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXhdID0gdmFsdWUucmFkaXVzOwogICAgICAgIHJldHVybiBhcnJheTsKICAgICAgfTsKICAgICAgQm91bmRpbmdTcGhlcmUudW5wYWNrID0gZnVuY3Rpb24oYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBCb3VuZGluZ1NwaGVyZSgpOwogICAgICAgIH0KICAgICAgICBjb25zdCBjZW50ZXIgPSByZXN1bHQuY2VudGVyOwogICAgICAgIGNlbnRlci54ID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjZW50ZXIueSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY2VudGVyLnogPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIHJlc3VsdC5yYWRpdXMgPSBhcnJheVtzdGFydGluZ0luZGV4XTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICB1bmlvblNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHVuaW9uU2NyYXRjaENlbnRlciA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgQm91bmRpbmdTcGhlcmUudW5pb24gPSBmdW5jdGlvbihsZWZ0LCByaWdodCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJsZWZ0IiwgbGVmdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyaWdodCIsIHJpZ2h0KTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQm91bmRpbmdTcGhlcmUoKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgbGVmdENlbnRlciA9IGxlZnQuY2VudGVyOwogICAgICAgIGNvbnN0IGxlZnRSYWRpdXMgPSBsZWZ0LnJhZGl1czsKICAgICAgICBjb25zdCByaWdodENlbnRlciA9IHJpZ2h0LmNlbnRlcjsKICAgICAgICBjb25zdCByaWdodFJhZGl1cyA9IHJpZ2h0LnJhZGl1czsKICAgICAgICBjb25zdCB0b1JpZ2h0Q2VudGVyID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KAogICAgICAgICAgcmlnaHRDZW50ZXIsCiAgICAgICAgICBsZWZ0Q2VudGVyLAogICAgICAgICAgdW5pb25TY3JhdGNoCiAgICAgICAgKTsKICAgICAgICBjb25zdCBjZW50ZXJTZXBhcmF0aW9uID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZSh0b1JpZ2h0Q2VudGVyKTsKICAgICAgICBpZiAobGVmdFJhZGl1cyA+PSBjZW50ZXJTZXBhcmF0aW9uICsgcmlnaHRSYWRpdXMpIHsKICAgICAgICAgIGxlZnQuY2xvbmUocmVzdWx0KTsKICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfQogICAgICAgIGlmIChyaWdodFJhZGl1cyA+PSBjZW50ZXJTZXBhcmF0aW9uICsgbGVmdFJhZGl1cykgewogICAgICAgICAgcmlnaHQuY2xvbmUocmVzdWx0KTsKICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGhhbGZEaXN0YW5jZUJldHdlZW5UYW5nZW50UG9pbnRzID0gKGxlZnRSYWRpdXMgKyBjZW50ZXJTZXBhcmF0aW9uICsgcmlnaHRSYWRpdXMpICogMC41OwogICAgICAgIGNvbnN0IGNlbnRlciA9IENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKAogICAgICAgICAgdG9SaWdodENlbnRlciwKICAgICAgICAgICgtbGVmdFJhZGl1cyArIGhhbGZEaXN0YW5jZUJldHdlZW5UYW5nZW50UG9pbnRzKSAvIGNlbnRlclNlcGFyYXRpb24sCiAgICAgICAgICB1bmlvblNjcmF0Y2hDZW50ZXIKICAgICAgICApOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoY2VudGVyLCBsZWZ0Q2VudGVyLCBjZW50ZXIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShjZW50ZXIsIHJlc3VsdC5jZW50ZXIpOwogICAgICAgIHJlc3VsdC5yYWRpdXMgPSBoYWxmRGlzdGFuY2VCZXR3ZWVuVGFuZ2VudFBvaW50czsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBleHBhbmRTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBCb3VuZGluZ1NwaGVyZS5leHBhbmQgPSBmdW5jdGlvbihzcGhlcmUsIHBvaW50LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInNwaGVyZSIsIHNwaGVyZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJwb2ludCIsIHBvaW50KTsKICAgICAgICByZXN1bHQgPSBCb3VuZGluZ1NwaGVyZS5jbG9uZShzcGhlcmUsIHJlc3VsdCk7CiAgICAgICAgY29uc3QgcmFkaXVzID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZSgKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChwb2ludCwgcmVzdWx0LmNlbnRlciwgZXhwYW5kU2NyYXRjaCkKICAgICAgICApOwogICAgICAgIGlmIChyYWRpdXMgPiByZXN1bHQucmFkaXVzKSB7CiAgICAgICAgICByZXN1bHQucmFkaXVzID0gcmFkaXVzOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBCb3VuZGluZ1NwaGVyZS5pbnRlcnNlY3RQbGFuZSA9IGZ1bmN0aW9uKHNwaGVyZSwgcGxhbmUpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInNwaGVyZSIsIHNwaGVyZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJwbGFuZSIsIHBsYW5lKTsKICAgICAgICBjb25zdCBjZW50ZXIgPSBzcGhlcmUuY2VudGVyOwogICAgICAgIGNvbnN0IHJhZGl1cyA9IHNwaGVyZS5yYWRpdXM7CiAgICAgICAgY29uc3Qgbm9ybWFsMiA9IHBsYW5lLm5vcm1hbDsKICAgICAgICBjb25zdCBkaXN0YW5jZVRvUGxhbmUgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KG5vcm1hbDIsIGNlbnRlcikgKyBwbGFuZS5kaXN0YW5jZTsKICAgICAgICBpZiAoZGlzdGFuY2VUb1BsYW5lIDwgLXJhZGl1cykgewogICAgICAgICAgcmV0dXJuIEludGVyc2VjdF9kZWZhdWx0Lk9VVFNJREU7CiAgICAgICAgfSBlbHNlIGlmIChkaXN0YW5jZVRvUGxhbmUgPCByYWRpdXMpIHsKICAgICAgICAgIHJldHVybiBJbnRlcnNlY3RfZGVmYXVsdC5JTlRFUlNFQ1RJTkc7CiAgICAgICAgfQogICAgICAgIHJldHVybiBJbnRlcnNlY3RfZGVmYXVsdC5JTlNJREU7CiAgICAgIH07CiAgICAgIEJvdW5kaW5nU3BoZXJlLnRyYW5zZm9ybSA9IGZ1bmN0aW9uKHNwaGVyZSwgdHJhbnNmb3JtMiwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJzcGhlcmUiLCBzcGhlcmUpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidHJhbnNmb3JtIiwgdHJhbnNmb3JtMik7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IEJvdW5kaW5nU3BoZXJlKCk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5jZW50ZXIgPSBNYXRyaXg0X2RlZmF1bHQubXVsdGlwbHlCeVBvaW50KAogICAgICAgICAgdHJhbnNmb3JtMiwKICAgICAgICAgIHNwaGVyZS5jZW50ZXIsCiAgICAgICAgICByZXN1bHQuY2VudGVyCiAgICAgICAgKTsKICAgICAgICByZXN1bHQucmFkaXVzID0gTWF0cml4NF9kZWZhdWx0LmdldE1heGltdW1TY2FsZSh0cmFuc2Zvcm0yKSAqIHNwaGVyZS5yYWRpdXM7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgZGlzdGFuY2VTcXVhcmVkVG9TY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBCb3VuZGluZ1NwaGVyZS5kaXN0YW5jZVNxdWFyZWRUbyA9IGZ1bmN0aW9uKHNwaGVyZSwgY2FydGVzaWFuMTEpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInNwaGVyZSIsIHNwaGVyZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjYXJ0ZXNpYW4iLCBjYXJ0ZXNpYW4xMSk7CiAgICAgICAgY29uc3QgZGlmZiA9IENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdCgKICAgICAgICAgIHNwaGVyZS5jZW50ZXIsCiAgICAgICAgICBjYXJ0ZXNpYW4xMSwKICAgICAgICAgIGRpc3RhbmNlU3F1YXJlZFRvU2NyYXRjaAogICAgICAgICk7CiAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlKGRpZmYpIC0gc3BoZXJlLnJhZGl1czsKICAgICAgICBpZiAoZGlzdGFuY2UgPD0gMCkgewogICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfQogICAgICAgIHJldHVybiBkaXN0YW5jZSAqIGRpc3RhbmNlOwogICAgICB9OwogICAgICBCb3VuZGluZ1NwaGVyZS50cmFuc2Zvcm1XaXRob3V0U2NhbGUgPSBmdW5jdGlvbihzcGhlcmUsIHRyYW5zZm9ybTIsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgic3BoZXJlIiwgc3BoZXJlKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInRyYW5zZm9ybSIsIHRyYW5zZm9ybTIpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBCb3VuZGluZ1NwaGVyZSgpOwogICAgICAgIH0KICAgICAgICByZXN1bHQuY2VudGVyID0gTWF0cml4NF9kZWZhdWx0Lm11bHRpcGx5QnlQb2ludCgKICAgICAgICAgIHRyYW5zZm9ybTIsCiAgICAgICAgICBzcGhlcmUuY2VudGVyLAogICAgICAgICAgcmVzdWx0LmNlbnRlcgogICAgICAgICk7CiAgICAgICAgcmVzdWx0LnJhZGl1cyA9IHNwaGVyZS5yYWRpdXM7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgc2NyYXRjaENhcnRlc2lhbjMgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIEJvdW5kaW5nU3BoZXJlLmNvbXB1dGVQbGFuZURpc3RhbmNlcyA9IGZ1bmN0aW9uKHNwaGVyZSwgcG9zaXRpb24sIGRpcmVjdGlvbjIsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgic3BoZXJlIiwgc3BoZXJlKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInBvc2l0aW9uIiwgcG9zaXRpb24pOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiZGlyZWN0aW9uIiwgZGlyZWN0aW9uMik7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IEludGVydmFsX2RlZmF1bHQoKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgdG9DZW50ZXIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoCiAgICAgICAgICBzcGhlcmUuY2VudGVyLAogICAgICAgICAgcG9zaXRpb24sCiAgICAgICAgICBzY3JhdGNoQ2FydGVzaWFuMwogICAgICAgICk7CiAgICAgICAgY29uc3QgbWFnID0gQ2FydGVzaWFuM19kZWZhdWx0LmRvdChkaXJlY3Rpb24yLCB0b0NlbnRlcik7CiAgICAgICAgcmVzdWx0LnN0YXJ0ID0gbWFnIC0gc3BoZXJlLnJhZGl1czsKICAgICAgICByZXN1bHQuc3RvcCA9IG1hZyArIHNwaGVyZS5yYWRpdXM7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgcHJvamVjdFRvMkROb3JtYWxTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBwcm9qZWN0VG8yREVhc3RTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBwcm9qZWN0VG8yRE5vcnRoU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgcHJvamVjdFRvMkRXZXN0U2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgcHJvamVjdFRvMkRTb3V0aFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHByb2plY3RUbzJEQ2FydG9ncmFwaGljU2NyYXRjaCA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICBwcm9qZWN0VG8yRFBvc2l0aW9uc1NjcmF0Y2ggPSBuZXcgQXJyYXkoOCk7CiAgICAgIGZvciAobGV0IG4gPSAwOyBuIDwgODsgKytuKSB7CiAgICAgICAgcHJvamVjdFRvMkRQb3NpdGlvbnNTY3JhdGNoW25dID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICB9CiAgICAgIHByb2plY3RUbzJEUHJvamVjdGlvbiA9IG5ldyBHZW9ncmFwaGljUHJvamVjdGlvbl9kZWZhdWx0KCk7CiAgICAgIEJvdW5kaW5nU3BoZXJlLnByb2plY3RUbzJEID0gZnVuY3Rpb24oc3BoZXJlLCBwcm9qZWN0aW9uLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInNwaGVyZSIsIHNwaGVyZSk7CiAgICAgICAgcHJvamVjdFRvMkRQcm9qZWN0aW9uLl9lbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC5kZWZhdWx0OwogICAgICAgIHByb2plY3Rpb24gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChwcm9qZWN0aW9uLCBwcm9qZWN0VG8yRFByb2plY3Rpb24pOwogICAgICAgIGNvbnN0IGVsbGlwc29pZCA9IHByb2plY3Rpb24uZWxsaXBzb2lkOwogICAgICAgIGxldCBjZW50ZXIgPSBzcGhlcmUuY2VudGVyOwogICAgICAgIGNvbnN0IHJhZGl1cyA9IHNwaGVyZS5yYWRpdXM7CiAgICAgICAgbGV0IG5vcm1hbDI7CiAgICAgICAgaWYgKENhcnRlc2lhbjNfZGVmYXVsdC5lcXVhbHMoY2VudGVyLCBDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTykpIHsKICAgICAgICAgIG5vcm1hbDIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoQ2FydGVzaWFuM19kZWZhdWx0LlVOSVRfWCwgcHJvamVjdFRvMkROb3JtYWxTY3JhdGNoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgbm9ybWFsMiA9IGVsbGlwc29pZC5nZW9kZXRpY1N1cmZhY2VOb3JtYWwoY2VudGVyLCBwcm9qZWN0VG8yRE5vcm1hbFNjcmF0Y2gpOwogICAgICAgIH0KICAgICAgICBjb25zdCBlYXN0ID0gQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LlVOSVRfWiwKICAgICAgICAgIG5vcm1hbDIsCiAgICAgICAgICBwcm9qZWN0VG8yREVhc3RTY3JhdGNoCiAgICAgICAgKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKGVhc3QsIGVhc3QpOwogICAgICAgIGNvbnN0IG5vcnRoID0gQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKG5vcm1hbDIsIGVhc3QsIHByb2plY3RUbzJETm9ydGhTY3JhdGNoKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKG5vcnRoLCBub3J0aCk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIobm9ybWFsMiwgcmFkaXVzLCBub3JtYWwyKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcihub3J0aCwgcmFkaXVzLCBub3J0aCk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIoZWFzdCwgcmFkaXVzLCBlYXN0KTsKICAgICAgICBjb25zdCBzb3V0aCA9IENhcnRlc2lhbjNfZGVmYXVsdC5uZWdhdGUobm9ydGgsIHByb2plY3RUbzJEU291dGhTY3JhdGNoKTsKICAgICAgICBjb25zdCB3ZXN0ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5lZ2F0ZShlYXN0LCBwcm9qZWN0VG8yRFdlc3RTY3JhdGNoKTsKICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSBwcm9qZWN0VG8yRFBvc2l0aW9uc1NjcmF0Y2g7CiAgICAgICAgbGV0IGNvcm5lciA9IHBvc2l0aW9uc1swXTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKG5vcm1hbDIsIG5vcnRoLCBjb3JuZXIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoY29ybmVyLCBlYXN0LCBjb3JuZXIpOwogICAgICAgIGNvcm5lciA9IHBvc2l0aW9uc1sxXTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKG5vcm1hbDIsIG5vcnRoLCBjb3JuZXIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoY29ybmVyLCB3ZXN0LCBjb3JuZXIpOwogICAgICAgIGNvcm5lciA9IHBvc2l0aW9uc1syXTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKG5vcm1hbDIsIHNvdXRoLCBjb3JuZXIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoY29ybmVyLCB3ZXN0LCBjb3JuZXIpOwogICAgICAgIGNvcm5lciA9IHBvc2l0aW9uc1szXTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKG5vcm1hbDIsIHNvdXRoLCBjb3JuZXIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoY29ybmVyLCBlYXN0LCBjb3JuZXIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5uZWdhdGUobm9ybWFsMiwgbm9ybWFsMik7CiAgICAgICAgY29ybmVyID0gcG9zaXRpb25zWzRdOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQobm9ybWFsMiwgbm9ydGgsIGNvcm5lcik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChjb3JuZXIsIGVhc3QsIGNvcm5lcik7CiAgICAgICAgY29ybmVyID0gcG9zaXRpb25zWzVdOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQobm9ybWFsMiwgbm9ydGgsIGNvcm5lcik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChjb3JuZXIsIHdlc3QsIGNvcm5lcik7CiAgICAgICAgY29ybmVyID0gcG9zaXRpb25zWzZdOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQobm9ybWFsMiwgc291dGgsIGNvcm5lcik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChjb3JuZXIsIHdlc3QsIGNvcm5lcik7CiAgICAgICAgY29ybmVyID0gcG9zaXRpb25zWzddOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQobm9ybWFsMiwgc291dGgsIGNvcm5lcik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChjb3JuZXIsIGVhc3QsIGNvcm5lcik7CiAgICAgICAgY29uc3QgbGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aDsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHBvc2l0aW9uc1tpXTsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoY2VudGVyLCBwb3NpdGlvbiwgcG9zaXRpb24pOwogICAgICAgICAgY29uc3QgY2FydG9ncmFwaGljMiA9IGVsbGlwc29pZC5jYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpYygKICAgICAgICAgICAgcG9zaXRpb24sCiAgICAgICAgICAgIHByb2plY3RUbzJEQ2FydG9ncmFwaGljU2NyYXRjaAogICAgICAgICAgKTsKICAgICAgICAgIHByb2plY3Rpb24ucHJvamVjdChjYXJ0b2dyYXBoaWMyLCBwb3NpdGlvbik7CiAgICAgICAgfQogICAgICAgIHJlc3VsdCA9IEJvdW5kaW5nU3BoZXJlLmZyb21Qb2ludHMocG9zaXRpb25zLCByZXN1bHQpOwogICAgICAgIGNlbnRlciA9IHJlc3VsdC5jZW50ZXI7CiAgICAgICAgY29uc3QgeCA9IGNlbnRlci54OwogICAgICAgIGNvbnN0IHkgPSBjZW50ZXIueTsKICAgICAgICBjb25zdCB6ID0gY2VudGVyLno7CiAgICAgICAgY2VudGVyLnggPSB6OwogICAgICAgIGNlbnRlci55ID0geDsKICAgICAgICBjZW50ZXIueiA9IHk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQm91bmRpbmdTcGhlcmUuaXNPY2NsdWRlZCA9IGZ1bmN0aW9uKHNwaGVyZSwgb2NjbHVkZXIpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInNwaGVyZSIsIHNwaGVyZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJvY2NsdWRlciIsIG9jY2x1ZGVyKTsKICAgICAgICByZXR1cm4gIW9jY2x1ZGVyLmlzQm91bmRpbmdTcGhlcmVWaXNpYmxlKHNwaGVyZSk7CiAgICAgIH07CiAgICAgIEJvdW5kaW5nU3BoZXJlLmVxdWFscyA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7CiAgICAgICAgcmV0dXJuIGxlZnQgPT09IHJpZ2h0IHx8IGRlZmluZWRfZGVmYXVsdChsZWZ0KSAmJiBkZWZpbmVkX2RlZmF1bHQocmlnaHQpICYmIENhcnRlc2lhbjNfZGVmYXVsdC5lcXVhbHMobGVmdC5jZW50ZXIsIHJpZ2h0LmNlbnRlcikgJiYgbGVmdC5yYWRpdXMgPT09IHJpZ2h0LnJhZGl1czsKICAgICAgfTsKICAgICAgQm91bmRpbmdTcGhlcmUucHJvdG90eXBlLmludGVyc2VjdFBsYW5lID0gZnVuY3Rpb24ocGxhbmUpIHsKICAgICAgICByZXR1cm4gQm91bmRpbmdTcGhlcmUuaW50ZXJzZWN0UGxhbmUodGhpcywgcGxhbmUpOwogICAgICB9OwogICAgICBCb3VuZGluZ1NwaGVyZS5wcm90b3R5cGUuZGlzdGFuY2VTcXVhcmVkVG8gPSBmdW5jdGlvbihjYXJ0ZXNpYW4xMSkgewogICAgICAgIHJldHVybiBCb3VuZGluZ1NwaGVyZS5kaXN0YW5jZVNxdWFyZWRUbyh0aGlzLCBjYXJ0ZXNpYW4xMSk7CiAgICAgIH07CiAgICAgIEJvdW5kaW5nU3BoZXJlLnByb3RvdHlwZS5jb21wdXRlUGxhbmVEaXN0YW5jZXMgPSBmdW5jdGlvbihwb3NpdGlvbiwgZGlyZWN0aW9uMiwgcmVzdWx0KSB7CiAgICAgICAgcmV0dXJuIEJvdW5kaW5nU3BoZXJlLmNvbXB1dGVQbGFuZURpc3RhbmNlcygKICAgICAgICAgIHRoaXMsCiAgICAgICAgICBwb3NpdGlvbiwKICAgICAgICAgIGRpcmVjdGlvbjIsCiAgICAgICAgICByZXN1bHQKICAgICAgICApOwogICAgICB9OwogICAgICBCb3VuZGluZ1NwaGVyZS5wcm90b3R5cGUuaXNPY2NsdWRlZCA9IGZ1bmN0aW9uKG9jY2x1ZGVyKSB7CiAgICAgICAgcmV0dXJuIEJvdW5kaW5nU3BoZXJlLmlzT2NjbHVkZWQodGhpcywgb2NjbHVkZXIpOwogICAgICB9OwogICAgICBCb3VuZGluZ1NwaGVyZS5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24ocmlnaHQpIHsKICAgICAgICByZXR1cm4gQm91bmRpbmdTcGhlcmUuZXF1YWxzKHRoaXMsIHJpZ2h0KTsKICAgICAgfTsKICAgICAgQm91bmRpbmdTcGhlcmUucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24ocmVzdWx0KSB7CiAgICAgICAgcmV0dXJuIEJvdW5kaW5nU3BoZXJlLmNsb25lKHRoaXMsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIEJvdW5kaW5nU3BoZXJlLnByb3RvdHlwZS52b2x1bWUgPSBmdW5jdGlvbigpIHsKICAgICAgICBjb25zdCByYWRpdXMgPSB0aGlzLnJhZGl1czsKICAgICAgICByZXR1cm4gdm9sdW1lQ29uc3RhbnQgKiByYWRpdXMgKiByYWRpdXMgKiByYWRpdXM7CiAgICAgIH07CiAgICAgIEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQgPSBCb3VuZGluZ1NwaGVyZTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1dlYkdMQ29uc3RhbnRzLmpzCiAgdmFyIFdlYkdMQ29uc3RhbnRzLCBXZWJHTENvbnN0YW50c19kZWZhdWx0OwogIHZhciBpbml0X1dlYkdMQ29uc3RhbnRzID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9XZWJHTENvbnN0YW50cy5qcyIoKSB7CiAgICAgIFdlYkdMQ29uc3RhbnRzID0gewogICAgICAgIERFUFRIX0JVRkZFUl9CSVQ6IDI1NiwKICAgICAgICBTVEVOQ0lMX0JVRkZFUl9CSVQ6IDEwMjQsCiAgICAgICAgQ09MT1JfQlVGRkVSX0JJVDogMTYzODQsCiAgICAgICAgUE9JTlRTOiAwLAogICAgICAgIExJTkVTOiAxLAogICAgICAgIExJTkVfTE9PUDogMiwKICAgICAgICBMSU5FX1NUUklQOiAzLAogICAgICAgIFRSSUFOR0xFUzogNCwKICAgICAgICBUUklBTkdMRV9TVFJJUDogNSwKICAgICAgICBUUklBTkdMRV9GQU46IDYsCiAgICAgICAgWkVSTzogMCwKICAgICAgICBPTkU6IDEsCiAgICAgICAgU1JDX0NPTE9SOiA3NjgsCiAgICAgICAgT05FX01JTlVTX1NSQ19DT0xPUjogNzY5LAogICAgICAgIFNSQ19BTFBIQTogNzcwLAogICAgICAgIE9ORV9NSU5VU19TUkNfQUxQSEE6IDc3MSwKICAgICAgICBEU1RfQUxQSEE6IDc3MiwKICAgICAgICBPTkVfTUlOVVNfRFNUX0FMUEhBOiA3NzMsCiAgICAgICAgRFNUX0NPTE9SOiA3NzQsCiAgICAgICAgT05FX01JTlVTX0RTVF9DT0xPUjogNzc1LAogICAgICAgIFNSQ19BTFBIQV9TQVRVUkFURTogNzc2LAogICAgICAgIEZVTkNfQUREOiAzMjc3NCwKICAgICAgICBCTEVORF9FUVVBVElPTjogMzI3NzcsCiAgICAgICAgQkxFTkRfRVFVQVRJT05fUkdCOiAzMjc3NywKICAgICAgICAvLyBzYW1lIGFzIEJMRU5EX0VRVUFUSU9OCiAgICAgICAgQkxFTkRfRVFVQVRJT05fQUxQSEE6IDM0ODc3LAogICAgICAgIEZVTkNfU1VCVFJBQ1Q6IDMyNzc4LAogICAgICAgIEZVTkNfUkVWRVJTRV9TVUJUUkFDVDogMzI3NzksCiAgICAgICAgQkxFTkRfRFNUX1JHQjogMzI5NjgsCiAgICAgICAgQkxFTkRfU1JDX1JHQjogMzI5NjksCiAgICAgICAgQkxFTkRfRFNUX0FMUEhBOiAzMjk3MCwKICAgICAgICBCTEVORF9TUkNfQUxQSEE6IDMyOTcxLAogICAgICAgIENPTlNUQU5UX0NPTE9SOiAzMjc2OSwKICAgICAgICBPTkVfTUlOVVNfQ09OU1RBTlRfQ09MT1I6IDMyNzcwLAogICAgICAgIENPTlNUQU5UX0FMUEhBOiAzMjc3MSwKICAgICAgICBPTkVfTUlOVVNfQ09OU1RBTlRfQUxQSEE6IDMyNzcyLAogICAgICAgIEJMRU5EX0NPTE9SOiAzMjc3MywKICAgICAgICBBUlJBWV9CVUZGRVI6IDM0OTYyLAogICAgICAgIEVMRU1FTlRfQVJSQVlfQlVGRkVSOiAzNDk2MywKICAgICAgICBBUlJBWV9CVUZGRVJfQklORElORzogMzQ5NjQsCiAgICAgICAgRUxFTUVOVF9BUlJBWV9CVUZGRVJfQklORElORzogMzQ5NjUsCiAgICAgICAgU1RSRUFNX0RSQVc6IDM1MDQwLAogICAgICAgIFNUQVRJQ19EUkFXOiAzNTA0NCwKICAgICAgICBEWU5BTUlDX0RSQVc6IDM1MDQ4LAogICAgICAgIEJVRkZFUl9TSVpFOiAzNDY2MCwKICAgICAgICBCVUZGRVJfVVNBR0U6IDM0NjYxLAogICAgICAgIENVUlJFTlRfVkVSVEVYX0FUVFJJQjogMzQzNDIsCiAgICAgICAgRlJPTlQ6IDEwMjgsCiAgICAgICAgQkFDSzogMTAyOSwKICAgICAgICBGUk9OVF9BTkRfQkFDSzogMTAzMiwKICAgICAgICBDVUxMX0ZBQ0U6IDI4ODQsCiAgICAgICAgQkxFTkQ6IDMwNDIsCiAgICAgICAgRElUSEVSOiAzMDI0LAogICAgICAgIFNURU5DSUxfVEVTVDogMjk2MCwKICAgICAgICBERVBUSF9URVNUOiAyOTI5LAogICAgICAgIFNDSVNTT1JfVEVTVDogMzA4OSwKICAgICAgICBQT0xZR09OX09GRlNFVF9GSUxMOiAzMjgyMywKICAgICAgICBTQU1QTEVfQUxQSEFfVE9fQ09WRVJBR0U6IDMyOTI2LAogICAgICAgIFNBTVBMRV9DT1ZFUkFHRTogMzI5MjgsCiAgICAgICAgTk9fRVJST1I6IDAsCiAgICAgICAgSU5WQUxJRF9FTlVNOiAxMjgwLAogICAgICAgIElOVkFMSURfVkFMVUU6IDEyODEsCiAgICAgICAgSU5WQUxJRF9PUEVSQVRJT046IDEyODIsCiAgICAgICAgT1VUX09GX01FTU9SWTogMTI4NSwKICAgICAgICBDVzogMjMwNCwKICAgICAgICBDQ1c6IDIzMDUsCiAgICAgICAgTElORV9XSURUSDogMjg0OSwKICAgICAgICBBTElBU0VEX1BPSU5UX1NJWkVfUkFOR0U6IDMzOTAxLAogICAgICAgIEFMSUFTRURfTElORV9XSURUSF9SQU5HRTogMzM5MDIsCiAgICAgICAgQ1VMTF9GQUNFX01PREU6IDI4ODUsCiAgICAgICAgRlJPTlRfRkFDRTogMjg4NiwKICAgICAgICBERVBUSF9SQU5HRTogMjkyOCwKICAgICAgICBERVBUSF9XUklURU1BU0s6IDI5MzAsCiAgICAgICAgREVQVEhfQ0xFQVJfVkFMVUU6IDI5MzEsCiAgICAgICAgREVQVEhfRlVOQzogMjkzMiwKICAgICAgICBTVEVOQ0lMX0NMRUFSX1ZBTFVFOiAyOTYxLAogICAgICAgIFNURU5DSUxfRlVOQzogMjk2MiwKICAgICAgICBTVEVOQ0lMX0ZBSUw6IDI5NjQsCiAgICAgICAgU1RFTkNJTF9QQVNTX0RFUFRIX0ZBSUw6IDI5NjUsCiAgICAgICAgU1RFTkNJTF9QQVNTX0RFUFRIX1BBU1M6IDI5NjYsCiAgICAgICAgU1RFTkNJTF9SRUY6IDI5NjcsCiAgICAgICAgU1RFTkNJTF9WQUxVRV9NQVNLOiAyOTYzLAogICAgICAgIFNURU5DSUxfV1JJVEVNQVNLOiAyOTY4LAogICAgICAgIFNURU5DSUxfQkFDS19GVU5DOiAzNDgxNiwKICAgICAgICBTVEVOQ0lMX0JBQ0tfRkFJTDogMzQ4MTcsCiAgICAgICAgU1RFTkNJTF9CQUNLX1BBU1NfREVQVEhfRkFJTDogMzQ4MTgsCiAgICAgICAgU1RFTkNJTF9CQUNLX1BBU1NfREVQVEhfUEFTUzogMzQ4MTksCiAgICAgICAgU1RFTkNJTF9CQUNLX1JFRjogMzYwMDMsCiAgICAgICAgU1RFTkNJTF9CQUNLX1ZBTFVFX01BU0s6IDM2MDA0LAogICAgICAgIFNURU5DSUxfQkFDS19XUklURU1BU0s6IDM2MDA1LAogICAgICAgIFZJRVdQT1JUOiAyOTc4LAogICAgICAgIFNDSVNTT1JfQk9YOiAzMDg4LAogICAgICAgIENPTE9SX0NMRUFSX1ZBTFVFOiAzMTA2LAogICAgICAgIENPTE9SX1dSSVRFTUFTSzogMzEwNywKICAgICAgICBVTlBBQ0tfQUxJR05NRU5UOiAzMzE3LAogICAgICAgIFBBQ0tfQUxJR05NRU5UOiAzMzMzLAogICAgICAgIE1BWF9URVhUVVJFX1NJWkU6IDMzNzksCiAgICAgICAgTUFYX1ZJRVdQT1JUX0RJTVM6IDMzODYsCiAgICAgICAgU1VCUElYRUxfQklUUzogMzQwOCwKICAgICAgICBSRURfQklUUzogMzQxMCwKICAgICAgICBHUkVFTl9CSVRTOiAzNDExLAogICAgICAgIEJMVUVfQklUUzogMzQxMiwKICAgICAgICBBTFBIQV9CSVRTOiAzNDEzLAogICAgICAgIERFUFRIX0JJVFM6IDM0MTQsCiAgICAgICAgU1RFTkNJTF9CSVRTOiAzNDE1LAogICAgICAgIFBPTFlHT05fT0ZGU0VUX1VOSVRTOiAxMDc1MiwKICAgICAgICBQT0xZR09OX09GRlNFVF9GQUNUT1I6IDMyODI0LAogICAgICAgIFRFWFRVUkVfQklORElOR18yRDogMzI4NzMsCiAgICAgICAgU0FNUExFX0JVRkZFUlM6IDMyOTM2LAogICAgICAgIFNBTVBMRVM6IDMyOTM3LAogICAgICAgIFNBTVBMRV9DT1ZFUkFHRV9WQUxVRTogMzI5MzgsCiAgICAgICAgU0FNUExFX0NPVkVSQUdFX0lOVkVSVDogMzI5MzksCiAgICAgICAgQ09NUFJFU1NFRF9URVhUVVJFX0ZPUk1BVFM6IDM0NDY3LAogICAgICAgIERPTlRfQ0FSRTogNDM1MiwKICAgICAgICBGQVNURVNUOiA0MzUzLAogICAgICAgIE5JQ0VTVDogNDM1NCwKICAgICAgICBHRU5FUkFURV9NSVBNQVBfSElOVDogMzMxNzAsCiAgICAgICAgQllURTogNTEyMCwKICAgICAgICBVTlNJR05FRF9CWVRFOiA1MTIxLAogICAgICAgIFNIT1JUOiA1MTIyLAogICAgICAgIFVOU0lHTkVEX1NIT1JUOiA1MTIzLAogICAgICAgIElOVDogNTEyNCwKICAgICAgICBVTlNJR05FRF9JTlQ6IDUxMjUsCiAgICAgICAgRkxPQVQ6IDUxMjYsCiAgICAgICAgREVQVEhfQ09NUE9ORU5UOiA2NDAyLAogICAgICAgIEFMUEhBOiA2NDA2LAogICAgICAgIFJHQjogNjQwNywKICAgICAgICBSR0JBOiA2NDA4LAogICAgICAgIExVTUlOQU5DRTogNjQwOSwKICAgICAgICBMVU1JTkFOQ0VfQUxQSEE6IDY0MTAsCiAgICAgICAgVU5TSUdORURfU0hPUlRfNF80XzRfNDogMzI4MTksCiAgICAgICAgVU5TSUdORURfU0hPUlRfNV81XzVfMTogMzI4MjAsCiAgICAgICAgVU5TSUdORURfU0hPUlRfNV82XzU6IDMzNjM1LAogICAgICAgIEZSQUdNRU5UX1NIQURFUjogMzU2MzIsCiAgICAgICAgVkVSVEVYX1NIQURFUjogMzU2MzMsCiAgICAgICAgTUFYX1ZFUlRFWF9BVFRSSUJTOiAzNDkyMSwKICAgICAgICBNQVhfVkVSVEVYX1VOSUZPUk1fVkVDVE9SUzogMzYzNDcsCiAgICAgICAgTUFYX1ZBUllJTkdfVkVDVE9SUzogMzYzNDgsCiAgICAgICAgTUFYX0NPTUJJTkVEX1RFWFRVUkVfSU1BR0VfVU5JVFM6IDM1NjYxLAogICAgICAgIE1BWF9WRVJURVhfVEVYVFVSRV9JTUFHRV9VTklUUzogMzU2NjAsCiAgICAgICAgTUFYX1RFWFRVUkVfSU1BR0VfVU5JVFM6IDM0OTMwLAogICAgICAgIE1BWF9GUkFHTUVOVF9VTklGT1JNX1ZFQ1RPUlM6IDM2MzQ5LAogICAgICAgIFNIQURFUl9UWVBFOiAzNTY2MywKICAgICAgICBERUxFVEVfU1RBVFVTOiAzNTcxMiwKICAgICAgICBMSU5LX1NUQVRVUzogMzU3MTQsCiAgICAgICAgVkFMSURBVEVfU1RBVFVTOiAzNTcxNSwKICAgICAgICBBVFRBQ0hFRF9TSEFERVJTOiAzNTcxNywKICAgICAgICBBQ1RJVkVfVU5JRk9STVM6IDM1NzE4LAogICAgICAgIEFDVElWRV9BVFRSSUJVVEVTOiAzNTcyMSwKICAgICAgICBTSEFESU5HX0xBTkdVQUdFX1ZFUlNJT046IDM1NzI0LAogICAgICAgIENVUlJFTlRfUFJPR1JBTTogMzU3MjUsCiAgICAgICAgTkVWRVI6IDUxMiwKICAgICAgICBMRVNTOiA1MTMsCiAgICAgICAgRVFVQUw6IDUxNCwKICAgICAgICBMRVFVQUw6IDUxNSwKICAgICAgICBHUkVBVEVSOiA1MTYsCiAgICAgICAgTk9URVFVQUw6IDUxNywKICAgICAgICBHRVFVQUw6IDUxOCwKICAgICAgICBBTFdBWVM6IDUxOSwKICAgICAgICBLRUVQOiA3NjgwLAogICAgICAgIFJFUExBQ0U6IDc2ODEsCiAgICAgICAgSU5DUjogNzY4MiwKICAgICAgICBERUNSOiA3NjgzLAogICAgICAgIElOVkVSVDogNTM4NiwKICAgICAgICBJTkNSX1dSQVA6IDM0MDU1LAogICAgICAgIERFQ1JfV1JBUDogMzQwNTYsCiAgICAgICAgVkVORE9SOiA3OTM2LAogICAgICAgIFJFTkRFUkVSOiA3OTM3LAogICAgICAgIFZFUlNJT046IDc5MzgsCiAgICAgICAgTkVBUkVTVDogOTcyOCwKICAgICAgICBMSU5FQVI6IDk3MjksCiAgICAgICAgTkVBUkVTVF9NSVBNQVBfTkVBUkVTVDogOTk4NCwKICAgICAgICBMSU5FQVJfTUlQTUFQX05FQVJFU1Q6IDk5ODUsCiAgICAgICAgTkVBUkVTVF9NSVBNQVBfTElORUFSOiA5OTg2LAogICAgICAgIExJTkVBUl9NSVBNQVBfTElORUFSOiA5OTg3LAogICAgICAgIFRFWFRVUkVfTUFHX0ZJTFRFUjogMTAyNDAsCiAgICAgICAgVEVYVFVSRV9NSU5fRklMVEVSOiAxMDI0MSwKICAgICAgICBURVhUVVJFX1dSQVBfUzogMTAyNDIsCiAgICAgICAgVEVYVFVSRV9XUkFQX1Q6IDEwMjQzLAogICAgICAgIFRFWFRVUkVfMkQ6IDM1NTMsCiAgICAgICAgVEVYVFVSRTogNTg5MCwKICAgICAgICBURVhUVVJFX0NVQkVfTUFQOiAzNDA2NywKICAgICAgICBURVhUVVJFX0JJTkRJTkdfQ1VCRV9NQVA6IDM0MDY4LAogICAgICAgIFRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWDogMzQwNjksCiAgICAgICAgVEVYVFVSRV9DVUJFX01BUF9ORUdBVElWRV9YOiAzNDA3MCwKICAgICAgICBURVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1k6IDM0MDcxLAogICAgICAgIFRFWFRVUkVfQ1VCRV9NQVBfTkVHQVRJVkVfWTogMzQwNzIsCiAgICAgICAgVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9aOiAzNDA3MywKICAgICAgICBURVhUVVJFX0NVQkVfTUFQX05FR0FUSVZFX1o6IDM0MDc0LAogICAgICAgIE1BWF9DVUJFX01BUF9URVhUVVJFX1NJWkU6IDM0MDc2LAogICAgICAgIFRFWFRVUkUwOiAzMzk4NCwKICAgICAgICBURVhUVVJFMTogMzM5ODUsCiAgICAgICAgVEVYVFVSRTI6IDMzOTg2LAogICAgICAgIFRFWFRVUkUzOiAzMzk4NywKICAgICAgICBURVhUVVJFNDogMzM5ODgsCiAgICAgICAgVEVYVFVSRTU6IDMzOTg5LAogICAgICAgIFRFWFRVUkU2OiAzMzk5MCwKICAgICAgICBURVhUVVJFNzogMzM5OTEsCiAgICAgICAgVEVYVFVSRTg6IDMzOTkyLAogICAgICAgIFRFWFRVUkU5OiAzMzk5MywKICAgICAgICBURVhUVVJFMTA6IDMzOTk0LAogICAgICAgIFRFWFRVUkUxMTogMzM5OTUsCiAgICAgICAgVEVYVFVSRTEyOiAzMzk5NiwKICAgICAgICBURVhUVVJFMTM6IDMzOTk3LAogICAgICAgIFRFWFRVUkUxNDogMzM5OTgsCiAgICAgICAgVEVYVFVSRTE1OiAzMzk5OSwKICAgICAgICBURVhUVVJFMTY6IDM0ZTMsCiAgICAgICAgVEVYVFVSRTE3OiAzNDAwMSwKICAgICAgICBURVhUVVJFMTg6IDM0MDAyLAogICAgICAgIFRFWFRVUkUxOTogMzQwMDMsCiAgICAgICAgVEVYVFVSRTIwOiAzNDAwNCwKICAgICAgICBURVhUVVJFMjE6IDM0MDA1LAogICAgICAgIFRFWFRVUkUyMjogMzQwMDYsCiAgICAgICAgVEVYVFVSRTIzOiAzNDAwNywKICAgICAgICBURVhUVVJFMjQ6IDM0MDA4LAogICAgICAgIFRFWFRVUkUyNTogMzQwMDksCiAgICAgICAgVEVYVFVSRTI2OiAzNDAxMCwKICAgICAgICBURVhUVVJFMjc6IDM0MDExLAogICAgICAgIFRFWFRVUkUyODogMzQwMTIsCiAgICAgICAgVEVYVFVSRTI5OiAzNDAxMywKICAgICAgICBURVhUVVJFMzA6IDM0MDE0LAogICAgICAgIFRFWFRVUkUzMTogMzQwMTUsCiAgICAgICAgQUNUSVZFX1RFWFRVUkU6IDM0MDE2LAogICAgICAgIFJFUEVBVDogMTA0OTcsCiAgICAgICAgQ0xBTVBfVE9fRURHRTogMzMwNzEsCiAgICAgICAgTUlSUk9SRURfUkVQRUFUOiAzMzY0OCwKICAgICAgICBGTE9BVF9WRUMyOiAzNTY2NCwKICAgICAgICBGTE9BVF9WRUMzOiAzNTY2NSwKICAgICAgICBGTE9BVF9WRUM0OiAzNTY2NiwKICAgICAgICBJTlRfVkVDMjogMzU2NjcsCiAgICAgICAgSU5UX1ZFQzM6IDM1NjY4LAogICAgICAgIElOVF9WRUM0OiAzNTY2OSwKICAgICAgICBCT09MOiAzNTY3MCwKICAgICAgICBCT09MX1ZFQzI6IDM1NjcxLAogICAgICAgIEJPT0xfVkVDMzogMzU2NzIsCiAgICAgICAgQk9PTF9WRUM0OiAzNTY3MywKICAgICAgICBGTE9BVF9NQVQyOiAzNTY3NCwKICAgICAgICBGTE9BVF9NQVQzOiAzNTY3NSwKICAgICAgICBGTE9BVF9NQVQ0OiAzNTY3NiwKICAgICAgICBTQU1QTEVSXzJEOiAzNTY3OCwKICAgICAgICBTQU1QTEVSX0NVQkU6IDM1NjgwLAogICAgICAgIFZFUlRFWF9BVFRSSUJfQVJSQVlfRU5BQkxFRDogMzQzMzgsCiAgICAgICAgVkVSVEVYX0FUVFJJQl9BUlJBWV9TSVpFOiAzNDMzOSwKICAgICAgICBWRVJURVhfQVRUUklCX0FSUkFZX1NUUklERTogMzQzNDAsCiAgICAgICAgVkVSVEVYX0FUVFJJQl9BUlJBWV9UWVBFOiAzNDM0MSwKICAgICAgICBWRVJURVhfQVRUUklCX0FSUkFZX05PUk1BTElaRUQ6IDM0OTIyLAogICAgICAgIFZFUlRFWF9BVFRSSUJfQVJSQVlfUE9JTlRFUjogMzQzNzMsCiAgICAgICAgVkVSVEVYX0FUVFJJQl9BUlJBWV9CVUZGRVJfQklORElORzogMzQ5NzUsCiAgICAgICAgSU1QTEVNRU5UQVRJT05fQ09MT1JfUkVBRF9UWVBFOiAzNTczOCwKICAgICAgICBJTVBMRU1FTlRBVElPTl9DT0xPUl9SRUFEX0ZPUk1BVDogMzU3MzksCiAgICAgICAgQ09NUElMRV9TVEFUVVM6IDM1NzEzLAogICAgICAgIExPV19GTE9BVDogMzYzMzYsCiAgICAgICAgTUVESVVNX0ZMT0FUOiAzNjMzNywKICAgICAgICBISUdIX0ZMT0FUOiAzNjMzOCwKICAgICAgICBMT1dfSU5UOiAzNjMzOSwKICAgICAgICBNRURJVU1fSU5UOiAzNjM0MCwKICAgICAgICBISUdIX0lOVDogMzYzNDEsCiAgICAgICAgRlJBTUVCVUZGRVI6IDM2MTYwLAogICAgICAgIFJFTkRFUkJVRkZFUjogMzYxNjEsCiAgICAgICAgUkdCQTQ6IDMyODU0LAogICAgICAgIFJHQjVfQTE6IDMyODU1LAogICAgICAgIFJHQjU2NTogMzYxOTQsCiAgICAgICAgREVQVEhfQ09NUE9ORU5UMTY6IDMzMTg5LAogICAgICAgIFNURU5DSUxfSU5ERVg6IDY0MDEsCiAgICAgICAgU1RFTkNJTF9JTkRFWDg6IDM2MTY4LAogICAgICAgIERFUFRIX1NURU5DSUw6IDM0MDQxLAogICAgICAgIFJFTkRFUkJVRkZFUl9XSURUSDogMzYxNjIsCiAgICAgICAgUkVOREVSQlVGRkVSX0hFSUdIVDogMzYxNjMsCiAgICAgICAgUkVOREVSQlVGRkVSX0lOVEVSTkFMX0ZPUk1BVDogMzYxNjQsCiAgICAgICAgUkVOREVSQlVGRkVSX1JFRF9TSVpFOiAzNjE3NiwKICAgICAgICBSRU5ERVJCVUZGRVJfR1JFRU5fU0laRTogMzYxNzcsCiAgICAgICAgUkVOREVSQlVGRkVSX0JMVUVfU0laRTogMzYxNzgsCiAgICAgICAgUkVOREVSQlVGRkVSX0FMUEhBX1NJWkU6IDM2MTc5LAogICAgICAgIFJFTkRFUkJVRkZFUl9ERVBUSF9TSVpFOiAzNjE4MCwKICAgICAgICBSRU5ERVJCVUZGRVJfU1RFTkNJTF9TSVpFOiAzNjE4MSwKICAgICAgICBGUkFNRUJVRkZFUl9BVFRBQ0hNRU5UX09CSkVDVF9UWVBFOiAzNjA0OCwKICAgICAgICBGUkFNRUJVRkZFUl9BVFRBQ0hNRU5UX09CSkVDVF9OQU1FOiAzNjA0OSwKICAgICAgICBGUkFNRUJVRkZFUl9BVFRBQ0hNRU5UX1RFWFRVUkVfTEVWRUw6IDM2MDUwLAogICAgICAgIEZSQU1FQlVGRkVSX0FUVEFDSE1FTlRfVEVYVFVSRV9DVUJFX01BUF9GQUNFOiAzNjA1MSwKICAgICAgICBDT0xPUl9BVFRBQ0hNRU5UMDogMzYwNjQsCiAgICAgICAgREVQVEhfQVRUQUNITUVOVDogMzYwOTYsCiAgICAgICAgU1RFTkNJTF9BVFRBQ0hNRU5UOiAzNjEyOCwKICAgICAgICBERVBUSF9TVEVOQ0lMX0FUVEFDSE1FTlQ6IDMzMzA2LAogICAgICAgIE5PTkU6IDAsCiAgICAgICAgRlJBTUVCVUZGRVJfQ09NUExFVEU6IDM2MDUzLAogICAgICAgIEZSQU1FQlVGRkVSX0lOQ09NUExFVEVfQVRUQUNITUVOVDogMzYwNTQsCiAgICAgICAgRlJBTUVCVUZGRVJfSU5DT01QTEVURV9NSVNTSU5HX0FUVEFDSE1FTlQ6IDM2MDU1LAogICAgICAgIEZSQU1FQlVGRkVSX0lOQ09NUExFVEVfRElNRU5TSU9OUzogMzYwNTcsCiAgICAgICAgRlJBTUVCVUZGRVJfVU5TVVBQT1JURUQ6IDM2MDYxLAogICAgICAgIEZSQU1FQlVGRkVSX0JJTkRJTkc6IDM2MDA2LAogICAgICAgIFJFTkRFUkJVRkZFUl9CSU5ESU5HOiAzNjAwNywKICAgICAgICBNQVhfUkVOREVSQlVGRkVSX1NJWkU6IDM0MDI0LAogICAgICAgIElOVkFMSURfRlJBTUVCVUZGRVJfT1BFUkFUSU9OOiAxMjg2LAogICAgICAgIFVOUEFDS19GTElQX1lfV0VCR0w6IDM3NDQwLAogICAgICAgIFVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTDogMzc0NDEsCiAgICAgICAgQ09OVEVYVF9MT1NUX1dFQkdMOiAzNzQ0MiwKICAgICAgICBVTlBBQ0tfQ09MT1JTUEFDRV9DT05WRVJTSU9OX1dFQkdMOiAzNzQ0MywKICAgICAgICBCUk9XU0VSX0RFRkFVTFRfV0VCR0w6IDM3NDQ0LAogICAgICAgIC8vIFdFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjCiAgICAgICAgQ09NUFJFU1NFRF9SR0JfUzNUQ19EWFQxX0VYVDogMzM3NzYsCiAgICAgICAgQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUMV9FWFQ6IDMzNzc3LAogICAgICAgIENPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDNfRVhUOiAzMzc3OCwKICAgICAgICBDT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQ1X0VYVDogMzM3NzksCiAgICAgICAgLy8gV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjCiAgICAgICAgQ09NUFJFU1NFRF9SR0JfUFZSVENfNEJQUFYxX0lNRzogMzU4NDAsCiAgICAgICAgQ09NUFJFU1NFRF9SR0JfUFZSVENfMkJQUFYxX0lNRzogMzU4NDEsCiAgICAgICAgQ09NUFJFU1NFRF9SR0JBX1BWUlRDXzRCUFBWMV9JTUc6IDM1ODQyLAogICAgICAgIENPTVBSRVNTRURfUkdCQV9QVlJUQ18yQlBQVjFfSU1HOiAzNTg0MywKICAgICAgICAvLyBXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfYXN0YwogICAgICAgIENPTVBSRVNTRURfUkdCQV9BU1RDXzR4NF9XRUJHTDogMzc4MDgsCiAgICAgICAgLy8gV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX2V0YzEKICAgICAgICBDT01QUkVTU0VEX1JHQl9FVEMxX1dFQkdMOiAzNjE5NiwKICAgICAgICAvLyBFWFRfdGV4dHVyZV9jb21wcmVzc2lvbl9icHRjCiAgICAgICAgQ09NUFJFU1NFRF9SR0JBX0JQVENfVU5PUk06IDM2NDkyLAogICAgICAgIC8vIEVYVF9jb2xvcl9idWZmZXJfaGFsZl9mbG9hdAogICAgICAgIEhBTEZfRkxPQVRfT0VTOiAzNjE5MywKICAgICAgICAvLyBEZXNrdG9wIE9wZW5HTAogICAgICAgIERPVUJMRTogNTEzMCwKICAgICAgICAvLyBXZWJHTCAyCiAgICAgICAgUkVBRF9CVUZGRVI6IDMwNzQsCiAgICAgICAgVU5QQUNLX1JPV19MRU5HVEg6IDMzMTQsCiAgICAgICAgVU5QQUNLX1NLSVBfUk9XUzogMzMxNSwKICAgICAgICBVTlBBQ0tfU0tJUF9QSVhFTFM6IDMzMTYsCiAgICAgICAgUEFDS19ST1dfTEVOR1RIOiAzMzMwLAogICAgICAgIFBBQ0tfU0tJUF9ST1dTOiAzMzMxLAogICAgICAgIFBBQ0tfU0tJUF9QSVhFTFM6IDMzMzIsCiAgICAgICAgQ09MT1I6IDYxNDQsCiAgICAgICAgREVQVEg6IDYxNDUsCiAgICAgICAgU1RFTkNJTDogNjE0NiwKICAgICAgICBSRUQ6IDY0MDMsCiAgICAgICAgUkdCODogMzI4NDksCiAgICAgICAgUkdCQTg6IDMyODU2LAogICAgICAgIFJHQjEwX0EyOiAzMjg1NywKICAgICAgICBURVhUVVJFX0JJTkRJTkdfM0Q6IDMyODc0LAogICAgICAgIFVOUEFDS19TS0lQX0lNQUdFUzogMzI4NzcsCiAgICAgICAgVU5QQUNLX0lNQUdFX0hFSUdIVDogMzI4NzgsCiAgICAgICAgVEVYVFVSRV8zRDogMzI4NzksCiAgICAgICAgVEVYVFVSRV9XUkFQX1I6IDMyODgyLAogICAgICAgIE1BWF8zRF9URVhUVVJFX1NJWkU6IDMyODgzLAogICAgICAgIFVOU0lHTkVEX0lOVF8yXzEwXzEwXzEwX1JFVjogMzM2NDAsCiAgICAgICAgTUFYX0VMRU1FTlRTX1ZFUlRJQ0VTOiAzM2UzLAogICAgICAgIE1BWF9FTEVNRU5UU19JTkRJQ0VTOiAzMzAwMSwKICAgICAgICBURVhUVVJFX01JTl9MT0Q6IDMzMDgyLAogICAgICAgIFRFWFRVUkVfTUFYX0xPRDogMzMwODMsCiAgICAgICAgVEVYVFVSRV9CQVNFX0xFVkVMOiAzMzA4NCwKICAgICAgICBURVhUVVJFX01BWF9MRVZFTDogMzMwODUsCiAgICAgICAgTUlOOiAzMjc3NSwKICAgICAgICBNQVg6IDMyNzc2LAogICAgICAgIERFUFRIX0NPTVBPTkVOVDI0OiAzMzE5MCwKICAgICAgICBNQVhfVEVYVFVSRV9MT0RfQklBUzogMzQwNDUsCiAgICAgICAgVEVYVFVSRV9DT01QQVJFX01PREU6IDM0ODkyLAogICAgICAgIFRFWFRVUkVfQ09NUEFSRV9GVU5DOiAzNDg5MywKICAgICAgICBDVVJSRU5UX1FVRVJZOiAzNDkxNywKICAgICAgICBRVUVSWV9SRVNVTFQ6IDM0OTE4LAogICAgICAgIFFVRVJZX1JFU1VMVF9BVkFJTEFCTEU6IDM0OTE5LAogICAgICAgIFNUUkVBTV9SRUFEOiAzNTA0MSwKICAgICAgICBTVFJFQU1fQ09QWTogMzUwNDIsCiAgICAgICAgU1RBVElDX1JFQUQ6IDM1MDQ1LAogICAgICAgIFNUQVRJQ19DT1BZOiAzNTA0NiwKICAgICAgICBEWU5BTUlDX1JFQUQ6IDM1MDQ5LAogICAgICAgIERZTkFNSUNfQ09QWTogMzUwNTAsCiAgICAgICAgTUFYX0RSQVdfQlVGRkVSUzogMzQ4NTIsCiAgICAgICAgRFJBV19CVUZGRVIwOiAzNDg1MywKICAgICAgICBEUkFXX0JVRkZFUjE6IDM0ODU0LAogICAgICAgIERSQVdfQlVGRkVSMjogMzQ4NTUsCiAgICAgICAgRFJBV19CVUZGRVIzOiAzNDg1NiwKICAgICAgICBEUkFXX0JVRkZFUjQ6IDM0ODU3LAogICAgICAgIERSQVdfQlVGRkVSNTogMzQ4NTgsCiAgICAgICAgRFJBV19CVUZGRVI2OiAzNDg1OSwKICAgICAgICBEUkFXX0JVRkZFUjc6IDM0ODYwLAogICAgICAgIERSQVdfQlVGRkVSODogMzQ4NjEsCiAgICAgICAgRFJBV19CVUZGRVI5OiAzNDg2MiwKICAgICAgICBEUkFXX0JVRkZFUjEwOiAzNDg2MywKICAgICAgICBEUkFXX0JVRkZFUjExOiAzNDg2NCwKICAgICAgICBEUkFXX0JVRkZFUjEyOiAzNDg2NSwKICAgICAgICBEUkFXX0JVRkZFUjEzOiAzNDg2NiwKICAgICAgICBEUkFXX0JVRkZFUjE0OiAzNDg2NywKICAgICAgICBEUkFXX0JVRkZFUjE1OiAzNDg2OCwKICAgICAgICBNQVhfRlJBR01FTlRfVU5JRk9STV9DT01QT05FTlRTOiAzNTY1NywKICAgICAgICBNQVhfVkVSVEVYX1VOSUZPUk1fQ09NUE9ORU5UUzogMzU2NTgsCiAgICAgICAgU0FNUExFUl8zRDogMzU2NzksCiAgICAgICAgU0FNUExFUl8yRF9TSEFET1c6IDM1NjgyLAogICAgICAgIEZSQUdNRU5UX1NIQURFUl9ERVJJVkFUSVZFX0hJTlQ6IDM1NzIzLAogICAgICAgIFBJWEVMX1BBQ0tfQlVGRkVSOiAzNTA1MSwKICAgICAgICBQSVhFTF9VTlBBQ0tfQlVGRkVSOiAzNTA1MiwKICAgICAgICBQSVhFTF9QQUNLX0JVRkZFUl9CSU5ESU5HOiAzNTA1MywKICAgICAgICBQSVhFTF9VTlBBQ0tfQlVGRkVSX0JJTkRJTkc6IDM1MDU1LAogICAgICAgIEZMT0FUX01BVDJ4MzogMzU2ODUsCiAgICAgICAgRkxPQVRfTUFUMng0OiAzNTY4NiwKICAgICAgICBGTE9BVF9NQVQzeDI6IDM1Njg3LAogICAgICAgIEZMT0FUX01BVDN4NDogMzU2ODgsCiAgICAgICAgRkxPQVRfTUFUNHgyOiAzNTY4OSwKICAgICAgICBGTE9BVF9NQVQ0eDM6IDM1NjkwLAogICAgICAgIFNSR0I6IDM1OTA0LAogICAgICAgIFNSR0I4OiAzNTkwNSwKICAgICAgICBTUkdCOF9BTFBIQTg6IDM1OTA3LAogICAgICAgIENPTVBBUkVfUkVGX1RPX1RFWFRVUkU6IDM0ODk0LAogICAgICAgIFJHQkEzMkY6IDM0ODM2LAogICAgICAgIFJHQjMyRjogMzQ4MzcsCiAgICAgICAgUkdCQTE2RjogMzQ4NDIsCiAgICAgICAgUkdCMTZGOiAzNDg0MywKICAgICAgICBWRVJURVhfQVRUUklCX0FSUkFZX0lOVEVHRVI6IDM1MDY5LAogICAgICAgIE1BWF9BUlJBWV9URVhUVVJFX0xBWUVSUzogMzUwNzEsCiAgICAgICAgTUlOX1BST0dSQU1fVEVYRUxfT0ZGU0VUOiAzNTA3NiwKICAgICAgICBNQVhfUFJPR1JBTV9URVhFTF9PRkZTRVQ6IDM1MDc3LAogICAgICAgIE1BWF9WQVJZSU5HX0NPTVBPTkVOVFM6IDM1NjU5LAogICAgICAgIFRFWFRVUkVfMkRfQVJSQVk6IDM1ODY2LAogICAgICAgIFRFWFRVUkVfQklORElOR18yRF9BUlJBWTogMzU4NjksCiAgICAgICAgUjExRl9HMTFGX0IxMEY6IDM1ODk4LAogICAgICAgIFVOU0lHTkVEX0lOVF8xMEZfMTFGXzExRl9SRVY6IDM1ODk5LAogICAgICAgIFJHQjlfRTU6IDM1OTAxLAogICAgICAgIFVOU0lHTkVEX0lOVF81XzlfOV85X1JFVjogMzU5MDIsCiAgICAgICAgVFJBTlNGT1JNX0ZFRURCQUNLX0JVRkZFUl9NT0RFOiAzNTk2NywKICAgICAgICBNQVhfVFJBTlNGT1JNX0ZFRURCQUNLX1NFUEFSQVRFX0NPTVBPTkVOVFM6IDM1OTY4LAogICAgICAgIFRSQU5TRk9STV9GRUVEQkFDS19WQVJZSU5HUzogMzU5NzEsCiAgICAgICAgVFJBTlNGT1JNX0ZFRURCQUNLX0JVRkZFUl9TVEFSVDogMzU5NzIsCiAgICAgICAgVFJBTlNGT1JNX0ZFRURCQUNLX0JVRkZFUl9TSVpFOiAzNTk3MywKICAgICAgICBUUkFOU0ZPUk1fRkVFREJBQ0tfUFJJTUlUSVZFU19XUklUVEVOOiAzNTk3NiwKICAgICAgICBSQVNURVJJWkVSX0RJU0NBUkQ6IDM1OTc3LAogICAgICAgIE1BWF9UUkFOU0ZPUk1fRkVFREJBQ0tfSU5URVJMRUFWRURfQ09NUE9ORU5UUzogMzU5NzgsCiAgICAgICAgTUFYX1RSQU5TRk9STV9GRUVEQkFDS19TRVBBUkFURV9BVFRSSUJTOiAzNTk3OSwKICAgICAgICBJTlRFUkxFQVZFRF9BVFRSSUJTOiAzNTk4MCwKICAgICAgICBTRVBBUkFURV9BVFRSSUJTOiAzNTk4MSwKICAgICAgICBUUkFOU0ZPUk1fRkVFREJBQ0tfQlVGRkVSOiAzNTk4MiwKICAgICAgICBUUkFOU0ZPUk1fRkVFREJBQ0tfQlVGRkVSX0JJTkRJTkc6IDM1OTgzLAogICAgICAgIFJHQkEzMlVJOiAzNjIwOCwKICAgICAgICBSR0IzMlVJOiAzNjIwOSwKICAgICAgICBSR0JBMTZVSTogMzYyMTQsCiAgICAgICAgUkdCMTZVSTogMzYyMTUsCiAgICAgICAgUkdCQThVSTogMzYyMjAsCiAgICAgICAgUkdCOFVJOiAzNjIyMSwKICAgICAgICBSR0JBMzJJOiAzNjIyNiwKICAgICAgICBSR0IzMkk6IDM2MjI3LAogICAgICAgIFJHQkExNkk6IDM2MjMyLAogICAgICAgIFJHQjE2STogMzYyMzMsCiAgICAgICAgUkdCQThJOiAzNjIzOCwKICAgICAgICBSR0I4STogMzYyMzksCiAgICAgICAgUkVEX0lOVEVHRVI6IDM2MjQ0LAogICAgICAgIFJHQl9JTlRFR0VSOiAzNjI0OCwKICAgICAgICBSR0JBX0lOVEVHRVI6IDM2MjQ5LAogICAgICAgIFNBTVBMRVJfMkRfQVJSQVk6IDM2Mjg5LAogICAgICAgIFNBTVBMRVJfMkRfQVJSQVlfU0hBRE9XOiAzNjI5MiwKICAgICAgICBTQU1QTEVSX0NVQkVfU0hBRE9XOiAzNjI5MywKICAgICAgICBVTlNJR05FRF9JTlRfVkVDMjogMzYyOTQsCiAgICAgICAgVU5TSUdORURfSU5UX1ZFQzM6IDM2Mjk1LAogICAgICAgIFVOU0lHTkVEX0lOVF9WRUM0OiAzNjI5NiwKICAgICAgICBJTlRfU0FNUExFUl8yRDogMzYyOTgsCiAgICAgICAgSU5UX1NBTVBMRVJfM0Q6IDM2Mjk5LAogICAgICAgIElOVF9TQU1QTEVSX0NVQkU6IDM2MzAwLAogICAgICAgIElOVF9TQU1QTEVSXzJEX0FSUkFZOiAzNjMwMywKICAgICAgICBVTlNJR05FRF9JTlRfU0FNUExFUl8yRDogMzYzMDYsCiAgICAgICAgVU5TSUdORURfSU5UX1NBTVBMRVJfM0Q6IDM2MzA3LAogICAgICAgIFVOU0lHTkVEX0lOVF9TQU1QTEVSX0NVQkU6IDM2MzA4LAogICAgICAgIFVOU0lHTkVEX0lOVF9TQU1QTEVSXzJEX0FSUkFZOiAzNjMxMSwKICAgICAgICBERVBUSF9DT01QT05FTlQzMkY6IDM2MDEyLAogICAgICAgIERFUFRIMzJGX1NURU5DSUw4OiAzNjAxMywKICAgICAgICBGTE9BVF8zMl9VTlNJR05FRF9JTlRfMjRfOF9SRVY6IDM2MjY5LAogICAgICAgIEZSQU1FQlVGRkVSX0FUVEFDSE1FTlRfQ09MT1JfRU5DT0RJTkc6IDMzMjk2LAogICAgICAgIEZSQU1FQlVGRkVSX0FUVEFDSE1FTlRfQ09NUE9ORU5UX1RZUEU6IDMzMjk3LAogICAgICAgIEZSQU1FQlVGRkVSX0FUVEFDSE1FTlRfUkVEX1NJWkU6IDMzMjk4LAogICAgICAgIEZSQU1FQlVGRkVSX0FUVEFDSE1FTlRfR1JFRU5fU0laRTogMzMyOTksCiAgICAgICAgRlJBTUVCVUZGRVJfQVRUQUNITUVOVF9CTFVFX1NJWkU6IDMzMzAwLAogICAgICAgIEZSQU1FQlVGRkVSX0FUVEFDSE1FTlRfQUxQSEFfU0laRTogMzMzMDEsCiAgICAgICAgRlJBTUVCVUZGRVJfQVRUQUNITUVOVF9ERVBUSF9TSVpFOiAzMzMwMiwKICAgICAgICBGUkFNRUJVRkZFUl9BVFRBQ0hNRU5UX1NURU5DSUxfU0laRTogMzMzMDMsCiAgICAgICAgRlJBTUVCVUZGRVJfREVGQVVMVDogMzMzMDQsCiAgICAgICAgVU5TSUdORURfSU5UXzI0Xzg6IDM0MDQyLAogICAgICAgIERFUFRIMjRfU1RFTkNJTDg6IDM1MDU2LAogICAgICAgIFVOU0lHTkVEX05PUk1BTElaRUQ6IDM1ODYzLAogICAgICAgIERSQVdfRlJBTUVCVUZGRVJfQklORElORzogMzYwMDYsCiAgICAgICAgLy8gU2FtZSBhcyBGUkFNRUJVRkZFUl9CSU5ESU5HCiAgICAgICAgUkVBRF9GUkFNRUJVRkZFUjogMzYwMDgsCiAgICAgICAgRFJBV19GUkFNRUJVRkZFUjogMzYwMDksCiAgICAgICAgUkVBRF9GUkFNRUJVRkZFUl9CSU5ESU5HOiAzNjAxMCwKICAgICAgICBSRU5ERVJCVUZGRVJfU0FNUExFUzogMzYwMTEsCiAgICAgICAgRlJBTUVCVUZGRVJfQVRUQUNITUVOVF9URVhUVVJFX0xBWUVSOiAzNjA1MiwKICAgICAgICBNQVhfQ09MT1JfQVRUQUNITUVOVFM6IDM2MDYzLAogICAgICAgIENPTE9SX0FUVEFDSE1FTlQxOiAzNjA2NSwKICAgICAgICBDT0xPUl9BVFRBQ0hNRU5UMjogMzYwNjYsCiAgICAgICAgQ09MT1JfQVRUQUNITUVOVDM6IDM2MDY3LAogICAgICAgIENPTE9SX0FUVEFDSE1FTlQ0OiAzNjA2OCwKICAgICAgICBDT0xPUl9BVFRBQ0hNRU5UNTogMzYwNjksCiAgICAgICAgQ09MT1JfQVRUQUNITUVOVDY6IDM2MDcwLAogICAgICAgIENPTE9SX0FUVEFDSE1FTlQ3OiAzNjA3MSwKICAgICAgICBDT0xPUl9BVFRBQ0hNRU5UODogMzYwNzIsCiAgICAgICAgQ09MT1JfQVRUQUNITUVOVDk6IDM2MDczLAogICAgICAgIENPTE9SX0FUVEFDSE1FTlQxMDogMzYwNzQsCiAgICAgICAgQ09MT1JfQVRUQUNITUVOVDExOiAzNjA3NSwKICAgICAgICBDT0xPUl9BVFRBQ0hNRU5UMTI6IDM2MDc2LAogICAgICAgIENPTE9SX0FUVEFDSE1FTlQxMzogMzYwNzcsCiAgICAgICAgQ09MT1JfQVRUQUNITUVOVDE0OiAzNjA3OCwKICAgICAgICBDT0xPUl9BVFRBQ0hNRU5UMTU6IDM2MDc5LAogICAgICAgIEZSQU1FQlVGRkVSX0lOQ09NUExFVEVfTVVMVElTQU1QTEU6IDM2MTgyLAogICAgICAgIE1BWF9TQU1QTEVTOiAzNjE4MywKICAgICAgICBIQUxGX0ZMT0FUOiA1MTMxLAogICAgICAgIFJHOiAzMzMxOSwKICAgICAgICBSR19JTlRFR0VSOiAzMzMyMCwKICAgICAgICBSODogMzMzMjEsCiAgICAgICAgUkc4OiAzMzMyMywKICAgICAgICBSMTZGOiAzMzMyNSwKICAgICAgICBSMzJGOiAzMzMyNiwKICAgICAgICBSRzE2RjogMzMzMjcsCiAgICAgICAgUkczMkY6IDMzMzI4LAogICAgICAgIFI4STogMzMzMjksCiAgICAgICAgUjhVSTogMzMzMzAsCiAgICAgICAgUjE2STogMzMzMzEsCiAgICAgICAgUjE2VUk6IDMzMzMyLAogICAgICAgIFIzMkk6IDMzMzMzLAogICAgICAgIFIzMlVJOiAzMzMzNCwKICAgICAgICBSRzhJOiAzMzMzNSwKICAgICAgICBSRzhVSTogMzMzMzYsCiAgICAgICAgUkcxNkk6IDMzMzM3LAogICAgICAgIFJHMTZVSTogMzMzMzgsCiAgICAgICAgUkczMkk6IDMzMzM5LAogICAgICAgIFJHMzJVSTogMzMzNDAsCiAgICAgICAgVkVSVEVYX0FSUkFZX0JJTkRJTkc6IDM0MjI5LAogICAgICAgIFI4X1NOT1JNOiAzNjc1NiwKICAgICAgICBSRzhfU05PUk06IDM2NzU3LAogICAgICAgIFJHQjhfU05PUk06IDM2NzU4LAogICAgICAgIFJHQkE4X1NOT1JNOiAzNjc1OSwKICAgICAgICBTSUdORURfTk9STUFMSVpFRDogMzY3NjQsCiAgICAgICAgQ09QWV9SRUFEX0JVRkZFUjogMzY2NjIsCiAgICAgICAgQ09QWV9XUklURV9CVUZGRVI6IDM2NjYzLAogICAgICAgIENPUFlfUkVBRF9CVUZGRVJfQklORElORzogMzY2NjIsCiAgICAgICAgLy8gU2FtZSBhcyBDT1BZX1JFQURfQlVGRkVSCiAgICAgICAgQ09QWV9XUklURV9CVUZGRVJfQklORElORzogMzY2NjMsCiAgICAgICAgLy8gU2FtZSBhcyBDT1BZX1dSSVRFX0JVRkZFUgogICAgICAgIFVOSUZPUk1fQlVGRkVSOiAzNTM0NSwKICAgICAgICBVTklGT1JNX0JVRkZFUl9CSU5ESU5HOiAzNTM2OCwKICAgICAgICBVTklGT1JNX0JVRkZFUl9TVEFSVDogMzUzNjksCiAgICAgICAgVU5JRk9STV9CVUZGRVJfU0laRTogMzUzNzAsCiAgICAgICAgTUFYX1ZFUlRFWF9VTklGT1JNX0JMT0NLUzogMzUzNzEsCiAgICAgICAgTUFYX0ZSQUdNRU5UX1VOSUZPUk1fQkxPQ0tTOiAzNTM3MywKICAgICAgICBNQVhfQ09NQklORURfVU5JRk9STV9CTE9DS1M6IDM1Mzc0LAogICAgICAgIE1BWF9VTklGT1JNX0JVRkZFUl9CSU5ESU5HUzogMzUzNzUsCiAgICAgICAgTUFYX1VOSUZPUk1fQkxPQ0tfU0laRTogMzUzNzYsCiAgICAgICAgTUFYX0NPTUJJTkVEX1ZFUlRFWF9VTklGT1JNX0NPTVBPTkVOVFM6IDM1Mzc3LAogICAgICAgIE1BWF9DT01CSU5FRF9GUkFHTUVOVF9VTklGT1JNX0NPTVBPTkVOVFM6IDM1Mzc5LAogICAgICAgIFVOSUZPUk1fQlVGRkVSX09GRlNFVF9BTElHTk1FTlQ6IDM1MzgwLAogICAgICAgIEFDVElWRV9VTklGT1JNX0JMT0NLUzogMzUzODIsCiAgICAgICAgVU5JRk9STV9UWVBFOiAzNTM4MywKICAgICAgICBVTklGT1JNX1NJWkU6IDM1Mzg0LAogICAgICAgIFVOSUZPUk1fQkxPQ0tfSU5ERVg6IDM1Mzg2LAogICAgICAgIFVOSUZPUk1fT0ZGU0VUOiAzNTM4NywKICAgICAgICBVTklGT1JNX0FSUkFZX1NUUklERTogMzUzODgsCiAgICAgICAgVU5JRk9STV9NQVRSSVhfU1RSSURFOiAzNTM4OSwKICAgICAgICBVTklGT1JNX0lTX1JPV19NQUpPUjogMzUzOTAsCiAgICAgICAgVU5JRk9STV9CTE9DS19CSU5ESU5HOiAzNTM5MSwKICAgICAgICBVTklGT1JNX0JMT0NLX0RBVEFfU0laRTogMzUzOTIsCiAgICAgICAgVU5JRk9STV9CTE9DS19BQ1RJVkVfVU5JRk9STVM6IDM1Mzk0LAogICAgICAgIFVOSUZPUk1fQkxPQ0tfQUNUSVZFX1VOSUZPUk1fSU5ESUNFUzogMzUzOTUsCiAgICAgICAgVU5JRk9STV9CTE9DS19SRUZFUkVOQ0VEX0JZX1ZFUlRFWF9TSEFERVI6IDM1Mzk2LAogICAgICAgIFVOSUZPUk1fQkxPQ0tfUkVGRVJFTkNFRF9CWV9GUkFHTUVOVF9TSEFERVI6IDM1Mzk4LAogICAgICAgIElOVkFMSURfSU5ERVg6IDQyOTQ5NjcyOTUsCiAgICAgICAgTUFYX1ZFUlRFWF9PVVRQVVRfQ09NUE9ORU5UUzogMzcxNTQsCiAgICAgICAgTUFYX0ZSQUdNRU5UX0lOUFVUX0NPTVBPTkVOVFM6IDM3MTU3LAogICAgICAgIE1BWF9TRVJWRVJfV0FJVF9USU1FT1VUOiAzNzEzNywKICAgICAgICBPQkpFQ1RfVFlQRTogMzcxMzgsCiAgICAgICAgU1lOQ19DT05ESVRJT046IDM3MTM5LAogICAgICAgIFNZTkNfU1RBVFVTOiAzNzE0MCwKICAgICAgICBTWU5DX0ZMQUdTOiAzNzE0MSwKICAgICAgICBTWU5DX0ZFTkNFOiAzNzE0MiwKICAgICAgICBTWU5DX0dQVV9DT01NQU5EU19DT01QTEVURTogMzcxNDMsCiAgICAgICAgVU5TSUdOQUxFRDogMzcxNDQsCiAgICAgICAgU0lHTkFMRUQ6IDM3MTQ1LAogICAgICAgIEFMUkVBRFlfU0lHTkFMRUQ6IDM3MTQ2LAogICAgICAgIFRJTUVPVVRfRVhQSVJFRDogMzcxNDcsCiAgICAgICAgQ09ORElUSU9OX1NBVElTRklFRDogMzcxNDgsCiAgICAgICAgV0FJVF9GQUlMRUQ6IDM3MTQ5LAogICAgICAgIFNZTkNfRkxVU0hfQ09NTUFORFNfQklUOiAxLAogICAgICAgIFZFUlRFWF9BVFRSSUJfQVJSQVlfRElWSVNPUjogMzUwNzAsCiAgICAgICAgQU5ZX1NBTVBMRVNfUEFTU0VEOiAzNTg4NywKICAgICAgICBBTllfU0FNUExFU19QQVNTRURfQ09OU0VSVkFUSVZFOiAzNjIwMiwKICAgICAgICBTQU1QTEVSX0JJTkRJTkc6IDM1MDk3LAogICAgICAgIFJHQjEwX0EyVUk6IDM2OTc1LAogICAgICAgIElOVF8yXzEwXzEwXzEwX1JFVjogMzYyNTUsCiAgICAgICAgVFJBTlNGT1JNX0ZFRURCQUNLOiAzNjM4NiwKICAgICAgICBUUkFOU0ZPUk1fRkVFREJBQ0tfUEFVU0VEOiAzNjM4NywKICAgICAgICBUUkFOU0ZPUk1fRkVFREJBQ0tfQUNUSVZFOiAzNjM4OCwKICAgICAgICBUUkFOU0ZPUk1fRkVFREJBQ0tfQklORElORzogMzYzODksCiAgICAgICAgQ09NUFJFU1NFRF9SMTFfRUFDOiAzNzQ4OCwKICAgICAgICBDT01QUkVTU0VEX1NJR05FRF9SMTFfRUFDOiAzNzQ4OSwKICAgICAgICBDT01QUkVTU0VEX1JHMTFfRUFDOiAzNzQ5MCwKICAgICAgICBDT01QUkVTU0VEX1NJR05FRF9SRzExX0VBQzogMzc0OTEsCiAgICAgICAgQ09NUFJFU1NFRF9SR0I4X0VUQzI6IDM3NDkyLAogICAgICAgIENPTVBSRVNTRURfU1JHQjhfRVRDMjogMzc0OTMsCiAgICAgICAgQ09NUFJFU1NFRF9SR0I4X1BVTkNIVEhST1VHSF9BTFBIQTFfRVRDMjogMzc0OTQsCiAgICAgICAgQ09NUFJFU1NFRF9TUkdCOF9QVU5DSFRIUk9VR0hfQUxQSEExX0VUQzI6IDM3NDk1LAogICAgICAgIENPTVBSRVNTRURfUkdCQThfRVRDMl9FQUM6IDM3NDk2LAogICAgICAgIENPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0VUQzJfRUFDOiAzNzQ5NywKICAgICAgICBURVhUVVJFX0lNTVVUQUJMRV9GT1JNQVQ6IDM3MTY3LAogICAgICAgIE1BWF9FTEVNRU5UX0lOREVYOiAzNjIwMywKICAgICAgICBURVhUVVJFX0lNTVVUQUJMRV9MRVZFTFM6IDMzNTAzLAogICAgICAgIC8vIEV4dGVuc2lvbnMKICAgICAgICBNQVhfVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQ6IDM0MDQ3CiAgICAgIH07CiAgICAgIFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQgPSBPYmplY3QuZnJlZXplKFdlYkdMQ29uc3RhbnRzKTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0NvbXBvbmVudERhdGF0eXBlLmpzCiAgdmFyIENvbXBvbmVudERhdGF0eXBlLCBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0OwogIHZhciBpbml0X0NvbXBvbmVudERhdGF0eXBlID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9Db21wb25lbnREYXRhdHlwZS5qcyIoKSB7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfV2ViR0xDb25zdGFudHMoKTsKICAgICAgQ29tcG9uZW50RGF0YXR5cGUgPSB7CiAgICAgICAgLyoqCiAgICAgICAgICogOC1iaXQgc2lnbmVkIGJ5dGUgY29ycmVzcG9uZGluZyB0byA8Y29kZT5nbC5CWVRFPC9jb2RlPiBhbmQgdGhlIHR5cGUKICAgICAgICAgKiBvZiBhbiBlbGVtZW50IGluIDxjb2RlPkludDhBcnJheTwvY29kZT4uCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIEJZVEU6IFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuQllURSwKICAgICAgICAvKioKICAgICAgICAgKiA4LWJpdCB1bnNpZ25lZCBieXRlIGNvcnJlc3BvbmRpbmcgdG8gPGNvZGU+VU5TSUdORURfQllURTwvY29kZT4gYW5kIHRoZSB0eXBlCiAgICAgICAgICogb2YgYW4gZWxlbWVudCBpbiA8Y29kZT5VaW50OEFycmF5PC9jb2RlPi4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgVU5TSUdORURfQllURTogV2ViR0xDb25zdGFudHNfZGVmYXVsdC5VTlNJR05FRF9CWVRFLAogICAgICAgIC8qKgogICAgICAgICAqIDE2LWJpdCBzaWduZWQgc2hvcnQgY29ycmVzcG9uZGluZyB0byA8Y29kZT5TSE9SVDwvY29kZT4gYW5kIHRoZSB0eXBlCiAgICAgICAgICogb2YgYW4gZWxlbWVudCBpbiA8Y29kZT5JbnQxNkFycmF5PC9jb2RlPi4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgU0hPUlQ6IFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuU0hPUlQsCiAgICAgICAgLyoqCiAgICAgICAgICogMTYtYml0IHVuc2lnbmVkIHNob3J0IGNvcnJlc3BvbmRpbmcgdG8gPGNvZGU+VU5TSUdORURfU0hPUlQ8L2NvZGU+IGFuZCB0aGUgdHlwZQogICAgICAgICAqIG9mIGFuIGVsZW1lbnQgaW4gPGNvZGU+VWludDE2QXJyYXk8L2NvZGU+LgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBVTlNJR05FRF9TSE9SVDogV2ViR0xDb25zdGFudHNfZGVmYXVsdC5VTlNJR05FRF9TSE9SVCwKICAgICAgICAvKioKICAgICAgICAgKiAzMi1iaXQgc2lnbmVkIGludCBjb3JyZXNwb25kaW5nIHRvIDxjb2RlPklOVDwvY29kZT4gYW5kIHRoZSB0eXBlCiAgICAgICAgICogb2YgYW4gZWxlbWVudCBpbiA8Y29kZT5JbnQzMkFycmF5PC9jb2RlPi4KICAgICAgICAgKgogICAgICAgICAqIEBtZW1iZXJPZiBDb21wb25lbnREYXRhdHlwZQogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBJTlQ6IFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuSU5ULAogICAgICAgIC8qKgogICAgICAgICAqIDMyLWJpdCB1bnNpZ25lZCBpbnQgY29ycmVzcG9uZGluZyB0byA8Y29kZT5VTlNJR05FRF9JTlQ8L2NvZGU+IGFuZCB0aGUgdHlwZQogICAgICAgICAqIG9mIGFuIGVsZW1lbnQgaW4gPGNvZGU+VWludDMyQXJyYXk8L2NvZGU+LgogICAgICAgICAqCiAgICAgICAgICogQG1lbWJlck9mIENvbXBvbmVudERhdGF0eXBlCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIFVOU0lHTkVEX0lOVDogV2ViR0xDb25zdGFudHNfZGVmYXVsdC5VTlNJR05FRF9JTlQsCiAgICAgICAgLyoqCiAgICAgICAgICogMzItYml0IGZsb2F0aW5nLXBvaW50IGNvcnJlc3BvbmRpbmcgdG8gPGNvZGU+RkxPQVQ8L2NvZGU+IGFuZCB0aGUgdHlwZQogICAgICAgICAqIG9mIGFuIGVsZW1lbnQgaW4gPGNvZGU+RmxvYXQzMkFycmF5PC9jb2RlPi4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgRkxPQVQ6IFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgLyoqCiAgICAgICAgICogNjQtYml0IGZsb2F0aW5nLXBvaW50IGNvcnJlc3BvbmRpbmcgdG8gPGNvZGU+Z2wuRE9VQkxFPC9jb2RlPiAoaW4gRGVza3RvcCBPcGVuR0w7CiAgICAgICAgICogdGhpcyBpcyBub3Qgc3VwcG9ydGVkIGluIFdlYkdMLCBhbmQgaXMgZW11bGF0ZWQgaW4gQ2VzaXVtIHZpYSB7QGxpbmsgR2VvbWV0cnlQaXBlbGluZS5lbmNvZGVBdHRyaWJ1dGV9KQogICAgICAgICAqIGFuZCB0aGUgdHlwZSBvZiBhbiBlbGVtZW50IGluIDxjb2RlPkZsb2F0NjRBcnJheTwvY29kZT4uCiAgICAgICAgICoKICAgICAgICAgKiBAbWVtYmVyT2YgQ29tcG9uZW50RGF0YXR5cGUKICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICogQGRlZmF1bHQgMHgxNDBBCiAgICAgICAgICovCiAgICAgICAgRE9VQkxFOiBXZWJHTENvbnN0YW50c19kZWZhdWx0LkRPVUJMRQogICAgICB9OwogICAgICBDb21wb25lbnREYXRhdHlwZS5nZXRTaXplSW5CeXRlcyA9IGZ1bmN0aW9uKGNvbXBvbmVudERhdGF0eXBlKSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoY29tcG9uZW50RGF0YXR5cGUpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgidmFsdWUgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIHN3aXRjaCAoY29tcG9uZW50RGF0YXR5cGUpIHsKICAgICAgICAgIGNhc2UgQ29tcG9uZW50RGF0YXR5cGUuQllURToKICAgICAgICAgICAgcmV0dXJuIEludDhBcnJheS5CWVRFU19QRVJfRUxFTUVOVDsKICAgICAgICAgIGNhc2UgQ29tcG9uZW50RGF0YXR5cGUuVU5TSUdORURfQllURToKICAgICAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkuQllURVNfUEVSX0VMRU1FTlQ7CiAgICAgICAgICBjYXNlIENvbXBvbmVudERhdGF0eXBlLlNIT1JUOgogICAgICAgICAgICByZXR1cm4gSW50MTZBcnJheS5CWVRFU19QRVJfRUxFTUVOVDsKICAgICAgICAgIGNhc2UgQ29tcG9uZW50RGF0YXR5cGUuVU5TSUdORURfU0hPUlQ6CiAgICAgICAgICAgIHJldHVybiBVaW50MTZBcnJheS5CWVRFU19QRVJfRUxFTUVOVDsKICAgICAgICAgIGNhc2UgQ29tcG9uZW50RGF0YXR5cGUuSU5UOgogICAgICAgICAgICByZXR1cm4gSW50MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVDsKICAgICAgICAgIGNhc2UgQ29tcG9uZW50RGF0YXR5cGUuVU5TSUdORURfSU5UOgogICAgICAgICAgICByZXR1cm4gVWludDMyQXJyYXkuQllURVNfUEVSX0VMRU1FTlQ7CiAgICAgICAgICBjYXNlIENvbXBvbmVudERhdGF0eXBlLkZMT0FUOgogICAgICAgICAgICByZXR1cm4gRmxvYXQzMkFycmF5LkJZVEVTX1BFUl9FTEVNRU5UOwogICAgICAgICAgY2FzZSBDb21wb25lbnREYXRhdHlwZS5ET1VCTEU6CiAgICAgICAgICAgIHJldHVybiBGbG9hdDY0QXJyYXkuQllURVNfUEVSX0VMRU1FTlQ7CiAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiY29tcG9uZW50RGF0YXR5cGUgaXMgbm90IGEgdmFsaWQgdmFsdWUuIik7CiAgICAgICAgfQogICAgICB9OwogICAgICBDb21wb25lbnREYXRhdHlwZS5mcm9tVHlwZWRBcnJheSA9IGZ1bmN0aW9uKGFycmF5KSB7CiAgICAgICAgaWYgKGFycmF5IGluc3RhbmNlb2YgSW50OEFycmF5KSB7CiAgICAgICAgICByZXR1cm4gQ29tcG9uZW50RGF0YXR5cGUuQllURTsKICAgICAgICB9CiAgICAgICAgaWYgKGFycmF5IGluc3RhbmNlb2YgVWludDhBcnJheSkgewogICAgICAgICAgcmV0dXJuIENvbXBvbmVudERhdGF0eXBlLlVOU0lHTkVEX0JZVEU7CiAgICAgICAgfQogICAgICAgIGlmIChhcnJheSBpbnN0YW5jZW9mIEludDE2QXJyYXkpIHsKICAgICAgICAgIHJldHVybiBDb21wb25lbnREYXRhdHlwZS5TSE9SVDsKICAgICAgICB9CiAgICAgICAgaWYgKGFycmF5IGluc3RhbmNlb2YgVWludDE2QXJyYXkpIHsKICAgICAgICAgIHJldHVybiBDb21wb25lbnREYXRhdHlwZS5VTlNJR05FRF9TSE9SVDsKICAgICAgICB9CiAgICAgICAgaWYgKGFycmF5IGluc3RhbmNlb2YgSW50MzJBcnJheSkgewogICAgICAgICAgcmV0dXJuIENvbXBvbmVudERhdGF0eXBlLklOVDsKICAgICAgICB9CiAgICAgICAgaWYgKGFycmF5IGluc3RhbmNlb2YgVWludDMyQXJyYXkpIHsKICAgICAgICAgIHJldHVybiBDb21wb25lbnREYXRhdHlwZS5VTlNJR05FRF9JTlQ7CiAgICAgICAgfQogICAgICAgIGlmIChhcnJheSBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheSkgewogICAgICAgICAgcmV0dXJuIENvbXBvbmVudERhdGF0eXBlLkZMT0FUOwogICAgICAgIH0KICAgICAgICBpZiAoYXJyYXkgaW5zdGFuY2VvZiBGbG9hdDY0QXJyYXkpIHsKICAgICAgICAgIHJldHVybiBDb21wb25lbnREYXRhdHlwZS5ET1VCTEU7CiAgICAgICAgfQogICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgImFycmF5IG11c3QgYmUgYW4gSW50OEFycmF5LCBVaW50OEFycmF5LCBJbnQxNkFycmF5LCBVaW50MTZBcnJheSwgSW50MzJBcnJheSwgVWludDMyQXJyYXksIEZsb2F0MzJBcnJheSwgb3IgRmxvYXQ2NEFycmF5LiIKICAgICAgICApOwogICAgICB9OwogICAgICBDb21wb25lbnREYXRhdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uKGNvbXBvbmVudERhdGF0eXBlKSB7CiAgICAgICAgcmV0dXJuIGRlZmluZWRfZGVmYXVsdChjb21wb25lbnREYXRhdHlwZSkgJiYgKGNvbXBvbmVudERhdGF0eXBlID09PSBDb21wb25lbnREYXRhdHlwZS5CWVRFIHx8IGNvbXBvbmVudERhdGF0eXBlID09PSBDb21wb25lbnREYXRhdHlwZS5VTlNJR05FRF9CWVRFIHx8IGNvbXBvbmVudERhdGF0eXBlID09PSBDb21wb25lbnREYXRhdHlwZS5TSE9SVCB8fCBjb21wb25lbnREYXRhdHlwZSA9PT0gQ29tcG9uZW50RGF0YXR5cGUuVU5TSUdORURfU0hPUlQgfHwgY29tcG9uZW50RGF0YXR5cGUgPT09IENvbXBvbmVudERhdGF0eXBlLklOVCB8fCBjb21wb25lbnREYXRhdHlwZSA9PT0gQ29tcG9uZW50RGF0YXR5cGUuVU5TSUdORURfSU5UIHx8IGNvbXBvbmVudERhdGF0eXBlID09PSBDb21wb25lbnREYXRhdHlwZS5GTE9BVCB8fCBjb21wb25lbnREYXRhdHlwZSA9PT0gQ29tcG9uZW50RGF0YXR5cGUuRE9VQkxFKTsKICAgICAgfTsKICAgICAgQ29tcG9uZW50RGF0YXR5cGUuY3JlYXRlVHlwZWRBcnJheSA9IGZ1bmN0aW9uKGNvbXBvbmVudERhdGF0eXBlLCB2YWx1ZXNPckxlbmd0aCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGNvbXBvbmVudERhdGF0eXBlKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImNvbXBvbmVudERhdGF0eXBlIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdCh2YWx1ZXNPckxlbmd0aCkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJ2YWx1ZXNPckxlbmd0aCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgc3dpdGNoIChjb21wb25lbnREYXRhdHlwZSkgewogICAgICAgICAgY2FzZSBDb21wb25lbnREYXRhdHlwZS5CWVRFOgogICAgICAgICAgICByZXR1cm4gbmV3IEludDhBcnJheSh2YWx1ZXNPckxlbmd0aCk7CiAgICAgICAgICBjYXNlIENvbXBvbmVudERhdGF0eXBlLlVOU0lHTkVEX0JZVEU6CiAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheSh2YWx1ZXNPckxlbmd0aCk7CiAgICAgICAgICBjYXNlIENvbXBvbmVudERhdGF0eXBlLlNIT1JUOgogICAgICAgICAgICByZXR1cm4gbmV3IEludDE2QXJyYXkodmFsdWVzT3JMZW5ndGgpOwogICAgICAgICAgY2FzZSBDb21wb25lbnREYXRhdHlwZS5VTlNJR05FRF9TSE9SVDoKICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50MTZBcnJheSh2YWx1ZXNPckxlbmd0aCk7CiAgICAgICAgICBjYXNlIENvbXBvbmVudERhdGF0eXBlLklOVDoKICAgICAgICAgICAgcmV0dXJuIG5ldyBJbnQzMkFycmF5KHZhbHVlc09yTGVuZ3RoKTsKICAgICAgICAgIGNhc2UgQ29tcG9uZW50RGF0YXR5cGUuVU5TSUdORURfSU5UOgogICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQzMkFycmF5KHZhbHVlc09yTGVuZ3RoKTsKICAgICAgICAgIGNhc2UgQ29tcG9uZW50RGF0YXR5cGUuRkxPQVQ6CiAgICAgICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KHZhbHVlc09yTGVuZ3RoKTsKICAgICAgICAgIGNhc2UgQ29tcG9uZW50RGF0YXR5cGUuRE9VQkxFOgogICAgICAgICAgICByZXR1cm4gbmV3IEZsb2F0NjRBcnJheSh2YWx1ZXNPckxlbmd0aCk7CiAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiY29tcG9uZW50RGF0YXR5cGUgaXMgbm90IGEgdmFsaWQgdmFsdWUuIik7CiAgICAgICAgfQogICAgICB9OwogICAgICBDb21wb25lbnREYXRhdHlwZS5jcmVhdGVBcnJheUJ1ZmZlclZpZXcgPSBmdW5jdGlvbihjb21wb25lbnREYXRhdHlwZSwgYnVmZmVyLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChjb21wb25lbnREYXRhdHlwZSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJjb21wb25lbnREYXRhdHlwZSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoYnVmZmVyKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImJ1ZmZlciBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgYnl0ZU9mZnNldCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGJ5dGVPZmZzZXQsIDApOwogICAgICAgIGxlbmd0aCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KAogICAgICAgICAgbGVuZ3RoLAogICAgICAgICAgKGJ1ZmZlci5ieXRlTGVuZ3RoIC0gYnl0ZU9mZnNldCkgLyBDb21wb25lbnREYXRhdHlwZS5nZXRTaXplSW5CeXRlcyhjb21wb25lbnREYXRhdHlwZSkKICAgICAgICApOwogICAgICAgIHN3aXRjaCAoY29tcG9uZW50RGF0YXR5cGUpIHsKICAgICAgICAgIGNhc2UgQ29tcG9uZW50RGF0YXR5cGUuQllURToKICAgICAgICAgICAgcmV0dXJuIG5ldyBJbnQ4QXJyYXkoYnVmZmVyLCBieXRlT2Zmc2V0LCBsZW5ndGgpOwogICAgICAgICAgY2FzZSBDb21wb25lbnREYXRhdHlwZS5VTlNJR05FRF9CWVRFOgogICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyLCBieXRlT2Zmc2V0LCBsZW5ndGgpOwogICAgICAgICAgY2FzZSBDb21wb25lbnREYXRhdHlwZS5TSE9SVDoKICAgICAgICAgICAgcmV0dXJuIG5ldyBJbnQxNkFycmF5KGJ1ZmZlciwgYnl0ZU9mZnNldCwgbGVuZ3RoKTsKICAgICAgICAgIGNhc2UgQ29tcG9uZW50RGF0YXR5cGUuVU5TSUdORURfU0hPUlQ6CiAgICAgICAgICAgIHJldHVybiBuZXcgVWludDE2QXJyYXkoYnVmZmVyLCBieXRlT2Zmc2V0LCBsZW5ndGgpOwogICAgICAgICAgY2FzZSBDb21wb25lbnREYXRhdHlwZS5JTlQ6CiAgICAgICAgICAgIHJldHVybiBuZXcgSW50MzJBcnJheShidWZmZXIsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7CiAgICAgICAgICBjYXNlIENvbXBvbmVudERhdGF0eXBlLlVOU0lHTkVEX0lOVDoKICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50MzJBcnJheShidWZmZXIsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7CiAgICAgICAgICBjYXNlIENvbXBvbmVudERhdGF0eXBlLkZMT0FUOgogICAgICAgICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShidWZmZXIsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7CiAgICAgICAgICBjYXNlIENvbXBvbmVudERhdGF0eXBlLkRPVUJMRToKICAgICAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDY0QXJyYXkoYnVmZmVyLCBieXRlT2Zmc2V0LCBsZW5ndGgpOwogICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImNvbXBvbmVudERhdGF0eXBlIGlzIG5vdCBhIHZhbGlkIHZhbHVlLiIpOwogICAgICAgIH0KICAgICAgfTsKICAgICAgQ29tcG9uZW50RGF0YXR5cGUuZnJvbU5hbWUgPSBmdW5jdGlvbihuYW1lKSB7CiAgICAgICAgc3dpdGNoIChuYW1lKSB7CiAgICAgICAgICBjYXNlICJCWVRFIjoKICAgICAgICAgICAgcmV0dXJuIENvbXBvbmVudERhdGF0eXBlLkJZVEU7CiAgICAgICAgICBjYXNlICJVTlNJR05FRF9CWVRFIjoKICAgICAgICAgICAgcmV0dXJuIENvbXBvbmVudERhdGF0eXBlLlVOU0lHTkVEX0JZVEU7CiAgICAgICAgICBjYXNlICJTSE9SVCI6CiAgICAgICAgICAgIHJldHVybiBDb21wb25lbnREYXRhdHlwZS5TSE9SVDsKICAgICAgICAgIGNhc2UgIlVOU0lHTkVEX1NIT1JUIjoKICAgICAgICAgICAgcmV0dXJuIENvbXBvbmVudERhdGF0eXBlLlVOU0lHTkVEX1NIT1JUOwogICAgICAgICAgY2FzZSAiSU5UIjoKICAgICAgICAgICAgcmV0dXJuIENvbXBvbmVudERhdGF0eXBlLklOVDsKICAgICAgICAgIGNhc2UgIlVOU0lHTkVEX0lOVCI6CiAgICAgICAgICAgIHJldHVybiBDb21wb25lbnREYXRhdHlwZS5VTlNJR05FRF9JTlQ7CiAgICAgICAgICBjYXNlICJGTE9BVCI6CiAgICAgICAgICAgIHJldHVybiBDb21wb25lbnREYXRhdHlwZS5GTE9BVDsKICAgICAgICAgIGNhc2UgIkRPVUJMRSI6CiAgICAgICAgICAgIHJldHVybiBDb21wb25lbnREYXRhdHlwZS5ET1VCTEU7CiAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgibmFtZSBpcyBub3QgYSB2YWxpZCB2YWx1ZS4iKTsKICAgICAgICB9CiAgICAgIH07CiAgICAgIENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQgPSBPYmplY3QuZnJlZXplKENvbXBvbmVudERhdGF0eXBlKTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0dlb21ldHJ5VHlwZS5qcwogIHZhciBHZW9tZXRyeVR5cGUsIEdlb21ldHJ5VHlwZV9kZWZhdWx0OwogIHZhciBpbml0X0dlb21ldHJ5VHlwZSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvR2VvbWV0cnlUeXBlLmpzIigpIHsKICAgICAgR2VvbWV0cnlUeXBlID0gewogICAgICAgIE5PTkU6IDAsCiAgICAgICAgVFJJQU5HTEVTOiAxLAogICAgICAgIExJTkVTOiAyLAogICAgICAgIFBPTFlMSU5FUzogMwogICAgICB9OwogICAgICBHZW9tZXRyeVR5cGVfZGVmYXVsdCA9IE9iamVjdC5mcmVlemUoR2VvbWV0cnlUeXBlKTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL01hdHJpeDIuanMKICBmdW5jdGlvbiBNYXRyaXgyKGNvbHVtbjBSb3cwLCBjb2x1bW4xUm93MCwgY29sdW1uMFJvdzEsIGNvbHVtbjFSb3cxKSB7CiAgICB0aGlzWzBdID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoY29sdW1uMFJvdzAsIDApOwogICAgdGhpc1sxXSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGNvbHVtbjBSb3cxLCAwKTsKICAgIHRoaXNbMl0gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChjb2x1bW4xUm93MCwgMCk7CiAgICB0aGlzWzNdID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoY29sdW1uMVJvdzEsIDApOwogIH0KICB2YXIgc2NhbGVTY3JhdGNoMTMsIHNjYWxlU2NyYXRjaDIzLCBzY3JhdGNoQ29sdW1uMywgc2NhbGVTY3JhdGNoMzMsIHNjYWxlU2NyYXRjaDQzLCBzY2FsZVNjcmF0Y2g1MywgTWF0cml4Ml9kZWZhdWx0OwogIHZhciBpbml0X01hdHJpeDIgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL01hdHJpeDIuanMiKCkgewogICAgICBpbml0X0NhcnRlc2lhbjIoKTsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBNYXRyaXgyLnBhY2tlZExlbmd0aCA9IDQ7CiAgICAgIE1hdHJpeDIucGFjayA9IGZ1bmN0aW9uKHZhbHVlLCBhcnJheSwgc3RhcnRpbmdJbmRleCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidmFsdWUiLCB2YWx1ZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlWzBdOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZVsxXTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWVbMl07CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlWzNdOwogICAgICAgIHJldHVybiBhcnJheTsKICAgICAgfTsKICAgICAgTWF0cml4Mi51bnBhY2sgPSBmdW5jdGlvbihhcnJheSwgc3RhcnRpbmdJbmRleCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IE1hdHJpeDIoKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0WzBdID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICByZXN1bHRbMV0gPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIHJlc3VsdFsyXSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgcmVzdWx0WzNdID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXgyLnBhY2tBcnJheSA9IGZ1bmN0aW9uKGFycmF5LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIGNvbnN0IGxlbmd0aCA9IGFycmF5Lmxlbmd0aDsKICAgICAgICBjb25zdCByZXN1bHRMZW5ndGggPSBsZW5ndGggKiA0OwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBBcnJheShyZXN1bHRMZW5ndGgpOwogICAgICAgIH0gZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkocmVzdWx0KSAmJiByZXN1bHQubGVuZ3RoICE9PSByZXN1bHRMZW5ndGgpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgICAiSWYgcmVzdWx0IGlzIGEgdHlwZWQgYXJyYXksIGl0IG11c3QgaGF2ZSBleGFjdGx5IGFycmF5Lmxlbmd0aCAqIDQgZWxlbWVudHMiCiAgICAgICAgICApOwogICAgICAgIH0gZWxzZSBpZiAocmVzdWx0Lmxlbmd0aCAhPT0gcmVzdWx0TGVuZ3RoKSB7CiAgICAgICAgICByZXN1bHQubGVuZ3RoID0gcmVzdWx0TGVuZ3RoOwogICAgICAgIH0KICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgICBNYXRyaXgyLnBhY2soYXJyYXlbaV0sIHJlc3VsdCwgaSAqIDQpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXgyLnVucGFja0FycmF5ID0gZnVuY3Rpb24oYXJyYXksIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuT3JFcXVhbHMoImFycmF5Lmxlbmd0aCIsIGFycmF5Lmxlbmd0aCwgNCk7CiAgICAgICAgaWYgKGFycmF5Lmxlbmd0aCAlIDQgIT09IDApIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJhcnJheSBsZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQuIik7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGxlbmd0aCA9IGFycmF5Lmxlbmd0aDsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQXJyYXkobGVuZ3RoIC8gNCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlc3VsdC5sZW5ndGggPSBsZW5ndGggLyA0OwogICAgICAgIH0KICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSA0KSB7CiAgICAgICAgICBjb25zdCBpbmRleCA9IGkgLyA0OwogICAgICAgICAgcmVzdWx0W2luZGV4XSA9IE1hdHJpeDIudW5wYWNrKGFycmF5LCBpLCByZXN1bHRbaW5kZXhdKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4Mi5jbG9uZSA9IGZ1bmN0aW9uKG1hdHJpeCwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQobWF0cml4KSkgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBNYXRyaXgyKG1hdHJpeFswXSwgbWF0cml4WzJdLCBtYXRyaXhbMV0sIG1hdHJpeFszXSk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdFswXSA9IG1hdHJpeFswXTsKICAgICAgICByZXN1bHRbMV0gPSBtYXRyaXhbMV07CiAgICAgICAgcmVzdWx0WzJdID0gbWF0cml4WzJdOwogICAgICAgIHJlc3VsdFszXSA9IG1hdHJpeFszXTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXgyLmZyb21BcnJheSA9IE1hdHJpeDIudW5wYWNrOwogICAgICBNYXRyaXgyLmZyb21Db2x1bW5NYWpvckFycmF5ID0gZnVuY3Rpb24odmFsdWVzLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoInZhbHVlcyIsIHZhbHVlcyk7CiAgICAgICAgcmV0dXJuIE1hdHJpeDIuY2xvbmUodmFsdWVzLCByZXN1bHQpOwogICAgICB9OwogICAgICBNYXRyaXgyLmZyb21Sb3dNYWpvckFycmF5ID0gZnVuY3Rpb24odmFsdWVzLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoInZhbHVlcyIsIHZhbHVlcyk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBNYXRyaXgyKHZhbHVlc1swXSwgdmFsdWVzWzFdLCB2YWx1ZXNbMl0sIHZhbHVlc1szXSk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdFswXSA9IHZhbHVlc1swXTsKICAgICAgICByZXN1bHRbMV0gPSB2YWx1ZXNbMl07CiAgICAgICAgcmVzdWx0WzJdID0gdmFsdWVzWzFdOwogICAgICAgIHJlc3VsdFszXSA9IHZhbHVlc1szXTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXgyLmZyb21TY2FsZSA9IGZ1bmN0aW9uKHNjYWxlLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInNjYWxlIiwgc2NhbGUpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgTWF0cml4MihzY2FsZS54LCAwLCAwLCBzY2FsZS55KTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0WzBdID0gc2NhbGUueDsKICAgICAgICByZXN1bHRbMV0gPSAwOwogICAgICAgIHJlc3VsdFsyXSA9IDA7CiAgICAgICAgcmVzdWx0WzNdID0gc2NhbGUueTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXgyLmZyb21Vbmlmb3JtU2NhbGUgPSBmdW5jdGlvbihzY2FsZSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJzY2FsZSIsIHNjYWxlKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IE1hdHJpeDIoc2NhbGUsIDAsIDAsIHNjYWxlKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0WzBdID0gc2NhbGU7CiAgICAgICAgcmVzdWx0WzFdID0gMDsKICAgICAgICByZXN1bHRbMl0gPSAwOwogICAgICAgIHJlc3VsdFszXSA9IHNjYWxlOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDIuZnJvbVJvdGF0aW9uID0gZnVuY3Rpb24oYW5nbGUsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigiYW5nbGUiLCBhbmdsZSk7CiAgICAgICAgY29uc3QgY29zQW5nbGUgPSBNYXRoLmNvcyhhbmdsZSk7CiAgICAgICAgY29uc3Qgc2luQW5nbGUgPSBNYXRoLnNpbihhbmdsZSk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBNYXRyaXgyKGNvc0FuZ2xlLCAtc2luQW5nbGUsIHNpbkFuZ2xlLCBjb3NBbmdsZSk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdFswXSA9IGNvc0FuZ2xlOwogICAgICAgIHJlc3VsdFsxXSA9IHNpbkFuZ2xlOwogICAgICAgIHJlc3VsdFsyXSA9IC1zaW5BbmdsZTsKICAgICAgICByZXN1bHRbM10gPSBjb3NBbmdsZTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXgyLnRvQXJyYXkgPSBmdW5jdGlvbihtYXRyaXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gW21hdHJpeFswXSwgbWF0cml4WzFdLCBtYXRyaXhbMl0sIG1hdHJpeFszXV07CiAgICAgICAgfQogICAgICAgIHJlc3VsdFswXSA9IG1hdHJpeFswXTsKICAgICAgICByZXN1bHRbMV0gPSBtYXRyaXhbMV07CiAgICAgICAgcmVzdWx0WzJdID0gbWF0cml4WzJdOwogICAgICAgIHJlc3VsdFszXSA9IG1hdHJpeFszXTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXgyLmdldEVsZW1lbnRJbmRleCA9IGZ1bmN0aW9uKGNvbHVtbiwgcm93KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuT3JFcXVhbHMoInJvdyIsIHJvdywgMCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmxlc3NUaGFuT3JFcXVhbHMoInJvdyIsIHJvdywgMSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuT3JFcXVhbHMoImNvbHVtbiIsIGNvbHVtbiwgMCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmxlc3NUaGFuT3JFcXVhbHMoImNvbHVtbiIsIGNvbHVtbiwgMSk7CiAgICAgICAgcmV0dXJuIGNvbHVtbiAqIDIgKyByb3c7CiAgICAgIH07CiAgICAgIE1hdHJpeDIuZ2V0Q29sdW1uID0gZnVuY3Rpb24obWF0cml4LCBpbmRleCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXRyaXgiLCBtYXRyaXgpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbk9yRXF1YWxzKCJpbmRleCIsIGluZGV4LCAwKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIubGVzc1RoYW5PckVxdWFscygiaW5kZXgiLCBpbmRleCwgMSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGNvbnN0IHN0YXJ0SW5kZXggPSBpbmRleCAqIDI7CiAgICAgICAgY29uc3QgeCA9IG1hdHJpeFtzdGFydEluZGV4XTsKICAgICAgICBjb25zdCB5ID0gbWF0cml4W3N0YXJ0SW5kZXggKyAxXTsKICAgICAgICByZXN1bHQueCA9IHg7CiAgICAgICAgcmVzdWx0LnkgPSB5OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDIuc2V0Q29sdW1uID0gZnVuY3Rpb24obWF0cml4LCBpbmRleCwgY2FydGVzaWFuMTEsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygiaW5kZXgiLCBpbmRleCwgMCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmxlc3NUaGFuT3JFcXVhbHMoImluZGV4IiwgaW5kZXgsIDEpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiY2FydGVzaWFuIiwgY2FydGVzaWFuMTEpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHQgPSBNYXRyaXgyLmNsb25lKG1hdHJpeCwgcmVzdWx0KTsKICAgICAgICBjb25zdCBzdGFydEluZGV4ID0gaW5kZXggKiAyOwogICAgICAgIHJlc3VsdFtzdGFydEluZGV4XSA9IGNhcnRlc2lhbjExLng7CiAgICAgICAgcmVzdWx0W3N0YXJ0SW5kZXggKyAxXSA9IGNhcnRlc2lhbjExLnk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4Mi5nZXRSb3cgPSBmdW5jdGlvbihtYXRyaXgsIGluZGV4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuT3JFcXVhbHMoImluZGV4IiwgaW5kZXgsIDApOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5sZXNzVGhhbk9yRXF1YWxzKCJpbmRleCIsIGluZGV4LCAxKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgY29uc3QgeCA9IG1hdHJpeFtpbmRleF07CiAgICAgICAgY29uc3QgeSA9IG1hdHJpeFtpbmRleCArIDJdOwogICAgICAgIHJlc3VsdC54ID0geDsKICAgICAgICByZXN1bHQueSA9IHk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4Mi5zZXRSb3cgPSBmdW5jdGlvbihtYXRyaXgsIGluZGV4LCBjYXJ0ZXNpYW4xMSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXRyaXgiLCBtYXRyaXgpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbk9yRXF1YWxzKCJpbmRleCIsIGluZGV4LCAwKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIubGVzc1RoYW5PckVxdWFscygiaW5kZXgiLCBpbmRleCwgMSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjYXJ0ZXNpYW4iLCBjYXJ0ZXNpYW4xMSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdCA9IE1hdHJpeDIuY2xvbmUobWF0cml4LCByZXN1bHQpOwogICAgICAgIHJlc3VsdFtpbmRleF0gPSBjYXJ0ZXNpYW4xMS54OwogICAgICAgIHJlc3VsdFtpbmRleCArIDJdID0gY2FydGVzaWFuMTEueTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBzY2FsZVNjcmF0Y2gxMyA9IG5ldyBDYXJ0ZXNpYW4yX2RlZmF1bHQoKTsKICAgICAgTWF0cml4Mi5zZXRTY2FsZSA9IGZ1bmN0aW9uKG1hdHJpeCwgc2NhbGUsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInNjYWxlIiwgc2NhbGUpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCBleGlzdGluZ1NjYWxlID0gTWF0cml4Mi5nZXRTY2FsZShtYXRyaXgsIHNjYWxlU2NyYXRjaDEzKTsKICAgICAgICBjb25zdCBzY2FsZVJhdGlvWCA9IHNjYWxlLnggLyBleGlzdGluZ1NjYWxlLng7CiAgICAgICAgY29uc3Qgc2NhbGVSYXRpb1kgPSBzY2FsZS55IC8gZXhpc3RpbmdTY2FsZS55OwogICAgICAgIHJlc3VsdFswXSA9IG1hdHJpeFswXSAqIHNjYWxlUmF0aW9YOwogICAgICAgIHJlc3VsdFsxXSA9IG1hdHJpeFsxXSAqIHNjYWxlUmF0aW9YOwogICAgICAgIHJlc3VsdFsyXSA9IG1hdHJpeFsyXSAqIHNjYWxlUmF0aW9ZOwogICAgICAgIHJlc3VsdFszXSA9IG1hdHJpeFszXSAqIHNjYWxlUmF0aW9ZOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIHNjYWxlU2NyYXRjaDIzID0gbmV3IENhcnRlc2lhbjJfZGVmYXVsdCgpOwogICAgICBNYXRyaXgyLnNldFVuaWZvcm1TY2FsZSA9IGZ1bmN0aW9uKG1hdHJpeCwgc2NhbGUsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoInNjYWxlIiwgc2NhbGUpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCBleGlzdGluZ1NjYWxlID0gTWF0cml4Mi5nZXRTY2FsZShtYXRyaXgsIHNjYWxlU2NyYXRjaDIzKTsKICAgICAgICBjb25zdCBzY2FsZVJhdGlvWCA9IHNjYWxlIC8gZXhpc3RpbmdTY2FsZS54OwogICAgICAgIGNvbnN0IHNjYWxlUmF0aW9ZID0gc2NhbGUgLyBleGlzdGluZ1NjYWxlLnk7CiAgICAgICAgcmVzdWx0WzBdID0gbWF0cml4WzBdICogc2NhbGVSYXRpb1g7CiAgICAgICAgcmVzdWx0WzFdID0gbWF0cml4WzFdICogc2NhbGVSYXRpb1g7CiAgICAgICAgcmVzdWx0WzJdID0gbWF0cml4WzJdICogc2NhbGVSYXRpb1k7CiAgICAgICAgcmVzdWx0WzNdID0gbWF0cml4WzNdICogc2NhbGVSYXRpb1k7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgc2NyYXRjaENvbHVtbjMgPSBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCk7CiAgICAgIE1hdHJpeDIuZ2V0U2NhbGUgPSBmdW5jdGlvbihtYXRyaXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0LnggPSBDYXJ0ZXNpYW4yX2RlZmF1bHQubWFnbml0dWRlKAogICAgICAgICAgQ2FydGVzaWFuMl9kZWZhdWx0LmZyb21FbGVtZW50cyhtYXRyaXhbMF0sIG1hdHJpeFsxXSwgc2NyYXRjaENvbHVtbjMpCiAgICAgICAgKTsKICAgICAgICByZXN1bHQueSA9IENhcnRlc2lhbjJfZGVmYXVsdC5tYWduaXR1ZGUoCiAgICAgICAgICBDYXJ0ZXNpYW4yX2RlZmF1bHQuZnJvbUVsZW1lbnRzKG1hdHJpeFsyXSwgbWF0cml4WzNdLCBzY3JhdGNoQ29sdW1uMykKICAgICAgICApOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIHNjYWxlU2NyYXRjaDMzID0gbmV3IENhcnRlc2lhbjJfZGVmYXVsdCgpOwogICAgICBNYXRyaXgyLmdldE1heGltdW1TY2FsZSA9IGZ1bmN0aW9uKG1hdHJpeCkgewogICAgICAgIE1hdHJpeDIuZ2V0U2NhbGUobWF0cml4LCBzY2FsZVNjcmF0Y2gzMyk7CiAgICAgICAgcmV0dXJuIENhcnRlc2lhbjJfZGVmYXVsdC5tYXhpbXVtQ29tcG9uZW50KHNjYWxlU2NyYXRjaDMzKTsKICAgICAgfTsKICAgICAgc2NhbGVTY3JhdGNoNDMgPSBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCk7CiAgICAgIE1hdHJpeDIuc2V0Um90YXRpb24gPSBmdW5jdGlvbihtYXRyaXgsIHJvdGF0aW9uLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGNvbnN0IHNjYWxlID0gTWF0cml4Mi5nZXRTY2FsZShtYXRyaXgsIHNjYWxlU2NyYXRjaDQzKTsKICAgICAgICByZXN1bHRbMF0gPSByb3RhdGlvblswXSAqIHNjYWxlLng7CiAgICAgICAgcmVzdWx0WzFdID0gcm90YXRpb25bMV0gKiBzY2FsZS54OwogICAgICAgIHJlc3VsdFsyXSA9IHJvdGF0aW9uWzJdICogc2NhbGUueTsKICAgICAgICByZXN1bHRbM10gPSByb3RhdGlvblszXSAqIHNjYWxlLnk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgc2NhbGVTY3JhdGNoNTMgPSBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCk7CiAgICAgIE1hdHJpeDIuZ2V0Um90YXRpb24gPSBmdW5jdGlvbihtYXRyaXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgY29uc3Qgc2NhbGUgPSBNYXRyaXgyLmdldFNjYWxlKG1hdHJpeCwgc2NhbGVTY3JhdGNoNTMpOwogICAgICAgIHJlc3VsdFswXSA9IG1hdHJpeFswXSAvIHNjYWxlLng7CiAgICAgICAgcmVzdWx0WzFdID0gbWF0cml4WzFdIC8gc2NhbGUueDsKICAgICAgICByZXN1bHRbMl0gPSBtYXRyaXhbMl0gLyBzY2FsZS55OwogICAgICAgIHJlc3VsdFszXSA9IG1hdHJpeFszXSAvIHNjYWxlLnk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4Mi5tdWx0aXBseSA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImxlZnQiLCBsZWZ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJpZ2h0IiwgcmlnaHQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCBjb2x1bW4wUm93MCA9IGxlZnRbMF0gKiByaWdodFswXSArIGxlZnRbMl0gKiByaWdodFsxXTsKICAgICAgICBjb25zdCBjb2x1bW4xUm93MCA9IGxlZnRbMF0gKiByaWdodFsyXSArIGxlZnRbMl0gKiByaWdodFszXTsKICAgICAgICBjb25zdCBjb2x1bW4wUm93MSA9IGxlZnRbMV0gKiByaWdodFswXSArIGxlZnRbM10gKiByaWdodFsxXTsKICAgICAgICBjb25zdCBjb2x1bW4xUm93MSA9IGxlZnRbMV0gKiByaWdodFsyXSArIGxlZnRbM10gKiByaWdodFszXTsKICAgICAgICByZXN1bHRbMF0gPSBjb2x1bW4wUm93MDsKICAgICAgICByZXN1bHRbMV0gPSBjb2x1bW4wUm93MTsKICAgICAgICByZXN1bHRbMl0gPSBjb2x1bW4xUm93MDsKICAgICAgICByZXN1bHRbM10gPSBjb2x1bW4xUm93MTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXgyLmFkZCA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImxlZnQiLCBsZWZ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJpZ2h0IiwgcmlnaHQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHRbMF0gPSBsZWZ0WzBdICsgcmlnaHRbMF07CiAgICAgICAgcmVzdWx0WzFdID0gbGVmdFsxXSArIHJpZ2h0WzFdOwogICAgICAgIHJlc3VsdFsyXSA9IGxlZnRbMl0gKyByaWdodFsyXTsKICAgICAgICByZXN1bHRbM10gPSBsZWZ0WzNdICsgcmlnaHRbM107CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4Mi5zdWJ0cmFjdCA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImxlZnQiLCBsZWZ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJpZ2h0IiwgcmlnaHQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHRbMF0gPSBsZWZ0WzBdIC0gcmlnaHRbMF07CiAgICAgICAgcmVzdWx0WzFdID0gbGVmdFsxXSAtIHJpZ2h0WzFdOwogICAgICAgIHJlc3VsdFsyXSA9IGxlZnRbMl0gLSByaWdodFsyXTsKICAgICAgICByZXN1bHRbM10gPSBsZWZ0WzNdIC0gcmlnaHRbM107CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4Mi5tdWx0aXBseUJ5VmVjdG9yID0gZnVuY3Rpb24obWF0cml4LCBjYXJ0ZXNpYW4xMSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXRyaXgiLCBtYXRyaXgpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiY2FydGVzaWFuIiwgY2FydGVzaWFuMTEpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBjb25zdCB4ID0gbWF0cml4WzBdICogY2FydGVzaWFuMTEueCArIG1hdHJpeFsyXSAqIGNhcnRlc2lhbjExLnk7CiAgICAgICAgY29uc3QgeSA9IG1hdHJpeFsxXSAqIGNhcnRlc2lhbjExLnggKyBtYXRyaXhbM10gKiBjYXJ0ZXNpYW4xMS55OwogICAgICAgIHJlc3VsdC54ID0geDsKICAgICAgICByZXN1bHQueSA9IHk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4Mi5tdWx0aXBseUJ5U2NhbGFyID0gZnVuY3Rpb24obWF0cml4LCBzY2FsYXIsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoInNjYWxhciIsIHNjYWxhcik7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdFswXSA9IG1hdHJpeFswXSAqIHNjYWxhcjsKICAgICAgICByZXN1bHRbMV0gPSBtYXRyaXhbMV0gKiBzY2FsYXI7CiAgICAgICAgcmVzdWx0WzJdID0gbWF0cml4WzJdICogc2NhbGFyOwogICAgICAgIHJlc3VsdFszXSA9IG1hdHJpeFszXSAqIHNjYWxhcjsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXgyLm11bHRpcGx5QnlTY2FsZSA9IGZ1bmN0aW9uKG1hdHJpeCwgc2NhbGUsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInNjYWxlIiwgc2NhbGUpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHRbMF0gPSBtYXRyaXhbMF0gKiBzY2FsZS54OwogICAgICAgIHJlc3VsdFsxXSA9IG1hdHJpeFsxXSAqIHNjYWxlLng7CiAgICAgICAgcmVzdWx0WzJdID0gbWF0cml4WzJdICogc2NhbGUueTsKICAgICAgICByZXN1bHRbM10gPSBtYXRyaXhbM10gKiBzY2FsZS55OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDIubXVsdGlwbHlCeVVuaWZvcm1TY2FsZSA9IGZ1bmN0aW9uKG1hdHJpeCwgc2NhbGUsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibWF0cml4IiwgbWF0cml4KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoInNjYWxlIiwgc2NhbGUpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHRbMF0gPSBtYXRyaXhbMF0gKiBzY2FsZTsKICAgICAgICByZXN1bHRbMV0gPSBtYXRyaXhbMV0gKiBzY2FsZTsKICAgICAgICByZXN1bHRbMl0gPSBtYXRyaXhbMl0gKiBzY2FsZTsKICAgICAgICByZXN1bHRbM10gPSBtYXRyaXhbM10gKiBzY2FsZTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBNYXRyaXgyLm5lZ2F0ZSA9IGZ1bmN0aW9uKG1hdHJpeCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXRyaXgiLCBtYXRyaXgpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHRbMF0gPSAtbWF0cml4WzBdOwogICAgICAgIHJlc3VsdFsxXSA9IC1tYXRyaXhbMV07CiAgICAgICAgcmVzdWx0WzJdID0gLW1hdHJpeFsyXTsKICAgICAgICByZXN1bHRbM10gPSAtbWF0cml4WzNdOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDIudHJhbnNwb3NlID0gZnVuY3Rpb24obWF0cml4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGNvbnN0IGNvbHVtbjBSb3cwID0gbWF0cml4WzBdOwogICAgICAgIGNvbnN0IGNvbHVtbjBSb3cxID0gbWF0cml4WzJdOwogICAgICAgIGNvbnN0IGNvbHVtbjFSb3cwID0gbWF0cml4WzFdOwogICAgICAgIGNvbnN0IGNvbHVtbjFSb3cxID0gbWF0cml4WzNdOwogICAgICAgIHJlc3VsdFswXSA9IGNvbHVtbjBSb3cwOwogICAgICAgIHJlc3VsdFsxXSA9IGNvbHVtbjBSb3cxOwogICAgICAgIHJlc3VsdFsyXSA9IGNvbHVtbjFSb3cwOwogICAgICAgIHJlc3VsdFszXSA9IGNvbHVtbjFSb3cxOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE1hdHJpeDIuYWJzID0gZnVuY3Rpb24obWF0cml4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1hdHJpeCIsIG1hdHJpeCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdFswXSA9IE1hdGguYWJzKG1hdHJpeFswXSk7CiAgICAgICAgcmVzdWx0WzFdID0gTWF0aC5hYnMobWF0cml4WzFdKTsKICAgICAgICByZXN1bHRbMl0gPSBNYXRoLmFicyhtYXRyaXhbMl0pOwogICAgICAgIHJlc3VsdFszXSA9IE1hdGguYWJzKG1hdHJpeFszXSk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgTWF0cml4Mi5lcXVhbHMgPSBmdW5jdGlvbihsZWZ0LCByaWdodCkgewogICAgICAgIHJldHVybiBsZWZ0ID09PSByaWdodCB8fCBkZWZpbmVkX2RlZmF1bHQobGVmdCkgJiYgZGVmaW5lZF9kZWZhdWx0KHJpZ2h0KSAmJiBsZWZ0WzBdID09PSByaWdodFswXSAmJiBsZWZ0WzFdID09PSByaWdodFsxXSAmJiBsZWZ0WzJdID09PSByaWdodFsyXSAmJiBsZWZ0WzNdID09PSByaWdodFszXTsKICAgICAgfTsKICAgICAgTWF0cml4Mi5lcXVhbHNBcnJheSA9IGZ1bmN0aW9uKG1hdHJpeCwgYXJyYXksIG9mZnNldCkgewogICAgICAgIHJldHVybiBtYXRyaXhbMF0gPT09IGFycmF5W29mZnNldF0gJiYgbWF0cml4WzFdID09PSBhcnJheVtvZmZzZXQgKyAxXSAmJiBtYXRyaXhbMl0gPT09IGFycmF5W29mZnNldCArIDJdICYmIG1hdHJpeFszXSA9PT0gYXJyYXlbb2Zmc2V0ICsgM107CiAgICAgIH07CiAgICAgIE1hdHJpeDIuZXF1YWxzRXBzaWxvbiA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBlcHNpbG9uKSB7CiAgICAgICAgZXBzaWxvbiA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGVwc2lsb24sIDApOwogICAgICAgIHJldHVybiBsZWZ0ID09PSByaWdodCB8fCBkZWZpbmVkX2RlZmF1bHQobGVmdCkgJiYgZGVmaW5lZF9kZWZhdWx0KHJpZ2h0KSAmJiBNYXRoLmFicyhsZWZ0WzBdIC0gcmlnaHRbMF0pIDw9IGVwc2lsb24gJiYgTWF0aC5hYnMobGVmdFsxXSAtIHJpZ2h0WzFdKSA8PSBlcHNpbG9uICYmIE1hdGguYWJzKGxlZnRbMl0gLSByaWdodFsyXSkgPD0gZXBzaWxvbiAmJiBNYXRoLmFicyhsZWZ0WzNdIC0gcmlnaHRbM10pIDw9IGVwc2lsb247CiAgICAgIH07CiAgICAgIE1hdHJpeDIuSURFTlRJVFkgPSBPYmplY3QuZnJlZXplKG5ldyBNYXRyaXgyKDEsIDAsIDAsIDEpKTsKICAgICAgTWF0cml4Mi5aRVJPID0gT2JqZWN0LmZyZWV6ZShuZXcgTWF0cml4MigwLCAwLCAwLCAwKSk7CiAgICAgIE1hdHJpeDIuQ09MVU1OMFJPVzAgPSAwOwogICAgICBNYXRyaXgyLkNPTFVNTjBST1cxID0gMTsKICAgICAgTWF0cml4Mi5DT0xVTU4xUk9XMCA9IDI7CiAgICAgIE1hdHJpeDIuQ09MVU1OMVJPVzEgPSAzOwogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhNYXRyaXgyLnByb3RvdHlwZSwgewogICAgICAgIC8qKgogICAgICAgICAqIEdldHMgdGhlIG51bWJlciBvZiBpdGVtcyBpbiB0aGUgY29sbGVjdGlvbi4KICAgICAgICAgKiBAbWVtYmVyb2YgTWF0cml4Mi5wcm90b3R5cGUKICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICovCiAgICAgICAgbGVuZ3RoOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gTWF0cml4Mi5wYWNrZWRMZW5ndGg7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgICAgTWF0cml4Mi5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbihyZXN1bHQpIHsKICAgICAgICByZXR1cm4gTWF0cml4Mi5jbG9uZSh0aGlzLCByZXN1bHQpOwogICAgICB9OwogICAgICBNYXRyaXgyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbihyaWdodCkgewogICAgICAgIHJldHVybiBNYXRyaXgyLmVxdWFscyh0aGlzLCByaWdodCk7CiAgICAgIH07CiAgICAgIE1hdHJpeDIucHJvdG90eXBlLmVxdWFsc0Vwc2lsb24gPSBmdW5jdGlvbihyaWdodCwgZXBzaWxvbikgewogICAgICAgIHJldHVybiBNYXRyaXgyLmVxdWFsc0Vwc2lsb24odGhpcywgcmlnaHQsIGVwc2lsb24pOwogICAgICB9OwogICAgICBNYXRyaXgyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBgKCR7dGhpc1swXX0sICR7dGhpc1syXX0pCigke3RoaXNbMV19LCAke3RoaXNbM119KWA7CiAgICAgIH07CiAgICAgIE1hdHJpeDJfZGVmYXVsdCA9IE1hdHJpeDI7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9QcmltaXRpdmVUeXBlLmpzCiAgdmFyIFByaW1pdGl2ZVR5cGUsIFByaW1pdGl2ZVR5cGVfZGVmYXVsdDsKICB2YXIgaW5pdF9QcmltaXRpdmVUeXBlID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9QcmltaXRpdmVUeXBlLmpzIigpIHsKICAgICAgaW5pdF9XZWJHTENvbnN0YW50cygpOwogICAgICBQcmltaXRpdmVUeXBlID0gewogICAgICAgIC8qKgogICAgICAgICAqIFBvaW50cyBwcmltaXRpdmUgd2hlcmUgZWFjaCB2ZXJ0ZXggKG9yIGluZGV4KSBpcyBhIHNlcGFyYXRlIHBvaW50LgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBQT0lOVFM6IFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuUE9JTlRTLAogICAgICAgIC8qKgogICAgICAgICAqIExpbmVzIHByaW1pdGl2ZSB3aGVyZSBlYWNoIHR3byB2ZXJ0aWNlcyAob3IgaW5kaWNlcykgaXMgYSBsaW5lIHNlZ21lbnQuICBMaW5lIHNlZ21lbnRzIGFyZSBub3QgbmVjZXNzYXJpbHkgY29ubmVjdGVkLgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBMSU5FUzogV2ViR0xDb25zdGFudHNfZGVmYXVsdC5MSU5FUywKICAgICAgICAvKioKICAgICAgICAgKiBMaW5lIGxvb3AgcHJpbWl0aXZlIHdoZXJlIGVhY2ggdmVydGV4IChvciBpbmRleCkgYWZ0ZXIgdGhlIGZpcnN0IGNvbm5lY3RzIGEgbGluZSB0bwogICAgICAgICAqIHRoZSBwcmV2aW91cyB2ZXJ0ZXgsIGFuZCB0aGUgbGFzdCB2ZXJ0ZXggaW1wbGljaXRseSBjb25uZWN0cyB0byB0aGUgZmlyc3QuCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIExJTkVfTE9PUDogV2ViR0xDb25zdGFudHNfZGVmYXVsdC5MSU5FX0xPT1AsCiAgICAgICAgLyoqCiAgICAgICAgICogTGluZSBzdHJpcCBwcmltaXRpdmUgd2hlcmUgZWFjaCB2ZXJ0ZXggKG9yIGluZGV4KSBhZnRlciB0aGUgZmlyc3QgY29ubmVjdHMgYSBsaW5lIHRvIHRoZSBwcmV2aW91cyB2ZXJ0ZXguCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIExJTkVfU1RSSVA6IFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuTElORV9TVFJJUCwKICAgICAgICAvKioKICAgICAgICAgKiBUcmlhbmdsZXMgcHJpbWl0aXZlIHdoZXJlIGVhY2ggdGhyZWUgdmVydGljZXMgKG9yIGluZGljZXMpIGlzIGEgdHJpYW5nbGUuICBUcmlhbmdsZXMgZG8gbm90IG5lY2Vzc2FyaWx5IHNoYXJlIGVkZ2VzLgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBUUklBTkdMRVM6IFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuVFJJQU5HTEVTLAogICAgICAgIC8qKgogICAgICAgICAqIFRyaWFuZ2xlIHN0cmlwIHByaW1pdGl2ZSB3aGVyZSBlYWNoIHZlcnRleCAob3IgaW5kZXgpIGFmdGVyIHRoZSBmaXJzdCB0d28gY29ubmVjdCB0bwogICAgICAgICAqIHRoZSBwcmV2aW91cyB0d28gdmVydGljZXMgZm9ybWluZyBhIHRyaWFuZ2xlLiAgRm9yIGV4YW1wbGUsIHRoaXMgY2FuIGJlIHVzZWQgdG8gbW9kZWwgYSB3YWxsLgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBUUklBTkdMRV9TVFJJUDogV2ViR0xDb25zdGFudHNfZGVmYXVsdC5UUklBTkdMRV9TVFJJUCwKICAgICAgICAvKioKICAgICAgICAgKiBUcmlhbmdsZSBmYW4gcHJpbWl0aXZlIHdoZXJlIGVhY2ggdmVydGV4IChvciBpbmRleCkgYWZ0ZXIgdGhlIGZpcnN0IHR3byBjb25uZWN0IHRvCiAgICAgICAgICogdGhlIHByZXZpb3VzIHZlcnRleCBhbmQgdGhlIGZpcnN0IHZlcnRleCBmb3JtaW5nIGEgdHJpYW5nbGUuICBGb3IgZXhhbXBsZSwgdGhpcyBjYW4gYmUgdXNlZAogICAgICAgICAqIHRvIG1vZGVsIGEgY29uZSBvciBjaXJjbGUuCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIFRSSUFOR0xFX0ZBTjogV2ViR0xDb25zdGFudHNfZGVmYXVsdC5UUklBTkdMRV9GQU4KICAgICAgfTsKICAgICAgUHJpbWl0aXZlVHlwZS5pc0xpbmVzID0gZnVuY3Rpb24ocHJpbWl0aXZlVHlwZSkgewogICAgICAgIHJldHVybiBwcmltaXRpdmVUeXBlID09PSBQcmltaXRpdmVUeXBlLkxJTkVTIHx8IHByaW1pdGl2ZVR5cGUgPT09IFByaW1pdGl2ZVR5cGUuTElORV9MT09QIHx8IHByaW1pdGl2ZVR5cGUgPT09IFByaW1pdGl2ZVR5cGUuTElORV9TVFJJUDsKICAgICAgfTsKICAgICAgUHJpbWl0aXZlVHlwZS5pc1RyaWFuZ2xlcyA9IGZ1bmN0aW9uKHByaW1pdGl2ZVR5cGUpIHsKICAgICAgICByZXR1cm4gcHJpbWl0aXZlVHlwZSA9PT0gUHJpbWl0aXZlVHlwZS5UUklBTkdMRVMgfHwgcHJpbWl0aXZlVHlwZSA9PT0gUHJpbWl0aXZlVHlwZS5UUklBTkdMRV9TVFJJUCB8fCBwcmltaXRpdmVUeXBlID09PSBQcmltaXRpdmVUeXBlLlRSSUFOR0xFX0ZBTjsKICAgICAgfTsKICAgICAgUHJpbWl0aXZlVHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uKHByaW1pdGl2ZVR5cGUpIHsKICAgICAgICByZXR1cm4gcHJpbWl0aXZlVHlwZSA9PT0gUHJpbWl0aXZlVHlwZS5QT0lOVFMgfHwgcHJpbWl0aXZlVHlwZSA9PT0gUHJpbWl0aXZlVHlwZS5MSU5FUyB8fCBwcmltaXRpdmVUeXBlID09PSBQcmltaXRpdmVUeXBlLkxJTkVfTE9PUCB8fCBwcmltaXRpdmVUeXBlID09PSBQcmltaXRpdmVUeXBlLkxJTkVfU1RSSVAgfHwgcHJpbWl0aXZlVHlwZSA9PT0gUHJpbWl0aXZlVHlwZS5UUklBTkdMRVMgfHwgcHJpbWl0aXZlVHlwZSA9PT0gUHJpbWl0aXZlVHlwZS5UUklBTkdMRV9TVFJJUCB8fCBwcmltaXRpdmVUeXBlID09PSBQcmltaXRpdmVUeXBlLlRSSUFOR0xFX0ZBTjsKICAgICAgfTsKICAgICAgUHJpbWl0aXZlVHlwZV9kZWZhdWx0ID0gT2JqZWN0LmZyZWV6ZShQcmltaXRpdmVUeXBlKTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0dlb21ldHJ5LmpzCiAgZnVuY3Rpb24gR2VvbWV0cnkob3B0aW9ucykgewogICAgb3B0aW9ucyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMsIGRlZmF1bHRWYWx1ZV9kZWZhdWx0LkVNUFRZX09CSkVDVCk7CiAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm9wdGlvbnMuYXR0cmlidXRlcyIsIG9wdGlvbnMuYXR0cmlidXRlcyk7CiAgICB0aGlzLmF0dHJpYnV0ZXMgPSBvcHRpb25zLmF0dHJpYnV0ZXM7CiAgICB0aGlzLmluZGljZXMgPSBvcHRpb25zLmluZGljZXM7CiAgICB0aGlzLnByaW1pdGl2ZVR5cGUgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCgKICAgICAgb3B0aW9ucy5wcmltaXRpdmVUeXBlLAogICAgICBQcmltaXRpdmVUeXBlX2RlZmF1bHQuVFJJQU5HTEVTCiAgICApOwogICAgdGhpcy5ib3VuZGluZ1NwaGVyZSA9IG9wdGlvbnMuYm91bmRpbmdTcGhlcmU7CiAgICB0aGlzLmdlb21ldHJ5VHlwZSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuZ2VvbWV0cnlUeXBlLCBHZW9tZXRyeVR5cGVfZGVmYXVsdC5OT05FKTsKICAgIHRoaXMuYm91bmRpbmdTcGhlcmVDViA9IG9wdGlvbnMuYm91bmRpbmdTcGhlcmVDVjsKICAgIHRoaXMub2Zmc2V0QXR0cmlidXRlID0gb3B0aW9ucy5vZmZzZXRBdHRyaWJ1dGU7CiAgfQogIHZhciByZWN0YW5nbGVDZW50ZXJTY3JhdGNoLCBlbnVDZW50ZXJTY3JhdGNoLCBmaXhlZEZyYW1lVG9FbnVTY3JhdGNoLCBib3VuZGluZ1JlY3RhbmdsZVBvaW50c0NhcnRvZ3JhcGhpY1NjcmF0Y2gsIGJvdW5kaW5nUmVjdGFuZ2xlUG9pbnRzRW51U2NyYXRjaCwgcG9pbnRzMkRTY3JhdGNoLCBwb2ludEVudVNjcmF0Y2gsIGVudVJvdGF0aW9uU2NyYXRjaCwgZW51Um90YXRpb25NYXRyaXhTY3JhdGNoLCByb3RhdGlvbjJEU2NyYXRjaCwgR2VvbWV0cnlfZGVmYXVsdDsKICB2YXIgaW5pdF9HZW9tZXRyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X0NhcnRlc2lhbjIoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ2FydG9ncmFwaGljKCk7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgaW5pdF9HZW9tZXRyeVR5cGUoKTsKICAgICAgaW5pdF9NYXRyaXgyKCk7CiAgICAgIGluaXRfTWF0cml4MygpOwogICAgICBpbml0X01hdHJpeDQoKTsKICAgICAgaW5pdF9QcmltaXRpdmVUeXBlKCk7CiAgICAgIGluaXRfUXVhdGVybmlvbigpOwogICAgICBpbml0X1JlY3RhbmdsZSgpOwogICAgICBpbml0X1RyYW5zZm9ybXMoKTsKICAgICAgR2VvbWV0cnkuY29tcHV0ZU51bWJlck9mVmVydGljZXMgPSBmdW5jdGlvbihnZW9tZXRyeSkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiZ2VvbWV0cnkiLCBnZW9tZXRyeSk7CiAgICAgICAgbGV0IG51bWJlck9mVmVydGljZXMgPSAtMTsKICAgICAgICBmb3IgKGNvbnN0IHByb3BlcnR5IGluIGdlb21ldHJ5LmF0dHJpYnV0ZXMpIHsKICAgICAgICAgIGlmIChnZW9tZXRyeS5hdHRyaWJ1dGVzLmhhc093blByb3BlcnR5KHByb3BlcnR5KSAmJiBkZWZpbmVkX2RlZmF1bHQoZ2VvbWV0cnkuYXR0cmlidXRlc1twcm9wZXJ0eV0pICYmIGRlZmluZWRfZGVmYXVsdChnZW9tZXRyeS5hdHRyaWJ1dGVzW3Byb3BlcnR5XS52YWx1ZXMpKSB7CiAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZSA9IGdlb21ldHJ5LmF0dHJpYnV0ZXNbcHJvcGVydHldOwogICAgICAgICAgICBjb25zdCBudW0gPSBhdHRyaWJ1dGUudmFsdWVzLmxlbmd0aCAvIGF0dHJpYnV0ZS5jb21wb25lbnRzUGVyQXR0cmlidXRlOwogICAgICAgICAgICBpZiAobnVtYmVyT2ZWZXJ0aWNlcyAhPT0gbnVtICYmIG51bWJlck9mVmVydGljZXMgIT09IC0xKSB7CiAgICAgICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgICAgICAiQWxsIGF0dHJpYnV0ZSBsaXN0cyBtdXN0IGhhdmUgdGhlIHNhbWUgbnVtYmVyIG9mIGF0dHJpYnV0ZXMuIgogICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgbnVtYmVyT2ZWZXJ0aWNlcyA9IG51bTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIG51bWJlck9mVmVydGljZXM7CiAgICAgIH07CiAgICAgIHJlY3RhbmdsZUNlbnRlclNjcmF0Y2ggPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgZW51Q2VudGVyU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgZml4ZWRGcmFtZVRvRW51U2NyYXRjaCA9IG5ldyBNYXRyaXg0X2RlZmF1bHQoKTsKICAgICAgYm91bmRpbmdSZWN0YW5nbGVQb2ludHNDYXJ0b2dyYXBoaWNTY3JhdGNoID0gWwogICAgICAgIG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpLAogICAgICAgIG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpLAogICAgICAgIG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpCiAgICAgIF07CiAgICAgIGJvdW5kaW5nUmVjdGFuZ2xlUG9pbnRzRW51U2NyYXRjaCA9IFsKICAgICAgICBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCksCiAgICAgICAgbmV3IENhcnRlc2lhbjJfZGVmYXVsdCgpLAogICAgICAgIG5ldyBDYXJ0ZXNpYW4yX2RlZmF1bHQoKQogICAgICBdOwogICAgICBwb2ludHMyRFNjcmF0Y2ggPSBbbmV3IENhcnRlc2lhbjJfZGVmYXVsdCgpLCBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCksIG5ldyBDYXJ0ZXNpYW4yX2RlZmF1bHQoKV07CiAgICAgIHBvaW50RW51U2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgZW51Um90YXRpb25TY3JhdGNoID0gbmV3IFF1YXRlcm5pb25fZGVmYXVsdCgpOwogICAgICBlbnVSb3RhdGlvbk1hdHJpeFNjcmF0Y2ggPSBuZXcgTWF0cml4NF9kZWZhdWx0KCk7CiAgICAgIHJvdGF0aW9uMkRTY3JhdGNoID0gbmV3IE1hdHJpeDJfZGVmYXVsdCgpOwogICAgICBHZW9tZXRyeS5fdGV4dHVyZUNvb3JkaW5hdGVSb3RhdGlvblBvaW50cyA9IGZ1bmN0aW9uKHBvc2l0aW9ucywgc3RSb3RhdGlvbiwgZWxsaXBzb2lkLCBib3VuZGluZ1JlY3RhbmdsZSkgewogICAgICAgIGxldCBpOwogICAgICAgIGNvbnN0IHJlY3RhbmdsZUNlbnRlciA9IFJlY3RhbmdsZV9kZWZhdWx0LmNlbnRlcigKICAgICAgICAgIGJvdW5kaW5nUmVjdGFuZ2xlLAogICAgICAgICAgcmVjdGFuZ2xlQ2VudGVyU2NyYXRjaAogICAgICAgICk7CiAgICAgICAgY29uc3QgZW51Q2VudGVyID0gQ2FydG9ncmFwaGljX2RlZmF1bHQudG9DYXJ0ZXNpYW4oCiAgICAgICAgICByZWN0YW5nbGVDZW50ZXIsCiAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICBlbnVDZW50ZXJTY3JhdGNoCiAgICAgICAgKTsKICAgICAgICBjb25zdCBlbnVUb0ZpeGVkRnJhbWUgPSBUcmFuc2Zvcm1zX2RlZmF1bHQuZWFzdE5vcnRoVXBUb0ZpeGVkRnJhbWUoCiAgICAgICAgICBlbnVDZW50ZXIsCiAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICBmaXhlZEZyYW1lVG9FbnVTY3JhdGNoCiAgICAgICAgKTsKICAgICAgICBjb25zdCBmaXhlZEZyYW1lVG9FbnUgPSBNYXRyaXg0X2RlZmF1bHQuaW52ZXJzZSgKICAgICAgICAgIGVudVRvRml4ZWRGcmFtZSwKICAgICAgICAgIGZpeGVkRnJhbWVUb0VudVNjcmF0Y2gKICAgICAgICApOwogICAgICAgIGNvbnN0IGJvdW5kaW5nUG9pbnRzRW51ID0gYm91bmRpbmdSZWN0YW5nbGVQb2ludHNFbnVTY3JhdGNoOwogICAgICAgIGNvbnN0IGJvdW5kaW5nUG9pbnRzQ2FydG8gPSBib3VuZGluZ1JlY3RhbmdsZVBvaW50c0NhcnRvZ3JhcGhpY1NjcmF0Y2g7CiAgICAgICAgYm91bmRpbmdQb2ludHNDYXJ0b1swXS5sb25naXR1ZGUgPSBib3VuZGluZ1JlY3RhbmdsZS53ZXN0OwogICAgICAgIGJvdW5kaW5nUG9pbnRzQ2FydG9bMF0ubGF0aXR1ZGUgPSBib3VuZGluZ1JlY3RhbmdsZS5zb3V0aDsKICAgICAgICBib3VuZGluZ1BvaW50c0NhcnRvWzFdLmxvbmdpdHVkZSA9IGJvdW5kaW5nUmVjdGFuZ2xlLndlc3Q7CiAgICAgICAgYm91bmRpbmdQb2ludHNDYXJ0b1sxXS5sYXRpdHVkZSA9IGJvdW5kaW5nUmVjdGFuZ2xlLm5vcnRoOwogICAgICAgIGJvdW5kaW5nUG9pbnRzQ2FydG9bMl0ubG9uZ2l0dWRlID0gYm91bmRpbmdSZWN0YW5nbGUuZWFzdDsKICAgICAgICBib3VuZGluZ1BvaW50c0NhcnRvWzJdLmxhdGl0dWRlID0gYm91bmRpbmdSZWN0YW5nbGUuc291dGg7CiAgICAgICAgbGV0IHBvc0VudSA9IHBvaW50RW51U2NyYXRjaDsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMzsgaSsrKSB7CiAgICAgICAgICBDYXJ0b2dyYXBoaWNfZGVmYXVsdC50b0NhcnRlc2lhbihib3VuZGluZ1BvaW50c0NhcnRvW2ldLCBlbGxpcHNvaWQsIHBvc0VudSk7CiAgICAgICAgICBwb3NFbnUgPSBNYXRyaXg0X2RlZmF1bHQubXVsdGlwbHlCeVBvaW50QXNWZWN0b3IoZml4ZWRGcmFtZVRvRW51LCBwb3NFbnUsIHBvc0VudSk7CiAgICAgICAgICBib3VuZGluZ1BvaW50c0VudVtpXS54ID0gcG9zRW51Lng7CiAgICAgICAgICBib3VuZGluZ1BvaW50c0VudVtpXS55ID0gcG9zRW51Lnk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHJvdGF0aW9uID0gUXVhdGVybmlvbl9kZWZhdWx0LmZyb21BeGlzQW5nbGUoCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuVU5JVF9aLAogICAgICAgICAgLXN0Um90YXRpb24sCiAgICAgICAgICBlbnVSb3RhdGlvblNjcmF0Y2gKICAgICAgICApOwogICAgICAgIGNvbnN0IHRleHR1cmVNYXRyaXggPSBNYXRyaXgzX2RlZmF1bHQuZnJvbVF1YXRlcm5pb24oCiAgICAgICAgICByb3RhdGlvbiwKICAgICAgICAgIGVudVJvdGF0aW9uTWF0cml4U2NyYXRjaAogICAgICAgICk7CiAgICAgICAgY29uc3QgcG9zaXRpb25zTGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aDsKICAgICAgICBsZXQgZW51TWluWCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTsKICAgICAgICBsZXQgZW51TWluWSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTsKICAgICAgICBsZXQgZW51TWF4WCA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTsKICAgICAgICBsZXQgZW51TWF4WSA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcG9zaXRpb25zTGVuZ3RoOyBpKyspIHsKICAgICAgICAgIHBvc0VudSA9IE1hdHJpeDRfZGVmYXVsdC5tdWx0aXBseUJ5UG9pbnRBc1ZlY3RvcigKICAgICAgICAgICAgZml4ZWRGcmFtZVRvRW51LAogICAgICAgICAgICBwb3NpdGlvbnNbaV0sCiAgICAgICAgICAgIHBvc0VudQogICAgICAgICAgKTsKICAgICAgICAgIHBvc0VudSA9IE1hdHJpeDNfZGVmYXVsdC5tdWx0aXBseUJ5VmVjdG9yKHRleHR1cmVNYXRyaXgsIHBvc0VudSwgcG9zRW51KTsKICAgICAgICAgIGVudU1pblggPSBNYXRoLm1pbihlbnVNaW5YLCBwb3NFbnUueCk7CiAgICAgICAgICBlbnVNaW5ZID0gTWF0aC5taW4oZW51TWluWSwgcG9zRW51LnkpOwogICAgICAgICAgZW51TWF4WCA9IE1hdGgubWF4KGVudU1heFgsIHBvc0VudS54KTsKICAgICAgICAgIGVudU1heFkgPSBNYXRoLm1heChlbnVNYXhZLCBwb3NFbnUueSk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHRvRGVzaXJlZEluQ29tcHV0ZWQgPSBNYXRyaXgyX2RlZmF1bHQuZnJvbVJvdGF0aW9uKAogICAgICAgICAgc3RSb3RhdGlvbiwKICAgICAgICAgIHJvdGF0aW9uMkRTY3JhdGNoCiAgICAgICAgKTsKICAgICAgICBjb25zdCBwb2ludHMyRCA9IHBvaW50czJEU2NyYXRjaDsKICAgICAgICBwb2ludHMyRFswXS54ID0gZW51TWluWDsKICAgICAgICBwb2ludHMyRFswXS55ID0gZW51TWluWTsKICAgICAgICBwb2ludHMyRFsxXS54ID0gZW51TWluWDsKICAgICAgICBwb2ludHMyRFsxXS55ID0gZW51TWF4WTsKICAgICAgICBwb2ludHMyRFsyXS54ID0gZW51TWF4WDsKICAgICAgICBwb2ludHMyRFsyXS55ID0gZW51TWluWTsKICAgICAgICBjb25zdCBib3VuZGluZ0VudU1pbiA9IGJvdW5kaW5nUG9pbnRzRW51WzBdOwogICAgICAgIGNvbnN0IGJvdW5kaW5nUG9pbnRzV2lkdGggPSBib3VuZGluZ1BvaW50c0VudVsyXS54IC0gYm91bmRpbmdFbnVNaW4ueDsKICAgICAgICBjb25zdCBib3VuZGluZ1BvaW50c0hlaWdodCA9IGJvdW5kaW5nUG9pbnRzRW51WzFdLnkgLSBib3VuZGluZ0VudU1pbi55OwogICAgICAgIGZvciAoaSA9IDA7IGkgPCAzOyBpKyspIHsKICAgICAgICAgIGNvbnN0IHBvaW50MkQgPSBwb2ludHMyRFtpXTsKICAgICAgICAgIE1hdHJpeDJfZGVmYXVsdC5tdWx0aXBseUJ5VmVjdG9yKHRvRGVzaXJlZEluQ29tcHV0ZWQsIHBvaW50MkQsIHBvaW50MkQpOwogICAgICAgICAgcG9pbnQyRC54ID0gKHBvaW50MkQueCAtIGJvdW5kaW5nRW51TWluLngpIC8gYm91bmRpbmdQb2ludHNXaWR0aDsKICAgICAgICAgIHBvaW50MkQueSA9IChwb2ludDJELnkgLSBib3VuZGluZ0VudU1pbi55KSAvIGJvdW5kaW5nUG9pbnRzSGVpZ2h0OwogICAgICAgIH0KICAgICAgICBjb25zdCBtaW5YWUNvcm5lciA9IHBvaW50czJEWzBdOwogICAgICAgIGNvbnN0IG1heFlDb3JuZXIgPSBwb2ludHMyRFsxXTsKICAgICAgICBjb25zdCBtYXhYQ29ybmVyID0gcG9pbnRzMkRbMl07CiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IEFycmF5KDYpOwogICAgICAgIENhcnRlc2lhbjJfZGVmYXVsdC5wYWNrKG1pblhZQ29ybmVyLCByZXN1bHQpOwogICAgICAgIENhcnRlc2lhbjJfZGVmYXVsdC5wYWNrKG1heFlDb3JuZXIsIHJlc3VsdCwgMik7CiAgICAgICAgQ2FydGVzaWFuMl9kZWZhdWx0LnBhY2sobWF4WENvcm5lciwgcmVzdWx0LCA0KTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBHZW9tZXRyeV9kZWZhdWx0ID0gR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9HZW9tZXRyeUF0dHJpYnV0ZS5qcwogIGZ1bmN0aW9uIEdlb21ldHJ5QXR0cmlidXRlKG9wdGlvbnMpIHsKICAgIG9wdGlvbnMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLCBkZWZhdWx0VmFsdWVfZGVmYXVsdC5FTVBUWV9PQkpFQ1QpOwogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQob3B0aW9ucy5jb21wb25lbnREYXRhdHlwZSkpIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoIm9wdGlvbnMuY29tcG9uZW50RGF0YXR5cGUgaXMgcmVxdWlyZWQuIik7CiAgICB9CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChvcHRpb25zLmNvbXBvbmVudHNQZXJBdHRyaWJ1dGUpKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJvcHRpb25zLmNvbXBvbmVudHNQZXJBdHRyaWJ1dGUgaXMgcmVxdWlyZWQuIik7CiAgICB9CiAgICBpZiAob3B0aW9ucy5jb21wb25lbnRzUGVyQXR0cmlidXRlIDwgMSB8fCBvcHRpb25zLmNvbXBvbmVudHNQZXJBdHRyaWJ1dGUgPiA0KSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICJvcHRpb25zLmNvbXBvbmVudHNQZXJBdHRyaWJ1dGUgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDQuIgogICAgICApOwogICAgfQogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQob3B0aW9ucy52YWx1ZXMpKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJvcHRpb25zLnZhbHVlcyBpcyByZXF1aXJlZC4iKTsKICAgIH0KICAgIHRoaXMuY29tcG9uZW50RGF0YXR5cGUgPSBvcHRpb25zLmNvbXBvbmVudERhdGF0eXBlOwogICAgdGhpcy5jb21wb25lbnRzUGVyQXR0cmlidXRlID0gb3B0aW9ucy5jb21wb25lbnRzUGVyQXR0cmlidXRlOwogICAgdGhpcy5ub3JtYWxpemUgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLm5vcm1hbGl6ZSwgZmFsc2UpOwogICAgdGhpcy52YWx1ZXMgPSBvcHRpb25zLnZhbHVlczsKICB9CiAgdmFyIEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQ7CiAgdmFyIGluaXRfR2VvbWV0cnlBdHRyaWJ1dGUgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0dlb21ldHJ5QXR0cmlidXRlLmpzIigpIHsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCA9IEdlb21ldHJ5QXR0cmlidXRlOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvR2VvbWV0cnlBdHRyaWJ1dGVzLmpzCiAgZnVuY3Rpb24gR2VvbWV0cnlBdHRyaWJ1dGVzKG9wdGlvbnMpIHsKICAgIG9wdGlvbnMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLCBkZWZhdWx0VmFsdWVfZGVmYXVsdC5FTVBUWV9PQkpFQ1QpOwogICAgdGhpcy5wb3NpdGlvbiA9IG9wdGlvbnMucG9zaXRpb247CiAgICB0aGlzLm5vcm1hbCA9IG9wdGlvbnMubm9ybWFsOwogICAgdGhpcy5zdCA9IG9wdGlvbnMuc3Q7CiAgICB0aGlzLmJpdGFuZ2VudCA9IG9wdGlvbnMuYml0YW5nZW50OwogICAgdGhpcy50YW5nZW50ID0gb3B0aW9ucy50YW5nZW50OwogICAgdGhpcy5jb2xvciA9IG9wdGlvbnMuY29sb3I7CiAgfQogIHZhciBHZW9tZXRyeUF0dHJpYnV0ZXNfZGVmYXVsdDsKICB2YXIgaW5pdF9HZW9tZXRyeUF0dHJpYnV0ZXMgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0dlb21ldHJ5QXR0cmlidXRlcy5qcyIoKSB7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIEdlb21ldHJ5QXR0cmlidXRlc19kZWZhdWx0ID0gR2VvbWV0cnlBdHRyaWJ1dGVzOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL1NjZW5lL0F0dHJpYnV0ZVR5cGUuanMKICB2YXIgQXR0cmlidXRlVHlwZSwgQXR0cmlidXRlVHlwZV9kZWZhdWx0OwogIHZhciBpbml0X0F0dHJpYnV0ZVR5cGUgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9TY2VuZS9BdHRyaWJ1dGVUeXBlLmpzIigpIHsKICAgICAgaW5pdF9DYXJ0ZXNpYW4yKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NhcnRlc2lhbjQoKTsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfTWF0cml4MigpOwogICAgICBpbml0X01hdHJpeDMoKTsKICAgICAgaW5pdF9NYXRyaXg0KCk7CiAgICAgIEF0dHJpYnV0ZVR5cGUgPSB7CiAgICAgICAgLyoqCiAgICAgICAgICogVGhlIGF0dHJpYnV0ZSBpcyBhIHNpbmdsZSBjb21wb25lbnQuCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7c3RyaW5nfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIFNDQUxBUjogIlNDQUxBUiIsCiAgICAgICAgLyoqCiAgICAgICAgICogVGhlIGF0dHJpYnV0ZSBpcyBhIHR3by1jb21wb25lbnQgdmVjdG9yLgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge3N0cmluZ30KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBWRUMyOiAiVkVDMiIsCiAgICAgICAgLyoqCiAgICAgICAgICogVGhlIGF0dHJpYnV0ZSBpcyBhIHRocmVlLWNvbXBvbmVudCB2ZWN0b3IuCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7c3RyaW5nfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIFZFQzM6ICJWRUMzIiwKICAgICAgICAvKioKICAgICAgICAgKiBUaGUgYXR0cmlidXRlIGlzIGEgZm91ci1jb21wb25lbnQgdmVjdG9yLgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge3N0cmluZ30KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBWRUM0OiAiVkVDNCIsCiAgICAgICAgLyoqCiAgICAgICAgICogVGhlIGF0dHJpYnV0ZSBpcyBhIDJ4MiBtYXRyaXguCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7c3RyaW5nfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIE1BVDI6ICJNQVQyIiwKICAgICAgICAvKioKICAgICAgICAgKiBUaGUgYXR0cmlidXRlIGlzIGEgM3gzIG1hdHJpeC4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtzdHJpbmd9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgTUFUMzogIk1BVDMiLAogICAgICAgIC8qKgogICAgICAgICAqIFRoZSBhdHRyaWJ1dGUgaXMgYSA0eDQgbWF0cml4LgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge3N0cmluZ30KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBNQVQ0OiAiTUFUNCIKICAgICAgfTsKICAgICAgQXR0cmlidXRlVHlwZS5nZXRNYXRoVHlwZSA9IGZ1bmN0aW9uKGF0dHJpYnV0ZVR5cGUpIHsKICAgICAgICBzd2l0Y2ggKGF0dHJpYnV0ZVR5cGUpIHsKICAgICAgICAgIGNhc2UgQXR0cmlidXRlVHlwZS5TQ0FMQVI6CiAgICAgICAgICAgIHJldHVybiBOdW1iZXI7CiAgICAgICAgICBjYXNlIEF0dHJpYnV0ZVR5cGUuVkVDMjoKICAgICAgICAgICAgcmV0dXJuIENhcnRlc2lhbjJfZGVmYXVsdDsKICAgICAgICAgIGNhc2UgQXR0cmlidXRlVHlwZS5WRUMzOgogICAgICAgICAgICByZXR1cm4gQ2FydGVzaWFuM19kZWZhdWx0OwogICAgICAgICAgY2FzZSBBdHRyaWJ1dGVUeXBlLlZFQzQ6CiAgICAgICAgICAgIHJldHVybiBDYXJ0ZXNpYW40X2RlZmF1bHQ7CiAgICAgICAgICBjYXNlIEF0dHJpYnV0ZVR5cGUuTUFUMjoKICAgICAgICAgICAgcmV0dXJuIE1hdHJpeDJfZGVmYXVsdDsKICAgICAgICAgIGNhc2UgQXR0cmlidXRlVHlwZS5NQVQzOgogICAgICAgICAgICByZXR1cm4gTWF0cml4M19kZWZhdWx0OwogICAgICAgICAgY2FzZSBBdHRyaWJ1dGVUeXBlLk1BVDQ6CiAgICAgICAgICAgIHJldHVybiBNYXRyaXg0X2RlZmF1bHQ7CiAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYXR0cmlidXRlVHlwZSBpcyBub3QgYSB2YWxpZCB2YWx1ZS4iKTsKICAgICAgICB9CiAgICAgIH07CiAgICAgIEF0dHJpYnV0ZVR5cGUuZ2V0TnVtYmVyT2ZDb21wb25lbnRzID0gZnVuY3Rpb24oYXR0cmlidXRlVHlwZSkgewogICAgICAgIHN3aXRjaCAoYXR0cmlidXRlVHlwZSkgewogICAgICAgICAgY2FzZSBBdHRyaWJ1dGVUeXBlLlNDQUxBUjoKICAgICAgICAgICAgcmV0dXJuIDE7CiAgICAgICAgICBjYXNlIEF0dHJpYnV0ZVR5cGUuVkVDMjoKICAgICAgICAgICAgcmV0dXJuIDI7CiAgICAgICAgICBjYXNlIEF0dHJpYnV0ZVR5cGUuVkVDMzoKICAgICAgICAgICAgcmV0dXJuIDM7CiAgICAgICAgICBjYXNlIEF0dHJpYnV0ZVR5cGUuVkVDNDoKICAgICAgICAgIGNhc2UgQXR0cmlidXRlVHlwZS5NQVQyOgogICAgICAgICAgICByZXR1cm4gNDsKICAgICAgICAgIGNhc2UgQXR0cmlidXRlVHlwZS5NQVQzOgogICAgICAgICAgICByZXR1cm4gOTsKICAgICAgICAgIGNhc2UgQXR0cmlidXRlVHlwZS5NQVQ0OgogICAgICAgICAgICByZXR1cm4gMTY7CiAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYXR0cmlidXRlVHlwZSBpcyBub3QgYSB2YWxpZCB2YWx1ZS4iKTsKICAgICAgICB9CiAgICAgIH07CiAgICAgIEF0dHJpYnV0ZVR5cGUuZ2V0QXR0cmlidXRlTG9jYXRpb25Db3VudCA9IGZ1bmN0aW9uKGF0dHJpYnV0ZVR5cGUpIHsKICAgICAgICBzd2l0Y2ggKGF0dHJpYnV0ZVR5cGUpIHsKICAgICAgICAgIGNhc2UgQXR0cmlidXRlVHlwZS5TQ0FMQVI6CiAgICAgICAgICBjYXNlIEF0dHJpYnV0ZVR5cGUuVkVDMjoKICAgICAgICAgIGNhc2UgQXR0cmlidXRlVHlwZS5WRUMzOgogICAgICAgICAgY2FzZSBBdHRyaWJ1dGVUeXBlLlZFQzQ6CiAgICAgICAgICAgIHJldHVybiAxOwogICAgICAgICAgY2FzZSBBdHRyaWJ1dGVUeXBlLk1BVDI6CiAgICAgICAgICAgIHJldHVybiAyOwogICAgICAgICAgY2FzZSBBdHRyaWJ1dGVUeXBlLk1BVDM6CiAgICAgICAgICAgIHJldHVybiAzOwogICAgICAgICAgY2FzZSBBdHRyaWJ1dGVUeXBlLk1BVDQ6CiAgICAgICAgICAgIHJldHVybiA0OwogICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImF0dHJpYnV0ZVR5cGUgaXMgbm90IGEgdmFsaWQgdmFsdWUuIik7CiAgICAgICAgfQogICAgICB9OwogICAgICBBdHRyaWJ1dGVUeXBlLmdldEdsc2xUeXBlID0gZnVuY3Rpb24oYXR0cmlidXRlVHlwZSkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLnN0cmluZygiYXR0cmlidXRlVHlwZSIsIGF0dHJpYnV0ZVR5cGUpOwogICAgICAgIHN3aXRjaCAoYXR0cmlidXRlVHlwZSkgewogICAgICAgICAgY2FzZSBBdHRyaWJ1dGVUeXBlLlNDQUxBUjoKICAgICAgICAgICAgcmV0dXJuICJmbG9hdCI7CiAgICAgICAgICBjYXNlIEF0dHJpYnV0ZVR5cGUuVkVDMjoKICAgICAgICAgICAgcmV0dXJuICJ2ZWMyIjsKICAgICAgICAgIGNhc2UgQXR0cmlidXRlVHlwZS5WRUMzOgogICAgICAgICAgICByZXR1cm4gInZlYzMiOwogICAgICAgICAgY2FzZSBBdHRyaWJ1dGVUeXBlLlZFQzQ6CiAgICAgICAgICAgIHJldHVybiAidmVjNCI7CiAgICAgICAgICBjYXNlIEF0dHJpYnV0ZVR5cGUuTUFUMjoKICAgICAgICAgICAgcmV0dXJuICJtYXQyIjsKICAgICAgICAgIGNhc2UgQXR0cmlidXRlVHlwZS5NQVQzOgogICAgICAgICAgICByZXR1cm4gIm1hdDMiOwogICAgICAgICAgY2FzZSBBdHRyaWJ1dGVUeXBlLk1BVDQ6CiAgICAgICAgICAgIHJldHVybiAibWF0NCI7CiAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYXR0cmlidXRlVHlwZSBpcyBub3QgYSB2YWxpZCB2YWx1ZS4iKTsKICAgICAgICB9CiAgICAgIH07CiAgICAgIEF0dHJpYnV0ZVR5cGVfZGVmYXVsdCA9IE9iamVjdC5mcmVlemUoQXR0cmlidXRlVHlwZSk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9BdHRyaWJ1dGVDb21wcmVzc2lvbi5qcwogIGZ1bmN0aW9uIGZvcmNlVWludDgodmFsdWUpIHsKICAgIHVpbnQ4Rm9yY2VBcnJheVswXSA9IHZhbHVlOwogICAgcmV0dXJuIHVpbnQ4Rm9yY2VBcnJheVswXTsKICB9CiAgZnVuY3Rpb24gemlnWmFnRGVjb2RlKHZhbHVlKSB7CiAgICByZXR1cm4gdmFsdWUgPj4gMSBeIC0odmFsdWUgJiAxKTsKICB9CiAgdmFyIFJJR0hUX1NISUZULCBMRUZUX1NISUZULCBBdHRyaWJ1dGVDb21wcmVzc2lvbiwgb2N0RW5jb2RlU2NyYXRjaCwgdWludDhGb3JjZUFycmF5LCBzY3JhdGNoRW5jb2RlQ2FydDIsIEF0dHJpYnV0ZUNvbXByZXNzaW9uX2RlZmF1bHQ7CiAgdmFyIGluaXRfQXR0cmlidXRlQ29tcHJlc3Npb24gPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0F0dHJpYnV0ZUNvbXByZXNzaW9uLmpzIigpIHsKICAgICAgaW5pdF9DYXJ0ZXNpYW4yKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NvbXBvbmVudERhdGF0eXBlKCk7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIGluaXRfQXR0cmlidXRlVHlwZSgpOwogICAgICBSSUdIVF9TSElGVCA9IDEgLyAyNTY7CiAgICAgIExFRlRfU0hJRlQgPSAyNTY7CiAgICAgIEF0dHJpYnV0ZUNvbXByZXNzaW9uID0ge307CiAgICAgIEF0dHJpYnV0ZUNvbXByZXNzaW9uLm9jdEVuY29kZUluUmFuZ2UgPSBmdW5jdGlvbih2ZWN0b3IsIHJhbmdlTWF4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoInZlY3RvciIsIHZlY3Rvcik7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGNvbnN0IG1hZ1NxdWFyZWQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlU3F1YXJlZCh2ZWN0b3IpOwogICAgICAgIGlmIChNYXRoLmFicyhtYWdTcXVhcmVkIC0gMSkgPiBNYXRoX2RlZmF1bHQuRVBTSUxPTjYpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJ2ZWN0b3IgbXVzdCBiZSBub3JtYWxpemVkLiIpOwogICAgICAgIH0KICAgICAgICByZXN1bHQueCA9IHZlY3Rvci54IC8gKE1hdGguYWJzKHZlY3Rvci54KSArIE1hdGguYWJzKHZlY3Rvci55KSArIE1hdGguYWJzKHZlY3Rvci56KSk7CiAgICAgICAgcmVzdWx0LnkgPSB2ZWN0b3IueSAvIChNYXRoLmFicyh2ZWN0b3IueCkgKyBNYXRoLmFicyh2ZWN0b3IueSkgKyBNYXRoLmFicyh2ZWN0b3IueikpOwogICAgICAgIGlmICh2ZWN0b3IueiA8IDApIHsKICAgICAgICAgIGNvbnN0IHggPSByZXN1bHQueDsKICAgICAgICAgIGNvbnN0IHkgPSByZXN1bHQueTsKICAgICAgICAgIHJlc3VsdC54ID0gKDEgLSBNYXRoLmFicyh5KSkgKiBNYXRoX2RlZmF1bHQuc2lnbk5vdFplcm8oeCk7CiAgICAgICAgICByZXN1bHQueSA9ICgxIC0gTWF0aC5hYnMoeCkpICogTWF0aF9kZWZhdWx0LnNpZ25Ob3RaZXJvKHkpOwogICAgICAgIH0KICAgICAgICByZXN1bHQueCA9IE1hdGhfZGVmYXVsdC50b1NOb3JtKHJlc3VsdC54LCByYW5nZU1heCk7CiAgICAgICAgcmVzdWx0LnkgPSBNYXRoX2RlZmF1bHQudG9TTm9ybShyZXN1bHQueSwgcmFuZ2VNYXgpOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIEF0dHJpYnV0ZUNvbXByZXNzaW9uLm9jdEVuY29kZSA9IGZ1bmN0aW9uKHZlY3RvciwgcmVzdWx0KSB7CiAgICAgICAgcmV0dXJuIEF0dHJpYnV0ZUNvbXByZXNzaW9uLm9jdEVuY29kZUluUmFuZ2UodmVjdG9yLCAyNTUsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIG9jdEVuY29kZVNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCk7CiAgICAgIHVpbnQ4Rm9yY2VBcnJheSA9IG5ldyBVaW50OEFycmF5KDEpOwogICAgICBBdHRyaWJ1dGVDb21wcmVzc2lvbi5vY3RFbmNvZGVUb0NhcnRlc2lhbjQgPSBmdW5jdGlvbih2ZWN0b3IsIHJlc3VsdCkgewogICAgICAgIEF0dHJpYnV0ZUNvbXByZXNzaW9uLm9jdEVuY29kZUluUmFuZ2UodmVjdG9yLCA2NTUzNSwgb2N0RW5jb2RlU2NyYXRjaCk7CiAgICAgICAgcmVzdWx0LnggPSBmb3JjZVVpbnQ4KG9jdEVuY29kZVNjcmF0Y2gueCAqIFJJR0hUX1NISUZUKTsKICAgICAgICByZXN1bHQueSA9IGZvcmNlVWludDgob2N0RW5jb2RlU2NyYXRjaC54KTsKICAgICAgICByZXN1bHQueiA9IGZvcmNlVWludDgob2N0RW5jb2RlU2NyYXRjaC55ICogUklHSFRfU0hJRlQpOwogICAgICAgIHJlc3VsdC53ID0gZm9yY2VVaW50OChvY3RFbmNvZGVTY3JhdGNoLnkpOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIEF0dHJpYnV0ZUNvbXByZXNzaW9uLm9jdERlY29kZUluUmFuZ2UgPSBmdW5jdGlvbih4LCB5LCByYW5nZU1heCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGlmICh4IDwgMCB8fCB4ID4gcmFuZ2VNYXggfHwgeSA8IDAgfHwgeSA+IHJhbmdlTWF4KSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgYHggYW5kIHkgbXVzdCBiZSB1bnNpZ25lZCBub3JtYWxpemVkIGludGVnZXJzIGJldHdlZW4gMCBhbmQgJHtyYW5nZU1heH1gCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICByZXN1bHQueCA9IE1hdGhfZGVmYXVsdC5mcm9tU05vcm0oeCwgcmFuZ2VNYXgpOwogICAgICAgIHJlc3VsdC55ID0gTWF0aF9kZWZhdWx0LmZyb21TTm9ybSh5LCByYW5nZU1heCk7CiAgICAgICAgcmVzdWx0LnogPSAxIC0gKE1hdGguYWJzKHJlc3VsdC54KSArIE1hdGguYWJzKHJlc3VsdC55KSk7CiAgICAgICAgaWYgKHJlc3VsdC56IDwgMCkgewogICAgICAgICAgY29uc3Qgb2xkVlggPSByZXN1bHQueDsKICAgICAgICAgIHJlc3VsdC54ID0gKDEgLSBNYXRoLmFicyhyZXN1bHQueSkpICogTWF0aF9kZWZhdWx0LnNpZ25Ob3RaZXJvKG9sZFZYKTsKICAgICAgICAgIHJlc3VsdC55ID0gKDEgLSBNYXRoLmFicyhvbGRWWCkpICogTWF0aF9kZWZhdWx0LnNpZ25Ob3RaZXJvKHJlc3VsdC55KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUocmVzdWx0LCByZXN1bHQpOwogICAgICB9OwogICAgICBBdHRyaWJ1dGVDb21wcmVzc2lvbi5vY3REZWNvZGUgPSBmdW5jdGlvbih4LCB5LCByZXN1bHQpIHsKICAgICAgICByZXR1cm4gQXR0cmlidXRlQ29tcHJlc3Npb24ub2N0RGVjb2RlSW5SYW5nZSh4LCB5LCAyNTUsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIEF0dHJpYnV0ZUNvbXByZXNzaW9uLm9jdERlY29kZUZyb21DYXJ0ZXNpYW40ID0gZnVuY3Rpb24oZW5jb2RlZCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJlbmNvZGVkIiwgZW5jb2RlZCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGNvbnN0IHggPSBlbmNvZGVkLng7CiAgICAgICAgY29uc3QgeSA9IGVuY29kZWQueTsKICAgICAgICBjb25zdCB6ID0gZW5jb2RlZC56OwogICAgICAgIGNvbnN0IHcgPSBlbmNvZGVkLnc7CiAgICAgICAgaWYgKHggPCAwIHx8IHggPiAyNTUgfHwgeSA8IDAgfHwgeSA+IDI1NSB8fCB6IDwgMCB8fCB6ID4gMjU1IHx8IHcgPCAwIHx8IHcgPiAyNTUpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgICAieCwgeSwgeiwgYW5kIHcgbXVzdCBiZSB1bnNpZ25lZCBub3JtYWxpemVkIGludGVnZXJzIGJldHdlZW4gMCBhbmQgMjU1IgogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgeE9jdDE2ID0geCAqIExFRlRfU0hJRlQgKyB5OwogICAgICAgIGNvbnN0IHlPY3QxNiA9IHogKiBMRUZUX1NISUZUICsgdzsKICAgICAgICByZXR1cm4gQXR0cmlidXRlQ29tcHJlc3Npb24ub2N0RGVjb2RlSW5SYW5nZSh4T2N0MTYsIHlPY3QxNiwgNjU1MzUsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIEF0dHJpYnV0ZUNvbXByZXNzaW9uLm9jdFBhY2tGbG9hdCA9IGZ1bmN0aW9uKGVuY29kZWQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImVuY29kZWQiLCBlbmNvZGVkKTsKICAgICAgICByZXR1cm4gMjU2ICogZW5jb2RlZC54ICsgZW5jb2RlZC55OwogICAgICB9OwogICAgICBzY3JhdGNoRW5jb2RlQ2FydDIgPSBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCk7CiAgICAgIEF0dHJpYnV0ZUNvbXByZXNzaW9uLm9jdEVuY29kZUZsb2F0ID0gZnVuY3Rpb24odmVjdG9yKSB7CiAgICAgICAgQXR0cmlidXRlQ29tcHJlc3Npb24ub2N0RW5jb2RlKHZlY3Rvciwgc2NyYXRjaEVuY29kZUNhcnQyKTsKICAgICAgICByZXR1cm4gQXR0cmlidXRlQ29tcHJlc3Npb24ub2N0UGFja0Zsb2F0KHNjcmF0Y2hFbmNvZGVDYXJ0Mik7CiAgICAgIH07CiAgICAgIEF0dHJpYnV0ZUNvbXByZXNzaW9uLm9jdERlY29kZUZsb2F0ID0gZnVuY3Rpb24odmFsdWUsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgidmFsdWUiLCB2YWx1ZSk7CiAgICAgICAgY29uc3QgdGVtcCA9IHZhbHVlIC8gMjU2OwogICAgICAgIGNvbnN0IHggPSBNYXRoLmZsb29yKHRlbXApOwogICAgICAgIGNvbnN0IHkgPSAodGVtcCAtIHgpICogMjU2OwogICAgICAgIHJldHVybiBBdHRyaWJ1dGVDb21wcmVzc2lvbi5vY3REZWNvZGUoeCwgeSwgcmVzdWx0KTsKICAgICAgfTsKICAgICAgQXR0cmlidXRlQ29tcHJlc3Npb24ub2N0UGFjayA9IGZ1bmN0aW9uKHYxMiwgdjIyLCB2MywgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJ2MSIsIHYxMik7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJ2MiIsIHYyMik7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJ2MyIsIHYzKTsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgY29uc3QgZW5jb2RlZDEgPSBBdHRyaWJ1dGVDb21wcmVzc2lvbi5vY3RFbmNvZGVGbG9hdCh2MTIpOwogICAgICAgIGNvbnN0IGVuY29kZWQyID0gQXR0cmlidXRlQ29tcHJlc3Npb24ub2N0RW5jb2RlRmxvYXQodjIyKTsKICAgICAgICBjb25zdCBlbmNvZGVkMyA9IEF0dHJpYnV0ZUNvbXByZXNzaW9uLm9jdEVuY29kZSh2Mywgc2NyYXRjaEVuY29kZUNhcnQyKTsKICAgICAgICByZXN1bHQueCA9IDY1NTM2ICogZW5jb2RlZDMueCArIGVuY29kZWQxOwogICAgICAgIHJlc3VsdC55ID0gNjU1MzYgKiBlbmNvZGVkMy55ICsgZW5jb2RlZDI7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQXR0cmlidXRlQ29tcHJlc3Npb24ub2N0VW5wYWNrID0gZnVuY3Rpb24ocGFja2VkLCB2MTIsIHYyMiwgdjMpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoInBhY2tlZCIsIHBhY2tlZCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJ2MSIsIHYxMik7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJ2MiIsIHYyMik7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJ2MyIsIHYzKTsKICAgICAgICBsZXQgdGVtcCA9IHBhY2tlZC54IC8gNjU1MzY7CiAgICAgICAgY29uc3QgeCA9IE1hdGguZmxvb3IodGVtcCk7CiAgICAgICAgY29uc3QgZW5jb2RlZEZsb2F0MSA9ICh0ZW1wIC0geCkgKiA2NTUzNjsKICAgICAgICB0ZW1wID0gcGFja2VkLnkgLyA2NTUzNjsKICAgICAgICBjb25zdCB5ID0gTWF0aC5mbG9vcih0ZW1wKTsKICAgICAgICBjb25zdCBlbmNvZGVkRmxvYXQyID0gKHRlbXAgLSB5KSAqIDY1NTM2OwogICAgICAgIEF0dHJpYnV0ZUNvbXByZXNzaW9uLm9jdERlY29kZUZsb2F0KGVuY29kZWRGbG9hdDEsIHYxMik7CiAgICAgICAgQXR0cmlidXRlQ29tcHJlc3Npb24ub2N0RGVjb2RlRmxvYXQoZW5jb2RlZEZsb2F0MiwgdjIyKTsKICAgICAgICBBdHRyaWJ1dGVDb21wcmVzc2lvbi5vY3REZWNvZGUoeCwgeSwgdjMpOwogICAgICB9OwogICAgICBBdHRyaWJ1dGVDb21wcmVzc2lvbi5jb21wcmVzc1RleHR1cmVDb29yZGluYXRlcyA9IGZ1bmN0aW9uKHRleHR1cmVDb29yZGluYXRlcykgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgidGV4dHVyZUNvb3JkaW5hdGVzIiwgdGV4dHVyZUNvb3JkaW5hdGVzKTsKICAgICAgICBjb25zdCB4ID0gdGV4dHVyZUNvb3JkaW5hdGVzLnggKiA0MDk1IHwgMDsKICAgICAgICBjb25zdCB5ID0gdGV4dHVyZUNvb3JkaW5hdGVzLnkgKiA0MDk1IHwgMDsKICAgICAgICByZXR1cm4gNDA5NiAqIHggKyB5OwogICAgICB9OwogICAgICBBdHRyaWJ1dGVDb21wcmVzc2lvbi5kZWNvbXByZXNzVGV4dHVyZUNvb3JkaW5hdGVzID0gZnVuY3Rpb24oY29tcHJlc3NlZCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJjb21wcmVzc2VkIiwgY29tcHJlc3NlZCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIGNvbnN0IHRlbXAgPSBjb21wcmVzc2VkIC8gNDA5NjsKICAgICAgICBjb25zdCB4WmVyb1RvNDA5NSA9IE1hdGguZmxvb3IodGVtcCk7CiAgICAgICAgcmVzdWx0LnggPSB4WmVyb1RvNDA5NSAvIDQwOTU7CiAgICAgICAgcmVzdWx0LnkgPSAoY29tcHJlc3NlZCAtIHhaZXJvVG80MDk1ICogNDA5NikgLyA0MDk1OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIEF0dHJpYnV0ZUNvbXByZXNzaW9uLnppZ1phZ0RlbHRhRGVjb2RlID0gZnVuY3Rpb24odUJ1ZmZlciwgdkJ1ZmZlciwgaGVpZ2h0QnVmZmVyKSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJ1QnVmZmVyIiwgdUJ1ZmZlcik7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJ2QnVmZmVyIiwgdkJ1ZmZlcik7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmVxdWFscygKICAgICAgICAgICJ1QnVmZmVyLmxlbmd0aCIsCiAgICAgICAgICAidkJ1ZmZlci5sZW5ndGgiLAogICAgICAgICAgdUJ1ZmZlci5sZW5ndGgsCiAgICAgICAgICB2QnVmZmVyLmxlbmd0aAogICAgICAgICk7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChoZWlnaHRCdWZmZXIpKSB7CiAgICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZXF1YWxzKAogICAgICAgICAgICAidUJ1ZmZlci5sZW5ndGgiLAogICAgICAgICAgICAiaGVpZ2h0QnVmZmVyLmxlbmd0aCIsCiAgICAgICAgICAgIHVCdWZmZXIubGVuZ3RoLAogICAgICAgICAgICBoZWlnaHRCdWZmZXIubGVuZ3RoCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBjb25zdCBjb3VudCA9IHVCdWZmZXIubGVuZ3RoOwogICAgICAgIGxldCB1MyA9IDA7CiAgICAgICAgbGV0IHYzID0gMDsKICAgICAgICBsZXQgaGVpZ2h0ID0gMDsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyArK2kpIHsKICAgICAgICAgIHUzICs9IHppZ1phZ0RlY29kZSh1QnVmZmVyW2ldKTsKICAgICAgICAgIHYzICs9IHppZ1phZ0RlY29kZSh2QnVmZmVyW2ldKTsKICAgICAgICAgIHVCdWZmZXJbaV0gPSB1MzsKICAgICAgICAgIHZCdWZmZXJbaV0gPSB2MzsKICAgICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoaGVpZ2h0QnVmZmVyKSkgewogICAgICAgICAgICBoZWlnaHQgKz0gemlnWmFnRGVjb2RlKGhlaWdodEJ1ZmZlcltpXSk7CiAgICAgICAgICAgIGhlaWdodEJ1ZmZlcltpXSA9IGhlaWdodDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH07CiAgICAgIEF0dHJpYnV0ZUNvbXByZXNzaW9uLmRlcXVhbnRpemUgPSBmdW5jdGlvbih0eXBlZEFycmF5LCBjb21wb25lbnREYXRhdHlwZSwgdHlwZSwgY291bnQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoInR5cGVkQXJyYXkiLCB0eXBlZEFycmF5KTsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImNvbXBvbmVudERhdGF0eXBlIiwgY29tcG9uZW50RGF0YXR5cGUpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgidHlwZSIsIHR5cGUpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiY291bnQiLCBjb3VudCk7CiAgICAgICAgY29uc3QgY29tcG9uZW50c1BlckF0dHJpYnV0ZSA9IEF0dHJpYnV0ZVR5cGVfZGVmYXVsdC5nZXROdW1iZXJPZkNvbXBvbmVudHModHlwZSk7CiAgICAgICAgbGV0IGRpdmlzb3I7CiAgICAgICAgc3dpdGNoIChjb21wb25lbnREYXRhdHlwZSkgewogICAgICAgICAgY2FzZSBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkJZVEU6CiAgICAgICAgICAgIGRpdmlzb3IgPSAxMjc7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LlVOU0lHTkVEX0JZVEU6CiAgICAgICAgICAgIGRpdmlzb3IgPSAyNTU7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LlNIT1JUOgogICAgICAgICAgICBkaXZpc29yID0gMzI3Njc7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LlVOU0lHTkVEX1NIT1JUOgogICAgICAgICAgICBkaXZpc29yID0gNjU1MzU7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LklOVDoKICAgICAgICAgICAgZGl2aXNvciA9IDIxNDc0ODM2NDc7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LlVOU0lHTkVEX0lOVDoKICAgICAgICAgICAgZGl2aXNvciA9IDQyOTQ5NjcyOTU7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgICAgYENhbm5vdCBkZXF1YW50aXplIGNvbXBvbmVudCBkYXRhdHlwZTogJHtjb21wb25lbnREYXRhdHlwZX1gCiAgICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGRlcXVhbnRpemVkVHlwZWRBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoCiAgICAgICAgICBjb3VudCAqIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGUKICAgICAgICApOwogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykgewogICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjb21wb25lbnRzUGVyQXR0cmlidXRlOyBqKyspIHsKICAgICAgICAgICAgY29uc3QgaW5kZXggPSBpICogY29tcG9uZW50c1BlckF0dHJpYnV0ZSArIGo7CiAgICAgICAgICAgIGRlcXVhbnRpemVkVHlwZWRBcnJheVtpbmRleF0gPSBNYXRoLm1heCgKICAgICAgICAgICAgICB0eXBlZEFycmF5W2luZGV4XSAvIGRpdmlzb3IsCiAgICAgICAgICAgICAgLTEKICAgICAgICAgICAgKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGRlcXVhbnRpemVkVHlwZWRBcnJheTsKICAgICAgfTsKICAgICAgQXR0cmlidXRlQ29tcHJlc3Npb24uZGVjb2RlUkdCNTY1ID0gZnVuY3Rpb24odHlwZWRBcnJheSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJ0eXBlZEFycmF5IiwgdHlwZWRBcnJheSk7CiAgICAgICAgY29uc3QgZXhwZWN0ZWRMZW5ndGggPSB0eXBlZEFycmF5Lmxlbmd0aCAqIDM7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZXF1YWxzKAogICAgICAgICAgICAicmVzdWx0Lmxlbmd0aCIsCiAgICAgICAgICAgICJ0eXBlZEFycmF5Lmxlbmd0aCAqIDMiLAogICAgICAgICAgICByZXN1bHQubGVuZ3RoLAogICAgICAgICAgICBleHBlY3RlZExlbmd0aAogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgY291bnQgPSB0eXBlZEFycmF5Lmxlbmd0aDsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgRmxvYXQzMkFycmF5KGNvdW50ICogMyk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IG1hc2s1ID0gKDEgPDwgNSkgLSAxOwogICAgICAgIGNvbnN0IG1hc2s2ID0gKDEgPDwgNikgLSAxOwogICAgICAgIGNvbnN0IG5vcm1hbGl6ZTUgPSAxIC8gMzE7CiAgICAgICAgY29uc3Qgbm9ybWFsaXplNiA9IDEgLyA2MzsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHsKICAgICAgICAgIGNvbnN0IHZhbHVlID0gdHlwZWRBcnJheVtpXTsKICAgICAgICAgIGNvbnN0IHJlZCA9IHZhbHVlID4+IDExOwogICAgICAgICAgY29uc3QgZ3JlZW4gPSB2YWx1ZSA+PiA1ICYgbWFzazY7CiAgICAgICAgICBjb25zdCBibHVlID0gdmFsdWUgJiBtYXNrNTsKICAgICAgICAgIGNvbnN0IG9mZnNldCA9IDMgKiBpOwogICAgICAgICAgcmVzdWx0W29mZnNldF0gPSByZWQgKiBub3JtYWxpemU1OwogICAgICAgICAgcmVzdWx0W29mZnNldCArIDFdID0gZ3JlZW4gKiBub3JtYWxpemU2OwogICAgICAgICAgcmVzdWx0W29mZnNldCArIDJdID0gYmx1ZSAqIG5vcm1hbGl6ZTU7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIEF0dHJpYnV0ZUNvbXByZXNzaW9uX2RlZmF1bHQgPSBBdHRyaWJ1dGVDb21wcmVzc2lvbjsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2JhcnljZW50cmljQ29vcmRpbmF0ZXMuanMKICBmdW5jdGlvbiBiYXJ5Y2VudHJpY0Nvb3JkaW5hdGVzKHBvaW50LCBwMCwgcDEsIHAyLCByZXN1bHQpIHsKICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgicG9pbnQiLCBwb2ludCk7CiAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoInAwIiwgcDApOwogICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJwMSIsIHAxKTsKICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgicDIiLCBwMik7CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgIHJlc3VsdCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgIH0KICAgIGxldCB2MDI7CiAgICBsZXQgdjEyOwogICAgbGV0IHYyMjsKICAgIGxldCBkb3QwMDsKICAgIGxldCBkb3QwMTsKICAgIGxldCBkb3QwMjsKICAgIGxldCBkb3QxMTsKICAgIGxldCBkb3QxMjsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHAwLnopKSB7CiAgICAgIGlmIChDYXJ0ZXNpYW4yX2RlZmF1bHQuZXF1YWxzRXBzaWxvbihwb2ludCwgcDAsIE1hdGhfZGVmYXVsdC5FUFNJTE9OMTQpKSB7CiAgICAgICAgcmV0dXJuIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShDYXJ0ZXNpYW4zX2RlZmF1bHQuVU5JVF9YLCByZXN1bHQpOwogICAgICB9CiAgICAgIGlmIChDYXJ0ZXNpYW4yX2RlZmF1bHQuZXF1YWxzRXBzaWxvbihwb2ludCwgcDEsIE1hdGhfZGVmYXVsdC5FUFNJTE9OMTQpKSB7CiAgICAgICAgcmV0dXJuIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShDYXJ0ZXNpYW4zX2RlZmF1bHQuVU5JVF9ZLCByZXN1bHQpOwogICAgICB9CiAgICAgIGlmIChDYXJ0ZXNpYW4yX2RlZmF1bHQuZXF1YWxzRXBzaWxvbihwb2ludCwgcDIsIE1hdGhfZGVmYXVsdC5FUFNJTE9OMTQpKSB7CiAgICAgICAgcmV0dXJuIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShDYXJ0ZXNpYW4zX2RlZmF1bHQuVU5JVF9aLCByZXN1bHQpOwogICAgICB9CiAgICAgIHYwMiA9IENhcnRlc2lhbjJfZGVmYXVsdC5zdWJ0cmFjdChwMSwgcDAsIHNjcmF0Y2hDYXJ0ZXNpYW4xKTsKICAgICAgdjEyID0gQ2FydGVzaWFuMl9kZWZhdWx0LnN1YnRyYWN0KHAyLCBwMCwgc2NyYXRjaENhcnRlc2lhbjIpOwogICAgICB2MjIgPSBDYXJ0ZXNpYW4yX2RlZmF1bHQuc3VidHJhY3QocG9pbnQsIHAwLCBzY3JhdGNoQ2FydGVzaWFuMzIpOwogICAgICBkb3QwMCA9IENhcnRlc2lhbjJfZGVmYXVsdC5kb3QodjAyLCB2MDIpOwogICAgICBkb3QwMSA9IENhcnRlc2lhbjJfZGVmYXVsdC5kb3QodjAyLCB2MTIpOwogICAgICBkb3QwMiA9IENhcnRlc2lhbjJfZGVmYXVsdC5kb3QodjAyLCB2MjIpOwogICAgICBkb3QxMSA9IENhcnRlc2lhbjJfZGVmYXVsdC5kb3QodjEyLCB2MTIpOwogICAgICBkb3QxMiA9IENhcnRlc2lhbjJfZGVmYXVsdC5kb3QodjEyLCB2MjIpOwogICAgfSBlbHNlIHsKICAgICAgaWYgKENhcnRlc2lhbjNfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKHBvaW50LCBwMCwgTWF0aF9kZWZhdWx0LkVQU0lMT04xNCkpIHsKICAgICAgICByZXR1cm4gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKENhcnRlc2lhbjNfZGVmYXVsdC5VTklUX1gsIHJlc3VsdCk7CiAgICAgIH0KICAgICAgaWYgKENhcnRlc2lhbjNfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKHBvaW50LCBwMSwgTWF0aF9kZWZhdWx0LkVQU0lMT04xNCkpIHsKICAgICAgICByZXR1cm4gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKENhcnRlc2lhbjNfZGVmYXVsdC5VTklUX1ksIHJlc3VsdCk7CiAgICAgIH0KICAgICAgaWYgKENhcnRlc2lhbjNfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKHBvaW50LCBwMiwgTWF0aF9kZWZhdWx0LkVQU0lMT04xNCkpIHsKICAgICAgICByZXR1cm4gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKENhcnRlc2lhbjNfZGVmYXVsdC5VTklUX1osIHJlc3VsdCk7CiAgICAgIH0KICAgICAgdjAyID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHAxLCBwMCwgc2NyYXRjaENhcnRlc2lhbjEpOwogICAgICB2MTIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QocDIsIHAwLCBzY3JhdGNoQ2FydGVzaWFuMik7CiAgICAgIHYyMiA9IENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChwb2ludCwgcDAsIHNjcmF0Y2hDYXJ0ZXNpYW4zMik7CiAgICAgIGRvdDAwID0gQ2FydGVzaWFuM19kZWZhdWx0LmRvdCh2MDIsIHYwMik7CiAgICAgIGRvdDAxID0gQ2FydGVzaWFuM19kZWZhdWx0LmRvdCh2MDIsIHYxMik7CiAgICAgIGRvdDAyID0gQ2FydGVzaWFuM19kZWZhdWx0LmRvdCh2MDIsIHYyMik7CiAgICAgIGRvdDExID0gQ2FydGVzaWFuM19kZWZhdWx0LmRvdCh2MTIsIHYxMik7CiAgICAgIGRvdDEyID0gQ2FydGVzaWFuM19kZWZhdWx0LmRvdCh2MTIsIHYyMik7CiAgICB9CiAgICByZXN1bHQueSA9IGRvdDExICogZG90MDIgLSBkb3QwMSAqIGRvdDEyOwogICAgcmVzdWx0LnogPSBkb3QwMCAqIGRvdDEyIC0gZG90MDEgKiBkb3QwMjsKICAgIGNvbnN0IHEgPSBkb3QwMCAqIGRvdDExIC0gZG90MDEgKiBkb3QwMTsKICAgIGlmIChxID09PSAwKSB7CiAgICAgIHJldHVybiB2b2lkIDA7CiAgICB9CiAgICByZXN1bHQueSAvPSBxOwogICAgcmVzdWx0LnogLz0gcTsKICAgIHJlc3VsdC54ID0gMSAtIHJlc3VsdC55IC0gcmVzdWx0Lno7CiAgICByZXR1cm4gcmVzdWx0OwogIH0KICB2YXIgc2NyYXRjaENhcnRlc2lhbjEsIHNjcmF0Y2hDYXJ0ZXNpYW4yLCBzY3JhdGNoQ2FydGVzaWFuMzIsIGJhcnljZW50cmljQ29vcmRpbmF0ZXNfZGVmYXVsdDsKICB2YXIgaW5pdF9iYXJ5Y2VudHJpY0Nvb3JkaW5hdGVzID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9iYXJ5Y2VudHJpY0Nvb3JkaW5hdGVzLmpzIigpIHsKICAgICAgaW5pdF9DYXJ0ZXNpYW4yKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgc2NyYXRjaENhcnRlc2lhbjEgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4yID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQ2FydGVzaWFuMzIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGJhcnljZW50cmljQ29vcmRpbmF0ZXNfZGVmYXVsdCA9IGJhcnljZW50cmljQ29vcmRpbmF0ZXM7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9FbmNvZGVkQ2FydGVzaWFuMy5qcwogIGZ1bmN0aW9uIEVuY29kZWRDYXJ0ZXNpYW4zKCkgewogICAgdGhpcy5oaWdoID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKENhcnRlc2lhbjNfZGVmYXVsdC5aRVJPKTsKICAgIHRoaXMubG93ID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKENhcnRlc2lhbjNfZGVmYXVsdC5aRVJPKTsKICB9CiAgdmFyIHNjcmF0Y2hFbmNvZGUsIGVuY29kZWRQLCBFbmNvZGVkQ2FydGVzaWFuM19kZWZhdWx0OwogIHZhciBpbml0X0VuY29kZWRDYXJ0ZXNpYW4zID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9FbmNvZGVkQ2FydGVzaWFuMy5qcyIoKSB7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBFbmNvZGVkQ2FydGVzaWFuMy5lbmNvZGUgPSBmdW5jdGlvbih2YWx1ZSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJ2YWx1ZSIsIHZhbHVlKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSB7CiAgICAgICAgICAgIGhpZ2g6IDAsCiAgICAgICAgICAgIGxvdzogMAogICAgICAgICAgfTsKICAgICAgICB9CiAgICAgICAgbGV0IGRvdWJsZUhpZ2g7CiAgICAgICAgaWYgKHZhbHVlID49IDApIHsKICAgICAgICAgIGRvdWJsZUhpZ2ggPSBNYXRoLmZsb29yKHZhbHVlIC8gNjU1MzYpICogNjU1MzY7CiAgICAgICAgICByZXN1bHQuaGlnaCA9IGRvdWJsZUhpZ2g7CiAgICAgICAgICByZXN1bHQubG93ID0gdmFsdWUgLSBkb3VibGVIaWdoOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBkb3VibGVIaWdoID0gTWF0aC5mbG9vcigtdmFsdWUgLyA2NTUzNikgKiA2NTUzNjsKICAgICAgICAgIHJlc3VsdC5oaWdoID0gLWRvdWJsZUhpZ2g7CiAgICAgICAgICByZXN1bHQubG93ID0gdmFsdWUgKyBkb3VibGVIaWdoOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBzY3JhdGNoRW5jb2RlID0gewogICAgICAgIGhpZ2g6IDAsCiAgICAgICAgbG93OiAwCiAgICAgIH07CiAgICAgIEVuY29kZWRDYXJ0ZXNpYW4zLmZyb21DYXJ0ZXNpYW4gPSBmdW5jdGlvbihjYXJ0ZXNpYW4xMSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjYXJ0ZXNpYW4iLCBjYXJ0ZXNpYW4xMSk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IEVuY29kZWRDYXJ0ZXNpYW4zKCk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGhpZ2ggPSByZXN1bHQuaGlnaDsKICAgICAgICBjb25zdCBsb3cgPSByZXN1bHQubG93OwogICAgICAgIEVuY29kZWRDYXJ0ZXNpYW4zLmVuY29kZShjYXJ0ZXNpYW4xMS54LCBzY3JhdGNoRW5jb2RlKTsKICAgICAgICBoaWdoLnggPSBzY3JhdGNoRW5jb2RlLmhpZ2g7CiAgICAgICAgbG93LnggPSBzY3JhdGNoRW5jb2RlLmxvdzsKICAgICAgICBFbmNvZGVkQ2FydGVzaWFuMy5lbmNvZGUoY2FydGVzaWFuMTEueSwgc2NyYXRjaEVuY29kZSk7CiAgICAgICAgaGlnaC55ID0gc2NyYXRjaEVuY29kZS5oaWdoOwogICAgICAgIGxvdy55ID0gc2NyYXRjaEVuY29kZS5sb3c7CiAgICAgICAgRW5jb2RlZENhcnRlc2lhbjMuZW5jb2RlKGNhcnRlc2lhbjExLnosIHNjcmF0Y2hFbmNvZGUpOwogICAgICAgIGhpZ2gueiA9IHNjcmF0Y2hFbmNvZGUuaGlnaDsKICAgICAgICBsb3cueiA9IHNjcmF0Y2hFbmNvZGUubG93OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIGVuY29kZWRQID0gbmV3IEVuY29kZWRDYXJ0ZXNpYW4zKCk7CiAgICAgIEVuY29kZWRDYXJ0ZXNpYW4zLndyaXRlRWxlbWVudHMgPSBmdW5jdGlvbihjYXJ0ZXNpYW4xMSwgY2FydGVzaWFuQXJyYXksIGluZGV4KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJjYXJ0ZXNpYW5BcnJheSIsIGNhcnRlc2lhbkFycmF5KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoImluZGV4IiwgaW5kZXgpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbk9yRXF1YWxzKCJpbmRleCIsIGluZGV4LCAwKTsKICAgICAgICBFbmNvZGVkQ2FydGVzaWFuMy5mcm9tQ2FydGVzaWFuKGNhcnRlc2lhbjExLCBlbmNvZGVkUCk7CiAgICAgICAgY29uc3QgaGlnaCA9IGVuY29kZWRQLmhpZ2g7CiAgICAgICAgY29uc3QgbG93ID0gZW5jb2RlZFAubG93OwogICAgICAgIGNhcnRlc2lhbkFycmF5W2luZGV4XSA9IGhpZ2gueDsKICAgICAgICBjYXJ0ZXNpYW5BcnJheVtpbmRleCArIDFdID0gaGlnaC55OwogICAgICAgIGNhcnRlc2lhbkFycmF5W2luZGV4ICsgMl0gPSBoaWdoLno7CiAgICAgICAgY2FydGVzaWFuQXJyYXlbaW5kZXggKyAzXSA9IGxvdy54OwogICAgICAgIGNhcnRlc2lhbkFycmF5W2luZGV4ICsgNF0gPSBsb3cueTsKICAgICAgICBjYXJ0ZXNpYW5BcnJheVtpbmRleCArIDVdID0gbG93Lno7CiAgICAgIH07CiAgICAgIEVuY29kZWRDYXJ0ZXNpYW4zX2RlZmF1bHQgPSBFbmNvZGVkQ2FydGVzaWFuMzsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0luZGV4RGF0YXR5cGUuanMKICB2YXIgSW5kZXhEYXRhdHlwZSwgSW5kZXhEYXRhdHlwZV9kZWZhdWx0OwogIHZhciBpbml0X0luZGV4RGF0YXR5cGUgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0luZGV4RGF0YXR5cGUuanMiKCkgewogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgaW5pdF9XZWJHTENvbnN0YW50cygpOwogICAgICBJbmRleERhdGF0eXBlID0gewogICAgICAgIC8qKgogICAgICAgICAqIDgtYml0IHVuc2lnbmVkIGJ5dGUgY29ycmVzcG9uZGluZyB0byA8Y29kZT5VTlNJR05FRF9CWVRFPC9jb2RlPiBhbmQgdGhlIHR5cGUKICAgICAgICAgKiBvZiBhbiBlbGVtZW50IGluIDxjb2RlPlVpbnQ4QXJyYXk8L2NvZGU+LgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBVTlNJR05FRF9CWVRFOiBXZWJHTENvbnN0YW50c19kZWZhdWx0LlVOU0lHTkVEX0JZVEUsCiAgICAgICAgLyoqCiAgICAgICAgICogMTYtYml0IHVuc2lnbmVkIHNob3J0IGNvcnJlc3BvbmRpbmcgdG8gPGNvZGU+VU5TSUdORURfU0hPUlQ8L2NvZGU+IGFuZCB0aGUgdHlwZQogICAgICAgICAqIG9mIGFuIGVsZW1lbnQgaW4gPGNvZGU+VWludDE2QXJyYXk8L2NvZGU+LgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBVTlNJR05FRF9TSE9SVDogV2ViR0xDb25zdGFudHNfZGVmYXVsdC5VTlNJR05FRF9TSE9SVCwKICAgICAgICAvKioKICAgICAgICAgKiAzMi1iaXQgdW5zaWduZWQgaW50IGNvcnJlc3BvbmRpbmcgdG8gPGNvZGU+VU5TSUdORURfSU5UPC9jb2RlPiBhbmQgdGhlIHR5cGUKICAgICAgICAgKiBvZiBhbiBlbGVtZW50IGluIDxjb2RlPlVpbnQzMkFycmF5PC9jb2RlPi4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgVU5TSUdORURfSU5UOiBXZWJHTENvbnN0YW50c19kZWZhdWx0LlVOU0lHTkVEX0lOVAogICAgICB9OwogICAgICBJbmRleERhdGF0eXBlLmdldFNpemVJbkJ5dGVzID0gZnVuY3Rpb24oaW5kZXhEYXRhdHlwZSkgewogICAgICAgIHN3aXRjaCAoaW5kZXhEYXRhdHlwZSkgewogICAgICAgICAgY2FzZSBJbmRleERhdGF0eXBlLlVOU0lHTkVEX0JZVEU6CiAgICAgICAgICAgIHJldHVybiBVaW50OEFycmF5LkJZVEVTX1BFUl9FTEVNRU5UOwogICAgICAgICAgY2FzZSBJbmRleERhdGF0eXBlLlVOU0lHTkVEX1NIT1JUOgogICAgICAgICAgICByZXR1cm4gVWludDE2QXJyYXkuQllURVNfUEVSX0VMRU1FTlQ7CiAgICAgICAgICBjYXNlIEluZGV4RGF0YXR5cGUuVU5TSUdORURfSU5UOgogICAgICAgICAgICByZXR1cm4gVWludDMyQXJyYXkuQllURVNfUEVSX0VMRU1FTlQ7CiAgICAgICAgfQogICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgImluZGV4RGF0YXR5cGUgaXMgcmVxdWlyZWQgYW5kIG11c3QgYmUgYSB2YWxpZCBJbmRleERhdGF0eXBlIGNvbnN0YW50LiIKICAgICAgICApOwogICAgICB9OwogICAgICBJbmRleERhdGF0eXBlLmZyb21TaXplSW5CeXRlcyA9IGZ1bmN0aW9uKHNpemVJbkJ5dGVzKSB7CiAgICAgICAgc3dpdGNoIChzaXplSW5CeXRlcykgewogICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICByZXR1cm4gSW5kZXhEYXRhdHlwZS5VTlNJR05FRF9TSE9SVDsKICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgcmV0dXJuIEluZGV4RGF0YXR5cGUuVU5TSUdORURfSU5UOwogICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICByZXR1cm4gSW5kZXhEYXRhdHlwZS5VTlNJR05FRF9CWVRFOwogICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgICAgIlNpemUgaW4gYnl0ZXMgY2Fubm90IGJlIG1hcHBlZCB0byBhbiBJbmRleERhdGF0eXBlIgogICAgICAgICAgICApOwogICAgICAgIH0KICAgICAgfTsKICAgICAgSW5kZXhEYXRhdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uKGluZGV4RGF0YXR5cGUpIHsKICAgICAgICByZXR1cm4gZGVmaW5lZF9kZWZhdWx0KGluZGV4RGF0YXR5cGUpICYmIChpbmRleERhdGF0eXBlID09PSBJbmRleERhdGF0eXBlLlVOU0lHTkVEX0JZVEUgfHwgaW5kZXhEYXRhdHlwZSA9PT0gSW5kZXhEYXRhdHlwZS5VTlNJR05FRF9TSE9SVCB8fCBpbmRleERhdGF0eXBlID09PSBJbmRleERhdGF0eXBlLlVOU0lHTkVEX0lOVCk7CiAgICAgIH07CiAgICAgIEluZGV4RGF0YXR5cGUuY3JlYXRlVHlwZWRBcnJheSA9IGZ1bmN0aW9uKG51bWJlck9mVmVydGljZXMsIGluZGljZXNMZW5ndGhPckFycmF5KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQobnVtYmVyT2ZWZXJ0aWNlcykpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJudW1iZXJPZlZlcnRpY2VzIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAobnVtYmVyT2ZWZXJ0aWNlcyA+PSBNYXRoX2RlZmF1bHQuU0lYVFlfRk9VUl9LSUxPQllURVMpIHsKICAgICAgICAgIHJldHVybiBuZXcgVWludDMyQXJyYXkoaW5kaWNlc0xlbmd0aE9yQXJyYXkpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3IFVpbnQxNkFycmF5KGluZGljZXNMZW5ndGhPckFycmF5KTsKICAgICAgfTsKICAgICAgSW5kZXhEYXRhdHlwZS5jcmVhdGVUeXBlZEFycmF5RnJvbUFycmF5QnVmZmVyID0gZnVuY3Rpb24obnVtYmVyT2ZWZXJ0aWNlcywgc291cmNlQXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KG51bWJlck9mVmVydGljZXMpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgibnVtYmVyT2ZWZXJ0aWNlcyBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoc291cmNlQXJyYXkpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgic291cmNlQXJyYXkgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGJ5dGVPZmZzZXQpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYnl0ZU9mZnNldCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKG51bWJlck9mVmVydGljZXMgPj0gTWF0aF9kZWZhdWx0LlNJWFRZX0ZPVVJfS0lMT0JZVEVTKSB7CiAgICAgICAgICByZXR1cm4gbmV3IFVpbnQzMkFycmF5KHNvdXJjZUFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3IFVpbnQxNkFycmF5KHNvdXJjZUFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpOwogICAgICB9OwogICAgICBJbmRleERhdGF0eXBlLmZyb21UeXBlZEFycmF5ID0gZnVuY3Rpb24oYXJyYXkpIHsKICAgICAgICBpZiAoYXJyYXkgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7CiAgICAgICAgICByZXR1cm4gSW5kZXhEYXRhdHlwZS5VTlNJR05FRF9CWVRFOwogICAgICAgIH0KICAgICAgICBpZiAoYXJyYXkgaW5zdGFuY2VvZiBVaW50MTZBcnJheSkgewogICAgICAgICAgcmV0dXJuIEluZGV4RGF0YXR5cGUuVU5TSUdORURfU0hPUlQ7CiAgICAgICAgfQogICAgICAgIGlmIChhcnJheSBpbnN0YW5jZW9mIFVpbnQzMkFycmF5KSB7CiAgICAgICAgICByZXR1cm4gSW5kZXhEYXRhdHlwZS5VTlNJR05FRF9JTlQ7CiAgICAgICAgfQogICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgImFycmF5IG11c3QgYmUgYSBVaW50OEFycmF5LCBVaW50MTZBcnJheSwgb3IgVWludDMyQXJyYXkuIgogICAgICAgICk7CiAgICAgIH07CiAgICAgIEluZGV4RGF0YXR5cGVfZGVmYXVsdCA9IE9iamVjdC5mcmVlemUoSW5kZXhEYXRhdHlwZSk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9RdWFkcmF0aWNSZWFsUG9seW5vbWlhbC5qcwogIGZ1bmN0aW9uIGFkZFdpdGhDYW5jZWxsYXRpb25DaGVjayhsZWZ0LCByaWdodCwgdG9sZXJhbmNlKSB7CiAgICBjb25zdCBkaWZmZXJlbmNlID0gbGVmdCArIHJpZ2h0OwogICAgaWYgKE1hdGhfZGVmYXVsdC5zaWduKGxlZnQpICE9PSBNYXRoX2RlZmF1bHQuc2lnbihyaWdodCkgJiYgTWF0aC5hYnMoZGlmZmVyZW5jZSAvIE1hdGgubWF4KE1hdGguYWJzKGxlZnQpLCBNYXRoLmFicyhyaWdodCkpKSA8IHRvbGVyYW5jZSkgewogICAgICByZXR1cm4gMDsKICAgIH0KICAgIHJldHVybiBkaWZmZXJlbmNlOwogIH0KICB2YXIgUXVhZHJhdGljUmVhbFBvbHlub21pYWwsIFF1YWRyYXRpY1JlYWxQb2x5bm9taWFsX2RlZmF1bHQ7CiAgdmFyIGluaXRfUXVhZHJhdGljUmVhbFBvbHlub21pYWwgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1F1YWRyYXRpY1JlYWxQb2x5bm9taWFsLmpzIigpIHsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgUXVhZHJhdGljUmVhbFBvbHlub21pYWwgPSB7fTsKICAgICAgUXVhZHJhdGljUmVhbFBvbHlub21pYWwuY29tcHV0ZURpc2NyaW1pbmFudCA9IGZ1bmN0aW9uKGEzLCBiLCBjKSB7CiAgICAgICAgaWYgKHR5cGVvZiBhMyAhPT0gIm51bWJlciIpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJhIGlzIGEgcmVxdWlyZWQgbnVtYmVyLiIpOwogICAgICAgIH0KICAgICAgICBpZiAodHlwZW9mIGIgIT09ICJudW1iZXIiKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYiBpcyBhIHJlcXVpcmVkIG51bWJlci4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKHR5cGVvZiBjICE9PSAibnVtYmVyIikgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImMgaXMgYSByZXF1aXJlZCBudW1iZXIuIik7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGRpc2NyaW1pbmFudCA9IGIgKiBiIC0gNCAqIGEzICogYzsKICAgICAgICByZXR1cm4gZGlzY3JpbWluYW50OwogICAgICB9OwogICAgICBRdWFkcmF0aWNSZWFsUG9seW5vbWlhbC5jb21wdXRlUmVhbFJvb3RzID0gZnVuY3Rpb24oYTMsIGIsIGMpIHsKICAgICAgICBpZiAodHlwZW9mIGEzICE9PSAibnVtYmVyIikgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImEgaXMgYSByZXF1aXJlZCBudW1iZXIuIik7CiAgICAgICAgfQogICAgICAgIGlmICh0eXBlb2YgYiAhPT0gIm51bWJlciIpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJiIGlzIGEgcmVxdWlyZWQgbnVtYmVyLiIpOwogICAgICAgIH0KICAgICAgICBpZiAodHlwZW9mIGMgIT09ICJudW1iZXIiKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYyBpcyBhIHJlcXVpcmVkIG51bWJlci4iKTsKICAgICAgICB9CiAgICAgICAgbGV0IHJhdGlvOwogICAgICAgIGlmIChhMyA9PT0gMCkgewogICAgICAgICAgaWYgKGIgPT09IDApIHsKICAgICAgICAgICAgcmV0dXJuIFtdOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIFstYyAvIGJdOwogICAgICAgIH0gZWxzZSBpZiAoYiA9PT0gMCkgewogICAgICAgICAgaWYgKGMgPT09IDApIHsKICAgICAgICAgICAgcmV0dXJuIFswLCAwXTsKICAgICAgICAgIH0KICAgICAgICAgIGNvbnN0IGNNYWduaXR1ZGUgPSBNYXRoLmFicyhjKTsKICAgICAgICAgIGNvbnN0IGFNYWduaXR1ZGUgPSBNYXRoLmFicyhhMyk7CiAgICAgICAgICBpZiAoY01hZ25pdHVkZSA8IGFNYWduaXR1ZGUgJiYgY01hZ25pdHVkZSAvIGFNYWduaXR1ZGUgPCBNYXRoX2RlZmF1bHQuRVBTSUxPTjE0KSB7CiAgICAgICAgICAgIHJldHVybiBbMCwgMF07CiAgICAgICAgICB9IGVsc2UgaWYgKGNNYWduaXR1ZGUgPiBhTWFnbml0dWRlICYmIGFNYWduaXR1ZGUgLyBjTWFnbml0dWRlIDwgTWF0aF9kZWZhdWx0LkVQU0lMT04xNCkgewogICAgICAgICAgICByZXR1cm4gW107CiAgICAgICAgICB9CiAgICAgICAgICByYXRpbyA9IC1jIC8gYTM7CiAgICAgICAgICBpZiAocmF0aW8gPCAwKSB7CiAgICAgICAgICAgIHJldHVybiBbXTsKICAgICAgICAgIH0KICAgICAgICAgIGNvbnN0IHJvb3QgPSBNYXRoLnNxcnQocmF0aW8pOwogICAgICAgICAgcmV0dXJuIFstcm9vdCwgcm9vdF07CiAgICAgICAgfSBlbHNlIGlmIChjID09PSAwKSB7CiAgICAgICAgICByYXRpbyA9IC1iIC8gYTM7CiAgICAgICAgICBpZiAocmF0aW8gPCAwKSB7CiAgICAgICAgICAgIHJldHVybiBbcmF0aW8sIDBdOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIFswLCByYXRpb107CiAgICAgICAgfQogICAgICAgIGNvbnN0IGIyID0gYiAqIGI7CiAgICAgICAgY29uc3QgZm91cl9hYyA9IDQgKiBhMyAqIGM7CiAgICAgICAgY29uc3QgcmFkaWNhbmQgPSBhZGRXaXRoQ2FuY2VsbGF0aW9uQ2hlY2soYjIsIC1mb3VyX2FjLCBNYXRoX2RlZmF1bHQuRVBTSUxPTjE0KTsKICAgICAgICBpZiAocmFkaWNhbmQgPCAwKSB7CiAgICAgICAgICByZXR1cm4gW107CiAgICAgICAgfQogICAgICAgIGNvbnN0IHEgPSAtMC41ICogYWRkV2l0aENhbmNlbGxhdGlvbkNoZWNrKAogICAgICAgICAgYiwKICAgICAgICAgIE1hdGhfZGVmYXVsdC5zaWduKGIpICogTWF0aC5zcXJ0KHJhZGljYW5kKSwKICAgICAgICAgIE1hdGhfZGVmYXVsdC5FUFNJTE9OMTQKICAgICAgICApOwogICAgICAgIGlmIChiID4gMCkgewogICAgICAgICAgcmV0dXJuIFtxIC8gYTMsIGMgLyBxXTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIFtjIC8gcSwgcSAvIGEzXTsKICAgICAgfTsKICAgICAgUXVhZHJhdGljUmVhbFBvbHlub21pYWxfZGVmYXVsdCA9IFF1YWRyYXRpY1JlYWxQb2x5bm9taWFsOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvQ3ViaWNSZWFsUG9seW5vbWlhbC5qcwogIGZ1bmN0aW9uIGNvbXB1dGVSZWFsUm9vdHMoYTMsIGIsIGMsIGQpIHsKICAgIGNvbnN0IEEgPSBhMzsKICAgIGNvbnN0IEIgPSBiIC8gMzsKICAgIGNvbnN0IEMgPSBjIC8gMzsKICAgIGNvbnN0IEQgPSBkOwogICAgY29uc3QgQUMgPSBBICogQzsKICAgIGNvbnN0IEJEID0gQiAqIEQ7CiAgICBjb25zdCBCMiA9IEIgKiBCOwogICAgY29uc3QgQzIgPSBDICogQzsKICAgIGNvbnN0IGRlbHRhMSA9IEEgKiBDIC0gQjI7CiAgICBjb25zdCBkZWx0YTIgPSBBICogRCAtIEIgKiBDOwogICAgY29uc3QgZGVsdGEzID0gQiAqIEQgLSBDMjsKICAgIGNvbnN0IGRpc2NyaW1pbmFudCA9IDQgKiBkZWx0YTEgKiBkZWx0YTMgLSBkZWx0YTIgKiBkZWx0YTI7CiAgICBsZXQgdGVtcDsKICAgIGxldCB0ZW1wMTsKICAgIGlmIChkaXNjcmltaW5hbnQgPCAwKSB7CiAgICAgIGxldCBBQmFyOwogICAgICBsZXQgQ0JhcjsKICAgICAgbGV0IERCYXI7CiAgICAgIGlmIChCMiAqIEJEID49IEFDICogQzIpIHsKICAgICAgICBBQmFyID0gQTsKICAgICAgICBDQmFyID0gZGVsdGExOwogICAgICAgIERCYXIgPSAtMiAqIEIgKiBkZWx0YTEgKyBBICogZGVsdGEyOwogICAgICB9IGVsc2UgewogICAgICAgIEFCYXIgPSBEOwogICAgICAgIENCYXIgPSBkZWx0YTM7CiAgICAgICAgREJhciA9IC1EICogZGVsdGEyICsgMiAqIEMgKiBkZWx0YTM7CiAgICAgIH0KICAgICAgY29uc3QgcyA9IERCYXIgPCAwID8gLTEgOiAxOwogICAgICBjb25zdCB0ZW1wMCA9IC1zICogTWF0aC5hYnMoQUJhcikgKiBNYXRoLnNxcnQoLWRpc2NyaW1pbmFudCk7CiAgICAgIHRlbXAxID0gLURCYXIgKyB0ZW1wMDsKICAgICAgY29uc3QgeCA9IHRlbXAxIC8gMjsKICAgICAgY29uc3QgcCA9IHggPCAwID8gLU1hdGgucG93KC14LCAxIC8gMykgOiBNYXRoLnBvdyh4LCAxIC8gMyk7CiAgICAgIGNvbnN0IHEgPSB0ZW1wMSA9PT0gdGVtcDAgPyAtcCA6IC1DQmFyIC8gcDsKICAgICAgdGVtcCA9IENCYXIgPD0gMCA/IHAgKyBxIDogLURCYXIgLyAocCAqIHAgKyBxICogcSArIENCYXIpOwogICAgICBpZiAoQjIgKiBCRCA+PSBBQyAqIEMyKSB7CiAgICAgICAgcmV0dXJuIFsodGVtcCAtIEIpIC8gQV07CiAgICAgIH0KICAgICAgcmV0dXJuIFstRCAvICh0ZW1wICsgQyldOwogICAgfQogICAgY29uc3QgQ0JhckEgPSBkZWx0YTE7CiAgICBjb25zdCBEQmFyQSA9IC0yICogQiAqIGRlbHRhMSArIEEgKiBkZWx0YTI7CiAgICBjb25zdCBDQmFyRCA9IGRlbHRhMzsKICAgIGNvbnN0IERCYXJEID0gLUQgKiBkZWx0YTIgKyAyICogQyAqIGRlbHRhMzsKICAgIGNvbnN0IHNxdWFyZVJvb3RPZkRpc2NyaW1pbmFudCA9IE1hdGguc3FydChkaXNjcmltaW5hbnQpOwogICAgY29uc3QgaGFsZlNxdWFyZVJvb3RPZjMgPSBNYXRoLnNxcnQoMykgLyAyOwogICAgbGV0IHRoZXRhID0gTWF0aC5hYnMoTWF0aC5hdGFuMihBICogc3F1YXJlUm9vdE9mRGlzY3JpbWluYW50LCAtREJhckEpIC8gMyk7CiAgICB0ZW1wID0gMiAqIE1hdGguc3FydCgtQ0JhckEpOwogICAgbGV0IGNvc2luZSA9IE1hdGguY29zKHRoZXRhKTsKICAgIHRlbXAxID0gdGVtcCAqIGNvc2luZTsKICAgIGxldCB0ZW1wMyA9IHRlbXAgKiAoLWNvc2luZSAvIDIgLSBoYWxmU3F1YXJlUm9vdE9mMyAqIE1hdGguc2luKHRoZXRhKSk7CiAgICBjb25zdCBudW1lcmF0b3JMYXJnZSA9IHRlbXAxICsgdGVtcDMgPiAyICogQiA/IHRlbXAxIC0gQiA6IHRlbXAzIC0gQjsKICAgIGNvbnN0IGRlbm9taW5hdG9yTGFyZ2UgPSBBOwogICAgY29uc3Qgcm9vdDEgPSBudW1lcmF0b3JMYXJnZSAvIGRlbm9taW5hdG9yTGFyZ2U7CiAgICB0aGV0YSA9IE1hdGguYWJzKE1hdGguYXRhbjIoRCAqIHNxdWFyZVJvb3RPZkRpc2NyaW1pbmFudCwgLURCYXJEKSAvIDMpOwogICAgdGVtcCA9IDIgKiBNYXRoLnNxcnQoLUNCYXJEKTsKICAgIGNvc2luZSA9IE1hdGguY29zKHRoZXRhKTsKICAgIHRlbXAxID0gdGVtcCAqIGNvc2luZTsKICAgIHRlbXAzID0gdGVtcCAqICgtY29zaW5lIC8gMiAtIGhhbGZTcXVhcmVSb290T2YzICogTWF0aC5zaW4odGhldGEpKTsKICAgIGNvbnN0IG51bWVyYXRvclNtYWxsID0gLUQ7CiAgICBjb25zdCBkZW5vbWluYXRvclNtYWxsID0gdGVtcDEgKyB0ZW1wMyA8IDIgKiBDID8gdGVtcDEgKyBDIDogdGVtcDMgKyBDOwogICAgY29uc3Qgcm9vdDMgPSBudW1lcmF0b3JTbWFsbCAvIGRlbm9taW5hdG9yU21hbGw7CiAgICBjb25zdCBFID0gZGVub21pbmF0b3JMYXJnZSAqIGRlbm9taW5hdG9yU21hbGw7CiAgICBjb25zdCBGID0gLW51bWVyYXRvckxhcmdlICogZGVub21pbmF0b3JTbWFsbCAtIGRlbm9taW5hdG9yTGFyZ2UgKiBudW1lcmF0b3JTbWFsbDsKICAgIGNvbnN0IEcgPSBudW1lcmF0b3JMYXJnZSAqIG51bWVyYXRvclNtYWxsOwogICAgY29uc3Qgcm9vdDIgPSAoQyAqIEYgLSBCICogRykgLyAoLUIgKiBGICsgQyAqIEUpOwogICAgaWYgKHJvb3QxIDw9IHJvb3QyKSB7CiAgICAgIGlmIChyb290MSA8PSByb290MykgewogICAgICAgIGlmIChyb290MiA8PSByb290MykgewogICAgICAgICAgcmV0dXJuIFtyb290MSwgcm9vdDIsIHJvb3QzXTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIFtyb290MSwgcm9vdDMsIHJvb3QyXTsKICAgICAgfQogICAgICByZXR1cm4gW3Jvb3QzLCByb290MSwgcm9vdDJdOwogICAgfQogICAgaWYgKHJvb3QxIDw9IHJvb3QzKSB7CiAgICAgIHJldHVybiBbcm9vdDIsIHJvb3QxLCByb290M107CiAgICB9CiAgICBpZiAocm9vdDIgPD0gcm9vdDMpIHsKICAgICAgcmV0dXJuIFtyb290Miwgcm9vdDMsIHJvb3QxXTsKICAgIH0KICAgIHJldHVybiBbcm9vdDMsIHJvb3QyLCByb290MV07CiAgfQogIHZhciBDdWJpY1JlYWxQb2x5bm9taWFsLCBDdWJpY1JlYWxQb2x5bm9taWFsX2RlZmF1bHQ7CiAgdmFyIGluaXRfQ3ViaWNSZWFsUG9seW5vbWlhbCA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvQ3ViaWNSZWFsUG9seW5vbWlhbC5qcyIoKSB7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgaW5pdF9RdWFkcmF0aWNSZWFsUG9seW5vbWlhbCgpOwogICAgICBDdWJpY1JlYWxQb2x5bm9taWFsID0ge307CiAgICAgIEN1YmljUmVhbFBvbHlub21pYWwuY29tcHV0ZURpc2NyaW1pbmFudCA9IGZ1bmN0aW9uKGEzLCBiLCBjLCBkKSB7CiAgICAgICAgaWYgKHR5cGVvZiBhMyAhPT0gIm51bWJlciIpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJhIGlzIGEgcmVxdWlyZWQgbnVtYmVyLiIpOwogICAgICAgIH0KICAgICAgICBpZiAodHlwZW9mIGIgIT09ICJudW1iZXIiKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYiBpcyBhIHJlcXVpcmVkIG51bWJlci4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKHR5cGVvZiBjICE9PSAibnVtYmVyIikgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImMgaXMgYSByZXF1aXJlZCBudW1iZXIuIik7CiAgICAgICAgfQogICAgICAgIGlmICh0eXBlb2YgZCAhPT0gIm51bWJlciIpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJkIGlzIGEgcmVxdWlyZWQgbnVtYmVyLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBhMjIgPSBhMyAqIGEzOwogICAgICAgIGNvbnN0IGIyID0gYiAqIGI7CiAgICAgICAgY29uc3QgYzIgPSBjICogYzsKICAgICAgICBjb25zdCBkMiA9IGQgKiBkOwogICAgICAgIGNvbnN0IGRpc2NyaW1pbmFudCA9IDE4ICogYTMgKiBiICogYyAqIGQgKyBiMiAqIGMyIC0gMjcgKiBhMjIgKiBkMiAtIDQgKiAoYTMgKiBjMiAqIGMgKyBiMiAqIGIgKiBkKTsKICAgICAgICByZXR1cm4gZGlzY3JpbWluYW50OwogICAgICB9OwogICAgICBDdWJpY1JlYWxQb2x5bm9taWFsLmNvbXB1dGVSZWFsUm9vdHMgPSBmdW5jdGlvbihhMywgYiwgYywgZCkgewogICAgICAgIGlmICh0eXBlb2YgYTMgIT09ICJudW1iZXIiKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYSBpcyBhIHJlcXVpcmVkIG51bWJlci4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSAibnVtYmVyIikgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImIgaXMgYSByZXF1aXJlZCBudW1iZXIuIik7CiAgICAgICAgfQogICAgICAgIGlmICh0eXBlb2YgYyAhPT0gIm51bWJlciIpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJjIGlzIGEgcmVxdWlyZWQgbnVtYmVyLiIpOwogICAgICAgIH0KICAgICAgICBpZiAodHlwZW9mIGQgIT09ICJudW1iZXIiKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiZCBpcyBhIHJlcXVpcmVkIG51bWJlci4iKTsKICAgICAgICB9CiAgICAgICAgbGV0IHJvb3RzOwogICAgICAgIGxldCByYXRpbzsKICAgICAgICBpZiAoYTMgPT09IDApIHsKICAgICAgICAgIHJldHVybiBRdWFkcmF0aWNSZWFsUG9seW5vbWlhbF9kZWZhdWx0LmNvbXB1dGVSZWFsUm9vdHMoYiwgYywgZCk7CiAgICAgICAgfSBlbHNlIGlmIChiID09PSAwKSB7CiAgICAgICAgICBpZiAoYyA9PT0gMCkgewogICAgICAgICAgICBpZiAoZCA9PT0gMCkgewogICAgICAgICAgICAgIHJldHVybiBbMCwgMCwgMF07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmF0aW8gPSAtZCAvIGEzOwogICAgICAgICAgICBjb25zdCByb290ID0gcmF0aW8gPCAwID8gLU1hdGgucG93KC1yYXRpbywgMSAvIDMpIDogTWF0aC5wb3cocmF0aW8sIDEgLyAzKTsKICAgICAgICAgICAgcmV0dXJuIFtyb290LCByb290LCByb290XTsKICAgICAgICAgIH0gZWxzZSBpZiAoZCA9PT0gMCkgewogICAgICAgICAgICByb290cyA9IFF1YWRyYXRpY1JlYWxQb2x5bm9taWFsX2RlZmF1bHQuY29tcHV0ZVJlYWxSb290cyhhMywgMCwgYyk7CiAgICAgICAgICAgIGlmIChyb290cy5MZW5ndGggPT09IDApIHsKICAgICAgICAgICAgICByZXR1cm4gWzBdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBbcm9vdHNbMF0sIDAsIHJvb3RzWzFdXTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBjb21wdXRlUmVhbFJvb3RzKGEzLCAwLCBjLCBkKTsKICAgICAgICB9IGVsc2UgaWYgKGMgPT09IDApIHsKICAgICAgICAgIGlmIChkID09PSAwKSB7CiAgICAgICAgICAgIHJhdGlvID0gLWIgLyBhMzsKICAgICAgICAgICAgaWYgKHJhdGlvIDwgMCkgewogICAgICAgICAgICAgIHJldHVybiBbcmF0aW8sIDAsIDBdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBbMCwgMCwgcmF0aW9dOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIGNvbXB1dGVSZWFsUm9vdHMoYTMsIGIsIDAsIGQpOwogICAgICAgIH0gZWxzZSBpZiAoZCA9PT0gMCkgewogICAgICAgICAgcm9vdHMgPSBRdWFkcmF0aWNSZWFsUG9seW5vbWlhbF9kZWZhdWx0LmNvbXB1dGVSZWFsUm9vdHMoYTMsIGIsIGMpOwogICAgICAgICAgaWYgKHJvb3RzLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICByZXR1cm4gWzBdOwogICAgICAgICAgfSBlbHNlIGlmIChyb290c1sxXSA8PSAwKSB7CiAgICAgICAgICAgIHJldHVybiBbcm9vdHNbMF0sIHJvb3RzWzFdLCAwXTsKICAgICAgICAgIH0gZWxzZSBpZiAocm9vdHNbMF0gPj0gMCkgewogICAgICAgICAgICByZXR1cm4gWzAsIHJvb3RzWzBdLCByb290c1sxXV07CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gW3Jvb3RzWzBdLCAwLCByb290c1sxXV07CiAgICAgICAgfQogICAgICAgIHJldHVybiBjb21wdXRlUmVhbFJvb3RzKGEzLCBiLCBjLCBkKTsKICAgICAgfTsKICAgICAgQ3ViaWNSZWFsUG9seW5vbWlhbF9kZWZhdWx0ID0gQ3ViaWNSZWFsUG9seW5vbWlhbDsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1F1YXJ0aWNSZWFsUG9seW5vbWlhbC5qcwogIGZ1bmN0aW9uIG9yaWdpbmFsKGEzLCBhMjIsIGExLCBhMCkgewogICAgY29uc3QgYTNTcXVhcmVkID0gYTMgKiBhMzsKICAgIGNvbnN0IHAgPSBhMjIgLSAzICogYTNTcXVhcmVkIC8gODsKICAgIGNvbnN0IHEgPSBhMSAtIGEyMiAqIGEzIC8gMiArIGEzU3F1YXJlZCAqIGEzIC8gODsKICAgIGNvbnN0IHIgPSBhMCAtIGExICogYTMgLyA0ICsgYTIyICogYTNTcXVhcmVkIC8gMTYgLSAzICogYTNTcXVhcmVkICogYTNTcXVhcmVkIC8gMjU2OwogICAgY29uc3QgY3ViaWNSb290cyA9IEN1YmljUmVhbFBvbHlub21pYWxfZGVmYXVsdC5jb21wdXRlUmVhbFJvb3RzKAogICAgICAxLAogICAgICAyICogcCwKICAgICAgcCAqIHAgLSA0ICogciwKICAgICAgLXEgKiBxCiAgICApOwogICAgaWYgKGN1YmljUm9vdHMubGVuZ3RoID4gMCkgewogICAgICBjb25zdCB0ZW1wID0gLWEzIC8gNDsKICAgICAgY29uc3QgaFNxdWFyZWQgPSBjdWJpY1Jvb3RzW2N1YmljUm9vdHMubGVuZ3RoIC0gMV07CiAgICAgIGlmIChNYXRoLmFicyhoU3F1YXJlZCkgPCBNYXRoX2RlZmF1bHQuRVBTSUxPTjE0KSB7CiAgICAgICAgY29uc3Qgcm9vdHMgPSBRdWFkcmF0aWNSZWFsUG9seW5vbWlhbF9kZWZhdWx0LmNvbXB1dGVSZWFsUm9vdHMoMSwgcCwgcik7CiAgICAgICAgaWYgKHJvb3RzLmxlbmd0aCA9PT0gMikgewogICAgICAgICAgY29uc3Qgcm9vdDAgPSByb290c1swXTsKICAgICAgICAgIGNvbnN0IHJvb3QxID0gcm9vdHNbMV07CiAgICAgICAgICBsZXQgeTsKICAgICAgICAgIGlmIChyb290MCA+PSAwICYmIHJvb3QxID49IDApIHsKICAgICAgICAgICAgY29uc3QgeTAgPSBNYXRoLnNxcnQocm9vdDApOwogICAgICAgICAgICBjb25zdCB5MSA9IE1hdGguc3FydChyb290MSk7CiAgICAgICAgICAgIHJldHVybiBbdGVtcCAtIHkxLCB0ZW1wIC0geTAsIHRlbXAgKyB5MCwgdGVtcCArIHkxXTsKICAgICAgICAgIH0gZWxzZSBpZiAocm9vdDAgPj0gMCAmJiByb290MSA8IDApIHsKICAgICAgICAgICAgeSA9IE1hdGguc3FydChyb290MCk7CiAgICAgICAgICAgIHJldHVybiBbdGVtcCAtIHksIHRlbXAgKyB5XTsKICAgICAgICAgIH0gZWxzZSBpZiAocm9vdDAgPCAwICYmIHJvb3QxID49IDApIHsKICAgICAgICAgICAgeSA9IE1hdGguc3FydChyb290MSk7CiAgICAgICAgICAgIHJldHVybiBbdGVtcCAtIHksIHRlbXAgKyB5XTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIFtdOwogICAgICB9IGVsc2UgaWYgKGhTcXVhcmVkID4gMCkgewogICAgICAgIGNvbnN0IGggPSBNYXRoLnNxcnQoaFNxdWFyZWQpOwogICAgICAgIGNvbnN0IG0gPSAocCArIGhTcXVhcmVkIC0gcSAvIGgpIC8gMjsKICAgICAgICBjb25zdCBuID0gKHAgKyBoU3F1YXJlZCArIHEgLyBoKSAvIDI7CiAgICAgICAgY29uc3Qgcm9vdHMxID0gUXVhZHJhdGljUmVhbFBvbHlub21pYWxfZGVmYXVsdC5jb21wdXRlUmVhbFJvb3RzKDEsIGgsIG0pOwogICAgICAgIGNvbnN0IHJvb3RzMiA9IFF1YWRyYXRpY1JlYWxQb2x5bm9taWFsX2RlZmF1bHQuY29tcHV0ZVJlYWxSb290cygxLCAtaCwgbik7CiAgICAgICAgaWYgKHJvb3RzMS5sZW5ndGggIT09IDApIHsKICAgICAgICAgIHJvb3RzMVswXSArPSB0ZW1wOwogICAgICAgICAgcm9vdHMxWzFdICs9IHRlbXA7CiAgICAgICAgICBpZiAocm9vdHMyLmxlbmd0aCAhPT0gMCkgewogICAgICAgICAgICByb290czJbMF0gKz0gdGVtcDsKICAgICAgICAgICAgcm9vdHMyWzFdICs9IHRlbXA7CiAgICAgICAgICAgIGlmIChyb290czFbMV0gPD0gcm9vdHMyWzBdKSB7CiAgICAgICAgICAgICAgcmV0dXJuIFtyb290czFbMF0sIHJvb3RzMVsxXSwgcm9vdHMyWzBdLCByb290czJbMV1dOwogICAgICAgICAgICB9IGVsc2UgaWYgKHJvb3RzMlsxXSA8PSByb290czFbMF0pIHsKICAgICAgICAgICAgICByZXR1cm4gW3Jvb3RzMlswXSwgcm9vdHMyWzFdLCByb290czFbMF0sIHJvb3RzMVsxXV07CiAgICAgICAgICAgIH0gZWxzZSBpZiAocm9vdHMxWzBdID49IHJvb3RzMlswXSAmJiByb290czFbMV0gPD0gcm9vdHMyWzFdKSB7CiAgICAgICAgICAgICAgcmV0dXJuIFtyb290czJbMF0sIHJvb3RzMVswXSwgcm9vdHMxWzFdLCByb290czJbMV1dOwogICAgICAgICAgICB9IGVsc2UgaWYgKHJvb3RzMlswXSA+PSByb290czFbMF0gJiYgcm9vdHMyWzFdIDw9IHJvb3RzMVsxXSkgewogICAgICAgICAgICAgIHJldHVybiBbcm9vdHMxWzBdLCByb290czJbMF0sIHJvb3RzMlsxXSwgcm9vdHMxWzFdXTsKICAgICAgICAgICAgfSBlbHNlIGlmIChyb290czFbMF0gPiByb290czJbMF0gJiYgcm9vdHMxWzBdIDwgcm9vdHMyWzFdKSB7CiAgICAgICAgICAgICAgcmV0dXJuIFtyb290czJbMF0sIHJvb3RzMVswXSwgcm9vdHMyWzFdLCByb290czFbMV1dOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBbcm9vdHMxWzBdLCByb290czJbMF0sIHJvb3RzMVsxXSwgcm9vdHMyWzFdXTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiByb290czE7CiAgICAgICAgfQogICAgICAgIGlmIChyb290czIubGVuZ3RoICE9PSAwKSB7CiAgICAgICAgICByb290czJbMF0gKz0gdGVtcDsKICAgICAgICAgIHJvb3RzMlsxXSArPSB0ZW1wOwogICAgICAgICAgcmV0dXJuIHJvb3RzMjsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIFtdOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gW107CiAgfQogIGZ1bmN0aW9uIG5ldW1hcmsoYTMsIGEyMiwgYTEsIGEwKSB7CiAgICBjb25zdCBhMVNxdWFyZWQgPSBhMSAqIGExOwogICAgY29uc3QgYTJTcXVhcmVkID0gYTIyICogYTIyOwogICAgY29uc3QgYTNTcXVhcmVkID0gYTMgKiBhMzsKICAgIGNvbnN0IHAgPSAtMiAqIGEyMjsKICAgIGNvbnN0IHEgPSBhMSAqIGEzICsgYTJTcXVhcmVkIC0gNCAqIGEwOwogICAgY29uc3QgciA9IGEzU3F1YXJlZCAqIGEwIC0gYTEgKiBhMjIgKiBhMyArIGExU3F1YXJlZDsKICAgIGNvbnN0IGN1YmljUm9vdHMgPSBDdWJpY1JlYWxQb2x5bm9taWFsX2RlZmF1bHQuY29tcHV0ZVJlYWxSb290cygxLCBwLCBxLCByKTsKICAgIGlmIChjdWJpY1Jvb3RzLmxlbmd0aCA+IDApIHsKICAgICAgY29uc3QgeSA9IGN1YmljUm9vdHNbMF07CiAgICAgIGNvbnN0IHRlbXAgPSBhMjIgLSB5OwogICAgICBjb25zdCB0ZW1wU3F1YXJlZCA9IHRlbXAgKiB0ZW1wOwogICAgICBjb25zdCBnMSA9IGEzIC8gMjsKICAgICAgY29uc3QgaDEgPSB0ZW1wIC8gMjsKICAgICAgY29uc3QgbSA9IHRlbXBTcXVhcmVkIC0gNCAqIGEwOwogICAgICBjb25zdCBtRXJyb3IgPSB0ZW1wU3F1YXJlZCArIDQgKiBNYXRoLmFicyhhMCk7CiAgICAgIGNvbnN0IG4gPSBhM1NxdWFyZWQgLSA0ICogeTsKICAgICAgY29uc3QgbkVycm9yID0gYTNTcXVhcmVkICsgNCAqIE1hdGguYWJzKHkpOwogICAgICBsZXQgZzI7CiAgICAgIGxldCBoMjsKICAgICAgaWYgKHkgPCAwIHx8IG0gKiBuRXJyb3IgPCBuICogbUVycm9yKSB7CiAgICAgICAgY29uc3Qgc3F1YXJlUm9vdE9mTiA9IE1hdGguc3FydChuKTsKICAgICAgICBnMiA9IHNxdWFyZVJvb3RPZk4gLyAyOwogICAgICAgIGgyID0gc3F1YXJlUm9vdE9mTiA9PT0gMCA/IDAgOiAoYTMgKiBoMSAtIGExKSAvIHNxdWFyZVJvb3RPZk47CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY29uc3Qgc3F1YXJlUm9vdE9mTSA9IE1hdGguc3FydChtKTsKICAgICAgICBnMiA9IHNxdWFyZVJvb3RPZk0gPT09IDAgPyAwIDogKGEzICogaDEgLSBhMSkgLyBzcXVhcmVSb290T2ZNOwogICAgICAgIGgyID0gc3F1YXJlUm9vdE9mTSAvIDI7CiAgICAgIH0KICAgICAgbGV0IEc7CiAgICAgIGxldCBnOwogICAgICBpZiAoZzEgPT09IDAgJiYgZzIgPT09IDApIHsKICAgICAgICBHID0gMDsKICAgICAgICBnID0gMDsKICAgICAgfSBlbHNlIGlmIChNYXRoX2RlZmF1bHQuc2lnbihnMSkgPT09IE1hdGhfZGVmYXVsdC5zaWduKGcyKSkgewogICAgICAgIEcgPSBnMSArIGcyOwogICAgICAgIGcgPSB5IC8gRzsKICAgICAgfSBlbHNlIHsKICAgICAgICBnID0gZzEgLSBnMjsKICAgICAgICBHID0geSAvIGc7CiAgICAgIH0KICAgICAgbGV0IEg7CiAgICAgIGxldCBoOwogICAgICBpZiAoaDEgPT09IDAgJiYgaDIgPT09IDApIHsKICAgICAgICBIID0gMDsKICAgICAgICBoID0gMDsKICAgICAgfSBlbHNlIGlmIChNYXRoX2RlZmF1bHQuc2lnbihoMSkgPT09IE1hdGhfZGVmYXVsdC5zaWduKGgyKSkgewogICAgICAgIEggPSBoMSArIGgyOwogICAgICAgIGggPSBhMCAvIEg7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaCA9IGgxIC0gaDI7CiAgICAgICAgSCA9IGEwIC8gaDsKICAgICAgfQogICAgICBjb25zdCByb290czEgPSBRdWFkcmF0aWNSZWFsUG9seW5vbWlhbF9kZWZhdWx0LmNvbXB1dGVSZWFsUm9vdHMoMSwgRywgSCk7CiAgICAgIGNvbnN0IHJvb3RzMiA9IFF1YWRyYXRpY1JlYWxQb2x5bm9taWFsX2RlZmF1bHQuY29tcHV0ZVJlYWxSb290cygxLCBnLCBoKTsKICAgICAgaWYgKHJvb3RzMS5sZW5ndGggIT09IDApIHsKICAgICAgICBpZiAocm9vdHMyLmxlbmd0aCAhPT0gMCkgewogICAgICAgICAgaWYgKHJvb3RzMVsxXSA8PSByb290czJbMF0pIHsKICAgICAgICAgICAgcmV0dXJuIFtyb290czFbMF0sIHJvb3RzMVsxXSwgcm9vdHMyWzBdLCByb290czJbMV1dOwogICAgICAgICAgfSBlbHNlIGlmIChyb290czJbMV0gPD0gcm9vdHMxWzBdKSB7CiAgICAgICAgICAgIHJldHVybiBbcm9vdHMyWzBdLCByb290czJbMV0sIHJvb3RzMVswXSwgcm9vdHMxWzFdXTsKICAgICAgICAgIH0gZWxzZSBpZiAocm9vdHMxWzBdID49IHJvb3RzMlswXSAmJiByb290czFbMV0gPD0gcm9vdHMyWzFdKSB7CiAgICAgICAgICAgIHJldHVybiBbcm9vdHMyWzBdLCByb290czFbMF0sIHJvb3RzMVsxXSwgcm9vdHMyWzFdXTsKICAgICAgICAgIH0gZWxzZSBpZiAocm9vdHMyWzBdID49IHJvb3RzMVswXSAmJiByb290czJbMV0gPD0gcm9vdHMxWzFdKSB7CiAgICAgICAgICAgIHJldHVybiBbcm9vdHMxWzBdLCByb290czJbMF0sIHJvb3RzMlsxXSwgcm9vdHMxWzFdXTsKICAgICAgICAgIH0gZWxzZSBpZiAocm9vdHMxWzBdID4gcm9vdHMyWzBdICYmIHJvb3RzMVswXSA8IHJvb3RzMlsxXSkgewogICAgICAgICAgICByZXR1cm4gW3Jvb3RzMlswXSwgcm9vdHMxWzBdLCByb290czJbMV0sIHJvb3RzMVsxXV07CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gW3Jvb3RzMVswXSwgcm9vdHMyWzBdLCByb290czFbMV0sIHJvb3RzMlsxXV07CiAgICAgICAgfQogICAgICAgIHJldHVybiByb290czE7CiAgICAgIH0KICAgICAgaWYgKHJvb3RzMi5sZW5ndGggIT09IDApIHsKICAgICAgICByZXR1cm4gcm9vdHMyOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gW107CiAgfQogIHZhciBRdWFydGljUmVhbFBvbHlub21pYWwsIFF1YXJ0aWNSZWFsUG9seW5vbWlhbF9kZWZhdWx0OwogIHZhciBpbml0X1F1YXJ0aWNSZWFsUG9seW5vbWlhbCA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUXVhcnRpY1JlYWxQb2x5bm9taWFsLmpzIigpIHsKICAgICAgaW5pdF9DdWJpY1JlYWxQb2x5bm9taWFsKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIGluaXRfUXVhZHJhdGljUmVhbFBvbHlub21pYWwoKTsKICAgICAgUXVhcnRpY1JlYWxQb2x5bm9taWFsID0ge307CiAgICAgIFF1YXJ0aWNSZWFsUG9seW5vbWlhbC5jb21wdXRlRGlzY3JpbWluYW50ID0gZnVuY3Rpb24oYTMsIGIsIGMsIGQsIGUpIHsKICAgICAgICBpZiAodHlwZW9mIGEzICE9PSAibnVtYmVyIikgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImEgaXMgYSByZXF1aXJlZCBudW1iZXIuIik7CiAgICAgICAgfQogICAgICAgIGlmICh0eXBlb2YgYiAhPT0gIm51bWJlciIpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJiIGlzIGEgcmVxdWlyZWQgbnVtYmVyLiIpOwogICAgICAgIH0KICAgICAgICBpZiAodHlwZW9mIGMgIT09ICJudW1iZXIiKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYyBpcyBhIHJlcXVpcmVkIG51bWJlci4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKHR5cGVvZiBkICE9PSAibnVtYmVyIikgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImQgaXMgYSByZXF1aXJlZCBudW1iZXIuIik7CiAgICAgICAgfQogICAgICAgIGlmICh0eXBlb2YgZSAhPT0gIm51bWJlciIpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJlIGlzIGEgcmVxdWlyZWQgbnVtYmVyLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBhMjIgPSBhMyAqIGEzOwogICAgICAgIGNvbnN0IGEzMiA9IGEyMiAqIGEzOwogICAgICAgIGNvbnN0IGIyID0gYiAqIGI7CiAgICAgICAgY29uc3QgYjMgPSBiMiAqIGI7CiAgICAgICAgY29uc3QgYzIgPSBjICogYzsKICAgICAgICBjb25zdCBjMzIgPSBjMiAqIGM7CiAgICAgICAgY29uc3QgZDIgPSBkICogZDsKICAgICAgICBjb25zdCBkMyA9IGQyICogZDsKICAgICAgICBjb25zdCBlMiA9IGUgKiBlOwogICAgICAgIGNvbnN0IGUzID0gZTIgKiBlOwogICAgICAgIGNvbnN0IGRpc2NyaW1pbmFudCA9IGIyICogYzIgKiBkMiAtIDQgKiBiMyAqIGQzIC0gNCAqIGEzICogYzMyICogZDIgKyAxOCAqIGEzICogYiAqIGMgKiBkMyAtIDI3ICogYTIyICogZDIgKiBkMiArIDI1NiAqIGEzMiAqIGUzICsgZSAqICgxOCAqIGIzICogYyAqIGQgLSA0ICogYjIgKiBjMzIgKyAxNiAqIGEzICogYzIgKiBjMiAtIDgwICogYTMgKiBiICogYzIgKiBkIC0gNiAqIGEzICogYjIgKiBkMiArIDE0NCAqIGEyMiAqIGMgKiBkMikgKyBlMiAqICgxNDQgKiBhMyAqIGIyICogYyAtIDI3ICogYjIgKiBiMiAtIDEyOCAqIGEyMiAqIGMyIC0gMTkyICogYTIyICogYiAqIGQpOwogICAgICAgIHJldHVybiBkaXNjcmltaW5hbnQ7CiAgICAgIH07CiAgICAgIFF1YXJ0aWNSZWFsUG9seW5vbWlhbC5jb21wdXRlUmVhbFJvb3RzID0gZnVuY3Rpb24oYTMsIGIsIGMsIGQsIGUpIHsKICAgICAgICBpZiAodHlwZW9mIGEzICE9PSAibnVtYmVyIikgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImEgaXMgYSByZXF1aXJlZCBudW1iZXIuIik7CiAgICAgICAgfQogICAgICAgIGlmICh0eXBlb2YgYiAhPT0gIm51bWJlciIpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJiIGlzIGEgcmVxdWlyZWQgbnVtYmVyLiIpOwogICAgICAgIH0KICAgICAgICBpZiAodHlwZW9mIGMgIT09ICJudW1iZXIiKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYyBpcyBhIHJlcXVpcmVkIG51bWJlci4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKHR5cGVvZiBkICE9PSAibnVtYmVyIikgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImQgaXMgYSByZXF1aXJlZCBudW1iZXIuIik7CiAgICAgICAgfQogICAgICAgIGlmICh0eXBlb2YgZSAhPT0gIm51bWJlciIpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJlIGlzIGEgcmVxdWlyZWQgbnVtYmVyLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoTWF0aC5hYnMoYTMpIDwgTWF0aF9kZWZhdWx0LkVQU0lMT04xNSkgewogICAgICAgICAgcmV0dXJuIEN1YmljUmVhbFBvbHlub21pYWxfZGVmYXVsdC5jb21wdXRlUmVhbFJvb3RzKGIsIGMsIGQsIGUpOwogICAgICAgIH0KICAgICAgICBjb25zdCBhMzIgPSBiIC8gYTM7CiAgICAgICAgY29uc3QgYTIyID0gYyAvIGEzOwogICAgICAgIGNvbnN0IGExID0gZCAvIGEzOwogICAgICAgIGNvbnN0IGEwID0gZSAvIGEzOwogICAgICAgIGxldCBrID0gYTMyIDwgMCA/IDEgOiAwOwogICAgICAgIGsgKz0gYTIyIDwgMCA/IGsgKyAxIDogazsKICAgICAgICBrICs9IGExIDwgMCA/IGsgKyAxIDogazsKICAgICAgICBrICs9IGEwIDwgMCA/IGsgKyAxIDogazsKICAgICAgICBzd2l0Y2ggKGspIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsKGEzMiwgYTIyLCBhMSwgYTApOwogICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICByZXR1cm4gbmV1bWFyayhhMzIsIGEyMiwgYTEsIGEwKTsKICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgcmV0dXJuIG5ldW1hcmsoYTMyLCBhMjIsIGExLCBhMCk7CiAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbChhMzIsIGEyMiwgYTEsIGEwKTsKICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsKGEzMiwgYTIyLCBhMSwgYTApOwogICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICByZXR1cm4gbmV1bWFyayhhMzIsIGEyMiwgYTEsIGEwKTsKICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsKGEzMiwgYTIyLCBhMSwgYTApOwogICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICByZXR1cm4gb3JpZ2luYWwoYTMyLCBhMjIsIGExLCBhMCk7CiAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgIHJldHVybiBuZXVtYXJrKGEzMiwgYTIyLCBhMSwgYTApOwogICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICByZXR1cm4gb3JpZ2luYWwoYTMyLCBhMjIsIGExLCBhMCk7CiAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICByZXR1cm4gb3JpZ2luYWwoYTMyLCBhMjIsIGExLCBhMCk7CiAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICByZXR1cm4gbmV1bWFyayhhMzIsIGEyMiwgYTEsIGEwKTsKICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbChhMzIsIGEyMiwgYTEsIGEwKTsKICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbChhMzIsIGEyMiwgYTEsIGEwKTsKICAgICAgICAgIGNhc2UgMTQ6CiAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbChhMzIsIGEyMiwgYTEsIGEwKTsKICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbChhMzIsIGEyMiwgYTEsIGEwKTsKICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgfQogICAgICB9OwogICAgICBRdWFydGljUmVhbFBvbHlub21pYWxfZGVmYXVsdCA9IFF1YXJ0aWNSZWFsUG9seW5vbWlhbDsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1JheS5qcwogIGZ1bmN0aW9uIFJheShvcmlnaW4sIGRpcmVjdGlvbjIpIHsKICAgIGRpcmVjdGlvbjIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoZGVmYXVsdFZhbHVlX2RlZmF1bHQoZGlyZWN0aW9uMiwgQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8pKTsKICAgIGlmICghQ2FydGVzaWFuM19kZWZhdWx0LmVxdWFscyhkaXJlY3Rpb24yLCBDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTykpIHsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShkaXJlY3Rpb24yLCBkaXJlY3Rpb24yKTsKICAgIH0KICAgIHRoaXMub3JpZ2luID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9yaWdpbiwgQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8pKTsKICAgIHRoaXMuZGlyZWN0aW9uID0gZGlyZWN0aW9uMjsKICB9CiAgdmFyIFJheV9kZWZhdWx0OwogIHZhciBpbml0X1JheSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUmF5LmpzIigpIHsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIFJheS5jbG9uZSA9IGZ1bmN0aW9uKHJheSwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmF5KSkgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBSYXkocmF5Lm9yaWdpbiwgcmF5LmRpcmVjdGlvbik7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5vcmlnaW4gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUocmF5Lm9yaWdpbik7CiAgICAgICAgcmVzdWx0LmRpcmVjdGlvbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShyYXkuZGlyZWN0aW9uKTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBSYXkuZ2V0UG9pbnQgPSBmdW5jdGlvbihyYXksIHQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmF5IiwgcmF5KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoInQiLCB0KTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdCA9IENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKHJheS5kaXJlY3Rpb24sIHQsIHJlc3VsdCk7CiAgICAgICAgcmV0dXJuIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQocmF5Lm9yaWdpbiwgcmVzdWx0LCByZXN1bHQpOwogICAgICB9OwogICAgICBSYXlfZGVmYXVsdCA9IFJheTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0ludGVyc2VjdGlvblRlc3RzLmpzCiAgZnVuY3Rpb24gc29sdmVRdWFkcmF0aWMoYTMsIGIsIGMsIHJlc3VsdCkgewogICAgY29uc3QgZGV0ID0gYiAqIGIgLSA0ICogYTMgKiBjOwogICAgaWYgKGRldCA8IDApIHsKICAgICAgcmV0dXJuIHZvaWQgMDsKICAgIH0gZWxzZSBpZiAoZGV0ID4gMCkgewogICAgICBjb25zdCBkZW5vbSA9IDEgLyAoMiAqIGEzKTsKICAgICAgY29uc3QgZGlzYyA9IE1hdGguc3FydChkZXQpOwogICAgICBjb25zdCByb290MCA9ICgtYiArIGRpc2MpICogZGVub207CiAgICAgIGNvbnN0IHJvb3QxID0gKC1iIC0gZGlzYykgKiBkZW5vbTsKICAgICAgaWYgKHJvb3QwIDwgcm9vdDEpIHsKICAgICAgICByZXN1bHQucm9vdDAgPSByb290MDsKICAgICAgICByZXN1bHQucm9vdDEgPSByb290MTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXN1bHQucm9vdDAgPSByb290MTsKICAgICAgICByZXN1bHQucm9vdDEgPSByb290MDsKICAgICAgfQogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQogICAgY29uc3Qgcm9vdCA9IC1iIC8gKDIgKiBhMyk7CiAgICBpZiAocm9vdCA9PT0gMCkgewogICAgICByZXR1cm4gdm9pZCAwOwogICAgfQogICAgcmVzdWx0LnJvb3QwID0gcmVzdWx0LnJvb3QxID0gcm9vdDsKICAgIHJldHVybiByZXN1bHQ7CiAgfQogIGZ1bmN0aW9uIHJheVNwaGVyZShyYXksIHNwaGVyZSwgcmVzdWx0KSB7CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgIHJlc3VsdCA9IG5ldyBJbnRlcnZhbF9kZWZhdWx0KCk7CiAgICB9CiAgICBjb25zdCBvcmlnaW4gPSByYXkub3JpZ2luOwogICAgY29uc3QgZGlyZWN0aW9uMiA9IHJheS5kaXJlY3Rpb247CiAgICBjb25zdCBjZW50ZXIgPSBzcGhlcmUuY2VudGVyOwogICAgY29uc3QgcmFkaXVzU3F1YXJlZCA9IHNwaGVyZS5yYWRpdXMgKiBzcGhlcmUucmFkaXVzOwogICAgY29uc3QgZGlmZiA9IENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChvcmlnaW4sIGNlbnRlciwgc2NyYXRjaFBWZWMpOwogICAgY29uc3QgYTMgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KGRpcmVjdGlvbjIsIGRpcmVjdGlvbjIpOwogICAgY29uc3QgYiA9IDIgKiBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KGRpcmVjdGlvbjIsIGRpZmYpOwogICAgY29uc3QgYyA9IENhcnRlc2lhbjNfZGVmYXVsdC5tYWduaXR1ZGVTcXVhcmVkKGRpZmYpIC0gcmFkaXVzU3F1YXJlZDsKICAgIGNvbnN0IHJvb3RzID0gc29sdmVRdWFkcmF0aWMoYTMsIGIsIGMsIHJheVNwaGVyZVJvb3RzKTsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJvb3RzKSkgewogICAgICByZXR1cm4gdm9pZCAwOwogICAgfQogICAgcmVzdWx0LnN0YXJ0ID0gcm9vdHMucm9vdDA7CiAgICByZXN1bHQuc3RvcCA9IHJvb3RzLnJvb3QxOwogICAgcmV0dXJuIHJlc3VsdDsKICB9CiAgZnVuY3Rpb24gYWRkV2l0aENhbmNlbGxhdGlvbkNoZWNrMihsZWZ0LCByaWdodCwgdG9sZXJhbmNlKSB7CiAgICBjb25zdCBkaWZmZXJlbmNlID0gbGVmdCArIHJpZ2h0OwogICAgaWYgKE1hdGhfZGVmYXVsdC5zaWduKGxlZnQpICE9PSBNYXRoX2RlZmF1bHQuc2lnbihyaWdodCkgJiYgTWF0aC5hYnMoZGlmZmVyZW5jZSAvIE1hdGgubWF4KE1hdGguYWJzKGxlZnQpLCBNYXRoLmFicyhyaWdodCkpKSA8IHRvbGVyYW5jZSkgewogICAgICByZXR1cm4gMDsKICAgIH0KICAgIHJldHVybiBkaWZmZXJlbmNlOwogIH0KICB2YXIgSW50ZXJzZWN0aW9uVGVzdHMsIHNjcmF0Y2hFZGdlMCwgc2NyYXRjaEVkZ2UxLCBzY3JhdGNoUFZlYywgc2NyYXRjaFRWZWMsIHNjcmF0Y2hRVmVjLCBzY3JhdGNoTGluZVNlZ21lbnRUcmlhbmdsZVJheSwgcmF5U3BoZXJlUm9vdHMsIHNjcmF0Y2hMaW5lU2VnbWVudFJheSwgc2NyYXRjaFEsIHNjcmF0Y2hXLCBmaXJzdEF4aXNTY3JhdGNoLCBzZWNvbmRBeGlzU2NyYXRjaCwgdGhpcmRBeGlzU2NyYXRjaCwgcmVmZXJlbmNlU2NyYXRjaCwgYkNhcnQsIGJTY3JhdGNoLCBidFNjcmF0Y2gsIGRpU2NyYXRjaCwgZFNjcmF0Y2gsIGNTY3JhdGNoLCB0ZW1wTWF0cml4LCBhU2NyYXRjaCwgc1NjcmF0Y2gsIGNsb3Nlc3RTY3JhdGNoLCBzdXJmUG9pbnRTY3JhdGNoLCBsaW5lU2VnbWVudFBsYW5lRGlmZmVyZW5jZSwgSW50ZXJzZWN0aW9uVGVzdHNfZGVmYXVsdDsKICB2YXIgaW5pdF9JbnRlcnNlY3Rpb25UZXN0cyA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvSW50ZXJzZWN0aW9uVGVzdHMuanMiKCkgewogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DYXJ0b2dyYXBoaWMoKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgaW5pdF9JbnRlcnZhbCgpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgaW5pdF9NYXRyaXgzKCk7CiAgICAgIGluaXRfUXVhZHJhdGljUmVhbFBvbHlub21pYWwoKTsKICAgICAgaW5pdF9RdWFydGljUmVhbFBvbHlub21pYWwoKTsKICAgICAgaW5pdF9SYXkoKTsKICAgICAgSW50ZXJzZWN0aW9uVGVzdHMgPSB7fTsKICAgICAgSW50ZXJzZWN0aW9uVGVzdHMucmF5UGxhbmUgPSBmdW5jdGlvbihyYXksIHBsYW5lLCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyYXkpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgicmF5IGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwbGFuZSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJwbGFuZSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICAgIH0KICAgICAgICBjb25zdCBvcmlnaW4gPSByYXkub3JpZ2luOwogICAgICAgIGNvbnN0IGRpcmVjdGlvbjIgPSByYXkuZGlyZWN0aW9uOwogICAgICAgIGNvbnN0IG5vcm1hbDIgPSBwbGFuZS5ub3JtYWw7CiAgICAgICAgY29uc3QgZGVub21pbmF0b3IgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KG5vcm1hbDIsIGRpcmVjdGlvbjIpOwogICAgICAgIGlmIChNYXRoLmFicyhkZW5vbWluYXRvcikgPCBNYXRoX2RlZmF1bHQuRVBTSUxPTjE1KSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICBjb25zdCB0ID0gKC1wbGFuZS5kaXN0YW5jZSAtIENhcnRlc2lhbjNfZGVmYXVsdC5kb3Qobm9ybWFsMiwgb3JpZ2luKSkgLyBkZW5vbWluYXRvcjsKICAgICAgICBpZiAodCA8IDApIHsKICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgfQogICAgICAgIHJlc3VsdCA9IENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKGRpcmVjdGlvbjIsIHQsIHJlc3VsdCk7CiAgICAgICAgcmV0dXJuIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQob3JpZ2luLCByZXN1bHQsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hFZGdlMCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaEVkZ2UxID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoUFZlYyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFRWZWMgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hRVmVjID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBJbnRlcnNlY3Rpb25UZXN0cy5yYXlUcmlhbmdsZVBhcmFtZXRyaWMgPSBmdW5jdGlvbihyYXksIHAwLCBwMSwgcDIsIGN1bGxCYWNrRmFjZXMpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyYXkpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgicmF5IGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwMCkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJwMCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocDEpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgicDEgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHAyKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInAyIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBjdWxsQmFja0ZhY2VzID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoY3VsbEJhY2tGYWNlcywgZmFsc2UpOwogICAgICAgIGNvbnN0IG9yaWdpbiA9IHJheS5vcmlnaW47CiAgICAgICAgY29uc3QgZGlyZWN0aW9uMiA9IHJheS5kaXJlY3Rpb247CiAgICAgICAgY29uc3QgZWRnZTAgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QocDEsIHAwLCBzY3JhdGNoRWRnZTApOwogICAgICAgIGNvbnN0IGVkZ2UxID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHAyLCBwMCwgc2NyYXRjaEVkZ2UxKTsKICAgICAgICBjb25zdCBwID0gQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKGRpcmVjdGlvbjIsIGVkZ2UxLCBzY3JhdGNoUFZlYyk7CiAgICAgICAgY29uc3QgZGV0ID0gQ2FydGVzaWFuM19kZWZhdWx0LmRvdChlZGdlMCwgcCk7CiAgICAgICAgbGV0IHR2ZWM7CiAgICAgICAgbGV0IHE7CiAgICAgICAgbGV0IHUzOwogICAgICAgIGxldCB2MzsKICAgICAgICBsZXQgdDsKICAgICAgICBpZiAoY3VsbEJhY2tGYWNlcykgewogICAgICAgICAgaWYgKGRldCA8IE1hdGhfZGVmYXVsdC5FUFNJTE9ONikgewogICAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgICAgfQogICAgICAgICAgdHZlYyA9IENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChvcmlnaW4sIHAwLCBzY3JhdGNoVFZlYyk7CiAgICAgICAgICB1MyA9IENhcnRlc2lhbjNfZGVmYXVsdC5kb3QodHZlYywgcCk7CiAgICAgICAgICBpZiAodTMgPCAwIHx8IHUzID4gZGV0KSB7CiAgICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgICB9CiAgICAgICAgICBxID0gQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKHR2ZWMsIGVkZ2UwLCBzY3JhdGNoUVZlYyk7CiAgICAgICAgICB2MyA9IENhcnRlc2lhbjNfZGVmYXVsdC5kb3QoZGlyZWN0aW9uMiwgcSk7CiAgICAgICAgICBpZiAodjMgPCAwIHx8IHUzICsgdjMgPiBkZXQpIHsKICAgICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICAgIH0KICAgICAgICAgIHQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KGVkZ2UxLCBxKSAvIGRldDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgaWYgKE1hdGguYWJzKGRldCkgPCBNYXRoX2RlZmF1bHQuRVBTSUxPTjYpIHsKICAgICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICAgIH0KICAgICAgICAgIGNvbnN0IGludkRldCA9IDEgLyBkZXQ7CiAgICAgICAgICB0dmVjID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KG9yaWdpbiwgcDAsIHNjcmF0Y2hUVmVjKTsKICAgICAgICAgIHUzID0gQ2FydGVzaWFuM19kZWZhdWx0LmRvdCh0dmVjLCBwKSAqIGludkRldDsKICAgICAgICAgIGlmICh1MyA8IDAgfHwgdTMgPiAxKSB7CiAgICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgICB9CiAgICAgICAgICBxID0gQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKHR2ZWMsIGVkZ2UwLCBzY3JhdGNoUVZlYyk7CiAgICAgICAgICB2MyA9IENhcnRlc2lhbjNfZGVmYXVsdC5kb3QoZGlyZWN0aW9uMiwgcSkgKiBpbnZEZXQ7CiAgICAgICAgICBpZiAodjMgPCAwIHx8IHUzICsgdjMgPiAxKSB7CiAgICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgICB9CiAgICAgICAgICB0ID0gQ2FydGVzaWFuM19kZWZhdWx0LmRvdChlZGdlMSwgcSkgKiBpbnZEZXQ7CiAgICAgICAgfQogICAgICAgIHJldHVybiB0OwogICAgICB9OwogICAgICBJbnRlcnNlY3Rpb25UZXN0cy5yYXlUcmlhbmdsZSA9IGZ1bmN0aW9uKHJheSwgcDAsIHAxLCBwMiwgY3VsbEJhY2tGYWNlcywgcmVzdWx0KSB7CiAgICAgICAgY29uc3QgdCA9IEludGVyc2VjdGlvblRlc3RzLnJheVRyaWFuZ2xlUGFyYW1ldHJpYygKICAgICAgICAgIHJheSwKICAgICAgICAgIHAwLAogICAgICAgICAgcDEsCiAgICAgICAgICBwMiwKICAgICAgICAgIGN1bGxCYWNrRmFjZXMKICAgICAgICApOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHQpIHx8IHQgPCAwKSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgICAgfQogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKHJheS5kaXJlY3Rpb24sIHQsIHJlc3VsdCk7CiAgICAgICAgcmV0dXJuIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQocmF5Lm9yaWdpbiwgcmVzdWx0LCByZXN1bHQpOwogICAgICB9OwogICAgICBzY3JhdGNoTGluZVNlZ21lbnRUcmlhbmdsZVJheSA9IG5ldyBSYXlfZGVmYXVsdCgpOwogICAgICBJbnRlcnNlY3Rpb25UZXN0cy5saW5lU2VnbWVudFRyaWFuZ2xlID0gZnVuY3Rpb24odjAyLCB2MTIsIHAwLCBwMSwgcDIsIGN1bGxCYWNrRmFjZXMsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHYwMikpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJ2MCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQodjEyKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInYxIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwMCkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJwMCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocDEpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgicDEgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHAyKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInAyIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCByYXkgPSBzY3JhdGNoTGluZVNlZ21lbnRUcmlhbmdsZVJheTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUodjAyLCByYXkub3JpZ2luKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QodjEyLCB2MDIsIHJheS5kaXJlY3Rpb24pOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUocmF5LmRpcmVjdGlvbiwgcmF5LmRpcmVjdGlvbik7CiAgICAgICAgY29uc3QgdCA9IEludGVyc2VjdGlvblRlc3RzLnJheVRyaWFuZ2xlUGFyYW1ldHJpYygKICAgICAgICAgIHJheSwKICAgICAgICAgIHAwLAogICAgICAgICAgcDEsCiAgICAgICAgICBwMiwKICAgICAgICAgIGN1bGxCYWNrRmFjZXMKICAgICAgICApOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHQpIHx8IHQgPCAwIHx8IHQgPiBDYXJ0ZXNpYW4zX2RlZmF1bHQuZGlzdGFuY2UodjAyLCB2MTIpKSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgICAgfQogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKHJheS5kaXJlY3Rpb24sIHQsIHJlc3VsdCk7CiAgICAgICAgcmV0dXJuIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQocmF5Lm9yaWdpbiwgcmVzdWx0LCByZXN1bHQpOwogICAgICB9OwogICAgICByYXlTcGhlcmVSb290cyA9IHsKICAgICAgICByb290MDogMCwKICAgICAgICByb290MTogMAogICAgICB9OwogICAgICBJbnRlcnNlY3Rpb25UZXN0cy5yYXlTcGhlcmUgPSBmdW5jdGlvbihyYXksIHNwaGVyZSwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmF5KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInJheSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoc3BoZXJlKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInNwaGVyZSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0ID0gcmF5U3BoZXJlKHJheSwgc3BoZXJlLCByZXN1bHQpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkgfHwgcmVzdWx0LnN0b3AgPCAwKSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICByZXN1bHQuc3RhcnQgPSBNYXRoLm1heChyZXN1bHQuc3RhcnQsIDApOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hMaW5lU2VnbWVudFJheSA9IG5ldyBSYXlfZGVmYXVsdCgpOwogICAgICBJbnRlcnNlY3Rpb25UZXN0cy5saW5lU2VnbWVudFNwaGVyZSA9IGZ1bmN0aW9uKHAwLCBwMSwgc3BoZXJlLCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwMCkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJwMCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocDEpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgicDEgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHNwaGVyZSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJzcGhlcmUgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHJheSA9IHNjcmF0Y2hMaW5lU2VnbWVudFJheTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUocDAsIHJheS5vcmlnaW4pOwogICAgICAgIGNvbnN0IGRpcmVjdGlvbjIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QocDEsIHAwLCByYXkuZGlyZWN0aW9uKTsKICAgICAgICBjb25zdCBtYXhUID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZShkaXJlY3Rpb24yKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKGRpcmVjdGlvbjIsIGRpcmVjdGlvbjIpOwogICAgICAgIHJlc3VsdCA9IHJheVNwaGVyZShyYXksIHNwaGVyZSwgcmVzdWx0KTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpIHx8IHJlc3VsdC5zdG9wIDwgMCB8fCByZXN1bHQuc3RhcnQgPiBtYXhUKSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICByZXN1bHQuc3RhcnQgPSBNYXRoLm1heChyZXN1bHQuc3RhcnQsIDApOwogICAgICAgIHJlc3VsdC5zdG9wID0gTWF0aC5taW4ocmVzdWx0LnN0b3AsIG1heFQpOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hRID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoVyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgSW50ZXJzZWN0aW9uVGVzdHMucmF5RWxsaXBzb2lkID0gZnVuY3Rpb24ocmF5LCBlbGxpcHNvaWQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyYXkpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgicmF5IGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChlbGxpcHNvaWQpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiZWxsaXBzb2lkIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBpbnZlcnNlUmFkaWkgPSBlbGxpcHNvaWQub25lT3ZlclJhZGlpOwogICAgICAgIGNvbnN0IHEgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlDb21wb25lbnRzKGludmVyc2VSYWRpaSwgcmF5Lm9yaWdpbiwgc2NyYXRjaFEpOwogICAgICAgIGNvbnN0IHcgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlDb21wb25lbnRzKAogICAgICAgICAgaW52ZXJzZVJhZGlpLAogICAgICAgICAgcmF5LmRpcmVjdGlvbiwKICAgICAgICAgIHNjcmF0Y2hXCiAgICAgICAgKTsKICAgICAgICBjb25zdCBxMjIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlU3F1YXJlZChxKTsKICAgICAgICBjb25zdCBxdyA9IENhcnRlc2lhbjNfZGVmYXVsdC5kb3QocSwgdyk7CiAgICAgICAgbGV0IGRpZmZlcmVuY2UsIHcyLCBwcm9kdWN0LCBkaXNjcmltaW5hbnQsIHRlbXA7CiAgICAgICAgaWYgKHEyMiA+IDEpIHsKICAgICAgICAgIGlmIChxdyA+PSAwKSB7CiAgICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgICB9CiAgICAgICAgICBjb25zdCBxdzIgPSBxdyAqIHF3OwogICAgICAgICAgZGlmZmVyZW5jZSA9IHEyMiAtIDE7CiAgICAgICAgICB3MiA9IENhcnRlc2lhbjNfZGVmYXVsdC5tYWduaXR1ZGVTcXVhcmVkKHcpOwogICAgICAgICAgcHJvZHVjdCA9IHcyICogZGlmZmVyZW5jZTsKICAgICAgICAgIGlmIChxdzIgPCBwcm9kdWN0KSB7CiAgICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgICB9IGVsc2UgaWYgKHF3MiA+IHByb2R1Y3QpIHsKICAgICAgICAgICAgZGlzY3JpbWluYW50ID0gcXcgKiBxdyAtIHByb2R1Y3Q7CiAgICAgICAgICAgIHRlbXAgPSAtcXcgKyBNYXRoLnNxcnQoZGlzY3JpbWluYW50KTsKICAgICAgICAgICAgY29uc3Qgcm9vdDAgPSB0ZW1wIC8gdzI7CiAgICAgICAgICAgIGNvbnN0IHJvb3QxID0gZGlmZmVyZW5jZSAvIHRlbXA7CiAgICAgICAgICAgIGlmIChyb290MCA8IHJvb3QxKSB7CiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBJbnRlcnZhbF9kZWZhdWx0KHJvb3QwLCByb290MSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICBzdGFydDogcm9vdDEsCiAgICAgICAgICAgICAgc3RvcDogcm9vdDAKICAgICAgICAgICAgfTsKICAgICAgICAgIH0KICAgICAgICAgIGNvbnN0IHJvb3QgPSBNYXRoLnNxcnQoZGlmZmVyZW5jZSAvIHcyKTsKICAgICAgICAgIHJldHVybiBuZXcgSW50ZXJ2YWxfZGVmYXVsdChyb290LCByb290KTsKICAgICAgICB9IGVsc2UgaWYgKHEyMiA8IDEpIHsKICAgICAgICAgIGRpZmZlcmVuY2UgPSBxMjIgLSAxOwogICAgICAgICAgdzIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlU3F1YXJlZCh3KTsKICAgICAgICAgIHByb2R1Y3QgPSB3MiAqIGRpZmZlcmVuY2U7CiAgICAgICAgICBkaXNjcmltaW5hbnQgPSBxdyAqIHF3IC0gcHJvZHVjdDsKICAgICAgICAgIHRlbXAgPSAtcXcgKyBNYXRoLnNxcnQoZGlzY3JpbWluYW50KTsKICAgICAgICAgIHJldHVybiBuZXcgSW50ZXJ2YWxfZGVmYXVsdCgwLCB0ZW1wIC8gdzIpOwogICAgICAgIH0KICAgICAgICBpZiAocXcgPCAwKSB7CiAgICAgICAgICB3MiA9IENhcnRlc2lhbjNfZGVmYXVsdC5tYWduaXR1ZGVTcXVhcmVkKHcpOwogICAgICAgICAgcmV0dXJuIG5ldyBJbnRlcnZhbF9kZWZhdWx0KDAsIC1xdyAvIHcyKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgfTsKICAgICAgSW50ZXJzZWN0aW9uVGVzdHMucXVhZHJhdGljVmVjdG9yRXhwcmVzc2lvbiA9IGZ1bmN0aW9uKEEsIGIsIGMsIHgsIHcpIHsKICAgICAgICBjb25zdCB4U3F1YXJlZCA9IHggKiB4OwogICAgICAgIGNvbnN0IHdTcXVhcmVkID0gdyAqIHc7CiAgICAgICAgY29uc3QgbDIgPSAoQVtNYXRyaXgzX2RlZmF1bHQuQ09MVU1OMVJPVzFdIC0gQVtNYXRyaXgzX2RlZmF1bHQuQ09MVU1OMlJPVzJdKSAqIHdTcXVhcmVkOwogICAgICAgIGNvbnN0IGwxID0gdyAqICh4ICogYWRkV2l0aENhbmNlbGxhdGlvbkNoZWNrMigKICAgICAgICAgIEFbTWF0cml4M19kZWZhdWx0LkNPTFVNTjFST1cwXSwKICAgICAgICAgIEFbTWF0cml4M19kZWZhdWx0LkNPTFVNTjBST1cxXSwKICAgICAgICAgIE1hdGhfZGVmYXVsdC5FUFNJTE9OMTUKICAgICAgICApICsgYi55KTsKICAgICAgICBjb25zdCBsMCA9IEFbTWF0cml4M19kZWZhdWx0LkNPTFVNTjBST1cwXSAqIHhTcXVhcmVkICsgQVtNYXRyaXgzX2RlZmF1bHQuQ09MVU1OMlJPVzJdICogd1NxdWFyZWQgKyB4ICogYi54ICsgYzsKICAgICAgICBjb25zdCByMSA9IHdTcXVhcmVkICogYWRkV2l0aENhbmNlbGxhdGlvbkNoZWNrMigKICAgICAgICAgIEFbTWF0cml4M19kZWZhdWx0LkNPTFVNTjJST1cxXSwKICAgICAgICAgIEFbTWF0cml4M19kZWZhdWx0LkNPTFVNTjFST1cyXSwKICAgICAgICAgIE1hdGhfZGVmYXVsdC5FUFNJTE9OMTUKICAgICAgICApOwogICAgICAgIGNvbnN0IHIwID0gdyAqICh4ICogYWRkV2l0aENhbmNlbGxhdGlvbkNoZWNrMihBW01hdHJpeDNfZGVmYXVsdC5DT0xVTU4yUk9XMF0sIEFbTWF0cml4M19kZWZhdWx0LkNPTFVNTjBST1cyXSkgKyBiLnopOwogICAgICAgIGxldCBjb3NpbmVzOwogICAgICAgIGNvbnN0IHNvbHV0aW9ucyA9IFtdOwogICAgICAgIGlmIChyMCA9PT0gMCAmJiByMSA9PT0gMCkgewogICAgICAgICAgY29zaW5lcyA9IFF1YWRyYXRpY1JlYWxQb2x5bm9taWFsX2RlZmF1bHQuY29tcHV0ZVJlYWxSb290cyhsMiwgbDEsIGwwKTsKICAgICAgICAgIGlmIChjb3NpbmVzLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICByZXR1cm4gc29sdXRpb25zOwogICAgICAgICAgfQogICAgICAgICAgY29uc3QgY29zaW5lMCA9IGNvc2luZXNbMF07CiAgICAgICAgICBjb25zdCBzaW5lMCA9IE1hdGguc3FydChNYXRoLm1heCgxIC0gY29zaW5lMCAqIGNvc2luZTAsIDApKTsKICAgICAgICAgIHNvbHV0aW9ucy5wdXNoKG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoeCwgdyAqIGNvc2luZTAsIHcgKiAtc2luZTApKTsKICAgICAgICAgIHNvbHV0aW9ucy5wdXNoKG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoeCwgdyAqIGNvc2luZTAsIHcgKiBzaW5lMCkpOwogICAgICAgICAgaWYgKGNvc2luZXMubGVuZ3RoID09PSAyKSB7CiAgICAgICAgICAgIGNvbnN0IGNvc2luZTEgPSBjb3NpbmVzWzFdOwogICAgICAgICAgICBjb25zdCBzaW5lMSA9IE1hdGguc3FydChNYXRoLm1heCgxIC0gY29zaW5lMSAqIGNvc2luZTEsIDApKTsKICAgICAgICAgICAgc29sdXRpb25zLnB1c2gobmV3IENhcnRlc2lhbjNfZGVmYXVsdCh4LCB3ICogY29zaW5lMSwgdyAqIC1zaW5lMSkpOwogICAgICAgICAgICBzb2x1dGlvbnMucHVzaChuZXcgQ2FydGVzaWFuM19kZWZhdWx0KHgsIHcgKiBjb3NpbmUxLCB3ICogc2luZTEpKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBzb2x1dGlvbnM7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHIwU3F1YXJlZCA9IHIwICogcjA7CiAgICAgICAgY29uc3QgcjFTcXVhcmVkID0gcjEgKiByMTsKICAgICAgICBjb25zdCBsMlNxdWFyZWQgPSBsMiAqIGwyOwogICAgICAgIGNvbnN0IHIwcjEgPSByMCAqIHIxOwogICAgICAgIGNvbnN0IGM0ID0gbDJTcXVhcmVkICsgcjFTcXVhcmVkOwogICAgICAgIGNvbnN0IGMzMiA9IDIgKiAobDEgKiBsMiArIHIwcjEpOwogICAgICAgIGNvbnN0IGMyID0gMiAqIGwwICogbDIgKyBsMSAqIGwxIC0gcjFTcXVhcmVkICsgcjBTcXVhcmVkOwogICAgICAgIGNvbnN0IGMxID0gMiAqIChsMCAqIGwxIC0gcjByMSk7CiAgICAgICAgY29uc3QgYzAgPSBsMCAqIGwwIC0gcjBTcXVhcmVkOwogICAgICAgIGlmIChjNCA9PT0gMCAmJiBjMzIgPT09IDAgJiYgYzIgPT09IDAgJiYgYzEgPT09IDApIHsKICAgICAgICAgIHJldHVybiBzb2x1dGlvbnM7CiAgICAgICAgfQogICAgICAgIGNvc2luZXMgPSBRdWFydGljUmVhbFBvbHlub21pYWxfZGVmYXVsdC5jb21wdXRlUmVhbFJvb3RzKGM0LCBjMzIsIGMyLCBjMSwgYzApOwogICAgICAgIGNvbnN0IGxlbmd0aCA9IGNvc2luZXMubGVuZ3RoOwogICAgICAgIGlmIChsZW5ndGggPT09IDApIHsKICAgICAgICAgIHJldHVybiBzb2x1dGlvbnM7CiAgICAgICAgfQogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgICAgIGNvbnN0IGNvc2luZSA9IGNvc2luZXNbaV07CiAgICAgICAgICBjb25zdCBjb3NpbmVTcXVhcmVkID0gY29zaW5lICogY29zaW5lOwogICAgICAgICAgY29uc3Qgc2luZVNxdWFyZWQgPSBNYXRoLm1heCgxIC0gY29zaW5lU3F1YXJlZCwgMCk7CiAgICAgICAgICBjb25zdCBzaW5lID0gTWF0aC5zcXJ0KHNpbmVTcXVhcmVkKTsKICAgICAgICAgIGxldCBsZWZ0OwogICAgICAgICAgaWYgKE1hdGhfZGVmYXVsdC5zaWduKGwyKSA9PT0gTWF0aF9kZWZhdWx0LnNpZ24obDApKSB7CiAgICAgICAgICAgIGxlZnQgPSBhZGRXaXRoQ2FuY2VsbGF0aW9uQ2hlY2syKAogICAgICAgICAgICAgIGwyICogY29zaW5lU3F1YXJlZCArIGwwLAogICAgICAgICAgICAgIGwxICogY29zaW5lLAogICAgICAgICAgICAgIE1hdGhfZGVmYXVsdC5FUFNJTE9OMTIKICAgICAgICAgICAgKTsKICAgICAgICAgIH0gZWxzZSBpZiAoTWF0aF9kZWZhdWx0LnNpZ24obDApID09PSBNYXRoX2RlZmF1bHQuc2lnbihsMSAqIGNvc2luZSkpIHsKICAgICAgICAgICAgbGVmdCA9IGFkZFdpdGhDYW5jZWxsYXRpb25DaGVjazIoCiAgICAgICAgICAgICAgbDIgKiBjb3NpbmVTcXVhcmVkLAogICAgICAgICAgICAgIGwxICogY29zaW5lICsgbDAsCiAgICAgICAgICAgICAgTWF0aF9kZWZhdWx0LkVQU0lMT04xMgogICAgICAgICAgICApOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbGVmdCA9IGFkZFdpdGhDYW5jZWxsYXRpb25DaGVjazIoCiAgICAgICAgICAgICAgbDIgKiBjb3NpbmVTcXVhcmVkICsgbDEgKiBjb3NpbmUsCiAgICAgICAgICAgICAgbDAsCiAgICAgICAgICAgICAgTWF0aF9kZWZhdWx0LkVQU0lMT04xMgogICAgICAgICAgICApOwogICAgICAgICAgfQogICAgICAgICAgY29uc3QgcmlnaHQgPSBhZGRXaXRoQ2FuY2VsbGF0aW9uQ2hlY2syKAogICAgICAgICAgICByMSAqIGNvc2luZSwKICAgICAgICAgICAgcjAsCiAgICAgICAgICAgIE1hdGhfZGVmYXVsdC5FUFNJTE9OMTUKICAgICAgICAgICk7CiAgICAgICAgICBjb25zdCBwcm9kdWN0ID0gbGVmdCAqIHJpZ2h0OwogICAgICAgICAgaWYgKHByb2R1Y3QgPCAwKSB7CiAgICAgICAgICAgIHNvbHV0aW9ucy5wdXNoKG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoeCwgdyAqIGNvc2luZSwgdyAqIHNpbmUpKTsKICAgICAgICAgIH0gZWxzZSBpZiAocHJvZHVjdCA+IDApIHsKICAgICAgICAgICAgc29sdXRpb25zLnB1c2gobmV3IENhcnRlc2lhbjNfZGVmYXVsdCh4LCB3ICogY29zaW5lLCB3ICogLXNpbmUpKTsKICAgICAgICAgIH0gZWxzZSBpZiAoc2luZSAhPT0gMCkgewogICAgICAgICAgICBzb2x1dGlvbnMucHVzaChuZXcgQ2FydGVzaWFuM19kZWZhdWx0KHgsIHcgKiBjb3NpbmUsIHcgKiAtc2luZSkpOwogICAgICAgICAgICBzb2x1dGlvbnMucHVzaChuZXcgQ2FydGVzaWFuM19kZWZhdWx0KHgsIHcgKiBjb3NpbmUsIHcgKiBzaW5lKSk7CiAgICAgICAgICAgICsraTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHNvbHV0aW9ucy5wdXNoKG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoeCwgdyAqIGNvc2luZSwgdyAqIHNpbmUpKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHNvbHV0aW9uczsKICAgICAgfTsKICAgICAgZmlyc3RBeGlzU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2Vjb25kQXhpc1NjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHRoaXJkQXhpc1NjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHJlZmVyZW5jZVNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGJDYXJ0ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBiU2NyYXRjaCA9IG5ldyBNYXRyaXgzX2RlZmF1bHQoKTsKICAgICAgYnRTY3JhdGNoID0gbmV3IE1hdHJpeDNfZGVmYXVsdCgpOwogICAgICBkaVNjcmF0Y2ggPSBuZXcgTWF0cml4M19kZWZhdWx0KCk7CiAgICAgIGRTY3JhdGNoID0gbmV3IE1hdHJpeDNfZGVmYXVsdCgpOwogICAgICBjU2NyYXRjaCA9IG5ldyBNYXRyaXgzX2RlZmF1bHQoKTsKICAgICAgdGVtcE1hdHJpeCA9IG5ldyBNYXRyaXgzX2RlZmF1bHQoKTsKICAgICAgYVNjcmF0Y2ggPSBuZXcgTWF0cml4M19kZWZhdWx0KCk7CiAgICAgIHNTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBjbG9zZXN0U2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc3VyZlBvaW50U2NyYXRjaCA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICBJbnRlcnNlY3Rpb25UZXN0cy5ncmF6aW5nQWx0aXR1ZGVMb2NhdGlvbiA9IGZ1bmN0aW9uKHJheSwgZWxsaXBzb2lkKSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmF5KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInJheSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoZWxsaXBzb2lkKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImVsbGlwc29pZCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgcG9zaXRpb24gPSByYXkub3JpZ2luOwogICAgICAgIGNvbnN0IGRpcmVjdGlvbjIgPSByYXkuZGlyZWN0aW9uOwogICAgICAgIGlmICghQ2FydGVzaWFuM19kZWZhdWx0LmVxdWFscyhwb3NpdGlvbiwgQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8pKSB7CiAgICAgICAgICBjb25zdCBub3JtYWwyID0gZWxsaXBzb2lkLmdlb2RldGljU3VyZmFjZU5vcm1hbChwb3NpdGlvbiwgZmlyc3RBeGlzU2NyYXRjaCk7CiAgICAgICAgICBpZiAoQ2FydGVzaWFuM19kZWZhdWx0LmRvdChkaXJlY3Rpb24yLCBub3JtYWwyKSA+PSAwKSB7CiAgICAgICAgICAgIHJldHVybiBwb3NpdGlvbjsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY29uc3QgaW50ZXJzZWN0cyA9IGRlZmluZWRfZGVmYXVsdCh0aGlzLnJheUVsbGlwc29pZChyYXksIGVsbGlwc29pZCkpOwogICAgICAgIGNvbnN0IGYgPSBlbGxpcHNvaWQudHJhbnNmb3JtUG9zaXRpb25Ub1NjYWxlZFNwYWNlKAogICAgICAgICAgZGlyZWN0aW9uMiwKICAgICAgICAgIGZpcnN0QXhpc1NjcmF0Y2gKICAgICAgICApOwogICAgICAgIGNvbnN0IGZpcnN0QXhpcyA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoZiwgZik7CiAgICAgICAgY29uc3QgcmVmZXJlbmNlID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1vc3RPcnRob2dvbmFsQXhpcyhmLCByZWZlcmVuY2VTY3JhdGNoKTsKICAgICAgICBjb25zdCBzZWNvbmRBeGlzID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSgKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyhyZWZlcmVuY2UsIGZpcnN0QXhpcywgc2Vjb25kQXhpc1NjcmF0Y2gpLAogICAgICAgICAgc2Vjb25kQXhpc1NjcmF0Y2gKICAgICAgICApOwogICAgICAgIGNvbnN0IHRoaXJkQXhpcyA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY3Jvc3MoZmlyc3RBeGlzLCBzZWNvbmRBeGlzLCB0aGlyZEF4aXNTY3JhdGNoKSwKICAgICAgICAgIHRoaXJkQXhpc1NjcmF0Y2gKICAgICAgICApOwogICAgICAgIGNvbnN0IEIgPSBiU2NyYXRjaDsKICAgICAgICBCWzBdID0gZmlyc3RBeGlzLng7CiAgICAgICAgQlsxXSA9IGZpcnN0QXhpcy55OwogICAgICAgIEJbMl0gPSBmaXJzdEF4aXMuejsKICAgICAgICBCWzNdID0gc2Vjb25kQXhpcy54OwogICAgICAgIEJbNF0gPSBzZWNvbmRBeGlzLnk7CiAgICAgICAgQls1XSA9IHNlY29uZEF4aXMuejsKICAgICAgICBCWzZdID0gdGhpcmRBeGlzLng7CiAgICAgICAgQls3XSA9IHRoaXJkQXhpcy55OwogICAgICAgIEJbOF0gPSB0aGlyZEF4aXMuejsKICAgICAgICBjb25zdCBCX1QgPSBNYXRyaXgzX2RlZmF1bHQudHJhbnNwb3NlKEIsIGJ0U2NyYXRjaCk7CiAgICAgICAgY29uc3QgRF9JID0gTWF0cml4M19kZWZhdWx0LmZyb21TY2FsZShlbGxpcHNvaWQucmFkaWksIGRpU2NyYXRjaCk7CiAgICAgICAgY29uc3QgRCA9IE1hdHJpeDNfZGVmYXVsdC5mcm9tU2NhbGUoZWxsaXBzb2lkLm9uZU92ZXJSYWRpaSwgZFNjcmF0Y2gpOwogICAgICAgIGNvbnN0IEMgPSBjU2NyYXRjaDsKICAgICAgICBDWzBdID0gMDsKICAgICAgICBDWzFdID0gLWRpcmVjdGlvbjIuejsKICAgICAgICBDWzJdID0gZGlyZWN0aW9uMi55OwogICAgICAgIENbM10gPSBkaXJlY3Rpb24yLno7CiAgICAgICAgQ1s0XSA9IDA7CiAgICAgICAgQ1s1XSA9IC1kaXJlY3Rpb24yLng7CiAgICAgICAgQ1s2XSA9IC1kaXJlY3Rpb24yLnk7CiAgICAgICAgQ1s3XSA9IGRpcmVjdGlvbjIueDsKICAgICAgICBDWzhdID0gMDsKICAgICAgICBjb25zdCB0ZW1wID0gTWF0cml4M19kZWZhdWx0Lm11bHRpcGx5KAogICAgICAgICAgTWF0cml4M19kZWZhdWx0Lm11bHRpcGx5KEJfVCwgRCwgdGVtcE1hdHJpeCksCiAgICAgICAgICBDLAogICAgICAgICAgdGVtcE1hdHJpeAogICAgICAgICk7CiAgICAgICAgY29uc3QgQSA9IE1hdHJpeDNfZGVmYXVsdC5tdWx0aXBseSgKICAgICAgICAgIE1hdHJpeDNfZGVmYXVsdC5tdWx0aXBseSh0ZW1wLCBEX0ksIGFTY3JhdGNoKSwKICAgICAgICAgIEIsCiAgICAgICAgICBhU2NyYXRjaAogICAgICAgICk7CiAgICAgICAgY29uc3QgYiA9IE1hdHJpeDNfZGVmYXVsdC5tdWx0aXBseUJ5VmVjdG9yKHRlbXAsIHBvc2l0aW9uLCBiQ2FydCk7CiAgICAgICAgY29uc3Qgc29sdXRpb25zID0gSW50ZXJzZWN0aW9uVGVzdHMucXVhZHJhdGljVmVjdG9yRXhwcmVzc2lvbigKICAgICAgICAgIEEsCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubmVnYXRlKGIsIGZpcnN0QXhpc1NjcmF0Y2gpLAogICAgICAgICAgMCwKICAgICAgICAgIDAsCiAgICAgICAgICAxCiAgICAgICAgKTsKICAgICAgICBsZXQgczsKICAgICAgICBsZXQgYWx0aXR1ZGU7CiAgICAgICAgY29uc3QgbGVuZ3RoID0gc29sdXRpb25zLmxlbmd0aDsKICAgICAgICBpZiAobGVuZ3RoID4gMCkgewogICAgICAgICAgbGV0IGNsb3Nlc3QgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8sIGNsb3Nlc3RTY3JhdGNoKTsKICAgICAgICAgIGxldCBtYXhpbXVtVmFsdWUgPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7CiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgIHMgPSBNYXRyaXgzX2RlZmF1bHQubXVsdGlwbHlCeVZlY3RvcigKICAgICAgICAgICAgICBEX0ksCiAgICAgICAgICAgICAgTWF0cml4M19kZWZhdWx0Lm11bHRpcGx5QnlWZWN0b3IoQiwgc29sdXRpb25zW2ldLCBzU2NyYXRjaCksCiAgICAgICAgICAgICAgc1NjcmF0Y2gKICAgICAgICAgICAgKTsKICAgICAgICAgICAgY29uc3QgdjMgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKAogICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChzLCBwb3NpdGlvbiwgcmVmZXJlbmNlU2NyYXRjaCksCiAgICAgICAgICAgICAgcmVmZXJlbmNlU2NyYXRjaAogICAgICAgICAgICApOwogICAgICAgICAgICBjb25zdCBkb3RQcm9kdWN0ID0gQ2FydGVzaWFuM19kZWZhdWx0LmRvdCh2MywgZGlyZWN0aW9uMik7CiAgICAgICAgICAgIGlmIChkb3RQcm9kdWN0ID4gbWF4aW11bVZhbHVlKSB7CiAgICAgICAgICAgICAgbWF4aW11bVZhbHVlID0gZG90UHJvZHVjdDsKICAgICAgICAgICAgICBjbG9zZXN0ID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKHMsIGNsb3Nlc3QpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBjb25zdCBzdXJmYWNlUG9pbnQgPSBlbGxpcHNvaWQuY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWMoCiAgICAgICAgICAgIGNsb3Nlc3QsCiAgICAgICAgICAgIHN1cmZQb2ludFNjcmF0Y2gKICAgICAgICAgICk7CiAgICAgICAgICBtYXhpbXVtVmFsdWUgPSBNYXRoX2RlZmF1bHQuY2xhbXAobWF4aW11bVZhbHVlLCAwLCAxKTsKICAgICAgICAgIGFsdGl0dWRlID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZSgKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KGNsb3Nlc3QsIHBvc2l0aW9uLCByZWZlcmVuY2VTY3JhdGNoKQogICAgICAgICAgKSAqIE1hdGguc3FydCgxIC0gbWF4aW11bVZhbHVlICogbWF4aW11bVZhbHVlKTsKICAgICAgICAgIGFsdGl0dWRlID0gaW50ZXJzZWN0cyA/IC1hbHRpdHVkZSA6IGFsdGl0dWRlOwogICAgICAgICAgc3VyZmFjZVBvaW50LmhlaWdodCA9IGFsdGl0dWRlOwogICAgICAgICAgcmV0dXJuIGVsbGlwc29pZC5jYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbihzdXJmYWNlUG9pbnQsIG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgIH07CiAgICAgIGxpbmVTZWdtZW50UGxhbmVEaWZmZXJlbmNlID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBJbnRlcnNlY3Rpb25UZXN0cy5saW5lU2VnbWVudFBsYW5lID0gZnVuY3Rpb24oZW5kUG9pbnQwLCBlbmRQb2ludDEsIHBsYW5lLCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChlbmRQb2ludDApKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiZW5kUG9pbnQwIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChlbmRQb2ludDEpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiZW5kUG9pbnQxIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwbGFuZSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJwbGFuZSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICAgIH0KICAgICAgICBjb25zdCBkaWZmZXJlbmNlID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KAogICAgICAgICAgZW5kUG9pbnQxLAogICAgICAgICAgZW5kUG9pbnQwLAogICAgICAgICAgbGluZVNlZ21lbnRQbGFuZURpZmZlcmVuY2UKICAgICAgICApOwogICAgICAgIGNvbnN0IG5vcm1hbDIgPSBwbGFuZS5ub3JtYWw7CiAgICAgICAgY29uc3QgbkRvdERpZmYgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KG5vcm1hbDIsIGRpZmZlcmVuY2UpOwogICAgICAgIGlmIChNYXRoLmFicyhuRG90RGlmZikgPCBNYXRoX2RlZmF1bHQuRVBTSUxPTjYpIHsKICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgfQogICAgICAgIGNvbnN0IG5Eb3RQMCA9IENhcnRlc2lhbjNfZGVmYXVsdC5kb3Qobm9ybWFsMiwgZW5kUG9pbnQwKTsKICAgICAgICBjb25zdCB0ID0gLShwbGFuZS5kaXN0YW5jZSArIG5Eb3RQMCkgLyBuRG90RGlmZjsKICAgICAgICBpZiAodCA8IDAgfHwgdCA+IDEpIHsKICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgfQogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKGRpZmZlcmVuY2UsIHQsIHJlc3VsdCk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChlbmRQb2ludDAsIHJlc3VsdCwgcmVzdWx0KTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBJbnRlcnNlY3Rpb25UZXN0cy50cmlhbmdsZVBsYW5lSW50ZXJzZWN0aW9uID0gZnVuY3Rpb24ocDAsIHAxLCBwMiwgcGxhbmUpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwMCkgfHwgIWRlZmluZWRfZGVmYXVsdChwMSkgfHwgIWRlZmluZWRfZGVmYXVsdChwMikgfHwgIWRlZmluZWRfZGVmYXVsdChwbGFuZSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJwMCwgcDEsIHAyLCBhbmQgcGxhbmUgYXJlIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBwbGFuZU5vcm1hbCA9IHBsYW5lLm5vcm1hbDsKICAgICAgICBjb25zdCBwbGFuZUQgPSBwbGFuZS5kaXN0YW5jZTsKICAgICAgICBjb25zdCBwMEJlaGluZCA9IENhcnRlc2lhbjNfZGVmYXVsdC5kb3QocGxhbmVOb3JtYWwsIHAwKSArIHBsYW5lRCA8IDA7CiAgICAgICAgY29uc3QgcDFCZWhpbmQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KHBsYW5lTm9ybWFsLCBwMSkgKyBwbGFuZUQgPCAwOwogICAgICAgIGNvbnN0IHAyQmVoaW5kID0gQ2FydGVzaWFuM19kZWZhdWx0LmRvdChwbGFuZU5vcm1hbCwgcDIpICsgcGxhbmVEIDwgMDsKICAgICAgICBsZXQgbnVtQmVoaW5kID0gMDsKICAgICAgICBudW1CZWhpbmQgKz0gcDBCZWhpbmQgPyAxIDogMDsKICAgICAgICBudW1CZWhpbmQgKz0gcDFCZWhpbmQgPyAxIDogMDsKICAgICAgICBudW1CZWhpbmQgKz0gcDJCZWhpbmQgPyAxIDogMDsKICAgICAgICBsZXQgdTEyLCB1MjI7CiAgICAgICAgaWYgKG51bUJlaGluZCA9PT0gMSB8fCBudW1CZWhpbmQgPT09IDIpIHsKICAgICAgICAgIHUxMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgICAgIHUyMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgICB9CiAgICAgICAgaWYgKG51bUJlaGluZCA9PT0gMSkgewogICAgICAgICAgaWYgKHAwQmVoaW5kKSB7CiAgICAgICAgICAgIEludGVyc2VjdGlvblRlc3RzLmxpbmVTZWdtZW50UGxhbmUocDAsIHAxLCBwbGFuZSwgdTEyKTsKICAgICAgICAgICAgSW50ZXJzZWN0aW9uVGVzdHMubGluZVNlZ21lbnRQbGFuZShwMCwgcDIsIHBsYW5lLCB1MjIpOwogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgIHBvc2l0aW9uczogW3AwLCBwMSwgcDIsIHUxMiwgdTIyXSwKICAgICAgICAgICAgICBpbmRpY2VzOiBbCiAgICAgICAgICAgICAgICAvLyBCZWhpbmQKICAgICAgICAgICAgICAgIDAsCiAgICAgICAgICAgICAgICAzLAogICAgICAgICAgICAgICAgNCwKICAgICAgICAgICAgICAgIC8vIEluIGZyb250CiAgICAgICAgICAgICAgICAxLAogICAgICAgICAgICAgICAgMiwKICAgICAgICAgICAgICAgIDQsCiAgICAgICAgICAgICAgICAxLAogICAgICAgICAgICAgICAgNCwKICAgICAgICAgICAgICAgIDMKICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH07CiAgICAgICAgICB9IGVsc2UgaWYgKHAxQmVoaW5kKSB7CiAgICAgICAgICAgIEludGVyc2VjdGlvblRlc3RzLmxpbmVTZWdtZW50UGxhbmUocDEsIHAyLCBwbGFuZSwgdTEyKTsKICAgICAgICAgICAgSW50ZXJzZWN0aW9uVGVzdHMubGluZVNlZ21lbnRQbGFuZShwMSwgcDAsIHBsYW5lLCB1MjIpOwogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgIHBvc2l0aW9uczogW3AwLCBwMSwgcDIsIHUxMiwgdTIyXSwKICAgICAgICAgICAgICBpbmRpY2VzOiBbCiAgICAgICAgICAgICAgICAvLyBCZWhpbmQKICAgICAgICAgICAgICAgIDEsCiAgICAgICAgICAgICAgICAzLAogICAgICAgICAgICAgICAgNCwKICAgICAgICAgICAgICAgIC8vIEluIGZyb250CiAgICAgICAgICAgICAgICAyLAogICAgICAgICAgICAgICAgMCwKICAgICAgICAgICAgICAgIDQsCiAgICAgICAgICAgICAgICAyLAogICAgICAgICAgICAgICAgNCwKICAgICAgICAgICAgICAgIDMKICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH07CiAgICAgICAgICB9IGVsc2UgaWYgKHAyQmVoaW5kKSB7CiAgICAgICAgICAgIEludGVyc2VjdGlvblRlc3RzLmxpbmVTZWdtZW50UGxhbmUocDIsIHAwLCBwbGFuZSwgdTEyKTsKICAgICAgICAgICAgSW50ZXJzZWN0aW9uVGVzdHMubGluZVNlZ21lbnRQbGFuZShwMiwgcDEsIHBsYW5lLCB1MjIpOwogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgIHBvc2l0aW9uczogW3AwLCBwMSwgcDIsIHUxMiwgdTIyXSwKICAgICAgICAgICAgICBpbmRpY2VzOiBbCiAgICAgICAgICAgICAgICAvLyBCZWhpbmQKICAgICAgICAgICAgICAgIDIsCiAgICAgICAgICAgICAgICAzLAogICAgICAgICAgICAgICAgNCwKICAgICAgICAgICAgICAgIC8vIEluIGZyb250CiAgICAgICAgICAgICAgICAwLAogICAgICAgICAgICAgICAgMSwKICAgICAgICAgICAgICAgIDQsCiAgICAgICAgICAgICAgICAwLAogICAgICAgICAgICAgICAgNCwKICAgICAgICAgICAgICAgIDMKICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH07CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmIChudW1CZWhpbmQgPT09IDIpIHsKICAgICAgICAgIGlmICghcDBCZWhpbmQpIHsKICAgICAgICAgICAgSW50ZXJzZWN0aW9uVGVzdHMubGluZVNlZ21lbnRQbGFuZShwMSwgcDAsIHBsYW5lLCB1MTIpOwogICAgICAgICAgICBJbnRlcnNlY3Rpb25UZXN0cy5saW5lU2VnbWVudFBsYW5lKHAyLCBwMCwgcGxhbmUsIHUyMik7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgcG9zaXRpb25zOiBbcDAsIHAxLCBwMiwgdTEyLCB1MjJdLAogICAgICAgICAgICAgIGluZGljZXM6IFsKICAgICAgICAgICAgICAgIC8vIEJlaGluZAogICAgICAgICAgICAgICAgMSwKICAgICAgICAgICAgICAgIDIsCiAgICAgICAgICAgICAgICA0LAogICAgICAgICAgICAgICAgMSwKICAgICAgICAgICAgICAgIDQsCiAgICAgICAgICAgICAgICAzLAogICAgICAgICAgICAgICAgLy8gSW4gZnJvbnQKICAgICAgICAgICAgICAgIDAsCiAgICAgICAgICAgICAgICAzLAogICAgICAgICAgICAgICAgNAogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfTsKICAgICAgICAgIH0gZWxzZSBpZiAoIXAxQmVoaW5kKSB7CiAgICAgICAgICAgIEludGVyc2VjdGlvblRlc3RzLmxpbmVTZWdtZW50UGxhbmUocDIsIHAxLCBwbGFuZSwgdTEyKTsKICAgICAgICAgICAgSW50ZXJzZWN0aW9uVGVzdHMubGluZVNlZ21lbnRQbGFuZShwMCwgcDEsIHBsYW5lLCB1MjIpOwogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgIHBvc2l0aW9uczogW3AwLCBwMSwgcDIsIHUxMiwgdTIyXSwKICAgICAgICAgICAgICBpbmRpY2VzOiBbCiAgICAgICAgICAgICAgICAvLyBCZWhpbmQKICAgICAgICAgICAgICAgIDIsCiAgICAgICAgICAgICAgICAwLAogICAgICAgICAgICAgICAgNCwKICAgICAgICAgICAgICAgIDIsCiAgICAgICAgICAgICAgICA0LAogICAgICAgICAgICAgICAgMywKICAgICAgICAgICAgICAgIC8vIEluIGZyb250CiAgICAgICAgICAgICAgICAxLAogICAgICAgICAgICAgICAgMywKICAgICAgICAgICAgICAgIDQKICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH07CiAgICAgICAgICB9IGVsc2UgaWYgKCFwMkJlaGluZCkgewogICAgICAgICAgICBJbnRlcnNlY3Rpb25UZXN0cy5saW5lU2VnbWVudFBsYW5lKHAwLCBwMiwgcGxhbmUsIHUxMik7CiAgICAgICAgICAgIEludGVyc2VjdGlvblRlc3RzLmxpbmVTZWdtZW50UGxhbmUocDEsIHAyLCBwbGFuZSwgdTIyKTsKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICBwb3NpdGlvbnM6IFtwMCwgcDEsIHAyLCB1MTIsIHUyMl0sCiAgICAgICAgICAgICAgaW5kaWNlczogWwogICAgICAgICAgICAgICAgLy8gQmVoaW5kCiAgICAgICAgICAgICAgICAwLAogICAgICAgICAgICAgICAgMSwKICAgICAgICAgICAgICAgIDQsCiAgICAgICAgICAgICAgICAwLAogICAgICAgICAgICAgICAgNCwKICAgICAgICAgICAgICAgIDMsCiAgICAgICAgICAgICAgICAvLyBJbiBmcm9udAogICAgICAgICAgICAgICAgMiwKICAgICAgICAgICAgICAgIDMsCiAgICAgICAgICAgICAgICA0CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9OwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICB9OwogICAgICBJbnRlcnNlY3Rpb25UZXN0c19kZWZhdWx0ID0gSW50ZXJzZWN0aW9uVGVzdHM7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9QbGFuZS5qcwogIGZ1bmN0aW9uIFBsYW5lKG5vcm1hbDIsIGRpc3RhbmNlKSB7CiAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm5vcm1hbCIsIG5vcm1hbDIpOwogICAgaWYgKCFNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbigKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZShub3JtYWwyKSwKICAgICAgMSwKICAgICAgTWF0aF9kZWZhdWx0LkVQU0lMT042CiAgICApKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJub3JtYWwgbXVzdCBiZSBub3JtYWxpemVkLiIpOwogICAgfQogICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJkaXN0YW5jZSIsIGRpc3RhbmNlKTsKICAgIHRoaXMubm9ybWFsID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKG5vcm1hbDIpOwogICAgdGhpcy5kaXN0YW5jZSA9IGRpc3RhbmNlOwogIH0KICB2YXIgc2NyYXRjaE5vcm1hbCwgc2NyYXRjaENhcnRlc2lhbiwgc2NyYXRjaEludmVyc2VUcmFuc3Bvc2UsIHNjcmF0Y2hQbGFuZUNhcnRlc2lhbjQsIHNjcmF0Y2hUcmFuc2Zvcm1Ob3JtYWwsIFBsYW5lX2RlZmF1bHQ7CiAgdmFyIGluaXRfUGxhbmUgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1BsYW5lLmpzIigpIHsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuNCgpOwogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X01hdHJpeDQoKTsKICAgICAgUGxhbmUuZnJvbVBvaW50Tm9ybWFsID0gZnVuY3Rpb24ocG9pbnQsIG5vcm1hbDIsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicG9pbnQiLCBwb2ludCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJub3JtYWwiLCBub3JtYWwyKTsKICAgICAgICBpZiAoIU1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZShub3JtYWwyKSwKICAgICAgICAgIDEsCiAgICAgICAgICBNYXRoX2RlZmF1bHQuRVBTSUxPTjYKICAgICAgICApKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgibm9ybWFsIG11c3QgYmUgbm9ybWFsaXplZC4iKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgZGlzdGFuY2UgPSAtQ2FydGVzaWFuM19kZWZhdWx0LmRvdChub3JtYWwyLCBwb2ludCk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBQbGFuZShub3JtYWwyLCBkaXN0YW5jZSk7CiAgICAgICAgfQogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShub3JtYWwyLCByZXN1bHQubm9ybWFsKTsKICAgICAgICByZXN1bHQuZGlzdGFuY2UgPSBkaXN0YW5jZTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBzY3JhdGNoTm9ybWFsID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBQbGFuZS5mcm9tQ2FydGVzaWFuNCA9IGZ1bmN0aW9uKGNvZWZmaWNpZW50cywgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJjb2VmZmljaWVudHMiLCBjb2VmZmljaWVudHMpOwogICAgICAgIGNvbnN0IG5vcm1hbDIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUNhcnRlc2lhbjQoY29lZmZpY2llbnRzLCBzY3JhdGNoTm9ybWFsKTsKICAgICAgICBjb25zdCBkaXN0YW5jZSA9IGNvZWZmaWNpZW50cy53OwogICAgICAgIGlmICghTWF0aF9kZWZhdWx0LmVxdWFsc0Vwc2lsb24oCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlKG5vcm1hbDIpLAogICAgICAgICAgMSwKICAgICAgICAgIE1hdGhfZGVmYXVsdC5FUFNJTE9ONgogICAgICAgICkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJub3JtYWwgbXVzdCBiZSBub3JtYWxpemVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IFBsYW5lKG5vcm1hbDIsIGRpc3RhbmNlKTsKICAgICAgICB9CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKG5vcm1hbDIsIHJlc3VsdC5ub3JtYWwpOwogICAgICAgIHJlc3VsdC5kaXN0YW5jZSA9IGRpc3RhbmNlOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFBsYW5lLmdldFBvaW50RGlzdGFuY2UgPSBmdW5jdGlvbihwbGFuZSwgcG9pbnQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInBsYW5lIiwgcGxhbmUpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicG9pbnQiLCBwb2ludCk7CiAgICAgICAgcmV0dXJuIENhcnRlc2lhbjNfZGVmYXVsdC5kb3QocGxhbmUubm9ybWFsLCBwb2ludCkgKyBwbGFuZS5kaXN0YW5jZTsKICAgICAgfTsKICAgICAgc2NyYXRjaENhcnRlc2lhbiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgUGxhbmUucHJvamVjdFBvaW50T250b1BsYW5lID0gZnVuY3Rpb24ocGxhbmUsIHBvaW50LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInBsYW5lIiwgcGxhbmUpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicG9pbnQiLCBwb2ludCk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICAgIH0KICAgICAgICBjb25zdCBwb2ludERpc3RhbmNlID0gUGxhbmUuZ2V0UG9pbnREaXN0YW5jZShwbGFuZSwgcG9pbnQpOwogICAgICAgIGNvbnN0IHNjYWxlZE5vcm1hbCA9IENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKAogICAgICAgICAgcGxhbmUubm9ybWFsLAogICAgICAgICAgcG9pbnREaXN0YW5jZSwKICAgICAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4KICAgICAgICApOwogICAgICAgIHJldHVybiBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QocG9pbnQsIHNjYWxlZE5vcm1hbCwgcmVzdWx0KTsKICAgICAgfTsKICAgICAgc2NyYXRjaEludmVyc2VUcmFuc3Bvc2UgPSBuZXcgTWF0cml4NF9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hQbGFuZUNhcnRlc2lhbjQgPSBuZXcgQ2FydGVzaWFuNF9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hUcmFuc2Zvcm1Ob3JtYWwgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIFBsYW5lLnRyYW5zZm9ybSA9IGZ1bmN0aW9uKHBsYW5lLCB0cmFuc2Zvcm0yLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInBsYW5lIiwgcGxhbmUpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidHJhbnNmb3JtIiwgdHJhbnNmb3JtMik7CiAgICAgICAgY29uc3Qgbm9ybWFsMiA9IHBsYW5lLm5vcm1hbDsKICAgICAgICBjb25zdCBkaXN0YW5jZSA9IHBsYW5lLmRpc3RhbmNlOwogICAgICAgIGNvbnN0IGludmVyc2VUcmFuc3Bvc2UyID0gTWF0cml4NF9kZWZhdWx0LmludmVyc2VUcmFuc3Bvc2UoCiAgICAgICAgICB0cmFuc2Zvcm0yLAogICAgICAgICAgc2NyYXRjaEludmVyc2VUcmFuc3Bvc2UKICAgICAgICApOwogICAgICAgIGxldCBwbGFuZUFzQ2FydGVzaWFuNCA9IENhcnRlc2lhbjRfZGVmYXVsdC5mcm9tRWxlbWVudHMoCiAgICAgICAgICBub3JtYWwyLngsCiAgICAgICAgICBub3JtYWwyLnksCiAgICAgICAgICBub3JtYWwyLnosCiAgICAgICAgICBkaXN0YW5jZSwKICAgICAgICAgIHNjcmF0Y2hQbGFuZUNhcnRlc2lhbjQKICAgICAgICApOwogICAgICAgIHBsYW5lQXNDYXJ0ZXNpYW40ID0gTWF0cml4NF9kZWZhdWx0Lm11bHRpcGx5QnlWZWN0b3IoCiAgICAgICAgICBpbnZlcnNlVHJhbnNwb3NlMiwKICAgICAgICAgIHBsYW5lQXNDYXJ0ZXNpYW40LAogICAgICAgICAgcGxhbmVBc0NhcnRlc2lhbjQKICAgICAgICApOwogICAgICAgIGNvbnN0IHRyYW5zZm9ybWVkTm9ybWFsID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21DYXJ0ZXNpYW40KAogICAgICAgICAgcGxhbmVBc0NhcnRlc2lhbjQsCiAgICAgICAgICBzY3JhdGNoVHJhbnNmb3JtTm9ybWFsCiAgICAgICAgKTsKICAgICAgICBwbGFuZUFzQ2FydGVzaWFuNCA9IENhcnRlc2lhbjRfZGVmYXVsdC5kaXZpZGVCeVNjYWxhcigKICAgICAgICAgIHBsYW5lQXNDYXJ0ZXNpYW40LAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZSh0cmFuc2Zvcm1lZE5vcm1hbCksCiAgICAgICAgICBwbGFuZUFzQ2FydGVzaWFuNAogICAgICAgICk7CiAgICAgICAgcmV0dXJuIFBsYW5lLmZyb21DYXJ0ZXNpYW40KHBsYW5lQXNDYXJ0ZXNpYW40LCByZXN1bHQpOwogICAgICB9OwogICAgICBQbGFuZS5jbG9uZSA9IGZ1bmN0aW9uKHBsYW5lLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInBsYW5lIiwgcGxhbmUpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgUGxhbmUocGxhbmUubm9ybWFsLCBwbGFuZS5kaXN0YW5jZSk7CiAgICAgICAgfQogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShwbGFuZS5ub3JtYWwsIHJlc3VsdC5ub3JtYWwpOwogICAgICAgIHJlc3VsdC5kaXN0YW5jZSA9IHBsYW5lLmRpc3RhbmNlOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFBsYW5lLmVxdWFscyA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJsZWZ0IiwgbGVmdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyaWdodCIsIHJpZ2h0KTsKICAgICAgICByZXR1cm4gbGVmdC5kaXN0YW5jZSA9PT0gcmlnaHQuZGlzdGFuY2UgJiYgQ2FydGVzaWFuM19kZWZhdWx0LmVxdWFscyhsZWZ0Lm5vcm1hbCwgcmlnaHQubm9ybWFsKTsKICAgICAgfTsKICAgICAgUGxhbmUuT1JJR0lOX1hZX1BMQU5FID0gT2JqZWN0LmZyZWV6ZShuZXcgUGxhbmUoQ2FydGVzaWFuM19kZWZhdWx0LlVOSVRfWiwgMCkpOwogICAgICBQbGFuZS5PUklHSU5fWVpfUExBTkUgPSBPYmplY3QuZnJlZXplKG5ldyBQbGFuZShDYXJ0ZXNpYW4zX2RlZmF1bHQuVU5JVF9YLCAwKSk7CiAgICAgIFBsYW5lLk9SSUdJTl9aWF9QTEFORSA9IE9iamVjdC5mcmVlemUobmV3IFBsYW5lKENhcnRlc2lhbjNfZGVmYXVsdC5VTklUX1ksIDApKTsKICAgICAgUGxhbmVfZGVmYXVsdCA9IFBsYW5lOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvVGlwc2lmeS5qcwogIHZhciBUaXBzaWZ5LCBUaXBzaWZ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfVGlwc2lmeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvVGlwc2lmeS5qcyIoKSB7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIFRpcHNpZnkgPSB7fTsKICAgICAgVGlwc2lmeS5jYWxjdWxhdGVBQ01SID0gZnVuY3Rpb24ob3B0aW9ucykgewogICAgICAgIG9wdGlvbnMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLCBkZWZhdWx0VmFsdWVfZGVmYXVsdC5FTVBUWV9PQkpFQ1QpOwogICAgICAgIGNvbnN0IGluZGljZXMgPSBvcHRpb25zLmluZGljZXM7CiAgICAgICAgbGV0IG1heGltdW1JbmRleCA9IG9wdGlvbnMubWF4aW11bUluZGV4OwogICAgICAgIGNvbnN0IGNhY2hlU2l6ZSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuY2FjaGVTaXplLCAyNCk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoaW5kaWNlcykpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJpbmRpY2VzIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBudW1JbmRpY2VzID0gaW5kaWNlcy5sZW5ndGg7CiAgICAgICAgaWYgKG51bUluZGljZXMgPCAzIHx8IG51bUluZGljZXMgJSAzICE9PSAwKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiaW5kaWNlcyBsZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIHRocmVlLiIpOwogICAgICAgIH0KICAgICAgICBpZiAobWF4aW11bUluZGV4IDw9IDApIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJtYXhpbXVtSW5kZXggbXVzdCBiZSBncmVhdGVyIHRoYW4gemVyby4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKGNhY2hlU2l6ZSA8IDMpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJjYWNoZVNpemUgbXVzdCBiZSBncmVhdGVyIHRoYW4gdHdvLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChtYXhpbXVtSW5kZXgpKSB7CiAgICAgICAgICBtYXhpbXVtSW5kZXggPSAwOwogICAgICAgICAgbGV0IGN1cnJlbnRJbmRleCA9IDA7CiAgICAgICAgICBsZXQgaW50b0luZGljZXMgPSBpbmRpY2VzW2N1cnJlbnRJbmRleF07CiAgICAgICAgICB3aGlsZSAoY3VycmVudEluZGV4IDwgbnVtSW5kaWNlcykgewogICAgICAgICAgICBpZiAoaW50b0luZGljZXMgPiBtYXhpbXVtSW5kZXgpIHsKICAgICAgICAgICAgICBtYXhpbXVtSW5kZXggPSBpbnRvSW5kaWNlczsKICAgICAgICAgICAgfQogICAgICAgICAgICArK2N1cnJlbnRJbmRleDsKICAgICAgICAgICAgaW50b0luZGljZXMgPSBpbmRpY2VzW2N1cnJlbnRJbmRleF07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNvbnN0IHZlcnRleFRpbWVTdGFtcHMgPSBbXTsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1heGltdW1JbmRleCArIDE7IGkrKykgewogICAgICAgICAgdmVydGV4VGltZVN0YW1wc1tpXSA9IDA7CiAgICAgICAgfQogICAgICAgIGxldCBzID0gY2FjaGVTaXplICsgMTsKICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG51bUluZGljZXM7ICsraikgewogICAgICAgICAgaWYgKHMgLSB2ZXJ0ZXhUaW1lU3RhbXBzW2luZGljZXNbal1dID4gY2FjaGVTaXplKSB7CiAgICAgICAgICAgIHZlcnRleFRpbWVTdGFtcHNbaW5kaWNlc1tqXV0gPSBzOwogICAgICAgICAgICArK3M7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiAocyAtIGNhY2hlU2l6ZSArIDEpIC8gKG51bUluZGljZXMgLyAzKTsKICAgICAgfTsKICAgICAgVGlwc2lmeS50aXBzaWZ5ID0gZnVuY3Rpb24ob3B0aW9ucykgewogICAgICAgIG9wdGlvbnMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLCBkZWZhdWx0VmFsdWVfZGVmYXVsdC5FTVBUWV9PQkpFQ1QpOwogICAgICAgIGNvbnN0IGluZGljZXMgPSBvcHRpb25zLmluZGljZXM7CiAgICAgICAgY29uc3QgbWF4aW11bUluZGV4ID0gb3B0aW9ucy5tYXhpbXVtSW5kZXg7CiAgICAgICAgY29uc3QgY2FjaGVTaXplID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5jYWNoZVNpemUsIDI0KTsKICAgICAgICBsZXQgY3Vyc29yOwogICAgICAgIGZ1bmN0aW9uIHNraXBEZWFkRW5kKHZlcnRpY2VzMiwgZGVhZEVuZDIsIGluZGljZXMyLCBtYXhpbXVtSW5kZXhQbHVzT25lMikgewogICAgICAgICAgd2hpbGUgKGRlYWRFbmQyLmxlbmd0aCA+PSAxKSB7CiAgICAgICAgICAgIGNvbnN0IGQgPSBkZWFkRW5kMltkZWFkRW5kMi5sZW5ndGggLSAxXTsKICAgICAgICAgICAgZGVhZEVuZDIuc3BsaWNlKGRlYWRFbmQyLmxlbmd0aCAtIDEsIDEpOwogICAgICAgICAgICBpZiAodmVydGljZXMyW2RdLm51bUxpdmVUcmlhbmdsZXMgPiAwKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGQ7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHdoaWxlIChjdXJzb3IgPCBtYXhpbXVtSW5kZXhQbHVzT25lMikgewogICAgICAgICAgICBpZiAodmVydGljZXMyW2N1cnNvcl0ubnVtTGl2ZVRyaWFuZ2xlcyA+IDApIHsKICAgICAgICAgICAgICArK2N1cnNvcjsKICAgICAgICAgICAgICByZXR1cm4gY3Vyc29yIC0gMTsKICAgICAgICAgICAgfQogICAgICAgICAgICArK2N1cnNvcjsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiAtMTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gZ2V0TmV4dFZlcnRleChpbmRpY2VzMiwgY2FjaGVTaXplMiwgb25lUmluZzIsIHZlcnRpY2VzMiwgczIsIGRlYWRFbmQyLCBtYXhpbXVtSW5kZXhQbHVzT25lMikgewogICAgICAgICAgbGV0IG4gPSAtMTsKICAgICAgICAgIGxldCBwOwogICAgICAgICAgbGV0IG0gPSAtMTsKICAgICAgICAgIGxldCBpdE9uZVJpbmcgPSAwOwogICAgICAgICAgd2hpbGUgKGl0T25lUmluZyA8IG9uZVJpbmcyLmxlbmd0aCkgewogICAgICAgICAgICBjb25zdCBpbmRleDIgPSBvbmVSaW5nMltpdE9uZVJpbmddOwogICAgICAgICAgICBpZiAodmVydGljZXMyW2luZGV4Ml0ubnVtTGl2ZVRyaWFuZ2xlcykgewogICAgICAgICAgICAgIHAgPSAwOwogICAgICAgICAgICAgIGlmIChzMiAtIHZlcnRpY2VzMltpbmRleDJdLnRpbWVTdGFtcCArIDIgKiB2ZXJ0aWNlczJbaW5kZXgyXS5udW1MaXZlVHJpYW5nbGVzIDw9IGNhY2hlU2l6ZTIpIHsKICAgICAgICAgICAgICAgIHAgPSBzMiAtIHZlcnRpY2VzMltpbmRleDJdLnRpbWVTdGFtcDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKHAgPiBtIHx8IG0gPT09IC0xKSB7CiAgICAgICAgICAgICAgICBtID0gcDsKICAgICAgICAgICAgICAgIG4gPSBpbmRleDI7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgICsraXRPbmVSaW5nOwogICAgICAgICAgfQogICAgICAgICAgaWYgKG4gPT09IC0xKSB7CiAgICAgICAgICAgIHJldHVybiBza2lwRGVhZEVuZCh2ZXJ0aWNlczIsIGRlYWRFbmQyLCBpbmRpY2VzMiwgbWF4aW11bUluZGV4UGx1c09uZTIpOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIG47CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGluZGljZXMpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiaW5kaWNlcyBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgbnVtSW5kaWNlcyA9IGluZGljZXMubGVuZ3RoOwogICAgICAgIGlmIChudW1JbmRpY2VzIDwgMyB8fCBudW1JbmRpY2VzICUgMyAhPT0gMCkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImluZGljZXMgbGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiB0aHJlZS4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKG1heGltdW1JbmRleCA8PSAwKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgibWF4aW11bUluZGV4IG11c3QgYmUgZ3JlYXRlciB0aGFuIHplcm8uIik7CiAgICAgICAgfQogICAgICAgIGlmIChjYWNoZVNpemUgPCAzKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiY2FjaGVTaXplIG11c3QgYmUgZ3JlYXRlciB0aGFuIHR3by4iKTsKICAgICAgICB9CiAgICAgICAgbGV0IG1heGltdW1JbmRleFBsdXNPbmUgPSAwOwogICAgICAgIGxldCBjdXJyZW50SW5kZXggPSAwOwogICAgICAgIGxldCBpbnRvSW5kaWNlcyA9IGluZGljZXNbY3VycmVudEluZGV4XTsKICAgICAgICBjb25zdCBlbmRJbmRleCA9IG51bUluZGljZXM7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChtYXhpbXVtSW5kZXgpKSB7CiAgICAgICAgICBtYXhpbXVtSW5kZXhQbHVzT25lID0gbWF4aW11bUluZGV4ICsgMTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgd2hpbGUgKGN1cnJlbnRJbmRleCA8IGVuZEluZGV4KSB7CiAgICAgICAgICAgIGlmIChpbnRvSW5kaWNlcyA+IG1heGltdW1JbmRleFBsdXNPbmUpIHsKICAgICAgICAgICAgICBtYXhpbXVtSW5kZXhQbHVzT25lID0gaW50b0luZGljZXM7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgKytjdXJyZW50SW5kZXg7CiAgICAgICAgICAgIGludG9JbmRpY2VzID0gaW5kaWNlc1tjdXJyZW50SW5kZXhdOwogICAgICAgICAgfQogICAgICAgICAgaWYgKG1heGltdW1JbmRleFBsdXNPbmUgPT09IC0xKSB7CiAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgICAgfQogICAgICAgICAgKyttYXhpbXVtSW5kZXhQbHVzT25lOwogICAgICAgIH0KICAgICAgICBjb25zdCB2ZXJ0aWNlcyA9IFtdOwogICAgICAgIGxldCBpOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBtYXhpbXVtSW5kZXhQbHVzT25lOyBpKyspIHsKICAgICAgICAgIHZlcnRpY2VzW2ldID0gewogICAgICAgICAgICBudW1MaXZlVHJpYW5nbGVzOiAwLAogICAgICAgICAgICB0aW1lU3RhbXA6IDAsCiAgICAgICAgICAgIHZlcnRleFRyaWFuZ2xlczogW10KICAgICAgICAgIH07CiAgICAgICAgfQogICAgICAgIGN1cnJlbnRJbmRleCA9IDA7CiAgICAgICAgbGV0IHRyaWFuZ2xlID0gMDsKICAgICAgICB3aGlsZSAoY3VycmVudEluZGV4IDwgZW5kSW5kZXgpIHsKICAgICAgICAgIHZlcnRpY2VzW2luZGljZXNbY3VycmVudEluZGV4XV0udmVydGV4VHJpYW5nbGVzLnB1c2godHJpYW5nbGUpOwogICAgICAgICAgKyt2ZXJ0aWNlc1tpbmRpY2VzW2N1cnJlbnRJbmRleF1dLm51bUxpdmVUcmlhbmdsZXM7CiAgICAgICAgICB2ZXJ0aWNlc1tpbmRpY2VzW2N1cnJlbnRJbmRleCArIDFdXS52ZXJ0ZXhUcmlhbmdsZXMucHVzaCh0cmlhbmdsZSk7CiAgICAgICAgICArK3ZlcnRpY2VzW2luZGljZXNbY3VycmVudEluZGV4ICsgMV1dLm51bUxpdmVUcmlhbmdsZXM7CiAgICAgICAgICB2ZXJ0aWNlc1tpbmRpY2VzW2N1cnJlbnRJbmRleCArIDJdXS52ZXJ0ZXhUcmlhbmdsZXMucHVzaCh0cmlhbmdsZSk7CiAgICAgICAgICArK3ZlcnRpY2VzW2luZGljZXNbY3VycmVudEluZGV4ICsgMl1dLm51bUxpdmVUcmlhbmdsZXM7CiAgICAgICAgICArK3RyaWFuZ2xlOwogICAgICAgICAgY3VycmVudEluZGV4ICs9IDM7CiAgICAgICAgfQogICAgICAgIGxldCBmID0gMDsKICAgICAgICBsZXQgcyA9IGNhY2hlU2l6ZSArIDE7CiAgICAgICAgY3Vyc29yID0gMTsKICAgICAgICBsZXQgb25lUmluZyA9IFtdOwogICAgICAgIGNvbnN0IGRlYWRFbmQgPSBbXTsKICAgICAgICBsZXQgdmVydGV4OwogICAgICAgIGxldCBpbnRvVmVydGljZXM7CiAgICAgICAgbGV0IGN1cnJlbnRPdXRwdXRJbmRleCA9IDA7CiAgICAgICAgY29uc3Qgb3V0cHV0SW5kaWNlcyA9IFtdOwogICAgICAgIGNvbnN0IG51bVRyaWFuZ2xlcyA9IG51bUluZGljZXMgLyAzOwogICAgICAgIGNvbnN0IHRyaWFuZ2xlRW1pdHRlZCA9IFtdOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1UcmlhbmdsZXM7IGkrKykgewogICAgICAgICAgdHJpYW5nbGVFbWl0dGVkW2ldID0gZmFsc2U7CiAgICAgICAgfQogICAgICAgIGxldCBpbmRleDsKICAgICAgICBsZXQgbGltaXQ7CiAgICAgICAgd2hpbGUgKGYgIT09IC0xKSB7CiAgICAgICAgICBvbmVSaW5nID0gW107CiAgICAgICAgICBpbnRvVmVydGljZXMgPSB2ZXJ0aWNlc1tmXTsKICAgICAgICAgIGxpbWl0ID0gaW50b1ZlcnRpY2VzLnZlcnRleFRyaWFuZ2xlcy5sZW5ndGg7CiAgICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IGxpbWl0OyArK2spIHsKICAgICAgICAgICAgdHJpYW5nbGUgPSBpbnRvVmVydGljZXMudmVydGV4VHJpYW5nbGVzW2tdOwogICAgICAgICAgICBpZiAoIXRyaWFuZ2xlRW1pdHRlZFt0cmlhbmdsZV0pIHsKICAgICAgICAgICAgICB0cmlhbmdsZUVtaXR0ZWRbdHJpYW5nbGVdID0gdHJ1ZTsKICAgICAgICAgICAgICBjdXJyZW50SW5kZXggPSB0cmlhbmdsZSArIHRyaWFuZ2xlICsgdHJpYW5nbGU7CiAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCAzOyArK2opIHsKICAgICAgICAgICAgICAgIGluZGV4ID0gaW5kaWNlc1tjdXJyZW50SW5kZXhdOwogICAgICAgICAgICAgICAgb25lUmluZy5wdXNoKGluZGV4KTsKICAgICAgICAgICAgICAgIGRlYWRFbmQucHVzaChpbmRleCk7CiAgICAgICAgICAgICAgICBvdXRwdXRJbmRpY2VzW2N1cnJlbnRPdXRwdXRJbmRleF0gPSBpbmRleDsKICAgICAgICAgICAgICAgICsrY3VycmVudE91dHB1dEluZGV4OwogICAgICAgICAgICAgICAgdmVydGV4ID0gdmVydGljZXNbaW5kZXhdOwogICAgICAgICAgICAgICAgLS12ZXJ0ZXgubnVtTGl2ZVRyaWFuZ2xlczsKICAgICAgICAgICAgICAgIGlmIChzIC0gdmVydGV4LnRpbWVTdGFtcCA+IGNhY2hlU2l6ZSkgewogICAgICAgICAgICAgICAgICB2ZXJ0ZXgudGltZVN0YW1wID0gczsKICAgICAgICAgICAgICAgICAgKytzOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKytjdXJyZW50SW5kZXg7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBmID0gZ2V0TmV4dFZlcnRleCgKICAgICAgICAgICAgaW5kaWNlcywKICAgICAgICAgICAgY2FjaGVTaXplLAogICAgICAgICAgICBvbmVSaW5nLAogICAgICAgICAgICB2ZXJ0aWNlcywKICAgICAgICAgICAgcywKICAgICAgICAgICAgZGVhZEVuZCwKICAgICAgICAgICAgbWF4aW11bUluZGV4UGx1c09uZQogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG91dHB1dEluZGljZXM7CiAgICAgIH07CiAgICAgIFRpcHNpZnlfZGVmYXVsdCA9IFRpcHNpZnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9HZW9tZXRyeVBpcGVsaW5lLmpzCiAgZnVuY3Rpb24gYWRkVHJpYW5nbGUobGluZXMsIGluZGV4LCBpMCwgaTEsIGkyKSB7CiAgICBsaW5lc1tpbmRleCsrXSA9IGkwOwogICAgbGluZXNbaW5kZXgrK10gPSBpMTsKICAgIGxpbmVzW2luZGV4KytdID0gaTE7CiAgICBsaW5lc1tpbmRleCsrXSA9IGkyOwogICAgbGluZXNbaW5kZXgrK10gPSBpMjsKICAgIGxpbmVzW2luZGV4XSA9IGkwOwogIH0KICBmdW5jdGlvbiB0cmlhbmdsZXNUb0xpbmVzKHRyaWFuZ2xlcykgewogICAgY29uc3QgY291bnQgPSB0cmlhbmdsZXMubGVuZ3RoOwogICAgY29uc3Qgc2l6ZSA9IGNvdW50IC8gMyAqIDY7CiAgICBjb25zdCBsaW5lcyA9IEluZGV4RGF0YXR5cGVfZGVmYXVsdC5jcmVhdGVUeXBlZEFycmF5KGNvdW50LCBzaXplKTsKICAgIGxldCBpbmRleCA9IDA7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpICs9IDMsIGluZGV4ICs9IDYpIHsKICAgICAgYWRkVHJpYW5nbGUobGluZXMsIGluZGV4LCB0cmlhbmdsZXNbaV0sIHRyaWFuZ2xlc1tpICsgMV0sIHRyaWFuZ2xlc1tpICsgMl0pOwogICAgfQogICAgcmV0dXJuIGxpbmVzOwogIH0KICBmdW5jdGlvbiB0cmlhbmdsZVN0cmlwVG9MaW5lcyh0cmlhbmdsZXMpIHsKICAgIGNvbnN0IGNvdW50ID0gdHJpYW5nbGVzLmxlbmd0aDsKICAgIGlmIChjb3VudCA+PSAzKSB7CiAgICAgIGNvbnN0IHNpemUgPSAoY291bnQgLSAyKSAqIDY7CiAgICAgIGNvbnN0IGxpbmVzID0gSW5kZXhEYXRhdHlwZV9kZWZhdWx0LmNyZWF0ZVR5cGVkQXJyYXkoY291bnQsIHNpemUpOwogICAgICBhZGRUcmlhbmdsZShsaW5lcywgMCwgdHJpYW5nbGVzWzBdLCB0cmlhbmdsZXNbMV0sIHRyaWFuZ2xlc1syXSk7CiAgICAgIGxldCBpbmRleCA9IDY7CiAgICAgIGZvciAobGV0IGkgPSAzOyBpIDwgY291bnQ7ICsraSwgaW5kZXggKz0gNikgewogICAgICAgIGFkZFRyaWFuZ2xlKAogICAgICAgICAgbGluZXMsCiAgICAgICAgICBpbmRleCwKICAgICAgICAgIHRyaWFuZ2xlc1tpIC0gMV0sCiAgICAgICAgICB0cmlhbmdsZXNbaV0sCiAgICAgICAgICB0cmlhbmdsZXNbaSAtIDJdCiAgICAgICAgKTsKICAgICAgfQogICAgICByZXR1cm4gbGluZXM7CiAgICB9CiAgICByZXR1cm4gbmV3IFVpbnQxNkFycmF5KCk7CiAgfQogIGZ1bmN0aW9uIHRyaWFuZ2xlRmFuVG9MaW5lcyh0cmlhbmdsZXMpIHsKICAgIGlmICh0cmlhbmdsZXMubGVuZ3RoID4gMCkgewogICAgICBjb25zdCBjb3VudCA9IHRyaWFuZ2xlcy5sZW5ndGggLSAxOwogICAgICBjb25zdCBzaXplID0gKGNvdW50IC0gMSkgKiA2OwogICAgICBjb25zdCBsaW5lcyA9IEluZGV4RGF0YXR5cGVfZGVmYXVsdC5jcmVhdGVUeXBlZEFycmF5KGNvdW50LCBzaXplKTsKICAgICAgY29uc3QgYmFzZSA9IHRyaWFuZ2xlc1swXTsKICAgICAgbGV0IGluZGV4ID0gMDsKICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBjb3VudDsgKytpLCBpbmRleCArPSA2KSB7CiAgICAgICAgYWRkVHJpYW5nbGUobGluZXMsIGluZGV4LCBiYXNlLCB0cmlhbmdsZXNbaV0sIHRyaWFuZ2xlc1tpICsgMV0pOwogICAgICB9CiAgICAgIHJldHVybiBsaW5lczsKICAgIH0KICAgIHJldHVybiBuZXcgVWludDE2QXJyYXkoKTsKICB9CiAgZnVuY3Rpb24gY29weUF0dHJpYnV0ZXNEZXNjcmlwdGlvbnMoYXR0cmlidXRlcykgewogICAgY29uc3QgbmV3QXR0cmlidXRlcyA9IHt9OwogICAgZm9yIChjb25zdCBhdHRyaWJ1dGUgaW4gYXR0cmlidXRlcykgewogICAgICBpZiAoYXR0cmlidXRlcy5oYXNPd25Qcm9wZXJ0eShhdHRyaWJ1dGUpICYmIGRlZmluZWRfZGVmYXVsdChhdHRyaWJ1dGVzW2F0dHJpYnV0ZV0pICYmIGRlZmluZWRfZGVmYXVsdChhdHRyaWJ1dGVzW2F0dHJpYnV0ZV0udmFsdWVzKSkgewogICAgICAgIGNvbnN0IGF0dHIgPSBhdHRyaWJ1dGVzW2F0dHJpYnV0ZV07CiAgICAgICAgbmV3QXR0cmlidXRlc1thdHRyaWJ1dGVdID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IGF0dHIuY29tcG9uZW50RGF0YXR5cGUsCiAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiBhdHRyLmNvbXBvbmVudHNQZXJBdHRyaWJ1dGUsCiAgICAgICAgICBub3JtYWxpemU6IGF0dHIubm9ybWFsaXplLAogICAgICAgICAgdmFsdWVzOiBbXQogICAgICAgIH0pOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gbmV3QXR0cmlidXRlczsKICB9CiAgZnVuY3Rpb24gY29weVZlcnRleChkZXN0aW5hdGlvbkF0dHJpYnV0ZXMsIHNvdXJjZUF0dHJpYnV0ZXMsIGluZGV4KSB7CiAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZSBpbiBzb3VyY2VBdHRyaWJ1dGVzKSB7CiAgICAgIGlmIChzb3VyY2VBdHRyaWJ1dGVzLmhhc093blByb3BlcnR5KGF0dHJpYnV0ZSkgJiYgZGVmaW5lZF9kZWZhdWx0KHNvdXJjZUF0dHJpYnV0ZXNbYXR0cmlidXRlXSkgJiYgZGVmaW5lZF9kZWZhdWx0KHNvdXJjZUF0dHJpYnV0ZXNbYXR0cmlidXRlXS52YWx1ZXMpKSB7CiAgICAgICAgY29uc3QgYXR0ciA9IHNvdXJjZUF0dHJpYnV0ZXNbYXR0cmlidXRlXTsKICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IGF0dHIuY29tcG9uZW50c1BlckF0dHJpYnV0ZTsgKytrKSB7CiAgICAgICAgICBkZXN0aW5hdGlvbkF0dHJpYnV0ZXNbYXR0cmlidXRlXS52YWx1ZXMucHVzaCgKICAgICAgICAgICAgYXR0ci52YWx1ZXNbaW5kZXggKiBhdHRyLmNvbXBvbmVudHNQZXJBdHRyaWJ1dGUgKyBrXQogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9CiAgZnVuY3Rpb24gdHJhbnNmb3JtUG9pbnQobWF0cml4LCBhdHRyaWJ1dGUpIHsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoYXR0cmlidXRlKSkgewogICAgICBjb25zdCB2YWx1ZXMgPSBhdHRyaWJ1dGUudmFsdWVzOwogICAgICBjb25zdCBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoOwogICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAzKSB7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjayh2YWx1ZXMsIGksIHNjcmF0Y2hDYXJ0ZXNpYW4zMyk7CiAgICAgICAgTWF0cml4NF9kZWZhdWx0Lm11bHRpcGx5QnlQb2ludChtYXRyaXgsIHNjcmF0Y2hDYXJ0ZXNpYW4zMywgc2NyYXRjaENhcnRlc2lhbjMzKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayhzY3JhdGNoQ2FydGVzaWFuMzMsIHZhbHVlcywgaSk7CiAgICAgIH0KICAgIH0KICB9CiAgZnVuY3Rpb24gdHJhbnNmb3JtVmVjdG9yKG1hdHJpeCwgYXR0cmlidXRlKSB7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGF0dHJpYnV0ZSkpIHsKICAgICAgY29uc3QgdmFsdWVzID0gYXR0cmlidXRlLnZhbHVlczsKICAgICAgY29uc3QgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aDsKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMykgewogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2sodmFsdWVzLCBpLCBzY3JhdGNoQ2FydGVzaWFuMzMpOwogICAgICAgIE1hdHJpeDNfZGVmYXVsdC5tdWx0aXBseUJ5VmVjdG9yKG1hdHJpeCwgc2NyYXRjaENhcnRlc2lhbjMzLCBzY3JhdGNoQ2FydGVzaWFuMzMpOwogICAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4zMyA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoCiAgICAgICAgICBzY3JhdGNoQ2FydGVzaWFuMzMsCiAgICAgICAgICBzY3JhdGNoQ2FydGVzaWFuMzMKICAgICAgICApOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKHNjcmF0Y2hDYXJ0ZXNpYW4zMywgdmFsdWVzLCBpKTsKICAgICAgfQogICAgfQogIH0KICBmdW5jdGlvbiBmaW5kQXR0cmlidXRlc0luQWxsR2VvbWV0cmllcyhpbnN0YW5jZXMsIHByb3BlcnR5TmFtZSkgewogICAgY29uc3QgbGVuZ3RoID0gaW5zdGFuY2VzLmxlbmd0aDsKICAgIGNvbnN0IGF0dHJpYnV0ZXNJbkFsbEdlb21ldHJpZXMgPSB7fTsKICAgIGNvbnN0IGF0dHJpYnV0ZXMwID0gaW5zdGFuY2VzWzBdW3Byb3BlcnR5TmFtZV0uYXR0cmlidXRlczsKICAgIGxldCBuYW1lOwogICAgZm9yIChuYW1lIGluIGF0dHJpYnV0ZXMwKSB7CiAgICAgIGlmIChhdHRyaWJ1dGVzMC5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiBkZWZpbmVkX2RlZmF1bHQoYXR0cmlidXRlczBbbmFtZV0pICYmIGRlZmluZWRfZGVmYXVsdChhdHRyaWJ1dGVzMFtuYW1lXS52YWx1ZXMpKSB7CiAgICAgICAgY29uc3QgYXR0cmlidXRlID0gYXR0cmlidXRlczBbbmFtZV07CiAgICAgICAgbGV0IG51bWJlck9mQ29tcG9uZW50cyA9IGF0dHJpYnV0ZS52YWx1ZXMubGVuZ3RoOwogICAgICAgIGxldCBpbkFsbEdlb21ldHJpZXMgPSB0cnVlOwogICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgICAgIGNvbnN0IG90aGVyQXR0cmlidXRlID0gaW5zdGFuY2VzW2ldW3Byb3BlcnR5TmFtZV0uYXR0cmlidXRlc1tuYW1lXTsKICAgICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KG90aGVyQXR0cmlidXRlKSB8fCBhdHRyaWJ1dGUuY29tcG9uZW50RGF0YXR5cGUgIT09IG90aGVyQXR0cmlidXRlLmNvbXBvbmVudERhdGF0eXBlIHx8IGF0dHJpYnV0ZS5jb21wb25lbnRzUGVyQXR0cmlidXRlICE9PSBvdGhlckF0dHJpYnV0ZS5jb21wb25lbnRzUGVyQXR0cmlidXRlIHx8IGF0dHJpYnV0ZS5ub3JtYWxpemUgIT09IG90aGVyQXR0cmlidXRlLm5vcm1hbGl6ZSkgewogICAgICAgICAgICBpbkFsbEdlb21ldHJpZXMgPSBmYWxzZTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgICBudW1iZXJPZkNvbXBvbmVudHMgKz0gb3RoZXJBdHRyaWJ1dGUudmFsdWVzLmxlbmd0aDsKICAgICAgICB9CiAgICAgICAgaWYgKGluQWxsR2VvbWV0cmllcykgewogICAgICAgICAgYXR0cmlidXRlc0luQWxsR2VvbWV0cmllc1tuYW1lXSA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IGF0dHJpYnV0ZS5jb21wb25lbnREYXRhdHlwZSwKICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogYXR0cmlidXRlLmNvbXBvbmVudHNQZXJBdHRyaWJ1dGUsCiAgICAgICAgICAgIG5vcm1hbGl6ZTogYXR0cmlidXRlLm5vcm1hbGl6ZSwKICAgICAgICAgICAgdmFsdWVzOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LmNyZWF0ZVR5cGVkQXJyYXkoCiAgICAgICAgICAgICAgYXR0cmlidXRlLmNvbXBvbmVudERhdGF0eXBlLAogICAgICAgICAgICAgIG51bWJlck9mQ29tcG9uZW50cwogICAgICAgICAgICApCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBhdHRyaWJ1dGVzSW5BbGxHZW9tZXRyaWVzOwogIH0KICBmdW5jdGlvbiBjb21iaW5lR2VvbWV0cmllcyhpbnN0YW5jZXMsIHByb3BlcnR5TmFtZSkgewogICAgY29uc3QgbGVuZ3RoID0gaW5zdGFuY2VzLmxlbmd0aDsKICAgIGxldCBuYW1lOwogICAgbGV0IGk7CiAgICBsZXQgajsKICAgIGxldCBrOwogICAgY29uc3QgbSA9IGluc3RhbmNlc1swXS5tb2RlbE1hdHJpeDsKICAgIGNvbnN0IGhhdmVJbmRpY2VzID0gZGVmaW5lZF9kZWZhdWx0KGluc3RhbmNlc1swXVtwcm9wZXJ0eU5hbWVdLmluZGljZXMpOwogICAgY29uc3QgcHJpbWl0aXZlVHlwZSA9IGluc3RhbmNlc1swXVtwcm9wZXJ0eU5hbWVdLnByaW1pdGl2ZVR5cGU7CiAgICBmb3IgKGkgPSAxOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgaWYgKCFNYXRyaXg0X2RlZmF1bHQuZXF1YWxzKGluc3RhbmNlc1tpXS5tb2RlbE1hdHJpeCwgbSkpIHsKICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiQWxsIGluc3RhbmNlcyBtdXN0IGhhdmUgdGhlIHNhbWUgbW9kZWxNYXRyaXguIik7CiAgICAgIH0KICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChpbnN0YW5jZXNbaV1bcHJvcGVydHlOYW1lXS5pbmRpY2VzKSAhPT0gaGF2ZUluZGljZXMpIHsKICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICJBbGwgaW5zdGFuY2UgZ2VvbWV0cmllcyBtdXN0IGhhdmUgYW4gaW5kaWNlcyBvciBub3QgaGF2ZSBvbmUuIgogICAgICAgICk7CiAgICAgIH0KICAgICAgaWYgKGluc3RhbmNlc1tpXVtwcm9wZXJ0eU5hbWVdLnByaW1pdGl2ZVR5cGUgIT09IHByaW1pdGl2ZVR5cGUpIHsKICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICJBbGwgaW5zdGFuY2UgZ2VvbWV0cmllcyBtdXN0IGhhdmUgdGhlIHNhbWUgcHJpbWl0aXZlVHlwZS4iCiAgICAgICAgKTsKICAgICAgfQogICAgfQogICAgY29uc3QgYXR0cmlidXRlcyA9IGZpbmRBdHRyaWJ1dGVzSW5BbGxHZW9tZXRyaWVzKGluc3RhbmNlcywgcHJvcGVydHlOYW1lKTsKICAgIGxldCB2YWx1ZXM7CiAgICBsZXQgc291cmNlVmFsdWVzOwogICAgbGV0IHNvdXJjZVZhbHVlc0xlbmd0aDsKICAgIGZvciAobmFtZSBpbiBhdHRyaWJ1dGVzKSB7CiAgICAgIGlmIChhdHRyaWJ1dGVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7CiAgICAgICAgdmFsdWVzID0gYXR0cmlidXRlc1tuYW1lXS52YWx1ZXM7CiAgICAgICAgayA9IDA7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgICBzb3VyY2VWYWx1ZXMgPSBpbnN0YW5jZXNbaV1bcHJvcGVydHlOYW1lXS5hdHRyaWJ1dGVzW25hbWVdLnZhbHVlczsKICAgICAgICAgIHNvdXJjZVZhbHVlc0xlbmd0aCA9IHNvdXJjZVZhbHVlcy5sZW5ndGg7CiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgc291cmNlVmFsdWVzTGVuZ3RoOyArK2opIHsKICAgICAgICAgICAgdmFsdWVzW2srK10gPSBzb3VyY2VWYWx1ZXNbal07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBsZXQgaW5kaWNlczsKICAgIGlmIChoYXZlSW5kaWNlcykgewogICAgICBsZXQgbnVtYmVyT2ZJbmRpY2VzID0gMDsKICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgbnVtYmVyT2ZJbmRpY2VzICs9IGluc3RhbmNlc1tpXVtwcm9wZXJ0eU5hbWVdLmluZGljZXMubGVuZ3RoOwogICAgICB9CiAgICAgIGNvbnN0IG51bWJlck9mVmVydGljZXMgPSBHZW9tZXRyeV9kZWZhdWx0LmNvbXB1dGVOdW1iZXJPZlZlcnRpY2VzKAogICAgICAgIG5ldyBHZW9tZXRyeV9kZWZhdWx0KHsKICAgICAgICAgIGF0dHJpYnV0ZXMsCiAgICAgICAgICBwcmltaXRpdmVUeXBlOiBQcmltaXRpdmVUeXBlX2RlZmF1bHQuUE9JTlRTCiAgICAgICAgfSkKICAgICAgKTsKICAgICAgY29uc3QgZGVzdEluZGljZXMgPSBJbmRleERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheSgKICAgICAgICBudW1iZXJPZlZlcnRpY2VzLAogICAgICAgIG51bWJlck9mSW5kaWNlcwogICAgICApOwogICAgICBsZXQgZGVzdE9mZnNldCA9IDA7CiAgICAgIGxldCBvZmZzZXQgPSAwOwogICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgICBjb25zdCBzb3VyY2VJbmRpY2VzID0gaW5zdGFuY2VzW2ldW3Byb3BlcnR5TmFtZV0uaW5kaWNlczsKICAgICAgICBjb25zdCBzb3VyY2VJbmRpY2VzTGVuID0gc291cmNlSW5kaWNlcy5sZW5ndGg7CiAgICAgICAgZm9yIChrID0gMDsgayA8IHNvdXJjZUluZGljZXNMZW47ICsraykgewogICAgICAgICAgZGVzdEluZGljZXNbZGVzdE9mZnNldCsrXSA9IG9mZnNldCArIHNvdXJjZUluZGljZXNba107CiAgICAgICAgfQogICAgICAgIG9mZnNldCArPSBHZW9tZXRyeV9kZWZhdWx0LmNvbXB1dGVOdW1iZXJPZlZlcnRpY2VzKGluc3RhbmNlc1tpXVtwcm9wZXJ0eU5hbWVdKTsKICAgICAgfQogICAgICBpbmRpY2VzID0gZGVzdEluZGljZXM7CiAgICB9CiAgICBsZXQgY2VudGVyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgbGV0IHJhZGl1cyA9IDA7CiAgICBsZXQgYnM7CiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgYnMgPSBpbnN0YW5jZXNbaV1bcHJvcGVydHlOYW1lXS5ib3VuZGluZ1NwaGVyZTsKICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoYnMpKSB7CiAgICAgICAgY2VudGVyID0gdm9pZCAwOwogICAgICAgIGJyZWFrOwogICAgICB9CiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoYnMuY2VudGVyLCBjZW50ZXIsIGNlbnRlcik7CiAgICB9CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGNlbnRlcikpIHsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmRpdmlkZUJ5U2NhbGFyKGNlbnRlciwgbGVuZ3RoLCBjZW50ZXIpOwogICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgICBicyA9IGluc3RhbmNlc1tpXVtwcm9wZXJ0eU5hbWVdLmJvdW5kaW5nU3BoZXJlOwogICAgICAgIGNvbnN0IHRlbXBSYWRpdXMgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlKAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KGJzLmNlbnRlciwgY2VudGVyLCB0ZW1wU2NyYXRjaCkKICAgICAgICApICsgYnMucmFkaXVzOwogICAgICAgIGlmICh0ZW1wUmFkaXVzID4gcmFkaXVzKSB7CiAgICAgICAgICByYWRpdXMgPSB0ZW1wUmFkaXVzOwogICAgICAgIH0KICAgICAgfQogICAgfQogICAgcmV0dXJuIG5ldyBHZW9tZXRyeV9kZWZhdWx0KHsKICAgICAgYXR0cmlidXRlcywKICAgICAgaW5kaWNlcywKICAgICAgcHJpbWl0aXZlVHlwZSwKICAgICAgYm91bmRpbmdTcGhlcmU6IGRlZmluZWRfZGVmYXVsdChjZW50ZXIpID8gbmV3IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQoY2VudGVyLCByYWRpdXMpIDogdm9pZCAwCiAgICB9KTsKICB9CiAgZnVuY3Rpb24gaW5kZXhUcmlhbmdsZXMoZ2VvbWV0cnkpIHsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoZ2VvbWV0cnkuaW5kaWNlcykpIHsKICAgICAgcmV0dXJuIGdlb21ldHJ5OwogICAgfQogICAgY29uc3QgbnVtYmVyT2ZWZXJ0aWNlcyA9IEdlb21ldHJ5X2RlZmF1bHQuY29tcHV0ZU51bWJlck9mVmVydGljZXMoZ2VvbWV0cnkpOwogICAgaWYgKG51bWJlck9mVmVydGljZXMgPCAzKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJUaGUgbnVtYmVyIG9mIHZlcnRpY2VzIG11c3QgYmUgYXQgbGVhc3QgdGhyZWUuIik7CiAgICB9CiAgICBpZiAobnVtYmVyT2ZWZXJ0aWNlcyAlIDMgIT09IDApIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgIlRoZSBudW1iZXIgb2YgdmVydGljZXMgbXVzdCBiZSBhIG11bHRpcGxlIG9mIHRocmVlLiIKICAgICAgKTsKICAgIH0KICAgIGNvbnN0IGluZGljZXMgPSBJbmRleERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheSgKICAgICAgbnVtYmVyT2ZWZXJ0aWNlcywKICAgICAgbnVtYmVyT2ZWZXJ0aWNlcwogICAgKTsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtYmVyT2ZWZXJ0aWNlczsgKytpKSB7CiAgICAgIGluZGljZXNbaV0gPSBpOwogICAgfQogICAgZ2VvbWV0cnkuaW5kaWNlcyA9IGluZGljZXM7CiAgICByZXR1cm4gZ2VvbWV0cnk7CiAgfQogIGZ1bmN0aW9uIGluZGV4VHJpYW5nbGVGYW4oZ2VvbWV0cnkpIHsKICAgIGNvbnN0IG51bWJlck9mVmVydGljZXMgPSBHZW9tZXRyeV9kZWZhdWx0LmNvbXB1dGVOdW1iZXJPZlZlcnRpY2VzKGdlb21ldHJ5KTsKICAgIGlmIChudW1iZXJPZlZlcnRpY2VzIDwgMykgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiVGhlIG51bWJlciBvZiB2ZXJ0aWNlcyBtdXN0IGJlIGF0IGxlYXN0IHRocmVlLiIpOwogICAgfQogICAgY29uc3QgaW5kaWNlcyA9IEluZGV4RGF0YXR5cGVfZGVmYXVsdC5jcmVhdGVUeXBlZEFycmF5KAogICAgICBudW1iZXJPZlZlcnRpY2VzLAogICAgICAobnVtYmVyT2ZWZXJ0aWNlcyAtIDIpICogMwogICAgKTsKICAgIGluZGljZXNbMF0gPSAxOwogICAgaW5kaWNlc1sxXSA9IDA7CiAgICBpbmRpY2VzWzJdID0gMjsKICAgIGxldCBpbmRpY2VzSW5kZXggPSAzOwogICAgZm9yIChsZXQgaSA9IDM7IGkgPCBudW1iZXJPZlZlcnRpY2VzOyArK2kpIHsKICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBpIC0gMTsKICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSAwOwogICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IGk7CiAgICB9CiAgICBnZW9tZXRyeS5pbmRpY2VzID0gaW5kaWNlczsKICAgIGdlb21ldHJ5LnByaW1pdGl2ZVR5cGUgPSBQcmltaXRpdmVUeXBlX2RlZmF1bHQuVFJJQU5HTEVTOwogICAgcmV0dXJuIGdlb21ldHJ5OwogIH0KICBmdW5jdGlvbiBpbmRleFRyaWFuZ2xlU3RyaXAoZ2VvbWV0cnkpIHsKICAgIGNvbnN0IG51bWJlck9mVmVydGljZXMgPSBHZW9tZXRyeV9kZWZhdWx0LmNvbXB1dGVOdW1iZXJPZlZlcnRpY2VzKGdlb21ldHJ5KTsKICAgIGlmIChudW1iZXJPZlZlcnRpY2VzIDwgMykgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiVGhlIG51bWJlciBvZiB2ZXJ0aWNlcyBtdXN0IGJlIGF0IGxlYXN0IDMuIik7CiAgICB9CiAgICBjb25zdCBpbmRpY2VzID0gSW5kZXhEYXRhdHlwZV9kZWZhdWx0LmNyZWF0ZVR5cGVkQXJyYXkoCiAgICAgIG51bWJlck9mVmVydGljZXMsCiAgICAgIChudW1iZXJPZlZlcnRpY2VzIC0gMikgKiAzCiAgICApOwogICAgaW5kaWNlc1swXSA9IDA7CiAgICBpbmRpY2VzWzFdID0gMTsKICAgIGluZGljZXNbMl0gPSAyOwogICAgaWYgKG51bWJlck9mVmVydGljZXMgPiAzKSB7CiAgICAgIGluZGljZXNbM10gPSAwOwogICAgICBpbmRpY2VzWzRdID0gMjsKICAgICAgaW5kaWNlc1s1XSA9IDM7CiAgICB9CiAgICBsZXQgaW5kaWNlc0luZGV4ID0gNjsKICAgIGZvciAobGV0IGkgPSAzOyBpIDwgbnVtYmVyT2ZWZXJ0aWNlcyAtIDE7IGkgKz0gMikgewogICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IGk7CiAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gaSAtIDE7CiAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gaSArIDE7CiAgICAgIGlmIChpICsgMiA8IG51bWJlck9mVmVydGljZXMpIHsKICAgICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IGk7CiAgICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBpICsgMTsKICAgICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IGkgKyAyOwogICAgICB9CiAgICB9CiAgICBnZW9tZXRyeS5pbmRpY2VzID0gaW5kaWNlczsKICAgIGdlb21ldHJ5LnByaW1pdGl2ZVR5cGUgPSBQcmltaXRpdmVUeXBlX2RlZmF1bHQuVFJJQU5HTEVTOwogICAgcmV0dXJuIGdlb21ldHJ5OwogIH0KICBmdW5jdGlvbiBpbmRleExpbmVzKGdlb21ldHJ5KSB7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGdlb21ldHJ5LmluZGljZXMpKSB7CiAgICAgIHJldHVybiBnZW9tZXRyeTsKICAgIH0KICAgIGNvbnN0IG51bWJlck9mVmVydGljZXMgPSBHZW9tZXRyeV9kZWZhdWx0LmNvbXB1dGVOdW1iZXJPZlZlcnRpY2VzKGdlb21ldHJ5KTsKICAgIGlmIChudW1iZXJPZlZlcnRpY2VzIDwgMikgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiVGhlIG51bWJlciBvZiB2ZXJ0aWNlcyBtdXN0IGJlIGF0IGxlYXN0IHR3by4iKTsKICAgIH0KICAgIGlmIChudW1iZXJPZlZlcnRpY2VzICUgMiAhPT0gMCkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiVGhlIG51bWJlciBvZiB2ZXJ0aWNlcyBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMi4iKTsKICAgIH0KICAgIGNvbnN0IGluZGljZXMgPSBJbmRleERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheSgKICAgICAgbnVtYmVyT2ZWZXJ0aWNlcywKICAgICAgbnVtYmVyT2ZWZXJ0aWNlcwogICAgKTsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtYmVyT2ZWZXJ0aWNlczsgKytpKSB7CiAgICAgIGluZGljZXNbaV0gPSBpOwogICAgfQogICAgZ2VvbWV0cnkuaW5kaWNlcyA9IGluZGljZXM7CiAgICByZXR1cm4gZ2VvbWV0cnk7CiAgfQogIGZ1bmN0aW9uIGluZGV4TGluZVN0cmlwKGdlb21ldHJ5KSB7CiAgICBjb25zdCBudW1iZXJPZlZlcnRpY2VzID0gR2VvbWV0cnlfZGVmYXVsdC5jb21wdXRlTnVtYmVyT2ZWZXJ0aWNlcyhnZW9tZXRyeSk7CiAgICBpZiAobnVtYmVyT2ZWZXJ0aWNlcyA8IDIpIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoIlRoZSBudW1iZXIgb2YgdmVydGljZXMgbXVzdCBiZSBhdCBsZWFzdCB0d28uIik7CiAgICB9CiAgICBjb25zdCBpbmRpY2VzID0gSW5kZXhEYXRhdHlwZV9kZWZhdWx0LmNyZWF0ZVR5cGVkQXJyYXkoCiAgICAgIG51bWJlck9mVmVydGljZXMsCiAgICAgIChudW1iZXJPZlZlcnRpY2VzIC0gMSkgKiAyCiAgICApOwogICAgaW5kaWNlc1swXSA9IDA7CiAgICBpbmRpY2VzWzFdID0gMTsKICAgIGxldCBpbmRpY2VzSW5kZXggPSAyOwogICAgZm9yIChsZXQgaSA9IDI7IGkgPCBudW1iZXJPZlZlcnRpY2VzOyArK2kpIHsKICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBpIC0gMTsKICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBpOwogICAgfQogICAgZ2VvbWV0cnkuaW5kaWNlcyA9IGluZGljZXM7CiAgICBnZW9tZXRyeS5wcmltaXRpdmVUeXBlID0gUHJpbWl0aXZlVHlwZV9kZWZhdWx0LkxJTkVTOwogICAgcmV0dXJuIGdlb21ldHJ5OwogIH0KICBmdW5jdGlvbiBpbmRleExpbmVMb29wKGdlb21ldHJ5KSB7CiAgICBjb25zdCBudW1iZXJPZlZlcnRpY2VzID0gR2VvbWV0cnlfZGVmYXVsdC5jb21wdXRlTnVtYmVyT2ZWZXJ0aWNlcyhnZW9tZXRyeSk7CiAgICBpZiAobnVtYmVyT2ZWZXJ0aWNlcyA8IDIpIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoIlRoZSBudW1iZXIgb2YgdmVydGljZXMgbXVzdCBiZSBhdCBsZWFzdCB0d28uIik7CiAgICB9CiAgICBjb25zdCBpbmRpY2VzID0gSW5kZXhEYXRhdHlwZV9kZWZhdWx0LmNyZWF0ZVR5cGVkQXJyYXkoCiAgICAgIG51bWJlck9mVmVydGljZXMsCiAgICAgIG51bWJlck9mVmVydGljZXMgKiAyCiAgICApOwogICAgaW5kaWNlc1swXSA9IDA7CiAgICBpbmRpY2VzWzFdID0gMTsKICAgIGxldCBpbmRpY2VzSW5kZXggPSAyOwogICAgZm9yIChsZXQgaSA9IDI7IGkgPCBudW1iZXJPZlZlcnRpY2VzOyArK2kpIHsKICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBpIC0gMTsKICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBpOwogICAgfQogICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBudW1iZXJPZlZlcnRpY2VzIC0gMTsKICAgIGluZGljZXNbaW5kaWNlc0luZGV4XSA9IDA7CiAgICBnZW9tZXRyeS5pbmRpY2VzID0gaW5kaWNlczsKICAgIGdlb21ldHJ5LnByaW1pdGl2ZVR5cGUgPSBQcmltaXRpdmVUeXBlX2RlZmF1bHQuTElORVM7CiAgICByZXR1cm4gZ2VvbWV0cnk7CiAgfQogIGZ1bmN0aW9uIGluZGV4UHJpbWl0aXZlKGdlb21ldHJ5KSB7CiAgICBzd2l0Y2ggKGdlb21ldHJ5LnByaW1pdGl2ZVR5cGUpIHsKICAgICAgY2FzZSBQcmltaXRpdmVUeXBlX2RlZmF1bHQuVFJJQU5HTEVfRkFOOgogICAgICAgIHJldHVybiBpbmRleFRyaWFuZ2xlRmFuKGdlb21ldHJ5KTsKICAgICAgY2FzZSBQcmltaXRpdmVUeXBlX2RlZmF1bHQuVFJJQU5HTEVfU1RSSVA6CiAgICAgICAgcmV0dXJuIGluZGV4VHJpYW5nbGVTdHJpcChnZW9tZXRyeSk7CiAgICAgIGNhc2UgUHJpbWl0aXZlVHlwZV9kZWZhdWx0LlRSSUFOR0xFUzoKICAgICAgICByZXR1cm4gaW5kZXhUcmlhbmdsZXMoZ2VvbWV0cnkpOwogICAgICBjYXNlIFByaW1pdGl2ZVR5cGVfZGVmYXVsdC5MSU5FX1NUUklQOgogICAgICAgIHJldHVybiBpbmRleExpbmVTdHJpcChnZW9tZXRyeSk7CiAgICAgIGNhc2UgUHJpbWl0aXZlVHlwZV9kZWZhdWx0LkxJTkVfTE9PUDoKICAgICAgICByZXR1cm4gaW5kZXhMaW5lTG9vcChnZW9tZXRyeSk7CiAgICAgIGNhc2UgUHJpbWl0aXZlVHlwZV9kZWZhdWx0LkxJTkVTOgogICAgICAgIHJldHVybiBpbmRleExpbmVzKGdlb21ldHJ5KTsKICAgIH0KICAgIHJldHVybiBnZW9tZXRyeTsKICB9CiAgZnVuY3Rpb24gb2Zmc2V0UG9pbnRGcm9tWFpQbGFuZShwLCBpc0JlaGluZCkgewogICAgaWYgKE1hdGguYWJzKHAueSkgPCBNYXRoX2RlZmF1bHQuRVBTSUxPTjYpIHsKICAgICAgaWYgKGlzQmVoaW5kKSB7CiAgICAgICAgcC55ID0gLU1hdGhfZGVmYXVsdC5FUFNJTE9ONjsKICAgICAgfSBlbHNlIHsKICAgICAgICBwLnkgPSBNYXRoX2RlZmF1bHQuRVBTSUxPTjY7CiAgICAgIH0KICAgIH0KICB9CiAgZnVuY3Rpb24gb2Zmc2V0VHJpYW5nbGVGcm9tWFpQbGFuZShwMCwgcDEsIHAyKSB7CiAgICBpZiAocDAueSAhPT0gMCAmJiBwMS55ICE9PSAwICYmIHAyLnkgIT09IDApIHsKICAgICAgb2Zmc2V0UG9pbnRGcm9tWFpQbGFuZShwMCwgcDAueSA8IDApOwogICAgICBvZmZzZXRQb2ludEZyb21YWlBsYW5lKHAxLCBwMS55IDwgMCk7CiAgICAgIG9mZnNldFBvaW50RnJvbVhaUGxhbmUocDIsIHAyLnkgPCAwKTsKICAgICAgcmV0dXJuOwogICAgfQogICAgY29uc3QgcDB5ID0gTWF0aC5hYnMocDAueSk7CiAgICBjb25zdCBwMXkgPSBNYXRoLmFicyhwMS55KTsKICAgIGNvbnN0IHAyeSA9IE1hdGguYWJzKHAyLnkpOwogICAgbGV0IHNpZ24yOwogICAgaWYgKHAweSA+IHAxeSkgewogICAgICBpZiAocDB5ID4gcDJ5KSB7CiAgICAgICAgc2lnbjIgPSBNYXRoX2RlZmF1bHQuc2lnbihwMC55KTsKICAgICAgfSBlbHNlIHsKICAgICAgICBzaWduMiA9IE1hdGhfZGVmYXVsdC5zaWduKHAyLnkpOwogICAgICB9CiAgICB9IGVsc2UgaWYgKHAxeSA+IHAyeSkgewogICAgICBzaWduMiA9IE1hdGhfZGVmYXVsdC5zaWduKHAxLnkpOwogICAgfSBlbHNlIHsKICAgICAgc2lnbjIgPSBNYXRoX2RlZmF1bHQuc2lnbihwMi55KTsKICAgIH0KICAgIGNvbnN0IGlzQmVoaW5kID0gc2lnbjIgPCAwOwogICAgb2Zmc2V0UG9pbnRGcm9tWFpQbGFuZShwMCwgaXNCZWhpbmQpOwogICAgb2Zmc2V0UG9pbnRGcm9tWFpQbGFuZShwMSwgaXNCZWhpbmQpOwogICAgb2Zmc2V0UG9pbnRGcm9tWFpQbGFuZShwMiwgaXNCZWhpbmQpOwogIH0KICBmdW5jdGlvbiBnZXRYWkludGVyc2VjdGlvbk9mZnNldFBvaW50cyhwLCBwMSwgdTEyLCB2MTIpIHsKICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoCiAgICAgIHAsCiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKAogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChwMSwgcCwgYzMpLAogICAgICAgIHAueSAvIChwLnkgLSBwMS55KSwKICAgICAgICBjMwogICAgICApLAogICAgICB1MTIKICAgICk7CiAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUodTEyLCB2MTIpOwogICAgb2Zmc2V0UG9pbnRGcm9tWFpQbGFuZSh1MTIsIHRydWUpOwogICAgb2Zmc2V0UG9pbnRGcm9tWFpQbGFuZSh2MTIsIGZhbHNlKTsKICB9CiAgZnVuY3Rpb24gc3BsaXRUcmlhbmdsZShwMCwgcDEsIHAyKSB7CiAgICBpZiAocDAueCA+PSAwIHx8IHAxLnggPj0gMCB8fCBwMi54ID49IDApIHsKICAgICAgcmV0dXJuIHZvaWQgMDsKICAgIH0KICAgIG9mZnNldFRyaWFuZ2xlRnJvbVhaUGxhbmUocDAsIHAxLCBwMik7CiAgICBjb25zdCBwMEJlaGluZCA9IHAwLnkgPCAwOwogICAgY29uc3QgcDFCZWhpbmQgPSBwMS55IDwgMDsKICAgIGNvbnN0IHAyQmVoaW5kID0gcDIueSA8IDA7CiAgICBsZXQgbnVtQmVoaW5kID0gMDsKICAgIG51bUJlaGluZCArPSBwMEJlaGluZCA/IDEgOiAwOwogICAgbnVtQmVoaW5kICs9IHAxQmVoaW5kID8gMSA6IDA7CiAgICBudW1CZWhpbmQgKz0gcDJCZWhpbmQgPyAxIDogMDsKICAgIGNvbnN0IGluZGljZXMgPSBzcGxpdFRyaWFuZ2xlUmVzdWx0LmluZGljZXM7CiAgICBpZiAobnVtQmVoaW5kID09PSAxKSB7CiAgICAgIGluZGljZXNbMV0gPSAzOwogICAgICBpbmRpY2VzWzJdID0gNDsKICAgICAgaW5kaWNlc1s1XSA9IDY7CiAgICAgIGluZGljZXNbN10gPSA2OwogICAgICBpbmRpY2VzWzhdID0gNTsKICAgICAgaWYgKHAwQmVoaW5kKSB7CiAgICAgICAgZ2V0WFpJbnRlcnNlY3Rpb25PZmZzZXRQb2ludHMocDAsIHAxLCB1MSwgcTEpOwogICAgICAgIGdldFhaSW50ZXJzZWN0aW9uT2Zmc2V0UG9pbnRzKHAwLCBwMiwgdTIsIHEyKTsKICAgICAgICBpbmRpY2VzWzBdID0gMDsKICAgICAgICBpbmRpY2VzWzNdID0gMTsKICAgICAgICBpbmRpY2VzWzRdID0gMjsKICAgICAgICBpbmRpY2VzWzZdID0gMTsKICAgICAgfSBlbHNlIGlmIChwMUJlaGluZCkgewogICAgICAgIGdldFhaSW50ZXJzZWN0aW9uT2Zmc2V0UG9pbnRzKHAxLCBwMiwgdTEsIHExKTsKICAgICAgICBnZXRYWkludGVyc2VjdGlvbk9mZnNldFBvaW50cyhwMSwgcDAsIHUyLCBxMik7CiAgICAgICAgaW5kaWNlc1swXSA9IDE7CiAgICAgICAgaW5kaWNlc1szXSA9IDI7CiAgICAgICAgaW5kaWNlc1s0XSA9IDA7CiAgICAgICAgaW5kaWNlc1s2XSA9IDI7CiAgICAgIH0gZWxzZSBpZiAocDJCZWhpbmQpIHsKICAgICAgICBnZXRYWkludGVyc2VjdGlvbk9mZnNldFBvaW50cyhwMiwgcDAsIHUxLCBxMSk7CiAgICAgICAgZ2V0WFpJbnRlcnNlY3Rpb25PZmZzZXRQb2ludHMocDIsIHAxLCB1MiwgcTIpOwogICAgICAgIGluZGljZXNbMF0gPSAyOwogICAgICAgIGluZGljZXNbM10gPSAwOwogICAgICAgIGluZGljZXNbNF0gPSAxOwogICAgICAgIGluZGljZXNbNl0gPSAwOwogICAgICB9CiAgICB9IGVsc2UgaWYgKG51bUJlaGluZCA9PT0gMikgewogICAgICBpbmRpY2VzWzJdID0gNDsKICAgICAgaW5kaWNlc1s0XSA9IDQ7CiAgICAgIGluZGljZXNbNV0gPSAzOwogICAgICBpbmRpY2VzWzddID0gNTsKICAgICAgaW5kaWNlc1s4XSA9IDY7CiAgICAgIGlmICghcDBCZWhpbmQpIHsKICAgICAgICBnZXRYWkludGVyc2VjdGlvbk9mZnNldFBvaW50cyhwMCwgcDEsIHUxLCBxMSk7CiAgICAgICAgZ2V0WFpJbnRlcnNlY3Rpb25PZmZzZXRQb2ludHMocDAsIHAyLCB1MiwgcTIpOwogICAgICAgIGluZGljZXNbMF0gPSAxOwogICAgICAgIGluZGljZXNbMV0gPSAyOwogICAgICAgIGluZGljZXNbM10gPSAxOwogICAgICAgIGluZGljZXNbNl0gPSAwOwogICAgICB9IGVsc2UgaWYgKCFwMUJlaGluZCkgewogICAgICAgIGdldFhaSW50ZXJzZWN0aW9uT2Zmc2V0UG9pbnRzKHAxLCBwMiwgdTEsIHExKTsKICAgICAgICBnZXRYWkludGVyc2VjdGlvbk9mZnNldFBvaW50cyhwMSwgcDAsIHUyLCBxMik7CiAgICAgICAgaW5kaWNlc1swXSA9IDI7CiAgICAgICAgaW5kaWNlc1sxXSA9IDA7CiAgICAgICAgaW5kaWNlc1szXSA9IDI7CiAgICAgICAgaW5kaWNlc1s2XSA9IDE7CiAgICAgIH0gZWxzZSBpZiAoIXAyQmVoaW5kKSB7CiAgICAgICAgZ2V0WFpJbnRlcnNlY3Rpb25PZmZzZXRQb2ludHMocDIsIHAwLCB1MSwgcTEpOwogICAgICAgIGdldFhaSW50ZXJzZWN0aW9uT2Zmc2V0UG9pbnRzKHAyLCBwMSwgdTIsIHEyKTsKICAgICAgICBpbmRpY2VzWzBdID0gMDsKICAgICAgICBpbmRpY2VzWzFdID0gMTsKICAgICAgICBpbmRpY2VzWzNdID0gMDsKICAgICAgICBpbmRpY2VzWzZdID0gMjsKICAgICAgfQogICAgfQogICAgY29uc3QgcG9zaXRpb25zID0gc3BsaXRUcmlhbmdsZVJlc3VsdC5wb3NpdGlvbnM7CiAgICBwb3NpdGlvbnNbMF0gPSBwMDsKICAgIHBvc2l0aW9uc1sxXSA9IHAxOwogICAgcG9zaXRpb25zWzJdID0gcDI7CiAgICBwb3NpdGlvbnMubGVuZ3RoID0gMzsKICAgIGlmIChudW1CZWhpbmQgPT09IDEgfHwgbnVtQmVoaW5kID09PSAyKSB7CiAgICAgIHBvc2l0aW9uc1szXSA9IHUxOwogICAgICBwb3NpdGlvbnNbNF0gPSB1MjsKICAgICAgcG9zaXRpb25zWzVdID0gcTE7CiAgICAgIHBvc2l0aW9uc1s2XSA9IHEyOwogICAgICBwb3NpdGlvbnMubGVuZ3RoID0gNzsKICAgIH0KICAgIHJldHVybiBzcGxpdFRyaWFuZ2xlUmVzdWx0OwogIH0KICBmdW5jdGlvbiB1cGRhdGVHZW9tZXRyeUFmdGVyU3BsaXQoZ2VvbWV0cnksIGNvbXB1dGVCb3VuZGluZ1NwaGVyZSkgewogICAgY29uc3QgYXR0cmlidXRlcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXM7CiAgICBpZiAoYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXMubGVuZ3RoID09PSAwKSB7CiAgICAgIHJldHVybiB2b2lkIDA7CiAgICB9CiAgICBmb3IgKGNvbnN0IHByb3BlcnR5IGluIGF0dHJpYnV0ZXMpIHsKICAgICAgaWYgKGF0dHJpYnV0ZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpICYmIGRlZmluZWRfZGVmYXVsdChhdHRyaWJ1dGVzW3Byb3BlcnR5XSkgJiYgZGVmaW5lZF9kZWZhdWx0KGF0dHJpYnV0ZXNbcHJvcGVydHldLnZhbHVlcykpIHsKICAgICAgICBjb25zdCBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzW3Byb3BlcnR5XTsKICAgICAgICBhdHRyaWJ1dGUudmFsdWVzID0gQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5jcmVhdGVUeXBlZEFycmF5KAogICAgICAgICAgYXR0cmlidXRlLmNvbXBvbmVudERhdGF0eXBlLAogICAgICAgICAgYXR0cmlidXRlLnZhbHVlcwogICAgICAgICk7CiAgICAgIH0KICAgIH0KICAgIGNvbnN0IG51bWJlck9mVmVydGljZXMgPSBHZW9tZXRyeV9kZWZhdWx0LmNvbXB1dGVOdW1iZXJPZlZlcnRpY2VzKGdlb21ldHJ5KTsKICAgIGdlb21ldHJ5LmluZGljZXMgPSBJbmRleERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheSgKICAgICAgbnVtYmVyT2ZWZXJ0aWNlcywKICAgICAgZ2VvbWV0cnkuaW5kaWNlcwogICAgKTsKICAgIGlmIChjb21wdXRlQm91bmRpbmdTcGhlcmUpIHsKICAgICAgZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgPSBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0LmZyb21WZXJ0aWNlcygKICAgICAgICBhdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcwogICAgICApOwogICAgfQogICAgcmV0dXJuIGdlb21ldHJ5OwogIH0KICBmdW5jdGlvbiBjb3B5R2VvbWV0cnlGb3JTcGxpdChnZW9tZXRyeSkgewogICAgY29uc3QgYXR0cmlidXRlcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXM7CiAgICBjb25zdCBjb3BpZWRBdHRyaWJ1dGVzID0ge307CiAgICBmb3IgKGNvbnN0IHByb3BlcnR5IGluIGF0dHJpYnV0ZXMpIHsKICAgICAgaWYgKGF0dHJpYnV0ZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpICYmIGRlZmluZWRfZGVmYXVsdChhdHRyaWJ1dGVzW3Byb3BlcnR5XSkgJiYgZGVmaW5lZF9kZWZhdWx0KGF0dHJpYnV0ZXNbcHJvcGVydHldLnZhbHVlcykpIHsKICAgICAgICBjb25zdCBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzW3Byb3BlcnR5XTsKICAgICAgICBjb3BpZWRBdHRyaWJ1dGVzW3Byb3BlcnR5XSA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBhdHRyaWJ1dGUuY29tcG9uZW50RGF0YXR5cGUsCiAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiBhdHRyaWJ1dGUuY29tcG9uZW50c1BlckF0dHJpYnV0ZSwKICAgICAgICAgIG5vcm1hbGl6ZTogYXR0cmlidXRlLm5vcm1hbGl6ZSwKICAgICAgICAgIHZhbHVlczogW10KICAgICAgICB9KTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIG5ldyBHZW9tZXRyeV9kZWZhdWx0KHsKICAgICAgYXR0cmlidXRlczogY29waWVkQXR0cmlidXRlcywKICAgICAgaW5kaWNlczogW10sCiAgICAgIHByaW1pdGl2ZVR5cGU6IGdlb21ldHJ5LnByaW1pdGl2ZVR5cGUKICAgIH0pOwogIH0KICBmdW5jdGlvbiB1cGRhdGVJbnN0YW5jZUFmdGVyU3BsaXQoaW5zdGFuY2UsIHdlc3RHZW9tZXRyeSwgZWFzdEdlb21ldHJ5KSB7CiAgICBjb25zdCBjb21wdXRlQm91bmRpbmdTcGhlcmUgPSBkZWZpbmVkX2RlZmF1bHQoaW5zdGFuY2UuZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUpOwogICAgd2VzdEdlb21ldHJ5ID0gdXBkYXRlR2VvbWV0cnlBZnRlclNwbGl0KHdlc3RHZW9tZXRyeSwgY29tcHV0ZUJvdW5kaW5nU3BoZXJlKTsKICAgIGVhc3RHZW9tZXRyeSA9IHVwZGF0ZUdlb21ldHJ5QWZ0ZXJTcGxpdChlYXN0R2VvbWV0cnksIGNvbXB1dGVCb3VuZGluZ1NwaGVyZSk7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGVhc3RHZW9tZXRyeSkgJiYgIWRlZmluZWRfZGVmYXVsdCh3ZXN0R2VvbWV0cnkpKSB7CiAgICAgIGluc3RhbmNlLmdlb21ldHJ5ID0gZWFzdEdlb21ldHJ5OwogICAgfSBlbHNlIGlmICghZGVmaW5lZF9kZWZhdWx0KGVhc3RHZW9tZXRyeSkgJiYgZGVmaW5lZF9kZWZhdWx0KHdlc3RHZW9tZXRyeSkpIHsKICAgICAgaW5zdGFuY2UuZ2VvbWV0cnkgPSB3ZXN0R2VvbWV0cnk7CiAgICB9IGVsc2UgewogICAgICBpbnN0YW5jZS53ZXN0SGVtaXNwaGVyZUdlb21ldHJ5ID0gd2VzdEdlb21ldHJ5OwogICAgICBpbnN0YW5jZS5lYXN0SGVtaXNwaGVyZUdlb21ldHJ5ID0gZWFzdEdlb21ldHJ5OwogICAgICBpbnN0YW5jZS5nZW9tZXRyeSA9IHZvaWQgMDsKICAgIH0KICB9CiAgZnVuY3Rpb24gZ2VuZXJhdGVCYXJ5Y2VudHJpY0ludGVycG9sYXRlRnVuY3Rpb24oQ2FydGVzaWFuVHlwZSwgbnVtYmVyT2ZDb21wb25lbnRzKSB7CiAgICBjb25zdCB2MFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuVHlwZSgpOwogICAgY29uc3QgdjFTY3JhdGNoMiA9IG5ldyBDYXJ0ZXNpYW5UeXBlKCk7CiAgICBjb25zdCB2MlNjcmF0Y2gyID0gbmV3IENhcnRlc2lhblR5cGUoKTsKICAgIHJldHVybiBmdW5jdGlvbihpMCwgaTEsIGkyLCBjb29yZHMsIHNvdXJjZVZhbHVlcywgY3VycmVudFZhbHVlcywgaW5zZXJ0ZWRJbmRleCwgbm9ybWFsaXplKSB7CiAgICAgIGNvbnN0IHYwMiA9IENhcnRlc2lhblR5cGUuZnJvbUFycmF5KAogICAgICAgIHNvdXJjZVZhbHVlcywKICAgICAgICBpMCAqIG51bWJlck9mQ29tcG9uZW50cywKICAgICAgICB2MFNjcmF0Y2gKICAgICAgKTsKICAgICAgY29uc3QgdjEyID0gQ2FydGVzaWFuVHlwZS5mcm9tQXJyYXkoCiAgICAgICAgc291cmNlVmFsdWVzLAogICAgICAgIGkxICogbnVtYmVyT2ZDb21wb25lbnRzLAogICAgICAgIHYxU2NyYXRjaDIKICAgICAgKTsKICAgICAgY29uc3QgdjIyID0gQ2FydGVzaWFuVHlwZS5mcm9tQXJyYXkoCiAgICAgICAgc291cmNlVmFsdWVzLAogICAgICAgIGkyICogbnVtYmVyT2ZDb21wb25lbnRzLAogICAgICAgIHYyU2NyYXRjaDIKICAgICAgKTsKICAgICAgQ2FydGVzaWFuVHlwZS5tdWx0aXBseUJ5U2NhbGFyKHYwMiwgY29vcmRzLngsIHYwMik7CiAgICAgIENhcnRlc2lhblR5cGUubXVsdGlwbHlCeVNjYWxhcih2MTIsIGNvb3Jkcy55LCB2MTIpOwogICAgICBDYXJ0ZXNpYW5UeXBlLm11bHRpcGx5QnlTY2FsYXIodjIyLCBjb29yZHMueiwgdjIyKTsKICAgICAgY29uc3QgdmFsdWUgPSBDYXJ0ZXNpYW5UeXBlLmFkZCh2MDIsIHYxMiwgdjAyKTsKICAgICAgQ2FydGVzaWFuVHlwZS5hZGQodmFsdWUsIHYyMiwgdmFsdWUpOwogICAgICBpZiAobm9ybWFsaXplKSB7CiAgICAgICAgQ2FydGVzaWFuVHlwZS5ub3JtYWxpemUodmFsdWUsIHZhbHVlKTsKICAgICAgfQogICAgICBDYXJ0ZXNpYW5UeXBlLnBhY2soCiAgICAgICAgdmFsdWUsCiAgICAgICAgY3VycmVudFZhbHVlcywKICAgICAgICBpbnNlcnRlZEluZGV4ICogbnVtYmVyT2ZDb21wb25lbnRzCiAgICAgICk7CiAgICB9OwogIH0KICBmdW5jdGlvbiBjb21wdXRlVHJpYW5nbGVBdHRyaWJ1dGVzKGkwLCBpMSwgaTIsIHBvaW50LCBwb3NpdGlvbnMsIG5vcm1hbHMsIHRhbmdlbnRzLCBiaXRhbmdlbnRzLCB0ZXhDb29yZHMsIGV4dHJ1ZGVEaXJlY3Rpb25zLCBhcHBseU9mZnNldCwgY3VycmVudEF0dHJpYnV0ZXMsIGN1c3RvbUF0dHJpYnV0ZU5hbWVzLCBjdXN0b21BdHRyaWJ1dGVzTGVuZ3RoLCBhbGxBdHRyaWJ1dGVzLCBpbnNlcnRlZEluZGV4KSB7CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChub3JtYWxzKSAmJiAhZGVmaW5lZF9kZWZhdWx0KHRhbmdlbnRzKSAmJiAhZGVmaW5lZF9kZWZhdWx0KGJpdGFuZ2VudHMpICYmICFkZWZpbmVkX2RlZmF1bHQodGV4Q29vcmRzKSAmJiAhZGVmaW5lZF9kZWZhdWx0KGV4dHJ1ZGVEaXJlY3Rpb25zKSAmJiBjdXN0b21BdHRyaWJ1dGVzTGVuZ3RoID09PSAwKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGNvbnN0IHAwID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShwb3NpdGlvbnMsIGkwICogMywgcDBTY3JhdGNoKTsKICAgIGNvbnN0IHAxID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShwb3NpdGlvbnMsIGkxICogMywgcDFTY3JhdGNoKTsKICAgIGNvbnN0IHAyID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShwb3NpdGlvbnMsIGkyICogMywgcDJTY3JhdGNoKTsKICAgIGNvbnN0IGNvb3JkcyA9IGJhcnljZW50cmljQ29vcmRpbmF0ZXNfZGVmYXVsdChwb2ludCwgcDAsIHAxLCBwMiwgYmFyeWNlbnRyaWNTY3JhdGNoKTsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGNvb3JkcykpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgaWYgKGRlZmluZWRfZGVmYXVsdChub3JtYWxzKSkgewogICAgICBpbnRlcnBvbGF0ZUFuZFBhY2tDYXJ0ZXNpYW4zKAogICAgICAgIGkwLAogICAgICAgIGkxLAogICAgICAgIGkyLAogICAgICAgIGNvb3JkcywKICAgICAgICBub3JtYWxzLAogICAgICAgIGN1cnJlbnRBdHRyaWJ1dGVzLm5vcm1hbC52YWx1ZXMsCiAgICAgICAgaW5zZXJ0ZWRJbmRleCwKICAgICAgICB0cnVlCiAgICAgICk7CiAgICB9CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGV4dHJ1ZGVEaXJlY3Rpb25zKSkgewogICAgICBjb25zdCBkMCA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkoZXh0cnVkZURpcmVjdGlvbnMsIGkwICogMywgcDBTY3JhdGNoKTsKICAgICAgY29uc3QgZDEgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KGV4dHJ1ZGVEaXJlY3Rpb25zLCBpMSAqIDMsIHAxU2NyYXRjaCk7CiAgICAgIGNvbnN0IGQyID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShleHRydWRlRGlyZWN0aW9ucywgaTIgKiAzLCBwMlNjcmF0Y2gpOwogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcihkMCwgY29vcmRzLngsIGQwKTsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIoZDEsIGNvb3Jkcy55LCBkMSk7CiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKGQyLCBjb29yZHMueiwgZDIpOwogICAgICBsZXQgZGlyZWN0aW9uMjsKICAgICAgaWYgKCFDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzKGQwLCBDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTykgfHwgIUNhcnRlc2lhbjNfZGVmYXVsdC5lcXVhbHMoZDEsIENhcnRlc2lhbjNfZGVmYXVsdC5aRVJPKSB8fCAhQ2FydGVzaWFuM19kZWZhdWx0LmVxdWFscyhkMiwgQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8pKSB7CiAgICAgICAgZGlyZWN0aW9uMiA9IENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoZDAsIGQxLCBkMCk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChkaXJlY3Rpb24yLCBkMiwgZGlyZWN0aW9uMik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShkaXJlY3Rpb24yLCBkaXJlY3Rpb24yKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBkaXJlY3Rpb24yID0gcDBTY3JhdGNoOwogICAgICAgIGRpcmVjdGlvbjIueCA9IDA7CiAgICAgICAgZGlyZWN0aW9uMi55ID0gMDsKICAgICAgICBkaXJlY3Rpb24yLnogPSAwOwogICAgICB9CiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKAogICAgICAgIGRpcmVjdGlvbjIsCiAgICAgICAgY3VycmVudEF0dHJpYnV0ZXMuZXh0cnVkZURpcmVjdGlvbi52YWx1ZXMsCiAgICAgICAgaW5zZXJ0ZWRJbmRleCAqIDMKICAgICAgKTsKICAgIH0KICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoYXBwbHlPZmZzZXQpKSB7CiAgICAgIGludGVycG9sYXRlQW5kUGFja0Jvb2xlYW4oCiAgICAgICAgaTAsCiAgICAgICAgaTEsCiAgICAgICAgaTIsCiAgICAgICAgY29vcmRzLAogICAgICAgIGFwcGx5T2Zmc2V0LAogICAgICAgIGN1cnJlbnRBdHRyaWJ1dGVzLmFwcGx5T2Zmc2V0LnZhbHVlcywKICAgICAgICBpbnNlcnRlZEluZGV4CiAgICAgICk7CiAgICB9CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHRhbmdlbnRzKSkgewogICAgICBpbnRlcnBvbGF0ZUFuZFBhY2tDYXJ0ZXNpYW4zKAogICAgICAgIGkwLAogICAgICAgIGkxLAogICAgICAgIGkyLAogICAgICAgIGNvb3JkcywKICAgICAgICB0YW5nZW50cywKICAgICAgICBjdXJyZW50QXR0cmlidXRlcy50YW5nZW50LnZhbHVlcywKICAgICAgICBpbnNlcnRlZEluZGV4LAogICAgICAgIHRydWUKICAgICAgKTsKICAgIH0KICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoYml0YW5nZW50cykpIHsKICAgICAgaW50ZXJwb2xhdGVBbmRQYWNrQ2FydGVzaWFuMygKICAgICAgICBpMCwKICAgICAgICBpMSwKICAgICAgICBpMiwKICAgICAgICBjb29yZHMsCiAgICAgICAgYml0YW5nZW50cywKICAgICAgICBjdXJyZW50QXR0cmlidXRlcy5iaXRhbmdlbnQudmFsdWVzLAogICAgICAgIGluc2VydGVkSW5kZXgsCiAgICAgICAgdHJ1ZQogICAgICApOwogICAgfQogICAgaWYgKGRlZmluZWRfZGVmYXVsdCh0ZXhDb29yZHMpKSB7CiAgICAgIGludGVycG9sYXRlQW5kUGFja0NhcnRlc2lhbjIoCiAgICAgICAgaTAsCiAgICAgICAgaTEsCiAgICAgICAgaTIsCiAgICAgICAgY29vcmRzLAogICAgICAgIHRleENvb3JkcywKICAgICAgICBjdXJyZW50QXR0cmlidXRlcy5zdC52YWx1ZXMsCiAgICAgICAgaW5zZXJ0ZWRJbmRleAogICAgICApOwogICAgfQogICAgaWYgKGN1c3RvbUF0dHJpYnV0ZXNMZW5ndGggPiAwKSB7CiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3VzdG9tQXR0cmlidXRlc0xlbmd0aDsgaSsrKSB7CiAgICAgICAgY29uc3QgYXR0cmlidXRlTmFtZSA9IGN1c3RvbUF0dHJpYnV0ZU5hbWVzW2ldOwogICAgICAgIGdlbmVyaWNJbnRlcnBvbGF0ZSgKICAgICAgICAgIGkwLAogICAgICAgICAgaTEsCiAgICAgICAgICBpMiwKICAgICAgICAgIGNvb3JkcywKICAgICAgICAgIGluc2VydGVkSW5kZXgsCiAgICAgICAgICBhbGxBdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdLAogICAgICAgICAgY3VycmVudEF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV0KICAgICAgICApOwogICAgICB9CiAgICB9CiAgfQogIGZ1bmN0aW9uIGdlbmVyaWNJbnRlcnBvbGF0ZShpMCwgaTEsIGkyLCBjb29yZHMsIGluc2VydGVkSW5kZXgsIHNvdXJjZUF0dHJpYnV0ZSwgY3VycmVudEF0dHJpYnV0ZSkgewogICAgY29uc3QgY29tcG9uZW50c1BlckF0dHJpYnV0ZSA9IHNvdXJjZUF0dHJpYnV0ZS5jb21wb25lbnRzUGVyQXR0cmlidXRlOwogICAgY29uc3Qgc291cmNlVmFsdWVzID0gc291cmNlQXR0cmlidXRlLnZhbHVlczsKICAgIGNvbnN0IGN1cnJlbnRWYWx1ZXMgPSBjdXJyZW50QXR0cmlidXRlLnZhbHVlczsKICAgIHN3aXRjaCAoY29tcG9uZW50c1BlckF0dHJpYnV0ZSkgewogICAgICBjYXNlIDQ6CiAgICAgICAgaW50ZXJwb2xhdGVBbmRQYWNrQ2FydGVzaWFuNCgKICAgICAgICAgIGkwLAogICAgICAgICAgaTEsCiAgICAgICAgICBpMiwKICAgICAgICAgIGNvb3JkcywKICAgICAgICAgIHNvdXJjZVZhbHVlcywKICAgICAgICAgIGN1cnJlbnRWYWx1ZXMsCiAgICAgICAgICBpbnNlcnRlZEluZGV4LAogICAgICAgICAgZmFsc2UKICAgICAgICApOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlIDM6CiAgICAgICAgaW50ZXJwb2xhdGVBbmRQYWNrQ2FydGVzaWFuMygKICAgICAgICAgIGkwLAogICAgICAgICAgaTEsCiAgICAgICAgICBpMiwKICAgICAgICAgIGNvb3JkcywKICAgICAgICAgIHNvdXJjZVZhbHVlcywKICAgICAgICAgIGN1cnJlbnRWYWx1ZXMsCiAgICAgICAgICBpbnNlcnRlZEluZGV4LAogICAgICAgICAgZmFsc2UKICAgICAgICApOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlIDI6CiAgICAgICAgaW50ZXJwb2xhdGVBbmRQYWNrQ2FydGVzaWFuMigKICAgICAgICAgIGkwLAogICAgICAgICAgaTEsCiAgICAgICAgICBpMiwKICAgICAgICAgIGNvb3JkcywKICAgICAgICAgIHNvdXJjZVZhbHVlcywKICAgICAgICAgIGN1cnJlbnRWYWx1ZXMsCiAgICAgICAgICBpbnNlcnRlZEluZGV4LAogICAgICAgICAgZmFsc2UKICAgICAgICApOwogICAgICAgIGJyZWFrOwogICAgICBkZWZhdWx0OgogICAgICAgIGN1cnJlbnRWYWx1ZXNbaW5zZXJ0ZWRJbmRleF0gPSBzb3VyY2VWYWx1ZXNbaTBdICogY29vcmRzLnggKyBzb3VyY2VWYWx1ZXNbaTFdICogY29vcmRzLnkgKyBzb3VyY2VWYWx1ZXNbaTJdICogY29vcmRzLno7CiAgICB9CiAgfQogIGZ1bmN0aW9uIGluc2VydFNwbGl0UG9pbnQoY3VycmVudEF0dHJpYnV0ZXMsIGN1cnJlbnRJbmRpY2VzLCBjdXJyZW50SW5kZXhNYXAsIGluZGljZXMsIGN1cnJlbnRJbmRleCwgcG9pbnQpIHsKICAgIGNvbnN0IGluc2VydEluZGV4ID0gY3VycmVudEF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzLmxlbmd0aCAvIDM7CiAgICBpZiAoY3VycmVudEluZGV4ICE9PSAtMSkgewogICAgICBjb25zdCBwcmV2SW5kZXggPSBpbmRpY2VzW2N1cnJlbnRJbmRleF07CiAgICAgIGNvbnN0IG5ld0luZGV4ID0gY3VycmVudEluZGV4TWFwW3ByZXZJbmRleF07CiAgICAgIGlmIChuZXdJbmRleCA9PT0gLTEpIHsKICAgICAgICBjdXJyZW50SW5kZXhNYXBbcHJldkluZGV4XSA9IGluc2VydEluZGV4OwogICAgICAgIGN1cnJlbnRBdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcy5wdXNoKHBvaW50LngsIHBvaW50LnksIHBvaW50LnopOwogICAgICAgIGN1cnJlbnRJbmRpY2VzLnB1c2goaW5zZXJ0SW5kZXgpOwogICAgICAgIHJldHVybiBpbnNlcnRJbmRleDsKICAgICAgfQogICAgICBjdXJyZW50SW5kaWNlcy5wdXNoKG5ld0luZGV4KTsKICAgICAgcmV0dXJuIG5ld0luZGV4OwogICAgfQogICAgY3VycmVudEF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzLnB1c2gocG9pbnQueCwgcG9pbnQueSwgcG9pbnQueik7CiAgICBjdXJyZW50SW5kaWNlcy5wdXNoKGluc2VydEluZGV4KTsKICAgIHJldHVybiBpbnNlcnRJbmRleDsKICB9CiAgZnVuY3Rpb24gc3BsaXRMb25naXR1ZGVUcmlhbmdsZXMoaW5zdGFuY2UpIHsKICAgIGNvbnN0IGdlb21ldHJ5ID0gaW5zdGFuY2UuZ2VvbWV0cnk7CiAgICBjb25zdCBhdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlczsKICAgIGNvbnN0IHBvc2l0aW9ucyA9IGF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzOwogICAgY29uc3Qgbm9ybWFscyA9IGRlZmluZWRfZGVmYXVsdChhdHRyaWJ1dGVzLm5vcm1hbCkgPyBhdHRyaWJ1dGVzLm5vcm1hbC52YWx1ZXMgOiB2b2lkIDA7CiAgICBjb25zdCBiaXRhbmdlbnRzID0gZGVmaW5lZF9kZWZhdWx0KGF0dHJpYnV0ZXMuYml0YW5nZW50KSA/IGF0dHJpYnV0ZXMuYml0YW5nZW50LnZhbHVlcyA6IHZvaWQgMDsKICAgIGNvbnN0IHRhbmdlbnRzID0gZGVmaW5lZF9kZWZhdWx0KGF0dHJpYnV0ZXMudGFuZ2VudCkgPyBhdHRyaWJ1dGVzLnRhbmdlbnQudmFsdWVzIDogdm9pZCAwOwogICAgY29uc3QgdGV4Q29vcmRzID0gZGVmaW5lZF9kZWZhdWx0KGF0dHJpYnV0ZXMuc3QpID8gYXR0cmlidXRlcy5zdC52YWx1ZXMgOiB2b2lkIDA7CiAgICBjb25zdCBleHRydWRlRGlyZWN0aW9ucyA9IGRlZmluZWRfZGVmYXVsdChhdHRyaWJ1dGVzLmV4dHJ1ZGVEaXJlY3Rpb24pID8gYXR0cmlidXRlcy5leHRydWRlRGlyZWN0aW9uLnZhbHVlcyA6IHZvaWQgMDsKICAgIGNvbnN0IGFwcGx5T2Zmc2V0ID0gZGVmaW5lZF9kZWZhdWx0KGF0dHJpYnV0ZXMuYXBwbHlPZmZzZXQpID8gYXR0cmlidXRlcy5hcHBseU9mZnNldC52YWx1ZXMgOiB2b2lkIDA7CiAgICBjb25zdCBpbmRpY2VzID0gZ2VvbWV0cnkuaW5kaWNlczsKICAgIGNvbnN0IGN1c3RvbUF0dHJpYnV0ZU5hbWVzID0gW107CiAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZU5hbWUgaW4gYXR0cmlidXRlcykgewogICAgICBpZiAoYXR0cmlidXRlcy5oYXNPd25Qcm9wZXJ0eShhdHRyaWJ1dGVOYW1lKSAmJiAhTkFNRURfQVRUUklCVVRFU1thdHRyaWJ1dGVOYW1lXSAmJiBkZWZpbmVkX2RlZmF1bHQoYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXSkpIHsKICAgICAgICBjdXN0b21BdHRyaWJ1dGVOYW1lcy5wdXNoKGF0dHJpYnV0ZU5hbWUpOwogICAgICB9CiAgICB9CiAgICBjb25zdCBjdXN0b21BdHRyaWJ1dGVzTGVuZ3RoID0gY3VzdG9tQXR0cmlidXRlTmFtZXMubGVuZ3RoOwogICAgY29uc3QgZWFzdEdlb21ldHJ5ID0gY29weUdlb21ldHJ5Rm9yU3BsaXQoZ2VvbWV0cnkpOwogICAgY29uc3Qgd2VzdEdlb21ldHJ5ID0gY29weUdlb21ldHJ5Rm9yU3BsaXQoZ2VvbWV0cnkpOwogICAgbGV0IGN1cnJlbnRBdHRyaWJ1dGVzOwogICAgbGV0IGN1cnJlbnRJbmRpY2VzOwogICAgbGV0IGN1cnJlbnRJbmRleE1hcDsKICAgIGxldCBpbnNlcnRlZEluZGV4OwogICAgbGV0IGk7CiAgICBjb25zdCB3ZXN0R2VvbWV0cnlJbmRleE1hcCA9IFtdOwogICAgd2VzdEdlb21ldHJ5SW5kZXhNYXAubGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aCAvIDM7CiAgICBjb25zdCBlYXN0R2VvbWV0cnlJbmRleE1hcCA9IFtdOwogICAgZWFzdEdlb21ldHJ5SW5kZXhNYXAubGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aCAvIDM7CiAgICBmb3IgKGkgPSAwOyBpIDwgd2VzdEdlb21ldHJ5SW5kZXhNYXAubGVuZ3RoOyArK2kpIHsKICAgICAgd2VzdEdlb21ldHJ5SW5kZXhNYXBbaV0gPSAtMTsKICAgICAgZWFzdEdlb21ldHJ5SW5kZXhNYXBbaV0gPSAtMTsKICAgIH0KICAgIGNvbnN0IGxlbiA9IGluZGljZXMubGVuZ3RoOwogICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAzKSB7CiAgICAgIGNvbnN0IGkwID0gaW5kaWNlc1tpXTsKICAgICAgY29uc3QgaTEgPSBpbmRpY2VzW2kgKyAxXTsKICAgICAgY29uc3QgaTIgPSBpbmRpY2VzW2kgKyAyXTsKICAgICAgbGV0IHAwID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShwb3NpdGlvbnMsIGkwICogMyk7CiAgICAgIGxldCBwMSA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkocG9zaXRpb25zLCBpMSAqIDMpOwogICAgICBsZXQgcDIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KHBvc2l0aW9ucywgaTIgKiAzKTsKICAgICAgY29uc3QgcmVzdWx0ID0gc3BsaXRUcmlhbmdsZShwMCwgcDEsIHAyKTsKICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChyZXN1bHQpICYmIHJlc3VsdC5wb3NpdGlvbnMubGVuZ3RoID4gMykgewogICAgICAgIGNvbnN0IHJlc3VsdFBvc2l0aW9ucyA9IHJlc3VsdC5wb3NpdGlvbnM7CiAgICAgICAgY29uc3QgcmVzdWx0SW5kaWNlcyA9IHJlc3VsdC5pbmRpY2VzOwogICAgICAgIGNvbnN0IHJlc3VsdExlbmd0aCA9IHJlc3VsdEluZGljZXMubGVuZ3RoOwogICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgcmVzdWx0TGVuZ3RoOyArK2opIHsKICAgICAgICAgIGNvbnN0IHJlc3VsdEluZGV4ID0gcmVzdWx0SW5kaWNlc1tqXTsKICAgICAgICAgIGNvbnN0IHBvaW50ID0gcmVzdWx0UG9zaXRpb25zW3Jlc3VsdEluZGV4XTsKICAgICAgICAgIGlmIChwb2ludC55IDwgMCkgewogICAgICAgICAgICBjdXJyZW50QXR0cmlidXRlcyA9IHdlc3RHZW9tZXRyeS5hdHRyaWJ1dGVzOwogICAgICAgICAgICBjdXJyZW50SW5kaWNlcyA9IHdlc3RHZW9tZXRyeS5pbmRpY2VzOwogICAgICAgICAgICBjdXJyZW50SW5kZXhNYXAgPSB3ZXN0R2VvbWV0cnlJbmRleE1hcDsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGN1cnJlbnRBdHRyaWJ1dGVzID0gZWFzdEdlb21ldHJ5LmF0dHJpYnV0ZXM7CiAgICAgICAgICAgIGN1cnJlbnRJbmRpY2VzID0gZWFzdEdlb21ldHJ5LmluZGljZXM7CiAgICAgICAgICAgIGN1cnJlbnRJbmRleE1hcCA9IGVhc3RHZW9tZXRyeUluZGV4TWFwOwogICAgICAgICAgfQogICAgICAgICAgaW5zZXJ0ZWRJbmRleCA9IGluc2VydFNwbGl0UG9pbnQoCiAgICAgICAgICAgIGN1cnJlbnRBdHRyaWJ1dGVzLAogICAgICAgICAgICBjdXJyZW50SW5kaWNlcywKICAgICAgICAgICAgY3VycmVudEluZGV4TWFwLAogICAgICAgICAgICBpbmRpY2VzLAogICAgICAgICAgICByZXN1bHRJbmRleCA8IDMgPyBpICsgcmVzdWx0SW5kZXggOiAtMSwKICAgICAgICAgICAgcG9pbnQKICAgICAgICAgICk7CiAgICAgICAgICBjb21wdXRlVHJpYW5nbGVBdHRyaWJ1dGVzKAogICAgICAgICAgICBpMCwKICAgICAgICAgICAgaTEsCiAgICAgICAgICAgIGkyLAogICAgICAgICAgICBwb2ludCwKICAgICAgICAgICAgcG9zaXRpb25zLAogICAgICAgICAgICBub3JtYWxzLAogICAgICAgICAgICB0YW5nZW50cywKICAgICAgICAgICAgYml0YW5nZW50cywKICAgICAgICAgICAgdGV4Q29vcmRzLAogICAgICAgICAgICBleHRydWRlRGlyZWN0aW9ucywKICAgICAgICAgICAgYXBwbHlPZmZzZXQsCiAgICAgICAgICAgIGN1cnJlbnRBdHRyaWJ1dGVzLAogICAgICAgICAgICBjdXN0b21BdHRyaWJ1dGVOYW1lcywKICAgICAgICAgICAgY3VzdG9tQXR0cmlidXRlc0xlbmd0aCwKICAgICAgICAgICAgYXR0cmlidXRlcywKICAgICAgICAgICAgaW5zZXJ0ZWRJbmRleAogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICBwMCA9IHJlc3VsdC5wb3NpdGlvbnNbMF07CiAgICAgICAgICBwMSA9IHJlc3VsdC5wb3NpdGlvbnNbMV07CiAgICAgICAgICBwMiA9IHJlc3VsdC5wb3NpdGlvbnNbMl07CiAgICAgICAgfQogICAgICAgIGlmIChwMC55IDwgMCkgewogICAgICAgICAgY3VycmVudEF0dHJpYnV0ZXMgPSB3ZXN0R2VvbWV0cnkuYXR0cmlidXRlczsKICAgICAgICAgIGN1cnJlbnRJbmRpY2VzID0gd2VzdEdlb21ldHJ5LmluZGljZXM7CiAgICAgICAgICBjdXJyZW50SW5kZXhNYXAgPSB3ZXN0R2VvbWV0cnlJbmRleE1hcDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY3VycmVudEF0dHJpYnV0ZXMgPSBlYXN0R2VvbWV0cnkuYXR0cmlidXRlczsKICAgICAgICAgIGN1cnJlbnRJbmRpY2VzID0gZWFzdEdlb21ldHJ5LmluZGljZXM7CiAgICAgICAgICBjdXJyZW50SW5kZXhNYXAgPSBlYXN0R2VvbWV0cnlJbmRleE1hcDsKICAgICAgICB9CiAgICAgICAgaW5zZXJ0ZWRJbmRleCA9IGluc2VydFNwbGl0UG9pbnQoCiAgICAgICAgICBjdXJyZW50QXR0cmlidXRlcywKICAgICAgICAgIGN1cnJlbnRJbmRpY2VzLAogICAgICAgICAgY3VycmVudEluZGV4TWFwLAogICAgICAgICAgaW5kaWNlcywKICAgICAgICAgIGksCiAgICAgICAgICBwMAogICAgICAgICk7CiAgICAgICAgY29tcHV0ZVRyaWFuZ2xlQXR0cmlidXRlcygKICAgICAgICAgIGkwLAogICAgICAgICAgaTEsCiAgICAgICAgICBpMiwKICAgICAgICAgIHAwLAogICAgICAgICAgcG9zaXRpb25zLAogICAgICAgICAgbm9ybWFscywKICAgICAgICAgIHRhbmdlbnRzLAogICAgICAgICAgYml0YW5nZW50cywKICAgICAgICAgIHRleENvb3JkcywKICAgICAgICAgIGV4dHJ1ZGVEaXJlY3Rpb25zLAogICAgICAgICAgYXBwbHlPZmZzZXQsCiAgICAgICAgICBjdXJyZW50QXR0cmlidXRlcywKICAgICAgICAgIGN1c3RvbUF0dHJpYnV0ZU5hbWVzLAogICAgICAgICAgY3VzdG9tQXR0cmlidXRlc0xlbmd0aCwKICAgICAgICAgIGF0dHJpYnV0ZXMsCiAgICAgICAgICBpbnNlcnRlZEluZGV4CiAgICAgICAgKTsKICAgICAgICBpbnNlcnRlZEluZGV4ID0gaW5zZXJ0U3BsaXRQb2ludCgKICAgICAgICAgIGN1cnJlbnRBdHRyaWJ1dGVzLAogICAgICAgICAgY3VycmVudEluZGljZXMsCiAgICAgICAgICBjdXJyZW50SW5kZXhNYXAsCiAgICAgICAgICBpbmRpY2VzLAogICAgICAgICAgaSArIDEsCiAgICAgICAgICBwMQogICAgICAgICk7CiAgICAgICAgY29tcHV0ZVRyaWFuZ2xlQXR0cmlidXRlcygKICAgICAgICAgIGkwLAogICAgICAgICAgaTEsCiAgICAgICAgICBpMiwKICAgICAgICAgIHAxLAogICAgICAgICAgcG9zaXRpb25zLAogICAgICAgICAgbm9ybWFscywKICAgICAgICAgIHRhbmdlbnRzLAogICAgICAgICAgYml0YW5nZW50cywKICAgICAgICAgIHRleENvb3JkcywKICAgICAgICAgIGV4dHJ1ZGVEaXJlY3Rpb25zLAogICAgICAgICAgYXBwbHlPZmZzZXQsCiAgICAgICAgICBjdXJyZW50QXR0cmlidXRlcywKICAgICAgICAgIGN1c3RvbUF0dHJpYnV0ZU5hbWVzLAogICAgICAgICAgY3VzdG9tQXR0cmlidXRlc0xlbmd0aCwKICAgICAgICAgIGF0dHJpYnV0ZXMsCiAgICAgICAgICBpbnNlcnRlZEluZGV4CiAgICAgICAgKTsKICAgICAgICBpbnNlcnRlZEluZGV4ID0gaW5zZXJ0U3BsaXRQb2ludCgKICAgICAgICAgIGN1cnJlbnRBdHRyaWJ1dGVzLAogICAgICAgICAgY3VycmVudEluZGljZXMsCiAgICAgICAgICBjdXJyZW50SW5kZXhNYXAsCiAgICAgICAgICBpbmRpY2VzLAogICAgICAgICAgaSArIDIsCiAgICAgICAgICBwMgogICAgICAgICk7CiAgICAgICAgY29tcHV0ZVRyaWFuZ2xlQXR0cmlidXRlcygKICAgICAgICAgIGkwLAogICAgICAgICAgaTEsCiAgICAgICAgICBpMiwKICAgICAgICAgIHAyLAogICAgICAgICAgcG9zaXRpb25zLAogICAgICAgICAgbm9ybWFscywKICAgICAgICAgIHRhbmdlbnRzLAogICAgICAgICAgYml0YW5nZW50cywKICAgICAgICAgIHRleENvb3JkcywKICAgICAgICAgIGV4dHJ1ZGVEaXJlY3Rpb25zLAogICAgICAgICAgYXBwbHlPZmZzZXQsCiAgICAgICAgICBjdXJyZW50QXR0cmlidXRlcywKICAgICAgICAgIGN1c3RvbUF0dHJpYnV0ZU5hbWVzLAogICAgICAgICAgY3VzdG9tQXR0cmlidXRlc0xlbmd0aCwKICAgICAgICAgIGF0dHJpYnV0ZXMsCiAgICAgICAgICBpbnNlcnRlZEluZGV4CiAgICAgICAgKTsKICAgICAgfQogICAgfQogICAgdXBkYXRlSW5zdGFuY2VBZnRlclNwbGl0KGluc3RhbmNlLCB3ZXN0R2VvbWV0cnksIGVhc3RHZW9tZXRyeSk7CiAgfQogIGZ1bmN0aW9uIGNvbXB1dGVMaW5lQXR0cmlidXRlcyhpMCwgaTEsIHBvaW50LCBwb3NpdGlvbnMsIGluc2VydEluZGV4LCBjdXJyZW50QXR0cmlidXRlcywgYXBwbHlPZmZzZXQpIHsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGFwcGx5T2Zmc2V0KSkgewogICAgICByZXR1cm47CiAgICB9CiAgICBjb25zdCBwMCA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkocG9zaXRpb25zLCBpMCAqIDMsIHAwU2NyYXRjaCk7CiAgICBpZiAoQ2FydGVzaWFuM19kZWZhdWx0LmVxdWFsc0Vwc2lsb24ocDAsIHBvaW50LCBNYXRoX2RlZmF1bHQuRVBTSUxPTjEwKSkgewogICAgICBjdXJyZW50QXR0cmlidXRlcy5hcHBseU9mZnNldC52YWx1ZXNbaW5zZXJ0SW5kZXhdID0gYXBwbHlPZmZzZXRbaTBdOwogICAgfSBlbHNlIHsKICAgICAgY3VycmVudEF0dHJpYnV0ZXMuYXBwbHlPZmZzZXQudmFsdWVzW2luc2VydEluZGV4XSA9IGFwcGx5T2Zmc2V0W2kxXTsKICAgIH0KICB9CiAgZnVuY3Rpb24gc3BsaXRMb25naXR1ZGVMaW5lcyhpbnN0YW5jZSkgewogICAgY29uc3QgZ2VvbWV0cnkgPSBpbnN0YW5jZS5nZW9tZXRyeTsKICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzOwogICAgY29uc3QgcG9zaXRpb25zID0gYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXM7CiAgICBjb25zdCBhcHBseU9mZnNldCA9IGRlZmluZWRfZGVmYXVsdChhdHRyaWJ1dGVzLmFwcGx5T2Zmc2V0KSA/IGF0dHJpYnV0ZXMuYXBwbHlPZmZzZXQudmFsdWVzIDogdm9pZCAwOwogICAgY29uc3QgaW5kaWNlcyA9IGdlb21ldHJ5LmluZGljZXM7CiAgICBjb25zdCBlYXN0R2VvbWV0cnkgPSBjb3B5R2VvbWV0cnlGb3JTcGxpdChnZW9tZXRyeSk7CiAgICBjb25zdCB3ZXN0R2VvbWV0cnkgPSBjb3B5R2VvbWV0cnlGb3JTcGxpdChnZW9tZXRyeSk7CiAgICBsZXQgaTsKICAgIGNvbnN0IGxlbmd0aCA9IGluZGljZXMubGVuZ3RoOwogICAgY29uc3Qgd2VzdEdlb21ldHJ5SW5kZXhNYXAgPSBbXTsKICAgIHdlc3RHZW9tZXRyeUluZGV4TWFwLmxlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGggLyAzOwogICAgY29uc3QgZWFzdEdlb21ldHJ5SW5kZXhNYXAgPSBbXTsKICAgIGVhc3RHZW9tZXRyeUluZGV4TWFwLmxlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGggLyAzOwogICAgZm9yIChpID0gMDsgaSA8IHdlc3RHZW9tZXRyeUluZGV4TWFwLmxlbmd0aDsgKytpKSB7CiAgICAgIHdlc3RHZW9tZXRyeUluZGV4TWFwW2ldID0gLTE7CiAgICAgIGVhc3RHZW9tZXRyeUluZGV4TWFwW2ldID0gLTE7CiAgICB9CiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDIpIHsKICAgICAgY29uc3QgaTAgPSBpbmRpY2VzW2ldOwogICAgICBjb25zdCBpMSA9IGluZGljZXNbaSArIDFdOwogICAgICBjb25zdCBwMCA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkocG9zaXRpb25zLCBpMCAqIDMsIHAwU2NyYXRjaCk7CiAgICAgIGNvbnN0IHAxID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShwb3NpdGlvbnMsIGkxICogMywgcDFTY3JhdGNoKTsKICAgICAgbGV0IGluc2VydEluZGV4OwogICAgICBpZiAoTWF0aC5hYnMocDAueSkgPCBNYXRoX2RlZmF1bHQuRVBTSUxPTjYpIHsKICAgICAgICBpZiAocDAueSA8IDApIHsKICAgICAgICAgIHAwLnkgPSAtTWF0aF9kZWZhdWx0LkVQU0lMT042OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBwMC55ID0gTWF0aF9kZWZhdWx0LkVQU0lMT042OwogICAgICAgIH0KICAgICAgfQogICAgICBpZiAoTWF0aC5hYnMocDEueSkgPCBNYXRoX2RlZmF1bHQuRVBTSUxPTjYpIHsKICAgICAgICBpZiAocDEueSA8IDApIHsKICAgICAgICAgIHAxLnkgPSAtTWF0aF9kZWZhdWx0LkVQU0lMT042OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBwMS55ID0gTWF0aF9kZWZhdWx0LkVQU0lMT042OwogICAgICAgIH0KICAgICAgfQogICAgICBsZXQgcDBBdHRyaWJ1dGVzID0gZWFzdEdlb21ldHJ5LmF0dHJpYnV0ZXM7CiAgICAgIGxldCBwMEluZGljZXMgPSBlYXN0R2VvbWV0cnkuaW5kaWNlczsKICAgICAgbGV0IHAwSW5kZXhNYXAgPSBlYXN0R2VvbWV0cnlJbmRleE1hcDsKICAgICAgbGV0IHAxQXR0cmlidXRlcyA9IHdlc3RHZW9tZXRyeS5hdHRyaWJ1dGVzOwogICAgICBsZXQgcDFJbmRpY2VzID0gd2VzdEdlb21ldHJ5LmluZGljZXM7CiAgICAgIGxldCBwMUluZGV4TWFwID0gd2VzdEdlb21ldHJ5SW5kZXhNYXA7CiAgICAgIGNvbnN0IGludGVyc2VjdGlvbiA9IEludGVyc2VjdGlvblRlc3RzX2RlZmF1bHQubGluZVNlZ21lbnRQbGFuZSgKICAgICAgICBwMCwKICAgICAgICBwMSwKICAgICAgICB4elBsYW5lLAogICAgICAgIHAyU2NyYXRjaAogICAgICApOwogICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGludGVyc2VjdGlvbikpIHsKICAgICAgICBjb25zdCBvZmZzZXQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcigKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5VTklUX1ksCiAgICAgICAgICA1ICogTWF0aF9kZWZhdWx0LkVQU0lMT045LAogICAgICAgICAgb2Zmc2V0U2NyYXRjaAogICAgICAgICk7CiAgICAgICAgaWYgKHAwLnkgPCAwKSB7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubmVnYXRlKG9mZnNldCwgb2Zmc2V0KTsKICAgICAgICAgIHAwQXR0cmlidXRlcyA9IHdlc3RHZW9tZXRyeS5hdHRyaWJ1dGVzOwogICAgICAgICAgcDBJbmRpY2VzID0gd2VzdEdlb21ldHJ5LmluZGljZXM7CiAgICAgICAgICBwMEluZGV4TWFwID0gd2VzdEdlb21ldHJ5SW5kZXhNYXA7CiAgICAgICAgICBwMUF0dHJpYnV0ZXMgPSBlYXN0R2VvbWV0cnkuYXR0cmlidXRlczsKICAgICAgICAgIHAxSW5kaWNlcyA9IGVhc3RHZW9tZXRyeS5pbmRpY2VzOwogICAgICAgICAgcDFJbmRleE1hcCA9IGVhc3RHZW9tZXRyeUluZGV4TWFwOwogICAgICAgIH0KICAgICAgICBjb25zdCBvZmZzZXRQb2ludCA9IENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoCiAgICAgICAgICBpbnRlcnNlY3Rpb24sCiAgICAgICAgICBvZmZzZXQsCiAgICAgICAgICBvZmZzZXRQb2ludFNjcmF0Y2gKICAgICAgICApOwogICAgICAgIGluc2VydEluZGV4ID0gaW5zZXJ0U3BsaXRQb2ludCgKICAgICAgICAgIHAwQXR0cmlidXRlcywKICAgICAgICAgIHAwSW5kaWNlcywKICAgICAgICAgIHAwSW5kZXhNYXAsCiAgICAgICAgICBpbmRpY2VzLAogICAgICAgICAgaSwKICAgICAgICAgIHAwCiAgICAgICAgKTsKICAgICAgICBjb21wdXRlTGluZUF0dHJpYnV0ZXMoCiAgICAgICAgICBpMCwKICAgICAgICAgIGkxLAogICAgICAgICAgcDAsCiAgICAgICAgICBwb3NpdGlvbnMsCiAgICAgICAgICBpbnNlcnRJbmRleCwKICAgICAgICAgIHAwQXR0cmlidXRlcywKICAgICAgICAgIGFwcGx5T2Zmc2V0CiAgICAgICAgKTsKICAgICAgICBpbnNlcnRJbmRleCA9IGluc2VydFNwbGl0UG9pbnQoCiAgICAgICAgICBwMEF0dHJpYnV0ZXMsCiAgICAgICAgICBwMEluZGljZXMsCiAgICAgICAgICBwMEluZGV4TWFwLAogICAgICAgICAgaW5kaWNlcywKICAgICAgICAgIC0xLAogICAgICAgICAgb2Zmc2V0UG9pbnQKICAgICAgICApOwogICAgICAgIGNvbXB1dGVMaW5lQXR0cmlidXRlcygKICAgICAgICAgIGkwLAogICAgICAgICAgaTEsCiAgICAgICAgICBvZmZzZXRQb2ludCwKICAgICAgICAgIHBvc2l0aW9ucywKICAgICAgICAgIGluc2VydEluZGV4LAogICAgICAgICAgcDBBdHRyaWJ1dGVzLAogICAgICAgICAgYXBwbHlPZmZzZXQKICAgICAgICApOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5uZWdhdGUob2Zmc2V0LCBvZmZzZXQpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoaW50ZXJzZWN0aW9uLCBvZmZzZXQsIG9mZnNldFBvaW50KTsKICAgICAgICBpbnNlcnRJbmRleCA9IGluc2VydFNwbGl0UG9pbnQoCiAgICAgICAgICBwMUF0dHJpYnV0ZXMsCiAgICAgICAgICBwMUluZGljZXMsCiAgICAgICAgICBwMUluZGV4TWFwLAogICAgICAgICAgaW5kaWNlcywKICAgICAgICAgIC0xLAogICAgICAgICAgb2Zmc2V0UG9pbnQKICAgICAgICApOwogICAgICAgIGNvbXB1dGVMaW5lQXR0cmlidXRlcygKICAgICAgICAgIGkwLAogICAgICAgICAgaTEsCiAgICAgICAgICBvZmZzZXRQb2ludCwKICAgICAgICAgIHBvc2l0aW9ucywKICAgICAgICAgIGluc2VydEluZGV4LAogICAgICAgICAgcDFBdHRyaWJ1dGVzLAogICAgICAgICAgYXBwbHlPZmZzZXQKICAgICAgICApOwogICAgICAgIGluc2VydEluZGV4ID0gaW5zZXJ0U3BsaXRQb2ludCgKICAgICAgICAgIHAxQXR0cmlidXRlcywKICAgICAgICAgIHAxSW5kaWNlcywKICAgICAgICAgIHAxSW5kZXhNYXAsCiAgICAgICAgICBpbmRpY2VzLAogICAgICAgICAgaSArIDEsCiAgICAgICAgICBwMQogICAgICAgICk7CiAgICAgICAgY29tcHV0ZUxpbmVBdHRyaWJ1dGVzKAogICAgICAgICAgaTAsCiAgICAgICAgICBpMSwKICAgICAgICAgIHAxLAogICAgICAgICAgcG9zaXRpb25zLAogICAgICAgICAgaW5zZXJ0SW5kZXgsCiAgICAgICAgICBwMUF0dHJpYnV0ZXMsCiAgICAgICAgICBhcHBseU9mZnNldAogICAgICAgICk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgbGV0IGN1cnJlbnRBdHRyaWJ1dGVzOwogICAgICAgIGxldCBjdXJyZW50SW5kaWNlczsKICAgICAgICBsZXQgY3VycmVudEluZGV4TWFwOwogICAgICAgIGlmIChwMC55IDwgMCkgewogICAgICAgICAgY3VycmVudEF0dHJpYnV0ZXMgPSB3ZXN0R2VvbWV0cnkuYXR0cmlidXRlczsKICAgICAgICAgIGN1cnJlbnRJbmRpY2VzID0gd2VzdEdlb21ldHJ5LmluZGljZXM7CiAgICAgICAgICBjdXJyZW50SW5kZXhNYXAgPSB3ZXN0R2VvbWV0cnlJbmRleE1hcDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY3VycmVudEF0dHJpYnV0ZXMgPSBlYXN0R2VvbWV0cnkuYXR0cmlidXRlczsKICAgICAgICAgIGN1cnJlbnRJbmRpY2VzID0gZWFzdEdlb21ldHJ5LmluZGljZXM7CiAgICAgICAgICBjdXJyZW50SW5kZXhNYXAgPSBlYXN0R2VvbWV0cnlJbmRleE1hcDsKICAgICAgICB9CiAgICAgICAgaW5zZXJ0SW5kZXggPSBpbnNlcnRTcGxpdFBvaW50KAogICAgICAgICAgY3VycmVudEF0dHJpYnV0ZXMsCiAgICAgICAgICBjdXJyZW50SW5kaWNlcywKICAgICAgICAgIGN1cnJlbnRJbmRleE1hcCwKICAgICAgICAgIGluZGljZXMsCiAgICAgICAgICBpLAogICAgICAgICAgcDAKICAgICAgICApOwogICAgICAgIGNvbXB1dGVMaW5lQXR0cmlidXRlcygKICAgICAgICAgIGkwLAogICAgICAgICAgaTEsCiAgICAgICAgICBwMCwKICAgICAgICAgIHBvc2l0aW9ucywKICAgICAgICAgIGluc2VydEluZGV4LAogICAgICAgICAgY3VycmVudEF0dHJpYnV0ZXMsCiAgICAgICAgICBhcHBseU9mZnNldAogICAgICAgICk7CiAgICAgICAgaW5zZXJ0SW5kZXggPSBpbnNlcnRTcGxpdFBvaW50KAogICAgICAgICAgY3VycmVudEF0dHJpYnV0ZXMsCiAgICAgICAgICBjdXJyZW50SW5kaWNlcywKICAgICAgICAgIGN1cnJlbnRJbmRleE1hcCwKICAgICAgICAgIGluZGljZXMsCiAgICAgICAgICBpICsgMSwKICAgICAgICAgIHAxCiAgICAgICAgKTsKICAgICAgICBjb21wdXRlTGluZUF0dHJpYnV0ZXMoCiAgICAgICAgICBpMCwKICAgICAgICAgIGkxLAogICAgICAgICAgcDEsCiAgICAgICAgICBwb3NpdGlvbnMsCiAgICAgICAgICBpbnNlcnRJbmRleCwKICAgICAgICAgIGN1cnJlbnRBdHRyaWJ1dGVzLAogICAgICAgICAgYXBwbHlPZmZzZXQKICAgICAgICApOwogICAgICB9CiAgICB9CiAgICB1cGRhdGVJbnN0YW5jZUFmdGVyU3BsaXQoaW5zdGFuY2UsIHdlc3RHZW9tZXRyeSwgZWFzdEdlb21ldHJ5KTsKICB9CiAgZnVuY3Rpb24gdXBkYXRlQWRqYWNlbmN5QWZ0ZXJTcGxpdChnZW9tZXRyeSkgewogICAgY29uc3QgYXR0cmlidXRlcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXM7CiAgICBjb25zdCBwb3NpdGlvbnMgPSBhdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlczsKICAgIGNvbnN0IHByZXZQb3NpdGlvbnMgPSBhdHRyaWJ1dGVzLnByZXZQb3NpdGlvbi52YWx1ZXM7CiAgICBjb25zdCBuZXh0UG9zaXRpb25zID0gYXR0cmlidXRlcy5uZXh0UG9zaXRpb24udmFsdWVzOwogICAgY29uc3QgbGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aDsKICAgIGZvciAobGV0IGogPSAwOyBqIDwgbGVuZ3RoOyBqICs9IDMpIHsKICAgICAgY29uc3QgcG9zaXRpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKHBvc2l0aW9ucywgaiwgY2FydGVzaWFuM1NjcmF0Y2gwKTsKICAgICAgaWYgKHBvc2l0aW9uLnggPiAwKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgY29uc3QgcHJldlBvc2l0aW9uID0gQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjaygKICAgICAgICBwcmV2UG9zaXRpb25zLAogICAgICAgIGosCiAgICAgICAgY2FydGVzaWFuM1NjcmF0Y2gyCiAgICAgICk7CiAgICAgIGlmIChwb3NpdGlvbi55IDwgMCAmJiBwcmV2UG9zaXRpb24ueSA+IDAgfHwgcG9zaXRpb24ueSA+IDAgJiYgcHJldlBvc2l0aW9uLnkgPCAwKSB7CiAgICAgICAgaWYgKGogLSAzID4gMCkgewogICAgICAgICAgcHJldlBvc2l0aW9uc1tqXSA9IHBvc2l0aW9uc1tqIC0gM107CiAgICAgICAgICBwcmV2UG9zaXRpb25zW2ogKyAxXSA9IHBvc2l0aW9uc1tqIC0gMl07CiAgICAgICAgICBwcmV2UG9zaXRpb25zW2ogKyAyXSA9IHBvc2l0aW9uc1tqIC0gMV07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKHBvc2l0aW9uLCBwcmV2UG9zaXRpb25zLCBqKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgY29uc3QgbmV4dFBvc2l0aW9uID0gQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjaygKICAgICAgICBuZXh0UG9zaXRpb25zLAogICAgICAgIGosCiAgICAgICAgY2FydGVzaWFuM1NjcmF0Y2gzCiAgICAgICk7CiAgICAgIGlmIChwb3NpdGlvbi55IDwgMCAmJiBuZXh0UG9zaXRpb24ueSA+IDAgfHwgcG9zaXRpb24ueSA+IDAgJiYgbmV4dFBvc2l0aW9uLnkgPCAwKSB7CiAgICAgICAgaWYgKGogKyAzIDwgbGVuZ3RoKSB7CiAgICAgICAgICBuZXh0UG9zaXRpb25zW2pdID0gcG9zaXRpb25zW2ogKyAzXTsKICAgICAgICAgIG5leHRQb3NpdGlvbnNbaiArIDFdID0gcG9zaXRpb25zW2ogKyA0XTsKICAgICAgICAgIG5leHRQb3NpdGlvbnNbaiArIDJdID0gcG9zaXRpb25zW2ogKyA1XTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2socG9zaXRpb24sIG5leHRQb3NpdGlvbnMsIGopOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KICBmdW5jdGlvbiBzcGxpdExvbmdpdHVkZVBvbHlsaW5lKGluc3RhbmNlKSB7CiAgICBjb25zdCBnZW9tZXRyeSA9IGluc3RhbmNlLmdlb21ldHJ5OwogICAgY29uc3QgYXR0cmlidXRlcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXM7CiAgICBjb25zdCBwb3NpdGlvbnMgPSBhdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlczsKICAgIGNvbnN0IHByZXZQb3NpdGlvbnMgPSBhdHRyaWJ1dGVzLnByZXZQb3NpdGlvbi52YWx1ZXM7CiAgICBjb25zdCBuZXh0UG9zaXRpb25zID0gYXR0cmlidXRlcy5uZXh0UG9zaXRpb24udmFsdWVzOwogICAgY29uc3QgZXhwYW5kQW5kV2lkdGhzID0gYXR0cmlidXRlcy5leHBhbmRBbmRXaWR0aC52YWx1ZXM7CiAgICBjb25zdCB0ZXhDb29yZHMgPSBkZWZpbmVkX2RlZmF1bHQoYXR0cmlidXRlcy5zdCkgPyBhdHRyaWJ1dGVzLnN0LnZhbHVlcyA6IHZvaWQgMDsKICAgIGNvbnN0IGNvbG9ycyA9IGRlZmluZWRfZGVmYXVsdChhdHRyaWJ1dGVzLmNvbG9yKSA/IGF0dHJpYnV0ZXMuY29sb3IudmFsdWVzIDogdm9pZCAwOwogICAgY29uc3QgZWFzdEdlb21ldHJ5ID0gY29weUdlb21ldHJ5Rm9yU3BsaXQoZ2VvbWV0cnkpOwogICAgY29uc3Qgd2VzdEdlb21ldHJ5ID0gY29weUdlb21ldHJ5Rm9yU3BsaXQoZ2VvbWV0cnkpOwogICAgbGV0IGk7CiAgICBsZXQgajsKICAgIGxldCBpbmRleDsKICAgIGxldCBpbnRlcnNlY3Rpb25Gb3VuZCA9IGZhbHNlOwogICAgY29uc3QgbGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aCAvIDM7CiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDQpIHsKICAgICAgY29uc3QgaTAgPSBpOwogICAgICBjb25zdCBpMiA9IGkgKyAyOwogICAgICBjb25zdCBwMCA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkocG9zaXRpb25zLCBpMCAqIDMsIGNhcnRlc2lhbjNTY3JhdGNoMCk7CiAgICAgIGNvbnN0IHAyID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShwb3NpdGlvbnMsIGkyICogMywgY2FydGVzaWFuM1NjcmF0Y2gyKTsKICAgICAgaWYgKE1hdGguYWJzKHAwLnkpIDwgY29wbGFuYXJPZmZzZXQpIHsKICAgICAgICBwMC55ID0gY29wbGFuYXJPZmZzZXQgKiAocDIueSA8IDAgPyAtMSA6IDEpOwogICAgICAgIHBvc2l0aW9uc1tpICogMyArIDFdID0gcDAueTsKICAgICAgICBwb3NpdGlvbnNbKGkgKyAxKSAqIDMgKyAxXSA9IHAwLnk7CiAgICAgICAgZm9yIChqID0gaTAgKiAzOyBqIDwgaTAgKiAzICsgNCAqIDM7IGogKz0gMykgewogICAgICAgICAgcHJldlBvc2l0aW9uc1tqXSA9IHBvc2l0aW9uc1tpICogM107CiAgICAgICAgICBwcmV2UG9zaXRpb25zW2ogKyAxXSA9IHBvc2l0aW9uc1tpICogMyArIDFdOwogICAgICAgICAgcHJldlBvc2l0aW9uc1tqICsgMl0gPSBwb3NpdGlvbnNbaSAqIDMgKyAyXTsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKE1hdGguYWJzKHAyLnkpIDwgY29wbGFuYXJPZmZzZXQpIHsKICAgICAgICBwMi55ID0gY29wbGFuYXJPZmZzZXQgKiAocDAueSA8IDAgPyAtMSA6IDEpOwogICAgICAgIHBvc2l0aW9uc1soaSArIDIpICogMyArIDFdID0gcDIueTsKICAgICAgICBwb3NpdGlvbnNbKGkgKyAzKSAqIDMgKyAxXSA9IHAyLnk7CiAgICAgICAgZm9yIChqID0gaTAgKiAzOyBqIDwgaTAgKiAzICsgNCAqIDM7IGogKz0gMykgewogICAgICAgICAgbmV4dFBvc2l0aW9uc1tqXSA9IHBvc2l0aW9uc1soaSArIDIpICogM107CiAgICAgICAgICBuZXh0UG9zaXRpb25zW2ogKyAxXSA9IHBvc2l0aW9uc1soaSArIDIpICogMyArIDFdOwogICAgICAgICAgbmV4dFBvc2l0aW9uc1tqICsgMl0gPSBwb3NpdGlvbnNbKGkgKyAyKSAqIDMgKyAyXTsKICAgICAgICB9CiAgICAgIH0KICAgICAgbGV0IHAwQXR0cmlidXRlcyA9IGVhc3RHZW9tZXRyeS5hdHRyaWJ1dGVzOwogICAgICBsZXQgcDBJbmRpY2VzID0gZWFzdEdlb21ldHJ5LmluZGljZXM7CiAgICAgIGxldCBwMkF0dHJpYnV0ZXMgPSB3ZXN0R2VvbWV0cnkuYXR0cmlidXRlczsKICAgICAgbGV0IHAySW5kaWNlcyA9IHdlc3RHZW9tZXRyeS5pbmRpY2VzOwogICAgICBjb25zdCBpbnRlcnNlY3Rpb24gPSBJbnRlcnNlY3Rpb25UZXN0c19kZWZhdWx0LmxpbmVTZWdtZW50UGxhbmUoCiAgICAgICAgcDAsCiAgICAgICAgcDIsCiAgICAgICAgeHpQbGFuZSwKICAgICAgICBjYXJ0ZXNpYW4zU2NyYXRjaDQKICAgICAgKTsKICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChpbnRlcnNlY3Rpb24pKSB7CiAgICAgICAgaW50ZXJzZWN0aW9uRm91bmQgPSB0cnVlOwogICAgICAgIGNvbnN0IG9mZnNldCA9IENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LlVOSVRfWSwKICAgICAgICAgIG9mZnNldFNjYWxhciwKICAgICAgICAgIGNhcnRlc2lhbjNTY3JhdGNoNQogICAgICAgICk7CiAgICAgICAgaWYgKHAwLnkgPCAwKSB7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubmVnYXRlKG9mZnNldCwgb2Zmc2V0KTsKICAgICAgICAgIHAwQXR0cmlidXRlcyA9IHdlc3RHZW9tZXRyeS5hdHRyaWJ1dGVzOwogICAgICAgICAgcDBJbmRpY2VzID0gd2VzdEdlb21ldHJ5LmluZGljZXM7CiAgICAgICAgICBwMkF0dHJpYnV0ZXMgPSBlYXN0R2VvbWV0cnkuYXR0cmlidXRlczsKICAgICAgICAgIHAySW5kaWNlcyA9IGVhc3RHZW9tZXRyeS5pbmRpY2VzOwogICAgICAgIH0KICAgICAgICBjb25zdCBvZmZzZXRQb2ludCA9IENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoCiAgICAgICAgICBpbnRlcnNlY3Rpb24sCiAgICAgICAgICBvZmZzZXQsCiAgICAgICAgICBjYXJ0ZXNpYW4zU2NyYXRjaDYKICAgICAgICApOwogICAgICAgIHAwQXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXMucHVzaChwMC54LCBwMC55LCBwMC56LCBwMC54LCBwMC55LCBwMC56KTsKICAgICAgICBwMEF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzLnB1c2goCiAgICAgICAgICBvZmZzZXRQb2ludC54LAogICAgICAgICAgb2Zmc2V0UG9pbnQueSwKICAgICAgICAgIG9mZnNldFBvaW50LnoKICAgICAgICApOwogICAgICAgIHAwQXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXMucHVzaCgKICAgICAgICAgIG9mZnNldFBvaW50LngsCiAgICAgICAgICBvZmZzZXRQb2ludC55LAogICAgICAgICAgb2Zmc2V0UG9pbnQuegogICAgICAgICk7CiAgICAgICAgcDBBdHRyaWJ1dGVzLnByZXZQb3NpdGlvbi52YWx1ZXMucHVzaCgKICAgICAgICAgIHByZXZQb3NpdGlvbnNbaTAgKiAzXSwKICAgICAgICAgIHByZXZQb3NpdGlvbnNbaTAgKiAzICsgMV0sCiAgICAgICAgICBwcmV2UG9zaXRpb25zW2kwICogMyArIDJdCiAgICAgICAgKTsKICAgICAgICBwMEF0dHJpYnV0ZXMucHJldlBvc2l0aW9uLnZhbHVlcy5wdXNoKAogICAgICAgICAgcHJldlBvc2l0aW9uc1tpMCAqIDMgKyAzXSwKICAgICAgICAgIHByZXZQb3NpdGlvbnNbaTAgKiAzICsgNF0sCiAgICAgICAgICBwcmV2UG9zaXRpb25zW2kwICogMyArIDVdCiAgICAgICAgKTsKICAgICAgICBwMEF0dHJpYnV0ZXMucHJldlBvc2l0aW9uLnZhbHVlcy5wdXNoKHAwLngsIHAwLnksIHAwLnosIHAwLngsIHAwLnksIHAwLnopOwogICAgICAgIHAwQXR0cmlidXRlcy5uZXh0UG9zaXRpb24udmFsdWVzLnB1c2goCiAgICAgICAgICBvZmZzZXRQb2ludC54LAogICAgICAgICAgb2Zmc2V0UG9pbnQueSwKICAgICAgICAgIG9mZnNldFBvaW50LnoKICAgICAgICApOwogICAgICAgIHAwQXR0cmlidXRlcy5uZXh0UG9zaXRpb24udmFsdWVzLnB1c2goCiAgICAgICAgICBvZmZzZXRQb2ludC54LAogICAgICAgICAgb2Zmc2V0UG9pbnQueSwKICAgICAgICAgIG9mZnNldFBvaW50LnoKICAgICAgICApOwogICAgICAgIHAwQXR0cmlidXRlcy5uZXh0UG9zaXRpb24udmFsdWVzLnB1c2goCiAgICAgICAgICBvZmZzZXRQb2ludC54LAogICAgICAgICAgb2Zmc2V0UG9pbnQueSwKICAgICAgICAgIG9mZnNldFBvaW50LnoKICAgICAgICApOwogICAgICAgIHAwQXR0cmlidXRlcy5uZXh0UG9zaXRpb24udmFsdWVzLnB1c2goCiAgICAgICAgICBvZmZzZXRQb2ludC54LAogICAgICAgICAgb2Zmc2V0UG9pbnQueSwKICAgICAgICAgIG9mZnNldFBvaW50LnoKICAgICAgICApOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5uZWdhdGUob2Zmc2V0LCBvZmZzZXQpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoaW50ZXJzZWN0aW9uLCBvZmZzZXQsIG9mZnNldFBvaW50KTsKICAgICAgICBwMkF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzLnB1c2goCiAgICAgICAgICBvZmZzZXRQb2ludC54LAogICAgICAgICAgb2Zmc2V0UG9pbnQueSwKICAgICAgICAgIG9mZnNldFBvaW50LnoKICAgICAgICApOwogICAgICAgIHAyQXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXMucHVzaCgKICAgICAgICAgIG9mZnNldFBvaW50LngsCiAgICAgICAgICBvZmZzZXRQb2ludC55LAogICAgICAgICAgb2Zmc2V0UG9pbnQuegogICAgICAgICk7CiAgICAgICAgcDJBdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcy5wdXNoKHAyLngsIHAyLnksIHAyLnosIHAyLngsIHAyLnksIHAyLnopOwogICAgICAgIHAyQXR0cmlidXRlcy5wcmV2UG9zaXRpb24udmFsdWVzLnB1c2goCiAgICAgICAgICBvZmZzZXRQb2ludC54LAogICAgICAgICAgb2Zmc2V0UG9pbnQueSwKICAgICAgICAgIG9mZnNldFBvaW50LnoKICAgICAgICApOwogICAgICAgIHAyQXR0cmlidXRlcy5wcmV2UG9zaXRpb24udmFsdWVzLnB1c2goCiAgICAgICAgICBvZmZzZXRQb2ludC54LAogICAgICAgICAgb2Zmc2V0UG9pbnQueSwKICAgICAgICAgIG9mZnNldFBvaW50LnoKICAgICAgICApOwogICAgICAgIHAyQXR0cmlidXRlcy5wcmV2UG9zaXRpb24udmFsdWVzLnB1c2goCiAgICAgICAgICBvZmZzZXRQb2ludC54LAogICAgICAgICAgb2Zmc2V0UG9pbnQueSwKICAgICAgICAgIG9mZnNldFBvaW50LnoKICAgICAgICApOwogICAgICAgIHAyQXR0cmlidXRlcy5wcmV2UG9zaXRpb24udmFsdWVzLnB1c2goCiAgICAgICAgICBvZmZzZXRQb2ludC54LAogICAgICAgICAgb2Zmc2V0UG9pbnQueSwKICAgICAgICAgIG9mZnNldFBvaW50LnoKICAgICAgICApOwogICAgICAgIHAyQXR0cmlidXRlcy5uZXh0UG9zaXRpb24udmFsdWVzLnB1c2gocDIueCwgcDIueSwgcDIueiwgcDIueCwgcDIueSwgcDIueik7CiAgICAgICAgcDJBdHRyaWJ1dGVzLm5leHRQb3NpdGlvbi52YWx1ZXMucHVzaCgKICAgICAgICAgIG5leHRQb3NpdGlvbnNbaTIgKiAzXSwKICAgICAgICAgIG5leHRQb3NpdGlvbnNbaTIgKiAzICsgMV0sCiAgICAgICAgICBuZXh0UG9zaXRpb25zW2kyICogMyArIDJdCiAgICAgICAgKTsKICAgICAgICBwMkF0dHJpYnV0ZXMubmV4dFBvc2l0aW9uLnZhbHVlcy5wdXNoKAogICAgICAgICAgbmV4dFBvc2l0aW9uc1tpMiAqIDMgKyAzXSwKICAgICAgICAgIG5leHRQb3NpdGlvbnNbaTIgKiAzICsgNF0sCiAgICAgICAgICBuZXh0UG9zaXRpb25zW2kyICogMyArIDVdCiAgICAgICAgKTsKICAgICAgICBjb25zdCBldzAgPSBDYXJ0ZXNpYW4yX2RlZmF1bHQuZnJvbUFycmF5KAogICAgICAgICAgZXhwYW5kQW5kV2lkdGhzLAogICAgICAgICAgaTAgKiAyLAogICAgICAgICAgY2FydGVzaWFuMlNjcmF0Y2gwCiAgICAgICAgKTsKICAgICAgICBjb25zdCB3aWR0aCA9IE1hdGguYWJzKGV3MC55KTsKICAgICAgICBwMEF0dHJpYnV0ZXMuZXhwYW5kQW5kV2lkdGgudmFsdWVzLnB1c2goLTEsIHdpZHRoLCAxLCB3aWR0aCk7CiAgICAgICAgcDBBdHRyaWJ1dGVzLmV4cGFuZEFuZFdpZHRoLnZhbHVlcy5wdXNoKC0xLCAtd2lkdGgsIDEsIC13aWR0aCk7CiAgICAgICAgcDJBdHRyaWJ1dGVzLmV4cGFuZEFuZFdpZHRoLnZhbHVlcy5wdXNoKC0xLCB3aWR0aCwgMSwgd2lkdGgpOwogICAgICAgIHAyQXR0cmlidXRlcy5leHBhbmRBbmRXaWR0aC52YWx1ZXMucHVzaCgtMSwgLXdpZHRoLCAxLCAtd2lkdGgpOwogICAgICAgIGxldCB0ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZVNxdWFyZWQoCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoaW50ZXJzZWN0aW9uLCBwMCwgY2FydGVzaWFuM1NjcmF0Y2gzKQogICAgICAgICk7CiAgICAgICAgdCAvPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlU3F1YXJlZCgKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChwMiwgcDAsIGNhcnRlc2lhbjNTY3JhdGNoMykKICAgICAgICApOwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoY29sb3JzKSkgewogICAgICAgICAgY29uc3QgYzAgPSBDYXJ0ZXNpYW40X2RlZmF1bHQuZnJvbUFycmF5KGNvbG9ycywgaTAgKiA0LCBjYXJ0ZXNpYW40U2NyYXRjaDApOwogICAgICAgICAgY29uc3QgYzIgPSBDYXJ0ZXNpYW40X2RlZmF1bHQuZnJvbUFycmF5KGNvbG9ycywgaTIgKiA0LCBjYXJ0ZXNpYW40U2NyYXRjaDApOwogICAgICAgICAgY29uc3QgciA9IE1hdGhfZGVmYXVsdC5sZXJwKGMwLngsIGMyLngsIHQpOwogICAgICAgICAgY29uc3QgZyA9IE1hdGhfZGVmYXVsdC5sZXJwKGMwLnksIGMyLnksIHQpOwogICAgICAgICAgY29uc3QgYiA9IE1hdGhfZGVmYXVsdC5sZXJwKGMwLnosIGMyLnosIHQpOwogICAgICAgICAgY29uc3QgYTMgPSBNYXRoX2RlZmF1bHQubGVycChjMC53LCBjMi53LCB0KTsKICAgICAgICAgIGZvciAoaiA9IGkwICogNDsgaiA8IGkwICogNCArIDIgKiA0OyArK2opIHsKICAgICAgICAgICAgcDBBdHRyaWJ1dGVzLmNvbG9yLnZhbHVlcy5wdXNoKGNvbG9yc1tqXSk7CiAgICAgICAgICB9CiAgICAgICAgICBwMEF0dHJpYnV0ZXMuY29sb3IudmFsdWVzLnB1c2gociwgZywgYiwgYTMpOwogICAgICAgICAgcDBBdHRyaWJ1dGVzLmNvbG9yLnZhbHVlcy5wdXNoKHIsIGcsIGIsIGEzKTsKICAgICAgICAgIHAyQXR0cmlidXRlcy5jb2xvci52YWx1ZXMucHVzaChyLCBnLCBiLCBhMyk7CiAgICAgICAgICBwMkF0dHJpYnV0ZXMuY29sb3IudmFsdWVzLnB1c2gociwgZywgYiwgYTMpOwogICAgICAgICAgZm9yIChqID0gaTIgKiA0OyBqIDwgaTIgKiA0ICsgMiAqIDQ7ICsraikgewogICAgICAgICAgICBwMkF0dHJpYnV0ZXMuY29sb3IudmFsdWVzLnB1c2goY29sb3JzW2pdKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdCh0ZXhDb29yZHMpKSB7CiAgICAgICAgICBjb25zdCBzMCA9IENhcnRlc2lhbjJfZGVmYXVsdC5mcm9tQXJyYXkodGV4Q29vcmRzLCBpMCAqIDIsIGNhcnRlc2lhbjJTY3JhdGNoMCk7CiAgICAgICAgICBjb25zdCBzMyA9IENhcnRlc2lhbjJfZGVmYXVsdC5mcm9tQXJyYXkoCiAgICAgICAgICAgIHRleENvb3JkcywKICAgICAgICAgICAgKGkgKyAzKSAqIDIsCiAgICAgICAgICAgIGNhcnRlc2lhbjJTY3JhdGNoMQogICAgICAgICAgKTsKICAgICAgICAgIGNvbnN0IHN4ID0gTWF0aF9kZWZhdWx0LmxlcnAoczAueCwgczMueCwgdCk7CiAgICAgICAgICBmb3IgKGogPSBpMCAqIDI7IGogPCBpMCAqIDIgKyAyICogMjsgKytqKSB7CiAgICAgICAgICAgIHAwQXR0cmlidXRlcy5zdC52YWx1ZXMucHVzaCh0ZXhDb29yZHNbal0pOwogICAgICAgICAgfQogICAgICAgICAgcDBBdHRyaWJ1dGVzLnN0LnZhbHVlcy5wdXNoKHN4LCBzMC55KTsKICAgICAgICAgIHAwQXR0cmlidXRlcy5zdC52YWx1ZXMucHVzaChzeCwgczMueSk7CiAgICAgICAgICBwMkF0dHJpYnV0ZXMuc3QudmFsdWVzLnB1c2goc3gsIHMwLnkpOwogICAgICAgICAgcDJBdHRyaWJ1dGVzLnN0LnZhbHVlcy5wdXNoKHN4LCBzMy55KTsKICAgICAgICAgIGZvciAoaiA9IGkyICogMjsgaiA8IGkyICogMiArIDIgKiAyOyArK2opIHsKICAgICAgICAgICAgcDJBdHRyaWJ1dGVzLnN0LnZhbHVlcy5wdXNoKHRleENvb3Jkc1tqXSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGluZGV4ID0gcDBBdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcy5sZW5ndGggLyAzIC0gNDsKICAgICAgICBwMEluZGljZXMucHVzaChpbmRleCwgaW5kZXggKyAyLCBpbmRleCArIDEpOwogICAgICAgIHAwSW5kaWNlcy5wdXNoKGluZGV4ICsgMSwgaW5kZXggKyAyLCBpbmRleCArIDMpOwogICAgICAgIGluZGV4ID0gcDJBdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcy5sZW5ndGggLyAzIC0gNDsKICAgICAgICBwMkluZGljZXMucHVzaChpbmRleCwgaW5kZXggKyAyLCBpbmRleCArIDEpOwogICAgICAgIHAySW5kaWNlcy5wdXNoKGluZGV4ICsgMSwgaW5kZXggKyAyLCBpbmRleCArIDMpOwogICAgICB9IGVsc2UgewogICAgICAgIGxldCBjdXJyZW50QXR0cmlidXRlczsKICAgICAgICBsZXQgY3VycmVudEluZGljZXM7CiAgICAgICAgaWYgKHAwLnkgPCAwKSB7CiAgICAgICAgICBjdXJyZW50QXR0cmlidXRlcyA9IHdlc3RHZW9tZXRyeS5hdHRyaWJ1dGVzOwogICAgICAgICAgY3VycmVudEluZGljZXMgPSB3ZXN0R2VvbWV0cnkuaW5kaWNlczsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY3VycmVudEF0dHJpYnV0ZXMgPSBlYXN0R2VvbWV0cnkuYXR0cmlidXRlczsKICAgICAgICAgIGN1cnJlbnRJbmRpY2VzID0gZWFzdEdlb21ldHJ5LmluZGljZXM7CiAgICAgICAgfQogICAgICAgIGN1cnJlbnRBdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcy5wdXNoKHAwLngsIHAwLnksIHAwLnopOwogICAgICAgIGN1cnJlbnRBdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcy5wdXNoKHAwLngsIHAwLnksIHAwLnopOwogICAgICAgIGN1cnJlbnRBdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcy5wdXNoKHAyLngsIHAyLnksIHAyLnopOwogICAgICAgIGN1cnJlbnRBdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcy5wdXNoKHAyLngsIHAyLnksIHAyLnopOwogICAgICAgIGZvciAoaiA9IGkgKiAzOyBqIDwgaSAqIDMgKyA0ICogMzsgKytqKSB7CiAgICAgICAgICBjdXJyZW50QXR0cmlidXRlcy5wcmV2UG9zaXRpb24udmFsdWVzLnB1c2gocHJldlBvc2l0aW9uc1tqXSk7CiAgICAgICAgICBjdXJyZW50QXR0cmlidXRlcy5uZXh0UG9zaXRpb24udmFsdWVzLnB1c2gobmV4dFBvc2l0aW9uc1tqXSk7CiAgICAgICAgfQogICAgICAgIGZvciAoaiA9IGkgKiAyOyBqIDwgaSAqIDIgKyA0ICogMjsgKytqKSB7CiAgICAgICAgICBjdXJyZW50QXR0cmlidXRlcy5leHBhbmRBbmRXaWR0aC52YWx1ZXMucHVzaChleHBhbmRBbmRXaWR0aHNbal0pOwogICAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdCh0ZXhDb29yZHMpKSB7CiAgICAgICAgICAgIGN1cnJlbnRBdHRyaWJ1dGVzLnN0LnZhbHVlcy5wdXNoKHRleENvb3Jkc1tqXSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoY29sb3JzKSkgewogICAgICAgICAgZm9yIChqID0gaSAqIDQ7IGogPCBpICogNCArIDQgKiA0OyArK2opIHsKICAgICAgICAgICAgY3VycmVudEF0dHJpYnV0ZXMuY29sb3IudmFsdWVzLnB1c2goY29sb3JzW2pdKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaW5kZXggPSBjdXJyZW50QXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXMubGVuZ3RoIC8gMyAtIDQ7CiAgICAgICAgY3VycmVudEluZGljZXMucHVzaChpbmRleCwgaW5kZXggKyAyLCBpbmRleCArIDEpOwogICAgICAgIGN1cnJlbnRJbmRpY2VzLnB1c2goaW5kZXggKyAxLCBpbmRleCArIDIsIGluZGV4ICsgMyk7CiAgICAgIH0KICAgIH0KICAgIGlmIChpbnRlcnNlY3Rpb25Gb3VuZCkgewogICAgICB1cGRhdGVBZGphY2VuY3lBZnRlclNwbGl0KHdlc3RHZW9tZXRyeSk7CiAgICAgIHVwZGF0ZUFkamFjZW5jeUFmdGVyU3BsaXQoZWFzdEdlb21ldHJ5KTsKICAgIH0KICAgIHVwZGF0ZUluc3RhbmNlQWZ0ZXJTcGxpdChpbnN0YW5jZSwgd2VzdEdlb21ldHJ5LCBlYXN0R2VvbWV0cnkpOwogIH0KICB2YXIgR2VvbWV0cnlQaXBlbGluZSwgc2NyYXRjaFByb2plY3RUbzJEQ2FydGVzaWFuMywgc2NyYXRjaFByb2plY3RUbzJEQ2FydG9ncmFwaGljLCBlbmNvZGVkUmVzdWx0LCBzY3JhdGNoQ2FydGVzaWFuMzMsIGludmVyc2VUcmFuc3Bvc2UsIG5vcm1hbE1hdHJpeCwgdGVtcFNjcmF0Y2gsIG5vcm1hbCwgdjAsIHYxLCB2Miwgbm9ybWFsU2NyYXRjaDIsIG5vcm1hbFNjYWxlLCB0U2NyYXRjaCwgc2NyYXRjaENhcnRlc2lhbjIyLCB0b0VuY29kZTEsIHRvRW5jb2RlMiwgdG9FbmNvZGUzLCBlbmNvZGVSZXN1bHQyLCBjMywgdTEsIHUyLCBxMSwgcTIsIHNwbGl0VHJpYW5nbGVSZXN1bHQsIGludGVycG9sYXRlQW5kUGFja0NhcnRlc2lhbjQsIGludGVycG9sYXRlQW5kUGFja0NhcnRlc2lhbjMsIGludGVycG9sYXRlQW5kUGFja0NhcnRlc2lhbjIsIGludGVycG9sYXRlQW5kUGFja0Jvb2xlYW4sIHAwU2NyYXRjaCwgcDFTY3JhdGNoLCBwMlNjcmF0Y2gsIGJhcnljZW50cmljU2NyYXRjaCwgTkFNRURfQVRUUklCVVRFUywgeHpQbGFuZSwgb2Zmc2V0U2NyYXRjaCwgb2Zmc2V0UG9pbnRTY3JhdGNoLCBjYXJ0ZXNpYW4yU2NyYXRjaDAsIGNhcnRlc2lhbjJTY3JhdGNoMSwgY2FydGVzaWFuM1NjcmF0Y2gwLCBjYXJ0ZXNpYW4zU2NyYXRjaDIsIGNhcnRlc2lhbjNTY3JhdGNoMywgY2FydGVzaWFuM1NjcmF0Y2g0LCBjYXJ0ZXNpYW4zU2NyYXRjaDUsIGNhcnRlc2lhbjNTY3JhdGNoNiwgY2FydGVzaWFuNFNjcmF0Y2gwLCBvZmZzZXRTY2FsYXIsIGNvcGxhbmFyT2Zmc2V0LCBHZW9tZXRyeVBpcGVsaW5lX2RlZmF1bHQ7CiAgdmFyIGluaXRfR2VvbWV0cnlQaXBlbGluZSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvR2VvbWV0cnlQaXBlbGluZS5qcyIoKSB7CiAgICAgIGluaXRfQXR0cmlidXRlQ29tcHJlc3Npb24oKTsKICAgICAgaW5pdF9iYXJ5Y2VudHJpY0Nvb3JkaW5hdGVzKCk7CiAgICAgIGluaXRfQm91bmRpbmdTcGhlcmUoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4yKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NhcnRlc2lhbjQoKTsKICAgICAgaW5pdF9DYXJ0b2dyYXBoaWMoKTsKICAgICAgaW5pdF9Db21wb25lbnREYXRhdHlwZSgpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X0VuY29kZWRDYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfR2VvZ3JhcGhpY1Byb2plY3Rpb24oKTsKICAgICAgaW5pdF9HZW9tZXRyeSgpOwogICAgICBpbml0X0dlb21ldHJ5QXR0cmlidXRlKCk7CiAgICAgIGluaXRfR2VvbWV0cnlUeXBlKCk7CiAgICAgIGluaXRfSW5kZXhEYXRhdHlwZSgpOwogICAgICBpbml0X0ludGVyc2VjdCgpOwogICAgICBpbml0X0ludGVyc2VjdGlvblRlc3RzKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X01hdHJpeDMoKTsKICAgICAgaW5pdF9NYXRyaXg0KCk7CiAgICAgIGluaXRfUGxhbmUoKTsKICAgICAgaW5pdF9QcmltaXRpdmVUeXBlKCk7CiAgICAgIGluaXRfVGlwc2lmeSgpOwogICAgICBHZW9tZXRyeVBpcGVsaW5lID0ge307CiAgICAgIEdlb21ldHJ5UGlwZWxpbmUudG9XaXJlZnJhbWUgPSBmdW5jdGlvbihnZW9tZXRyeSkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGdlb21ldHJ5KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImdlb21ldHJ5IGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBpbmRpY2VzID0gZ2VvbWV0cnkuaW5kaWNlczsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGluZGljZXMpKSB7CiAgICAgICAgICBzd2l0Y2ggKGdlb21ldHJ5LnByaW1pdGl2ZVR5cGUpIHsKICAgICAgICAgICAgY2FzZSBQcmltaXRpdmVUeXBlX2RlZmF1bHQuVFJJQU5HTEVTOgogICAgICAgICAgICAgIGdlb21ldHJ5LmluZGljZXMgPSB0cmlhbmdsZXNUb0xpbmVzKGluZGljZXMpOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIFByaW1pdGl2ZVR5cGVfZGVmYXVsdC5UUklBTkdMRV9TVFJJUDoKICAgICAgICAgICAgICBnZW9tZXRyeS5pbmRpY2VzID0gdHJpYW5nbGVTdHJpcFRvTGluZXMoaW5kaWNlcyk7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgUHJpbWl0aXZlVHlwZV9kZWZhdWx0LlRSSUFOR0xFX0ZBTjoKICAgICAgICAgICAgICBnZW9tZXRyeS5pbmRpY2VzID0gdHJpYW5nbGVGYW5Ub0xpbmVzKGluZGljZXMpOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgICAgICAgImdlb21ldHJ5LnByaW1pdGl2ZVR5cGUgbXVzdCBiZSBUUklBTkdMRVMsIFRSSUFOR0xFX1NUUklQLCBvciBUUklBTkdMRV9GQU4uIgogICAgICAgICAgICAgICk7CiAgICAgICAgICB9CiAgICAgICAgICBnZW9tZXRyeS5wcmltaXRpdmVUeXBlID0gUHJpbWl0aXZlVHlwZV9kZWZhdWx0LkxJTkVTOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZ2VvbWV0cnk7CiAgICAgIH07CiAgICAgIEdlb21ldHJ5UGlwZWxpbmUuY3JlYXRlTGluZVNlZ21lbnRzRm9yVmVjdG9ycyA9IGZ1bmN0aW9uKGdlb21ldHJ5LCBhdHRyaWJ1dGVOYW1lLCBsZW5ndGgpIHsKICAgICAgICBhdHRyaWJ1dGVOYW1lID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoYXR0cmlidXRlTmFtZSwgIm5vcm1hbCIpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGdlb21ldHJ5KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImdlb21ldHJ5IGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24gaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGdlb21ldHJ5LmF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV0pKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgYGdlb21ldHJ5LmF0dHJpYnV0ZXMgbXVzdCBoYXZlIGFuIGF0dHJpYnV0ZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGF0dHJpYnV0ZU5hbWUgcGFyYW1ldGVyLCAke2F0dHJpYnV0ZU5hbWV9LmAKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIGxlbmd0aCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGxlbmd0aCwgMWU0KTsKICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlczsKICAgICAgICBjb25zdCB2ZWN0b3JzID0gZ2VvbWV0cnkuYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXS52YWx1ZXM7CiAgICAgICAgY29uc3QgcG9zaXRpb25zTGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aDsKICAgICAgICBjb25zdCBuZXdQb3NpdGlvbnMgPSBuZXcgRmxvYXQ2NEFycmF5KDIgKiBwb3NpdGlvbnNMZW5ndGgpOwogICAgICAgIGxldCBqID0gMDsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvc2l0aW9uc0xlbmd0aDsgaSArPSAzKSB7CiAgICAgICAgICBuZXdQb3NpdGlvbnNbaisrXSA9IHBvc2l0aW9uc1tpXTsKICAgICAgICAgIG5ld1Bvc2l0aW9uc1tqKytdID0gcG9zaXRpb25zW2kgKyAxXTsKICAgICAgICAgIG5ld1Bvc2l0aW9uc1tqKytdID0gcG9zaXRpb25zW2kgKyAyXTsKICAgICAgICAgIG5ld1Bvc2l0aW9uc1tqKytdID0gcG9zaXRpb25zW2ldICsgdmVjdG9yc1tpXSAqIGxlbmd0aDsKICAgICAgICAgIG5ld1Bvc2l0aW9uc1tqKytdID0gcG9zaXRpb25zW2kgKyAxXSArIHZlY3RvcnNbaSArIDFdICogbGVuZ3RoOwogICAgICAgICAgbmV3UG9zaXRpb25zW2orK10gPSBwb3NpdGlvbnNbaSArIDJdICsgdmVjdG9yc1tpICsgMl0gKiBsZW5ndGg7CiAgICAgICAgfQogICAgICAgIGxldCBuZXdCb3VuZGluZ1NwaGVyZTsKICAgICAgICBjb25zdCBicyA9IGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlOwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoYnMpKSB7CiAgICAgICAgICBuZXdCb3VuZGluZ1NwaGVyZSA9IG5ldyBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0KGJzLmNlbnRlciwgYnMucmFkaXVzICsgbGVuZ3RoKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG5ldyBHZW9tZXRyeV9kZWZhdWx0KHsKICAgICAgICAgIGF0dHJpYnV0ZXM6IHsKICAgICAgICAgICAgcG9zaXRpb246IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5ET1VCTEUsCiAgICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICAgICAgICB2YWx1ZXM6IG5ld1Bvc2l0aW9ucwogICAgICAgICAgICB9KQogICAgICAgICAgfSwKICAgICAgICAgIHByaW1pdGl2ZVR5cGU6IFByaW1pdGl2ZVR5cGVfZGVmYXVsdC5MSU5FUywKICAgICAgICAgIGJvdW5kaW5nU3BoZXJlOiBuZXdCb3VuZGluZ1NwaGVyZQogICAgICAgIH0pOwogICAgICB9OwogICAgICBHZW9tZXRyeVBpcGVsaW5lLmNyZWF0ZUF0dHJpYnV0ZUxvY2F0aW9ucyA9IGZ1bmN0aW9uKGdlb21ldHJ5KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoZ2VvbWV0cnkpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiZ2VvbWV0cnkgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHNlbWFudGljcyA9IFsKICAgICAgICAgICJwb3NpdGlvbiIsCiAgICAgICAgICAicG9zaXRpb25IaWdoIiwKICAgICAgICAgICJwb3NpdGlvbkxvdyIsCiAgICAgICAgICAvLyBGcm9tIFZlcnRleEZvcm1hdC5wb3NpdGlvbiAtIGFmdGVyIDJEIHByb2plY3Rpb24gYW5kIGhpZ2gtcHJlY2lzaW9uIGVuY29kaW5nCiAgICAgICAgICAicG9zaXRpb24zREhpZ2giLAogICAgICAgICAgInBvc2l0aW9uM0RMb3ciLAogICAgICAgICAgInBvc2l0aW9uMkRIaWdoIiwKICAgICAgICAgICJwb3NpdGlvbjJETG93IiwKICAgICAgICAgIC8vIEZyb20gUHJpbWl0aXZlCiAgICAgICAgICAicGlja0NvbG9yIiwKICAgICAgICAgIC8vIEZyb20gVmVydGV4Rm9ybWF0CiAgICAgICAgICAibm9ybWFsIiwKICAgICAgICAgICJzdCIsCiAgICAgICAgICAidGFuZ2VudCIsCiAgICAgICAgICAiYml0YW5nZW50IiwKICAgICAgICAgIC8vIEZvciBzaGFkb3cgdm9sdW1lcwogICAgICAgICAgImV4dHJ1ZGVEaXJlY3Rpb24iLAogICAgICAgICAgLy8gRnJvbSBjb21wcmVzc2luZyB0ZXh0dXJlIGNvb3JkaW5hdGVzIGFuZCBub3JtYWxzCiAgICAgICAgICAiY29tcHJlc3NlZEF0dHJpYnV0ZXMiCiAgICAgICAgXTsKICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlczsKICAgICAgICBjb25zdCBpbmRpY2VzID0ge307CiAgICAgICAgbGV0IGogPSAwOwogICAgICAgIGxldCBpOwogICAgICAgIGNvbnN0IGxlbiA9IHNlbWFudGljcy5sZW5ndGg7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgKytpKSB7CiAgICAgICAgICBjb25zdCBzZW1hbnRpYyA9IHNlbWFudGljc1tpXTsKICAgICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoYXR0cmlidXRlc1tzZW1hbnRpY10pKSB7CiAgICAgICAgICAgIGluZGljZXNbc2VtYW50aWNdID0gaisrOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBmb3IgKGNvbnN0IG5hbWUgaW4gYXR0cmlidXRlcykgewogICAgICAgICAgaWYgKGF0dHJpYnV0ZXMuaGFzT3duUHJvcGVydHkobmFtZSkgJiYgIWRlZmluZWRfZGVmYXVsdChpbmRpY2VzW25hbWVdKSkgewogICAgICAgICAgICBpbmRpY2VzW25hbWVdID0gaisrOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gaW5kaWNlczsKICAgICAgfTsKICAgICAgR2VvbWV0cnlQaXBlbGluZS5yZW9yZGVyRm9yUHJlVmVydGV4Q2FjaGUgPSBmdW5jdGlvbihnZW9tZXRyeSkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGdlb21ldHJ5KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImdlb21ldHJ5IGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBudW1WZXJ0aWNlcyA9IEdlb21ldHJ5X2RlZmF1bHQuY29tcHV0ZU51bWJlck9mVmVydGljZXMoZ2VvbWV0cnkpOwogICAgICAgIGNvbnN0IGluZGljZXMgPSBnZW9tZXRyeS5pbmRpY2VzOwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoaW5kaWNlcykpIHsKICAgICAgICAgIGNvbnN0IGluZGV4Q3Jvc3NSZWZlcmVuY2VPbGRUb05ldyA9IG5ldyBJbnQzMkFycmF5KG51bVZlcnRpY2VzKTsKICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtVmVydGljZXM7IGkrKykgewogICAgICAgICAgICBpbmRleENyb3NzUmVmZXJlbmNlT2xkVG9OZXdbaV0gPSAtMTsKICAgICAgICAgIH0KICAgICAgICAgIGNvbnN0IGluZGljZXNJbiA9IGluZGljZXM7CiAgICAgICAgICBjb25zdCBudW1JbmRpY2VzID0gaW5kaWNlc0luLmxlbmd0aDsKICAgICAgICAgIGNvbnN0IGluZGljZXNPdXQgPSBJbmRleERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheShudW1WZXJ0aWNlcywgbnVtSW5kaWNlcyk7CiAgICAgICAgICBsZXQgaW50b0luZGljZXNJbiA9IDA7CiAgICAgICAgICBsZXQgaW50b0luZGljZXNPdXQgPSAwOwogICAgICAgICAgbGV0IG5leHRJbmRleCA9IDA7CiAgICAgICAgICBsZXQgdGVtcEluZGV4OwogICAgICAgICAgd2hpbGUgKGludG9JbmRpY2VzSW4gPCBudW1JbmRpY2VzKSB7CiAgICAgICAgICAgIHRlbXBJbmRleCA9IGluZGV4Q3Jvc3NSZWZlcmVuY2VPbGRUb05ld1tpbmRpY2VzSW5baW50b0luZGljZXNJbl1dOwogICAgICAgICAgICBpZiAodGVtcEluZGV4ICE9PSAtMSkgewogICAgICAgICAgICAgIGluZGljZXNPdXRbaW50b0luZGljZXNPdXRdID0gdGVtcEluZGV4OwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHRlbXBJbmRleCA9IGluZGljZXNJbltpbnRvSW5kaWNlc0luXTsKICAgICAgICAgICAgICBpbmRleENyb3NzUmVmZXJlbmNlT2xkVG9OZXdbdGVtcEluZGV4XSA9IG5leHRJbmRleDsKICAgICAgICAgICAgICBpbmRpY2VzT3V0W2ludG9JbmRpY2VzT3V0XSA9IG5leHRJbmRleDsKICAgICAgICAgICAgICArK25leHRJbmRleDsKICAgICAgICAgICAgfQogICAgICAgICAgICArK2ludG9JbmRpY2VzSW47CiAgICAgICAgICAgICsraW50b0luZGljZXNPdXQ7CiAgICAgICAgICB9CiAgICAgICAgICBnZW9tZXRyeS5pbmRpY2VzID0gaW5kaWNlc091dDsKICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzOwogICAgICAgICAgZm9yIChjb25zdCBwcm9wZXJ0eSBpbiBhdHRyaWJ1dGVzKSB7CiAgICAgICAgICAgIGlmIChhdHRyaWJ1dGVzLmhhc093blByb3BlcnR5KHByb3BlcnR5KSAmJiBkZWZpbmVkX2RlZmF1bHQoYXR0cmlidXRlc1twcm9wZXJ0eV0pICYmIGRlZmluZWRfZGVmYXVsdChhdHRyaWJ1dGVzW3Byb3BlcnR5XS52YWx1ZXMpKSB7CiAgICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlID0gYXR0cmlidXRlc1twcm9wZXJ0eV07CiAgICAgICAgICAgICAgY29uc3QgZWxlbWVudHNJbiA9IGF0dHJpYnV0ZS52YWx1ZXM7CiAgICAgICAgICAgICAgbGV0IGludG9FbGVtZW50c0luID0gMDsKICAgICAgICAgICAgICBjb25zdCBudW1Db21wb25lbnRzID0gYXR0cmlidXRlLmNvbXBvbmVudHNQZXJBdHRyaWJ1dGU7CiAgICAgICAgICAgICAgY29uc3QgZWxlbWVudHNPdXQgPSBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LmNyZWF0ZVR5cGVkQXJyYXkoCiAgICAgICAgICAgICAgICBhdHRyaWJ1dGUuY29tcG9uZW50RGF0YXR5cGUsCiAgICAgICAgICAgICAgICBuZXh0SW5kZXggKiBudW1Db21wb25lbnRzCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICB3aGlsZSAoaW50b0VsZW1lbnRzSW4gPCBudW1WZXJ0aWNlcykgewogICAgICAgICAgICAgICAgY29uc3QgdGVtcCA9IGluZGV4Q3Jvc3NSZWZlcmVuY2VPbGRUb05ld1tpbnRvRWxlbWVudHNJbl07CiAgICAgICAgICAgICAgICBpZiAodGVtcCAhPT0gLTEpIHsKICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBudW1Db21wb25lbnRzOyBqKyspIHsKICAgICAgICAgICAgICAgICAgICBlbGVtZW50c091dFtudW1Db21wb25lbnRzICogdGVtcCArIGpdID0gZWxlbWVudHNJbltudW1Db21wb25lbnRzICogaW50b0VsZW1lbnRzSW4gKyBqXTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKytpbnRvRWxlbWVudHNJbjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgYXR0cmlidXRlLnZhbHVlcyA9IGVsZW1lbnRzT3V0OwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBnZW9tZXRyeTsKICAgICAgfTsKICAgICAgR2VvbWV0cnlQaXBlbGluZS5yZW9yZGVyRm9yUG9zdFZlcnRleENhY2hlID0gZnVuY3Rpb24oZ2VvbWV0cnksIGNhY2hlQ2FwYWNpdHkpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChnZW9tZXRyeSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJnZW9tZXRyeSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgaW5kaWNlcyA9IGdlb21ldHJ5LmluZGljZXM7CiAgICAgICAgaWYgKGdlb21ldHJ5LnByaW1pdGl2ZVR5cGUgPT09IFByaW1pdGl2ZVR5cGVfZGVmYXVsdC5UUklBTkdMRVMgJiYgZGVmaW5lZF9kZWZhdWx0KGluZGljZXMpKSB7CiAgICAgICAgICBjb25zdCBudW1JbmRpY2VzID0gaW5kaWNlcy5sZW5ndGg7CiAgICAgICAgICBsZXQgbWF4aW11bUluZGV4ID0gMDsKICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbnVtSW5kaWNlczsgaisrKSB7CiAgICAgICAgICAgIGlmIChpbmRpY2VzW2pdID4gbWF4aW11bUluZGV4KSB7CiAgICAgICAgICAgICAgbWF4aW11bUluZGV4ID0gaW5kaWNlc1tqXTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgZ2VvbWV0cnkuaW5kaWNlcyA9IFRpcHNpZnlfZGVmYXVsdC50aXBzaWZ5KHsKICAgICAgICAgICAgaW5kaWNlcywKICAgICAgICAgICAgbWF4aW11bUluZGV4LAogICAgICAgICAgICBjYWNoZVNpemU6IGNhY2hlQ2FwYWNpdHkKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZ2VvbWV0cnk7CiAgICAgIH07CiAgICAgIEdlb21ldHJ5UGlwZWxpbmUuZml0VG9VbnNpZ25lZFNob3J0SW5kaWNlcyA9IGZ1bmN0aW9uKGdlb21ldHJ5KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoZ2VvbWV0cnkpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiZ2VvbWV0cnkgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoZ2VvbWV0cnkuaW5kaWNlcykgJiYgZ2VvbWV0cnkucHJpbWl0aXZlVHlwZSAhPT0gUHJpbWl0aXZlVHlwZV9kZWZhdWx0LlRSSUFOR0xFUyAmJiBnZW9tZXRyeS5wcmltaXRpdmVUeXBlICE9PSBQcmltaXRpdmVUeXBlX2RlZmF1bHQuTElORVMgJiYgZ2VvbWV0cnkucHJpbWl0aXZlVHlwZSAhPT0gUHJpbWl0aXZlVHlwZV9kZWZhdWx0LlBPSU5UUykgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgICJnZW9tZXRyeS5wcmltaXRpdmVUeXBlIG11c3QgZXF1YWwgdG8gUHJpbWl0aXZlVHlwZS5UUklBTkdMRVMsIFByaW1pdGl2ZVR5cGUuTElORVMsIG9yIFByaW1pdGl2ZVR5cGUuUE9JTlRTLiIKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGdlb21ldHJpZXMgPSBbXTsKICAgICAgICBjb25zdCBudW1iZXJPZlZlcnRpY2VzID0gR2VvbWV0cnlfZGVmYXVsdC5jb21wdXRlTnVtYmVyT2ZWZXJ0aWNlcyhnZW9tZXRyeSk7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChnZW9tZXRyeS5pbmRpY2VzKSAmJiBudW1iZXJPZlZlcnRpY2VzID49IE1hdGhfZGVmYXVsdC5TSVhUWV9GT1VSX0tJTE9CWVRFUykgewogICAgICAgICAgbGV0IG9sZFRvTmV3SW5kZXggPSBbXTsKICAgICAgICAgIGxldCBuZXdJbmRpY2VzID0gW107CiAgICAgICAgICBsZXQgY3VycmVudEluZGV4ID0gMDsKICAgICAgICAgIGxldCBuZXdBdHRyaWJ1dGVzID0gY29weUF0dHJpYnV0ZXNEZXNjcmlwdGlvbnMoZ2VvbWV0cnkuYXR0cmlidXRlcyk7CiAgICAgICAgICBjb25zdCBvcmlnaW5hbEluZGljZXMgPSBnZW9tZXRyeS5pbmRpY2VzOwogICAgICAgICAgY29uc3QgbnVtYmVyT2ZJbmRpY2VzID0gb3JpZ2luYWxJbmRpY2VzLmxlbmd0aDsKICAgICAgICAgIGxldCBpbmRpY2VzUGVyUHJpbWl0aXZlOwogICAgICAgICAgaWYgKGdlb21ldHJ5LnByaW1pdGl2ZVR5cGUgPT09IFByaW1pdGl2ZVR5cGVfZGVmYXVsdC5UUklBTkdMRVMpIHsKICAgICAgICAgICAgaW5kaWNlc1BlclByaW1pdGl2ZSA9IDM7CiAgICAgICAgICB9IGVsc2UgaWYgKGdlb21ldHJ5LnByaW1pdGl2ZVR5cGUgPT09IFByaW1pdGl2ZVR5cGVfZGVmYXVsdC5MSU5FUykgewogICAgICAgICAgICBpbmRpY2VzUGVyUHJpbWl0aXZlID0gMjsKICAgICAgICAgIH0gZWxzZSBpZiAoZ2VvbWV0cnkucHJpbWl0aXZlVHlwZSA9PT0gUHJpbWl0aXZlVHlwZV9kZWZhdWx0LlBPSU5UUykgewogICAgICAgICAgICBpbmRpY2VzUGVyUHJpbWl0aXZlID0gMTsKICAgICAgICAgIH0KICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbnVtYmVyT2ZJbmRpY2VzOyBqICs9IGluZGljZXNQZXJQcmltaXRpdmUpIHsKICAgICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBpbmRpY2VzUGVyUHJpbWl0aXZlOyArK2spIHsKICAgICAgICAgICAgICBjb25zdCB4ID0gb3JpZ2luYWxJbmRpY2VzW2ogKyBrXTsKICAgICAgICAgICAgICBsZXQgaSA9IG9sZFRvTmV3SW5kZXhbeF07CiAgICAgICAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoaSkpIHsKICAgICAgICAgICAgICAgIGkgPSBjdXJyZW50SW5kZXgrKzsKICAgICAgICAgICAgICAgIG9sZFRvTmV3SW5kZXhbeF0gPSBpOwogICAgICAgICAgICAgICAgY29weVZlcnRleChuZXdBdHRyaWJ1dGVzLCBnZW9tZXRyeS5hdHRyaWJ1dGVzLCB4KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgbmV3SW5kaWNlcy5wdXNoKGkpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChjdXJyZW50SW5kZXggKyBpbmRpY2VzUGVyUHJpbWl0aXZlID49IE1hdGhfZGVmYXVsdC5TSVhUWV9GT1VSX0tJTE9CWVRFUykgewogICAgICAgICAgICAgIGdlb21ldHJpZXMucHVzaCgKICAgICAgICAgICAgICAgIG5ldyBHZW9tZXRyeV9kZWZhdWx0KHsKICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczogbmV3QXR0cmlidXRlcywKICAgICAgICAgICAgICAgICAgaW5kaWNlczogbmV3SW5kaWNlcywKICAgICAgICAgICAgICAgICAgcHJpbWl0aXZlVHlwZTogZ2VvbWV0cnkucHJpbWl0aXZlVHlwZSwKICAgICAgICAgICAgICAgICAgYm91bmRpbmdTcGhlcmU6IGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlLAogICAgICAgICAgICAgICAgICBib3VuZGluZ1NwaGVyZUNWOiBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZUNWCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgb2xkVG9OZXdJbmRleCA9IFtdOwogICAgICAgICAgICAgIG5ld0luZGljZXMgPSBbXTsKICAgICAgICAgICAgICBjdXJyZW50SW5kZXggPSAwOwogICAgICAgICAgICAgIG5ld0F0dHJpYnV0ZXMgPSBjb3B5QXR0cmlidXRlc0Rlc2NyaXB0aW9ucyhnZW9tZXRyeS5hdHRyaWJ1dGVzKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgaWYgKG5ld0luZGljZXMubGVuZ3RoICE9PSAwKSB7CiAgICAgICAgICAgIGdlb21ldHJpZXMucHVzaCgKICAgICAgICAgICAgICBuZXcgR2VvbWV0cnlfZGVmYXVsdCh7CiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiBuZXdBdHRyaWJ1dGVzLAogICAgICAgICAgICAgICAgaW5kaWNlczogbmV3SW5kaWNlcywKICAgICAgICAgICAgICAgIHByaW1pdGl2ZVR5cGU6IGdlb21ldHJ5LnByaW1pdGl2ZVR5cGUsCiAgICAgICAgICAgICAgICBib3VuZGluZ1NwaGVyZTogZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUsCiAgICAgICAgICAgICAgICBib3VuZGluZ1NwaGVyZUNWOiBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZUNWCiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgZ2VvbWV0cmllcy5wdXNoKGdlb21ldHJ5KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGdlb21ldHJpZXM7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hQcm9qZWN0VG8yRENhcnRlc2lhbjMgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hQcm9qZWN0VG8yRENhcnRvZ3JhcGhpYyA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICBHZW9tZXRyeVBpcGVsaW5lLnByb2plY3RUbzJEID0gZnVuY3Rpb24oZ2VvbWV0cnksIGF0dHJpYnV0ZU5hbWUsIGF0dHJpYnV0ZU5hbWUzRCwgYXR0cmlidXRlTmFtZTJELCBwcm9qZWN0aW9uKSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoZ2VvbWV0cnkpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiZ2VvbWV0cnkgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGF0dHJpYnV0ZU5hbWUpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYXR0cmlidXRlTmFtZSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoYXR0cmlidXRlTmFtZTNEKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImF0dHJpYnV0ZU5hbWUzRCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoYXR0cmlidXRlTmFtZTJEKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImF0dHJpYnV0ZU5hbWUyRCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoZ2VvbWV0cnkuYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgICBgZ2VvbWV0cnkgbXVzdCBoYXZlIGF0dHJpYnV0ZSBtYXRjaGluZyB0aGUgYXR0cmlidXRlTmFtZSBhcmd1bWVudDogJHthdHRyaWJ1dGVOYW1lfS5gCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBpZiAoZ2VvbWV0cnkuYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXS5jb21wb25lbnREYXRhdHlwZSAhPT0gQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5ET1VCTEUpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgICAiVGhlIGF0dHJpYnV0ZSBjb21wb25lbnREYXRhdHlwZSBtdXN0IGJlIENvbXBvbmVudERhdGF0eXBlLkRPVUJMRS4iCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBjb25zdCBhdHRyaWJ1dGUgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdOwogICAgICAgIHByb2plY3Rpb24gPSBkZWZpbmVkX2RlZmF1bHQocHJvamVjdGlvbikgPyBwcm9qZWN0aW9uIDogbmV3IEdlb2dyYXBoaWNQcm9qZWN0aW9uX2RlZmF1bHQoKTsKICAgICAgICBjb25zdCBlbGxpcHNvaWQgPSBwcm9qZWN0aW9uLmVsbGlwc29pZDsKICAgICAgICBjb25zdCB2YWx1ZXMzRCA9IGF0dHJpYnV0ZS52YWx1ZXM7CiAgICAgICAgY29uc3QgcHJvamVjdGVkVmFsdWVzID0gbmV3IEZsb2F0NjRBcnJheSh2YWx1ZXMzRC5sZW5ndGgpOwogICAgICAgIGxldCBpbmRleCA9IDA7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZXMzRC5sZW5ndGg7IGkgKz0gMykgewogICAgICAgICAgY29uc3QgdmFsdWUgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KAogICAgICAgICAgICB2YWx1ZXMzRCwKICAgICAgICAgICAgaSwKICAgICAgICAgICAgc2NyYXRjaFByb2plY3RUbzJEQ2FydGVzaWFuMwogICAgICAgICAgKTsKICAgICAgICAgIGNvbnN0IGxvbkxhdCA9IGVsbGlwc29pZC5jYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpYygKICAgICAgICAgICAgdmFsdWUsCiAgICAgICAgICAgIHNjcmF0Y2hQcm9qZWN0VG8yRENhcnRvZ3JhcGhpYwogICAgICAgICAgKTsKICAgICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGxvbkxhdCkpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgICAgYENvdWxkIG5vdCBwcm9qZWN0IHBvaW50ICgke3ZhbHVlLnh9LCAke3ZhbHVlLnl9LCAke3ZhbHVlLnp9KSB0byAyRC5gCiAgICAgICAgICAgICk7CiAgICAgICAgICB9CiAgICAgICAgICBjb25zdCBwcm9qZWN0ZWRMb25MYXQgPSBwcm9qZWN0aW9uLnByb2plY3QoCiAgICAgICAgICAgIGxvbkxhdCwKICAgICAgICAgICAgc2NyYXRjaFByb2plY3RUbzJEQ2FydGVzaWFuMwogICAgICAgICAgKTsKICAgICAgICAgIHByb2plY3RlZFZhbHVlc1tpbmRleCsrXSA9IHByb2plY3RlZExvbkxhdC54OwogICAgICAgICAgcHJvamVjdGVkVmFsdWVzW2luZGV4KytdID0gcHJvamVjdGVkTG9uTGF0Lnk7CiAgICAgICAgICBwcm9qZWN0ZWRWYWx1ZXNbaW5kZXgrK10gPSBwcm9qZWN0ZWRMb25MYXQuejsKICAgICAgICB9CiAgICAgICAgZ2VvbWV0cnkuYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lM0RdID0gYXR0cmlidXRlOwogICAgICAgIGdlb21ldHJ5LmF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZTJEXSA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkRPVUJMRSwKICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgICB2YWx1ZXM6IHByb2plY3RlZFZhbHVlcwogICAgICAgIH0pOwogICAgICAgIGRlbGV0ZSBnZW9tZXRyeS5hdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdOwogICAgICAgIHJldHVybiBnZW9tZXRyeTsKICAgICAgfTsKICAgICAgZW5jb2RlZFJlc3VsdCA9IHsKICAgICAgICBoaWdoOiAwLAogICAgICAgIGxvdzogMAogICAgICB9OwogICAgICBHZW9tZXRyeVBpcGVsaW5lLmVuY29kZUF0dHJpYnV0ZSA9IGZ1bmN0aW9uKGdlb21ldHJ5LCBhdHRyaWJ1dGVOYW1lLCBhdHRyaWJ1dGVIaWdoTmFtZSwgYXR0cmlidXRlTG93TmFtZSkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGdlb21ldHJ5KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImdlb21ldHJ5IGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChhdHRyaWJ1dGVOYW1lKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImF0dHJpYnV0ZU5hbWUgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGF0dHJpYnV0ZUhpZ2hOYW1lKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImF0dHJpYnV0ZUhpZ2hOYW1lIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChhdHRyaWJ1dGVMb3dOYW1lKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImF0dHJpYnV0ZUxvd05hbWUgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGdlb21ldHJ5LmF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV0pKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgYGdlb21ldHJ5IG11c3QgaGF2ZSBhdHRyaWJ1dGUgbWF0Y2hpbmcgdGhlIGF0dHJpYnV0ZU5hbWUgYXJndW1lbnQ6ICR7YXR0cmlidXRlTmFtZX0uYAogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgaWYgKGdlb21ldHJ5LmF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV0uY29tcG9uZW50RGF0YXR5cGUgIT09IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRE9VQkxFKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgIlRoZSBhdHRyaWJ1dGUgY29tcG9uZW50RGF0YXR5cGUgbXVzdCBiZSBDb21wb25lbnREYXRhdHlwZS5ET1VCTEUuIgogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgYXR0cmlidXRlID0gZ2VvbWV0cnkuYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXTsKICAgICAgICBjb25zdCB2YWx1ZXMgPSBhdHRyaWJ1dGUudmFsdWVzOwogICAgICAgIGNvbnN0IGxlbmd0aCA9IHZhbHVlcy5sZW5ndGg7CiAgICAgICAgY29uc3QgaGlnaFZhbHVlcyA9IG5ldyBGbG9hdDMyQXJyYXkobGVuZ3RoKTsKICAgICAgICBjb25zdCBsb3dWYWx1ZXMgPSBuZXcgRmxvYXQzMkFycmF5KGxlbmd0aCk7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgICAgICAgRW5jb2RlZENhcnRlc2lhbjNfZGVmYXVsdC5lbmNvZGUodmFsdWVzW2ldLCBlbmNvZGVkUmVzdWx0KTsKICAgICAgICAgIGhpZ2hWYWx1ZXNbaV0gPSBlbmNvZGVkUmVzdWx0LmhpZ2g7CiAgICAgICAgICBsb3dWYWx1ZXNbaV0gPSBlbmNvZGVkUmVzdWx0LmxvdzsKICAgICAgICB9CiAgICAgICAgY29uc3QgY29tcG9uZW50c1BlckF0dHJpYnV0ZSA9IGF0dHJpYnV0ZS5jb21wb25lbnRzUGVyQXR0cmlidXRlOwogICAgICAgIGdlb21ldHJ5LmF0dHJpYnV0ZXNbYXR0cmlidXRlSGlnaE5hbWVdID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlLAogICAgICAgICAgdmFsdWVzOiBoaWdoVmFsdWVzCiAgICAgICAgfSk7CiAgICAgICAgZ2VvbWV0cnkuYXR0cmlidXRlc1thdHRyaWJ1dGVMb3dOYW1lXSA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkZMT0FULAogICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZSwKICAgICAgICAgIHZhbHVlczogbG93VmFsdWVzCiAgICAgICAgfSk7CiAgICAgICAgZGVsZXRlIGdlb21ldHJ5LmF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV07CiAgICAgICAgcmV0dXJuIGdlb21ldHJ5OwogICAgICB9OwogICAgICBzY3JhdGNoQ2FydGVzaWFuMzMgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGludmVyc2VUcmFuc3Bvc2UgPSBuZXcgTWF0cml4NF9kZWZhdWx0KCk7CiAgICAgIG5vcm1hbE1hdHJpeCA9IG5ldyBNYXRyaXgzX2RlZmF1bHQoKTsKICAgICAgR2VvbWV0cnlQaXBlbGluZS50cmFuc2Zvcm1Ub1dvcmxkQ29vcmRpbmF0ZXMgPSBmdW5jdGlvbihpbnN0YW5jZSkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGluc3RhbmNlKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImluc3RhbmNlIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBtb2RlbE1hdHJpeCA9IGluc3RhbmNlLm1vZGVsTWF0cml4OwogICAgICAgIGlmIChNYXRyaXg0X2RlZmF1bHQuZXF1YWxzKG1vZGVsTWF0cml4LCBNYXRyaXg0X2RlZmF1bHQuSURFTlRJVFkpKSB7CiAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBpbnN0YW5jZS5nZW9tZXRyeS5hdHRyaWJ1dGVzOwogICAgICAgIHRyYW5zZm9ybVBvaW50KG1vZGVsTWF0cml4LCBhdHRyaWJ1dGVzLnBvc2l0aW9uKTsKICAgICAgICB0cmFuc2Zvcm1Qb2ludChtb2RlbE1hdHJpeCwgYXR0cmlidXRlcy5wcmV2UG9zaXRpb24pOwogICAgICAgIHRyYW5zZm9ybVBvaW50KG1vZGVsTWF0cml4LCBhdHRyaWJ1dGVzLm5leHRQb3NpdGlvbik7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChhdHRyaWJ1dGVzLm5vcm1hbCkgfHwgZGVmaW5lZF9kZWZhdWx0KGF0dHJpYnV0ZXMudGFuZ2VudCkgfHwgZGVmaW5lZF9kZWZhdWx0KGF0dHJpYnV0ZXMuYml0YW5nZW50KSkgewogICAgICAgICAgTWF0cml4NF9kZWZhdWx0LmludmVyc2UobW9kZWxNYXRyaXgsIGludmVyc2VUcmFuc3Bvc2UpOwogICAgICAgICAgTWF0cml4NF9kZWZhdWx0LnRyYW5zcG9zZShpbnZlcnNlVHJhbnNwb3NlLCBpbnZlcnNlVHJhbnNwb3NlKTsKICAgICAgICAgIE1hdHJpeDRfZGVmYXVsdC5nZXRNYXRyaXgzKGludmVyc2VUcmFuc3Bvc2UsIG5vcm1hbE1hdHJpeCk7CiAgICAgICAgICB0cmFuc2Zvcm1WZWN0b3Iobm9ybWFsTWF0cml4LCBhdHRyaWJ1dGVzLm5vcm1hbCk7CiAgICAgICAgICB0cmFuc2Zvcm1WZWN0b3Iobm9ybWFsTWF0cml4LCBhdHRyaWJ1dGVzLnRhbmdlbnQpOwogICAgICAgICAgdHJhbnNmb3JtVmVjdG9yKG5vcm1hbE1hdHJpeCwgYXR0cmlidXRlcy5iaXRhbmdlbnQpOwogICAgICAgIH0KICAgICAgICBjb25zdCBib3VuZGluZ1NwaGVyZSA9IGluc3RhbmNlLmdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlOwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoYm91bmRpbmdTcGhlcmUpKSB7CiAgICAgICAgICBpbnN0YW5jZS5nZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSA9IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQudHJhbnNmb3JtKAogICAgICAgICAgICBib3VuZGluZ1NwaGVyZSwKICAgICAgICAgICAgbW9kZWxNYXRyaXgsCiAgICAgICAgICAgIGJvdW5kaW5nU3BoZXJlCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBpbnN0YW5jZS5tb2RlbE1hdHJpeCA9IE1hdHJpeDRfZGVmYXVsdC5jbG9uZShNYXRyaXg0X2RlZmF1bHQuSURFTlRJVFkpOwogICAgICAgIHJldHVybiBpbnN0YW5jZTsKICAgICAgfTsKICAgICAgdGVtcFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIEdlb21ldHJ5UGlwZWxpbmUuY29tYmluZUluc3RhbmNlcyA9IGZ1bmN0aW9uKGluc3RhbmNlcykgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGluc3RhbmNlcykgfHwgaW5zdGFuY2VzLmxlbmd0aCA8IDEpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgICAiaW5zdGFuY2VzIGlzIHJlcXVpcmVkIGFuZCBtdXN0IGhhdmUgbGVuZ3RoIGdyZWF0ZXIgdGhhbiB6ZXJvLiIKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGluc3RhbmNlR2VvbWV0cnkgPSBbXTsKICAgICAgICBjb25zdCBpbnN0YW5jZVNwbGl0R2VvbWV0cnkgPSBbXTsKICAgICAgICBjb25zdCBsZW5ndGggPSBpbnN0YW5jZXMubGVuZ3RoOwogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgICAgIGNvbnN0IGluc3RhbmNlID0gaW5zdGFuY2VzW2ldOwogICAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChpbnN0YW5jZS5nZW9tZXRyeSkpIHsKICAgICAgICAgICAgaW5zdGFuY2VHZW9tZXRyeS5wdXNoKGluc3RhbmNlKTsKICAgICAgICAgIH0gZWxzZSBpZiAoZGVmaW5lZF9kZWZhdWx0KGluc3RhbmNlLndlc3RIZW1pc3BoZXJlR2VvbWV0cnkpICYmIGRlZmluZWRfZGVmYXVsdChpbnN0YW5jZS5lYXN0SGVtaXNwaGVyZUdlb21ldHJ5KSkgewogICAgICAgICAgICBpbnN0YW5jZVNwbGl0R2VvbWV0cnkucHVzaChpbnN0YW5jZSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNvbnN0IGdlb21ldHJpZXMgPSBbXTsKICAgICAgICBpZiAoaW5zdGFuY2VHZW9tZXRyeS5sZW5ndGggPiAwKSB7CiAgICAgICAgICBnZW9tZXRyaWVzLnB1c2goY29tYmluZUdlb21ldHJpZXMoaW5zdGFuY2VHZW9tZXRyeSwgImdlb21ldHJ5IikpOwogICAgICAgIH0KICAgICAgICBpZiAoaW5zdGFuY2VTcGxpdEdlb21ldHJ5Lmxlbmd0aCA+IDApIHsKICAgICAgICAgIGdlb21ldHJpZXMucHVzaCgKICAgICAgICAgICAgY29tYmluZUdlb21ldHJpZXMoaW5zdGFuY2VTcGxpdEdlb21ldHJ5LCAid2VzdEhlbWlzcGhlcmVHZW9tZXRyeSIpCiAgICAgICAgICApOwogICAgICAgICAgZ2VvbWV0cmllcy5wdXNoKAogICAgICAgICAgICBjb21iaW5lR2VvbWV0cmllcyhpbnN0YW5jZVNwbGl0R2VvbWV0cnksICJlYXN0SGVtaXNwaGVyZUdlb21ldHJ5IikKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBnZW9tZXRyaWVzOwogICAgICB9OwogICAgICBub3JtYWwgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHYwID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICB2MSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgdjIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIEdlb21ldHJ5UGlwZWxpbmUuY29tcHV0ZU5vcm1hbCA9IGZ1bmN0aW9uKGdlb21ldHJ5KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoZ2VvbWV0cnkpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiZ2VvbWV0cnkgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24pIHx8ICFkZWZpbmVkX2RlZmF1bHQoZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXMpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgImdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzIGlzIHJlcXVpcmVkLiIKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGdlb21ldHJ5LmluZGljZXMpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiZ2VvbWV0cnkuaW5kaWNlcyBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKGdlb21ldHJ5LmluZGljZXMubGVuZ3RoIDwgMiB8fCBnZW9tZXRyeS5pbmRpY2VzLmxlbmd0aCAlIDMgIT09IDApIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgICAiZ2VvbWV0cnkuaW5kaWNlcyBsZW5ndGggbXVzdCBiZSBncmVhdGVyIHRoYW4gMCBhbmQgYmUgYSBtdWx0aXBsZSBvZiAzLiIKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIGlmIChnZW9tZXRyeS5wcmltaXRpdmVUeXBlICE9PSBQcmltaXRpdmVUeXBlX2RlZmF1bHQuVFJJQU5HTEVTKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgImdlb21ldHJ5LnByaW1pdGl2ZVR5cGUgbXVzdCBiZSBQcmltaXRpdmVUeXBlLlRSSUFOR0xFUy4iCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBjb25zdCBpbmRpY2VzID0gZ2VvbWV0cnkuaW5kaWNlczsKICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlczsKICAgICAgICBjb25zdCB2ZXJ0aWNlcyA9IGF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzOwogICAgICAgIGNvbnN0IG51bVZlcnRpY2VzID0gYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXMubGVuZ3RoIC8gMzsKICAgICAgICBjb25zdCBudW1JbmRpY2VzID0gaW5kaWNlcy5sZW5ndGg7CiAgICAgICAgY29uc3Qgbm9ybWFsc1BlclZlcnRleCA9IG5ldyBBcnJheShudW1WZXJ0aWNlcyk7CiAgICAgICAgY29uc3Qgbm9ybWFsc1BlclRyaWFuZ2xlID0gbmV3IEFycmF5KG51bUluZGljZXMgLyAzKTsKICAgICAgICBjb25zdCBub3JtYWxJbmRpY2VzID0gbmV3IEFycmF5KG51bUluZGljZXMpOwogICAgICAgIGxldCBpOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1WZXJ0aWNlczsgaSsrKSB7CiAgICAgICAgICBub3JtYWxzUGVyVmVydGV4W2ldID0gewogICAgICAgICAgICBpbmRleE9mZnNldDogMCwKICAgICAgICAgICAgY291bnQ6IDAsCiAgICAgICAgICAgIGN1cnJlbnRDb3VudDogMAogICAgICAgICAgfTsKICAgICAgICB9CiAgICAgICAgbGV0IGogPSAwOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1JbmRpY2VzOyBpICs9IDMpIHsKICAgICAgICAgIGNvbnN0IGkwID0gaW5kaWNlc1tpXTsKICAgICAgICAgIGNvbnN0IGkxID0gaW5kaWNlc1tpICsgMV07CiAgICAgICAgICBjb25zdCBpMiA9IGluZGljZXNbaSArIDJdOwogICAgICAgICAgY29uc3QgaTAzID0gaTAgKiAzOwogICAgICAgICAgY29uc3QgaTEzID0gaTEgKiAzOwogICAgICAgICAgY29uc3QgaTIzID0gaTIgKiAzOwogICAgICAgICAgdjAueCA9IHZlcnRpY2VzW2kwM107CiAgICAgICAgICB2MC55ID0gdmVydGljZXNbaTAzICsgMV07CiAgICAgICAgICB2MC56ID0gdmVydGljZXNbaTAzICsgMl07CiAgICAgICAgICB2MS54ID0gdmVydGljZXNbaTEzXTsKICAgICAgICAgIHYxLnkgPSB2ZXJ0aWNlc1tpMTMgKyAxXTsKICAgICAgICAgIHYxLnogPSB2ZXJ0aWNlc1tpMTMgKyAyXTsKICAgICAgICAgIHYyLnggPSB2ZXJ0aWNlc1tpMjNdOwogICAgICAgICAgdjIueSA9IHZlcnRpY2VzW2kyMyArIDFdOwogICAgICAgICAgdjIueiA9IHZlcnRpY2VzW2kyMyArIDJdOwogICAgICAgICAgbm9ybWFsc1BlclZlcnRleFtpMF0uY291bnQrKzsKICAgICAgICAgIG5vcm1hbHNQZXJWZXJ0ZXhbaTFdLmNvdW50Kys7CiAgICAgICAgICBub3JtYWxzUGVyVmVydGV4W2kyXS5jb3VudCsrOwogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHYxLCB2MCwgdjEpOwogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHYyLCB2MCwgdjIpOwogICAgICAgICAgbm9ybWFsc1BlclRyaWFuZ2xlW2pdID0gQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKHYxLCB2MiwgbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpKTsKICAgICAgICAgIGorKzsKICAgICAgICB9CiAgICAgICAgbGV0IGluZGV4T2Zmc2V0ID0gMDsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbnVtVmVydGljZXM7IGkrKykgewogICAgICAgICAgbm9ybWFsc1BlclZlcnRleFtpXS5pbmRleE9mZnNldCArPSBpbmRleE9mZnNldDsKICAgICAgICAgIGluZGV4T2Zmc2V0ICs9IG5vcm1hbHNQZXJWZXJ0ZXhbaV0uY291bnQ7CiAgICAgICAgfQogICAgICAgIGogPSAwOwogICAgICAgIGxldCB2ZXJ0ZXhOb3JtYWxEYXRhOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1JbmRpY2VzOyBpICs9IDMpIHsKICAgICAgICAgIHZlcnRleE5vcm1hbERhdGEgPSBub3JtYWxzUGVyVmVydGV4W2luZGljZXNbaV1dOwogICAgICAgICAgbGV0IGluZGV4ID0gdmVydGV4Tm9ybWFsRGF0YS5pbmRleE9mZnNldCArIHZlcnRleE5vcm1hbERhdGEuY3VycmVudENvdW50OwogICAgICAgICAgbm9ybWFsSW5kaWNlc1tpbmRleF0gPSBqOwogICAgICAgICAgdmVydGV4Tm9ybWFsRGF0YS5jdXJyZW50Q291bnQrKzsKICAgICAgICAgIHZlcnRleE5vcm1hbERhdGEgPSBub3JtYWxzUGVyVmVydGV4W2luZGljZXNbaSArIDFdXTsKICAgICAgICAgIGluZGV4ID0gdmVydGV4Tm9ybWFsRGF0YS5pbmRleE9mZnNldCArIHZlcnRleE5vcm1hbERhdGEuY3VycmVudENvdW50OwogICAgICAgICAgbm9ybWFsSW5kaWNlc1tpbmRleF0gPSBqOwogICAgICAgICAgdmVydGV4Tm9ybWFsRGF0YS5jdXJyZW50Q291bnQrKzsKICAgICAgICAgIHZlcnRleE5vcm1hbERhdGEgPSBub3JtYWxzUGVyVmVydGV4W2luZGljZXNbaSArIDJdXTsKICAgICAgICAgIGluZGV4ID0gdmVydGV4Tm9ybWFsRGF0YS5pbmRleE9mZnNldCArIHZlcnRleE5vcm1hbERhdGEuY3VycmVudENvdW50OwogICAgICAgICAgbm9ybWFsSW5kaWNlc1tpbmRleF0gPSBqOwogICAgICAgICAgdmVydGV4Tm9ybWFsRGF0YS5jdXJyZW50Q291bnQrKzsKICAgICAgICAgIGorKzsKICAgICAgICB9CiAgICAgICAgY29uc3Qgbm9ybWFsVmFsdWVzID0gbmV3IEZsb2F0MzJBcnJheShudW1WZXJ0aWNlcyAqIDMpOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1WZXJ0aWNlczsgaSsrKSB7CiAgICAgICAgICBjb25zdCBpMyA9IGkgKiAzOwogICAgICAgICAgdmVydGV4Tm9ybWFsRGF0YSA9IG5vcm1hbHNQZXJWZXJ0ZXhbaV07CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8sIG5vcm1hbCk7CiAgICAgICAgICBpZiAodmVydGV4Tm9ybWFsRGF0YS5jb3VudCA+IDApIHsKICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IHZlcnRleE5vcm1hbERhdGEuY291bnQ7IGorKykgewogICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoCiAgICAgICAgICAgICAgICBub3JtYWwsCiAgICAgICAgICAgICAgICBub3JtYWxzUGVyVHJpYW5nbGVbbm9ybWFsSW5kaWNlc1t2ZXJ0ZXhOb3JtYWxEYXRhLmluZGV4T2Zmc2V0ICsgal1dLAogICAgICAgICAgICAgICAgbm9ybWFsCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoQ2FydGVzaWFuM19kZWZhdWx0LmVxdWFsc0Vwc2lsb24oQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8sIG5vcm1hbCwgTWF0aF9kZWZhdWx0LkVQU0lMT04xMCkpIHsKICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoCiAgICAgICAgICAgICAgICBub3JtYWxzUGVyVHJpYW5nbGVbbm9ybWFsSW5kaWNlc1t2ZXJ0ZXhOb3JtYWxEYXRhLmluZGV4T2Zmc2V0XV0sCiAgICAgICAgICAgICAgICBub3JtYWwKICAgICAgICAgICAgICApOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoQ2FydGVzaWFuM19kZWZhdWx0LmVxdWFsc0Vwc2lsb24oQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8sIG5vcm1hbCwgTWF0aF9kZWZhdWx0LkVQU0lMT04xMCkpIHsKICAgICAgICAgICAgbm9ybWFsLnogPSAxOwogICAgICAgICAgfQogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShub3JtYWwsIG5vcm1hbCk7CiAgICAgICAgICBub3JtYWxWYWx1ZXNbaTNdID0gbm9ybWFsLng7CiAgICAgICAgICBub3JtYWxWYWx1ZXNbaTMgKyAxXSA9IG5vcm1hbC55OwogICAgICAgICAgbm9ybWFsVmFsdWVzW2kzICsgMl0gPSBub3JtYWwuejsKICAgICAgICB9CiAgICAgICAgZ2VvbWV0cnkuYXR0cmlidXRlcy5ub3JtYWwgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgICB2YWx1ZXM6IG5vcm1hbFZhbHVlcwogICAgICAgIH0pOwogICAgICAgIHJldHVybiBnZW9tZXRyeTsKICAgICAgfTsKICAgICAgbm9ybWFsU2NyYXRjaDIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIG5vcm1hbFNjYWxlID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICB0U2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgR2VvbWV0cnlQaXBlbGluZS5jb21wdXRlVGFuZ2VudEFuZEJpdGFuZ2VudCA9IGZ1bmN0aW9uKGdlb21ldHJ5KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoZ2VvbWV0cnkpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiZ2VvbWV0cnkgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzOwogICAgICAgIGNvbnN0IGluZGljZXMgPSBnZW9tZXRyeS5pbmRpY2VzOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGF0dHJpYnV0ZXMucG9zaXRpb24pIHx8ICFkZWZpbmVkX2RlZmF1bHQoYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXMpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgImdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzIGlzIHJlcXVpcmVkLiIKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGF0dHJpYnV0ZXMubm9ybWFsKSB8fCAhZGVmaW5lZF9kZWZhdWx0KGF0dHJpYnV0ZXMubm9ybWFsLnZhbHVlcykpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJnZW9tZXRyeS5hdHRyaWJ1dGVzLm5vcm1hbC52YWx1ZXMgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGF0dHJpYnV0ZXMuc3QpIHx8ICFkZWZpbmVkX2RlZmF1bHQoYXR0cmlidXRlcy5zdC52YWx1ZXMpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiZ2VvbWV0cnkuYXR0cmlidXRlcy5zdC52YWx1ZXMgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGluZGljZXMpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiZ2VvbWV0cnkuaW5kaWNlcyBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKGluZGljZXMubGVuZ3RoIDwgMiB8fCBpbmRpY2VzLmxlbmd0aCAlIDMgIT09IDApIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgICAiZ2VvbWV0cnkuaW5kaWNlcyBsZW5ndGggbXVzdCBiZSBncmVhdGVyIHRoYW4gMCBhbmQgYmUgYSBtdWx0aXBsZSBvZiAzLiIKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIGlmIChnZW9tZXRyeS5wcmltaXRpdmVUeXBlICE9PSBQcmltaXRpdmVUeXBlX2RlZmF1bHQuVFJJQU5HTEVTKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgImdlb21ldHJ5LnByaW1pdGl2ZVR5cGUgbXVzdCBiZSBQcmltaXRpdmVUeXBlLlRSSUFOR0xFUy4iCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBjb25zdCB2ZXJ0aWNlcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzOwogICAgICAgIGNvbnN0IG5vcm1hbHMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLm5vcm1hbC52YWx1ZXM7CiAgICAgICAgY29uc3Qgc3QgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnN0LnZhbHVlczsKICAgICAgICBjb25zdCBudW1WZXJ0aWNlcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzLmxlbmd0aCAvIDM7CiAgICAgICAgY29uc3QgbnVtSW5kaWNlcyA9IGluZGljZXMubGVuZ3RoOwogICAgICAgIGNvbnN0IHRhbjEgPSBuZXcgQXJyYXkobnVtVmVydGljZXMgKiAzKTsKICAgICAgICBsZXQgaTsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGFuMS5sZW5ndGg7IGkrKykgewogICAgICAgICAgdGFuMVtpXSA9IDA7CiAgICAgICAgfQogICAgICAgIGxldCBpMDM7CiAgICAgICAgbGV0IGkxMzsKICAgICAgICBsZXQgaTIzOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1JbmRpY2VzOyBpICs9IDMpIHsKICAgICAgICAgIGNvbnN0IGkwID0gaW5kaWNlc1tpXTsKICAgICAgICAgIGNvbnN0IGkxID0gaW5kaWNlc1tpICsgMV07CiAgICAgICAgICBjb25zdCBpMiA9IGluZGljZXNbaSArIDJdOwogICAgICAgICAgaTAzID0gaTAgKiAzOwogICAgICAgICAgaTEzID0gaTEgKiAzOwogICAgICAgICAgaTIzID0gaTIgKiAzOwogICAgICAgICAgY29uc3QgaTAyID0gaTAgKiAyOwogICAgICAgICAgY29uc3QgaTEyID0gaTEgKiAyOwogICAgICAgICAgY29uc3QgaTIyID0gaTIgKiAyOwogICAgICAgICAgY29uc3QgdXggPSB2ZXJ0aWNlc1tpMDNdOwogICAgICAgICAgY29uc3QgdXkgPSB2ZXJ0aWNlc1tpMDMgKyAxXTsKICAgICAgICAgIGNvbnN0IHV6ID0gdmVydGljZXNbaTAzICsgMl07CiAgICAgICAgICBjb25zdCB3eCA9IHN0W2kwMl07CiAgICAgICAgICBjb25zdCB3eSA9IHN0W2kwMiArIDFdOwogICAgICAgICAgY29uc3QgdDEgPSBzdFtpMTIgKyAxXSAtIHd5OwogICAgICAgICAgY29uc3QgdDIgPSBzdFtpMjIgKyAxXSAtIHd5OwogICAgICAgICAgY29uc3QgciA9IDEgLyAoKHN0W2kxMl0gLSB3eCkgKiB0MiAtIChzdFtpMjJdIC0gd3gpICogdDEpOwogICAgICAgICAgY29uc3Qgc2RpcnggPSAodDIgKiAodmVydGljZXNbaTEzXSAtIHV4KSAtIHQxICogKHZlcnRpY2VzW2kyM10gLSB1eCkpICogcjsKICAgICAgICAgIGNvbnN0IHNkaXJ5ID0gKHQyICogKHZlcnRpY2VzW2kxMyArIDFdIC0gdXkpIC0gdDEgKiAodmVydGljZXNbaTIzICsgMV0gLSB1eSkpICogcjsKICAgICAgICAgIGNvbnN0IHNkaXJ6ID0gKHQyICogKHZlcnRpY2VzW2kxMyArIDJdIC0gdXopIC0gdDEgKiAodmVydGljZXNbaTIzICsgMl0gLSB1eikpICogcjsKICAgICAgICAgIHRhbjFbaTAzXSArPSBzZGlyeDsKICAgICAgICAgIHRhbjFbaTAzICsgMV0gKz0gc2Rpcnk7CiAgICAgICAgICB0YW4xW2kwMyArIDJdICs9IHNkaXJ6OwogICAgICAgICAgdGFuMVtpMTNdICs9IHNkaXJ4OwogICAgICAgICAgdGFuMVtpMTMgKyAxXSArPSBzZGlyeTsKICAgICAgICAgIHRhbjFbaTEzICsgMl0gKz0gc2Rpcno7CiAgICAgICAgICB0YW4xW2kyM10gKz0gc2Rpcng7CiAgICAgICAgICB0YW4xW2kyMyArIDFdICs9IHNkaXJ5OwogICAgICAgICAgdGFuMVtpMjMgKyAyXSArPSBzZGlyejsKICAgICAgICB9CiAgICAgICAgY29uc3QgdGFuZ2VudFZhbHVlcyA9IG5ldyBGbG9hdDMyQXJyYXkobnVtVmVydGljZXMgKiAzKTsKICAgICAgICBjb25zdCBiaXRhbmdlbnRWYWx1ZXMgPSBuZXcgRmxvYXQzMkFycmF5KG51bVZlcnRpY2VzICogMyk7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IG51bVZlcnRpY2VzOyBpKyspIHsKICAgICAgICAgIGkwMyA9IGkgKiAzOwogICAgICAgICAgaTEzID0gaTAzICsgMTsKICAgICAgICAgIGkyMyA9IGkwMyArIDI7CiAgICAgICAgICBjb25zdCBuID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShub3JtYWxzLCBpMDMsIG5vcm1hbFNjcmF0Y2gyKTsKICAgICAgICAgIGNvbnN0IHQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KHRhbjEsIGkwMywgdFNjcmF0Y2gpOwogICAgICAgICAgY29uc3Qgc2NhbGFyID0gQ2FydGVzaWFuM19kZWZhdWx0LmRvdChuLCB0KTsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKG4sIHNjYWxhciwgbm9ybWFsU2NhbGUpOwogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QodCwgbm9ybWFsU2NhbGUsIHQpLCB0KTsKICAgICAgICAgIHRhbmdlbnRWYWx1ZXNbaTAzXSA9IHQueDsKICAgICAgICAgIHRhbmdlbnRWYWx1ZXNbaTEzXSA9IHQueTsKICAgICAgICAgIHRhbmdlbnRWYWx1ZXNbaTIzXSA9IHQuejsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKG4sIHQsIHQpLCB0KTsKICAgICAgICAgIGJpdGFuZ2VudFZhbHVlc1tpMDNdID0gdC54OwogICAgICAgICAgYml0YW5nZW50VmFsdWVzW2kxM10gPSB0Lnk7CiAgICAgICAgICBiaXRhbmdlbnRWYWx1ZXNbaTIzXSA9IHQuejsKICAgICAgICB9CiAgICAgICAgZ2VvbWV0cnkuYXR0cmlidXRlcy50YW5nZW50ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgICAgdmFsdWVzOiB0YW5nZW50VmFsdWVzCiAgICAgICAgfSk7CiAgICAgICAgZ2VvbWV0cnkuYXR0cmlidXRlcy5iaXRhbmdlbnQgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgICB2YWx1ZXM6IGJpdGFuZ2VudFZhbHVlcwogICAgICAgIH0pOwogICAgICAgIHJldHVybiBnZW9tZXRyeTsKICAgICAgfTsKICAgICAgc2NyYXRjaENhcnRlc2lhbjIyID0gbmV3IENhcnRlc2lhbjJfZGVmYXVsdCgpOwogICAgICB0b0VuY29kZTEgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHRvRW5jb2RlMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgdG9FbmNvZGUzID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBlbmNvZGVSZXN1bHQyID0gbmV3IENhcnRlc2lhbjJfZGVmYXVsdCgpOwogICAgICBHZW9tZXRyeVBpcGVsaW5lLmNvbXByZXNzVmVydGljZXMgPSBmdW5jdGlvbihnZW9tZXRyeSkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGdlb21ldHJ5KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImdlb21ldHJ5IGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBleHRydWRlQXR0cmlidXRlID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5leHRydWRlRGlyZWN0aW9uOwogICAgICAgIGxldCBpOwogICAgICAgIGxldCBudW1WZXJ0aWNlczsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGV4dHJ1ZGVBdHRyaWJ1dGUpKSB7CiAgICAgICAgICBjb25zdCBleHRydWRlRGlyZWN0aW9ucyA9IGV4dHJ1ZGVBdHRyaWJ1dGUudmFsdWVzOwogICAgICAgICAgbnVtVmVydGljZXMgPSBleHRydWRlRGlyZWN0aW9ucy5sZW5ndGggLyAzOwogICAgICAgICAgY29uc3QgY29tcHJlc3NlZERpcmVjdGlvbnMgPSBuZXcgRmxvYXQzMkFycmF5KG51bVZlcnRpY2VzICogMik7CiAgICAgICAgICBsZXQgaTIgPSAwOwogICAgICAgICAgZm9yIChpID0gMDsgaSA8IG51bVZlcnRpY2VzOyArK2kpIHsKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShleHRydWRlRGlyZWN0aW9ucywgaSAqIDMsIHRvRW5jb2RlMSk7CiAgICAgICAgICAgIGlmIChDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzKHRvRW5jb2RlMSwgQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8pKSB7CiAgICAgICAgICAgICAgaTIgKz0gMjsKICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbmNvZGVSZXN1bHQyID0gQXR0cmlidXRlQ29tcHJlc3Npb25fZGVmYXVsdC5vY3RFbmNvZGVJblJhbmdlKAogICAgICAgICAgICAgIHRvRW5jb2RlMSwKICAgICAgICAgICAgICA2NTUzNSwKICAgICAgICAgICAgICBlbmNvZGVSZXN1bHQyCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIGNvbXByZXNzZWREaXJlY3Rpb25zW2kyKytdID0gZW5jb2RlUmVzdWx0Mi54OwogICAgICAgICAgICBjb21wcmVzc2VkRGlyZWN0aW9uc1tpMisrXSA9IGVuY29kZVJlc3VsdDIueTsKICAgICAgICAgIH0KICAgICAgICAgIGdlb21ldHJ5LmF0dHJpYnV0ZXMuY29tcHJlc3NlZEF0dHJpYnV0ZXMgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkZMT0FULAogICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAyLAogICAgICAgICAgICB2YWx1ZXM6IGNvbXByZXNzZWREaXJlY3Rpb25zCiAgICAgICAgICB9KTsKICAgICAgICAgIGRlbGV0ZSBnZW9tZXRyeS5hdHRyaWJ1dGVzLmV4dHJ1ZGVEaXJlY3Rpb247CiAgICAgICAgICByZXR1cm4gZ2VvbWV0cnk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IG5vcm1hbEF0dHJpYnV0ZSA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMubm9ybWFsOwogICAgICAgIGNvbnN0IHN0QXR0cmlidXRlID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5zdDsKICAgICAgICBjb25zdCBoYXNOb3JtYWwgPSBkZWZpbmVkX2RlZmF1bHQobm9ybWFsQXR0cmlidXRlKTsKICAgICAgICBjb25zdCBoYXNTdCA9IGRlZmluZWRfZGVmYXVsdChzdEF0dHJpYnV0ZSk7CiAgICAgICAgaWYgKCFoYXNOb3JtYWwgJiYgIWhhc1N0KSB7CiAgICAgICAgICByZXR1cm4gZ2VvbWV0cnk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHRhbmdlbnRBdHRyaWJ1dGUgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnRhbmdlbnQ7CiAgICAgICAgY29uc3QgYml0YW5nZW50QXR0cmlidXRlID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5iaXRhbmdlbnQ7CiAgICAgICAgY29uc3QgaGFzVGFuZ2VudCA9IGRlZmluZWRfZGVmYXVsdCh0YW5nZW50QXR0cmlidXRlKTsKICAgICAgICBjb25zdCBoYXNCaXRhbmdlbnQgPSBkZWZpbmVkX2RlZmF1bHQoYml0YW5nZW50QXR0cmlidXRlKTsKICAgICAgICBsZXQgbm9ybWFsczsKICAgICAgICBsZXQgc3Q7CiAgICAgICAgbGV0IHRhbmdlbnRzOwogICAgICAgIGxldCBiaXRhbmdlbnRzOwogICAgICAgIGlmIChoYXNOb3JtYWwpIHsKICAgICAgICAgIG5vcm1hbHMgPSBub3JtYWxBdHRyaWJ1dGUudmFsdWVzOwogICAgICAgIH0KICAgICAgICBpZiAoaGFzU3QpIHsKICAgICAgICAgIHN0ID0gc3RBdHRyaWJ1dGUudmFsdWVzOwogICAgICAgIH0KICAgICAgICBpZiAoaGFzVGFuZ2VudCkgewogICAgICAgICAgdGFuZ2VudHMgPSB0YW5nZW50QXR0cmlidXRlLnZhbHVlczsKICAgICAgICB9CiAgICAgICAgaWYgKGhhc0JpdGFuZ2VudCkgewogICAgICAgICAgYml0YW5nZW50cyA9IGJpdGFuZ2VudEF0dHJpYnV0ZS52YWx1ZXM7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGxlbmd0aCA9IGhhc05vcm1hbCA/IG5vcm1hbHMubGVuZ3RoIDogc3QubGVuZ3RoOwogICAgICAgIGNvbnN0IG51bUNvbXBvbmVudHMgPSBoYXNOb3JtYWwgPyAzIDogMjsKICAgICAgICBudW1WZXJ0aWNlcyA9IGxlbmd0aCAvIG51bUNvbXBvbmVudHM7CiAgICAgICAgbGV0IGNvbXByZXNzZWRMZW5ndGggPSBudW1WZXJ0aWNlczsKICAgICAgICBsZXQgbnVtQ29tcHJlc3NlZENvbXBvbmVudHMgPSBoYXNTdCAmJiBoYXNOb3JtYWwgPyAyIDogMTsKICAgICAgICBudW1Db21wcmVzc2VkQ29tcG9uZW50cyArPSBoYXNUYW5nZW50IHx8IGhhc0JpdGFuZ2VudCA/IDEgOiAwOwogICAgICAgIGNvbXByZXNzZWRMZW5ndGggKj0gbnVtQ29tcHJlc3NlZENvbXBvbmVudHM7CiAgICAgICAgY29uc3QgY29tcHJlc3NlZEF0dHJpYnV0ZXMgPSBuZXcgRmxvYXQzMkFycmF5KGNvbXByZXNzZWRMZW5ndGgpOwogICAgICAgIGxldCBub3JtYWxJbmRleCA9IDA7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IG51bVZlcnRpY2VzOyArK2kpIHsKICAgICAgICAgIGlmIChoYXNTdCkgewogICAgICAgICAgICBDYXJ0ZXNpYW4yX2RlZmF1bHQuZnJvbUFycmF5KHN0LCBpICogMiwgc2NyYXRjaENhcnRlc2lhbjIyKTsKICAgICAgICAgICAgY29tcHJlc3NlZEF0dHJpYnV0ZXNbbm9ybWFsSW5kZXgrK10gPSBBdHRyaWJ1dGVDb21wcmVzc2lvbl9kZWZhdWx0LmNvbXByZXNzVGV4dHVyZUNvb3JkaW5hdGVzKHNjcmF0Y2hDYXJ0ZXNpYW4yMik7CiAgICAgICAgICB9CiAgICAgICAgICBjb25zdCBpbmRleCA9IGkgKiAzOwogICAgICAgICAgaWYgKGhhc05vcm1hbCAmJiBkZWZpbmVkX2RlZmF1bHQodGFuZ2VudHMpICYmIGRlZmluZWRfZGVmYXVsdChiaXRhbmdlbnRzKSkgewogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KG5vcm1hbHMsIGluZGV4LCB0b0VuY29kZTEpOwogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KHRhbmdlbnRzLCBpbmRleCwgdG9FbmNvZGUyKTsKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShiaXRhbmdlbnRzLCBpbmRleCwgdG9FbmNvZGUzKTsKICAgICAgICAgICAgQXR0cmlidXRlQ29tcHJlc3Npb25fZGVmYXVsdC5vY3RQYWNrKAogICAgICAgICAgICAgIHRvRW5jb2RlMSwKICAgICAgICAgICAgICB0b0VuY29kZTIsCiAgICAgICAgICAgICAgdG9FbmNvZGUzLAogICAgICAgICAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4yMgogICAgICAgICAgICApOwogICAgICAgICAgICBjb21wcmVzc2VkQXR0cmlidXRlc1tub3JtYWxJbmRleCsrXSA9IHNjcmF0Y2hDYXJ0ZXNpYW4yMi54OwogICAgICAgICAgICBjb21wcmVzc2VkQXR0cmlidXRlc1tub3JtYWxJbmRleCsrXSA9IHNjcmF0Y2hDYXJ0ZXNpYW4yMi55OwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYgKGhhc05vcm1hbCkgewogICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkobm9ybWFscywgaW5kZXgsIHRvRW5jb2RlMSk7CiAgICAgICAgICAgICAgY29tcHJlc3NlZEF0dHJpYnV0ZXNbbm9ybWFsSW5kZXgrK10gPSBBdHRyaWJ1dGVDb21wcmVzc2lvbl9kZWZhdWx0Lm9jdEVuY29kZUZsb2F0KHRvRW5jb2RlMSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGhhc1RhbmdlbnQpIHsKICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KHRhbmdlbnRzLCBpbmRleCwgdG9FbmNvZGUxKTsKICAgICAgICAgICAgICBjb21wcmVzc2VkQXR0cmlidXRlc1tub3JtYWxJbmRleCsrXSA9IEF0dHJpYnV0ZUNvbXByZXNzaW9uX2RlZmF1bHQub2N0RW5jb2RlRmxvYXQodG9FbmNvZGUxKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoaGFzQml0YW5nZW50KSB7CiAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShiaXRhbmdlbnRzLCBpbmRleCwgdG9FbmNvZGUxKTsKICAgICAgICAgICAgICBjb21wcmVzc2VkQXR0cmlidXRlc1tub3JtYWxJbmRleCsrXSA9IEF0dHJpYnV0ZUNvbXByZXNzaW9uX2RlZmF1bHQub2N0RW5jb2RlRmxvYXQodG9FbmNvZGUxKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBnZW9tZXRyeS5hdHRyaWJ1dGVzLmNvbXByZXNzZWRBdHRyaWJ1dGVzID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiBudW1Db21wcmVzc2VkQ29tcG9uZW50cywKICAgICAgICAgIHZhbHVlczogY29tcHJlc3NlZEF0dHJpYnV0ZXMKICAgICAgICB9KTsKICAgICAgICBpZiAoaGFzTm9ybWFsKSB7CiAgICAgICAgICBkZWxldGUgZ2VvbWV0cnkuYXR0cmlidXRlcy5ub3JtYWw7CiAgICAgICAgfQogICAgICAgIGlmIChoYXNTdCkgewogICAgICAgICAgZGVsZXRlIGdlb21ldHJ5LmF0dHJpYnV0ZXMuc3Q7CiAgICAgICAgfQogICAgICAgIGlmIChoYXNCaXRhbmdlbnQpIHsKICAgICAgICAgIGRlbGV0ZSBnZW9tZXRyeS5hdHRyaWJ1dGVzLmJpdGFuZ2VudDsKICAgICAgICB9CiAgICAgICAgaWYgKGhhc1RhbmdlbnQpIHsKICAgICAgICAgIGRlbGV0ZSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnRhbmdlbnQ7CiAgICAgICAgfQogICAgICAgIHJldHVybiBnZW9tZXRyeTsKICAgICAgfTsKICAgICAgYzMgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHUxID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICB1MiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgcTEgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHEyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzcGxpdFRyaWFuZ2xlUmVzdWx0ID0gewogICAgICAgIHBvc2l0aW9uczogbmV3IEFycmF5KDcpLAogICAgICAgIGluZGljZXM6IG5ldyBBcnJheSgzICogMykKICAgICAgfTsKICAgICAgaW50ZXJwb2xhdGVBbmRQYWNrQ2FydGVzaWFuNCA9IGdlbmVyYXRlQmFyeWNlbnRyaWNJbnRlcnBvbGF0ZUZ1bmN0aW9uKAogICAgICAgIENhcnRlc2lhbjRfZGVmYXVsdCwKICAgICAgICA0CiAgICAgICk7CiAgICAgIGludGVycG9sYXRlQW5kUGFja0NhcnRlc2lhbjMgPSBnZW5lcmF0ZUJhcnljZW50cmljSW50ZXJwb2xhdGVGdW5jdGlvbigKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQsCiAgICAgICAgMwogICAgICApOwogICAgICBpbnRlcnBvbGF0ZUFuZFBhY2tDYXJ0ZXNpYW4yID0gZ2VuZXJhdGVCYXJ5Y2VudHJpY0ludGVycG9sYXRlRnVuY3Rpb24oCiAgICAgICAgQ2FydGVzaWFuMl9kZWZhdWx0LAogICAgICAgIDIKICAgICAgKTsKICAgICAgaW50ZXJwb2xhdGVBbmRQYWNrQm9vbGVhbiA9IGZ1bmN0aW9uKGkwLCBpMSwgaTIsIGNvb3Jkcywgc291cmNlVmFsdWVzLCBjdXJyZW50VmFsdWVzLCBpbnNlcnRlZEluZGV4KSB7CiAgICAgICAgY29uc3QgdjEyID0gc291cmNlVmFsdWVzW2kwXSAqIGNvb3Jkcy54OwogICAgICAgIGNvbnN0IHYyMiA9IHNvdXJjZVZhbHVlc1tpMV0gKiBjb29yZHMueTsKICAgICAgICBjb25zdCB2MyA9IHNvdXJjZVZhbHVlc1tpMl0gKiBjb29yZHMuejsKICAgICAgICBjdXJyZW50VmFsdWVzW2luc2VydGVkSW5kZXhdID0gdjEyICsgdjIyICsgdjMgPiBNYXRoX2RlZmF1bHQuRVBTSUxPTjYgPyAxIDogMDsKICAgICAgfTsKICAgICAgcDBTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBwMVNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHAyU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgYmFyeWNlbnRyaWNTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBOQU1FRF9BVFRSSUJVVEVTID0gewogICAgICAgIHBvc2l0aW9uOiB0cnVlLAogICAgICAgIG5vcm1hbDogdHJ1ZSwKICAgICAgICBiaXRhbmdlbnQ6IHRydWUsCiAgICAgICAgdGFuZ2VudDogdHJ1ZSwKICAgICAgICBzdDogdHJ1ZSwKICAgICAgICBleHRydWRlRGlyZWN0aW9uOiB0cnVlLAogICAgICAgIGFwcGx5T2Zmc2V0OiB0cnVlCiAgICAgIH07CiAgICAgIHh6UGxhbmUgPSBQbGFuZV9kZWZhdWx0LmZyb21Qb2ludE5vcm1hbChDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTywgQ2FydGVzaWFuM19kZWZhdWx0LlVOSVRfWSk7CiAgICAgIG9mZnNldFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIG9mZnNldFBvaW50U2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgY2FydGVzaWFuMlNjcmF0Y2gwID0gbmV3IENhcnRlc2lhbjJfZGVmYXVsdCgpOwogICAgICBjYXJ0ZXNpYW4yU2NyYXRjaDEgPSBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCk7CiAgICAgIGNhcnRlc2lhbjNTY3JhdGNoMCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgY2FydGVzaWFuM1NjcmF0Y2gyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBjYXJ0ZXNpYW4zU2NyYXRjaDMgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGNhcnRlc2lhbjNTY3JhdGNoNCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgY2FydGVzaWFuM1NjcmF0Y2g1ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBjYXJ0ZXNpYW4zU2NyYXRjaDYgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGNhcnRlc2lhbjRTY3JhdGNoMCA9IG5ldyBDYXJ0ZXNpYW40X2RlZmF1bHQoKTsKICAgICAgb2Zmc2V0U2NhbGFyID0gNSAqIE1hdGhfZGVmYXVsdC5FUFNJTE9OOTsKICAgICAgY29wbGFuYXJPZmZzZXQgPSBNYXRoX2RlZmF1bHQuRVBTSUxPTjY7CiAgICAgIEdlb21ldHJ5UGlwZWxpbmUuc3BsaXRMb25naXR1ZGUgPSBmdW5jdGlvbihpbnN0YW5jZSkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGluc3RhbmNlKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImluc3RhbmNlIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBnZW9tZXRyeSA9IGluc3RhbmNlLmdlb21ldHJ5OwogICAgICAgIGNvbnN0IGJvdW5kaW5nU3BoZXJlID0gZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmU7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChib3VuZGluZ1NwaGVyZSkpIHsKICAgICAgICAgIGNvbnN0IG1pblggPSBib3VuZGluZ1NwaGVyZS5jZW50ZXIueCAtIGJvdW5kaW5nU3BoZXJlLnJhZGl1czsKICAgICAgICAgIGlmIChtaW5YID4gMCB8fCBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0LmludGVyc2VjdFBsYW5lKGJvdW5kaW5nU3BoZXJlLCBQbGFuZV9kZWZhdWx0Lk9SSUdJTl9aWF9QTEFORSkgIT09IEludGVyc2VjdF9kZWZhdWx0LklOVEVSU0VDVElORykgewogICAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChnZW9tZXRyeS5nZW9tZXRyeVR5cGUgIT09IEdlb21ldHJ5VHlwZV9kZWZhdWx0Lk5PTkUpIHsKICAgICAgICAgIHN3aXRjaCAoZ2VvbWV0cnkuZ2VvbWV0cnlUeXBlKSB7CiAgICAgICAgICAgIGNhc2UgR2VvbWV0cnlUeXBlX2RlZmF1bHQuUE9MWUxJTkVTOgogICAgICAgICAgICAgIHNwbGl0TG9uZ2l0dWRlUG9seWxpbmUoaW5zdGFuY2UpOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIEdlb21ldHJ5VHlwZV9kZWZhdWx0LlRSSUFOR0xFUzoKICAgICAgICAgICAgICBzcGxpdExvbmdpdHVkZVRyaWFuZ2xlcyhpbnN0YW5jZSk7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgR2VvbWV0cnlUeXBlX2RlZmF1bHQuTElORVM6CiAgICAgICAgICAgICAgc3BsaXRMb25naXR1ZGVMaW5lcyhpbnN0YW5jZSk7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGluZGV4UHJpbWl0aXZlKGdlb21ldHJ5KTsKICAgICAgICAgIGlmIChnZW9tZXRyeS5wcmltaXRpdmVUeXBlID09PSBQcmltaXRpdmVUeXBlX2RlZmF1bHQuVFJJQU5HTEVTKSB7CiAgICAgICAgICAgIHNwbGl0TG9uZ2l0dWRlVHJpYW5nbGVzKGluc3RhbmNlKTsKICAgICAgICAgIH0gZWxzZSBpZiAoZ2VvbWV0cnkucHJpbWl0aXZlVHlwZSA9PT0gUHJpbWl0aXZlVHlwZV9kZWZhdWx0LkxJTkVTKSB7CiAgICAgICAgICAgIHNwbGl0TG9uZ2l0dWRlTGluZXMoaW5zdGFuY2UpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gaW5zdGFuY2U7CiAgICAgIH07CiAgICAgIEdlb21ldHJ5UGlwZWxpbmVfZGVmYXVsdCA9IEdlb21ldHJ5UGlwZWxpbmU7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9PZmZzZXRHZW9tZXRyeUluc3RhbmNlQXR0cmlidXRlLmpzCiAgZnVuY3Rpb24gT2Zmc2V0R2VvbWV0cnlJbnN0YW5jZUF0dHJpYnV0ZSh4LCB5LCB6KSB7CiAgICB4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoeCwgMCk7CiAgICB5ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoeSwgMCk7CiAgICB6ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoeiwgMCk7CiAgICB0aGlzLnZhbHVlID0gbmV3IEZsb2F0MzJBcnJheShbeCwgeSwgel0pOwogIH0KICB2YXIgT2Zmc2V0R2VvbWV0cnlJbnN0YW5jZUF0dHJpYnV0ZV9kZWZhdWx0OwogIHZhciBpbml0X09mZnNldEdlb21ldHJ5SW5zdGFuY2VBdHRyaWJ1dGUgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL09mZnNldEdlb21ldHJ5SW5zdGFuY2VBdHRyaWJ1dGUuanMiKCkgewogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfQ29tcG9uZW50RGF0YXR5cGUoKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE9mZnNldEdlb21ldHJ5SW5zdGFuY2VBdHRyaWJ1dGUucHJvdG90eXBlLCB7CiAgICAgICAgLyoqCiAgICAgICAgICogVGhlIGRhdGF0eXBlIG9mIGVhY2ggY29tcG9uZW50IGluIHRoZSBhdHRyaWJ1dGUsIGUuZy4sIGluZGl2aWR1YWwgZWxlbWVudHMgaW4KICAgICAgICAgKiB7QGxpbmsgT2Zmc2V0R2VvbWV0cnlJbnN0YW5jZUF0dHJpYnV0ZSN2YWx1ZX0uCiAgICAgICAgICoKICAgICAgICAgKiBAbWVtYmVyb2YgT2Zmc2V0R2VvbWV0cnlJbnN0YW5jZUF0dHJpYnV0ZS5wcm90b3R5cGUKICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtDb21wb25lbnREYXRhdHlwZX0KICAgICAgICAgKiBAcmVhZG9ubHkKICAgICAgICAgKgogICAgICAgICAqIEBkZWZhdWx0IHtAbGluayBDb21wb25lbnREYXRhdHlwZS5GTE9BVH0KICAgICAgICAgKi8KICAgICAgICBjb21wb25lbnREYXRhdHlwZTogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQ7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBUaGUgbnVtYmVyIG9mIGNvbXBvbmVudHMgaW4gdGhlIGF0dHJpYnV0ZXMsIGkuZS4sIHtAbGluayBPZmZzZXRHZW9tZXRyeUluc3RhbmNlQXR0cmlidXRlI3ZhbHVlfS4KICAgICAgICAgKgogICAgICAgICAqIEBtZW1iZXJvZiBPZmZzZXRHZW9tZXRyeUluc3RhbmNlQXR0cmlidXRlLnByb3RvdHlwZQogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAcmVhZG9ubHkKICAgICAgICAgKgogICAgICAgICAqIEBkZWZhdWx0IDMKICAgICAgICAgKi8KICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gMzsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIFdoZW4gPGNvZGU+dHJ1ZTwvY29kZT4gYW5kIDxjb2RlPmNvbXBvbmVudERhdGF0eXBlPC9jb2RlPiBpcyBhbiBpbnRlZ2VyIGZvcm1hdCwKICAgICAgICAgKiBpbmRpY2F0ZSB0aGF0IHRoZSBjb21wb25lbnRzIHNob3VsZCBiZSBtYXBwZWQgdG8gdGhlIHJhbmdlIFswLCAxXSAodW5zaWduZWQpCiAgICAgICAgICogb3IgWy0xLCAxXSAoc2lnbmVkKSB3aGVuIHRoZXkgYXJlIGFjY2Vzc2VkIGFzIGZsb2F0aW5nLXBvaW50IGZvciByZW5kZXJpbmcuCiAgICAgICAgICoKICAgICAgICAgKiBAbWVtYmVyb2YgT2Zmc2V0R2VvbWV0cnlJbnN0YW5jZUF0dHJpYnV0ZS5wcm90b3R5cGUKICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtib29sZWFufQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqCiAgICAgICAgICogQGRlZmF1bHQgZmFsc2UKICAgICAgICAgKi8KICAgICAgICBub3JtYWxpemU6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgICBPZmZzZXRHZW9tZXRyeUluc3RhbmNlQXR0cmlidXRlLmZyb21DYXJ0ZXNpYW4zID0gZnVuY3Rpb24ob2Zmc2V0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJvZmZzZXQiLCBvZmZzZXQpOwogICAgICAgIHJldHVybiBuZXcgT2Zmc2V0R2VvbWV0cnlJbnN0YW5jZUF0dHJpYnV0ZShvZmZzZXQueCwgb2Zmc2V0LnksIG9mZnNldC56KTsKICAgICAgfTsKICAgICAgT2Zmc2V0R2VvbWV0cnlJbnN0YW5jZUF0dHJpYnV0ZS50b1ZhbHVlID0gZnVuY3Rpb24ob2Zmc2V0LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoIm9mZnNldCIsIG9mZnNldCk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IEZsb2F0MzJBcnJheShbb2Zmc2V0LngsIG9mZnNldC55LCBvZmZzZXQuel0pOwogICAgICAgIH0KICAgICAgICByZXN1bHRbMF0gPSBvZmZzZXQueDsKICAgICAgICByZXN1bHRbMV0gPSBvZmZzZXQueTsKICAgICAgICByZXN1bHRbMl0gPSBvZmZzZXQuejsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBPZmZzZXRHZW9tZXRyeUluc3RhbmNlQXR0cmlidXRlX2RlZmF1bHQgPSBPZmZzZXRHZW9tZXRyeUluc3RhbmNlQXR0cmlidXRlOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvV2ViTWVyY2F0b3JQcm9qZWN0aW9uLmpzCiAgZnVuY3Rpb24gV2ViTWVyY2F0b3JQcm9qZWN0aW9uKGVsbGlwc29pZCkgewogICAgdGhpcy5fZWxsaXBzb2lkID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoZWxsaXBzb2lkLCBFbGxpcHNvaWRfZGVmYXVsdC5XR1M4NCk7CiAgICB0aGlzLl9zZW1pbWFqb3JBeGlzID0gdGhpcy5fZWxsaXBzb2lkLm1heGltdW1SYWRpdXM7CiAgICB0aGlzLl9vbmVPdmVyU2VtaW1ham9yQXhpcyA9IDEgLyB0aGlzLl9zZW1pbWFqb3JBeGlzOwogIH0KICB2YXIgV2ViTWVyY2F0b3JQcm9qZWN0aW9uX2RlZmF1bHQ7CiAgdmFyIGluaXRfV2ViTWVyY2F0b3JQcm9qZWN0aW9uID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9XZWJNZXJjYXRvclByb2plY3Rpb24uanMiKCkgewogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DYXJ0b2dyYXBoaWMoKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFdlYk1lcmNhdG9yUHJvamVjdGlvbi5wcm90b3R5cGUsIHsKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIHRoZSB7QGxpbmsgRWxsaXBzb2lkfS4KICAgICAgICAgKgogICAgICAgICAqIEBtZW1iZXJvZiBXZWJNZXJjYXRvclByb2plY3Rpb24ucHJvdG90eXBlCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7RWxsaXBzb2lkfQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqLwogICAgICAgIGVsbGlwc29pZDogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VsbGlwc29pZDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgICBXZWJNZXJjYXRvclByb2plY3Rpb24ubWVyY2F0b3JBbmdsZVRvR2VvZGV0aWNMYXRpdHVkZSA9IGZ1bmN0aW9uKG1lcmNhdG9yQW5nbGUpIHsKICAgICAgICByZXR1cm4gTWF0aF9kZWZhdWx0LlBJX09WRVJfVFdPIC0gMiAqIE1hdGguYXRhbihNYXRoLmV4cCgtbWVyY2F0b3JBbmdsZSkpOwogICAgICB9OwogICAgICBXZWJNZXJjYXRvclByb2plY3Rpb24uZ2VvZGV0aWNMYXRpdHVkZVRvTWVyY2F0b3JBbmdsZSA9IGZ1bmN0aW9uKGxhdGl0dWRlKSB7CiAgICAgICAgaWYgKGxhdGl0dWRlID4gV2ViTWVyY2F0b3JQcm9qZWN0aW9uLk1heGltdW1MYXRpdHVkZSkgewogICAgICAgICAgbGF0aXR1ZGUgPSBXZWJNZXJjYXRvclByb2plY3Rpb24uTWF4aW11bUxhdGl0dWRlOwogICAgICAgIH0gZWxzZSBpZiAobGF0aXR1ZGUgPCAtV2ViTWVyY2F0b3JQcm9qZWN0aW9uLk1heGltdW1MYXRpdHVkZSkgewogICAgICAgICAgbGF0aXR1ZGUgPSAtV2ViTWVyY2F0b3JQcm9qZWN0aW9uLk1heGltdW1MYXRpdHVkZTsKICAgICAgICB9CiAgICAgICAgY29uc3Qgc2luTGF0aXR1ZGUgPSBNYXRoLnNpbihsYXRpdHVkZSk7CiAgICAgICAgcmV0dXJuIDAuNSAqIE1hdGgubG9nKCgxICsgc2luTGF0aXR1ZGUpIC8gKDEgLSBzaW5MYXRpdHVkZSkpOwogICAgICB9OwogICAgICBXZWJNZXJjYXRvclByb2plY3Rpb24uTWF4aW11bUxhdGl0dWRlID0gV2ViTWVyY2F0b3JQcm9qZWN0aW9uLm1lcmNhdG9yQW5nbGVUb0dlb2RldGljTGF0aXR1ZGUoTWF0aC5QSSk7CiAgICAgIFdlYk1lcmNhdG9yUHJvamVjdGlvbi5wcm90b3R5cGUucHJvamVjdCA9IGZ1bmN0aW9uKGNhcnRvZ3JhcGhpYzIsIHJlc3VsdCkgewogICAgICAgIGNvbnN0IHNlbWltYWpvckF4aXMgPSB0aGlzLl9zZW1pbWFqb3JBeGlzOwogICAgICAgIGNvbnN0IHggPSBjYXJ0b2dyYXBoaWMyLmxvbmdpdHVkZSAqIHNlbWltYWpvckF4aXM7CiAgICAgICAgY29uc3QgeSA9IFdlYk1lcmNhdG9yUHJvamVjdGlvbi5nZW9kZXRpY0xhdGl0dWRlVG9NZXJjYXRvckFuZ2xlKAogICAgICAgICAgY2FydG9ncmFwaGljMi5sYXRpdHVkZQogICAgICAgICkgKiBzZW1pbWFqb3JBeGlzOwogICAgICAgIGNvbnN0IHogPSBjYXJ0b2dyYXBoaWMyLmhlaWdodDsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCh4LCB5LCB6KTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LnggPSB4OwogICAgICAgIHJlc3VsdC55ID0geTsKICAgICAgICByZXN1bHQueiA9IHo7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgV2ViTWVyY2F0b3JQcm9qZWN0aW9uLnByb3RvdHlwZS51bnByb2plY3QgPSBmdW5jdGlvbihjYXJ0ZXNpYW4xMSwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoY2FydGVzaWFuMTEpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiY2FydGVzaWFuIGlzIHJlcXVpcmVkIik7CiAgICAgICAgfQogICAgICAgIGNvbnN0IG9uZU92ZXJFYXJ0aFNlbWltYWpvckF4aXMgPSB0aGlzLl9vbmVPdmVyU2VtaW1ham9yQXhpczsKICAgICAgICBjb25zdCBsb25naXR1ZGUgPSBjYXJ0ZXNpYW4xMS54ICogb25lT3ZlckVhcnRoU2VtaW1ham9yQXhpczsKICAgICAgICBjb25zdCBsYXRpdHVkZSA9IFdlYk1lcmNhdG9yUHJvamVjdGlvbi5tZXJjYXRvckFuZ2xlVG9HZW9kZXRpY0xhdGl0dWRlKAogICAgICAgICAgY2FydGVzaWFuMTEueSAqIG9uZU92ZXJFYXJ0aFNlbWltYWpvckF4aXMKICAgICAgICApOwogICAgICAgIGNvbnN0IGhlaWdodCA9IGNhcnRlc2lhbjExLno7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdChsb25naXR1ZGUsIGxhdGl0dWRlLCBoZWlnaHQpOwogICAgICAgIH0KICAgICAgICByZXN1bHQubG9uZ2l0dWRlID0gbG9uZ2l0dWRlOwogICAgICAgIHJlc3VsdC5sYXRpdHVkZSA9IGxhdGl0dWRlOwogICAgICAgIHJlc3VsdC5oZWlnaHQgPSBoZWlnaHQ7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgV2ViTWVyY2F0b3JQcm9qZWN0aW9uX2RlZmF1bHQgPSBXZWJNZXJjYXRvclByb2plY3Rpb247CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvU2NlbmUvUHJpbWl0aXZlUGlwZWxpbmUuanMKICBmdW5jdGlvbiB0cmFuc2Zvcm1Ub1dvcmxkQ29vcmRpbmF0ZXMoaW5zdGFuY2VzLCBwcmltaXRpdmVNb2RlbE1hdHJpeCwgc2NlbmUzRE9ubHkpIHsKICAgIGxldCB0b1dvcmxkID0gIXNjZW5lM0RPbmx5OwogICAgY29uc3QgbGVuZ3RoID0gaW5zdGFuY2VzLmxlbmd0aDsKICAgIGxldCBpOwogICAgaWYgKCF0b1dvcmxkICYmIGxlbmd0aCA+IDEpIHsKICAgICAgY29uc3QgbW9kZWxNYXRyaXggPSBpbnN0YW5jZXNbMF0ubW9kZWxNYXRyaXg7CiAgICAgIGZvciAoaSA9IDE7IGkgPCBsZW5ndGg7ICsraSkgewogICAgICAgIGlmICghTWF0cml4NF9kZWZhdWx0LmVxdWFscyhtb2RlbE1hdHJpeCwgaW5zdGFuY2VzW2ldLm1vZGVsTWF0cml4KSkgewogICAgICAgICAgdG9Xb3JsZCA9IHRydWU7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIGlmICh0b1dvcmxkKSB7CiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoaW5zdGFuY2VzW2ldLmdlb21ldHJ5KSkgewogICAgICAgICAgR2VvbWV0cnlQaXBlbGluZV9kZWZhdWx0LnRyYW5zZm9ybVRvV29ybGRDb29yZGluYXRlcyhpbnN0YW5jZXNbaV0pOwogICAgICAgIH0KICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgTWF0cml4NF9kZWZhdWx0Lm11bHRpcGx5VHJhbnNmb3JtYXRpb24oCiAgICAgICAgcHJpbWl0aXZlTW9kZWxNYXRyaXgsCiAgICAgICAgaW5zdGFuY2VzWzBdLm1vZGVsTWF0cml4LAogICAgICAgIHByaW1pdGl2ZU1vZGVsTWF0cml4CiAgICAgICk7CiAgICB9CiAgfQogIGZ1bmN0aW9uIGFkZEdlb21ldHJ5QmF0Y2hJZChnZW9tZXRyeSwgYmF0Y2hJZCkgewogICAgY29uc3QgYXR0cmlidXRlcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXM7CiAgICBjb25zdCBwb3NpdGlvbkF0dHIgPSBhdHRyaWJ1dGVzLnBvc2l0aW9uOwogICAgY29uc3QgbnVtYmVyT2ZDb21wb25lbnRzID0gcG9zaXRpb25BdHRyLnZhbHVlcy5sZW5ndGggLyBwb3NpdGlvbkF0dHIuY29tcG9uZW50c1BlckF0dHJpYnV0ZTsKICAgIGF0dHJpYnV0ZXMuYmF0Y2hJZCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDEsCiAgICAgIHZhbHVlczogbmV3IEZsb2F0MzJBcnJheShudW1iZXJPZkNvbXBvbmVudHMpCiAgICB9KTsKICAgIGNvbnN0IHZhbHVlcyA9IGF0dHJpYnV0ZXMuYmF0Y2hJZC52YWx1ZXM7CiAgICBmb3IgKGxldCBqID0gMDsgaiA8IG51bWJlck9mQ29tcG9uZW50czsgKytqKSB7CiAgICAgIHZhbHVlc1tqXSA9IGJhdGNoSWQ7CiAgICB9CiAgfQogIGZ1bmN0aW9uIGFkZEJhdGNoSWRzKGluc3RhbmNlcykgewogICAgY29uc3QgbGVuZ3RoID0gaW5zdGFuY2VzLmxlbmd0aDsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgY29uc3QgaW5zdGFuY2UgPSBpbnN0YW5jZXNbaV07CiAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoaW5zdGFuY2UuZ2VvbWV0cnkpKSB7CiAgICAgICAgYWRkR2VvbWV0cnlCYXRjaElkKGluc3RhbmNlLmdlb21ldHJ5LCBpKTsKICAgICAgfSBlbHNlIGlmIChkZWZpbmVkX2RlZmF1bHQoaW5zdGFuY2Uud2VzdEhlbWlzcGhlcmVHZW9tZXRyeSkgJiYgZGVmaW5lZF9kZWZhdWx0KGluc3RhbmNlLmVhc3RIZW1pc3BoZXJlR2VvbWV0cnkpKSB7CiAgICAgICAgYWRkR2VvbWV0cnlCYXRjaElkKGluc3RhbmNlLndlc3RIZW1pc3BoZXJlR2VvbWV0cnksIGkpOwogICAgICAgIGFkZEdlb21ldHJ5QmF0Y2hJZChpbnN0YW5jZS5lYXN0SGVtaXNwaGVyZUdlb21ldHJ5LCBpKTsKICAgICAgfQogICAgfQogIH0KICBmdW5jdGlvbiBnZW9tZXRyeVBpcGVsaW5lKHBhcmFtZXRlcnMpIHsKICAgIGNvbnN0IGluc3RhbmNlcyA9IHBhcmFtZXRlcnMuaW5zdGFuY2VzOwogICAgY29uc3QgcHJvamVjdGlvbiA9IHBhcmFtZXRlcnMucHJvamVjdGlvbjsKICAgIGNvbnN0IHVpbnRJbmRleFN1cHBvcnQgPSBwYXJhbWV0ZXJzLmVsZW1lbnRJbmRleFVpbnRTdXBwb3J0ZWQ7CiAgICBjb25zdCBzY2VuZTNET25seSA9IHBhcmFtZXRlcnMuc2NlbmUzRE9ubHk7CiAgICBjb25zdCB2ZXJ0ZXhDYWNoZU9wdGltaXplID0gcGFyYW1ldGVycy52ZXJ0ZXhDYWNoZU9wdGltaXplOwogICAgY29uc3QgY29tcHJlc3NWZXJ0aWNlcyA9IHBhcmFtZXRlcnMuY29tcHJlc3NWZXJ0aWNlczsKICAgIGNvbnN0IG1vZGVsTWF0cml4ID0gcGFyYW1ldGVycy5tb2RlbE1hdHJpeDsKICAgIGxldCBpOwogICAgbGV0IGdlb21ldHJ5OwogICAgbGV0IHByaW1pdGl2ZVR5cGU7CiAgICBsZXQgbGVuZ3RoID0gaW5zdGFuY2VzLmxlbmd0aDsKICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGluc3RhbmNlc1tpXS5nZW9tZXRyeSkpIHsKICAgICAgICBwcmltaXRpdmVUeXBlID0gaW5zdGFuY2VzW2ldLmdlb21ldHJ5LnByaW1pdGl2ZVR5cGU7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KICAgIGZvciAoaSA9IDE7IGkgPCBsZW5ndGg7ICsraSkgewogICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGluc3RhbmNlc1tpXS5nZW9tZXRyeSkgJiYgaW5zdGFuY2VzW2ldLmdlb21ldHJ5LnByaW1pdGl2ZVR5cGUgIT09IHByaW1pdGl2ZVR5cGUpIHsKICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICJBbGwgaW5zdGFuY2UgZ2VvbWV0cmllcyBtdXN0IGhhdmUgdGhlIHNhbWUgcHJpbWl0aXZlVHlwZS4iCiAgICAgICAgKTsKICAgICAgfQogICAgfQogICAgdHJhbnNmb3JtVG9Xb3JsZENvb3JkaW5hdGVzKGluc3RhbmNlcywgbW9kZWxNYXRyaXgsIHNjZW5lM0RPbmx5KTsKICAgIGlmICghc2NlbmUzRE9ubHkpIHsKICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChpbnN0YW5jZXNbaV0uZ2VvbWV0cnkpKSB7CiAgICAgICAgICBHZW9tZXRyeVBpcGVsaW5lX2RlZmF1bHQuc3BsaXRMb25naXR1ZGUoaW5zdGFuY2VzW2ldKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIGFkZEJhdGNoSWRzKGluc3RhbmNlcyk7CiAgICBpZiAodmVydGV4Q2FjaGVPcHRpbWl6ZSkgewogICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgICBjb25zdCBpbnN0YW5jZSA9IGluc3RhbmNlc1tpXTsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGluc3RhbmNlLmdlb21ldHJ5KSkgewogICAgICAgICAgR2VvbWV0cnlQaXBlbGluZV9kZWZhdWx0LnJlb3JkZXJGb3JQb3N0VmVydGV4Q2FjaGUoaW5zdGFuY2UuZ2VvbWV0cnkpOwogICAgICAgICAgR2VvbWV0cnlQaXBlbGluZV9kZWZhdWx0LnJlb3JkZXJGb3JQcmVWZXJ0ZXhDYWNoZShpbnN0YW5jZS5nZW9tZXRyeSk7CiAgICAgICAgfSBlbHNlIGlmIChkZWZpbmVkX2RlZmF1bHQoaW5zdGFuY2Uud2VzdEhlbWlzcGhlcmVHZW9tZXRyeSkgJiYgZGVmaW5lZF9kZWZhdWx0KGluc3RhbmNlLmVhc3RIZW1pc3BoZXJlR2VvbWV0cnkpKSB7CiAgICAgICAgICBHZW9tZXRyeVBpcGVsaW5lX2RlZmF1bHQucmVvcmRlckZvclBvc3RWZXJ0ZXhDYWNoZSgKICAgICAgICAgICAgaW5zdGFuY2Uud2VzdEhlbWlzcGhlcmVHZW9tZXRyeQogICAgICAgICAgKTsKICAgICAgICAgIEdlb21ldHJ5UGlwZWxpbmVfZGVmYXVsdC5yZW9yZGVyRm9yUHJlVmVydGV4Q2FjaGUoCiAgICAgICAgICAgIGluc3RhbmNlLndlc3RIZW1pc3BoZXJlR2VvbWV0cnkKICAgICAgICAgICk7CiAgICAgICAgICBHZW9tZXRyeVBpcGVsaW5lX2RlZmF1bHQucmVvcmRlckZvclBvc3RWZXJ0ZXhDYWNoZSgKICAgICAgICAgICAgaW5zdGFuY2UuZWFzdEhlbWlzcGhlcmVHZW9tZXRyeQogICAgICAgICAgKTsKICAgICAgICAgIEdlb21ldHJ5UGlwZWxpbmVfZGVmYXVsdC5yZW9yZGVyRm9yUHJlVmVydGV4Q2FjaGUoCiAgICAgICAgICAgIGluc3RhbmNlLmVhc3RIZW1pc3BoZXJlR2VvbWV0cnkKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBsZXQgZ2VvbWV0cmllcyA9IEdlb21ldHJ5UGlwZWxpbmVfZGVmYXVsdC5jb21iaW5lSW5zdGFuY2VzKGluc3RhbmNlcyk7CiAgICBsZW5ndGggPSBnZW9tZXRyaWVzLmxlbmd0aDsKICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgICBnZW9tZXRyeSA9IGdlb21ldHJpZXNbaV07CiAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzOwogICAgICBpZiAoIXNjZW5lM0RPbmx5KSB7CiAgICAgICAgZm9yIChjb25zdCBuYW1lIGluIGF0dHJpYnV0ZXMpIHsKICAgICAgICAgIGlmIChhdHRyaWJ1dGVzLmhhc093blByb3BlcnR5KG5hbWUpICYmIGF0dHJpYnV0ZXNbbmFtZV0uY29tcG9uZW50RGF0YXR5cGUgPT09IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRE9VQkxFKSB7CiAgICAgICAgICAgIGNvbnN0IG5hbWUzRCA9IGAke25hbWV9M0RgOwogICAgICAgICAgICBjb25zdCBuYW1lMkQgPSBgJHtuYW1lfTJEYDsKICAgICAgICAgICAgR2VvbWV0cnlQaXBlbGluZV9kZWZhdWx0LnByb2plY3RUbzJEKAogICAgICAgICAgICAgIGdlb21ldHJ5LAogICAgICAgICAgICAgIG5hbWUsCiAgICAgICAgICAgICAgbmFtZTNELAogICAgICAgICAgICAgIG5hbWUyRCwKICAgICAgICAgICAgICBwcm9qZWN0aW9uCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUpICYmIG5hbWUgPT09ICJwb3NpdGlvbiIpIHsKICAgICAgICAgICAgICBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZUNWID0gQm91bmRpbmdTcGhlcmVfZGVmYXVsdC5mcm9tVmVydGljZXMoCiAgICAgICAgICAgICAgICBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uMkQudmFsdWVzCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBHZW9tZXRyeVBpcGVsaW5lX2RlZmF1bHQuZW5jb2RlQXR0cmlidXRlKAogICAgICAgICAgICAgIGdlb21ldHJ5LAogICAgICAgICAgICAgIG5hbWUzRCwKICAgICAgICAgICAgICBgJHtuYW1lM0R9SGlnaGAsCiAgICAgICAgICAgICAgYCR7bmFtZTNEfUxvd2AKICAgICAgICAgICAgKTsKICAgICAgICAgICAgR2VvbWV0cnlQaXBlbGluZV9kZWZhdWx0LmVuY29kZUF0dHJpYnV0ZSgKICAgICAgICAgICAgICBnZW9tZXRyeSwKICAgICAgICAgICAgICBuYW1lMkQsCiAgICAgICAgICAgICAgYCR7bmFtZTJEfUhpZ2hgLAogICAgICAgICAgICAgIGAke25hbWUyRH1Mb3dgCiAgICAgICAgICAgICk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIGZvciAoY29uc3QgbmFtZSBpbiBhdHRyaWJ1dGVzKSB7CiAgICAgICAgICBpZiAoYXR0cmlidXRlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiBhdHRyaWJ1dGVzW25hbWVdLmNvbXBvbmVudERhdGF0eXBlID09PSBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkRPVUJMRSkgewogICAgICAgICAgICBHZW9tZXRyeVBpcGVsaW5lX2RlZmF1bHQuZW5jb2RlQXR0cmlidXRlKAogICAgICAgICAgICAgIGdlb21ldHJ5LAogICAgICAgICAgICAgIG5hbWUsCiAgICAgICAgICAgICAgYCR7bmFtZX0zREhpZ2hgLAogICAgICAgICAgICAgIGAke25hbWV9M0RMb3dgCiAgICAgICAgICAgICk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmIChjb21wcmVzc1ZlcnRpY2VzKSB7CiAgICAgICAgR2VvbWV0cnlQaXBlbGluZV9kZWZhdWx0LmNvbXByZXNzVmVydGljZXMoZ2VvbWV0cnkpOwogICAgICB9CiAgICB9CiAgICBpZiAoIXVpbnRJbmRleFN1cHBvcnQpIHsKICAgICAgbGV0IHNwbGl0R2VvbWV0cmllcyA9IFtdOwogICAgICBsZW5ndGggPSBnZW9tZXRyaWVzLmxlbmd0aDsKICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgZ2VvbWV0cnkgPSBnZW9tZXRyaWVzW2ldOwogICAgICAgIHNwbGl0R2VvbWV0cmllcyA9IHNwbGl0R2VvbWV0cmllcy5jb25jYXQoCiAgICAgICAgICBHZW9tZXRyeVBpcGVsaW5lX2RlZmF1bHQuZml0VG9VbnNpZ25lZFNob3J0SW5kaWNlcyhnZW9tZXRyeSkKICAgICAgICApOwogICAgICB9CiAgICAgIGdlb21ldHJpZXMgPSBzcGxpdEdlb21ldHJpZXM7CiAgICB9CiAgICByZXR1cm4gZ2VvbWV0cmllczsKICB9CiAgZnVuY3Rpb24gY3JlYXRlUGlja09mZnNldHMoaW5zdGFuY2VzLCBnZW9tZXRyeU5hbWUsIGdlb21ldHJpZXMsIHBpY2tPZmZzZXRzKSB7CiAgICBsZXQgb2Zmc2V0OwogICAgbGV0IGluZGV4Q291bnQ7CiAgICBsZXQgZ2VvbWV0cnlJbmRleDsKICAgIGNvbnN0IG9mZnNldEluZGV4ID0gcGlja09mZnNldHMubGVuZ3RoIC0gMTsKICAgIGlmIChvZmZzZXRJbmRleCA+PSAwKSB7CiAgICAgIGNvbnN0IHBpY2tPZmZzZXQgPSBwaWNrT2Zmc2V0c1tvZmZzZXRJbmRleF07CiAgICAgIG9mZnNldCA9IHBpY2tPZmZzZXQub2Zmc2V0ICsgcGlja09mZnNldC5jb3VudDsKICAgICAgZ2VvbWV0cnlJbmRleCA9IHBpY2tPZmZzZXQuaW5kZXg7CiAgICAgIGluZGV4Q291bnQgPSBnZW9tZXRyaWVzW2dlb21ldHJ5SW5kZXhdLmluZGljZXMubGVuZ3RoOwogICAgfSBlbHNlIHsKICAgICAgb2Zmc2V0ID0gMDsKICAgICAgZ2VvbWV0cnlJbmRleCA9IDA7CiAgICAgIGluZGV4Q291bnQgPSBnZW9tZXRyaWVzW2dlb21ldHJ5SW5kZXhdLmluZGljZXMubGVuZ3RoOwogICAgfQogICAgY29uc3QgbGVuZ3RoID0gaW5zdGFuY2VzLmxlbmd0aDsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgY29uc3QgaW5zdGFuY2UgPSBpbnN0YW5jZXNbaV07CiAgICAgIGNvbnN0IGdlb21ldHJ5ID0gaW5zdGFuY2VbZ2VvbWV0cnlOYW1lXTsKICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoZ2VvbWV0cnkpKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgY29uc3QgY291bnQgPSBnZW9tZXRyeS5pbmRpY2VzLmxlbmd0aDsKICAgICAgaWYgKG9mZnNldCArIGNvdW50ID4gaW5kZXhDb3VudCkgewogICAgICAgIG9mZnNldCA9IDA7CiAgICAgICAgaW5kZXhDb3VudCA9IGdlb21ldHJpZXNbKytnZW9tZXRyeUluZGV4XS5pbmRpY2VzLmxlbmd0aDsKICAgICAgfQogICAgICBwaWNrT2Zmc2V0cy5wdXNoKHsKICAgICAgICBpbmRleDogZ2VvbWV0cnlJbmRleCwKICAgICAgICBvZmZzZXQsCiAgICAgICAgY291bnQKICAgICAgfSk7CiAgICAgIG9mZnNldCArPSBjb3VudDsKICAgIH0KICB9CiAgZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2VQaWNrT2Zmc2V0cyhpbnN0YW5jZXMsIGdlb21ldHJpZXMpIHsKICAgIGNvbnN0IHBpY2tPZmZzZXRzID0gW107CiAgICBjcmVhdGVQaWNrT2Zmc2V0cyhpbnN0YW5jZXMsICJnZW9tZXRyeSIsIGdlb21ldHJpZXMsIHBpY2tPZmZzZXRzKTsKICAgIGNyZWF0ZVBpY2tPZmZzZXRzKAogICAgICBpbnN0YW5jZXMsCiAgICAgICJ3ZXN0SGVtaXNwaGVyZUdlb21ldHJ5IiwKICAgICAgZ2VvbWV0cmllcywKICAgICAgcGlja09mZnNldHMKICAgICk7CiAgICBjcmVhdGVQaWNrT2Zmc2V0cygKICAgICAgaW5zdGFuY2VzLAogICAgICAiZWFzdEhlbWlzcGhlcmVHZW9tZXRyeSIsCiAgICAgIGdlb21ldHJpZXMsCiAgICAgIHBpY2tPZmZzZXRzCiAgICApOwogICAgcmV0dXJuIHBpY2tPZmZzZXRzOwogIH0KICBmdW5jdGlvbiB0cmFuc2Zlckdlb21ldHJ5KGdlb21ldHJ5LCB0cmFuc2ZlcmFibGVPYmplY3RzKSB7CiAgICBjb25zdCBhdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlczsKICAgIGZvciAoY29uc3QgbmFtZSBpbiBhdHRyaWJ1dGVzKSB7CiAgICAgIGlmIChhdHRyaWJ1dGVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7CiAgICAgICAgY29uc3QgYXR0cmlidXRlID0gYXR0cmlidXRlc1tuYW1lXTsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGF0dHJpYnV0ZSkgJiYgZGVmaW5lZF9kZWZhdWx0KGF0dHJpYnV0ZS52YWx1ZXMpKSB7CiAgICAgICAgICB0cmFuc2ZlcmFibGVPYmplY3RzLnB1c2goYXR0cmlidXRlLnZhbHVlcy5idWZmZXIpOwogICAgICAgIH0KICAgICAgfQogICAgfQogICAgaWYgKGRlZmluZWRfZGVmYXVsdChnZW9tZXRyeS5pbmRpY2VzKSkgewogICAgICB0cmFuc2ZlcmFibGVPYmplY3RzLnB1c2goZ2VvbWV0cnkuaW5kaWNlcy5idWZmZXIpOwogICAgfQogIH0KICBmdW5jdGlvbiB0cmFuc2Zlckdlb21ldHJpZXMoZ2VvbWV0cmllcywgdHJhbnNmZXJhYmxlT2JqZWN0cykgewogICAgY29uc3QgbGVuZ3RoID0gZ2VvbWV0cmllcy5sZW5ndGg7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgIHRyYW5zZmVyR2VvbWV0cnkoZ2VvbWV0cmllc1tpXSwgdHJhbnNmZXJhYmxlT2JqZWN0cyk7CiAgICB9CiAgfQogIGZ1bmN0aW9uIGNvdW50Q3JlYXRlR2VvbWV0cnlSZXN1bHRzKGl0ZW1zKSB7CiAgICBsZXQgY291bnQgPSAxOwogICAgY29uc3QgbGVuZ3RoID0gaXRlbXMubGVuZ3RoOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICBjb25zdCBnZW9tZXRyeSA9IGl0ZW1zW2ldOwogICAgICArK2NvdW50OwogICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChnZW9tZXRyeSkpIHsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBjb25zdCBhdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlczsKICAgICAgY291bnQgKz0gNyArIDIgKiBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0LnBhY2tlZExlbmd0aCArIChkZWZpbmVkX2RlZmF1bHQoZ2VvbWV0cnkuaW5kaWNlcykgPyBnZW9tZXRyeS5pbmRpY2VzLmxlbmd0aCA6IDApOwogICAgICBmb3IgKGNvbnN0IHByb3BlcnR5IGluIGF0dHJpYnV0ZXMpIHsKICAgICAgICBpZiAoYXR0cmlidXRlcy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkgJiYgZGVmaW5lZF9kZWZhdWx0KGF0dHJpYnV0ZXNbcHJvcGVydHldKSkgewogICAgICAgICAgY29uc3QgYXR0cmlidXRlID0gYXR0cmlidXRlc1twcm9wZXJ0eV07CiAgICAgICAgICBjb3VudCArPSA1ICsgYXR0cmlidXRlLnZhbHVlcy5sZW5ndGg7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICByZXR1cm4gY291bnQ7CiAgfQogIGZ1bmN0aW9uIHBhY2tJbnN0YW5jZXNGb3JDb21iaW5lKGluc3RhbmNlcywgdHJhbnNmZXJhYmxlT2JqZWN0cykgewogICAgY29uc3QgbGVuZ3RoID0gaW5zdGFuY2VzLmxlbmd0aDsKICAgIGNvbnN0IHBhY2tlZERhdGEgPSBuZXcgRmxvYXQ2NEFycmF5KDEgKyBsZW5ndGggKiAxOSk7CiAgICBsZXQgY291bnQgPSAwOwogICAgcGFja2VkRGF0YVtjb3VudCsrXSA9IGxlbmd0aDsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgY29uc3QgaW5zdGFuY2UgPSBpbnN0YW5jZXNbaV07CiAgICAgIE1hdHJpeDRfZGVmYXVsdC5wYWNrKGluc3RhbmNlLm1vZGVsTWF0cml4LCBwYWNrZWREYXRhLCBjb3VudCk7CiAgICAgIGNvdW50ICs9IE1hdHJpeDRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoaW5zdGFuY2UuYXR0cmlidXRlcykgJiYgZGVmaW5lZF9kZWZhdWx0KGluc3RhbmNlLmF0dHJpYnV0ZXMub2Zmc2V0KSkgewogICAgICAgIGNvbnN0IHZhbHVlcyA9IGluc3RhbmNlLmF0dHJpYnV0ZXMub2Zmc2V0LnZhbHVlOwogICAgICAgIHBhY2tlZERhdGFbY291bnRdID0gdmFsdWVzWzBdOwogICAgICAgIHBhY2tlZERhdGFbY291bnQgKyAxXSA9IHZhbHVlc1sxXTsKICAgICAgICBwYWNrZWREYXRhW2NvdW50ICsgMl0gPSB2YWx1ZXNbMl07CiAgICAgIH0KICAgICAgY291bnQgKz0gMzsKICAgIH0KICAgIHRyYW5zZmVyYWJsZU9iamVjdHMucHVzaChwYWNrZWREYXRhLmJ1ZmZlcik7CiAgICByZXR1cm4gcGFja2VkRGF0YTsKICB9CiAgZnVuY3Rpb24gdW5wYWNrSW5zdGFuY2VzRm9yQ29tYmluZShkYXRhKSB7CiAgICBjb25zdCBwYWNrZWRJbnN0YW5jZXMgPSBkYXRhOwogICAgY29uc3QgcmVzdWx0ID0gbmV3IEFycmF5KHBhY2tlZEluc3RhbmNlc1swXSk7CiAgICBsZXQgY291bnQgPSAwOwogICAgbGV0IGkgPSAxOwogICAgd2hpbGUgKGkgPCBwYWNrZWRJbnN0YW5jZXMubGVuZ3RoKSB7CiAgICAgIGNvbnN0IG1vZGVsTWF0cml4ID0gTWF0cml4NF9kZWZhdWx0LnVucGFjayhwYWNrZWRJbnN0YW5jZXMsIGkpOwogICAgICBsZXQgYXR0cmlidXRlczsKICAgICAgaSArPSBNYXRyaXg0X2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHBhY2tlZEluc3RhbmNlc1tpXSkpIHsKICAgICAgICBhdHRyaWJ1dGVzID0gewogICAgICAgICAgb2Zmc2V0OiBuZXcgT2Zmc2V0R2VvbWV0cnlJbnN0YW5jZUF0dHJpYnV0ZV9kZWZhdWx0KAogICAgICAgICAgICBwYWNrZWRJbnN0YW5jZXNbaV0sCiAgICAgICAgICAgIHBhY2tlZEluc3RhbmNlc1tpICsgMV0sCiAgICAgICAgICAgIHBhY2tlZEluc3RhbmNlc1tpICsgMl0KICAgICAgICAgICkKICAgICAgICB9OwogICAgICB9CiAgICAgIGkgKz0gMzsKICAgICAgcmVzdWx0W2NvdW50KytdID0gewogICAgICAgIG1vZGVsTWF0cml4LAogICAgICAgIGF0dHJpYnV0ZXMKICAgICAgfTsKICAgIH0KICAgIHJldHVybiByZXN1bHQ7CiAgfQogIGZ1bmN0aW9uIHBhY2tCb3VuZGluZ1NwaGVyZXMoYm91bmRpbmdTcGhlcmVzKSB7CiAgICBjb25zdCBsZW5ndGggPSBib3VuZGluZ1NwaGVyZXMubGVuZ3RoOwogICAgY29uc3QgYnVmZmVyTGVuZ3RoID0gMSArIChCb3VuZGluZ1NwaGVyZV9kZWZhdWx0LnBhY2tlZExlbmd0aCArIDEpICogbGVuZ3RoOwogICAgY29uc3QgYnVmZmVyID0gbmV3IEZsb2F0MzJBcnJheShidWZmZXJMZW5ndGgpOwogICAgbGV0IGJ1ZmZlckluZGV4ID0gMDsKICAgIGJ1ZmZlcltidWZmZXJJbmRleCsrXSA9IGxlbmd0aDsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgY29uc3QgYnMgPSBib3VuZGluZ1NwaGVyZXNbaV07CiAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGJzKSkgewogICAgICAgIGJ1ZmZlcltidWZmZXJJbmRleCsrXSA9IDA7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgYnVmZmVyW2J1ZmZlckluZGV4KytdID0gMTsKICAgICAgICBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0LnBhY2soYm91bmRpbmdTcGhlcmVzW2ldLCBidWZmZXIsIGJ1ZmZlckluZGV4KTsKICAgICAgfQogICAgICBidWZmZXJJbmRleCArPSBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgIH0KICAgIHJldHVybiBidWZmZXI7CiAgfQogIGZ1bmN0aW9uIHVucGFja0JvdW5kaW5nU3BoZXJlcyhidWZmZXIpIHsKICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBBcnJheShidWZmZXJbMF0pOwogICAgbGV0IGNvdW50ID0gMDsKICAgIGxldCBpID0gMTsKICAgIHdoaWxlIChpIDwgYnVmZmVyLmxlbmd0aCkgewogICAgICBpZiAoYnVmZmVyW2krK10gPT09IDEpIHsKICAgICAgICByZXN1bHRbY291bnRdID0gQm91bmRpbmdTcGhlcmVfZGVmYXVsdC51bnBhY2soYnVmZmVyLCBpKTsKICAgICAgfQogICAgICArK2NvdW50OwogICAgICBpICs9IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgfQogICAgcmV0dXJuIHJlc3VsdDsKICB9CiAgdmFyIFByaW1pdGl2ZVBpcGVsaW5lLCBQcmltaXRpdmVQaXBlbGluZV9kZWZhdWx0OwogIHZhciBpbml0X1ByaW1pdGl2ZVBpcGVsaW5lID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvU2NlbmUvUHJpbWl0aXZlUGlwZWxpbmUuanMiKCkgewogICAgICBpbml0X0JvdW5kaW5nU3BoZXJlKCk7CiAgICAgIGluaXRfQ29tcG9uZW50RGF0YXR5cGUoKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9HZW9ncmFwaGljUHJvamVjdGlvbigpOwogICAgICBpbml0X0dlb21ldHJ5KCk7CiAgICAgIGluaXRfR2VvbWV0cnlBdHRyaWJ1dGUoKTsKICAgICAgaW5pdF9HZW9tZXRyeUF0dHJpYnV0ZXMoKTsKICAgICAgaW5pdF9HZW9tZXRyeVBpcGVsaW5lKCk7CiAgICAgIGluaXRfSW5kZXhEYXRhdHlwZSgpOwogICAgICBpbml0X01hdHJpeDQoKTsKICAgICAgaW5pdF9PZmZzZXRHZW9tZXRyeUluc3RhbmNlQXR0cmlidXRlKCk7CiAgICAgIGluaXRfV2ViTWVyY2F0b3JQcm9qZWN0aW9uKCk7CiAgICAgIFByaW1pdGl2ZVBpcGVsaW5lID0ge307CiAgICAgIFByaW1pdGl2ZVBpcGVsaW5lLmNvbWJpbmVHZW9tZXRyeSA9IGZ1bmN0aW9uKHBhcmFtZXRlcnMpIHsKICAgICAgICBsZXQgZ2VvbWV0cmllczsKICAgICAgICBsZXQgYXR0cmlidXRlTG9jYXRpb25zOwogICAgICAgIGNvbnN0IGluc3RhbmNlcyA9IHBhcmFtZXRlcnMuaW5zdGFuY2VzOwogICAgICAgIGNvbnN0IGxlbmd0aCA9IGluc3RhbmNlcy5sZW5ndGg7CiAgICAgICAgbGV0IHBpY2tPZmZzZXRzOwogICAgICAgIGxldCBvZmZzZXRJbnN0YW5jZUV4dGVuZDsKICAgICAgICBsZXQgaGFzT2Zmc2V0ID0gZmFsc2U7CiAgICAgICAgaWYgKGxlbmd0aCA+IDApIHsKICAgICAgICAgIGdlb21ldHJpZXMgPSBnZW9tZXRyeVBpcGVsaW5lKHBhcmFtZXRlcnMpOwogICAgICAgICAgaWYgKGdlb21ldHJpZXMubGVuZ3RoID4gMCkgewogICAgICAgICAgICBhdHRyaWJ1dGVMb2NhdGlvbnMgPSBHZW9tZXRyeVBpcGVsaW5lX2RlZmF1bHQuY3JlYXRlQXR0cmlidXRlTG9jYXRpb25zKAogICAgICAgICAgICAgIGdlb21ldHJpZXNbMF0KICAgICAgICAgICAgKTsKICAgICAgICAgICAgaWYgKHBhcmFtZXRlcnMuY3JlYXRlUGlja09mZnNldHMpIHsKICAgICAgICAgICAgICBwaWNrT2Zmc2V0cyA9IGNyZWF0ZUluc3RhbmNlUGlja09mZnNldHMoaW5zdGFuY2VzLCBnZW9tZXRyaWVzKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChpbnN0YW5jZXNbMF0uYXR0cmlidXRlcykgJiYgZGVmaW5lZF9kZWZhdWx0KGluc3RhbmNlc1swXS5hdHRyaWJ1dGVzLm9mZnNldCkpIHsKICAgICAgICAgICAgb2Zmc2V0SW5zdGFuY2VFeHRlbmQgPSBuZXcgQXJyYXkobGVuZ3RoKTsKICAgICAgICAgICAgaGFzT2Zmc2V0ID0gdHJ1ZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY29uc3QgYm91bmRpbmdTcGhlcmVzID0gbmV3IEFycmF5KGxlbmd0aCk7CiAgICAgICAgY29uc3QgYm91bmRpbmdTcGhlcmVzQ1YgPSBuZXcgQXJyYXkobGVuZ3RoKTsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgICBjb25zdCBpbnN0YW5jZSA9IGluc3RhbmNlc1tpXTsKICAgICAgICAgIGNvbnN0IGdlb21ldHJ5ID0gaW5zdGFuY2UuZ2VvbWV0cnk7CiAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGdlb21ldHJ5KSkgewogICAgICAgICAgICBib3VuZGluZ1NwaGVyZXNbaV0gPSBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZTsKICAgICAgICAgICAgYm91bmRpbmdTcGhlcmVzQ1ZbaV0gPSBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZUNWOwogICAgICAgICAgICBpZiAoaGFzT2Zmc2V0KSB7CiAgICAgICAgICAgICAgb2Zmc2V0SW5zdGFuY2VFeHRlbmRbaV0gPSBpbnN0YW5jZS5nZW9tZXRyeS5vZmZzZXRBdHRyaWJ1dGU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGNvbnN0IGVhc3RIZW1pc3BoZXJlR2VvbWV0cnkgPSBpbnN0YW5jZS5lYXN0SGVtaXNwaGVyZUdlb21ldHJ5OwogICAgICAgICAgY29uc3Qgd2VzdEhlbWlzcGhlcmVHZW9tZXRyeSA9IGluc3RhbmNlLndlc3RIZW1pc3BoZXJlR2VvbWV0cnk7CiAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGVhc3RIZW1pc3BoZXJlR2VvbWV0cnkpICYmIGRlZmluZWRfZGVmYXVsdCh3ZXN0SGVtaXNwaGVyZUdlb21ldHJ5KSkgewogICAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGVhc3RIZW1pc3BoZXJlR2VvbWV0cnkuYm91bmRpbmdTcGhlcmUpICYmIGRlZmluZWRfZGVmYXVsdCh3ZXN0SGVtaXNwaGVyZUdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlKSkgewogICAgICAgICAgICAgIGJvdW5kaW5nU3BoZXJlc1tpXSA9IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQudW5pb24oCiAgICAgICAgICAgICAgICBlYXN0SGVtaXNwaGVyZUdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlLAogICAgICAgICAgICAgICAgd2VzdEhlbWlzcGhlcmVHZW9tZXRyeS5ib3VuZGluZ1NwaGVyZQogICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChlYXN0SGVtaXNwaGVyZUdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlQ1YpICYmIGRlZmluZWRfZGVmYXVsdCh3ZXN0SGVtaXNwaGVyZUdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlQ1YpKSB7CiAgICAgICAgICAgICAgYm91bmRpbmdTcGhlcmVzQ1ZbaV0gPSBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0LnVuaW9uKAogICAgICAgICAgICAgICAgZWFzdEhlbWlzcGhlcmVHZW9tZXRyeS5ib3VuZGluZ1NwaGVyZUNWLAogICAgICAgICAgICAgICAgd2VzdEhlbWlzcGhlcmVHZW9tZXRyeS5ib3VuZGluZ1NwaGVyZUNWCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gewogICAgICAgICAgZ2VvbWV0cmllcywKICAgICAgICAgIG1vZGVsTWF0cml4OiBwYXJhbWV0ZXJzLm1vZGVsTWF0cml4LAogICAgICAgICAgYXR0cmlidXRlTG9jYXRpb25zLAogICAgICAgICAgcGlja09mZnNldHMsCiAgICAgICAgICBvZmZzZXRJbnN0YW5jZUV4dGVuZCwKICAgICAgICAgIGJvdW5kaW5nU3BoZXJlcywKICAgICAgICAgIGJvdW5kaW5nU3BoZXJlc0NWCiAgICAgICAgfTsKICAgICAgfTsKICAgICAgUHJpbWl0aXZlUGlwZWxpbmUucGFja0NyZWF0ZUdlb21ldHJ5UmVzdWx0cyA9IGZ1bmN0aW9uKGl0ZW1zLCB0cmFuc2ZlcmFibGVPYmplY3RzKSB7CiAgICAgICAgY29uc3QgcGFja2VkRGF0YSA9IG5ldyBGbG9hdDY0QXJyYXkoY291bnRDcmVhdGVHZW9tZXRyeVJlc3VsdHMoaXRlbXMpKTsKICAgICAgICBjb25zdCBzdHJpbmdUYWJsZSA9IFtdOwogICAgICAgIGNvbnN0IHN0cmluZ0hhc2ggPSB7fTsKICAgICAgICBjb25zdCBsZW5ndGggPSBpdGVtcy5sZW5ndGg7CiAgICAgICAgbGV0IGNvdW50ID0gMDsKICAgICAgICBwYWNrZWREYXRhW2NvdW50KytdID0gbGVuZ3RoOwogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICAgIGNvbnN0IGdlb21ldHJ5ID0gaXRlbXNbaV07CiAgICAgICAgICBjb25zdCB2YWxpZEdlb21ldHJ5ID0gZGVmaW5lZF9kZWZhdWx0KGdlb21ldHJ5KTsKICAgICAgICAgIHBhY2tlZERhdGFbY291bnQrK10gPSB2YWxpZEdlb21ldHJ5ID8gMSA6IDA7CiAgICAgICAgICBpZiAoIXZhbGlkR2VvbWV0cnkpIHsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICBwYWNrZWREYXRhW2NvdW50KytdID0gZ2VvbWV0cnkucHJpbWl0aXZlVHlwZTsKICAgICAgICAgIHBhY2tlZERhdGFbY291bnQrK10gPSBnZW9tZXRyeS5nZW9tZXRyeVR5cGU7CiAgICAgICAgICBwYWNrZWREYXRhW2NvdW50KytdID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoZ2VvbWV0cnkub2Zmc2V0QXR0cmlidXRlLCAtMSk7CiAgICAgICAgICBjb25zdCB2YWxpZEJvdW5kaW5nU3BoZXJlID0gZGVmaW5lZF9kZWZhdWx0KGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlKSA/IDEgOiAwOwogICAgICAgICAgcGFja2VkRGF0YVtjb3VudCsrXSA9IHZhbGlkQm91bmRpbmdTcGhlcmU7CiAgICAgICAgICBpZiAodmFsaWRCb3VuZGluZ1NwaGVyZSkgewogICAgICAgICAgICBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0LnBhY2soZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUsIHBhY2tlZERhdGEsIGNvdW50KTsKICAgICAgICAgIH0KICAgICAgICAgIGNvdW50ICs9IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgICAgY29uc3QgdmFsaWRCb3VuZGluZ1NwaGVyZUNWID0gZGVmaW5lZF9kZWZhdWx0KGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlQ1YpID8gMSA6IDA7CiAgICAgICAgICBwYWNrZWREYXRhW2NvdW50KytdID0gdmFsaWRCb3VuZGluZ1NwaGVyZUNWOwogICAgICAgICAgaWYgKHZhbGlkQm91bmRpbmdTcGhlcmVDVikgewogICAgICAgICAgICBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0LnBhY2soZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmVDViwgcGFja2VkRGF0YSwgY291bnQpOwogICAgICAgICAgfQogICAgICAgICAgY291bnQgKz0gQm91bmRpbmdTcGhlcmVfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlczsKICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZXNUb1dyaXRlID0gW107CiAgICAgICAgICBmb3IgKGNvbnN0IHByb3BlcnR5IGluIGF0dHJpYnV0ZXMpIHsKICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpICYmIGRlZmluZWRfZGVmYXVsdChhdHRyaWJ1dGVzW3Byb3BlcnR5XSkpIHsKICAgICAgICAgICAgICBhdHRyaWJ1dGVzVG9Xcml0ZS5wdXNoKHByb3BlcnR5KTsKICAgICAgICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChzdHJpbmdIYXNoW3Byb3BlcnR5XSkpIHsKICAgICAgICAgICAgICAgIHN0cmluZ0hhc2hbcHJvcGVydHldID0gc3RyaW5nVGFibGUubGVuZ3RoOwogICAgICAgICAgICAgICAgc3RyaW5nVGFibGUucHVzaChwcm9wZXJ0eSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBwYWNrZWREYXRhW2NvdW50KytdID0gYXR0cmlidXRlc1RvV3JpdGUubGVuZ3RoOwogICAgICAgICAgZm9yIChsZXQgcSA9IDA7IHEgPCBhdHRyaWJ1dGVzVG9Xcml0ZS5sZW5ndGg7IHErKykgewogICAgICAgICAgICBjb25zdCBuYW1lID0gYXR0cmlidXRlc1RvV3JpdGVbcV07CiAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbbmFtZV07CiAgICAgICAgICAgIHBhY2tlZERhdGFbY291bnQrK10gPSBzdHJpbmdIYXNoW25hbWVdOwogICAgICAgICAgICBwYWNrZWREYXRhW2NvdW50KytdID0gYXR0cmlidXRlLmNvbXBvbmVudERhdGF0eXBlOwogICAgICAgICAgICBwYWNrZWREYXRhW2NvdW50KytdID0gYXR0cmlidXRlLmNvbXBvbmVudHNQZXJBdHRyaWJ1dGU7CiAgICAgICAgICAgIHBhY2tlZERhdGFbY291bnQrK10gPSBhdHRyaWJ1dGUubm9ybWFsaXplID8gMSA6IDA7CiAgICAgICAgICAgIHBhY2tlZERhdGFbY291bnQrK10gPSBhdHRyaWJ1dGUudmFsdWVzLmxlbmd0aDsKICAgICAgICAgICAgcGFja2VkRGF0YS5zZXQoYXR0cmlidXRlLnZhbHVlcywgY291bnQpOwogICAgICAgICAgICBjb3VudCArPSBhdHRyaWJ1dGUudmFsdWVzLmxlbmd0aDsKICAgICAgICAgIH0KICAgICAgICAgIGNvbnN0IGluZGljZXNMZW5ndGggPSBkZWZpbmVkX2RlZmF1bHQoZ2VvbWV0cnkuaW5kaWNlcykgPyBnZW9tZXRyeS5pbmRpY2VzLmxlbmd0aCA6IDA7CiAgICAgICAgICBwYWNrZWREYXRhW2NvdW50KytdID0gaW5kaWNlc0xlbmd0aDsKICAgICAgICAgIGlmIChpbmRpY2VzTGVuZ3RoID4gMCkgewogICAgICAgICAgICBwYWNrZWREYXRhLnNldChnZW9tZXRyeS5pbmRpY2VzLCBjb3VudCk7CiAgICAgICAgICAgIGNvdW50ICs9IGluZGljZXNMZW5ndGg7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHRyYW5zZmVyYWJsZU9iamVjdHMucHVzaChwYWNrZWREYXRhLmJ1ZmZlcik7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIHN0cmluZ1RhYmxlLAogICAgICAgICAgcGFja2VkRGF0YQogICAgICAgIH07CiAgICAgIH07CiAgICAgIFByaW1pdGl2ZVBpcGVsaW5lLnVucGFja0NyZWF0ZUdlb21ldHJ5UmVzdWx0cyA9IGZ1bmN0aW9uKGNyZWF0ZUdlb21ldHJ5UmVzdWx0KSB7CiAgICAgICAgY29uc3Qgc3RyaW5nVGFibGUgPSBjcmVhdGVHZW9tZXRyeVJlc3VsdC5zdHJpbmdUYWJsZTsKICAgICAgICBjb25zdCBwYWNrZWRHZW9tZXRyeSA9IGNyZWF0ZUdlb21ldHJ5UmVzdWx0LnBhY2tlZERhdGE7CiAgICAgICAgbGV0IGk7CiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IEFycmF5KHBhY2tlZEdlb21ldHJ5WzBdKTsKICAgICAgICBsZXQgcmVzdWx0SW5kZXggPSAwOwogICAgICAgIGxldCBwYWNrZWRHZW9tZXRyeUluZGV4ID0gMTsKICAgICAgICB3aGlsZSAocGFja2VkR2VvbWV0cnlJbmRleCA8IHBhY2tlZEdlb21ldHJ5Lmxlbmd0aCkgewogICAgICAgICAgY29uc3QgdmFsaWQgPSBwYWNrZWRHZW9tZXRyeVtwYWNrZWRHZW9tZXRyeUluZGV4KytdID09PSAxOwogICAgICAgICAgaWYgKCF2YWxpZCkgewogICAgICAgICAgICByZXN1bHRbcmVzdWx0SW5kZXgrK10gPSB2b2lkIDA7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgICAgY29uc3QgcHJpbWl0aXZlVHlwZSA9IHBhY2tlZEdlb21ldHJ5W3BhY2tlZEdlb21ldHJ5SW5kZXgrK107CiAgICAgICAgICBjb25zdCBnZW9tZXRyeVR5cGUgPSBwYWNrZWRHZW9tZXRyeVtwYWNrZWRHZW9tZXRyeUluZGV4KytdOwogICAgICAgICAgbGV0IG9mZnNldEF0dHJpYnV0ZSA9IHBhY2tlZEdlb21ldHJ5W3BhY2tlZEdlb21ldHJ5SW5kZXgrK107CiAgICAgICAgICBpZiAob2Zmc2V0QXR0cmlidXRlID09PSAtMSkgewogICAgICAgICAgICBvZmZzZXRBdHRyaWJ1dGUgPSB2b2lkIDA7CiAgICAgICAgICB9CiAgICAgICAgICBsZXQgYm91bmRpbmdTcGhlcmU7CiAgICAgICAgICBsZXQgYm91bmRpbmdTcGhlcmVDVjsKICAgICAgICAgIGNvbnN0IHZhbGlkQm91bmRpbmdTcGhlcmUgPSBwYWNrZWRHZW9tZXRyeVtwYWNrZWRHZW9tZXRyeUluZGV4KytdID09PSAxOwogICAgICAgICAgaWYgKHZhbGlkQm91bmRpbmdTcGhlcmUpIHsKICAgICAgICAgICAgYm91bmRpbmdTcGhlcmUgPSBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0LnVucGFjaygKICAgICAgICAgICAgICBwYWNrZWRHZW9tZXRyeSwKICAgICAgICAgICAgICBwYWNrZWRHZW9tZXRyeUluZGV4CiAgICAgICAgICAgICk7CiAgICAgICAgICB9CiAgICAgICAgICBwYWNrZWRHZW9tZXRyeUluZGV4ICs9IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgICAgY29uc3QgdmFsaWRCb3VuZGluZ1NwaGVyZUNWID0gcGFja2VkR2VvbWV0cnlbcGFja2VkR2VvbWV0cnlJbmRleCsrXSA9PT0gMTsKICAgICAgICAgIGlmICh2YWxpZEJvdW5kaW5nU3BoZXJlQ1YpIHsKICAgICAgICAgICAgYm91bmRpbmdTcGhlcmVDViA9IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQudW5wYWNrKAogICAgICAgICAgICAgIHBhY2tlZEdlb21ldHJ5LAogICAgICAgICAgICAgIHBhY2tlZEdlb21ldHJ5SW5kZXgKICAgICAgICAgICAgKTsKICAgICAgICAgIH0KICAgICAgICAgIHBhY2tlZEdlb21ldHJ5SW5kZXggKz0gQm91bmRpbmdTcGhlcmVfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgICBsZXQgbGVuZ3RoOwogICAgICAgICAgbGV0IHZhbHVlczsKICAgICAgICAgIGxldCBjb21wb25lbnRzUGVyQXR0cmlidXRlOwogICAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZXNfZGVmYXVsdCgpOwogICAgICAgICAgY29uc3QgbnVtQXR0cmlidXRlcyA9IHBhY2tlZEdlb21ldHJ5W3BhY2tlZEdlb21ldHJ5SW5kZXgrK107CiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbnVtQXR0cmlidXRlczsgaSsrKSB7CiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBzdHJpbmdUYWJsZVtwYWNrZWRHZW9tZXRyeVtwYWNrZWRHZW9tZXRyeUluZGV4KytdXTsKICAgICAgICAgICAgY29uc3QgY29tcG9uZW50RGF0YXR5cGUgPSBwYWNrZWRHZW9tZXRyeVtwYWNrZWRHZW9tZXRyeUluZGV4KytdOwogICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlID0gcGFja2VkR2VvbWV0cnlbcGFja2VkR2VvbWV0cnlJbmRleCsrXTsKICAgICAgICAgICAgY29uc3Qgbm9ybWFsaXplID0gcGFja2VkR2VvbWV0cnlbcGFja2VkR2VvbWV0cnlJbmRleCsrXSAhPT0gMDsKICAgICAgICAgICAgbGVuZ3RoID0gcGFja2VkR2VvbWV0cnlbcGFja2VkR2VvbWV0cnlJbmRleCsrXTsKICAgICAgICAgICAgdmFsdWVzID0gQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5jcmVhdGVUeXBlZEFycmF5KGNvbXBvbmVudERhdGF0eXBlLCBsZW5ndGgpOwogICAgICAgICAgICBmb3IgKGxldCB2YWx1ZXNJbmRleCA9IDA7IHZhbHVlc0luZGV4IDwgbGVuZ3RoOyB2YWx1ZXNJbmRleCsrKSB7CiAgICAgICAgICAgICAgdmFsdWVzW3ZhbHVlc0luZGV4XSA9IHBhY2tlZEdlb21ldHJ5W3BhY2tlZEdlb21ldHJ5SW5kZXgrK107CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYXR0cmlidXRlc1tuYW1lXSA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZSwKICAgICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlLAogICAgICAgICAgICAgIG5vcm1hbGl6ZSwKICAgICAgICAgICAgICB2YWx1ZXMKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgICBsZXQgaW5kaWNlczsKICAgICAgICAgIGxlbmd0aCA9IHBhY2tlZEdlb21ldHJ5W3BhY2tlZEdlb21ldHJ5SW5kZXgrK107CiAgICAgICAgICBpZiAobGVuZ3RoID4gMCkgewogICAgICAgICAgICBjb25zdCBudW1iZXJPZlZlcnRpY2VzID0gdmFsdWVzLmxlbmd0aCAvIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU7CiAgICAgICAgICAgIGluZGljZXMgPSBJbmRleERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheShudW1iZXJPZlZlcnRpY2VzLCBsZW5ndGgpOwogICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICBpbmRpY2VzW2ldID0gcGFja2VkR2VvbWV0cnlbcGFja2VkR2VvbWV0cnlJbmRleCsrXTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcmVzdWx0W3Jlc3VsdEluZGV4KytdID0gbmV3IEdlb21ldHJ5X2RlZmF1bHQoewogICAgICAgICAgICBwcmltaXRpdmVUeXBlLAogICAgICAgICAgICBnZW9tZXRyeVR5cGUsCiAgICAgICAgICAgIGJvdW5kaW5nU3BoZXJlLAogICAgICAgICAgICBib3VuZGluZ1NwaGVyZUNWLAogICAgICAgICAgICBpbmRpY2VzLAogICAgICAgICAgICBhdHRyaWJ1dGVzLAogICAgICAgICAgICBvZmZzZXRBdHRyaWJ1dGUKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBQcmltaXRpdmVQaXBlbGluZS5wYWNrQ29tYmluZUdlb21ldHJ5UGFyYW1ldGVycyA9IGZ1bmN0aW9uKHBhcmFtZXRlcnMsIHRyYW5zZmVyYWJsZU9iamVjdHMpIHsKICAgICAgICBjb25zdCBjcmVhdGVHZW9tZXRyeVJlc3VsdHMgPSBwYXJhbWV0ZXJzLmNyZWF0ZUdlb21ldHJ5UmVzdWx0czsKICAgICAgICBjb25zdCBsZW5ndGggPSBjcmVhdGVHZW9tZXRyeVJlc3VsdHMubGVuZ3RoOwogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICAgIHRyYW5zZmVyYWJsZU9iamVjdHMucHVzaChjcmVhdGVHZW9tZXRyeVJlc3VsdHNbaV0ucGFja2VkRGF0YS5idWZmZXIpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gewogICAgICAgICAgY3JlYXRlR2VvbWV0cnlSZXN1bHRzOiBwYXJhbWV0ZXJzLmNyZWF0ZUdlb21ldHJ5UmVzdWx0cywKICAgICAgICAgIHBhY2tlZEluc3RhbmNlczogcGFja0luc3RhbmNlc0ZvckNvbWJpbmUoCiAgICAgICAgICAgIHBhcmFtZXRlcnMuaW5zdGFuY2VzLAogICAgICAgICAgICB0cmFuc2ZlcmFibGVPYmplY3RzCiAgICAgICAgICApLAogICAgICAgICAgZWxsaXBzb2lkOiBwYXJhbWV0ZXJzLmVsbGlwc29pZCwKICAgICAgICAgIGlzR2VvZ3JhcGhpYzogcGFyYW1ldGVycy5wcm9qZWN0aW9uIGluc3RhbmNlb2YgR2VvZ3JhcGhpY1Byb2plY3Rpb25fZGVmYXVsdCwKICAgICAgICAgIGVsZW1lbnRJbmRleFVpbnRTdXBwb3J0ZWQ6IHBhcmFtZXRlcnMuZWxlbWVudEluZGV4VWludFN1cHBvcnRlZCwKICAgICAgICAgIHNjZW5lM0RPbmx5OiBwYXJhbWV0ZXJzLnNjZW5lM0RPbmx5LAogICAgICAgICAgdmVydGV4Q2FjaGVPcHRpbWl6ZTogcGFyYW1ldGVycy52ZXJ0ZXhDYWNoZU9wdGltaXplLAogICAgICAgICAgY29tcHJlc3NWZXJ0aWNlczogcGFyYW1ldGVycy5jb21wcmVzc1ZlcnRpY2VzLAogICAgICAgICAgbW9kZWxNYXRyaXg6IHBhcmFtZXRlcnMubW9kZWxNYXRyaXgsCiAgICAgICAgICBjcmVhdGVQaWNrT2Zmc2V0czogcGFyYW1ldGVycy5jcmVhdGVQaWNrT2Zmc2V0cwogICAgICAgIH07CiAgICAgIH07CiAgICAgIFByaW1pdGl2ZVBpcGVsaW5lLnVucGFja0NvbWJpbmVHZW9tZXRyeVBhcmFtZXRlcnMgPSBmdW5jdGlvbihwYWNrZWRQYXJhbWV0ZXJzKSB7CiAgICAgICAgY29uc3QgaW5zdGFuY2VzID0gdW5wYWNrSW5zdGFuY2VzRm9yQ29tYmluZShwYWNrZWRQYXJhbWV0ZXJzLnBhY2tlZEluc3RhbmNlcyk7CiAgICAgICAgY29uc3QgY3JlYXRlR2VvbWV0cnlSZXN1bHRzID0gcGFja2VkUGFyYW1ldGVycy5jcmVhdGVHZW9tZXRyeVJlc3VsdHM7CiAgICAgICAgY29uc3QgbGVuZ3RoID0gY3JlYXRlR2VvbWV0cnlSZXN1bHRzLmxlbmd0aDsKICAgICAgICBsZXQgaW5zdGFuY2VJbmRleCA9IDA7CiAgICAgICAgZm9yIChsZXQgcmVzdWx0SW5kZXggPSAwOyByZXN1bHRJbmRleCA8IGxlbmd0aDsgcmVzdWx0SW5kZXgrKykgewogICAgICAgICAgY29uc3QgZ2VvbWV0cmllcyA9IFByaW1pdGl2ZVBpcGVsaW5lLnVucGFja0NyZWF0ZUdlb21ldHJ5UmVzdWx0cygKICAgICAgICAgICAgY3JlYXRlR2VvbWV0cnlSZXN1bHRzW3Jlc3VsdEluZGV4XQogICAgICAgICAgKTsKICAgICAgICAgIGNvbnN0IGdlb21ldHJpZXNMZW5ndGggPSBnZW9tZXRyaWVzLmxlbmd0aDsKICAgICAgICAgIGZvciAobGV0IGdlb21ldHJ5SW5kZXggPSAwOyBnZW9tZXRyeUluZGV4IDwgZ2VvbWV0cmllc0xlbmd0aDsgZ2VvbWV0cnlJbmRleCsrKSB7CiAgICAgICAgICAgIGNvbnN0IGdlb21ldHJ5ID0gZ2VvbWV0cmllc1tnZW9tZXRyeUluZGV4XTsKICAgICAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBpbnN0YW5jZXNbaW5zdGFuY2VJbmRleF07CiAgICAgICAgICAgIGluc3RhbmNlLmdlb21ldHJ5ID0gZ2VvbWV0cnk7CiAgICAgICAgICAgICsraW5zdGFuY2VJbmRleDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY29uc3QgZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUocGFja2VkUGFyYW1ldGVycy5lbGxpcHNvaWQpOwogICAgICAgIGNvbnN0IHByb2plY3Rpb24gPSBwYWNrZWRQYXJhbWV0ZXJzLmlzR2VvZ3JhcGhpYyA/IG5ldyBHZW9ncmFwaGljUHJvamVjdGlvbl9kZWZhdWx0KGVsbGlwc29pZCkgOiBuZXcgV2ViTWVyY2F0b3JQcm9qZWN0aW9uX2RlZmF1bHQoZWxsaXBzb2lkKTsKICAgICAgICByZXR1cm4gewogICAgICAgICAgaW5zdGFuY2VzLAogICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgcHJvamVjdGlvbiwKICAgICAgICAgIGVsZW1lbnRJbmRleFVpbnRTdXBwb3J0ZWQ6IHBhY2tlZFBhcmFtZXRlcnMuZWxlbWVudEluZGV4VWludFN1cHBvcnRlZCwKICAgICAgICAgIHNjZW5lM0RPbmx5OiBwYWNrZWRQYXJhbWV0ZXJzLnNjZW5lM0RPbmx5LAogICAgICAgICAgdmVydGV4Q2FjaGVPcHRpbWl6ZTogcGFja2VkUGFyYW1ldGVycy52ZXJ0ZXhDYWNoZU9wdGltaXplLAogICAgICAgICAgY29tcHJlc3NWZXJ0aWNlczogcGFja2VkUGFyYW1ldGVycy5jb21wcmVzc1ZlcnRpY2VzLAogICAgICAgICAgbW9kZWxNYXRyaXg6IE1hdHJpeDRfZGVmYXVsdC5jbG9uZShwYWNrZWRQYXJhbWV0ZXJzLm1vZGVsTWF0cml4KSwKICAgICAgICAgIGNyZWF0ZVBpY2tPZmZzZXRzOiBwYWNrZWRQYXJhbWV0ZXJzLmNyZWF0ZVBpY2tPZmZzZXRzCiAgICAgICAgfTsKICAgICAgfTsKICAgICAgUHJpbWl0aXZlUGlwZWxpbmUucGFja0NvbWJpbmVHZW9tZXRyeVJlc3VsdHMgPSBmdW5jdGlvbihyZXN1bHRzLCB0cmFuc2ZlcmFibGVPYmplY3RzKSB7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChyZXN1bHRzLmdlb21ldHJpZXMpKSB7CiAgICAgICAgICB0cmFuc2Zlckdlb21ldHJpZXMocmVzdWx0cy5nZW9tZXRyaWVzLCB0cmFuc2ZlcmFibGVPYmplY3RzKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgcGFja2VkQm91bmRpbmdTcGhlcmVzID0gcGFja0JvdW5kaW5nU3BoZXJlcyhyZXN1bHRzLmJvdW5kaW5nU3BoZXJlcyk7CiAgICAgICAgY29uc3QgcGFja2VkQm91bmRpbmdTcGhlcmVzQ1YgPSBwYWNrQm91bmRpbmdTcGhlcmVzKAogICAgICAgICAgcmVzdWx0cy5ib3VuZGluZ1NwaGVyZXNDVgogICAgICAgICk7CiAgICAgICAgdHJhbnNmZXJhYmxlT2JqZWN0cy5wdXNoKAogICAgICAgICAgcGFja2VkQm91bmRpbmdTcGhlcmVzLmJ1ZmZlciwKICAgICAgICAgIHBhY2tlZEJvdW5kaW5nU3BoZXJlc0NWLmJ1ZmZlcgogICAgICAgICk7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIGdlb21ldHJpZXM6IHJlc3VsdHMuZ2VvbWV0cmllcywKICAgICAgICAgIGF0dHJpYnV0ZUxvY2F0aW9uczogcmVzdWx0cy5hdHRyaWJ1dGVMb2NhdGlvbnMsCiAgICAgICAgICBtb2RlbE1hdHJpeDogcmVzdWx0cy5tb2RlbE1hdHJpeCwKICAgICAgICAgIHBpY2tPZmZzZXRzOiByZXN1bHRzLnBpY2tPZmZzZXRzLAogICAgICAgICAgb2Zmc2V0SW5zdGFuY2VFeHRlbmQ6IHJlc3VsdHMub2Zmc2V0SW5zdGFuY2VFeHRlbmQsCiAgICAgICAgICBib3VuZGluZ1NwaGVyZXM6IHBhY2tlZEJvdW5kaW5nU3BoZXJlcywKICAgICAgICAgIGJvdW5kaW5nU3BoZXJlc0NWOiBwYWNrZWRCb3VuZGluZ1NwaGVyZXNDVgogICAgICAgIH07CiAgICAgIH07CiAgICAgIFByaW1pdGl2ZVBpcGVsaW5lLnVucGFja0NvbWJpbmVHZW9tZXRyeVJlc3VsdHMgPSBmdW5jdGlvbihwYWNrZWRSZXN1bHQpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgZ2VvbWV0cmllczogcGFja2VkUmVzdWx0Lmdlb21ldHJpZXMsCiAgICAgICAgICBhdHRyaWJ1dGVMb2NhdGlvbnM6IHBhY2tlZFJlc3VsdC5hdHRyaWJ1dGVMb2NhdGlvbnMsCiAgICAgICAgICBtb2RlbE1hdHJpeDogcGFja2VkUmVzdWx0Lm1vZGVsTWF0cml4LAogICAgICAgICAgcGlja09mZnNldHM6IHBhY2tlZFJlc3VsdC5waWNrT2Zmc2V0cywKICAgICAgICAgIG9mZnNldEluc3RhbmNlRXh0ZW5kOiBwYWNrZWRSZXN1bHQub2Zmc2V0SW5zdGFuY2VFeHRlbmQsCiAgICAgICAgICBib3VuZGluZ1NwaGVyZXM6IHVucGFja0JvdW5kaW5nU3BoZXJlcyhwYWNrZWRSZXN1bHQuYm91bmRpbmdTcGhlcmVzKSwKICAgICAgICAgIGJvdW5kaW5nU3BoZXJlc0NWOiB1bnBhY2tCb3VuZGluZ1NwaGVyZXMocGFja2VkUmVzdWx0LmJvdW5kaW5nU3BoZXJlc0NWKQogICAgICAgIH07CiAgICAgIH07CiAgICAgIFByaW1pdGl2ZVBpcGVsaW5lX2RlZmF1bHQgPSBQcmltaXRpdmVQaXBlbGluZTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2Zvcm1hdEVycm9yLmpzCiAgZnVuY3Rpb24gZm9ybWF0RXJyb3Iob2JqZWN0KSB7CiAgICBsZXQgcmVzdWx0OwogICAgY29uc3QgbmFtZSA9IG9iamVjdC5uYW1lOwogICAgY29uc3QgbWVzc2FnZSA9IG9iamVjdC5tZXNzYWdlOwogICAgaWYgKGRlZmluZWRfZGVmYXVsdChuYW1lKSAmJiBkZWZpbmVkX2RlZmF1bHQobWVzc2FnZSkpIHsKICAgICAgcmVzdWx0ID0gYCR7bmFtZX06ICR7bWVzc2FnZX1gOwogICAgfSBlbHNlIHsKICAgICAgcmVzdWx0ID0gb2JqZWN0LnRvU3RyaW5nKCk7CiAgICB9CiAgICBjb25zdCBzdGFjayA9IG9iamVjdC5zdGFjazsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoc3RhY2spKSB7CiAgICAgIHJlc3VsdCArPSBgCiR7c3RhY2t9YDsKICAgIH0KICAgIHJldHVybiByZXN1bHQ7CiAgfQogIHZhciBmb3JtYXRFcnJvcl9kZWZhdWx0OwogIHZhciBpbml0X2Zvcm1hdEVycm9yID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9mb3JtYXRFcnJvci5qcyIoKSB7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBmb3JtYXRFcnJvcl9kZWZhdWx0ID0gZm9ybWF0RXJyb3I7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVUYXNrUHJvY2Vzc29yV29ya2VyLmpzCiAgdmFyIGNyZWF0ZVRhc2tQcm9jZXNzb3JXb3JrZXJfZXhwb3J0cyA9IHt9OwogIF9fZXhwb3J0KGNyZWF0ZVRhc2tQcm9jZXNzb3JXb3JrZXJfZXhwb3J0cywgewogICAgZGVmYXVsdDogKCkgPT4gY3JlYXRlVGFza1Byb2Nlc3Nvcldvcmtlcl9kZWZhdWx0CiAgfSk7CiAgZnVuY3Rpb24gY3JlYXRlVGFza1Byb2Nlc3Nvcldvcmtlcih3b3JrZXJGdW5jdGlvbikgewogICAgYXN5bmMgZnVuY3Rpb24gb25NZXNzYWdlSGFuZGxlcih7IGRhdGEgfSkgewogICAgICBjb25zdCB0cmFuc2ZlcmFibGVPYmplY3RzID0gW107CiAgICAgIGNvbnN0IHJlc3BvbnNlTWVzc2FnZSA9IHsKICAgICAgICBpZDogZGF0YS5pZCwKICAgICAgICByZXN1bHQ6IHZvaWQgMCwKICAgICAgICBlcnJvcjogdm9pZCAwCiAgICAgIH07CiAgICAgIHNlbGYuQ0VTSVVNX0JBU0VfVVJMID0gZGF0YS5iYXNlVXJsOwogICAgICB0cnkgewogICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHdvcmtlckZ1bmN0aW9uKGRhdGEucGFyYW1ldGVycywgdHJhbnNmZXJhYmxlT2JqZWN0cyk7CiAgICAgICAgcmVzcG9uc2VNZXNzYWdlLnJlc3VsdCA9IHJlc3VsdDsKICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikgewogICAgICAgICAgcmVzcG9uc2VNZXNzYWdlLmVycm9yID0gewogICAgICAgICAgICBuYW1lOiBlcnJvci5uYW1lLAogICAgICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLAogICAgICAgICAgICBzdGFjazogZXJyb3Iuc3RhY2sKICAgICAgICAgIH07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlc3BvbnNlTWVzc2FnZS5lcnJvciA9IGVycm9yOwogICAgICAgIH0KICAgICAgfQogICAgICBpZiAoIWRhdGEuY2FuVHJhbnNmZXJBcnJheUJ1ZmZlcikgewogICAgICAgIHRyYW5zZmVyYWJsZU9iamVjdHMubGVuZ3RoID0gMDsKICAgICAgfQogICAgICB0cnkgewogICAgICAgIHBvc3RNZXNzYWdlKHJlc3BvbnNlTWVzc2FnZSwgdHJhbnNmZXJhYmxlT2JqZWN0cyk7CiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgcmVzcG9uc2VNZXNzYWdlLnJlc3VsdCA9IHZvaWQgMDsKICAgICAgICByZXNwb25zZU1lc3NhZ2UuZXJyb3IgPSBgcG9zdE1lc3NhZ2UgZmFpbGVkIHdpdGggZXJyb3I6ICR7Zm9ybWF0RXJyb3JfZGVmYXVsdCgKICAgICAgICAgIGVycm9yCiAgICAgICAgKX0KICB3aXRoIHJlc3BvbnNlTWVzc2FnZTogJHtKU09OLnN0cmluZ2lmeShyZXNwb25zZU1lc3NhZ2UpfWA7CiAgICAgICAgcG9zdE1lc3NhZ2UocmVzcG9uc2VNZXNzYWdlKTsKICAgICAgfQogICAgfQogICAgZnVuY3Rpb24gb25NZXNzYWdlRXJyb3JIYW5kbGVyKGV2ZW50KSB7CiAgICAgIHBvc3RNZXNzYWdlKHsKICAgICAgICBpZDogZXZlbnQuZGF0YT8uaWQsCiAgICAgICAgZXJyb3I6IGBwb3N0TWVzc2FnZSBmYWlsZWQgd2l0aCBlcnJvcjogJHtKU09OLnN0cmluZ2lmeShldmVudCl9YAogICAgICB9KTsKICAgIH0KICAgIHNlbGYub25tZXNzYWdlID0gb25NZXNzYWdlSGFuZGxlcjsKICAgIHNlbGYub25tZXNzYWdlZXJyb3IgPSBvbk1lc3NhZ2VFcnJvckhhbmRsZXI7CiAgICByZXR1cm4gc2VsZjsKICB9CiAgdmFyIGNyZWF0ZVRhc2tQcm9jZXNzb3JXb3JrZXJfZGVmYXVsdDsKICB2YXIgaW5pdF9jcmVhdGVUYXNrUHJvY2Vzc29yV29ya2VyID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVUYXNrUHJvY2Vzc29yV29ya2VyLmpzIigpIHsKICAgICAgaW5pdF9mb3JtYXRFcnJvcigpOwogICAgICBjcmVhdGVUYXNrUHJvY2Vzc29yV29ya2VyX2RlZmF1bHQgPSBjcmVhdGVUYXNrUHJvY2Vzc29yV29ya2VyOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY29tYmluZUdlb21ldHJ5LmpzCiAgdmFyIGNvbWJpbmVHZW9tZXRyeV9leHBvcnRzID0ge307CiAgX19leHBvcnQoY29tYmluZUdlb21ldHJ5X2V4cG9ydHMsIHsKICAgIGRlZmF1bHQ6ICgpID0+IGNvbWJpbmVHZW9tZXRyeV9kZWZhdWx0CiAgfSk7CiAgZnVuY3Rpb24gY29tYmluZUdlb21ldHJ5KHBhY2tlZFBhcmFtZXRlcnMsIHRyYW5zZmVyYWJsZU9iamVjdHMpIHsKICAgIGNvbnN0IHBhcmFtZXRlcnMgPSBQcmltaXRpdmVQaXBlbGluZV9kZWZhdWx0LnVucGFja0NvbWJpbmVHZW9tZXRyeVBhcmFtZXRlcnMocGFja2VkUGFyYW1ldGVycyk7CiAgICBjb25zdCByZXN1bHRzID0gUHJpbWl0aXZlUGlwZWxpbmVfZGVmYXVsdC5jb21iaW5lR2VvbWV0cnkocGFyYW1ldGVycyk7CiAgICByZXR1cm4gUHJpbWl0aXZlUGlwZWxpbmVfZGVmYXVsdC5wYWNrQ29tYmluZUdlb21ldHJ5UmVzdWx0cygKICAgICAgcmVzdWx0cywKICAgICAgdHJhbnNmZXJhYmxlT2JqZWN0cwogICAgKTsKICB9CiAgdmFyIGNvbWJpbmVHZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X2NvbWJpbmVHZW9tZXRyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY29tYmluZUdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9QcmltaXRpdmVQaXBlbGluZSgpOwogICAgICBpbml0X2NyZWF0ZVRhc2tQcm9jZXNzb3JXb3JrZXIoKTsKICAgICAgY29tYmluZUdlb21ldHJ5X2RlZmF1bHQgPSBjcmVhdGVUYXNrUHJvY2Vzc29yV29ya2VyX2RlZmF1bHQoY29tYmluZUdlb21ldHJ5KTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0dlb21ldHJ5T2Zmc2V0QXR0cmlidXRlLmpzCiAgdmFyIEdlb21ldHJ5T2Zmc2V0QXR0cmlidXRlLCBHZW9tZXRyeU9mZnNldEF0dHJpYnV0ZV9kZWZhdWx0OwogIHZhciBpbml0X0dlb21ldHJ5T2Zmc2V0QXR0cmlidXRlID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9HZW9tZXRyeU9mZnNldEF0dHJpYnV0ZS5qcyIoKSB7CiAgICAgIEdlb21ldHJ5T2Zmc2V0QXR0cmlidXRlID0gewogICAgICAgIE5PTkU6IDAsCiAgICAgICAgVE9QOiAxLAogICAgICAgIEFMTDogMgogICAgICB9OwogICAgICBHZW9tZXRyeU9mZnNldEF0dHJpYnV0ZV9kZWZhdWx0ID0gT2JqZWN0LmZyZWV6ZShHZW9tZXRyeU9mZnNldEF0dHJpYnV0ZSk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9WZXJ0ZXhGb3JtYXQuanMKICBmdW5jdGlvbiBWZXJ0ZXhGb3JtYXQob3B0aW9ucykgewogICAgb3B0aW9ucyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMsIGRlZmF1bHRWYWx1ZV9kZWZhdWx0LkVNUFRZX09CSkVDVCk7CiAgICB0aGlzLnBvc2l0aW9uID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5wb3NpdGlvbiwgZmFsc2UpOwogICAgdGhpcy5ub3JtYWwgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLm5vcm1hbCwgZmFsc2UpOwogICAgdGhpcy5zdCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuc3QsIGZhbHNlKTsKICAgIHRoaXMuYml0YW5nZW50ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5iaXRhbmdlbnQsIGZhbHNlKTsKICAgIHRoaXMudGFuZ2VudCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMudGFuZ2VudCwgZmFsc2UpOwogICAgdGhpcy5jb2xvciA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuY29sb3IsIGZhbHNlKTsKICB9CiAgdmFyIFZlcnRleEZvcm1hdF9kZWZhdWx0OwogIHZhciBpbml0X1ZlcnRleEZvcm1hdCA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvVmVydGV4Rm9ybWF0LmpzIigpIHsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgVmVydGV4Rm9ybWF0LlBPU0lUSU9OX09OTFkgPSBPYmplY3QuZnJlZXplKAogICAgICAgIG5ldyBWZXJ0ZXhGb3JtYXQoewogICAgICAgICAgcG9zaXRpb246IHRydWUKICAgICAgICB9KQogICAgICApOwogICAgICBWZXJ0ZXhGb3JtYXQuUE9TSVRJT05fQU5EX05PUk1BTCA9IE9iamVjdC5mcmVlemUoCiAgICAgICAgbmV3IFZlcnRleEZvcm1hdCh7CiAgICAgICAgICBwb3NpdGlvbjogdHJ1ZSwKICAgICAgICAgIG5vcm1hbDogdHJ1ZQogICAgICAgIH0pCiAgICAgICk7CiAgICAgIFZlcnRleEZvcm1hdC5QT1NJVElPTl9OT1JNQUxfQU5EX1NUID0gT2JqZWN0LmZyZWV6ZSgKICAgICAgICBuZXcgVmVydGV4Rm9ybWF0KHsKICAgICAgICAgIHBvc2l0aW9uOiB0cnVlLAogICAgICAgICAgbm9ybWFsOiB0cnVlLAogICAgICAgICAgc3Q6IHRydWUKICAgICAgICB9KQogICAgICApOwogICAgICBWZXJ0ZXhGb3JtYXQuUE9TSVRJT05fQU5EX1NUID0gT2JqZWN0LmZyZWV6ZSgKICAgICAgICBuZXcgVmVydGV4Rm9ybWF0KHsKICAgICAgICAgIHBvc2l0aW9uOiB0cnVlLAogICAgICAgICAgc3Q6IHRydWUKICAgICAgICB9KQogICAgICApOwogICAgICBWZXJ0ZXhGb3JtYXQuUE9TSVRJT05fQU5EX0NPTE9SID0gT2JqZWN0LmZyZWV6ZSgKICAgICAgICBuZXcgVmVydGV4Rm9ybWF0KHsKICAgICAgICAgIHBvc2l0aW9uOiB0cnVlLAogICAgICAgICAgY29sb3I6IHRydWUKICAgICAgICB9KQogICAgICApOwogICAgICBWZXJ0ZXhGb3JtYXQuQUxMID0gT2JqZWN0LmZyZWV6ZSgKICAgICAgICBuZXcgVmVydGV4Rm9ybWF0KHsKICAgICAgICAgIHBvc2l0aW9uOiB0cnVlLAogICAgICAgICAgbm9ybWFsOiB0cnVlLAogICAgICAgICAgc3Q6IHRydWUsCiAgICAgICAgICB0YW5nZW50OiB0cnVlLAogICAgICAgICAgYml0YW5nZW50OiB0cnVlCiAgICAgICAgfSkKICAgICAgKTsKICAgICAgVmVydGV4Rm9ybWF0LkRFRkFVTFQgPSBWZXJ0ZXhGb3JtYXQuUE9TSVRJT05fTk9STUFMX0FORF9TVDsKICAgICAgVmVydGV4Rm9ybWF0LnBhY2tlZExlbmd0aCA9IDY7CiAgICAgIFZlcnRleEZvcm1hdC5wYWNrID0gZnVuY3Rpb24odmFsdWUsIGFycmF5LCBzdGFydGluZ0luZGV4KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQodmFsdWUpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgidmFsdWUgaXMgcmVxdWlyZWQiKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoYXJyYXkpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYXJyYXkgaXMgcmVxdWlyZWQiKTsKICAgICAgICB9CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5wb3NpdGlvbiA/IDEgOiAwOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5ub3JtYWwgPyAxIDogMDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuc3QgPyAxIDogMDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUudGFuZ2VudCA/IDEgOiAwOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5iaXRhbmdlbnQgPyAxIDogMDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4XSA9IHZhbHVlLmNvbG9yID8gMSA6IDA7CiAgICAgICAgcmV0dXJuIGFycmF5OwogICAgICB9OwogICAgICBWZXJ0ZXhGb3JtYXQudW5wYWNrID0gZnVuY3Rpb24oYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGFycmF5KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImFycmF5IGlzIHJlcXVpcmVkIik7CiAgICAgICAgfQogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgVmVydGV4Rm9ybWF0KCk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5wb3NpdGlvbiA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPT09IDE7CiAgICAgICAgcmVzdWx0Lm5vcm1hbCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPT09IDE7CiAgICAgICAgcmVzdWx0LnN0ID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9PT0gMTsKICAgICAgICByZXN1bHQudGFuZ2VudCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPT09IDE7CiAgICAgICAgcmVzdWx0LmJpdGFuZ2VudCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPT09IDE7CiAgICAgICAgcmVzdWx0LmNvbG9yID0gYXJyYXlbc3RhcnRpbmdJbmRleF0gPT09IDE7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgVmVydGV4Rm9ybWF0LmNsb25lID0gZnVuY3Rpb24odmVydGV4Rm9ybWF0LCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdCh2ZXJ0ZXhGb3JtYXQpKSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgVmVydGV4Rm9ybWF0KCk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5wb3NpdGlvbiA9IHZlcnRleEZvcm1hdC5wb3NpdGlvbjsKICAgICAgICByZXN1bHQubm9ybWFsID0gdmVydGV4Rm9ybWF0Lm5vcm1hbDsKICAgICAgICByZXN1bHQuc3QgPSB2ZXJ0ZXhGb3JtYXQuc3Q7CiAgICAgICAgcmVzdWx0LnRhbmdlbnQgPSB2ZXJ0ZXhGb3JtYXQudGFuZ2VudDsKICAgICAgICByZXN1bHQuYml0YW5nZW50ID0gdmVydGV4Rm9ybWF0LmJpdGFuZ2VudDsKICAgICAgICByZXN1bHQuY29sb3IgPSB2ZXJ0ZXhGb3JtYXQuY29sb3I7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgVmVydGV4Rm9ybWF0X2RlZmF1bHQgPSBWZXJ0ZXhGb3JtYXQ7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9Cb3hHZW9tZXRyeS5qcwogIGZ1bmN0aW9uIEJveEdlb21ldHJ5KG9wdGlvbnMpIHsKICAgIG9wdGlvbnMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLCBkZWZhdWx0VmFsdWVfZGVmYXVsdC5FTVBUWV9PQkpFQ1QpOwogICAgY29uc3QgbWluMyA9IG9wdGlvbnMubWluaW11bTsKICAgIGNvbnN0IG1heDMgPSBvcHRpb25zLm1heGltdW07CiAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1pbiIsIG1pbjMpOwogICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXgiLCBtYXgzKTsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQob3B0aW9ucy5vZmZzZXRBdHRyaWJ1dGUpICYmIG9wdGlvbnMub2Zmc2V0QXR0cmlidXRlID09PSBHZW9tZXRyeU9mZnNldEF0dHJpYnV0ZV9kZWZhdWx0LlRPUCkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAiR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGUuVE9QIGlzIG5vdCBhIHN1cHBvcnRlZCBvcHRpb25zLm9mZnNldEF0dHJpYnV0ZSBmb3IgdGhpcyBnZW9tZXRyeS4iCiAgICAgICk7CiAgICB9CiAgICBjb25zdCB2ZXJ0ZXhGb3JtYXQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLnZlcnRleEZvcm1hdCwgVmVydGV4Rm9ybWF0X2RlZmF1bHQuREVGQVVMVCk7CiAgICB0aGlzLl9taW5pbXVtID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKG1pbjMpOwogICAgdGhpcy5fbWF4aW11bSA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShtYXgzKTsKICAgIHRoaXMuX3ZlcnRleEZvcm1hdCA9IHZlcnRleEZvcm1hdDsKICAgIHRoaXMuX29mZnNldEF0dHJpYnV0ZSA9IG9wdGlvbnMub2Zmc2V0QXR0cmlidXRlOwogICAgdGhpcy5fd29ya2VyTmFtZSA9ICJjcmVhdGVCb3hHZW9tZXRyeSI7CiAgfQogIHZhciBkaWZmU2NyYXRjaCwgc2NyYXRjaE1pbiwgc2NyYXRjaE1heCwgc2NyYXRjaFZlcnRleEZvcm1hdCwgc2NyYXRjaE9wdGlvbnMsIHVuaXRCb3hHZW9tZXRyeSwgQm94R2VvbWV0cnlfZGVmYXVsdDsKICB2YXIgaW5pdF9Cb3hHZW9tZXRyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvQm94R2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X0JvdW5kaW5nU3BoZXJlKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfQ29tcG9uZW50RGF0YXR5cGUoKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgaW5pdF9HZW9tZXRyeSgpOwogICAgICBpbml0X0dlb21ldHJ5QXR0cmlidXRlKCk7CiAgICAgIGluaXRfR2VvbWV0cnlBdHRyaWJ1dGVzKCk7CiAgICAgIGluaXRfR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGUoKTsKICAgICAgaW5pdF9QcmltaXRpdmVUeXBlKCk7CiAgICAgIGluaXRfVmVydGV4Rm9ybWF0KCk7CiAgICAgIGRpZmZTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBCb3hHZW9tZXRyeS5mcm9tRGltZW5zaW9ucyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgICBvcHRpb25zID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucywgZGVmYXVsdFZhbHVlX2RlZmF1bHQuRU1QVFlfT0JKRUNUKTsKICAgICAgICBjb25zdCBkaW1lbnNpb25zID0gb3B0aW9ucy5kaW1lbnNpb25zOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiZGltZW5zaW9ucyIsIGRpbWVuc2lvbnMpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbk9yRXF1YWxzKCJkaW1lbnNpb25zLngiLCBkaW1lbnNpb25zLngsIDApOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbk9yRXF1YWxzKCJkaW1lbnNpb25zLnkiLCBkaW1lbnNpb25zLnksIDApOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbk9yRXF1YWxzKCJkaW1lbnNpb25zLnoiLCBkaW1lbnNpb25zLnosIDApOwogICAgICAgIGNvbnN0IGNvcm5lciA9IENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKGRpbWVuc2lvbnMsIDAuNSwgbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpKTsKICAgICAgICByZXR1cm4gbmV3IEJveEdlb21ldHJ5KHsKICAgICAgICAgIG1pbmltdW06IENhcnRlc2lhbjNfZGVmYXVsdC5uZWdhdGUoY29ybmVyLCBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCkpLAogICAgICAgICAgbWF4aW11bTogY29ybmVyLAogICAgICAgICAgdmVydGV4Rm9ybWF0OiBvcHRpb25zLnZlcnRleEZvcm1hdCwKICAgICAgICAgIG9mZnNldEF0dHJpYnV0ZTogb3B0aW9ucy5vZmZzZXRBdHRyaWJ1dGUKICAgICAgICB9KTsKICAgICAgfTsKICAgICAgQm94R2VvbWV0cnkuZnJvbUF4aXNBbGlnbmVkQm91bmRpbmdCb3ggPSBmdW5jdGlvbihib3VuZGluZ0JveCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiYm91bmRpbmdCb3giLCBib3VuZGluZ0JveCk7CiAgICAgICAgcmV0dXJuIG5ldyBCb3hHZW9tZXRyeSh7CiAgICAgICAgICBtaW5pbXVtOiBib3VuZGluZ0JveC5taW5pbXVtLAogICAgICAgICAgbWF4aW11bTogYm91bmRpbmdCb3gubWF4aW11bQogICAgICAgIH0pOwogICAgICB9OwogICAgICBCb3hHZW9tZXRyeS5wYWNrZWRMZW5ndGggPSAyICogQ2FydGVzaWFuM19kZWZhdWx0LnBhY2tlZExlbmd0aCArIFZlcnRleEZvcm1hdF9kZWZhdWx0LnBhY2tlZExlbmd0aCArIDE7CiAgICAgIEJveEdlb21ldHJ5LnBhY2sgPSBmdW5jdGlvbih2YWx1ZSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInZhbHVlIiwgdmFsdWUpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKHZhbHVlLl9taW5pbXVtLCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2soCiAgICAgICAgICB2YWx1ZS5fbWF4aW11bSwKICAgICAgICAgIGFycmF5LAogICAgICAgICAgc3RhcnRpbmdJbmRleCArIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGgKICAgICAgICApOwogICAgICAgIFZlcnRleEZvcm1hdF9kZWZhdWx0LnBhY2soCiAgICAgICAgICB2YWx1ZS5fdmVydGV4Rm9ybWF0LAogICAgICAgICAgYXJyYXksCiAgICAgICAgICBzdGFydGluZ0luZGV4ICsgMiAqIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGgKICAgICAgICApOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXggKyAyICogQ2FydGVzaWFuM19kZWZhdWx0LnBhY2tlZExlbmd0aCArIFZlcnRleEZvcm1hdF9kZWZhdWx0LnBhY2tlZExlbmd0aF0gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh2YWx1ZS5fb2Zmc2V0QXR0cmlidXRlLCAtMSk7CiAgICAgICAgcmV0dXJuIGFycmF5OwogICAgICB9OwogICAgICBzY3JhdGNoTWluID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoTWF4ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoVmVydGV4Rm9ybWF0ID0gbmV3IFZlcnRleEZvcm1hdF9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hPcHRpb25zID0gewogICAgICAgIG1pbmltdW06IHNjcmF0Y2hNaW4sCiAgICAgICAgbWF4aW11bTogc2NyYXRjaE1heCwKICAgICAgICB2ZXJ0ZXhGb3JtYXQ6IHNjcmF0Y2hWZXJ0ZXhGb3JtYXQsCiAgICAgICAgb2Zmc2V0QXR0cmlidXRlOiB2b2lkIDAKICAgICAgfTsKICAgICAgQm94R2VvbWV0cnkudW5wYWNrID0gZnVuY3Rpb24oYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIGNvbnN0IG1pbjMgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKGFycmF5LCBzdGFydGluZ0luZGV4LCBzY3JhdGNoTWluKTsKICAgICAgICBjb25zdCBtYXgzID0gQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjaygKICAgICAgICAgIGFycmF5LAogICAgICAgICAgc3RhcnRpbmdJbmRleCArIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGgsCiAgICAgICAgICBzY3JhdGNoTWF4CiAgICAgICAgKTsKICAgICAgICBjb25zdCB2ZXJ0ZXhGb3JtYXQgPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC51bnBhY2soCiAgICAgICAgICBhcnJheSwKICAgICAgICAgIHN0YXJ0aW5nSW5kZXggKyAyICogQ2FydGVzaWFuM19kZWZhdWx0LnBhY2tlZExlbmd0aCwKICAgICAgICAgIHNjcmF0Y2hWZXJ0ZXhGb3JtYXQKICAgICAgICApOwogICAgICAgIGNvbnN0IG9mZnNldEF0dHJpYnV0ZSA9IGFycmF5W3N0YXJ0aW5nSW5kZXggKyAyICogQ2FydGVzaWFuM19kZWZhdWx0LnBhY2tlZExlbmd0aCArIFZlcnRleEZvcm1hdF9kZWZhdWx0LnBhY2tlZExlbmd0aF07CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgc2NyYXRjaE9wdGlvbnMub2Zmc2V0QXR0cmlidXRlID0gb2Zmc2V0QXR0cmlidXRlID09PSAtMSA/IHZvaWQgMCA6IG9mZnNldEF0dHJpYnV0ZTsKICAgICAgICAgIHJldHVybiBuZXcgQm94R2VvbWV0cnkoc2NyYXRjaE9wdGlvbnMpOwogICAgICAgIH0KICAgICAgICByZXN1bHQuX21pbmltdW0gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUobWluMywgcmVzdWx0Ll9taW5pbXVtKTsKICAgICAgICByZXN1bHQuX21heGltdW0gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUobWF4MywgcmVzdWx0Ll9tYXhpbXVtKTsKICAgICAgICByZXN1bHQuX3ZlcnRleEZvcm1hdCA9IFZlcnRleEZvcm1hdF9kZWZhdWx0LmNsb25lKHZlcnRleEZvcm1hdCwgcmVzdWx0Ll92ZXJ0ZXhGb3JtYXQpOwogICAgICAgIHJlc3VsdC5fb2Zmc2V0QXR0cmlidXRlID0gb2Zmc2V0QXR0cmlidXRlID09PSAtMSA/IHZvaWQgMCA6IG9mZnNldEF0dHJpYnV0ZTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBCb3hHZW9tZXRyeS5jcmVhdGVHZW9tZXRyeSA9IGZ1bmN0aW9uKGJveEdlb21ldHJ5KSB7CiAgICAgICAgY29uc3QgbWluMyA9IGJveEdlb21ldHJ5Ll9taW5pbXVtOwogICAgICAgIGNvbnN0IG1heDMgPSBib3hHZW9tZXRyeS5fbWF4aW11bTsKICAgICAgICBjb25zdCB2ZXJ0ZXhGb3JtYXQgPSBib3hHZW9tZXRyeS5fdmVydGV4Rm9ybWF0OwogICAgICAgIGlmIChDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzKG1pbjMsIG1heDMpKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVzX2RlZmF1bHQoKTsKICAgICAgICBsZXQgaW5kaWNlczsKICAgICAgICBsZXQgcG9zaXRpb25zOwogICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQucG9zaXRpb24gJiYgKHZlcnRleEZvcm1hdC5zdCB8fCB2ZXJ0ZXhGb3JtYXQubm9ybWFsIHx8IHZlcnRleEZvcm1hdC50YW5nZW50IHx8IHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpKSB7CiAgICAgICAgICBpZiAodmVydGV4Rm9ybWF0LnBvc2l0aW9uKSB7CiAgICAgICAgICAgIHBvc2l0aW9ucyA9IG5ldyBGbG9hdDY0QXJyYXkoNiAqIDQgKiAzKTsKICAgICAgICAgICAgcG9zaXRpb25zWzBdID0gbWluMy54OwogICAgICAgICAgICBwb3NpdGlvbnNbMV0gPSBtaW4zLnk7CiAgICAgICAgICAgIHBvc2l0aW9uc1syXSA9IG1heDMuejsKICAgICAgICAgICAgcG9zaXRpb25zWzNdID0gbWF4My54OwogICAgICAgICAgICBwb3NpdGlvbnNbNF0gPSBtaW4zLnk7CiAgICAgICAgICAgIHBvc2l0aW9uc1s1XSA9IG1heDMuejsKICAgICAgICAgICAgcG9zaXRpb25zWzZdID0gbWF4My54OwogICAgICAgICAgICBwb3NpdGlvbnNbN10gPSBtYXgzLnk7CiAgICAgICAgICAgIHBvc2l0aW9uc1s4XSA9IG1heDMuejsKICAgICAgICAgICAgcG9zaXRpb25zWzldID0gbWluMy54OwogICAgICAgICAgICBwb3NpdGlvbnNbMTBdID0gbWF4My55OwogICAgICAgICAgICBwb3NpdGlvbnNbMTFdID0gbWF4My56OwogICAgICAgICAgICBwb3NpdGlvbnNbMTJdID0gbWluMy54OwogICAgICAgICAgICBwb3NpdGlvbnNbMTNdID0gbWluMy55OwogICAgICAgICAgICBwb3NpdGlvbnNbMTRdID0gbWluMy56OwogICAgICAgICAgICBwb3NpdGlvbnNbMTVdID0gbWF4My54OwogICAgICAgICAgICBwb3NpdGlvbnNbMTZdID0gbWluMy55OwogICAgICAgICAgICBwb3NpdGlvbnNbMTddID0gbWluMy56OwogICAgICAgICAgICBwb3NpdGlvbnNbMThdID0gbWF4My54OwogICAgICAgICAgICBwb3NpdGlvbnNbMTldID0gbWF4My55OwogICAgICAgICAgICBwb3NpdGlvbnNbMjBdID0gbWluMy56OwogICAgICAgICAgICBwb3NpdGlvbnNbMjFdID0gbWluMy54OwogICAgICAgICAgICBwb3NpdGlvbnNbMjJdID0gbWF4My55OwogICAgICAgICAgICBwb3NpdGlvbnNbMjNdID0gbWluMy56OwogICAgICAgICAgICBwb3NpdGlvbnNbMjRdID0gbWF4My54OwogICAgICAgICAgICBwb3NpdGlvbnNbMjVdID0gbWluMy55OwogICAgICAgICAgICBwb3NpdGlvbnNbMjZdID0gbWluMy56OwogICAgICAgICAgICBwb3NpdGlvbnNbMjddID0gbWF4My54OwogICAgICAgICAgICBwb3NpdGlvbnNbMjhdID0gbWF4My55OwogICAgICAgICAgICBwb3NpdGlvbnNbMjldID0gbWluMy56OwogICAgICAgICAgICBwb3NpdGlvbnNbMzBdID0gbWF4My54OwogICAgICAgICAgICBwb3NpdGlvbnNbMzFdID0gbWF4My55OwogICAgICAgICAgICBwb3NpdGlvbnNbMzJdID0gbWF4My56OwogICAgICAgICAgICBwb3NpdGlvbnNbMzNdID0gbWF4My54OwogICAgICAgICAgICBwb3NpdGlvbnNbMzRdID0gbWluMy55OwogICAgICAgICAgICBwb3NpdGlvbnNbMzVdID0gbWF4My56OwogICAgICAgICAgICBwb3NpdGlvbnNbMzZdID0gbWluMy54OwogICAgICAgICAgICBwb3NpdGlvbnNbMzddID0gbWluMy55OwogICAgICAgICAgICBwb3NpdGlvbnNbMzhdID0gbWluMy56OwogICAgICAgICAgICBwb3NpdGlvbnNbMzldID0gbWluMy54OwogICAgICAgICAgICBwb3NpdGlvbnNbNDBdID0gbWF4My55OwogICAgICAgICAgICBwb3NpdGlvbnNbNDFdID0gbWluMy56OwogICAgICAgICAgICBwb3NpdGlvbnNbNDJdID0gbWluMy54OwogICAgICAgICAgICBwb3NpdGlvbnNbNDNdID0gbWF4My55OwogICAgICAgICAgICBwb3NpdGlvbnNbNDRdID0gbWF4My56OwogICAgICAgICAgICBwb3NpdGlvbnNbNDVdID0gbWluMy54OwogICAgICAgICAgICBwb3NpdGlvbnNbNDZdID0gbWluMy55OwogICAgICAgICAgICBwb3NpdGlvbnNbNDddID0gbWF4My56OwogICAgICAgICAgICBwb3NpdGlvbnNbNDhdID0gbWluMy54OwogICAgICAgICAgICBwb3NpdGlvbnNbNDldID0gbWF4My55OwogICAgICAgICAgICBwb3NpdGlvbnNbNTBdID0gbWluMy56OwogICAgICAgICAgICBwb3NpdGlvbnNbNTFdID0gbWF4My54OwogICAgICAgICAgICBwb3NpdGlvbnNbNTJdID0gbWF4My55OwogICAgICAgICAgICBwb3NpdGlvbnNbNTNdID0gbWluMy56OwogICAgICAgICAgICBwb3NpdGlvbnNbNTRdID0gbWF4My54OwogICAgICAgICAgICBwb3NpdGlvbnNbNTVdID0gbWF4My55OwogICAgICAgICAgICBwb3NpdGlvbnNbNTZdID0gbWF4My56OwogICAgICAgICAgICBwb3NpdGlvbnNbNTddID0gbWluMy54OwogICAgICAgICAgICBwb3NpdGlvbnNbNThdID0gbWF4My55OwogICAgICAgICAgICBwb3NpdGlvbnNbNTldID0gbWF4My56OwogICAgICAgICAgICBwb3NpdGlvbnNbNjBdID0gbWluMy54OwogICAgICAgICAgICBwb3NpdGlvbnNbNjFdID0gbWluMy55OwogICAgICAgICAgICBwb3NpdGlvbnNbNjJdID0gbWluMy56OwogICAgICAgICAgICBwb3NpdGlvbnNbNjNdID0gbWF4My54OwogICAgICAgICAgICBwb3NpdGlvbnNbNjRdID0gbWluMy55OwogICAgICAgICAgICBwb3NpdGlvbnNbNjVdID0gbWluMy56OwogICAgICAgICAgICBwb3NpdGlvbnNbNjZdID0gbWF4My54OwogICAgICAgICAgICBwb3NpdGlvbnNbNjddID0gbWluMy55OwogICAgICAgICAgICBwb3NpdGlvbnNbNjhdID0gbWF4My56OwogICAgICAgICAgICBwb3NpdGlvbnNbNjldID0gbWluMy54OwogICAgICAgICAgICBwb3NpdGlvbnNbNzBdID0gbWluMy55OwogICAgICAgICAgICBwb3NpdGlvbnNbNzFdID0gbWF4My56OwogICAgICAgICAgICBhdHRyaWJ1dGVzLnBvc2l0aW9uID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkRPVUJMRSwKICAgICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgICAgICAgIHZhbHVlczogcG9zaXRpb25zCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5ub3JtYWwpIHsKICAgICAgICAgICAgY29uc3Qgbm9ybWFscyA9IG5ldyBGbG9hdDMyQXJyYXkoNiAqIDQgKiAzKTsKICAgICAgICAgICAgbm9ybWFsc1swXSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbMV0gPSAwOwogICAgICAgICAgICBub3JtYWxzWzJdID0gMTsKICAgICAgICAgICAgbm9ybWFsc1szXSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbNF0gPSAwOwogICAgICAgICAgICBub3JtYWxzWzVdID0gMTsKICAgICAgICAgICAgbm9ybWFsc1s2XSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbN10gPSAwOwogICAgICAgICAgICBub3JtYWxzWzhdID0gMTsKICAgICAgICAgICAgbm9ybWFsc1s5XSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbMTBdID0gMDsKICAgICAgICAgICAgbm9ybWFsc1sxMV0gPSAxOwogICAgICAgICAgICBub3JtYWxzWzEyXSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbMTNdID0gMDsKICAgICAgICAgICAgbm9ybWFsc1sxNF0gPSAtMTsKICAgICAgICAgICAgbm9ybWFsc1sxNV0gPSAwOwogICAgICAgICAgICBub3JtYWxzWzE2XSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbMTddID0gLTE7CiAgICAgICAgICAgIG5vcm1hbHNbMThdID0gMDsKICAgICAgICAgICAgbm9ybWFsc1sxOV0gPSAwOwogICAgICAgICAgICBub3JtYWxzWzIwXSA9IC0xOwogICAgICAgICAgICBub3JtYWxzWzIxXSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbMjJdID0gMDsKICAgICAgICAgICAgbm9ybWFsc1syM10gPSAtMTsKICAgICAgICAgICAgbm9ybWFsc1syNF0gPSAxOwogICAgICAgICAgICBub3JtYWxzWzI1XSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbMjZdID0gMDsKICAgICAgICAgICAgbm9ybWFsc1syN10gPSAxOwogICAgICAgICAgICBub3JtYWxzWzI4XSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbMjldID0gMDsKICAgICAgICAgICAgbm9ybWFsc1szMF0gPSAxOwogICAgICAgICAgICBub3JtYWxzWzMxXSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbMzJdID0gMDsKICAgICAgICAgICAgbm9ybWFsc1szM10gPSAxOwogICAgICAgICAgICBub3JtYWxzWzM0XSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbMzVdID0gMDsKICAgICAgICAgICAgbm9ybWFsc1szNl0gPSAtMTsKICAgICAgICAgICAgbm9ybWFsc1szN10gPSAwOwogICAgICAgICAgICBub3JtYWxzWzM4XSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbMzldID0gLTE7CiAgICAgICAgICAgIG5vcm1hbHNbNDBdID0gMDsKICAgICAgICAgICAgbm9ybWFsc1s0MV0gPSAwOwogICAgICAgICAgICBub3JtYWxzWzQyXSA9IC0xOwogICAgICAgICAgICBub3JtYWxzWzQzXSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbNDRdID0gMDsKICAgICAgICAgICAgbm9ybWFsc1s0NV0gPSAtMTsKICAgICAgICAgICAgbm9ybWFsc1s0Nl0gPSAwOwogICAgICAgICAgICBub3JtYWxzWzQ3XSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbNDhdID0gMDsKICAgICAgICAgICAgbm9ybWFsc1s0OV0gPSAxOwogICAgICAgICAgICBub3JtYWxzWzUwXSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbNTFdID0gMDsKICAgICAgICAgICAgbm9ybWFsc1s1Ml0gPSAxOwogICAgICAgICAgICBub3JtYWxzWzUzXSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbNTRdID0gMDsKICAgICAgICAgICAgbm9ybWFsc1s1NV0gPSAxOwogICAgICAgICAgICBub3JtYWxzWzU2XSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbNTddID0gMDsKICAgICAgICAgICAgbm9ybWFsc1s1OF0gPSAxOwogICAgICAgICAgICBub3JtYWxzWzU5XSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbNjBdID0gMDsKICAgICAgICAgICAgbm9ybWFsc1s2MV0gPSAtMTsKICAgICAgICAgICAgbm9ybWFsc1s2Ml0gPSAwOwogICAgICAgICAgICBub3JtYWxzWzYzXSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbNjRdID0gLTE7CiAgICAgICAgICAgIG5vcm1hbHNbNjVdID0gMDsKICAgICAgICAgICAgbm9ybWFsc1s2Nl0gPSAwOwogICAgICAgICAgICBub3JtYWxzWzY3XSA9IC0xOwogICAgICAgICAgICBub3JtYWxzWzY4XSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbNjldID0gMDsKICAgICAgICAgICAgbm9ybWFsc1s3MF0gPSAtMTsKICAgICAgICAgICAgbm9ybWFsc1s3MV0gPSAwOwogICAgICAgICAgICBhdHRyaWJ1dGVzLm5vcm1hbCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgICAgICAgIHZhbHVlczogbm9ybWFscwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQuc3QpIHsKICAgICAgICAgICAgY29uc3QgdGV4Q29vcmRzID0gbmV3IEZsb2F0MzJBcnJheSg2ICogNCAqIDIpOwogICAgICAgICAgICB0ZXhDb29yZHNbMF0gPSAwOwogICAgICAgICAgICB0ZXhDb29yZHNbMV0gPSAwOwogICAgICAgICAgICB0ZXhDb29yZHNbMl0gPSAxOwogICAgICAgICAgICB0ZXhDb29yZHNbM10gPSAwOwogICAgICAgICAgICB0ZXhDb29yZHNbNF0gPSAxOwogICAgICAgICAgICB0ZXhDb29yZHNbNV0gPSAxOwogICAgICAgICAgICB0ZXhDb29yZHNbNl0gPSAwOwogICAgICAgICAgICB0ZXhDb29yZHNbN10gPSAxOwogICAgICAgICAgICB0ZXhDb29yZHNbOF0gPSAxOwogICAgICAgICAgICB0ZXhDb29yZHNbOV0gPSAwOwogICAgICAgICAgICB0ZXhDb29yZHNbMTBdID0gMDsKICAgICAgICAgICAgdGV4Q29vcmRzWzExXSA9IDA7CiAgICAgICAgICAgIHRleENvb3Jkc1sxMl0gPSAwOwogICAgICAgICAgICB0ZXhDb29yZHNbMTNdID0gMTsKICAgICAgICAgICAgdGV4Q29vcmRzWzE0XSA9IDE7CiAgICAgICAgICAgIHRleENvb3Jkc1sxNV0gPSAxOwogICAgICAgICAgICB0ZXhDb29yZHNbMTZdID0gMDsKICAgICAgICAgICAgdGV4Q29vcmRzWzE3XSA9IDA7CiAgICAgICAgICAgIHRleENvb3Jkc1sxOF0gPSAxOwogICAgICAgICAgICB0ZXhDb29yZHNbMTldID0gMDsKICAgICAgICAgICAgdGV4Q29vcmRzWzIwXSA9IDE7CiAgICAgICAgICAgIHRleENvb3Jkc1syMV0gPSAxOwogICAgICAgICAgICB0ZXhDb29yZHNbMjJdID0gMDsKICAgICAgICAgICAgdGV4Q29vcmRzWzIzXSA9IDE7CiAgICAgICAgICAgIHRleENvb3Jkc1syNF0gPSAxOwogICAgICAgICAgICB0ZXhDb29yZHNbMjVdID0gMDsKICAgICAgICAgICAgdGV4Q29vcmRzWzI2XSA9IDA7CiAgICAgICAgICAgIHRleENvb3Jkc1syN10gPSAwOwogICAgICAgICAgICB0ZXhDb29yZHNbMjhdID0gMDsKICAgICAgICAgICAgdGV4Q29vcmRzWzI5XSA9IDE7CiAgICAgICAgICAgIHRleENvb3Jkc1szMF0gPSAxOwogICAgICAgICAgICB0ZXhDb29yZHNbMzFdID0gMTsKICAgICAgICAgICAgdGV4Q29vcmRzWzMyXSA9IDE7CiAgICAgICAgICAgIHRleENvb3Jkc1szM10gPSAwOwogICAgICAgICAgICB0ZXhDb29yZHNbMzRdID0gMDsKICAgICAgICAgICAgdGV4Q29vcmRzWzM1XSA9IDA7CiAgICAgICAgICAgIHRleENvb3Jkc1szNl0gPSAwOwogICAgICAgICAgICB0ZXhDb29yZHNbMzddID0gMTsKICAgICAgICAgICAgdGV4Q29vcmRzWzM4XSA9IDE7CiAgICAgICAgICAgIHRleENvb3Jkc1szOV0gPSAxOwogICAgICAgICAgICB0ZXhDb29yZHNbNDBdID0gMDsKICAgICAgICAgICAgdGV4Q29vcmRzWzQxXSA9IDA7CiAgICAgICAgICAgIHRleENvb3Jkc1s0Ml0gPSAxOwogICAgICAgICAgICB0ZXhDb29yZHNbNDNdID0gMDsKICAgICAgICAgICAgdGV4Q29vcmRzWzQ0XSA9IDE7CiAgICAgICAgICAgIHRleENvb3Jkc1s0NV0gPSAxOwogICAgICAgICAgICB0ZXhDb29yZHNbNDZdID0gMDsKICAgICAgICAgICAgdGV4Q29vcmRzWzQ3XSA9IDE7CiAgICAgICAgICAgIGF0dHJpYnV0ZXMuc3QgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMiwKICAgICAgICAgICAgICB2YWx1ZXM6IHRleENvb3JkcwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQudGFuZ2VudCkgewogICAgICAgICAgICBjb25zdCB0YW5nZW50cyA9IG5ldyBGbG9hdDMyQXJyYXkoNiAqIDQgKiAzKTsKICAgICAgICAgICAgdGFuZ2VudHNbMF0gPSAxOwogICAgICAgICAgICB0YW5nZW50c1sxXSA9IDA7CiAgICAgICAgICAgIHRhbmdlbnRzWzJdID0gMDsKICAgICAgICAgICAgdGFuZ2VudHNbM10gPSAxOwogICAgICAgICAgICB0YW5nZW50c1s0XSA9IDA7CiAgICAgICAgICAgIHRhbmdlbnRzWzVdID0gMDsKICAgICAgICAgICAgdGFuZ2VudHNbNl0gPSAxOwogICAgICAgICAgICB0YW5nZW50c1s3XSA9IDA7CiAgICAgICAgICAgIHRhbmdlbnRzWzhdID0gMDsKICAgICAgICAgICAgdGFuZ2VudHNbOV0gPSAxOwogICAgICAgICAgICB0YW5nZW50c1sxMF0gPSAwOwogICAgICAgICAgICB0YW5nZW50c1sxMV0gPSAwOwogICAgICAgICAgICB0YW5nZW50c1sxMl0gPSAtMTsKICAgICAgICAgICAgdGFuZ2VudHNbMTNdID0gMDsKICAgICAgICAgICAgdGFuZ2VudHNbMTRdID0gMDsKICAgICAgICAgICAgdGFuZ2VudHNbMTVdID0gLTE7CiAgICAgICAgICAgIHRhbmdlbnRzWzE2XSA9IDA7CiAgICAgICAgICAgIHRhbmdlbnRzWzE3XSA9IDA7CiAgICAgICAgICAgIHRhbmdlbnRzWzE4XSA9IC0xOwogICAgICAgICAgICB0YW5nZW50c1sxOV0gPSAwOwogICAgICAgICAgICB0YW5nZW50c1syMF0gPSAwOwogICAgICAgICAgICB0YW5nZW50c1syMV0gPSAtMTsKICAgICAgICAgICAgdGFuZ2VudHNbMjJdID0gMDsKICAgICAgICAgICAgdGFuZ2VudHNbMjNdID0gMDsKICAgICAgICAgICAgdGFuZ2VudHNbMjRdID0gMDsKICAgICAgICAgICAgdGFuZ2VudHNbMjVdID0gMTsKICAgICAgICAgICAgdGFuZ2VudHNbMjZdID0gMDsKICAgICAgICAgICAgdGFuZ2VudHNbMjddID0gMDsKICAgICAgICAgICAgdGFuZ2VudHNbMjhdID0gMTsKICAgICAgICAgICAgdGFuZ2VudHNbMjldID0gMDsKICAgICAgICAgICAgdGFuZ2VudHNbMzBdID0gMDsKICAgICAgICAgICAgdGFuZ2VudHNbMzFdID0gMTsKICAgICAgICAgICAgdGFuZ2VudHNbMzJdID0gMDsKICAgICAgICAgICAgdGFuZ2VudHNbMzNdID0gMDsKICAgICAgICAgICAgdGFuZ2VudHNbMzRdID0gMTsKICAgICAgICAgICAgdGFuZ2VudHNbMzVdID0gMDsKICAgICAgICAgICAgdGFuZ2VudHNbMzZdID0gMDsKICAgICAgICAgICAgdGFuZ2VudHNbMzddID0gLTE7CiAgICAgICAgICAgIHRhbmdlbnRzWzM4XSA9IDA7CiAgICAgICAgICAgIHRhbmdlbnRzWzM5XSA9IDA7CiAgICAgICAgICAgIHRhbmdlbnRzWzQwXSA9IC0xOwogICAgICAgICAgICB0YW5nZW50c1s0MV0gPSAwOwogICAgICAgICAgICB0YW5nZW50c1s0Ml0gPSAwOwogICAgICAgICAgICB0YW5nZW50c1s0M10gPSAtMTsKICAgICAgICAgICAgdGFuZ2VudHNbNDRdID0gMDsKICAgICAgICAgICAgdGFuZ2VudHNbNDVdID0gMDsKICAgICAgICAgICAgdGFuZ2VudHNbNDZdID0gLTE7CiAgICAgICAgICAgIHRhbmdlbnRzWzQ3XSA9IDA7CiAgICAgICAgICAgIHRhbmdlbnRzWzQ4XSA9IC0xOwogICAgICAgICAgICB0YW5nZW50c1s0OV0gPSAwOwogICAgICAgICAgICB0YW5nZW50c1s1MF0gPSAwOwogICAgICAgICAgICB0YW5nZW50c1s1MV0gPSAtMTsKICAgICAgICAgICAgdGFuZ2VudHNbNTJdID0gMDsKICAgICAgICAgICAgdGFuZ2VudHNbNTNdID0gMDsKICAgICAgICAgICAgdGFuZ2VudHNbNTRdID0gLTE7CiAgICAgICAgICAgIHRhbmdlbnRzWzU1XSA9IDA7CiAgICAgICAgICAgIHRhbmdlbnRzWzU2XSA9IDA7CiAgICAgICAgICAgIHRhbmdlbnRzWzU3XSA9IC0xOwogICAgICAgICAgICB0YW5nZW50c1s1OF0gPSAwOwogICAgICAgICAgICB0YW5nZW50c1s1OV0gPSAwOwogICAgICAgICAgICB0YW5nZW50c1s2MF0gPSAxOwogICAgICAgICAgICB0YW5nZW50c1s2MV0gPSAwOwogICAgICAgICAgICB0YW5nZW50c1s2Ml0gPSAwOwogICAgICAgICAgICB0YW5nZW50c1s2M10gPSAxOwogICAgICAgICAgICB0YW5nZW50c1s2NF0gPSAwOwogICAgICAgICAgICB0YW5nZW50c1s2NV0gPSAwOwogICAgICAgICAgICB0YW5nZW50c1s2Nl0gPSAxOwogICAgICAgICAgICB0YW5nZW50c1s2N10gPSAwOwogICAgICAgICAgICB0YW5nZW50c1s2OF0gPSAwOwogICAgICAgICAgICB0YW5nZW50c1s2OV0gPSAxOwogICAgICAgICAgICB0YW5nZW50c1s3MF0gPSAwOwogICAgICAgICAgICB0YW5nZW50c1s3MV0gPSAwOwogICAgICAgICAgICBhdHRyaWJ1dGVzLnRhbmdlbnQgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICAgICAgICB2YWx1ZXM6IHRhbmdlbnRzCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpIHsKICAgICAgICAgICAgY29uc3QgYml0YW5nZW50cyA9IG5ldyBGbG9hdDMyQXJyYXkoNiAqIDQgKiAzKTsKICAgICAgICAgICAgYml0YW5nZW50c1swXSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbMV0gPSAxOwogICAgICAgICAgICBiaXRhbmdlbnRzWzJdID0gMDsKICAgICAgICAgICAgYml0YW5nZW50c1szXSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbNF0gPSAxOwogICAgICAgICAgICBiaXRhbmdlbnRzWzVdID0gMDsKICAgICAgICAgICAgYml0YW5nZW50c1s2XSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbN10gPSAxOwogICAgICAgICAgICBiaXRhbmdlbnRzWzhdID0gMDsKICAgICAgICAgICAgYml0YW5nZW50c1s5XSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbMTBdID0gMTsKICAgICAgICAgICAgYml0YW5nZW50c1sxMV0gPSAwOwogICAgICAgICAgICBiaXRhbmdlbnRzWzEyXSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbMTNdID0gMTsKICAgICAgICAgICAgYml0YW5nZW50c1sxNF0gPSAwOwogICAgICAgICAgICBiaXRhbmdlbnRzWzE1XSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbMTZdID0gMTsKICAgICAgICAgICAgYml0YW5nZW50c1sxN10gPSAwOwogICAgICAgICAgICBiaXRhbmdlbnRzWzE4XSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbMTldID0gMTsKICAgICAgICAgICAgYml0YW5nZW50c1syMF0gPSAwOwogICAgICAgICAgICBiaXRhbmdlbnRzWzIxXSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbMjJdID0gMTsKICAgICAgICAgICAgYml0YW5nZW50c1syM10gPSAwOwogICAgICAgICAgICBiaXRhbmdlbnRzWzI0XSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbMjVdID0gMDsKICAgICAgICAgICAgYml0YW5nZW50c1syNl0gPSAxOwogICAgICAgICAgICBiaXRhbmdlbnRzWzI3XSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbMjhdID0gMDsKICAgICAgICAgICAgYml0YW5nZW50c1syOV0gPSAxOwogICAgICAgICAgICBiaXRhbmdlbnRzWzMwXSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbMzFdID0gMDsKICAgICAgICAgICAgYml0YW5nZW50c1szMl0gPSAxOwogICAgICAgICAgICBiaXRhbmdlbnRzWzMzXSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbMzRdID0gMDsKICAgICAgICAgICAgYml0YW5nZW50c1szNV0gPSAxOwogICAgICAgICAgICBiaXRhbmdlbnRzWzM2XSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbMzddID0gMDsKICAgICAgICAgICAgYml0YW5nZW50c1szOF0gPSAxOwogICAgICAgICAgICBiaXRhbmdlbnRzWzM5XSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbNDBdID0gMDsKICAgICAgICAgICAgYml0YW5nZW50c1s0MV0gPSAxOwogICAgICAgICAgICBiaXRhbmdlbnRzWzQyXSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbNDNdID0gMDsKICAgICAgICAgICAgYml0YW5nZW50c1s0NF0gPSAxOwogICAgICAgICAgICBiaXRhbmdlbnRzWzQ1XSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbNDZdID0gMDsKICAgICAgICAgICAgYml0YW5nZW50c1s0N10gPSAxOwogICAgICAgICAgICBiaXRhbmdlbnRzWzQ4XSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbNDldID0gMDsKICAgICAgICAgICAgYml0YW5nZW50c1s1MF0gPSAxOwogICAgICAgICAgICBiaXRhbmdlbnRzWzUxXSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbNTJdID0gMDsKICAgICAgICAgICAgYml0YW5nZW50c1s1M10gPSAxOwogICAgICAgICAgICBiaXRhbmdlbnRzWzU0XSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbNTVdID0gMDsKICAgICAgICAgICAgYml0YW5nZW50c1s1Nl0gPSAxOwogICAgICAgICAgICBiaXRhbmdlbnRzWzU3XSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbNThdID0gMDsKICAgICAgICAgICAgYml0YW5nZW50c1s1OV0gPSAxOwogICAgICAgICAgICBiaXRhbmdlbnRzWzYwXSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbNjFdID0gMDsKICAgICAgICAgICAgYml0YW5nZW50c1s2Ml0gPSAxOwogICAgICAgICAgICBiaXRhbmdlbnRzWzYzXSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbNjRdID0gMDsKICAgICAgICAgICAgYml0YW5nZW50c1s2NV0gPSAxOwogICAgICAgICAgICBiaXRhbmdlbnRzWzY2XSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbNjddID0gMDsKICAgICAgICAgICAgYml0YW5nZW50c1s2OF0gPSAxOwogICAgICAgICAgICBiaXRhbmdlbnRzWzY5XSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbNzBdID0gMDsKICAgICAgICAgICAgYml0YW5nZW50c1s3MV0gPSAxOwogICAgICAgICAgICBhdHRyaWJ1dGVzLmJpdGFuZ2VudCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgICAgICAgIHZhbHVlczogYml0YW5nZW50cwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICAgIGluZGljZXMgPSBuZXcgVWludDE2QXJyYXkoNiAqIDIgKiAzKTsKICAgICAgICAgIGluZGljZXNbMF0gPSAwOwogICAgICAgICAgaW5kaWNlc1sxXSA9IDE7CiAgICAgICAgICBpbmRpY2VzWzJdID0gMjsKICAgICAgICAgIGluZGljZXNbM10gPSAwOwogICAgICAgICAgaW5kaWNlc1s0XSA9IDI7CiAgICAgICAgICBpbmRpY2VzWzVdID0gMzsKICAgICAgICAgIGluZGljZXNbNl0gPSA0ICsgMjsKICAgICAgICAgIGluZGljZXNbN10gPSA0ICsgMTsKICAgICAgICAgIGluZGljZXNbOF0gPSA0ICsgMDsKICAgICAgICAgIGluZGljZXNbOV0gPSA0ICsgMzsKICAgICAgICAgIGluZGljZXNbMTBdID0gNCArIDI7CiAgICAgICAgICBpbmRpY2VzWzExXSA9IDQgKyAwOwogICAgICAgICAgaW5kaWNlc1sxMl0gPSA4ICsgMDsKICAgICAgICAgIGluZGljZXNbMTNdID0gOCArIDE7CiAgICAgICAgICBpbmRpY2VzWzE0XSA9IDggKyAyOwogICAgICAgICAgaW5kaWNlc1sxNV0gPSA4ICsgMDsKICAgICAgICAgIGluZGljZXNbMTZdID0gOCArIDI7CiAgICAgICAgICBpbmRpY2VzWzE3XSA9IDggKyAzOwogICAgICAgICAgaW5kaWNlc1sxOF0gPSAxMiArIDI7CiAgICAgICAgICBpbmRpY2VzWzE5XSA9IDEyICsgMTsKICAgICAgICAgIGluZGljZXNbMjBdID0gMTIgKyAwOwogICAgICAgICAgaW5kaWNlc1syMV0gPSAxMiArIDM7CiAgICAgICAgICBpbmRpY2VzWzIyXSA9IDEyICsgMjsKICAgICAgICAgIGluZGljZXNbMjNdID0gMTIgKyAwOwogICAgICAgICAgaW5kaWNlc1syNF0gPSAxNiArIDI7CiAgICAgICAgICBpbmRpY2VzWzI1XSA9IDE2ICsgMTsKICAgICAgICAgIGluZGljZXNbMjZdID0gMTYgKyAwOwogICAgICAgICAgaW5kaWNlc1syN10gPSAxNiArIDM7CiAgICAgICAgICBpbmRpY2VzWzI4XSA9IDE2ICsgMjsKICAgICAgICAgIGluZGljZXNbMjldID0gMTYgKyAwOwogICAgICAgICAgaW5kaWNlc1szMF0gPSAyMCArIDA7CiAgICAgICAgICBpbmRpY2VzWzMxXSA9IDIwICsgMTsKICAgICAgICAgIGluZGljZXNbMzJdID0gMjAgKyAyOwogICAgICAgICAgaW5kaWNlc1szM10gPSAyMCArIDA7CiAgICAgICAgICBpbmRpY2VzWzM0XSA9IDIwICsgMjsKICAgICAgICAgIGluZGljZXNbMzVdID0gMjAgKyAzOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBwb3NpdGlvbnMgPSBuZXcgRmxvYXQ2NEFycmF5KDggKiAzKTsKICAgICAgICAgIHBvc2l0aW9uc1swXSA9IG1pbjMueDsKICAgICAgICAgIHBvc2l0aW9uc1sxXSA9IG1pbjMueTsKICAgICAgICAgIHBvc2l0aW9uc1syXSA9IG1pbjMuejsKICAgICAgICAgIHBvc2l0aW9uc1szXSA9IG1heDMueDsKICAgICAgICAgIHBvc2l0aW9uc1s0XSA9IG1pbjMueTsKICAgICAgICAgIHBvc2l0aW9uc1s1XSA9IG1pbjMuejsKICAgICAgICAgIHBvc2l0aW9uc1s2XSA9IG1heDMueDsKICAgICAgICAgIHBvc2l0aW9uc1s3XSA9IG1heDMueTsKICAgICAgICAgIHBvc2l0aW9uc1s4XSA9IG1pbjMuejsKICAgICAgICAgIHBvc2l0aW9uc1s5XSA9IG1pbjMueDsKICAgICAgICAgIHBvc2l0aW9uc1sxMF0gPSBtYXgzLnk7CiAgICAgICAgICBwb3NpdGlvbnNbMTFdID0gbWluMy56OwogICAgICAgICAgcG9zaXRpb25zWzEyXSA9IG1pbjMueDsKICAgICAgICAgIHBvc2l0aW9uc1sxM10gPSBtaW4zLnk7CiAgICAgICAgICBwb3NpdGlvbnNbMTRdID0gbWF4My56OwogICAgICAgICAgcG9zaXRpb25zWzE1XSA9IG1heDMueDsKICAgICAgICAgIHBvc2l0aW9uc1sxNl0gPSBtaW4zLnk7CiAgICAgICAgICBwb3NpdGlvbnNbMTddID0gbWF4My56OwogICAgICAgICAgcG9zaXRpb25zWzE4XSA9IG1heDMueDsKICAgICAgICAgIHBvc2l0aW9uc1sxOV0gPSBtYXgzLnk7CiAgICAgICAgICBwb3NpdGlvbnNbMjBdID0gbWF4My56OwogICAgICAgICAgcG9zaXRpb25zWzIxXSA9IG1pbjMueDsKICAgICAgICAgIHBvc2l0aW9uc1syMl0gPSBtYXgzLnk7CiAgICAgICAgICBwb3NpdGlvbnNbMjNdID0gbWF4My56OwogICAgICAgICAgYXR0cmlidXRlcy5wb3NpdGlvbiA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRE9VQkxFLAogICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgICAgICB2YWx1ZXM6IHBvc2l0aW9ucwogICAgICAgICAgfSk7CiAgICAgICAgICBpbmRpY2VzID0gbmV3IFVpbnQxNkFycmF5KDYgKiAyICogMyk7CiAgICAgICAgICBpbmRpY2VzWzBdID0gNDsKICAgICAgICAgIGluZGljZXNbMV0gPSA1OwogICAgICAgICAgaW5kaWNlc1syXSA9IDY7CiAgICAgICAgICBpbmRpY2VzWzNdID0gNDsKICAgICAgICAgIGluZGljZXNbNF0gPSA2OwogICAgICAgICAgaW5kaWNlc1s1XSA9IDc7CiAgICAgICAgICBpbmRpY2VzWzZdID0gMTsKICAgICAgICAgIGluZGljZXNbN10gPSAwOwogICAgICAgICAgaW5kaWNlc1s4XSA9IDM7CiAgICAgICAgICBpbmRpY2VzWzldID0gMTsKICAgICAgICAgIGluZGljZXNbMTBdID0gMzsKICAgICAgICAgIGluZGljZXNbMTFdID0gMjsKICAgICAgICAgIGluZGljZXNbMTJdID0gMTsKICAgICAgICAgIGluZGljZXNbMTNdID0gNjsKICAgICAgICAgIGluZGljZXNbMTRdID0gNTsKICAgICAgICAgIGluZGljZXNbMTVdID0gMTsKICAgICAgICAgIGluZGljZXNbMTZdID0gMjsKICAgICAgICAgIGluZGljZXNbMTddID0gNjsKICAgICAgICAgIGluZGljZXNbMThdID0gMjsKICAgICAgICAgIGluZGljZXNbMTldID0gMzsKICAgICAgICAgIGluZGljZXNbMjBdID0gNzsKICAgICAgICAgIGluZGljZXNbMjFdID0gMjsKICAgICAgICAgIGluZGljZXNbMjJdID0gNzsKICAgICAgICAgIGluZGljZXNbMjNdID0gNjsKICAgICAgICAgIGluZGljZXNbMjRdID0gMzsKICAgICAgICAgIGluZGljZXNbMjVdID0gMDsKICAgICAgICAgIGluZGljZXNbMjZdID0gNDsKICAgICAgICAgIGluZGljZXNbMjddID0gMzsKICAgICAgICAgIGluZGljZXNbMjhdID0gNDsKICAgICAgICAgIGluZGljZXNbMjldID0gNzsKICAgICAgICAgIGluZGljZXNbMzBdID0gMDsKICAgICAgICAgIGluZGljZXNbMzFdID0gMTsKICAgICAgICAgIGluZGljZXNbMzJdID0gNTsKICAgICAgICAgIGluZGljZXNbMzNdID0gMDsKICAgICAgICAgIGluZGljZXNbMzRdID0gNTsKICAgICAgICAgIGluZGljZXNbMzVdID0gNDsKICAgICAgICB9CiAgICAgICAgY29uc3QgZGlmZiA9IENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChtYXgzLCBtaW4zLCBkaWZmU2NyYXRjaCk7CiAgICAgICAgY29uc3QgcmFkaXVzID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZShkaWZmKSAqIDAuNTsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGJveEdlb21ldHJ5Ll9vZmZzZXRBdHRyaWJ1dGUpKSB7CiAgICAgICAgICBjb25zdCBsZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoOwogICAgICAgICAgY29uc3Qgb2Zmc2V0VmFsdWUgPSBib3hHZW9tZXRyeS5fb2Zmc2V0QXR0cmlidXRlID09PSBHZW9tZXRyeU9mZnNldEF0dHJpYnV0ZV9kZWZhdWx0Lk5PTkUgPyAwIDogMTsKICAgICAgICAgIGNvbnN0IGFwcGx5T2Zmc2V0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoIC8gMykuZmlsbChvZmZzZXRWYWx1ZSk7CiAgICAgICAgICBhdHRyaWJ1dGVzLmFwcGx5T2Zmc2V0ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5VTlNJR05FRF9CWVRFLAogICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAxLAogICAgICAgICAgICB2YWx1ZXM6IGFwcGx5T2Zmc2V0CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG5ldyBHZW9tZXRyeV9kZWZhdWx0KHsKICAgICAgICAgIGF0dHJpYnV0ZXMsCiAgICAgICAgICBpbmRpY2VzLAogICAgICAgICAgcHJpbWl0aXZlVHlwZTogUHJpbWl0aXZlVHlwZV9kZWZhdWx0LlRSSUFOR0xFUywKICAgICAgICAgIGJvdW5kaW5nU3BoZXJlOiBuZXcgQm91bmRpbmdTcGhlcmVfZGVmYXVsdChDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTywgcmFkaXVzKSwKICAgICAgICAgIG9mZnNldEF0dHJpYnV0ZTogYm94R2VvbWV0cnkuX29mZnNldEF0dHJpYnV0ZQogICAgICAgIH0pOwogICAgICB9OwogICAgICBCb3hHZW9tZXRyeS5nZXRVbml0Qm94ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQodW5pdEJveEdlb21ldHJ5KSkgewogICAgICAgICAgdW5pdEJveEdlb21ldHJ5ID0gQm94R2VvbWV0cnkuY3JlYXRlR2VvbWV0cnkoCiAgICAgICAgICAgIEJveEdlb21ldHJ5LmZyb21EaW1lbnNpb25zKHsKICAgICAgICAgICAgICBkaW1lbnNpb25zOiBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KDEsIDEsIDEpLAogICAgICAgICAgICAgIHZlcnRleEZvcm1hdDogVmVydGV4Rm9ybWF0X2RlZmF1bHQuUE9TSVRJT05fT05MWQogICAgICAgICAgICB9KQogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHVuaXRCb3hHZW9tZXRyeTsKICAgICAgfTsKICAgICAgQm94R2VvbWV0cnlfZGVmYXVsdCA9IEJveEdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlQm94R2VvbWV0cnkuanMKICB2YXIgY3JlYXRlQm94R2VvbWV0cnlfZXhwb3J0cyA9IHt9OwogIF9fZXhwb3J0KGNyZWF0ZUJveEdlb21ldHJ5X2V4cG9ydHMsIHsKICAgIGRlZmF1bHQ6ICgpID0+IGNyZWF0ZUJveEdlb21ldHJ5X2RlZmF1bHQKICB9KTsKICBmdW5jdGlvbiBjcmVhdGVCb3hHZW9tZXRyeShib3hHZW9tZXRyeSwgb2Zmc2V0KSB7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG9mZnNldCkpIHsKICAgICAgYm94R2VvbWV0cnkgPSBCb3hHZW9tZXRyeV9kZWZhdWx0LnVucGFjayhib3hHZW9tZXRyeSwgb2Zmc2V0KTsKICAgIH0KICAgIHJldHVybiBCb3hHZW9tZXRyeV9kZWZhdWx0LmNyZWF0ZUdlb21ldHJ5KGJveEdlb21ldHJ5KTsKICB9CiAgdmFyIGNyZWF0ZUJveEdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfY3JlYXRlQm94R2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZUJveEdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9Cb3hHZW9tZXRyeSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgY3JlYXRlQm94R2VvbWV0cnlfZGVmYXVsdCA9IGNyZWF0ZUJveEdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvQm94T3V0bGluZUdlb21ldHJ5LmpzCiAgZnVuY3Rpb24gQm94T3V0bGluZUdlb21ldHJ5KG9wdGlvbnMpIHsKICAgIG9wdGlvbnMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLCBkZWZhdWx0VmFsdWVfZGVmYXVsdC5FTVBUWV9PQkpFQ1QpOwogICAgY29uc3QgbWluMyA9IG9wdGlvbnMubWluaW11bTsKICAgIGNvbnN0IG1heDMgPSBvcHRpb25zLm1heGltdW07CiAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm1pbiIsIG1pbjMpOwogICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJtYXgiLCBtYXgzKTsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQob3B0aW9ucy5vZmZzZXRBdHRyaWJ1dGUpICYmIG9wdGlvbnMub2Zmc2V0QXR0cmlidXRlID09PSBHZW9tZXRyeU9mZnNldEF0dHJpYnV0ZV9kZWZhdWx0LlRPUCkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAiR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGUuVE9QIGlzIG5vdCBhIHN1cHBvcnRlZCBvcHRpb25zLm9mZnNldEF0dHJpYnV0ZSBmb3IgdGhpcyBnZW9tZXRyeS4iCiAgICAgICk7CiAgICB9CiAgICB0aGlzLl9taW4gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUobWluMyk7CiAgICB0aGlzLl9tYXggPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUobWF4Myk7CiAgICB0aGlzLl9vZmZzZXRBdHRyaWJ1dGUgPSBvcHRpb25zLm9mZnNldEF0dHJpYnV0ZTsKICAgIHRoaXMuX3dvcmtlck5hbWUgPSAiY3JlYXRlQm94T3V0bGluZUdlb21ldHJ5IjsKICB9CiAgdmFyIGRpZmZTY3JhdGNoMiwgc2NyYXRjaE1pbjIsIHNjcmF0Y2hNYXgyLCBzY3JhdGNoT3B0aW9uczIsIEJveE91dGxpbmVHZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X0JveE91dGxpbmVHZW9tZXRyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvQm94T3V0bGluZUdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9Cb3VuZGluZ1NwaGVyZSgpOwogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X0NvbXBvbmVudERhdGF0eXBlKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfR2VvbWV0cnkoKTsKICAgICAgaW5pdF9HZW9tZXRyeUF0dHJpYnV0ZSgpOwogICAgICBpbml0X0dlb21ldHJ5QXR0cmlidXRlcygpOwogICAgICBpbml0X0dlb21ldHJ5T2Zmc2V0QXR0cmlidXRlKCk7CiAgICAgIGluaXRfUHJpbWl0aXZlVHlwZSgpOwogICAgICBkaWZmU2NyYXRjaDIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIEJveE91dGxpbmVHZW9tZXRyeS5mcm9tRGltZW5zaW9ucyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgICBvcHRpb25zID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucywgZGVmYXVsdFZhbHVlX2RlZmF1bHQuRU1QVFlfT0JKRUNUKTsKICAgICAgICBjb25zdCBkaW1lbnNpb25zID0gb3B0aW9ucy5kaW1lbnNpb25zOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiZGltZW5zaW9ucyIsIGRpbWVuc2lvbnMpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbk9yRXF1YWxzKCJkaW1lbnNpb25zLngiLCBkaW1lbnNpb25zLngsIDApOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbk9yRXF1YWxzKCJkaW1lbnNpb25zLnkiLCBkaW1lbnNpb25zLnksIDApOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbk9yRXF1YWxzKCJkaW1lbnNpb25zLnoiLCBkaW1lbnNpb25zLnosIDApOwogICAgICAgIGNvbnN0IGNvcm5lciA9IENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKGRpbWVuc2lvbnMsIDAuNSwgbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpKTsKICAgICAgICByZXR1cm4gbmV3IEJveE91dGxpbmVHZW9tZXRyeSh7CiAgICAgICAgICBtaW5pbXVtOiBDYXJ0ZXNpYW4zX2RlZmF1bHQubmVnYXRlKGNvcm5lciwgbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpKSwKICAgICAgICAgIG1heGltdW06IGNvcm5lciwKICAgICAgICAgIG9mZnNldEF0dHJpYnV0ZTogb3B0aW9ucy5vZmZzZXRBdHRyaWJ1dGUKICAgICAgICB9KTsKICAgICAgfTsKICAgICAgQm94T3V0bGluZUdlb21ldHJ5LmZyb21BeGlzQWxpZ25lZEJvdW5kaW5nQm94ID0gZnVuY3Rpb24oYm91bmRpbmdCb3gpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImJvdW5kaW5kQm94IiwgYm91bmRpbmdCb3gpOwogICAgICAgIHJldHVybiBuZXcgQm94T3V0bGluZUdlb21ldHJ5KHsKICAgICAgICAgIG1pbmltdW06IGJvdW5kaW5nQm94Lm1pbmltdW0sCiAgICAgICAgICBtYXhpbXVtOiBib3VuZGluZ0JveC5tYXhpbXVtCiAgICAgICAgfSk7CiAgICAgIH07CiAgICAgIEJveE91dGxpbmVHZW9tZXRyeS5wYWNrZWRMZW5ndGggPSAyICogQ2FydGVzaWFuM19kZWZhdWx0LnBhY2tlZExlbmd0aCArIDE7CiAgICAgIEJveE91dGxpbmVHZW9tZXRyeS5wYWNrID0gZnVuY3Rpb24odmFsdWUsIGFycmF5LCBzdGFydGluZ0luZGV4KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJ2YWx1ZSIsIHZhbHVlKTsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayh2YWx1ZS5fbWluLCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2sodmFsdWUuX21heCwgYXJyYXksIHN0YXJ0aW5nSW5kZXggKyBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoKTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4ICsgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2tlZExlbmd0aCAqIDJdID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoCiAgICAgICAgICB2YWx1ZS5fb2Zmc2V0QXR0cmlidXRlLAogICAgICAgICAgLTEKICAgICAgICApOwogICAgICAgIHJldHVybiBhcnJheTsKICAgICAgfTsKICAgICAgc2NyYXRjaE1pbjIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hNYXgyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoT3B0aW9uczIgPSB7CiAgICAgICAgbWluaW11bTogc2NyYXRjaE1pbjIsCiAgICAgICAgbWF4aW11bTogc2NyYXRjaE1heDIsCiAgICAgICAgb2Zmc2V0QXR0cmlidXRlOiB2b2lkIDAKICAgICAgfTsKICAgICAgQm94T3V0bGluZUdlb21ldHJ5LnVucGFjayA9IGZ1bmN0aW9uKGFycmF5LCBzdGFydGluZ0luZGV4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBjb25zdCBtaW4zID0gQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjayhhcnJheSwgc3RhcnRpbmdJbmRleCwgc2NyYXRjaE1pbjIpOwogICAgICAgIGNvbnN0IG1heDMgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKAogICAgICAgICAgYXJyYXksCiAgICAgICAgICBzdGFydGluZ0luZGV4ICsgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2tlZExlbmd0aCwKICAgICAgICAgIHNjcmF0Y2hNYXgyCiAgICAgICAgKTsKICAgICAgICBjb25zdCBvZmZzZXRBdHRyaWJ1dGUgPSBhcnJheVtzdGFydGluZ0luZGV4ICsgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2tlZExlbmd0aCAqIDJdOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMi5vZmZzZXRBdHRyaWJ1dGUgPSBvZmZzZXRBdHRyaWJ1dGUgPT09IC0xID8gdm9pZCAwIDogb2Zmc2V0QXR0cmlidXRlOwogICAgICAgICAgcmV0dXJuIG5ldyBCb3hPdXRsaW5lR2VvbWV0cnkoc2NyYXRjaE9wdGlvbnMyKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0Ll9taW4gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUobWluMywgcmVzdWx0Ll9taW4pOwogICAgICAgIHJlc3VsdC5fbWF4ID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKG1heDMsIHJlc3VsdC5fbWF4KTsKICAgICAgICByZXN1bHQuX29mZnNldEF0dHJpYnV0ZSA9IG9mZnNldEF0dHJpYnV0ZSA9PT0gLTEgPyB2b2lkIDAgOiBvZmZzZXRBdHRyaWJ1dGU7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQm94T3V0bGluZUdlb21ldHJ5LmNyZWF0ZUdlb21ldHJ5ID0gZnVuY3Rpb24oYm94R2VvbWV0cnkpIHsKICAgICAgICBjb25zdCBtaW4zID0gYm94R2VvbWV0cnkuX21pbjsKICAgICAgICBjb25zdCBtYXgzID0gYm94R2VvbWV0cnkuX21heDsKICAgICAgICBpZiAoQ2FydGVzaWFuM19kZWZhdWx0LmVxdWFscyhtaW4zLCBtYXgzKSkgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlc19kZWZhdWx0KCk7CiAgICAgICAgY29uc3QgaW5kaWNlcyA9IG5ldyBVaW50MTZBcnJheSgxMiAqIDIpOwogICAgICAgIGNvbnN0IHBvc2l0aW9ucyA9IG5ldyBGbG9hdDY0QXJyYXkoOCAqIDMpOwogICAgICAgIHBvc2l0aW9uc1swXSA9IG1pbjMueDsKICAgICAgICBwb3NpdGlvbnNbMV0gPSBtaW4zLnk7CiAgICAgICAgcG9zaXRpb25zWzJdID0gbWluMy56OwogICAgICAgIHBvc2l0aW9uc1szXSA9IG1heDMueDsKICAgICAgICBwb3NpdGlvbnNbNF0gPSBtaW4zLnk7CiAgICAgICAgcG9zaXRpb25zWzVdID0gbWluMy56OwogICAgICAgIHBvc2l0aW9uc1s2XSA9IG1heDMueDsKICAgICAgICBwb3NpdGlvbnNbN10gPSBtYXgzLnk7CiAgICAgICAgcG9zaXRpb25zWzhdID0gbWluMy56OwogICAgICAgIHBvc2l0aW9uc1s5XSA9IG1pbjMueDsKICAgICAgICBwb3NpdGlvbnNbMTBdID0gbWF4My55OwogICAgICAgIHBvc2l0aW9uc1sxMV0gPSBtaW4zLno7CiAgICAgICAgcG9zaXRpb25zWzEyXSA9IG1pbjMueDsKICAgICAgICBwb3NpdGlvbnNbMTNdID0gbWluMy55OwogICAgICAgIHBvc2l0aW9uc1sxNF0gPSBtYXgzLno7CiAgICAgICAgcG9zaXRpb25zWzE1XSA9IG1heDMueDsKICAgICAgICBwb3NpdGlvbnNbMTZdID0gbWluMy55OwogICAgICAgIHBvc2l0aW9uc1sxN10gPSBtYXgzLno7CiAgICAgICAgcG9zaXRpb25zWzE4XSA9IG1heDMueDsKICAgICAgICBwb3NpdGlvbnNbMTldID0gbWF4My55OwogICAgICAgIHBvc2l0aW9uc1syMF0gPSBtYXgzLno7CiAgICAgICAgcG9zaXRpb25zWzIxXSA9IG1pbjMueDsKICAgICAgICBwb3NpdGlvbnNbMjJdID0gbWF4My55OwogICAgICAgIHBvc2l0aW9uc1syM10gPSBtYXgzLno7CiAgICAgICAgYXR0cmlidXRlcy5wb3NpdGlvbiA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkRPVUJMRSwKICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgICB2YWx1ZXM6IHBvc2l0aW9ucwogICAgICAgIH0pOwogICAgICAgIGluZGljZXNbMF0gPSA0OwogICAgICAgIGluZGljZXNbMV0gPSA1OwogICAgICAgIGluZGljZXNbMl0gPSA1OwogICAgICAgIGluZGljZXNbM10gPSA2OwogICAgICAgIGluZGljZXNbNF0gPSA2OwogICAgICAgIGluZGljZXNbNV0gPSA3OwogICAgICAgIGluZGljZXNbNl0gPSA3OwogICAgICAgIGluZGljZXNbN10gPSA0OwogICAgICAgIGluZGljZXNbOF0gPSAwOwogICAgICAgIGluZGljZXNbOV0gPSAxOwogICAgICAgIGluZGljZXNbMTBdID0gMTsKICAgICAgICBpbmRpY2VzWzExXSA9IDI7CiAgICAgICAgaW5kaWNlc1sxMl0gPSAyOwogICAgICAgIGluZGljZXNbMTNdID0gMzsKICAgICAgICBpbmRpY2VzWzE0XSA9IDM7CiAgICAgICAgaW5kaWNlc1sxNV0gPSAwOwogICAgICAgIGluZGljZXNbMTZdID0gMDsKICAgICAgICBpbmRpY2VzWzE3XSA9IDQ7CiAgICAgICAgaW5kaWNlc1sxOF0gPSAxOwogICAgICAgIGluZGljZXNbMTldID0gNTsKICAgICAgICBpbmRpY2VzWzIwXSA9IDI7CiAgICAgICAgaW5kaWNlc1syMV0gPSA2OwogICAgICAgIGluZGljZXNbMjJdID0gMzsKICAgICAgICBpbmRpY2VzWzIzXSA9IDc7CiAgICAgICAgY29uc3QgZGlmZiA9IENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChtYXgzLCBtaW4zLCBkaWZmU2NyYXRjaDIpOwogICAgICAgIGNvbnN0IHJhZGl1cyA9IENhcnRlc2lhbjNfZGVmYXVsdC5tYWduaXR1ZGUoZGlmZikgKiAwLjU7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChib3hHZW9tZXRyeS5fb2Zmc2V0QXR0cmlidXRlKSkgewogICAgICAgICAgY29uc3QgbGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aDsKICAgICAgICAgIGNvbnN0IG9mZnNldFZhbHVlID0gYm94R2VvbWV0cnkuX29mZnNldEF0dHJpYnV0ZSA9PT0gR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGVfZGVmYXVsdC5OT05FID8gMCA6IDE7CiAgICAgICAgICBjb25zdCBhcHBseU9mZnNldCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCAvIDMpLmZpbGwob2Zmc2V0VmFsdWUpOwogICAgICAgICAgYXR0cmlidXRlcy5hcHBseU9mZnNldCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuVU5TSUdORURfQllURSwKICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMSwKICAgICAgICAgICAgdmFsdWVzOiBhcHBseU9mZnNldAogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBuZXcgR2VvbWV0cnlfZGVmYXVsdCh7CiAgICAgICAgICBhdHRyaWJ1dGVzLAogICAgICAgICAgaW5kaWNlcywKICAgICAgICAgIHByaW1pdGl2ZVR5cGU6IFByaW1pdGl2ZVR5cGVfZGVmYXVsdC5MSU5FUywKICAgICAgICAgIGJvdW5kaW5nU3BoZXJlOiBuZXcgQm91bmRpbmdTcGhlcmVfZGVmYXVsdChDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTywgcmFkaXVzKSwKICAgICAgICAgIG9mZnNldEF0dHJpYnV0ZTogYm94R2VvbWV0cnkuX29mZnNldEF0dHJpYnV0ZQogICAgICAgIH0pOwogICAgICB9OwogICAgICBCb3hPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdCA9IEJveE91dGxpbmVHZW9tZXRyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZUJveE91dGxpbmVHZW9tZXRyeS5qcwogIHZhciBjcmVhdGVCb3hPdXRsaW5lR2VvbWV0cnlfZXhwb3J0cyA9IHt9OwogIF9fZXhwb3J0KGNyZWF0ZUJveE91dGxpbmVHZW9tZXRyeV9leHBvcnRzLCB7CiAgICBkZWZhdWx0OiAoKSA9PiBjcmVhdGVCb3hPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdAogIH0pOwogIGZ1bmN0aW9uIGNyZWF0ZUJveE91dGxpbmVHZW9tZXRyeShib3hHZW9tZXRyeSwgb2Zmc2V0KSB7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG9mZnNldCkpIHsKICAgICAgYm94R2VvbWV0cnkgPSBCb3hPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdC51bnBhY2soYm94R2VvbWV0cnksIG9mZnNldCk7CiAgICB9CiAgICByZXR1cm4gQm94T3V0bGluZUdlb21ldHJ5X2RlZmF1bHQuY3JlYXRlR2VvbWV0cnkoYm94R2VvbWV0cnkpOwogIH0KICB2YXIgY3JlYXRlQm94T3V0bGluZUdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfY3JlYXRlQm94T3V0bGluZUdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVCb3hPdXRsaW5lR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X0JveE91dGxpbmVHZW9tZXRyeSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgY3JlYXRlQm94T3V0bGluZUdlb21ldHJ5X2RlZmF1bHQgPSBjcmVhdGVCb3hPdXRsaW5lR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9FbGxpcHNlR2VvbWV0cnlMaWJyYXJ5LmpzCiAgZnVuY3Rpb24gcG9pbnRPbkVsbGlwc29pZCh0aGV0YSwgcm90YXRpb24sIG5vcnRoVmVjLCBlYXN0VmVjLCBhU3FyLCBhYiwgYlNxciwgbWFnLCB1bml0UG9zLCByZXN1bHQpIHsKICAgIGNvbnN0IGF6aW11dGggPSB0aGV0YSArIHJvdGF0aW9uOwogICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIoZWFzdFZlYywgTWF0aC5jb3MoYXppbXV0aCksIHJvdEF4aXMpOwogICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIobm9ydGhWZWMsIE1hdGguc2luKGF6aW11dGgpLCB0ZW1wVmVjKTsKICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQocm90QXhpcywgdGVtcFZlYywgcm90QXhpcyk7CiAgICBsZXQgY29zVGhldGFTcXVhcmVkID0gTWF0aC5jb3ModGhldGEpOwogICAgY29zVGhldGFTcXVhcmVkID0gY29zVGhldGFTcXVhcmVkICogY29zVGhldGFTcXVhcmVkOwogICAgbGV0IHNpblRoZXRhU3F1YXJlZCA9IE1hdGguc2luKHRoZXRhKTsKICAgIHNpblRoZXRhU3F1YXJlZCA9IHNpblRoZXRhU3F1YXJlZCAqIHNpblRoZXRhU3F1YXJlZDsKICAgIGNvbnN0IHJhZGl1cyA9IGFiIC8gTWF0aC5zcXJ0KGJTcXIgKiBjb3NUaGV0YVNxdWFyZWQgKyBhU3FyICogc2luVGhldGFTcXVhcmVkKTsKICAgIGNvbnN0IGFuZ2xlID0gcmFkaXVzIC8gbWFnOwogICAgUXVhdGVybmlvbl9kZWZhdWx0LmZyb21BeGlzQW5nbGUocm90QXhpcywgYW5nbGUsIHVuaXRRdWF0KTsKICAgIE1hdHJpeDNfZGVmYXVsdC5mcm9tUXVhdGVybmlvbih1bml0UXVhdCwgcm90TXR4KTsKICAgIE1hdHJpeDNfZGVmYXVsdC5tdWx0aXBseUJ5VmVjdG9yKHJvdE10eCwgdW5pdFBvcywgcmVzdWx0KTsKICAgIENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUocmVzdWx0LCByZXN1bHQpOwogICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIocmVzdWx0LCBtYWcsIHJlc3VsdCk7CiAgICByZXR1cm4gcmVzdWx0OwogIH0KICB2YXIgRWxsaXBzZUdlb21ldHJ5TGlicmFyeSwgcm90QXhpcywgdGVtcFZlYywgdW5pdFF1YXQsIHJvdE10eCwgc2NyYXRjaENhcnRlc2lhbjEyLCBzY3JhdGNoQ2FydGVzaWFuMjMsIHNjcmF0Y2hDYXJ0ZXNpYW4zNCwgc2NyYXRjaE5vcm1hbDIsIHVuaXRQb3NTY3JhdGNoLCBlYXN0VmVjU2NyYXRjaCwgbm9ydGhWZWNTY3JhdGNoLCBFbGxpcHNlR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfRWxsaXBzZUdlb21ldHJ5TGlicmFyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvRWxsaXBzZUdlb21ldHJ5TGlicmFyeS5qcyIoKSB7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgaW5pdF9NYXRyaXgzKCk7CiAgICAgIGluaXRfUXVhdGVybmlvbigpOwogICAgICBFbGxpcHNlR2VvbWV0cnlMaWJyYXJ5ID0ge307CiAgICAgIHJvdEF4aXMgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHRlbXBWZWMgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHVuaXRRdWF0ID0gbmV3IFF1YXRlcm5pb25fZGVmYXVsdCgpOwogICAgICByb3RNdHggPSBuZXcgTWF0cml4M19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4xMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaENhcnRlc2lhbjIzID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQ2FydGVzaWFuMzQgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hOb3JtYWwyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBFbGxpcHNlR2VvbWV0cnlMaWJyYXJ5LnJhaXNlUG9zaXRpb25zVG9IZWlnaHQgPSBmdW5jdGlvbihwb3NpdGlvbnMsIG9wdGlvbnMsIGV4dHJ1ZGUpIHsKICAgICAgICBjb25zdCBlbGxpcHNvaWQgPSBvcHRpb25zLmVsbGlwc29pZDsKICAgICAgICBjb25zdCBoZWlnaHQgPSBvcHRpb25zLmhlaWdodDsKICAgICAgICBjb25zdCBleHRydWRlZEhlaWdodCA9IG9wdGlvbnMuZXh0cnVkZWRIZWlnaHQ7CiAgICAgICAgY29uc3Qgc2l6ZSA9IGV4dHJ1ZGUgPyBwb3NpdGlvbnMubGVuZ3RoIC8gMyAqIDIgOiBwb3NpdGlvbnMubGVuZ3RoIC8gMzsKICAgICAgICBjb25zdCBmaW5hbFBvc2l0aW9ucyA9IG5ldyBGbG9hdDY0QXJyYXkoc2l6ZSAqIDMpOwogICAgICAgIGNvbnN0IGxlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgY29uc3QgYm90dG9tT2Zmc2V0ID0gZXh0cnVkZSA/IGxlbmd0aCA6IDA7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMykgewogICAgICAgICAgY29uc3QgaTEgPSBpICsgMTsKICAgICAgICAgIGNvbnN0IGkyID0gaSArIDI7CiAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkocG9zaXRpb25zLCBpLCBzY3JhdGNoQ2FydGVzaWFuMTIpOwogICAgICAgICAgZWxsaXBzb2lkLnNjYWxlVG9HZW9kZXRpY1N1cmZhY2UocG9zaXRpb24sIHBvc2l0aW9uKTsKICAgICAgICAgIGNvbnN0IGV4dHJ1ZGVkUG9zaXRpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUocG9zaXRpb24sIHNjcmF0Y2hDYXJ0ZXNpYW4yMyk7CiAgICAgICAgICBjb25zdCBub3JtYWwyID0gZWxsaXBzb2lkLmdlb2RldGljU3VyZmFjZU5vcm1hbChwb3NpdGlvbiwgc2NyYXRjaE5vcm1hbDIpOwogICAgICAgICAgY29uc3Qgc2NhbGVkTm9ybWFsID0gQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIoCiAgICAgICAgICAgIG5vcm1hbDIsCiAgICAgICAgICAgIGhlaWdodCwKICAgICAgICAgICAgc2NyYXRjaENhcnRlc2lhbjM0CiAgICAgICAgICApOwogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChwb3NpdGlvbiwgc2NhbGVkTm9ybWFsLCBwb3NpdGlvbik7CiAgICAgICAgICBpZiAoZXh0cnVkZSkgewogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcihub3JtYWwyLCBleHRydWRlZEhlaWdodCwgc2NhbGVkTm9ybWFsKTsKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChleHRydWRlZFBvc2l0aW9uLCBzY2FsZWROb3JtYWwsIGV4dHJ1ZGVkUG9zaXRpb24pOwogICAgICAgICAgICBmaW5hbFBvc2l0aW9uc1tpICsgYm90dG9tT2Zmc2V0XSA9IGV4dHJ1ZGVkUG9zaXRpb24ueDsKICAgICAgICAgICAgZmluYWxQb3NpdGlvbnNbaTEgKyBib3R0b21PZmZzZXRdID0gZXh0cnVkZWRQb3NpdGlvbi55OwogICAgICAgICAgICBmaW5hbFBvc2l0aW9uc1tpMiArIGJvdHRvbU9mZnNldF0gPSBleHRydWRlZFBvc2l0aW9uLno7CiAgICAgICAgICB9CiAgICAgICAgICBmaW5hbFBvc2l0aW9uc1tpXSA9IHBvc2l0aW9uLng7CiAgICAgICAgICBmaW5hbFBvc2l0aW9uc1tpMV0gPSBwb3NpdGlvbi55OwogICAgICAgICAgZmluYWxQb3NpdGlvbnNbaTJdID0gcG9zaXRpb24uejsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZpbmFsUG9zaXRpb25zOwogICAgICB9OwogICAgICB1bml0UG9zU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgZWFzdFZlY1NjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIG5vcnRoVmVjU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgRWxsaXBzZUdlb21ldHJ5TGlicmFyeS5jb21wdXRlRWxsaXBzZVBvc2l0aW9ucyA9IGZ1bmN0aW9uKG9wdGlvbnMsIGFkZEZpbGxQb3NpdGlvbnMsIGFkZEVkZ2VQb3NpdGlvbnMpIHsKICAgICAgICBjb25zdCBzZW1pTWlub3JBeGlzID0gb3B0aW9ucy5zZW1pTWlub3JBeGlzOwogICAgICAgIGNvbnN0IHNlbWlNYWpvckF4aXMgPSBvcHRpb25zLnNlbWlNYWpvckF4aXM7CiAgICAgICAgY29uc3Qgcm90YXRpb24gPSBvcHRpb25zLnJvdGF0aW9uOwogICAgICAgIGNvbnN0IGNlbnRlciA9IG9wdGlvbnMuY2VudGVyOwogICAgICAgIGNvbnN0IGdyYW51bGFyaXR5ID0gb3B0aW9ucy5ncmFudWxhcml0eSAqIDg7CiAgICAgICAgY29uc3QgYVNxciA9IHNlbWlNaW5vckF4aXMgKiBzZW1pTWlub3JBeGlzOwogICAgICAgIGNvbnN0IGJTcXIgPSBzZW1pTWFqb3JBeGlzICogc2VtaU1ham9yQXhpczsKICAgICAgICBjb25zdCBhYiA9IHNlbWlNYWpvckF4aXMgKiBzZW1pTWlub3JBeGlzOwogICAgICAgIGNvbnN0IG1hZyA9IENhcnRlc2lhbjNfZGVmYXVsdC5tYWduaXR1ZGUoY2VudGVyKTsKICAgICAgICBjb25zdCB1bml0UG9zID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShjZW50ZXIsIHVuaXRQb3NTY3JhdGNoKTsKICAgICAgICBsZXQgZWFzdFZlYyA9IENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyhDYXJ0ZXNpYW4zX2RlZmF1bHQuVU5JVF9aLCBjZW50ZXIsIGVhc3RWZWNTY3JhdGNoKTsKICAgICAgICBlYXN0VmVjID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShlYXN0VmVjLCBlYXN0VmVjKTsKICAgICAgICBjb25zdCBub3J0aFZlYyA9IENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyh1bml0UG9zLCBlYXN0VmVjLCBub3J0aFZlY1NjcmF0Y2gpOwogICAgICAgIGxldCBudW1QdHMgPSAxICsgTWF0aC5jZWlsKE1hdGhfZGVmYXVsdC5QSV9PVkVSX1RXTyAvIGdyYW51bGFyaXR5KTsKICAgICAgICBjb25zdCBkZWx0YVRoZXRhID0gTWF0aF9kZWZhdWx0LlBJX09WRVJfVFdPIC8gKG51bVB0cyAtIDEpOwogICAgICAgIGxldCB0aGV0YSA9IE1hdGhfZGVmYXVsdC5QSV9PVkVSX1RXTyAtIG51bVB0cyAqIGRlbHRhVGhldGE7CiAgICAgICAgaWYgKHRoZXRhIDwgMCkgewogICAgICAgICAgbnVtUHRzIC09IE1hdGguY2VpbChNYXRoLmFicyh0aGV0YSkgLyBkZWx0YVRoZXRhKTsKICAgICAgICB9CiAgICAgICAgY29uc3Qgc2l6ZSA9IDIgKiAobnVtUHRzICogKG51bVB0cyArIDIpKTsKICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSBhZGRGaWxsUG9zaXRpb25zID8gbmV3IEFycmF5KHNpemUgKiAzKSA6IHZvaWQgMDsKICAgICAgICBsZXQgcG9zaXRpb25JbmRleCA9IDA7CiAgICAgICAgbGV0IHBvc2l0aW9uID0gc2NyYXRjaENhcnRlc2lhbjEyOwogICAgICAgIGxldCByZWZsZWN0ZWRQb3NpdGlvbiA9IHNjcmF0Y2hDYXJ0ZXNpYW4yMzsKICAgICAgICBjb25zdCBvdXRlclBvc2l0aW9uc0xlbmd0aCA9IG51bVB0cyAqIDQgKiAzOwogICAgICAgIGxldCBvdXRlclJpZ2h0SW5kZXggPSBvdXRlclBvc2l0aW9uc0xlbmd0aCAtIDE7CiAgICAgICAgbGV0IG91dGVyTGVmdEluZGV4ID0gMDsKICAgICAgICBjb25zdCBvdXRlclBvc2l0aW9ucyA9IGFkZEVkZ2VQb3NpdGlvbnMgPyBuZXcgQXJyYXkob3V0ZXJQb3NpdGlvbnNMZW5ndGgpIDogdm9pZCAwOwogICAgICAgIGxldCBpOwogICAgICAgIGxldCBqOwogICAgICAgIGxldCBudW1JbnRlcmlvcjsKICAgICAgICBsZXQgdDsKICAgICAgICBsZXQgaW50ZXJpb3JQb3NpdGlvbjsKICAgICAgICB0aGV0YSA9IE1hdGhfZGVmYXVsdC5QSV9PVkVSX1RXTzsKICAgICAgICBwb3NpdGlvbiA9IHBvaW50T25FbGxpcHNvaWQoCiAgICAgICAgICB0aGV0YSwKICAgICAgICAgIHJvdGF0aW9uLAogICAgICAgICAgbm9ydGhWZWMsCiAgICAgICAgICBlYXN0VmVjLAogICAgICAgICAgYVNxciwKICAgICAgICAgIGFiLAogICAgICAgICAgYlNxciwKICAgICAgICAgIG1hZywKICAgICAgICAgIHVuaXRQb3MsCiAgICAgICAgICBwb3NpdGlvbgogICAgICAgICk7CiAgICAgICAgaWYgKGFkZEZpbGxQb3NpdGlvbnMpIHsKICAgICAgICAgIHBvc2l0aW9uc1twb3NpdGlvbkluZGV4KytdID0gcG9zaXRpb24ueDsKICAgICAgICAgIHBvc2l0aW9uc1twb3NpdGlvbkluZGV4KytdID0gcG9zaXRpb24ueTsKICAgICAgICAgIHBvc2l0aW9uc1twb3NpdGlvbkluZGV4KytdID0gcG9zaXRpb24uejsKICAgICAgICB9CiAgICAgICAgaWYgKGFkZEVkZ2VQb3NpdGlvbnMpIHsKICAgICAgICAgIG91dGVyUG9zaXRpb25zW291dGVyUmlnaHRJbmRleC0tXSA9IHBvc2l0aW9uLno7CiAgICAgICAgICBvdXRlclBvc2l0aW9uc1tvdXRlclJpZ2h0SW5kZXgtLV0gPSBwb3NpdGlvbi55OwogICAgICAgICAgb3V0ZXJQb3NpdGlvbnNbb3V0ZXJSaWdodEluZGV4LS1dID0gcG9zaXRpb24ueDsKICAgICAgICB9CiAgICAgICAgdGhldGEgPSBNYXRoX2RlZmF1bHQuUElfT1ZFUl9UV08gLSBkZWx0YVRoZXRhOwogICAgICAgIGZvciAoaSA9IDE7IGkgPCBudW1QdHMgKyAxOyArK2kpIHsKICAgICAgICAgIHBvc2l0aW9uID0gcG9pbnRPbkVsbGlwc29pZCgKICAgICAgICAgICAgdGhldGEsCiAgICAgICAgICAgIHJvdGF0aW9uLAogICAgICAgICAgICBub3J0aFZlYywKICAgICAgICAgICAgZWFzdFZlYywKICAgICAgICAgICAgYVNxciwKICAgICAgICAgICAgYWIsCiAgICAgICAgICAgIGJTcXIsCiAgICAgICAgICAgIG1hZywKICAgICAgICAgICAgdW5pdFBvcywKICAgICAgICAgICAgcG9zaXRpb24KICAgICAgICAgICk7CiAgICAgICAgICByZWZsZWN0ZWRQb3NpdGlvbiA9IHBvaW50T25FbGxpcHNvaWQoCiAgICAgICAgICAgIE1hdGguUEkgLSB0aGV0YSwKICAgICAgICAgICAgcm90YXRpb24sCiAgICAgICAgICAgIG5vcnRoVmVjLAogICAgICAgICAgICBlYXN0VmVjLAogICAgICAgICAgICBhU3FyLAogICAgICAgICAgICBhYiwKICAgICAgICAgICAgYlNxciwKICAgICAgICAgICAgbWFnLAogICAgICAgICAgICB1bml0UG9zLAogICAgICAgICAgICByZWZsZWN0ZWRQb3NpdGlvbgogICAgICAgICAgKTsKICAgICAgICAgIGlmIChhZGRGaWxsUG9zaXRpb25zKSB7CiAgICAgICAgICAgIHBvc2l0aW9uc1twb3NpdGlvbkluZGV4KytdID0gcG9zaXRpb24ueDsKICAgICAgICAgICAgcG9zaXRpb25zW3Bvc2l0aW9uSW5kZXgrK10gPSBwb3NpdGlvbi55OwogICAgICAgICAgICBwb3NpdGlvbnNbcG9zaXRpb25JbmRleCsrXSA9IHBvc2l0aW9uLno7CiAgICAgICAgICAgIG51bUludGVyaW9yID0gMiAqIGkgKyAyOwogICAgICAgICAgICBmb3IgKGogPSAxOyBqIDwgbnVtSW50ZXJpb3IgLSAxOyArK2opIHsKICAgICAgICAgICAgICB0ID0gaiAvIChudW1JbnRlcmlvciAtIDEpOwogICAgICAgICAgICAgIGludGVyaW9yUG9zaXRpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubGVycCgKICAgICAgICAgICAgICAgIHBvc2l0aW9uLAogICAgICAgICAgICAgICAgcmVmbGVjdGVkUG9zaXRpb24sCiAgICAgICAgICAgICAgICB0LAogICAgICAgICAgICAgICAgc2NyYXRjaENhcnRlc2lhbjM0CiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICBwb3NpdGlvbnNbcG9zaXRpb25JbmRleCsrXSA9IGludGVyaW9yUG9zaXRpb24ueDsKICAgICAgICAgICAgICBwb3NpdGlvbnNbcG9zaXRpb25JbmRleCsrXSA9IGludGVyaW9yUG9zaXRpb24ueTsKICAgICAgICAgICAgICBwb3NpdGlvbnNbcG9zaXRpb25JbmRleCsrXSA9IGludGVyaW9yUG9zaXRpb24uejsKICAgICAgICAgICAgfQogICAgICAgICAgICBwb3NpdGlvbnNbcG9zaXRpb25JbmRleCsrXSA9IHJlZmxlY3RlZFBvc2l0aW9uLng7CiAgICAgICAgICAgIHBvc2l0aW9uc1twb3NpdGlvbkluZGV4KytdID0gcmVmbGVjdGVkUG9zaXRpb24ueTsKICAgICAgICAgICAgcG9zaXRpb25zW3Bvc2l0aW9uSW5kZXgrK10gPSByZWZsZWN0ZWRQb3NpdGlvbi56OwogICAgICAgICAgfQogICAgICAgICAgaWYgKGFkZEVkZ2VQb3NpdGlvbnMpIHsKICAgICAgICAgICAgb3V0ZXJQb3NpdGlvbnNbb3V0ZXJSaWdodEluZGV4LS1dID0gcG9zaXRpb24uejsKICAgICAgICAgICAgb3V0ZXJQb3NpdGlvbnNbb3V0ZXJSaWdodEluZGV4LS1dID0gcG9zaXRpb24ueTsKICAgICAgICAgICAgb3V0ZXJQb3NpdGlvbnNbb3V0ZXJSaWdodEluZGV4LS1dID0gcG9zaXRpb24ueDsKICAgICAgICAgICAgb3V0ZXJQb3NpdGlvbnNbb3V0ZXJMZWZ0SW5kZXgrK10gPSByZWZsZWN0ZWRQb3NpdGlvbi54OwogICAgICAgICAgICBvdXRlclBvc2l0aW9uc1tvdXRlckxlZnRJbmRleCsrXSA9IHJlZmxlY3RlZFBvc2l0aW9uLnk7CiAgICAgICAgICAgIG91dGVyUG9zaXRpb25zW291dGVyTGVmdEluZGV4KytdID0gcmVmbGVjdGVkUG9zaXRpb24uejsKICAgICAgICAgIH0KICAgICAgICAgIHRoZXRhID0gTWF0aF9kZWZhdWx0LlBJX09WRVJfVFdPIC0gKGkgKyAxKSAqIGRlbHRhVGhldGE7CiAgICAgICAgfQogICAgICAgIGZvciAoaSA9IG51bVB0czsgaSA+IDE7IC0taSkgewogICAgICAgICAgdGhldGEgPSBNYXRoX2RlZmF1bHQuUElfT1ZFUl9UV08gLSAoaSAtIDEpICogZGVsdGFUaGV0YTsKICAgICAgICAgIHBvc2l0aW9uID0gcG9pbnRPbkVsbGlwc29pZCgKICAgICAgICAgICAgLXRoZXRhLAogICAgICAgICAgICByb3RhdGlvbiwKICAgICAgICAgICAgbm9ydGhWZWMsCiAgICAgICAgICAgIGVhc3RWZWMsCiAgICAgICAgICAgIGFTcXIsCiAgICAgICAgICAgIGFiLAogICAgICAgICAgICBiU3FyLAogICAgICAgICAgICBtYWcsCiAgICAgICAgICAgIHVuaXRQb3MsCiAgICAgICAgICAgIHBvc2l0aW9uCiAgICAgICAgICApOwogICAgICAgICAgcmVmbGVjdGVkUG9zaXRpb24gPSBwb2ludE9uRWxsaXBzb2lkKAogICAgICAgICAgICB0aGV0YSArIE1hdGguUEksCiAgICAgICAgICAgIHJvdGF0aW9uLAogICAgICAgICAgICBub3J0aFZlYywKICAgICAgICAgICAgZWFzdFZlYywKICAgICAgICAgICAgYVNxciwKICAgICAgICAgICAgYWIsCiAgICAgICAgICAgIGJTcXIsCiAgICAgICAgICAgIG1hZywKICAgICAgICAgICAgdW5pdFBvcywKICAgICAgICAgICAgcmVmbGVjdGVkUG9zaXRpb24KICAgICAgICAgICk7CiAgICAgICAgICBpZiAoYWRkRmlsbFBvc2l0aW9ucykgewogICAgICAgICAgICBwb3NpdGlvbnNbcG9zaXRpb25JbmRleCsrXSA9IHBvc2l0aW9uLng7CiAgICAgICAgICAgIHBvc2l0aW9uc1twb3NpdGlvbkluZGV4KytdID0gcG9zaXRpb24ueTsKICAgICAgICAgICAgcG9zaXRpb25zW3Bvc2l0aW9uSW5kZXgrK10gPSBwb3NpdGlvbi56OwogICAgICAgICAgICBudW1JbnRlcmlvciA9IDIgKiAoaSAtIDEpICsgMjsKICAgICAgICAgICAgZm9yIChqID0gMTsgaiA8IG51bUludGVyaW9yIC0gMTsgKytqKSB7CiAgICAgICAgICAgICAgdCA9IGogLyAobnVtSW50ZXJpb3IgLSAxKTsKICAgICAgICAgICAgICBpbnRlcmlvclBvc2l0aW9uID0gQ2FydGVzaWFuM19kZWZhdWx0LmxlcnAoCiAgICAgICAgICAgICAgICBwb3NpdGlvbiwKICAgICAgICAgICAgICAgIHJlZmxlY3RlZFBvc2l0aW9uLAogICAgICAgICAgICAgICAgdCwKICAgICAgICAgICAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4zNAogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgcG9zaXRpb25zW3Bvc2l0aW9uSW5kZXgrK10gPSBpbnRlcmlvclBvc2l0aW9uLng7CiAgICAgICAgICAgICAgcG9zaXRpb25zW3Bvc2l0aW9uSW5kZXgrK10gPSBpbnRlcmlvclBvc2l0aW9uLnk7CiAgICAgICAgICAgICAgcG9zaXRpb25zW3Bvc2l0aW9uSW5kZXgrK10gPSBpbnRlcmlvclBvc2l0aW9uLno7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcG9zaXRpb25zW3Bvc2l0aW9uSW5kZXgrK10gPSByZWZsZWN0ZWRQb3NpdGlvbi54OwogICAgICAgICAgICBwb3NpdGlvbnNbcG9zaXRpb25JbmRleCsrXSA9IHJlZmxlY3RlZFBvc2l0aW9uLnk7CiAgICAgICAgICAgIHBvc2l0aW9uc1twb3NpdGlvbkluZGV4KytdID0gcmVmbGVjdGVkUG9zaXRpb24uejsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChhZGRFZGdlUG9zaXRpb25zKSB7CiAgICAgICAgICAgIG91dGVyUG9zaXRpb25zW291dGVyUmlnaHRJbmRleC0tXSA9IHBvc2l0aW9uLno7CiAgICAgICAgICAgIG91dGVyUG9zaXRpb25zW291dGVyUmlnaHRJbmRleC0tXSA9IHBvc2l0aW9uLnk7CiAgICAgICAgICAgIG91dGVyUG9zaXRpb25zW291dGVyUmlnaHRJbmRleC0tXSA9IHBvc2l0aW9uLng7CiAgICAgICAgICAgIG91dGVyUG9zaXRpb25zW291dGVyTGVmdEluZGV4KytdID0gcmVmbGVjdGVkUG9zaXRpb24ueDsKICAgICAgICAgICAgb3V0ZXJQb3NpdGlvbnNbb3V0ZXJMZWZ0SW5kZXgrK10gPSByZWZsZWN0ZWRQb3NpdGlvbi55OwogICAgICAgICAgICBvdXRlclBvc2l0aW9uc1tvdXRlckxlZnRJbmRleCsrXSA9IHJlZmxlY3RlZFBvc2l0aW9uLno7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHRoZXRhID0gTWF0aF9kZWZhdWx0LlBJX09WRVJfVFdPOwogICAgICAgIHBvc2l0aW9uID0gcG9pbnRPbkVsbGlwc29pZCgKICAgICAgICAgIC10aGV0YSwKICAgICAgICAgIHJvdGF0aW9uLAogICAgICAgICAgbm9ydGhWZWMsCiAgICAgICAgICBlYXN0VmVjLAogICAgICAgICAgYVNxciwKICAgICAgICAgIGFiLAogICAgICAgICAgYlNxciwKICAgICAgICAgIG1hZywKICAgICAgICAgIHVuaXRQb3MsCiAgICAgICAgICBwb3NpdGlvbgogICAgICAgICk7CiAgICAgICAgY29uc3QgciA9IHt9OwogICAgICAgIGlmIChhZGRGaWxsUG9zaXRpb25zKSB7CiAgICAgICAgICBwb3NpdGlvbnNbcG9zaXRpb25JbmRleCsrXSA9IHBvc2l0aW9uLng7CiAgICAgICAgICBwb3NpdGlvbnNbcG9zaXRpb25JbmRleCsrXSA9IHBvc2l0aW9uLnk7CiAgICAgICAgICBwb3NpdGlvbnNbcG9zaXRpb25JbmRleCsrXSA9IHBvc2l0aW9uLno7CiAgICAgICAgICByLnBvc2l0aW9ucyA9IHBvc2l0aW9uczsKICAgICAgICAgIHIubnVtUHRzID0gbnVtUHRzOwogICAgICAgIH0KICAgICAgICBpZiAoYWRkRWRnZVBvc2l0aW9ucykgewogICAgICAgICAgb3V0ZXJQb3NpdGlvbnNbb3V0ZXJSaWdodEluZGV4LS1dID0gcG9zaXRpb24uejsKICAgICAgICAgIG91dGVyUG9zaXRpb25zW291dGVyUmlnaHRJbmRleC0tXSA9IHBvc2l0aW9uLnk7CiAgICAgICAgICBvdXRlclBvc2l0aW9uc1tvdXRlclJpZ2h0SW5kZXgtLV0gPSBwb3NpdGlvbi54OwogICAgICAgICAgci5vdXRlclBvc2l0aW9ucyA9IG91dGVyUG9zaXRpb25zOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcjsKICAgICAgfTsKICAgICAgRWxsaXBzZUdlb21ldHJ5TGlicmFyeV9kZWZhdWx0ID0gRWxsaXBzZUdlb21ldHJ5TGlicmFyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0dlb21ldHJ5SW5zdGFuY2UuanMKICBmdW5jdGlvbiBHZW9tZXRyeUluc3RhbmNlKG9wdGlvbnMpIHsKICAgIG9wdGlvbnMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLCBkZWZhdWx0VmFsdWVfZGVmYXVsdC5FTVBUWV9PQkpFQ1QpOwogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQob3B0aW9ucy5nZW9tZXRyeSkpIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoIm9wdGlvbnMuZ2VvbWV0cnkgaXMgcmVxdWlyZWQuIik7CiAgICB9CiAgICB0aGlzLmdlb21ldHJ5ID0gb3B0aW9ucy5nZW9tZXRyeTsKICAgIHRoaXMubW9kZWxNYXRyaXggPSBNYXRyaXg0X2RlZmF1bHQuY2xvbmUoCiAgICAgIGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMubW9kZWxNYXRyaXgsIE1hdHJpeDRfZGVmYXVsdC5JREVOVElUWSkKICAgICk7CiAgICB0aGlzLmlkID0gb3B0aW9ucy5pZDsKICAgIHRoaXMucGlja1ByaW1pdGl2ZSA9IG9wdGlvbnMucGlja1ByaW1pdGl2ZTsKICAgIHRoaXMuYXR0cmlidXRlcyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuYXR0cmlidXRlcywge30pOwogICAgdGhpcy53ZXN0SGVtaXNwaGVyZUdlb21ldHJ5ID0gdm9pZCAwOwogICAgdGhpcy5lYXN0SGVtaXNwaGVyZUdlb21ldHJ5ID0gdm9pZCAwOwogIH0KICB2YXIgR2VvbWV0cnlJbnN0YW5jZV9kZWZhdWx0OwogIHZhciBpbml0X0dlb21ldHJ5SW5zdGFuY2UgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0dlb21ldHJ5SW5zdGFuY2UuanMiKCkgewogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X01hdHJpeDQoKTsKICAgICAgR2VvbWV0cnlJbnN0YW5jZV9kZWZhdWx0ID0gR2VvbWV0cnlJbnN0YW5jZTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0VsbGlwc2VHZW9tZXRyeS5qcwogIGZ1bmN0aW9uIGNvbXB1dGVUb3BCb3R0b21BdHRyaWJ1dGVzKHBvc2l0aW9ucywgb3B0aW9ucywgZXh0cnVkZSkgewogICAgY29uc3QgdmVydGV4Rm9ybWF0ID0gb3B0aW9ucy52ZXJ0ZXhGb3JtYXQ7CiAgICBjb25zdCBjZW50ZXIgPSBvcHRpb25zLmNlbnRlcjsKICAgIGNvbnN0IHNlbWlNYWpvckF4aXMgPSBvcHRpb25zLnNlbWlNYWpvckF4aXM7CiAgICBjb25zdCBzZW1pTWlub3JBeGlzID0gb3B0aW9ucy5zZW1pTWlub3JBeGlzOwogICAgY29uc3QgZWxsaXBzb2lkID0gb3B0aW9ucy5lbGxpcHNvaWQ7CiAgICBjb25zdCBzdFJvdGF0aW9uID0gb3B0aW9ucy5zdFJvdGF0aW9uOwogICAgY29uc3Qgc2l6ZSA9IGV4dHJ1ZGUgPyBwb3NpdGlvbnMubGVuZ3RoIC8gMyAqIDIgOiBwb3NpdGlvbnMubGVuZ3RoIC8gMzsKICAgIGNvbnN0IHNoYWRvd1ZvbHVtZSA9IG9wdGlvbnMuc2hhZG93Vm9sdW1lOwogICAgY29uc3QgdGV4dHVyZUNvb3JkaW5hdGVzID0gdmVydGV4Rm9ybWF0LnN0ID8gbmV3IEZsb2F0MzJBcnJheShzaXplICogMikgOiB2b2lkIDA7CiAgICBjb25zdCBub3JtYWxzID0gdmVydGV4Rm9ybWF0Lm5vcm1hbCA/IG5ldyBGbG9hdDMyQXJyYXkoc2l6ZSAqIDMpIDogdm9pZCAwOwogICAgY29uc3QgdGFuZ2VudHMgPSB2ZXJ0ZXhGb3JtYXQudGFuZ2VudCA/IG5ldyBGbG9hdDMyQXJyYXkoc2l6ZSAqIDMpIDogdm9pZCAwOwogICAgY29uc3QgYml0YW5nZW50cyA9IHZlcnRleEZvcm1hdC5iaXRhbmdlbnQgPyBuZXcgRmxvYXQzMkFycmF5KHNpemUgKiAzKSA6IHZvaWQgMDsKICAgIGNvbnN0IGV4dHJ1ZGVOb3JtYWxzID0gc2hhZG93Vm9sdW1lID8gbmV3IEZsb2F0MzJBcnJheShzaXplICogMykgOiB2b2lkIDA7CiAgICBsZXQgdGV4dHVyZUNvb3JkSW5kZXggPSAwOwogICAgbGV0IG5vcm1hbDIgPSBzY3JhdGNoTm9ybWFsMzsKICAgIGxldCB0YW5nZW50ID0gc2NyYXRjaFRhbmdlbnQ7CiAgICBsZXQgYml0YW5nZW50ID0gc2NyYXRjaEJpdGFuZ2VudDsKICAgIGNvbnN0IHByb2plY3Rpb24gPSBuZXcgR2VvZ3JhcGhpY1Byb2plY3Rpb25fZGVmYXVsdChlbGxpcHNvaWQpOwogICAgY29uc3QgcHJvamVjdGVkQ2VudGVyID0gcHJvamVjdGlvbi5wcm9qZWN0KAogICAgICBlbGxpcHNvaWQuY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWMoY2VudGVyLCBzY3JhdGNoQ2FydG9ncmFwaGljMiksCiAgICAgIHByb2plY3RlZENlbnRlclNjcmF0Y2gKICAgICk7CiAgICBjb25zdCBnZW9kZXRpY05vcm1hbCA9IGVsbGlwc29pZC5zY2FsZVRvR2VvZGV0aWNTdXJmYWNlKAogICAgICBjZW50ZXIsCiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4xMwogICAgKTsKICAgIGVsbGlwc29pZC5nZW9kZXRpY1N1cmZhY2VOb3JtYWwoZ2VvZGV0aWNOb3JtYWwsIGdlb2RldGljTm9ybWFsKTsKICAgIGxldCB0ZXh0dXJlTWF0cml4ID0gdGV4dHVyZU1hdHJpeFNjcmF0Y2g7CiAgICBsZXQgdGFuZ2VudE1hdHJpeCA9IHRhbmdlbnRNYXRyaXhTY3JhdGNoOwogICAgaWYgKHN0Um90YXRpb24gIT09IDApIHsKICAgICAgbGV0IHJvdGF0aW9uID0gUXVhdGVybmlvbl9kZWZhdWx0LmZyb21BeGlzQW5nbGUoCiAgICAgICAgZ2VvZGV0aWNOb3JtYWwsCiAgICAgICAgc3RSb3RhdGlvbiwKICAgICAgICBxdWF0ZXJuaW9uU2NyYXRjaAogICAgICApOwogICAgICB0ZXh0dXJlTWF0cml4ID0gTWF0cml4M19kZWZhdWx0LmZyb21RdWF0ZXJuaW9uKHJvdGF0aW9uLCB0ZXh0dXJlTWF0cml4KTsKICAgICAgcm90YXRpb24gPSBRdWF0ZXJuaW9uX2RlZmF1bHQuZnJvbUF4aXNBbmdsZSgKICAgICAgICBnZW9kZXRpY05vcm1hbCwKICAgICAgICAtc3RSb3RhdGlvbiwKICAgICAgICBxdWF0ZXJuaW9uU2NyYXRjaAogICAgICApOwogICAgICB0YW5nZW50TWF0cml4ID0gTWF0cml4M19kZWZhdWx0LmZyb21RdWF0ZXJuaW9uKHJvdGF0aW9uLCB0YW5nZW50TWF0cml4KTsKICAgIH0gZWxzZSB7CiAgICAgIHRleHR1cmVNYXRyaXggPSBNYXRyaXgzX2RlZmF1bHQuY2xvbmUoTWF0cml4M19kZWZhdWx0LklERU5USVRZLCB0ZXh0dXJlTWF0cml4KTsKICAgICAgdGFuZ2VudE1hdHJpeCA9IE1hdHJpeDNfZGVmYXVsdC5jbG9uZShNYXRyaXgzX2RlZmF1bHQuSURFTlRJVFksIHRhbmdlbnRNYXRyaXgpOwogICAgfQogICAgY29uc3QgbWluVGV4Q29vcmQgPSBDYXJ0ZXNpYW4yX2RlZmF1bHQuZnJvbUVsZW1lbnRzKAogICAgICBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksCiAgICAgIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSwKICAgICAgc2NyYXRjaE1pblRleENvb3JkCiAgICApOwogICAgY29uc3QgbWF4VGV4Q29vcmQgPSBDYXJ0ZXNpYW4yX2RlZmF1bHQuZnJvbUVsZW1lbnRzKAogICAgICBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFksCiAgICAgIE51bWJlci5ORUdBVElWRV9JTkZJTklUWSwKICAgICAgc2NyYXRjaE1heFRleENvb3JkCiAgICApOwogICAgbGV0IGxlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICBjb25zdCBib3R0b21PZmZzZXQgPSBleHRydWRlID8gbGVuZ3RoIDogMDsKICAgIGNvbnN0IHN0T2Zmc2V0ID0gYm90dG9tT2Zmc2V0IC8gMyAqIDI7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAzKSB7CiAgICAgIGNvbnN0IGkxID0gaSArIDE7CiAgICAgIGNvbnN0IGkyID0gaSArIDI7CiAgICAgIGNvbnN0IHBvc2l0aW9uID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShwb3NpdGlvbnMsIGksIHNjcmF0Y2hDYXJ0ZXNpYW4xMyk7CiAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQuc3QpIHsKICAgICAgICBjb25zdCByb3RhdGVkUG9pbnQgPSBNYXRyaXgzX2RlZmF1bHQubXVsdGlwbHlCeVZlY3RvcigKICAgICAgICAgIHRleHR1cmVNYXRyaXgsCiAgICAgICAgICBwb3NpdGlvbiwKICAgICAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4yNAogICAgICAgICk7CiAgICAgICAgY29uc3QgcHJvamVjdGVkUG9pbnQgPSBwcm9qZWN0aW9uLnByb2plY3QoCiAgICAgICAgICBlbGxpcHNvaWQuY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWMocm90YXRlZFBvaW50LCBzY3JhdGNoQ2FydG9ncmFwaGljMiksCiAgICAgICAgICBzY3JhdGNoQ2FydGVzaWFuMzUKICAgICAgICApOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChwcm9qZWN0ZWRQb2ludCwgcHJvamVjdGVkQ2VudGVyLCBwcm9qZWN0ZWRQb2ludCk7CiAgICAgICAgdGV4Q29vcmRTY3JhdGNoLnggPSAocHJvamVjdGVkUG9pbnQueCArIHNlbWlNYWpvckF4aXMpIC8gKDIgKiBzZW1pTWFqb3JBeGlzKTsKICAgICAgICB0ZXhDb29yZFNjcmF0Y2gueSA9IChwcm9qZWN0ZWRQb2ludC55ICsgc2VtaU1pbm9yQXhpcykgLyAoMiAqIHNlbWlNaW5vckF4aXMpOwogICAgICAgIG1pblRleENvb3JkLnggPSBNYXRoLm1pbih0ZXhDb29yZFNjcmF0Y2gueCwgbWluVGV4Q29vcmQueCk7CiAgICAgICAgbWluVGV4Q29vcmQueSA9IE1hdGgubWluKHRleENvb3JkU2NyYXRjaC55LCBtaW5UZXhDb29yZC55KTsKICAgICAgICBtYXhUZXhDb29yZC54ID0gTWF0aC5tYXgodGV4Q29vcmRTY3JhdGNoLngsIG1heFRleENvb3JkLngpOwogICAgICAgIG1heFRleENvb3JkLnkgPSBNYXRoLm1heCh0ZXhDb29yZFNjcmF0Y2gueSwgbWF4VGV4Q29vcmQueSk7CiAgICAgICAgaWYgKGV4dHJ1ZGUpIHsKICAgICAgICAgIHRleHR1cmVDb29yZGluYXRlc1t0ZXh0dXJlQ29vcmRJbmRleCArIHN0T2Zmc2V0XSA9IHRleENvb3JkU2NyYXRjaC54OwogICAgICAgICAgdGV4dHVyZUNvb3JkaW5hdGVzW3RleHR1cmVDb29yZEluZGV4ICsgMSArIHN0T2Zmc2V0XSA9IHRleENvb3JkU2NyYXRjaC55OwogICAgICAgIH0KICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZXNbdGV4dHVyZUNvb3JkSW5kZXgrK10gPSB0ZXhDb29yZFNjcmF0Y2gueDsKICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZXNbdGV4dHVyZUNvb3JkSW5kZXgrK10gPSB0ZXhDb29yZFNjcmF0Y2gueTsKICAgICAgfQogICAgICBpZiAodmVydGV4Rm9ybWF0Lm5vcm1hbCB8fCB2ZXJ0ZXhGb3JtYXQudGFuZ2VudCB8fCB2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50IHx8IHNoYWRvd1ZvbHVtZSkgewogICAgICAgIG5vcm1hbDIgPSBlbGxpcHNvaWQuZ2VvZGV0aWNTdXJmYWNlTm9ybWFsKHBvc2l0aW9uLCBub3JtYWwyKTsKICAgICAgICBpZiAoc2hhZG93Vm9sdW1lKSB7CiAgICAgICAgICBleHRydWRlTm9ybWFsc1tpICsgYm90dG9tT2Zmc2V0XSA9IC1ub3JtYWwyLng7CiAgICAgICAgICBleHRydWRlTm9ybWFsc1tpMSArIGJvdHRvbU9mZnNldF0gPSAtbm9ybWFsMi55OwogICAgICAgICAgZXh0cnVkZU5vcm1hbHNbaTIgKyBib3R0b21PZmZzZXRdID0gLW5vcm1hbDIuejsKICAgICAgICB9CiAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5ub3JtYWwgfHwgdmVydGV4Rm9ybWF0LnRhbmdlbnQgfHwgdmVydGV4Rm9ybWF0LmJpdGFuZ2VudCkgewogICAgICAgICAgaWYgKHZlcnRleEZvcm1hdC50YW5nZW50IHx8IHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpIHsKICAgICAgICAgICAgdGFuZ2VudCA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoCiAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKENhcnRlc2lhbjNfZGVmYXVsdC5VTklUX1osIG5vcm1hbDIsIHRhbmdlbnQpLAogICAgICAgICAgICAgIHRhbmdlbnQKICAgICAgICAgICAgKTsKICAgICAgICAgICAgTWF0cml4M19kZWZhdWx0Lm11bHRpcGx5QnlWZWN0b3IodGFuZ2VudE1hdHJpeCwgdGFuZ2VudCwgdGFuZ2VudCk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodmVydGV4Rm9ybWF0Lm5vcm1hbCkgewogICAgICAgICAgICBub3JtYWxzW2ldID0gbm9ybWFsMi54OwogICAgICAgICAgICBub3JtYWxzW2kxXSA9IG5vcm1hbDIueTsKICAgICAgICAgICAgbm9ybWFsc1tpMl0gPSBub3JtYWwyLno7CiAgICAgICAgICAgIGlmIChleHRydWRlKSB7CiAgICAgICAgICAgICAgbm9ybWFsc1tpICsgYm90dG9tT2Zmc2V0XSA9IC1ub3JtYWwyLng7CiAgICAgICAgICAgICAgbm9ybWFsc1tpMSArIGJvdHRvbU9mZnNldF0gPSAtbm9ybWFsMi55OwogICAgICAgICAgICAgIG5vcm1hbHNbaTIgKyBib3R0b21PZmZzZXRdID0gLW5vcm1hbDIuejsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgaWYgKHZlcnRleEZvcm1hdC50YW5nZW50KSB7CiAgICAgICAgICAgIHRhbmdlbnRzW2ldID0gdGFuZ2VudC54OwogICAgICAgICAgICB0YW5nZW50c1tpMV0gPSB0YW5nZW50Lnk7CiAgICAgICAgICAgIHRhbmdlbnRzW2kyXSA9IHRhbmdlbnQuejsKICAgICAgICAgICAgaWYgKGV4dHJ1ZGUpIHsKICAgICAgICAgICAgICB0YW5nZW50c1tpICsgYm90dG9tT2Zmc2V0XSA9IC10YW5nZW50Lng7CiAgICAgICAgICAgICAgdGFuZ2VudHNbaTEgKyBib3R0b21PZmZzZXRdID0gLXRhbmdlbnQueTsKICAgICAgICAgICAgICB0YW5nZW50c1tpMiArIGJvdHRvbU9mZnNldF0gPSAtdGFuZ2VudC56OwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodmVydGV4Rm9ybWF0LmJpdGFuZ2VudCkgewogICAgICAgICAgICBiaXRhbmdlbnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKAogICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyhub3JtYWwyLCB0YW5nZW50LCBiaXRhbmdlbnQpLAogICAgICAgICAgICAgIGJpdGFuZ2VudAogICAgICAgICAgICApOwogICAgICAgICAgICBiaXRhbmdlbnRzW2ldID0gYml0YW5nZW50Lng7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbaTFdID0gYml0YW5nZW50Lnk7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbaTJdID0gYml0YW5nZW50Lno7CiAgICAgICAgICAgIGlmIChleHRydWRlKSB7CiAgICAgICAgICAgICAgYml0YW5nZW50c1tpICsgYm90dG9tT2Zmc2V0XSA9IGJpdGFuZ2VudC54OwogICAgICAgICAgICAgIGJpdGFuZ2VudHNbaTEgKyBib3R0b21PZmZzZXRdID0gYml0YW5nZW50Lnk7CiAgICAgICAgICAgICAgYml0YW5nZW50c1tpMiArIGJvdHRvbU9mZnNldF0gPSBiaXRhbmdlbnQuejsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQogICAgaWYgKHZlcnRleEZvcm1hdC5zdCkgewogICAgICBsZW5ndGggPSB0ZXh0dXJlQ29vcmRpbmF0ZXMubGVuZ3RoOwogICAgICBmb3IgKGxldCBrID0gMDsgayA8IGxlbmd0aDsgayArPSAyKSB7CiAgICAgICAgdGV4dHVyZUNvb3JkaW5hdGVzW2tdID0gKHRleHR1cmVDb29yZGluYXRlc1trXSAtIG1pblRleENvb3JkLngpIC8gKG1heFRleENvb3JkLnggLSBtaW5UZXhDb29yZC54KTsKICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZXNbayArIDFdID0gKHRleHR1cmVDb29yZGluYXRlc1trICsgMV0gLSBtaW5UZXhDb29yZC55KSAvIChtYXhUZXhDb29yZC55IC0gbWluVGV4Q29vcmQueSk7CiAgICAgIH0KICAgIH0KICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVzX2RlZmF1bHQoKTsKICAgIGlmICh2ZXJ0ZXhGb3JtYXQucG9zaXRpb24pIHsKICAgICAgY29uc3QgZmluYWxQb3NpdGlvbnMgPSBFbGxpcHNlR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQucmFpc2VQb3NpdGlvbnNUb0hlaWdodCgKICAgICAgICBwb3NpdGlvbnMsCiAgICAgICAgb3B0aW9ucywKICAgICAgICBleHRydWRlCiAgICAgICk7CiAgICAgIGF0dHJpYnV0ZXMucG9zaXRpb24gPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRE9VQkxFLAogICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgdmFsdWVzOiBmaW5hbFBvc2l0aW9ucwogICAgICB9KTsKICAgIH0KICAgIGlmICh2ZXJ0ZXhGb3JtYXQuc3QpIHsKICAgICAgYXR0cmlidXRlcy5zdCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAyLAogICAgICAgIHZhbHVlczogdGV4dHVyZUNvb3JkaW5hdGVzCiAgICAgIH0pOwogICAgfQogICAgaWYgKHZlcnRleEZvcm1hdC5ub3JtYWwpIHsKICAgICAgYXR0cmlidXRlcy5ub3JtYWwgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICB2YWx1ZXM6IG5vcm1hbHMKICAgICAgfSk7CiAgICB9CiAgICBpZiAodmVydGV4Rm9ybWF0LnRhbmdlbnQpIHsKICAgICAgYXR0cmlidXRlcy50YW5nZW50ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkZMT0FULAogICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgdmFsdWVzOiB0YW5nZW50cwogICAgICB9KTsKICAgIH0KICAgIGlmICh2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50KSB7CiAgICAgIGF0dHJpYnV0ZXMuYml0YW5nZW50ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkZMT0FULAogICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgdmFsdWVzOiBiaXRhbmdlbnRzCiAgICAgIH0pOwogICAgfQogICAgaWYgKHNoYWRvd1ZvbHVtZSkgewogICAgICBhdHRyaWJ1dGVzLmV4dHJ1ZGVEaXJlY3Rpb24gPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICB2YWx1ZXM6IGV4dHJ1ZGVOb3JtYWxzCiAgICAgIH0pOwogICAgfQogICAgaWYgKGV4dHJ1ZGUgJiYgZGVmaW5lZF9kZWZhdWx0KG9wdGlvbnMub2Zmc2V0QXR0cmlidXRlKSkgewogICAgICBsZXQgb2Zmc2V0QXR0cmlidXRlID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSk7CiAgICAgIGlmIChvcHRpb25zLm9mZnNldEF0dHJpYnV0ZSA9PT0gR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGVfZGVmYXVsdC5UT1ApIHsKICAgICAgICBvZmZzZXRBdHRyaWJ1dGUgPSBvZmZzZXRBdHRyaWJ1dGUuZmlsbCgxLCAwLCBzaXplIC8gMik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY29uc3Qgb2Zmc2V0VmFsdWUgPSBvcHRpb25zLm9mZnNldEF0dHJpYnV0ZSA9PT0gR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGVfZGVmYXVsdC5OT05FID8gMCA6IDE7CiAgICAgICAgb2Zmc2V0QXR0cmlidXRlID0gb2Zmc2V0QXR0cmlidXRlLmZpbGwob2Zmc2V0VmFsdWUpOwogICAgICB9CiAgICAgIGF0dHJpYnV0ZXMuYXBwbHlPZmZzZXQgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuVU5TSUdORURfQllURSwKICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAxLAogICAgICAgIHZhbHVlczogb2Zmc2V0QXR0cmlidXRlCiAgICAgIH0pOwogICAgfQogICAgcmV0dXJuIGF0dHJpYnV0ZXM7CiAgfQogIGZ1bmN0aW9uIHRvcEluZGljZXMobnVtUHRzKSB7CiAgICBjb25zdCBpbmRpY2VzID0gbmV3IEFycmF5KDEyICogKG51bVB0cyAqIChudW1QdHMgKyAxKSkgLSA2KTsKICAgIGxldCBpbmRpY2VzSW5kZXggPSAwOwogICAgbGV0IHByZXZJbmRleDsKICAgIGxldCBudW1JbnRlcmlvcjsKICAgIGxldCBwb3NpdGlvbkluZGV4OwogICAgbGV0IGk7CiAgICBsZXQgajsKICAgIHByZXZJbmRleCA9IDA7CiAgICBwb3NpdGlvbkluZGV4ID0gMTsKICAgIGZvciAoaSA9IDA7IGkgPCAzOyBpKyspIHsKICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBwb3NpdGlvbkluZGV4Kys7CiAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gcHJldkluZGV4OwogICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IHBvc2l0aW9uSW5kZXg7CiAgICB9CiAgICBmb3IgKGkgPSAyOyBpIDwgbnVtUHRzICsgMTsgKytpKSB7CiAgICAgIHBvc2l0aW9uSW5kZXggPSBpICogKGkgKyAxKSAtIDE7CiAgICAgIHByZXZJbmRleCA9IChpIC0gMSkgKiBpIC0gMTsKICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBwb3NpdGlvbkluZGV4Kys7CiAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gcHJldkluZGV4OwogICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IHBvc2l0aW9uSW5kZXg7CiAgICAgIG51bUludGVyaW9yID0gMiAqIGk7CiAgICAgIGZvciAoaiA9IDA7IGogPCBudW1JbnRlcmlvciAtIDE7ICsraikgewogICAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gcG9zaXRpb25JbmRleDsKICAgICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IHByZXZJbmRleCsrOwogICAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gcHJldkluZGV4OwogICAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gcG9zaXRpb25JbmRleCsrOwogICAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gcHJldkluZGV4OwogICAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gcG9zaXRpb25JbmRleDsKICAgICAgfQogICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IHBvc2l0aW9uSW5kZXgrKzsKICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBwcmV2SW5kZXg7CiAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gcG9zaXRpb25JbmRleDsKICAgIH0KICAgIG51bUludGVyaW9yID0gbnVtUHRzICogMjsKICAgICsrcG9zaXRpb25JbmRleDsKICAgICsrcHJldkluZGV4OwogICAgZm9yIChpID0gMDsgaSA8IG51bUludGVyaW9yIC0gMTsgKytpKSB7CiAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gcG9zaXRpb25JbmRleDsKICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBwcmV2SW5kZXgrKzsKICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBwcmV2SW5kZXg7CiAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gcG9zaXRpb25JbmRleCsrOwogICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IHByZXZJbmRleDsKICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBwb3NpdGlvbkluZGV4OwogICAgfQogICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBwb3NpdGlvbkluZGV4OwogICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBwcmV2SW5kZXgrKzsKICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gcHJldkluZGV4OwogICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBwb3NpdGlvbkluZGV4Kys7CiAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IHByZXZJbmRleCsrOwogICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBwcmV2SW5kZXg7CiAgICArK3ByZXZJbmRleDsKICAgIGZvciAoaSA9IG51bVB0cyAtIDE7IGkgPiAxOyAtLWkpIHsKICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBwcmV2SW5kZXgrKzsKICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBwcmV2SW5kZXg7CiAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gcG9zaXRpb25JbmRleDsKICAgICAgbnVtSW50ZXJpb3IgPSAyICogaTsKICAgICAgZm9yIChqID0gMDsgaiA8IG51bUludGVyaW9yIC0gMTsgKytqKSB7CiAgICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBwb3NpdGlvbkluZGV4OwogICAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gcHJldkluZGV4Kys7CiAgICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBwcmV2SW5kZXg7CiAgICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBwb3NpdGlvbkluZGV4Kys7CiAgICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBwcmV2SW5kZXg7CiAgICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBwb3NpdGlvbkluZGV4OwogICAgICB9CiAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gcHJldkluZGV4Kys7CiAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gcHJldkluZGV4Kys7CiAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gcG9zaXRpb25JbmRleCsrOwogICAgfQogICAgZm9yIChpID0gMDsgaSA8IDM7IGkrKykgewogICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IHByZXZJbmRleCsrOwogICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IHByZXZJbmRleDsKICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBwb3NpdGlvbkluZGV4OwogICAgfQogICAgcmV0dXJuIGluZGljZXM7CiAgfQogIGZ1bmN0aW9uIGNvbXB1dGVFbGxpcHNlKG9wdGlvbnMpIHsKICAgIGNvbnN0IGNlbnRlciA9IG9wdGlvbnMuY2VudGVyOwogICAgYm91bmRpbmdTcGhlcmVDZW50ZXIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcigKICAgICAgb3B0aW9ucy5lbGxpcHNvaWQuZ2VvZGV0aWNTdXJmYWNlTm9ybWFsKGNlbnRlciwgYm91bmRpbmdTcGhlcmVDZW50ZXIpLAogICAgICBvcHRpb25zLmhlaWdodCwKICAgICAgYm91bmRpbmdTcGhlcmVDZW50ZXIKICAgICk7CiAgICBib3VuZGluZ1NwaGVyZUNlbnRlciA9IENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoCiAgICAgIGNlbnRlciwKICAgICAgYm91bmRpbmdTcGhlcmVDZW50ZXIsCiAgICAgIGJvdW5kaW5nU3BoZXJlQ2VudGVyCiAgICApOwogICAgY29uc3QgYm91bmRpbmdTcGhlcmUgPSBuZXcgQm91bmRpbmdTcGhlcmVfZGVmYXVsdCgKICAgICAgYm91bmRpbmdTcGhlcmVDZW50ZXIsCiAgICAgIG9wdGlvbnMuc2VtaU1ham9yQXhpcwogICAgKTsKICAgIGNvbnN0IGNlcCA9IEVsbGlwc2VHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5jb21wdXRlRWxsaXBzZVBvc2l0aW9ucygKICAgICAgb3B0aW9ucywKICAgICAgdHJ1ZSwKICAgICAgZmFsc2UKICAgICk7CiAgICBjb25zdCBwb3NpdGlvbnMgPSBjZXAucG9zaXRpb25zOwogICAgY29uc3QgbnVtUHRzID0gY2VwLm51bVB0czsKICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBjb21wdXRlVG9wQm90dG9tQXR0cmlidXRlcyhwb3NpdGlvbnMsIG9wdGlvbnMsIGZhbHNlKTsKICAgIGxldCBpbmRpY2VzID0gdG9wSW5kaWNlcyhudW1QdHMpOwogICAgaW5kaWNlcyA9IEluZGV4RGF0YXR5cGVfZGVmYXVsdC5jcmVhdGVUeXBlZEFycmF5KHBvc2l0aW9ucy5sZW5ndGggLyAzLCBpbmRpY2VzKTsKICAgIHJldHVybiB7CiAgICAgIGJvdW5kaW5nU3BoZXJlLAogICAgICBhdHRyaWJ1dGVzLAogICAgICBpbmRpY2VzCiAgICB9OwogIH0KICBmdW5jdGlvbiBjb21wdXRlV2FsbEF0dHJpYnV0ZXMocG9zaXRpb25zLCBvcHRpb25zKSB7CiAgICBjb25zdCB2ZXJ0ZXhGb3JtYXQgPSBvcHRpb25zLnZlcnRleEZvcm1hdDsKICAgIGNvbnN0IGNlbnRlciA9IG9wdGlvbnMuY2VudGVyOwogICAgY29uc3Qgc2VtaU1ham9yQXhpcyA9IG9wdGlvbnMuc2VtaU1ham9yQXhpczsKICAgIGNvbnN0IHNlbWlNaW5vckF4aXMgPSBvcHRpb25zLnNlbWlNaW5vckF4aXM7CiAgICBjb25zdCBlbGxpcHNvaWQgPSBvcHRpb25zLmVsbGlwc29pZDsKICAgIGNvbnN0IGhlaWdodCA9IG9wdGlvbnMuaGVpZ2h0OwogICAgY29uc3QgZXh0cnVkZWRIZWlnaHQgPSBvcHRpb25zLmV4dHJ1ZGVkSGVpZ2h0OwogICAgY29uc3Qgc3RSb3RhdGlvbiA9IG9wdGlvbnMuc3RSb3RhdGlvbjsKICAgIGNvbnN0IHNpemUgPSBwb3NpdGlvbnMubGVuZ3RoIC8gMyAqIDI7CiAgICBjb25zdCBmaW5hbFBvc2l0aW9ucyA9IG5ldyBGbG9hdDY0QXJyYXkoc2l6ZSAqIDMpOwogICAgY29uc3QgdGV4dHVyZUNvb3JkaW5hdGVzID0gdmVydGV4Rm9ybWF0LnN0ID8gbmV3IEZsb2F0MzJBcnJheShzaXplICogMikgOiB2b2lkIDA7CiAgICBjb25zdCBub3JtYWxzID0gdmVydGV4Rm9ybWF0Lm5vcm1hbCA/IG5ldyBGbG9hdDMyQXJyYXkoc2l6ZSAqIDMpIDogdm9pZCAwOwogICAgY29uc3QgdGFuZ2VudHMgPSB2ZXJ0ZXhGb3JtYXQudGFuZ2VudCA/IG5ldyBGbG9hdDMyQXJyYXkoc2l6ZSAqIDMpIDogdm9pZCAwOwogICAgY29uc3QgYml0YW5nZW50cyA9IHZlcnRleEZvcm1hdC5iaXRhbmdlbnQgPyBuZXcgRmxvYXQzMkFycmF5KHNpemUgKiAzKSA6IHZvaWQgMDsKICAgIGNvbnN0IHNoYWRvd1ZvbHVtZSA9IG9wdGlvbnMuc2hhZG93Vm9sdW1lOwogICAgY29uc3QgZXh0cnVkZU5vcm1hbHMgPSBzaGFkb3dWb2x1bWUgPyBuZXcgRmxvYXQzMkFycmF5KHNpemUgKiAzKSA6IHZvaWQgMDsKICAgIGxldCB0ZXh0dXJlQ29vcmRJbmRleCA9IDA7CiAgICBsZXQgbm9ybWFsMiA9IHNjcmF0Y2hOb3JtYWwzOwogICAgbGV0IHRhbmdlbnQgPSBzY3JhdGNoVGFuZ2VudDsKICAgIGxldCBiaXRhbmdlbnQgPSBzY3JhdGNoQml0YW5nZW50OwogICAgY29uc3QgcHJvamVjdGlvbiA9IG5ldyBHZW9ncmFwaGljUHJvamVjdGlvbl9kZWZhdWx0KGVsbGlwc29pZCk7CiAgICBjb25zdCBwcm9qZWN0ZWRDZW50ZXIgPSBwcm9qZWN0aW9uLnByb2plY3QoCiAgICAgIGVsbGlwc29pZC5jYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpYyhjZW50ZXIsIHNjcmF0Y2hDYXJ0b2dyYXBoaWMyKSwKICAgICAgcHJvamVjdGVkQ2VudGVyU2NyYXRjaAogICAgKTsKICAgIGNvbnN0IGdlb2RldGljTm9ybWFsID0gZWxsaXBzb2lkLnNjYWxlVG9HZW9kZXRpY1N1cmZhY2UoCiAgICAgIGNlbnRlciwKICAgICAgc2NyYXRjaENhcnRlc2lhbjEzCiAgICApOwogICAgZWxsaXBzb2lkLmdlb2RldGljU3VyZmFjZU5vcm1hbChnZW9kZXRpY05vcm1hbCwgZ2VvZGV0aWNOb3JtYWwpOwogICAgY29uc3Qgcm90YXRpb24gPSBRdWF0ZXJuaW9uX2RlZmF1bHQuZnJvbUF4aXNBbmdsZSgKICAgICAgZ2VvZGV0aWNOb3JtYWwsCiAgICAgIHN0Um90YXRpb24sCiAgICAgIHF1YXRlcm5pb25TY3JhdGNoCiAgICApOwogICAgY29uc3QgdGV4dHVyZU1hdHJpeCA9IE1hdHJpeDNfZGVmYXVsdC5mcm9tUXVhdGVybmlvbihyb3RhdGlvbiwgdGV4dHVyZU1hdHJpeFNjcmF0Y2gpOwogICAgY29uc3QgbWluVGV4Q29vcmQgPSBDYXJ0ZXNpYW4yX2RlZmF1bHQuZnJvbUVsZW1lbnRzKAogICAgICBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksCiAgICAgIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSwKICAgICAgc2NyYXRjaE1pblRleENvb3JkCiAgICApOwogICAgY29uc3QgbWF4VGV4Q29vcmQgPSBDYXJ0ZXNpYW4yX2RlZmF1bHQuZnJvbUVsZW1lbnRzKAogICAgICBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFksCiAgICAgIE51bWJlci5ORUdBVElWRV9JTkZJTklUWSwKICAgICAgc2NyYXRjaE1heFRleENvb3JkCiAgICApOwogICAgbGV0IGxlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICBjb25zdCBzdE9mZnNldCA9IGxlbmd0aCAvIDMgKiAyOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMykgewogICAgICBjb25zdCBpMSA9IGkgKyAxOwogICAgICBjb25zdCBpMiA9IGkgKyAyOwogICAgICBsZXQgcG9zaXRpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KHBvc2l0aW9ucywgaSwgc2NyYXRjaENhcnRlc2lhbjEzKTsKICAgICAgbGV0IGV4dHJ1ZGVkUG9zaXRpb247CiAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQuc3QpIHsKICAgICAgICBjb25zdCByb3RhdGVkUG9pbnQgPSBNYXRyaXgzX2RlZmF1bHQubXVsdGlwbHlCeVZlY3RvcigKICAgICAgICAgIHRleHR1cmVNYXRyaXgsCiAgICAgICAgICBwb3NpdGlvbiwKICAgICAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4yNAogICAgICAgICk7CiAgICAgICAgY29uc3QgcHJvamVjdGVkUG9pbnQgPSBwcm9qZWN0aW9uLnByb2plY3QoCiAgICAgICAgICBlbGxpcHNvaWQuY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWMocm90YXRlZFBvaW50LCBzY3JhdGNoQ2FydG9ncmFwaGljMiksCiAgICAgICAgICBzY3JhdGNoQ2FydGVzaWFuMzUKICAgICAgICApOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChwcm9qZWN0ZWRQb2ludCwgcHJvamVjdGVkQ2VudGVyLCBwcm9qZWN0ZWRQb2ludCk7CiAgICAgICAgdGV4Q29vcmRTY3JhdGNoLnggPSAocHJvamVjdGVkUG9pbnQueCArIHNlbWlNYWpvckF4aXMpIC8gKDIgKiBzZW1pTWFqb3JBeGlzKTsKICAgICAgICB0ZXhDb29yZFNjcmF0Y2gueSA9IChwcm9qZWN0ZWRQb2ludC55ICsgc2VtaU1pbm9yQXhpcykgLyAoMiAqIHNlbWlNaW5vckF4aXMpOwogICAgICAgIG1pblRleENvb3JkLnggPSBNYXRoLm1pbih0ZXhDb29yZFNjcmF0Y2gueCwgbWluVGV4Q29vcmQueCk7CiAgICAgICAgbWluVGV4Q29vcmQueSA9IE1hdGgubWluKHRleENvb3JkU2NyYXRjaC55LCBtaW5UZXhDb29yZC55KTsKICAgICAgICBtYXhUZXhDb29yZC54ID0gTWF0aC5tYXgodGV4Q29vcmRTY3JhdGNoLngsIG1heFRleENvb3JkLngpOwogICAgICAgIG1heFRleENvb3JkLnkgPSBNYXRoLm1heCh0ZXhDb29yZFNjcmF0Y2gueSwgbWF4VGV4Q29vcmQueSk7CiAgICAgICAgdGV4dHVyZUNvb3JkaW5hdGVzW3RleHR1cmVDb29yZEluZGV4ICsgc3RPZmZzZXRdID0gdGV4Q29vcmRTY3JhdGNoLng7CiAgICAgICAgdGV4dHVyZUNvb3JkaW5hdGVzW3RleHR1cmVDb29yZEluZGV4ICsgMSArIHN0T2Zmc2V0XSA9IHRleENvb3JkU2NyYXRjaC55OwogICAgICAgIHRleHR1cmVDb29yZGluYXRlc1t0ZXh0dXJlQ29vcmRJbmRleCsrXSA9IHRleENvb3JkU2NyYXRjaC54OwogICAgICAgIHRleHR1cmVDb29yZGluYXRlc1t0ZXh0dXJlQ29vcmRJbmRleCsrXSA9IHRleENvb3JkU2NyYXRjaC55OwogICAgICB9CiAgICAgIHBvc2l0aW9uID0gZWxsaXBzb2lkLnNjYWxlVG9HZW9kZXRpY1N1cmZhY2UocG9zaXRpb24sIHBvc2l0aW9uKTsKICAgICAgZXh0cnVkZWRQb3NpdGlvbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShwb3NpdGlvbiwgc2NyYXRjaENhcnRlc2lhbjI0KTsKICAgICAgbm9ybWFsMiA9IGVsbGlwc29pZC5nZW9kZXRpY1N1cmZhY2VOb3JtYWwocG9zaXRpb24sIG5vcm1hbDIpOwogICAgICBpZiAoc2hhZG93Vm9sdW1lKSB7CiAgICAgICAgZXh0cnVkZU5vcm1hbHNbaSArIGxlbmd0aF0gPSAtbm9ybWFsMi54OwogICAgICAgIGV4dHJ1ZGVOb3JtYWxzW2kxICsgbGVuZ3RoXSA9IC1ub3JtYWwyLnk7CiAgICAgICAgZXh0cnVkZU5vcm1hbHNbaTIgKyBsZW5ndGhdID0gLW5vcm1hbDIuejsKICAgICAgfQogICAgICBsZXQgc2NhbGVkTm9ybWFsID0gQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIoCiAgICAgICAgbm9ybWFsMiwKICAgICAgICBoZWlnaHQsCiAgICAgICAgc2NyYXRjaENhcnRlc2lhbjQKICAgICAgKTsKICAgICAgcG9zaXRpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKHBvc2l0aW9uLCBzY2FsZWROb3JtYWwsIHBvc2l0aW9uKTsKICAgICAgc2NhbGVkTm9ybWFsID0gQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIoCiAgICAgICAgbm9ybWFsMiwKICAgICAgICBleHRydWRlZEhlaWdodCwKICAgICAgICBzY2FsZWROb3JtYWwKICAgICAgKTsKICAgICAgZXh0cnVkZWRQb3NpdGlvbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoCiAgICAgICAgZXh0cnVkZWRQb3NpdGlvbiwKICAgICAgICBzY2FsZWROb3JtYWwsCiAgICAgICAgZXh0cnVkZWRQb3NpdGlvbgogICAgICApOwogICAgICBpZiAodmVydGV4Rm9ybWF0LnBvc2l0aW9uKSB7CiAgICAgICAgZmluYWxQb3NpdGlvbnNbaSArIGxlbmd0aF0gPSBleHRydWRlZFBvc2l0aW9uLng7CiAgICAgICAgZmluYWxQb3NpdGlvbnNbaTEgKyBsZW5ndGhdID0gZXh0cnVkZWRQb3NpdGlvbi55OwogICAgICAgIGZpbmFsUG9zaXRpb25zW2kyICsgbGVuZ3RoXSA9IGV4dHJ1ZGVkUG9zaXRpb24uejsKICAgICAgICBmaW5hbFBvc2l0aW9uc1tpXSA9IHBvc2l0aW9uLng7CiAgICAgICAgZmluYWxQb3NpdGlvbnNbaTFdID0gcG9zaXRpb24ueTsKICAgICAgICBmaW5hbFBvc2l0aW9uc1tpMl0gPSBwb3NpdGlvbi56OwogICAgICB9CiAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQubm9ybWFsIHx8IHZlcnRleEZvcm1hdC50YW5nZW50IHx8IHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpIHsKICAgICAgICBiaXRhbmdlbnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUobm9ybWFsMiwgYml0YW5nZW50KTsKICAgICAgICBjb25zdCBuZXh0ID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheSgKICAgICAgICAgIHBvc2l0aW9ucywKICAgICAgICAgIChpICsgMykgJSBsZW5ndGgsCiAgICAgICAgICBzY3JhdGNoQ2FydGVzaWFuNAogICAgICAgICk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KG5leHQsIHBvc2l0aW9uLCBuZXh0KTsKICAgICAgICBjb25zdCBib3R0b20gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoCiAgICAgICAgICBleHRydWRlZFBvc2l0aW9uLAogICAgICAgICAgcG9zaXRpb24sCiAgICAgICAgICBzY3JhdGNoQ2FydGVzaWFuMzUKICAgICAgICApOwogICAgICAgIG5vcm1hbDIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKGJvdHRvbSwgbmV4dCwgbm9ybWFsMiksCiAgICAgICAgICBub3JtYWwyCiAgICAgICAgKTsKICAgICAgICBpZiAodmVydGV4Rm9ybWF0Lm5vcm1hbCkgewogICAgICAgICAgbm9ybWFsc1tpXSA9IG5vcm1hbDIueDsKICAgICAgICAgIG5vcm1hbHNbaTFdID0gbm9ybWFsMi55OwogICAgICAgICAgbm9ybWFsc1tpMl0gPSBub3JtYWwyLno7CiAgICAgICAgICBub3JtYWxzW2kgKyBsZW5ndGhdID0gbm9ybWFsMi54OwogICAgICAgICAgbm9ybWFsc1tpMSArIGxlbmd0aF0gPSBub3JtYWwyLnk7CiAgICAgICAgICBub3JtYWxzW2kyICsgbGVuZ3RoXSA9IG5vcm1hbDIuejsKICAgICAgICB9CiAgICAgICAgaWYgKHZlcnRleEZvcm1hdC50YW5nZW50KSB7CiAgICAgICAgICB0YW5nZW50ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSgKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKGJpdGFuZ2VudCwgbm9ybWFsMiwgdGFuZ2VudCksCiAgICAgICAgICAgIHRhbmdlbnQKICAgICAgICAgICk7CiAgICAgICAgICB0YW5nZW50c1tpXSA9IHRhbmdlbnQueDsKICAgICAgICAgIHRhbmdlbnRzW2kxXSA9IHRhbmdlbnQueTsKICAgICAgICAgIHRhbmdlbnRzW2kyXSA9IHRhbmdlbnQuejsKICAgICAgICAgIHRhbmdlbnRzW2kgKyBsZW5ndGhdID0gdGFuZ2VudC54OwogICAgICAgICAgdGFuZ2VudHNbaSArIDEgKyBsZW5ndGhdID0gdGFuZ2VudC55OwogICAgICAgICAgdGFuZ2VudHNbaSArIDIgKyBsZW5ndGhdID0gdGFuZ2VudC56OwogICAgICAgIH0KICAgICAgICBpZiAodmVydGV4Rm9ybWF0LmJpdGFuZ2VudCkgewogICAgICAgICAgYml0YW5nZW50c1tpXSA9IGJpdGFuZ2VudC54OwogICAgICAgICAgYml0YW5nZW50c1tpMV0gPSBiaXRhbmdlbnQueTsKICAgICAgICAgIGJpdGFuZ2VudHNbaTJdID0gYml0YW5nZW50Lno7CiAgICAgICAgICBiaXRhbmdlbnRzW2kgKyBsZW5ndGhdID0gYml0YW5nZW50Lng7CiAgICAgICAgICBiaXRhbmdlbnRzW2kxICsgbGVuZ3RoXSA9IGJpdGFuZ2VudC55OwogICAgICAgICAgYml0YW5nZW50c1tpMiArIGxlbmd0aF0gPSBiaXRhbmdlbnQuejsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIGlmICh2ZXJ0ZXhGb3JtYXQuc3QpIHsKICAgICAgbGVuZ3RoID0gdGV4dHVyZUNvb3JkaW5hdGVzLmxlbmd0aDsKICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBsZW5ndGg7IGsgKz0gMikgewogICAgICAgIHRleHR1cmVDb29yZGluYXRlc1trXSA9ICh0ZXh0dXJlQ29vcmRpbmF0ZXNba10gLSBtaW5UZXhDb29yZC54KSAvIChtYXhUZXhDb29yZC54IC0gbWluVGV4Q29vcmQueCk7CiAgICAgICAgdGV4dHVyZUNvb3JkaW5hdGVzW2sgKyAxXSA9ICh0ZXh0dXJlQ29vcmRpbmF0ZXNbayArIDFdIC0gbWluVGV4Q29vcmQueSkgLyAobWF4VGV4Q29vcmQueSAtIG1pblRleENvb3JkLnkpOwogICAgICB9CiAgICB9CiAgICBjb25zdCBhdHRyaWJ1dGVzID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlc19kZWZhdWx0KCk7CiAgICBpZiAodmVydGV4Rm9ybWF0LnBvc2l0aW9uKSB7CiAgICAgIGF0dHJpYnV0ZXMucG9zaXRpb24gPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRE9VQkxFLAogICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgdmFsdWVzOiBmaW5hbFBvc2l0aW9ucwogICAgICB9KTsKICAgIH0KICAgIGlmICh2ZXJ0ZXhGb3JtYXQuc3QpIHsKICAgICAgYXR0cmlidXRlcy5zdCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAyLAogICAgICAgIHZhbHVlczogdGV4dHVyZUNvb3JkaW5hdGVzCiAgICAgIH0pOwogICAgfQogICAgaWYgKHZlcnRleEZvcm1hdC5ub3JtYWwpIHsKICAgICAgYXR0cmlidXRlcy5ub3JtYWwgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICB2YWx1ZXM6IG5vcm1hbHMKICAgICAgfSk7CiAgICB9CiAgICBpZiAodmVydGV4Rm9ybWF0LnRhbmdlbnQpIHsKICAgICAgYXR0cmlidXRlcy50YW5nZW50ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkZMT0FULAogICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgdmFsdWVzOiB0YW5nZW50cwogICAgICB9KTsKICAgIH0KICAgIGlmICh2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50KSB7CiAgICAgIGF0dHJpYnV0ZXMuYml0YW5nZW50ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkZMT0FULAogICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgdmFsdWVzOiBiaXRhbmdlbnRzCiAgICAgIH0pOwogICAgfQogICAgaWYgKHNoYWRvd1ZvbHVtZSkgewogICAgICBhdHRyaWJ1dGVzLmV4dHJ1ZGVEaXJlY3Rpb24gPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICB2YWx1ZXM6IGV4dHJ1ZGVOb3JtYWxzCiAgICAgIH0pOwogICAgfQogICAgaWYgKGRlZmluZWRfZGVmYXVsdChvcHRpb25zLm9mZnNldEF0dHJpYnV0ZSkpIHsKICAgICAgbGV0IG9mZnNldEF0dHJpYnV0ZSA9IG5ldyBVaW50OEFycmF5KHNpemUpOwogICAgICBpZiAob3B0aW9ucy5vZmZzZXRBdHRyaWJ1dGUgPT09IEdlb21ldHJ5T2Zmc2V0QXR0cmlidXRlX2RlZmF1bHQuVE9QKSB7CiAgICAgICAgb2Zmc2V0QXR0cmlidXRlID0gb2Zmc2V0QXR0cmlidXRlLmZpbGwoMSwgMCwgc2l6ZSAvIDIpOwogICAgICB9IGVsc2UgewogICAgICAgIGNvbnN0IG9mZnNldFZhbHVlID0gb3B0aW9ucy5vZmZzZXRBdHRyaWJ1dGUgPT09IEdlb21ldHJ5T2Zmc2V0QXR0cmlidXRlX2RlZmF1bHQuTk9ORSA/IDAgOiAxOwogICAgICAgIG9mZnNldEF0dHJpYnV0ZSA9IG9mZnNldEF0dHJpYnV0ZS5maWxsKG9mZnNldFZhbHVlKTsKICAgICAgfQogICAgICBhdHRyaWJ1dGVzLmFwcGx5T2Zmc2V0ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LlVOU0lHTkVEX0JZVEUsCiAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMSwKICAgICAgICB2YWx1ZXM6IG9mZnNldEF0dHJpYnV0ZQogICAgICB9KTsKICAgIH0KICAgIHJldHVybiBhdHRyaWJ1dGVzOwogIH0KICBmdW5jdGlvbiBjb21wdXRlV2FsbEluZGljZXMocG9zaXRpb25zKSB7CiAgICBjb25zdCBsZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoIC8gMzsKICAgIGNvbnN0IGluZGljZXMgPSBJbmRleERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheShsZW5ndGgsIGxlbmd0aCAqIDYpOwogICAgbGV0IGluZGV4ID0gMDsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgY29uc3QgVUwgPSBpOwogICAgICBjb25zdCBMTCA9IGkgKyBsZW5ndGg7CiAgICAgIGNvbnN0IFVSID0gKFVMICsgMSkgJSBsZW5ndGg7CiAgICAgIGNvbnN0IExSID0gVVIgKyBsZW5ndGg7CiAgICAgIGluZGljZXNbaW5kZXgrK10gPSBVTDsKICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IExMOwogICAgICBpbmRpY2VzW2luZGV4KytdID0gVVI7CiAgICAgIGluZGljZXNbaW5kZXgrK10gPSBVUjsKICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IExMOwogICAgICBpbmRpY2VzW2luZGV4KytdID0gTFI7CiAgICB9CiAgICByZXR1cm4gaW5kaWNlczsKICB9CiAgZnVuY3Rpb24gY29tcHV0ZUV4dHJ1ZGVkRWxsaXBzZShvcHRpb25zKSB7CiAgICBjb25zdCBjZW50ZXIgPSBvcHRpb25zLmNlbnRlcjsKICAgIGNvbnN0IGVsbGlwc29pZCA9IG9wdGlvbnMuZWxsaXBzb2lkOwogICAgY29uc3Qgc2VtaU1ham9yQXhpcyA9IG9wdGlvbnMuc2VtaU1ham9yQXhpczsKICAgIGxldCBzY2FsZWROb3JtYWwgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcigKICAgICAgZWxsaXBzb2lkLmdlb2RldGljU3VyZmFjZU5vcm1hbChjZW50ZXIsIHNjcmF0Y2hDYXJ0ZXNpYW4xMyksCiAgICAgIG9wdGlvbnMuaGVpZ2h0LAogICAgICBzY3JhdGNoQ2FydGVzaWFuMTMKICAgICk7CiAgICB0b3BCb3VuZGluZ1NwaGVyZS5jZW50ZXIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKAogICAgICBjZW50ZXIsCiAgICAgIHNjYWxlZE5vcm1hbCwKICAgICAgdG9wQm91bmRpbmdTcGhlcmUuY2VudGVyCiAgICApOwogICAgdG9wQm91bmRpbmdTcGhlcmUucmFkaXVzID0gc2VtaU1ham9yQXhpczsKICAgIHNjYWxlZE5vcm1hbCA9IENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKAogICAgICBlbGxpcHNvaWQuZ2VvZGV0aWNTdXJmYWNlTm9ybWFsKGNlbnRlciwgc2NhbGVkTm9ybWFsKSwKICAgICAgb3B0aW9ucy5leHRydWRlZEhlaWdodCwKICAgICAgc2NhbGVkTm9ybWFsCiAgICApOwogICAgYm90dG9tQm91bmRpbmdTcGhlcmUuY2VudGVyID0gQ2FydGVzaWFuM19kZWZhdWx0LmFkZCgKICAgICAgY2VudGVyLAogICAgICBzY2FsZWROb3JtYWwsCiAgICAgIGJvdHRvbUJvdW5kaW5nU3BoZXJlLmNlbnRlcgogICAgKTsKICAgIGJvdHRvbUJvdW5kaW5nU3BoZXJlLnJhZGl1cyA9IHNlbWlNYWpvckF4aXM7CiAgICBjb25zdCBjZXAgPSBFbGxpcHNlR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuY29tcHV0ZUVsbGlwc2VQb3NpdGlvbnMoCiAgICAgIG9wdGlvbnMsCiAgICAgIHRydWUsCiAgICAgIHRydWUKICAgICk7CiAgICBjb25zdCBwb3NpdGlvbnMgPSBjZXAucG9zaXRpb25zOwogICAgY29uc3QgbnVtUHRzID0gY2VwLm51bVB0czsKICAgIGNvbnN0IG91dGVyUG9zaXRpb25zID0gY2VwLm91dGVyUG9zaXRpb25zOwogICAgY29uc3QgYm91bmRpbmdTcGhlcmUgPSBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0LnVuaW9uKAogICAgICB0b3BCb3VuZGluZ1NwaGVyZSwKICAgICAgYm90dG9tQm91bmRpbmdTcGhlcmUKICAgICk7CiAgICBjb25zdCB0b3BCb3R0b21BdHRyaWJ1dGVzID0gY29tcHV0ZVRvcEJvdHRvbUF0dHJpYnV0ZXMoCiAgICAgIHBvc2l0aW9ucywKICAgICAgb3B0aW9ucywKICAgICAgdHJ1ZQogICAgKTsKICAgIGxldCBpbmRpY2VzID0gdG9wSW5kaWNlcyhudW1QdHMpOwogICAgY29uc3QgbGVuZ3RoID0gaW5kaWNlcy5sZW5ndGg7CiAgICBpbmRpY2VzLmxlbmd0aCA9IGxlbmd0aCAqIDI7CiAgICBjb25zdCBwb3NMZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoIC8gMzsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDMpIHsKICAgICAgaW5kaWNlc1tpICsgbGVuZ3RoXSA9IGluZGljZXNbaSArIDJdICsgcG9zTGVuZ3RoOwogICAgICBpbmRpY2VzW2kgKyAxICsgbGVuZ3RoXSA9IGluZGljZXNbaSArIDFdICsgcG9zTGVuZ3RoOwogICAgICBpbmRpY2VzW2kgKyAyICsgbGVuZ3RoXSA9IGluZGljZXNbaV0gKyBwb3NMZW5ndGg7CiAgICB9CiAgICBjb25zdCB0b3BCb3R0b21JbmRpY2VzID0gSW5kZXhEYXRhdHlwZV9kZWZhdWx0LmNyZWF0ZVR5cGVkQXJyYXkoCiAgICAgIHBvc0xlbmd0aCAqIDIgLyAzLAogICAgICBpbmRpY2VzCiAgICApOwogICAgY29uc3QgdG9wQm90dG9tR2VvID0gbmV3IEdlb21ldHJ5X2RlZmF1bHQoewogICAgICBhdHRyaWJ1dGVzOiB0b3BCb3R0b21BdHRyaWJ1dGVzLAogICAgICBpbmRpY2VzOiB0b3BCb3R0b21JbmRpY2VzLAogICAgICBwcmltaXRpdmVUeXBlOiBQcmltaXRpdmVUeXBlX2RlZmF1bHQuVFJJQU5HTEVTCiAgICB9KTsKICAgIGNvbnN0IHdhbGxBdHRyaWJ1dGVzID0gY29tcHV0ZVdhbGxBdHRyaWJ1dGVzKG91dGVyUG9zaXRpb25zLCBvcHRpb25zKTsKICAgIGluZGljZXMgPSBjb21wdXRlV2FsbEluZGljZXMob3V0ZXJQb3NpdGlvbnMpOwogICAgY29uc3Qgd2FsbEluZGljZXMgPSBJbmRleERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheSgKICAgICAgb3V0ZXJQb3NpdGlvbnMubGVuZ3RoICogMiAvIDMsCiAgICAgIGluZGljZXMKICAgICk7CiAgICBjb25zdCB3YWxsR2VvID0gbmV3IEdlb21ldHJ5X2RlZmF1bHQoewogICAgICBhdHRyaWJ1dGVzOiB3YWxsQXR0cmlidXRlcywKICAgICAgaW5kaWNlczogd2FsbEluZGljZXMsCiAgICAgIHByaW1pdGl2ZVR5cGU6IFByaW1pdGl2ZVR5cGVfZGVmYXVsdC5UUklBTkdMRVMKICAgIH0pOwogICAgY29uc3QgZ2VvID0gR2VvbWV0cnlQaXBlbGluZV9kZWZhdWx0LmNvbWJpbmVJbnN0YW5jZXMoWwogICAgICBuZXcgR2VvbWV0cnlJbnN0YW5jZV9kZWZhdWx0KHsKICAgICAgICBnZW9tZXRyeTogdG9wQm90dG9tR2VvCiAgICAgIH0pLAogICAgICBuZXcgR2VvbWV0cnlJbnN0YW5jZV9kZWZhdWx0KHsKICAgICAgICBnZW9tZXRyeTogd2FsbEdlbwogICAgICB9KQogICAgXSk7CiAgICByZXR1cm4gewogICAgICBib3VuZGluZ1NwaGVyZSwKICAgICAgYXR0cmlidXRlczogZ2VvWzBdLmF0dHJpYnV0ZXMsCiAgICAgIGluZGljZXM6IGdlb1swXS5pbmRpY2VzCiAgICB9OwogIH0KICBmdW5jdGlvbiBjb21wdXRlUmVjdGFuZ2xlKGNlbnRlciwgc2VtaU1ham9yQXhpcywgc2VtaU1pbm9yQXhpcywgcm90YXRpb24sIGdyYW51bGFyaXR5LCBlbGxpcHNvaWQsIHJlc3VsdCkgewogICAgY29uc3QgY2VwID0gRWxsaXBzZUdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmNvbXB1dGVFbGxpcHNlUG9zaXRpb25zKAogICAgICB7CiAgICAgICAgY2VudGVyLAogICAgICAgIHNlbWlNYWpvckF4aXMsCiAgICAgICAgc2VtaU1pbm9yQXhpcywKICAgICAgICByb3RhdGlvbiwKICAgICAgICBncmFudWxhcml0eQogICAgICB9LAogICAgICBmYWxzZSwKICAgICAgdHJ1ZQogICAgKTsKICAgIGNvbnN0IHBvc2l0aW9uc0ZsYXQgPSBjZXAub3V0ZXJQb3NpdGlvbnM7CiAgICBjb25zdCBwb3NpdGlvbnNDb3VudCA9IHBvc2l0aW9uc0ZsYXQubGVuZ3RoIC8gMzsKICAgIGNvbnN0IHBvc2l0aW9ucyA9IG5ldyBBcnJheShwb3NpdGlvbnNDb3VudCk7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvc2l0aW9uc0NvdW50OyArK2kpIHsKICAgICAgcG9zaXRpb25zW2ldID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShwb3NpdGlvbnNGbGF0LCBpICogMyk7CiAgICB9CiAgICBjb25zdCByZWN0YW5nbGUgPSBSZWN0YW5nbGVfZGVmYXVsdC5mcm9tQ2FydGVzaWFuQXJyYXkocG9zaXRpb25zLCBlbGxpcHNvaWQsIHJlc3VsdCk7CiAgICBpZiAocmVjdGFuZ2xlLndpZHRoID4gTWF0aF9kZWZhdWx0LlBJKSB7CiAgICAgIHJlY3RhbmdsZS5ub3J0aCA9IHJlY3RhbmdsZS5ub3J0aCA+IDAgPyBNYXRoX2RlZmF1bHQuUElfT1ZFUl9UV08gLSBNYXRoX2RlZmF1bHQuRVBTSUxPTjcgOiByZWN0YW5nbGUubm9ydGg7CiAgICAgIHJlY3RhbmdsZS5zb3V0aCA9IHJlY3RhbmdsZS5zb3V0aCA8IDAgPyBNYXRoX2RlZmF1bHQuRVBTSUxPTjcgLSBNYXRoX2RlZmF1bHQuUElfT1ZFUl9UV08gOiByZWN0YW5nbGUuc291dGg7CiAgICAgIHJlY3RhbmdsZS5lYXN0ID0gTWF0aF9kZWZhdWx0LlBJOwogICAgICByZWN0YW5nbGUud2VzdCA9IC1NYXRoX2RlZmF1bHQuUEk7CiAgICB9CiAgICByZXR1cm4gcmVjdGFuZ2xlOwogIH0KICBmdW5jdGlvbiBFbGxpcHNlR2VvbWV0cnkob3B0aW9ucykgewogICAgb3B0aW9ucyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMsIGRlZmF1bHRWYWx1ZV9kZWZhdWx0LkVNUFRZX09CSkVDVCk7CiAgICBjb25zdCBjZW50ZXIgPSBvcHRpb25zLmNlbnRlcjsKICAgIGNvbnN0IGVsbGlwc29pZCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuZWxsaXBzb2lkLCBFbGxpcHNvaWRfZGVmYXVsdC5kZWZhdWx0KTsKICAgIGNvbnN0IHNlbWlNYWpvckF4aXMgPSBvcHRpb25zLnNlbWlNYWpvckF4aXM7CiAgICBjb25zdCBzZW1pTWlub3JBeGlzID0gb3B0aW9ucy5zZW1pTWlub3JBeGlzOwogICAgY29uc3QgZ3JhbnVsYXJpdHkgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCgKICAgICAgb3B0aW9ucy5ncmFudWxhcml0eSwKICAgICAgTWF0aF9kZWZhdWx0LlJBRElBTlNfUEVSX0RFR1JFRQogICAgKTsKICAgIGNvbnN0IHZlcnRleEZvcm1hdCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMudmVydGV4Rm9ybWF0LCBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5ERUZBVUxUKTsKICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgib3B0aW9ucy5jZW50ZXIiLCBjZW50ZXIpOwogICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJvcHRpb25zLnNlbWlNYWpvckF4aXMiLCBzZW1pTWFqb3JBeGlzKTsKICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigib3B0aW9ucy5zZW1pTWlub3JBeGlzIiwgc2VtaU1pbm9yQXhpcyk7CiAgICBpZiAoc2VtaU1ham9yQXhpcyA8IHNlbWlNaW5vckF4aXMpIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgInNlbWlNYWpvckF4aXMgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gdGhlIHNlbWlNaW5vckF4aXMuIgogICAgICApOwogICAgfQogICAgaWYgKGdyYW51bGFyaXR5IDw9IDApIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImdyYW51bGFyaXR5IG11c3QgYmUgZ3JlYXRlciB0aGFuIHplcm8uIik7CiAgICB9CiAgICBjb25zdCBoZWlnaHQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmhlaWdodCwgMCk7CiAgICBjb25zdCBleHRydWRlZEhlaWdodCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuZXh0cnVkZWRIZWlnaHQsIGhlaWdodCk7CiAgICB0aGlzLl9jZW50ZXIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoY2VudGVyKTsKICAgIHRoaXMuX3NlbWlNYWpvckF4aXMgPSBzZW1pTWFqb3JBeGlzOwogICAgdGhpcy5fc2VtaU1pbm9yQXhpcyA9IHNlbWlNaW5vckF4aXM7CiAgICB0aGlzLl9lbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZShlbGxpcHNvaWQpOwogICAgdGhpcy5fcm90YXRpb24gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLnJvdGF0aW9uLCAwKTsKICAgIHRoaXMuX3N0Um90YXRpb24gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLnN0Um90YXRpb24sIDApOwogICAgdGhpcy5faGVpZ2h0ID0gTWF0aC5tYXgoZXh0cnVkZWRIZWlnaHQsIGhlaWdodCk7CiAgICB0aGlzLl9ncmFudWxhcml0eSA9IGdyYW51bGFyaXR5OwogICAgdGhpcy5fdmVydGV4Rm9ybWF0ID0gVmVydGV4Rm9ybWF0X2RlZmF1bHQuY2xvbmUodmVydGV4Rm9ybWF0KTsKICAgIHRoaXMuX2V4dHJ1ZGVkSGVpZ2h0ID0gTWF0aC5taW4oZXh0cnVkZWRIZWlnaHQsIGhlaWdodCk7CiAgICB0aGlzLl9zaGFkb3dWb2x1bWUgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLnNoYWRvd1ZvbHVtZSwgZmFsc2UpOwogICAgdGhpcy5fd29ya2VyTmFtZSA9ICJjcmVhdGVFbGxpcHNlR2VvbWV0cnkiOwogICAgdGhpcy5fb2Zmc2V0QXR0cmlidXRlID0gb3B0aW9ucy5vZmZzZXRBdHRyaWJ1dGU7CiAgICB0aGlzLl9yZWN0YW5nbGUgPSB2b2lkIDA7CiAgICB0aGlzLl90ZXh0dXJlQ29vcmRpbmF0ZVJvdGF0aW9uUG9pbnRzID0gdm9pZCAwOwogIH0KICBmdW5jdGlvbiB0ZXh0dXJlQ29vcmRpbmF0ZVJvdGF0aW9uUG9pbnRzKGVsbGlwc2VHZW9tZXRyeSkgewogICAgY29uc3Qgc3RSb3RhdGlvbiA9IC1lbGxpcHNlR2VvbWV0cnkuX3N0Um90YXRpb247CiAgICBpZiAoc3RSb3RhdGlvbiA9PT0gMCkgewogICAgICByZXR1cm4gWzAsIDAsIDAsIDEsIDEsIDBdOwogICAgfQogICAgY29uc3QgY2VwID0gRWxsaXBzZUdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmNvbXB1dGVFbGxpcHNlUG9zaXRpb25zKAogICAgICB7CiAgICAgICAgY2VudGVyOiBlbGxpcHNlR2VvbWV0cnkuX2NlbnRlciwKICAgICAgICBzZW1pTWFqb3JBeGlzOiBlbGxpcHNlR2VvbWV0cnkuX3NlbWlNYWpvckF4aXMsCiAgICAgICAgc2VtaU1pbm9yQXhpczogZWxsaXBzZUdlb21ldHJ5Ll9zZW1pTWlub3JBeGlzLAogICAgICAgIHJvdGF0aW9uOiBlbGxpcHNlR2VvbWV0cnkuX3JvdGF0aW9uLAogICAgICAgIGdyYW51bGFyaXR5OiBlbGxpcHNlR2VvbWV0cnkuX2dyYW51bGFyaXR5CiAgICAgIH0sCiAgICAgIGZhbHNlLAogICAgICB0cnVlCiAgICApOwogICAgY29uc3QgcG9zaXRpb25zRmxhdCA9IGNlcC5vdXRlclBvc2l0aW9uczsKICAgIGNvbnN0IHBvc2l0aW9uc0NvdW50ID0gcG9zaXRpb25zRmxhdC5sZW5ndGggLyAzOwogICAgY29uc3QgcG9zaXRpb25zID0gbmV3IEFycmF5KHBvc2l0aW9uc0NvdW50KTsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9zaXRpb25zQ291bnQ7ICsraSkgewogICAgICBwb3NpdGlvbnNbaV0gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KHBvc2l0aW9uc0ZsYXQsIGkgKiAzKTsKICAgIH0KICAgIGNvbnN0IGVsbGlwc29pZCA9IGVsbGlwc2VHZW9tZXRyeS5fZWxsaXBzb2lkOwogICAgY29uc3QgYm91bmRpbmdSZWN0YW5nbGUgPSBlbGxpcHNlR2VvbWV0cnkucmVjdGFuZ2xlOwogICAgcmV0dXJuIEdlb21ldHJ5X2RlZmF1bHQuX3RleHR1cmVDb29yZGluYXRlUm90YXRpb25Qb2ludHMoCiAgICAgIHBvc2l0aW9ucywKICAgICAgc3RSb3RhdGlvbiwKICAgICAgZWxsaXBzb2lkLAogICAgICBib3VuZGluZ1JlY3RhbmdsZQogICAgKTsKICB9CiAgdmFyIHNjcmF0Y2hDYXJ0ZXNpYW4xMywgc2NyYXRjaENhcnRlc2lhbjI0LCBzY3JhdGNoQ2FydGVzaWFuMzUsIHNjcmF0Y2hDYXJ0ZXNpYW40LCB0ZXhDb29yZFNjcmF0Y2gsIHRleHR1cmVNYXRyaXhTY3JhdGNoLCB0YW5nZW50TWF0cml4U2NyYXRjaCwgcXVhdGVybmlvblNjcmF0Y2gsIHNjcmF0Y2hOb3JtYWwzLCBzY3JhdGNoVGFuZ2VudCwgc2NyYXRjaEJpdGFuZ2VudCwgc2NyYXRjaENhcnRvZ3JhcGhpYzIsIHByb2plY3RlZENlbnRlclNjcmF0Y2gsIHNjcmF0Y2hNaW5UZXhDb29yZCwgc2NyYXRjaE1heFRleENvb3JkLCBib3VuZGluZ1NwaGVyZUNlbnRlciwgdG9wQm91bmRpbmdTcGhlcmUsIGJvdHRvbUJvdW5kaW5nU3BoZXJlLCBzY3JhdGNoQ2VudGVyMiwgc2NyYXRjaEVsbGlwc29pZCwgc2NyYXRjaFZlcnRleEZvcm1hdDIsIHNjcmF0Y2hPcHRpb25zMywgRWxsaXBzZUdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfRWxsaXBzZUdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9FbGxpcHNlR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X0JvdW5kaW5nU3BoZXJlKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMigpOwogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DYXJ0b2dyYXBoaWMoKTsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X0NvbXBvbmVudERhdGF0eXBlKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfRWxsaXBzZUdlb21ldHJ5TGlicmFyeSgpOwogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBpbml0X0dlb2dyYXBoaWNQcm9qZWN0aW9uKCk7CiAgICAgIGluaXRfR2VvbWV0cnkoKTsKICAgICAgaW5pdF9HZW9tZXRyeUF0dHJpYnV0ZSgpOwogICAgICBpbml0X0dlb21ldHJ5QXR0cmlidXRlcygpOwogICAgICBpbml0X0dlb21ldHJ5SW5zdGFuY2UoKTsKICAgICAgaW5pdF9HZW9tZXRyeU9mZnNldEF0dHJpYnV0ZSgpOwogICAgICBpbml0X0dlb21ldHJ5UGlwZWxpbmUoKTsKICAgICAgaW5pdF9JbmRleERhdGF0eXBlKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X01hdHJpeDMoKTsKICAgICAgaW5pdF9QcmltaXRpdmVUeXBlKCk7CiAgICAgIGluaXRfUXVhdGVybmlvbigpOwogICAgICBpbml0X1JlY3RhbmdsZSgpOwogICAgICBpbml0X1ZlcnRleEZvcm1hdCgpOwogICAgICBzY3JhdGNoQ2FydGVzaWFuMTMgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4yNCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaENhcnRlc2lhbjM1ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQ2FydGVzaWFuNCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgdGV4Q29vcmRTY3JhdGNoID0gbmV3IENhcnRlc2lhbjJfZGVmYXVsdCgpOwogICAgICB0ZXh0dXJlTWF0cml4U2NyYXRjaCA9IG5ldyBNYXRyaXgzX2RlZmF1bHQoKTsKICAgICAgdGFuZ2VudE1hdHJpeFNjcmF0Y2ggPSBuZXcgTWF0cml4M19kZWZhdWx0KCk7CiAgICAgIHF1YXRlcm5pb25TY3JhdGNoID0gbmV3IFF1YXRlcm5pb25fZGVmYXVsdCgpOwogICAgICBzY3JhdGNoTm9ybWFsMyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFRhbmdlbnQgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hCaXRhbmdlbnQgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWMyID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIHByb2plY3RlZENlbnRlclNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hNaW5UZXhDb29yZCA9IG5ldyBDYXJ0ZXNpYW4yX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaE1heFRleENvb3JkID0gbmV3IENhcnRlc2lhbjJfZGVmYXVsdCgpOwogICAgICBib3VuZGluZ1NwaGVyZUNlbnRlciA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgdG9wQm91bmRpbmdTcGhlcmUgPSBuZXcgQm91bmRpbmdTcGhlcmVfZGVmYXVsdCgpOwogICAgICBib3R0b21Cb3VuZGluZ1NwaGVyZSA9IG5ldyBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0KCk7CiAgICAgIEVsbGlwc2VHZW9tZXRyeS5wYWNrZWRMZW5ndGggPSBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoICsgRWxsaXBzb2lkX2RlZmF1bHQucGFja2VkTGVuZ3RoICsgVmVydGV4Rm9ybWF0X2RlZmF1bHQucGFja2VkTGVuZ3RoICsgOTsKICAgICAgRWxsaXBzZUdlb21ldHJ5LnBhY2sgPSBmdW5jdGlvbih2YWx1ZSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoInZhbHVlIiwgdmFsdWUpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKHZhbHVlLl9jZW50ZXIsIGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgRWxsaXBzb2lkX2RlZmF1bHQucGFjayh2YWx1ZS5fZWxsaXBzb2lkLCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgVmVydGV4Rm9ybWF0X2RlZmF1bHQucGFjayh2YWx1ZS5fdmVydGV4Rm9ybWF0LCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9zZW1pTWFqb3JBeGlzOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fc2VtaU1pbm9yQXhpczsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX3JvdGF0aW9uOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fc3RSb3RhdGlvbjsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX2hlaWdodDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX2dyYW51bGFyaXR5OwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fZXh0cnVkZWRIZWlnaHQ7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9zaGFkb3dWb2x1bWUgPyAxIDogMDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4XSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHZhbHVlLl9vZmZzZXRBdHRyaWJ1dGUsIC0xKTsKICAgICAgICByZXR1cm4gYXJyYXk7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hDZW50ZXIyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoRWxsaXBzb2lkID0gbmV3IEVsbGlwc29pZF9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hWZXJ0ZXhGb3JtYXQyID0gbmV3IFZlcnRleEZvcm1hdF9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hPcHRpb25zMyA9IHsKICAgICAgICBjZW50ZXI6IHNjcmF0Y2hDZW50ZXIyLAogICAgICAgIGVsbGlwc29pZDogc2NyYXRjaEVsbGlwc29pZCwKICAgICAgICB2ZXJ0ZXhGb3JtYXQ6IHNjcmF0Y2hWZXJ0ZXhGb3JtYXQyLAogICAgICAgIHNlbWlNYWpvckF4aXM6IHZvaWQgMCwKICAgICAgICBzZW1pTWlub3JBeGlzOiB2b2lkIDAsCiAgICAgICAgcm90YXRpb246IHZvaWQgMCwKICAgICAgICBzdFJvdGF0aW9uOiB2b2lkIDAsCiAgICAgICAgaGVpZ2h0OiB2b2lkIDAsCiAgICAgICAgZ3JhbnVsYXJpdHk6IHZvaWQgMCwKICAgICAgICBleHRydWRlZEhlaWdodDogdm9pZCAwLAogICAgICAgIHNoYWRvd1ZvbHVtZTogdm9pZCAwLAogICAgICAgIG9mZnNldEF0dHJpYnV0ZTogdm9pZCAwCiAgICAgIH07CiAgICAgIEVsbGlwc2VHZW9tZXRyeS51bnBhY2sgPSBmdW5jdGlvbihhcnJheSwgc3RhcnRpbmdJbmRleCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgY29uc3QgY2VudGVyID0gQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjayhhcnJheSwgc3RhcnRpbmdJbmRleCwgc2NyYXRjaENlbnRlcjIpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gQ2FydGVzaWFuM19kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBjb25zdCBlbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC51bnBhY2soYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHNjcmF0Y2hFbGxpcHNvaWQpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gRWxsaXBzb2lkX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIGNvbnN0IHZlcnRleEZvcm1hdCA9IFZlcnRleEZvcm1hdF9kZWZhdWx0LnVucGFjaygKICAgICAgICAgIGFycmF5LAogICAgICAgICAgc3RhcnRpbmdJbmRleCwKICAgICAgICAgIHNjcmF0Y2hWZXJ0ZXhGb3JtYXQyCiAgICAgICAgKTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IFZlcnRleEZvcm1hdF9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBjb25zdCBzZW1pTWFqb3JBeGlzID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBzZW1pTWlub3JBeGlzID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCByb3RhdGlvbiA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3Qgc3RSb3RhdGlvbiA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3QgaGVpZ2h0ID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBncmFudWxhcml0eSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3QgZXh0cnVkZWRIZWlnaHQgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IHNoYWRvd1ZvbHVtZSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPT09IDE7CiAgICAgICAgY29uc3Qgb2Zmc2V0QXR0cmlidXRlID0gYXJyYXlbc3RhcnRpbmdJbmRleF07CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgc2NyYXRjaE9wdGlvbnMzLmhlaWdodCA9IGhlaWdodDsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMy5leHRydWRlZEhlaWdodCA9IGV4dHJ1ZGVkSGVpZ2h0OwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMzLmdyYW51bGFyaXR5ID0gZ3JhbnVsYXJpdHk7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczMuc3RSb3RhdGlvbiA9IHN0Um90YXRpb247CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczMucm90YXRpb24gPSByb3RhdGlvbjsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMy5zZW1pTWFqb3JBeGlzID0gc2VtaU1ham9yQXhpczsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMy5zZW1pTWlub3JBeGlzID0gc2VtaU1pbm9yQXhpczsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMy5zaGFkb3dWb2x1bWUgPSBzaGFkb3dWb2x1bWU7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczMub2Zmc2V0QXR0cmlidXRlID0gb2Zmc2V0QXR0cmlidXRlID09PSAtMSA/IHZvaWQgMCA6IG9mZnNldEF0dHJpYnV0ZTsKICAgICAgICAgIHJldHVybiBuZXcgRWxsaXBzZUdlb21ldHJ5KHNjcmF0Y2hPcHRpb25zMyk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5fY2VudGVyID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGNlbnRlciwgcmVzdWx0Ll9jZW50ZXIpOwogICAgICAgIHJlc3VsdC5fZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUoZWxsaXBzb2lkLCByZXN1bHQuX2VsbGlwc29pZCk7CiAgICAgICAgcmVzdWx0Ll92ZXJ0ZXhGb3JtYXQgPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5jbG9uZSh2ZXJ0ZXhGb3JtYXQsIHJlc3VsdC5fdmVydGV4Rm9ybWF0KTsKICAgICAgICByZXN1bHQuX3NlbWlNYWpvckF4aXMgPSBzZW1pTWFqb3JBeGlzOwogICAgICAgIHJlc3VsdC5fc2VtaU1pbm9yQXhpcyA9IHNlbWlNaW5vckF4aXM7CiAgICAgICAgcmVzdWx0Ll9yb3RhdGlvbiA9IHJvdGF0aW9uOwogICAgICAgIHJlc3VsdC5fc3RSb3RhdGlvbiA9IHN0Um90YXRpb247CiAgICAgICAgcmVzdWx0Ll9oZWlnaHQgPSBoZWlnaHQ7CiAgICAgICAgcmVzdWx0Ll9ncmFudWxhcml0eSA9IGdyYW51bGFyaXR5OwogICAgICAgIHJlc3VsdC5fZXh0cnVkZWRIZWlnaHQgPSBleHRydWRlZEhlaWdodDsKICAgICAgICByZXN1bHQuX3NoYWRvd1ZvbHVtZSA9IHNoYWRvd1ZvbHVtZTsKICAgICAgICByZXN1bHQuX29mZnNldEF0dHJpYnV0ZSA9IG9mZnNldEF0dHJpYnV0ZSA9PT0gLTEgPyB2b2lkIDAgOiBvZmZzZXRBdHRyaWJ1dGU7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgRWxsaXBzZUdlb21ldHJ5LmNvbXB1dGVSZWN0YW5nbGUgPSBmdW5jdGlvbihvcHRpb25zLCByZXN1bHQpIHsKICAgICAgICBvcHRpb25zID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucywgZGVmYXVsdFZhbHVlX2RlZmF1bHQuRU1QVFlfT0JKRUNUKTsKICAgICAgICBjb25zdCBjZW50ZXIgPSBvcHRpb25zLmNlbnRlcjsKICAgICAgICBjb25zdCBlbGxpcHNvaWQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmVsbGlwc29pZCwgRWxsaXBzb2lkX2RlZmF1bHQuZGVmYXVsdCk7CiAgICAgICAgY29uc3Qgc2VtaU1ham9yQXhpcyA9IG9wdGlvbnMuc2VtaU1ham9yQXhpczsKICAgICAgICBjb25zdCBzZW1pTWlub3JBeGlzID0gb3B0aW9ucy5zZW1pTWlub3JBeGlzOwogICAgICAgIGNvbnN0IGdyYW51bGFyaXR5ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoCiAgICAgICAgICBvcHRpb25zLmdyYW51bGFyaXR5LAogICAgICAgICAgTWF0aF9kZWZhdWx0LlJBRElBTlNfUEVSX0RFR1JFRQogICAgICAgICk7CiAgICAgICAgY29uc3Qgcm90YXRpb24gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLnJvdGF0aW9uLCAwKTsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoIm9wdGlvbnMuY2VudGVyIiwgY2VudGVyKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoIm9wdGlvbnMuc2VtaU1ham9yQXhpcyIsIHNlbWlNYWpvckF4aXMpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigib3B0aW9ucy5zZW1pTWlub3JBeGlzIiwgc2VtaU1pbm9yQXhpcyk7CiAgICAgICAgaWYgKHNlbWlNYWpvckF4aXMgPCBzZW1pTWlub3JBeGlzKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgInNlbWlNYWpvckF4aXMgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gdGhlIHNlbWlNaW5vckF4aXMuIgogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgaWYgKGdyYW51bGFyaXR5IDw9IDApIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJncmFudWxhcml0eSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiB6ZXJvLiIpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gY29tcHV0ZVJlY3RhbmdsZSgKICAgICAgICAgIGNlbnRlciwKICAgICAgICAgIHNlbWlNYWpvckF4aXMsCiAgICAgICAgICBzZW1pTWlub3JBeGlzLAogICAgICAgICAgcm90YXRpb24sCiAgICAgICAgICBncmFudWxhcml0eSwKICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgIHJlc3VsdAogICAgICAgICk7CiAgICAgIH07CiAgICAgIEVsbGlwc2VHZW9tZXRyeS5jcmVhdGVHZW9tZXRyeSA9IGZ1bmN0aW9uKGVsbGlwc2VHZW9tZXRyeSkgewogICAgICAgIGlmIChlbGxpcHNlR2VvbWV0cnkuX3NlbWlNYWpvckF4aXMgPD0gMCB8fCBlbGxpcHNlR2VvbWV0cnkuX3NlbWlNaW5vckF4aXMgPD0gMCkgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBjb25zdCBoZWlnaHQgPSBlbGxpcHNlR2VvbWV0cnkuX2hlaWdodDsKICAgICAgICBjb25zdCBleHRydWRlZEhlaWdodCA9IGVsbGlwc2VHZW9tZXRyeS5fZXh0cnVkZWRIZWlnaHQ7CiAgICAgICAgY29uc3QgZXh0cnVkZSA9ICFNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbigKICAgICAgICAgIGhlaWdodCwKICAgICAgICAgIGV4dHJ1ZGVkSGVpZ2h0LAogICAgICAgICAgMCwKICAgICAgICAgIE1hdGhfZGVmYXVsdC5FUFNJTE9OMgogICAgICAgICk7CiAgICAgICAgZWxsaXBzZUdlb21ldHJ5Ll9jZW50ZXIgPSBlbGxpcHNlR2VvbWV0cnkuX2VsbGlwc29pZC5zY2FsZVRvR2VvZGV0aWNTdXJmYWNlKAogICAgICAgICAgZWxsaXBzZUdlb21ldHJ5Ll9jZW50ZXIsCiAgICAgICAgICBlbGxpcHNlR2VvbWV0cnkuX2NlbnRlcgogICAgICAgICk7CiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHsKICAgICAgICAgIGNlbnRlcjogZWxsaXBzZUdlb21ldHJ5Ll9jZW50ZXIsCiAgICAgICAgICBzZW1pTWFqb3JBeGlzOiBlbGxpcHNlR2VvbWV0cnkuX3NlbWlNYWpvckF4aXMsCiAgICAgICAgICBzZW1pTWlub3JBeGlzOiBlbGxpcHNlR2VvbWV0cnkuX3NlbWlNaW5vckF4aXMsCiAgICAgICAgICBlbGxpcHNvaWQ6IGVsbGlwc2VHZW9tZXRyeS5fZWxsaXBzb2lkLAogICAgICAgICAgcm90YXRpb246IGVsbGlwc2VHZW9tZXRyeS5fcm90YXRpb24sCiAgICAgICAgICBoZWlnaHQsCiAgICAgICAgICBncmFudWxhcml0eTogZWxsaXBzZUdlb21ldHJ5Ll9ncmFudWxhcml0eSwKICAgICAgICAgIHZlcnRleEZvcm1hdDogZWxsaXBzZUdlb21ldHJ5Ll92ZXJ0ZXhGb3JtYXQsCiAgICAgICAgICBzdFJvdGF0aW9uOiBlbGxpcHNlR2VvbWV0cnkuX3N0Um90YXRpb24KICAgICAgICB9OwogICAgICAgIGxldCBnZW9tZXRyeTsKICAgICAgICBpZiAoZXh0cnVkZSkgewogICAgICAgICAgb3B0aW9ucy5leHRydWRlZEhlaWdodCA9IGV4dHJ1ZGVkSGVpZ2h0OwogICAgICAgICAgb3B0aW9ucy5zaGFkb3dWb2x1bWUgPSBlbGxpcHNlR2VvbWV0cnkuX3NoYWRvd1ZvbHVtZTsKICAgICAgICAgIG9wdGlvbnMub2Zmc2V0QXR0cmlidXRlID0gZWxsaXBzZUdlb21ldHJ5Ll9vZmZzZXRBdHRyaWJ1dGU7CiAgICAgICAgICBnZW9tZXRyeSA9IGNvbXB1dGVFeHRydWRlZEVsbGlwc2Uob3B0aW9ucyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGdlb21ldHJ5ID0gY29tcHV0ZUVsbGlwc2Uob3B0aW9ucyk7CiAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGVsbGlwc2VHZW9tZXRyeS5fb2Zmc2V0QXR0cmlidXRlKSkgewogICAgICAgICAgICBjb25zdCBsZW5ndGggPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcy5sZW5ndGg7CiAgICAgICAgICAgIGNvbnN0IG9mZnNldFZhbHVlID0gZWxsaXBzZUdlb21ldHJ5Ll9vZmZzZXRBdHRyaWJ1dGUgPT09IEdlb21ldHJ5T2Zmc2V0QXR0cmlidXRlX2RlZmF1bHQuTk9ORSA/IDAgOiAxOwogICAgICAgICAgICBjb25zdCBhcHBseU9mZnNldCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCAvIDMpLmZpbGwob2Zmc2V0VmFsdWUpOwogICAgICAgICAgICBnZW9tZXRyeS5hdHRyaWJ1dGVzLmFwcGx5T2Zmc2V0ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LlVOU0lHTkVEX0JZVEUsCiAgICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMSwKICAgICAgICAgICAgICB2YWx1ZXM6IGFwcGx5T2Zmc2V0CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3IEdlb21ldHJ5X2RlZmF1bHQoewogICAgICAgICAgYXR0cmlidXRlczogZ2VvbWV0cnkuYXR0cmlidXRlcywKICAgICAgICAgIGluZGljZXM6IGdlb21ldHJ5LmluZGljZXMsCiAgICAgICAgICBwcmltaXRpdmVUeXBlOiBQcmltaXRpdmVUeXBlX2RlZmF1bHQuVFJJQU5HTEVTLAogICAgICAgICAgYm91bmRpbmdTcGhlcmU6IGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlLAogICAgICAgICAgb2Zmc2V0QXR0cmlidXRlOiBlbGxpcHNlR2VvbWV0cnkuX29mZnNldEF0dHJpYnV0ZQogICAgICAgIH0pOwogICAgICB9OwogICAgICBFbGxpcHNlR2VvbWV0cnkuY3JlYXRlU2hhZG93Vm9sdW1lID0gZnVuY3Rpb24oZWxsaXBzZUdlb21ldHJ5LCBtaW5IZWlnaHRGdW5jLCBtYXhIZWlnaHRGdW5jKSB7CiAgICAgICAgY29uc3QgZ3JhbnVsYXJpdHkgPSBlbGxpcHNlR2VvbWV0cnkuX2dyYW51bGFyaXR5OwogICAgICAgIGNvbnN0IGVsbGlwc29pZCA9IGVsbGlwc2VHZW9tZXRyeS5fZWxsaXBzb2lkOwogICAgICAgIGNvbnN0IG1pbkhlaWdodCA9IG1pbkhlaWdodEZ1bmMoZ3JhbnVsYXJpdHksIGVsbGlwc29pZCk7CiAgICAgICAgY29uc3QgbWF4SGVpZ2h0ID0gbWF4SGVpZ2h0RnVuYyhncmFudWxhcml0eSwgZWxsaXBzb2lkKTsKICAgICAgICByZXR1cm4gbmV3IEVsbGlwc2VHZW9tZXRyeSh7CiAgICAgICAgICBjZW50ZXI6IGVsbGlwc2VHZW9tZXRyeS5fY2VudGVyLAogICAgICAgICAgc2VtaU1ham9yQXhpczogZWxsaXBzZUdlb21ldHJ5Ll9zZW1pTWFqb3JBeGlzLAogICAgICAgICAgc2VtaU1pbm9yQXhpczogZWxsaXBzZUdlb21ldHJ5Ll9zZW1pTWlub3JBeGlzLAogICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgcm90YXRpb246IGVsbGlwc2VHZW9tZXRyeS5fcm90YXRpb24sCiAgICAgICAgICBzdFJvdGF0aW9uOiBlbGxpcHNlR2VvbWV0cnkuX3N0Um90YXRpb24sCiAgICAgICAgICBncmFudWxhcml0eSwKICAgICAgICAgIGV4dHJ1ZGVkSGVpZ2h0OiBtaW5IZWlnaHQsCiAgICAgICAgICBoZWlnaHQ6IG1heEhlaWdodCwKICAgICAgICAgIHZlcnRleEZvcm1hdDogVmVydGV4Rm9ybWF0X2RlZmF1bHQuUE9TSVRJT05fT05MWSwKICAgICAgICAgIHNoYWRvd1ZvbHVtZTogdHJ1ZQogICAgICAgIH0pOwogICAgICB9OwogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhFbGxpcHNlR2VvbWV0cnkucHJvdG90eXBlLCB7CiAgICAgICAgLyoqCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKi8KICAgICAgICByZWN0YW5nbGU6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHRoaXMuX3JlY3RhbmdsZSkpIHsKICAgICAgICAgICAgICB0aGlzLl9yZWN0YW5nbGUgPSBjb21wdXRlUmVjdGFuZ2xlKAogICAgICAgICAgICAgICAgdGhpcy5fY2VudGVyLAogICAgICAgICAgICAgICAgdGhpcy5fc2VtaU1ham9yQXhpcywKICAgICAgICAgICAgICAgIHRoaXMuX3NlbWlNaW5vckF4aXMsCiAgICAgICAgICAgICAgICB0aGlzLl9yb3RhdGlvbiwKICAgICAgICAgICAgICAgIHRoaXMuX2dyYW51bGFyaXR5LAogICAgICAgICAgICAgICAgdGhpcy5fZWxsaXBzb2lkCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVjdGFuZ2xlOwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgLyoqCiAgICAgICAgICogRm9yIHJlbWFwcGluZyB0ZXh0dXJlIGNvb3JkaW5hdGVzIHdoZW4gcmVuZGVyaW5nIEVsbGlwc2VHZW9tZXRyaWVzIGFzIEdyb3VuZFByaW1pdGl2ZXMuCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKi8KICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZVJvdGF0aW9uUG9pbnRzOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdCh0aGlzLl90ZXh0dXJlQ29vcmRpbmF0ZVJvdGF0aW9uUG9pbnRzKSkgewogICAgICAgICAgICAgIHRoaXMuX3RleHR1cmVDb29yZGluYXRlUm90YXRpb25Qb2ludHMgPSB0ZXh0dXJlQ29vcmRpbmF0ZVJvdGF0aW9uUG9pbnRzKHRoaXMpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB0aGlzLl90ZXh0dXJlQ29vcmRpbmF0ZVJvdGF0aW9uUG9pbnRzOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICAgIEVsbGlwc2VHZW9tZXRyeV9kZWZhdWx0ID0gRWxsaXBzZUdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvQ2lyY2xlR2VvbWV0cnkuanMKICBmdW5jdGlvbiBDaXJjbGVHZW9tZXRyeShvcHRpb25zKSB7CiAgICBvcHRpb25zID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucywgZGVmYXVsdFZhbHVlX2RlZmF1bHQuRU1QVFlfT0JKRUNUKTsKICAgIGNvbnN0IHJhZGl1cyA9IG9wdGlvbnMucmFkaXVzOwogICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJyYWRpdXMiLCByYWRpdXMpOwogICAgY29uc3QgZWxsaXBzZUdlb21ldHJ5T3B0aW9ucyA9IHsKICAgICAgY2VudGVyOiBvcHRpb25zLmNlbnRlciwKICAgICAgc2VtaU1ham9yQXhpczogcmFkaXVzLAogICAgICBzZW1pTWlub3JBeGlzOiByYWRpdXMsCiAgICAgIGVsbGlwc29pZDogb3B0aW9ucy5lbGxpcHNvaWQsCiAgICAgIGhlaWdodDogb3B0aW9ucy5oZWlnaHQsCiAgICAgIGV4dHJ1ZGVkSGVpZ2h0OiBvcHRpb25zLmV4dHJ1ZGVkSGVpZ2h0LAogICAgICBncmFudWxhcml0eTogb3B0aW9ucy5ncmFudWxhcml0eSwKICAgICAgdmVydGV4Rm9ybWF0OiBvcHRpb25zLnZlcnRleEZvcm1hdCwKICAgICAgc3RSb3RhdGlvbjogb3B0aW9ucy5zdFJvdGF0aW9uLAogICAgICBzaGFkb3dWb2x1bWU6IG9wdGlvbnMuc2hhZG93Vm9sdW1lCiAgICB9OwogICAgdGhpcy5fZWxsaXBzZUdlb21ldHJ5ID0gbmV3IEVsbGlwc2VHZW9tZXRyeV9kZWZhdWx0KGVsbGlwc2VHZW9tZXRyeU9wdGlvbnMpOwogICAgdGhpcy5fd29ya2VyTmFtZSA9ICJjcmVhdGVDaXJjbGVHZW9tZXRyeSI7CiAgfQogIHZhciBzY3JhdGNoRWxsaXBzZUdlb21ldHJ5LCBzY3JhdGNoT3B0aW9uczQsIENpcmNsZUdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfQ2lyY2xlR2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0NpcmNsZUdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRWxsaXBzZUdlb21ldHJ5KCk7CiAgICAgIGluaXRfRWxsaXBzb2lkKCk7CiAgICAgIGluaXRfVmVydGV4Rm9ybWF0KCk7CiAgICAgIENpcmNsZUdlb21ldHJ5LnBhY2tlZExlbmd0aCA9IEVsbGlwc2VHZW9tZXRyeV9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgQ2lyY2xlR2VvbWV0cnkucGFjayA9IGZ1bmN0aW9uKHZhbHVlLCBhcnJheSwgc3RhcnRpbmdJbmRleCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidmFsdWUiLCB2YWx1ZSk7CiAgICAgICAgcmV0dXJuIEVsbGlwc2VHZW9tZXRyeV9kZWZhdWx0LnBhY2sodmFsdWUuX2VsbGlwc2VHZW9tZXRyeSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICB9OwogICAgICBzY3JhdGNoRWxsaXBzZUdlb21ldHJ5ID0gbmV3IEVsbGlwc2VHZW9tZXRyeV9kZWZhdWx0KHsKICAgICAgICBjZW50ZXI6IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKSwKICAgICAgICBzZW1pTWFqb3JBeGlzOiAxLAogICAgICAgIHNlbWlNaW5vckF4aXM6IDEKICAgICAgfSk7CiAgICAgIHNjcmF0Y2hPcHRpb25zNCA9IHsKICAgICAgICBjZW50ZXI6IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKSwKICAgICAgICByYWRpdXM6IHZvaWQgMCwKICAgICAgICBlbGxpcHNvaWQ6IEVsbGlwc29pZF9kZWZhdWx0LmNsb25lKEVsbGlwc29pZF9kZWZhdWx0LmRlZmF1bHQpLAogICAgICAgIGhlaWdodDogdm9pZCAwLAogICAgICAgIGV4dHJ1ZGVkSGVpZ2h0OiB2b2lkIDAsCiAgICAgICAgZ3JhbnVsYXJpdHk6IHZvaWQgMCwKICAgICAgICB2ZXJ0ZXhGb3JtYXQ6IG5ldyBWZXJ0ZXhGb3JtYXRfZGVmYXVsdCgpLAogICAgICAgIHN0Um90YXRpb246IHZvaWQgMCwKICAgICAgICBzZW1pTWFqb3JBeGlzOiB2b2lkIDAsCiAgICAgICAgc2VtaU1pbm9yQXhpczogdm9pZCAwLAogICAgICAgIHNoYWRvd1ZvbHVtZTogdm9pZCAwCiAgICAgIH07CiAgICAgIENpcmNsZUdlb21ldHJ5LnVucGFjayA9IGZ1bmN0aW9uKGFycmF5LCBzdGFydGluZ0luZGV4LCByZXN1bHQpIHsKICAgICAgICBjb25zdCBlbGxpcHNlR2VvbWV0cnkgPSBFbGxpcHNlR2VvbWV0cnlfZGVmYXVsdC51bnBhY2soCiAgICAgICAgICBhcnJheSwKICAgICAgICAgIHN0YXJ0aW5nSW5kZXgsCiAgICAgICAgICBzY3JhdGNoRWxsaXBzZUdlb21ldHJ5CiAgICAgICAgKTsKICAgICAgICBzY3JhdGNoT3B0aW9uczQuY2VudGVyID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKAogICAgICAgICAgZWxsaXBzZUdlb21ldHJ5Ll9jZW50ZXIsCiAgICAgICAgICBzY3JhdGNoT3B0aW9uczQuY2VudGVyCiAgICAgICAgKTsKICAgICAgICBzY3JhdGNoT3B0aW9uczQuZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUoCiAgICAgICAgICBlbGxpcHNlR2VvbWV0cnkuX2VsbGlwc29pZCwKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zNC5lbGxpcHNvaWQKICAgICAgICApOwogICAgICAgIHNjcmF0Y2hPcHRpb25zNC5lbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZSgKICAgICAgICAgIGVsbGlwc2VHZW9tZXRyeS5fZWxsaXBzb2lkLAogICAgICAgICAgc2NyYXRjaEVsbGlwc2VHZW9tZXRyeS5fZWxsaXBzb2lkCiAgICAgICAgKTsKICAgICAgICBzY3JhdGNoT3B0aW9uczQuaGVpZ2h0ID0gZWxsaXBzZUdlb21ldHJ5Ll9oZWlnaHQ7CiAgICAgICAgc2NyYXRjaE9wdGlvbnM0LmV4dHJ1ZGVkSGVpZ2h0ID0gZWxsaXBzZUdlb21ldHJ5Ll9leHRydWRlZEhlaWdodDsKICAgICAgICBzY3JhdGNoT3B0aW9uczQuZ3JhbnVsYXJpdHkgPSBlbGxpcHNlR2VvbWV0cnkuX2dyYW51bGFyaXR5OwogICAgICAgIHNjcmF0Y2hPcHRpb25zNC52ZXJ0ZXhGb3JtYXQgPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5jbG9uZSgKICAgICAgICAgIGVsbGlwc2VHZW9tZXRyeS5fdmVydGV4Rm9ybWF0LAogICAgICAgICAgc2NyYXRjaE9wdGlvbnM0LnZlcnRleEZvcm1hdAogICAgICAgICk7CiAgICAgICAgc2NyYXRjaE9wdGlvbnM0LnN0Um90YXRpb24gPSBlbGxpcHNlR2VvbWV0cnkuX3N0Um90YXRpb247CiAgICAgICAgc2NyYXRjaE9wdGlvbnM0LnNoYWRvd1ZvbHVtZSA9IGVsbGlwc2VHZW9tZXRyeS5fc2hhZG93Vm9sdW1lOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zNC5yYWRpdXMgPSBlbGxpcHNlR2VvbWV0cnkuX3NlbWlNYWpvckF4aXM7CiAgICAgICAgICByZXR1cm4gbmV3IENpcmNsZUdlb21ldHJ5KHNjcmF0Y2hPcHRpb25zNCk7CiAgICAgICAgfQogICAgICAgIHNjcmF0Y2hPcHRpb25zNC5zZW1pTWFqb3JBeGlzID0gZWxsaXBzZUdlb21ldHJ5Ll9zZW1pTWFqb3JBeGlzOwogICAgICAgIHNjcmF0Y2hPcHRpb25zNC5zZW1pTWlub3JBeGlzID0gZWxsaXBzZUdlb21ldHJ5Ll9zZW1pTWlub3JBeGlzOwogICAgICAgIHJlc3VsdC5fZWxsaXBzZUdlb21ldHJ5ID0gbmV3IEVsbGlwc2VHZW9tZXRyeV9kZWZhdWx0KHNjcmF0Y2hPcHRpb25zNCk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ2lyY2xlR2VvbWV0cnkuY3JlYXRlR2VvbWV0cnkgPSBmdW5jdGlvbihjaXJjbGVHZW9tZXRyeSkgewogICAgICAgIHJldHVybiBFbGxpcHNlR2VvbWV0cnlfZGVmYXVsdC5jcmVhdGVHZW9tZXRyeShjaXJjbGVHZW9tZXRyeS5fZWxsaXBzZUdlb21ldHJ5KTsKICAgICAgfTsKICAgICAgQ2lyY2xlR2VvbWV0cnkuY3JlYXRlU2hhZG93Vm9sdW1lID0gZnVuY3Rpb24oY2lyY2xlR2VvbWV0cnksIG1pbkhlaWdodEZ1bmMsIG1heEhlaWdodEZ1bmMpIHsKICAgICAgICBjb25zdCBncmFudWxhcml0eSA9IGNpcmNsZUdlb21ldHJ5Ll9lbGxpcHNlR2VvbWV0cnkuX2dyYW51bGFyaXR5OwogICAgICAgIGNvbnN0IGVsbGlwc29pZCA9IGNpcmNsZUdlb21ldHJ5Ll9lbGxpcHNlR2VvbWV0cnkuX2VsbGlwc29pZDsKICAgICAgICBjb25zdCBtaW5IZWlnaHQgPSBtaW5IZWlnaHRGdW5jKGdyYW51bGFyaXR5LCBlbGxpcHNvaWQpOwogICAgICAgIGNvbnN0IG1heEhlaWdodCA9IG1heEhlaWdodEZ1bmMoZ3JhbnVsYXJpdHksIGVsbGlwc29pZCk7CiAgICAgICAgcmV0dXJuIG5ldyBDaXJjbGVHZW9tZXRyeSh7CiAgICAgICAgICBjZW50ZXI6IGNpcmNsZUdlb21ldHJ5Ll9lbGxpcHNlR2VvbWV0cnkuX2NlbnRlciwKICAgICAgICAgIHJhZGl1czogY2lyY2xlR2VvbWV0cnkuX2VsbGlwc2VHZW9tZXRyeS5fc2VtaU1ham9yQXhpcywKICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgIHN0Um90YXRpb246IGNpcmNsZUdlb21ldHJ5Ll9lbGxpcHNlR2VvbWV0cnkuX3N0Um90YXRpb24sCiAgICAgICAgICBncmFudWxhcml0eSwKICAgICAgICAgIGV4dHJ1ZGVkSGVpZ2h0OiBtaW5IZWlnaHQsCiAgICAgICAgICBoZWlnaHQ6IG1heEhlaWdodCwKICAgICAgICAgIHZlcnRleEZvcm1hdDogVmVydGV4Rm9ybWF0X2RlZmF1bHQuUE9TSVRJT05fT05MWSwKICAgICAgICAgIHNoYWRvd1ZvbHVtZTogdHJ1ZQogICAgICAgIH0pOwogICAgICB9OwogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhDaXJjbGVHZW9tZXRyeS5wcm90b3R5cGUsIHsKICAgICAgICAvKioKICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAqLwogICAgICAgIHJlY3RhbmdsZTogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VsbGlwc2VHZW9tZXRyeS5yZWN0YW5nbGU7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBGb3IgcmVtYXBwaW5nIHRleHR1cmUgY29vcmRpbmF0ZXMgd2hlbiByZW5kZXJpbmcgQ2lyY2xlR2VvbWV0cmllcyBhcyBHcm91bmRQcmltaXRpdmVzLgogICAgICAgICAqIEBwcml2YXRlCiAgICAgICAgICovCiAgICAgICAgdGV4dHVyZUNvb3JkaW5hdGVSb3RhdGlvblBvaW50czogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VsbGlwc2VHZW9tZXRyeS50ZXh0dXJlQ29vcmRpbmF0ZVJvdGF0aW9uUG9pbnRzOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICAgIENpcmNsZUdlb21ldHJ5X2RlZmF1bHQgPSBDaXJjbGVHZW9tZXRyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZUNpcmNsZUdlb21ldHJ5LmpzCiAgdmFyIGNyZWF0ZUNpcmNsZUdlb21ldHJ5X2V4cG9ydHMgPSB7fTsKICBfX2V4cG9ydChjcmVhdGVDaXJjbGVHZW9tZXRyeV9leHBvcnRzLCB7CiAgICBkZWZhdWx0OiAoKSA9PiBjcmVhdGVDaXJjbGVHZW9tZXRyeV9kZWZhdWx0CiAgfSk7CiAgZnVuY3Rpb24gY3JlYXRlQ2lyY2xlR2VvbWV0cnkoY2lyY2xlR2VvbWV0cnksIG9mZnNldCkgewogICAgaWYgKGRlZmluZWRfZGVmYXVsdChvZmZzZXQpKSB7CiAgICAgIGNpcmNsZUdlb21ldHJ5ID0gQ2lyY2xlR2VvbWV0cnlfZGVmYXVsdC51bnBhY2soY2lyY2xlR2VvbWV0cnksIG9mZnNldCk7CiAgICB9CiAgICBjaXJjbGVHZW9tZXRyeS5fZWxsaXBzZUdlb21ldHJ5Ll9jZW50ZXIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoCiAgICAgIGNpcmNsZUdlb21ldHJ5Ll9lbGxpcHNlR2VvbWV0cnkuX2NlbnRlcgogICAgKTsKICAgIGNpcmNsZUdlb21ldHJ5Ll9lbGxpcHNlR2VvbWV0cnkuX2VsbGlwc29pZCA9IEVsbGlwc29pZF9kZWZhdWx0LmNsb25lKAogICAgICBjaXJjbGVHZW9tZXRyeS5fZWxsaXBzZUdlb21ldHJ5Ll9lbGxpcHNvaWQKICAgICk7CiAgICByZXR1cm4gQ2lyY2xlR2VvbWV0cnlfZGVmYXVsdC5jcmVhdGVHZW9tZXRyeShjaXJjbGVHZW9tZXRyeSk7CiAgfQogIHZhciBjcmVhdGVDaXJjbGVHZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X2NyZWF0ZUNpcmNsZUdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVDaXJjbGVHZW9tZXRyeS5qcyIoKSB7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NpcmNsZUdlb21ldHJ5KCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBjcmVhdGVDaXJjbGVHZW9tZXRyeV9kZWZhdWx0ID0gY3JlYXRlQ2lyY2xlR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9FbGxpcHNlT3V0bGluZUdlb21ldHJ5LmpzCiAgZnVuY3Rpb24gY29tcHV0ZUVsbGlwc2UyKG9wdGlvbnMpIHsKICAgIGNvbnN0IGNlbnRlciA9IG9wdGlvbnMuY2VudGVyOwogICAgYm91bmRpbmdTcGhlcmVDZW50ZXIyID0gQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIoCiAgICAgIG9wdGlvbnMuZWxsaXBzb2lkLmdlb2RldGljU3VyZmFjZU5vcm1hbChjZW50ZXIsIGJvdW5kaW5nU3BoZXJlQ2VudGVyMiksCiAgICAgIG9wdGlvbnMuaGVpZ2h0LAogICAgICBib3VuZGluZ1NwaGVyZUNlbnRlcjIKICAgICk7CiAgICBib3VuZGluZ1NwaGVyZUNlbnRlcjIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKAogICAgICBjZW50ZXIsCiAgICAgIGJvdW5kaW5nU3BoZXJlQ2VudGVyMiwKICAgICAgYm91bmRpbmdTcGhlcmVDZW50ZXIyCiAgICApOwogICAgY29uc3QgYm91bmRpbmdTcGhlcmUgPSBuZXcgQm91bmRpbmdTcGhlcmVfZGVmYXVsdCgKICAgICAgYm91bmRpbmdTcGhlcmVDZW50ZXIyLAogICAgICBvcHRpb25zLnNlbWlNYWpvckF4aXMKICAgICk7CiAgICBjb25zdCBwb3NpdGlvbnMgPSBFbGxpcHNlR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuY29tcHV0ZUVsbGlwc2VQb3NpdGlvbnMoCiAgICAgIG9wdGlvbnMsCiAgICAgIGZhbHNlLAogICAgICB0cnVlCiAgICApLm91dGVyUG9zaXRpb25zOwogICAgY29uc3QgYXR0cmlidXRlcyA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZXNfZGVmYXVsdCh7CiAgICAgIHBvc2l0aW9uOiBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRE9VQkxFLAogICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgdmFsdWVzOiBFbGxpcHNlR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQucmFpc2VQb3NpdGlvbnNUb0hlaWdodCgKICAgICAgICAgIHBvc2l0aW9ucywKICAgICAgICAgIG9wdGlvbnMsCiAgICAgICAgICBmYWxzZQogICAgICAgICkKICAgICAgfSkKICAgIH0pOwogICAgY29uc3QgbGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aCAvIDM7CiAgICBjb25zdCBpbmRpY2VzID0gSW5kZXhEYXRhdHlwZV9kZWZhdWx0LmNyZWF0ZVR5cGVkQXJyYXkobGVuZ3RoLCBsZW5ndGggKiAyKTsKICAgIGxldCBpbmRleCA9IDA7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgIGluZGljZXNbaW5kZXgrK10gPSBpOwogICAgICBpbmRpY2VzW2luZGV4KytdID0gKGkgKyAxKSAlIGxlbmd0aDsKICAgIH0KICAgIHJldHVybiB7CiAgICAgIGJvdW5kaW5nU3BoZXJlLAogICAgICBhdHRyaWJ1dGVzLAogICAgICBpbmRpY2VzCiAgICB9OwogIH0KICBmdW5jdGlvbiBjb21wdXRlRXh0cnVkZWRFbGxpcHNlMihvcHRpb25zKSB7CiAgICBjb25zdCBjZW50ZXIgPSBvcHRpb25zLmNlbnRlcjsKICAgIGNvbnN0IGVsbGlwc29pZCA9IG9wdGlvbnMuZWxsaXBzb2lkOwogICAgY29uc3Qgc2VtaU1ham9yQXhpcyA9IG9wdGlvbnMuc2VtaU1ham9yQXhpczsKICAgIGxldCBzY2FsZWROb3JtYWwgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcigKICAgICAgZWxsaXBzb2lkLmdlb2RldGljU3VyZmFjZU5vcm1hbChjZW50ZXIsIHNjcmF0Y2hDYXJ0ZXNpYW4xNCksCiAgICAgIG9wdGlvbnMuaGVpZ2h0LAogICAgICBzY3JhdGNoQ2FydGVzaWFuMTQKICAgICk7CiAgICB0b3BCb3VuZGluZ1NwaGVyZTIuY2VudGVyID0gQ2FydGVzaWFuM19kZWZhdWx0LmFkZCgKICAgICAgY2VudGVyLAogICAgICBzY2FsZWROb3JtYWwsCiAgICAgIHRvcEJvdW5kaW5nU3BoZXJlMi5jZW50ZXIKICAgICk7CiAgICB0b3BCb3VuZGluZ1NwaGVyZTIucmFkaXVzID0gc2VtaU1ham9yQXhpczsKICAgIHNjYWxlZE5vcm1hbCA9IENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKAogICAgICBlbGxpcHNvaWQuZ2VvZGV0aWNTdXJmYWNlTm9ybWFsKGNlbnRlciwgc2NhbGVkTm9ybWFsKSwKICAgICAgb3B0aW9ucy5leHRydWRlZEhlaWdodCwKICAgICAgc2NhbGVkTm9ybWFsCiAgICApOwogICAgYm90dG9tQm91bmRpbmdTcGhlcmUyLmNlbnRlciA9IENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoCiAgICAgIGNlbnRlciwKICAgICAgc2NhbGVkTm9ybWFsLAogICAgICBib3R0b21Cb3VuZGluZ1NwaGVyZTIuY2VudGVyCiAgICApOwogICAgYm90dG9tQm91bmRpbmdTcGhlcmUyLnJhZGl1cyA9IHNlbWlNYWpvckF4aXM7CiAgICBsZXQgcG9zaXRpb25zID0gRWxsaXBzZUdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmNvbXB1dGVFbGxpcHNlUG9zaXRpb25zKAogICAgICBvcHRpb25zLAogICAgICBmYWxzZSwKICAgICAgdHJ1ZQogICAgKS5vdXRlclBvc2l0aW9uczsKICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVzX2RlZmF1bHQoewogICAgICBwb3NpdGlvbjogbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkRPVUJMRSwKICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgIHZhbHVlczogRWxsaXBzZUdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LnJhaXNlUG9zaXRpb25zVG9IZWlnaHQoCiAgICAgICAgICBwb3NpdGlvbnMsCiAgICAgICAgICBvcHRpb25zLAogICAgICAgICAgdHJ1ZQogICAgICAgICkKICAgICAgfSkKICAgIH0pOwogICAgcG9zaXRpb25zID0gYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXM7CiAgICBjb25zdCBib3VuZGluZ1NwaGVyZSA9IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQudW5pb24oCiAgICAgIHRvcEJvdW5kaW5nU3BoZXJlMiwKICAgICAgYm90dG9tQm91bmRpbmdTcGhlcmUyCiAgICApOwogICAgbGV0IGxlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGggLyAzOwogICAgaWYgKGRlZmluZWRfZGVmYXVsdChvcHRpb25zLm9mZnNldEF0dHJpYnV0ZSkpIHsKICAgICAgbGV0IGFwcGx5T2Zmc2V0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTsKICAgICAgaWYgKG9wdGlvbnMub2Zmc2V0QXR0cmlidXRlID09PSBHZW9tZXRyeU9mZnNldEF0dHJpYnV0ZV9kZWZhdWx0LlRPUCkgewogICAgICAgIGFwcGx5T2Zmc2V0ID0gYXBwbHlPZmZzZXQuZmlsbCgxLCAwLCBsZW5ndGggLyAyKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBjb25zdCBvZmZzZXRWYWx1ZSA9IG9wdGlvbnMub2Zmc2V0QXR0cmlidXRlID09PSBHZW9tZXRyeU9mZnNldEF0dHJpYnV0ZV9kZWZhdWx0Lk5PTkUgPyAwIDogMTsKICAgICAgICBhcHBseU9mZnNldCA9IGFwcGx5T2Zmc2V0LmZpbGwob2Zmc2V0VmFsdWUpOwogICAgICB9CiAgICAgIGF0dHJpYnV0ZXMuYXBwbHlPZmZzZXQgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuVU5TSUdORURfQllURSwKICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAxLAogICAgICAgIHZhbHVlczogYXBwbHlPZmZzZXQKICAgICAgfSk7CiAgICB9CiAgICBsZXQgbnVtYmVyT2ZWZXJ0aWNhbExpbmVzID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5udW1iZXJPZlZlcnRpY2FsTGluZXMsIDE2KTsKICAgIG51bWJlck9mVmVydGljYWxMaW5lcyA9IE1hdGhfZGVmYXVsdC5jbGFtcCgKICAgICAgbnVtYmVyT2ZWZXJ0aWNhbExpbmVzLAogICAgICAwLAogICAgICBsZW5ndGggLyAyCiAgICApOwogICAgY29uc3QgaW5kaWNlcyA9IEluZGV4RGF0YXR5cGVfZGVmYXVsdC5jcmVhdGVUeXBlZEFycmF5KAogICAgICBsZW5ndGgsCiAgICAgIGxlbmd0aCAqIDIgKyBudW1iZXJPZlZlcnRpY2FsTGluZXMgKiAyCiAgICApOwogICAgbGVuZ3RoIC89IDI7CiAgICBsZXQgaW5kZXggPSAwOwogICAgbGV0IGk7CiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGk7CiAgICAgIGluZGljZXNbaW5kZXgrK10gPSAoaSArIDEpICUgbGVuZ3RoOwogICAgICBpbmRpY2VzW2luZGV4KytdID0gaSArIGxlbmd0aDsKICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IChpICsgMSkgJSBsZW5ndGggKyBsZW5ndGg7CiAgICB9CiAgICBsZXQgbnVtU2lkZTsKICAgIGlmIChudW1iZXJPZlZlcnRpY2FsTGluZXMgPiAwKSB7CiAgICAgIGNvbnN0IG51bVNpZGVMaW5lcyA9IE1hdGgubWluKG51bWJlck9mVmVydGljYWxMaW5lcywgbGVuZ3RoKTsKICAgICAgbnVtU2lkZSA9IE1hdGgucm91bmQobGVuZ3RoIC8gbnVtU2lkZUxpbmVzKTsKICAgICAgY29uc3QgbWF4SSA9IE1hdGgubWluKG51bVNpZGUgKiBudW1iZXJPZlZlcnRpY2FsTGluZXMsIGxlbmd0aCk7CiAgICAgIGZvciAoaSA9IDA7IGkgPCBtYXhJOyBpICs9IG51bVNpZGUpIHsKICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gaTsKICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gaSArIGxlbmd0aDsKICAgICAgfQogICAgfQogICAgcmV0dXJuIHsKICAgICAgYm91bmRpbmdTcGhlcmUsCiAgICAgIGF0dHJpYnV0ZXMsCiAgICAgIGluZGljZXMKICAgIH07CiAgfQogIGZ1bmN0aW9uIEVsbGlwc2VPdXRsaW5lR2VvbWV0cnkob3B0aW9ucykgewogICAgb3B0aW9ucyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMsIGRlZmF1bHRWYWx1ZV9kZWZhdWx0LkVNUFRZX09CSkVDVCk7CiAgICBjb25zdCBjZW50ZXIgPSBvcHRpb25zLmNlbnRlcjsKICAgIGNvbnN0IGVsbGlwc29pZCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuZWxsaXBzb2lkLCBFbGxpcHNvaWRfZGVmYXVsdC5kZWZhdWx0KTsKICAgIGNvbnN0IHNlbWlNYWpvckF4aXMgPSBvcHRpb25zLnNlbWlNYWpvckF4aXM7CiAgICBjb25zdCBzZW1pTWlub3JBeGlzID0gb3B0aW9ucy5zZW1pTWlub3JBeGlzOwogICAgY29uc3QgZ3JhbnVsYXJpdHkgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCgKICAgICAgb3B0aW9ucy5ncmFudWxhcml0eSwKICAgICAgTWF0aF9kZWZhdWx0LlJBRElBTlNfUEVSX0RFR1JFRQogICAgKTsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGNlbnRlcikpIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImNlbnRlciBpcyByZXF1aXJlZC4iKTsKICAgIH0KICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHNlbWlNYWpvckF4aXMpKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJzZW1pTWFqb3JBeGlzIGlzIHJlcXVpcmVkLiIpOwogICAgfQogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoc2VtaU1pbm9yQXhpcykpIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInNlbWlNaW5vckF4aXMgaXMgcmVxdWlyZWQuIik7CiAgICB9CiAgICBpZiAoc2VtaU1ham9yQXhpcyA8IHNlbWlNaW5vckF4aXMpIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgInNlbWlNYWpvckF4aXMgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gdGhlIHNlbWlNaW5vckF4aXMuIgogICAgICApOwogICAgfQogICAgaWYgKGdyYW51bGFyaXR5IDw9IDApIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImdyYW51bGFyaXR5IG11c3QgYmUgZ3JlYXRlciB0aGFuIHplcm8uIik7CiAgICB9CiAgICBjb25zdCBoZWlnaHQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmhlaWdodCwgMCk7CiAgICBjb25zdCBleHRydWRlZEhlaWdodCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuZXh0cnVkZWRIZWlnaHQsIGhlaWdodCk7CiAgICB0aGlzLl9jZW50ZXIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoY2VudGVyKTsKICAgIHRoaXMuX3NlbWlNYWpvckF4aXMgPSBzZW1pTWFqb3JBeGlzOwogICAgdGhpcy5fc2VtaU1pbm9yQXhpcyA9IHNlbWlNaW5vckF4aXM7CiAgICB0aGlzLl9lbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZShlbGxpcHNvaWQpOwogICAgdGhpcy5fcm90YXRpb24gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLnJvdGF0aW9uLCAwKTsKICAgIHRoaXMuX2hlaWdodCA9IE1hdGgubWF4KGV4dHJ1ZGVkSGVpZ2h0LCBoZWlnaHQpOwogICAgdGhpcy5fZ3JhbnVsYXJpdHkgPSBncmFudWxhcml0eTsKICAgIHRoaXMuX2V4dHJ1ZGVkSGVpZ2h0ID0gTWF0aC5taW4oZXh0cnVkZWRIZWlnaHQsIGhlaWdodCk7CiAgICB0aGlzLl9udW1iZXJPZlZlcnRpY2FsTGluZXMgPSBNYXRoLm1heCgKICAgICAgZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5udW1iZXJPZlZlcnRpY2FsTGluZXMsIDE2KSwKICAgICAgMAogICAgKTsKICAgIHRoaXMuX29mZnNldEF0dHJpYnV0ZSA9IG9wdGlvbnMub2Zmc2V0QXR0cmlidXRlOwogICAgdGhpcy5fd29ya2VyTmFtZSA9ICJjcmVhdGVFbGxpcHNlT3V0bGluZUdlb21ldHJ5IjsKICB9CiAgdmFyIHNjcmF0Y2hDYXJ0ZXNpYW4xNCwgYm91bmRpbmdTcGhlcmVDZW50ZXIyLCB0b3BCb3VuZGluZ1NwaGVyZTIsIGJvdHRvbUJvdW5kaW5nU3BoZXJlMiwgc2NyYXRjaENlbnRlcjMsIHNjcmF0Y2hFbGxpcHNvaWQyLCBzY3JhdGNoT3B0aW9uczUsIEVsbGlwc2VPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdDsKICB2YXIgaW5pdF9FbGxpcHNlT3V0bGluZUdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9FbGxpcHNlT3V0bGluZUdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9Cb3VuZGluZ1NwaGVyZSgpOwogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9Db21wb25lbnREYXRhdHlwZSgpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X0VsbGlwc2VHZW9tZXRyeUxpYnJhcnkoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9HZW9tZXRyeSgpOwogICAgICBpbml0X0dlb21ldHJ5QXR0cmlidXRlKCk7CiAgICAgIGluaXRfR2VvbWV0cnlBdHRyaWJ1dGVzKCk7CiAgICAgIGluaXRfR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGUoKTsKICAgICAgaW5pdF9JbmRleERhdGF0eXBlKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X1ByaW1pdGl2ZVR5cGUoKTsKICAgICAgc2NyYXRjaENhcnRlc2lhbjE0ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBib3VuZGluZ1NwaGVyZUNlbnRlcjIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHRvcEJvdW5kaW5nU3BoZXJlMiA9IG5ldyBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0KCk7CiAgICAgIGJvdHRvbUJvdW5kaW5nU3BoZXJlMiA9IG5ldyBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0KCk7CiAgICAgIEVsbGlwc2VPdXRsaW5lR2VvbWV0cnkucGFja2VkTGVuZ3RoID0gQ2FydGVzaWFuM19kZWZhdWx0LnBhY2tlZExlbmd0aCArIEVsbGlwc29pZF9kZWZhdWx0LnBhY2tlZExlbmd0aCArIDg7CiAgICAgIEVsbGlwc2VPdXRsaW5lR2VvbWV0cnkucGFjayA9IGZ1bmN0aW9uKHZhbHVlLCBhcnJheSwgc3RhcnRpbmdJbmRleCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHZhbHVlKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInZhbHVlIGlzIHJlcXVpcmVkIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGFycmF5KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImFycmF5IGlzIHJlcXVpcmVkIik7CiAgICAgICAgfQogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayh2YWx1ZS5fY2VudGVyLCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIEVsbGlwc29pZF9kZWZhdWx0LnBhY2sodmFsdWUuX2VsbGlwc29pZCwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gRWxsaXBzb2lkX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fc2VtaU1ham9yQXhpczsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX3NlbWlNaW5vckF4aXM7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9yb3RhdGlvbjsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX2hlaWdodDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX2dyYW51bGFyaXR5OwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fZXh0cnVkZWRIZWlnaHQ7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9udW1iZXJPZlZlcnRpY2FsTGluZXM7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleF0gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh2YWx1ZS5fb2Zmc2V0QXR0cmlidXRlLCAtMSk7CiAgICAgICAgcmV0dXJuIGFycmF5OwogICAgICB9OwogICAgICBzY3JhdGNoQ2VudGVyMyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaEVsbGlwc29pZDIgPSBuZXcgRWxsaXBzb2lkX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaE9wdGlvbnM1ID0gewogICAgICAgIGNlbnRlcjogc2NyYXRjaENlbnRlcjMsCiAgICAgICAgZWxsaXBzb2lkOiBzY3JhdGNoRWxsaXBzb2lkMiwKICAgICAgICBzZW1pTWFqb3JBeGlzOiB2b2lkIDAsCiAgICAgICAgc2VtaU1pbm9yQXhpczogdm9pZCAwLAogICAgICAgIHJvdGF0aW9uOiB2b2lkIDAsCiAgICAgICAgaGVpZ2h0OiB2b2lkIDAsCiAgICAgICAgZ3JhbnVsYXJpdHk6IHZvaWQgMCwKICAgICAgICBleHRydWRlZEhlaWdodDogdm9pZCAwLAogICAgICAgIG51bWJlck9mVmVydGljYWxMaW5lczogdm9pZCAwLAogICAgICAgIG9mZnNldEF0dHJpYnV0ZTogdm9pZCAwCiAgICAgIH07CiAgICAgIEVsbGlwc2VPdXRsaW5lR2VvbWV0cnkudW5wYWNrID0gZnVuY3Rpb24oYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGFycmF5KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImFycmF5IGlzIHJlcXVpcmVkIik7CiAgICAgICAgfQogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBjb25zdCBjZW50ZXIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKGFycmF5LCBzdGFydGluZ0luZGV4LCBzY3JhdGNoQ2VudGVyMyk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIGNvbnN0IGVsbGlwc29pZCA9IEVsbGlwc29pZF9kZWZhdWx0LnVucGFjayhhcnJheSwgc3RhcnRpbmdJbmRleCwgc2NyYXRjaEVsbGlwc29pZDIpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gRWxsaXBzb2lkX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIGNvbnN0IHNlbWlNYWpvckF4aXMgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IHNlbWlNaW5vckF4aXMgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IHJvdGF0aW9uID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBoZWlnaHQgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IGdyYW51bGFyaXR5ID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBleHRydWRlZEhlaWdodCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3QgbnVtYmVyT2ZWZXJ0aWNhbExpbmVzID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBvZmZzZXRBdHRyaWJ1dGUgPSBhcnJheVtzdGFydGluZ0luZGV4XTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczUuaGVpZ2h0ID0gaGVpZ2h0OwogICAgICAgICAgc2NyYXRjaE9wdGlvbnM1LmV4dHJ1ZGVkSGVpZ2h0ID0gZXh0cnVkZWRIZWlnaHQ7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczUuZ3JhbnVsYXJpdHkgPSBncmFudWxhcml0eTsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zNS5yb3RhdGlvbiA9IHJvdGF0aW9uOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnM1LnNlbWlNYWpvckF4aXMgPSBzZW1pTWFqb3JBeGlzOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnM1LnNlbWlNaW5vckF4aXMgPSBzZW1pTWlub3JBeGlzOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnM1Lm51bWJlck9mVmVydGljYWxMaW5lcyA9IG51bWJlck9mVmVydGljYWxMaW5lczsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zNS5vZmZzZXRBdHRyaWJ1dGUgPSBvZmZzZXRBdHRyaWJ1dGUgPT09IC0xID8gdm9pZCAwIDogb2Zmc2V0QXR0cmlidXRlOwogICAgICAgICAgcmV0dXJuIG5ldyBFbGxpcHNlT3V0bGluZUdlb21ldHJ5KHNjcmF0Y2hPcHRpb25zNSk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5fY2VudGVyID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGNlbnRlciwgcmVzdWx0Ll9jZW50ZXIpOwogICAgICAgIHJlc3VsdC5fZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUoZWxsaXBzb2lkLCByZXN1bHQuX2VsbGlwc29pZCk7CiAgICAgICAgcmVzdWx0Ll9zZW1pTWFqb3JBeGlzID0gc2VtaU1ham9yQXhpczsKICAgICAgICByZXN1bHQuX3NlbWlNaW5vckF4aXMgPSBzZW1pTWlub3JBeGlzOwogICAgICAgIHJlc3VsdC5fcm90YXRpb24gPSByb3RhdGlvbjsKICAgICAgICByZXN1bHQuX2hlaWdodCA9IGhlaWdodDsKICAgICAgICByZXN1bHQuX2dyYW51bGFyaXR5ID0gZ3JhbnVsYXJpdHk7CiAgICAgICAgcmVzdWx0Ll9leHRydWRlZEhlaWdodCA9IGV4dHJ1ZGVkSGVpZ2h0OwogICAgICAgIHJlc3VsdC5fbnVtYmVyT2ZWZXJ0aWNhbExpbmVzID0gbnVtYmVyT2ZWZXJ0aWNhbExpbmVzOwogICAgICAgIHJlc3VsdC5fb2Zmc2V0QXR0cmlidXRlID0gb2Zmc2V0QXR0cmlidXRlID09PSAtMSA/IHZvaWQgMCA6IG9mZnNldEF0dHJpYnV0ZTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBFbGxpcHNlT3V0bGluZUdlb21ldHJ5LmNyZWF0ZUdlb21ldHJ5ID0gZnVuY3Rpb24oZWxsaXBzZUdlb21ldHJ5KSB7CiAgICAgICAgaWYgKGVsbGlwc2VHZW9tZXRyeS5fc2VtaU1ham9yQXhpcyA8PSAwIHx8IGVsbGlwc2VHZW9tZXRyeS5fc2VtaU1pbm9yQXhpcyA8PSAwKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGNvbnN0IGhlaWdodCA9IGVsbGlwc2VHZW9tZXRyeS5faGVpZ2h0OwogICAgICAgIGNvbnN0IGV4dHJ1ZGVkSGVpZ2h0ID0gZWxsaXBzZUdlb21ldHJ5Ll9leHRydWRlZEhlaWdodDsKICAgICAgICBjb25zdCBleHRydWRlID0gIU1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgaGVpZ2h0LAogICAgICAgICAgZXh0cnVkZWRIZWlnaHQsCiAgICAgICAgICAwLAogICAgICAgICAgTWF0aF9kZWZhdWx0LkVQU0lMT04yCiAgICAgICAgKTsKICAgICAgICBlbGxpcHNlR2VvbWV0cnkuX2NlbnRlciA9IGVsbGlwc2VHZW9tZXRyeS5fZWxsaXBzb2lkLnNjYWxlVG9HZW9kZXRpY1N1cmZhY2UoCiAgICAgICAgICBlbGxpcHNlR2VvbWV0cnkuX2NlbnRlciwKICAgICAgICAgIGVsbGlwc2VHZW9tZXRyeS5fY2VudGVyCiAgICAgICAgKTsKICAgICAgICBjb25zdCBvcHRpb25zID0gewogICAgICAgICAgY2VudGVyOiBlbGxpcHNlR2VvbWV0cnkuX2NlbnRlciwKICAgICAgICAgIHNlbWlNYWpvckF4aXM6IGVsbGlwc2VHZW9tZXRyeS5fc2VtaU1ham9yQXhpcywKICAgICAgICAgIHNlbWlNaW5vckF4aXM6IGVsbGlwc2VHZW9tZXRyeS5fc2VtaU1pbm9yQXhpcywKICAgICAgICAgIGVsbGlwc29pZDogZWxsaXBzZUdlb21ldHJ5Ll9lbGxpcHNvaWQsCiAgICAgICAgICByb3RhdGlvbjogZWxsaXBzZUdlb21ldHJ5Ll9yb3RhdGlvbiwKICAgICAgICAgIGhlaWdodCwKICAgICAgICAgIGdyYW51bGFyaXR5OiBlbGxpcHNlR2VvbWV0cnkuX2dyYW51bGFyaXR5LAogICAgICAgICAgbnVtYmVyT2ZWZXJ0aWNhbExpbmVzOiBlbGxpcHNlR2VvbWV0cnkuX251bWJlck9mVmVydGljYWxMaW5lcwogICAgICAgIH07CiAgICAgICAgbGV0IGdlb21ldHJ5OwogICAgICAgIGlmIChleHRydWRlKSB7CiAgICAgICAgICBvcHRpb25zLmV4dHJ1ZGVkSGVpZ2h0ID0gZXh0cnVkZWRIZWlnaHQ7CiAgICAgICAgICBvcHRpb25zLm9mZnNldEF0dHJpYnV0ZSA9IGVsbGlwc2VHZW9tZXRyeS5fb2Zmc2V0QXR0cmlidXRlOwogICAgICAgICAgZ2VvbWV0cnkgPSBjb21wdXRlRXh0cnVkZWRFbGxpcHNlMihvcHRpb25zKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZ2VvbWV0cnkgPSBjb21wdXRlRWxsaXBzZTIob3B0aW9ucyk7CiAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGVsbGlwc2VHZW9tZXRyeS5fb2Zmc2V0QXR0cmlidXRlKSkgewogICAgICAgICAgICBjb25zdCBsZW5ndGggPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcy5sZW5ndGg7CiAgICAgICAgICAgIGNvbnN0IG9mZnNldFZhbHVlID0gZWxsaXBzZUdlb21ldHJ5Ll9vZmZzZXRBdHRyaWJ1dGUgPT09IEdlb21ldHJ5T2Zmc2V0QXR0cmlidXRlX2RlZmF1bHQuTk9ORSA/IDAgOiAxOwogICAgICAgICAgICBjb25zdCBhcHBseU9mZnNldCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCAvIDMpLmZpbGwob2Zmc2V0VmFsdWUpOwogICAgICAgICAgICBnZW9tZXRyeS5hdHRyaWJ1dGVzLmFwcGx5T2Zmc2V0ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LlVOU0lHTkVEX0JZVEUsCiAgICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMSwKICAgICAgICAgICAgICB2YWx1ZXM6IGFwcGx5T2Zmc2V0CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3IEdlb21ldHJ5X2RlZmF1bHQoewogICAgICAgICAgYXR0cmlidXRlczogZ2VvbWV0cnkuYXR0cmlidXRlcywKICAgICAgICAgIGluZGljZXM6IGdlb21ldHJ5LmluZGljZXMsCiAgICAgICAgICBwcmltaXRpdmVUeXBlOiBQcmltaXRpdmVUeXBlX2RlZmF1bHQuTElORVMsCiAgICAgICAgICBib3VuZGluZ1NwaGVyZTogZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUsCiAgICAgICAgICBvZmZzZXRBdHRyaWJ1dGU6IGVsbGlwc2VHZW9tZXRyeS5fb2Zmc2V0QXR0cmlidXRlCiAgICAgICAgfSk7CiAgICAgIH07CiAgICAgIEVsbGlwc2VPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdCA9IEVsbGlwc2VPdXRsaW5lR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9DaXJjbGVPdXRsaW5lR2VvbWV0cnkuanMKICBmdW5jdGlvbiBDaXJjbGVPdXRsaW5lR2VvbWV0cnkob3B0aW9ucykgewogICAgb3B0aW9ucyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMsIGRlZmF1bHRWYWx1ZV9kZWZhdWx0LkVNUFRZX09CSkVDVCk7CiAgICBjb25zdCByYWRpdXMgPSBvcHRpb25zLnJhZGl1czsKICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigicmFkaXVzIiwgcmFkaXVzKTsKICAgIGNvbnN0IGVsbGlwc2VHZW9tZXRyeU9wdGlvbnMgPSB7CiAgICAgIGNlbnRlcjogb3B0aW9ucy5jZW50ZXIsCiAgICAgIHNlbWlNYWpvckF4aXM6IHJhZGl1cywKICAgICAgc2VtaU1pbm9yQXhpczogcmFkaXVzLAogICAgICBlbGxpcHNvaWQ6IG9wdGlvbnMuZWxsaXBzb2lkLAogICAgICBoZWlnaHQ6IG9wdGlvbnMuaGVpZ2h0LAogICAgICBleHRydWRlZEhlaWdodDogb3B0aW9ucy5leHRydWRlZEhlaWdodCwKICAgICAgZ3JhbnVsYXJpdHk6IG9wdGlvbnMuZ3JhbnVsYXJpdHksCiAgICAgIG51bWJlck9mVmVydGljYWxMaW5lczogb3B0aW9ucy5udW1iZXJPZlZlcnRpY2FsTGluZXMKICAgIH07CiAgICB0aGlzLl9lbGxpcHNlR2VvbWV0cnkgPSBuZXcgRWxsaXBzZU91dGxpbmVHZW9tZXRyeV9kZWZhdWx0KGVsbGlwc2VHZW9tZXRyeU9wdGlvbnMpOwogICAgdGhpcy5fd29ya2VyTmFtZSA9ICJjcmVhdGVDaXJjbGVPdXRsaW5lR2VvbWV0cnkiOwogIH0KICB2YXIgc2NyYXRjaEVsbGlwc2VHZW9tZXRyeTIsIHNjcmF0Y2hPcHRpb25zNiwgQ2lyY2xlT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfQ2lyY2xlT3V0bGluZUdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9DaXJjbGVPdXRsaW5lR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9FbGxpcHNlT3V0bGluZUdlb21ldHJ5KCk7CiAgICAgIGluaXRfRWxsaXBzb2lkKCk7CiAgICAgIENpcmNsZU91dGxpbmVHZW9tZXRyeS5wYWNrZWRMZW5ndGggPSBFbGxpcHNlT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICBDaXJjbGVPdXRsaW5lR2VvbWV0cnkucGFjayA9IGZ1bmN0aW9uKHZhbHVlLCBhcnJheSwgc3RhcnRpbmdJbmRleCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidmFsdWUiLCB2YWx1ZSk7CiAgICAgICAgcmV0dXJuIEVsbGlwc2VPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdC5wYWNrKAogICAgICAgICAgdmFsdWUuX2VsbGlwc2VHZW9tZXRyeSwKICAgICAgICAgIGFycmF5LAogICAgICAgICAgc3RhcnRpbmdJbmRleAogICAgICAgICk7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hFbGxpcHNlR2VvbWV0cnkyID0gbmV3IEVsbGlwc2VPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdCh7CiAgICAgICAgY2VudGVyOiBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCksCiAgICAgICAgc2VtaU1ham9yQXhpczogMSwKICAgICAgICBzZW1pTWlub3JBeGlzOiAxCiAgICAgIH0pOwogICAgICBzY3JhdGNoT3B0aW9uczYgPSB7CiAgICAgICAgY2VudGVyOiBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCksCiAgICAgICAgcmFkaXVzOiB2b2lkIDAsCiAgICAgICAgZWxsaXBzb2lkOiBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZShFbGxpcHNvaWRfZGVmYXVsdC5VTklUX1NQSEVSRSksCiAgICAgICAgaGVpZ2h0OiB2b2lkIDAsCiAgICAgICAgZXh0cnVkZWRIZWlnaHQ6IHZvaWQgMCwKICAgICAgICBncmFudWxhcml0eTogdm9pZCAwLAogICAgICAgIG51bWJlck9mVmVydGljYWxMaW5lczogdm9pZCAwLAogICAgICAgIHNlbWlNYWpvckF4aXM6IHZvaWQgMCwKICAgICAgICBzZW1pTWlub3JBeGlzOiB2b2lkIDAKICAgICAgfTsKICAgICAgQ2lyY2xlT3V0bGluZUdlb21ldHJ5LnVucGFjayA9IGZ1bmN0aW9uKGFycmF5LCBzdGFydGluZ0luZGV4LCByZXN1bHQpIHsKICAgICAgICBjb25zdCBlbGxpcHNlR2VvbWV0cnkgPSBFbGxpcHNlT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQudW5wYWNrKAogICAgICAgICAgYXJyYXksCiAgICAgICAgICBzdGFydGluZ0luZGV4LAogICAgICAgICAgc2NyYXRjaEVsbGlwc2VHZW9tZXRyeTIKICAgICAgICApOwogICAgICAgIHNjcmF0Y2hPcHRpb25zNi5jZW50ZXIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoCiAgICAgICAgICBlbGxpcHNlR2VvbWV0cnkuX2NlbnRlciwKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zNi5jZW50ZXIKICAgICAgICApOwogICAgICAgIHNjcmF0Y2hPcHRpb25zNi5lbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZSgKICAgICAgICAgIGVsbGlwc2VHZW9tZXRyeS5fZWxsaXBzb2lkLAogICAgICAgICAgc2NyYXRjaE9wdGlvbnM2LmVsbGlwc29pZAogICAgICAgICk7CiAgICAgICAgc2NyYXRjaE9wdGlvbnM2LmhlaWdodCA9IGVsbGlwc2VHZW9tZXRyeS5faGVpZ2h0OwogICAgICAgIHNjcmF0Y2hPcHRpb25zNi5leHRydWRlZEhlaWdodCA9IGVsbGlwc2VHZW9tZXRyeS5fZXh0cnVkZWRIZWlnaHQ7CiAgICAgICAgc2NyYXRjaE9wdGlvbnM2LmdyYW51bGFyaXR5ID0gZWxsaXBzZUdlb21ldHJ5Ll9ncmFudWxhcml0eTsKICAgICAgICBzY3JhdGNoT3B0aW9uczYubnVtYmVyT2ZWZXJ0aWNhbExpbmVzID0gZWxsaXBzZUdlb21ldHJ5Ll9udW1iZXJPZlZlcnRpY2FsTGluZXM7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgc2NyYXRjaE9wdGlvbnM2LnJhZGl1cyA9IGVsbGlwc2VHZW9tZXRyeS5fc2VtaU1ham9yQXhpczsKICAgICAgICAgIHJldHVybiBuZXcgQ2lyY2xlT3V0bGluZUdlb21ldHJ5KHNjcmF0Y2hPcHRpb25zNik7CiAgICAgICAgfQogICAgICAgIHNjcmF0Y2hPcHRpb25zNi5zZW1pTWFqb3JBeGlzID0gZWxsaXBzZUdlb21ldHJ5Ll9zZW1pTWFqb3JBeGlzOwogICAgICAgIHNjcmF0Y2hPcHRpb25zNi5zZW1pTWlub3JBeGlzID0gZWxsaXBzZUdlb21ldHJ5Ll9zZW1pTWlub3JBeGlzOwogICAgICAgIHJlc3VsdC5fZWxsaXBzZUdlb21ldHJ5ID0gbmV3IEVsbGlwc2VPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdChzY3JhdGNoT3B0aW9uczYpOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENpcmNsZU91dGxpbmVHZW9tZXRyeS5jcmVhdGVHZW9tZXRyeSA9IGZ1bmN0aW9uKGNpcmNsZUdlb21ldHJ5KSB7CiAgICAgICAgcmV0dXJuIEVsbGlwc2VPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdC5jcmVhdGVHZW9tZXRyeShjaXJjbGVHZW9tZXRyeS5fZWxsaXBzZUdlb21ldHJ5KTsKICAgICAgfTsKICAgICAgQ2lyY2xlT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQgPSBDaXJjbGVPdXRsaW5lR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVDaXJjbGVPdXRsaW5lR2VvbWV0cnkuanMKICB2YXIgY3JlYXRlQ2lyY2xlT3V0bGluZUdlb21ldHJ5X2V4cG9ydHMgPSB7fTsKICBfX2V4cG9ydChjcmVhdGVDaXJjbGVPdXRsaW5lR2VvbWV0cnlfZXhwb3J0cywgewogICAgZGVmYXVsdDogKCkgPT4gY3JlYXRlQ2lyY2xlT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQKICB9KTsKICBmdW5jdGlvbiBjcmVhdGVDaXJjbGVPdXRsaW5lR2VvbWV0cnkoY2lyY2xlR2VvbWV0cnksIG9mZnNldCkgewogICAgaWYgKGRlZmluZWRfZGVmYXVsdChvZmZzZXQpKSB7CiAgICAgIGNpcmNsZUdlb21ldHJ5ID0gQ2lyY2xlT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQudW5wYWNrKGNpcmNsZUdlb21ldHJ5LCBvZmZzZXQpOwogICAgfQogICAgY2lyY2xlR2VvbWV0cnkuX2VsbGlwc2VHZW9tZXRyeS5fY2VudGVyID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKAogICAgICBjaXJjbGVHZW9tZXRyeS5fZWxsaXBzZUdlb21ldHJ5Ll9jZW50ZXIKICAgICk7CiAgICBjaXJjbGVHZW9tZXRyeS5fZWxsaXBzZUdlb21ldHJ5Ll9lbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZSgKICAgICAgY2lyY2xlR2VvbWV0cnkuX2VsbGlwc2VHZW9tZXRyeS5fZWxsaXBzb2lkCiAgICApOwogICAgcmV0dXJuIENpcmNsZU91dGxpbmVHZW9tZXRyeV9kZWZhdWx0LmNyZWF0ZUdlb21ldHJ5KGNpcmNsZUdlb21ldHJ5KTsKICB9CiAgdmFyIGNyZWF0ZUNpcmNsZU91dGxpbmVHZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X2NyZWF0ZUNpcmNsZU91dGxpbmVHZW9tZXRyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlQ2lyY2xlT3V0bGluZUdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ2lyY2xlT3V0bGluZUdlb21ldHJ5KCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBjcmVhdGVDaXJjbGVPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdCA9IGNyZWF0ZUNpcmNsZU91dGxpbmVHZW9tZXRyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2FycmF5UmVtb3ZlRHVwbGljYXRlcy5qcwogIGZ1bmN0aW9uIGFycmF5UmVtb3ZlRHVwbGljYXRlcyh2YWx1ZXMsIGVxdWFsc0Vwc2lsb24sIHdyYXBBcm91bmQsIHJlbW92ZWRJbmRpY2VzKSB7CiAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImVxdWFsc0Vwc2lsb24iLCBlcXVhbHNFcHNpbG9uKTsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHZhbHVlcykpIHsKICAgICAgcmV0dXJuIHZvaWQgMDsKICAgIH0KICAgIHdyYXBBcm91bmQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh3cmFwQXJvdW5kLCBmYWxzZSk7CiAgICBjb25zdCBzdG9yZVJlbW92ZWRJbmRpY2VzID0gZGVmaW5lZF9kZWZhdWx0KHJlbW92ZWRJbmRpY2VzKTsKICAgIGNvbnN0IGxlbmd0aCA9IHZhbHVlcy5sZW5ndGg7CiAgICBpZiAobGVuZ3RoIDwgMikgewogICAgICByZXR1cm4gdmFsdWVzOwogICAgfQogICAgbGV0IGk7CiAgICBsZXQgdjAyID0gdmFsdWVzWzBdOwogICAgbGV0IHYxMjsKICAgIGxldCBjbGVhbmVkVmFsdWVzOwogICAgbGV0IGxhc3RDbGVhbkluZGV4ID0gMDsKICAgIGxldCByZW1vdmVkSW5kZXhMQ0kgPSAtMTsKICAgIGZvciAoaSA9IDE7IGkgPCBsZW5ndGg7ICsraSkgewogICAgICB2MTIgPSB2YWx1ZXNbaV07CiAgICAgIGlmIChlcXVhbHNFcHNpbG9uKHYwMiwgdjEyLCByZW1vdmVEdXBsaWNhdGVzRXBzaWxvbikpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChjbGVhbmVkVmFsdWVzKSkgewogICAgICAgICAgY2xlYW5lZFZhbHVlcyA9IHZhbHVlcy5zbGljZSgwLCBpKTsKICAgICAgICAgIGxhc3RDbGVhbkluZGV4ID0gaSAtIDE7CiAgICAgICAgICByZW1vdmVkSW5kZXhMQ0kgPSAwOwogICAgICAgIH0KICAgICAgICBpZiAoc3RvcmVSZW1vdmVkSW5kaWNlcykgewogICAgICAgICAgcmVtb3ZlZEluZGljZXMucHVzaChpKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChjbGVhbmVkVmFsdWVzKSkgewogICAgICAgICAgY2xlYW5lZFZhbHVlcy5wdXNoKHYxMik7CiAgICAgICAgICBsYXN0Q2xlYW5JbmRleCA9IGk7CiAgICAgICAgICBpZiAoc3RvcmVSZW1vdmVkSW5kaWNlcykgewogICAgICAgICAgICByZW1vdmVkSW5kZXhMQ0kgPSByZW1vdmVkSW5kaWNlcy5sZW5ndGg7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHYwMiA9IHYxMjsKICAgICAgfQogICAgfQogICAgaWYgKHdyYXBBcm91bmQgJiYgZXF1YWxzRXBzaWxvbih2YWx1ZXNbMF0sIHZhbHVlc1tsZW5ndGggLSAxXSwgcmVtb3ZlRHVwbGljYXRlc0Vwc2lsb24pKSB7CiAgICAgIGlmIChzdG9yZVJlbW92ZWRJbmRpY2VzKSB7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChjbGVhbmVkVmFsdWVzKSkgewogICAgICAgICAgcmVtb3ZlZEluZGljZXMuc3BsaWNlKHJlbW92ZWRJbmRleExDSSwgMCwgbGFzdENsZWFuSW5kZXgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZW1vdmVkSW5kaWNlcy5wdXNoKGxlbmd0aCAtIDEpOwogICAgICAgIH0KICAgICAgfQogICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGNsZWFuZWRWYWx1ZXMpKSB7CiAgICAgICAgY2xlYW5lZFZhbHVlcy5sZW5ndGggLT0gMTsKICAgICAgfSBlbHNlIHsKICAgICAgICBjbGVhbmVkVmFsdWVzID0gdmFsdWVzLnNsaWNlKDAsIC0xKTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIGRlZmluZWRfZGVmYXVsdChjbGVhbmVkVmFsdWVzKSA/IGNsZWFuZWRWYWx1ZXMgOiB2YWx1ZXM7CiAgfQogIHZhciByZW1vdmVEdXBsaWNhdGVzRXBzaWxvbiwgYXJyYXlSZW1vdmVEdXBsaWNhdGVzX2RlZmF1bHQ7CiAgdmFyIGluaXRfYXJyYXlSZW1vdmVEdXBsaWNhdGVzID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9hcnJheVJlbW92ZUR1cGxpY2F0ZXMuanMiKCkgewogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgcmVtb3ZlRHVwbGljYXRlc0Vwc2lsb24gPSBNYXRoX2RlZmF1bHQuRVBTSUxPTjEwOwogICAgICBhcnJheVJlbW92ZUR1cGxpY2F0ZXNfZGVmYXVsdCA9IGFycmF5UmVtb3ZlRHVwbGljYXRlczsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0JvdW5kaW5nUmVjdGFuZ2xlLmpzCiAgZnVuY3Rpb24gQm91bmRpbmdSZWN0YW5nbGUoeCwgeSwgd2lkdGgsIGhlaWdodCkgewogICAgdGhpcy54ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoeCwgMCk7CiAgICB0aGlzLnkgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh5LCAwKTsKICAgIHRoaXMud2lkdGggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh3aWR0aCwgMCk7CiAgICB0aGlzLmhlaWdodCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGhlaWdodCwgMCk7CiAgfQogIHZhciBkZWZhdWx0UHJvamVjdGlvbjIsIGZyb21SZWN0YW5nbGVMb3dlckxlZnQsIGZyb21SZWN0YW5nbGVVcHBlclJpZ2h0LCBCb3VuZGluZ1JlY3RhbmdsZV9kZWZhdWx0OwogIHZhciBpbml0X0JvdW5kaW5nUmVjdGFuZ2xlID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9Cb3VuZGluZ1JlY3RhbmdsZS5qcyIoKSB7CiAgICAgIGluaXRfQ2FydGVzaWFuMigpOwogICAgICBpbml0X0NhcnRvZ3JhcGhpYygpOwogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBpbml0X0dlb2dyYXBoaWNQcm9qZWN0aW9uKCk7CiAgICAgIGluaXRfSW50ZXJzZWN0KCk7CiAgICAgIGluaXRfUmVjdGFuZ2xlKCk7CiAgICAgIEJvdW5kaW5nUmVjdGFuZ2xlLnBhY2tlZExlbmd0aCA9IDQ7CiAgICAgIEJvdW5kaW5nUmVjdGFuZ2xlLnBhY2sgPSBmdW5jdGlvbih2YWx1ZSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInZhbHVlIiwgdmFsdWUpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS54OwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS55OwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS53aWR0aDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4XSA9IHZhbHVlLmhlaWdodDsKICAgICAgICByZXR1cm4gYXJyYXk7CiAgICAgIH07CiAgICAgIEJvdW5kaW5nUmVjdGFuZ2xlLnVucGFjayA9IGZ1bmN0aW9uKGFycmF5LCBzdGFydGluZ0luZGV4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQm91bmRpbmdSZWN0YW5nbGUoKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LnggPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIHJlc3VsdC55ID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICByZXN1bHQud2lkdGggPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIHJlc3VsdC5oZWlnaHQgPSBhcnJheVtzdGFydGluZ0luZGV4XTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBCb3VuZGluZ1JlY3RhbmdsZS5mcm9tUG9pbnRzID0gZnVuY3Rpb24ocG9zaXRpb25zLCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQm91bmRpbmdSZWN0YW5nbGUoKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocG9zaXRpb25zKSB8fCBwb3NpdGlvbnMubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICByZXN1bHQueCA9IDA7CiAgICAgICAgICByZXN1bHQueSA9IDA7CiAgICAgICAgICByZXN1bHQud2lkdGggPSAwOwogICAgICAgICAgcmVzdWx0LmhlaWdodCA9IDA7CiAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0KICAgICAgICBjb25zdCBsZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoOwogICAgICAgIGxldCBtaW5pbXVtWCA9IHBvc2l0aW9uc1swXS54OwogICAgICAgIGxldCBtaW5pbXVtWSA9IHBvc2l0aW9uc1swXS55OwogICAgICAgIGxldCBtYXhpbXVtWCA9IHBvc2l0aW9uc1swXS54OwogICAgICAgIGxldCBtYXhpbXVtWSA9IHBvc2l0aW9uc1swXS55OwogICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICAgIGNvbnN0IHAgPSBwb3NpdGlvbnNbaV07CiAgICAgICAgICBjb25zdCB4ID0gcC54OwogICAgICAgICAgY29uc3QgeSA9IHAueTsKICAgICAgICAgIG1pbmltdW1YID0gTWF0aC5taW4oeCwgbWluaW11bVgpOwogICAgICAgICAgbWF4aW11bVggPSBNYXRoLm1heCh4LCBtYXhpbXVtWCk7CiAgICAgICAgICBtaW5pbXVtWSA9IE1hdGgubWluKHksIG1pbmltdW1ZKTsKICAgICAgICAgIG1heGltdW1ZID0gTWF0aC5tYXgoeSwgbWF4aW11bVkpOwogICAgICAgIH0KICAgICAgICByZXN1bHQueCA9IG1pbmltdW1YOwogICAgICAgIHJlc3VsdC55ID0gbWluaW11bVk7CiAgICAgICAgcmVzdWx0LndpZHRoID0gbWF4aW11bVggLSBtaW5pbXVtWDsKICAgICAgICByZXN1bHQuaGVpZ2h0ID0gbWF4aW11bVkgLSBtaW5pbXVtWTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBkZWZhdWx0UHJvamVjdGlvbjIgPSBuZXcgR2VvZ3JhcGhpY1Byb2plY3Rpb25fZGVmYXVsdCgpOwogICAgICBmcm9tUmVjdGFuZ2xlTG93ZXJMZWZ0ID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIGZyb21SZWN0YW5nbGVVcHBlclJpZ2h0ID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIEJvdW5kaW5nUmVjdGFuZ2xlLmZyb21SZWN0YW5nbGUgPSBmdW5jdGlvbihyZWN0YW5nbGUsIHByb2plY3Rpb24sIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBCb3VuZGluZ1JlY3RhbmdsZSgpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZWN0YW5nbGUpKSB7CiAgICAgICAgICByZXN1bHQueCA9IDA7CiAgICAgICAgICByZXN1bHQueSA9IDA7CiAgICAgICAgICByZXN1bHQud2lkdGggPSAwOwogICAgICAgICAgcmVzdWx0LmhlaWdodCA9IDA7CiAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0KICAgICAgICBkZWZhdWx0UHJvamVjdGlvbjIuX2VsbGlwc29pZCA9IEVsbGlwc29pZF9kZWZhdWx0LmRlZmF1bHQ7CiAgICAgICAgcHJvamVjdGlvbiA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHByb2plY3Rpb24sIGRlZmF1bHRQcm9qZWN0aW9uMik7CiAgICAgICAgY29uc3QgbG93ZXJMZWZ0ID0gcHJvamVjdGlvbi5wcm9qZWN0KAogICAgICAgICAgUmVjdGFuZ2xlX2RlZmF1bHQuc291dGh3ZXN0KHJlY3RhbmdsZSwgZnJvbVJlY3RhbmdsZUxvd2VyTGVmdCkKICAgICAgICApOwogICAgICAgIGNvbnN0IHVwcGVyUmlnaHQgPSBwcm9qZWN0aW9uLnByb2plY3QoCiAgICAgICAgICBSZWN0YW5nbGVfZGVmYXVsdC5ub3J0aGVhc3QocmVjdGFuZ2xlLCBmcm9tUmVjdGFuZ2xlVXBwZXJSaWdodCkKICAgICAgICApOwogICAgICAgIENhcnRlc2lhbjJfZGVmYXVsdC5zdWJ0cmFjdCh1cHBlclJpZ2h0LCBsb3dlckxlZnQsIHVwcGVyUmlnaHQpOwogICAgICAgIHJlc3VsdC54ID0gbG93ZXJMZWZ0Lng7CiAgICAgICAgcmVzdWx0LnkgPSBsb3dlckxlZnQueTsKICAgICAgICByZXN1bHQud2lkdGggPSB1cHBlclJpZ2h0Lng7CiAgICAgICAgcmVzdWx0LmhlaWdodCA9IHVwcGVyUmlnaHQueTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBCb3VuZGluZ1JlY3RhbmdsZS5jbG9uZSA9IGZ1bmN0aW9uKHJlY3RhbmdsZSwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVjdGFuZ2xlKSkgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBCb3VuZGluZ1JlY3RhbmdsZSgKICAgICAgICAgICAgcmVjdGFuZ2xlLngsCiAgICAgICAgICAgIHJlY3RhbmdsZS55LAogICAgICAgICAgICByZWN0YW5nbGUud2lkdGgsCiAgICAgICAgICAgIHJlY3RhbmdsZS5oZWlnaHQKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC54ID0gcmVjdGFuZ2xlLng7CiAgICAgICAgcmVzdWx0LnkgPSByZWN0YW5nbGUueTsKICAgICAgICByZXN1bHQud2lkdGggPSByZWN0YW5nbGUud2lkdGg7CiAgICAgICAgcmVzdWx0LmhlaWdodCA9IHJlY3RhbmdsZS5oZWlnaHQ7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQm91bmRpbmdSZWN0YW5nbGUudW5pb24gPSBmdW5jdGlvbihsZWZ0LCByaWdodCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJsZWZ0IiwgbGVmdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyaWdodCIsIHJpZ2h0KTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQm91bmRpbmdSZWN0YW5nbGUoKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgbG93ZXJMZWZ0WCA9IE1hdGgubWluKGxlZnQueCwgcmlnaHQueCk7CiAgICAgICAgY29uc3QgbG93ZXJMZWZ0WSA9IE1hdGgubWluKGxlZnQueSwgcmlnaHQueSk7CiAgICAgICAgY29uc3QgdXBwZXJSaWdodFggPSBNYXRoLm1heChsZWZ0LnggKyBsZWZ0LndpZHRoLCByaWdodC54ICsgcmlnaHQud2lkdGgpOwogICAgICAgIGNvbnN0IHVwcGVyUmlnaHRZID0gTWF0aC5tYXgobGVmdC55ICsgbGVmdC5oZWlnaHQsIHJpZ2h0LnkgKyByaWdodC5oZWlnaHQpOwogICAgICAgIHJlc3VsdC54ID0gbG93ZXJMZWZ0WDsKICAgICAgICByZXN1bHQueSA9IGxvd2VyTGVmdFk7CiAgICAgICAgcmVzdWx0LndpZHRoID0gdXBwZXJSaWdodFggLSBsb3dlckxlZnRYOwogICAgICAgIHJlc3VsdC5oZWlnaHQgPSB1cHBlclJpZ2h0WSAtIGxvd2VyTGVmdFk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQm91bmRpbmdSZWN0YW5nbGUuZXhwYW5kID0gZnVuY3Rpb24ocmVjdGFuZ2xlLCBwb2ludCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZWN0YW5nbGUiLCByZWN0YW5nbGUpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicG9pbnQiLCBwb2ludCk7CiAgICAgICAgcmVzdWx0ID0gQm91bmRpbmdSZWN0YW5nbGUuY2xvbmUocmVjdGFuZ2xlLCByZXN1bHQpOwogICAgICAgIGNvbnN0IHdpZHRoID0gcG9pbnQueCAtIHJlc3VsdC54OwogICAgICAgIGNvbnN0IGhlaWdodCA9IHBvaW50LnkgLSByZXN1bHQueTsKICAgICAgICBpZiAod2lkdGggPiByZXN1bHQud2lkdGgpIHsKICAgICAgICAgIHJlc3VsdC53aWR0aCA9IHdpZHRoOwogICAgICAgIH0gZWxzZSBpZiAod2lkdGggPCAwKSB7CiAgICAgICAgICByZXN1bHQud2lkdGggLT0gd2lkdGg7CiAgICAgICAgICByZXN1bHQueCA9IHBvaW50Lng7CiAgICAgICAgfQogICAgICAgIGlmIChoZWlnaHQgPiByZXN1bHQuaGVpZ2h0KSB7CiAgICAgICAgICByZXN1bHQuaGVpZ2h0ID0gaGVpZ2h0OwogICAgICAgIH0gZWxzZSBpZiAoaGVpZ2h0IDwgMCkgewogICAgICAgICAgcmVzdWx0LmhlaWdodCAtPSBoZWlnaHQ7CiAgICAgICAgICByZXN1bHQueSA9IHBvaW50Lnk7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIEJvdW5kaW5nUmVjdGFuZ2xlLmludGVyc2VjdCA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJsZWZ0IiwgbGVmdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyaWdodCIsIHJpZ2h0KTsKICAgICAgICBjb25zdCBsZWZ0WCA9IGxlZnQueDsKICAgICAgICBjb25zdCBsZWZ0WSA9IGxlZnQueTsKICAgICAgICBjb25zdCByaWdodFggPSByaWdodC54OwogICAgICAgIGNvbnN0IHJpZ2h0WSA9IHJpZ2h0Lnk7CiAgICAgICAgaWYgKCEobGVmdFggPiByaWdodFggKyByaWdodC53aWR0aCB8fCBsZWZ0WCArIGxlZnQud2lkdGggPCByaWdodFggfHwgbGVmdFkgKyBsZWZ0LmhlaWdodCA8IHJpZ2h0WSB8fCBsZWZ0WSA+IHJpZ2h0WSArIHJpZ2h0LmhlaWdodCkpIHsKICAgICAgICAgIHJldHVybiBJbnRlcnNlY3RfZGVmYXVsdC5JTlRFUlNFQ1RJTkc7CiAgICAgICAgfQogICAgICAgIHJldHVybiBJbnRlcnNlY3RfZGVmYXVsdC5PVVRTSURFOwogICAgICB9OwogICAgICBCb3VuZGluZ1JlY3RhbmdsZS5lcXVhbHMgPSBmdW5jdGlvbihsZWZ0LCByaWdodCkgewogICAgICAgIHJldHVybiBsZWZ0ID09PSByaWdodCB8fCBkZWZpbmVkX2RlZmF1bHQobGVmdCkgJiYgZGVmaW5lZF9kZWZhdWx0KHJpZ2h0KSAmJiBsZWZ0LnggPT09IHJpZ2h0LnggJiYgbGVmdC55ID09PSByaWdodC55ICYmIGxlZnQud2lkdGggPT09IHJpZ2h0LndpZHRoICYmIGxlZnQuaGVpZ2h0ID09PSByaWdodC5oZWlnaHQ7CiAgICAgIH07CiAgICAgIEJvdW5kaW5nUmVjdGFuZ2xlLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKHJlc3VsdCkgewogICAgICAgIHJldHVybiBCb3VuZGluZ1JlY3RhbmdsZS5jbG9uZSh0aGlzLCByZXN1bHQpOwogICAgICB9OwogICAgICBCb3VuZGluZ1JlY3RhbmdsZS5wcm90b3R5cGUuaW50ZXJzZWN0ID0gZnVuY3Rpb24ocmlnaHQpIHsKICAgICAgICByZXR1cm4gQm91bmRpbmdSZWN0YW5nbGUuaW50ZXJzZWN0KHRoaXMsIHJpZ2h0KTsKICAgICAgfTsKICAgICAgQm91bmRpbmdSZWN0YW5nbGUucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uKHJpZ2h0KSB7CiAgICAgICAgcmV0dXJuIEJvdW5kaW5nUmVjdGFuZ2xlLmVxdWFscyh0aGlzLCByaWdodCk7CiAgICAgIH07CiAgICAgIEJvdW5kaW5nUmVjdGFuZ2xlX2RlZmF1bHQgPSBCb3VuZGluZ1JlY3RhbmdsZTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0F4aXNBbGlnbmVkQm91bmRpbmdCb3guanMKICBmdW5jdGlvbiBBeGlzQWxpZ25lZEJvdW5kaW5nQm94KG1pbmltdW0sIG1heGltdW0sIGNlbnRlcikgewogICAgdGhpcy5taW5pbXVtID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG1pbmltdW0sIENhcnRlc2lhbjNfZGVmYXVsdC5aRVJPKSk7CiAgICB0aGlzLm1heGltdW0gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoZGVmYXVsdFZhbHVlX2RlZmF1bHQobWF4aW11bSwgQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8pKTsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGNlbnRlcikpIHsKICAgICAgY2VudGVyID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1pZHBvaW50KHRoaXMubWluaW11bSwgdGhpcy5tYXhpbXVtLCBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCkpOwogICAgfSBlbHNlIHsKICAgICAgY2VudGVyID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGNlbnRlcik7CiAgICB9CiAgICB0aGlzLmNlbnRlciA9IGNlbnRlcjsKICB9CiAgdmFyIGludGVyc2VjdFNjcmF0Y2gsIEF4aXNBbGlnbmVkQm91bmRpbmdCb3hfZGVmYXVsdDsKICB2YXIgaW5pdF9BeGlzQWxpZ25lZEJvdW5kaW5nQm94ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9BeGlzQWxpZ25lZEJvdW5kaW5nQm94LmpzIigpIHsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfSW50ZXJzZWN0KCk7CiAgICAgIEF4aXNBbGlnbmVkQm91bmRpbmdCb3guZnJvbUNvcm5lcnMgPSBmdW5jdGlvbihtaW5pbXVtLCBtYXhpbXVtLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoIm1pbmltdW0iLCBtaW5pbXVtKTsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoIm1heGltdW0iLCBtYXhpbXVtKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQXhpc0FsaWduZWRCb3VuZGluZ0JveCgpOwogICAgICAgIH0KICAgICAgICByZXN1bHQubWluaW11bSA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShtaW5pbXVtLCByZXN1bHQubWluaW11bSk7CiAgICAgICAgcmVzdWx0Lm1heGltdW0gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUobWF4aW11bSwgcmVzdWx0Lm1heGltdW0pOwogICAgICAgIHJlc3VsdC5jZW50ZXIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWlkcG9pbnQobWluaW11bSwgbWF4aW11bSwgcmVzdWx0LmNlbnRlcik7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQXhpc0FsaWduZWRCb3VuZGluZ0JveC5mcm9tUG9pbnRzID0gZnVuY3Rpb24ocG9zaXRpb25zLCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQXhpc0FsaWduZWRCb3VuZGluZ0JveCgpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwb3NpdGlvbnMpIHx8IHBvc2l0aW9ucy5sZW5ndGggPT09IDApIHsKICAgICAgICAgIHJlc3VsdC5taW5pbXVtID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKENhcnRlc2lhbjNfZGVmYXVsdC5aRVJPLCByZXN1bHQubWluaW11bSk7CiAgICAgICAgICByZXN1bHQubWF4aW11bSA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTywgcmVzdWx0Lm1heGltdW0pOwogICAgICAgICAgcmVzdWx0LmNlbnRlciA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTywgcmVzdWx0LmNlbnRlcik7CiAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0KICAgICAgICBsZXQgbWluaW11bVggPSBwb3NpdGlvbnNbMF0ueDsKICAgICAgICBsZXQgbWluaW11bVkgPSBwb3NpdGlvbnNbMF0ueTsKICAgICAgICBsZXQgbWluaW11bVogPSBwb3NpdGlvbnNbMF0uejsKICAgICAgICBsZXQgbWF4aW11bVggPSBwb3NpdGlvbnNbMF0ueDsKICAgICAgICBsZXQgbWF4aW11bVkgPSBwb3NpdGlvbnNbMF0ueTsKICAgICAgICBsZXQgbWF4aW11bVogPSBwb3NpdGlvbnNbMF0uejsKICAgICAgICBjb25zdCBsZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoOwogICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICAgIGNvbnN0IHAgPSBwb3NpdGlvbnNbaV07CiAgICAgICAgICBjb25zdCB4ID0gcC54OwogICAgICAgICAgY29uc3QgeSA9IHAueTsKICAgICAgICAgIGNvbnN0IHogPSBwLno7CiAgICAgICAgICBtaW5pbXVtWCA9IE1hdGgubWluKHgsIG1pbmltdW1YKTsKICAgICAgICAgIG1heGltdW1YID0gTWF0aC5tYXgoeCwgbWF4aW11bVgpOwogICAgICAgICAgbWluaW11bVkgPSBNYXRoLm1pbih5LCBtaW5pbXVtWSk7CiAgICAgICAgICBtYXhpbXVtWSA9IE1hdGgubWF4KHksIG1heGltdW1ZKTsKICAgICAgICAgIG1pbmltdW1aID0gTWF0aC5taW4oeiwgbWluaW11bVopOwogICAgICAgICAgbWF4aW11bVogPSBNYXRoLm1heCh6LCBtYXhpbXVtWik7CiAgICAgICAgfQogICAgICAgIGNvbnN0IG1pbmltdW0gPSByZXN1bHQubWluaW11bTsKICAgICAgICBtaW5pbXVtLnggPSBtaW5pbXVtWDsKICAgICAgICBtaW5pbXVtLnkgPSBtaW5pbXVtWTsKICAgICAgICBtaW5pbXVtLnogPSBtaW5pbXVtWjsKICAgICAgICBjb25zdCBtYXhpbXVtID0gcmVzdWx0Lm1heGltdW07CiAgICAgICAgbWF4aW11bS54ID0gbWF4aW11bVg7CiAgICAgICAgbWF4aW11bS55ID0gbWF4aW11bVk7CiAgICAgICAgbWF4aW11bS56ID0gbWF4aW11bVo7CiAgICAgICAgcmVzdWx0LmNlbnRlciA9IENhcnRlc2lhbjNfZGVmYXVsdC5taWRwb2ludChtaW5pbXVtLCBtYXhpbXVtLCByZXN1bHQuY2VudGVyKTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBBeGlzQWxpZ25lZEJvdW5kaW5nQm94LmNsb25lID0gZnVuY3Rpb24oYm94LCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChib3gpKSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IEF4aXNBbGlnbmVkQm91bmRpbmdCb3goYm94Lm1pbmltdW0sIGJveC5tYXhpbXVtLCBib3guY2VudGVyKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0Lm1pbmltdW0gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoYm94Lm1pbmltdW0sIHJlc3VsdC5taW5pbXVtKTsKICAgICAgICByZXN1bHQubWF4aW11bSA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShib3gubWF4aW11bSwgcmVzdWx0Lm1heGltdW0pOwogICAgICAgIHJlc3VsdC5jZW50ZXIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoYm94LmNlbnRlciwgcmVzdWx0LmNlbnRlcik7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQXhpc0FsaWduZWRCb3VuZGluZ0JveC5lcXVhbHMgPSBmdW5jdGlvbihsZWZ0LCByaWdodCkgewogICAgICAgIHJldHVybiBsZWZ0ID09PSByaWdodCB8fCBkZWZpbmVkX2RlZmF1bHQobGVmdCkgJiYgZGVmaW5lZF9kZWZhdWx0KHJpZ2h0KSAmJiBDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzKGxlZnQuY2VudGVyLCByaWdodC5jZW50ZXIpICYmIENhcnRlc2lhbjNfZGVmYXVsdC5lcXVhbHMobGVmdC5taW5pbXVtLCByaWdodC5taW5pbXVtKSAmJiBDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzKGxlZnQubWF4aW11bSwgcmlnaHQubWF4aW11bSk7CiAgICAgIH07CiAgICAgIGludGVyc2VjdFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIEF4aXNBbGlnbmVkQm91bmRpbmdCb3guaW50ZXJzZWN0UGxhbmUgPSBmdW5jdGlvbihib3gsIHBsYW5lKSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJib3giLCBib3gpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgicGxhbmUiLCBwbGFuZSk7CiAgICAgICAgaW50ZXJzZWN0U2NyYXRjaCA9IENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdCgKICAgICAgICAgIGJveC5tYXhpbXVtLAogICAgICAgICAgYm94Lm1pbmltdW0sCiAgICAgICAgICBpbnRlcnNlY3RTY3JhdGNoCiAgICAgICAgKTsKICAgICAgICBjb25zdCBoID0gQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIoCiAgICAgICAgICBpbnRlcnNlY3RTY3JhdGNoLAogICAgICAgICAgMC41LAogICAgICAgICAgaW50ZXJzZWN0U2NyYXRjaAogICAgICAgICk7CiAgICAgICAgY29uc3Qgbm9ybWFsMiA9IHBsYW5lLm5vcm1hbDsKICAgICAgICBjb25zdCBlID0gaC54ICogTWF0aC5hYnMobm9ybWFsMi54KSArIGgueSAqIE1hdGguYWJzKG5vcm1hbDIueSkgKyBoLnogKiBNYXRoLmFicyhub3JtYWwyLnopOwogICAgICAgIGNvbnN0IHMgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KGJveC5jZW50ZXIsIG5vcm1hbDIpICsgcGxhbmUuZGlzdGFuY2U7CiAgICAgICAgaWYgKHMgLSBlID4gMCkgewogICAgICAgICAgcmV0dXJuIEludGVyc2VjdF9kZWZhdWx0LklOU0lERTsKICAgICAgICB9CiAgICAgICAgaWYgKHMgKyBlIDwgMCkgewogICAgICAgICAgcmV0dXJuIEludGVyc2VjdF9kZWZhdWx0Lk9VVFNJREU7CiAgICAgICAgfQogICAgICAgIHJldHVybiBJbnRlcnNlY3RfZGVmYXVsdC5JTlRFUlNFQ1RJTkc7CiAgICAgIH07CiAgICAgIEF4aXNBbGlnbmVkQm91bmRpbmdCb3gucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24ocmVzdWx0KSB7CiAgICAgICAgcmV0dXJuIEF4aXNBbGlnbmVkQm91bmRpbmdCb3guY2xvbmUodGhpcywgcmVzdWx0KTsKICAgICAgfTsKICAgICAgQXhpc0FsaWduZWRCb3VuZGluZ0JveC5wcm90b3R5cGUuaW50ZXJzZWN0UGxhbmUgPSBmdW5jdGlvbihwbGFuZSkgewogICAgICAgIHJldHVybiBBeGlzQWxpZ25lZEJvdW5kaW5nQm94LmludGVyc2VjdFBsYW5lKHRoaXMsIHBsYW5lKTsKICAgICAgfTsKICAgICAgQXhpc0FsaWduZWRCb3VuZGluZ0JveC5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24ocmlnaHQpIHsKICAgICAgICByZXR1cm4gQXhpc0FsaWduZWRCb3VuZGluZ0JveC5lcXVhbHModGhpcywgcmlnaHQpOwogICAgICB9OwogICAgICBBeGlzQWxpZ25lZEJvdW5kaW5nQm94X2RlZmF1bHQgPSBBeGlzQWxpZ25lZEJvdW5kaW5nQm94OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvRWxsaXBzb2lkVGFuZ2VudFBsYW5lLmpzCiAgZnVuY3Rpb24gRWxsaXBzb2lkVGFuZ2VudFBsYW5lKG9yaWdpbiwgZWxsaXBzb2lkKSB7CiAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoIm9yaWdpbiIsIG9yaWdpbik7CiAgICBlbGxpcHNvaWQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChlbGxpcHNvaWQsIEVsbGlwc29pZF9kZWZhdWx0LmRlZmF1bHQpOwogICAgb3JpZ2luID0gZWxsaXBzb2lkLnNjYWxlVG9HZW9kZXRpY1N1cmZhY2Uob3JpZ2luKTsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KG9yaWdpbikpIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgIm9yaWdpbiBtdXN0IG5vdCBiZSBhdCB0aGUgY2VudGVyIG9mIHRoZSBlbGxpcHNvaWQuIgogICAgICApOwogICAgfQogICAgY29uc3QgZWFzdE5vcnRoVXAgPSBUcmFuc2Zvcm1zX2RlZmF1bHQuZWFzdE5vcnRoVXBUb0ZpeGVkRnJhbWUob3JpZ2luLCBlbGxpcHNvaWQpOwogICAgdGhpcy5fZWxsaXBzb2lkID0gZWxsaXBzb2lkOwogICAgdGhpcy5fb3JpZ2luID0gb3JpZ2luOwogICAgdGhpcy5feEF4aXMgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUNhcnRlc2lhbjQoCiAgICAgIE1hdHJpeDRfZGVmYXVsdC5nZXRDb2x1bW4oZWFzdE5vcnRoVXAsIDAsIHNjcmF0Y2hDYXJ0NCkKICAgICk7CiAgICB0aGlzLl95QXhpcyA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQ2FydGVzaWFuNCgKICAgICAgTWF0cml4NF9kZWZhdWx0LmdldENvbHVtbihlYXN0Tm9ydGhVcCwgMSwgc2NyYXRjaENhcnQ0KQogICAgKTsKICAgIGNvbnN0IG5vcm1hbDIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUNhcnRlc2lhbjQoCiAgICAgIE1hdHJpeDRfZGVmYXVsdC5nZXRDb2x1bW4oZWFzdE5vcnRoVXAsIDIsIHNjcmF0Y2hDYXJ0NCkKICAgICk7CiAgICB0aGlzLl9wbGFuZSA9IFBsYW5lX2RlZmF1bHQuZnJvbVBvaW50Tm9ybWFsKG9yaWdpbiwgbm9ybWFsMik7CiAgfQogIHZhciBzY3JhdGNoQ2FydDQsIHRtcCwgc2NyYXRjaFByb2plY3RQb2ludE9udG9QbGFuZVJheSwgc2NyYXRjaFByb2plY3RQb2ludE9udG9QbGFuZUNhcnRlc2lhbjMsIHByb2plY3RQb2ludHNPbnRvRWxsaXBzb2lkU2NyYXRjaCwgRWxsaXBzb2lkVGFuZ2VudFBsYW5lX2RlZmF1bHQ7CiAgdmFyIGluaXRfRWxsaXBzb2lkVGFuZ2VudFBsYW5lID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9FbGxpcHNvaWRUYW5nZW50UGxhbmUuanMiKCkgewogICAgICBpbml0X0F4aXNBbGlnbmVkQm91bmRpbmdCb3goKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4yKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NhcnRlc2lhbjQoKTsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBpbml0X0ludGVyc2VjdGlvblRlc3RzKCk7CiAgICAgIGluaXRfTWF0cml4NCgpOwogICAgICBpbml0X1BsYW5lKCk7CiAgICAgIGluaXRfUmF5KCk7CiAgICAgIGluaXRfVHJhbnNmb3JtcygpOwogICAgICBzY3JhdGNoQ2FydDQgPSBuZXcgQ2FydGVzaWFuNF9kZWZhdWx0KCk7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEVsbGlwc29pZFRhbmdlbnRQbGFuZS5wcm90b3R5cGUsIHsKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIHRoZSBlbGxpcHNvaWQuCiAgICAgICAgICogQG1lbWJlcm9mIEVsbGlwc29pZFRhbmdlbnRQbGFuZS5wcm90b3R5cGUKICAgICAgICAgKiBAdHlwZSB7RWxsaXBzb2lkfQogICAgICAgICAqLwogICAgICAgIGVsbGlwc29pZDogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VsbGlwc29pZDsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIEdldHMgdGhlIG9yaWdpbi4KICAgICAgICAgKiBAbWVtYmVyb2YgRWxsaXBzb2lkVGFuZ2VudFBsYW5lLnByb3RvdHlwZQogICAgICAgICAqIEB0eXBlIHtDYXJ0ZXNpYW4zfQogICAgICAgICAqLwogICAgICAgIG9yaWdpbjogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29yaWdpbjsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIEdldHMgdGhlIHBsYW5lIHdoaWNoIGlzIHRhbmdlbnQgdG8gdGhlIGVsbGlwc29pZC4KICAgICAgICAgKiBAbWVtYmVyb2YgRWxsaXBzb2lkVGFuZ2VudFBsYW5lLnByb3RvdHlwZQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqIEB0eXBlIHtQbGFuZX0KICAgICAgICAgKi8KICAgICAgICBwbGFuZTogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BsYW5lOwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgLyoqCiAgICAgICAgICogR2V0cyB0aGUgbG9jYWwgWC1heGlzIChlYXN0KSBvZiB0aGUgdGFuZ2VudCBwbGFuZS4KICAgICAgICAgKiBAbWVtYmVyb2YgRWxsaXBzb2lkVGFuZ2VudFBsYW5lLnByb3RvdHlwZQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqIEB0eXBlIHtDYXJ0ZXNpYW4zfQogICAgICAgICAqLwogICAgICAgIHhBeGlzOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5feEF4aXM7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIHRoZSBsb2NhbCBZLWF4aXMgKG5vcnRoKSBvZiB0aGUgdGFuZ2VudCBwbGFuZS4KICAgICAgICAgKiBAbWVtYmVyb2YgRWxsaXBzb2lkVGFuZ2VudFBsYW5lLnByb3RvdHlwZQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqIEB0eXBlIHtDYXJ0ZXNpYW4zfQogICAgICAgICAqLwogICAgICAgIHlBeGlzOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5feUF4aXM7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIHRoZSBsb2NhbCBaLWF4aXMgKHVwKSBvZiB0aGUgdGFuZ2VudCBwbGFuZS4KICAgICAgICAgKiBAbWVtYmVyb2YgRWxsaXBzb2lkVGFuZ2VudFBsYW5lLnByb3RvdHlwZQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqIEB0eXBlIHtDYXJ0ZXNpYW4zfQogICAgICAgICAqLwogICAgICAgIHpBeGlzOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5fcGxhbmUubm9ybWFsOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHRtcCA9IG5ldyBBeGlzQWxpZ25lZEJvdW5kaW5nQm94X2RlZmF1bHQoKTsKICAgICAgRWxsaXBzb2lkVGFuZ2VudFBsYW5lLmZyb21Qb2ludHMgPSBmdW5jdGlvbihjYXJ0ZXNpYW5zLCBlbGxpcHNvaWQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImNhcnRlc2lhbnMiLCBjYXJ0ZXNpYW5zKTsKICAgICAgICBjb25zdCBib3ggPSBBeGlzQWxpZ25lZEJvdW5kaW5nQm94X2RlZmF1bHQuZnJvbVBvaW50cyhjYXJ0ZXNpYW5zLCB0bXApOwogICAgICAgIHJldHVybiBuZXcgRWxsaXBzb2lkVGFuZ2VudFBsYW5lKGJveC5jZW50ZXIsIGVsbGlwc29pZCk7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hQcm9qZWN0UG9pbnRPbnRvUGxhbmVSYXkgPSBuZXcgUmF5X2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFByb2plY3RQb2ludE9udG9QbGFuZUNhcnRlc2lhbjMgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIEVsbGlwc29pZFRhbmdlbnRQbGFuZS5wcm90b3R5cGUucHJvamVjdFBvaW50T250b1BsYW5lID0gZnVuY3Rpb24oY2FydGVzaWFuMTEsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiY2FydGVzaWFuIiwgY2FydGVzaWFuMTEpOwogICAgICAgIGNvbnN0IHJheSA9IHNjcmF0Y2hQcm9qZWN0UG9pbnRPbnRvUGxhbmVSYXk7CiAgICAgICAgcmF5Lm9yaWdpbiA9IGNhcnRlc2lhbjExOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoY2FydGVzaWFuMTEsIHJheS5kaXJlY3Rpb24pOwogICAgICAgIGxldCBpbnRlcnNlY3Rpb25Qb2ludCA9IEludGVyc2VjdGlvblRlc3RzX2RlZmF1bHQucmF5UGxhbmUoCiAgICAgICAgICByYXksCiAgICAgICAgICB0aGlzLl9wbGFuZSwKICAgICAgICAgIHNjcmF0Y2hQcm9qZWN0UG9pbnRPbnRvUGxhbmVDYXJ0ZXNpYW4zCiAgICAgICAgKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChpbnRlcnNlY3Rpb25Qb2ludCkpIHsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5uZWdhdGUocmF5LmRpcmVjdGlvbiwgcmF5LmRpcmVjdGlvbik7CiAgICAgICAgICBpbnRlcnNlY3Rpb25Qb2ludCA9IEludGVyc2VjdGlvblRlc3RzX2RlZmF1bHQucmF5UGxhbmUoCiAgICAgICAgICAgIHJheSwKICAgICAgICAgICAgdGhpcy5fcGxhbmUsCiAgICAgICAgICAgIHNjcmF0Y2hQcm9qZWN0UG9pbnRPbnRvUGxhbmVDYXJ0ZXNpYW4zCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGludGVyc2VjdGlvblBvaW50KSkgewogICAgICAgICAgY29uc3QgdjMgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoCiAgICAgICAgICAgIGludGVyc2VjdGlvblBvaW50LAogICAgICAgICAgICB0aGlzLl9vcmlnaW4sCiAgICAgICAgICAgIGludGVyc2VjdGlvblBvaW50CiAgICAgICAgICApOwogICAgICAgICAgY29uc3QgeCA9IENhcnRlc2lhbjNfZGVmYXVsdC5kb3QodGhpcy5feEF4aXMsIHYzKTsKICAgICAgICAgIGNvbnN0IHkgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KHRoaXMuX3lBeGlzLCB2Myk7CiAgICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICAgIHJldHVybiBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KHgsIHkpOwogICAgICAgICAgfQogICAgICAgICAgcmVzdWx0LnggPSB4OwogICAgICAgICAgcmVzdWx0LnkgPSB5OwogICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgfTsKICAgICAgRWxsaXBzb2lkVGFuZ2VudFBsYW5lLnByb3RvdHlwZS5wcm9qZWN0UG9pbnRzT250b1BsYW5lID0gZnVuY3Rpb24oY2FydGVzaWFucywgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJjYXJ0ZXNpYW5zIiwgY2FydGVzaWFucyk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gW107CiAgICAgICAgfQogICAgICAgIGxldCBjb3VudCA9IDA7CiAgICAgICAgY29uc3QgbGVuZ3RoID0gY2FydGVzaWFucy5sZW5ndGg7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgICAgY29uc3QgcCA9IHRoaXMucHJvamVjdFBvaW50T250b1BsYW5lKGNhcnRlc2lhbnNbaV0sIHJlc3VsdFtjb3VudF0pOwogICAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChwKSkgewogICAgICAgICAgICByZXN1bHRbY291bnRdID0gcDsKICAgICAgICAgICAgY291bnQrKzsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmVzdWx0Lmxlbmd0aCA9IGNvdW50OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIEVsbGlwc29pZFRhbmdlbnRQbGFuZS5wcm90b3R5cGUucHJvamVjdFBvaW50VG9OZWFyZXN0T25QbGFuZSA9IGZ1bmN0aW9uKGNhcnRlc2lhbjExLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImNhcnRlc2lhbiIsIGNhcnRlc2lhbjExKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHJheSA9IHNjcmF0Y2hQcm9qZWN0UG9pbnRPbnRvUGxhbmVSYXk7CiAgICAgICAgcmF5Lm9yaWdpbiA9IGNhcnRlc2lhbjExOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZSh0aGlzLl9wbGFuZS5ub3JtYWwsIHJheS5kaXJlY3Rpb24pOwogICAgICAgIGxldCBpbnRlcnNlY3Rpb25Qb2ludCA9IEludGVyc2VjdGlvblRlc3RzX2RlZmF1bHQucmF5UGxhbmUoCiAgICAgICAgICByYXksCiAgICAgICAgICB0aGlzLl9wbGFuZSwKICAgICAgICAgIHNjcmF0Y2hQcm9qZWN0UG9pbnRPbnRvUGxhbmVDYXJ0ZXNpYW4zCiAgICAgICAgKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChpbnRlcnNlY3Rpb25Qb2ludCkpIHsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5uZWdhdGUocmF5LmRpcmVjdGlvbiwgcmF5LmRpcmVjdGlvbik7CiAgICAgICAgICBpbnRlcnNlY3Rpb25Qb2ludCA9IEludGVyc2VjdGlvblRlc3RzX2RlZmF1bHQucmF5UGxhbmUoCiAgICAgICAgICAgIHJheSwKICAgICAgICAgICAgdGhpcy5fcGxhbmUsCiAgICAgICAgICAgIHNjcmF0Y2hQcm9qZWN0UG9pbnRPbnRvUGxhbmVDYXJ0ZXNpYW4zCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBjb25zdCB2MyA9IENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdCgKICAgICAgICAgIGludGVyc2VjdGlvblBvaW50LAogICAgICAgICAgdGhpcy5fb3JpZ2luLAogICAgICAgICAgaW50ZXJzZWN0aW9uUG9pbnQKICAgICAgICApOwogICAgICAgIGNvbnN0IHggPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KHRoaXMuX3hBeGlzLCB2Myk7CiAgICAgICAgY29uc3QgeSA9IENhcnRlc2lhbjNfZGVmYXVsdC5kb3QodGhpcy5feUF4aXMsIHYzKTsKICAgICAgICByZXN1bHQueCA9IHg7CiAgICAgICAgcmVzdWx0LnkgPSB5OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIEVsbGlwc29pZFRhbmdlbnRQbGFuZS5wcm90b3R5cGUucHJvamVjdFBvaW50c1RvTmVhcmVzdE9uUGxhbmUgPSBmdW5jdGlvbihjYXJ0ZXNpYW5zLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImNhcnRlc2lhbnMiLCBjYXJ0ZXNpYW5zKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBbXTsKICAgICAgICB9CiAgICAgICAgY29uc3QgbGVuZ3RoID0gY2FydGVzaWFucy5sZW5ndGg7CiAgICAgICAgcmVzdWx0Lmxlbmd0aCA9IGxlbmd0aDsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgICByZXN1bHRbaV0gPSB0aGlzLnByb2plY3RQb2ludFRvTmVhcmVzdE9uUGxhbmUoY2FydGVzaWFuc1tpXSwgcmVzdWx0W2ldKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgcHJvamVjdFBvaW50c09udG9FbGxpcHNvaWRTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBFbGxpcHNvaWRUYW5nZW50UGxhbmUucHJvdG90eXBlLnByb2plY3RQb2ludE9udG9FbGxpcHNvaWQgPSBmdW5jdGlvbihjYXJ0ZXNpYW4xMSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJjYXJ0ZXNpYW4iLCBjYXJ0ZXNpYW4xMSk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICAgIH0KICAgICAgICBjb25zdCBlbGxpcHNvaWQgPSB0aGlzLl9lbGxpcHNvaWQ7CiAgICAgICAgY29uc3Qgb3JpZ2luID0gdGhpcy5fb3JpZ2luOwogICAgICAgIGNvbnN0IHhBeGlzID0gdGhpcy5feEF4aXM7CiAgICAgICAgY29uc3QgeUF4aXMgPSB0aGlzLl95QXhpczsKICAgICAgICBjb25zdCB0bXAyID0gcHJvamVjdFBvaW50c09udG9FbGxpcHNvaWRTY3JhdGNoOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKHhBeGlzLCBjYXJ0ZXNpYW4xMS54LCB0bXAyKTsKICAgICAgICByZXN1bHQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKG9yaWdpbiwgdG1wMiwgcmVzdWx0KTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcih5QXhpcywgY2FydGVzaWFuMTEueSwgdG1wMik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChyZXN1bHQsIHRtcDIsIHJlc3VsdCk7CiAgICAgICAgZWxsaXBzb2lkLnNjYWxlVG9HZW9jZW50cmljU3VyZmFjZShyZXN1bHQsIHJlc3VsdCk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgRWxsaXBzb2lkVGFuZ2VudFBsYW5lLnByb3RvdHlwZS5wcm9qZWN0UG9pbnRzT250b0VsbGlwc29pZCA9IGZ1bmN0aW9uKGNhcnRlc2lhbnMsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiY2FydGVzaWFucyIsIGNhcnRlc2lhbnMpOwogICAgICAgIGNvbnN0IGxlbmd0aCA9IGNhcnRlc2lhbnMubGVuZ3RoOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBBcnJheShsZW5ndGgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXN1bHQubGVuZ3RoID0gbGVuZ3RoOwogICAgICAgIH0KICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgICByZXN1bHRbaV0gPSB0aGlzLnByb2plY3RQb2ludE9udG9FbGxpcHNvaWQoY2FydGVzaWFuc1tpXSwgcmVzdWx0W2ldKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgRWxsaXBzb2lkVGFuZ2VudFBsYW5lX2RlZmF1bHQgPSBFbGxpcHNvaWRUYW5nZW50UGxhbmU7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9PcmllbnRlZEJvdW5kaW5nQm94LmpzCiAgZnVuY3Rpb24gT3JpZW50ZWRCb3VuZGluZ0JveChjZW50ZXIsIGhhbGZBeGVzKSB7CiAgICB0aGlzLmNlbnRlciA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShkZWZhdWx0VmFsdWVfZGVmYXVsdChjZW50ZXIsIENhcnRlc2lhbjNfZGVmYXVsdC5aRVJPKSk7CiAgICB0aGlzLmhhbGZBeGVzID0gTWF0cml4M19kZWZhdWx0LmNsb25lKGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGhhbGZBeGVzLCBNYXRyaXgzX2RlZmF1bHQuWkVSTykpOwogIH0KICBmdW5jdGlvbiBmcm9tUGxhbmVFeHRlbnRzKHBsYW5lT3JpZ2luLCBwbGFuZVhBeGlzLCBwbGFuZVlBeGlzLCBwbGFuZVpBeGlzLCBtaW5pbXVtWCwgbWF4aW11bVgsIG1pbmltdW1ZLCBtYXhpbXVtWSwgbWluaW11bVosIG1heGltdW1aLCByZXN1bHQpIHsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KG1pbmltdW1YKSB8fCAhZGVmaW5lZF9kZWZhdWx0KG1heGltdW1YKSB8fCAhZGVmaW5lZF9kZWZhdWx0KG1pbmltdW1ZKSB8fCAhZGVmaW5lZF9kZWZhdWx0KG1heGltdW1ZKSB8fCAhZGVmaW5lZF9kZWZhdWx0KG1pbmltdW1aKSB8fCAhZGVmaW5lZF9kZWZhdWx0KG1heGltdW1aKSkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAiYWxsIGV4dGVudHMgKG1pbmltdW0vbWF4aW11bSBYL1kvWikgYXJlIHJlcXVpcmVkLiIKICAgICAgKTsKICAgIH0KICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgcmVzdWx0ID0gbmV3IE9yaWVudGVkQm91bmRpbmdCb3goKTsKICAgIH0KICAgIGNvbnN0IGhhbGZBeGVzID0gcmVzdWx0LmhhbGZBeGVzOwogICAgTWF0cml4M19kZWZhdWx0LnNldENvbHVtbihoYWxmQXhlcywgMCwgcGxhbmVYQXhpcywgaGFsZkF4ZXMpOwogICAgTWF0cml4M19kZWZhdWx0LnNldENvbHVtbihoYWxmQXhlcywgMSwgcGxhbmVZQXhpcywgaGFsZkF4ZXMpOwogICAgTWF0cml4M19kZWZhdWx0LnNldENvbHVtbihoYWxmQXhlcywgMiwgcGxhbmVaQXhpcywgaGFsZkF4ZXMpOwogICAgbGV0IGNlbnRlck9mZnNldCA9IHNjcmF0Y2hPZmZzZXQ7CiAgICBjZW50ZXJPZmZzZXQueCA9IChtaW5pbXVtWCArIG1heGltdW1YKSAvIDI7CiAgICBjZW50ZXJPZmZzZXQueSA9IChtaW5pbXVtWSArIG1heGltdW1ZKSAvIDI7CiAgICBjZW50ZXJPZmZzZXQueiA9IChtaW5pbXVtWiArIG1heGltdW1aKSAvIDI7CiAgICBjb25zdCBzY2FsZSA9IHNjcmF0Y2hTY2FsZTI7CiAgICBzY2FsZS54ID0gKG1heGltdW1YIC0gbWluaW11bVgpIC8gMjsKICAgIHNjYWxlLnkgPSAobWF4aW11bVkgLSBtaW5pbXVtWSkgLyAyOwogICAgc2NhbGUueiA9IChtYXhpbXVtWiAtIG1pbmltdW1aKSAvIDI7CiAgICBjb25zdCBjZW50ZXIgPSByZXN1bHQuY2VudGVyOwogICAgY2VudGVyT2Zmc2V0ID0gTWF0cml4M19kZWZhdWx0Lm11bHRpcGx5QnlWZWN0b3IoaGFsZkF4ZXMsIGNlbnRlck9mZnNldCwgY2VudGVyT2Zmc2V0KTsKICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQocGxhbmVPcmlnaW4sIGNlbnRlck9mZnNldCwgY2VudGVyKTsKICAgIE1hdHJpeDNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGUoaGFsZkF4ZXMsIHNjYWxlLCBoYWxmQXhlcyk7CiAgICByZXR1cm4gcmVzdWx0OwogIH0KICB2YXIgc2NyYXRjaENhcnRlc2lhbjE1LCBzY3JhdGNoQ2FydGVzaWFuMjUsIHNjcmF0Y2hDYXJ0ZXNpYW4zNiwgc2NyYXRjaENhcnRlc2lhbjQyLCBzY3JhdGNoQ2FydGVzaWFuNSwgc2NyYXRjaENhcnRlc2lhbjYsIHNjcmF0Y2hDb3ZhcmlhbmNlUmVzdWx0LCBzY3JhdGNoRWlnZW5SZXN1bHQsIHNjcmF0Y2hPZmZzZXQsIHNjcmF0Y2hTY2FsZTIsIHNjcmF0Y2hSZWN0YW5nbGVDZW50ZXJDYXJ0b2dyYXBoaWMsIHNjcmF0Y2hSZWN0YW5nbGVDZW50ZXIsIHNjcmF0Y2hQZXJpbWV0ZXJDYXJ0b2dyYXBoaWNOQywgc2NyYXRjaFBlcmltZXRlckNhcnRvZ3JhcGhpY05XLCBzY3JhdGNoUGVyaW1ldGVyQ2FydG9ncmFwaGljQ1csIHNjcmF0Y2hQZXJpbWV0ZXJDYXJ0b2dyYXBoaWNTVywgc2NyYXRjaFBlcmltZXRlckNhcnRvZ3JhcGhpY1NDLCBzY3JhdGNoUGVyaW1ldGVyQ2FydGVzaWFuTkMsIHNjcmF0Y2hQZXJpbWV0ZXJDYXJ0ZXNpYW5OVywgc2NyYXRjaFBlcmltZXRlckNhcnRlc2lhbkNXLCBzY3JhdGNoUGVyaW1ldGVyQ2FydGVzaWFuU1csIHNjcmF0Y2hQZXJpbWV0ZXJDYXJ0ZXNpYW5TQywgc2NyYXRjaFBlcmltZXRlclByb2plY3RlZE5DLCBzY3JhdGNoUGVyaW1ldGVyUHJvamVjdGVkTlcsIHNjcmF0Y2hQZXJpbWV0ZXJQcm9qZWN0ZWRDVywgc2NyYXRjaFBlcmltZXRlclByb2plY3RlZFNXLCBzY3JhdGNoUGVyaW1ldGVyUHJvamVjdGVkU0MsIHNjcmF0Y2hQbGFuZU9yaWdpbiwgc2NyYXRjaFBsYW5lTm9ybWFsLCBzY3JhdGNoUGxhbmVYQXhpcywgc2NyYXRjaEhvcml6b25DYXJ0ZXNpYW4sIHNjcmF0Y2hIb3Jpem9uUHJvamVjdGVkLCBzY3JhdGNoTWF4WSwgc2NyYXRjaE1pblksIHNjcmF0Y2haLCBzY3JhdGNoUGxhbmUsIHNjcmF0Y2hDYXJ0ZXNpYW5VLCBzY3JhdGNoQ2FydGVzaWFuViwgc2NyYXRjaENhcnRlc2lhblcsIHNjcmF0Y2hWYWxpZEF4aXMyLCBzY3JhdGNoVmFsaWRBeGlzMywgc2NyYXRjaFBQcmltZSwgc2NyYXRjaENvcm5lciwgc2NyYXRjaFRvQ2VudGVyLCBzY3JhdGNoWEF4aXMsIHNjcmF0Y2hZQXhpcywgc2NyYXRjaFpBeGlzLCBzY3JhdGNoUm90YXRpb25TY2FsZSwgc2NyYXRjaEJvdW5kaW5nU3BoZXJlLCBPcmllbnRlZEJvdW5kaW5nQm94X2RlZmF1bHQ7CiAgdmFyIGluaXRfT3JpZW50ZWRCb3VuZGluZ0JveCA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvT3JpZW50ZWRCb3VuZGluZ0JveC5qcyIoKSB7CiAgICAgIGluaXRfQm91bmRpbmdTcGhlcmUoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4yKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NhcnRvZ3JhcGhpYygpOwogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkVGFuZ2VudFBsYW5lKCk7CiAgICAgIGluaXRfSW50ZXJzZWN0KCk7CiAgICAgIGluaXRfSW50ZXJ2YWwoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIGluaXRfTWF0cml4MygpOwogICAgICBpbml0X01hdHJpeDQoKTsKICAgICAgaW5pdF9QbGFuZSgpOwogICAgICBpbml0X1JlY3RhbmdsZSgpOwogICAgICBPcmllbnRlZEJvdW5kaW5nQm94LnBhY2tlZExlbmd0aCA9IENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyBNYXRyaXgzX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICBPcmllbnRlZEJvdW5kaW5nQm94LnBhY2sgPSBmdW5jdGlvbih2YWx1ZSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInZhbHVlIiwgdmFsdWUpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKHZhbHVlLmNlbnRlciwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIE1hdHJpeDNfZGVmYXVsdC5wYWNrKHZhbHVlLmhhbGZBeGVzLCBhcnJheSwgc3RhcnRpbmdJbmRleCArIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGgpOwogICAgICAgIHJldHVybiBhcnJheTsKICAgICAgfTsKICAgICAgT3JpZW50ZWRCb3VuZGluZ0JveC51bnBhY2sgPSBmdW5jdGlvbihhcnJheSwgc3RhcnRpbmdJbmRleCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IE9yaWVudGVkQm91bmRpbmdCb3goKTsKICAgICAgICB9CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjayhhcnJheSwgc3RhcnRpbmdJbmRleCwgcmVzdWx0LmNlbnRlcik7CiAgICAgICAgTWF0cml4M19kZWZhdWx0LnVucGFjaygKICAgICAgICAgIGFycmF5LAogICAgICAgICAgc3RhcnRpbmdJbmRleCArIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGgsCiAgICAgICAgICByZXN1bHQuaGFsZkF4ZXMKICAgICAgICApOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4xNSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaENhcnRlc2lhbjI1ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQ2FydGVzaWFuMzYgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW40MiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaENhcnRlc2lhbjUgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW42ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQ292YXJpYW5jZVJlc3VsdCA9IG5ldyBNYXRyaXgzX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaEVpZ2VuUmVzdWx0ID0gewogICAgICAgIHVuaXRhcnk6IG5ldyBNYXRyaXgzX2RlZmF1bHQoKSwKICAgICAgICBkaWFnb25hbDogbmV3IE1hdHJpeDNfZGVmYXVsdCgpCiAgICAgIH07CiAgICAgIE9yaWVudGVkQm91bmRpbmdCb3guZnJvbVBvaW50cyA9IGZ1bmN0aW9uKHBvc2l0aW9ucywgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IE9yaWVudGVkQm91bmRpbmdCb3goKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocG9zaXRpb25zKSB8fCBwb3NpdGlvbnMubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICByZXN1bHQuaGFsZkF4ZXMgPSBNYXRyaXgzX2RlZmF1bHQuWkVSTzsKICAgICAgICAgIHJlc3VsdC5jZW50ZXIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTzsKICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfQogICAgICAgIGxldCBpOwogICAgICAgIGNvbnN0IGxlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgY29uc3QgbWVhblBvaW50ID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKHBvc2l0aW9uc1swXSwgc2NyYXRjaENhcnRlc2lhbjE1KTsKICAgICAgICBmb3IgKGkgPSAxOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQobWVhblBvaW50LCBwb3NpdGlvbnNbaV0sIG1lYW5Qb2ludCk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGludkxlbmd0aCA9IDEgLyBsZW5ndGg7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIobWVhblBvaW50LCBpbnZMZW5ndGgsIG1lYW5Qb2ludCk7CiAgICAgICAgbGV0IGV4eCA9IDA7CiAgICAgICAgbGV0IGV4eSA9IDA7CiAgICAgICAgbGV0IGV4eiA9IDA7CiAgICAgICAgbGV0IGV5eSA9IDA7CiAgICAgICAgbGV0IGV5eiA9IDA7CiAgICAgICAgbGV0IGV6eiA9IDA7CiAgICAgICAgbGV0IHA7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgICBwID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHBvc2l0aW9uc1tpXSwgbWVhblBvaW50LCBzY3JhdGNoQ2FydGVzaWFuMjUpOwogICAgICAgICAgZXh4ICs9IHAueCAqIHAueDsKICAgICAgICAgIGV4eSArPSBwLnggKiBwLnk7CiAgICAgICAgICBleHogKz0gcC54ICogcC56OwogICAgICAgICAgZXl5ICs9IHAueSAqIHAueTsKICAgICAgICAgIGV5eiArPSBwLnkgKiBwLno7CiAgICAgICAgICBlenogKz0gcC56ICogcC56OwogICAgICAgIH0KICAgICAgICBleHggKj0gaW52TGVuZ3RoOwogICAgICAgIGV4eSAqPSBpbnZMZW5ndGg7CiAgICAgICAgZXh6ICo9IGludkxlbmd0aDsKICAgICAgICBleXkgKj0gaW52TGVuZ3RoOwogICAgICAgIGV5eiAqPSBpbnZMZW5ndGg7CiAgICAgICAgZXp6ICo9IGludkxlbmd0aDsKICAgICAgICBjb25zdCBjb3ZhcmlhbmNlTWF0cml4ID0gc2NyYXRjaENvdmFyaWFuY2VSZXN1bHQ7CiAgICAgICAgY292YXJpYW5jZU1hdHJpeFswXSA9IGV4eDsKICAgICAgICBjb3ZhcmlhbmNlTWF0cml4WzFdID0gZXh5OwogICAgICAgIGNvdmFyaWFuY2VNYXRyaXhbMl0gPSBleHo7CiAgICAgICAgY292YXJpYW5jZU1hdHJpeFszXSA9IGV4eTsKICAgICAgICBjb3ZhcmlhbmNlTWF0cml4WzRdID0gZXl5OwogICAgICAgIGNvdmFyaWFuY2VNYXRyaXhbNV0gPSBleXo7CiAgICAgICAgY292YXJpYW5jZU1hdHJpeFs2XSA9IGV4ejsKICAgICAgICBjb3ZhcmlhbmNlTWF0cml4WzddID0gZXl6OwogICAgICAgIGNvdmFyaWFuY2VNYXRyaXhbOF0gPSBleno7CiAgICAgICAgY29uc3QgZWlnZW5EZWNvbXBvc2l0aW9uID0gTWF0cml4M19kZWZhdWx0LmNvbXB1dGVFaWdlbkRlY29tcG9zaXRpb24oCiAgICAgICAgICBjb3ZhcmlhbmNlTWF0cml4LAogICAgICAgICAgc2NyYXRjaEVpZ2VuUmVzdWx0CiAgICAgICAgKTsKICAgICAgICBjb25zdCByb3RhdGlvbiA9IE1hdHJpeDNfZGVmYXVsdC5jbG9uZShlaWdlbkRlY29tcG9zaXRpb24udW5pdGFyeSwgcmVzdWx0LmhhbGZBeGVzKTsKICAgICAgICBsZXQgdjEyID0gTWF0cml4M19kZWZhdWx0LmdldENvbHVtbihyb3RhdGlvbiwgMCwgc2NyYXRjaENhcnRlc2lhbjQyKTsKICAgICAgICBsZXQgdjIyID0gTWF0cml4M19kZWZhdWx0LmdldENvbHVtbihyb3RhdGlvbiwgMSwgc2NyYXRjaENhcnRlc2lhbjUpOwogICAgICAgIGxldCB2MyA9IE1hdHJpeDNfZGVmYXVsdC5nZXRDb2x1bW4ocm90YXRpb24sIDIsIHNjcmF0Y2hDYXJ0ZXNpYW42KTsKICAgICAgICBsZXQgdTEyID0gLU51bWJlci5NQVhfVkFMVUU7CiAgICAgICAgbGV0IHUyMiA9IC1OdW1iZXIuTUFYX1ZBTFVFOwogICAgICAgIGxldCB1MyA9IC1OdW1iZXIuTUFYX1ZBTFVFOwogICAgICAgIGxldCBsMSA9IE51bWJlci5NQVhfVkFMVUU7CiAgICAgICAgbGV0IGwyID0gTnVtYmVyLk1BWF9WQUxVRTsKICAgICAgICBsZXQgbDMgPSBOdW1iZXIuTUFYX1ZBTFVFOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgICAgcCA9IHBvc2l0aW9uc1tpXTsKICAgICAgICAgIHUxMiA9IE1hdGgubWF4KENhcnRlc2lhbjNfZGVmYXVsdC5kb3QodjEyLCBwKSwgdTEyKTsKICAgICAgICAgIHUyMiA9IE1hdGgubWF4KENhcnRlc2lhbjNfZGVmYXVsdC5kb3QodjIyLCBwKSwgdTIyKTsKICAgICAgICAgIHUzID0gTWF0aC5tYXgoQ2FydGVzaWFuM19kZWZhdWx0LmRvdCh2MywgcCksIHUzKTsKICAgICAgICAgIGwxID0gTWF0aC5taW4oQ2FydGVzaWFuM19kZWZhdWx0LmRvdCh2MTIsIHApLCBsMSk7CiAgICAgICAgICBsMiA9IE1hdGgubWluKENhcnRlc2lhbjNfZGVmYXVsdC5kb3QodjIyLCBwKSwgbDIpOwogICAgICAgICAgbDMgPSBNYXRoLm1pbihDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KHYzLCBwKSwgbDMpOwogICAgICAgIH0KICAgICAgICB2MTIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcih2MTIsIDAuNSAqIChsMSArIHUxMiksIHYxMik7CiAgICAgICAgdjIyID0gQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIodjIyLCAwLjUgKiAobDIgKyB1MjIpLCB2MjIpOwogICAgICAgIHYzID0gQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIodjMsIDAuNSAqIChsMyArIHUzKSwgdjMpOwogICAgICAgIGNvbnN0IGNlbnRlciA9IENhcnRlc2lhbjNfZGVmYXVsdC5hZGQodjEyLCB2MjIsIHJlc3VsdC5jZW50ZXIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoY2VudGVyLCB2MywgY2VudGVyKTsKICAgICAgICBjb25zdCBzY2FsZSA9IHNjcmF0Y2hDYXJ0ZXNpYW4zNjsKICAgICAgICBzY2FsZS54ID0gdTEyIC0gbDE7CiAgICAgICAgc2NhbGUueSA9IHUyMiAtIGwyOwogICAgICAgIHNjYWxlLnogPSB1MyAtIGwzOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKHNjYWxlLCAwLjUsIHNjYWxlKTsKICAgICAgICBNYXRyaXgzX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxlKHJlc3VsdC5oYWxmQXhlcywgc2NhbGUsIHJlc3VsdC5oYWxmQXhlcyk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgc2NyYXRjaE9mZnNldCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFNjYWxlMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFJlY3RhbmdsZUNlbnRlckNhcnRvZ3JhcGhpYyA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoUmVjdGFuZ2xlQ2VudGVyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoUGVyaW1ldGVyQ2FydG9ncmFwaGljTkMgPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFBlcmltZXRlckNhcnRvZ3JhcGhpY05XID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hQZXJpbWV0ZXJDYXJ0b2dyYXBoaWNDVyA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoUGVyaW1ldGVyQ2FydG9ncmFwaGljU1cgPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFBlcmltZXRlckNhcnRvZ3JhcGhpY1NDID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hQZXJpbWV0ZXJDYXJ0ZXNpYW5OQyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFBlcmltZXRlckNhcnRlc2lhbk5XID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoUGVyaW1ldGVyQ2FydGVzaWFuQ1cgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hQZXJpbWV0ZXJDYXJ0ZXNpYW5TVyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFBlcmltZXRlckNhcnRlc2lhblNDID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoUGVyaW1ldGVyUHJvamVjdGVkTkMgPSBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hQZXJpbWV0ZXJQcm9qZWN0ZWROVyA9IG5ldyBDYXJ0ZXNpYW4yX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFBlcmltZXRlclByb2plY3RlZENXID0gbmV3IENhcnRlc2lhbjJfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoUGVyaW1ldGVyUHJvamVjdGVkU1cgPSBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hQZXJpbWV0ZXJQcm9qZWN0ZWRTQyA9IG5ldyBDYXJ0ZXNpYW4yX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFBsYW5lT3JpZ2luID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoUGxhbmVOb3JtYWwgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hQbGFuZVhBeGlzID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoSG9yaXpvbkNhcnRlc2lhbiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaEhvcml6b25Qcm9qZWN0ZWQgPSBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hNYXhZID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoTWluWSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFogPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hQbGFuZSA9IG5ldyBQbGFuZV9kZWZhdWx0KENhcnRlc2lhbjNfZGVmYXVsdC5VTklUX1gsIDApOwogICAgICBPcmllbnRlZEJvdW5kaW5nQm94LmZyb21SZWN0YW5nbGUgPSBmdW5jdGlvbihyZWN0YW5nbGUsIG1pbmltdW1IZWlnaHQsIG1heGltdW1IZWlnaHQsIGVsbGlwc29pZCwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVjdGFuZ2xlKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInJlY3RhbmdsZSBpcyByZXF1aXJlZCIpOwogICAgICAgIH0KICAgICAgICBpZiAocmVjdGFuZ2xlLndpZHRoIDwgMCB8fCByZWN0YW5nbGUud2lkdGggPiBNYXRoX2RlZmF1bHQuVFdPX1BJKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiUmVjdGFuZ2xlIHdpZHRoIG11c3QgYmUgYmV0d2VlbiAwIGFuZCAyICogcGkiKTsKICAgICAgICB9CiAgICAgICAgaWYgKHJlY3RhbmdsZS5oZWlnaHQgPCAwIHx8IHJlY3RhbmdsZS5oZWlnaHQgPiBNYXRoX2RlZmF1bHQuUEkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJSZWN0YW5nbGUgaGVpZ2h0IG11c3QgYmUgYmV0d2VlbiAwIGFuZCBwaSIpOwogICAgICAgIH0KICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGVsbGlwc29pZCkgJiYgIU1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgZWxsaXBzb2lkLnJhZGlpLngsCiAgICAgICAgICBlbGxpcHNvaWQucmFkaWkueSwKICAgICAgICAgIE1hdGhfZGVmYXVsdC5FUFNJTE9OMTUKICAgICAgICApKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgIkVsbGlwc29pZCBtdXN0IGJlIGFuIGVsbGlwc29pZCBvZiByZXZvbHV0aW9uIChyYWRpaS54ID09IHJhZGlpLnkpIgogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgbWluaW11bUhlaWdodCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG1pbmltdW1IZWlnaHQsIDApOwogICAgICAgIG1heGltdW1IZWlnaHQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChtYXhpbXVtSGVpZ2h0LCAwKTsKICAgICAgICBlbGxpcHNvaWQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChlbGxpcHNvaWQsIEVsbGlwc29pZF9kZWZhdWx0LmRlZmF1bHQpOwogICAgICAgIGxldCBtaW5YLCBtYXhYLCBtaW5ZLCBtYXhZLCBtaW5aLCBtYXhaLCBwbGFuZTsKICAgICAgICBpZiAocmVjdGFuZ2xlLndpZHRoIDw9IE1hdGhfZGVmYXVsdC5QSSkgewogICAgICAgICAgY29uc3QgdGFuZ2VudFBvaW50Q2FydG9ncmFwaGljID0gUmVjdGFuZ2xlX2RlZmF1bHQuY2VudGVyKAogICAgICAgICAgICByZWN0YW5nbGUsCiAgICAgICAgICAgIHNjcmF0Y2hSZWN0YW5nbGVDZW50ZXJDYXJ0b2dyYXBoaWMKICAgICAgICAgICk7CiAgICAgICAgICBjb25zdCB0YW5nZW50UG9pbnQgPSBlbGxpcHNvaWQuY2FydG9ncmFwaGljVG9DYXJ0ZXNpYW4oCiAgICAgICAgICAgIHRhbmdlbnRQb2ludENhcnRvZ3JhcGhpYywKICAgICAgICAgICAgc2NyYXRjaFJlY3RhbmdsZUNlbnRlcgogICAgICAgICAgKTsKICAgICAgICAgIGNvbnN0IHRhbmdlbnRQbGFuZSA9IG5ldyBFbGxpcHNvaWRUYW5nZW50UGxhbmVfZGVmYXVsdCh0YW5nZW50UG9pbnQsIGVsbGlwc29pZCk7CiAgICAgICAgICBwbGFuZSA9IHRhbmdlbnRQbGFuZS5wbGFuZTsKICAgICAgICAgIGNvbnN0IGxvbkNlbnRlciA9IHRhbmdlbnRQb2ludENhcnRvZ3JhcGhpYy5sb25naXR1ZGU7CiAgICAgICAgICBjb25zdCBsYXRDZW50ZXIgPSByZWN0YW5nbGUuc291dGggPCAwICYmIHJlY3RhbmdsZS5ub3J0aCA+IDAgPyAwIDogdGFuZ2VudFBvaW50Q2FydG9ncmFwaGljLmxhdGl0dWRlOwogICAgICAgICAgY29uc3QgcGVyaW1ldGVyQ2FydG9ncmFwaGljTkMgPSBDYXJ0b2dyYXBoaWNfZGVmYXVsdC5mcm9tUmFkaWFucygKICAgICAgICAgICAgbG9uQ2VudGVyLAogICAgICAgICAgICByZWN0YW5nbGUubm9ydGgsCiAgICAgICAgICAgIG1heGltdW1IZWlnaHQsCiAgICAgICAgICAgIHNjcmF0Y2hQZXJpbWV0ZXJDYXJ0b2dyYXBoaWNOQwogICAgICAgICAgKTsKICAgICAgICAgIGNvbnN0IHBlcmltZXRlckNhcnRvZ3JhcGhpY05XID0gQ2FydG9ncmFwaGljX2RlZmF1bHQuZnJvbVJhZGlhbnMoCiAgICAgICAgICAgIHJlY3RhbmdsZS53ZXN0LAogICAgICAgICAgICByZWN0YW5nbGUubm9ydGgsCiAgICAgICAgICAgIG1heGltdW1IZWlnaHQsCiAgICAgICAgICAgIHNjcmF0Y2hQZXJpbWV0ZXJDYXJ0b2dyYXBoaWNOVwogICAgICAgICAgKTsKICAgICAgICAgIGNvbnN0IHBlcmltZXRlckNhcnRvZ3JhcGhpY0NXID0gQ2FydG9ncmFwaGljX2RlZmF1bHQuZnJvbVJhZGlhbnMoCiAgICAgICAgICAgIHJlY3RhbmdsZS53ZXN0LAogICAgICAgICAgICBsYXRDZW50ZXIsCiAgICAgICAgICAgIG1heGltdW1IZWlnaHQsCiAgICAgICAgICAgIHNjcmF0Y2hQZXJpbWV0ZXJDYXJ0b2dyYXBoaWNDVwogICAgICAgICAgKTsKICAgICAgICAgIGNvbnN0IHBlcmltZXRlckNhcnRvZ3JhcGhpY1NXID0gQ2FydG9ncmFwaGljX2RlZmF1bHQuZnJvbVJhZGlhbnMoCiAgICAgICAgICAgIHJlY3RhbmdsZS53ZXN0LAogICAgICAgICAgICByZWN0YW5nbGUuc291dGgsCiAgICAgICAgICAgIG1heGltdW1IZWlnaHQsCiAgICAgICAgICAgIHNjcmF0Y2hQZXJpbWV0ZXJDYXJ0b2dyYXBoaWNTVwogICAgICAgICAgKTsKICAgICAgICAgIGNvbnN0IHBlcmltZXRlckNhcnRvZ3JhcGhpY1NDID0gQ2FydG9ncmFwaGljX2RlZmF1bHQuZnJvbVJhZGlhbnMoCiAgICAgICAgICAgIGxvbkNlbnRlciwKICAgICAgICAgICAgcmVjdGFuZ2xlLnNvdXRoLAogICAgICAgICAgICBtYXhpbXVtSGVpZ2h0LAogICAgICAgICAgICBzY3JhdGNoUGVyaW1ldGVyQ2FydG9ncmFwaGljU0MKICAgICAgICAgICk7CiAgICAgICAgICBjb25zdCBwZXJpbWV0ZXJDYXJ0ZXNpYW5OQyA9IGVsbGlwc29pZC5jYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbigKICAgICAgICAgICAgcGVyaW1ldGVyQ2FydG9ncmFwaGljTkMsCiAgICAgICAgICAgIHNjcmF0Y2hQZXJpbWV0ZXJDYXJ0ZXNpYW5OQwogICAgICAgICAgKTsKICAgICAgICAgIGxldCBwZXJpbWV0ZXJDYXJ0ZXNpYW5OVyA9IGVsbGlwc29pZC5jYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbigKICAgICAgICAgICAgcGVyaW1ldGVyQ2FydG9ncmFwaGljTlcsCiAgICAgICAgICAgIHNjcmF0Y2hQZXJpbWV0ZXJDYXJ0ZXNpYW5OVwogICAgICAgICAgKTsKICAgICAgICAgIGNvbnN0IHBlcmltZXRlckNhcnRlc2lhbkNXID0gZWxsaXBzb2lkLmNhcnRvZ3JhcGhpY1RvQ2FydGVzaWFuKAogICAgICAgICAgICBwZXJpbWV0ZXJDYXJ0b2dyYXBoaWNDVywKICAgICAgICAgICAgc2NyYXRjaFBlcmltZXRlckNhcnRlc2lhbkNXCiAgICAgICAgICApOwogICAgICAgICAgbGV0IHBlcmltZXRlckNhcnRlc2lhblNXID0gZWxsaXBzb2lkLmNhcnRvZ3JhcGhpY1RvQ2FydGVzaWFuKAogICAgICAgICAgICBwZXJpbWV0ZXJDYXJ0b2dyYXBoaWNTVywKICAgICAgICAgICAgc2NyYXRjaFBlcmltZXRlckNhcnRlc2lhblNXCiAgICAgICAgICApOwogICAgICAgICAgY29uc3QgcGVyaW1ldGVyQ2FydGVzaWFuU0MgPSBlbGxpcHNvaWQuY2FydG9ncmFwaGljVG9DYXJ0ZXNpYW4oCiAgICAgICAgICAgIHBlcmltZXRlckNhcnRvZ3JhcGhpY1NDLAogICAgICAgICAgICBzY3JhdGNoUGVyaW1ldGVyQ2FydGVzaWFuU0MKICAgICAgICAgICk7CiAgICAgICAgICBjb25zdCBwZXJpbWV0ZXJQcm9qZWN0ZWROQyA9IHRhbmdlbnRQbGFuZS5wcm9qZWN0UG9pbnRUb05lYXJlc3RPblBsYW5lKAogICAgICAgICAgICBwZXJpbWV0ZXJDYXJ0ZXNpYW5OQywKICAgICAgICAgICAgc2NyYXRjaFBlcmltZXRlclByb2plY3RlZE5DCiAgICAgICAgICApOwogICAgICAgICAgY29uc3QgcGVyaW1ldGVyUHJvamVjdGVkTlcgPSB0YW5nZW50UGxhbmUucHJvamVjdFBvaW50VG9OZWFyZXN0T25QbGFuZSgKICAgICAgICAgICAgcGVyaW1ldGVyQ2FydGVzaWFuTlcsCiAgICAgICAgICAgIHNjcmF0Y2hQZXJpbWV0ZXJQcm9qZWN0ZWROVwogICAgICAgICAgKTsKICAgICAgICAgIGNvbnN0IHBlcmltZXRlclByb2plY3RlZENXID0gdGFuZ2VudFBsYW5lLnByb2plY3RQb2ludFRvTmVhcmVzdE9uUGxhbmUoCiAgICAgICAgICAgIHBlcmltZXRlckNhcnRlc2lhbkNXLAogICAgICAgICAgICBzY3JhdGNoUGVyaW1ldGVyUHJvamVjdGVkQ1cKICAgICAgICAgICk7CiAgICAgICAgICBjb25zdCBwZXJpbWV0ZXJQcm9qZWN0ZWRTVyA9IHRhbmdlbnRQbGFuZS5wcm9qZWN0UG9pbnRUb05lYXJlc3RPblBsYW5lKAogICAgICAgICAgICBwZXJpbWV0ZXJDYXJ0ZXNpYW5TVywKICAgICAgICAgICAgc2NyYXRjaFBlcmltZXRlclByb2plY3RlZFNXCiAgICAgICAgICApOwogICAgICAgICAgY29uc3QgcGVyaW1ldGVyUHJvamVjdGVkU0MgPSB0YW5nZW50UGxhbmUucHJvamVjdFBvaW50VG9OZWFyZXN0T25QbGFuZSgKICAgICAgICAgICAgcGVyaW1ldGVyQ2FydGVzaWFuU0MsCiAgICAgICAgICAgIHNjcmF0Y2hQZXJpbWV0ZXJQcm9qZWN0ZWRTQwogICAgICAgICAgKTsKICAgICAgICAgIG1pblggPSBNYXRoLm1pbigKICAgICAgICAgICAgcGVyaW1ldGVyUHJvamVjdGVkTlcueCwKICAgICAgICAgICAgcGVyaW1ldGVyUHJvamVjdGVkQ1cueCwKICAgICAgICAgICAgcGVyaW1ldGVyUHJvamVjdGVkU1cueAogICAgICAgICAgKTsKICAgICAgICAgIG1heFggPSAtbWluWDsKICAgICAgICAgIG1heFkgPSBNYXRoLm1heChwZXJpbWV0ZXJQcm9qZWN0ZWROVy55LCBwZXJpbWV0ZXJQcm9qZWN0ZWROQy55KTsKICAgICAgICAgIG1pblkgPSBNYXRoLm1pbihwZXJpbWV0ZXJQcm9qZWN0ZWRTVy55LCBwZXJpbWV0ZXJQcm9qZWN0ZWRTQy55KTsKICAgICAgICAgIHBlcmltZXRlckNhcnRvZ3JhcGhpY05XLmhlaWdodCA9IHBlcmltZXRlckNhcnRvZ3JhcGhpY1NXLmhlaWdodCA9IG1pbmltdW1IZWlnaHQ7CiAgICAgICAgICBwZXJpbWV0ZXJDYXJ0ZXNpYW5OVyA9IGVsbGlwc29pZC5jYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbigKICAgICAgICAgICAgcGVyaW1ldGVyQ2FydG9ncmFwaGljTlcsCiAgICAgICAgICAgIHNjcmF0Y2hQZXJpbWV0ZXJDYXJ0ZXNpYW5OVwogICAgICAgICAgKTsKICAgICAgICAgIHBlcmltZXRlckNhcnRlc2lhblNXID0gZWxsaXBzb2lkLmNhcnRvZ3JhcGhpY1RvQ2FydGVzaWFuKAogICAgICAgICAgICBwZXJpbWV0ZXJDYXJ0b2dyYXBoaWNTVywKICAgICAgICAgICAgc2NyYXRjaFBlcmltZXRlckNhcnRlc2lhblNXCiAgICAgICAgICApOwogICAgICAgICAgbWluWiA9IE1hdGgubWluKAogICAgICAgICAgICBQbGFuZV9kZWZhdWx0LmdldFBvaW50RGlzdGFuY2UocGxhbmUsIHBlcmltZXRlckNhcnRlc2lhbk5XKSwKICAgICAgICAgICAgUGxhbmVfZGVmYXVsdC5nZXRQb2ludERpc3RhbmNlKHBsYW5lLCBwZXJpbWV0ZXJDYXJ0ZXNpYW5TVykKICAgICAgICAgICk7CiAgICAgICAgICBtYXhaID0gbWF4aW11bUhlaWdodDsKICAgICAgICAgIHJldHVybiBmcm9tUGxhbmVFeHRlbnRzKAogICAgICAgICAgICB0YW5nZW50UGxhbmUub3JpZ2luLAogICAgICAgICAgICB0YW5nZW50UGxhbmUueEF4aXMsCiAgICAgICAgICAgIHRhbmdlbnRQbGFuZS55QXhpcywKICAgICAgICAgICAgdGFuZ2VudFBsYW5lLnpBeGlzLAogICAgICAgICAgICBtaW5YLAogICAgICAgICAgICBtYXhYLAogICAgICAgICAgICBtaW5ZLAogICAgICAgICAgICBtYXhZLAogICAgICAgICAgICBtaW5aLAogICAgICAgICAgICBtYXhaLAogICAgICAgICAgICByZXN1bHQKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGZ1bGx5QWJvdmVFcXVhdG9yID0gcmVjdGFuZ2xlLnNvdXRoID4gMDsKICAgICAgICBjb25zdCBmdWxseUJlbG93RXF1YXRvciA9IHJlY3RhbmdsZS5ub3J0aCA8IDA7CiAgICAgICAgY29uc3QgbGF0aXR1ZGVOZWFyZXN0VG9FcXVhdG9yID0gZnVsbHlBYm92ZUVxdWF0b3IgPyByZWN0YW5nbGUuc291dGggOiBmdWxseUJlbG93RXF1YXRvciA/IHJlY3RhbmdsZS5ub3J0aCA6IDA7CiAgICAgICAgY29uc3QgY2VudGVyTG9uZ2l0dWRlID0gUmVjdGFuZ2xlX2RlZmF1bHQuY2VudGVyKAogICAgICAgICAgcmVjdGFuZ2xlLAogICAgICAgICAgc2NyYXRjaFJlY3RhbmdsZUNlbnRlckNhcnRvZ3JhcGhpYwogICAgICAgICkubG9uZ2l0dWRlOwogICAgICAgIGNvbnN0IHBsYW5lT3JpZ2luID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21SYWRpYW5zKAogICAgICAgICAgY2VudGVyTG9uZ2l0dWRlLAogICAgICAgICAgbGF0aXR1ZGVOZWFyZXN0VG9FcXVhdG9yLAogICAgICAgICAgbWF4aW11bUhlaWdodCwKICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgIHNjcmF0Y2hQbGFuZU9yaWdpbgogICAgICAgICk7CiAgICAgICAgcGxhbmVPcmlnaW4ueiA9IDA7CiAgICAgICAgY29uc3QgaXNQb2xlID0gTWF0aC5hYnMocGxhbmVPcmlnaW4ueCkgPCBNYXRoX2RlZmF1bHQuRVBTSUxPTjEwICYmIE1hdGguYWJzKHBsYW5lT3JpZ2luLnkpIDwgTWF0aF9kZWZhdWx0LkVQU0lMT04xMDsKICAgICAgICBjb25zdCBwbGFuZU5vcm1hbCA9ICFpc1BvbGUgPyBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKHBsYW5lT3JpZ2luLCBzY3JhdGNoUGxhbmVOb3JtYWwpIDogQ2FydGVzaWFuM19kZWZhdWx0LlVOSVRfWDsKICAgICAgICBjb25zdCBwbGFuZVlBeGlzID0gQ2FydGVzaWFuM19kZWZhdWx0LlVOSVRfWjsKICAgICAgICBjb25zdCBwbGFuZVhBeGlzID0gQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKAogICAgICAgICAgcGxhbmVOb3JtYWwsCiAgICAgICAgICBwbGFuZVlBeGlzLAogICAgICAgICAgc2NyYXRjaFBsYW5lWEF4aXMKICAgICAgICApOwogICAgICAgIHBsYW5lID0gUGxhbmVfZGVmYXVsdC5mcm9tUG9pbnROb3JtYWwocGxhbmVPcmlnaW4sIHBsYW5lTm9ybWFsLCBzY3JhdGNoUGxhbmUpOwogICAgICAgIGNvbnN0IGhvcml6b25DYXJ0ZXNpYW4gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbVJhZGlhbnMoCiAgICAgICAgICBjZW50ZXJMb25naXR1ZGUgKyBNYXRoX2RlZmF1bHQuUElfT1ZFUl9UV08sCiAgICAgICAgICBsYXRpdHVkZU5lYXJlc3RUb0VxdWF0b3IsCiAgICAgICAgICBtYXhpbXVtSGVpZ2h0LAogICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgc2NyYXRjaEhvcml6b25DYXJ0ZXNpYW4KICAgICAgICApOwogICAgICAgIG1heFggPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KAogICAgICAgICAgUGxhbmVfZGVmYXVsdC5wcm9qZWN0UG9pbnRPbnRvUGxhbmUoCiAgICAgICAgICAgIHBsYW5lLAogICAgICAgICAgICBob3Jpem9uQ2FydGVzaWFuLAogICAgICAgICAgICBzY3JhdGNoSG9yaXpvblByb2plY3RlZAogICAgICAgICAgKSwKICAgICAgICAgIHBsYW5lWEF4aXMKICAgICAgICApOwogICAgICAgIG1pblggPSAtbWF4WDsKICAgICAgICBtYXhZID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21SYWRpYW5zKAogICAgICAgICAgMCwKICAgICAgICAgIHJlY3RhbmdsZS5ub3J0aCwKICAgICAgICAgIGZ1bGx5QmVsb3dFcXVhdG9yID8gbWluaW11bUhlaWdodCA6IG1heGltdW1IZWlnaHQsCiAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICBzY3JhdGNoTWF4WQogICAgICAgICkuejsKICAgICAgICBtaW5ZID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21SYWRpYW5zKAogICAgICAgICAgMCwKICAgICAgICAgIHJlY3RhbmdsZS5zb3V0aCwKICAgICAgICAgIGZ1bGx5QWJvdmVFcXVhdG9yID8gbWluaW11bUhlaWdodCA6IG1heGltdW1IZWlnaHQsCiAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICBzY3JhdGNoTWluWQogICAgICAgICkuejsKICAgICAgICBjb25zdCBmYXJaID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21SYWRpYW5zKAogICAgICAgICAgcmVjdGFuZ2xlLmVhc3QsCiAgICAgICAgICBsYXRpdHVkZU5lYXJlc3RUb0VxdWF0b3IsCiAgICAgICAgICBtYXhpbXVtSGVpZ2h0LAogICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgc2NyYXRjaFoKICAgICAgICApOwogICAgICAgIG1pblogPSBQbGFuZV9kZWZhdWx0LmdldFBvaW50RGlzdGFuY2UocGxhbmUsIGZhclopOwogICAgICAgIG1heFogPSAwOwogICAgICAgIHJldHVybiBmcm9tUGxhbmVFeHRlbnRzKAogICAgICAgICAgcGxhbmVPcmlnaW4sCiAgICAgICAgICBwbGFuZVhBeGlzLAogICAgICAgICAgcGxhbmVZQXhpcywKICAgICAgICAgIHBsYW5lTm9ybWFsLAogICAgICAgICAgbWluWCwKICAgICAgICAgIG1heFgsCiAgICAgICAgICBtaW5ZLAogICAgICAgICAgbWF4WSwKICAgICAgICAgIG1pblosCiAgICAgICAgICBtYXhaLAogICAgICAgICAgcmVzdWx0CiAgICAgICAgKTsKICAgICAgfTsKICAgICAgT3JpZW50ZWRCb3VuZGluZ0JveC5mcm9tVHJhbnNmb3JtYXRpb24gPSBmdW5jdGlvbih0cmFuc2Zvcm1hdGlvbiwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJ0cmFuc2Zvcm1hdGlvbiIsIHRyYW5zZm9ybWF0aW9uKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgT3JpZW50ZWRCb3VuZGluZ0JveCgpOwogICAgICAgIH0KICAgICAgICByZXN1bHQuY2VudGVyID0gTWF0cml4NF9kZWZhdWx0LmdldFRyYW5zbGF0aW9uKHRyYW5zZm9ybWF0aW9uLCByZXN1bHQuY2VudGVyKTsKICAgICAgICByZXN1bHQuaGFsZkF4ZXMgPSBNYXRyaXg0X2RlZmF1bHQuZ2V0TWF0cml4Myh0cmFuc2Zvcm1hdGlvbiwgcmVzdWx0LmhhbGZBeGVzKTsKICAgICAgICByZXN1bHQuaGFsZkF4ZXMgPSBNYXRyaXgzX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcigKICAgICAgICAgIHJlc3VsdC5oYWxmQXhlcywKICAgICAgICAgIDAuNSwKICAgICAgICAgIHJlc3VsdC5oYWxmQXhlcwogICAgICAgICk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgT3JpZW50ZWRCb3VuZGluZ0JveC5jbG9uZSA9IGZ1bmN0aW9uKGJveCwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoYm94KSkgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBPcmllbnRlZEJvdW5kaW5nQm94KGJveC5jZW50ZXIsIGJveC5oYWxmQXhlcyk7CiAgICAgICAgfQogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShib3guY2VudGVyLCByZXN1bHQuY2VudGVyKTsKICAgICAgICBNYXRyaXgzX2RlZmF1bHQuY2xvbmUoYm94LmhhbGZBeGVzLCByZXN1bHQuaGFsZkF4ZXMpOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE9yaWVudGVkQm91bmRpbmdCb3guaW50ZXJzZWN0UGxhbmUgPSBmdW5jdGlvbihib3gsIHBsYW5lKSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoYm94KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImJveCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocGxhbmUpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgicGxhbmUgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGNlbnRlciA9IGJveC5jZW50ZXI7CiAgICAgICAgY29uc3Qgbm9ybWFsMiA9IHBsYW5lLm5vcm1hbDsKICAgICAgICBjb25zdCBoYWxmQXhlcyA9IGJveC5oYWxmQXhlczsKICAgICAgICBjb25zdCBub3JtYWxYID0gbm9ybWFsMi54LCBub3JtYWxZID0gbm9ybWFsMi55LCBub3JtYWxaID0gbm9ybWFsMi56OwogICAgICAgIGNvbnN0IHJhZEVmZmVjdGl2ZSA9IE1hdGguYWJzKAogICAgICAgICAgbm9ybWFsWCAqIGhhbGZBeGVzW01hdHJpeDNfZGVmYXVsdC5DT0xVTU4wUk9XMF0gKyBub3JtYWxZICogaGFsZkF4ZXNbTWF0cml4M19kZWZhdWx0LkNPTFVNTjBST1cxXSArIG5vcm1hbFogKiBoYWxmQXhlc1tNYXRyaXgzX2RlZmF1bHQuQ09MVU1OMFJPVzJdCiAgICAgICAgKSArIE1hdGguYWJzKAogICAgICAgICAgbm9ybWFsWCAqIGhhbGZBeGVzW01hdHJpeDNfZGVmYXVsdC5DT0xVTU4xUk9XMF0gKyBub3JtYWxZICogaGFsZkF4ZXNbTWF0cml4M19kZWZhdWx0LkNPTFVNTjFST1cxXSArIG5vcm1hbFogKiBoYWxmQXhlc1tNYXRyaXgzX2RlZmF1bHQuQ09MVU1OMVJPVzJdCiAgICAgICAgKSArIE1hdGguYWJzKAogICAgICAgICAgbm9ybWFsWCAqIGhhbGZBeGVzW01hdHJpeDNfZGVmYXVsdC5DT0xVTU4yUk9XMF0gKyBub3JtYWxZICogaGFsZkF4ZXNbTWF0cml4M19kZWZhdWx0LkNPTFVNTjJST1cxXSArIG5vcm1hbFogKiBoYWxmQXhlc1tNYXRyaXgzX2RlZmF1bHQuQ09MVU1OMlJPVzJdCiAgICAgICAgKTsKICAgICAgICBjb25zdCBkaXN0YW5jZVRvUGxhbmUgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KG5vcm1hbDIsIGNlbnRlcikgKyBwbGFuZS5kaXN0YW5jZTsKICAgICAgICBpZiAoZGlzdGFuY2VUb1BsYW5lIDw9IC1yYWRFZmZlY3RpdmUpIHsKICAgICAgICAgIHJldHVybiBJbnRlcnNlY3RfZGVmYXVsdC5PVVRTSURFOwogICAgICAgIH0gZWxzZSBpZiAoZGlzdGFuY2VUb1BsYW5lID49IHJhZEVmZmVjdGl2ZSkgewogICAgICAgICAgcmV0dXJuIEludGVyc2VjdF9kZWZhdWx0LklOU0lERTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIEludGVyc2VjdF9kZWZhdWx0LklOVEVSU0VDVElORzsKICAgICAgfTsKICAgICAgc2NyYXRjaENhcnRlc2lhblUgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW5WID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQ2FydGVzaWFuVyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFZhbGlkQXhpczIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hWYWxpZEF4aXMzID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoUFByaW1lID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBPcmllbnRlZEJvdW5kaW5nQm94LmRpc3RhbmNlU3F1YXJlZFRvID0gZnVuY3Rpb24oYm94LCBjYXJ0ZXNpYW4xMSkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGJveCkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJib3ggaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGNhcnRlc2lhbjExKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImNhcnRlc2lhbiBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KGNhcnRlc2lhbjExLCBib3guY2VudGVyLCBzY3JhdGNoT2Zmc2V0KTsKICAgICAgICBjb25zdCBoYWxmQXhlcyA9IGJveC5oYWxmQXhlczsKICAgICAgICBsZXQgdTMgPSBNYXRyaXgzX2RlZmF1bHQuZ2V0Q29sdW1uKGhhbGZBeGVzLCAwLCBzY3JhdGNoQ2FydGVzaWFuVSk7CiAgICAgICAgbGV0IHYzID0gTWF0cml4M19kZWZhdWx0LmdldENvbHVtbihoYWxmQXhlcywgMSwgc2NyYXRjaENhcnRlc2lhblYpOwogICAgICAgIGxldCB3ID0gTWF0cml4M19kZWZhdWx0LmdldENvbHVtbihoYWxmQXhlcywgMiwgc2NyYXRjaENhcnRlc2lhblcpOwogICAgICAgIGNvbnN0IHVIYWxmID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZSh1Myk7CiAgICAgICAgY29uc3QgdkhhbGYgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlKHYzKTsKICAgICAgICBjb25zdCB3SGFsZiA9IENhcnRlc2lhbjNfZGVmYXVsdC5tYWduaXR1ZGUodyk7CiAgICAgICAgbGV0IHVWYWxpZCA9IHRydWU7CiAgICAgICAgbGV0IHZWYWxpZCA9IHRydWU7CiAgICAgICAgbGV0IHdWYWxpZCA9IHRydWU7CiAgICAgICAgaWYgKHVIYWxmID4gMCkgewogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmRpdmlkZUJ5U2NhbGFyKHUzLCB1SGFsZiwgdTMpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB1VmFsaWQgPSBmYWxzZTsKICAgICAgICB9CiAgICAgICAgaWYgKHZIYWxmID4gMCkgewogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmRpdmlkZUJ5U2NhbGFyKHYzLCB2SGFsZiwgdjMpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB2VmFsaWQgPSBmYWxzZTsKICAgICAgICB9CiAgICAgICAgaWYgKHdIYWxmID4gMCkgewogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmRpdmlkZUJ5U2NhbGFyKHcsIHdIYWxmLCB3KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgd1ZhbGlkID0gZmFsc2U7CiAgICAgICAgfQogICAgICAgIGNvbnN0IG51bWJlck9mRGVnZW5lcmF0ZUF4ZXMgPSAhdVZhbGlkICsgIXZWYWxpZCArICF3VmFsaWQ7CiAgICAgICAgbGV0IHZhbGlkQXhpczE7CiAgICAgICAgbGV0IHZhbGlkQXhpczI7CiAgICAgICAgbGV0IHZhbGlkQXhpczM7CiAgICAgICAgaWYgKG51bWJlck9mRGVnZW5lcmF0ZUF4ZXMgPT09IDEpIHsKICAgICAgICAgIGxldCBkZWdlbmVyYXRlQXhpcyA9IHUzOwogICAgICAgICAgdmFsaWRBeGlzMSA9IHYzOwogICAgICAgICAgdmFsaWRBeGlzMiA9IHc7CiAgICAgICAgICBpZiAoIXZWYWxpZCkgewogICAgICAgICAgICBkZWdlbmVyYXRlQXhpcyA9IHYzOwogICAgICAgICAgICB2YWxpZEF4aXMxID0gdTM7CiAgICAgICAgICB9IGVsc2UgaWYgKCF3VmFsaWQpIHsKICAgICAgICAgICAgZGVnZW5lcmF0ZUF4aXMgPSB3OwogICAgICAgICAgICB2YWxpZEF4aXMyID0gdTM7CiAgICAgICAgICB9CiAgICAgICAgICB2YWxpZEF4aXMzID0gQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKHZhbGlkQXhpczEsIHZhbGlkQXhpczIsIHNjcmF0Y2hWYWxpZEF4aXMzKTsKICAgICAgICAgIGlmIChkZWdlbmVyYXRlQXhpcyA9PT0gdTMpIHsKICAgICAgICAgICAgdTMgPSB2YWxpZEF4aXMzOwogICAgICAgICAgfSBlbHNlIGlmIChkZWdlbmVyYXRlQXhpcyA9PT0gdjMpIHsKICAgICAgICAgICAgdjMgPSB2YWxpZEF4aXMzOwogICAgICAgICAgfSBlbHNlIGlmIChkZWdlbmVyYXRlQXhpcyA9PT0gdykgewogICAgICAgICAgICB3ID0gdmFsaWRBeGlzMzsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKG51bWJlck9mRGVnZW5lcmF0ZUF4ZXMgPT09IDIpIHsKICAgICAgICAgIHZhbGlkQXhpczEgPSB1MzsKICAgICAgICAgIGlmICh2VmFsaWQpIHsKICAgICAgICAgICAgdmFsaWRBeGlzMSA9IHYzOwogICAgICAgICAgfSBlbHNlIGlmICh3VmFsaWQpIHsKICAgICAgICAgICAgdmFsaWRBeGlzMSA9IHc7CiAgICAgICAgICB9CiAgICAgICAgICBsZXQgY3Jvc3NWZWN0b3IgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuVU5JVF9ZOwogICAgICAgICAgaWYgKGNyb3NzVmVjdG9yLmVxdWFsc0Vwc2lsb24odmFsaWRBeGlzMSwgTWF0aF9kZWZhdWx0LkVQU0lMT04zKSkgewogICAgICAgICAgICBjcm9zc1ZlY3RvciA9IENhcnRlc2lhbjNfZGVmYXVsdC5VTklUX1g7CiAgICAgICAgICB9CiAgICAgICAgICB2YWxpZEF4aXMyID0gQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKHZhbGlkQXhpczEsIGNyb3NzVmVjdG9yLCBzY3JhdGNoVmFsaWRBeGlzMik7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKHZhbGlkQXhpczIsIHZhbGlkQXhpczIpOwogICAgICAgICAgdmFsaWRBeGlzMyA9IENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyh2YWxpZEF4aXMxLCB2YWxpZEF4aXMyLCBzY3JhdGNoVmFsaWRBeGlzMyk7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKHZhbGlkQXhpczMsIHZhbGlkQXhpczMpOwogICAgICAgICAgaWYgKHZhbGlkQXhpczEgPT09IHUzKSB7CiAgICAgICAgICAgIHYzID0gdmFsaWRBeGlzMjsKICAgICAgICAgICAgdyA9IHZhbGlkQXhpczM7CiAgICAgICAgICB9IGVsc2UgaWYgKHZhbGlkQXhpczEgPT09IHYzKSB7CiAgICAgICAgICAgIHcgPSB2YWxpZEF4aXMyOwogICAgICAgICAgICB1MyA9IHZhbGlkQXhpczM7CiAgICAgICAgICB9IGVsc2UgaWYgKHZhbGlkQXhpczEgPT09IHcpIHsKICAgICAgICAgICAgdTMgPSB2YWxpZEF4aXMyOwogICAgICAgICAgICB2MyA9IHZhbGlkQXhpczM7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmIChudW1iZXJPZkRlZ2VuZXJhdGVBeGVzID09PSAzKSB7CiAgICAgICAgICB1MyA9IENhcnRlc2lhbjNfZGVmYXVsdC5VTklUX1g7CiAgICAgICAgICB2MyA9IENhcnRlc2lhbjNfZGVmYXVsdC5VTklUX1k7CiAgICAgICAgICB3ID0gQ2FydGVzaWFuM19kZWZhdWx0LlVOSVRfWjsKICAgICAgICB9CiAgICAgICAgY29uc3QgcFByaW1lID0gc2NyYXRjaFBQcmltZTsKICAgICAgICBwUHJpbWUueCA9IENhcnRlc2lhbjNfZGVmYXVsdC5kb3Qob2Zmc2V0LCB1Myk7CiAgICAgICAgcFByaW1lLnkgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KG9mZnNldCwgdjMpOwogICAgICAgIHBQcmltZS56ID0gQ2FydGVzaWFuM19kZWZhdWx0LmRvdChvZmZzZXQsIHcpOwogICAgICAgIGxldCBkaXN0YW5jZVNxdWFyZWQgPSAwOwogICAgICAgIGxldCBkOwogICAgICAgIGlmIChwUHJpbWUueCA8IC11SGFsZikgewogICAgICAgICAgZCA9IHBQcmltZS54ICsgdUhhbGY7CiAgICAgICAgICBkaXN0YW5jZVNxdWFyZWQgKz0gZCAqIGQ7CiAgICAgICAgfSBlbHNlIGlmIChwUHJpbWUueCA+IHVIYWxmKSB7CiAgICAgICAgICBkID0gcFByaW1lLnggLSB1SGFsZjsKICAgICAgICAgIGRpc3RhbmNlU3F1YXJlZCArPSBkICogZDsKICAgICAgICB9CiAgICAgICAgaWYgKHBQcmltZS55IDwgLXZIYWxmKSB7CiAgICAgICAgICBkID0gcFByaW1lLnkgKyB2SGFsZjsKICAgICAgICAgIGRpc3RhbmNlU3F1YXJlZCArPSBkICogZDsKICAgICAgICB9IGVsc2UgaWYgKHBQcmltZS55ID4gdkhhbGYpIHsKICAgICAgICAgIGQgPSBwUHJpbWUueSAtIHZIYWxmOwogICAgICAgICAgZGlzdGFuY2VTcXVhcmVkICs9IGQgKiBkOwogICAgICAgIH0KICAgICAgICBpZiAocFByaW1lLnogPCAtd0hhbGYpIHsKICAgICAgICAgIGQgPSBwUHJpbWUueiArIHdIYWxmOwogICAgICAgICAgZGlzdGFuY2VTcXVhcmVkICs9IGQgKiBkOwogICAgICAgIH0gZWxzZSBpZiAocFByaW1lLnogPiB3SGFsZikgewogICAgICAgICAgZCA9IHBQcmltZS56IC0gd0hhbGY7CiAgICAgICAgICBkaXN0YW5jZVNxdWFyZWQgKz0gZCAqIGQ7CiAgICAgICAgfQogICAgICAgIHJldHVybiBkaXN0YW5jZVNxdWFyZWQ7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hDb3JuZXIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hUb0NlbnRlciA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgT3JpZW50ZWRCb3VuZGluZ0JveC5jb21wdXRlUGxhbmVEaXN0YW5jZXMgPSBmdW5jdGlvbihib3gsIHBvc2l0aW9uLCBkaXJlY3Rpb24yLCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChib3gpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYm94IGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwb3NpdGlvbikpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJwb3NpdGlvbiBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoZGlyZWN0aW9uMikpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJkaXJlY3Rpb24gaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBJbnRlcnZhbF9kZWZhdWx0KCk7CiAgICAgICAgfQogICAgICAgIGxldCBtaW5EaXN0ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOwogICAgICAgIGxldCBtYXhEaXN0ID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZOwogICAgICAgIGNvbnN0IGNlbnRlciA9IGJveC5jZW50ZXI7CiAgICAgICAgY29uc3QgaGFsZkF4ZXMgPSBib3guaGFsZkF4ZXM7CiAgICAgICAgY29uc3QgdTMgPSBNYXRyaXgzX2RlZmF1bHQuZ2V0Q29sdW1uKGhhbGZBeGVzLCAwLCBzY3JhdGNoQ2FydGVzaWFuVSk7CiAgICAgICAgY29uc3QgdjMgPSBNYXRyaXgzX2RlZmF1bHQuZ2V0Q29sdW1uKGhhbGZBeGVzLCAxLCBzY3JhdGNoQ2FydGVzaWFuVik7CiAgICAgICAgY29uc3QgdyA9IE1hdHJpeDNfZGVmYXVsdC5nZXRDb2x1bW4oaGFsZkF4ZXMsIDIsIHNjcmF0Y2hDYXJ0ZXNpYW5XKTsKICAgICAgICBjb25zdCBjb3JuZXIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKHUzLCB2Mywgc2NyYXRjaENvcm5lcik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChjb3JuZXIsIHcsIGNvcm5lcik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChjb3JuZXIsIGNlbnRlciwgY29ybmVyKTsKICAgICAgICBjb25zdCB0b0NlbnRlciA9IENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChjb3JuZXIsIHBvc2l0aW9uLCBzY3JhdGNoVG9DZW50ZXIpOwogICAgICAgIGxldCBtYWcgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KGRpcmVjdGlvbjIsIHRvQ2VudGVyKTsKICAgICAgICBtaW5EaXN0ID0gTWF0aC5taW4obWFnLCBtaW5EaXN0KTsKICAgICAgICBtYXhEaXN0ID0gTWF0aC5tYXgobWFnLCBtYXhEaXN0KTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKGNlbnRlciwgdTMsIGNvcm5lcik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChjb3JuZXIsIHYzLCBjb3JuZXIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChjb3JuZXIsIHcsIGNvcm5lcik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KGNvcm5lciwgcG9zaXRpb24sIHRvQ2VudGVyKTsKICAgICAgICBtYWcgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KGRpcmVjdGlvbjIsIHRvQ2VudGVyKTsKICAgICAgICBtaW5EaXN0ID0gTWF0aC5taW4obWFnLCBtaW5EaXN0KTsKICAgICAgICBtYXhEaXN0ID0gTWF0aC5tYXgobWFnLCBtYXhEaXN0KTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKGNlbnRlciwgdTMsIGNvcm5lcik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KGNvcm5lciwgdjMsIGNvcm5lcik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChjb3JuZXIsIHcsIGNvcm5lcik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KGNvcm5lciwgcG9zaXRpb24sIHRvQ2VudGVyKTsKICAgICAgICBtYWcgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KGRpcmVjdGlvbjIsIHRvQ2VudGVyKTsKICAgICAgICBtaW5EaXN0ID0gTWF0aC5taW4obWFnLCBtaW5EaXN0KTsKICAgICAgICBtYXhEaXN0ID0gTWF0aC5tYXgobWFnLCBtYXhEaXN0KTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKGNlbnRlciwgdTMsIGNvcm5lcik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KGNvcm5lciwgdjMsIGNvcm5lcik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KGNvcm5lciwgdywgY29ybmVyKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoY29ybmVyLCBwb3NpdGlvbiwgdG9DZW50ZXIpOwogICAgICAgIG1hZyA9IENhcnRlc2lhbjNfZGVmYXVsdC5kb3QoZGlyZWN0aW9uMiwgdG9DZW50ZXIpOwogICAgICAgIG1pbkRpc3QgPSBNYXRoLm1pbihtYWcsIG1pbkRpc3QpOwogICAgICAgIG1heERpc3QgPSBNYXRoLm1heChtYWcsIG1heERpc3QpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChjZW50ZXIsIHUzLCBjb3JuZXIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoY29ybmVyLCB2MywgY29ybmVyKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKGNvcm5lciwgdywgY29ybmVyKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoY29ybmVyLCBwb3NpdGlvbiwgdG9DZW50ZXIpOwogICAgICAgIG1hZyA9IENhcnRlc2lhbjNfZGVmYXVsdC5kb3QoZGlyZWN0aW9uMiwgdG9DZW50ZXIpOwogICAgICAgIG1pbkRpc3QgPSBNYXRoLm1pbihtYWcsIG1pbkRpc3QpOwogICAgICAgIG1heERpc3QgPSBNYXRoLm1heChtYWcsIG1heERpc3QpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChjZW50ZXIsIHUzLCBjb3JuZXIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoY29ybmVyLCB2MywgY29ybmVyKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoY29ybmVyLCB3LCBjb3JuZXIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChjb3JuZXIsIHBvc2l0aW9uLCB0b0NlbnRlcik7CiAgICAgICAgbWFnID0gQ2FydGVzaWFuM19kZWZhdWx0LmRvdChkaXJlY3Rpb24yLCB0b0NlbnRlcik7CiAgICAgICAgbWluRGlzdCA9IE1hdGgubWluKG1hZywgbWluRGlzdCk7CiAgICAgICAgbWF4RGlzdCA9IE1hdGgubWF4KG1hZywgbWF4RGlzdCk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KGNlbnRlciwgdTMsIGNvcm5lcik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KGNvcm5lciwgdjMsIGNvcm5lcik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChjb3JuZXIsIHcsIGNvcm5lcik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KGNvcm5lciwgcG9zaXRpb24sIHRvQ2VudGVyKTsKICAgICAgICBtYWcgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KGRpcmVjdGlvbjIsIHRvQ2VudGVyKTsKICAgICAgICBtaW5EaXN0ID0gTWF0aC5taW4obWFnLCBtaW5EaXN0KTsKICAgICAgICBtYXhEaXN0ID0gTWF0aC5tYXgobWFnLCBtYXhEaXN0KTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoY2VudGVyLCB1MywgY29ybmVyKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoY29ybmVyLCB2MywgY29ybmVyKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoY29ybmVyLCB3LCBjb3JuZXIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChjb3JuZXIsIHBvc2l0aW9uLCB0b0NlbnRlcik7CiAgICAgICAgbWFnID0gQ2FydGVzaWFuM19kZWZhdWx0LmRvdChkaXJlY3Rpb24yLCB0b0NlbnRlcik7CiAgICAgICAgbWluRGlzdCA9IE1hdGgubWluKG1hZywgbWluRGlzdCk7CiAgICAgICAgbWF4RGlzdCA9IE1hdGgubWF4KG1hZywgbWF4RGlzdCk7CiAgICAgICAgcmVzdWx0LnN0YXJ0ID0gbWluRGlzdDsKICAgICAgICByZXN1bHQuc3RvcCA9IG1heERpc3Q7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgc2NyYXRjaFhBeGlzID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoWUF4aXMgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2haQXhpcyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgT3JpZW50ZWRCb3VuZGluZ0JveC5jb21wdXRlQ29ybmVycyA9IGZ1bmN0aW9uKGJveCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJib3giLCBib3gpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IFsKICAgICAgICAgICAgbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpLAogICAgICAgICAgICBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCksCiAgICAgICAgICAgIG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKSwKICAgICAgICAgICAgbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpLAogICAgICAgICAgICBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCksCiAgICAgICAgICAgIG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKSwKICAgICAgICAgICAgbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpLAogICAgICAgICAgICBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCkKICAgICAgICAgIF07CiAgICAgICAgfQogICAgICAgIGNvbnN0IGNlbnRlciA9IGJveC5jZW50ZXI7CiAgICAgICAgY29uc3QgaGFsZkF4ZXMgPSBib3guaGFsZkF4ZXM7CiAgICAgICAgY29uc3QgeEF4aXMgPSBNYXRyaXgzX2RlZmF1bHQuZ2V0Q29sdW1uKGhhbGZBeGVzLCAwLCBzY3JhdGNoWEF4aXMpOwogICAgICAgIGNvbnN0IHlBeGlzID0gTWF0cml4M19kZWZhdWx0LmdldENvbHVtbihoYWxmQXhlcywgMSwgc2NyYXRjaFlBeGlzKTsKICAgICAgICBjb25zdCB6QXhpcyA9IE1hdHJpeDNfZGVmYXVsdC5nZXRDb2x1bW4oaGFsZkF4ZXMsIDIsIHNjcmF0Y2haQXhpcyk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGNlbnRlciwgcmVzdWx0WzBdKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QocmVzdWx0WzBdLCB4QXhpcywgcmVzdWx0WzBdKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QocmVzdWx0WzBdLCB5QXhpcywgcmVzdWx0WzBdKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QocmVzdWx0WzBdLCB6QXhpcywgcmVzdWx0WzBdKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoY2VudGVyLCByZXN1bHRbMV0pOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChyZXN1bHRbMV0sIHhBeGlzLCByZXN1bHRbMV0pOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChyZXN1bHRbMV0sIHlBeGlzLCByZXN1bHRbMV0pOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQocmVzdWx0WzFdLCB6QXhpcywgcmVzdWx0WzFdKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoY2VudGVyLCByZXN1bHRbMl0pOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChyZXN1bHRbMl0sIHhBeGlzLCByZXN1bHRbMl0pOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQocmVzdWx0WzJdLCB5QXhpcywgcmVzdWx0WzJdKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QocmVzdWx0WzJdLCB6QXhpcywgcmVzdWx0WzJdKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoY2VudGVyLCByZXN1bHRbM10pOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChyZXN1bHRbM10sIHhBeGlzLCByZXN1bHRbM10pOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQocmVzdWx0WzNdLCB5QXhpcywgcmVzdWx0WzNdKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKHJlc3VsdFszXSwgekF4aXMsIHJlc3VsdFszXSk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGNlbnRlciwgcmVzdWx0WzRdKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKHJlc3VsdFs0XSwgeEF4aXMsIHJlc3VsdFs0XSk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHJlc3VsdFs0XSwgeUF4aXMsIHJlc3VsdFs0XSk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHJlc3VsdFs0XSwgekF4aXMsIHJlc3VsdFs0XSk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGNlbnRlciwgcmVzdWx0WzVdKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKHJlc3VsdFs1XSwgeEF4aXMsIHJlc3VsdFs1XSk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHJlc3VsdFs1XSwgeUF4aXMsIHJlc3VsdFs1XSk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChyZXN1bHRbNV0sIHpBeGlzLCByZXN1bHRbNV0pOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShjZW50ZXIsIHJlc3VsdFs2XSk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChyZXN1bHRbNl0sIHhBeGlzLCByZXN1bHRbNl0pOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQocmVzdWx0WzZdLCB5QXhpcywgcmVzdWx0WzZdKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QocmVzdWx0WzZdLCB6QXhpcywgcmVzdWx0WzZdKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoY2VudGVyLCByZXN1bHRbN10pOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQocmVzdWx0WzddLCB4QXhpcywgcmVzdWx0WzddKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKHJlc3VsdFs3XSwgeUF4aXMsIHJlc3VsdFs3XSk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChyZXN1bHRbN10sIHpBeGlzLCByZXN1bHRbN10pOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hSb3RhdGlvblNjYWxlID0gbmV3IE1hdHJpeDNfZGVmYXVsdCgpOwogICAgICBPcmllbnRlZEJvdW5kaW5nQm94LmNvbXB1dGVUcmFuc2Zvcm1hdGlvbiA9IGZ1bmN0aW9uKGJveCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJib3giLCBib3gpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBNYXRyaXg0X2RlZmF1bHQoKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgdHJhbnNsYXRpb24yID0gYm94LmNlbnRlcjsKICAgICAgICBjb25zdCByb3RhdGlvblNjYWxlID0gTWF0cml4M19kZWZhdWx0Lm11bHRpcGx5QnlVbmlmb3JtU2NhbGUoCiAgICAgICAgICBib3guaGFsZkF4ZXMsCiAgICAgICAgICAyLAogICAgICAgICAgc2NyYXRjaFJvdGF0aW9uU2NhbGUKICAgICAgICApOwogICAgICAgIHJldHVybiBNYXRyaXg0X2RlZmF1bHQuZnJvbVJvdGF0aW9uVHJhbnNsYXRpb24ocm90YXRpb25TY2FsZSwgdHJhbnNsYXRpb24yLCByZXN1bHQpOwogICAgICB9OwogICAgICBzY3JhdGNoQm91bmRpbmdTcGhlcmUgPSBuZXcgQm91bmRpbmdTcGhlcmVfZGVmYXVsdCgpOwogICAgICBPcmllbnRlZEJvdW5kaW5nQm94LmlzT2NjbHVkZWQgPSBmdW5jdGlvbihib3gsIG9jY2x1ZGVyKSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoYm94KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImJveCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQob2NjbHVkZXIpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgib2NjbHVkZXIgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHNwaGVyZSA9IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQuZnJvbU9yaWVudGVkQm91bmRpbmdCb3goCiAgICAgICAgICBib3gsCiAgICAgICAgICBzY3JhdGNoQm91bmRpbmdTcGhlcmUKICAgICAgICApOwogICAgICAgIHJldHVybiAhb2NjbHVkZXIuaXNCb3VuZGluZ1NwaGVyZVZpc2libGUoc3BoZXJlKTsKICAgICAgfTsKICAgICAgT3JpZW50ZWRCb3VuZGluZ0JveC5wcm90b3R5cGUuaW50ZXJzZWN0UGxhbmUgPSBmdW5jdGlvbihwbGFuZSkgewogICAgICAgIHJldHVybiBPcmllbnRlZEJvdW5kaW5nQm94LmludGVyc2VjdFBsYW5lKHRoaXMsIHBsYW5lKTsKICAgICAgfTsKICAgICAgT3JpZW50ZWRCb3VuZGluZ0JveC5wcm90b3R5cGUuZGlzdGFuY2VTcXVhcmVkVG8gPSBmdW5jdGlvbihjYXJ0ZXNpYW4xMSkgewogICAgICAgIHJldHVybiBPcmllbnRlZEJvdW5kaW5nQm94LmRpc3RhbmNlU3F1YXJlZFRvKHRoaXMsIGNhcnRlc2lhbjExKTsKICAgICAgfTsKICAgICAgT3JpZW50ZWRCb3VuZGluZ0JveC5wcm90b3R5cGUuY29tcHV0ZVBsYW5lRGlzdGFuY2VzID0gZnVuY3Rpb24ocG9zaXRpb24sIGRpcmVjdGlvbjIsIHJlc3VsdCkgewogICAgICAgIHJldHVybiBPcmllbnRlZEJvdW5kaW5nQm94LmNvbXB1dGVQbGFuZURpc3RhbmNlcygKICAgICAgICAgIHRoaXMsCiAgICAgICAgICBwb3NpdGlvbiwKICAgICAgICAgIGRpcmVjdGlvbjIsCiAgICAgICAgICByZXN1bHQKICAgICAgICApOwogICAgICB9OwogICAgICBPcmllbnRlZEJvdW5kaW5nQm94LnByb3RvdHlwZS5jb21wdXRlQ29ybmVycyA9IGZ1bmN0aW9uKHJlc3VsdCkgewogICAgICAgIHJldHVybiBPcmllbnRlZEJvdW5kaW5nQm94LmNvbXB1dGVDb3JuZXJzKHRoaXMsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIE9yaWVudGVkQm91bmRpbmdCb3gucHJvdG90eXBlLmNvbXB1dGVUcmFuc2Zvcm1hdGlvbiA9IGZ1bmN0aW9uKHJlc3VsdCkgewogICAgICAgIHJldHVybiBPcmllbnRlZEJvdW5kaW5nQm94LmNvbXB1dGVUcmFuc2Zvcm1hdGlvbih0aGlzLCByZXN1bHQpOwogICAgICB9OwogICAgICBPcmllbnRlZEJvdW5kaW5nQm94LnByb3RvdHlwZS5pc09jY2x1ZGVkID0gZnVuY3Rpb24ob2NjbHVkZXIpIHsKICAgICAgICByZXR1cm4gT3JpZW50ZWRCb3VuZGluZ0JveC5pc09jY2x1ZGVkKHRoaXMsIG9jY2x1ZGVyKTsKICAgICAgfTsKICAgICAgT3JpZW50ZWRCb3VuZGluZ0JveC5lcXVhbHMgPSBmdW5jdGlvbihsZWZ0LCByaWdodCkgewogICAgICAgIHJldHVybiBsZWZ0ID09PSByaWdodCB8fCBkZWZpbmVkX2RlZmF1bHQobGVmdCkgJiYgZGVmaW5lZF9kZWZhdWx0KHJpZ2h0KSAmJiBDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzKGxlZnQuY2VudGVyLCByaWdodC5jZW50ZXIpICYmIE1hdHJpeDNfZGVmYXVsdC5lcXVhbHMobGVmdC5oYWxmQXhlcywgcmlnaHQuaGFsZkF4ZXMpOwogICAgICB9OwogICAgICBPcmllbnRlZEJvdW5kaW5nQm94LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKHJlc3VsdCkgewogICAgICAgIHJldHVybiBPcmllbnRlZEJvdW5kaW5nQm94LmNsb25lKHRoaXMsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIE9yaWVudGVkQm91bmRpbmdCb3gucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uKHJpZ2h0KSB7CiAgICAgICAgcmV0dXJuIE9yaWVudGVkQm91bmRpbmdCb3guZXF1YWxzKHRoaXMsIHJpZ2h0KTsKICAgICAgfTsKICAgICAgT3JpZW50ZWRCb3VuZGluZ0JveF9kZWZhdWx0ID0gT3JpZW50ZWRCb3VuZGluZ0JveDsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0NvcGxhbmFyUG9seWdvbkdlb21ldHJ5TGlicmFyeS5qcwogIGZ1bmN0aW9uIHByb2plY3RUbzJEKHBvc2l0aW9uLCBjZW50ZXIsIGF4aXMxLCBheGlzMiwgcmVzdWx0KSB7CiAgICBjb25zdCB2MyA9IENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChwb3NpdGlvbiwgY2VudGVyLCBzY3JhdGNoSW50ZXJzZWN0aW9uUG9pbnQpOwogICAgY29uc3QgeCA9IENhcnRlc2lhbjNfZGVmYXVsdC5kb3QoYXhpczEsIHYzKTsKICAgIGNvbnN0IHkgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KGF4aXMyLCB2Myk7CiAgICByZXR1cm4gQ2FydGVzaWFuMl9kZWZhdWx0LmZyb21FbGVtZW50cyh4LCB5LCByZXN1bHQpOwogIH0KICB2YXIgQ29wbGFuYXJQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5LCBzY3JhdGNoSW50ZXJzZWN0aW9uUG9pbnQsIHNjcmF0Y2hYQXhpczIsIHNjcmF0Y2hZQXhpczIsIHNjcmF0Y2haQXhpczIsIG9iYlNjcmF0Y2gsIENvcGxhbmFyUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0OwogIHZhciBpbml0X0NvcGxhbmFyUG9seWdvbkdlb21ldHJ5TGlicmFyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvQ29wbGFuYXJQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5LmpzIigpIHsKICAgICAgaW5pdF9DYXJ0ZXNpYW4yKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfTWF0cml4MygpOwogICAgICBpbml0X09yaWVudGVkQm91bmRpbmdCb3goKTsKICAgICAgQ29wbGFuYXJQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5ID0ge307CiAgICAgIHNjcmF0Y2hJbnRlcnNlY3Rpb25Qb2ludCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFhBeGlzMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFlBeGlzMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFpBeGlzMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgb2JiU2NyYXRjaCA9IG5ldyBPcmllbnRlZEJvdW5kaW5nQm94X2RlZmF1bHQoKTsKICAgICAgQ29wbGFuYXJQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5LnZhbGlkT3V0bGluZSA9IGZ1bmN0aW9uKHBvc2l0aW9ucykgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgicG9zaXRpb25zIiwgcG9zaXRpb25zKTsKICAgICAgICBjb25zdCBvcmllbnRlZEJvdW5kaW5nQm94ID0gT3JpZW50ZWRCb3VuZGluZ0JveF9kZWZhdWx0LmZyb21Qb2ludHMoCiAgICAgICAgICBwb3NpdGlvbnMsCiAgICAgICAgICBvYmJTY3JhdGNoCiAgICAgICAgKTsKICAgICAgICBjb25zdCBoYWxmQXhlcyA9IG9yaWVudGVkQm91bmRpbmdCb3guaGFsZkF4ZXM7CiAgICAgICAgY29uc3QgeEF4aXMgPSBNYXRyaXgzX2RlZmF1bHQuZ2V0Q29sdW1uKGhhbGZBeGVzLCAwLCBzY3JhdGNoWEF4aXMyKTsKICAgICAgICBjb25zdCB5QXhpcyA9IE1hdHJpeDNfZGVmYXVsdC5nZXRDb2x1bW4oaGFsZkF4ZXMsIDEsIHNjcmF0Y2hZQXhpczIpOwogICAgICAgIGNvbnN0IHpBeGlzID0gTWF0cml4M19kZWZhdWx0LmdldENvbHVtbihoYWxmQXhlcywgMiwgc2NyYXRjaFpBeGlzMik7CiAgICAgICAgY29uc3QgeE1hZyA9IENhcnRlc2lhbjNfZGVmYXVsdC5tYWduaXR1ZGUoeEF4aXMpOwogICAgICAgIGNvbnN0IHlNYWcgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlKHlBeGlzKTsKICAgICAgICBjb25zdCB6TWFnID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZSh6QXhpcyk7CiAgICAgICAgcmV0dXJuICEoeE1hZyA9PT0gMCAmJiAoeU1hZyA9PT0gMCB8fCB6TWFnID09PSAwKSB8fCB5TWFnID09PSAwICYmIHpNYWcgPT09IDApOwogICAgICB9OwogICAgICBDb3BsYW5hclBvbHlnb25HZW9tZXRyeUxpYnJhcnkuY29tcHV0ZVByb2plY3RUbzJEQXJndW1lbnRzID0gZnVuY3Rpb24ocG9zaXRpb25zLCBjZW50ZXJSZXN1bHQsIHBsYW5lQXhpczFSZXN1bHQsIHBsYW5lQXhpczJSZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoInBvc2l0aW9ucyIsIHBvc2l0aW9ucyk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJjZW50ZXJSZXN1bHQiLCBjZW50ZXJSZXN1bHQpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgicGxhbmVBeGlzMVJlc3VsdCIsIHBsYW5lQXhpczFSZXN1bHQpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgicGxhbmVBeGlzMlJlc3VsdCIsIHBsYW5lQXhpczJSZXN1bHQpOwogICAgICAgIGNvbnN0IG9yaWVudGVkQm91bmRpbmdCb3ggPSBPcmllbnRlZEJvdW5kaW5nQm94X2RlZmF1bHQuZnJvbVBvaW50cygKICAgICAgICAgIHBvc2l0aW9ucywKICAgICAgICAgIG9iYlNjcmF0Y2gKICAgICAgICApOwogICAgICAgIGNvbnN0IGhhbGZBeGVzID0gb3JpZW50ZWRCb3VuZGluZ0JveC5oYWxmQXhlczsKICAgICAgICBjb25zdCB4QXhpcyA9IE1hdHJpeDNfZGVmYXVsdC5nZXRDb2x1bW4oaGFsZkF4ZXMsIDAsIHNjcmF0Y2hYQXhpczIpOwogICAgICAgIGNvbnN0IHlBeGlzID0gTWF0cml4M19kZWZhdWx0LmdldENvbHVtbihoYWxmQXhlcywgMSwgc2NyYXRjaFlBeGlzMik7CiAgICAgICAgY29uc3QgekF4aXMgPSBNYXRyaXgzX2RlZmF1bHQuZ2V0Q29sdW1uKGhhbGZBeGVzLCAyLCBzY3JhdGNoWkF4aXMyKTsKICAgICAgICBjb25zdCB4TWFnID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZSh4QXhpcyk7CiAgICAgICAgY29uc3QgeU1hZyA9IENhcnRlc2lhbjNfZGVmYXVsdC5tYWduaXR1ZGUoeUF4aXMpOwogICAgICAgIGNvbnN0IHpNYWcgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlKHpBeGlzKTsKICAgICAgICBjb25zdCBtaW4zID0gTWF0aC5taW4oeE1hZywgeU1hZywgek1hZyk7CiAgICAgICAgaWYgKHhNYWcgPT09IDAgJiYgKHlNYWcgPT09IDAgfHwgek1hZyA9PT0gMCkgfHwgeU1hZyA9PT0gMCAmJiB6TWFnID09PSAwKSB7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIGxldCBwbGFuZUF4aXMxOwogICAgICAgIGxldCBwbGFuZUF4aXMyOwogICAgICAgIGlmIChtaW4zID09PSB5TWFnIHx8IG1pbjMgPT09IHpNYWcpIHsKICAgICAgICAgIHBsYW5lQXhpczEgPSB4QXhpczsKICAgICAgICB9CiAgICAgICAgaWYgKG1pbjMgPT09IHhNYWcpIHsKICAgICAgICAgIHBsYW5lQXhpczEgPSB5QXhpczsKICAgICAgICB9IGVsc2UgaWYgKG1pbjMgPT09IHpNYWcpIHsKICAgICAgICAgIHBsYW5lQXhpczIgPSB5QXhpczsKICAgICAgICB9CiAgICAgICAgaWYgKG1pbjMgPT09IHhNYWcgfHwgbWluMyA9PT0geU1hZykgewogICAgICAgICAgcGxhbmVBeGlzMiA9IHpBeGlzOwogICAgICAgIH0KICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKHBsYW5lQXhpczEsIHBsYW5lQXhpczFSZXN1bHQpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUocGxhbmVBeGlzMiwgcGxhbmVBeGlzMlJlc3VsdCk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKG9yaWVudGVkQm91bmRpbmdCb3guY2VudGVyLCBjZW50ZXJSZXN1bHQpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9OwogICAgICBDb3BsYW5hclBvbHlnb25HZW9tZXRyeUxpYnJhcnkuY3JlYXRlUHJvamVjdFBvaW50c1RvMkRGdW5jdGlvbiA9IGZ1bmN0aW9uKGNlbnRlciwgYXhpczEsIGF4aXMyKSB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHBvc2l0aW9ucykgewogICAgICAgICAgY29uc3QgcG9zaXRpb25SZXN1bHRzID0gbmV3IEFycmF5KHBvc2l0aW9ucy5sZW5ndGgpOwogICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb3NpdGlvbnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgcG9zaXRpb25SZXN1bHRzW2ldID0gcHJvamVjdFRvMkQocG9zaXRpb25zW2ldLCBjZW50ZXIsIGF4aXMxLCBheGlzMik7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gcG9zaXRpb25SZXN1bHRzOwogICAgICAgIH07CiAgICAgIH07CiAgICAgIENvcGxhbmFyUG9seWdvbkdlb21ldHJ5TGlicmFyeS5jcmVhdGVQcm9qZWN0UG9pbnRUbzJERnVuY3Rpb24gPSBmdW5jdGlvbihjZW50ZXIsIGF4aXMxLCBheGlzMikgewogICAgICAgIHJldHVybiBmdW5jdGlvbihwb3NpdGlvbiwgcmVzdWx0KSB7CiAgICAgICAgICByZXR1cm4gcHJvamVjdFRvMkQocG9zaXRpb24sIGNlbnRlciwgYXhpczEsIGF4aXMyLCByZXN1bHQpOwogICAgICAgIH07CiAgICAgIH07CiAgICAgIENvcGxhbmFyUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0ID0gQ29wbGFuYXJQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvQXJjVHlwZS5qcwogIHZhciBBcmNUeXBlLCBBcmNUeXBlX2RlZmF1bHQ7CiAgdmFyIGluaXRfQXJjVHlwZSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvQXJjVHlwZS5qcyIoKSB7CiAgICAgIEFyY1R5cGUgPSB7CiAgICAgICAgLyoqCiAgICAgICAgICogU3RyYWlnaHQgbGluZSB0aGF0IGRvZXMgbm90IGNvbmZvcm0gdG8gdGhlIHN1cmZhY2Ugb2YgdGhlIGVsbGlwc29pZC4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgTk9ORTogMCwKICAgICAgICAvKioKICAgICAgICAgKiBGb2xsb3cgZ2VvZGVzaWMgcGF0aC4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgR0VPREVTSUM6IDEsCiAgICAgICAgLyoqCiAgICAgICAgICogRm9sbG93IHJodW1iIG9yIGxveG9kcm9tZSBwYXRoLgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBSSFVNQjogMgogICAgICB9OwogICAgICBBcmNUeXBlX2RlZmF1bHQgPSBPYmplY3QuZnJlZXplKEFyY1R5cGUpOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvRWxsaXBzb2lkUmh1bWJMaW5lLmpzCiAgZnVuY3Rpb24gY2FsY3VsYXRlTShlbGxpcHRpY2l0eSwgbWFqb3IsIGxhdGl0dWRlKSB7CiAgICBpZiAoZWxsaXB0aWNpdHkgPT09IDApIHsKICAgICAgcmV0dXJuIG1ham9yICogbGF0aXR1ZGU7CiAgICB9CiAgICBjb25zdCBlMiA9IGVsbGlwdGljaXR5ICogZWxsaXB0aWNpdHk7CiAgICBjb25zdCBlNCA9IGUyICogZTI7CiAgICBjb25zdCBlNiA9IGU0ICogZTI7CiAgICBjb25zdCBlOCA9IGU2ICogZTI7CiAgICBjb25zdCBlMTAgPSBlOCAqIGUyOwogICAgY29uc3QgZTEyID0gZTEwICogZTI7CiAgICBjb25zdCBwaGkgPSBsYXRpdHVkZTsKICAgIGNvbnN0IHNpbjJQaGkgPSBNYXRoLnNpbigyICogcGhpKTsKICAgIGNvbnN0IHNpbjRQaGkgPSBNYXRoLnNpbig0ICogcGhpKTsKICAgIGNvbnN0IHNpbjZQaGkgPSBNYXRoLnNpbig2ICogcGhpKTsKICAgIGNvbnN0IHNpbjhQaGkgPSBNYXRoLnNpbig4ICogcGhpKTsKICAgIGNvbnN0IHNpbjEwUGhpID0gTWF0aC5zaW4oMTAgKiBwaGkpOwogICAgY29uc3Qgc2luMTJQaGkgPSBNYXRoLnNpbigxMiAqIHBoaSk7CiAgICByZXR1cm4gbWFqb3IgKiAoKDEgLSBlMiAvIDQgLSAzICogZTQgLyA2NCAtIDUgKiBlNiAvIDI1NiAtIDE3NSAqIGU4IC8gMTYzODQgLSA0NDEgKiBlMTAgLyA2NTUzNiAtIDQ4NTEgKiBlMTIgLyAxMDQ4NTc2KSAqIHBoaSAtICgzICogZTIgLyA4ICsgMyAqIGU0IC8gMzIgKyA0NSAqIGU2IC8gMTAyNCArIDEwNSAqIGU4IC8gNDA5NiArIDIyMDUgKiBlMTAgLyAxMzEwNzIgKyA2MjM3ICogZTEyIC8gNTI0Mjg4KSAqIHNpbjJQaGkgKyAoMTUgKiBlNCAvIDI1NiArIDQ1ICogZTYgLyAxMDI0ICsgNTI1ICogZTggLyAxNjM4NCArIDE1NzUgKiBlMTAgLyA2NTUzNiArIDE1NTkyNSAqIGUxMiAvIDgzODg2MDgpICogc2luNFBoaSAtICgzNSAqIGU2IC8gMzA3MiArIDE3NSAqIGU4IC8gMTIyODggKyAzNjc1ICogZTEwIC8gMjYyMTQ0ICsgMTM0NzUgKiBlMTIgLyAxMDQ4NTc2KSAqIHNpbjZQaGkgKyAoMzE1ICogZTggLyAxMzEwNzIgKyAyMjA1ICogZTEwIC8gNTI0Mjg4ICsgNDM2NTkgKiBlMTIgLyA4Mzg4NjA4KSAqIHNpbjhQaGkgLSAoNjkzICogZTEwIC8gMTMxMDcyMCArIDYyMzcgKiBlMTIgLyA1MjQyODgwKSAqIHNpbjEwUGhpICsgMTAwMSAqIGUxMiAvIDgzODg2MDggKiBzaW4xMlBoaSk7CiAgfQogIGZ1bmN0aW9uIGNhbGN1bGF0ZUludmVyc2VNKE0sIGVsbGlwdGljaXR5LCBtYWpvcikgewogICAgY29uc3QgZCA9IE0gLyBtYWpvcjsKICAgIGlmIChlbGxpcHRpY2l0eSA9PT0gMCkgewogICAgICByZXR1cm4gZDsKICAgIH0KICAgIGNvbnN0IGQyID0gZCAqIGQ7CiAgICBjb25zdCBkMyA9IGQyICogZDsKICAgIGNvbnN0IGQ0ID0gZDMgKiBkOwogICAgY29uc3QgZSA9IGVsbGlwdGljaXR5OwogICAgY29uc3QgZTIgPSBlICogZTsKICAgIGNvbnN0IGU0ID0gZTIgKiBlMjsKICAgIGNvbnN0IGU2ID0gZTQgKiBlMjsKICAgIGNvbnN0IGU4ID0gZTYgKiBlMjsKICAgIGNvbnN0IGUxMCA9IGU4ICogZTI7CiAgICBjb25zdCBlMTIgPSBlMTAgKiBlMjsKICAgIGNvbnN0IHNpbjJEID0gTWF0aC5zaW4oMiAqIGQpOwogICAgY29uc3QgY29zMkQgPSBNYXRoLmNvcygyICogZCk7CiAgICBjb25zdCBzaW40RCA9IE1hdGguc2luKDQgKiBkKTsKICAgIGNvbnN0IGNvczREID0gTWF0aC5jb3MoNCAqIGQpOwogICAgY29uc3Qgc2luNkQgPSBNYXRoLnNpbig2ICogZCk7CiAgICBjb25zdCBjb3M2RCA9IE1hdGguY29zKDYgKiBkKTsKICAgIGNvbnN0IHNpbjhEID0gTWF0aC5zaW4oOCAqIGQpOwogICAgY29uc3QgY29zOEQgPSBNYXRoLmNvcyg4ICogZCk7CiAgICBjb25zdCBzaW4xMEQgPSBNYXRoLnNpbigxMCAqIGQpOwogICAgY29uc3QgY29zMTBEID0gTWF0aC5jb3MoMTAgKiBkKTsKICAgIGNvbnN0IHNpbjEyRCA9IE1hdGguc2luKDEyICogZCk7CiAgICByZXR1cm4gZCArIGQgKiBlMiAvIDQgKyA3ICogZCAqIGU0IC8gNjQgKyAxNSAqIGQgKiBlNiAvIDI1NiArIDU3OSAqIGQgKiBlOCAvIDE2Mzg0ICsgMTUxNSAqIGQgKiBlMTAgLyA2NTUzNiArIDE2ODM3ICogZCAqIGUxMiAvIDEwNDg1NzYgKyAoMyAqIGQgKiBlNCAvIDE2ICsgNDUgKiBkICogZTYgLyAyNTYgLSBkICogKDMyICogZDIgLSA1NjEpICogZTggLyA0MDk2IC0gZCAqICgyMzIgKiBkMiAtIDE2NzcpICogZTEwIC8gMTYzODQgKyBkICogKDM5OTk4NSAtIDkwNTYwICogZDIgKyA1MTIgKiBkNCkgKiBlMTIgLyA1MjQyODgwKSAqIGNvczJEICsgKDIxICogZCAqIGU2IC8gMjU2ICsgNDgzICogZCAqIGU4IC8gNDA5NiAtIGQgKiAoMjI0ICogZDIgLSAxOTY5KSAqIGUxMCAvIDE2Mzg0IC0gZCAqICgzMzE1MiAqIGQyIC0gMTEyNTk5KSAqIGUxMiAvIDEwNDg1NzYpICogY29zNEQgKyAoMTUxICogZCAqIGU4IC8gNDA5NiArIDQ2ODEgKiBkICogZTEwIC8gNjU1MzYgKyAxNDc5ICogZCAqIGUxMiAvIDE2Mzg0IC0gNDUzICogZDMgKiBlMTIgLyAzMjc2OCkgKiBjb3M2RCArICgxMDk3ICogZCAqIGUxMCAvIDY1NTM2ICsgNDI3ODMgKiBkICogZTEyIC8gMTA0ODU3NikgKiBjb3M4RCArIDgwMTEgKiBkICogZTEyIC8gMTA0ODU3NiAqIGNvczEwRCArICgzICogZTIgLyA4ICsgMyAqIGU0IC8gMTYgKyAyMTMgKiBlNiAvIDIwNDggLSAzICogZDIgKiBlNiAvIDY0ICsgMjU1ICogZTggLyA0MDk2IC0gMzMgKiBkMiAqIGU4IC8gNTEyICsgMjA4NjEgKiBlMTAgLyA1MjQyODggLSAzMyAqIGQyICogZTEwIC8gNTEyICsgZDQgKiBlMTAgLyAxMDI0ICsgMjgyNzMgKiBlMTIgLyAxMDQ4NTc2IC0gNDcxICogZDIgKiBlMTIgLyA4MTkyICsgOSAqIGQ0ICogZTEyIC8gNDA5NikgKiBzaW4yRCArICgyMSAqIGU0IC8gMjU2ICsgMjEgKiBlNiAvIDI1NiArIDUzMyAqIGU4IC8gODE5MiAtIDIxICogZDIgKiBlOCAvIDUxMiArIDE5NyAqIGUxMCAvIDQwOTYgLSAzMTUgKiBkMiAqIGUxMCAvIDQwOTYgKyA1ODQwMzkgKiBlMTIgLyAxNjc3NzIxNiAtIDEyNTE3ICogZDIgKiBlMTIgLyAxMzEwNzIgKyA3ICogZDQgKiBlMTIgLyAyMDQ4KSAqIHNpbjREICsgKDE1MSAqIGU2IC8gNjE0NCArIDE1MSAqIGU4IC8gNDA5NiArIDUwMTkgKiBlMTAgLyAxMzEwNzIgLSA0NTMgKiBkMiAqIGUxMCAvIDE2Mzg0ICsgMjY5NjUgKiBlMTIgLyA3ODY0MzIgLSA4NjA3ICogZDIgKiBlMTIgLyAxMzEwNzIpICogc2luNkQgKyAoMTA5NyAqIGU4IC8gMTMxMDcyICsgMTA5NyAqIGUxMCAvIDY1NTM2ICsgMjI1Nzk3ICogZTEyIC8gMTA0ODU3NjAgLSAxMDk3ICogZDIgKiBlMTIgLyA2NTUzNikgKiBzaW44RCArICg4MDExICogZTEwIC8gMjYyMTQ0MCArIDgwMTEgKiBlMTIgLyAxMDQ4NTc2KSAqIHNpbjEwRCArIDI5MzM5MyAqIGUxMiAvIDI1MTY1ODI0MCAqIHNpbjEyRDsKICB9CiAgZnVuY3Rpb24gY2FsY3VsYXRlU2lnbWEoZWxsaXB0aWNpdHksIGxhdGl0dWRlKSB7CiAgICBpZiAoZWxsaXB0aWNpdHkgPT09IDApIHsKICAgICAgcmV0dXJuIE1hdGgubG9nKE1hdGgudGFuKDAuNSAqIChNYXRoX2RlZmF1bHQuUElfT1ZFUl9UV08gKyBsYXRpdHVkZSkpKTsKICAgIH0KICAgIGNvbnN0IGVTaW5MID0gZWxsaXB0aWNpdHkgKiBNYXRoLnNpbihsYXRpdHVkZSk7CiAgICByZXR1cm4gTWF0aC5sb2coTWF0aC50YW4oMC41ICogKE1hdGhfZGVmYXVsdC5QSV9PVkVSX1RXTyArIGxhdGl0dWRlKSkpIC0gZWxsaXB0aWNpdHkgLyAyICogTWF0aC5sb2coKDEgKyBlU2luTCkgLyAoMSAtIGVTaW5MKSk7CiAgfQogIGZ1bmN0aW9uIGNhbGN1bGF0ZUhlYWRpbmcoZWxsaXBzb2lkUmh1bWJMaW5lLCBmaXJzdExvbmdpdHVkZSwgZmlyc3RMYXRpdHVkZSwgc2Vjb25kTG9uZ2l0dWRlLCBzZWNvbmRMYXRpdHVkZSkgewogICAgY29uc3Qgc2lnbWExID0gY2FsY3VsYXRlU2lnbWEoZWxsaXBzb2lkUmh1bWJMaW5lLl9lbGxpcHRpY2l0eSwgZmlyc3RMYXRpdHVkZSk7CiAgICBjb25zdCBzaWdtYTIgPSBjYWxjdWxhdGVTaWdtYSgKICAgICAgZWxsaXBzb2lkUmh1bWJMaW5lLl9lbGxpcHRpY2l0eSwKICAgICAgc2Vjb25kTGF0aXR1ZGUKICAgICk7CiAgICByZXR1cm4gTWF0aC5hdGFuMigKICAgICAgTWF0aF9kZWZhdWx0Lm5lZ2F0aXZlUGlUb1BpKHNlY29uZExvbmdpdHVkZSAtIGZpcnN0TG9uZ2l0dWRlKSwKICAgICAgc2lnbWEyIC0gc2lnbWExCiAgICApOwogIH0KICBmdW5jdGlvbiBjYWxjdWxhdGVBcmNMZW5ndGgoZWxsaXBzb2lkUmh1bWJMaW5lLCBtYWpvciwgbWlub3IsIGZpcnN0TG9uZ2l0dWRlLCBmaXJzdExhdGl0dWRlLCBzZWNvbmRMb25naXR1ZGUsIHNlY29uZExhdGl0dWRlKSB7CiAgICBjb25zdCBoZWFkaW5nID0gZWxsaXBzb2lkUmh1bWJMaW5lLl9oZWFkaW5nOwogICAgY29uc3QgZGVsdGFMb25naXR1ZGUgPSBzZWNvbmRMb25naXR1ZGUgLSBmaXJzdExvbmdpdHVkZTsKICAgIGxldCBkaXN0YW5jZSA9IDA7CiAgICBpZiAoTWF0aF9kZWZhdWx0LmVxdWFsc0Vwc2lsb24oCiAgICAgIE1hdGguYWJzKGhlYWRpbmcpLAogICAgICBNYXRoX2RlZmF1bHQuUElfT1ZFUl9UV08sCiAgICAgIE1hdGhfZGVmYXVsdC5FUFNJTE9OOAogICAgKSkgewogICAgICBpZiAobWFqb3IgPT09IG1pbm9yKSB7CiAgICAgICAgZGlzdGFuY2UgPSBtYWpvciAqIE1hdGguY29zKGZpcnN0TGF0aXR1ZGUpICogTWF0aF9kZWZhdWx0Lm5lZ2F0aXZlUGlUb1BpKGRlbHRhTG9uZ2l0dWRlKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBjb25zdCBzaW5QaGkgPSBNYXRoLnNpbihmaXJzdExhdGl0dWRlKTsKICAgICAgICBkaXN0YW5jZSA9IG1ham9yICogTWF0aC5jb3MoZmlyc3RMYXRpdHVkZSkgKiBNYXRoX2RlZmF1bHQubmVnYXRpdmVQaVRvUGkoZGVsdGFMb25naXR1ZGUpIC8gTWF0aC5zcXJ0KDEgLSBlbGxpcHNvaWRSaHVtYkxpbmUuX2VsbGlwdGljaXR5U3F1YXJlZCAqIHNpblBoaSAqIHNpblBoaSk7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGNvbnN0IE0xID0gY2FsY3VsYXRlTSgKICAgICAgICBlbGxpcHNvaWRSaHVtYkxpbmUuX2VsbGlwdGljaXR5LAogICAgICAgIG1ham9yLAogICAgICAgIGZpcnN0TGF0aXR1ZGUKICAgICAgKTsKICAgICAgY29uc3QgTTIgPSBjYWxjdWxhdGVNKAogICAgICAgIGVsbGlwc29pZFJodW1iTGluZS5fZWxsaXB0aWNpdHksCiAgICAgICAgbWFqb3IsCiAgICAgICAgc2Vjb25kTGF0aXR1ZGUKICAgICAgKTsKICAgICAgZGlzdGFuY2UgPSAoTTIgLSBNMSkgLyBNYXRoLmNvcyhoZWFkaW5nKTsKICAgIH0KICAgIHJldHVybiBNYXRoLmFicyhkaXN0YW5jZSk7CiAgfQogIGZ1bmN0aW9uIGNvbXB1dGVQcm9wZXJ0aWVzKGVsbGlwc29pZFJodW1iTGluZSwgc3RhcnQsIGVuZCwgZWxsaXBzb2lkKSB7CiAgICBjb25zdCBmaXJzdENhcnRlc2lhbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoCiAgICAgIGVsbGlwc29pZC5jYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbihzdGFydCwgc2NyYXRjaENhcnQyKSwKICAgICAgc2NyYXRjaENhcnQxCiAgICApOwogICAgY29uc3QgbGFzdENhcnRlc2lhbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoCiAgICAgIGVsbGlwc29pZC5jYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbihlbmQsIHNjcmF0Y2hDYXJ0MiksCiAgICAgIHNjcmF0Y2hDYXJ0MgogICAgKTsKICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbk9yRXF1YWxzKAogICAgICAidmFsdWUiLAogICAgICBNYXRoLmFicygKICAgICAgICBNYXRoLmFicyhDYXJ0ZXNpYW4zX2RlZmF1bHQuYW5nbGVCZXR3ZWVuKGZpcnN0Q2FydGVzaWFuLCBsYXN0Q2FydGVzaWFuKSkgLSBNYXRoLlBJCiAgICAgICksCiAgICAgIDAuMDEyNQogICAgKTsKICAgIGNvbnN0IG1ham9yID0gZWxsaXBzb2lkLm1heGltdW1SYWRpdXM7CiAgICBjb25zdCBtaW5vciA9IGVsbGlwc29pZC5taW5pbXVtUmFkaXVzOwogICAgY29uc3QgbWFqb3JTcXVhcmVkID0gbWFqb3IgKiBtYWpvcjsKICAgIGNvbnN0IG1pbm9yU3F1YXJlZCA9IG1pbm9yICogbWlub3I7CiAgICBlbGxpcHNvaWRSaHVtYkxpbmUuX2VsbGlwdGljaXR5U3F1YXJlZCA9IChtYWpvclNxdWFyZWQgLSBtaW5vclNxdWFyZWQpIC8gbWFqb3JTcXVhcmVkOwogICAgZWxsaXBzb2lkUmh1bWJMaW5lLl9lbGxpcHRpY2l0eSA9IE1hdGguc3FydCgKICAgICAgZWxsaXBzb2lkUmh1bWJMaW5lLl9lbGxpcHRpY2l0eVNxdWFyZWQKICAgICk7CiAgICBlbGxpcHNvaWRSaHVtYkxpbmUuX3N0YXJ0ID0gQ2FydG9ncmFwaGljX2RlZmF1bHQuY2xvbmUoCiAgICAgIHN0YXJ0LAogICAgICBlbGxpcHNvaWRSaHVtYkxpbmUuX3N0YXJ0CiAgICApOwogICAgZWxsaXBzb2lkUmh1bWJMaW5lLl9zdGFydC5oZWlnaHQgPSAwOwogICAgZWxsaXBzb2lkUmh1bWJMaW5lLl9lbmQgPSBDYXJ0b2dyYXBoaWNfZGVmYXVsdC5jbG9uZShlbmQsIGVsbGlwc29pZFJodW1iTGluZS5fZW5kKTsKICAgIGVsbGlwc29pZFJodW1iTGluZS5fZW5kLmhlaWdodCA9IDA7CiAgICBlbGxpcHNvaWRSaHVtYkxpbmUuX2hlYWRpbmcgPSBjYWxjdWxhdGVIZWFkaW5nKAogICAgICBlbGxpcHNvaWRSaHVtYkxpbmUsCiAgICAgIHN0YXJ0LmxvbmdpdHVkZSwKICAgICAgc3RhcnQubGF0aXR1ZGUsCiAgICAgIGVuZC5sb25naXR1ZGUsCiAgICAgIGVuZC5sYXRpdHVkZQogICAgKTsKICAgIGVsbGlwc29pZFJodW1iTGluZS5fZGlzdGFuY2UgPSBjYWxjdWxhdGVBcmNMZW5ndGgoCiAgICAgIGVsbGlwc29pZFJodW1iTGluZSwKICAgICAgZWxsaXBzb2lkLm1heGltdW1SYWRpdXMsCiAgICAgIGVsbGlwc29pZC5taW5pbXVtUmFkaXVzLAogICAgICBzdGFydC5sb25naXR1ZGUsCiAgICAgIHN0YXJ0LmxhdGl0dWRlLAogICAgICBlbmQubG9uZ2l0dWRlLAogICAgICBlbmQubGF0aXR1ZGUKICAgICk7CiAgfQogIGZ1bmN0aW9uIGludGVycG9sYXRlVXNpbmdTdXJmYWNlRGlzdGFuY2Uoc3RhcnQsIGhlYWRpbmcsIGRpc3RhbmNlLCBtYWpvciwgZWxsaXB0aWNpdHksIHJlc3VsdCkgewogICAgaWYgKGRpc3RhbmNlID09PSAwKSB7CiAgICAgIHJldHVybiBDYXJ0b2dyYXBoaWNfZGVmYXVsdC5jbG9uZShzdGFydCwgcmVzdWx0KTsKICAgIH0KICAgIGNvbnN0IGVsbGlwdGljaXR5U3F1YXJlZCA9IGVsbGlwdGljaXR5ICogZWxsaXB0aWNpdHk7CiAgICBsZXQgbG9uZ2l0dWRlOwogICAgbGV0IGxhdGl0dWRlOwogICAgbGV0IGRlbHRhTG9uZ2l0dWRlOwogICAgaWYgKE1hdGguYWJzKE1hdGhfZGVmYXVsdC5QSV9PVkVSX1RXTyAtIE1hdGguYWJzKGhlYWRpbmcpKSA+IE1hdGhfZGVmYXVsdC5FUFNJTE9OOCkgewogICAgICBjb25zdCBNMSA9IGNhbGN1bGF0ZU0oZWxsaXB0aWNpdHksIG1ham9yLCBzdGFydC5sYXRpdHVkZSk7CiAgICAgIGNvbnN0IGRlbHRhTSA9IGRpc3RhbmNlICogTWF0aC5jb3MoaGVhZGluZyk7CiAgICAgIGNvbnN0IE0yID0gTTEgKyBkZWx0YU07CiAgICAgIGxhdGl0dWRlID0gY2FsY3VsYXRlSW52ZXJzZU0oTTIsIGVsbGlwdGljaXR5LCBtYWpvcik7CiAgICAgIGlmIChNYXRoLmFicyhoZWFkaW5nKSA8IE1hdGhfZGVmYXVsdC5FUFNJTE9OMTApIHsKICAgICAgICBsb25naXR1ZGUgPSBNYXRoX2RlZmF1bHQubmVnYXRpdmVQaVRvUGkoc3RhcnQubG9uZ2l0dWRlKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBjb25zdCBzaWdtYTEgPSBjYWxjdWxhdGVTaWdtYShlbGxpcHRpY2l0eSwgc3RhcnQubGF0aXR1ZGUpOwogICAgICAgIGNvbnN0IHNpZ21hMiA9IGNhbGN1bGF0ZVNpZ21hKGVsbGlwdGljaXR5LCBsYXRpdHVkZSk7CiAgICAgICAgZGVsdGFMb25naXR1ZGUgPSBNYXRoLnRhbihoZWFkaW5nKSAqIChzaWdtYTIgLSBzaWdtYTEpOwogICAgICAgIGxvbmdpdHVkZSA9IE1hdGhfZGVmYXVsdC5uZWdhdGl2ZVBpVG9QaShzdGFydC5sb25naXR1ZGUgKyBkZWx0YUxvbmdpdHVkZSk7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGxhdGl0dWRlID0gc3RhcnQubGF0aXR1ZGU7CiAgICAgIGxldCBsb2NhbFJhZDsKICAgICAgaWYgKGVsbGlwdGljaXR5ID09PSAwKSB7CiAgICAgICAgbG9jYWxSYWQgPSBtYWpvciAqIE1hdGguY29zKHN0YXJ0LmxhdGl0dWRlKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBjb25zdCBzaW5QaGkgPSBNYXRoLnNpbihzdGFydC5sYXRpdHVkZSk7CiAgICAgICAgbG9jYWxSYWQgPSBtYWpvciAqIE1hdGguY29zKHN0YXJ0LmxhdGl0dWRlKSAvIE1hdGguc3FydCgxIC0gZWxsaXB0aWNpdHlTcXVhcmVkICogc2luUGhpICogc2luUGhpKTsKICAgICAgfQogICAgICBkZWx0YUxvbmdpdHVkZSA9IGRpc3RhbmNlIC8gbG9jYWxSYWQ7CiAgICAgIGlmIChoZWFkaW5nID4gMCkgewogICAgICAgIGxvbmdpdHVkZSA9IE1hdGhfZGVmYXVsdC5uZWdhdGl2ZVBpVG9QaShzdGFydC5sb25naXR1ZGUgKyBkZWx0YUxvbmdpdHVkZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgbG9uZ2l0dWRlID0gTWF0aF9kZWZhdWx0Lm5lZ2F0aXZlUGlUb1BpKHN0YXJ0LmxvbmdpdHVkZSAtIGRlbHRhTG9uZ2l0dWRlKTsKICAgICAgfQogICAgfQogICAgaWYgKGRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgIHJlc3VsdC5sb25naXR1ZGUgPSBsb25naXR1ZGU7CiAgICAgIHJlc3VsdC5sYXRpdHVkZSA9IGxhdGl0dWRlOwogICAgICByZXN1bHQuaGVpZ2h0ID0gMDsKICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KICAgIHJldHVybiBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQobG9uZ2l0dWRlLCBsYXRpdHVkZSwgMCk7CiAgfQogIGZ1bmN0aW9uIEVsbGlwc29pZFJodW1iTGluZShzdGFydCwgZW5kLCBlbGxpcHNvaWQpIHsKICAgIGNvbnN0IGUgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChlbGxpcHNvaWQsIEVsbGlwc29pZF9kZWZhdWx0LmRlZmF1bHQpOwogICAgdGhpcy5fZWxsaXBzb2lkID0gZTsKICAgIHRoaXMuX3N0YXJ0ID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICB0aGlzLl9lbmQgPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgIHRoaXMuX2hlYWRpbmcgPSB2b2lkIDA7CiAgICB0aGlzLl9kaXN0YW5jZSA9IHZvaWQgMDsKICAgIHRoaXMuX2VsbGlwdGljaXR5ID0gdm9pZCAwOwogICAgdGhpcy5fZWxsaXB0aWNpdHlTcXVhcmVkID0gdm9pZCAwOwogICAgaWYgKGRlZmluZWRfZGVmYXVsdChzdGFydCkgJiYgZGVmaW5lZF9kZWZhdWx0KGVuZCkpIHsKICAgICAgY29tcHV0ZVByb3BlcnRpZXModGhpcywgc3RhcnQsIGVuZCwgZSk7CiAgICB9CiAgfQogIHZhciBzY3JhdGNoQ2FydDEsIHNjcmF0Y2hDYXJ0MiwgRWxsaXBzb2lkUmh1bWJMaW5lX2RlZmF1bHQ7CiAgdmFyIGluaXRfRWxsaXBzb2lkUmh1bWJMaW5lID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9FbGxpcHNvaWRSaHVtYkxpbmUuanMiKCkgewogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DYXJ0b2dyYXBoaWMoKTsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgc2NyYXRjaENhcnQxID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQ2FydDIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEVsbGlwc29pZFJodW1iTGluZS5wcm90b3R5cGUsIHsKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIHRoZSBlbGxpcHNvaWQuCiAgICAgICAgICogQG1lbWJlcm9mIEVsbGlwc29pZFJodW1iTGluZS5wcm90b3R5cGUKICAgICAgICAgKiBAdHlwZSB7RWxsaXBzb2lkfQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqLwogICAgICAgIGVsbGlwc29pZDogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VsbGlwc29pZDsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIEdldHMgdGhlIHN1cmZhY2UgZGlzdGFuY2UgYmV0d2VlbiB0aGUgc3RhcnQgYW5kIGVuZCBwb2ludAogICAgICAgICAqIEBtZW1iZXJvZiBFbGxpcHNvaWRSaHVtYkxpbmUucHJvdG90eXBlCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAcmVhZG9ubHkKICAgICAgICAgKi8KICAgICAgICBzdXJmYWNlRGlzdGFuY2U6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiZGlzdGFuY2UiLCB0aGlzLl9kaXN0YW5jZSk7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9kaXN0YW5jZTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIEdldHMgdGhlIGluaXRpYWwgcGxhbmV0b2RldGljIHBvaW50IG9uIHRoZSBwYXRoLgogICAgICAgICAqIEBtZW1iZXJvZiBFbGxpcHNvaWRSaHVtYkxpbmUucHJvdG90eXBlCiAgICAgICAgICogQHR5cGUge0NhcnRvZ3JhcGhpY30KICAgICAgICAgKiBAcmVhZG9ubHkKICAgICAgICAgKi8KICAgICAgICBzdGFydDogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXJ0OwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgLyoqCiAgICAgICAgICogR2V0cyB0aGUgZmluYWwgcGxhbmV0b2RldGljIHBvaW50IG9uIHRoZSBwYXRoLgogICAgICAgICAqIEBtZW1iZXJvZiBFbGxpcHNvaWRSaHVtYkxpbmUucHJvdG90eXBlCiAgICAgICAgICogQHR5cGUge0NhcnRvZ3JhcGhpY30KICAgICAgICAgKiBAcmVhZG9ubHkKICAgICAgICAgKi8KICAgICAgICBlbmQ6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9lbmQ7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIHRoZSBoZWFkaW5nIGZyb20gdGhlIHN0YXJ0IHBvaW50IHRvIHRoZSBlbmQgcG9pbnQuCiAgICAgICAgICogQG1lbWJlcm9mIEVsbGlwc29pZFJodW1iTGluZS5wcm90b3R5cGUKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqLwogICAgICAgIGhlYWRpbmc6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiZGlzdGFuY2UiLCB0aGlzLl9kaXN0YW5jZSk7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9oZWFkaW5nOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICAgIEVsbGlwc29pZFJodW1iTGluZS5mcm9tU3RhcnRIZWFkaW5nRGlzdGFuY2UgPSBmdW5jdGlvbihzdGFydCwgaGVhZGluZywgZGlzdGFuY2UsIGVsbGlwc29pZCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJzdGFydCIsIHN0YXJ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImhlYWRpbmciLCBoZWFkaW5nKTsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImRpc3RhbmNlIiwgZGlzdGFuY2UpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbigiZGlzdGFuY2UiLCBkaXN0YW5jZSwgMCk7CiAgICAgICAgY29uc3QgZSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGVsbGlwc29pZCwgRWxsaXBzb2lkX2RlZmF1bHQuZGVmYXVsdCk7CiAgICAgICAgY29uc3QgbWFqb3IgPSBlLm1heGltdW1SYWRpdXM7CiAgICAgICAgY29uc3QgbWlub3IgPSBlLm1pbmltdW1SYWRpdXM7CiAgICAgICAgY29uc3QgbWFqb3JTcXVhcmVkID0gbWFqb3IgKiBtYWpvcjsKICAgICAgICBjb25zdCBtaW5vclNxdWFyZWQgPSBtaW5vciAqIG1pbm9yOwogICAgICAgIGNvbnN0IGVsbGlwdGljaXR5ID0gTWF0aC5zcXJ0KChtYWpvclNxdWFyZWQgLSBtaW5vclNxdWFyZWQpIC8gbWFqb3JTcXVhcmVkKTsKICAgICAgICBoZWFkaW5nID0gTWF0aF9kZWZhdWx0Lm5lZ2F0aXZlUGlUb1BpKGhlYWRpbmcpOwogICAgICAgIGNvbnN0IGVuZCA9IGludGVycG9sYXRlVXNpbmdTdXJmYWNlRGlzdGFuY2UoCiAgICAgICAgICBzdGFydCwKICAgICAgICAgIGhlYWRpbmcsCiAgICAgICAgICBkaXN0YW5jZSwKICAgICAgICAgIGUubWF4aW11bVJhZGl1cywKICAgICAgICAgIGVsbGlwdGljaXR5CiAgICAgICAgKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpIHx8IGRlZmluZWRfZGVmYXVsdChlbGxpcHNvaWQpICYmICFlbGxpcHNvaWQuZXF1YWxzKHJlc3VsdC5lbGxpcHNvaWQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IEVsbGlwc29pZFJodW1iTGluZShzdGFydCwgZW5kLCBlKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LnNldEVuZFBvaW50cyhzdGFydCwgZW5kKTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBFbGxpcHNvaWRSaHVtYkxpbmUucHJvdG90eXBlLnNldEVuZFBvaW50cyA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoInN0YXJ0Iiwgc3RhcnQpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiZW5kIiwgZW5kKTsKICAgICAgICBjb21wdXRlUHJvcGVydGllcyh0aGlzLCBzdGFydCwgZW5kLCB0aGlzLl9lbGxpcHNvaWQpOwogICAgICB9OwogICAgICBFbGxpcHNvaWRSaHVtYkxpbmUucHJvdG90eXBlLmludGVycG9sYXRlVXNpbmdGcmFjdGlvbiA9IGZ1bmN0aW9uKGZyYWN0aW9uLCByZXN1bHQpIHsKICAgICAgICByZXR1cm4gdGhpcy5pbnRlcnBvbGF0ZVVzaW5nU3VyZmFjZURpc3RhbmNlKAogICAgICAgICAgZnJhY3Rpb24gKiB0aGlzLl9kaXN0YW5jZSwKICAgICAgICAgIHJlc3VsdAogICAgICAgICk7CiAgICAgIH07CiAgICAgIEVsbGlwc29pZFJodW1iTGluZS5wcm90b3R5cGUuaW50ZXJwb2xhdGVVc2luZ1N1cmZhY2VEaXN0YW5jZSA9IGZ1bmN0aW9uKGRpc3RhbmNlLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoImRpc3RhbmNlIiwgZGlzdGFuY2UpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHRoaXMuX2Rpc3RhbmNlKSB8fCB0aGlzLl9kaXN0YW5jZSA9PT0gMCkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgICJFbGxpcHNvaWRSaHVtYkxpbmUgbXVzdCBoYXZlIGRpc3RpbmN0IHN0YXJ0IGFuZCBlbmQgc2V0LiIKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBpbnRlcnBvbGF0ZVVzaW5nU3VyZmFjZURpc3RhbmNlKAogICAgICAgICAgdGhpcy5fc3RhcnQsCiAgICAgICAgICB0aGlzLl9oZWFkaW5nLAogICAgICAgICAgZGlzdGFuY2UsCiAgICAgICAgICB0aGlzLl9lbGxpcHNvaWQubWF4aW11bVJhZGl1cywKICAgICAgICAgIHRoaXMuX2VsbGlwdGljaXR5LAogICAgICAgICAgcmVzdWx0CiAgICAgICAgKTsKICAgICAgfTsKICAgICAgRWxsaXBzb2lkUmh1bWJMaW5lLnByb3RvdHlwZS5maW5kSW50ZXJzZWN0aW9uV2l0aExvbmdpdHVkZSA9IGZ1bmN0aW9uKGludGVyc2VjdGlvbkxvbmdpdHVkZSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJpbnRlcnNlY3Rpb25Mb25naXR1ZGUiLCBpbnRlcnNlY3Rpb25Mb25naXR1ZGUpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHRoaXMuX2Rpc3RhbmNlKSB8fCB0aGlzLl9kaXN0YW5jZSA9PT0gMCkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgICJFbGxpcHNvaWRSaHVtYkxpbmUgbXVzdCBoYXZlIGRpc3RpbmN0IHN0YXJ0IGFuZCBlbmQgc2V0LiIKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGVsbGlwdGljaXR5ID0gdGhpcy5fZWxsaXB0aWNpdHk7CiAgICAgICAgY29uc3QgaGVhZGluZyA9IHRoaXMuX2hlYWRpbmc7CiAgICAgICAgY29uc3QgYWJzSGVhZGluZyA9IE1hdGguYWJzKGhlYWRpbmcpOwogICAgICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5fc3RhcnQ7CiAgICAgICAgaW50ZXJzZWN0aW9uTG9uZ2l0dWRlID0gTWF0aF9kZWZhdWx0Lm5lZ2F0aXZlUGlUb1BpKGludGVyc2VjdGlvbkxvbmdpdHVkZSk7CiAgICAgICAgaWYgKE1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgTWF0aC5hYnMoaW50ZXJzZWN0aW9uTG9uZ2l0dWRlKSwKICAgICAgICAgIE1hdGguUEksCiAgICAgICAgICBNYXRoX2RlZmF1bHQuRVBTSUxPTjE0CiAgICAgICAgKSkgewogICAgICAgICAgaW50ZXJzZWN0aW9uTG9uZ2l0dWRlID0gTWF0aF9kZWZhdWx0LnNpZ24oc3RhcnQubG9uZ2l0dWRlKSAqIE1hdGguUEk7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICAgIH0KICAgICAgICBpZiAoTWF0aC5hYnMoTWF0aF9kZWZhdWx0LlBJX09WRVJfVFdPIC0gYWJzSGVhZGluZykgPD0gTWF0aF9kZWZhdWx0LkVQU0lMT044KSB7CiAgICAgICAgICByZXN1bHQubG9uZ2l0dWRlID0gaW50ZXJzZWN0aW9uTG9uZ2l0dWRlOwogICAgICAgICAgcmVzdWx0LmxhdGl0dWRlID0gc3RhcnQubGF0aXR1ZGU7CiAgICAgICAgICByZXN1bHQuaGVpZ2h0ID0gMDsKICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfSBlbHNlIGlmIChNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbigKICAgICAgICAgIE1hdGguYWJzKE1hdGhfZGVmYXVsdC5QSV9PVkVSX1RXTyAtIGFic0hlYWRpbmcpLAogICAgICAgICAgTWF0aF9kZWZhdWx0LlBJX09WRVJfVFdPLAogICAgICAgICAgTWF0aF9kZWZhdWx0LkVQU0lMT044CiAgICAgICAgKSkgewogICAgICAgICAgaWYgKE1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgICBpbnRlcnNlY3Rpb25Mb25naXR1ZGUsCiAgICAgICAgICAgIHN0YXJ0LmxvbmdpdHVkZSwKICAgICAgICAgICAgTWF0aF9kZWZhdWx0LkVQU0lMT04xMgogICAgICAgICAgKSkgewogICAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgICAgfQogICAgICAgICAgcmVzdWx0LmxvbmdpdHVkZSA9IGludGVyc2VjdGlvbkxvbmdpdHVkZTsKICAgICAgICAgIHJlc3VsdC5sYXRpdHVkZSA9IE1hdGhfZGVmYXVsdC5QSV9PVkVSX1RXTyAqIE1hdGhfZGVmYXVsdC5zaWduKE1hdGhfZGVmYXVsdC5QSV9PVkVSX1RXTyAtIGhlYWRpbmcpOwogICAgICAgICAgcmVzdWx0LmhlaWdodCA9IDA7CiAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0KICAgICAgICBjb25zdCBwaGkxID0gc3RhcnQubGF0aXR1ZGU7CiAgICAgICAgY29uc3QgZVNpblBoaTEgPSBlbGxpcHRpY2l0eSAqIE1hdGguc2luKHBoaTEpOwogICAgICAgIGNvbnN0IGxlZnRDb21wb25lbnQgPSBNYXRoLnRhbigwLjUgKiAoTWF0aF9kZWZhdWx0LlBJX09WRVJfVFdPICsgcGhpMSkpICogTWF0aC5leHAoKGludGVyc2VjdGlvbkxvbmdpdHVkZSAtIHN0YXJ0LmxvbmdpdHVkZSkgLyBNYXRoLnRhbihoZWFkaW5nKSk7CiAgICAgICAgY29uc3QgZGVub21pbmF0b3IgPSAoMSArIGVTaW5QaGkxKSAvICgxIC0gZVNpblBoaTEpOwogICAgICAgIGxldCBuZXdQaGkgPSBzdGFydC5sYXRpdHVkZTsKICAgICAgICBsZXQgcGhpOwogICAgICAgIGRvIHsKICAgICAgICAgIHBoaSA9IG5ld1BoaTsKICAgICAgICAgIGNvbnN0IGVTaW5QaGkgPSBlbGxpcHRpY2l0eSAqIE1hdGguc2luKHBoaSk7CiAgICAgICAgICBjb25zdCBudW1lcmF0b3IgPSAoMSArIGVTaW5QaGkpIC8gKDEgLSBlU2luUGhpKTsKICAgICAgICAgIG5ld1BoaSA9IDIgKiBNYXRoLmF0YW4oCiAgICAgICAgICAgIGxlZnRDb21wb25lbnQgKiBNYXRoLnBvdyhudW1lcmF0b3IgLyBkZW5vbWluYXRvciwgZWxsaXB0aWNpdHkgLyAyKQogICAgICAgICAgKSAtIE1hdGhfZGVmYXVsdC5QSV9PVkVSX1RXTzsKICAgICAgICB9IHdoaWxlICghTWF0aF9kZWZhdWx0LmVxdWFsc0Vwc2lsb24obmV3UGhpLCBwaGksIE1hdGhfZGVmYXVsdC5FUFNJTE9OMTIpKTsKICAgICAgICByZXN1bHQubG9uZ2l0dWRlID0gaW50ZXJzZWN0aW9uTG9uZ2l0dWRlOwogICAgICAgIHJlc3VsdC5sYXRpdHVkZSA9IG5ld1BoaTsKICAgICAgICByZXN1bHQuaGVpZ2h0ID0gMDsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBFbGxpcHNvaWRSaHVtYkxpbmUucHJvdG90eXBlLmZpbmRJbnRlcnNlY3Rpb25XaXRoTGF0aXR1ZGUgPSBmdW5jdGlvbihpbnRlcnNlY3Rpb25MYXRpdHVkZSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJpbnRlcnNlY3Rpb25MYXRpdHVkZSIsIGludGVyc2VjdGlvbkxhdGl0dWRlKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdCh0aGlzLl9kaXN0YW5jZSkgfHwgdGhpcy5fZGlzdGFuY2UgPT09IDApIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgICAiRWxsaXBzb2lkUmh1bWJMaW5lIG11c3QgaGF2ZSBkaXN0aW5jdCBzdGFydCBhbmQgZW5kIHNldC4iCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBjb25zdCBlbGxpcHRpY2l0eSA9IHRoaXMuX2VsbGlwdGljaXR5OwogICAgICAgIGNvbnN0IGhlYWRpbmcgPSB0aGlzLl9oZWFkaW5nOwogICAgICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5fc3RhcnQ7CiAgICAgICAgaWYgKE1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgTWF0aC5hYnMoaGVhZGluZyksCiAgICAgICAgICBNYXRoX2RlZmF1bHQuUElfT1ZFUl9UV08sCiAgICAgICAgICBNYXRoX2RlZmF1bHQuRVBTSUxPTjgKICAgICAgICApKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGNvbnN0IHNpZ21hMSA9IGNhbGN1bGF0ZVNpZ21hKGVsbGlwdGljaXR5LCBzdGFydC5sYXRpdHVkZSk7CiAgICAgICAgY29uc3Qgc2lnbWEyID0gY2FsY3VsYXRlU2lnbWEoZWxsaXB0aWNpdHksIGludGVyc2VjdGlvbkxhdGl0dWRlKTsKICAgICAgICBjb25zdCBkZWx0YUxvbmdpdHVkZSA9IE1hdGgudGFuKGhlYWRpbmcpICogKHNpZ21hMiAtIHNpZ21hMSk7CiAgICAgICAgY29uc3QgbG9uZ2l0dWRlID0gTWF0aF9kZWZhdWx0Lm5lZ2F0aXZlUGlUb1BpKHN0YXJ0LmxvbmdpdHVkZSArIGRlbHRhTG9uZ2l0dWRlKTsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdC5sb25naXR1ZGUgPSBsb25naXR1ZGU7CiAgICAgICAgICByZXN1bHQubGF0aXR1ZGUgPSBpbnRlcnNlY3Rpb25MYXRpdHVkZTsKICAgICAgICAgIHJlc3VsdC5oZWlnaHQgPSAwOwogICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdChsb25naXR1ZGUsIGludGVyc2VjdGlvbkxhdGl0dWRlLCAwKTsKICAgICAgfTsKICAgICAgRWxsaXBzb2lkUmh1bWJMaW5lX2RlZmF1bHQgPSBFbGxpcHNvaWRSaHVtYkxpbmU7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9Qb2x5Z29uSGllcmFyY2h5LmpzCiAgZnVuY3Rpb24gUG9seWdvbkhpZXJhcmNoeShwb3NpdGlvbnMsIGhvbGVzKSB7CiAgICB0aGlzLnBvc2l0aW9ucyA9IGRlZmluZWRfZGVmYXVsdChwb3NpdGlvbnMpID8gcG9zaXRpb25zIDogW107CiAgICB0aGlzLmhvbGVzID0gZGVmaW5lZF9kZWZhdWx0KGhvbGVzKSA/IGhvbGVzIDogW107CiAgfQogIHZhciBQb2x5Z29uSGllcmFyY2h5X2RlZmF1bHQ7CiAgdmFyIGluaXRfUG9seWdvbkhpZXJhcmNoeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUG9seWdvbkhpZXJhcmNoeS5qcyIoKSB7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBQb2x5Z29uSGllcmFyY2h5X2RlZmF1bHQgPSBQb2x5Z29uSGllcmFyY2h5OwogICAgfQogIH0pOwoKICAvLyBub2RlX21vZHVsZXMvZWFyY3V0L3NyYy9lYXJjdXQuanMKICB2YXIgcmVxdWlyZV9lYXJjdXQgPSBfX2NvbW1vbkpTKHsKICAgICJub2RlX21vZHVsZXMvZWFyY3V0L3NyYy9lYXJjdXQuanMiKGV4cG9ydHMyLCBtb2R1bGUpIHsKICAgICAgInVzZSBzdHJpY3QiOwogICAgICBtb2R1bGUuZXhwb3J0cyA9IGVhcmN1dDI7CiAgICAgIG1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBlYXJjdXQyOwogICAgICBmdW5jdGlvbiBlYXJjdXQyKGRhdGEsIGhvbGVJbmRpY2VzLCBkaW0pIHsKICAgICAgICBkaW0gPSBkaW0gfHwgMjsKICAgICAgICB2YXIgaGFzSG9sZXMgPSBob2xlSW5kaWNlcyAmJiBob2xlSW5kaWNlcy5sZW5ndGgsIG91dGVyTGVuID0gaGFzSG9sZXMgPyBob2xlSW5kaWNlc1swXSAqIGRpbSA6IGRhdGEubGVuZ3RoLCBvdXRlck5vZGUgPSBsaW5rZWRMaXN0KGRhdGEsIDAsIG91dGVyTGVuLCBkaW0sIHRydWUpLCB0cmlhbmdsZXMgPSBbXTsKICAgICAgICBpZiAoIW91dGVyTm9kZSB8fCBvdXRlck5vZGUubmV4dCA9PT0gb3V0ZXJOb2RlLnByZXYpCiAgICAgICAgICByZXR1cm4gdHJpYW5nbGVzOwogICAgICAgIHZhciBtaW5YLCBtaW5ZLCBtYXhYLCBtYXhZLCB4LCB5LCBpbnZTaXplOwogICAgICAgIGlmIChoYXNIb2xlcykKICAgICAgICAgIG91dGVyTm9kZSA9IGVsaW1pbmF0ZUhvbGVzKGRhdGEsIGhvbGVJbmRpY2VzLCBvdXRlck5vZGUsIGRpbSk7CiAgICAgICAgaWYgKGRhdGEubGVuZ3RoID4gODAgKiBkaW0pIHsKICAgICAgICAgIG1pblggPSBtYXhYID0gZGF0YVswXTsKICAgICAgICAgIG1pblkgPSBtYXhZID0gZGF0YVsxXTsKICAgICAgICAgIGZvciAodmFyIGkgPSBkaW07IGkgPCBvdXRlckxlbjsgaSArPSBkaW0pIHsKICAgICAgICAgICAgeCA9IGRhdGFbaV07CiAgICAgICAgICAgIHkgPSBkYXRhW2kgKyAxXTsKICAgICAgICAgICAgaWYgKHggPCBtaW5YKQogICAgICAgICAgICAgIG1pblggPSB4OwogICAgICAgICAgICBpZiAoeSA8IG1pblkpCiAgICAgICAgICAgICAgbWluWSA9IHk7CiAgICAgICAgICAgIGlmICh4ID4gbWF4WCkKICAgICAgICAgICAgICBtYXhYID0geDsKICAgICAgICAgICAgaWYgKHkgPiBtYXhZKQogICAgICAgICAgICAgIG1heFkgPSB5OwogICAgICAgICAgfQogICAgICAgICAgaW52U2l6ZSA9IE1hdGgubWF4KG1heFggLSBtaW5YLCBtYXhZIC0gbWluWSk7CiAgICAgICAgICBpbnZTaXplID0gaW52U2l6ZSAhPT0gMCA/IDMyNzY3IC8gaW52U2l6ZSA6IDA7CiAgICAgICAgfQogICAgICAgIGVhcmN1dExpbmtlZChvdXRlck5vZGUsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplLCAwKTsKICAgICAgICByZXR1cm4gdHJpYW5nbGVzOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIGxpbmtlZExpc3QoZGF0YSwgc3RhcnQsIGVuZCwgZGltLCBjbG9ja3dpc2UpIHsKICAgICAgICB2YXIgaSwgbGFzdDsKICAgICAgICBpZiAoY2xvY2t3aXNlID09PSBzaWduZWRBcmVhKGRhdGEsIHN0YXJ0LCBlbmQsIGRpbSkgPiAwKSB7CiAgICAgICAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSBkaW0pCiAgICAgICAgICAgIGxhc3QgPSBpbnNlcnROb2RlKGksIGRhdGFbaV0sIGRhdGFbaSArIDFdLCBsYXN0KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZm9yIChpID0gZW5kIC0gZGltOyBpID49IHN0YXJ0OyBpIC09IGRpbSkKICAgICAgICAgICAgbGFzdCA9IGluc2VydE5vZGUoaSwgZGF0YVtpXSwgZGF0YVtpICsgMV0sIGxhc3QpOwogICAgICAgIH0KICAgICAgICBpZiAobGFzdCAmJiBlcXVhbHMobGFzdCwgbGFzdC5uZXh0KSkgewogICAgICAgICAgcmVtb3ZlTm9kZShsYXN0KTsKICAgICAgICAgIGxhc3QgPSBsYXN0Lm5leHQ7CiAgICAgICAgfQogICAgICAgIHJldHVybiBsYXN0OwogICAgICB9CiAgICAgIGZ1bmN0aW9uIGZpbHRlclBvaW50cyhzdGFydCwgZW5kKSB7CiAgICAgICAgaWYgKCFzdGFydCkKICAgICAgICAgIHJldHVybiBzdGFydDsKICAgICAgICBpZiAoIWVuZCkKICAgICAgICAgIGVuZCA9IHN0YXJ0OwogICAgICAgIHZhciBwID0gc3RhcnQsIGFnYWluOwogICAgICAgIGRvIHsKICAgICAgICAgIGFnYWluID0gZmFsc2U7CiAgICAgICAgICBpZiAoIXAuc3RlaW5lciAmJiAoZXF1YWxzKHAsIHAubmV4dCkgfHwgYXJlYShwLnByZXYsIHAsIHAubmV4dCkgPT09IDApKSB7CiAgICAgICAgICAgIHJlbW92ZU5vZGUocCk7CiAgICAgICAgICAgIHAgPSBlbmQgPSBwLnByZXY7CiAgICAgICAgICAgIGlmIChwID09PSBwLm5leHQpCiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGFnYWluID0gdHJ1ZTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHAgPSBwLm5leHQ7CiAgICAgICAgICB9CiAgICAgICAgfSB3aGlsZSAoYWdhaW4gfHwgcCAhPT0gZW5kKTsKICAgICAgICByZXR1cm4gZW5kOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIGVhcmN1dExpbmtlZChlYXIsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplLCBwYXNzKSB7CiAgICAgICAgaWYgKCFlYXIpCiAgICAgICAgICByZXR1cm47CiAgICAgICAgaWYgKCFwYXNzICYmIGludlNpemUpCiAgICAgICAgICBpbmRleEN1cnZlKGVhciwgbWluWCwgbWluWSwgaW52U2l6ZSk7CiAgICAgICAgdmFyIHN0b3AgPSBlYXIsIHByZXYsIG5leHQ7CiAgICAgICAgd2hpbGUgKGVhci5wcmV2ICE9PSBlYXIubmV4dCkgewogICAgICAgICAgcHJldiA9IGVhci5wcmV2OwogICAgICAgICAgbmV4dCA9IGVhci5uZXh0OwogICAgICAgICAgaWYgKGludlNpemUgPyBpc0Vhckhhc2hlZChlYXIsIG1pblgsIG1pblksIGludlNpemUpIDogaXNFYXIoZWFyKSkgewogICAgICAgICAgICB0cmlhbmdsZXMucHVzaChwcmV2LmkgLyBkaW0gfCAwKTsKICAgICAgICAgICAgdHJpYW5nbGVzLnB1c2goZWFyLmkgLyBkaW0gfCAwKTsKICAgICAgICAgICAgdHJpYW5nbGVzLnB1c2gobmV4dC5pIC8gZGltIHwgMCk7CiAgICAgICAgICAgIHJlbW92ZU5vZGUoZWFyKTsKICAgICAgICAgICAgZWFyID0gbmV4dC5uZXh0OwogICAgICAgICAgICBzdG9wID0gbmV4dC5uZXh0OwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICAgIGVhciA9IG5leHQ7CiAgICAgICAgICBpZiAoZWFyID09PSBzdG9wKSB7CiAgICAgICAgICAgIGlmICghcGFzcykgewogICAgICAgICAgICAgIGVhcmN1dExpbmtlZChmaWx0ZXJQb2ludHMoZWFyKSwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUsIDEpOwogICAgICAgICAgICB9IGVsc2UgaWYgKHBhc3MgPT09IDEpIHsKICAgICAgICAgICAgICBlYXIgPSBjdXJlTG9jYWxJbnRlcnNlY3Rpb25zKGZpbHRlclBvaW50cyhlYXIpLCB0cmlhbmdsZXMsIGRpbSk7CiAgICAgICAgICAgICAgZWFyY3V0TGlua2VkKGVhciwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUsIDIpOwogICAgICAgICAgICB9IGVsc2UgaWYgKHBhc3MgPT09IDIpIHsKICAgICAgICAgICAgICBzcGxpdEVhcmN1dChlYXIsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgZnVuY3Rpb24gaXNFYXIoZWFyKSB7CiAgICAgICAgdmFyIGEzID0gZWFyLnByZXYsIGIgPSBlYXIsIGMgPSBlYXIubmV4dDsKICAgICAgICBpZiAoYXJlYShhMywgYiwgYykgPj0gMCkKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB2YXIgYXggPSBhMy54LCBieCA9IGIueCwgY3ggPSBjLngsIGF5ID0gYTMueSwgYnkgPSBiLnksIGN5ID0gYy55OwogICAgICAgIHZhciB4MCA9IGF4IDwgYnggPyBheCA8IGN4ID8gYXggOiBjeCA6IGJ4IDwgY3ggPyBieCA6IGN4LCB5MCA9IGF5IDwgYnkgPyBheSA8IGN5ID8gYXkgOiBjeSA6IGJ5IDwgY3kgPyBieSA6IGN5LCB4MSA9IGF4ID4gYnggPyBheCA+IGN4ID8gYXggOiBjeCA6IGJ4ID4gY3ggPyBieCA6IGN4LCB5MSA9IGF5ID4gYnkgPyBheSA+IGN5ID8gYXkgOiBjeSA6IGJ5ID4gY3kgPyBieSA6IGN5OwogICAgICAgIHZhciBwID0gYy5uZXh0OwogICAgICAgIHdoaWxlIChwICE9PSBhMykgewogICAgICAgICAgaWYgKHAueCA+PSB4MCAmJiBwLnggPD0geDEgJiYgcC55ID49IHkwICYmIHAueSA8PSB5MSAmJiBwb2ludEluVHJpYW5nbGUoYXgsIGF5LCBieCwgYnksIGN4LCBjeSwgcC54LCBwLnkpICYmIGFyZWEocC5wcmV2LCBwLCBwLm5leHQpID49IDApCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIHAgPSBwLm5leHQ7CiAgICAgICAgfQogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIGlzRWFySGFzaGVkKGVhciwgbWluWCwgbWluWSwgaW52U2l6ZSkgewogICAgICAgIHZhciBhMyA9IGVhci5wcmV2LCBiID0gZWFyLCBjID0gZWFyLm5leHQ7CiAgICAgICAgaWYgKGFyZWEoYTMsIGIsIGMpID49IDApCiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgdmFyIGF4ID0gYTMueCwgYnggPSBiLngsIGN4ID0gYy54LCBheSA9IGEzLnksIGJ5ID0gYi55LCBjeSA9IGMueTsKICAgICAgICB2YXIgeDAgPSBheCA8IGJ4ID8gYXggPCBjeCA/IGF4IDogY3ggOiBieCA8IGN4ID8gYnggOiBjeCwgeTAgPSBheSA8IGJ5ID8gYXkgPCBjeSA/IGF5IDogY3kgOiBieSA8IGN5ID8gYnkgOiBjeSwgeDEgPSBheCA+IGJ4ID8gYXggPiBjeCA/IGF4IDogY3ggOiBieCA+IGN4ID8gYnggOiBjeCwgeTEgPSBheSA+IGJ5ID8gYXkgPiBjeSA/IGF5IDogY3kgOiBieSA+IGN5ID8gYnkgOiBjeTsKICAgICAgICB2YXIgbWluWiA9IHpPcmRlcih4MCwgeTAsIG1pblgsIG1pblksIGludlNpemUpLCBtYXhaID0gek9yZGVyKHgxLCB5MSwgbWluWCwgbWluWSwgaW52U2l6ZSk7CiAgICAgICAgdmFyIHAgPSBlYXIucHJldlosIG4gPSBlYXIubmV4dFo7CiAgICAgICAgd2hpbGUgKHAgJiYgcC56ID49IG1pblogJiYgbiAmJiBuLnogPD0gbWF4WikgewogICAgICAgICAgaWYgKHAueCA+PSB4MCAmJiBwLnggPD0geDEgJiYgcC55ID49IHkwICYmIHAueSA8PSB5MSAmJiBwICE9PSBhMyAmJiBwICE9PSBjICYmIHBvaW50SW5UcmlhbmdsZShheCwgYXksIGJ4LCBieSwgY3gsIGN5LCBwLngsIHAueSkgJiYgYXJlYShwLnByZXYsIHAsIHAubmV4dCkgPj0gMCkKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgcCA9IHAucHJldlo7CiAgICAgICAgICBpZiAobi54ID49IHgwICYmIG4ueCA8PSB4MSAmJiBuLnkgPj0geTAgJiYgbi55IDw9IHkxICYmIG4gIT09IGEzICYmIG4gIT09IGMgJiYgcG9pbnRJblRyaWFuZ2xlKGF4LCBheSwgYngsIGJ5LCBjeCwgY3ksIG4ueCwgbi55KSAmJiBhcmVhKG4ucHJldiwgbiwgbi5uZXh0KSA+PSAwKQogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICBuID0gbi5uZXh0WjsKICAgICAgICB9CiAgICAgICAgd2hpbGUgKHAgJiYgcC56ID49IG1pblopIHsKICAgICAgICAgIGlmIChwLnggPj0geDAgJiYgcC54IDw9IHgxICYmIHAueSA+PSB5MCAmJiBwLnkgPD0geTEgJiYgcCAhPT0gYTMgJiYgcCAhPT0gYyAmJiBwb2ludEluVHJpYW5nbGUoYXgsIGF5LCBieCwgYnksIGN4LCBjeSwgcC54LCBwLnkpICYmIGFyZWEocC5wcmV2LCBwLCBwLm5leHQpID49IDApCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIHAgPSBwLnByZXZaOwogICAgICAgIH0KICAgICAgICB3aGlsZSAobiAmJiBuLnogPD0gbWF4WikgewogICAgICAgICAgaWYgKG4ueCA+PSB4MCAmJiBuLnggPD0geDEgJiYgbi55ID49IHkwICYmIG4ueSA8PSB5MSAmJiBuICE9PSBhMyAmJiBuICE9PSBjICYmIHBvaW50SW5UcmlhbmdsZShheCwgYXksIGJ4LCBieSwgY3gsIGN5LCBuLngsIG4ueSkgJiYgYXJlYShuLnByZXYsIG4sIG4ubmV4dCkgPj0gMCkKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgbiA9IG4ubmV4dFo7CiAgICAgICAgfQogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIGN1cmVMb2NhbEludGVyc2VjdGlvbnMoc3RhcnQsIHRyaWFuZ2xlcywgZGltKSB7CiAgICAgICAgdmFyIHAgPSBzdGFydDsKICAgICAgICBkbyB7CiAgICAgICAgICB2YXIgYTMgPSBwLnByZXYsIGIgPSBwLm5leHQubmV4dDsKICAgICAgICAgIGlmICghZXF1YWxzKGEzLCBiKSAmJiBpbnRlcnNlY3RzKGEzLCBwLCBwLm5leHQsIGIpICYmIGxvY2FsbHlJbnNpZGUoYTMsIGIpICYmIGxvY2FsbHlJbnNpZGUoYiwgYTMpKSB7CiAgICAgICAgICAgIHRyaWFuZ2xlcy5wdXNoKGEzLmkgLyBkaW0gfCAwKTsKICAgICAgICAgICAgdHJpYW5nbGVzLnB1c2gocC5pIC8gZGltIHwgMCk7CiAgICAgICAgICAgIHRyaWFuZ2xlcy5wdXNoKGIuaSAvIGRpbSB8IDApOwogICAgICAgICAgICByZW1vdmVOb2RlKHApOwogICAgICAgICAgICByZW1vdmVOb2RlKHAubmV4dCk7CiAgICAgICAgICAgIHAgPSBzdGFydCA9IGI7CiAgICAgICAgICB9CiAgICAgICAgICBwID0gcC5uZXh0OwogICAgICAgIH0gd2hpbGUgKHAgIT09IHN0YXJ0KTsKICAgICAgICByZXR1cm4gZmlsdGVyUG9pbnRzKHApOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIHNwbGl0RWFyY3V0KHN0YXJ0LCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSkgewogICAgICAgIHZhciBhMyA9IHN0YXJ0OwogICAgICAgIGRvIHsKICAgICAgICAgIHZhciBiID0gYTMubmV4dC5uZXh0OwogICAgICAgICAgd2hpbGUgKGIgIT09IGEzLnByZXYpIHsKICAgICAgICAgICAgaWYgKGEzLmkgIT09IGIuaSAmJiBpc1ZhbGlkRGlhZ29uYWwoYTMsIGIpKSB7CiAgICAgICAgICAgICAgdmFyIGMgPSBzcGxpdFBvbHlnb24oYTMsIGIpOwogICAgICAgICAgICAgIGEzID0gZmlsdGVyUG9pbnRzKGEzLCBhMy5uZXh0KTsKICAgICAgICAgICAgICBjID0gZmlsdGVyUG9pbnRzKGMsIGMubmV4dCk7CiAgICAgICAgICAgICAgZWFyY3V0TGlua2VkKGEzLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSwgMCk7CiAgICAgICAgICAgICAgZWFyY3V0TGlua2VkKGMsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplLCAwKTsKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYiA9IGIubmV4dDsKICAgICAgICAgIH0KICAgICAgICAgIGEzID0gYTMubmV4dDsKICAgICAgICB9IHdoaWxlIChhMyAhPT0gc3RhcnQpOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIGVsaW1pbmF0ZUhvbGVzKGRhdGEsIGhvbGVJbmRpY2VzLCBvdXRlck5vZGUsIGRpbSkgewogICAgICAgIHZhciBxdWV1ZSA9IFtdLCBpLCBsZW4sIHN0YXJ0LCBlbmQsIGxpc3Q7CiAgICAgICAgZm9yIChpID0gMCwgbGVuID0gaG9sZUluZGljZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICAgIHN0YXJ0ID0gaG9sZUluZGljZXNbaV0gKiBkaW07CiAgICAgICAgICBlbmQgPSBpIDwgbGVuIC0gMSA/IGhvbGVJbmRpY2VzW2kgKyAxXSAqIGRpbSA6IGRhdGEubGVuZ3RoOwogICAgICAgICAgbGlzdCA9IGxpbmtlZExpc3QoZGF0YSwgc3RhcnQsIGVuZCwgZGltLCBmYWxzZSk7CiAgICAgICAgICBpZiAobGlzdCA9PT0gbGlzdC5uZXh0KQogICAgICAgICAgICBsaXN0LnN0ZWluZXIgPSB0cnVlOwogICAgICAgICAgcXVldWUucHVzaChnZXRMZWZ0bW9zdChsaXN0KSk7CiAgICAgICAgfQogICAgICAgIHF1ZXVlLnNvcnQoY29tcGFyZVgpOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykgewogICAgICAgICAgb3V0ZXJOb2RlID0gZWxpbWluYXRlSG9sZShxdWV1ZVtpXSwgb3V0ZXJOb2RlKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG91dGVyTm9kZTsKICAgICAgfQogICAgICBmdW5jdGlvbiBjb21wYXJlWChhMywgYikgewogICAgICAgIHJldHVybiBhMy54IC0gYi54OwogICAgICB9CiAgICAgIGZ1bmN0aW9uIGVsaW1pbmF0ZUhvbGUoaG9sZSwgb3V0ZXJOb2RlKSB7CiAgICAgICAgdmFyIGJyaWRnZSA9IGZpbmRIb2xlQnJpZGdlKGhvbGUsIG91dGVyTm9kZSk7CiAgICAgICAgaWYgKCFicmlkZ2UpIHsKICAgICAgICAgIHJldHVybiBvdXRlck5vZGU7CiAgICAgICAgfQogICAgICAgIHZhciBicmlkZ2VSZXZlcnNlID0gc3BsaXRQb2x5Z29uKGJyaWRnZSwgaG9sZSk7CiAgICAgICAgZmlsdGVyUG9pbnRzKGJyaWRnZVJldmVyc2UsIGJyaWRnZVJldmVyc2UubmV4dCk7CiAgICAgICAgcmV0dXJuIGZpbHRlclBvaW50cyhicmlkZ2UsIGJyaWRnZS5uZXh0KTsKICAgICAgfQogICAgICBmdW5jdGlvbiBmaW5kSG9sZUJyaWRnZShob2xlLCBvdXRlck5vZGUpIHsKICAgICAgICB2YXIgcCA9IG91dGVyTm9kZSwgaHggPSBob2xlLngsIGh5ID0gaG9sZS55LCBxeCA9IC1JbmZpbml0eSwgbTsKICAgICAgICBkbyB7CiAgICAgICAgICBpZiAoaHkgPD0gcC55ICYmIGh5ID49IHAubmV4dC55ICYmIHAubmV4dC55ICE9PSBwLnkpIHsKICAgICAgICAgICAgdmFyIHggPSBwLnggKyAoaHkgLSBwLnkpICogKHAubmV4dC54IC0gcC54KSAvIChwLm5leHQueSAtIHAueSk7CiAgICAgICAgICAgIGlmICh4IDw9IGh4ICYmIHggPiBxeCkgewogICAgICAgICAgICAgIHF4ID0geDsKICAgICAgICAgICAgICBtID0gcC54IDwgcC5uZXh0LnggPyBwIDogcC5uZXh0OwogICAgICAgICAgICAgIGlmICh4ID09PSBoeCkKICAgICAgICAgICAgICAgIHJldHVybiBtOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBwID0gcC5uZXh0OwogICAgICAgIH0gd2hpbGUgKHAgIT09IG91dGVyTm9kZSk7CiAgICAgICAgaWYgKCFtKQogICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgdmFyIHN0b3AgPSBtLCBteCA9IG0ueCwgbXkgPSBtLnksIHRhbk1pbiA9IEluZmluaXR5LCB0YW47CiAgICAgICAgcCA9IG07CiAgICAgICAgZG8gewogICAgICAgICAgaWYgKGh4ID49IHAueCAmJiBwLnggPj0gbXggJiYgaHggIT09IHAueCAmJiBwb2ludEluVHJpYW5nbGUoaHkgPCBteSA/IGh4IDogcXgsIGh5LCBteCwgbXksIGh5IDwgbXkgPyBxeCA6IGh4LCBoeSwgcC54LCBwLnkpKSB7CiAgICAgICAgICAgIHRhbiA9IE1hdGguYWJzKGh5IC0gcC55KSAvIChoeCAtIHAueCk7CiAgICAgICAgICAgIGlmIChsb2NhbGx5SW5zaWRlKHAsIGhvbGUpICYmICh0YW4gPCB0YW5NaW4gfHwgdGFuID09PSB0YW5NaW4gJiYgKHAueCA+IG0ueCB8fCBwLnggPT09IG0ueCAmJiBzZWN0b3JDb250YWluc1NlY3RvcihtLCBwKSkpKSB7CiAgICAgICAgICAgICAgbSA9IHA7CiAgICAgICAgICAgICAgdGFuTWluID0gdGFuOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBwID0gcC5uZXh0OwogICAgICAgIH0gd2hpbGUgKHAgIT09IHN0b3ApOwogICAgICAgIHJldHVybiBtOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIHNlY3RvckNvbnRhaW5zU2VjdG9yKG0sIHApIHsKICAgICAgICByZXR1cm4gYXJlYShtLnByZXYsIG0sIHAucHJldikgPCAwICYmIGFyZWEocC5uZXh0LCBtLCBtLm5leHQpIDwgMDsKICAgICAgfQogICAgICBmdW5jdGlvbiBpbmRleEN1cnZlKHN0YXJ0LCBtaW5YLCBtaW5ZLCBpbnZTaXplKSB7CiAgICAgICAgdmFyIHAgPSBzdGFydDsKICAgICAgICBkbyB7CiAgICAgICAgICBpZiAocC56ID09PSAwKQogICAgICAgICAgICBwLnogPSB6T3JkZXIocC54LCBwLnksIG1pblgsIG1pblksIGludlNpemUpOwogICAgICAgICAgcC5wcmV2WiA9IHAucHJldjsKICAgICAgICAgIHAubmV4dFogPSBwLm5leHQ7CiAgICAgICAgICBwID0gcC5uZXh0OwogICAgICAgIH0gd2hpbGUgKHAgIT09IHN0YXJ0KTsKICAgICAgICBwLnByZXZaLm5leHRaID0gbnVsbDsKICAgICAgICBwLnByZXZaID0gbnVsbDsKICAgICAgICBzb3J0TGlua2VkKHApOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIHNvcnRMaW5rZWQobGlzdCkgewogICAgICAgIHZhciBpLCBwLCBxLCBlLCB0YWlsLCBudW1NZXJnZXMsIHBTaXplLCBxU2l6ZSwgaW5TaXplID0gMTsKICAgICAgICBkbyB7CiAgICAgICAgICBwID0gbGlzdDsKICAgICAgICAgIGxpc3QgPSBudWxsOwogICAgICAgICAgdGFpbCA9IG51bGw7CiAgICAgICAgICBudW1NZXJnZXMgPSAwOwogICAgICAgICAgd2hpbGUgKHApIHsKICAgICAgICAgICAgbnVtTWVyZ2VzKys7CiAgICAgICAgICAgIHEgPSBwOwogICAgICAgICAgICBwU2l6ZSA9IDA7CiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpblNpemU7IGkrKykgewogICAgICAgICAgICAgIHBTaXplKys7CiAgICAgICAgICAgICAgcSA9IHEubmV4dFo7CiAgICAgICAgICAgICAgaWYgKCFxKQogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcVNpemUgPSBpblNpemU7CiAgICAgICAgICAgIHdoaWxlIChwU2l6ZSA+IDAgfHwgcVNpemUgPiAwICYmIHEpIHsKICAgICAgICAgICAgICBpZiAocFNpemUgIT09IDAgJiYgKHFTaXplID09PSAwIHx8ICFxIHx8IHAueiA8PSBxLnopKSB7CiAgICAgICAgICAgICAgICBlID0gcDsKICAgICAgICAgICAgICAgIHAgPSBwLm5leHRaOwogICAgICAgICAgICAgICAgcFNpemUtLTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgZSA9IHE7CiAgICAgICAgICAgICAgICBxID0gcS5uZXh0WjsKICAgICAgICAgICAgICAgIHFTaXplLS07CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmICh0YWlsKQogICAgICAgICAgICAgICAgdGFpbC5uZXh0WiA9IGU7CiAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgbGlzdCA9IGU7CiAgICAgICAgICAgICAgZS5wcmV2WiA9IHRhaWw7CiAgICAgICAgICAgICAgdGFpbCA9IGU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcCA9IHE7CiAgICAgICAgICB9CiAgICAgICAgICB0YWlsLm5leHRaID0gbnVsbDsKICAgICAgICAgIGluU2l6ZSAqPSAyOwogICAgICAgIH0gd2hpbGUgKG51bU1lcmdlcyA+IDEpOwogICAgICAgIHJldHVybiBsaXN0OwogICAgICB9CiAgICAgIGZ1bmN0aW9uIHpPcmRlcih4LCB5LCBtaW5YLCBtaW5ZLCBpbnZTaXplKSB7CiAgICAgICAgeCA9ICh4IC0gbWluWCkgKiBpbnZTaXplIHwgMDsKICAgICAgICB5ID0gKHkgLSBtaW5ZKSAqIGludlNpemUgfCAwOwogICAgICAgIHggPSAoeCB8IHggPDwgOCkgJiAxNjcxMTkzNTsKICAgICAgICB4ID0gKHggfCB4IDw8IDQpICYgMjUyNjQ1MTM1OwogICAgICAgIHggPSAoeCB8IHggPDwgMikgJiA4NTg5OTM0NTk7CiAgICAgICAgeCA9ICh4IHwgeCA8PCAxKSAmIDE0MzE2NTU3NjU7CiAgICAgICAgeSA9ICh5IHwgeSA8PCA4KSAmIDE2NzExOTM1OwogICAgICAgIHkgPSAoeSB8IHkgPDwgNCkgJiAyNTI2NDUxMzU7CiAgICAgICAgeSA9ICh5IHwgeSA8PCAyKSAmIDg1ODk5MzQ1OTsKICAgICAgICB5ID0gKHkgfCB5IDw8IDEpICYgMTQzMTY1NTc2NTsKICAgICAgICByZXR1cm4geCB8IHkgPDwgMTsKICAgICAgfQogICAgICBmdW5jdGlvbiBnZXRMZWZ0bW9zdChzdGFydCkgewogICAgICAgIHZhciBwID0gc3RhcnQsIGxlZnRtb3N0ID0gc3RhcnQ7CiAgICAgICAgZG8gewogICAgICAgICAgaWYgKHAueCA8IGxlZnRtb3N0LnggfHwgcC54ID09PSBsZWZ0bW9zdC54ICYmIHAueSA8IGxlZnRtb3N0LnkpCiAgICAgICAgICAgIGxlZnRtb3N0ID0gcDsKICAgICAgICAgIHAgPSBwLm5leHQ7CiAgICAgICAgfSB3aGlsZSAocCAhPT0gc3RhcnQpOwogICAgICAgIHJldHVybiBsZWZ0bW9zdDsKICAgICAgfQogICAgICBmdW5jdGlvbiBwb2ludEluVHJpYW5nbGUoYXgsIGF5LCBieCwgYnksIGN4LCBjeSwgcHgsIHB5KSB7CiAgICAgICAgcmV0dXJuIChjeCAtIHB4KSAqIChheSAtIHB5KSA+PSAoYXggLSBweCkgKiAoY3kgLSBweSkgJiYgKGF4IC0gcHgpICogKGJ5IC0gcHkpID49IChieCAtIHB4KSAqIChheSAtIHB5KSAmJiAoYnggLSBweCkgKiAoY3kgLSBweSkgPj0gKGN4IC0gcHgpICogKGJ5IC0gcHkpOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIGlzVmFsaWREaWFnb25hbChhMywgYikgewogICAgICAgIHJldHVybiBhMy5uZXh0LmkgIT09IGIuaSAmJiBhMy5wcmV2LmkgIT09IGIuaSAmJiAhaW50ZXJzZWN0c1BvbHlnb24oYTMsIGIpICYmIC8vIGRvbmVzJ3QgaW50ZXJzZWN0IG90aGVyIGVkZ2VzCiAgICAgICAgKGxvY2FsbHlJbnNpZGUoYTMsIGIpICYmIGxvY2FsbHlJbnNpZGUoYiwgYTMpICYmIG1pZGRsZUluc2lkZShhMywgYikgJiYgLy8gbG9jYWxseSB2aXNpYmxlCiAgICAgICAgKGFyZWEoYTMucHJldiwgYTMsIGIucHJldikgfHwgYXJlYShhMywgYi5wcmV2LCBiKSkgfHwgLy8gZG9lcyBub3QgY3JlYXRlIG9wcG9zaXRlLWZhY2luZyBzZWN0b3JzCiAgICAgICAgZXF1YWxzKGEzLCBiKSAmJiBhcmVhKGEzLnByZXYsIGEzLCBhMy5uZXh0KSA+IDAgJiYgYXJlYShiLnByZXYsIGIsIGIubmV4dCkgPiAwKTsKICAgICAgfQogICAgICBmdW5jdGlvbiBhcmVhKHAsIHEsIHIpIHsKICAgICAgICByZXR1cm4gKHEueSAtIHAueSkgKiAoci54IC0gcS54KSAtIChxLnggLSBwLngpICogKHIueSAtIHEueSk7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gZXF1YWxzKHAxLCBwMikgewogICAgICAgIHJldHVybiBwMS54ID09PSBwMi54ICYmIHAxLnkgPT09IHAyLnk7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gaW50ZXJzZWN0cyhwMSwgcTEyLCBwMiwgcTIyKSB7CiAgICAgICAgdmFyIG8xID0gc2lnbjIoYXJlYShwMSwgcTEyLCBwMikpOwogICAgICAgIHZhciBvMiA9IHNpZ24yKGFyZWEocDEsIHExMiwgcTIyKSk7CiAgICAgICAgdmFyIG8zID0gc2lnbjIoYXJlYShwMiwgcTIyLCBwMSkpOwogICAgICAgIHZhciBvNCA9IHNpZ24yKGFyZWEocDIsIHEyMiwgcTEyKSk7CiAgICAgICAgaWYgKG8xICE9PSBvMiAmJiBvMyAhPT0gbzQpCiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICBpZiAobzEgPT09IDAgJiYgb25TZWdtZW50KHAxLCBwMiwgcTEyKSkKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIGlmIChvMiA9PT0gMCAmJiBvblNlZ21lbnQocDEsIHEyMiwgcTEyKSkKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIGlmIChvMyA9PT0gMCAmJiBvblNlZ21lbnQocDIsIHAxLCBxMjIpKQogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgaWYgKG80ID09PSAwICYmIG9uU2VnbWVudChwMiwgcTEyLCBxMjIpKQogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIG9uU2VnbWVudChwLCBxLCByKSB7CiAgICAgICAgcmV0dXJuIHEueCA8PSBNYXRoLm1heChwLngsIHIueCkgJiYgcS54ID49IE1hdGgubWluKHAueCwgci54KSAmJiBxLnkgPD0gTWF0aC5tYXgocC55LCByLnkpICYmIHEueSA+PSBNYXRoLm1pbihwLnksIHIueSk7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gc2lnbjIobnVtKSB7CiAgICAgICAgcmV0dXJuIG51bSA+IDAgPyAxIDogbnVtIDwgMCA/IC0xIDogMDsKICAgICAgfQogICAgICBmdW5jdGlvbiBpbnRlcnNlY3RzUG9seWdvbihhMywgYikgewogICAgICAgIHZhciBwID0gYTM7CiAgICAgICAgZG8gewogICAgICAgICAgaWYgKHAuaSAhPT0gYTMuaSAmJiBwLm5leHQuaSAhPT0gYTMuaSAmJiBwLmkgIT09IGIuaSAmJiBwLm5leHQuaSAhPT0gYi5pICYmIGludGVyc2VjdHMocCwgcC5uZXh0LCBhMywgYikpCiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgcCA9IHAubmV4dDsKICAgICAgICB9IHdoaWxlIChwICE9PSBhMyk7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIGxvY2FsbHlJbnNpZGUoYTMsIGIpIHsKICAgICAgICByZXR1cm4gYXJlYShhMy5wcmV2LCBhMywgYTMubmV4dCkgPCAwID8gYXJlYShhMywgYiwgYTMubmV4dCkgPj0gMCAmJiBhcmVhKGEzLCBhMy5wcmV2LCBiKSA+PSAwIDogYXJlYShhMywgYiwgYTMucHJldikgPCAwIHx8IGFyZWEoYTMsIGEzLm5leHQsIGIpIDwgMDsKICAgICAgfQogICAgICBmdW5jdGlvbiBtaWRkbGVJbnNpZGUoYTMsIGIpIHsKICAgICAgICB2YXIgcCA9IGEzLCBpbnNpZGUgPSBmYWxzZSwgcHggPSAoYTMueCArIGIueCkgLyAyLCBweSA9IChhMy55ICsgYi55KSAvIDI7CiAgICAgICAgZG8gewogICAgICAgICAgaWYgKHAueSA+IHB5ICE9PSBwLm5leHQueSA+IHB5ICYmIHAubmV4dC55ICE9PSBwLnkgJiYgcHggPCAocC5uZXh0LnggLSBwLngpICogKHB5IC0gcC55KSAvIChwLm5leHQueSAtIHAueSkgKyBwLngpCiAgICAgICAgICAgIGluc2lkZSA9ICFpbnNpZGU7CiAgICAgICAgICBwID0gcC5uZXh0OwogICAgICAgIH0gd2hpbGUgKHAgIT09IGEzKTsKICAgICAgICByZXR1cm4gaW5zaWRlOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIHNwbGl0UG9seWdvbihhMywgYikgewogICAgICAgIHZhciBhMjIgPSBuZXcgTm9kZShhMy5pLCBhMy54LCBhMy55KSwgYjIgPSBuZXcgTm9kZShiLmksIGIueCwgYi55KSwgYW4gPSBhMy5uZXh0LCBicCA9IGIucHJldjsKICAgICAgICBhMy5uZXh0ID0gYjsKICAgICAgICBiLnByZXYgPSBhMzsKICAgICAgICBhMjIubmV4dCA9IGFuOwogICAgICAgIGFuLnByZXYgPSBhMjI7CiAgICAgICAgYjIubmV4dCA9IGEyMjsKICAgICAgICBhMjIucHJldiA9IGIyOwogICAgICAgIGJwLm5leHQgPSBiMjsKICAgICAgICBiMi5wcmV2ID0gYnA7CiAgICAgICAgcmV0dXJuIGIyOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIGluc2VydE5vZGUoaSwgeCwgeSwgbGFzdCkgewogICAgICAgIHZhciBwID0gbmV3IE5vZGUoaSwgeCwgeSk7CiAgICAgICAgaWYgKCFsYXN0KSB7CiAgICAgICAgICBwLnByZXYgPSBwOwogICAgICAgICAgcC5uZXh0ID0gcDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcC5uZXh0ID0gbGFzdC5uZXh0OwogICAgICAgICAgcC5wcmV2ID0gbGFzdDsKICAgICAgICAgIGxhc3QubmV4dC5wcmV2ID0gcDsKICAgICAgICAgIGxhc3QubmV4dCA9IHA7CiAgICAgICAgfQogICAgICAgIHJldHVybiBwOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIHJlbW92ZU5vZGUocCkgewogICAgICAgIHAubmV4dC5wcmV2ID0gcC5wcmV2OwogICAgICAgIHAucHJldi5uZXh0ID0gcC5uZXh0OwogICAgICAgIGlmIChwLnByZXZaKQogICAgICAgICAgcC5wcmV2Wi5uZXh0WiA9IHAubmV4dFo7CiAgICAgICAgaWYgKHAubmV4dFopCiAgICAgICAgICBwLm5leHRaLnByZXZaID0gcC5wcmV2WjsKICAgICAgfQogICAgICBmdW5jdGlvbiBOb2RlKGksIHgsIHkpIHsKICAgICAgICB0aGlzLmkgPSBpOwogICAgICAgIHRoaXMueCA9IHg7CiAgICAgICAgdGhpcy55ID0geTsKICAgICAgICB0aGlzLnByZXYgPSBudWxsOwogICAgICAgIHRoaXMubmV4dCA9IG51bGw7CiAgICAgICAgdGhpcy56ID0gMDsKICAgICAgICB0aGlzLnByZXZaID0gbnVsbDsKICAgICAgICB0aGlzLm5leHRaID0gbnVsbDsKICAgICAgICB0aGlzLnN0ZWluZXIgPSBmYWxzZTsKICAgICAgfQogICAgICBlYXJjdXQyLmRldmlhdGlvbiA9IGZ1bmN0aW9uKGRhdGEsIGhvbGVJbmRpY2VzLCBkaW0sIHRyaWFuZ2xlcykgewogICAgICAgIHZhciBoYXNIb2xlcyA9IGhvbGVJbmRpY2VzICYmIGhvbGVJbmRpY2VzLmxlbmd0aDsKICAgICAgICB2YXIgb3V0ZXJMZW4gPSBoYXNIb2xlcyA/IGhvbGVJbmRpY2VzWzBdICogZGltIDogZGF0YS5sZW5ndGg7CiAgICAgICAgdmFyIHBvbHlnb25BcmVhID0gTWF0aC5hYnMoc2lnbmVkQXJlYShkYXRhLCAwLCBvdXRlckxlbiwgZGltKSk7CiAgICAgICAgaWYgKGhhc0hvbGVzKSB7CiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gaG9sZUluZGljZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICAgICAgdmFyIHN0YXJ0ID0gaG9sZUluZGljZXNbaV0gKiBkaW07CiAgICAgICAgICAgIHZhciBlbmQgPSBpIDwgbGVuIC0gMSA/IGhvbGVJbmRpY2VzW2kgKyAxXSAqIGRpbSA6IGRhdGEubGVuZ3RoOwogICAgICAgICAgICBwb2x5Z29uQXJlYSAtPSBNYXRoLmFicyhzaWduZWRBcmVhKGRhdGEsIHN0YXJ0LCBlbmQsIGRpbSkpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB2YXIgdHJpYW5nbGVzQXJlYSA9IDA7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRyaWFuZ2xlcy5sZW5ndGg7IGkgKz0gMykgewogICAgICAgICAgdmFyIGEzID0gdHJpYW5nbGVzW2ldICogZGltOwogICAgICAgICAgdmFyIGIgPSB0cmlhbmdsZXNbaSArIDFdICogZGltOwogICAgICAgICAgdmFyIGMgPSB0cmlhbmdsZXNbaSArIDJdICogZGltOwogICAgICAgICAgdHJpYW5nbGVzQXJlYSArPSBNYXRoLmFicygKICAgICAgICAgICAgKGRhdGFbYTNdIC0gZGF0YVtjXSkgKiAoZGF0YVtiICsgMV0gLSBkYXRhW2EzICsgMV0pIC0gKGRhdGFbYTNdIC0gZGF0YVtiXSkgKiAoZGF0YVtjICsgMV0gLSBkYXRhW2EzICsgMV0pCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcG9seWdvbkFyZWEgPT09IDAgJiYgdHJpYW5nbGVzQXJlYSA9PT0gMCA/IDAgOiBNYXRoLmFicygodHJpYW5nbGVzQXJlYSAtIHBvbHlnb25BcmVhKSAvIHBvbHlnb25BcmVhKTsKICAgICAgfTsKICAgICAgZnVuY3Rpb24gc2lnbmVkQXJlYShkYXRhLCBzdGFydCwgZW5kLCBkaW0pIHsKICAgICAgICB2YXIgc3VtID0gMDsKICAgICAgICBmb3IgKHZhciBpID0gc3RhcnQsIGogPSBlbmQgLSBkaW07IGkgPCBlbmQ7IGkgKz0gZGltKSB7CiAgICAgICAgICBzdW0gKz0gKGRhdGFbal0gLSBkYXRhW2ldKSAqIChkYXRhW2kgKyAxXSArIGRhdGFbaiArIDFdKTsKICAgICAgICAgIGogPSBpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gc3VtOwogICAgICB9CiAgICAgIGVhcmN1dDIuZmxhdHRlbiA9IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICB2YXIgZGltID0gZGF0YVswXVswXS5sZW5ndGgsIHJlc3VsdCA9IHsgdmVydGljZXM6IFtdLCBob2xlczogW10sIGRpbWVuc2lvbnM6IGRpbSB9LCBob2xlSW5kZXggPSAwOwogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykgewogICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBkYXRhW2ldLmxlbmd0aDsgaisrKSB7CiAgICAgICAgICAgIGZvciAodmFyIGQgPSAwOyBkIDwgZGltOyBkKyspCiAgICAgICAgICAgICAgcmVzdWx0LnZlcnRpY2VzLnB1c2goZGF0YVtpXVtqXVtkXSk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoaSA+IDApIHsKICAgICAgICAgICAgaG9sZUluZGV4ICs9IGRhdGFbaSAtIDFdLmxlbmd0aDsKICAgICAgICAgICAgcmVzdWx0LmhvbGVzLnB1c2goaG9sZUluZGV4KTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1dpbmRpbmdPcmRlci5qcwogIHZhciBXaW5kaW5nT3JkZXIsIFdpbmRpbmdPcmRlcl9kZWZhdWx0OwogIHZhciBpbml0X1dpbmRpbmdPcmRlciA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvV2luZGluZ09yZGVyLmpzIigpIHsKICAgICAgaW5pdF9XZWJHTENvbnN0YW50cygpOwogICAgICBXaW5kaW5nT3JkZXIgPSB7CiAgICAgICAgLyoqCiAgICAgICAgICogVmVydGljZXMgYXJlIGluIGNsb2Nrd2lzZSBvcmRlci4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgQ0xPQ0tXSVNFOiBXZWJHTENvbnN0YW50c19kZWZhdWx0LkNXLAogICAgICAgIC8qKgogICAgICAgICAqIFZlcnRpY2VzIGFyZSBpbiBjb3VudGVyLWNsb2Nrd2lzZSBvcmRlci4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgQ09VTlRFUl9DTE9DS1dJU0U6IFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuQ0NXCiAgICAgIH07CiAgICAgIFdpbmRpbmdPcmRlci52YWxpZGF0ZSA9IGZ1bmN0aW9uKHdpbmRpbmdPcmRlcikgewogICAgICAgIHJldHVybiB3aW5kaW5nT3JkZXIgPT09IFdpbmRpbmdPcmRlci5DTE9DS1dJU0UgfHwgd2luZGluZ09yZGVyID09PSBXaW5kaW5nT3JkZXIuQ09VTlRFUl9DTE9DS1dJU0U7CiAgICAgIH07CiAgICAgIFdpbmRpbmdPcmRlcl9kZWZhdWx0ID0gT2JqZWN0LmZyZWV6ZShXaW5kaW5nT3JkZXIpOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUG9seWdvblBpcGVsaW5lLmpzCiAgdmFyIGltcG9ydF9lYXJjdXQsIHNjYWxlVG9HZW9kZXRpY0hlaWdodE4sIHNjYWxlVG9HZW9kZXRpY0hlaWdodFAsIFBvbHlnb25QaXBlbGluZSwgc3ViZGl2aXNpb25WMFNjcmF0Y2gsIHN1YmRpdmlzaW9uVjFTY3JhdGNoLCBzdWJkaXZpc2lvblYyU2NyYXRjaCwgc3ViZGl2aXNpb25TMFNjcmF0Y2gsIHN1YmRpdmlzaW9uUzFTY3JhdGNoLCBzdWJkaXZpc2lvblMyU2NyYXRjaCwgc3ViZGl2aXNpb25NaWRTY3JhdGNoLCBzdWJkaXZpc2lvblQwU2NyYXRjaCwgc3ViZGl2aXNpb25UMVNjcmF0Y2gsIHN1YmRpdmlzaW9uVDJTY3JhdGNoLCBzdWJkaXZpc2lvblRleGNvb3JkTWlkU2NyYXRjaCwgc3ViZGl2aXNpb25DMFNjcmF0Y2gsIHN1YmRpdmlzaW9uQzFTY3JhdGNoLCBzdWJkaXZpc2lvbkMyU2NyYXRjaCwgc3ViZGl2aXNpb25DYXJ0b2dyYXBoaWNTY3JhdGNoLCBQb2x5Z29uUGlwZWxpbmVfZGVmYXVsdDsKICB2YXIgaW5pdF9Qb2x5Z29uUGlwZWxpbmUgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1BvbHlnb25QaXBlbGluZS5qcyIoKSB7CiAgICAgIGltcG9ydF9lYXJjdXQgPSBfX3RvRVNNKHJlcXVpcmVfZWFyY3V0KCksIDEpOwogICAgICBpbml0X0NhcnRlc2lhbjIoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ2FydG9ncmFwaGljKCk7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgaW5pdF9Db21wb25lbnREYXRhdHlwZSgpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9FbGxpcHNvaWRSaHVtYkxpbmUoKTsKICAgICAgaW5pdF9HZW9tZXRyeSgpOwogICAgICBpbml0X0dlb21ldHJ5QXR0cmlidXRlKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X1ByaW1pdGl2ZVR5cGUoKTsKICAgICAgaW5pdF9XaW5kaW5nT3JkZXIoKTsKICAgICAgc2NhbGVUb0dlb2RldGljSGVpZ2h0TiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NhbGVUb0dlb2RldGljSGVpZ2h0UCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgUG9seWdvblBpcGVsaW5lID0ge307CiAgICAgIFBvbHlnb25QaXBlbGluZS5jb21wdXRlQXJlYTJEID0gZnVuY3Rpb24ocG9zaXRpb25zKSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJwb3NpdGlvbnMiLCBwb3NpdGlvbnMpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbk9yRXF1YWxzKAogICAgICAgICAgInBvc2l0aW9ucy5sZW5ndGgiLAogICAgICAgICAgcG9zaXRpb25zLmxlbmd0aCwKICAgICAgICAgIDMKICAgICAgICApOwogICAgICAgIGNvbnN0IGxlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgbGV0IGFyZWEgPSAwOwogICAgICAgIGZvciAobGV0IGkwID0gbGVuZ3RoIC0gMSwgaTEgPSAwOyBpMSA8IGxlbmd0aDsgaTAgPSBpMSsrKSB7CiAgICAgICAgICBjb25zdCB2MDIgPSBwb3NpdGlvbnNbaTBdOwogICAgICAgICAgY29uc3QgdjEyID0gcG9zaXRpb25zW2kxXTsKICAgICAgICAgIGFyZWEgKz0gdjAyLnggKiB2MTIueSAtIHYxMi54ICogdjAyLnk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBhcmVhICogMC41OwogICAgICB9OwogICAgICBQb2x5Z29uUGlwZWxpbmUuY29tcHV0ZVdpbmRpbmdPcmRlcjJEID0gZnVuY3Rpb24ocG9zaXRpb25zKSB7CiAgICAgICAgY29uc3QgYXJlYSA9IFBvbHlnb25QaXBlbGluZS5jb21wdXRlQXJlYTJEKHBvc2l0aW9ucyk7CiAgICAgICAgcmV0dXJuIGFyZWEgPiAwID8gV2luZGluZ09yZGVyX2RlZmF1bHQuQ09VTlRFUl9DTE9DS1dJU0UgOiBXaW5kaW5nT3JkZXJfZGVmYXVsdC5DTE9DS1dJU0U7CiAgICAgIH07CiAgICAgIFBvbHlnb25QaXBlbGluZS50cmlhbmd1bGF0ZSA9IGZ1bmN0aW9uKHBvc2l0aW9ucywgaG9sZXMpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoInBvc2l0aW9ucyIsIHBvc2l0aW9ucyk7CiAgICAgICAgY29uc3QgZmxhdHRlbmVkUG9zaXRpb25zID0gQ2FydGVzaWFuMl9kZWZhdWx0LnBhY2tBcnJheShwb3NpdGlvbnMpOwogICAgICAgIHJldHVybiAoMCwgaW1wb3J0X2VhcmN1dC5kZWZhdWx0KShmbGF0dGVuZWRQb3NpdGlvbnMsIGhvbGVzLCAyKTsKICAgICAgfTsKICAgICAgc3ViZGl2aXNpb25WMFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHN1YmRpdmlzaW9uVjFTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzdWJkaXZpc2lvblYyU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc3ViZGl2aXNpb25TMFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHN1YmRpdmlzaW9uUzFTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzdWJkaXZpc2lvblMyU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc3ViZGl2aXNpb25NaWRTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzdWJkaXZpc2lvblQwU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4yX2RlZmF1bHQoKTsKICAgICAgc3ViZGl2aXNpb25UMVNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCk7CiAgICAgIHN1YmRpdmlzaW9uVDJTY3JhdGNoID0gbmV3IENhcnRlc2lhbjJfZGVmYXVsdCgpOwogICAgICBzdWJkaXZpc2lvblRleGNvb3JkTWlkU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4yX2RlZmF1bHQoKTsKICAgICAgUG9seWdvblBpcGVsaW5lLmNvbXB1dGVTdWJkaXZpc2lvbiA9IGZ1bmN0aW9uKGVsbGlwc29pZCwgcG9zaXRpb25zLCBpbmRpY2VzLCB0ZXhjb29yZHMsIGdyYW51bGFyaXR5KSB7CiAgICAgICAgZ3JhbnVsYXJpdHkgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChncmFudWxhcml0eSwgTWF0aF9kZWZhdWx0LlJBRElBTlNfUEVSX0RFR1JFRSk7CiAgICAgICAgY29uc3QgaGFzVGV4Y29vcmRzID0gZGVmaW5lZF9kZWZhdWx0KHRleGNvb3Jkcyk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJlbGxpcHNvaWQiLCBlbGxpcHNvaWQpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgicG9zaXRpb25zIiwgcG9zaXRpb25zKTsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImluZGljZXMiLCBpbmRpY2VzKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygiaW5kaWNlcy5sZW5ndGgiLCBpbmRpY2VzLmxlbmd0aCwgMyk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmVxdWFscygiaW5kaWNlcy5sZW5ndGggJSAzIiwgIjAiLCBpbmRpY2VzLmxlbmd0aCAlIDMsIDApOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbigiZ3JhbnVsYXJpdHkiLCBncmFudWxhcml0eSwgMCk7CiAgICAgICAgY29uc3QgdHJpYW5nbGVzID0gaW5kaWNlcy5zbGljZSgwKTsKICAgICAgICBsZXQgaTsKICAgICAgICBjb25zdCBsZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoOwogICAgICAgIGNvbnN0IHN1YmRpdmlkZWRQb3NpdGlvbnMgPSBuZXcgQXJyYXkobGVuZ3RoICogMyk7CiAgICAgICAgY29uc3Qgc3ViZGl2aWRlZFRleGNvb3JkcyA9IG5ldyBBcnJheShsZW5ndGggKiAyKTsKICAgICAgICBsZXQgcSA9IDA7CiAgICAgICAgbGV0IHAgPSAwOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgICAgY29uc3QgaXRlbSA9IHBvc2l0aW9uc1tpXTsKICAgICAgICAgIHN1YmRpdmlkZWRQb3NpdGlvbnNbcSsrXSA9IGl0ZW0ueDsKICAgICAgICAgIHN1YmRpdmlkZWRQb3NpdGlvbnNbcSsrXSA9IGl0ZW0ueTsKICAgICAgICAgIHN1YmRpdmlkZWRQb3NpdGlvbnNbcSsrXSA9IGl0ZW0uejsKICAgICAgICAgIGlmIChoYXNUZXhjb29yZHMpIHsKICAgICAgICAgICAgY29uc3QgdGV4Y29vcmRJdGVtID0gdGV4Y29vcmRzW2ldOwogICAgICAgICAgICBzdWJkaXZpZGVkVGV4Y29vcmRzW3ArK10gPSB0ZXhjb29yZEl0ZW0ueDsKICAgICAgICAgICAgc3ViZGl2aWRlZFRleGNvb3Jkc1twKytdID0gdGV4Y29vcmRJdGVtLnk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNvbnN0IHN1YmRpdmlkZWRJbmRpY2VzID0gW107CiAgICAgICAgY29uc3QgZWRnZXMgPSB7fTsKICAgICAgICBjb25zdCByYWRpdXMgPSBlbGxpcHNvaWQubWF4aW11bVJhZGl1czsKICAgICAgICBjb25zdCBtaW5EaXN0YW5jZSA9IE1hdGhfZGVmYXVsdC5jaG9yZExlbmd0aChncmFudWxhcml0eSwgcmFkaXVzKTsKICAgICAgICBjb25zdCBtaW5EaXN0YW5jZVNxcmQgPSBtaW5EaXN0YW5jZSAqIG1pbkRpc3RhbmNlOwogICAgICAgIHdoaWxlICh0cmlhbmdsZXMubGVuZ3RoID4gMCkgewogICAgICAgICAgY29uc3QgaTIgPSB0cmlhbmdsZXMucG9wKCk7CiAgICAgICAgICBjb25zdCBpMSA9IHRyaWFuZ2xlcy5wb3AoKTsKICAgICAgICAgIGNvbnN0IGkwID0gdHJpYW5nbGVzLnBvcCgpOwogICAgICAgICAgY29uc3QgdjAyID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheSgKICAgICAgICAgICAgc3ViZGl2aWRlZFBvc2l0aW9ucywKICAgICAgICAgICAgaTAgKiAzLAogICAgICAgICAgICBzdWJkaXZpc2lvblYwU2NyYXRjaAogICAgICAgICAgKTsKICAgICAgICAgIGNvbnN0IHYxMiA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkoCiAgICAgICAgICAgIHN1YmRpdmlkZWRQb3NpdGlvbnMsCiAgICAgICAgICAgIGkxICogMywKICAgICAgICAgICAgc3ViZGl2aXNpb25WMVNjcmF0Y2gKICAgICAgICAgICk7CiAgICAgICAgICBjb25zdCB2MjIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KAogICAgICAgICAgICBzdWJkaXZpZGVkUG9zaXRpb25zLAogICAgICAgICAgICBpMiAqIDMsCiAgICAgICAgICAgIHN1YmRpdmlzaW9uVjJTY3JhdGNoCiAgICAgICAgICApOwogICAgICAgICAgbGV0IHQwLCB0MSwgdDI7CiAgICAgICAgICBpZiAoaGFzVGV4Y29vcmRzKSB7CiAgICAgICAgICAgIHQwID0gQ2FydGVzaWFuMl9kZWZhdWx0LmZyb21BcnJheSgKICAgICAgICAgICAgICBzdWJkaXZpZGVkVGV4Y29vcmRzLAogICAgICAgICAgICAgIGkwICogMiwKICAgICAgICAgICAgICBzdWJkaXZpc2lvblQwU2NyYXRjaAogICAgICAgICAgICApOwogICAgICAgICAgICB0MSA9IENhcnRlc2lhbjJfZGVmYXVsdC5mcm9tQXJyYXkoCiAgICAgICAgICAgICAgc3ViZGl2aWRlZFRleGNvb3JkcywKICAgICAgICAgICAgICBpMSAqIDIsCiAgICAgICAgICAgICAgc3ViZGl2aXNpb25UMVNjcmF0Y2gKICAgICAgICAgICAgKTsKICAgICAgICAgICAgdDIgPSBDYXJ0ZXNpYW4yX2RlZmF1bHQuZnJvbUFycmF5KAogICAgICAgICAgICAgIHN1YmRpdmlkZWRUZXhjb29yZHMsCiAgICAgICAgICAgICAgaTIgKiAyLAogICAgICAgICAgICAgIHN1YmRpdmlzaW9uVDJTY3JhdGNoCiAgICAgICAgICAgICk7CiAgICAgICAgICB9CiAgICAgICAgICBjb25zdCBzMCA9IENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKAogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKHYwMiwgc3ViZGl2aXNpb25TMFNjcmF0Y2gpLAogICAgICAgICAgICByYWRpdXMsCiAgICAgICAgICAgIHN1YmRpdmlzaW9uUzBTY3JhdGNoCiAgICAgICAgICApOwogICAgICAgICAgY29uc3QgczEgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcigKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSh2MTIsIHN1YmRpdmlzaW9uUzFTY3JhdGNoKSwKICAgICAgICAgICAgcmFkaXVzLAogICAgICAgICAgICBzdWJkaXZpc2lvblMxU2NyYXRjaAogICAgICAgICAgKTsKICAgICAgICAgIGNvbnN0IHMyID0gQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIoCiAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUodjIyLCBzdWJkaXZpc2lvblMyU2NyYXRjaCksCiAgICAgICAgICAgIHJhZGl1cywKICAgICAgICAgICAgc3ViZGl2aXNpb25TMlNjcmF0Y2gKICAgICAgICAgICk7CiAgICAgICAgICBjb25zdCBnMCA9IENhcnRlc2lhbjNfZGVmYXVsdC5tYWduaXR1ZGVTcXVhcmVkKAogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoczAsIHMxLCBzdWJkaXZpc2lvbk1pZFNjcmF0Y2gpCiAgICAgICAgICApOwogICAgICAgICAgY29uc3QgZzEgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlU3F1YXJlZCgKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHMxLCBzMiwgc3ViZGl2aXNpb25NaWRTY3JhdGNoKQogICAgICAgICAgKTsKICAgICAgICAgIGNvbnN0IGcyID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZVNxdWFyZWQoCiAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChzMiwgczAsIHN1YmRpdmlzaW9uTWlkU2NyYXRjaCkKICAgICAgICAgICk7CiAgICAgICAgICBjb25zdCBtYXgzID0gTWF0aC5tYXgoZzAsIGcxLCBnMik7CiAgICAgICAgICBsZXQgZWRnZTsKICAgICAgICAgIGxldCBtaWQ7CiAgICAgICAgICBsZXQgbWlkVGV4Y29vcmQ7CiAgICAgICAgICBpZiAobWF4MyA+IG1pbkRpc3RhbmNlU3FyZCkgewogICAgICAgICAgICBpZiAoZzAgPT09IG1heDMpIHsKICAgICAgICAgICAgICBlZGdlID0gYCR7TWF0aC5taW4oaTAsIGkxKX0gJHtNYXRoLm1heChpMCwgaTEpfWA7CiAgICAgICAgICAgICAgaSA9IGVkZ2VzW2VkZ2VdOwogICAgICAgICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGkpKSB7CiAgICAgICAgICAgICAgICBtaWQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKHYwMiwgdjEyLCBzdWJkaXZpc2lvbk1pZFNjcmF0Y2gpOwogICAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIobWlkLCAwLjUsIG1pZCk7CiAgICAgICAgICAgICAgICBzdWJkaXZpZGVkUG9zaXRpb25zLnB1c2gobWlkLngsIG1pZC55LCBtaWQueik7CiAgICAgICAgICAgICAgICBpID0gc3ViZGl2aWRlZFBvc2l0aW9ucy5sZW5ndGggLyAzIC0gMTsKICAgICAgICAgICAgICAgIGVkZ2VzW2VkZ2VdID0gaTsKICAgICAgICAgICAgICAgIGlmIChoYXNUZXhjb29yZHMpIHsKICAgICAgICAgICAgICAgICAgbWlkVGV4Y29vcmQgPSBDYXJ0ZXNpYW4yX2RlZmF1bHQuYWRkKHQwLCB0MSwgc3ViZGl2aXNpb25UZXhjb29yZE1pZFNjcmF0Y2gpOwogICAgICAgICAgICAgICAgICBDYXJ0ZXNpYW4yX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcihtaWRUZXhjb29yZCwgMC41LCBtaWRUZXhjb29yZCk7CiAgICAgICAgICAgICAgICAgIHN1YmRpdmlkZWRUZXhjb29yZHMucHVzaChtaWRUZXhjb29yZC54LCBtaWRUZXhjb29yZC55KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdHJpYW5nbGVzLnB1c2goaTAsIGksIGkyKTsKICAgICAgICAgICAgICB0cmlhbmdsZXMucHVzaChpLCBpMSwgaTIpOwogICAgICAgICAgICB9IGVsc2UgaWYgKGcxID09PSBtYXgzKSB7CiAgICAgICAgICAgICAgZWRnZSA9IGAke01hdGgubWluKGkxLCBpMil9ICR7TWF0aC5tYXgoaTEsIGkyKX1gOwogICAgICAgICAgICAgIGkgPSBlZGdlc1tlZGdlXTsKICAgICAgICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChpKSkgewogICAgICAgICAgICAgICAgbWlkID0gQ2FydGVzaWFuM19kZWZhdWx0LmFkZCh2MTIsIHYyMiwgc3ViZGl2aXNpb25NaWRTY3JhdGNoKTsKICAgICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKG1pZCwgMC41LCBtaWQpOwogICAgICAgICAgICAgICAgc3ViZGl2aWRlZFBvc2l0aW9ucy5wdXNoKG1pZC54LCBtaWQueSwgbWlkLnopOwogICAgICAgICAgICAgICAgaSA9IHN1YmRpdmlkZWRQb3NpdGlvbnMubGVuZ3RoIC8gMyAtIDE7CiAgICAgICAgICAgICAgICBlZGdlc1tlZGdlXSA9IGk7CiAgICAgICAgICAgICAgICBpZiAoaGFzVGV4Y29vcmRzKSB7CiAgICAgICAgICAgICAgICAgIG1pZFRleGNvb3JkID0gQ2FydGVzaWFuMl9kZWZhdWx0LmFkZCh0MSwgdDIsIHN1YmRpdmlzaW9uVGV4Y29vcmRNaWRTY3JhdGNoKTsKICAgICAgICAgICAgICAgICAgQ2FydGVzaWFuMl9kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIobWlkVGV4Y29vcmQsIDAuNSwgbWlkVGV4Y29vcmQpOwogICAgICAgICAgICAgICAgICBzdWJkaXZpZGVkVGV4Y29vcmRzLnB1c2gobWlkVGV4Y29vcmQueCwgbWlkVGV4Y29vcmQueSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHRyaWFuZ2xlcy5wdXNoKGkxLCBpLCBpMCk7CiAgICAgICAgICAgICAgdHJpYW5nbGVzLnB1c2goaSwgaTIsIGkwKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChnMiA9PT0gbWF4MykgewogICAgICAgICAgICAgIGVkZ2UgPSBgJHtNYXRoLm1pbihpMiwgaTApfSAke01hdGgubWF4KGkyLCBpMCl9YDsKICAgICAgICAgICAgICBpID0gZWRnZXNbZWRnZV07CiAgICAgICAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoaSkpIHsKICAgICAgICAgICAgICAgIG1pZCA9IENhcnRlc2lhbjNfZGVmYXVsdC5hZGQodjIyLCB2MDIsIHN1YmRpdmlzaW9uTWlkU2NyYXRjaCk7CiAgICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcihtaWQsIDAuNSwgbWlkKTsKICAgICAgICAgICAgICAgIHN1YmRpdmlkZWRQb3NpdGlvbnMucHVzaChtaWQueCwgbWlkLnksIG1pZC56KTsKICAgICAgICAgICAgICAgIGkgPSBzdWJkaXZpZGVkUG9zaXRpb25zLmxlbmd0aCAvIDMgLSAxOwogICAgICAgICAgICAgICAgZWRnZXNbZWRnZV0gPSBpOwogICAgICAgICAgICAgICAgaWYgKGhhc1RleGNvb3JkcykgewogICAgICAgICAgICAgICAgICBtaWRUZXhjb29yZCA9IENhcnRlc2lhbjJfZGVmYXVsdC5hZGQodDIsIHQwLCBzdWJkaXZpc2lvblRleGNvb3JkTWlkU2NyYXRjaCk7CiAgICAgICAgICAgICAgICAgIENhcnRlc2lhbjJfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKG1pZFRleGNvb3JkLCAwLjUsIG1pZFRleGNvb3JkKTsKICAgICAgICAgICAgICAgICAgc3ViZGl2aWRlZFRleGNvb3Jkcy5wdXNoKG1pZFRleGNvb3JkLngsIG1pZFRleGNvb3JkLnkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB0cmlhbmdsZXMucHVzaChpMiwgaSwgaTEpOwogICAgICAgICAgICAgIHRyaWFuZ2xlcy5wdXNoKGksIGkwLCBpMSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHN1YmRpdmlkZWRJbmRpY2VzLnB1c2goaTApOwogICAgICAgICAgICBzdWJkaXZpZGVkSW5kaWNlcy5wdXNoKGkxKTsKICAgICAgICAgICAgc3ViZGl2aWRlZEluZGljZXMucHVzaChpMik7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNvbnN0IGdlb21ldHJ5T3B0aW9ucyA9IHsKICAgICAgICAgIGF0dHJpYnV0ZXM6IHsKICAgICAgICAgICAgcG9zaXRpb246IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5ET1VCTEUsCiAgICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICAgICAgICB2YWx1ZXM6IHN1YmRpdmlkZWRQb3NpdGlvbnMKICAgICAgICAgICAgfSkKICAgICAgICAgIH0sCiAgICAgICAgICBpbmRpY2VzOiBzdWJkaXZpZGVkSW5kaWNlcywKICAgICAgICAgIHByaW1pdGl2ZVR5cGU6IFByaW1pdGl2ZVR5cGVfZGVmYXVsdC5UUklBTkdMRVMKICAgICAgICB9OwogICAgICAgIGlmIChoYXNUZXhjb29yZHMpIHsKICAgICAgICAgIGdlb21ldHJ5T3B0aW9ucy5hdHRyaWJ1dGVzLnN0ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMiwKICAgICAgICAgICAgdmFsdWVzOiBzdWJkaXZpZGVkVGV4Y29vcmRzCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG5ldyBHZW9tZXRyeV9kZWZhdWx0KGdlb21ldHJ5T3B0aW9ucyk7CiAgICAgIH07CiAgICAgIHN1YmRpdmlzaW9uQzBTY3JhdGNoID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIHN1YmRpdmlzaW9uQzFTY3JhdGNoID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIHN1YmRpdmlzaW9uQzJTY3JhdGNoID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIHN1YmRpdmlzaW9uQ2FydG9ncmFwaGljU2NyYXRjaCA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICBQb2x5Z29uUGlwZWxpbmUuY29tcHV0ZVJodW1iTGluZVN1YmRpdmlzaW9uID0gZnVuY3Rpb24oZWxsaXBzb2lkLCBwb3NpdGlvbnMsIGluZGljZXMsIHRleGNvb3JkcywgZ3JhbnVsYXJpdHkpIHsKICAgICAgICBncmFudWxhcml0eSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGdyYW51bGFyaXR5LCBNYXRoX2RlZmF1bHQuUkFESUFOU19QRVJfREVHUkVFKTsKICAgICAgICBjb25zdCBoYXNUZXhjb29yZHMgPSBkZWZpbmVkX2RlZmF1bHQodGV4Y29vcmRzKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImVsbGlwc29pZCIsIGVsbGlwc29pZCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJwb3NpdGlvbnMiLCBwb3NpdGlvbnMpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiaW5kaWNlcyIsIGluZGljZXMpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbk9yRXF1YWxzKCJpbmRpY2VzLmxlbmd0aCIsIGluZGljZXMubGVuZ3RoLCAzKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZXF1YWxzKCJpbmRpY2VzLmxlbmd0aCAlIDMiLCAiMCIsIGluZGljZXMubGVuZ3RoICUgMywgMCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuKCJncmFudWxhcml0eSIsIGdyYW51bGFyaXR5LCAwKTsKICAgICAgICBjb25zdCB0cmlhbmdsZXMgPSBpbmRpY2VzLnNsaWNlKDApOwogICAgICAgIGxldCBpOwogICAgICAgIGNvbnN0IGxlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgY29uc3Qgc3ViZGl2aWRlZFBvc2l0aW9ucyA9IG5ldyBBcnJheShsZW5ndGggKiAzKTsKICAgICAgICBjb25zdCBzdWJkaXZpZGVkVGV4Y29vcmRzID0gbmV3IEFycmF5KGxlbmd0aCAqIDIpOwogICAgICAgIGxldCBxID0gMDsKICAgICAgICBsZXQgcCA9IDA7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgICBjb25zdCBpdGVtID0gcG9zaXRpb25zW2ldOwogICAgICAgICAgc3ViZGl2aWRlZFBvc2l0aW9uc1txKytdID0gaXRlbS54OwogICAgICAgICAgc3ViZGl2aWRlZFBvc2l0aW9uc1txKytdID0gaXRlbS55OwogICAgICAgICAgc3ViZGl2aWRlZFBvc2l0aW9uc1txKytdID0gaXRlbS56OwogICAgICAgICAgaWYgKGhhc1RleGNvb3JkcykgewogICAgICAgICAgICBjb25zdCB0ZXhjb29yZEl0ZW0gPSB0ZXhjb29yZHNbaV07CiAgICAgICAgICAgIHN1YmRpdmlkZWRUZXhjb29yZHNbcCsrXSA9IHRleGNvb3JkSXRlbS54OwogICAgICAgICAgICBzdWJkaXZpZGVkVGV4Y29vcmRzW3ArK10gPSB0ZXhjb29yZEl0ZW0ueTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY29uc3Qgc3ViZGl2aWRlZEluZGljZXMgPSBbXTsKICAgICAgICBjb25zdCBlZGdlcyA9IHt9OwogICAgICAgIGNvbnN0IHJhZGl1cyA9IGVsbGlwc29pZC5tYXhpbXVtUmFkaXVzOwogICAgICAgIGNvbnN0IG1pbkRpc3RhbmNlID0gTWF0aF9kZWZhdWx0LmNob3JkTGVuZ3RoKGdyYW51bGFyaXR5LCByYWRpdXMpOwogICAgICAgIGNvbnN0IHJodW1iMCA9IG5ldyBFbGxpcHNvaWRSaHVtYkxpbmVfZGVmYXVsdCh2b2lkIDAsIHZvaWQgMCwgZWxsaXBzb2lkKTsKICAgICAgICBjb25zdCByaHVtYjEgPSBuZXcgRWxsaXBzb2lkUmh1bWJMaW5lX2RlZmF1bHQodm9pZCAwLCB2b2lkIDAsIGVsbGlwc29pZCk7CiAgICAgICAgY29uc3Qgcmh1bWIyID0gbmV3IEVsbGlwc29pZFJodW1iTGluZV9kZWZhdWx0KHZvaWQgMCwgdm9pZCAwLCBlbGxpcHNvaWQpOwogICAgICAgIHdoaWxlICh0cmlhbmdsZXMubGVuZ3RoID4gMCkgewogICAgICAgICAgY29uc3QgaTIgPSB0cmlhbmdsZXMucG9wKCk7CiAgICAgICAgICBjb25zdCBpMSA9IHRyaWFuZ2xlcy5wb3AoKTsKICAgICAgICAgIGNvbnN0IGkwID0gdHJpYW5nbGVzLnBvcCgpOwogICAgICAgICAgY29uc3QgdjAyID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheSgKICAgICAgICAgICAgc3ViZGl2aWRlZFBvc2l0aW9ucywKICAgICAgICAgICAgaTAgKiAzLAogICAgICAgICAgICBzdWJkaXZpc2lvblYwU2NyYXRjaAogICAgICAgICAgKTsKICAgICAgICAgIGNvbnN0IHYxMiA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkoCiAgICAgICAgICAgIHN1YmRpdmlkZWRQb3NpdGlvbnMsCiAgICAgICAgICAgIGkxICogMywKICAgICAgICAgICAgc3ViZGl2aXNpb25WMVNjcmF0Y2gKICAgICAgICAgICk7CiAgICAgICAgICBjb25zdCB2MjIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KAogICAgICAgICAgICBzdWJkaXZpZGVkUG9zaXRpb25zLAogICAgICAgICAgICBpMiAqIDMsCiAgICAgICAgICAgIHN1YmRpdmlzaW9uVjJTY3JhdGNoCiAgICAgICAgICApOwogICAgICAgICAgbGV0IHQwLCB0MSwgdDI7CiAgICAgICAgICBpZiAoaGFzVGV4Y29vcmRzKSB7CiAgICAgICAgICAgIHQwID0gQ2FydGVzaWFuMl9kZWZhdWx0LmZyb21BcnJheSgKICAgICAgICAgICAgICBzdWJkaXZpZGVkVGV4Y29vcmRzLAogICAgICAgICAgICAgIGkwICogMiwKICAgICAgICAgICAgICBzdWJkaXZpc2lvblQwU2NyYXRjaAogICAgICAgICAgICApOwogICAgICAgICAgICB0MSA9IENhcnRlc2lhbjJfZGVmYXVsdC5mcm9tQXJyYXkoCiAgICAgICAgICAgICAgc3ViZGl2aWRlZFRleGNvb3JkcywKICAgICAgICAgICAgICBpMSAqIDIsCiAgICAgICAgICAgICAgc3ViZGl2aXNpb25UMVNjcmF0Y2gKICAgICAgICAgICAgKTsKICAgICAgICAgICAgdDIgPSBDYXJ0ZXNpYW4yX2RlZmF1bHQuZnJvbUFycmF5KAogICAgICAgICAgICAgIHN1YmRpdmlkZWRUZXhjb29yZHMsCiAgICAgICAgICAgICAgaTIgKiAyLAogICAgICAgICAgICAgIHN1YmRpdmlzaW9uVDJTY3JhdGNoCiAgICAgICAgICAgICk7CiAgICAgICAgICB9CiAgICAgICAgICBjb25zdCBjMCA9IGVsbGlwc29pZC5jYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpYyh2MDIsIHN1YmRpdmlzaW9uQzBTY3JhdGNoKTsKICAgICAgICAgIGNvbnN0IGMxID0gZWxsaXBzb2lkLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljKHYxMiwgc3ViZGl2aXNpb25DMVNjcmF0Y2gpOwogICAgICAgICAgY29uc3QgYzIgPSBlbGxpcHNvaWQuY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWModjIyLCBzdWJkaXZpc2lvbkMyU2NyYXRjaCk7CiAgICAgICAgICByaHVtYjAuc2V0RW5kUG9pbnRzKGMwLCBjMSk7CiAgICAgICAgICBjb25zdCBnMCA9IHJodW1iMC5zdXJmYWNlRGlzdGFuY2U7CiAgICAgICAgICByaHVtYjEuc2V0RW5kUG9pbnRzKGMxLCBjMik7CiAgICAgICAgICBjb25zdCBnMSA9IHJodW1iMS5zdXJmYWNlRGlzdGFuY2U7CiAgICAgICAgICByaHVtYjIuc2V0RW5kUG9pbnRzKGMyLCBjMCk7CiAgICAgICAgICBjb25zdCBnMiA9IHJodW1iMi5zdXJmYWNlRGlzdGFuY2U7CiAgICAgICAgICBjb25zdCBtYXgzID0gTWF0aC5tYXgoZzAsIGcxLCBnMik7CiAgICAgICAgICBsZXQgZWRnZTsKICAgICAgICAgIGxldCBtaWQ7CiAgICAgICAgICBsZXQgbWlkSGVpZ2h0OwogICAgICAgICAgbGV0IG1pZENhcnRlc2lhbjM7CiAgICAgICAgICBsZXQgbWlkVGV4Y29vcmQ7CiAgICAgICAgICBpZiAobWF4MyA+IG1pbkRpc3RhbmNlKSB7CiAgICAgICAgICAgIGlmIChnMCA9PT0gbWF4MykgewogICAgICAgICAgICAgIGVkZ2UgPSBgJHtNYXRoLm1pbihpMCwgaTEpfSAke01hdGgubWF4KGkwLCBpMSl9YDsKICAgICAgICAgICAgICBpID0gZWRnZXNbZWRnZV07CiAgICAgICAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoaSkpIHsKICAgICAgICAgICAgICAgIG1pZCA9IHJodW1iMC5pbnRlcnBvbGF0ZVVzaW5nRnJhY3Rpb24oCiAgICAgICAgICAgICAgICAgIDAuNSwKICAgICAgICAgICAgICAgICAgc3ViZGl2aXNpb25DYXJ0b2dyYXBoaWNTY3JhdGNoCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgbWlkSGVpZ2h0ID0gKGMwLmhlaWdodCArIGMxLmhlaWdodCkgKiAwLjU7CiAgICAgICAgICAgICAgICBtaWRDYXJ0ZXNpYW4zID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21SYWRpYW5zKAogICAgICAgICAgICAgICAgICBtaWQubG9uZ2l0dWRlLAogICAgICAgICAgICAgICAgICBtaWQubGF0aXR1ZGUsCiAgICAgICAgICAgICAgICAgIG1pZEhlaWdodCwKICAgICAgICAgICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgICAgICAgICBzdWJkaXZpc2lvbk1pZFNjcmF0Y2gKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICBzdWJkaXZpZGVkUG9zaXRpb25zLnB1c2goCiAgICAgICAgICAgICAgICAgIG1pZENhcnRlc2lhbjMueCwKICAgICAgICAgICAgICAgICAgbWlkQ2FydGVzaWFuMy55LAogICAgICAgICAgICAgICAgICBtaWRDYXJ0ZXNpYW4zLnoKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICBpID0gc3ViZGl2aWRlZFBvc2l0aW9ucy5sZW5ndGggLyAzIC0gMTsKICAgICAgICAgICAgICAgIGVkZ2VzW2VkZ2VdID0gaTsKICAgICAgICAgICAgICAgIGlmIChoYXNUZXhjb29yZHMpIHsKICAgICAgICAgICAgICAgICAgbWlkVGV4Y29vcmQgPSBDYXJ0ZXNpYW4yX2RlZmF1bHQuYWRkKHQwLCB0MSwgc3ViZGl2aXNpb25UZXhjb29yZE1pZFNjcmF0Y2gpOwogICAgICAgICAgICAgICAgICBDYXJ0ZXNpYW4yX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcihtaWRUZXhjb29yZCwgMC41LCBtaWRUZXhjb29yZCk7CiAgICAgICAgICAgICAgICAgIHN1YmRpdmlkZWRUZXhjb29yZHMucHVzaChtaWRUZXhjb29yZC54LCBtaWRUZXhjb29yZC55KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdHJpYW5nbGVzLnB1c2goaTAsIGksIGkyKTsKICAgICAgICAgICAgICB0cmlhbmdsZXMucHVzaChpLCBpMSwgaTIpOwogICAgICAgICAgICB9IGVsc2UgaWYgKGcxID09PSBtYXgzKSB7CiAgICAgICAgICAgICAgZWRnZSA9IGAke01hdGgubWluKGkxLCBpMil9ICR7TWF0aC5tYXgoaTEsIGkyKX1gOwogICAgICAgICAgICAgIGkgPSBlZGdlc1tlZGdlXTsKICAgICAgICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChpKSkgewogICAgICAgICAgICAgICAgbWlkID0gcmh1bWIxLmludGVycG9sYXRlVXNpbmdGcmFjdGlvbigKICAgICAgICAgICAgICAgICAgMC41LAogICAgICAgICAgICAgICAgICBzdWJkaXZpc2lvbkNhcnRvZ3JhcGhpY1NjcmF0Y2gKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICBtaWRIZWlnaHQgPSAoYzEuaGVpZ2h0ICsgYzIuaGVpZ2h0KSAqIDAuNTsKICAgICAgICAgICAgICAgIG1pZENhcnRlc2lhbjMgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbVJhZGlhbnMoCiAgICAgICAgICAgICAgICAgIG1pZC5sb25naXR1ZGUsCiAgICAgICAgICAgICAgICAgIG1pZC5sYXRpdHVkZSwKICAgICAgICAgICAgICAgICAgbWlkSGVpZ2h0LAogICAgICAgICAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICAgICAgICAgIHN1YmRpdmlzaW9uTWlkU2NyYXRjaAogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIHN1YmRpdmlkZWRQb3NpdGlvbnMucHVzaCgKICAgICAgICAgICAgICAgICAgbWlkQ2FydGVzaWFuMy54LAogICAgICAgICAgICAgICAgICBtaWRDYXJ0ZXNpYW4zLnksCiAgICAgICAgICAgICAgICAgIG1pZENhcnRlc2lhbjMuegogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIGkgPSBzdWJkaXZpZGVkUG9zaXRpb25zLmxlbmd0aCAvIDMgLSAxOwogICAgICAgICAgICAgICAgZWRnZXNbZWRnZV0gPSBpOwogICAgICAgICAgICAgICAgaWYgKGhhc1RleGNvb3JkcykgewogICAgICAgICAgICAgICAgICBtaWRUZXhjb29yZCA9IENhcnRlc2lhbjJfZGVmYXVsdC5hZGQodDEsIHQyLCBzdWJkaXZpc2lvblRleGNvb3JkTWlkU2NyYXRjaCk7CiAgICAgICAgICAgICAgICAgIENhcnRlc2lhbjJfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKG1pZFRleGNvb3JkLCAwLjUsIG1pZFRleGNvb3JkKTsKICAgICAgICAgICAgICAgICAgc3ViZGl2aWRlZFRleGNvb3Jkcy5wdXNoKG1pZFRleGNvb3JkLngsIG1pZFRleGNvb3JkLnkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB0cmlhbmdsZXMucHVzaChpMSwgaSwgaTApOwogICAgICAgICAgICAgIHRyaWFuZ2xlcy5wdXNoKGksIGkyLCBpMCk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoZzIgPT09IG1heDMpIHsKICAgICAgICAgICAgICBlZGdlID0gYCR7TWF0aC5taW4oaTIsIGkwKX0gJHtNYXRoLm1heChpMiwgaTApfWA7CiAgICAgICAgICAgICAgaSA9IGVkZ2VzW2VkZ2VdOwogICAgICAgICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGkpKSB7CiAgICAgICAgICAgICAgICBtaWQgPSByaHVtYjIuaW50ZXJwb2xhdGVVc2luZ0ZyYWN0aW9uKAogICAgICAgICAgICAgICAgICAwLjUsCiAgICAgICAgICAgICAgICAgIHN1YmRpdmlzaW9uQ2FydG9ncmFwaGljU2NyYXRjaAogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIG1pZEhlaWdodCA9IChjMi5oZWlnaHQgKyBjMC5oZWlnaHQpICogMC41OwogICAgICAgICAgICAgICAgbWlkQ2FydGVzaWFuMyA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tUmFkaWFucygKICAgICAgICAgICAgICAgICAgbWlkLmxvbmdpdHVkZSwKICAgICAgICAgICAgICAgICAgbWlkLmxhdGl0dWRlLAogICAgICAgICAgICAgICAgICBtaWRIZWlnaHQsCiAgICAgICAgICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgICAgICAgICAgc3ViZGl2aXNpb25NaWRTY3JhdGNoCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgc3ViZGl2aWRlZFBvc2l0aW9ucy5wdXNoKAogICAgICAgICAgICAgICAgICBtaWRDYXJ0ZXNpYW4zLngsCiAgICAgICAgICAgICAgICAgIG1pZENhcnRlc2lhbjMueSwKICAgICAgICAgICAgICAgICAgbWlkQ2FydGVzaWFuMy56CiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgaSA9IHN1YmRpdmlkZWRQb3NpdGlvbnMubGVuZ3RoIC8gMyAtIDE7CiAgICAgICAgICAgICAgICBlZGdlc1tlZGdlXSA9IGk7CiAgICAgICAgICAgICAgICBpZiAoaGFzVGV4Y29vcmRzKSB7CiAgICAgICAgICAgICAgICAgIG1pZFRleGNvb3JkID0gQ2FydGVzaWFuMl9kZWZhdWx0LmFkZCh0MiwgdDAsIHN1YmRpdmlzaW9uVGV4Y29vcmRNaWRTY3JhdGNoKTsKICAgICAgICAgICAgICAgICAgQ2FydGVzaWFuMl9kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIobWlkVGV4Y29vcmQsIDAuNSwgbWlkVGV4Y29vcmQpOwogICAgICAgICAgICAgICAgICBzdWJkaXZpZGVkVGV4Y29vcmRzLnB1c2gobWlkVGV4Y29vcmQueCwgbWlkVGV4Y29vcmQueSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHRyaWFuZ2xlcy5wdXNoKGkyLCBpLCBpMSk7CiAgICAgICAgICAgICAgdHJpYW5nbGVzLnB1c2goaSwgaTAsIGkxKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgc3ViZGl2aWRlZEluZGljZXMucHVzaChpMCk7CiAgICAgICAgICAgIHN1YmRpdmlkZWRJbmRpY2VzLnB1c2goaTEpOwogICAgICAgICAgICBzdWJkaXZpZGVkSW5kaWNlcy5wdXNoKGkyKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY29uc3QgZ2VvbWV0cnlPcHRpb25zID0gewogICAgICAgICAgYXR0cmlidXRlczogewogICAgICAgICAgICBwb3NpdGlvbjogbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkRPVUJMRSwKICAgICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgICAgICAgIHZhbHVlczogc3ViZGl2aWRlZFBvc2l0aW9ucwogICAgICAgICAgICB9KQogICAgICAgICAgfSwKICAgICAgICAgIGluZGljZXM6IHN1YmRpdmlkZWRJbmRpY2VzLAogICAgICAgICAgcHJpbWl0aXZlVHlwZTogUHJpbWl0aXZlVHlwZV9kZWZhdWx0LlRSSUFOR0xFUwogICAgICAgIH07CiAgICAgICAgaWYgKGhhc1RleGNvb3JkcykgewogICAgICAgICAgZ2VvbWV0cnlPcHRpb25zLmF0dHJpYnV0ZXMuc3QgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkZMT0FULAogICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAyLAogICAgICAgICAgICB2YWx1ZXM6IHN1YmRpdmlkZWRUZXhjb29yZHMKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3IEdlb21ldHJ5X2RlZmF1bHQoZ2VvbWV0cnlPcHRpb25zKTsKICAgICAgfTsKICAgICAgUG9seWdvblBpcGVsaW5lLnNjYWxlVG9HZW9kZXRpY0hlaWdodCA9IGZ1bmN0aW9uKHBvc2l0aW9ucywgaGVpZ2h0LCBlbGxpcHNvaWQsIHNjYWxlVG9TdXJmYWNlNCkgewogICAgICAgIGVsbGlwc29pZCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGVsbGlwc29pZCwgRWxsaXBzb2lkX2RlZmF1bHQuZGVmYXVsdCk7CiAgICAgICAgbGV0IG4gPSBzY2FsZVRvR2VvZGV0aWNIZWlnaHROOwogICAgICAgIGxldCBwID0gc2NhbGVUb0dlb2RldGljSGVpZ2h0UDsKICAgICAgICBoZWlnaHQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChoZWlnaHQsIDApOwogICAgICAgIHNjYWxlVG9TdXJmYWNlNCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHNjYWxlVG9TdXJmYWNlNCwgdHJ1ZSk7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChwb3NpdGlvbnMpKSB7CiAgICAgICAgICBjb25zdCBsZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoOwogICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMykgewogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KHBvc2l0aW9ucywgaSwgcCk7CiAgICAgICAgICAgIGlmIChzY2FsZVRvU3VyZmFjZTQpIHsKICAgICAgICAgICAgICBwID0gZWxsaXBzb2lkLnNjYWxlVG9HZW9kZXRpY1N1cmZhY2UocCwgcCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGhlaWdodCAhPT0gMCkgewogICAgICAgICAgICAgIG4gPSBlbGxpcHNvaWQuZ2VvZGV0aWNTdXJmYWNlTm9ybWFsKHAsIG4pOwogICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKG4sIGhlaWdodCwgbik7CiAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChwLCBuLCBwKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBwb3NpdGlvbnNbaV0gPSBwLng7CiAgICAgICAgICAgIHBvc2l0aW9uc1tpICsgMV0gPSBwLnk7CiAgICAgICAgICAgIHBvc2l0aW9uc1tpICsgMl0gPSBwLno7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBwb3NpdGlvbnM7CiAgICAgIH07CiAgICAgIFBvbHlnb25QaXBlbGluZV9kZWZhdWx0ID0gUG9seWdvblBpcGVsaW5lOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUXVldWUuanMKICBmdW5jdGlvbiBRdWV1ZSgpIHsKICAgIHRoaXMuX2FycmF5ID0gW107CiAgICB0aGlzLl9vZmZzZXQgPSAwOwogICAgdGhpcy5fbGVuZ3RoID0gMDsKICB9CiAgdmFyIFF1ZXVlX2RlZmF1bHQ7CiAgdmFyIGluaXRfUXVldWUgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1F1ZXVlLmpzIigpIHsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoUXVldWUucHJvdG90eXBlLCB7CiAgICAgICAgLyoqCiAgICAgICAgICogVGhlIGxlbmd0aCBvZiB0aGUgcXVldWUuCiAgICAgICAgICoKICAgICAgICAgKiBAbWVtYmVyb2YgUXVldWUucHJvdG90eXBlCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqLwogICAgICAgIGxlbmd0aDogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xlbmd0aDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgICBRdWV1ZS5wcm90b3R5cGUuZW5xdWV1ZSA9IGZ1bmN0aW9uKGl0ZW0pIHsKICAgICAgICB0aGlzLl9hcnJheS5wdXNoKGl0ZW0pOwogICAgICAgIHRoaXMuX2xlbmd0aCsrOwogICAgICB9OwogICAgICBRdWV1ZS5wcm90b3R5cGUuZGVxdWV1ZSA9IGZ1bmN0aW9uKCkgewogICAgICAgIGlmICh0aGlzLl9sZW5ndGggPT09IDApIHsKICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGFycmF5ID0gdGhpcy5fYXJyYXk7CiAgICAgICAgbGV0IG9mZnNldCA9IHRoaXMuX29mZnNldDsKICAgICAgICBjb25zdCBpdGVtID0gYXJyYXlbb2Zmc2V0XTsKICAgICAgICBhcnJheVtvZmZzZXRdID0gdm9pZCAwOwogICAgICAgIG9mZnNldCsrOwogICAgICAgIGlmIChvZmZzZXQgPiAxMCAmJiBvZmZzZXQgKiAyID4gYXJyYXkubGVuZ3RoKSB7CiAgICAgICAgICB0aGlzLl9hcnJheSA9IGFycmF5LnNsaWNlKG9mZnNldCk7CiAgICAgICAgICBvZmZzZXQgPSAwOwogICAgICAgIH0KICAgICAgICB0aGlzLl9vZmZzZXQgPSBvZmZzZXQ7CiAgICAgICAgdGhpcy5fbGVuZ3RoLS07CiAgICAgICAgcmV0dXJuIGl0ZW07CiAgICAgIH07CiAgICAgIFF1ZXVlLnByb3RvdHlwZS5wZWVrID0gZnVuY3Rpb24oKSB7CiAgICAgICAgaWYgKHRoaXMuX2xlbmd0aCA9PT0gMCkgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRoaXMuX2FycmF5W3RoaXMuX29mZnNldF07CiAgICAgIH07CiAgICAgIFF1ZXVlLnByb3RvdHlwZS5jb250YWlucyA9IGZ1bmN0aW9uKGl0ZW0pIHsKICAgICAgICByZXR1cm4gdGhpcy5fYXJyYXkuaW5kZXhPZihpdGVtKSAhPT0gLTE7CiAgICAgIH07CiAgICAgIFF1ZXVlLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKCkgewogICAgICAgIHRoaXMuX2FycmF5Lmxlbmd0aCA9IHRoaXMuX29mZnNldCA9IHRoaXMuX2xlbmd0aCA9IDA7CiAgICAgIH07CiAgICAgIFF1ZXVlLnByb3RvdHlwZS5zb3J0ID0gZnVuY3Rpb24oY29tcGFyZUZ1bmN0aW9uKSB7CiAgICAgICAgaWYgKHRoaXMuX29mZnNldCA+IDApIHsKICAgICAgICAgIHRoaXMuX2FycmF5ID0gdGhpcy5fYXJyYXkuc2xpY2UodGhpcy5fb2Zmc2V0KTsKICAgICAgICAgIHRoaXMuX29mZnNldCA9IDA7CiAgICAgICAgfQogICAgICAgIHRoaXMuX2FycmF5LnNvcnQoY29tcGFyZUZ1bmN0aW9uKTsKICAgICAgfTsKICAgICAgUXVldWVfZGVmYXVsdCA9IFF1ZXVlOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUG9seWdvbkdlb21ldHJ5TGlicmFyeS5qcwogIGZ1bmN0aW9uIGdldFBvaW50QXREaXN0YW5jZTJEKHAwLCBwMSwgZGlzdGFuY2UsIGxlbmd0aCkgewogICAgQ2FydGVzaWFuMl9kZWZhdWx0LnN1YnRyYWN0KHAxLCBwMCwgZGlzdGFuY2UyRFNjcmF0Y2gpOwogICAgQ2FydGVzaWFuMl9kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIoCiAgICAgIGRpc3RhbmNlMkRTY3JhdGNoLAogICAgICBkaXN0YW5jZSAvIGxlbmd0aCwKICAgICAgZGlzdGFuY2UyRFNjcmF0Y2gKICAgICk7CiAgICBDYXJ0ZXNpYW4yX2RlZmF1bHQuYWRkKHAwLCBkaXN0YW5jZTJEU2NyYXRjaCwgZGlzdGFuY2UyRFNjcmF0Y2gpOwogICAgcmV0dXJuIFtkaXN0YW5jZTJEU2NyYXRjaC54LCBkaXN0YW5jZTJEU2NyYXRjaC55XTsKICB9CiAgZnVuY3Rpb24gZ2V0UG9pbnRBdERpc3RhbmNlKHAwLCBwMSwgZGlzdGFuY2UsIGxlbmd0aCkgewogICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHAxLCBwMCwgZGlzdGFuY2VTY3JhdGNoNCk7CiAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcigKICAgICAgZGlzdGFuY2VTY3JhdGNoNCwKICAgICAgZGlzdGFuY2UgLyBsZW5ndGgsCiAgICAgIGRpc3RhbmNlU2NyYXRjaDQKICAgICk7CiAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKHAwLCBkaXN0YW5jZVNjcmF0Y2g0LCBkaXN0YW5jZVNjcmF0Y2g0KTsKICAgIHJldHVybiBbZGlzdGFuY2VTY3JhdGNoNC54LCBkaXN0YW5jZVNjcmF0Y2g0LnksIGRpc3RhbmNlU2NyYXRjaDQuel07CiAgfQogIGZ1bmN0aW9uIGNvbXB1dGVFcXVhdG9ySW50ZXJzZWN0aW9uUmh1bWIoc3RhcnQsIGVuZCwgZWxsaXBzb2lkKSB7CiAgICBjb25zdCBjMCA9IGVsbGlwc29pZC5jYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpYyhzdGFydCwgc2NyYXRjaENhcnRvZ3JhcGhpYzApOwogICAgY29uc3QgYzEgPSBlbGxpcHNvaWQuY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWMoZW5kLCBzY3JhdGNoQ2FydG9ncmFwaGljMSk7CiAgICBpZiAoTWF0aC5zaWduKGMwLmxhdGl0dWRlKSA9PT0gTWF0aC5zaWduKGMxLmxhdGl0dWRlKSkgewogICAgICByZXR1cm47CiAgICB9CiAgICBzY3JhdGNoUmh1bWJMaW5lLnNldEVuZFBvaW50cyhjMCwgYzEpOwogICAgY29uc3QgaW50ZXJzZWN0aW9uID0gc2NyYXRjaFJodW1iTGluZS5maW5kSW50ZXJzZWN0aW9uV2l0aExhdGl0dWRlKAogICAgICAwLAogICAgICBzY3JhdGNoUmh1bWJJbnRlcnNlY3Rpb24KICAgICk7CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChpbnRlcnNlY3Rpb24pKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGxldCBtaW5Mb25naXR1ZGUgPSBNYXRoLm1pbihjMC5sb25naXR1ZGUsIGMxLmxvbmdpdHVkZSk7CiAgICBsZXQgbWF4TG9uZ2l0dWRlID0gTWF0aC5tYXgoYzAubG9uZ2l0dWRlLCBjMS5sb25naXR1ZGUpOwogICAgaWYgKE1hdGguYWJzKG1heExvbmdpdHVkZSAtIG1pbkxvbmdpdHVkZSkgPiBNYXRoX2RlZmF1bHQuUEkpIHsKICAgICAgY29uc3Qgc3dhcDIgPSBtaW5Mb25naXR1ZGU7CiAgICAgIG1pbkxvbmdpdHVkZSA9IG1heExvbmdpdHVkZTsKICAgICAgbWF4TG9uZ2l0dWRlID0gc3dhcDI7CiAgICB9CiAgICBpZiAoaW50ZXJzZWN0aW9uLmxvbmdpdHVkZSA8IG1pbkxvbmdpdHVkZSB8fCBpbnRlcnNlY3Rpb24ubG9uZ2l0dWRlID4gbWF4TG9uZ2l0dWRlKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIHJldHVybiBlbGxpcHNvaWQuY2FydG9ncmFwaGljVG9DYXJ0ZXNpYW4oaW50ZXJzZWN0aW9uKTsKICB9CiAgZnVuY3Rpb24gY29tcHV0ZUVxdWF0b3JJbnRlcnNlY3Rpb24oc3RhcnQsIGVuZCwgZWxsaXBzb2lkLCBhcmNUeXBlKSB7CiAgICBpZiAoYXJjVHlwZSA9PT0gQXJjVHlwZV9kZWZhdWx0LlJIVU1CKSB7CiAgICAgIHJldHVybiBjb21wdXRlRXF1YXRvckludGVyc2VjdGlvblJodW1iKHN0YXJ0LCBlbmQsIGVsbGlwc29pZCk7CiAgICB9CiAgICBjb25zdCBpbnRlcnNlY3Rpb24gPSBJbnRlcnNlY3Rpb25UZXN0c19kZWZhdWx0LmxpbmVTZWdtZW50UGxhbmUoCiAgICAgIHN0YXJ0LAogICAgICBlbmQsCiAgICAgIFBsYW5lX2RlZmF1bHQuT1JJR0lOX1hZX1BMQU5FCiAgICApOwogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoaW50ZXJzZWN0aW9uKSkgewogICAgICByZXR1cm47CiAgICB9CiAgICByZXR1cm4gZWxsaXBzb2lkLnNjYWxlVG9HZW9kZXRpY1N1cmZhY2UoaW50ZXJzZWN0aW9uLCBpbnRlcnNlY3Rpb24pOwogIH0KICBmdW5jdGlvbiBjb21wdXRlRWRnZXNPblBsYW5lKHBvc2l0aW9ucywgZWxsaXBzb2lkLCBhcmNUeXBlKSB7CiAgICBjb25zdCBlZGdlc09uUGxhbmUgPSBbXTsKICAgIGxldCBzdGFydFBvaW50LCBlbmRQb2ludCwgdHlwZSwgbmV4dCwgaW50ZXJzZWN0aW9uLCBpID0gMDsKICAgIHdoaWxlIChpIDwgcG9zaXRpb25zLmxlbmd0aCkgewogICAgICBzdGFydFBvaW50ID0gcG9zaXRpb25zW2ldOwogICAgICBlbmRQb2ludCA9IHBvc2l0aW9uc1soaSArIDEpICUgcG9zaXRpb25zLmxlbmd0aF07CiAgICAgIHR5cGUgPSBNYXRoX2RlZmF1bHQuc2lnbihzdGFydFBvaW50LnopOwogICAgICBuZXh0ID0gTWF0aF9kZWZhdWx0LnNpZ24oZW5kUG9pbnQueik7CiAgICAgIGNvbnN0IGdldExvbmdpdHVkZSA9IChwb3NpdGlvbikgPT4gewogICAgICAgIGNvbnN0IGNhcnRvZ3JhcGhpYzIgPSBlbGxpcHNvaWQuY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWMoCiAgICAgICAgICBwb3NpdGlvbiwKICAgICAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWMzCiAgICAgICAgKTsKICAgICAgICByZXR1cm4gY2FydG9ncmFwaGljMi5sb25naXR1ZGU7CiAgICAgIH07CiAgICAgIGlmICh0eXBlID09PSAwKSB7CiAgICAgICAgZWRnZXNPblBsYW5lLnB1c2goewogICAgICAgICAgcG9zaXRpb246IGksCiAgICAgICAgICB0eXBlLAogICAgICAgICAgdmlzaXRlZDogZmFsc2UsCiAgICAgICAgICBuZXh0LAogICAgICAgICAgdGhldGE6IGdldExvbmdpdHVkZShzdGFydFBvaW50KQogICAgICAgIH0pOwogICAgICB9IGVsc2UgaWYgKG5leHQgIT09IDApIHsKICAgICAgICBpbnRlcnNlY3Rpb24gPSBjb21wdXRlRXF1YXRvckludGVyc2VjdGlvbigKICAgICAgICAgIHN0YXJ0UG9pbnQsCiAgICAgICAgICBlbmRQb2ludCwKICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgIGFyY1R5cGUKICAgICAgICApOwogICAgICAgICsraTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChpbnRlcnNlY3Rpb24pKSB7CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CiAgICAgICAgcG9zaXRpb25zLnNwbGljZShpLCAwLCBpbnRlcnNlY3Rpb24pOwogICAgICAgIGVkZ2VzT25QbGFuZS5wdXNoKHsKICAgICAgICAgIHBvc2l0aW9uOiBpLAogICAgICAgICAgdHlwZSwKICAgICAgICAgIHZpc2l0ZWQ6IGZhbHNlLAogICAgICAgICAgbmV4dCwKICAgICAgICAgIHRoZXRhOiBnZXRMb25naXR1ZGUoaW50ZXJzZWN0aW9uKQogICAgICAgIH0pOwogICAgICB9CiAgICAgICsraTsKICAgIH0KICAgIHJldHVybiBlZGdlc09uUGxhbmU7CiAgfQogIGZ1bmN0aW9uIHdpcmVQb2x5Z29uKHBvbHlnb25zLCBwb2x5Z29uSW5kZXgsIHBvc2l0aW9ucywgZWRnZXNPblBsYW5lLCB0b0RlbGV0ZSwgc3RhcnRJbmRleCwgYWJvdmVQbGFuZSkgewogICAgY29uc3QgcG9seWdvbjIgPSBbXTsKICAgIGxldCBpID0gc3RhcnRJbmRleDsKICAgIGNvbnN0IGdldE1hdGNoaW5nRWRnZSA9IChpMikgPT4gKGVkZ2UpID0+IGVkZ2UucG9zaXRpb24gPT09IGkyOwogICAgY29uc3QgcG9seWdvbnNUb1dpcmUgPSBbXTsKICAgIGRvIHsKICAgICAgY29uc3QgcG9zaXRpb24gPSBwb3NpdGlvbnNbaV07CiAgICAgIHBvbHlnb24yLnB1c2gocG9zaXRpb24pOwogICAgICBjb25zdCBlZGdlSW5kZXggPSBlZGdlc09uUGxhbmUuZmluZEluZGV4KGdldE1hdGNoaW5nRWRnZShpKSk7CiAgICAgIGNvbnN0IGVkZ2UgPSBlZGdlc09uUGxhbmVbZWRnZUluZGV4XTsKICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoZWRnZSkpIHsKICAgICAgICArK2k7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgY29uc3QgeyB2aXNpdGVkOiBoYXNCZWVuVmlzaXRlZCwgdHlwZSwgbmV4dCB9ID0gZWRnZTsKICAgICAgZWRnZS52aXNpdGVkID0gdHJ1ZTsKICAgICAgaWYgKHR5cGUgPT09IDApIHsKICAgICAgICBpZiAobmV4dCA9PT0gMCkgewogICAgICAgICAgY29uc3QgcHJldmlvdXNFZGdlID0gZWRnZXNPblBsYW5lW2VkZ2VJbmRleCAtIChhYm92ZVBsYW5lID8gMSA6IC0xKV07CiAgICAgICAgICBpZiAocHJldmlvdXNFZGdlPy5wb3NpdGlvbiA9PT0gaSArIDEpIHsKICAgICAgICAgICAgcHJldmlvdXNFZGdlLnZpc2l0ZWQgPSB0cnVlOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgKytpOwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKCFoYXNCZWVuVmlzaXRlZCAmJiBhYm92ZVBsYW5lICYmIG5leHQgPiAwIHx8IHN0YXJ0SW5kZXggPT09IGkgJiYgIWFib3ZlUGxhbmUgJiYgbmV4dCA8IDApIHsKICAgICAgICAgICsraTsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KICAgICAgfQogICAgICBjb25zdCBmb2xsb3dFZGdlID0gYWJvdmVQbGFuZSA/IHR5cGUgPj0gMCA6IHR5cGUgPD0gMDsKICAgICAgaWYgKCFmb2xsb3dFZGdlKSB7CiAgICAgICAgKytpOwogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGlmICghaGFzQmVlblZpc2l0ZWQpIHsKICAgICAgICBwb2x5Z29uc1RvV2lyZS5wdXNoKGkpOwogICAgICB9CiAgICAgIGNvbnN0IG5leHRFZGdlSW5kZXggPSBlZGdlSW5kZXggKyAoYWJvdmVQbGFuZSA/IDEgOiAtMSk7CiAgICAgIGNvbnN0IG5leHRFZGdlID0gZWRnZXNPblBsYW5lW25leHRFZGdlSW5kZXhdOwogICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChuZXh0RWRnZSkpIHsKICAgICAgICArK2k7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgaSA9IG5leHRFZGdlLnBvc2l0aW9uOwogICAgfSB3aGlsZSAoaSA8IHBvc2l0aW9ucy5sZW5ndGggJiYgaSA+PSAwICYmIGkgIT09IHN0YXJ0SW5kZXggJiYgcG9seWdvbjIubGVuZ3RoIDwgcG9zaXRpb25zLmxlbmd0aCk7CiAgICBwb2x5Z29ucy5zcGxpY2UocG9seWdvbkluZGV4LCB0b0RlbGV0ZSwgcG9seWdvbjIpOwogICAgZm9yIChjb25zdCBpbmRleCBvZiBwb2x5Z29uc1RvV2lyZSkgewogICAgICBwb2x5Z29uSW5kZXggPSB3aXJlUG9seWdvbigKICAgICAgICBwb2x5Z29ucywKICAgICAgICArK3BvbHlnb25JbmRleCwKICAgICAgICBwb3NpdGlvbnMsCiAgICAgICAgZWRnZXNPblBsYW5lLAogICAgICAgIDAsCiAgICAgICAgaW5kZXgsCiAgICAgICAgIWFib3ZlUGxhbmUKICAgICAgKTsKICAgIH0KICAgIHJldHVybiBwb2x5Z29uSW5kZXg7CiAgfQogIHZhciBQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5LCBkaXN0YW5jZTJEU2NyYXRjaCwgZGlzdGFuY2VTY3JhdGNoNCwgc2NyYXRjaENhcnRvZ3JhcGhpYzAsIHNjcmF0Y2hDYXJ0b2dyYXBoaWMxLCBzY3JhdGNoQ2FydG9ncmFwaGljMjIsIHNjcmF0Y2hDYXJ0ZXNpYW4wLCBzY3JhdGNoUmh1bWJMaW5lLCBzY2FsZVRvR2VvZGV0aWNIZWlnaHROMSwgc2NhbGVUb0dlb2RldGljSGVpZ2h0TjIsIHNjYWxlVG9HZW9kZXRpY0hlaWdodFAxLCBzY2FsZVRvR2VvZGV0aWNIZWlnaHRQMiwgc2NyYXRjaFJodW1iSW50ZXJzZWN0aW9uLCBzY3JhdGNoQ2FydG9ncmFwaGljMywgY29tcHV0ZUJvdW5kaW5nUmVjdGFuZ2xlQ2FydGVzaWFuMiwgY29tcHV0ZUJvdW5kaW5nUmVjdGFuZ2xlQ2FydGVzaWFuMywgY29tcHV0ZUJvdW5kaW5nUmVjdGFuZ2xlUXVhdGVybmlvbiwgY29tcHV0ZUJvdW5kaW5nUmVjdGFuZ2xlTWF0cml4MywgY29tcHV0ZVdhbGxUZXhjb29yZHNTdWJkaXZpZGVkLCBjb21wdXRlV2FsbEluZGljZXNTdWJkaXZpZGVkLCBwMVNjcmF0Y2gyLCBwMlNjcmF0Y2gyLCBQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfUG9seWdvbkdlb21ldHJ5TGlicmFyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUG9seWdvbkdlb21ldHJ5TGlicmFyeS5qcyIoKSB7CiAgICAgIGluaXRfQXJjVHlwZSgpOwogICAgICBpbml0X2FycmF5UmVtb3ZlRHVwbGljYXRlcygpOwogICAgICBpbml0X0NhcnRlc2lhbjIoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ2FydG9ncmFwaGljKCk7CiAgICAgIGluaXRfQ29tcG9uZW50RGF0YXR5cGUoKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkUmh1bWJMaW5lKCk7CiAgICAgIGluaXRfR2VvbWV0cnkoKTsKICAgICAgaW5pdF9HZW9tZXRyeUF0dHJpYnV0ZSgpOwogICAgICBpbml0X0dlb21ldHJ5QXR0cmlidXRlcygpOwogICAgICBpbml0X0dlb21ldHJ5UGlwZWxpbmUoKTsKICAgICAgaW5pdF9JbmRleERhdGF0eXBlKCk7CiAgICAgIGluaXRfSW50ZXJzZWN0aW9uVGVzdHMoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIGluaXRfTWF0cml4MygpOwogICAgICBpbml0X1BsYW5lKCk7CiAgICAgIGluaXRfUG9seWdvbkhpZXJhcmNoeSgpOwogICAgICBpbml0X1BvbHlnb25QaXBlbGluZSgpOwogICAgICBpbml0X1ByaW1pdGl2ZVR5cGUoKTsKICAgICAgaW5pdF9RdWF0ZXJuaW9uKCk7CiAgICAgIGluaXRfUXVldWUoKTsKICAgICAgaW5pdF9XaW5kaW5nT3JkZXIoKTsKICAgICAgUG9seWdvbkdlb21ldHJ5TGlicmFyeSA9IHt9OwogICAgICBQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5LmNvbXB1dGVIaWVyYXJjaHlQYWNrZWRMZW5ndGggPSBmdW5jdGlvbihwb2x5Z29uSGllcmFyY2h5LCBDYXJ0ZXNpYW5YKSB7CiAgICAgICAgbGV0IG51bUNvbXBvbmVudHMgPSAwOwogICAgICAgIGNvbnN0IHN0YWNrID0gW3BvbHlnb25IaWVyYXJjaHldOwogICAgICAgIHdoaWxlIChzdGFjay5sZW5ndGggPiAwKSB7CiAgICAgICAgICBjb25zdCBoaWVyYXJjaHkgPSBzdGFjay5wb3AoKTsKICAgICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGhpZXJhcmNoeSkpIHsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICBudW1Db21wb25lbnRzICs9IDI7CiAgICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSBoaWVyYXJjaHkucG9zaXRpb25zOwogICAgICAgICAgY29uc3QgaG9sZXMgPSBoaWVyYXJjaHkuaG9sZXM7CiAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHBvc2l0aW9ucykgJiYgcG9zaXRpb25zLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgbnVtQ29tcG9uZW50cyArPSBwb3NpdGlvbnMubGVuZ3RoICogQ2FydGVzaWFuWC5wYWNrZWRMZW5ndGg7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGhvbGVzKSkgewogICAgICAgICAgICBjb25zdCBsZW5ndGggPSBob2xlcy5sZW5ndGg7CiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgICBzdGFjay5wdXNoKGhvbGVzW2ldKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gbnVtQ29tcG9uZW50czsKICAgICAgfTsKICAgICAgUG9seWdvbkdlb21ldHJ5TGlicmFyeS5wYWNrUG9seWdvbkhpZXJhcmNoeSA9IGZ1bmN0aW9uKHBvbHlnb25IaWVyYXJjaHksIGFycmF5LCBzdGFydGluZ0luZGV4LCBDYXJ0ZXNpYW5YKSB7CiAgICAgICAgY29uc3Qgc3RhY2sgPSBbcG9seWdvbkhpZXJhcmNoeV07CiAgICAgICAgd2hpbGUgKHN0YWNrLmxlbmd0aCA+IDApIHsKICAgICAgICAgIGNvbnN0IGhpZXJhcmNoeSA9IHN0YWNrLnBvcCgpOwogICAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoaGllcmFyY2h5KSkgewogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICAgIGNvbnN0IHBvc2l0aW9ucyA9IGhpZXJhcmNoeS5wb3NpdGlvbnM7CiAgICAgICAgICBjb25zdCBob2xlcyA9IGhpZXJhcmNoeS5ob2xlczsKICAgICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSBkZWZpbmVkX2RlZmF1bHQocG9zaXRpb25zKSA/IHBvc2l0aW9ucy5sZW5ndGggOiAwOwogICAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IGRlZmluZWRfZGVmYXVsdChob2xlcykgPyBob2xlcy5sZW5ndGggOiAwOwogICAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChwb3NpdGlvbnMpKSB7CiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uc0xlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9zaXRpb25zTGVuZ3RoOyArK2ksIHN0YXJ0aW5nSW5kZXggKz0gQ2FydGVzaWFuWC5wYWNrZWRMZW5ndGgpIHsKICAgICAgICAgICAgICBDYXJ0ZXNpYW5YLnBhY2socG9zaXRpb25zW2ldLCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoaG9sZXMpKSB7CiAgICAgICAgICAgIGNvbnN0IGhvbGVzTGVuZ3RoID0gaG9sZXMubGVuZ3RoOwogICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGhvbGVzTGVuZ3RoOyArK2opIHsKICAgICAgICAgICAgICBzdGFjay5wdXNoKGhvbGVzW2pdKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gc3RhcnRpbmdJbmRleDsKICAgICAgfTsKICAgICAgUG9seWdvbkdlb21ldHJ5TGlicmFyeS51bnBhY2tQb2x5Z29uSGllcmFyY2h5ID0gZnVuY3Rpb24oYXJyYXksIHN0YXJ0aW5nSW5kZXgsIENhcnRlc2lhblgpIHsKICAgICAgICBjb25zdCBwb3NpdGlvbnNMZW5ndGggPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IGhvbGVzTGVuZ3RoID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSBuZXcgQXJyYXkocG9zaXRpb25zTGVuZ3RoKTsKICAgICAgICBjb25zdCBob2xlcyA9IGhvbGVzTGVuZ3RoID4gMCA/IG5ldyBBcnJheShob2xlc0xlbmd0aCkgOiB2b2lkIDA7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb3NpdGlvbnNMZW5ndGg7ICsraSwgc3RhcnRpbmdJbmRleCArPSBDYXJ0ZXNpYW5YLnBhY2tlZExlbmd0aCkgewogICAgICAgICAgcG9zaXRpb25zW2ldID0gQ2FydGVzaWFuWC51bnBhY2soYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIH0KICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGhvbGVzTGVuZ3RoOyArK2opIHsKICAgICAgICAgIGhvbGVzW2pdID0gUG9seWdvbkdlb21ldHJ5TGlicmFyeS51bnBhY2tQb2x5Z29uSGllcmFyY2h5KAogICAgICAgICAgICBhcnJheSwKICAgICAgICAgICAgc3RhcnRpbmdJbmRleCwKICAgICAgICAgICAgQ2FydGVzaWFuWAogICAgICAgICAgKTsKICAgICAgICAgIHN0YXJ0aW5nSW5kZXggPSBob2xlc1tqXS5zdGFydGluZ0luZGV4OwogICAgICAgICAgZGVsZXRlIGhvbGVzW2pdLnN0YXJ0aW5nSW5kZXg7CiAgICAgICAgfQogICAgICAgIHJldHVybiB7CiAgICAgICAgICBwb3NpdGlvbnMsCiAgICAgICAgICBob2xlcywKICAgICAgICAgIHN0YXJ0aW5nSW5kZXgKICAgICAgICB9OwogICAgICB9OwogICAgICBkaXN0YW5jZTJEU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4yX2RlZmF1bHQoKTsKICAgICAgZGlzdGFuY2VTY3JhdGNoNCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgUG9seWdvbkdlb21ldHJ5TGlicmFyeS5zdWJkaXZpZGVMaW5lQ291bnQgPSBmdW5jdGlvbihwMCwgcDEsIG1pbkRpc3RhbmNlKSB7CiAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZGlzdGFuY2UocDAsIHAxKTsKICAgICAgICBjb25zdCBuID0gZGlzdGFuY2UgLyBtaW5EaXN0YW5jZTsKICAgICAgICBjb25zdCBjb3VudERpdmlkZSA9IE1hdGgubWF4KDAsIE1hdGguY2VpbChNYXRoX2RlZmF1bHQubG9nMihuKSkpOwogICAgICAgIHJldHVybiBNYXRoLnBvdygyLCBjb3VudERpdmlkZSk7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWMwID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWMxID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWMyMiA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQ2FydGVzaWFuMCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFJodW1iTGluZSA9IG5ldyBFbGxpcHNvaWRSaHVtYkxpbmVfZGVmYXVsdCgpOwogICAgICBQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5LnN1YmRpdmlkZVJodW1iTGluZUNvdW50ID0gZnVuY3Rpb24oZWxsaXBzb2lkLCBwMCwgcDEsIG1pbkRpc3RhbmNlKSB7CiAgICAgICAgY29uc3QgYzAgPSBlbGxpcHNvaWQuY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWMocDAsIHNjcmF0Y2hDYXJ0b2dyYXBoaWMwKTsKICAgICAgICBjb25zdCBjMSA9IGVsbGlwc29pZC5jYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpYyhwMSwgc2NyYXRjaENhcnRvZ3JhcGhpYzEpOwogICAgICAgIGNvbnN0IHJodW1iID0gbmV3IEVsbGlwc29pZFJodW1iTGluZV9kZWZhdWx0KGMwLCBjMSwgZWxsaXBzb2lkKTsKICAgICAgICBjb25zdCBuID0gcmh1bWIuc3VyZmFjZURpc3RhbmNlIC8gbWluRGlzdGFuY2U7CiAgICAgICAgY29uc3QgY291bnREaXZpZGUgPSBNYXRoLm1heCgwLCBNYXRoLmNlaWwoTWF0aF9kZWZhdWx0LmxvZzIobikpKTsKICAgICAgICByZXR1cm4gTWF0aC5wb3coMiwgY291bnREaXZpZGUpOwogICAgICB9OwogICAgICBQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5LnN1YmRpdmlkZVRleGNvb3JkTGluZSA9IGZ1bmN0aW9uKHQwLCB0MSwgcDAsIHAxLCBtaW5EaXN0YW5jZSwgcmVzdWx0KSB7CiAgICAgICAgY29uc3Qgc3ViZGl2aXNpb25zID0gUG9seWdvbkdlb21ldHJ5TGlicmFyeS5zdWJkaXZpZGVMaW5lQ291bnQoCiAgICAgICAgICBwMCwKICAgICAgICAgIHAxLAogICAgICAgICAgbWluRGlzdGFuY2UKICAgICAgICApOwogICAgICAgIGNvbnN0IGxlbmd0aDJEID0gQ2FydGVzaWFuMl9kZWZhdWx0LmRpc3RhbmNlKHQwLCB0MSk7CiAgICAgICAgY29uc3QgZGlzdGFuY2VCZXR3ZWVuQ29vcmRzID0gbGVuZ3RoMkQgLyBzdWJkaXZpc2lvbnM7CiAgICAgICAgY29uc3QgdGV4Y29vcmRzID0gcmVzdWx0OwogICAgICAgIHRleGNvb3Jkcy5sZW5ndGggPSBzdWJkaXZpc2lvbnMgKiAyOwogICAgICAgIGxldCBpbmRleCA9IDA7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdWJkaXZpc2lvbnM7IGkrKykgewogICAgICAgICAgY29uc3QgdCA9IGdldFBvaW50QXREaXN0YW5jZTJEKHQwLCB0MSwgaSAqIGRpc3RhbmNlQmV0d2VlbkNvb3JkcywgbGVuZ3RoMkQpOwogICAgICAgICAgdGV4Y29vcmRzW2luZGV4KytdID0gdFswXTsKICAgICAgICAgIHRleGNvb3Jkc1tpbmRleCsrXSA9IHRbMV07CiAgICAgICAgfQogICAgICAgIHJldHVybiB0ZXhjb29yZHM7CiAgICAgIH07CiAgICAgIFBvbHlnb25HZW9tZXRyeUxpYnJhcnkuc3ViZGl2aWRlTGluZSA9IGZ1bmN0aW9uKHAwLCBwMSwgbWluRGlzdGFuY2UsIHJlc3VsdCkgewogICAgICAgIGNvbnN0IG51bVZlcnRpY2VzID0gUG9seWdvbkdlb21ldHJ5TGlicmFyeS5zdWJkaXZpZGVMaW5lQ291bnQoCiAgICAgICAgICBwMCwKICAgICAgICAgIHAxLAogICAgICAgICAgbWluRGlzdGFuY2UKICAgICAgICApOwogICAgICAgIGNvbnN0IGxlbmd0aCA9IENhcnRlc2lhbjNfZGVmYXVsdC5kaXN0YW5jZShwMCwgcDEpOwogICAgICAgIGNvbnN0IGRpc3RhbmNlQmV0d2VlblZlcnRpY2VzID0gbGVuZ3RoIC8gbnVtVmVydGljZXM7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gW107CiAgICAgICAgfQogICAgICAgIGNvbnN0IHBvc2l0aW9ucyA9IHJlc3VsdDsKICAgICAgICBwb3NpdGlvbnMubGVuZ3RoID0gbnVtVmVydGljZXMgKiAzOwogICAgICAgIGxldCBpbmRleCA9IDA7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1WZXJ0aWNlczsgaSsrKSB7CiAgICAgICAgICBjb25zdCBwID0gZ2V0UG9pbnRBdERpc3RhbmNlKHAwLCBwMSwgaSAqIGRpc3RhbmNlQmV0d2VlblZlcnRpY2VzLCBsZW5ndGgpOwogICAgICAgICAgcG9zaXRpb25zW2luZGV4KytdID0gcFswXTsKICAgICAgICAgIHBvc2l0aW9uc1tpbmRleCsrXSA9IHBbMV07CiAgICAgICAgICBwb3NpdGlvbnNbaW5kZXgrK10gPSBwWzJdOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcG9zaXRpb25zOwogICAgICB9OwogICAgICBQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5LnN1YmRpdmlkZVRleGNvb3JkUmh1bWJMaW5lID0gZnVuY3Rpb24odDAsIHQxLCBlbGxpcHNvaWQsIHAwLCBwMSwgbWluRGlzdGFuY2UsIHJlc3VsdCkgewogICAgICAgIGNvbnN0IGMwID0gZWxsaXBzb2lkLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljKHAwLCBzY3JhdGNoQ2FydG9ncmFwaGljMCk7CiAgICAgICAgY29uc3QgYzEgPSBlbGxpcHNvaWQuY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWMocDEsIHNjcmF0Y2hDYXJ0b2dyYXBoaWMxKTsKICAgICAgICBzY3JhdGNoUmh1bWJMaW5lLnNldEVuZFBvaW50cyhjMCwgYzEpOwogICAgICAgIGNvbnN0IG4gPSBzY3JhdGNoUmh1bWJMaW5lLnN1cmZhY2VEaXN0YW5jZSAvIG1pbkRpc3RhbmNlOwogICAgICAgIGNvbnN0IGNvdW50RGl2aWRlID0gTWF0aC5tYXgoMCwgTWF0aC5jZWlsKE1hdGhfZGVmYXVsdC5sb2cyKG4pKSk7CiAgICAgICAgY29uc3Qgc3ViZGl2aXNpb25zID0gTWF0aC5wb3coMiwgY291bnREaXZpZGUpOwogICAgICAgIGNvbnN0IGxlbmd0aDJEID0gQ2FydGVzaWFuMl9kZWZhdWx0LmRpc3RhbmNlKHQwLCB0MSk7CiAgICAgICAgY29uc3QgZGlzdGFuY2VCZXR3ZWVuQ29vcmRzID0gbGVuZ3RoMkQgLyBzdWJkaXZpc2lvbnM7CiAgICAgICAgY29uc3QgdGV4Y29vcmRzID0gcmVzdWx0OwogICAgICAgIHRleGNvb3Jkcy5sZW5ndGggPSBzdWJkaXZpc2lvbnMgKiAyOwogICAgICAgIGxldCBpbmRleCA9IDA7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdWJkaXZpc2lvbnM7IGkrKykgewogICAgICAgICAgY29uc3QgdCA9IGdldFBvaW50QXREaXN0YW5jZTJEKHQwLCB0MSwgaSAqIGRpc3RhbmNlQmV0d2VlbkNvb3JkcywgbGVuZ3RoMkQpOwogICAgICAgICAgdGV4Y29vcmRzW2luZGV4KytdID0gdFswXTsKICAgICAgICAgIHRleGNvb3Jkc1tpbmRleCsrXSA9IHRbMV07CiAgICAgICAgfQogICAgICAgIHJldHVybiB0ZXhjb29yZHM7CiAgICAgIH07CiAgICAgIFBvbHlnb25HZW9tZXRyeUxpYnJhcnkuc3ViZGl2aWRlUmh1bWJMaW5lID0gZnVuY3Rpb24oZWxsaXBzb2lkLCBwMCwgcDEsIG1pbkRpc3RhbmNlLCByZXN1bHQpIHsKICAgICAgICBjb25zdCBjMCA9IGVsbGlwc29pZC5jYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpYyhwMCwgc2NyYXRjaENhcnRvZ3JhcGhpYzApOwogICAgICAgIGNvbnN0IGMxID0gZWxsaXBzb2lkLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljKHAxLCBzY3JhdGNoQ2FydG9ncmFwaGljMSk7CiAgICAgICAgY29uc3Qgcmh1bWIgPSBuZXcgRWxsaXBzb2lkUmh1bWJMaW5lX2RlZmF1bHQoYzAsIGMxLCBlbGxpcHNvaWQpOwogICAgICAgIGNvbnN0IG4gPSByaHVtYi5zdXJmYWNlRGlzdGFuY2UgLyBtaW5EaXN0YW5jZTsKICAgICAgICBjb25zdCBjb3VudERpdmlkZSA9IE1hdGgubWF4KDAsIE1hdGguY2VpbChNYXRoX2RlZmF1bHQubG9nMihuKSkpOwogICAgICAgIGNvbnN0IG51bVZlcnRpY2VzID0gTWF0aC5wb3coMiwgY291bnREaXZpZGUpOwogICAgICAgIGNvbnN0IGRpc3RhbmNlQmV0d2VlblZlcnRpY2VzID0gcmh1bWIuc3VyZmFjZURpc3RhbmNlIC8gbnVtVmVydGljZXM7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gW107CiAgICAgICAgfQogICAgICAgIGNvbnN0IHBvc2l0aW9ucyA9IHJlc3VsdDsKICAgICAgICBwb3NpdGlvbnMubGVuZ3RoID0gbnVtVmVydGljZXMgKiAzOwogICAgICAgIGxldCBpbmRleCA9IDA7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1WZXJ0aWNlczsgaSsrKSB7CiAgICAgICAgICBjb25zdCBjID0gcmh1bWIuaW50ZXJwb2xhdGVVc2luZ1N1cmZhY2VEaXN0YW5jZSgKICAgICAgICAgICAgaSAqIGRpc3RhbmNlQmV0d2VlblZlcnRpY2VzLAogICAgICAgICAgICBzY3JhdGNoQ2FydG9ncmFwaGljMjIKICAgICAgICAgICk7CiAgICAgICAgICBjb25zdCBwID0gZWxsaXBzb2lkLmNhcnRvZ3JhcGhpY1RvQ2FydGVzaWFuKGMsIHNjcmF0Y2hDYXJ0ZXNpYW4wKTsKICAgICAgICAgIHBvc2l0aW9uc1tpbmRleCsrXSA9IHAueDsKICAgICAgICAgIHBvc2l0aW9uc1tpbmRleCsrXSA9IHAueTsKICAgICAgICAgIHBvc2l0aW9uc1tpbmRleCsrXSA9IHAuejsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHBvc2l0aW9uczsKICAgICAgfTsKICAgICAgc2NhbGVUb0dlb2RldGljSGVpZ2h0TjEgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjYWxlVG9HZW9kZXRpY0hlaWdodE4yID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY2FsZVRvR2VvZGV0aWNIZWlnaHRQMSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NhbGVUb0dlb2RldGljSGVpZ2h0UDIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIFBvbHlnb25HZW9tZXRyeUxpYnJhcnkuc2NhbGVUb0dlb2RldGljSGVpZ2h0RXh0cnVkZWQgPSBmdW5jdGlvbihnZW9tZXRyeSwgbWF4SGVpZ2h0LCBtaW5IZWlnaHQsIGVsbGlwc29pZCwgcGVyUG9zaXRpb25IZWlnaHQpIHsKICAgICAgICBlbGxpcHNvaWQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChlbGxpcHNvaWQsIEVsbGlwc29pZF9kZWZhdWx0LmRlZmF1bHQpOwogICAgICAgIGNvbnN0IG4xID0gc2NhbGVUb0dlb2RldGljSGVpZ2h0TjE7CiAgICAgICAgbGV0IG4yID0gc2NhbGVUb0dlb2RldGljSGVpZ2h0TjI7CiAgICAgICAgY29uc3QgcCA9IHNjYWxlVG9HZW9kZXRpY0hlaWdodFAxOwogICAgICAgIGxldCBwMiA9IHNjYWxlVG9HZW9kZXRpY0hlaWdodFAyOwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoZ2VvbWV0cnkpICYmIGRlZmluZWRfZGVmYXVsdChnZW9tZXRyeS5hdHRyaWJ1dGVzKSAmJiBkZWZpbmVkX2RlZmF1bHQoZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbikpIHsKICAgICAgICAgIGNvbnN0IHBvc2l0aW9ucyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzOwogICAgICAgICAgY29uc3QgbGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aCAvIDI7CiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAzKSB7CiAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkocG9zaXRpb25zLCBpLCBwKTsKICAgICAgICAgICAgZWxsaXBzb2lkLmdlb2RldGljU3VyZmFjZU5vcm1hbChwLCBuMSk7CiAgICAgICAgICAgIHAyID0gZWxsaXBzb2lkLnNjYWxlVG9HZW9kZXRpY1N1cmZhY2UocCwgcDIpOwogICAgICAgICAgICBuMiA9IENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKG4xLCBtaW5IZWlnaHQsIG4yKTsKICAgICAgICAgICAgbjIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKHAyLCBuMiwgbjIpOwogICAgICAgICAgICBwb3NpdGlvbnNbaSArIGxlbmd0aF0gPSBuMi54OwogICAgICAgICAgICBwb3NpdGlvbnNbaSArIDEgKyBsZW5ndGhdID0gbjIueTsKICAgICAgICAgICAgcG9zaXRpb25zW2kgKyAyICsgbGVuZ3RoXSA9IG4yLno7CiAgICAgICAgICAgIGlmIChwZXJQb3NpdGlvbkhlaWdodCkgewogICAgICAgICAgICAgIHAyID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKHAsIHAyKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBuMiA9IENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKG4xLCBtYXhIZWlnaHQsIG4yKTsKICAgICAgICAgICAgbjIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKHAyLCBuMiwgbjIpOwogICAgICAgICAgICBwb3NpdGlvbnNbaV0gPSBuMi54OwogICAgICAgICAgICBwb3NpdGlvbnNbaSArIDFdID0gbjIueTsKICAgICAgICAgICAgcG9zaXRpb25zW2kgKyAyXSA9IG4yLno7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBnZW9tZXRyeTsKICAgICAgfTsKICAgICAgUG9seWdvbkdlb21ldHJ5TGlicmFyeS5wb2x5Z29uT3V0bGluZXNGcm9tSGllcmFyY2h5ID0gZnVuY3Rpb24ocG9seWdvbkhpZXJhcmNoeSwgc2NhbGVUb0VsbGlwc29pZFN1cmZhY2UsIGVsbGlwc29pZCkgewogICAgICAgIGNvbnN0IHBvbHlnb25zID0gW107CiAgICAgICAgY29uc3QgcXVldWUgPSBuZXcgUXVldWVfZGVmYXVsdCgpOwogICAgICAgIHF1ZXVlLmVucXVldWUocG9seWdvbkhpZXJhcmNoeSk7CiAgICAgICAgbGV0IGk7CiAgICAgICAgbGV0IGo7CiAgICAgICAgbGV0IGxlbmd0aDsKICAgICAgICB3aGlsZSAocXVldWUubGVuZ3RoICE9PSAwKSB7CiAgICAgICAgICBjb25zdCBvdXRlck5vZGUgPSBxdWV1ZS5kZXF1ZXVlKCk7CiAgICAgICAgICBsZXQgb3V0ZXJSaW5nID0gb3V0ZXJOb2RlLnBvc2l0aW9uczsKICAgICAgICAgIGlmIChzY2FsZVRvRWxsaXBzb2lkU3VyZmFjZSkgewogICAgICAgICAgICBsZW5ndGggPSBvdXRlclJpbmcubGVuZ3RoOwogICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICBlbGxpcHNvaWQuc2NhbGVUb0dlb2RldGljU3VyZmFjZShvdXRlclJpbmdbaV0sIG91dGVyUmluZ1tpXSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIG91dGVyUmluZyA9IGFycmF5UmVtb3ZlRHVwbGljYXRlc19kZWZhdWx0KAogICAgICAgICAgICBvdXRlclJpbmcsCiAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5lcXVhbHNFcHNpbG9uLAogICAgICAgICAgICB0cnVlCiAgICAgICAgICApOwogICAgICAgICAgaWYgKG91dGVyUmluZy5sZW5ndGggPCAzKSB7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgICAgY29uc3QgbnVtQ2hpbGRyZW4gPSBvdXRlck5vZGUuaG9sZXMgPyBvdXRlck5vZGUuaG9sZXMubGVuZ3RoIDogMDsKICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1DaGlsZHJlbjsgaSsrKSB7CiAgICAgICAgICAgIGNvbnN0IGhvbGUgPSBvdXRlck5vZGUuaG9sZXNbaV07CiAgICAgICAgICAgIGxldCBob2xlUG9zaXRpb25zID0gaG9sZS5wb3NpdGlvbnM7CiAgICAgICAgICAgIGlmIChzY2FsZVRvRWxsaXBzb2lkU3VyZmFjZSkgewogICAgICAgICAgICAgIGxlbmd0aCA9IGhvbGVQb3NpdGlvbnMubGVuZ3RoOwogICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBsZW5ndGg7ICsraikgewogICAgICAgICAgICAgICAgZWxsaXBzb2lkLnNjYWxlVG9HZW9kZXRpY1N1cmZhY2UoaG9sZVBvc2l0aW9uc1tqXSwgaG9sZVBvc2l0aW9uc1tqXSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGhvbGVQb3NpdGlvbnMgPSBhcnJheVJlbW92ZUR1cGxpY2F0ZXNfZGVmYXVsdCgKICAgICAgICAgICAgICBob2xlUG9zaXRpb25zLAogICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5lcXVhbHNFcHNpbG9uLAogICAgICAgICAgICAgIHRydWUKICAgICAgICAgICAgKTsKICAgICAgICAgICAgaWYgKGhvbGVQb3NpdGlvbnMubGVuZ3RoIDwgMykgewogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHBvbHlnb25zLnB1c2goaG9sZVBvc2l0aW9ucyk7CiAgICAgICAgICAgIGxldCBudW1HcmFuZGNoaWxkcmVuID0gMDsKICAgICAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChob2xlLmhvbGVzKSkgewogICAgICAgICAgICAgIG51bUdyYW5kY2hpbGRyZW4gPSBob2xlLmhvbGVzLmxlbmd0aDsKICAgICAgICAgICAgfQogICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgbnVtR3JhbmRjaGlsZHJlbjsgaisrKSB7CiAgICAgICAgICAgICAgcXVldWUuZW5xdWV1ZShob2xlLmhvbGVzW2pdKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcG9seWdvbnMucHVzaChvdXRlclJpbmcpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcG9seWdvbnM7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hSaHVtYkludGVyc2VjdGlvbiA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQ2FydG9ncmFwaGljMyA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICBQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5LnNwbGl0UG9seWdvbnNPbkVxdWF0b3IgPSBmdW5jdGlvbihvdXRlclJpbmdzLCBlbGxpcHNvaWQsIGFyY1R5cGUsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IFtdOwogICAgICAgIH0KICAgICAgICByZXN1bHQuc3BsaWNlKDAsIDAsIC4uLm91dGVyUmluZ3MpOwogICAgICAgIHJlc3VsdC5sZW5ndGggPSBvdXRlclJpbmdzLmxlbmd0aDsKICAgICAgICBsZXQgY3VycmVudFBvbHlnb24gPSAwOwogICAgICAgIHdoaWxlIChjdXJyZW50UG9seWdvbiA8IHJlc3VsdC5sZW5ndGgpIHsKICAgICAgICAgIGNvbnN0IG91dGVyUmluZyA9IHJlc3VsdFtjdXJyZW50UG9seWdvbl07CiAgICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSBvdXRlclJpbmcuc2xpY2UoKTsKICAgICAgICAgIGlmIChvdXRlclJpbmcubGVuZ3RoIDwgMykgewogICAgICAgICAgICByZXN1bHRbY3VycmVudFBvbHlnb25dID0gcG9zaXRpb25zOwogICAgICAgICAgICArK2N1cnJlbnRQb2x5Z29uOwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICAgIGNvbnN0IGVkZ2VzT25QbGFuZSA9IGNvbXB1dGVFZGdlc09uUGxhbmUocG9zaXRpb25zLCBlbGxpcHNvaWQsIGFyY1R5cGUpOwogICAgICAgICAgaWYgKHBvc2l0aW9ucy5sZW5ndGggPT09IG91dGVyUmluZy5sZW5ndGggfHwgZWRnZXNPblBsYW5lLmxlbmd0aCA8PSAxKSB7CiAgICAgICAgICAgIHJlc3VsdFtjdXJyZW50UG9seWdvbl0gPSBwb3NpdGlvbnM7CiAgICAgICAgICAgICsrY3VycmVudFBvbHlnb247CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgICAgZWRnZXNPblBsYW5lLnNvcnQoKGEzLCBiKSA9PiB7CiAgICAgICAgICAgIHJldHVybiBhMy50aGV0YSAtIGIudGhldGE7CiAgICAgICAgICB9KTsKICAgICAgICAgIGNvbnN0IG5vcnRoID0gcG9zaXRpb25zWzBdLnogPj0gMDsKICAgICAgICAgIGN1cnJlbnRQb2x5Z29uID0gd2lyZVBvbHlnb24oCiAgICAgICAgICAgIHJlc3VsdCwKICAgICAgICAgICAgY3VycmVudFBvbHlnb24sCiAgICAgICAgICAgIHBvc2l0aW9ucywKICAgICAgICAgICAgZWRnZXNPblBsYW5lLAogICAgICAgICAgICAxLAogICAgICAgICAgICAwLAogICAgICAgICAgICBub3J0aAogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgUG9seWdvbkdlb21ldHJ5TGlicmFyeS5wb2x5Z29uc0Zyb21IaWVyYXJjaHkgPSBmdW5jdGlvbihwb2x5Z29uSGllcmFyY2h5LCBrZWVwRHVwbGljYXRlcywgcHJvamVjdFBvaW50c1RvMkQsIHNjYWxlVG9FbGxpcHNvaWRTdXJmYWNlLCBlbGxpcHNvaWQsIHNwbGl0UG9seWdvbnMpIHsKICAgICAgICBjb25zdCBoaWVyYXJjaHkgPSBbXTsKICAgICAgICBjb25zdCBwb2x5Z29ucyA9IFtdOwogICAgICAgIGNvbnN0IHF1ZXVlID0gbmV3IFF1ZXVlX2RlZmF1bHQoKTsKICAgICAgICBxdWV1ZS5lbnF1ZXVlKHBvbHlnb25IaWVyYXJjaHkpOwogICAgICAgIGxldCBzcGxpdCA9IGRlZmluZWRfZGVmYXVsdChzcGxpdFBvbHlnb25zKTsKICAgICAgICB3aGlsZSAocXVldWUubGVuZ3RoICE9PSAwKSB7CiAgICAgICAgICBjb25zdCBvdXRlck5vZGUgPSBxdWV1ZS5kZXF1ZXVlKCk7CiAgICAgICAgICBsZXQgb3V0ZXJSaW5nID0gb3V0ZXJOb2RlLnBvc2l0aW9uczsKICAgICAgICAgIGNvbnN0IGhvbGVzID0gb3V0ZXJOb2RlLmhvbGVzOwogICAgICAgICAgbGV0IGk7CiAgICAgICAgICBsZXQgbGVuZ3RoOwogICAgICAgICAgaWYgKHNjYWxlVG9FbGxpcHNvaWRTdXJmYWNlKSB7CiAgICAgICAgICAgIGxlbmd0aCA9IG91dGVyUmluZy5sZW5ndGg7CiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgICAgICAgIGVsbGlwc29pZC5zY2FsZVRvR2VvZGV0aWNTdXJmYWNlKG91dGVyUmluZ1tpXSwgb3V0ZXJSaW5nW2ldKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgaWYgKCFrZWVwRHVwbGljYXRlcykgewogICAgICAgICAgICBvdXRlclJpbmcgPSBhcnJheVJlbW92ZUR1cGxpY2F0ZXNfZGVmYXVsdCgKICAgICAgICAgICAgICBvdXRlclJpbmcsCiAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmVxdWFsc0Vwc2lsb24sCiAgICAgICAgICAgICAgdHJ1ZQogICAgICAgICAgICApOwogICAgICAgICAgfQogICAgICAgICAgaWYgKG91dGVyUmluZy5sZW5ndGggPCAzKSB7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgICAgbGV0IHBvc2l0aW9uczJEID0gcHJvamVjdFBvaW50c1RvMkQob3V0ZXJSaW5nKTsKICAgICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHBvc2l0aW9uczJEKSkgewogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICAgIGNvbnN0IGhvbGVJbmRpY2VzID0gW107CiAgICAgICAgICBsZXQgb3JpZ2luYWxXaW5kaW5nT3JkZXIgPSBQb2x5Z29uUGlwZWxpbmVfZGVmYXVsdC5jb21wdXRlV2luZGluZ09yZGVyMkQocG9zaXRpb25zMkQpOwogICAgICAgICAgaWYgKG9yaWdpbmFsV2luZGluZ09yZGVyID09PSBXaW5kaW5nT3JkZXJfZGVmYXVsdC5DTE9DS1dJU0UpIHsKICAgICAgICAgICAgcG9zaXRpb25zMkQucmV2ZXJzZSgpOwogICAgICAgICAgICBvdXRlclJpbmcgPSBvdXRlclJpbmcuc2xpY2UoKS5yZXZlcnNlKCk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoc3BsaXQpIHsKICAgICAgICAgICAgc3BsaXQgPSBmYWxzZTsKICAgICAgICAgICAgbGV0IHBvbHlnb25zMiA9IFtvdXRlclJpbmddOwogICAgICAgICAgICBwb2x5Z29uczIgPSBzcGxpdFBvbHlnb25zKHBvbHlnb25zMiwgcG9seWdvbnMyKTsKICAgICAgICAgICAgaWYgKHBvbHlnb25zMi5sZW5ndGggPiAxKSB7CiAgICAgICAgICAgICAgZm9yIChjb25zdCBwb3NpdGlvbnMyIG9mIHBvbHlnb25zMikgewogICAgICAgICAgICAgICAgcXVldWUuZW5xdWV1ZShuZXcgUG9seWdvbkhpZXJhcmNoeV9kZWZhdWx0KHBvc2l0aW9uczIsIGhvbGVzKSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBsZXQgcG9zaXRpb25zID0gb3V0ZXJSaW5nLnNsaWNlKCk7CiAgICAgICAgICBjb25zdCBudW1DaGlsZHJlbiA9IGRlZmluZWRfZGVmYXVsdChob2xlcykgPyBob2xlcy5sZW5ndGggOiAwOwogICAgICAgICAgY29uc3QgcG9seWdvbkhvbGVzID0gW107CiAgICAgICAgICBsZXQgajsKICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1DaGlsZHJlbjsgaSsrKSB7CiAgICAgICAgICAgIGNvbnN0IGhvbGUgPSBob2xlc1tpXTsKICAgICAgICAgICAgbGV0IGhvbGVQb3NpdGlvbnMgPSBob2xlLnBvc2l0aW9uczsKICAgICAgICAgICAgaWYgKHNjYWxlVG9FbGxpcHNvaWRTdXJmYWNlKSB7CiAgICAgICAgICAgICAgbGVuZ3RoID0gaG9sZVBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGxlbmd0aDsgKytqKSB7CiAgICAgICAgICAgICAgICBlbGxpcHNvaWQuc2NhbGVUb0dlb2RldGljU3VyZmFjZShob2xlUG9zaXRpb25zW2pdLCBob2xlUG9zaXRpb25zW2pdKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCFrZWVwRHVwbGljYXRlcykgewogICAgICAgICAgICAgIGhvbGVQb3NpdGlvbnMgPSBhcnJheVJlbW92ZUR1cGxpY2F0ZXNfZGVmYXVsdCgKICAgICAgICAgICAgICAgIGhvbGVQb3NpdGlvbnMsCiAgICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzRXBzaWxvbiwKICAgICAgICAgICAgICAgIHRydWUKICAgICAgICAgICAgICApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChob2xlUG9zaXRpb25zLmxlbmd0aCA8IDMpIHsKICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjb25zdCBob2xlUG9zaXRpb25zMkQgPSBwcm9qZWN0UG9pbnRzVG8yRChob2xlUG9zaXRpb25zKTsKICAgICAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoaG9sZVBvc2l0aW9uczJEKSkgewogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG9yaWdpbmFsV2luZGluZ09yZGVyID0gUG9seWdvblBpcGVsaW5lX2RlZmF1bHQuY29tcHV0ZVdpbmRpbmdPcmRlcjJEKGhvbGVQb3NpdGlvbnMyRCk7CiAgICAgICAgICAgIGlmIChvcmlnaW5hbFdpbmRpbmdPcmRlciA9PT0gV2luZGluZ09yZGVyX2RlZmF1bHQuQ0xPQ0tXSVNFKSB7CiAgICAgICAgICAgICAgaG9sZVBvc2l0aW9uczJELnJldmVyc2UoKTsKICAgICAgICAgICAgICBob2xlUG9zaXRpb25zID0gaG9sZVBvc2l0aW9ucy5zbGljZSgpLnJldmVyc2UoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBwb2x5Z29uSG9sZXMucHVzaChob2xlUG9zaXRpb25zKTsKICAgICAgICAgICAgaG9sZUluZGljZXMucHVzaChwb3NpdGlvbnMubGVuZ3RoKTsKICAgICAgICAgICAgcG9zaXRpb25zID0gcG9zaXRpb25zLmNvbmNhdChob2xlUG9zaXRpb25zKTsKICAgICAgICAgICAgcG9zaXRpb25zMkQgPSBwb3NpdGlvbnMyRC5jb25jYXQoaG9sZVBvc2l0aW9uczJEKTsKICAgICAgICAgICAgbGV0IG51bUdyYW5kY2hpbGRyZW4gPSAwOwogICAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGhvbGUuaG9sZXMpKSB7CiAgICAgICAgICAgICAgbnVtR3JhbmRjaGlsZHJlbiA9IGhvbGUuaG9sZXMubGVuZ3RoOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBudW1HcmFuZGNoaWxkcmVuOyBqKyspIHsKICAgICAgICAgICAgICBxdWV1ZS5lbnF1ZXVlKGhvbGUuaG9sZXNbal0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBoaWVyYXJjaHkucHVzaCh7CiAgICAgICAgICAgIG91dGVyUmluZywKICAgICAgICAgICAgaG9sZXM6IHBvbHlnb25Ib2xlcwogICAgICAgICAgfSk7CiAgICAgICAgICBwb2x5Z29ucy5wdXNoKHsKICAgICAgICAgICAgcG9zaXRpb25zLAogICAgICAgICAgICBwb3NpdGlvbnMyRCwKICAgICAgICAgICAgaG9sZXM6IGhvbGVJbmRpY2VzCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIGhpZXJhcmNoeSwKICAgICAgICAgIHBvbHlnb25zCiAgICAgICAgfTsKICAgICAgfTsKICAgICAgY29tcHV0ZUJvdW5kaW5nUmVjdGFuZ2xlQ2FydGVzaWFuMiA9IG5ldyBDYXJ0ZXNpYW4yX2RlZmF1bHQoKTsKICAgICAgY29tcHV0ZUJvdW5kaW5nUmVjdGFuZ2xlQ2FydGVzaWFuMyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgY29tcHV0ZUJvdW5kaW5nUmVjdGFuZ2xlUXVhdGVybmlvbiA9IG5ldyBRdWF0ZXJuaW9uX2RlZmF1bHQoKTsKICAgICAgY29tcHV0ZUJvdW5kaW5nUmVjdGFuZ2xlTWF0cml4MyA9IG5ldyBNYXRyaXgzX2RlZmF1bHQoKTsKICAgICAgUG9seWdvbkdlb21ldHJ5TGlicmFyeS5jb21wdXRlQm91bmRpbmdSZWN0YW5nbGUgPSBmdW5jdGlvbihwbGFuZU5vcm1hbCwgcHJvamVjdFBvaW50VG8yRCwgcG9zaXRpb25zLCBhbmdsZSwgcmVzdWx0KSB7CiAgICAgICAgY29uc3Qgcm90YXRpb24gPSBRdWF0ZXJuaW9uX2RlZmF1bHQuZnJvbUF4aXNBbmdsZSgKICAgICAgICAgIHBsYW5lTm9ybWFsLAogICAgICAgICAgYW5nbGUsCiAgICAgICAgICBjb21wdXRlQm91bmRpbmdSZWN0YW5nbGVRdWF0ZXJuaW9uCiAgICAgICAgKTsKICAgICAgICBjb25zdCB0ZXh0dXJlTWF0cml4ID0gTWF0cml4M19kZWZhdWx0LmZyb21RdWF0ZXJuaW9uKAogICAgICAgICAgcm90YXRpb24sCiAgICAgICAgICBjb21wdXRlQm91bmRpbmdSZWN0YW5nbGVNYXRyaXgzCiAgICAgICAgKTsKICAgICAgICBsZXQgbWluWCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTsKICAgICAgICBsZXQgbWF4WCA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTsKICAgICAgICBsZXQgbWluWSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTsKICAgICAgICBsZXQgbWF4WSA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTsKICAgICAgICBjb25zdCBsZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoOwogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgICAgIGNvbnN0IHAgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoCiAgICAgICAgICAgIHBvc2l0aW9uc1tpXSwKICAgICAgICAgICAgY29tcHV0ZUJvdW5kaW5nUmVjdGFuZ2xlQ2FydGVzaWFuMwogICAgICAgICAgKTsKICAgICAgICAgIE1hdHJpeDNfZGVmYXVsdC5tdWx0aXBseUJ5VmVjdG9yKHRleHR1cmVNYXRyaXgsIHAsIHApOwogICAgICAgICAgY29uc3Qgc3QgPSBwcm9qZWN0UG9pbnRUbzJEKHAsIGNvbXB1dGVCb3VuZGluZ1JlY3RhbmdsZUNhcnRlc2lhbjIpOwogICAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChzdCkpIHsKICAgICAgICAgICAgbWluWCA9IE1hdGgubWluKG1pblgsIHN0LngpOwogICAgICAgICAgICBtYXhYID0gTWF0aC5tYXgobWF4WCwgc3QueCk7CiAgICAgICAgICAgIG1pblkgPSBNYXRoLm1pbihtaW5ZLCBzdC55KTsKICAgICAgICAgICAgbWF4WSA9IE1hdGgubWF4KG1heFksIHN0LnkpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXN1bHQueCA9IG1pblg7CiAgICAgICAgcmVzdWx0LnkgPSBtaW5ZOwogICAgICAgIHJlc3VsdC53aWR0aCA9IG1heFggLSBtaW5YOwogICAgICAgIHJlc3VsdC5oZWlnaHQgPSBtYXhZIC0gbWluWTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5LmNyZWF0ZUdlb21ldHJ5RnJvbVBvc2l0aW9ucyA9IGZ1bmN0aW9uKGVsbGlwc29pZCwgcG9seWdvbjIsIHRleHR1cmVDb29yZGluYXRlcywgZ3JhbnVsYXJpdHksIHBlclBvc2l0aW9uSGVpZ2h0LCB2ZXJ0ZXhGb3JtYXQsIGFyY1R5cGUpIHsKICAgICAgICBsZXQgaW5kaWNlcyA9IFBvbHlnb25QaXBlbGluZV9kZWZhdWx0LnRyaWFuZ3VsYXRlKHBvbHlnb24yLnBvc2l0aW9uczJELCBwb2x5Z29uMi5ob2xlcyk7CiAgICAgICAgaWYgKGluZGljZXMubGVuZ3RoIDwgMykgewogICAgICAgICAgaW5kaWNlcyA9IFswLCAxLCAyXTsKICAgICAgICB9CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gcG9seWdvbjIucG9zaXRpb25zOwogICAgICAgIGNvbnN0IGhhc1RleGNvb3JkcyA9IGRlZmluZWRfZGVmYXVsdCh0ZXh0dXJlQ29vcmRpbmF0ZXMpOwogICAgICAgIGNvbnN0IHRleGNvb3JkcyA9IGhhc1RleGNvb3JkcyA/IHRleHR1cmVDb29yZGluYXRlcy5wb3NpdGlvbnMgOiB2b2lkIDA7CiAgICAgICAgaWYgKHBlclBvc2l0aW9uSGVpZ2h0KSB7CiAgICAgICAgICBjb25zdCBsZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoOwogICAgICAgICAgY29uc3QgZmxhdHRlbmVkUG9zaXRpb25zID0gbmV3IEFycmF5KGxlbmd0aCAqIDMpOwogICAgICAgICAgbGV0IGluZGV4ID0gMDsKICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgY29uc3QgcCA9IHBvc2l0aW9uc1tpXTsKICAgICAgICAgICAgZmxhdHRlbmVkUG9zaXRpb25zW2luZGV4KytdID0gcC54OwogICAgICAgICAgICBmbGF0dGVuZWRQb3NpdGlvbnNbaW5kZXgrK10gPSBwLnk7CiAgICAgICAgICAgIGZsYXR0ZW5lZFBvc2l0aW9uc1tpbmRleCsrXSA9IHAuejsKICAgICAgICAgIH0KICAgICAgICAgIGNvbnN0IGdlb21ldHJ5T3B0aW9ucyA9IHsKICAgICAgICAgICAgYXR0cmlidXRlczogewogICAgICAgICAgICAgIHBvc2l0aW9uOiBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5ET1VCTEUsCiAgICAgICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgICAgICAgICAgdmFsdWVzOiBmbGF0dGVuZWRQb3NpdGlvbnMKICAgICAgICAgICAgICB9KQogICAgICAgICAgICB9LAogICAgICAgICAgICBpbmRpY2VzLAogICAgICAgICAgICBwcmltaXRpdmVUeXBlOiBQcmltaXRpdmVUeXBlX2RlZmF1bHQuVFJJQU5HTEVTCiAgICAgICAgICB9OwogICAgICAgICAgaWYgKGhhc1RleGNvb3JkcykgewogICAgICAgICAgICBnZW9tZXRyeU9wdGlvbnMuYXR0cmlidXRlcy5zdCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAyLAogICAgICAgICAgICAgIHZhbHVlczogQ2FydGVzaWFuMl9kZWZhdWx0LnBhY2tBcnJheSh0ZXhjb29yZHMpCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgICAgY29uc3QgZ2VvbWV0cnkgPSBuZXcgR2VvbWV0cnlfZGVmYXVsdChnZW9tZXRyeU9wdGlvbnMpOwogICAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5ub3JtYWwpIHsKICAgICAgICAgICAgcmV0dXJuIEdlb21ldHJ5UGlwZWxpbmVfZGVmYXVsdC5jb21wdXRlTm9ybWFsKGdlb21ldHJ5KTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBnZW9tZXRyeTsKICAgICAgICB9CiAgICAgICAgaWYgKGFyY1R5cGUgPT09IEFyY1R5cGVfZGVmYXVsdC5HRU9ERVNJQykgewogICAgICAgICAgcmV0dXJuIFBvbHlnb25QaXBlbGluZV9kZWZhdWx0LmNvbXB1dGVTdWJkaXZpc2lvbigKICAgICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgICBwb3NpdGlvbnMsCiAgICAgICAgICAgIGluZGljZXMsCiAgICAgICAgICAgIHRleGNvb3JkcywKICAgICAgICAgICAgZ3JhbnVsYXJpdHkKICAgICAgICAgICk7CiAgICAgICAgfSBlbHNlIGlmIChhcmNUeXBlID09PSBBcmNUeXBlX2RlZmF1bHQuUkhVTUIpIHsKICAgICAgICAgIHJldHVybiBQb2x5Z29uUGlwZWxpbmVfZGVmYXVsdC5jb21wdXRlUmh1bWJMaW5lU3ViZGl2aXNpb24oCiAgICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgICAgcG9zaXRpb25zLAogICAgICAgICAgICBpbmRpY2VzLAogICAgICAgICAgICB0ZXhjb29yZHMsCiAgICAgICAgICAgIGdyYW51bGFyaXR5CiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgfTsKICAgICAgY29tcHV0ZVdhbGxUZXhjb29yZHNTdWJkaXZpZGVkID0gW107CiAgICAgIGNvbXB1dGVXYWxsSW5kaWNlc1N1YmRpdmlkZWQgPSBbXTsKICAgICAgcDFTY3JhdGNoMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgcDJTY3JhdGNoMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgUG9seWdvbkdlb21ldHJ5TGlicmFyeS5jb21wdXRlV2FsbEdlb21ldHJ5ID0gZnVuY3Rpb24ocG9zaXRpb25zLCB0ZXh0dXJlQ29vcmRpbmF0ZXMsIGVsbGlwc29pZCwgZ3JhbnVsYXJpdHksIHBlclBvc2l0aW9uSGVpZ2h0LCBhcmNUeXBlKSB7CiAgICAgICAgbGV0IGVkZ2VQb3NpdGlvbnM7CiAgICAgICAgbGV0IHRvcEVkZ2VMZW5ndGg7CiAgICAgICAgbGV0IGk7CiAgICAgICAgbGV0IHAxOwogICAgICAgIGxldCBwMjsKICAgICAgICBsZXQgdDE7CiAgICAgICAgbGV0IHQyOwogICAgICAgIGxldCBlZGdlVGV4Y29vcmRzOwogICAgICAgIGxldCB0b3BFZGdlVGV4Y29vcmRMZW5ndGg7CiAgICAgICAgbGV0IGxlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgbGV0IGluZGV4ID0gMDsKICAgICAgICBsZXQgdGV4dHVyZUluZGV4ID0gMDsKICAgICAgICBjb25zdCBoYXNUZXhjb29yZHMgPSBkZWZpbmVkX2RlZmF1bHQodGV4dHVyZUNvb3JkaW5hdGVzKTsKICAgICAgICBjb25zdCB0ZXhjb29yZHMgPSBoYXNUZXhjb29yZHMgPyB0ZXh0dXJlQ29vcmRpbmF0ZXMucG9zaXRpb25zIDogdm9pZCAwOwogICAgICAgIGlmICghcGVyUG9zaXRpb25IZWlnaHQpIHsKICAgICAgICAgIGNvbnN0IG1pbkRpc3RhbmNlID0gTWF0aF9kZWZhdWx0LmNob3JkTGVuZ3RoKAogICAgICAgICAgICBncmFudWxhcml0eSwKICAgICAgICAgICAgZWxsaXBzb2lkLm1heGltdW1SYWRpdXMKICAgICAgICAgICk7CiAgICAgICAgICBsZXQgbnVtVmVydGljZXMgPSAwOwogICAgICAgICAgaWYgKGFyY1R5cGUgPT09IEFyY1R5cGVfZGVmYXVsdC5HRU9ERVNJQykgewogICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICBudW1WZXJ0aWNlcyArPSBQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5LnN1YmRpdmlkZUxpbmVDb3VudCgKICAgICAgICAgICAgICAgIHBvc2l0aW9uc1tpXSwKICAgICAgICAgICAgICAgIHBvc2l0aW9uc1soaSArIDEpICUgbGVuZ3RoXSwKICAgICAgICAgICAgICAgIG1pbkRpc3RhbmNlCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIGlmIChhcmNUeXBlID09PSBBcmNUeXBlX2RlZmF1bHQuUkhVTUIpIHsKICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgbnVtVmVydGljZXMgKz0gUG9seWdvbkdlb21ldHJ5TGlicmFyeS5zdWJkaXZpZGVSaHVtYkxpbmVDb3VudCgKICAgICAgICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgICAgICAgIHBvc2l0aW9uc1tpXSwKICAgICAgICAgICAgICAgIHBvc2l0aW9uc1soaSArIDEpICUgbGVuZ3RoXSwKICAgICAgICAgICAgICAgIG1pbkRpc3RhbmNlCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgdG9wRWRnZUxlbmd0aCA9IChudW1WZXJ0aWNlcyArIGxlbmd0aCkgKiAzOwogICAgICAgICAgZWRnZVBvc2l0aW9ucyA9IG5ldyBBcnJheSh0b3BFZGdlTGVuZ3RoICogMik7CiAgICAgICAgICBpZiAoaGFzVGV4Y29vcmRzKSB7CiAgICAgICAgICAgIHRvcEVkZ2VUZXhjb29yZExlbmd0aCA9IChudW1WZXJ0aWNlcyArIGxlbmd0aCkgKiAyOwogICAgICAgICAgICBlZGdlVGV4Y29vcmRzID0gbmV3IEFycmF5KHRvcEVkZ2VUZXhjb29yZExlbmd0aCAqIDIpOwogICAgICAgICAgfQogICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHAxID0gcG9zaXRpb25zW2ldOwogICAgICAgICAgICBwMiA9IHBvc2l0aW9uc1soaSArIDEpICUgbGVuZ3RoXTsKICAgICAgICAgICAgbGV0IHRlbXBQb3NpdGlvbnM7CiAgICAgICAgICAgIGxldCB0ZW1wVGV4Y29vcmRzOwogICAgICAgICAgICBpZiAoaGFzVGV4Y29vcmRzKSB7CiAgICAgICAgICAgICAgdDEgPSB0ZXhjb29yZHNbaV07CiAgICAgICAgICAgICAgdDIgPSB0ZXhjb29yZHNbKGkgKyAxKSAlIGxlbmd0aF07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGFyY1R5cGUgPT09IEFyY1R5cGVfZGVmYXVsdC5HRU9ERVNJQykgewogICAgICAgICAgICAgIHRlbXBQb3NpdGlvbnMgPSBQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5LnN1YmRpdmlkZUxpbmUoCiAgICAgICAgICAgICAgICBwMSwKICAgICAgICAgICAgICAgIHAyLAogICAgICAgICAgICAgICAgbWluRGlzdGFuY2UsCiAgICAgICAgICAgICAgICBjb21wdXRlV2FsbEluZGljZXNTdWJkaXZpZGVkCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICBpZiAoaGFzVGV4Y29vcmRzKSB7CiAgICAgICAgICAgICAgICB0ZW1wVGV4Y29vcmRzID0gUG9seWdvbkdlb21ldHJ5TGlicmFyeS5zdWJkaXZpZGVUZXhjb29yZExpbmUoCiAgICAgICAgICAgICAgICAgIHQxLAogICAgICAgICAgICAgICAgICB0MiwKICAgICAgICAgICAgICAgICAgcDEsCiAgICAgICAgICAgICAgICAgIHAyLAogICAgICAgICAgICAgICAgICBtaW5EaXN0YW5jZSwKICAgICAgICAgICAgICAgICAgY29tcHV0ZVdhbGxUZXhjb29yZHNTdWJkaXZpZGVkCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIGlmIChhcmNUeXBlID09PSBBcmNUeXBlX2RlZmF1bHQuUkhVTUIpIHsKICAgICAgICAgICAgICB0ZW1wUG9zaXRpb25zID0gUG9seWdvbkdlb21ldHJ5TGlicmFyeS5zdWJkaXZpZGVSaHVtYkxpbmUoCiAgICAgICAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICAgICAgICBwMSwKICAgICAgICAgICAgICAgIHAyLAogICAgICAgICAgICAgICAgbWluRGlzdGFuY2UsCiAgICAgICAgICAgICAgICBjb21wdXRlV2FsbEluZGljZXNTdWJkaXZpZGVkCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICBpZiAoaGFzVGV4Y29vcmRzKSB7CiAgICAgICAgICAgICAgICB0ZW1wVGV4Y29vcmRzID0gUG9seWdvbkdlb21ldHJ5TGlicmFyeS5zdWJkaXZpZGVUZXhjb29yZFJodW1iTGluZSgKICAgICAgICAgICAgICAgICAgdDEsCiAgICAgICAgICAgICAgICAgIHQyLAogICAgICAgICAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICAgICAgICAgIHAxLAogICAgICAgICAgICAgICAgICBwMiwKICAgICAgICAgICAgICAgICAgbWluRGlzdGFuY2UsCiAgICAgICAgICAgICAgICAgIGNvbXB1dGVXYWxsVGV4Y29vcmRzU3ViZGl2aWRlZAogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgdGVtcFBvc2l0aW9uc0xlbmd0aCA9IHRlbXBQb3NpdGlvbnMubGVuZ3RoOwogICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRlbXBQb3NpdGlvbnNMZW5ndGg7ICsraiwgKytpbmRleCkgewogICAgICAgICAgICAgIGVkZ2VQb3NpdGlvbnNbaW5kZXhdID0gdGVtcFBvc2l0aW9uc1tqXTsKICAgICAgICAgICAgICBlZGdlUG9zaXRpb25zW2luZGV4ICsgdG9wRWRnZUxlbmd0aF0gPSB0ZW1wUG9zaXRpb25zW2pdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVkZ2VQb3NpdGlvbnNbaW5kZXhdID0gcDIueDsKICAgICAgICAgICAgZWRnZVBvc2l0aW9uc1tpbmRleCArIHRvcEVkZ2VMZW5ndGhdID0gcDIueDsKICAgICAgICAgICAgKytpbmRleDsKICAgICAgICAgICAgZWRnZVBvc2l0aW9uc1tpbmRleF0gPSBwMi55OwogICAgICAgICAgICBlZGdlUG9zaXRpb25zW2luZGV4ICsgdG9wRWRnZUxlbmd0aF0gPSBwMi55OwogICAgICAgICAgICArK2luZGV4OwogICAgICAgICAgICBlZGdlUG9zaXRpb25zW2luZGV4XSA9IHAyLno7CiAgICAgICAgICAgIGVkZ2VQb3NpdGlvbnNbaW5kZXggKyB0b3BFZGdlTGVuZ3RoXSA9IHAyLno7CiAgICAgICAgICAgICsraW5kZXg7CiAgICAgICAgICAgIGlmIChoYXNUZXhjb29yZHMpIHsKICAgICAgICAgICAgICBjb25zdCB0ZW1wVGV4Y29vcmRzTGVuZ3RoID0gdGVtcFRleGNvb3Jkcy5sZW5ndGg7CiAgICAgICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCB0ZW1wVGV4Y29vcmRzTGVuZ3RoOyArK2ssICsrdGV4dHVyZUluZGV4KSB7CiAgICAgICAgICAgICAgICBlZGdlVGV4Y29vcmRzW3RleHR1cmVJbmRleF0gPSB0ZW1wVGV4Y29vcmRzW2tdOwogICAgICAgICAgICAgICAgZWRnZVRleGNvb3Jkc1t0ZXh0dXJlSW5kZXggKyB0b3BFZGdlVGV4Y29vcmRMZW5ndGhdID0gdGVtcFRleGNvb3Jkc1trXTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZWRnZVRleGNvb3Jkc1t0ZXh0dXJlSW5kZXhdID0gdDIueDsKICAgICAgICAgICAgICBlZGdlVGV4Y29vcmRzW3RleHR1cmVJbmRleCArIHRvcEVkZ2VUZXhjb29yZExlbmd0aF0gPSB0Mi54OwogICAgICAgICAgICAgICsrdGV4dHVyZUluZGV4OwogICAgICAgICAgICAgIGVkZ2VUZXhjb29yZHNbdGV4dHVyZUluZGV4XSA9IHQyLnk7CiAgICAgICAgICAgICAgZWRnZVRleGNvb3Jkc1t0ZXh0dXJlSW5kZXggKyB0b3BFZGdlVGV4Y29vcmRMZW5ndGhdID0gdDIueTsKICAgICAgICAgICAgICArK3RleHR1cmVJbmRleDsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0b3BFZGdlTGVuZ3RoID0gbGVuZ3RoICogMyAqIDI7CiAgICAgICAgICBlZGdlUG9zaXRpb25zID0gbmV3IEFycmF5KHRvcEVkZ2VMZW5ndGggKiAyKTsKICAgICAgICAgIGlmIChoYXNUZXhjb29yZHMpIHsKICAgICAgICAgICAgdG9wRWRnZVRleGNvb3JkTGVuZ3RoID0gbGVuZ3RoICogMiAqIDI7CiAgICAgICAgICAgIGVkZ2VUZXhjb29yZHMgPSBuZXcgQXJyYXkodG9wRWRnZVRleGNvb3JkTGVuZ3RoICogMik7CiAgICAgICAgICB9CiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgcDEgPSBwb3NpdGlvbnNbaV07CiAgICAgICAgICAgIHAyID0gcG9zaXRpb25zWyhpICsgMSkgJSBsZW5ndGhdOwogICAgICAgICAgICBlZGdlUG9zaXRpb25zW2luZGV4XSA9IGVkZ2VQb3NpdGlvbnNbaW5kZXggKyB0b3BFZGdlTGVuZ3RoXSA9IHAxLng7CiAgICAgICAgICAgICsraW5kZXg7CiAgICAgICAgICAgIGVkZ2VQb3NpdGlvbnNbaW5kZXhdID0gZWRnZVBvc2l0aW9uc1tpbmRleCArIHRvcEVkZ2VMZW5ndGhdID0gcDEueTsKICAgICAgICAgICAgKytpbmRleDsKICAgICAgICAgICAgZWRnZVBvc2l0aW9uc1tpbmRleF0gPSBlZGdlUG9zaXRpb25zW2luZGV4ICsgdG9wRWRnZUxlbmd0aF0gPSBwMS56OwogICAgICAgICAgICArK2luZGV4OwogICAgICAgICAgICBlZGdlUG9zaXRpb25zW2luZGV4XSA9IGVkZ2VQb3NpdGlvbnNbaW5kZXggKyB0b3BFZGdlTGVuZ3RoXSA9IHAyLng7CiAgICAgICAgICAgICsraW5kZXg7CiAgICAgICAgICAgIGVkZ2VQb3NpdGlvbnNbaW5kZXhdID0gZWRnZVBvc2l0aW9uc1tpbmRleCArIHRvcEVkZ2VMZW5ndGhdID0gcDIueTsKICAgICAgICAgICAgKytpbmRleDsKICAgICAgICAgICAgZWRnZVBvc2l0aW9uc1tpbmRleF0gPSBlZGdlUG9zaXRpb25zW2luZGV4ICsgdG9wRWRnZUxlbmd0aF0gPSBwMi56OwogICAgICAgICAgICArK2luZGV4OwogICAgICAgICAgICBpZiAoaGFzVGV4Y29vcmRzKSB7CiAgICAgICAgICAgICAgdDEgPSB0ZXhjb29yZHNbaV07CiAgICAgICAgICAgICAgdDIgPSB0ZXhjb29yZHNbKGkgKyAxKSAlIGxlbmd0aF07CiAgICAgICAgICAgICAgZWRnZVRleGNvb3Jkc1t0ZXh0dXJlSW5kZXhdID0gZWRnZVRleGNvb3Jkc1t0ZXh0dXJlSW5kZXggKyB0b3BFZGdlVGV4Y29vcmRMZW5ndGhdID0gdDEueDsKICAgICAgICAgICAgICArK3RleHR1cmVJbmRleDsKICAgICAgICAgICAgICBlZGdlVGV4Y29vcmRzW3RleHR1cmVJbmRleF0gPSBlZGdlVGV4Y29vcmRzW3RleHR1cmVJbmRleCArIHRvcEVkZ2VUZXhjb29yZExlbmd0aF0gPSB0MS55OwogICAgICAgICAgICAgICsrdGV4dHVyZUluZGV4OwogICAgICAgICAgICAgIGVkZ2VUZXhjb29yZHNbdGV4dHVyZUluZGV4XSA9IGVkZ2VUZXhjb29yZHNbdGV4dHVyZUluZGV4ICsgdG9wRWRnZVRleGNvb3JkTGVuZ3RoXSA9IHQyLng7CiAgICAgICAgICAgICAgKyt0ZXh0dXJlSW5kZXg7CiAgICAgICAgICAgICAgZWRnZVRleGNvb3Jkc1t0ZXh0dXJlSW5kZXhdID0gZWRnZVRleGNvb3Jkc1t0ZXh0dXJlSW5kZXggKyB0b3BFZGdlVGV4Y29vcmRMZW5ndGhdID0gdDIueTsKICAgICAgICAgICAgICArK3RleHR1cmVJbmRleDsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBsZW5ndGggPSBlZGdlUG9zaXRpb25zLmxlbmd0aDsKICAgICAgICBjb25zdCBpbmRpY2VzID0gSW5kZXhEYXRhdHlwZV9kZWZhdWx0LmNyZWF0ZVR5cGVkQXJyYXkoCiAgICAgICAgICBsZW5ndGggLyAzLAogICAgICAgICAgbGVuZ3RoIC0gcG9zaXRpb25zLmxlbmd0aCAqIDYKICAgICAgICApOwogICAgICAgIGxldCBlZGdlSW5kZXggPSAwOwogICAgICAgIGxlbmd0aCAvPSA2OwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgICAgY29uc3QgVUwgPSBpOwogICAgICAgICAgY29uc3QgVVIgPSBVTCArIDE7CiAgICAgICAgICBjb25zdCBMTCA9IFVMICsgbGVuZ3RoOwogICAgICAgICAgY29uc3QgTFIgPSBMTCArIDE7CiAgICAgICAgICBwMSA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkoZWRnZVBvc2l0aW9ucywgVUwgKiAzLCBwMVNjcmF0Y2gyKTsKICAgICAgICAgIHAyID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShlZGdlUG9zaXRpb25zLCBVUiAqIDMsIHAyU2NyYXRjaDIpOwogICAgICAgICAgaWYgKENhcnRlc2lhbjNfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgICBwMSwKICAgICAgICAgICAgcDIsCiAgICAgICAgICAgIE1hdGhfZGVmYXVsdC5FUFNJTE9OMTAsCiAgICAgICAgICAgIE1hdGhfZGVmYXVsdC5FUFNJTE9OMTAKICAgICAgICAgICkpIHsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICBpbmRpY2VzW2VkZ2VJbmRleCsrXSA9IFVMOwogICAgICAgICAgaW5kaWNlc1tlZGdlSW5kZXgrK10gPSBMTDsKICAgICAgICAgIGluZGljZXNbZWRnZUluZGV4KytdID0gVVI7CiAgICAgICAgICBpbmRpY2VzW2VkZ2VJbmRleCsrXSA9IFVSOwogICAgICAgICAgaW5kaWNlc1tlZGdlSW5kZXgrK10gPSBMTDsKICAgICAgICAgIGluZGljZXNbZWRnZUluZGV4KytdID0gTFI7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGdlb21ldHJ5T3B0aW9ucyA9IHsKICAgICAgICAgIGF0dHJpYnV0ZXM6IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZXNfZGVmYXVsdCh7CiAgICAgICAgICAgIHBvc2l0aW9uOiBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRE9VQkxFLAogICAgICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgICAgICAgdmFsdWVzOiBlZGdlUG9zaXRpb25zCiAgICAgICAgICAgIH0pCiAgICAgICAgICB9KSwKICAgICAgICAgIGluZGljZXMsCiAgICAgICAgICBwcmltaXRpdmVUeXBlOiBQcmltaXRpdmVUeXBlX2RlZmF1bHQuVFJJQU5HTEVTCiAgICAgICAgfTsKICAgICAgICBpZiAoaGFzVGV4Y29vcmRzKSB7CiAgICAgICAgICBnZW9tZXRyeU9wdGlvbnMuYXR0cmlidXRlcy5zdCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDIsCiAgICAgICAgICAgIHZhbHVlczogZWRnZVRleGNvb3JkcwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGdlb21ldHJ5ID0gbmV3IEdlb21ldHJ5X2RlZmF1bHQoZ2VvbWV0cnlPcHRpb25zKTsKICAgICAgICByZXR1cm4gZ2VvbWV0cnk7CiAgICAgIH07CiAgICAgIFBvbHlnb25HZW9tZXRyeUxpYnJhcnlfZGVmYXVsdCA9IFBvbHlnb25HZW9tZXRyeUxpYnJhcnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9Db3BsYW5hclBvbHlnb25HZW9tZXRyeS5qcwogIGZ1bmN0aW9uIGNyZWF0ZUdlb21ldHJ5RnJvbVBvbHlnb24ocG9seWdvbjIsIHZlcnRleEZvcm1hdCwgYm91bmRpbmdSZWN0YW5nbGUsIHN0Um90YXRpb24sIGhhcmRjb2RlZFRleHR1cmVDb29yZGluYXRlcywgcHJvamVjdFBvaW50VG8yRCwgbm9ybWFsMiwgdGFuZ2VudCwgYml0YW5nZW50KSB7CiAgICBjb25zdCBwb3NpdGlvbnMgPSBwb2x5Z29uMi5wb3NpdGlvbnM7CiAgICBsZXQgaW5kaWNlcyA9IFBvbHlnb25QaXBlbGluZV9kZWZhdWx0LnRyaWFuZ3VsYXRlKHBvbHlnb24yLnBvc2l0aW9uczJELCBwb2x5Z29uMi5ob2xlcyk7CiAgICBpZiAoaW5kaWNlcy5sZW5ndGggPCAzKSB7CiAgICAgIGluZGljZXMgPSBbMCwgMSwgMl07CiAgICB9CiAgICBjb25zdCBuZXdJbmRpY2VzID0gSW5kZXhEYXRhdHlwZV9kZWZhdWx0LmNyZWF0ZVR5cGVkQXJyYXkoCiAgICAgIHBvc2l0aW9ucy5sZW5ndGgsCiAgICAgIGluZGljZXMubGVuZ3RoCiAgICApOwogICAgbmV3SW5kaWNlcy5zZXQoaW5kaWNlcyk7CiAgICBsZXQgdGV4dHVyZU1hdHJpeCA9IHRleHR1cmVNYXRyaXhTY3JhdGNoMjsKICAgIGlmIChzdFJvdGF0aW9uICE9PSAwKSB7CiAgICAgIGxldCByb3RhdGlvbiA9IFF1YXRlcm5pb25fZGVmYXVsdC5mcm9tQXhpc0FuZ2xlKAogICAgICAgIG5vcm1hbDIsCiAgICAgICAgc3RSb3RhdGlvbiwKICAgICAgICBxdWF0ZXJuaW9uU2NyYXRjaDIKICAgICAgKTsKICAgICAgdGV4dHVyZU1hdHJpeCA9IE1hdHJpeDNfZGVmYXVsdC5mcm9tUXVhdGVybmlvbihyb3RhdGlvbiwgdGV4dHVyZU1hdHJpeCk7CiAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQudGFuZ2VudCB8fCB2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50KSB7CiAgICAgICAgcm90YXRpb24gPSBRdWF0ZXJuaW9uX2RlZmF1bHQuZnJvbUF4aXNBbmdsZSgKICAgICAgICAgIG5vcm1hbDIsCiAgICAgICAgICAtc3RSb3RhdGlvbiwKICAgICAgICAgIHF1YXRlcm5pb25TY3JhdGNoMgogICAgICAgICk7CiAgICAgICAgY29uc3QgdGFuZ2VudFJvdGF0aW9uID0gTWF0cml4M19kZWZhdWx0LmZyb21RdWF0ZXJuaW9uKAogICAgICAgICAgcm90YXRpb24sCiAgICAgICAgICB0YW5nZW50Um90YXRpb25TY3JhdGNoCiAgICAgICAgKTsKICAgICAgICB0YW5nZW50ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSgKICAgICAgICAgIE1hdHJpeDNfZGVmYXVsdC5tdWx0aXBseUJ5VmVjdG9yKHRhbmdlbnRSb3RhdGlvbiwgdGFuZ2VudCwgdGFuZ2VudCksCiAgICAgICAgICB0YW5nZW50CiAgICAgICAgKTsKICAgICAgICBpZiAodmVydGV4Rm9ybWF0LmJpdGFuZ2VudCkgewogICAgICAgICAgYml0YW5nZW50ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSgKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKG5vcm1hbDIsIHRhbmdlbnQsIGJpdGFuZ2VudCksCiAgICAgICAgICAgIGJpdGFuZ2VudAogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIHRleHR1cmVNYXRyaXggPSBNYXRyaXgzX2RlZmF1bHQuY2xvbmUoTWF0cml4M19kZWZhdWx0LklERU5USVRZLCB0ZXh0dXJlTWF0cml4KTsKICAgIH0KICAgIGNvbnN0IHN0T3JpZ2luID0gdGV4dHVyZUNvb3JkaW5hdGVzT3JpZ2luOwogICAgaWYgKHZlcnRleEZvcm1hdC5zdCkgewogICAgICBzdE9yaWdpbi54ID0gYm91bmRpbmdSZWN0YW5nbGUueDsKICAgICAgc3RPcmlnaW4ueSA9IGJvdW5kaW5nUmVjdGFuZ2xlLnk7CiAgICB9CiAgICBjb25zdCBsZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoOwogICAgY29uc3Qgc2l6ZSA9IGxlbmd0aCAqIDM7CiAgICBjb25zdCBmbGF0UG9zaXRpb25zID0gbmV3IEZsb2F0NjRBcnJheShzaXplKTsKICAgIGNvbnN0IG5vcm1hbHMgPSB2ZXJ0ZXhGb3JtYXQubm9ybWFsID8gbmV3IEZsb2F0MzJBcnJheShzaXplKSA6IHZvaWQgMDsKICAgIGNvbnN0IHRhbmdlbnRzID0gdmVydGV4Rm9ybWF0LnRhbmdlbnQgPyBuZXcgRmxvYXQzMkFycmF5KHNpemUpIDogdm9pZCAwOwogICAgY29uc3QgYml0YW5nZW50cyA9IHZlcnRleEZvcm1hdC5iaXRhbmdlbnQgPyBuZXcgRmxvYXQzMkFycmF5KHNpemUpIDogdm9pZCAwOwogICAgY29uc3QgdGV4dHVyZUNvb3JkaW5hdGVzID0gdmVydGV4Rm9ybWF0LnN0ID8gbmV3IEZsb2F0MzJBcnJheShsZW5ndGggKiAyKSA6IHZvaWQgMDsKICAgIGxldCBwb3NpdGlvbkluZGV4ID0gMDsKICAgIGxldCBub3JtYWxJbmRleCA9IDA7CiAgICBsZXQgYml0YW5nZW50SW5kZXggPSAwOwogICAgbGV0IHRhbmdlbnRJbmRleCA9IDA7CiAgICBsZXQgc3RJbmRleCA9IDA7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgIGNvbnN0IHBvc2l0aW9uID0gcG9zaXRpb25zW2ldOwogICAgICBmbGF0UG9zaXRpb25zW3Bvc2l0aW9uSW5kZXgrK10gPSBwb3NpdGlvbi54OwogICAgICBmbGF0UG9zaXRpb25zW3Bvc2l0aW9uSW5kZXgrK10gPSBwb3NpdGlvbi55OwogICAgICBmbGF0UG9zaXRpb25zW3Bvc2l0aW9uSW5kZXgrK10gPSBwb3NpdGlvbi56OwogICAgICBpZiAodmVydGV4Rm9ybWF0LnN0KSB7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChoYXJkY29kZWRUZXh0dXJlQ29vcmRpbmF0ZXMpICYmIGhhcmRjb2RlZFRleHR1cmVDb29yZGluYXRlcy5wb3NpdGlvbnMubGVuZ3RoID09PSBsZW5ndGgpIHsKICAgICAgICAgIHRleHR1cmVDb29yZGluYXRlc1tzdEluZGV4KytdID0gaGFyZGNvZGVkVGV4dHVyZUNvb3JkaW5hdGVzLnBvc2l0aW9uc1tpXS54OwogICAgICAgICAgdGV4dHVyZUNvb3JkaW5hdGVzW3N0SW5kZXgrK10gPSBoYXJkY29kZWRUZXh0dXJlQ29vcmRpbmF0ZXMucG9zaXRpb25zW2ldLnk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNvbnN0IHAgPSBNYXRyaXgzX2RlZmF1bHQubXVsdGlwbHlCeVZlY3RvcigKICAgICAgICAgICAgdGV4dHVyZU1hdHJpeCwKICAgICAgICAgICAgcG9zaXRpb24sCiAgICAgICAgICAgIHNjcmF0Y2hQb3NpdGlvbgogICAgICAgICAgKTsKICAgICAgICAgIGNvbnN0IHN0ID0gcHJvamVjdFBvaW50VG8yRChwLCBzdFNjcmF0Y2gpOwogICAgICAgICAgQ2FydGVzaWFuMl9kZWZhdWx0LnN1YnRyYWN0KHN0LCBzdE9yaWdpbiwgc3QpOwogICAgICAgICAgY29uc3Qgc3R4ID0gTWF0aF9kZWZhdWx0LmNsYW1wKHN0LnggLyBib3VuZGluZ1JlY3RhbmdsZS53aWR0aCwgMCwgMSk7CiAgICAgICAgICBjb25zdCBzdHkgPSBNYXRoX2RlZmF1bHQuY2xhbXAoc3QueSAvIGJvdW5kaW5nUmVjdGFuZ2xlLmhlaWdodCwgMCwgMSk7CiAgICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZXNbc3RJbmRleCsrXSA9IHN0eDsKICAgICAgICAgIHRleHR1cmVDb29yZGluYXRlc1tzdEluZGV4KytdID0gc3R5OwogICAgICAgIH0KICAgICAgfQogICAgICBpZiAodmVydGV4Rm9ybWF0Lm5vcm1hbCkgewogICAgICAgIG5vcm1hbHNbbm9ybWFsSW5kZXgrK10gPSBub3JtYWwyLng7CiAgICAgICAgbm9ybWFsc1tub3JtYWxJbmRleCsrXSA9IG5vcm1hbDIueTsKICAgICAgICBub3JtYWxzW25vcm1hbEluZGV4KytdID0gbm9ybWFsMi56OwogICAgICB9CiAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQudGFuZ2VudCkgewogICAgICAgIHRhbmdlbnRzW3RhbmdlbnRJbmRleCsrXSA9IHRhbmdlbnQueDsKICAgICAgICB0YW5nZW50c1t0YW5nZW50SW5kZXgrK10gPSB0YW5nZW50Lnk7CiAgICAgICAgdGFuZ2VudHNbdGFuZ2VudEluZGV4KytdID0gdGFuZ2VudC56OwogICAgICB9CiAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50KSB7CiAgICAgICAgYml0YW5nZW50c1tiaXRhbmdlbnRJbmRleCsrXSA9IGJpdGFuZ2VudC54OwogICAgICAgIGJpdGFuZ2VudHNbYml0YW5nZW50SW5kZXgrK10gPSBiaXRhbmdlbnQueTsKICAgICAgICBiaXRhbmdlbnRzW2JpdGFuZ2VudEluZGV4KytdID0gYml0YW5nZW50Lno7CiAgICAgIH0KICAgIH0KICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVzX2RlZmF1bHQoKTsKICAgIGlmICh2ZXJ0ZXhGb3JtYXQucG9zaXRpb24pIHsKICAgICAgYXR0cmlidXRlcy5wb3NpdGlvbiA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5ET1VCTEUsCiAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICB2YWx1ZXM6IGZsYXRQb3NpdGlvbnMKICAgICAgfSk7CiAgICB9CiAgICBpZiAodmVydGV4Rm9ybWF0Lm5vcm1hbCkgewogICAgICBhdHRyaWJ1dGVzLm5vcm1hbCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgIHZhbHVlczogbm9ybWFscwogICAgICB9KTsKICAgIH0KICAgIGlmICh2ZXJ0ZXhGb3JtYXQudGFuZ2VudCkgewogICAgICBhdHRyaWJ1dGVzLnRhbmdlbnQgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICB2YWx1ZXM6IHRhbmdlbnRzCiAgICAgIH0pOwogICAgfQogICAgaWYgKHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpIHsKICAgICAgYXR0cmlidXRlcy5iaXRhbmdlbnQgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICB2YWx1ZXM6IGJpdGFuZ2VudHMKICAgICAgfSk7CiAgICB9CiAgICBpZiAodmVydGV4Rm9ybWF0LnN0KSB7CiAgICAgIGF0dHJpYnV0ZXMuc3QgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMiwKICAgICAgICB2YWx1ZXM6IHRleHR1cmVDb29yZGluYXRlcwogICAgICB9KTsKICAgIH0KICAgIHJldHVybiBuZXcgR2VvbWV0cnlfZGVmYXVsdCh7CiAgICAgIGF0dHJpYnV0ZXMsCiAgICAgIGluZGljZXM6IG5ld0luZGljZXMsCiAgICAgIHByaW1pdGl2ZVR5cGU6IFByaW1pdGl2ZVR5cGVfZGVmYXVsdC5UUklBTkdMRVMKICAgIH0pOwogIH0KICBmdW5jdGlvbiBDb3BsYW5hclBvbHlnb25HZW9tZXRyeShvcHRpb25zKSB7CiAgICBvcHRpb25zID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucywgZGVmYXVsdFZhbHVlX2RlZmF1bHQuRU1QVFlfT0JKRUNUKTsKICAgIGNvbnN0IHBvbHlnb25IaWVyYXJjaHkgPSBvcHRpb25zLnBvbHlnb25IaWVyYXJjaHk7CiAgICBjb25zdCB0ZXh0dXJlQ29vcmRpbmF0ZXMgPSBvcHRpb25zLnRleHR1cmVDb29yZGluYXRlczsKICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgib3B0aW9ucy5wb2x5Z29uSGllcmFyY2h5IiwgcG9seWdvbkhpZXJhcmNoeSk7CiAgICBjb25zdCB2ZXJ0ZXhGb3JtYXQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLnZlcnRleEZvcm1hdCwgVmVydGV4Rm9ybWF0X2RlZmF1bHQuREVGQVVMVCk7CiAgICB0aGlzLl92ZXJ0ZXhGb3JtYXQgPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5jbG9uZSh2ZXJ0ZXhGb3JtYXQpOwogICAgdGhpcy5fcG9seWdvbkhpZXJhcmNoeSA9IHBvbHlnb25IaWVyYXJjaHk7CiAgICB0aGlzLl9zdFJvdGF0aW9uID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5zdFJvdGF0aW9uLCAwKTsKICAgIHRoaXMuX2VsbGlwc29pZCA9IEVsbGlwc29pZF9kZWZhdWx0LmNsb25lKAogICAgICBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmVsbGlwc29pZCwgRWxsaXBzb2lkX2RlZmF1bHQuZGVmYXVsdCkKICAgICk7CiAgICB0aGlzLl93b3JrZXJOYW1lID0gImNyZWF0ZUNvcGxhbmFyUG9seWdvbkdlb21ldHJ5IjsKICAgIHRoaXMuX3RleHR1cmVDb29yZGluYXRlcyA9IHRleHR1cmVDb29yZGluYXRlczsKICAgIHRoaXMucGFja2VkTGVuZ3RoID0gUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmNvbXB1dGVIaWVyYXJjaHlQYWNrZWRMZW5ndGgoCiAgICAgIHBvbHlnb25IaWVyYXJjaHksCiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdAogICAgKSArIFZlcnRleEZvcm1hdF9kZWZhdWx0LnBhY2tlZExlbmd0aCArIEVsbGlwc29pZF9kZWZhdWx0LnBhY2tlZExlbmd0aCArIChkZWZpbmVkX2RlZmF1bHQodGV4dHVyZUNvb3JkaW5hdGVzKSA/IFBvbHlnb25HZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5jb21wdXRlSGllcmFyY2h5UGFja2VkTGVuZ3RoKAogICAgICB0ZXh0dXJlQ29vcmRpbmF0ZXMsCiAgICAgIENhcnRlc2lhbjJfZGVmYXVsdAogICAgKSA6IDEpICsgMjsKICB9CiAgdmFyIHNjcmF0Y2hQb3NpdGlvbiwgc2NyYXRjaEJSLCBzdFNjcmF0Y2gsIHRleHR1cmVDb29yZGluYXRlc09yaWdpbiwgc2NyYXRjaE5vcm1hbDQsIHNjcmF0Y2hUYW5nZW50Miwgc2NyYXRjaEJpdGFuZ2VudDIsIGNlbnRlclNjcmF0Y2gsIGF4aXMxU2NyYXRjaCwgYXhpczJTY3JhdGNoLCBxdWF0ZXJuaW9uU2NyYXRjaDIsIHRleHR1cmVNYXRyaXhTY3JhdGNoMiwgdGFuZ2VudFJvdGF0aW9uU2NyYXRjaCwgc3VyZmFjZU5vcm1hbFNjcmF0Y2gsIHNjcmF0Y2hFbGxpcHNvaWQzLCBzY3JhdGNoVmVydGV4Rm9ybWF0Mywgc2NyYXRjaE9wdGlvbnM3LCBDb3BsYW5hclBvbHlnb25HZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X0NvcGxhbmFyUG9seWdvbkdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9Db3BsYW5hclBvbHlnb25HZW9tZXRyeS5qcyIoKSB7CiAgICAgIGluaXRfYXJyYXlSZW1vdmVEdXBsaWNhdGVzKCk7CiAgICAgIGluaXRfQm91bmRpbmdSZWN0YW5nbGUoKTsKICAgICAgaW5pdF9Cb3VuZGluZ1NwaGVyZSgpOwogICAgICBpbml0X0NhcnRlc2lhbjIoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgaW5pdF9Db21wb25lbnREYXRhdHlwZSgpOwogICAgICBpbml0X0NvcGxhbmFyUG9seWdvbkdlb21ldHJ5TGlicmFyeSgpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9HZW9tZXRyeSgpOwogICAgICBpbml0X0dlb21ldHJ5QXR0cmlidXRlKCk7CiAgICAgIGluaXRfR2VvbWV0cnlBdHRyaWJ1dGVzKCk7CiAgICAgIGluaXRfR2VvbWV0cnlJbnN0YW5jZSgpOwogICAgICBpbml0X0dlb21ldHJ5UGlwZWxpbmUoKTsKICAgICAgaW5pdF9JbmRleERhdGF0eXBlKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X01hdHJpeDMoKTsKICAgICAgaW5pdF9Qb2x5Z29uR2VvbWV0cnlMaWJyYXJ5KCk7CiAgICAgIGluaXRfUG9seWdvblBpcGVsaW5lKCk7CiAgICAgIGluaXRfUHJpbWl0aXZlVHlwZSgpOwogICAgICBpbml0X1F1YXRlcm5pb24oKTsKICAgICAgaW5pdF9WZXJ0ZXhGb3JtYXQoKTsKICAgICAgc2NyYXRjaFBvc2l0aW9uID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQlIgPSBuZXcgQm91bmRpbmdSZWN0YW5nbGVfZGVmYXVsdCgpOwogICAgICBzdFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCk7CiAgICAgIHRleHR1cmVDb29yZGluYXRlc09yaWdpbiA9IG5ldyBDYXJ0ZXNpYW4yX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaE5vcm1hbDQgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hUYW5nZW50MiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaEJpdGFuZ2VudDIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGNlbnRlclNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGF4aXMxU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgYXhpczJTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBxdWF0ZXJuaW9uU2NyYXRjaDIgPSBuZXcgUXVhdGVybmlvbl9kZWZhdWx0KCk7CiAgICAgIHRleHR1cmVNYXRyaXhTY3JhdGNoMiA9IG5ldyBNYXRyaXgzX2RlZmF1bHQoKTsKICAgICAgdGFuZ2VudFJvdGF0aW9uU2NyYXRjaCA9IG5ldyBNYXRyaXgzX2RlZmF1bHQoKTsKICAgICAgc3VyZmFjZU5vcm1hbFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIENvcGxhbmFyUG9seWdvbkdlb21ldHJ5LmZyb21Qb3NpdGlvbnMgPSBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgICAgb3B0aW9ucyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMsIGRlZmF1bHRWYWx1ZV9kZWZhdWx0LkVNUFRZX09CSkVDVCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJvcHRpb25zLnBvc2l0aW9ucyIsIG9wdGlvbnMucG9zaXRpb25zKTsKICAgICAgICBjb25zdCBuZXdPcHRpb25zID0gewogICAgICAgICAgcG9seWdvbkhpZXJhcmNoeTogewogICAgICAgICAgICBwb3NpdGlvbnM6IG9wdGlvbnMucG9zaXRpb25zCiAgICAgICAgICB9LAogICAgICAgICAgdmVydGV4Rm9ybWF0OiBvcHRpb25zLnZlcnRleEZvcm1hdCwKICAgICAgICAgIHN0Um90YXRpb246IG9wdGlvbnMuc3RSb3RhdGlvbiwKICAgICAgICAgIGVsbGlwc29pZDogb3B0aW9ucy5lbGxpcHNvaWQsCiAgICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZXM6IG9wdGlvbnMudGV4dHVyZUNvb3JkaW5hdGVzCiAgICAgICAgfTsKICAgICAgICByZXR1cm4gbmV3IENvcGxhbmFyUG9seWdvbkdlb21ldHJ5KG5ld09wdGlvbnMpOwogICAgICB9OwogICAgICBDb3BsYW5hclBvbHlnb25HZW9tZXRyeS5wYWNrID0gZnVuY3Rpb24odmFsdWUsIGFycmF5LCBzdGFydGluZ0luZGV4KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJ2YWx1ZSIsIHZhbHVlKTsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LnBhY2tQb2x5Z29uSGllcmFyY2h5KAogICAgICAgICAgdmFsdWUuX3BvbHlnb25IaWVyYXJjaHksCiAgICAgICAgICBhcnJheSwKICAgICAgICAgIHN0YXJ0aW5nSW5kZXgsCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQKICAgICAgICApOwogICAgICAgIEVsbGlwc29pZF9kZWZhdWx0LnBhY2sodmFsdWUuX2VsbGlwc29pZCwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gRWxsaXBzb2lkX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIFZlcnRleEZvcm1hdF9kZWZhdWx0LnBhY2sodmFsdWUuX3ZlcnRleEZvcm1hdCwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gVmVydGV4Rm9ybWF0X2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fc3RSb3RhdGlvbjsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHZhbHVlLl90ZXh0dXJlQ29vcmRpbmF0ZXMpKSB7CiAgICAgICAgICBzdGFydGluZ0luZGV4ID0gUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LnBhY2tQb2x5Z29uSGllcmFyY2h5KAogICAgICAgICAgICB2YWx1ZS5fdGV4dHVyZUNvb3JkaW5hdGVzLAogICAgICAgICAgICBhcnJheSwKICAgICAgICAgICAgc3RhcnRpbmdJbmRleCwKICAgICAgICAgICAgQ2FydGVzaWFuMl9kZWZhdWx0CiAgICAgICAgICApOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gLTE7CiAgICAgICAgfQogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5wYWNrZWRMZW5ndGg7CiAgICAgICAgcmV0dXJuIGFycmF5OwogICAgICB9OwogICAgICBzY3JhdGNoRWxsaXBzb2lkMyA9IEVsbGlwc29pZF9kZWZhdWx0LmNsb25lKEVsbGlwc29pZF9kZWZhdWx0LlVOSVRfU1BIRVJFKTsKICAgICAgc2NyYXRjaFZlcnRleEZvcm1hdDMgPSBuZXcgVmVydGV4Rm9ybWF0X2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaE9wdGlvbnM3ID0gewogICAgICAgIHBvbHlnb25IaWVyYXJjaHk6IHt9CiAgICAgIH07CiAgICAgIENvcGxhbmFyUG9seWdvbkdlb21ldHJ5LnVucGFjayA9IGZ1bmN0aW9uKGFycmF5LCBzdGFydGluZ0luZGV4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBjb25zdCBwb2x5Z29uSGllcmFyY2h5ID0gUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LnVucGFja1BvbHlnb25IaWVyYXJjaHkoCiAgICAgICAgICBhcnJheSwKICAgICAgICAgIHN0YXJ0aW5nSW5kZXgsCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQKICAgICAgICApOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBwb2x5Z29uSGllcmFyY2h5LnN0YXJ0aW5nSW5kZXg7CiAgICAgICAgZGVsZXRlIHBvbHlnb25IaWVyYXJjaHkuc3RhcnRpbmdJbmRleDsKICAgICAgICBjb25zdCBlbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC51bnBhY2soYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHNjcmF0Y2hFbGxpcHNvaWQzKTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IEVsbGlwc29pZF9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBjb25zdCB2ZXJ0ZXhGb3JtYXQgPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC51bnBhY2soCiAgICAgICAgICBhcnJheSwKICAgICAgICAgIHN0YXJ0aW5nSW5kZXgsCiAgICAgICAgICBzY3JhdGNoVmVydGV4Rm9ybWF0MwogICAgICAgICk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgY29uc3Qgc3RSb3RhdGlvbiA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3QgdGV4dHVyZUNvb3JkaW5hdGVzID0gYXJyYXlbc3RhcnRpbmdJbmRleF0gPT09IC0xID8gdm9pZCAwIDogUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LnVucGFja1BvbHlnb25IaWVyYXJjaHkoCiAgICAgICAgICBhcnJheSwKICAgICAgICAgIHN0YXJ0aW5nSW5kZXgsCiAgICAgICAgICBDYXJ0ZXNpYW4yX2RlZmF1bHQKICAgICAgICApOwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQodGV4dHVyZUNvb3JkaW5hdGVzKSkgewogICAgICAgICAgc3RhcnRpbmdJbmRleCA9IHRleHR1cmVDb29yZGluYXRlcy5zdGFydGluZ0luZGV4OwogICAgICAgICAgZGVsZXRlIHRleHR1cmVDb29yZGluYXRlcy5zdGFydGluZ0luZGV4OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBzdGFydGluZ0luZGV4Kys7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHBhY2tlZExlbmd0aCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IENvcGxhbmFyUG9seWdvbkdlb21ldHJ5KHNjcmF0Y2hPcHRpb25zNyk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5fcG9seWdvbkhpZXJhcmNoeSA9IHBvbHlnb25IaWVyYXJjaHk7CiAgICAgICAgcmVzdWx0Ll9lbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZShlbGxpcHNvaWQsIHJlc3VsdC5fZWxsaXBzb2lkKTsKICAgICAgICByZXN1bHQuX3ZlcnRleEZvcm1hdCA9IFZlcnRleEZvcm1hdF9kZWZhdWx0LmNsb25lKHZlcnRleEZvcm1hdCwgcmVzdWx0Ll92ZXJ0ZXhGb3JtYXQpOwogICAgICAgIHJlc3VsdC5fc3RSb3RhdGlvbiA9IHN0Um90YXRpb247CiAgICAgICAgcmVzdWx0Ll90ZXh0dXJlQ29vcmRpbmF0ZXMgPSB0ZXh0dXJlQ29vcmRpbmF0ZXM7CiAgICAgICAgcmVzdWx0LnBhY2tlZExlbmd0aCA9IHBhY2tlZExlbmd0aDsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDb3BsYW5hclBvbHlnb25HZW9tZXRyeS5jcmVhdGVHZW9tZXRyeSA9IGZ1bmN0aW9uKHBvbHlnb25HZW9tZXRyeSkgewogICAgICAgIGNvbnN0IHZlcnRleEZvcm1hdCA9IHBvbHlnb25HZW9tZXRyeS5fdmVydGV4Rm9ybWF0OwogICAgICAgIGNvbnN0IHBvbHlnb25IaWVyYXJjaHkgPSBwb2x5Z29uR2VvbWV0cnkuX3BvbHlnb25IaWVyYXJjaHk7CiAgICAgICAgY29uc3Qgc3RSb3RhdGlvbiA9IHBvbHlnb25HZW9tZXRyeS5fc3RSb3RhdGlvbjsKICAgICAgICBjb25zdCB0ZXh0dXJlQ29vcmRpbmF0ZXMgPSBwb2x5Z29uR2VvbWV0cnkuX3RleHR1cmVDb29yZGluYXRlczsKICAgICAgICBjb25zdCBoYXNUZXh0dXJlQ29vcmRpbmF0ZXMgPSBkZWZpbmVkX2RlZmF1bHQodGV4dHVyZUNvb3JkaW5hdGVzKTsKICAgICAgICBsZXQgb3V0ZXJQb3NpdGlvbnMgPSBwb2x5Z29uSGllcmFyY2h5LnBvc2l0aW9uczsKICAgICAgICBvdXRlclBvc2l0aW9ucyA9IGFycmF5UmVtb3ZlRHVwbGljYXRlc19kZWZhdWx0KAogICAgICAgICAgb3V0ZXJQb3NpdGlvbnMsCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzRXBzaWxvbiwKICAgICAgICAgIHRydWUKICAgICAgICApOwogICAgICAgIGlmIChvdXRlclBvc2l0aW9ucy5sZW5ndGggPCAzKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGxldCBub3JtYWwyID0gc2NyYXRjaE5vcm1hbDQ7CiAgICAgICAgbGV0IHRhbmdlbnQgPSBzY3JhdGNoVGFuZ2VudDI7CiAgICAgICAgbGV0IGJpdGFuZ2VudCA9IHNjcmF0Y2hCaXRhbmdlbnQyOwogICAgICAgIGxldCBheGlzMSA9IGF4aXMxU2NyYXRjaDsKICAgICAgICBjb25zdCBheGlzMiA9IGF4aXMyU2NyYXRjaDsKICAgICAgICBjb25zdCB2YWxpZEdlb21ldHJ5ID0gQ29wbGFuYXJQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuY29tcHV0ZVByb2plY3RUbzJEQXJndW1lbnRzKAogICAgICAgICAgb3V0ZXJQb3NpdGlvbnMsCiAgICAgICAgICBjZW50ZXJTY3JhdGNoLAogICAgICAgICAgYXhpczEsCiAgICAgICAgICBheGlzMgogICAgICAgICk7CiAgICAgICAgaWYgKCF2YWxpZEdlb21ldHJ5KSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICBub3JtYWwyID0gQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKGF4aXMxLCBheGlzMiwgbm9ybWFsMik7CiAgICAgICAgbm9ybWFsMiA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUobm9ybWFsMiwgbm9ybWFsMik7CiAgICAgICAgaWYgKCFDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzRXBzaWxvbigKICAgICAgICAgIGNlbnRlclNjcmF0Y2gsCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTywKICAgICAgICAgIE1hdGhfZGVmYXVsdC5FUFNJTE9ONgogICAgICAgICkpIHsKICAgICAgICAgIGNvbnN0IHN1cmZhY2VOb3JtYWwgPSBwb2x5Z29uR2VvbWV0cnkuX2VsbGlwc29pZC5nZW9kZXRpY1N1cmZhY2VOb3JtYWwoCiAgICAgICAgICAgIGNlbnRlclNjcmF0Y2gsCiAgICAgICAgICAgIHN1cmZhY2VOb3JtYWxTY3JhdGNoCiAgICAgICAgICApOwogICAgICAgICAgaWYgKENhcnRlc2lhbjNfZGVmYXVsdC5kb3Qobm9ybWFsMiwgc3VyZmFjZU5vcm1hbCkgPCAwKSB7CiAgICAgICAgICAgIG5vcm1hbDIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubmVnYXRlKG5vcm1hbDIsIG5vcm1hbDIpOwogICAgICAgICAgICBheGlzMSA9IENhcnRlc2lhbjNfZGVmYXVsdC5uZWdhdGUoYXhpczEsIGF4aXMxKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY29uc3QgcHJvamVjdFBvaW50cyA9IENvcGxhbmFyUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmNyZWF0ZVByb2plY3RQb2ludHNUbzJERnVuY3Rpb24oCiAgICAgICAgICBjZW50ZXJTY3JhdGNoLAogICAgICAgICAgYXhpczEsCiAgICAgICAgICBheGlzMgogICAgICAgICk7CiAgICAgICAgY29uc3QgcHJvamVjdFBvaW50ID0gQ29wbGFuYXJQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuY3JlYXRlUHJvamVjdFBvaW50VG8yREZ1bmN0aW9uKAogICAgICAgICAgY2VudGVyU2NyYXRjaCwKICAgICAgICAgIGF4aXMxLAogICAgICAgICAgYXhpczIKICAgICAgICApOwogICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQudGFuZ2VudCkgewogICAgICAgICAgdGFuZ2VudCA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShheGlzMSwgdGFuZ2VudCk7CiAgICAgICAgfQogICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50KSB7CiAgICAgICAgICBiaXRhbmdlbnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoYXhpczIsIGJpdGFuZ2VudCk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHJlc3VsdHMgPSBQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQucG9seWdvbnNGcm9tSGllcmFyY2h5KAogICAgICAgICAgcG9seWdvbkhpZXJhcmNoeSwKICAgICAgICAgIGhhc1RleHR1cmVDb29yZGluYXRlcywKICAgICAgICAgIHByb2plY3RQb2ludHMsCiAgICAgICAgICBmYWxzZQogICAgICAgICk7CiAgICAgICAgY29uc3QgaGllcmFyY2h5ID0gcmVzdWx0cy5oaWVyYXJjaHk7CiAgICAgICAgY29uc3QgcG9seWdvbnMgPSByZXN1bHRzLnBvbHlnb25zOwogICAgICAgIGNvbnN0IGR1bW15RnVuY3Rpb24gPSBmdW5jdGlvbihpZGVudGl0eSkgewogICAgICAgICAgcmV0dXJuIGlkZW50aXR5OwogICAgICAgIH07CiAgICAgICAgY29uc3QgdGV4dHVyZUNvb3JkaW5hdGVQb2x5Z29ucyA9IGhhc1RleHR1cmVDb29yZGluYXRlcyA/IFBvbHlnb25HZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5wb2x5Z29uc0Zyb21IaWVyYXJjaHkoCiAgICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZXMsCiAgICAgICAgICB0cnVlLAogICAgICAgICAgZHVtbXlGdW5jdGlvbiwKICAgICAgICAgIGZhbHNlCiAgICAgICAgKS5wb2x5Z29ucyA6IHZvaWQgMDsKICAgICAgICBpZiAoaGllcmFyY2h5Lmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBvdXRlclBvc2l0aW9ucyA9IGhpZXJhcmNoeVswXS5vdXRlclJpbmc7CiAgICAgICAgY29uc3QgYm91bmRpbmdTcGhlcmUgPSBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0LmZyb21Qb2ludHMob3V0ZXJQb3NpdGlvbnMpOwogICAgICAgIGNvbnN0IGJvdW5kaW5nUmVjdGFuZ2xlID0gUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmNvbXB1dGVCb3VuZGluZ1JlY3RhbmdsZSgKICAgICAgICAgIG5vcm1hbDIsCiAgICAgICAgICBwcm9qZWN0UG9pbnQsCiAgICAgICAgICBvdXRlclBvc2l0aW9ucywKICAgICAgICAgIHN0Um90YXRpb24sCiAgICAgICAgICBzY3JhdGNoQlIKICAgICAgICApOwogICAgICAgIGNvbnN0IGdlb21ldHJpZXMgPSBbXTsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvbHlnb25zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICBjb25zdCBnZW9tZXRyeUluc3RhbmNlID0gbmV3IEdlb21ldHJ5SW5zdGFuY2VfZGVmYXVsdCh7CiAgICAgICAgICAgIGdlb21ldHJ5OiBjcmVhdGVHZW9tZXRyeUZyb21Qb2x5Z29uKAogICAgICAgICAgICAgIHBvbHlnb25zW2ldLAogICAgICAgICAgICAgIHZlcnRleEZvcm1hdCwKICAgICAgICAgICAgICBib3VuZGluZ1JlY3RhbmdsZSwKICAgICAgICAgICAgICBzdFJvdGF0aW9uLAogICAgICAgICAgICAgIGhhc1RleHR1cmVDb29yZGluYXRlcyA/IHRleHR1cmVDb29yZGluYXRlUG9seWdvbnNbaV0gOiB2b2lkIDAsCiAgICAgICAgICAgICAgcHJvamVjdFBvaW50LAogICAgICAgICAgICAgIG5vcm1hbDIsCiAgICAgICAgICAgICAgdGFuZ2VudCwKICAgICAgICAgICAgICBiaXRhbmdlbnQKICAgICAgICAgICAgKQogICAgICAgICAgfSk7CiAgICAgICAgICBnZW9tZXRyaWVzLnB1c2goZ2VvbWV0cnlJbnN0YW5jZSk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGdlb21ldHJ5ID0gR2VvbWV0cnlQaXBlbGluZV9kZWZhdWx0LmNvbWJpbmVJbnN0YW5jZXMoZ2VvbWV0cmllcylbMF07CiAgICAgICAgZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXMgPSBuZXcgRmxvYXQ2NEFycmF5KAogICAgICAgICAgZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXMKICAgICAgICApOwogICAgICAgIGdlb21ldHJ5LmluZGljZXMgPSBJbmRleERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheSgKICAgICAgICAgIGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzLmxlbmd0aCAvIDMsCiAgICAgICAgICBnZW9tZXRyeS5pbmRpY2VzCiAgICAgICAgKTsKICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlczsKICAgICAgICBpZiAoIXZlcnRleEZvcm1hdC5wb3NpdGlvbikgewogICAgICAgICAgZGVsZXRlIGF0dHJpYnV0ZXMucG9zaXRpb247CiAgICAgICAgfQogICAgICAgIHJldHVybiBuZXcgR2VvbWV0cnlfZGVmYXVsdCh7CiAgICAgICAgICBhdHRyaWJ1dGVzLAogICAgICAgICAgaW5kaWNlczogZ2VvbWV0cnkuaW5kaWNlcywKICAgICAgICAgIHByaW1pdGl2ZVR5cGU6IGdlb21ldHJ5LnByaW1pdGl2ZVR5cGUsCiAgICAgICAgICBib3VuZGluZ1NwaGVyZQogICAgICAgIH0pOwogICAgICB9OwogICAgICBDb3BsYW5hclBvbHlnb25HZW9tZXRyeV9kZWZhdWx0ID0gQ29wbGFuYXJQb2x5Z29uR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVDb3BsYW5hclBvbHlnb25HZW9tZXRyeS5qcwogIHZhciBjcmVhdGVDb3BsYW5hclBvbHlnb25HZW9tZXRyeV9leHBvcnRzID0ge307CiAgX19leHBvcnQoY3JlYXRlQ29wbGFuYXJQb2x5Z29uR2VvbWV0cnlfZXhwb3J0cywgewogICAgZGVmYXVsdDogKCkgPT4gY3JlYXRlQ29wbGFuYXJQb2x5Z29uR2VvbWV0cnlfZGVmYXVsdAogIH0pOwogIGZ1bmN0aW9uIGNyZWF0ZUNvcGxhbmFyUG9seWdvbkdlb21ldHJ5KHBvbHlnb25HZW9tZXRyeSwgb2Zmc2V0KSB7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG9mZnNldCkpIHsKICAgICAgcG9seWdvbkdlb21ldHJ5ID0gQ29wbGFuYXJQb2x5Z29uR2VvbWV0cnlfZGVmYXVsdC51bnBhY2socG9seWdvbkdlb21ldHJ5LCBvZmZzZXQpOwogICAgfQogICAgcmV0dXJuIENvcGxhbmFyUG9seWdvbkdlb21ldHJ5X2RlZmF1bHQuY3JlYXRlR2VvbWV0cnkocG9seWdvbkdlb21ldHJ5KTsKICB9CiAgdmFyIGNyZWF0ZUNvcGxhbmFyUG9seWdvbkdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfY3JlYXRlQ29wbGFuYXJQb2x5Z29uR2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZUNvcGxhbmFyUG9seWdvbkdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9Db3BsYW5hclBvbHlnb25HZW9tZXRyeSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgY3JlYXRlQ29wbGFuYXJQb2x5Z29uR2VvbWV0cnlfZGVmYXVsdCA9IGNyZWF0ZUNvcGxhbmFyUG9seWdvbkdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvQ29wbGFuYXJQb2x5Z29uT3V0bGluZUdlb21ldHJ5LmpzCiAgZnVuY3Rpb24gY3JlYXRlR2VvbWV0cnlGcm9tUG9zaXRpb25zKHBvc2l0aW9ucykgewogICAgY29uc3QgbGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aDsKICAgIGNvbnN0IGZsYXRQb3NpdGlvbnMgPSBuZXcgRmxvYXQ2NEFycmF5KGxlbmd0aCAqIDMpOwogICAgY29uc3QgaW5kaWNlcyA9IEluZGV4RGF0YXR5cGVfZGVmYXVsdC5jcmVhdGVUeXBlZEFycmF5KGxlbmd0aCwgbGVuZ3RoICogMik7CiAgICBsZXQgcG9zaXRpb25JbmRleCA9IDA7CiAgICBsZXQgaW5kZXggPSAwOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICBjb25zdCBwb3NpdGlvbiA9IHBvc2l0aW9uc1tpXTsKICAgICAgZmxhdFBvc2l0aW9uc1twb3NpdGlvbkluZGV4KytdID0gcG9zaXRpb24ueDsKICAgICAgZmxhdFBvc2l0aW9uc1twb3NpdGlvbkluZGV4KytdID0gcG9zaXRpb24ueTsKICAgICAgZmxhdFBvc2l0aW9uc1twb3NpdGlvbkluZGV4KytdID0gcG9zaXRpb24uejsKICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGk7CiAgICAgIGluZGljZXNbaW5kZXgrK10gPSAoaSArIDEpICUgbGVuZ3RoOwogICAgfQogICAgY29uc3QgYXR0cmlidXRlcyA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZXNfZGVmYXVsdCh7CiAgICAgIHBvc2l0aW9uOiBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRE9VQkxFLAogICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgdmFsdWVzOiBmbGF0UG9zaXRpb25zCiAgICAgIH0pCiAgICB9KTsKICAgIHJldHVybiBuZXcgR2VvbWV0cnlfZGVmYXVsdCh7CiAgICAgIGF0dHJpYnV0ZXMsCiAgICAgIGluZGljZXMsCiAgICAgIHByaW1pdGl2ZVR5cGU6IFByaW1pdGl2ZVR5cGVfZGVmYXVsdC5MSU5FUwogICAgfSk7CiAgfQogIGZ1bmN0aW9uIENvcGxhbmFyUG9seWdvbk91dGxpbmVHZW9tZXRyeShvcHRpb25zKSB7CiAgICBvcHRpb25zID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucywgZGVmYXVsdFZhbHVlX2RlZmF1bHQuRU1QVFlfT0JKRUNUKTsKICAgIGNvbnN0IHBvbHlnb25IaWVyYXJjaHkgPSBvcHRpb25zLnBvbHlnb25IaWVyYXJjaHk7CiAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoIm9wdGlvbnMucG9seWdvbkhpZXJhcmNoeSIsIHBvbHlnb25IaWVyYXJjaHkpOwogICAgdGhpcy5fcG9seWdvbkhpZXJhcmNoeSA9IHBvbHlnb25IaWVyYXJjaHk7CiAgICB0aGlzLl93b3JrZXJOYW1lID0gImNyZWF0ZUNvcGxhbmFyUG9seWdvbk91dGxpbmVHZW9tZXRyeSI7CiAgICB0aGlzLnBhY2tlZExlbmd0aCA9IFBvbHlnb25HZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5jb21wdXRlSGllcmFyY2h5UGFja2VkTGVuZ3RoKAogICAgICBwb2x5Z29uSGllcmFyY2h5LAogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQKICAgICkgKyAxOwogIH0KICB2YXIgc2NyYXRjaE9wdGlvbnM4LCBDb3BsYW5hclBvbHlnb25PdXRsaW5lR2VvbWV0cnlfZGVmYXVsdDsKICB2YXIgaW5pdF9Db3BsYW5hclBvbHlnb25PdXRsaW5lR2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0NvcGxhbmFyUG9seWdvbk91dGxpbmVHZW9tZXRyeS5qcyIoKSB7CiAgICAgIGluaXRfYXJyYXlSZW1vdmVEdXBsaWNhdGVzKCk7CiAgICAgIGluaXRfQm91bmRpbmdTcGhlcmUoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgaW5pdF9Db21wb25lbnREYXRhdHlwZSgpOwogICAgICBpbml0X0NvcGxhbmFyUG9seWdvbkdlb21ldHJ5TGlicmFyeSgpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9HZW9tZXRyeSgpOwogICAgICBpbml0X0dlb21ldHJ5QXR0cmlidXRlKCk7CiAgICAgIGluaXRfR2VvbWV0cnlBdHRyaWJ1dGVzKCk7CiAgICAgIGluaXRfR2VvbWV0cnlJbnN0YW5jZSgpOwogICAgICBpbml0X0dlb21ldHJ5UGlwZWxpbmUoKTsKICAgICAgaW5pdF9JbmRleERhdGF0eXBlKCk7CiAgICAgIGluaXRfUG9seWdvbkdlb21ldHJ5TGlicmFyeSgpOwogICAgICBpbml0X1ByaW1pdGl2ZVR5cGUoKTsKICAgICAgQ29wbGFuYXJQb2x5Z29uT3V0bGluZUdlb21ldHJ5LmZyb21Qb3NpdGlvbnMgPSBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgICAgb3B0aW9ucyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMsIGRlZmF1bHRWYWx1ZV9kZWZhdWx0LkVNUFRZX09CSkVDVCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJvcHRpb25zLnBvc2l0aW9ucyIsIG9wdGlvbnMucG9zaXRpb25zKTsKICAgICAgICBjb25zdCBuZXdPcHRpb25zID0gewogICAgICAgICAgcG9seWdvbkhpZXJhcmNoeTogewogICAgICAgICAgICBwb3NpdGlvbnM6IG9wdGlvbnMucG9zaXRpb25zCiAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICByZXR1cm4gbmV3IENvcGxhbmFyUG9seWdvbk91dGxpbmVHZW9tZXRyeShuZXdPcHRpb25zKTsKICAgICAgfTsKICAgICAgQ29wbGFuYXJQb2x5Z29uT3V0bGluZUdlb21ldHJ5LnBhY2sgPSBmdW5jdGlvbih2YWx1ZSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInZhbHVlIiwgdmFsdWUpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQucGFja1BvbHlnb25IaWVyYXJjaHkoCiAgICAgICAgICB2YWx1ZS5fcG9seWdvbkhpZXJhcmNoeSwKICAgICAgICAgIGFycmF5LAogICAgICAgICAgc3RhcnRpbmdJbmRleCwKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdAogICAgICAgICk7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleF0gPSB2YWx1ZS5wYWNrZWRMZW5ndGg7CiAgICAgICAgcmV0dXJuIGFycmF5OwogICAgICB9OwogICAgICBzY3JhdGNoT3B0aW9uczggPSB7CiAgICAgICAgcG9seWdvbkhpZXJhcmNoeToge30KICAgICAgfTsKICAgICAgQ29wbGFuYXJQb2x5Z29uT3V0bGluZUdlb21ldHJ5LnVucGFjayA9IGZ1bmN0aW9uKGFycmF5LCBzdGFydGluZ0luZGV4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBjb25zdCBwb2x5Z29uSGllcmFyY2h5ID0gUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LnVucGFja1BvbHlnb25IaWVyYXJjaHkoCiAgICAgICAgICBhcnJheSwKICAgICAgICAgIHN0YXJ0aW5nSW5kZXgsCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQKICAgICAgICApOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBwb2x5Z29uSGllcmFyY2h5LnN0YXJ0aW5nSW5kZXg7CiAgICAgICAgZGVsZXRlIHBvbHlnb25IaWVyYXJjaHkuc3RhcnRpbmdJbmRleDsKICAgICAgICBjb25zdCBwYWNrZWRMZW5ndGggPSBhcnJheVtzdGFydGluZ0luZGV4XTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQ29wbGFuYXJQb2x5Z29uT3V0bGluZUdlb21ldHJ5KHNjcmF0Y2hPcHRpb25zOCk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5fcG9seWdvbkhpZXJhcmNoeSA9IHBvbHlnb25IaWVyYXJjaHk7CiAgICAgICAgcmVzdWx0LnBhY2tlZExlbmd0aCA9IHBhY2tlZExlbmd0aDsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDb3BsYW5hclBvbHlnb25PdXRsaW5lR2VvbWV0cnkuY3JlYXRlR2VvbWV0cnkgPSBmdW5jdGlvbihwb2x5Z29uR2VvbWV0cnkpIHsKICAgICAgICBjb25zdCBwb2x5Z29uSGllcmFyY2h5ID0gcG9seWdvbkdlb21ldHJ5Ll9wb2x5Z29uSGllcmFyY2h5OwogICAgICAgIGxldCBvdXRlclBvc2l0aW9ucyA9IHBvbHlnb25IaWVyYXJjaHkucG9zaXRpb25zOwogICAgICAgIG91dGVyUG9zaXRpb25zID0gYXJyYXlSZW1vdmVEdXBsaWNhdGVzX2RlZmF1bHQoCiAgICAgICAgICBvdXRlclBvc2l0aW9ucywKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5lcXVhbHNFcHNpbG9uLAogICAgICAgICAgdHJ1ZQogICAgICAgICk7CiAgICAgICAgaWYgKG91dGVyUG9zaXRpb25zLmxlbmd0aCA8IDMpIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgY29uc3QgaXNWYWxpZCA9IENvcGxhbmFyUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LnZhbGlkT3V0bGluZShvdXRlclBvc2l0aW9ucyk7CiAgICAgICAgaWYgKCFpc1ZhbGlkKSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICBjb25zdCBwb2x5Z29ucyA9IFBvbHlnb25HZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5wb2x5Z29uT3V0bGluZXNGcm9tSGllcmFyY2h5KAogICAgICAgICAgcG9seWdvbkhpZXJhcmNoeSwKICAgICAgICAgIGZhbHNlCiAgICAgICAgKTsKICAgICAgICBpZiAocG9seWdvbnMubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICBjb25zdCBnZW9tZXRyaWVzID0gW107CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2x5Z29ucy5sZW5ndGg7IGkrKykgewogICAgICAgICAgY29uc3QgZ2VvbWV0cnlJbnN0YW5jZSA9IG5ldyBHZW9tZXRyeUluc3RhbmNlX2RlZmF1bHQoewogICAgICAgICAgICBnZW9tZXRyeTogY3JlYXRlR2VvbWV0cnlGcm9tUG9zaXRpb25zKHBvbHlnb25zW2ldKQogICAgICAgICAgfSk7CiAgICAgICAgICBnZW9tZXRyaWVzLnB1c2goZ2VvbWV0cnlJbnN0YW5jZSk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGdlb21ldHJ5ID0gR2VvbWV0cnlQaXBlbGluZV9kZWZhdWx0LmNvbWJpbmVJbnN0YW5jZXMoZ2VvbWV0cmllcylbMF07CiAgICAgICAgY29uc3QgYm91bmRpbmdTcGhlcmUgPSBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0LmZyb21Qb2ludHMocG9seWdvbkhpZXJhcmNoeS5wb3NpdGlvbnMpOwogICAgICAgIHJldHVybiBuZXcgR2VvbWV0cnlfZGVmYXVsdCh7CiAgICAgICAgICBhdHRyaWJ1dGVzOiBnZW9tZXRyeS5hdHRyaWJ1dGVzLAogICAgICAgICAgaW5kaWNlczogZ2VvbWV0cnkuaW5kaWNlcywKICAgICAgICAgIHByaW1pdGl2ZVR5cGU6IGdlb21ldHJ5LnByaW1pdGl2ZVR5cGUsCiAgICAgICAgICBib3VuZGluZ1NwaGVyZQogICAgICAgIH0pOwogICAgICB9OwogICAgICBDb3BsYW5hclBvbHlnb25PdXRsaW5lR2VvbWV0cnlfZGVmYXVsdCA9IENvcGxhbmFyUG9seWdvbk91dGxpbmVHZW9tZXRyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZUNvcGxhbmFyUG9seWdvbk91dGxpbmVHZW9tZXRyeS5qcwogIHZhciBjcmVhdGVDb3BsYW5hclBvbHlnb25PdXRsaW5lR2VvbWV0cnlfZXhwb3J0cyA9IHt9OwogIF9fZXhwb3J0KGNyZWF0ZUNvcGxhbmFyUG9seWdvbk91dGxpbmVHZW9tZXRyeV9leHBvcnRzLCB7CiAgICBkZWZhdWx0OiAoKSA9PiBjcmVhdGVDb3BsYW5hclBvbHlnb25PdXRsaW5lR2VvbWV0cnlfZGVmYXVsdAogIH0pOwogIGZ1bmN0aW9uIGNyZWF0ZUNvcGxhbmFyUG9seWdvbk91dGxpbmVHZW9tZXRyeShwb2x5Z29uR2VvbWV0cnksIG9mZnNldCkgewogICAgaWYgKGRlZmluZWRfZGVmYXVsdChvZmZzZXQpKSB7CiAgICAgIHBvbHlnb25HZW9tZXRyeSA9IENvcGxhbmFyUG9seWdvbk91dGxpbmVHZW9tZXRyeV9kZWZhdWx0LnVucGFjaygKICAgICAgICBwb2x5Z29uR2VvbWV0cnksCiAgICAgICAgb2Zmc2V0CiAgICAgICk7CiAgICB9CiAgICBwb2x5Z29uR2VvbWV0cnkuX2VsbGlwc29pZCA9IEVsbGlwc29pZF9kZWZhdWx0LmNsb25lKHBvbHlnb25HZW9tZXRyeS5fZWxsaXBzb2lkKTsKICAgIHJldHVybiBDb3BsYW5hclBvbHlnb25PdXRsaW5lR2VvbWV0cnlfZGVmYXVsdC5jcmVhdGVHZW9tZXRyeShwb2x5Z29uR2VvbWV0cnkpOwogIH0KICB2YXIgY3JlYXRlQ29wbGFuYXJQb2x5Z29uT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfY3JlYXRlQ29wbGFuYXJQb2x5Z29uT3V0bGluZUdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVDb3BsYW5hclBvbHlnb25PdXRsaW5lR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X0NvcGxhbmFyUG9seWdvbk91dGxpbmVHZW9tZXRyeSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgY3JlYXRlQ29wbGFuYXJQb2x5Z29uT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQgPSBjcmVhdGVDb3BsYW5hclBvbHlnb25PdXRsaW5lR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9Db3JuZXJUeXBlLmpzCiAgdmFyIENvcm5lclR5cGUsIENvcm5lclR5cGVfZGVmYXVsdDsKICB2YXIgaW5pdF9Db3JuZXJUeXBlID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9Db3JuZXJUeXBlLmpzIigpIHsKICAgICAgQ29ybmVyVHlwZSA9IHsKICAgICAgICAvKioKICAgICAgICAgKiA8aW1nIHNyYz0iSW1hZ2VzL0Nvcm5lclR5cGVSb3VuZGVkLnBuZyIgc3R5bGU9InZlcnRpY2FsLWFsaWduOiBtaWRkbGU7IiB3aWR0aD0iMTg2IiBoZWlnaHQ9IjE4OSIgLz4KICAgICAgICAgKgogICAgICAgICAqIENvcm5lciBoYXMgYSBzbW9vdGggZWRnZS4KICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIFJPVU5ERUQ6IDAsCiAgICAgICAgLyoqCiAgICAgICAgICogPGltZyBzcmM9IkltYWdlcy9Db3JuZXJUeXBlTWl0ZXJlZC5wbmciIHN0eWxlPSJ2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOyIgd2lkdGg9IjE4NiIgaGVpZ2h0PSIxODkiIC8+CiAgICAgICAgICoKICAgICAgICAgKiBDb3JuZXIgcG9pbnQgaXMgdGhlIGludGVyc2VjdGlvbiBvZiBhZGphY2VudCBlZGdlcy4KICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIE1JVEVSRUQ6IDEsCiAgICAgICAgLyoqCiAgICAgICAgICogPGltZyBzcmM9IkltYWdlcy9Db3JuZXJUeXBlQmV2ZWxlZC5wbmciIHN0eWxlPSJ2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOyIgd2lkdGg9IjE4NiIgaGVpZ2h0PSIxODkiIC8+CiAgICAgICAgICoKICAgICAgICAgKiBDb3JuZXIgaXMgY2xpcHBlZC4KICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIEJFVkVMRUQ6IDIKICAgICAgfTsKICAgICAgQ29ybmVyVHlwZV9kZWZhdWx0ID0gT2JqZWN0LmZyZWV6ZShDb3JuZXJUeXBlKTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0VsbGlwc29pZEdlb2Rlc2ljLmpzCiAgZnVuY3Rpb24gc2V0Q29uc3RhbnRzKGVsbGlwc29pZEdlb2Rlc2ljMikgewogICAgY29uc3QgdVNxdWFyZWQgPSBlbGxpcHNvaWRHZW9kZXNpYzIuX3VTcXVhcmVkOwogICAgY29uc3QgYTMgPSBlbGxpcHNvaWRHZW9kZXNpYzIuX2VsbGlwc29pZC5tYXhpbXVtUmFkaXVzOwogICAgY29uc3QgYiA9IGVsbGlwc29pZEdlb2Rlc2ljMi5fZWxsaXBzb2lkLm1pbmltdW1SYWRpdXM7CiAgICBjb25zdCBmID0gKGEzIC0gYikgLyBhMzsKICAgIGNvbnN0IGNvc2luZUhlYWRpbmcgPSBNYXRoLmNvcyhlbGxpcHNvaWRHZW9kZXNpYzIuX3N0YXJ0SGVhZGluZyk7CiAgICBjb25zdCBzaW5lSGVhZGluZyA9IE1hdGguc2luKGVsbGlwc29pZEdlb2Rlc2ljMi5fc3RhcnRIZWFkaW5nKTsKICAgIGNvbnN0IHRhblUgPSAoMSAtIGYpICogTWF0aC50YW4oZWxsaXBzb2lkR2VvZGVzaWMyLl9zdGFydC5sYXRpdHVkZSk7CiAgICBjb25zdCBjb3NpbmVVID0gMSAvIE1hdGguc3FydCgxICsgdGFuVSAqIHRhblUpOwogICAgY29uc3Qgc2luZVUgPSBjb3NpbmVVICogdGFuVTsKICAgIGNvbnN0IHNpZ21hID0gTWF0aC5hdGFuMih0YW5VLCBjb3NpbmVIZWFkaW5nKTsKICAgIGNvbnN0IHNpbmVBbHBoYSA9IGNvc2luZVUgKiBzaW5lSGVhZGluZzsKICAgIGNvbnN0IHNpbmVTcXVhcmVkQWxwaGEgPSBzaW5lQWxwaGEgKiBzaW5lQWxwaGE7CiAgICBjb25zdCBjb3NpbmVTcXVhcmVkQWxwaGEgPSAxIC0gc2luZVNxdWFyZWRBbHBoYTsKICAgIGNvbnN0IGNvc2luZUFscGhhID0gTWF0aC5zcXJ0KGNvc2luZVNxdWFyZWRBbHBoYSk7CiAgICBjb25zdCB1Mk92ZXI0ID0gdVNxdWFyZWQgLyA0OwogICAgY29uc3QgdTRPdmVyMTYgPSB1Mk92ZXI0ICogdTJPdmVyNDsKICAgIGNvbnN0IHU2T3ZlcjY0ID0gdTRPdmVyMTYgKiB1Mk92ZXI0OwogICAgY29uc3QgdThPdmVyMjU2ID0gdTRPdmVyMTYgKiB1NE92ZXIxNjsKICAgIGNvbnN0IGEwID0gMSArIHUyT3ZlcjQgLSAzICogdTRPdmVyMTYgLyA0ICsgNSAqIHU2T3ZlcjY0IC8gNCAtIDE3NSAqIHU4T3ZlcjI1NiAvIDY0OwogICAgY29uc3QgYTEgPSAxIC0gdTJPdmVyNCArIDE1ICogdTRPdmVyMTYgLyA4IC0gMzUgKiB1Nk92ZXI2NCAvIDg7CiAgICBjb25zdCBhMjIgPSAxIC0gMyAqIHUyT3ZlcjQgKyAzNSAqIHU0T3ZlcjE2IC8gNDsKICAgIGNvbnN0IGEzMiA9IDEgLSA1ICogdTJPdmVyNDsKICAgIGNvbnN0IGRpc3RhbmNlUmF0aW8gPSBhMCAqIHNpZ21hIC0gYTEgKiBNYXRoLnNpbigyICogc2lnbWEpICogdTJPdmVyNCAvIDIgLSBhMjIgKiBNYXRoLnNpbig0ICogc2lnbWEpICogdTRPdmVyMTYgLyAxNiAtIGEzMiAqIE1hdGguc2luKDYgKiBzaWdtYSkgKiB1Nk92ZXI2NCAvIDQ4IC0gTWF0aC5zaW4oOCAqIHNpZ21hKSAqIDUgKiB1OE92ZXIyNTYgLyA1MTI7CiAgICBjb25zdCBjb25zdGFudHMgPSBlbGxpcHNvaWRHZW9kZXNpYzIuX2NvbnN0YW50czsKICAgIGNvbnN0YW50cy5hID0gYTM7CiAgICBjb25zdGFudHMuYiA9IGI7CiAgICBjb25zdGFudHMuZiA9IGY7CiAgICBjb25zdGFudHMuY29zaW5lSGVhZGluZyA9IGNvc2luZUhlYWRpbmc7CiAgICBjb25zdGFudHMuc2luZUhlYWRpbmcgPSBzaW5lSGVhZGluZzsKICAgIGNvbnN0YW50cy50YW5VID0gdGFuVTsKICAgIGNvbnN0YW50cy5jb3NpbmVVID0gY29zaW5lVTsKICAgIGNvbnN0YW50cy5zaW5lVSA9IHNpbmVVOwogICAgY29uc3RhbnRzLnNpZ21hID0gc2lnbWE7CiAgICBjb25zdGFudHMuc2luZUFscGhhID0gc2luZUFscGhhOwogICAgY29uc3RhbnRzLnNpbmVTcXVhcmVkQWxwaGEgPSBzaW5lU3F1YXJlZEFscGhhOwogICAgY29uc3RhbnRzLmNvc2luZVNxdWFyZWRBbHBoYSA9IGNvc2luZVNxdWFyZWRBbHBoYTsKICAgIGNvbnN0YW50cy5jb3NpbmVBbHBoYSA9IGNvc2luZUFscGhhOwogICAgY29uc3RhbnRzLnUyT3ZlcjQgPSB1Mk92ZXI0OwogICAgY29uc3RhbnRzLnU0T3ZlcjE2ID0gdTRPdmVyMTY7CiAgICBjb25zdGFudHMudTZPdmVyNjQgPSB1Nk92ZXI2NDsKICAgIGNvbnN0YW50cy51OE92ZXIyNTYgPSB1OE92ZXIyNTY7CiAgICBjb25zdGFudHMuYTAgPSBhMDsKICAgIGNvbnN0YW50cy5hMSA9IGExOwogICAgY29uc3RhbnRzLmEyID0gYTIyOwogICAgY29uc3RhbnRzLmEzID0gYTMyOwogICAgY29uc3RhbnRzLmRpc3RhbmNlUmF0aW8gPSBkaXN0YW5jZVJhdGlvOwogIH0KICBmdW5jdGlvbiBjb21wdXRlQyhmLCBjb3NpbmVTcXVhcmVkQWxwaGEpIHsKICAgIHJldHVybiBmICogY29zaW5lU3F1YXJlZEFscGhhICogKDQgKyBmICogKDQgLSAzICogY29zaW5lU3F1YXJlZEFscGhhKSkgLyAxNjsKICB9CiAgZnVuY3Rpb24gY29tcHV0ZURlbHRhTGFtYmRhKGYsIHNpbmVBbHBoYSwgY29zaW5lU3F1YXJlZEFscGhhLCBzaWdtYSwgc2luZVNpZ21hLCBjb3NpbmVTaWdtYSwgY29zaW5lVHdpY2VTaWdtYU1pZHBvaW50KSB7CiAgICBjb25zdCBDID0gY29tcHV0ZUMoZiwgY29zaW5lU3F1YXJlZEFscGhhKTsKICAgIHJldHVybiAoMSAtIEMpICogZiAqIHNpbmVBbHBoYSAqIChzaWdtYSArIEMgKiBzaW5lU2lnbWEgKiAoY29zaW5lVHdpY2VTaWdtYU1pZHBvaW50ICsgQyAqIGNvc2luZVNpZ21hICogKDIgKiBjb3NpbmVUd2ljZVNpZ21hTWlkcG9pbnQgKiBjb3NpbmVUd2ljZVNpZ21hTWlkcG9pbnQgLSAxKSkpOwogIH0KICBmdW5jdGlvbiB2aW5jZW50eUludmVyc2VGb3JtdWxhKGVsbGlwc29pZEdlb2Rlc2ljMiwgbWFqb3IsIG1pbm9yLCBmaXJzdExvbmdpdHVkZSwgZmlyc3RMYXRpdHVkZSwgc2Vjb25kTG9uZ2l0dWRlLCBzZWNvbmRMYXRpdHVkZSkgewogICAgY29uc3QgZWZmID0gKG1ham9yIC0gbWlub3IpIC8gbWFqb3I7CiAgICBjb25zdCBsID0gc2Vjb25kTG9uZ2l0dWRlIC0gZmlyc3RMb25naXR1ZGU7CiAgICBjb25zdCB1MTIgPSBNYXRoLmF0YW4oKDEgLSBlZmYpICogTWF0aC50YW4oZmlyc3RMYXRpdHVkZSkpOwogICAgY29uc3QgdTIyID0gTWF0aC5hdGFuKCgxIC0gZWZmKSAqIE1hdGgudGFuKHNlY29uZExhdGl0dWRlKSk7CiAgICBjb25zdCBjb3NpbmVVMSA9IE1hdGguY29zKHUxMik7CiAgICBjb25zdCBzaW5lVTEgPSBNYXRoLnNpbih1MTIpOwogICAgY29uc3QgY29zaW5lVTIgPSBNYXRoLmNvcyh1MjIpOwogICAgY29uc3Qgc2luZVUyID0gTWF0aC5zaW4odTIyKTsKICAgIGNvbnN0IGNjID0gY29zaW5lVTEgKiBjb3NpbmVVMjsKICAgIGNvbnN0IGNzID0gY29zaW5lVTEgKiBzaW5lVTI7CiAgICBjb25zdCBzcyA9IHNpbmVVMSAqIHNpbmVVMjsKICAgIGNvbnN0IHNjID0gc2luZVUxICogY29zaW5lVTI7CiAgICBsZXQgbGFtYmRhID0gbDsKICAgIGxldCBsYW1iZGFEb3QgPSBNYXRoX2RlZmF1bHQuVFdPX1BJOwogICAgbGV0IGNvc2luZUxhbWJkYSA9IE1hdGguY29zKGxhbWJkYSk7CiAgICBsZXQgc2luZUxhbWJkYSA9IE1hdGguc2luKGxhbWJkYSk7CiAgICBsZXQgc2lnbWE7CiAgICBsZXQgY29zaW5lU2lnbWE7CiAgICBsZXQgc2luZVNpZ21hOwogICAgbGV0IGNvc2luZVNxdWFyZWRBbHBoYTsKICAgIGxldCBjb3NpbmVUd2ljZVNpZ21hTWlkcG9pbnQ7CiAgICBkbyB7CiAgICAgIGNvc2luZUxhbWJkYSA9IE1hdGguY29zKGxhbWJkYSk7CiAgICAgIHNpbmVMYW1iZGEgPSBNYXRoLnNpbihsYW1iZGEpOwogICAgICBjb25zdCB0ZW1wID0gY3MgLSBzYyAqIGNvc2luZUxhbWJkYTsKICAgICAgc2luZVNpZ21hID0gTWF0aC5zcXJ0KAogICAgICAgIGNvc2luZVUyICogY29zaW5lVTIgKiBzaW5lTGFtYmRhICogc2luZUxhbWJkYSArIHRlbXAgKiB0ZW1wCiAgICAgICk7CiAgICAgIGNvc2luZVNpZ21hID0gc3MgKyBjYyAqIGNvc2luZUxhbWJkYTsKICAgICAgc2lnbWEgPSBNYXRoLmF0YW4yKHNpbmVTaWdtYSwgY29zaW5lU2lnbWEpOwogICAgICBsZXQgc2luZUFscGhhOwogICAgICBpZiAoc2luZVNpZ21hID09PSAwKSB7CiAgICAgICAgc2luZUFscGhhID0gMDsKICAgICAgICBjb3NpbmVTcXVhcmVkQWxwaGEgPSAxOwogICAgICB9IGVsc2UgewogICAgICAgIHNpbmVBbHBoYSA9IGNjICogc2luZUxhbWJkYSAvIHNpbmVTaWdtYTsKICAgICAgICBjb3NpbmVTcXVhcmVkQWxwaGEgPSAxIC0gc2luZUFscGhhICogc2luZUFscGhhOwogICAgICB9CiAgICAgIGxhbWJkYURvdCA9IGxhbWJkYTsKICAgICAgY29zaW5lVHdpY2VTaWdtYU1pZHBvaW50ID0gY29zaW5lU2lnbWEgLSAyICogc3MgLyBjb3NpbmVTcXVhcmVkQWxwaGE7CiAgICAgIGlmICghaXNGaW5pdGUoY29zaW5lVHdpY2VTaWdtYU1pZHBvaW50KSkgewogICAgICAgIGNvc2luZVR3aWNlU2lnbWFNaWRwb2ludCA9IDA7CiAgICAgIH0KICAgICAgbGFtYmRhID0gbCArIGNvbXB1dGVEZWx0YUxhbWJkYSgKICAgICAgICBlZmYsCiAgICAgICAgc2luZUFscGhhLAogICAgICAgIGNvc2luZVNxdWFyZWRBbHBoYSwKICAgICAgICBzaWdtYSwKICAgICAgICBzaW5lU2lnbWEsCiAgICAgICAgY29zaW5lU2lnbWEsCiAgICAgICAgY29zaW5lVHdpY2VTaWdtYU1pZHBvaW50CiAgICAgICk7CiAgICB9IHdoaWxlIChNYXRoLmFicyhsYW1iZGEgLSBsYW1iZGFEb3QpID4gTWF0aF9kZWZhdWx0LkVQU0lMT04xMik7CiAgICBjb25zdCB1U3F1YXJlZCA9IGNvc2luZVNxdWFyZWRBbHBoYSAqIChtYWpvciAqIG1ham9yIC0gbWlub3IgKiBtaW5vcikgLyAobWlub3IgKiBtaW5vcik7CiAgICBjb25zdCBBID0gMSArIHVTcXVhcmVkICogKDQwOTYgKyB1U3F1YXJlZCAqICh1U3F1YXJlZCAqICgzMjAgLSAxNzUgKiB1U3F1YXJlZCkgLSA3NjgpKSAvIDE2Mzg0OwogICAgY29uc3QgQiA9IHVTcXVhcmVkICogKDI1NiArIHVTcXVhcmVkICogKHVTcXVhcmVkICogKDc0IC0gNDcgKiB1U3F1YXJlZCkgLSAxMjgpKSAvIDEwMjQ7CiAgICBjb25zdCBjb3NpbmVTcXVhcmVkVHdpY2VTaWdtYU1pZHBvaW50ID0gY29zaW5lVHdpY2VTaWdtYU1pZHBvaW50ICogY29zaW5lVHdpY2VTaWdtYU1pZHBvaW50OwogICAgY29uc3QgZGVsdGFTaWdtYSA9IEIgKiBzaW5lU2lnbWEgKiAoY29zaW5lVHdpY2VTaWdtYU1pZHBvaW50ICsgQiAqIChjb3NpbmVTaWdtYSAqICgyICogY29zaW5lU3F1YXJlZFR3aWNlU2lnbWFNaWRwb2ludCAtIDEpIC0gQiAqIGNvc2luZVR3aWNlU2lnbWFNaWRwb2ludCAqICg0ICogc2luZVNpZ21hICogc2luZVNpZ21hIC0gMykgKiAoNCAqIGNvc2luZVNxdWFyZWRUd2ljZVNpZ21hTWlkcG9pbnQgLSAzKSAvIDYpIC8gNCk7CiAgICBjb25zdCBkaXN0YW5jZSA9IG1pbm9yICogQSAqIChzaWdtYSAtIGRlbHRhU2lnbWEpOwogICAgY29uc3Qgc3RhcnRIZWFkaW5nID0gTWF0aC5hdGFuMigKICAgICAgY29zaW5lVTIgKiBzaW5lTGFtYmRhLAogICAgICBjcyAtIHNjICogY29zaW5lTGFtYmRhCiAgICApOwogICAgY29uc3QgZW5kSGVhZGluZyA9IE1hdGguYXRhbjIoY29zaW5lVTEgKiBzaW5lTGFtYmRhLCBjcyAqIGNvc2luZUxhbWJkYSAtIHNjKTsKICAgIGVsbGlwc29pZEdlb2Rlc2ljMi5fZGlzdGFuY2UgPSBkaXN0YW5jZTsKICAgIGVsbGlwc29pZEdlb2Rlc2ljMi5fc3RhcnRIZWFkaW5nID0gc3RhcnRIZWFkaW5nOwogICAgZWxsaXBzb2lkR2VvZGVzaWMyLl9lbmRIZWFkaW5nID0gZW5kSGVhZGluZzsKICAgIGVsbGlwc29pZEdlb2Rlc2ljMi5fdVNxdWFyZWQgPSB1U3F1YXJlZDsKICB9CiAgZnVuY3Rpb24gY29tcHV0ZVByb3BlcnRpZXMyKGVsbGlwc29pZEdlb2Rlc2ljMiwgc3RhcnQsIGVuZCwgZWxsaXBzb2lkKSB7CiAgICBjb25zdCBmaXJzdENhcnRlc2lhbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoCiAgICAgIGVsbGlwc29pZC5jYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbihzdGFydCwgc2NyYXRjaENhcnQyMiksCiAgICAgIHNjcmF0Y2hDYXJ0MTIKICAgICk7CiAgICBjb25zdCBsYXN0Q2FydGVzaWFuID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSgKICAgICAgZWxsaXBzb2lkLmNhcnRvZ3JhcGhpY1RvQ2FydGVzaWFuKGVuZCwgc2NyYXRjaENhcnQyMiksCiAgICAgIHNjcmF0Y2hDYXJ0MjIKICAgICk7CiAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygKICAgICAgInZhbHVlIiwKICAgICAgTWF0aC5hYnMoCiAgICAgICAgTWF0aC5hYnMoQ2FydGVzaWFuM19kZWZhdWx0LmFuZ2xlQmV0d2VlbihmaXJzdENhcnRlc2lhbiwgbGFzdENhcnRlc2lhbikpIC0gTWF0aC5QSQogICAgICApLAogICAgICAwLjAxMjUKICAgICk7CiAgICB2aW5jZW50eUludmVyc2VGb3JtdWxhKAogICAgICBlbGxpcHNvaWRHZW9kZXNpYzIsCiAgICAgIGVsbGlwc29pZC5tYXhpbXVtUmFkaXVzLAogICAgICBlbGxpcHNvaWQubWluaW11bVJhZGl1cywKICAgICAgc3RhcnQubG9uZ2l0dWRlLAogICAgICBzdGFydC5sYXRpdHVkZSwKICAgICAgZW5kLmxvbmdpdHVkZSwKICAgICAgZW5kLmxhdGl0dWRlCiAgICApOwogICAgZWxsaXBzb2lkR2VvZGVzaWMyLl9zdGFydCA9IENhcnRvZ3JhcGhpY19kZWZhdWx0LmNsb25lKAogICAgICBzdGFydCwKICAgICAgZWxsaXBzb2lkR2VvZGVzaWMyLl9zdGFydAogICAgKTsKICAgIGVsbGlwc29pZEdlb2Rlc2ljMi5fZW5kID0gQ2FydG9ncmFwaGljX2RlZmF1bHQuY2xvbmUoZW5kLCBlbGxpcHNvaWRHZW9kZXNpYzIuX2VuZCk7CiAgICBlbGxpcHNvaWRHZW9kZXNpYzIuX3N0YXJ0LmhlaWdodCA9IDA7CiAgICBlbGxpcHNvaWRHZW9kZXNpYzIuX2VuZC5oZWlnaHQgPSAwOwogICAgc2V0Q29uc3RhbnRzKGVsbGlwc29pZEdlb2Rlc2ljMik7CiAgfQogIGZ1bmN0aW9uIEVsbGlwc29pZEdlb2Rlc2ljKHN0YXJ0LCBlbmQsIGVsbGlwc29pZCkgewogICAgY29uc3QgZSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGVsbGlwc29pZCwgRWxsaXBzb2lkX2RlZmF1bHQuZGVmYXVsdCk7CiAgICB0aGlzLl9lbGxpcHNvaWQgPSBlOwogICAgdGhpcy5fc3RhcnQgPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgIHRoaXMuX2VuZCA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgdGhpcy5fY29uc3RhbnRzID0ge307CiAgICB0aGlzLl9zdGFydEhlYWRpbmcgPSB2b2lkIDA7CiAgICB0aGlzLl9lbmRIZWFkaW5nID0gdm9pZCAwOwogICAgdGhpcy5fZGlzdGFuY2UgPSB2b2lkIDA7CiAgICB0aGlzLl91U3F1YXJlZCA9IHZvaWQgMDsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoc3RhcnQpICYmIGRlZmluZWRfZGVmYXVsdChlbmQpKSB7CiAgICAgIGNvbXB1dGVQcm9wZXJ0aWVzMih0aGlzLCBzdGFydCwgZW5kLCBlKTsKICAgIH0KICB9CiAgdmFyIHNjcmF0Y2hDYXJ0MTIsIHNjcmF0Y2hDYXJ0MjIsIEVsbGlwc29pZEdlb2Rlc2ljX2RlZmF1bHQ7CiAgdmFyIGluaXRfRWxsaXBzb2lkR2VvZGVzaWMgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0VsbGlwc29pZEdlb2Rlc2ljLmpzIigpIHsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ2FydG9ncmFwaGljKCk7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBzY3JhdGNoQ2FydDEyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQ2FydDIyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhFbGxpcHNvaWRHZW9kZXNpYy5wcm90b3R5cGUsIHsKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIHRoZSBlbGxpcHNvaWQuCiAgICAgICAgICogQG1lbWJlcm9mIEVsbGlwc29pZEdlb2Rlc2ljLnByb3RvdHlwZQogICAgICAgICAqIEB0eXBlIHtFbGxpcHNvaWR9CiAgICAgICAgICogQHJlYWRvbmx5CiAgICAgICAgICovCiAgICAgICAgZWxsaXBzb2lkOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5fZWxsaXBzb2lkOwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgLyoqCiAgICAgICAgICogR2V0cyB0aGUgc3VyZmFjZSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBzdGFydCBhbmQgZW5kIHBvaW50CiAgICAgICAgICogQG1lbWJlcm9mIEVsbGlwc29pZEdlb2Rlc2ljLnByb3RvdHlwZQogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQHJlYWRvbmx5CiAgICAgICAgICovCiAgICAgICAgc3VyZmFjZURpc3RhbmNlOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImRpc3RhbmNlIiwgdGhpcy5fZGlzdGFuY2UpOwogICAgICAgICAgICByZXR1cm4gdGhpcy5fZGlzdGFuY2U7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIHRoZSBpbml0aWFsIHBsYW5ldG9kZXRpYyBwb2ludCBvbiB0aGUgcGF0aC4KICAgICAgICAgKiBAbWVtYmVyb2YgRWxsaXBzb2lkR2VvZGVzaWMucHJvdG90eXBlCiAgICAgICAgICogQHR5cGUge0NhcnRvZ3JhcGhpY30KICAgICAgICAgKiBAcmVhZG9ubHkKICAgICAgICAgKi8KICAgICAgICBzdGFydDogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXJ0OwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgLyoqCiAgICAgICAgICogR2V0cyB0aGUgZmluYWwgcGxhbmV0b2RldGljIHBvaW50IG9uIHRoZSBwYXRoLgogICAgICAgICAqIEBtZW1iZXJvZiBFbGxpcHNvaWRHZW9kZXNpYy5wcm90b3R5cGUKICAgICAgICAgKiBAdHlwZSB7Q2FydG9ncmFwaGljfQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqLwogICAgICAgIGVuZDogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VuZDsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIEdldHMgdGhlIGhlYWRpbmcgYXQgdGhlIGluaXRpYWwgcG9pbnQuCiAgICAgICAgICogQG1lbWJlcm9mIEVsbGlwc29pZEdlb2Rlc2ljLnByb3RvdHlwZQogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQHJlYWRvbmx5CiAgICAgICAgICovCiAgICAgICAgc3RhcnRIZWFkaW5nOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImRpc3RhbmNlIiwgdGhpcy5fZGlzdGFuY2UpOwogICAgICAgICAgICByZXR1cm4gdGhpcy5fc3RhcnRIZWFkaW5nOwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgLyoqCiAgICAgICAgICogR2V0cyB0aGUgaGVhZGluZyBhdCB0aGUgZmluYWwgcG9pbnQuCiAgICAgICAgICogQG1lbWJlcm9mIEVsbGlwc29pZEdlb2Rlc2ljLnByb3RvdHlwZQogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQHJlYWRvbmx5CiAgICAgICAgICovCiAgICAgICAgZW5kSGVhZGluZzogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJkaXN0YW5jZSIsIHRoaXMuX2Rpc3RhbmNlKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VuZEhlYWRpbmc7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgICAgRWxsaXBzb2lkR2VvZGVzaWMucHJvdG90eXBlLnNldEVuZFBvaW50cyA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoInN0YXJ0Iiwgc3RhcnQpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiZW5kIiwgZW5kKTsKICAgICAgICBjb21wdXRlUHJvcGVydGllczIodGhpcywgc3RhcnQsIGVuZCwgdGhpcy5fZWxsaXBzb2lkKTsKICAgICAgfTsKICAgICAgRWxsaXBzb2lkR2VvZGVzaWMucHJvdG90eXBlLmludGVycG9sYXRlVXNpbmdGcmFjdGlvbiA9IGZ1bmN0aW9uKGZyYWN0aW9uLCByZXN1bHQpIHsKICAgICAgICByZXR1cm4gdGhpcy5pbnRlcnBvbGF0ZVVzaW5nU3VyZmFjZURpc3RhbmNlKAogICAgICAgICAgdGhpcy5fZGlzdGFuY2UgKiBmcmFjdGlvbiwKICAgICAgICAgIHJlc3VsdAogICAgICAgICk7CiAgICAgIH07CiAgICAgIEVsbGlwc29pZEdlb2Rlc2ljLnByb3RvdHlwZS5pbnRlcnBvbGF0ZVVzaW5nU3VyZmFjZURpc3RhbmNlID0gZnVuY3Rpb24oZGlzdGFuY2UsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiZGlzdGFuY2UiLCB0aGlzLl9kaXN0YW5jZSk7CiAgICAgICAgY29uc3QgY29uc3RhbnRzID0gdGhpcy5fY29uc3RhbnRzOwogICAgICAgIGNvbnN0IHMgPSBjb25zdGFudHMuZGlzdGFuY2VSYXRpbyArIGRpc3RhbmNlIC8gY29uc3RhbnRzLmI7CiAgICAgICAgY29uc3QgY29zaW5lMlMgPSBNYXRoLmNvcygyICogcyk7CiAgICAgICAgY29uc3QgY29zaW5lNFMgPSBNYXRoLmNvcyg0ICogcyk7CiAgICAgICAgY29uc3QgY29zaW5lNlMgPSBNYXRoLmNvcyg2ICogcyk7CiAgICAgICAgY29uc3Qgc2luZTJTID0gTWF0aC5zaW4oMiAqIHMpOwogICAgICAgIGNvbnN0IHNpbmU0UyA9IE1hdGguc2luKDQgKiBzKTsKICAgICAgICBjb25zdCBzaW5lNlMgPSBNYXRoLnNpbig2ICogcyk7CiAgICAgICAgY29uc3Qgc2luZThTID0gTWF0aC5zaW4oOCAqIHMpOwogICAgICAgIGNvbnN0IHMyID0gcyAqIHM7CiAgICAgICAgY29uc3QgczMgPSBzICogczI7CiAgICAgICAgY29uc3QgdThPdmVyMjU2ID0gY29uc3RhbnRzLnU4T3ZlcjI1NjsKICAgICAgICBjb25zdCB1Mk92ZXI0ID0gY29uc3RhbnRzLnUyT3ZlcjQ7CiAgICAgICAgY29uc3QgdTZPdmVyNjQgPSBjb25zdGFudHMudTZPdmVyNjQ7CiAgICAgICAgY29uc3QgdTRPdmVyMTYgPSBjb25zdGFudHMudTRPdmVyMTY7CiAgICAgICAgbGV0IHNpZ21hID0gMiAqIHMzICogdThPdmVyMjU2ICogY29zaW5lMlMgLyAzICsgcyAqICgxIC0gdTJPdmVyNCArIDcgKiB1NE92ZXIxNiAvIDQgLSAxNSAqIHU2T3ZlcjY0IC8gNCArIDU3OSAqIHU4T3ZlcjI1NiAvIDY0IC0gKHU0T3ZlcjE2IC0gMTUgKiB1Nk92ZXI2NCAvIDQgKyAxODcgKiB1OE92ZXIyNTYgLyAxNikgKiBjb3NpbmUyUyAtICg1ICogdTZPdmVyNjQgLyA0IC0gMTE1ICogdThPdmVyMjU2IC8gMTYpICogY29zaW5lNFMgLSAyOSAqIHU4T3ZlcjI1NiAqIGNvc2luZTZTIC8gMTYpICsgKHUyT3ZlcjQgLyAyIC0gdTRPdmVyMTYgKyA3MSAqIHU2T3ZlcjY0IC8gMzIgLSA4NSAqIHU4T3ZlcjI1NiAvIDE2KSAqIHNpbmUyUyArICg1ICogdTRPdmVyMTYgLyAxNiAtIDUgKiB1Nk92ZXI2NCAvIDQgKyAzODMgKiB1OE92ZXIyNTYgLyA5NikgKiBzaW5lNFMgLSBzMiAqICgodTZPdmVyNjQgLSAxMSAqIHU4T3ZlcjI1NiAvIDIpICogc2luZTJTICsgNSAqIHU4T3ZlcjI1NiAqIHNpbmU0UyAvIDIpICsgKDI5ICogdTZPdmVyNjQgLyA5NiAtIDI5ICogdThPdmVyMjU2IC8gMTYpICogc2luZTZTICsgNTM5ICogdThPdmVyMjU2ICogc2luZThTIC8gMTUzNjsKICAgICAgICBjb25zdCB0aGV0YSA9IE1hdGguYXNpbihNYXRoLnNpbihzaWdtYSkgKiBjb25zdGFudHMuY29zaW5lQWxwaGEpOwogICAgICAgIGNvbnN0IGxhdGl0dWRlID0gTWF0aC5hdGFuKGNvbnN0YW50cy5hIC8gY29uc3RhbnRzLmIgKiBNYXRoLnRhbih0aGV0YSkpOwogICAgICAgIHNpZ21hID0gc2lnbWEgLSBjb25zdGFudHMuc2lnbWE7CiAgICAgICAgY29uc3QgY29zaW5lVHdpY2VTaWdtYU1pZHBvaW50ID0gTWF0aC5jb3MoMiAqIGNvbnN0YW50cy5zaWdtYSArIHNpZ21hKTsKICAgICAgICBjb25zdCBzaW5lU2lnbWEgPSBNYXRoLnNpbihzaWdtYSk7CiAgICAgICAgY29uc3QgY29zaW5lU2lnbWEgPSBNYXRoLmNvcyhzaWdtYSk7CiAgICAgICAgY29uc3QgY2MgPSBjb25zdGFudHMuY29zaW5lVSAqIGNvc2luZVNpZ21hOwogICAgICAgIGNvbnN0IHNzID0gY29uc3RhbnRzLnNpbmVVICogc2luZVNpZ21hOwogICAgICAgIGNvbnN0IGxhbWJkYSA9IE1hdGguYXRhbjIoCiAgICAgICAgICBzaW5lU2lnbWEgKiBjb25zdGFudHMuc2luZUhlYWRpbmcsCiAgICAgICAgICBjYyAtIHNzICogY29uc3RhbnRzLmNvc2luZUhlYWRpbmcKICAgICAgICApOwogICAgICAgIGNvbnN0IGwgPSBsYW1iZGEgLSBjb21wdXRlRGVsdGFMYW1iZGEoCiAgICAgICAgICBjb25zdGFudHMuZiwKICAgICAgICAgIGNvbnN0YW50cy5zaW5lQWxwaGEsCiAgICAgICAgICBjb25zdGFudHMuY29zaW5lU3F1YXJlZEFscGhhLAogICAgICAgICAgc2lnbWEsCiAgICAgICAgICBzaW5lU2lnbWEsCiAgICAgICAgICBjb3NpbmVTaWdtYSwKICAgICAgICAgIGNvc2luZVR3aWNlU2lnbWFNaWRwb2ludAogICAgICAgICk7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQubG9uZ2l0dWRlID0gdGhpcy5fc3RhcnQubG9uZ2l0dWRlICsgbDsKICAgICAgICAgIHJlc3VsdC5sYXRpdHVkZSA9IGxhdGl0dWRlOwogICAgICAgICAgcmVzdWx0LmhlaWdodCA9IDA7CiAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KHRoaXMuX3N0YXJ0LmxvbmdpdHVkZSArIGwsIGxhdGl0dWRlLCAwKTsKICAgICAgfTsKICAgICAgRWxsaXBzb2lkR2VvZGVzaWNfZGVmYXVsdCA9IEVsbGlwc29pZEdlb2Rlc2ljOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUG9seWxpbmVQaXBlbGluZS5qcwogIGZ1bmN0aW9uIHN1YmRpdmlkZUhlaWdodHMobnVtUG9pbnRzLCBoMCwgaDEpIHsKICAgIGNvbnN0IGhlaWdodHMgPSBzdWJkaXZpZGVIZWlnaHRzU2NyYXRjaEFycmF5OwogICAgaGVpZ2h0cy5sZW5ndGggPSBudW1Qb2ludHM7CiAgICBsZXQgaTsKICAgIGlmIChoMCA9PT0gaDEpIHsKICAgICAgZm9yIChpID0gMDsgaSA8IG51bVBvaW50czsgaSsrKSB7CiAgICAgICAgaGVpZ2h0c1tpXSA9IGgwOwogICAgICB9CiAgICAgIHJldHVybiBoZWlnaHRzOwogICAgfQogICAgY29uc3QgZEhlaWdodCA9IGgxIC0gaDA7CiAgICBjb25zdCBoZWlnaHRQZXJWZXJ0ZXggPSBkSGVpZ2h0IC8gbnVtUG9pbnRzOwogICAgZm9yIChpID0gMDsgaSA8IG51bVBvaW50czsgaSsrKSB7CiAgICAgIGNvbnN0IGggPSBoMCArIGkgKiBoZWlnaHRQZXJWZXJ0ZXg7CiAgICAgIGhlaWdodHNbaV0gPSBoOwogICAgfQogICAgcmV0dXJuIGhlaWdodHM7CiAgfQogIGZ1bmN0aW9uIGdlbmVyYXRlQ2FydGVzaWFuQXJjKHAwLCBwMSwgbWluRGlzdGFuY2UsIGVsbGlwc29pZCwgaDAsIGgxLCBhcnJheSwgb2Zmc2V0KSB7CiAgICBjb25zdCBmaXJzdCA9IGVsbGlwc29pZC5zY2FsZVRvR2VvZGV0aWNTdXJmYWNlKHAwLCBzY2FsZUZpcnN0KTsKICAgIGNvbnN0IGxhc3QgPSBlbGxpcHNvaWQuc2NhbGVUb0dlb2RldGljU3VyZmFjZShwMSwgc2NhbGVMYXN0KTsKICAgIGNvbnN0IG51bVBvaW50cyA9IFBvbHlsaW5lUGlwZWxpbmUubnVtYmVyT2ZQb2ludHMocDAsIHAxLCBtaW5EaXN0YW5jZSk7CiAgICBjb25zdCBzdGFydCA9IGVsbGlwc29pZC5jYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpYyhmaXJzdCwgY2FydG8xKTsKICAgIGNvbnN0IGVuZCA9IGVsbGlwc29pZC5jYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpYyhsYXN0LCBjYXJ0bzIpOwogICAgY29uc3QgaGVpZ2h0cyA9IHN1YmRpdmlkZUhlaWdodHMobnVtUG9pbnRzLCBoMCwgaDEpOwogICAgZWxsaXBzb2lkR2VvZGVzaWMuc2V0RW5kUG9pbnRzKHN0YXJ0LCBlbmQpOwogICAgY29uc3Qgc3VyZmFjZURpc3RhbmNlQmV0d2VlblBvaW50cyA9IGVsbGlwc29pZEdlb2Rlc2ljLnN1cmZhY2VEaXN0YW5jZSAvIG51bVBvaW50czsKICAgIGxldCBpbmRleCA9IG9mZnNldDsKICAgIHN0YXJ0LmhlaWdodCA9IGgwOwogICAgbGV0IGNhcnQgPSBlbGxpcHNvaWQuY2FydG9ncmFwaGljVG9DYXJ0ZXNpYW4oc3RhcnQsIGNhcnRlc2lhbik7CiAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayhjYXJ0LCBhcnJheSwgaW5kZXgpOwogICAgaW5kZXggKz0gMzsKICAgIGZvciAobGV0IGkgPSAxOyBpIDwgbnVtUG9pbnRzOyBpKyspIHsKICAgICAgY29uc3QgY2FydG8gPSBlbGxpcHNvaWRHZW9kZXNpYy5pbnRlcnBvbGF0ZVVzaW5nU3VyZmFjZURpc3RhbmNlKAogICAgICAgIGkgKiBzdXJmYWNlRGlzdGFuY2VCZXR3ZWVuUG9pbnRzLAogICAgICAgIGNhcnRvMgogICAgICApOwogICAgICBjYXJ0by5oZWlnaHQgPSBoZWlnaHRzW2ldOwogICAgICBjYXJ0ID0gZWxsaXBzb2lkLmNhcnRvZ3JhcGhpY1RvQ2FydGVzaWFuKGNhcnRvLCBjYXJ0ZXNpYW4pOwogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayhjYXJ0LCBhcnJheSwgaW5kZXgpOwogICAgICBpbmRleCArPSAzOwogICAgfQogICAgcmV0dXJuIGluZGV4OwogIH0KICBmdW5jdGlvbiBnZW5lcmF0ZUNhcnRlc2lhblJodW1iQXJjKHAwLCBwMSwgZ3JhbnVsYXJpdHksIGVsbGlwc29pZCwgaDAsIGgxLCBhcnJheSwgb2Zmc2V0KSB7CiAgICBjb25zdCBzdGFydCA9IGVsbGlwc29pZC5jYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpYyhwMCwgY2FydG8xKTsKICAgIGNvbnN0IGVuZCA9IGVsbGlwc29pZC5jYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpYyhwMSwgY2FydG8yKTsKICAgIGNvbnN0IG51bVBvaW50cyA9IFBvbHlsaW5lUGlwZWxpbmUubnVtYmVyT2ZQb2ludHNSaHVtYkxpbmUoCiAgICAgIHN0YXJ0LAogICAgICBlbmQsCiAgICAgIGdyYW51bGFyaXR5CiAgICApOwogICAgc3RhcnQuaGVpZ2h0ID0gMDsKICAgIGVuZC5oZWlnaHQgPSAwOwogICAgY29uc3QgaGVpZ2h0cyA9IHN1YmRpdmlkZUhlaWdodHMobnVtUG9pbnRzLCBoMCwgaDEpOwogICAgaWYgKCFlbGxpcHNvaWRSaHVtYi5lbGxpcHNvaWQuZXF1YWxzKGVsbGlwc29pZCkpIHsKICAgICAgZWxsaXBzb2lkUmh1bWIgPSBuZXcgRWxsaXBzb2lkUmh1bWJMaW5lX2RlZmF1bHQodm9pZCAwLCB2b2lkIDAsIGVsbGlwc29pZCk7CiAgICB9CiAgICBlbGxpcHNvaWRSaHVtYi5zZXRFbmRQb2ludHMoc3RhcnQsIGVuZCk7CiAgICBjb25zdCBzdXJmYWNlRGlzdGFuY2VCZXR3ZWVuUG9pbnRzID0gZWxsaXBzb2lkUmh1bWIuc3VyZmFjZURpc3RhbmNlIC8gbnVtUG9pbnRzOwogICAgbGV0IGluZGV4ID0gb2Zmc2V0OwogICAgc3RhcnQuaGVpZ2h0ID0gaDA7CiAgICBsZXQgY2FydCA9IGVsbGlwc29pZC5jYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbihzdGFydCwgY2FydGVzaWFuKTsKICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKGNhcnQsIGFycmF5LCBpbmRleCk7CiAgICBpbmRleCArPSAzOwogICAgZm9yIChsZXQgaSA9IDE7IGkgPCBudW1Qb2ludHM7IGkrKykgewogICAgICBjb25zdCBjYXJ0byA9IGVsbGlwc29pZFJodW1iLmludGVycG9sYXRlVXNpbmdTdXJmYWNlRGlzdGFuY2UoCiAgICAgICAgaSAqIHN1cmZhY2VEaXN0YW5jZUJldHdlZW5Qb2ludHMsCiAgICAgICAgY2FydG8yCiAgICAgICk7CiAgICAgIGNhcnRvLmhlaWdodCA9IGhlaWdodHNbaV07CiAgICAgIGNhcnQgPSBlbGxpcHNvaWQuY2FydG9ncmFwaGljVG9DYXJ0ZXNpYW4oY2FydG8sIGNhcnRlc2lhbik7CiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKGNhcnQsIGFycmF5LCBpbmRleCk7CiAgICAgIGluZGV4ICs9IDM7CiAgICB9CiAgICByZXR1cm4gaW5kZXg7CiAgfQogIHZhciBQb2x5bGluZVBpcGVsaW5lLCBjYXJ0b1NjcmF0Y2gsIHdyYXBMb25naXR1ZGVJbnZlcnNNYXRyaXgsIHdyYXBMb25naXR1ZGVPcmlnaW4sIHdyYXBMb25naXR1ZGVYWk5vcm1hbCwgd3JhcExvbmdpdHVkZVhaUGxhbmUsIHdyYXBMb25naXR1ZGVZWk5vcm1hbCwgd3JhcExvbmdpdHVkZVlaUGxhbmUsIHdyYXBMb25naXR1ZGVJbnRlcnNlY3Rpb24sIHdyYXBMb25naXR1ZGVPZmZzZXQsIHN1YmRpdmlkZUhlaWdodHNTY3JhdGNoQXJyYXksIGNhcnRvMSwgY2FydG8yLCBjYXJ0ZXNpYW4sIHNjYWxlRmlyc3QsIHNjYWxlTGFzdCwgZWxsaXBzb2lkR2VvZGVzaWMsIGVsbGlwc29pZFJodW1iLCBzY3JhdGNoQ2FydG9ncmFwaGljMDIsIHNjcmF0Y2hDYXJ0b2dyYXBoaWMxMiwgUG9seWxpbmVQaXBlbGluZV9kZWZhdWx0OwogIHZhciBpbml0X1BvbHlsaW5lUGlwZWxpbmUgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1BvbHlsaW5lUGlwZWxpbmUuanMiKCkgewogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DYXJ0b2dyYXBoaWMoKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9FbGxpcHNvaWRHZW9kZXNpYygpOwogICAgICBpbml0X0VsbGlwc29pZFJodW1iTGluZSgpOwogICAgICBpbml0X0ludGVyc2VjdGlvblRlc3RzKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X01hdHJpeDQoKTsKICAgICAgaW5pdF9QbGFuZSgpOwogICAgICBQb2x5bGluZVBpcGVsaW5lID0ge307CiAgICAgIFBvbHlsaW5lUGlwZWxpbmUubnVtYmVyT2ZQb2ludHMgPSBmdW5jdGlvbihwMCwgcDEsIG1pbkRpc3RhbmNlKSB7CiAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZGlzdGFuY2UocDAsIHAxKTsKICAgICAgICByZXR1cm4gTWF0aC5jZWlsKGRpc3RhbmNlIC8gbWluRGlzdGFuY2UpOwogICAgICB9OwogICAgICBQb2x5bGluZVBpcGVsaW5lLm51bWJlck9mUG9pbnRzUmh1bWJMaW5lID0gZnVuY3Rpb24ocDAsIHAxLCBncmFudWxhcml0eSkgewogICAgICAgIGNvbnN0IHJhZGlhbnNEaXN0YW5jZVNxdWFyZWQgPSBNYXRoLnBvdyhwMC5sb25naXR1ZGUgLSBwMS5sb25naXR1ZGUsIDIpICsgTWF0aC5wb3cocDAubGF0aXR1ZGUgLSBwMS5sYXRpdHVkZSwgMik7CiAgICAgICAgcmV0dXJuIE1hdGgubWF4KAogICAgICAgICAgMSwKICAgICAgICAgIE1hdGguY2VpbChNYXRoLnNxcnQocmFkaWFuc0Rpc3RhbmNlU3F1YXJlZCAvIChncmFudWxhcml0eSAqIGdyYW51bGFyaXR5KSkpCiAgICAgICAgKTsKICAgICAgfTsKICAgICAgY2FydG9TY3JhdGNoID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIFBvbHlsaW5lUGlwZWxpbmUuZXh0cmFjdEhlaWdodHMgPSBmdW5jdGlvbihwb3NpdGlvbnMsIGVsbGlwc29pZCkgewogICAgICAgIGNvbnN0IGxlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgY29uc3QgaGVpZ2h0cyA9IG5ldyBBcnJheShsZW5ndGgpOwogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICAgIGNvbnN0IHAgPSBwb3NpdGlvbnNbaV07CiAgICAgICAgICBoZWlnaHRzW2ldID0gZWxsaXBzb2lkLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljKHAsIGNhcnRvU2NyYXRjaCkuaGVpZ2h0OwogICAgICAgIH0KICAgICAgICByZXR1cm4gaGVpZ2h0czsKICAgICAgfTsKICAgICAgd3JhcExvbmdpdHVkZUludmVyc01hdHJpeCA9IG5ldyBNYXRyaXg0X2RlZmF1bHQoKTsKICAgICAgd3JhcExvbmdpdHVkZU9yaWdpbiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgd3JhcExvbmdpdHVkZVhaTm9ybWFsID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICB3cmFwTG9uZ2l0dWRlWFpQbGFuZSA9IG5ldyBQbGFuZV9kZWZhdWx0KENhcnRlc2lhbjNfZGVmYXVsdC5VTklUX1gsIDApOwogICAgICB3cmFwTG9uZ2l0dWRlWVpOb3JtYWwgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHdyYXBMb25naXR1ZGVZWlBsYW5lID0gbmV3IFBsYW5lX2RlZmF1bHQoQ2FydGVzaWFuM19kZWZhdWx0LlVOSVRfWCwgMCk7CiAgICAgIHdyYXBMb25naXR1ZGVJbnRlcnNlY3Rpb24gPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHdyYXBMb25naXR1ZGVPZmZzZXQgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHN1YmRpdmlkZUhlaWdodHNTY3JhdGNoQXJyYXkgPSBbXTsKICAgICAgY2FydG8xID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIGNhcnRvMiA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICBjYXJ0ZXNpYW4gPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjYWxlRmlyc3QgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjYWxlTGFzdCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgZWxsaXBzb2lkR2VvZGVzaWMgPSBuZXcgRWxsaXBzb2lkR2VvZGVzaWNfZGVmYXVsdCgpOwogICAgICBlbGxpcHNvaWRSaHVtYiA9IG5ldyBFbGxpcHNvaWRSaHVtYkxpbmVfZGVmYXVsdCgpOwogICAgICBQb2x5bGluZVBpcGVsaW5lLndyYXBMb25naXR1ZGUgPSBmdW5jdGlvbihwb3NpdGlvbnMsIG1vZGVsTWF0cml4KSB7CiAgICAgICAgY29uc3QgY2FydGVzaWFucyA9IFtdOwogICAgICAgIGNvbnN0IHNlZ21lbnRzID0gW107CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChwb3NpdGlvbnMpICYmIHBvc2l0aW9ucy5sZW5ndGggPiAwKSB7CiAgICAgICAgICBtb2RlbE1hdHJpeCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG1vZGVsTWF0cml4LCBNYXRyaXg0X2RlZmF1bHQuSURFTlRJVFkpOwogICAgICAgICAgY29uc3QgaW52ZXJzZU1vZGVsTWF0cml4ID0gTWF0cml4NF9kZWZhdWx0LmludmVyc2VUcmFuc2Zvcm1hdGlvbigKICAgICAgICAgICAgbW9kZWxNYXRyaXgsCiAgICAgICAgICAgIHdyYXBMb25naXR1ZGVJbnZlcnNNYXRyaXgKICAgICAgICAgICk7CiAgICAgICAgICBjb25zdCBvcmlnaW4gPSBNYXRyaXg0X2RlZmF1bHQubXVsdGlwbHlCeVBvaW50KAogICAgICAgICAgICBpbnZlcnNlTW9kZWxNYXRyaXgsCiAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5aRVJPLAogICAgICAgICAgICB3cmFwTG9uZ2l0dWRlT3JpZ2luCiAgICAgICAgICApOwogICAgICAgICAgY29uc3QgeHpOb3JtYWwgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKAogICAgICAgICAgICBNYXRyaXg0X2RlZmF1bHQubXVsdGlwbHlCeVBvaW50QXNWZWN0b3IoCiAgICAgICAgICAgICAgaW52ZXJzZU1vZGVsTWF0cml4LAogICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5VTklUX1ksCiAgICAgICAgICAgICAgd3JhcExvbmdpdHVkZVhaTm9ybWFsCiAgICAgICAgICAgICksCiAgICAgICAgICAgIHdyYXBMb25naXR1ZGVYWk5vcm1hbAogICAgICAgICAgKTsKICAgICAgICAgIGNvbnN0IHh6UGxhbmUyID0gUGxhbmVfZGVmYXVsdC5mcm9tUG9pbnROb3JtYWwoCiAgICAgICAgICAgIG9yaWdpbiwKICAgICAgICAgICAgeHpOb3JtYWwsCiAgICAgICAgICAgIHdyYXBMb25naXR1ZGVYWlBsYW5lCiAgICAgICAgICApOwogICAgICAgICAgY29uc3QgeXpOb3JtYWwgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKAogICAgICAgICAgICBNYXRyaXg0X2RlZmF1bHQubXVsdGlwbHlCeVBvaW50QXNWZWN0b3IoCiAgICAgICAgICAgICAgaW52ZXJzZU1vZGVsTWF0cml4LAogICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5VTklUX1gsCiAgICAgICAgICAgICAgd3JhcExvbmdpdHVkZVlaTm9ybWFsCiAgICAgICAgICAgICksCiAgICAgICAgICAgIHdyYXBMb25naXR1ZGVZWk5vcm1hbAogICAgICAgICAgKTsKICAgICAgICAgIGNvbnN0IHl6UGxhbmUgPSBQbGFuZV9kZWZhdWx0LmZyb21Qb2ludE5vcm1hbCgKICAgICAgICAgICAgb3JpZ2luLAogICAgICAgICAgICB5ek5vcm1hbCwKICAgICAgICAgICAgd3JhcExvbmdpdHVkZVlaUGxhbmUKICAgICAgICAgICk7CiAgICAgICAgICBsZXQgY291bnQgPSAxOwogICAgICAgICAgY2FydGVzaWFucy5wdXNoKENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShwb3NpdGlvbnNbMF0pKTsKICAgICAgICAgIGxldCBwcmV2ID0gY2FydGVzaWFuc1swXTsKICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgIGNvbnN0IGN1ciA9IHBvc2l0aW9uc1tpXTsKICAgICAgICAgICAgaWYgKFBsYW5lX2RlZmF1bHQuZ2V0UG9pbnREaXN0YW5jZSh5elBsYW5lLCBwcmV2KSA8IDAgfHwgUGxhbmVfZGVmYXVsdC5nZXRQb2ludERpc3RhbmNlKHl6UGxhbmUsIGN1cikgPCAwKSB7CiAgICAgICAgICAgICAgY29uc3QgaW50ZXJzZWN0aW9uID0gSW50ZXJzZWN0aW9uVGVzdHNfZGVmYXVsdC5saW5lU2VnbWVudFBsYW5lKAogICAgICAgICAgICAgICAgcHJldiwKICAgICAgICAgICAgICAgIGN1ciwKICAgICAgICAgICAgICAgIHh6UGxhbmUyLAogICAgICAgICAgICAgICAgd3JhcExvbmdpdHVkZUludGVyc2VjdGlvbgogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChpbnRlcnNlY3Rpb24pKSB7CiAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcigKICAgICAgICAgICAgICAgICAgeHpOb3JtYWwsCiAgICAgICAgICAgICAgICAgIDVlLTksCiAgICAgICAgICAgICAgICAgIHdyYXBMb25naXR1ZGVPZmZzZXQKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICBpZiAoUGxhbmVfZGVmYXVsdC5nZXRQb2ludERpc3RhbmNlKHh6UGxhbmUyLCBwcmV2KSA8IDApIHsKICAgICAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5lZ2F0ZShvZmZzZXQsIG9mZnNldCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjYXJ0ZXNpYW5zLnB1c2goCiAgICAgICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoaW50ZXJzZWN0aW9uLCBvZmZzZXQsIG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKSkKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICBzZWdtZW50cy5wdXNoKGNvdW50ICsgMSk7CiAgICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubmVnYXRlKG9mZnNldCwgb2Zmc2V0KTsKICAgICAgICAgICAgICAgIGNhcnRlc2lhbnMucHVzaCgKICAgICAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChpbnRlcnNlY3Rpb24sIG9mZnNldCwgbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpKQogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIGNvdW50ID0gMTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2FydGVzaWFucy5wdXNoKENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShwb3NpdGlvbnNbaV0pKTsKICAgICAgICAgICAgY291bnQrKzsKICAgICAgICAgICAgcHJldiA9IGN1cjsKICAgICAgICAgIH0KICAgICAgICAgIHNlZ21lbnRzLnB1c2goY291bnQpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gewogICAgICAgICAgcG9zaXRpb25zOiBjYXJ0ZXNpYW5zLAogICAgICAgICAgbGVuZ3Roczogc2VnbWVudHMKICAgICAgICB9OwogICAgICB9OwogICAgICBQb2x5bGluZVBpcGVsaW5lLmdlbmVyYXRlQXJjID0gZnVuY3Rpb24ob3B0aW9ucykgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KG9wdGlvbnMpKSB7CiAgICAgICAgICBvcHRpb25zID0ge307CiAgICAgICAgfQogICAgICAgIGNvbnN0IHBvc2l0aW9ucyA9IG9wdGlvbnMucG9zaXRpb25zOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHBvc2l0aW9ucykpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJvcHRpb25zLnBvc2l0aW9ucyBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgbGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aDsKICAgICAgICBjb25zdCBlbGxpcHNvaWQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmVsbGlwc29pZCwgRWxsaXBzb2lkX2RlZmF1bHQuZGVmYXVsdCk7CiAgICAgICAgbGV0IGhlaWdodCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuaGVpZ2h0LCAwKTsKICAgICAgICBjb25zdCBoYXNIZWlnaHRBcnJheSA9IEFycmF5LmlzQXJyYXkoaGVpZ2h0KTsKICAgICAgICBpZiAobGVuZ3RoIDwgMSkgewogICAgICAgICAgcmV0dXJuIFtdOwogICAgICAgIH0gZWxzZSBpZiAobGVuZ3RoID09PSAxKSB7CiAgICAgICAgICBjb25zdCBwID0gZWxsaXBzb2lkLnNjYWxlVG9HZW9kZXRpY1N1cmZhY2UocG9zaXRpb25zWzBdLCBzY2FsZUZpcnN0KTsKICAgICAgICAgIGhlaWdodCA9IGhhc0hlaWdodEFycmF5ID8gaGVpZ2h0WzBdIDogaGVpZ2h0OwogICAgICAgICAgaWYgKGhlaWdodCAhPT0gMCkgewogICAgICAgICAgICBjb25zdCBuID0gZWxsaXBzb2lkLmdlb2RldGljU3VyZmFjZU5vcm1hbChwLCBjYXJ0ZXNpYW4pOwogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcihuLCBoZWlnaHQsIG4pOwogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKHAsIG4sIHApOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIFtwLngsIHAueSwgcC56XTsKICAgICAgICB9CiAgICAgICAgbGV0IG1pbkRpc3RhbmNlID0gb3B0aW9ucy5taW5EaXN0YW5jZTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChtaW5EaXN0YW5jZSkpIHsKICAgICAgICAgIGNvbnN0IGdyYW51bGFyaXR5ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoCiAgICAgICAgICAgIG9wdGlvbnMuZ3JhbnVsYXJpdHksCiAgICAgICAgICAgIE1hdGhfZGVmYXVsdC5SQURJQU5TX1BFUl9ERUdSRUUKICAgICAgICAgICk7CiAgICAgICAgICBtaW5EaXN0YW5jZSA9IE1hdGhfZGVmYXVsdC5jaG9yZExlbmd0aChncmFudWxhcml0eSwgZWxsaXBzb2lkLm1heGltdW1SYWRpdXMpOwogICAgICAgIH0KICAgICAgICBsZXQgbnVtUG9pbnRzID0gMDsKICAgICAgICBsZXQgaTsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoIC0gMTsgaSsrKSB7CiAgICAgICAgICBudW1Qb2ludHMgKz0gUG9seWxpbmVQaXBlbGluZS5udW1iZXJPZlBvaW50cygKICAgICAgICAgICAgcG9zaXRpb25zW2ldLAogICAgICAgICAgICBwb3NpdGlvbnNbaSArIDFdLAogICAgICAgICAgICBtaW5EaXN0YW5jZQogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgYXJyYXlMZW5ndGggPSAobnVtUG9pbnRzICsgMSkgKiAzOwogICAgICAgIGNvbnN0IG5ld1Bvc2l0aW9ucyA9IG5ldyBBcnJheShhcnJheUxlbmd0aCk7CiAgICAgICAgbGV0IG9mZnNldCA9IDA7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aCAtIDE7IGkrKykgewogICAgICAgICAgY29uc3QgcDAgPSBwb3NpdGlvbnNbaV07CiAgICAgICAgICBjb25zdCBwMSA9IHBvc2l0aW9uc1tpICsgMV07CiAgICAgICAgICBjb25zdCBoMCA9IGhhc0hlaWdodEFycmF5ID8gaGVpZ2h0W2ldIDogaGVpZ2h0OwogICAgICAgICAgY29uc3QgaDEgPSBoYXNIZWlnaHRBcnJheSA/IGhlaWdodFtpICsgMV0gOiBoZWlnaHQ7CiAgICAgICAgICBvZmZzZXQgPSBnZW5lcmF0ZUNhcnRlc2lhbkFyYygKICAgICAgICAgICAgcDAsCiAgICAgICAgICAgIHAxLAogICAgICAgICAgICBtaW5EaXN0YW5jZSwKICAgICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgICBoMCwKICAgICAgICAgICAgaDEsCiAgICAgICAgICAgIG5ld1Bvc2l0aW9ucywKICAgICAgICAgICAgb2Zmc2V0CiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBzdWJkaXZpZGVIZWlnaHRzU2NyYXRjaEFycmF5Lmxlbmd0aCA9IDA7CiAgICAgICAgY29uc3QgbGFzdFBvaW50ID0gcG9zaXRpb25zW2xlbmd0aCAtIDFdOwogICAgICAgIGNvbnN0IGNhcnRvID0gZWxsaXBzb2lkLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljKGxhc3RQb2ludCwgY2FydG8xKTsKICAgICAgICBjYXJ0by5oZWlnaHQgPSBoYXNIZWlnaHRBcnJheSA/IGhlaWdodFtsZW5ndGggLSAxXSA6IGhlaWdodDsKICAgICAgICBjb25zdCBjYXJ0ID0gZWxsaXBzb2lkLmNhcnRvZ3JhcGhpY1RvQ2FydGVzaWFuKGNhcnRvLCBjYXJ0ZXNpYW4pOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKGNhcnQsIG5ld1Bvc2l0aW9ucywgYXJyYXlMZW5ndGggLSAzKTsKICAgICAgICByZXR1cm4gbmV3UG9zaXRpb25zOwogICAgICB9OwogICAgICBzY3JhdGNoQ2FydG9ncmFwaGljMDIgPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaENhcnRvZ3JhcGhpYzEyID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIFBvbHlsaW5lUGlwZWxpbmUuZ2VuZXJhdGVSaHVtYkFyYyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChvcHRpb25zKSkgewogICAgICAgICAgb3B0aW9ucyA9IHt9OwogICAgICAgIH0KICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSBvcHRpb25zLnBvc2l0aW9uczsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwb3NpdGlvbnMpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgib3B0aW9ucy5wb3NpdGlvbnMgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGxlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgY29uc3QgZWxsaXBzb2lkID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5lbGxpcHNvaWQsIEVsbGlwc29pZF9kZWZhdWx0LmRlZmF1bHQpOwogICAgICAgIGxldCBoZWlnaHQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmhlaWdodCwgMCk7CiAgICAgICAgY29uc3QgaGFzSGVpZ2h0QXJyYXkgPSBBcnJheS5pc0FycmF5KGhlaWdodCk7CiAgICAgICAgaWYgKGxlbmd0aCA8IDEpIHsKICAgICAgICAgIHJldHVybiBbXTsKICAgICAgICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gMSkgewogICAgICAgICAgY29uc3QgcCA9IGVsbGlwc29pZC5zY2FsZVRvR2VvZGV0aWNTdXJmYWNlKHBvc2l0aW9uc1swXSwgc2NhbGVGaXJzdCk7CiAgICAgICAgICBoZWlnaHQgPSBoYXNIZWlnaHRBcnJheSA/IGhlaWdodFswXSA6IGhlaWdodDsKICAgICAgICAgIGlmIChoZWlnaHQgIT09IDApIHsKICAgICAgICAgICAgY29uc3QgbiA9IGVsbGlwc29pZC5nZW9kZXRpY1N1cmZhY2VOb3JtYWwocCwgY2FydGVzaWFuKTsKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIobiwgaGVpZ2h0LCBuKTsKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChwLCBuLCBwKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBbcC54LCBwLnksIHAuel07CiAgICAgICAgfQogICAgICAgIGNvbnN0IGdyYW51bGFyaXR5ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoCiAgICAgICAgICBvcHRpb25zLmdyYW51bGFyaXR5LAogICAgICAgICAgTWF0aF9kZWZhdWx0LlJBRElBTlNfUEVSX0RFR1JFRQogICAgICAgICk7CiAgICAgICAgbGV0IG51bVBvaW50cyA9IDA7CiAgICAgICAgbGV0IGk7CiAgICAgICAgbGV0IGMwID0gZWxsaXBzb2lkLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljKAogICAgICAgICAgcG9zaXRpb25zWzBdLAogICAgICAgICAgc2NyYXRjaENhcnRvZ3JhcGhpYzAyCiAgICAgICAgKTsKICAgICAgICBsZXQgYzE7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aCAtIDE7IGkrKykgewogICAgICAgICAgYzEgPSBlbGxpcHNvaWQuY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWMoCiAgICAgICAgICAgIHBvc2l0aW9uc1tpICsgMV0sCiAgICAgICAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWMxMgogICAgICAgICAgKTsKICAgICAgICAgIG51bVBvaW50cyArPSBQb2x5bGluZVBpcGVsaW5lLm51bWJlck9mUG9pbnRzUmh1bWJMaW5lKGMwLCBjMSwgZ3JhbnVsYXJpdHkpOwogICAgICAgICAgYzAgPSBDYXJ0b2dyYXBoaWNfZGVmYXVsdC5jbG9uZShjMSwgc2NyYXRjaENhcnRvZ3JhcGhpYzAyKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgYXJyYXlMZW5ndGggPSAobnVtUG9pbnRzICsgMSkgKiAzOwogICAgICAgIGNvbnN0IG5ld1Bvc2l0aW9ucyA9IG5ldyBBcnJheShhcnJheUxlbmd0aCk7CiAgICAgICAgbGV0IG9mZnNldCA9IDA7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aCAtIDE7IGkrKykgewogICAgICAgICAgY29uc3QgcDAgPSBwb3NpdGlvbnNbaV07CiAgICAgICAgICBjb25zdCBwMSA9IHBvc2l0aW9uc1tpICsgMV07CiAgICAgICAgICBjb25zdCBoMCA9IGhhc0hlaWdodEFycmF5ID8gaGVpZ2h0W2ldIDogaGVpZ2h0OwogICAgICAgICAgY29uc3QgaDEgPSBoYXNIZWlnaHRBcnJheSA/IGhlaWdodFtpICsgMV0gOiBoZWlnaHQ7CiAgICAgICAgICBvZmZzZXQgPSBnZW5lcmF0ZUNhcnRlc2lhblJodW1iQXJjKAogICAgICAgICAgICBwMCwKICAgICAgICAgICAgcDEsCiAgICAgICAgICAgIGdyYW51bGFyaXR5LAogICAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICAgIGgwLAogICAgICAgICAgICBoMSwKICAgICAgICAgICAgbmV3UG9zaXRpb25zLAogICAgICAgICAgICBvZmZzZXQKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIHN1YmRpdmlkZUhlaWdodHNTY3JhdGNoQXJyYXkubGVuZ3RoID0gMDsKICAgICAgICBjb25zdCBsYXN0UG9pbnQgPSBwb3NpdGlvbnNbbGVuZ3RoIC0gMV07CiAgICAgICAgY29uc3QgY2FydG8gPSBlbGxpcHNvaWQuY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWMobGFzdFBvaW50LCBjYXJ0bzEpOwogICAgICAgIGNhcnRvLmhlaWdodCA9IGhhc0hlaWdodEFycmF5ID8gaGVpZ2h0W2xlbmd0aCAtIDFdIDogaGVpZ2h0OwogICAgICAgIGNvbnN0IGNhcnQgPSBlbGxpcHNvaWQuY2FydG9ncmFwaGljVG9DYXJ0ZXNpYW4oY2FydG8sIGNhcnRlc2lhbik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2soY2FydCwgbmV3UG9zaXRpb25zLCBhcnJheUxlbmd0aCAtIDMpOwogICAgICAgIHJldHVybiBuZXdQb3NpdGlvbnM7CiAgICAgIH07CiAgICAgIFBvbHlsaW5lUGlwZWxpbmUuZ2VuZXJhdGVDYXJ0ZXNpYW5BcmMgPSBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgICAgY29uc3QgbnVtYmVyQXJyYXkgPSBQb2x5bGluZVBpcGVsaW5lLmdlbmVyYXRlQXJjKG9wdGlvbnMpOwogICAgICAgIGNvbnN0IHNpemUgPSBudW1iZXJBcnJheS5sZW5ndGggLyAzOwogICAgICAgIGNvbnN0IG5ld1Bvc2l0aW9ucyA9IG5ldyBBcnJheShzaXplKTsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNpemU7IGkrKykgewogICAgICAgICAgbmV3UG9zaXRpb25zW2ldID0gQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjayhudW1iZXJBcnJheSwgaSAqIDMpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3UG9zaXRpb25zOwogICAgICB9OwogICAgICBQb2x5bGluZVBpcGVsaW5lLmdlbmVyYXRlQ2FydGVzaWFuUmh1bWJBcmMgPSBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgICAgY29uc3QgbnVtYmVyQXJyYXkgPSBQb2x5bGluZVBpcGVsaW5lLmdlbmVyYXRlUmh1bWJBcmMob3B0aW9ucyk7CiAgICAgICAgY29uc3Qgc2l6ZSA9IG51bWJlckFycmF5Lmxlbmd0aCAvIDM7CiAgICAgICAgY29uc3QgbmV3UG9zaXRpb25zID0gbmV3IEFycmF5KHNpemUpOwogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2l6ZTsgaSsrKSB7CiAgICAgICAgICBuZXdQb3NpdGlvbnNbaV0gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKG51bWJlckFycmF5LCBpICogMyk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBuZXdQb3NpdGlvbnM7CiAgICAgIH07CiAgICAgIFBvbHlsaW5lUGlwZWxpbmVfZGVmYXVsdCA9IFBvbHlsaW5lUGlwZWxpbmU7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9vbmVUaW1lV2FybmluZy5qcwogIGZ1bmN0aW9uIG9uZVRpbWVXYXJuaW5nKGlkZW50aWZpZXIsIG1lc3NhZ2UpIHsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGlkZW50aWZpZXIpKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJpZGVudGlmaWVyIGlzIHJlcXVpcmVkLiIpOwogICAgfQogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQod2FybmluZ3NbaWRlbnRpZmllcl0pKSB7CiAgICAgIHdhcm5pbmdzW2lkZW50aWZpZXJdID0gdHJ1ZTsKICAgICAgY29uc29sZS53YXJuKGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG1lc3NhZ2UsIGlkZW50aWZpZXIpKTsKICAgIH0KICB9CiAgdmFyIHdhcm5pbmdzLCBvbmVUaW1lV2FybmluZ19kZWZhdWx0OwogIHZhciBpbml0X29uZVRpbWVXYXJuaW5nID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9vbmVUaW1lV2FybmluZy5qcyIoKSB7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIHdhcm5pbmdzID0ge307CiAgICAgIG9uZVRpbWVXYXJuaW5nLmdlb21ldHJ5T3V0bGluZXMgPSAiRW50aXR5IGdlb21ldHJ5IG91dGxpbmVzIGFyZSB1bnN1cHBvcnRlZCBvbiB0ZXJyYWluLiBPdXRsaW5lcyB3aWxsIGJlIGRpc2FibGVkLiBUbyBlbmFibGUgb3V0bGluZXMsIGRpc2FibGUgZ2VvbWV0cnkgdGVycmFpbiBjbGFtcGluZyBieSBleHBsaWNpdGx5IHNldHRpbmcgaGVpZ2h0IHRvIDAuIjsKICAgICAgb25lVGltZVdhcm5pbmcuZ2VvbWV0cnlaSW5kZXggPSAiRW50aXR5IGdlb21ldHJ5IHdpdGggekluZGV4IGFyZSB1bnN1cHBvcnRlZCB3aGVuIGhlaWdodCBvciBleHRydWRlZEhlaWdodCBhcmUgZGVmaW5lZC4gIHpJbmRleCB3aWxsIGJlIGlnbm9yZWQiOwogICAgICBvbmVUaW1lV2FybmluZy5nZW9tZXRyeUhlaWdodFJlZmVyZW5jZSA9ICJFbnRpdHkgY29ycmlkb3IsIGVsbGlwc2UsIHBvbHlnb24gb3IgcmVjdGFuZ2xlIHdpdGggaGVpZ2h0UmVmZXJlbmNlIG11c3QgYWxzbyBoYXZlIGEgZGVmaW5lZCBoZWlnaHQuICBoZWlnaHRSZWZlcmVuY2Ugd2lsbCBiZSBpZ25vcmVkIjsKICAgICAgb25lVGltZVdhcm5pbmcuZ2VvbWV0cnlFeHRydWRlZEhlaWdodFJlZmVyZW5jZSA9ICJFbnRpdHkgY29ycmlkb3IsIGVsbGlwc2UsIHBvbHlnb24gb3IgcmVjdGFuZ2xlIHdpdGggZXh0cnVkZWRIZWlnaHRSZWZlcmVuY2UgbXVzdCBhbHNvIGhhdmUgYSBkZWZpbmVkIGV4dHJ1ZGVkSGVpZ2h0LiAgZXh0cnVkZWRIZWlnaHRSZWZlcmVuY2Ugd2lsbCBiZSBpZ25vcmVkIjsKICAgICAgb25lVGltZVdhcm5pbmdfZGVmYXVsdCA9IG9uZVRpbWVXYXJuaW5nOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUG9seWxpbmVWb2x1bWVHZW9tZXRyeUxpYnJhcnkuanMKICBmdW5jdGlvbiBzY2FsZVRvU3VyZmFjZShwb3NpdGlvbnMsIGVsbGlwc29pZCkgewogICAgY29uc3QgaGVpZ2h0cyA9IG5ldyBBcnJheShwb3NpdGlvbnMubGVuZ3RoKTsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9zaXRpb25zLmxlbmd0aDsgaSsrKSB7CiAgICAgIGNvbnN0IHBvcyA9IHBvc2l0aW9uc1tpXTsKICAgICAgY2FydG9ncmFwaGljID0gZWxsaXBzb2lkLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljKHBvcywgY2FydG9ncmFwaGljKTsKICAgICAgaGVpZ2h0c1tpXSA9IGNhcnRvZ3JhcGhpYy5oZWlnaHQ7CiAgICAgIHBvc2l0aW9uc1tpXSA9IGVsbGlwc29pZC5zY2FsZVRvR2VvZGV0aWNTdXJmYWNlKHBvcywgcG9zKTsKICAgIH0KICAgIHJldHVybiBoZWlnaHRzOwogIH0KICBmdW5jdGlvbiBzdWJkaXZpZGVIZWlnaHRzMihwb2ludHMsIGgwLCBoMSwgZ3JhbnVsYXJpdHkpIHsKICAgIGNvbnN0IHAwID0gcG9pbnRzWzBdOwogICAgY29uc3QgcDEgPSBwb2ludHNbMV07CiAgICBjb25zdCBhbmdsZUJldHdlZW4gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuYW5nbGVCZXR3ZWVuKHAwLCBwMSk7CiAgICBjb25zdCBudW1Qb2ludHMgPSBNYXRoLmNlaWwoYW5nbGVCZXR3ZWVuIC8gZ3JhbnVsYXJpdHkpOwogICAgY29uc3QgaGVpZ2h0cyA9IG5ldyBBcnJheShudW1Qb2ludHMpOwogICAgbGV0IGk7CiAgICBpZiAoaDAgPT09IGgxKSB7CiAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1Qb2ludHM7IGkrKykgewogICAgICAgIGhlaWdodHNbaV0gPSBoMDsKICAgICAgfQogICAgICBoZWlnaHRzLnB1c2goaDEpOwogICAgICByZXR1cm4gaGVpZ2h0czsKICAgIH0KICAgIGNvbnN0IGRIZWlnaHQgPSBoMSAtIGgwOwogICAgY29uc3QgaGVpZ2h0UGVyVmVydGV4ID0gZEhlaWdodCAvIG51bVBvaW50czsKICAgIGZvciAoaSA9IDE7IGkgPCBudW1Qb2ludHM7IGkrKykgewogICAgICBjb25zdCBoID0gaDAgKyBpICogaGVpZ2h0UGVyVmVydGV4OwogICAgICBoZWlnaHRzW2ldID0gaDsKICAgIH0KICAgIGhlaWdodHNbMF0gPSBoMDsKICAgIGhlaWdodHMucHVzaChoMSk7CiAgICByZXR1cm4gaGVpZ2h0czsKICB9CiAgZnVuY3Rpb24gY29tcHV0ZVJvdGF0aW9uQW5nbGUoc3RhcnQsIGVuZCwgcG9zaXRpb24sIGVsbGlwc29pZCkgewogICAgY29uc3QgdGFuZ2VudFBsYW5lID0gbmV3IEVsbGlwc29pZFRhbmdlbnRQbGFuZV9kZWZhdWx0KHBvc2l0aW9uLCBlbGxpcHNvaWQpOwogICAgY29uc3QgbmV4dCA9IHRhbmdlbnRQbGFuZS5wcm9qZWN0UG9pbnRPbnRvUGxhbmUoCiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQocG9zaXRpb24sIHN0YXJ0LCBuZXh0U2NyYXRjaCksCiAgICAgIG5leHRTY3JhdGNoCiAgICApOwogICAgY29uc3QgcHJldiA9IHRhbmdlbnRQbGFuZS5wcm9qZWN0UG9pbnRPbnRvUGxhbmUoCiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQocG9zaXRpb24sIGVuZCwgcHJldlNjcmF0Y2gpLAogICAgICBwcmV2U2NyYXRjaAogICAgKTsKICAgIGNvbnN0IGFuZ2xlID0gQ2FydGVzaWFuMl9kZWZhdWx0LmFuZ2xlQmV0d2VlbihuZXh0LCBwcmV2KTsKICAgIHJldHVybiBwcmV2LnggKiBuZXh0LnkgLSBwcmV2LnkgKiBuZXh0LnggPj0gMCA/IC1hbmdsZSA6IGFuZ2xlOwogIH0KICBmdW5jdGlvbiBhZGRQb3NpdGlvbihjZW50ZXIsIGxlZnQsIHNoYXBlLCBmaW5hbFBvc2l0aW9ucywgZWxsaXBzb2lkLCBoZWlnaHQsIHhTY2FsYXIsIHJlcGVhdCkgewogICAgbGV0IHdlc3QgPSB3ZXN0U2NyYXRjaDsKICAgIGxldCBmaW5hbFBvc2l0aW9uID0gZmluYWxQb3NTY3JhdGNoOwogICAgdHJhbnNmb3JtID0gVHJhbnNmb3Jtc19kZWZhdWx0LmVhc3ROb3J0aFVwVG9GaXhlZEZyYW1lKGNlbnRlciwgZWxsaXBzb2lkLCB0cmFuc2Zvcm0pOwogICAgd2VzdCA9IE1hdHJpeDRfZGVmYXVsdC5tdWx0aXBseUJ5UG9pbnRBc1ZlY3Rvcih0cmFuc2Zvcm0sIG5lZ2F0aXZlWCwgd2VzdCk7CiAgICB3ZXN0ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSh3ZXN0LCB3ZXN0KTsKICAgIGNvbnN0IGFuZ2xlID0gY29tcHV0ZVJvdGF0aW9uQW5nbGUod2VzdCwgbGVmdCwgY2VudGVyLCBlbGxpcHNvaWQpOwogICAgcm90YXRpb25aID0gTWF0cml4M19kZWZhdWx0LmZyb21Sb3RhdGlvblooYW5nbGUsIHJvdGF0aW9uWik7CiAgICBoZWlnaHRDYXJ0ZXNpYW4ueiA9IGhlaWdodDsKICAgIHRyYW5zZm9ybSA9IE1hdHJpeDRfZGVmYXVsdC5tdWx0aXBseVRyYW5zZm9ybWF0aW9uKAogICAgICB0cmFuc2Zvcm0sCiAgICAgIE1hdHJpeDRfZGVmYXVsdC5mcm9tUm90YXRpb25UcmFuc2xhdGlvbihyb3RhdGlvblosIGhlaWdodENhcnRlc2lhbiwgdHJhbnNsYXRpb24pLAogICAgICB0cmFuc2Zvcm0KICAgICk7CiAgICBjb25zdCBzY2FsZSA9IHNjYWxlTWF0cml4OwogICAgc2NhbGVbMF0gPSB4U2NhbGFyOwogICAgZm9yIChsZXQgaiA9IDA7IGogPCByZXBlYXQ7IGorKykgewogICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoYXBlLmxlbmd0aDsgaSArPSAzKSB7CiAgICAgICAgZmluYWxQb3NpdGlvbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkoc2hhcGUsIGksIGZpbmFsUG9zaXRpb24pOwogICAgICAgIGZpbmFsUG9zaXRpb24gPSBNYXRyaXgzX2RlZmF1bHQubXVsdGlwbHlCeVZlY3RvcigKICAgICAgICAgIHNjYWxlLAogICAgICAgICAgZmluYWxQb3NpdGlvbiwKICAgICAgICAgIGZpbmFsUG9zaXRpb24KICAgICAgICApOwogICAgICAgIGZpbmFsUG9zaXRpb24gPSBNYXRyaXg0X2RlZmF1bHQubXVsdGlwbHlCeVBvaW50KAogICAgICAgICAgdHJhbnNmb3JtLAogICAgICAgICAgZmluYWxQb3NpdGlvbiwKICAgICAgICAgIGZpbmFsUG9zaXRpb24KICAgICAgICApOwogICAgICAgIGZpbmFsUG9zaXRpb25zLnB1c2goZmluYWxQb3NpdGlvbi54LCBmaW5hbFBvc2l0aW9uLnksIGZpbmFsUG9zaXRpb24ueik7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBmaW5hbFBvc2l0aW9uczsKICB9CiAgZnVuY3Rpb24gYWRkUG9zaXRpb25zKGNlbnRlcnMsIGxlZnQsIHNoYXBlLCBmaW5hbFBvc2l0aW9ucywgZWxsaXBzb2lkLCBoZWlnaHRzLCB4U2NhbGFyKSB7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNlbnRlcnMubGVuZ3RoOyBpICs9IDMpIHsKICAgICAgY29uc3QgY2VudGVyID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShjZW50ZXJzLCBpLCBjZW50ZXJTY3JhdGNoMik7CiAgICAgIGZpbmFsUG9zaXRpb25zID0gYWRkUG9zaXRpb24oCiAgICAgICAgY2VudGVyLAogICAgICAgIGxlZnQsCiAgICAgICAgc2hhcGUsCiAgICAgICAgZmluYWxQb3NpdGlvbnMsCiAgICAgICAgZWxsaXBzb2lkLAogICAgICAgIGhlaWdodHNbaSAvIDNdLAogICAgICAgIHhTY2FsYXIsCiAgICAgICAgMQogICAgICApOwogICAgfQogICAgcmV0dXJuIGZpbmFsUG9zaXRpb25zOwogIH0KICBmdW5jdGlvbiBjb252ZXJ0U2hhcGVUbzNERHVwbGljYXRlKHNoYXBlMkQsIGJvdW5kaW5nUmVjdGFuZ2xlKSB7CiAgICBjb25zdCBsZW5ndGggPSBzaGFwZTJELmxlbmd0aDsKICAgIGNvbnN0IHNoYXBlID0gbmV3IEFycmF5KGxlbmd0aCAqIDYpOwogICAgbGV0IGluZGV4ID0gMDsKICAgIGNvbnN0IHhPZmZzZXQgPSBib3VuZGluZ1JlY3RhbmdsZS54ICsgYm91bmRpbmdSZWN0YW5nbGUud2lkdGggLyAyOwogICAgY29uc3QgeU9mZnNldCA9IGJvdW5kaW5nUmVjdGFuZ2xlLnkgKyBib3VuZGluZ1JlY3RhbmdsZS5oZWlnaHQgLyAyOwogICAgbGV0IHBvaW50ID0gc2hhcGUyRFswXTsKICAgIHNoYXBlW2luZGV4KytdID0gcG9pbnQueCAtIHhPZmZzZXQ7CiAgICBzaGFwZVtpbmRleCsrXSA9IDA7CiAgICBzaGFwZVtpbmRleCsrXSA9IHBvaW50LnkgLSB5T2Zmc2V0OwogICAgZm9yIChsZXQgaSA9IDE7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICBwb2ludCA9IHNoYXBlMkRbaV07CiAgICAgIGNvbnN0IHggPSBwb2ludC54IC0geE9mZnNldDsKICAgICAgY29uc3QgeiA9IHBvaW50LnkgLSB5T2Zmc2V0OwogICAgICBzaGFwZVtpbmRleCsrXSA9IHg7CiAgICAgIHNoYXBlW2luZGV4KytdID0gMDsKICAgICAgc2hhcGVbaW5kZXgrK10gPSB6OwogICAgICBzaGFwZVtpbmRleCsrXSA9IHg7CiAgICAgIHNoYXBlW2luZGV4KytdID0gMDsKICAgICAgc2hhcGVbaW5kZXgrK10gPSB6OwogICAgfQogICAgcG9pbnQgPSBzaGFwZTJEWzBdOwogICAgc2hhcGVbaW5kZXgrK10gPSBwb2ludC54IC0geE9mZnNldDsKICAgIHNoYXBlW2luZGV4KytdID0gMDsKICAgIHNoYXBlW2luZGV4KytdID0gcG9pbnQueSAtIHlPZmZzZXQ7CiAgICByZXR1cm4gc2hhcGU7CiAgfQogIGZ1bmN0aW9uIGNvbnZlcnRTaGFwZVRvM0Qoc2hhcGUyRCwgYm91bmRpbmdSZWN0YW5nbGUpIHsKICAgIGNvbnN0IGxlbmd0aCA9IHNoYXBlMkQubGVuZ3RoOwogICAgY29uc3Qgc2hhcGUgPSBuZXcgQXJyYXkobGVuZ3RoICogMyk7CiAgICBsZXQgaW5kZXggPSAwOwogICAgY29uc3QgeE9mZnNldCA9IGJvdW5kaW5nUmVjdGFuZ2xlLnggKyBib3VuZGluZ1JlY3RhbmdsZS53aWR0aCAvIDI7CiAgICBjb25zdCB5T2Zmc2V0ID0gYm91bmRpbmdSZWN0YW5nbGUueSArIGJvdW5kaW5nUmVjdGFuZ2xlLmhlaWdodCAvIDI7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgIHNoYXBlW2luZGV4KytdID0gc2hhcGUyRFtpXS54IC0geE9mZnNldDsKICAgICAgc2hhcGVbaW5kZXgrK10gPSAwOwogICAgICBzaGFwZVtpbmRleCsrXSA9IHNoYXBlMkRbaV0ueSAtIHlPZmZzZXQ7CiAgICB9CiAgICByZXR1cm4gc2hhcGU7CiAgfQogIGZ1bmN0aW9uIGNvbXB1dGVSb3VuZENvcm5lcihwaXZvdCwgc3RhcnRQb2ludCwgZW5kUG9pbnQsIGNvcm5lclR5cGUsIGxlZnRJc091dHNpZGUsIGVsbGlwc29pZCwgZmluYWxQb3NpdGlvbnMsIHNoYXBlLCBoZWlnaHQsIGR1cGxpY2F0ZVBvaW50cykgewogICAgY29uc3QgYW5nbGUgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuYW5nbGVCZXR3ZWVuKAogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3Qoc3RhcnRQb2ludCwgcGl2b3QsIHNjcmF0Y2gxKSwKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KGVuZFBvaW50LCBwaXZvdCwgc2NyYXRjaDIpCiAgICApOwogICAgY29uc3QgZ3JhbnVsYXJpdHkgPSBjb3JuZXJUeXBlID09PSBDb3JuZXJUeXBlX2RlZmF1bHQuQkVWRUxFRCA/IDAgOiBNYXRoLmNlaWwoYW5nbGUgLyBNYXRoX2RlZmF1bHQudG9SYWRpYW5zKDUpKTsKICAgIGxldCBtOwogICAgaWYgKGxlZnRJc091dHNpZGUpIHsKICAgICAgbSA9IE1hdHJpeDNfZGVmYXVsdC5mcm9tUXVhdGVybmlvbigKICAgICAgICBRdWF0ZXJuaW9uX2RlZmF1bHQuZnJvbUF4aXNBbmdsZSgKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5uZWdhdGUocGl2b3QsIHNjcmF0Y2gxKSwKICAgICAgICAgIGFuZ2xlIC8gKGdyYW51bGFyaXR5ICsgMSksCiAgICAgICAgICBxdWF0ZXJpb24KICAgICAgICApLAogICAgICAgIHJvdE1hdHJpeAogICAgICApOwogICAgfSBlbHNlIHsKICAgICAgbSA9IE1hdHJpeDNfZGVmYXVsdC5mcm9tUXVhdGVybmlvbigKICAgICAgICBRdWF0ZXJuaW9uX2RlZmF1bHQuZnJvbUF4aXNBbmdsZShwaXZvdCwgYW5nbGUgLyAoZ3JhbnVsYXJpdHkgKyAxKSwgcXVhdGVyaW9uKSwKICAgICAgICByb3RNYXRyaXgKICAgICAgKTsKICAgIH0KICAgIGxldCBsZWZ0OwogICAgbGV0IHN1cmZhY2VQb2ludDsKICAgIHN0YXJ0UG9pbnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoc3RhcnRQb2ludCwgc3RhcnRQb2ludFNjcmF0Y2gpOwogICAgaWYgKGdyYW51bGFyaXR5ID4gMCkgewogICAgICBjb25zdCByZXBlYXQgPSBkdXBsaWNhdGVQb2ludHMgPyAyIDogMTsKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBncmFudWxhcml0eTsgaSsrKSB7CiAgICAgICAgc3RhcnRQb2ludCA9IE1hdHJpeDNfZGVmYXVsdC5tdWx0aXBseUJ5VmVjdG9yKG0sIHN0YXJ0UG9pbnQsIHN0YXJ0UG9pbnQpOwogICAgICAgIGxlZnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3Qoc3RhcnRQb2ludCwgcGl2b3QsIHNjcmF0Y2gxKTsKICAgICAgICBsZWZ0ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShsZWZ0LCBsZWZ0KTsKICAgICAgICBpZiAoIWxlZnRJc091dHNpZGUpIHsKICAgICAgICAgIGxlZnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubmVnYXRlKGxlZnQsIGxlZnQpOwogICAgICAgIH0KICAgICAgICBzdXJmYWNlUG9pbnQgPSBlbGxpcHNvaWQuc2NhbGVUb0dlb2RldGljU3VyZmFjZShzdGFydFBvaW50LCBzY3JhdGNoMik7CiAgICAgICAgZmluYWxQb3NpdGlvbnMgPSBhZGRQb3NpdGlvbigKICAgICAgICAgIHN1cmZhY2VQb2ludCwKICAgICAgICAgIGxlZnQsCiAgICAgICAgICBzaGFwZSwKICAgICAgICAgIGZpbmFsUG9zaXRpb25zLAogICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgaGVpZ2h0LAogICAgICAgICAgMSwKICAgICAgICAgIHJlcGVhdAogICAgICAgICk7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGxlZnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3Qoc3RhcnRQb2ludCwgcGl2b3QsIHNjcmF0Y2gxKTsKICAgICAgbGVmdCA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUobGVmdCwgbGVmdCk7CiAgICAgIGlmICghbGVmdElzT3V0c2lkZSkgewogICAgICAgIGxlZnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubmVnYXRlKGxlZnQsIGxlZnQpOwogICAgICB9CiAgICAgIHN1cmZhY2VQb2ludCA9IGVsbGlwc29pZC5zY2FsZVRvR2VvZGV0aWNTdXJmYWNlKHN0YXJ0UG9pbnQsIHNjcmF0Y2gyKTsKICAgICAgZmluYWxQb3NpdGlvbnMgPSBhZGRQb3NpdGlvbigKICAgICAgICBzdXJmYWNlUG9pbnQsCiAgICAgICAgbGVmdCwKICAgICAgICBzaGFwZSwKICAgICAgICBmaW5hbFBvc2l0aW9ucywKICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgaGVpZ2h0LAogICAgICAgIDEsCiAgICAgICAgMQogICAgICApOwogICAgICBlbmRQb2ludCA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShlbmRQb2ludCwgc3RhcnRQb2ludFNjcmF0Y2gpOwogICAgICBsZWZ0ID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KGVuZFBvaW50LCBwaXZvdCwgc2NyYXRjaDEpOwogICAgICBsZWZ0ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShsZWZ0LCBsZWZ0KTsKICAgICAgaWYgKCFsZWZ0SXNPdXRzaWRlKSB7CiAgICAgICAgbGVmdCA9IENhcnRlc2lhbjNfZGVmYXVsdC5uZWdhdGUobGVmdCwgbGVmdCk7CiAgICAgIH0KICAgICAgc3VyZmFjZVBvaW50ID0gZWxsaXBzb2lkLnNjYWxlVG9HZW9kZXRpY1N1cmZhY2UoZW5kUG9pbnQsIHNjcmF0Y2gyKTsKICAgICAgZmluYWxQb3NpdGlvbnMgPSBhZGRQb3NpdGlvbigKICAgICAgICBzdXJmYWNlUG9pbnQsCiAgICAgICAgbGVmdCwKICAgICAgICBzaGFwZSwKICAgICAgICBmaW5hbFBvc2l0aW9ucywKICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgaGVpZ2h0LAogICAgICAgIDEsCiAgICAgICAgMQogICAgICApOwogICAgfQogICAgcmV0dXJuIGZpbmFsUG9zaXRpb25zOwogIH0KICB2YXIgc2NyYXRjaDJBcnJheSwgc2NyYXRjaENhcnRlc2lhbjE2LCBzY3JhdGNoQ2FydGVzaWFuMjYsIHNjcmF0Y2hDYXJ0ZXNpYW4zNywgc2NyYXRjaENhcnRlc2lhbjQzLCBzY3JhdGNoQ2FydGVzaWFuNTIsIHNjcmF0Y2hDYXJ0ZXNpYW42Miwgc2NyYXRjaENhcnRlc2lhbjcsIHNjcmF0Y2hDYXJ0ZXNpYW44LCBzY3JhdGNoQ2FydGVzaWFuOSwgc2NyYXRjaDEsIHNjcmF0Y2gyLCBQb2x5bGluZVZvbHVtZUdlb21ldHJ5TGlicmFyeSwgY2FydG9ncmFwaGljLCBuZXh0U2NyYXRjaCwgcHJldlNjcmF0Y2gsIG5lZ2F0aXZlWCwgdHJhbnNmb3JtLCB0cmFuc2xhdGlvbiwgcm90YXRpb25aLCBzY2FsZU1hdHJpeCwgd2VzdFNjcmF0Y2gsIGZpbmFsUG9zU2NyYXRjaCwgaGVpZ2h0Q2FydGVzaWFuLCBjZW50ZXJTY3JhdGNoMiwgcXVhdGVyaW9uLCBzdGFydFBvaW50U2NyYXRjaCwgcm90TWF0cml4LCBzY3JhdGNoRm9yd2FyZFByb2plY3Rpb24sIHNjcmF0Y2hCYWNrd2FyZFByb2plY3Rpb24sIFBvbHlsaW5lVm9sdW1lR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfUG9seWxpbmVWb2x1bWVHZW9tZXRyeUxpYnJhcnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1BvbHlsaW5lVm9sdW1lR2VvbWV0cnlMaWJyYXJ5LmpzIigpIHsKICAgICAgaW5pdF9DYXJ0ZXNpYW4yKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NhcnRlc2lhbjQoKTsKICAgICAgaW5pdF9DYXJ0b2dyYXBoaWMoKTsKICAgICAgaW5pdF9Db3JuZXJUeXBlKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkVGFuZ2VudFBsYW5lKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X01hdHJpeDMoKTsKICAgICAgaW5pdF9NYXRyaXg0KCk7CiAgICAgIGluaXRfUG9seWxpbmVQaXBlbGluZSgpOwogICAgICBpbml0X1F1YXRlcm5pb24oKTsKICAgICAgaW5pdF9UcmFuc2Zvcm1zKCk7CiAgICAgIGluaXRfb25lVGltZVdhcm5pbmcoKTsKICAgICAgc2NyYXRjaDJBcnJheSA9IFtuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCksIG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKV07CiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4xNiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaENhcnRlc2lhbjI2ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQ2FydGVzaWFuMzcgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW40MyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaENhcnRlc2lhbjUyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQ2FydGVzaWFuNjIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW43ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQ2FydGVzaWFuOCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaENhcnRlc2lhbjkgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2gxID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgUG9seWxpbmVWb2x1bWVHZW9tZXRyeUxpYnJhcnkgPSB7fTsKICAgICAgY2FydG9ncmFwaGljID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIG5leHRTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBwcmV2U2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgbmVnYXRpdmVYID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgtMSwgMCwgMCk7CiAgICAgIHRyYW5zZm9ybSA9IG5ldyBNYXRyaXg0X2RlZmF1bHQoKTsKICAgICAgdHJhbnNsYXRpb24gPSBuZXcgTWF0cml4NF9kZWZhdWx0KCk7CiAgICAgIHJvdGF0aW9uWiA9IG5ldyBNYXRyaXgzX2RlZmF1bHQoKTsKICAgICAgc2NhbGVNYXRyaXggPSBNYXRyaXgzX2RlZmF1bHQuSURFTlRJVFkuY2xvbmUoKTsKICAgICAgd2VzdFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGZpbmFsUG9zU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW40X2RlZmF1bHQoKTsKICAgICAgaGVpZ2h0Q2FydGVzaWFuID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBjZW50ZXJTY3JhdGNoMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgcXVhdGVyaW9uID0gbmV3IFF1YXRlcm5pb25fZGVmYXVsdCgpOwogICAgICBzdGFydFBvaW50U2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgcm90TWF0cml4ID0gbmV3IE1hdHJpeDNfZGVmYXVsdCgpOwogICAgICBQb2x5bGluZVZvbHVtZUdlb21ldHJ5TGlicmFyeS5yZW1vdmVEdXBsaWNhdGVzRnJvbVNoYXBlID0gZnVuY3Rpb24oc2hhcGVQb3NpdGlvbnMpIHsKICAgICAgICBjb25zdCBsZW5ndGggPSBzaGFwZVBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgY29uc3QgY2xlYW5lZFBvc2l0aW9ucyA9IFtdOwogICAgICAgIGZvciAobGV0IGkwID0gbGVuZ3RoIC0gMSwgaTEgPSAwOyBpMSA8IGxlbmd0aDsgaTAgPSBpMSsrKSB7CiAgICAgICAgICBjb25zdCB2MDIgPSBzaGFwZVBvc2l0aW9uc1tpMF07CiAgICAgICAgICBjb25zdCB2MTIgPSBzaGFwZVBvc2l0aW9uc1tpMV07CiAgICAgICAgICBpZiAoIUNhcnRlc2lhbjJfZGVmYXVsdC5lcXVhbHModjAyLCB2MTIpKSB7CiAgICAgICAgICAgIGNsZWFuZWRQb3NpdGlvbnMucHVzaCh2MTIpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gY2xlYW5lZFBvc2l0aW9uczsKICAgICAgfTsKICAgICAgUG9seWxpbmVWb2x1bWVHZW9tZXRyeUxpYnJhcnkuYW5nbGVJc0dyZWF0ZXJUaGFuUGkgPSBmdW5jdGlvbihmb3J3YXJkLCBiYWNrd2FyZCwgcG9zaXRpb24sIGVsbGlwc29pZCkgewogICAgICAgIGNvbnN0IHRhbmdlbnRQbGFuZSA9IG5ldyBFbGxpcHNvaWRUYW5nZW50UGxhbmVfZGVmYXVsdChwb3NpdGlvbiwgZWxsaXBzb2lkKTsKICAgICAgICBjb25zdCBuZXh0ID0gdGFuZ2VudFBsYW5lLnByb2plY3RQb2ludE9udG9QbGFuZSgKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQocG9zaXRpb24sIGZvcndhcmQsIG5leHRTY3JhdGNoKSwKICAgICAgICAgIG5leHRTY3JhdGNoCiAgICAgICAgKTsKICAgICAgICBjb25zdCBwcmV2ID0gdGFuZ2VudFBsYW5lLnByb2plY3RQb2ludE9udG9QbGFuZSgKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQocG9zaXRpb24sIGJhY2t3YXJkLCBwcmV2U2NyYXRjaCksCiAgICAgICAgICBwcmV2U2NyYXRjaAogICAgICAgICk7CiAgICAgICAgcmV0dXJuIHByZXYueCAqIG5leHQueSAtIHByZXYueSAqIG5leHQueCA+PSAwOwogICAgICB9OwogICAgICBzY3JhdGNoRm9yd2FyZFByb2plY3Rpb24gPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hCYWNrd2FyZFByb2plY3Rpb24gPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIFBvbHlsaW5lVm9sdW1lR2VvbWV0cnlMaWJyYXJ5LmNvbXB1dGVQb3NpdGlvbnMgPSBmdW5jdGlvbihwb3NpdGlvbnMsIHNoYXBlMkQsIGJvdW5kaW5nUmVjdGFuZ2xlLCBnZW9tZXRyeSwgZHVwbGljYXRlUG9pbnRzKSB7CiAgICAgICAgY29uc3QgZWxsaXBzb2lkID0gZ2VvbWV0cnkuX2VsbGlwc29pZDsKICAgICAgICBjb25zdCBoZWlnaHRzID0gc2NhbGVUb1N1cmZhY2UocG9zaXRpb25zLCBlbGxpcHNvaWQpOwogICAgICAgIGNvbnN0IGdyYW51bGFyaXR5ID0gZ2VvbWV0cnkuX2dyYW51bGFyaXR5OwogICAgICAgIGNvbnN0IGNvcm5lclR5cGUgPSBnZW9tZXRyeS5fY29ybmVyVHlwZTsKICAgICAgICBjb25zdCBzaGFwZUZvclNpZGVzID0gZHVwbGljYXRlUG9pbnRzID8gY29udmVydFNoYXBlVG8zRER1cGxpY2F0ZShzaGFwZTJELCBib3VuZGluZ1JlY3RhbmdsZSkgOiBjb252ZXJ0U2hhcGVUbzNEKHNoYXBlMkQsIGJvdW5kaW5nUmVjdGFuZ2xlKTsKICAgICAgICBjb25zdCBzaGFwZUZvckVuZHMgPSBkdXBsaWNhdGVQb2ludHMgPyBjb252ZXJ0U2hhcGVUbzNEKHNoYXBlMkQsIGJvdW5kaW5nUmVjdGFuZ2xlKSA6IHZvaWQgMDsKICAgICAgICBjb25zdCBoZWlnaHRPZmZzZXQgPSBib3VuZGluZ1JlY3RhbmdsZS5oZWlnaHQgLyAyOwogICAgICAgIGNvbnN0IHdpZHRoID0gYm91bmRpbmdSZWN0YW5nbGUud2lkdGggLyAyOwogICAgICAgIGxldCBsZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoOwogICAgICAgIGxldCBmaW5hbFBvc2l0aW9ucyA9IFtdOwogICAgICAgIGxldCBlbmRzID0gZHVwbGljYXRlUG9pbnRzID8gW10gOiB2b2lkIDA7CiAgICAgICAgbGV0IGZvcndhcmQgPSBzY3JhdGNoQ2FydGVzaWFuMTY7CiAgICAgICAgbGV0IGJhY2t3YXJkID0gc2NyYXRjaENhcnRlc2lhbjI2OwogICAgICAgIGxldCBjb3JuZXJEaXJlY3Rpb24gPSBzY3JhdGNoQ2FydGVzaWFuMzc7CiAgICAgICAgbGV0IHN1cmZhY2VOb3JtYWwgPSBzY3JhdGNoQ2FydGVzaWFuNDM7CiAgICAgICAgbGV0IHBpdm90ID0gc2NyYXRjaENhcnRlc2lhbjUyOwogICAgICAgIGxldCBzdGFydCA9IHNjcmF0Y2hDYXJ0ZXNpYW42MjsKICAgICAgICBsZXQgZW5kID0gc2NyYXRjaENhcnRlc2lhbjc7CiAgICAgICAgbGV0IGxlZnQgPSBzY3JhdGNoQ2FydGVzaWFuODsKICAgICAgICBsZXQgcHJldmlvdXNQb3NpdGlvbiA9IHNjcmF0Y2hDYXJ0ZXNpYW45OwogICAgICAgIGxldCBwb3NpdGlvbiA9IHBvc2l0aW9uc1swXTsKICAgICAgICBsZXQgbmV4dFBvc2l0aW9uID0gcG9zaXRpb25zWzFdOwogICAgICAgIHN1cmZhY2VOb3JtYWwgPSBlbGxpcHNvaWQuZ2VvZGV0aWNTdXJmYWNlTm9ybWFsKHBvc2l0aW9uLCBzdXJmYWNlTm9ybWFsKTsKICAgICAgICBmb3J3YXJkID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KG5leHRQb3NpdGlvbiwgcG9zaXRpb24sIGZvcndhcmQpOwogICAgICAgIGZvcndhcmQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKGZvcndhcmQsIGZvcndhcmQpOwogICAgICAgIGxlZnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY3Jvc3Moc3VyZmFjZU5vcm1hbCwgZm9yd2FyZCwgbGVmdCk7CiAgICAgICAgbGVmdCA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUobGVmdCwgbGVmdCk7CiAgICAgICAgbGV0IGgwID0gaGVpZ2h0c1swXTsKICAgICAgICBsZXQgaDEgPSBoZWlnaHRzWzFdOwogICAgICAgIGlmIChkdXBsaWNhdGVQb2ludHMpIHsKICAgICAgICAgIGVuZHMgPSBhZGRQb3NpdGlvbigKICAgICAgICAgICAgcG9zaXRpb24sCiAgICAgICAgICAgIGxlZnQsCiAgICAgICAgICAgIHNoYXBlRm9yRW5kcywKICAgICAgICAgICAgZW5kcywKICAgICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgICBoMCArIGhlaWdodE9mZnNldCwKICAgICAgICAgICAgMSwKICAgICAgICAgICAgMQogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgcHJldmlvdXNQb3NpdGlvbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShwb3NpdGlvbiwgcHJldmlvdXNQb3NpdGlvbik7CiAgICAgICAgcG9zaXRpb24gPSBuZXh0UG9zaXRpb247CiAgICAgICAgYmFja3dhcmQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubmVnYXRlKGZvcndhcmQsIGJhY2t3YXJkKTsKICAgICAgICBsZXQgc3ViZGl2aWRlZEhlaWdodHM7CiAgICAgICAgbGV0IHN1YmRpdmlkZWRQb3NpdGlvbnM7CiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBsZW5ndGggLSAxOyBpKyspIHsKICAgICAgICAgIGNvbnN0IHJlcGVhdCA9IGR1cGxpY2F0ZVBvaW50cyA/IDIgOiAxOwogICAgICAgICAgbmV4dFBvc2l0aW9uID0gcG9zaXRpb25zW2kgKyAxXTsKICAgICAgICAgIGlmIChwb3NpdGlvbi5lcXVhbHMobmV4dFBvc2l0aW9uKSkgewogICAgICAgICAgICBvbmVUaW1lV2FybmluZ19kZWZhdWx0KAogICAgICAgICAgICAgICJQb3NpdGlvbnMgYXJlIHRvbyBjbG9zZSBhbmQgYXJlIGNvbnNpZGVyZWQgZXF1aXZhbGVudCB3aXRoIHJvdW5kaW5nIGVycm9yLiIKICAgICAgICAgICAgKTsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICBmb3J3YXJkID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KG5leHRQb3NpdGlvbiwgcG9zaXRpb24sIGZvcndhcmQpOwogICAgICAgICAgZm9yd2FyZCA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoZm9yd2FyZCwgZm9yd2FyZCk7CiAgICAgICAgICBzdXJmYWNlTm9ybWFsID0gZWxsaXBzb2lkLmdlb2RldGljU3VyZmFjZU5vcm1hbChwb3NpdGlvbiwgc3VyZmFjZU5vcm1hbCk7CiAgICAgICAgICBjb25zdCBmb3J3YXJkUHJvamVjdGlvbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKAogICAgICAgICAgICBzdXJmYWNlTm9ybWFsLAogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KGZvcndhcmQsIHN1cmZhY2VOb3JtYWwpLAogICAgICAgICAgICBzY3JhdGNoRm9yd2FyZFByb2plY3Rpb24KICAgICAgICAgICk7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoZm9yd2FyZCwgZm9yd2FyZFByb2plY3Rpb24sIGZvcndhcmRQcm9qZWN0aW9uKTsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoZm9yd2FyZFByb2plY3Rpb24sIGZvcndhcmRQcm9qZWN0aW9uKTsKICAgICAgICAgIGNvbnN0IGJhY2t3YXJkUHJvamVjdGlvbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKAogICAgICAgICAgICBzdXJmYWNlTm9ybWFsLAogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KGJhY2t3YXJkLCBzdXJmYWNlTm9ybWFsKSwKICAgICAgICAgICAgc2NyYXRjaEJhY2t3YXJkUHJvamVjdGlvbgogICAgICAgICAgKTsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChiYWNrd2FyZCwgYmFja3dhcmRQcm9qZWN0aW9uLCBiYWNrd2FyZFByb2plY3Rpb24pOwogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShiYWNrd2FyZFByb2plY3Rpb24sIGJhY2t3YXJkUHJvamVjdGlvbik7CiAgICAgICAgICBjb25zdCBkb0Nvcm5lciA9ICFNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbigKICAgICAgICAgICAgTWF0aC5hYnMoQ2FydGVzaWFuM19kZWZhdWx0LmRvdChmb3J3YXJkUHJvamVjdGlvbiwgYmFja3dhcmRQcm9qZWN0aW9uKSksCiAgICAgICAgICAgIDEsCiAgICAgICAgICAgIE1hdGhfZGVmYXVsdC5FUFNJTE9ONwogICAgICAgICAgKTsKICAgICAgICAgIGlmIChkb0Nvcm5lcikgewogICAgICAgICAgICBjb3JuZXJEaXJlY3Rpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKGZvcndhcmQsIGJhY2t3YXJkLCBjb3JuZXJEaXJlY3Rpb24pOwogICAgICAgICAgICBjb3JuZXJEaXJlY3Rpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKGNvcm5lckRpcmVjdGlvbiwgY29ybmVyRGlyZWN0aW9uKTsKICAgICAgICAgICAgY29ybmVyRGlyZWN0aW9uID0gQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKAogICAgICAgICAgICAgIGNvcm5lckRpcmVjdGlvbiwKICAgICAgICAgICAgICBzdXJmYWNlTm9ybWFsLAogICAgICAgICAgICAgIGNvcm5lckRpcmVjdGlvbgogICAgICAgICAgICApOwogICAgICAgICAgICBjb3JuZXJEaXJlY3Rpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY3Jvc3MoCiAgICAgICAgICAgICAgc3VyZmFjZU5vcm1hbCwKICAgICAgICAgICAgICBjb3JuZXJEaXJlY3Rpb24sCiAgICAgICAgICAgICAgY29ybmVyRGlyZWN0aW9uCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIGNvcm5lckRpcmVjdGlvbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoY29ybmVyRGlyZWN0aW9uLCBjb3JuZXJEaXJlY3Rpb24pOwogICAgICAgICAgICBjb25zdCBzY2FsYXIgPSAxIC8gTWF0aC5tYXgoCiAgICAgICAgICAgICAgMC4yNSwKICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlKAogICAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKGNvcm5lckRpcmVjdGlvbiwgYmFja3dhcmQsIHNjcmF0Y2gxKQogICAgICAgICAgICAgICkKICAgICAgICAgICAgKTsKICAgICAgICAgICAgY29uc3QgbGVmdElzT3V0c2lkZSA9IFBvbHlsaW5lVm9sdW1lR2VvbWV0cnlMaWJyYXJ5LmFuZ2xlSXNHcmVhdGVyVGhhblBpKAogICAgICAgICAgICAgIGZvcndhcmQsCiAgICAgICAgICAgICAgYmFja3dhcmQsCiAgICAgICAgICAgICAgcG9zaXRpb24sCiAgICAgICAgICAgICAgZWxsaXBzb2lkCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIGlmIChsZWZ0SXNPdXRzaWRlKSB7CiAgICAgICAgICAgICAgcGl2b3QgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKAogICAgICAgICAgICAgICAgcG9zaXRpb24sCiAgICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcigKICAgICAgICAgICAgICAgICAgY29ybmVyRGlyZWN0aW9uLAogICAgICAgICAgICAgICAgICBzY2FsYXIgKiB3aWR0aCwKICAgICAgICAgICAgICAgICAgY29ybmVyRGlyZWN0aW9uCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgcGl2b3QKICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIHN0YXJ0ID0gQ2FydGVzaWFuM19kZWZhdWx0LmFkZCgKICAgICAgICAgICAgICAgIHBpdm90LAogICAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIobGVmdCwgd2lkdGgsIHN0YXJ0KSwKICAgICAgICAgICAgICAgIHN0YXJ0CiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICBzY3JhdGNoMkFycmF5WzBdID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKHByZXZpb3VzUG9zaXRpb24sIHNjcmF0Y2gyQXJyYXlbMF0pOwogICAgICAgICAgICAgIHNjcmF0Y2gyQXJyYXlbMV0gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoc3RhcnQsIHNjcmF0Y2gyQXJyYXlbMV0pOwogICAgICAgICAgICAgIHN1YmRpdmlkZWRIZWlnaHRzID0gc3ViZGl2aWRlSGVpZ2h0czIoCiAgICAgICAgICAgICAgICBzY3JhdGNoMkFycmF5LAogICAgICAgICAgICAgICAgaDAgKyBoZWlnaHRPZmZzZXQsCiAgICAgICAgICAgICAgICBoMSArIGhlaWdodE9mZnNldCwKICAgICAgICAgICAgICAgIGdyYW51bGFyaXR5CiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICBzdWJkaXZpZGVkUG9zaXRpb25zID0gUG9seWxpbmVQaXBlbGluZV9kZWZhdWx0LmdlbmVyYXRlQXJjKHsKICAgICAgICAgICAgICAgIHBvc2l0aW9uczogc2NyYXRjaDJBcnJheSwKICAgICAgICAgICAgICAgIGdyYW51bGFyaXR5LAogICAgICAgICAgICAgICAgZWxsaXBzb2lkCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgZmluYWxQb3NpdGlvbnMgPSBhZGRQb3NpdGlvbnMoCiAgICAgICAgICAgICAgICBzdWJkaXZpZGVkUG9zaXRpb25zLAogICAgICAgICAgICAgICAgbGVmdCwKICAgICAgICAgICAgICAgIHNoYXBlRm9yU2lkZXMsCiAgICAgICAgICAgICAgICBmaW5hbFBvc2l0aW9ucywKICAgICAgICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgICAgICAgIHN1YmRpdmlkZWRIZWlnaHRzLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgbGVmdCA9IENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyhzdXJmYWNlTm9ybWFsLCBmb3J3YXJkLCBsZWZ0KTsKICAgICAgICAgICAgICBsZWZ0ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShsZWZ0LCBsZWZ0KTsKICAgICAgICAgICAgICBlbmQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKAogICAgICAgICAgICAgICAgcGl2b3QsCiAgICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcihsZWZ0LCB3aWR0aCwgZW5kKSwKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgaWYgKGNvcm5lclR5cGUgPT09IENvcm5lclR5cGVfZGVmYXVsdC5ST1VOREVEIHx8IGNvcm5lclR5cGUgPT09IENvcm5lclR5cGVfZGVmYXVsdC5CRVZFTEVEKSB7CiAgICAgICAgICAgICAgICBjb21wdXRlUm91bmRDb3JuZXIoCiAgICAgICAgICAgICAgICAgIHBpdm90LAogICAgICAgICAgICAgICAgICBzdGFydCwKICAgICAgICAgICAgICAgICAgZW5kLAogICAgICAgICAgICAgICAgICBjb3JuZXJUeXBlLAogICAgICAgICAgICAgICAgICBsZWZ0SXNPdXRzaWRlLAogICAgICAgICAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICAgICAgICAgIGZpbmFsUG9zaXRpb25zLAogICAgICAgICAgICAgICAgICBzaGFwZUZvclNpZGVzLAogICAgICAgICAgICAgICAgICBoMSArIGhlaWdodE9mZnNldCwKICAgICAgICAgICAgICAgICAgZHVwbGljYXRlUG9pbnRzCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBjb3JuZXJEaXJlY3Rpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubmVnYXRlKGNvcm5lckRpcmVjdGlvbiwgY29ybmVyRGlyZWN0aW9uKTsKICAgICAgICAgICAgICAgIGZpbmFsUG9zaXRpb25zID0gYWRkUG9zaXRpb24oCiAgICAgICAgICAgICAgICAgIHBvc2l0aW9uLAogICAgICAgICAgICAgICAgICBjb3JuZXJEaXJlY3Rpb24sCiAgICAgICAgICAgICAgICAgIHNoYXBlRm9yU2lkZXMsCiAgICAgICAgICAgICAgICAgIGZpbmFsUG9zaXRpb25zLAogICAgICAgICAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICAgICAgICAgIGgxICsgaGVpZ2h0T2Zmc2V0LAogICAgICAgICAgICAgICAgICBzY2FsYXIsCiAgICAgICAgICAgICAgICAgIHJlcGVhdAogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcHJldmlvdXNQb3NpdGlvbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShlbmQsIHByZXZpb3VzUG9zaXRpb24pOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHBpdm90ID0gQ2FydGVzaWFuM19kZWZhdWx0LmFkZCgKICAgICAgICAgICAgICAgIHBvc2l0aW9uLAogICAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIoCiAgICAgICAgICAgICAgICAgIGNvcm5lckRpcmVjdGlvbiwKICAgICAgICAgICAgICAgICAgc2NhbGFyICogd2lkdGgsCiAgICAgICAgICAgICAgICAgIGNvcm5lckRpcmVjdGlvbgogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIHBpdm90CiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICBzdGFydCA9IENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoCiAgICAgICAgICAgICAgICBwaXZvdCwKICAgICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKGxlZnQsIC13aWR0aCwgc3RhcnQpLAogICAgICAgICAgICAgICAgc3RhcnQKICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIHNjcmF0Y2gyQXJyYXlbMF0gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUocHJldmlvdXNQb3NpdGlvbiwgc2NyYXRjaDJBcnJheVswXSk7CiAgICAgICAgICAgICAgc2NyYXRjaDJBcnJheVsxXSA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShzdGFydCwgc2NyYXRjaDJBcnJheVsxXSk7CiAgICAgICAgICAgICAgc3ViZGl2aWRlZEhlaWdodHMgPSBzdWJkaXZpZGVIZWlnaHRzMigKICAgICAgICAgICAgICAgIHNjcmF0Y2gyQXJyYXksCiAgICAgICAgICAgICAgICBoMCArIGhlaWdodE9mZnNldCwKICAgICAgICAgICAgICAgIGgxICsgaGVpZ2h0T2Zmc2V0LAogICAgICAgICAgICAgICAgZ3JhbnVsYXJpdHkKICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIHN1YmRpdmlkZWRQb3NpdGlvbnMgPSBQb2x5bGluZVBpcGVsaW5lX2RlZmF1bHQuZ2VuZXJhdGVBcmMoewogICAgICAgICAgICAgICAgcG9zaXRpb25zOiBzY3JhdGNoMkFycmF5LAogICAgICAgICAgICAgICAgZ3JhbnVsYXJpdHksCiAgICAgICAgICAgICAgICBlbGxpcHNvaWQKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBmaW5hbFBvc2l0aW9ucyA9IGFkZFBvc2l0aW9ucygKICAgICAgICAgICAgICAgIHN1YmRpdmlkZWRQb3NpdGlvbnMsCiAgICAgICAgICAgICAgICBsZWZ0LAogICAgICAgICAgICAgICAgc2hhcGVGb3JTaWRlcywKICAgICAgICAgICAgICAgIGZpbmFsUG9zaXRpb25zLAogICAgICAgICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgICAgICAgc3ViZGl2aWRlZEhlaWdodHMsCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICBsZWZ0ID0gQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKHN1cmZhY2VOb3JtYWwsIGZvcndhcmQsIGxlZnQpOwogICAgICAgICAgICAgIGxlZnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKGxlZnQsIGxlZnQpOwogICAgICAgICAgICAgIGVuZCA9IENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoCiAgICAgICAgICAgICAgICBwaXZvdCwKICAgICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKGxlZnQsIC13aWR0aCwgZW5kKSwKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgaWYgKGNvcm5lclR5cGUgPT09IENvcm5lclR5cGVfZGVmYXVsdC5ST1VOREVEIHx8IGNvcm5lclR5cGUgPT09IENvcm5lclR5cGVfZGVmYXVsdC5CRVZFTEVEKSB7CiAgICAgICAgICAgICAgICBjb21wdXRlUm91bmRDb3JuZXIoCiAgICAgICAgICAgICAgICAgIHBpdm90LAogICAgICAgICAgICAgICAgICBzdGFydCwKICAgICAgICAgICAgICAgICAgZW5kLAogICAgICAgICAgICAgICAgICBjb3JuZXJUeXBlLAogICAgICAgICAgICAgICAgICBsZWZ0SXNPdXRzaWRlLAogICAgICAgICAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICAgICAgICAgIGZpbmFsUG9zaXRpb25zLAogICAgICAgICAgICAgICAgICBzaGFwZUZvclNpZGVzLAogICAgICAgICAgICAgICAgICBoMSArIGhlaWdodE9mZnNldCwKICAgICAgICAgICAgICAgICAgZHVwbGljYXRlUG9pbnRzCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBmaW5hbFBvc2l0aW9ucyA9IGFkZFBvc2l0aW9uKAogICAgICAgICAgICAgICAgICBwb3NpdGlvbiwKICAgICAgICAgICAgICAgICAgY29ybmVyRGlyZWN0aW9uLAogICAgICAgICAgICAgICAgICBzaGFwZUZvclNpZGVzLAogICAgICAgICAgICAgICAgICBmaW5hbFBvc2l0aW9ucywKICAgICAgICAgICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgICAgICAgICBoMSArIGhlaWdodE9mZnNldCwKICAgICAgICAgICAgICAgICAgc2NhbGFyLAogICAgICAgICAgICAgICAgICByZXBlYXQKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHByZXZpb3VzUG9zaXRpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoZW5kLCBwcmV2aW91c1Bvc2l0aW9uKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBiYWNrd2FyZCA9IENhcnRlc2lhbjNfZGVmYXVsdC5uZWdhdGUoZm9yd2FyZCwgYmFja3dhcmQpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZmluYWxQb3NpdGlvbnMgPSBhZGRQb3NpdGlvbigKICAgICAgICAgICAgICBwcmV2aW91c1Bvc2l0aW9uLAogICAgICAgICAgICAgIGxlZnQsCiAgICAgICAgICAgICAgc2hhcGVGb3JTaWRlcywKICAgICAgICAgICAgICBmaW5hbFBvc2l0aW9ucywKICAgICAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICAgICAgaDAgKyBoZWlnaHRPZmZzZXQsCiAgICAgICAgICAgICAgMSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHByZXZpb3VzUG9zaXRpb24gPSBwb3NpdGlvbjsKICAgICAgICAgIH0KICAgICAgICAgIGgwID0gaDE7CiAgICAgICAgICBoMSA9IGhlaWdodHNbaSArIDFdOwogICAgICAgICAgcG9zaXRpb24gPSBuZXh0UG9zaXRpb247CiAgICAgICAgfQogICAgICAgIHNjcmF0Y2gyQXJyYXlbMF0gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUocHJldmlvdXNQb3NpdGlvbiwgc2NyYXRjaDJBcnJheVswXSk7CiAgICAgICAgc2NyYXRjaDJBcnJheVsxXSA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShwb3NpdGlvbiwgc2NyYXRjaDJBcnJheVsxXSk7CiAgICAgICAgc3ViZGl2aWRlZEhlaWdodHMgPSBzdWJkaXZpZGVIZWlnaHRzMigKICAgICAgICAgIHNjcmF0Y2gyQXJyYXksCiAgICAgICAgICBoMCArIGhlaWdodE9mZnNldCwKICAgICAgICAgIGgxICsgaGVpZ2h0T2Zmc2V0LAogICAgICAgICAgZ3JhbnVsYXJpdHkKICAgICAgICApOwogICAgICAgIHN1YmRpdmlkZWRQb3NpdGlvbnMgPSBQb2x5bGluZVBpcGVsaW5lX2RlZmF1bHQuZ2VuZXJhdGVBcmMoewogICAgICAgICAgcG9zaXRpb25zOiBzY3JhdGNoMkFycmF5LAogICAgICAgICAgZ3JhbnVsYXJpdHksCiAgICAgICAgICBlbGxpcHNvaWQKICAgICAgICB9KTsKICAgICAgICBmaW5hbFBvc2l0aW9ucyA9IGFkZFBvc2l0aW9ucygKICAgICAgICAgIHN1YmRpdmlkZWRQb3NpdGlvbnMsCiAgICAgICAgICBsZWZ0LAogICAgICAgICAgc2hhcGVGb3JTaWRlcywKICAgICAgICAgIGZpbmFsUG9zaXRpb25zLAogICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgc3ViZGl2aWRlZEhlaWdodHMsCiAgICAgICAgICAxCiAgICAgICAgKTsKICAgICAgICBpZiAoZHVwbGljYXRlUG9pbnRzKSB7CiAgICAgICAgICBlbmRzID0gYWRkUG9zaXRpb24oCiAgICAgICAgICAgIHBvc2l0aW9uLAogICAgICAgICAgICBsZWZ0LAogICAgICAgICAgICBzaGFwZUZvckVuZHMsCiAgICAgICAgICAgIGVuZHMsCiAgICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgICAgaDEgKyBoZWlnaHRPZmZzZXQsCiAgICAgICAgICAgIDEsCiAgICAgICAgICAgIDEKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIGxlbmd0aCA9IGZpbmFsUG9zaXRpb25zLmxlbmd0aDsKICAgICAgICBjb25zdCBwb3NMZW5ndGggPSBkdXBsaWNhdGVQb2ludHMgPyBsZW5ndGggKyBlbmRzLmxlbmd0aCA6IGxlbmd0aDsKICAgICAgICBjb25zdCBjb21iaW5lZFBvc2l0aW9ucyA9IG5ldyBGbG9hdDY0QXJyYXkocG9zTGVuZ3RoKTsKICAgICAgICBjb21iaW5lZFBvc2l0aW9ucy5zZXQoZmluYWxQb3NpdGlvbnMpOwogICAgICAgIGlmIChkdXBsaWNhdGVQb2ludHMpIHsKICAgICAgICAgIGNvbWJpbmVkUG9zaXRpb25zLnNldChlbmRzLCBsZW5ndGgpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gY29tYmluZWRQb3NpdGlvbnM7CiAgICAgIH07CiAgICAgIFBvbHlsaW5lVm9sdW1lR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQgPSBQb2x5bGluZVZvbHVtZUdlb21ldHJ5TGlicmFyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0NvcnJpZG9yR2VvbWV0cnlMaWJyYXJ5LmpzCiAgZnVuY3Rpb24gY29tcHV0ZVJvdW5kQ29ybmVyMihjb3JuZXJQb2ludCwgc3RhcnRQb2ludCwgZW5kUG9pbnQsIGNvcm5lclR5cGUsIGxlZnRJc091dHNpZGUpIHsKICAgIGNvbnN0IGFuZ2xlID0gQ2FydGVzaWFuM19kZWZhdWx0LmFuZ2xlQmV0d2VlbigKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHN0YXJ0UG9pbnQsIGNvcm5lclBvaW50LCBzY3JhdGNoMTIpLAogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoZW5kUG9pbnQsIGNvcm5lclBvaW50LCBzY3JhdGNoMjIpCiAgICApOwogICAgY29uc3QgZ3JhbnVsYXJpdHkgPSBjb3JuZXJUeXBlID09PSBDb3JuZXJUeXBlX2RlZmF1bHQuQkVWRUxFRCA/IDEgOiBNYXRoLmNlaWwoYW5nbGUgLyBNYXRoX2RlZmF1bHQudG9SYWRpYW5zKDUpKSArIDE7CiAgICBjb25zdCBzaXplID0gZ3JhbnVsYXJpdHkgKiAzOwogICAgY29uc3QgYXJyYXkgPSBuZXcgQXJyYXkoc2l6ZSk7CiAgICBhcnJheVtzaXplIC0gM10gPSBlbmRQb2ludC54OwogICAgYXJyYXlbc2l6ZSAtIDJdID0gZW5kUG9pbnQueTsKICAgIGFycmF5W3NpemUgLSAxXSA9IGVuZFBvaW50Lno7CiAgICBsZXQgbTsKICAgIGlmIChsZWZ0SXNPdXRzaWRlKSB7CiAgICAgIG0gPSBNYXRyaXgzX2RlZmF1bHQuZnJvbVF1YXRlcm5pb24oCiAgICAgICAgUXVhdGVybmlvbl9kZWZhdWx0LmZyb21BeGlzQW5nbGUoCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubmVnYXRlKGNvcm5lclBvaW50LCBzY3JhdGNoMTIpLAogICAgICAgICAgYW5nbGUgLyBncmFudWxhcml0eSwKICAgICAgICAgIHF1YXRlcmlvbjIKICAgICAgICApLAogICAgICAgIHJvdE1hdHJpeDIKICAgICAgKTsKICAgIH0gZWxzZSB7CiAgICAgIG0gPSBNYXRyaXgzX2RlZmF1bHQuZnJvbVF1YXRlcm5pb24oCiAgICAgICAgUXVhdGVybmlvbl9kZWZhdWx0LmZyb21BeGlzQW5nbGUoY29ybmVyUG9pbnQsIGFuZ2xlIC8gZ3JhbnVsYXJpdHksIHF1YXRlcmlvbjIpLAogICAgICAgIHJvdE1hdHJpeDIKICAgICAgKTsKICAgIH0KICAgIGxldCBpbmRleCA9IDA7CiAgICBzdGFydFBvaW50ID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKHN0YXJ0UG9pbnQsIHNjcmF0Y2gxMik7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdyYW51bGFyaXR5OyBpKyspIHsKICAgICAgc3RhcnRQb2ludCA9IE1hdHJpeDNfZGVmYXVsdC5tdWx0aXBseUJ5VmVjdG9yKG0sIHN0YXJ0UG9pbnQsIHN0YXJ0UG9pbnQpOwogICAgICBhcnJheVtpbmRleCsrXSA9IHN0YXJ0UG9pbnQueDsKICAgICAgYXJyYXlbaW5kZXgrK10gPSBzdGFydFBvaW50Lnk7CiAgICAgIGFycmF5W2luZGV4KytdID0gc3RhcnRQb2ludC56OwogICAgfQogICAgcmV0dXJuIGFycmF5OwogIH0KICBmdW5jdGlvbiBhZGRFbmRDYXBzKGNhbGN1bGF0ZWRQb3NpdGlvbnMpIHsKICAgIGxldCBjb3JuZXJQb2ludCA9IGNhcnRlc2lhbjE7CiAgICBsZXQgc3RhcnRQb2ludCA9IGNhcnRlc2lhbjI7CiAgICBsZXQgZW5kUG9pbnQgPSBjYXJ0ZXNpYW4zOwogICAgbGV0IGxlZnRFZGdlID0gY2FsY3VsYXRlZFBvc2l0aW9uc1sxXTsKICAgIHN0YXJ0UG9pbnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KAogICAgICBjYWxjdWxhdGVkUG9zaXRpb25zWzFdLAogICAgICBsZWZ0RWRnZS5sZW5ndGggLSAzLAogICAgICBzdGFydFBvaW50CiAgICApOwogICAgZW5kUG9pbnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KGNhbGN1bGF0ZWRQb3NpdGlvbnNbMF0sIDAsIGVuZFBvaW50KTsKICAgIGNvcm5lclBvaW50ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1pZHBvaW50KHN0YXJ0UG9pbnQsIGVuZFBvaW50LCBjb3JuZXJQb2ludCk7CiAgICBjb25zdCBmaXJzdEVuZENhcCA9IGNvbXB1dGVSb3VuZENvcm5lcjIoCiAgICAgIGNvcm5lclBvaW50LAogICAgICBzdGFydFBvaW50LAogICAgICBlbmRQb2ludCwKICAgICAgQ29ybmVyVHlwZV9kZWZhdWx0LlJPVU5ERUQsCiAgICAgIGZhbHNlCiAgICApOwogICAgY29uc3QgbGVuZ3RoID0gY2FsY3VsYXRlZFBvc2l0aW9ucy5sZW5ndGggLSAxOwogICAgY29uc3QgcmlnaHRFZGdlID0gY2FsY3VsYXRlZFBvc2l0aW9uc1tsZW5ndGggLSAxXTsKICAgIGxlZnRFZGdlID0gY2FsY3VsYXRlZFBvc2l0aW9uc1tsZW5ndGhdOwogICAgc3RhcnRQb2ludCA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkoCiAgICAgIHJpZ2h0RWRnZSwKICAgICAgcmlnaHRFZGdlLmxlbmd0aCAtIDMsCiAgICAgIHN0YXJ0UG9pbnQKICAgICk7CiAgICBlbmRQb2ludCA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkobGVmdEVkZ2UsIDAsIGVuZFBvaW50KTsKICAgIGNvcm5lclBvaW50ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm1pZHBvaW50KHN0YXJ0UG9pbnQsIGVuZFBvaW50LCBjb3JuZXJQb2ludCk7CiAgICBjb25zdCBsYXN0RW5kQ2FwID0gY29tcHV0ZVJvdW5kQ29ybmVyMigKICAgICAgY29ybmVyUG9pbnQsCiAgICAgIHN0YXJ0UG9pbnQsCiAgICAgIGVuZFBvaW50LAogICAgICBDb3JuZXJUeXBlX2RlZmF1bHQuUk9VTkRFRCwKICAgICAgZmFsc2UKICAgICk7CiAgICByZXR1cm4gW2ZpcnN0RW5kQ2FwLCBsYXN0RW5kQ2FwXTsKICB9CiAgZnVuY3Rpb24gY29tcHV0ZU1pdGVyZWRDb3JuZXIocG9zaXRpb24sIGxlZnRDb3JuZXJEaXJlY3Rpb24sIGxhc3RQb2ludCwgbGVmdElzT3V0c2lkZSkgewogICAgbGV0IGNvcm5lclBvaW50ID0gc2NyYXRjaDEyOwogICAgaWYgKGxlZnRJc091dHNpZGUpIHsKICAgICAgY29ybmVyUG9pbnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKHBvc2l0aW9uLCBsZWZ0Q29ybmVyRGlyZWN0aW9uLCBjb3JuZXJQb2ludCk7CiAgICB9IGVsc2UgewogICAgICBsZWZ0Q29ybmVyRGlyZWN0aW9uID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5lZ2F0ZSgKICAgICAgICBsZWZ0Q29ybmVyRGlyZWN0aW9uLAogICAgICAgIGxlZnRDb3JuZXJEaXJlY3Rpb24KICAgICAgKTsKICAgICAgY29ybmVyUG9pbnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKHBvc2l0aW9uLCBsZWZ0Q29ybmVyRGlyZWN0aW9uLCBjb3JuZXJQb2ludCk7CiAgICB9CiAgICByZXR1cm4gWwogICAgICBjb3JuZXJQb2ludC54LAogICAgICBjb3JuZXJQb2ludC55LAogICAgICBjb3JuZXJQb2ludC56LAogICAgICBsYXN0UG9pbnQueCwKICAgICAgbGFzdFBvaW50LnksCiAgICAgIGxhc3RQb2ludC56CiAgICBdOwogIH0KICBmdW5jdGlvbiBhZGRTaGlmdGVkUG9zaXRpb25zKHBvc2l0aW9ucywgbGVmdCwgc2NhbGFyLCBjYWxjdWxhdGVkUG9zaXRpb25zKSB7CiAgICBjb25zdCByaWdodFBvc2l0aW9ucyA9IG5ldyBBcnJheShwb3NpdGlvbnMubGVuZ3RoKTsKICAgIGNvbnN0IGxlZnRQb3NpdGlvbnMgPSBuZXcgQXJyYXkocG9zaXRpb25zLmxlbmd0aCk7CiAgICBjb25zdCBzY2FsZWRMZWZ0ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIobGVmdCwgc2NhbGFyLCBzY3JhdGNoMTIpOwogICAgY29uc3Qgc2NhbGVkUmlnaHQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubmVnYXRlKHNjYWxlZExlZnQsIHNjcmF0Y2gyMik7CiAgICBsZXQgcmlnaHRJbmRleCA9IDA7CiAgICBsZXQgbGVmdEluZGV4ID0gcG9zaXRpb25zLmxlbmd0aCAtIDE7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvc2l0aW9ucy5sZW5ndGg7IGkgKz0gMykgewogICAgICBjb25zdCBwb3MgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KHBvc2l0aW9ucywgaSwgc2NyYXRjaDMpOwogICAgICBjb25zdCByaWdodFBvcyA9IENhcnRlc2lhbjNfZGVmYXVsdC5hZGQocG9zLCBzY2FsZWRSaWdodCwgc2NyYXRjaDQpOwogICAgICByaWdodFBvc2l0aW9uc1tyaWdodEluZGV4KytdID0gcmlnaHRQb3MueDsKICAgICAgcmlnaHRQb3NpdGlvbnNbcmlnaHRJbmRleCsrXSA9IHJpZ2h0UG9zLnk7CiAgICAgIHJpZ2h0UG9zaXRpb25zW3JpZ2h0SW5kZXgrK10gPSByaWdodFBvcy56OwogICAgICBjb25zdCBsZWZ0UG9zID0gQ2FydGVzaWFuM19kZWZhdWx0LmFkZChwb3MsIHNjYWxlZExlZnQsIHNjcmF0Y2g0KTsKICAgICAgbGVmdFBvc2l0aW9uc1tsZWZ0SW5kZXgtLV0gPSBsZWZ0UG9zLno7CiAgICAgIGxlZnRQb3NpdGlvbnNbbGVmdEluZGV4LS1dID0gbGVmdFBvcy55OwogICAgICBsZWZ0UG9zaXRpb25zW2xlZnRJbmRleC0tXSA9IGxlZnRQb3MueDsKICAgIH0KICAgIGNhbGN1bGF0ZWRQb3NpdGlvbnMucHVzaChyaWdodFBvc2l0aW9ucywgbGVmdFBvc2l0aW9ucyk7CiAgICByZXR1cm4gY2FsY3VsYXRlZFBvc2l0aW9uczsKICB9CiAgdmFyIENvcnJpZG9yR2VvbWV0cnlMaWJyYXJ5LCBzY3JhdGNoMTIsIHNjcmF0Y2gyMiwgc2NyYXRjaDMsIHNjcmF0Y2g0LCBzY2FsZUFycmF5MiwgY2FydGVzaWFuMSwgY2FydGVzaWFuMiwgY2FydGVzaWFuMywgY2FydGVzaWFuNCwgY2FydGVzaWFuNSwgY2FydGVzaWFuNiwgY2FydGVzaWFuNywgY2FydGVzaWFuOCwgY2FydGVzaWFuOSwgY2FydGVzaWFuMTAsIHF1YXRlcmlvbjIsIHJvdE1hdHJpeDIsIHNjcmF0Y2hGb3J3YXJkUHJvamVjdGlvbjIsIHNjcmF0Y2hCYWNrd2FyZFByb2plY3Rpb24yLCBDb3JyaWRvckdlb21ldHJ5TGlicmFyeV9kZWZhdWx0OwogIHZhciBpbml0X0NvcnJpZG9yR2VvbWV0cnlMaWJyYXJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9Db3JyaWRvckdlb21ldHJ5TGlicmFyeS5qcyIoKSB7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0Nvcm5lclR5cGUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X01hdHJpeDMoKTsKICAgICAgaW5pdF9Qb2x5bGluZVBpcGVsaW5lKCk7CiAgICAgIGluaXRfUG9seWxpbmVWb2x1bWVHZW9tZXRyeUxpYnJhcnkoKTsKICAgICAgaW5pdF9RdWF0ZXJuaW9uKCk7CiAgICAgIENvcnJpZG9yR2VvbWV0cnlMaWJyYXJ5ID0ge307CiAgICAgIHNjcmF0Y2gxMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaDIyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoMyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaDQgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjYWxlQXJyYXkyID0gW25ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKSwgbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpXTsKICAgICAgY2FydGVzaWFuMSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgY2FydGVzaWFuMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgY2FydGVzaWFuMyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgY2FydGVzaWFuNCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgY2FydGVzaWFuNSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgY2FydGVzaWFuNiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgY2FydGVzaWFuNyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgY2FydGVzaWFuOCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgY2FydGVzaWFuOSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgY2FydGVzaWFuMTAgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHF1YXRlcmlvbjIgPSBuZXcgUXVhdGVybmlvbl9kZWZhdWx0KCk7CiAgICAgIHJvdE1hdHJpeDIgPSBuZXcgTWF0cml4M19kZWZhdWx0KCk7CiAgICAgIENvcnJpZG9yR2VvbWV0cnlMaWJyYXJ5LmFkZEF0dHJpYnV0ZSA9IGZ1bmN0aW9uKGF0dHJpYnV0ZSwgdmFsdWUsIGZyb250LCBiYWNrKSB7CiAgICAgICAgY29uc3QgeCA9IHZhbHVlLng7CiAgICAgICAgY29uc3QgeSA9IHZhbHVlLnk7CiAgICAgICAgY29uc3QgeiA9IHZhbHVlLno7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChmcm9udCkpIHsKICAgICAgICAgIGF0dHJpYnV0ZVtmcm9udF0gPSB4OwogICAgICAgICAgYXR0cmlidXRlW2Zyb250ICsgMV0gPSB5OwogICAgICAgICAgYXR0cmlidXRlW2Zyb250ICsgMl0gPSB6OwogICAgICAgIH0KICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGJhY2spKSB7CiAgICAgICAgICBhdHRyaWJ1dGVbYmFja10gPSB6OwogICAgICAgICAgYXR0cmlidXRlW2JhY2sgLSAxXSA9IHk7CiAgICAgICAgICBhdHRyaWJ1dGVbYmFjayAtIDJdID0geDsKICAgICAgICB9CiAgICAgIH07CiAgICAgIHNjcmF0Y2hGb3J3YXJkUHJvamVjdGlvbjIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hCYWNrd2FyZFByb2plY3Rpb24yID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBDb3JyaWRvckdlb21ldHJ5TGlicmFyeS5jb21wdXRlUG9zaXRpb25zID0gZnVuY3Rpb24ocGFyYW1zKSB7CiAgICAgICAgY29uc3QgZ3JhbnVsYXJpdHkgPSBwYXJhbXMuZ3JhbnVsYXJpdHk7CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gcGFyYW1zLnBvc2l0aW9uczsKICAgICAgICBjb25zdCBlbGxpcHNvaWQgPSBwYXJhbXMuZWxsaXBzb2lkOwogICAgICAgIGNvbnN0IHdpZHRoID0gcGFyYW1zLndpZHRoIC8gMjsKICAgICAgICBjb25zdCBjb3JuZXJUeXBlID0gcGFyYW1zLmNvcm5lclR5cGU7CiAgICAgICAgY29uc3Qgc2F2ZUF0dHJpYnV0ZXMgPSBwYXJhbXMuc2F2ZUF0dHJpYnV0ZXM7CiAgICAgICAgbGV0IG5vcm1hbDIgPSBjYXJ0ZXNpYW4xOwogICAgICAgIGxldCBmb3J3YXJkID0gY2FydGVzaWFuMjsKICAgICAgICBsZXQgYmFja3dhcmQgPSBjYXJ0ZXNpYW4zOwogICAgICAgIGxldCBsZWZ0ID0gY2FydGVzaWFuNDsKICAgICAgICBsZXQgY29ybmVyRGlyZWN0aW9uID0gY2FydGVzaWFuNTsKICAgICAgICBsZXQgc3RhcnRQb2ludCA9IGNhcnRlc2lhbjY7CiAgICAgICAgbGV0IHByZXZpb3VzUG9zID0gY2FydGVzaWFuNzsKICAgICAgICBsZXQgcmlnaHRQb3MgPSBjYXJ0ZXNpYW44OwogICAgICAgIGxldCBsZWZ0UG9zID0gY2FydGVzaWFuOTsKICAgICAgICBsZXQgY2VudGVyID0gY2FydGVzaWFuMTA7CiAgICAgICAgbGV0IGNhbGN1bGF0ZWRQb3NpdGlvbnMgPSBbXTsKICAgICAgICBjb25zdCBjYWxjdWxhdGVkTGVmdHMgPSBzYXZlQXR0cmlidXRlcyA/IFtdIDogdm9pZCAwOwogICAgICAgIGNvbnN0IGNhbGN1bGF0ZWROb3JtYWxzID0gc2F2ZUF0dHJpYnV0ZXMgPyBbXSA6IHZvaWQgMDsKICAgICAgICBsZXQgcG9zaXRpb24gPSBwb3NpdGlvbnNbMF07CiAgICAgICAgbGV0IG5leHRQb3NpdGlvbiA9IHBvc2l0aW9uc1sxXTsKICAgICAgICBmb3J3YXJkID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSgKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChuZXh0UG9zaXRpb24sIHBvc2l0aW9uLCBmb3J3YXJkKSwKICAgICAgICAgIGZvcndhcmQKICAgICAgICApOwogICAgICAgIG5vcm1hbDIgPSBlbGxpcHNvaWQuZ2VvZGV0aWNTdXJmYWNlTm9ybWFsKHBvc2l0aW9uLCBub3JtYWwyKTsKICAgICAgICBsZWZ0ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShDYXJ0ZXNpYW4zX2RlZmF1bHQuY3Jvc3Mobm9ybWFsMiwgZm9yd2FyZCwgbGVmdCksIGxlZnQpOwogICAgICAgIGlmIChzYXZlQXR0cmlidXRlcykgewogICAgICAgICAgY2FsY3VsYXRlZExlZnRzLnB1c2gobGVmdC54LCBsZWZ0LnksIGxlZnQueik7CiAgICAgICAgICBjYWxjdWxhdGVkTm9ybWFscy5wdXNoKG5vcm1hbDIueCwgbm9ybWFsMi55LCBub3JtYWwyLnopOwogICAgICAgIH0KICAgICAgICBwcmV2aW91c1BvcyA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShwb3NpdGlvbiwgcHJldmlvdXNQb3MpOwogICAgICAgIHBvc2l0aW9uID0gbmV4dFBvc2l0aW9uOwogICAgICAgIGJhY2t3YXJkID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5lZ2F0ZShmb3J3YXJkLCBiYWNrd2FyZCk7CiAgICAgICAgbGV0IHN1YmRpdmlkZWRQb3NpdGlvbnM7CiAgICAgICAgY29uc3QgY29ybmVycyA9IFtdOwogICAgICAgIGxldCBpOwogICAgICAgIGNvbnN0IGxlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgZm9yIChpID0gMTsgaSA8IGxlbmd0aCAtIDE7IGkrKykgewogICAgICAgICAgbm9ybWFsMiA9IGVsbGlwc29pZC5nZW9kZXRpY1N1cmZhY2VOb3JtYWwocG9zaXRpb24sIG5vcm1hbDIpOwogICAgICAgICAgbmV4dFBvc2l0aW9uID0gcG9zaXRpb25zW2kgKyAxXTsKICAgICAgICAgIGZvcndhcmQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKAogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QobmV4dFBvc2l0aW9uLCBwb3NpdGlvbiwgZm9yd2FyZCksCiAgICAgICAgICAgIGZvcndhcmQKICAgICAgICAgICk7CiAgICAgICAgICBjb25zdCBmb3J3YXJkUHJvamVjdGlvbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKAogICAgICAgICAgICBub3JtYWwyLAogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KGZvcndhcmQsIG5vcm1hbDIpLAogICAgICAgICAgICBzY3JhdGNoRm9yd2FyZFByb2plY3Rpb24yCiAgICAgICAgICApOwogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KGZvcndhcmQsIGZvcndhcmRQcm9qZWN0aW9uLCBmb3J3YXJkUHJvamVjdGlvbik7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKGZvcndhcmRQcm9qZWN0aW9uLCBmb3J3YXJkUHJvamVjdGlvbik7CiAgICAgICAgICBjb25zdCBiYWNrd2FyZFByb2plY3Rpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcigKICAgICAgICAgICAgbm9ybWFsMiwKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmRvdChiYWNrd2FyZCwgbm9ybWFsMiksCiAgICAgICAgICAgIHNjcmF0Y2hCYWNrd2FyZFByb2plY3Rpb24yCiAgICAgICAgICApOwogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KGJhY2t3YXJkLCBiYWNrd2FyZFByb2plY3Rpb24sIGJhY2t3YXJkUHJvamVjdGlvbik7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKGJhY2t3YXJkUHJvamVjdGlvbiwgYmFja3dhcmRQcm9qZWN0aW9uKTsKICAgICAgICAgIGNvbnN0IGRvQ29ybmVyID0gIU1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgICBNYXRoLmFicyhDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KGZvcndhcmRQcm9qZWN0aW9uLCBiYWNrd2FyZFByb2plY3Rpb24pKSwKICAgICAgICAgICAgMSwKICAgICAgICAgICAgTWF0aF9kZWZhdWx0LkVQU0lMT043CiAgICAgICAgICApOwogICAgICAgICAgaWYgKGRvQ29ybmVyKSB7CiAgICAgICAgICAgIGNvcm5lckRpcmVjdGlvbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoCiAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChmb3J3YXJkLCBiYWNrd2FyZCwgY29ybmVyRGlyZWN0aW9uKSwKICAgICAgICAgICAgICBjb3JuZXJEaXJlY3Rpb24KICAgICAgICAgICAgKTsKICAgICAgICAgICAgY29ybmVyRGlyZWN0aW9uID0gQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKAogICAgICAgICAgICAgIGNvcm5lckRpcmVjdGlvbiwKICAgICAgICAgICAgICBub3JtYWwyLAogICAgICAgICAgICAgIGNvcm5lckRpcmVjdGlvbgogICAgICAgICAgICApOwogICAgICAgICAgICBjb3JuZXJEaXJlY3Rpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY3Jvc3MoCiAgICAgICAgICAgICAgbm9ybWFsMiwKICAgICAgICAgICAgICBjb3JuZXJEaXJlY3Rpb24sCiAgICAgICAgICAgICAgY29ybmVyRGlyZWN0aW9uCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIGNvcm5lckRpcmVjdGlvbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoY29ybmVyRGlyZWN0aW9uLCBjb3JuZXJEaXJlY3Rpb24pOwogICAgICAgICAgICBjb25zdCBzY2FsYXIgPSB3aWR0aCAvIE1hdGgubWF4KAogICAgICAgICAgICAgIDAuMjUsCiAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm1hZ25pdHVkZSgKICAgICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyhjb3JuZXJEaXJlY3Rpb24sIGJhY2t3YXJkLCBzY3JhdGNoMTIpCiAgICAgICAgICAgICAgKQogICAgICAgICAgICApOwogICAgICAgICAgICBjb25zdCBsZWZ0SXNPdXRzaWRlID0gUG9seWxpbmVWb2x1bWVHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5hbmdsZUlzR3JlYXRlclRoYW5QaSgKICAgICAgICAgICAgICBmb3J3YXJkLAogICAgICAgICAgICAgIGJhY2t3YXJkLAogICAgICAgICAgICAgIHBvc2l0aW9uLAogICAgICAgICAgICAgIGVsbGlwc29pZAogICAgICAgICAgICApOwogICAgICAgICAgICBjb3JuZXJEaXJlY3Rpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcigKICAgICAgICAgICAgICBjb3JuZXJEaXJlY3Rpb24sCiAgICAgICAgICAgICAgc2NhbGFyLAogICAgICAgICAgICAgIGNvcm5lckRpcmVjdGlvbgogICAgICAgICAgICApOwogICAgICAgICAgICBpZiAobGVmdElzT3V0c2lkZSkgewogICAgICAgICAgICAgIHJpZ2h0UG9zID0gQ2FydGVzaWFuM19kZWZhdWx0LmFkZChwb3NpdGlvbiwgY29ybmVyRGlyZWN0aW9uLCByaWdodFBvcyk7CiAgICAgICAgICAgICAgY2VudGVyID0gQ2FydGVzaWFuM19kZWZhdWx0LmFkZCgKICAgICAgICAgICAgICAgIHJpZ2h0UG9zLAogICAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIobGVmdCwgd2lkdGgsIGNlbnRlciksCiAgICAgICAgICAgICAgICBjZW50ZXIKICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIGxlZnRQb3MgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKAogICAgICAgICAgICAgICAgcmlnaHRQb3MsCiAgICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcihsZWZ0LCB3aWR0aCAqIDIsIGxlZnRQb3MpLAogICAgICAgICAgICAgICAgbGVmdFBvcwogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgc2NhbGVBcnJheTJbMF0gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUocHJldmlvdXNQb3MsIHNjYWxlQXJyYXkyWzBdKTsKICAgICAgICAgICAgICBzY2FsZUFycmF5MlsxXSA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShjZW50ZXIsIHNjYWxlQXJyYXkyWzFdKTsKICAgICAgICAgICAgICBzdWJkaXZpZGVkUG9zaXRpb25zID0gUG9seWxpbmVQaXBlbGluZV9kZWZhdWx0LmdlbmVyYXRlQXJjKHsKICAgICAgICAgICAgICAgIHBvc2l0aW9uczogc2NhbGVBcnJheTIsCiAgICAgICAgICAgICAgICBncmFudWxhcml0eSwKICAgICAgICAgICAgICAgIGVsbGlwc29pZAogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIGNhbGN1bGF0ZWRQb3NpdGlvbnMgPSBhZGRTaGlmdGVkUG9zaXRpb25zKAogICAgICAgICAgICAgICAgc3ViZGl2aWRlZFBvc2l0aW9ucywKICAgICAgICAgICAgICAgIGxlZnQsCiAgICAgICAgICAgICAgICB3aWR0aCwKICAgICAgICAgICAgICAgIGNhbGN1bGF0ZWRQb3NpdGlvbnMKICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIGlmIChzYXZlQXR0cmlidXRlcykgewogICAgICAgICAgICAgICAgY2FsY3VsYXRlZExlZnRzLnB1c2gobGVmdC54LCBsZWZ0LnksIGxlZnQueik7CiAgICAgICAgICAgICAgICBjYWxjdWxhdGVkTm9ybWFscy5wdXNoKG5vcm1hbDIueCwgbm9ybWFsMi55LCBub3JtYWwyLnopOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBzdGFydFBvaW50ID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGxlZnRQb3MsIHN0YXJ0UG9pbnQpOwogICAgICAgICAgICAgIGxlZnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKAogICAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKG5vcm1hbDIsIGZvcndhcmQsIGxlZnQpLAogICAgICAgICAgICAgICAgbGVmdAogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgbGVmdFBvcyA9IENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoCiAgICAgICAgICAgICAgICByaWdodFBvcywKICAgICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKGxlZnQsIHdpZHRoICogMiwgbGVmdFBvcyksCiAgICAgICAgICAgICAgICBsZWZ0UG9zCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICBwcmV2aW91c1BvcyA9IENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoCiAgICAgICAgICAgICAgICByaWdodFBvcywKICAgICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKGxlZnQsIHdpZHRoLCBwcmV2aW91c1BvcyksCiAgICAgICAgICAgICAgICBwcmV2aW91c1BvcwogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgaWYgKGNvcm5lclR5cGUgPT09IENvcm5lclR5cGVfZGVmYXVsdC5ST1VOREVEIHx8IGNvcm5lclR5cGUgPT09IENvcm5lclR5cGVfZGVmYXVsdC5CRVZFTEVEKSB7CiAgICAgICAgICAgICAgICBjb3JuZXJzLnB1c2goewogICAgICAgICAgICAgICAgICBsZWZ0UG9zaXRpb25zOiBjb21wdXRlUm91bmRDb3JuZXIyKAogICAgICAgICAgICAgICAgICAgIHJpZ2h0UG9zLAogICAgICAgICAgICAgICAgICAgIHN0YXJ0UG9pbnQsCiAgICAgICAgICAgICAgICAgICAgbGVmdFBvcywKICAgICAgICAgICAgICAgICAgICBjb3JuZXJUeXBlLAogICAgICAgICAgICAgICAgICAgIGxlZnRJc091dHNpZGUKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGNvcm5lcnMucHVzaCh7CiAgICAgICAgICAgICAgICAgIGxlZnRQb3NpdGlvbnM6IGNvbXB1dGVNaXRlcmVkQ29ybmVyKAogICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uLAogICAgICAgICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5uZWdhdGUoY29ybmVyRGlyZWN0aW9uLCBjb3JuZXJEaXJlY3Rpb24pLAogICAgICAgICAgICAgICAgICAgIGxlZnRQb3MsCiAgICAgICAgICAgICAgICAgICAgbGVmdElzT3V0c2lkZQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgbGVmdFBvcyA9IENhcnRlc2lhbjNfZGVmYXVsdC5hZGQocG9zaXRpb24sIGNvcm5lckRpcmVjdGlvbiwgbGVmdFBvcyk7CiAgICAgICAgICAgICAgY2VudGVyID0gQ2FydGVzaWFuM19kZWZhdWx0LmFkZCgKICAgICAgICAgICAgICAgIGxlZnRQb3MsCiAgICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubmVnYXRlKAogICAgICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcihsZWZ0LCB3aWR0aCwgY2VudGVyKSwKICAgICAgICAgICAgICAgICAgY2VudGVyCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgY2VudGVyCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICByaWdodFBvcyA9IENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoCiAgICAgICAgICAgICAgICBsZWZ0UG9zLAogICAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5lZ2F0ZSgKICAgICAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIobGVmdCwgd2lkdGggKiAyLCByaWdodFBvcyksCiAgICAgICAgICAgICAgICAgIHJpZ2h0UG9zCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgcmlnaHRQb3MKICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIHNjYWxlQXJyYXkyWzBdID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKHByZXZpb3VzUG9zLCBzY2FsZUFycmF5MlswXSk7CiAgICAgICAgICAgICAgc2NhbGVBcnJheTJbMV0gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoY2VudGVyLCBzY2FsZUFycmF5MlsxXSk7CiAgICAgICAgICAgICAgc3ViZGl2aWRlZFBvc2l0aW9ucyA9IFBvbHlsaW5lUGlwZWxpbmVfZGVmYXVsdC5nZW5lcmF0ZUFyYyh7CiAgICAgICAgICAgICAgICBwb3NpdGlvbnM6IHNjYWxlQXJyYXkyLAogICAgICAgICAgICAgICAgZ3JhbnVsYXJpdHksCiAgICAgICAgICAgICAgICBlbGxpcHNvaWQKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBjYWxjdWxhdGVkUG9zaXRpb25zID0gYWRkU2hpZnRlZFBvc2l0aW9ucygKICAgICAgICAgICAgICAgIHN1YmRpdmlkZWRQb3NpdGlvbnMsCiAgICAgICAgICAgICAgICBsZWZ0LAogICAgICAgICAgICAgICAgd2lkdGgsCiAgICAgICAgICAgICAgICBjYWxjdWxhdGVkUG9zaXRpb25zCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICBpZiAoc2F2ZUF0dHJpYnV0ZXMpIHsKICAgICAgICAgICAgICAgIGNhbGN1bGF0ZWRMZWZ0cy5wdXNoKGxlZnQueCwgbGVmdC55LCBsZWZ0LnopOwogICAgICAgICAgICAgICAgY2FsY3VsYXRlZE5vcm1hbHMucHVzaChub3JtYWwyLngsIG5vcm1hbDIueSwgbm9ybWFsMi56KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgc3RhcnRQb2ludCA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShyaWdodFBvcywgc3RhcnRQb2ludCk7CiAgICAgICAgICAgICAgbGVmdCA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoCiAgICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY3Jvc3Mobm9ybWFsMiwgZm9yd2FyZCwgbGVmdCksCiAgICAgICAgICAgICAgICBsZWZ0CiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICByaWdodFBvcyA9IENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoCiAgICAgICAgICAgICAgICBsZWZ0UG9zLAogICAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5lZ2F0ZSgKICAgICAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIobGVmdCwgd2lkdGggKiAyLCByaWdodFBvcyksCiAgICAgICAgICAgICAgICAgIHJpZ2h0UG9zCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgcmlnaHRQb3MKICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIHByZXZpb3VzUG9zID0gQ2FydGVzaWFuM19kZWZhdWx0LmFkZCgKICAgICAgICAgICAgICAgIGxlZnRQb3MsCiAgICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubmVnYXRlKAogICAgICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcihsZWZ0LCB3aWR0aCwgcHJldmlvdXNQb3MpLAogICAgICAgICAgICAgICAgICBwcmV2aW91c1BvcwogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIHByZXZpb3VzUG9zCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICBpZiAoY29ybmVyVHlwZSA9PT0gQ29ybmVyVHlwZV9kZWZhdWx0LlJPVU5ERUQgfHwgY29ybmVyVHlwZSA9PT0gQ29ybmVyVHlwZV9kZWZhdWx0LkJFVkVMRUQpIHsKICAgICAgICAgICAgICAgIGNvcm5lcnMucHVzaCh7CiAgICAgICAgICAgICAgICAgIHJpZ2h0UG9zaXRpb25zOiBjb21wdXRlUm91bmRDb3JuZXIyKAogICAgICAgICAgICAgICAgICAgIGxlZnRQb3MsCiAgICAgICAgICAgICAgICAgICAgc3RhcnRQb2ludCwKICAgICAgICAgICAgICAgICAgICByaWdodFBvcywKICAgICAgICAgICAgICAgICAgICBjb3JuZXJUeXBlLAogICAgICAgICAgICAgICAgICAgIGxlZnRJc091dHNpZGUKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGNvcm5lcnMucHVzaCh7CiAgICAgICAgICAgICAgICAgIHJpZ2h0UG9zaXRpb25zOiBjb21wdXRlTWl0ZXJlZENvcm5lcigKICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiwKICAgICAgICAgICAgICAgICAgICBjb3JuZXJEaXJlY3Rpb24sCiAgICAgICAgICAgICAgICAgICAgcmlnaHRQb3MsCiAgICAgICAgICAgICAgICAgICAgbGVmdElzT3V0c2lkZQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYmFja3dhcmQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubmVnYXRlKGZvcndhcmQsIGJhY2t3YXJkKTsKICAgICAgICAgIH0KICAgICAgICAgIHBvc2l0aW9uID0gbmV4dFBvc2l0aW9uOwogICAgICAgIH0KICAgICAgICBub3JtYWwyID0gZWxsaXBzb2lkLmdlb2RldGljU3VyZmFjZU5vcm1hbChwb3NpdGlvbiwgbm9ybWFsMik7CiAgICAgICAgc2NhbGVBcnJheTJbMF0gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUocHJldmlvdXNQb3MsIHNjYWxlQXJyYXkyWzBdKTsKICAgICAgICBzY2FsZUFycmF5MlsxXSA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShwb3NpdGlvbiwgc2NhbGVBcnJheTJbMV0pOwogICAgICAgIHN1YmRpdmlkZWRQb3NpdGlvbnMgPSBQb2x5bGluZVBpcGVsaW5lX2RlZmF1bHQuZ2VuZXJhdGVBcmMoewogICAgICAgICAgcG9zaXRpb25zOiBzY2FsZUFycmF5MiwKICAgICAgICAgIGdyYW51bGFyaXR5LAogICAgICAgICAgZWxsaXBzb2lkCiAgICAgICAgfSk7CiAgICAgICAgY2FsY3VsYXRlZFBvc2l0aW9ucyA9IGFkZFNoaWZ0ZWRQb3NpdGlvbnMoCiAgICAgICAgICBzdWJkaXZpZGVkUG9zaXRpb25zLAogICAgICAgICAgbGVmdCwKICAgICAgICAgIHdpZHRoLAogICAgICAgICAgY2FsY3VsYXRlZFBvc2l0aW9ucwogICAgICAgICk7CiAgICAgICAgaWYgKHNhdmVBdHRyaWJ1dGVzKSB7CiAgICAgICAgICBjYWxjdWxhdGVkTGVmdHMucHVzaChsZWZ0LngsIGxlZnQueSwgbGVmdC56KTsKICAgICAgICAgIGNhbGN1bGF0ZWROb3JtYWxzLnB1c2gobm9ybWFsMi54LCBub3JtYWwyLnksIG5vcm1hbDIueik7CiAgICAgICAgfQogICAgICAgIGxldCBlbmRQb3NpdGlvbnM7CiAgICAgICAgaWYgKGNvcm5lclR5cGUgPT09IENvcm5lclR5cGVfZGVmYXVsdC5ST1VOREVEKSB7CiAgICAgICAgICBlbmRQb3NpdGlvbnMgPSBhZGRFbmRDYXBzKGNhbGN1bGF0ZWRQb3NpdGlvbnMpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gewogICAgICAgICAgcG9zaXRpb25zOiBjYWxjdWxhdGVkUG9zaXRpb25zLAogICAgICAgICAgY29ybmVycywKICAgICAgICAgIGxlZnRzOiBjYWxjdWxhdGVkTGVmdHMsCiAgICAgICAgICBub3JtYWxzOiBjYWxjdWxhdGVkTm9ybWFscywKICAgICAgICAgIGVuZFBvc2l0aW9ucwogICAgICAgIH07CiAgICAgIH07CiAgICAgIENvcnJpZG9yR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQgPSBDb3JyaWRvckdlb21ldHJ5TGlicmFyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0NvcnJpZG9yR2VvbWV0cnkuanMKICBmdW5jdGlvbiBzY2FsZVRvU3VyZmFjZTIocG9zaXRpb25zLCBlbGxpcHNvaWQpIHsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9zaXRpb25zLmxlbmd0aDsgaSsrKSB7CiAgICAgIHBvc2l0aW9uc1tpXSA9IGVsbGlwc29pZC5zY2FsZVRvR2VvZGV0aWNTdXJmYWNlKHBvc2l0aW9uc1tpXSwgcG9zaXRpb25zW2ldKTsKICAgIH0KICAgIHJldHVybiBwb3NpdGlvbnM7CiAgfQogIGZ1bmN0aW9uIGFkZE5vcm1hbHMoYXR0ciwgbm9ybWFsMiwgbGVmdCwgZnJvbnQsIGJhY2ssIHZlcnRleEZvcm1hdCkgewogICAgY29uc3Qgbm9ybWFscyA9IGF0dHIubm9ybWFsczsKICAgIGNvbnN0IHRhbmdlbnRzID0gYXR0ci50YW5nZW50czsKICAgIGNvbnN0IGJpdGFuZ2VudHMgPSBhdHRyLmJpdGFuZ2VudHM7CiAgICBjb25zdCBmb3J3YXJkID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSgKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKGxlZnQsIG5vcm1hbDIsIHNjcmF0Y2gxMyksCiAgICAgIHNjcmF0Y2gxMwogICAgKTsKICAgIGlmICh2ZXJ0ZXhGb3JtYXQubm9ybWFsKSB7CiAgICAgIENvcnJpZG9yR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuYWRkQXR0cmlidXRlKG5vcm1hbHMsIG5vcm1hbDIsIGZyb250LCBiYWNrKTsKICAgIH0KICAgIGlmICh2ZXJ0ZXhGb3JtYXQudGFuZ2VudCkgewogICAgICBDb3JyaWRvckdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmFkZEF0dHJpYnV0ZSh0YW5nZW50cywgZm9yd2FyZCwgZnJvbnQsIGJhY2spOwogICAgfQogICAgaWYgKHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpIHsKICAgICAgQ29ycmlkb3JHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5hZGRBdHRyaWJ1dGUoYml0YW5nZW50cywgbGVmdCwgZnJvbnQsIGJhY2spOwogICAgfQogIH0KICBmdW5jdGlvbiBjb21iaW5lMihjb21wdXRlZFBvc2l0aW9ucywgdmVydGV4Rm9ybWF0LCBlbGxpcHNvaWQpIHsKICAgIGNvbnN0IHBvc2l0aW9ucyA9IGNvbXB1dGVkUG9zaXRpb25zLnBvc2l0aW9uczsKICAgIGNvbnN0IGNvcm5lcnMgPSBjb21wdXRlZFBvc2l0aW9ucy5jb3JuZXJzOwogICAgY29uc3QgZW5kUG9zaXRpb25zID0gY29tcHV0ZWRQb3NpdGlvbnMuZW5kUG9zaXRpb25zOwogICAgY29uc3QgY29tcHV0ZWRMZWZ0cyA9IGNvbXB1dGVkUG9zaXRpb25zLmxlZnRzOwogICAgY29uc3QgY29tcHV0ZWROb3JtYWxzID0gY29tcHV0ZWRQb3NpdGlvbnMubm9ybWFsczsKICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVzX2RlZmF1bHQoKTsKICAgIGxldCBjb3JuZXI7CiAgICBsZXQgbGVmdENvdW50ID0gMDsKICAgIGxldCByaWdodENvdW50ID0gMDsKICAgIGxldCBpOwogICAgbGV0IGluZGljZXNMZW5ndGggPSAwOwogICAgbGV0IGxlbmd0aDsKICAgIGZvciAoaSA9IDA7IGkgPCBwb3NpdGlvbnMubGVuZ3RoOyBpICs9IDIpIHsKICAgICAgbGVuZ3RoID0gcG9zaXRpb25zW2ldLmxlbmd0aCAtIDM7CiAgICAgIGxlZnRDb3VudCArPSBsZW5ndGg7CiAgICAgIGluZGljZXNMZW5ndGggKz0gbGVuZ3RoICogMjsKICAgICAgcmlnaHRDb3VudCArPSBwb3NpdGlvbnNbaSArIDFdLmxlbmd0aCAtIDM7CiAgICB9CiAgICBsZWZ0Q291bnQgKz0gMzsKICAgIHJpZ2h0Q291bnQgKz0gMzsKICAgIGZvciAoaSA9IDA7IGkgPCBjb3JuZXJzLmxlbmd0aDsgaSsrKSB7CiAgICAgIGNvcm5lciA9IGNvcm5lcnNbaV07CiAgICAgIGNvbnN0IGxlZnRTaWRlID0gY29ybmVyc1tpXS5sZWZ0UG9zaXRpb25zOwogICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGxlZnRTaWRlKSkgewogICAgICAgIGxlbmd0aCA9IGxlZnRTaWRlLmxlbmd0aDsKICAgICAgICBsZWZ0Q291bnQgKz0gbGVuZ3RoOwogICAgICAgIGluZGljZXNMZW5ndGggKz0gbGVuZ3RoOwogICAgICB9IGVsc2UgewogICAgICAgIGxlbmd0aCA9IGNvcm5lcnNbaV0ucmlnaHRQb3NpdGlvbnMubGVuZ3RoOwogICAgICAgIHJpZ2h0Q291bnQgKz0gbGVuZ3RoOwogICAgICAgIGluZGljZXNMZW5ndGggKz0gbGVuZ3RoOwogICAgICB9CiAgICB9CiAgICBjb25zdCBhZGRFbmRQb3NpdGlvbnMgPSBkZWZpbmVkX2RlZmF1bHQoZW5kUG9zaXRpb25zKTsKICAgIGxldCBlbmRQb3NpdGlvbkxlbmd0aDsKICAgIGlmIChhZGRFbmRQb3NpdGlvbnMpIHsKICAgICAgZW5kUG9zaXRpb25MZW5ndGggPSBlbmRQb3NpdGlvbnNbMF0ubGVuZ3RoIC0gMzsKICAgICAgbGVmdENvdW50ICs9IGVuZFBvc2l0aW9uTGVuZ3RoOwogICAgICByaWdodENvdW50ICs9IGVuZFBvc2l0aW9uTGVuZ3RoOwogICAgICBlbmRQb3NpdGlvbkxlbmd0aCAvPSAzOwogICAgICBpbmRpY2VzTGVuZ3RoICs9IGVuZFBvc2l0aW9uTGVuZ3RoICogNjsKICAgIH0KICAgIGNvbnN0IHNpemUgPSBsZWZ0Q291bnQgKyByaWdodENvdW50OwogICAgY29uc3QgZmluYWxQb3NpdGlvbnMgPSBuZXcgRmxvYXQ2NEFycmF5KHNpemUpOwogICAgY29uc3Qgbm9ybWFscyA9IHZlcnRleEZvcm1hdC5ub3JtYWwgPyBuZXcgRmxvYXQzMkFycmF5KHNpemUpIDogdm9pZCAwOwogICAgY29uc3QgdGFuZ2VudHMgPSB2ZXJ0ZXhGb3JtYXQudGFuZ2VudCA/IG5ldyBGbG9hdDMyQXJyYXkoc2l6ZSkgOiB2b2lkIDA7CiAgICBjb25zdCBiaXRhbmdlbnRzID0gdmVydGV4Rm9ybWF0LmJpdGFuZ2VudCA/IG5ldyBGbG9hdDMyQXJyYXkoc2l6ZSkgOiB2b2lkIDA7CiAgICBjb25zdCBhdHRyID0gewogICAgICBub3JtYWxzLAogICAgICB0YW5nZW50cywKICAgICAgYml0YW5nZW50cwogICAgfTsKICAgIGxldCBmcm9udCA9IDA7CiAgICBsZXQgYmFjayA9IHNpemUgLSAxOwogICAgbGV0IFVMLCBMTCwgVVIsIExSOwogICAgbGV0IG5vcm1hbDIgPSBjYXJ0ZXNpYW4xMjsKICAgIGxldCBsZWZ0ID0gY2FydGVzaWFuMjI7CiAgICBsZXQgcmlnaHRQb3MsIGxlZnRQb3M7CiAgICBjb25zdCBoYWxmTGVuZ3RoID0gZW5kUG9zaXRpb25MZW5ndGggLyAyOwogICAgY29uc3QgaW5kaWNlcyA9IEluZGV4RGF0YXR5cGVfZGVmYXVsdC5jcmVhdGVUeXBlZEFycmF5KHNpemUgLyAzLCBpbmRpY2VzTGVuZ3RoKTsKICAgIGxldCBpbmRleCA9IDA7CiAgICBpZiAoYWRkRW5kUG9zaXRpb25zKSB7CiAgICAgIGxlZnRQb3MgPSBjYXJ0ZXNpYW4zMjsKICAgICAgcmlnaHRQb3MgPSBjYXJ0ZXNpYW40MjsKICAgICAgY29uc3QgZmlyc3RFbmRQb3NpdGlvbnMgPSBlbmRQb3NpdGlvbnNbMF07CiAgICAgIG5vcm1hbDIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KGNvbXB1dGVkTm9ybWFscywgMCwgbm9ybWFsMik7CiAgICAgIGxlZnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KGNvbXB1dGVkTGVmdHMsIDAsIGxlZnQpOwogICAgICBmb3IgKGkgPSAwOyBpIDwgaGFsZkxlbmd0aDsgaSsrKSB7CiAgICAgICAgbGVmdFBvcyA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkoCiAgICAgICAgICBmaXJzdEVuZFBvc2l0aW9ucywKICAgICAgICAgIChoYWxmTGVuZ3RoIC0gMSAtIGkpICogMywKICAgICAgICAgIGxlZnRQb3MKICAgICAgICApOwogICAgICAgIHJpZ2h0UG9zID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheSgKICAgICAgICAgIGZpcnN0RW5kUG9zaXRpb25zLAogICAgICAgICAgKGhhbGZMZW5ndGggKyBpKSAqIDMsCiAgICAgICAgICByaWdodFBvcwogICAgICAgICk7CiAgICAgICAgQ29ycmlkb3JHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5hZGRBdHRyaWJ1dGUoZmluYWxQb3NpdGlvbnMsIHJpZ2h0UG9zLCBmcm9udCk7CiAgICAgICAgQ29ycmlkb3JHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5hZGRBdHRyaWJ1dGUoCiAgICAgICAgICBmaW5hbFBvc2l0aW9ucywKICAgICAgICAgIGxlZnRQb3MsCiAgICAgICAgICB2b2lkIDAsCiAgICAgICAgICBiYWNrCiAgICAgICAgKTsKICAgICAgICBhZGROb3JtYWxzKGF0dHIsIG5vcm1hbDIsIGxlZnQsIGZyb250LCBiYWNrLCB2ZXJ0ZXhGb3JtYXQpOwogICAgICAgIExMID0gZnJvbnQgLyAzOwogICAgICAgIExSID0gTEwgKyAxOwogICAgICAgIFVMID0gKGJhY2sgLSAyKSAvIDM7CiAgICAgICAgVVIgPSBVTCAtIDE7CiAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IFVMOwogICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBMTDsKICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gVVI7CiAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IFVSOwogICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBMTDsKICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gTFI7CiAgICAgICAgZnJvbnQgKz0gMzsKICAgICAgICBiYWNrIC09IDM7CiAgICAgIH0KICAgIH0KICAgIGxldCBwb3NJbmRleCA9IDA7CiAgICBsZXQgY29tcEluZGV4ID0gMDsKICAgIGxldCByaWdodEVkZ2UgPSBwb3NpdGlvbnNbcG9zSW5kZXgrK107CiAgICBsZXQgbGVmdEVkZ2UgPSBwb3NpdGlvbnNbcG9zSW5kZXgrK107CiAgICBmaW5hbFBvc2l0aW9ucy5zZXQocmlnaHRFZGdlLCBmcm9udCk7CiAgICBmaW5hbFBvc2l0aW9ucy5zZXQobGVmdEVkZ2UsIGJhY2sgLSBsZWZ0RWRnZS5sZW5ndGggKyAxKTsKICAgIGxlZnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KGNvbXB1dGVkTGVmdHMsIGNvbXBJbmRleCwgbGVmdCk7CiAgICBsZXQgcmlnaHROb3JtYWw7CiAgICBsZXQgbGVmdE5vcm1hbDsKICAgIGxlbmd0aCA9IGxlZnRFZGdlLmxlbmd0aCAtIDM7CiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDMpIHsKICAgICAgcmlnaHROb3JtYWwgPSBlbGxpcHNvaWQuZ2VvZGV0aWNTdXJmYWNlTm9ybWFsKAogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkocmlnaHRFZGdlLCBpLCBzY3JhdGNoMTMpLAogICAgICAgIHNjcmF0Y2gxMwogICAgICApOwogICAgICBsZWZ0Tm9ybWFsID0gZWxsaXBzb2lkLmdlb2RldGljU3VyZmFjZU5vcm1hbCgKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KGxlZnRFZGdlLCBsZW5ndGggLSBpLCBzY3JhdGNoMjMpLAogICAgICAgIHNjcmF0Y2gyMwogICAgICApOwogICAgICBub3JtYWwyID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSgKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKHJpZ2h0Tm9ybWFsLCBsZWZ0Tm9ybWFsLCBub3JtYWwyKSwKICAgICAgICBub3JtYWwyCiAgICAgICk7CiAgICAgIGFkZE5vcm1hbHMoYXR0ciwgbm9ybWFsMiwgbGVmdCwgZnJvbnQsIGJhY2ssIHZlcnRleEZvcm1hdCk7CiAgICAgIExMID0gZnJvbnQgLyAzOwogICAgICBMUiA9IExMICsgMTsKICAgICAgVUwgPSAoYmFjayAtIDIpIC8gMzsKICAgICAgVVIgPSBVTCAtIDE7CiAgICAgIGluZGljZXNbaW5kZXgrK10gPSBVTDsKICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IExMOwogICAgICBpbmRpY2VzW2luZGV4KytdID0gVVI7CiAgICAgIGluZGljZXNbaW5kZXgrK10gPSBVUjsKICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IExMOwogICAgICBpbmRpY2VzW2luZGV4KytdID0gTFI7CiAgICAgIGZyb250ICs9IDM7CiAgICAgIGJhY2sgLT0gMzsKICAgIH0KICAgIHJpZ2h0Tm9ybWFsID0gZWxsaXBzb2lkLmdlb2RldGljU3VyZmFjZU5vcm1hbCgKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShyaWdodEVkZ2UsIGxlbmd0aCwgc2NyYXRjaDEzKSwKICAgICAgc2NyYXRjaDEzCiAgICApOwogICAgbGVmdE5vcm1hbCA9IGVsbGlwc29pZC5nZW9kZXRpY1N1cmZhY2VOb3JtYWwoCiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkobGVmdEVkZ2UsIGxlbmd0aCwgc2NyYXRjaDIzKSwKICAgICAgc2NyYXRjaDIzCiAgICApOwogICAgbm9ybWFsMiA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoCiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQocmlnaHROb3JtYWwsIGxlZnROb3JtYWwsIG5vcm1hbDIpLAogICAgICBub3JtYWwyCiAgICApOwogICAgY29tcEluZGV4ICs9IDM7CiAgICBmb3IgKGkgPSAwOyBpIDwgY29ybmVycy5sZW5ndGg7IGkrKykgewogICAgICBsZXQgajsKICAgICAgY29ybmVyID0gY29ybmVyc1tpXTsKICAgICAgY29uc3QgbCA9IGNvcm5lci5sZWZ0UG9zaXRpb25zOwogICAgICBjb25zdCByID0gY29ybmVyLnJpZ2h0UG9zaXRpb25zOwogICAgICBsZXQgcGl2b3Q7CiAgICAgIGxldCBzdGFydDsKICAgICAgbGV0IG91dHNpZGVQb2ludCA9IGNhcnRlc2lhbjYyOwogICAgICBsZXQgcHJldmlvdXNQb2ludCA9IGNhcnRlc2lhbjMyOwogICAgICBsZXQgbmV4dFBvaW50ID0gY2FydGVzaWFuNDI7CiAgICAgIG5vcm1hbDIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KGNvbXB1dGVkTm9ybWFscywgY29tcEluZGV4LCBub3JtYWwyKTsKICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChsKSkgewogICAgICAgIGFkZE5vcm1hbHMoYXR0ciwgbm9ybWFsMiwgbGVmdCwgdm9pZCAwLCBiYWNrLCB2ZXJ0ZXhGb3JtYXQpOwogICAgICAgIGJhY2sgLT0gMzsKICAgICAgICBwaXZvdCA9IExSOwogICAgICAgIHN0YXJ0ID0gVVI7CiAgICAgICAgZm9yIChqID0gMDsgaiA8IGwubGVuZ3RoIC8gMzsgaisrKSB7CiAgICAgICAgICBvdXRzaWRlUG9pbnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KGwsIGogKiAzLCBvdXRzaWRlUG9pbnQpOwogICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IHBpdm90OwogICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IHN0YXJ0IC0gaiAtIDE7CiAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gc3RhcnQgLSBqOwogICAgICAgICAgQ29ycmlkb3JHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5hZGRBdHRyaWJ1dGUoCiAgICAgICAgICAgIGZpbmFsUG9zaXRpb25zLAogICAgICAgICAgICBvdXRzaWRlUG9pbnQsCiAgICAgICAgICAgIHZvaWQgMCwKICAgICAgICAgICAgYmFjawogICAgICAgICAgKTsKICAgICAgICAgIHByZXZpb3VzUG9pbnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KAogICAgICAgICAgICBmaW5hbFBvc2l0aW9ucywKICAgICAgICAgICAgKHN0YXJ0IC0gaiAtIDEpICogMywKICAgICAgICAgICAgcHJldmlvdXNQb2ludAogICAgICAgICAgKTsKICAgICAgICAgIG5leHRQb2ludCA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkoZmluYWxQb3NpdGlvbnMsIHBpdm90ICogMywgbmV4dFBvaW50KTsKICAgICAgICAgIGxlZnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKAogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QocHJldmlvdXNQb2ludCwgbmV4dFBvaW50LCBsZWZ0KSwKICAgICAgICAgICAgbGVmdAogICAgICAgICAgKTsKICAgICAgICAgIGFkZE5vcm1hbHMoYXR0ciwgbm9ybWFsMiwgbGVmdCwgdm9pZCAwLCBiYWNrLCB2ZXJ0ZXhGb3JtYXQpOwogICAgICAgICAgYmFjayAtPSAzOwogICAgICAgIH0KICAgICAgICBvdXRzaWRlUG9pbnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KAogICAgICAgICAgZmluYWxQb3NpdGlvbnMsCiAgICAgICAgICBwaXZvdCAqIDMsCiAgICAgICAgICBvdXRzaWRlUG9pbnQKICAgICAgICApOwogICAgICAgIHByZXZpb3VzUG9pbnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KGZpbmFsUG9zaXRpb25zLCBzdGFydCAqIDMsIHByZXZpb3VzUG9pbnQpLAogICAgICAgICAgb3V0c2lkZVBvaW50LAogICAgICAgICAgcHJldmlvdXNQb2ludAogICAgICAgICk7CiAgICAgICAgbmV4dFBvaW50ID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShmaW5hbFBvc2l0aW9ucywgKHN0YXJ0IC0gaikgKiAzLCBuZXh0UG9pbnQpLAogICAgICAgICAgb3V0c2lkZVBvaW50LAogICAgICAgICAgbmV4dFBvaW50CiAgICAgICAgKTsKICAgICAgICBsZWZ0ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSgKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQocHJldmlvdXNQb2ludCwgbmV4dFBvaW50LCBsZWZ0KSwKICAgICAgICAgIGxlZnQKICAgICAgICApOwogICAgICAgIGFkZE5vcm1hbHMoYXR0ciwgbm9ybWFsMiwgbGVmdCwgZnJvbnQsIHZvaWQgMCwgdmVydGV4Rm9ybWF0KTsKICAgICAgICBmcm9udCArPSAzOwogICAgICB9IGVsc2UgewogICAgICAgIGFkZE5vcm1hbHMoYXR0ciwgbm9ybWFsMiwgbGVmdCwgZnJvbnQsIHZvaWQgMCwgdmVydGV4Rm9ybWF0KTsKICAgICAgICBmcm9udCArPSAzOwogICAgICAgIHBpdm90ID0gVVI7CiAgICAgICAgc3RhcnQgPSBMUjsKICAgICAgICBmb3IgKGogPSAwOyBqIDwgci5sZW5ndGggLyAzOyBqKyspIHsKICAgICAgICAgIG91dHNpZGVQb2ludCA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkociwgaiAqIDMsIG91dHNpZGVQb2ludCk7CiAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gcGl2b3Q7CiAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gc3RhcnQgKyBqOwogICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IHN0YXJ0ICsgaiArIDE7CiAgICAgICAgICBDb3JyaWRvckdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmFkZEF0dHJpYnV0ZSgKICAgICAgICAgICAgZmluYWxQb3NpdGlvbnMsCiAgICAgICAgICAgIG91dHNpZGVQb2ludCwKICAgICAgICAgICAgZnJvbnQKICAgICAgICAgICk7CiAgICAgICAgICBwcmV2aW91c1BvaW50ID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheSgKICAgICAgICAgICAgZmluYWxQb3NpdGlvbnMsCiAgICAgICAgICAgIHBpdm90ICogMywKICAgICAgICAgICAgcHJldmlvdXNQb2ludAogICAgICAgICAgKTsKICAgICAgICAgIG5leHRQb2ludCA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkoCiAgICAgICAgICAgIGZpbmFsUG9zaXRpb25zLAogICAgICAgICAgICAoc3RhcnQgKyBqKSAqIDMsCiAgICAgICAgICAgIG5leHRQb2ludAogICAgICAgICAgKTsKICAgICAgICAgIGxlZnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKAogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QocHJldmlvdXNQb2ludCwgbmV4dFBvaW50LCBsZWZ0KSwKICAgICAgICAgICAgbGVmdAogICAgICAgICAgKTsKICAgICAgICAgIGFkZE5vcm1hbHMoYXR0ciwgbm9ybWFsMiwgbGVmdCwgZnJvbnQsIHZvaWQgMCwgdmVydGV4Rm9ybWF0KTsKICAgICAgICAgIGZyb250ICs9IDM7CiAgICAgICAgfQogICAgICAgIG91dHNpZGVQb2ludCA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkoCiAgICAgICAgICBmaW5hbFBvc2l0aW9ucywKICAgICAgICAgIHBpdm90ICogMywKICAgICAgICAgIG91dHNpZGVQb2ludAogICAgICAgICk7CiAgICAgICAgcHJldmlvdXNQb2ludCA9IENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdCgKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkoZmluYWxQb3NpdGlvbnMsIChzdGFydCArIGopICogMywgcHJldmlvdXNQb2ludCksCiAgICAgICAgICBvdXRzaWRlUG9pbnQsCiAgICAgICAgICBwcmV2aW91c1BvaW50CiAgICAgICAgKTsKICAgICAgICBuZXh0UG9pbnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KGZpbmFsUG9zaXRpb25zLCBzdGFydCAqIDMsIG5leHRQb2ludCksCiAgICAgICAgICBvdXRzaWRlUG9pbnQsCiAgICAgICAgICBuZXh0UG9pbnQKICAgICAgICApOwogICAgICAgIGxlZnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5lZ2F0ZShDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKG5leHRQb2ludCwgcHJldmlvdXNQb2ludCwgbGVmdCksIGxlZnQpLAogICAgICAgICAgbGVmdAogICAgICAgICk7CiAgICAgICAgYWRkTm9ybWFscyhhdHRyLCBub3JtYWwyLCBsZWZ0LCB2b2lkIDAsIGJhY2ssIHZlcnRleEZvcm1hdCk7CiAgICAgICAgYmFjayAtPSAzOwogICAgICB9CiAgICAgIHJpZ2h0RWRnZSA9IHBvc2l0aW9uc1twb3NJbmRleCsrXTsKICAgICAgbGVmdEVkZ2UgPSBwb3NpdGlvbnNbcG9zSW5kZXgrK107CiAgICAgIHJpZ2h0RWRnZS5zcGxpY2UoMCwgMyk7CiAgICAgIGxlZnRFZGdlLnNwbGljZShsZWZ0RWRnZS5sZW5ndGggLSAzLCAzKTsKICAgICAgZmluYWxQb3NpdGlvbnMuc2V0KHJpZ2h0RWRnZSwgZnJvbnQpOwogICAgICBmaW5hbFBvc2l0aW9ucy5zZXQobGVmdEVkZ2UsIGJhY2sgLSBsZWZ0RWRnZS5sZW5ndGggKyAxKTsKICAgICAgbGVuZ3RoID0gbGVmdEVkZ2UubGVuZ3RoIC0gMzsKICAgICAgY29tcEluZGV4ICs9IDM7CiAgICAgIGxlZnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KGNvbXB1dGVkTGVmdHMsIGNvbXBJbmRleCwgbGVmdCk7CiAgICAgIGZvciAoaiA9IDA7IGogPCBsZWZ0RWRnZS5sZW5ndGg7IGogKz0gMykgewogICAgICAgIHJpZ2h0Tm9ybWFsID0gZWxsaXBzb2lkLmdlb2RldGljU3VyZmFjZU5vcm1hbCgKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkocmlnaHRFZGdlLCBqLCBzY3JhdGNoMTMpLAogICAgICAgICAgc2NyYXRjaDEzCiAgICAgICAgKTsKICAgICAgICBsZWZ0Tm9ybWFsID0gZWxsaXBzb2lkLmdlb2RldGljU3VyZmFjZU5vcm1hbCgKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkobGVmdEVkZ2UsIGxlbmd0aCAtIGosIHNjcmF0Y2gyMyksCiAgICAgICAgICBzY3JhdGNoMjMKICAgICAgICApOwogICAgICAgIG5vcm1hbDIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChyaWdodE5vcm1hbCwgbGVmdE5vcm1hbCwgbm9ybWFsMiksCiAgICAgICAgICBub3JtYWwyCiAgICAgICAgKTsKICAgICAgICBhZGROb3JtYWxzKGF0dHIsIG5vcm1hbDIsIGxlZnQsIGZyb250LCBiYWNrLCB2ZXJ0ZXhGb3JtYXQpOwogICAgICAgIExSID0gZnJvbnQgLyAzOwogICAgICAgIExMID0gTFIgLSAxOwogICAgICAgIFVSID0gKGJhY2sgLSAyKSAvIDM7CiAgICAgICAgVUwgPSBVUiArIDE7CiAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IFVMOwogICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBMTDsKICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gVVI7CiAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IFVSOwogICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBMTDsKICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gTFI7CiAgICAgICAgZnJvbnQgKz0gMzsKICAgICAgICBiYWNrIC09IDM7CiAgICAgIH0KICAgICAgZnJvbnQgLT0gMzsKICAgICAgYmFjayArPSAzOwogICAgfQogICAgbm9ybWFsMiA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkoCiAgICAgIGNvbXB1dGVkTm9ybWFscywKICAgICAgY29tcHV0ZWROb3JtYWxzLmxlbmd0aCAtIDMsCiAgICAgIG5vcm1hbDIKICAgICk7CiAgICBhZGROb3JtYWxzKGF0dHIsIG5vcm1hbDIsIGxlZnQsIGZyb250LCBiYWNrLCB2ZXJ0ZXhGb3JtYXQpOwogICAgaWYgKGFkZEVuZFBvc2l0aW9ucykgewogICAgICBmcm9udCArPSAzOwogICAgICBiYWNrIC09IDM7CiAgICAgIGxlZnRQb3MgPSBjYXJ0ZXNpYW4zMjsKICAgICAgcmlnaHRQb3MgPSBjYXJ0ZXNpYW40MjsKICAgICAgY29uc3QgbGFzdEVuZFBvc2l0aW9ucyA9IGVuZFBvc2l0aW9uc1sxXTsKICAgICAgZm9yIChpID0gMDsgaSA8IGhhbGZMZW5ndGg7IGkrKykgewogICAgICAgIGxlZnRQb3MgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KAogICAgICAgICAgbGFzdEVuZFBvc2l0aW9ucywKICAgICAgICAgIChlbmRQb3NpdGlvbkxlbmd0aCAtIGkgLSAxKSAqIDMsCiAgICAgICAgICBsZWZ0UG9zCiAgICAgICAgKTsKICAgICAgICByaWdodFBvcyA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkobGFzdEVuZFBvc2l0aW9ucywgaSAqIDMsIHJpZ2h0UG9zKTsKICAgICAgICBDb3JyaWRvckdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmFkZEF0dHJpYnV0ZSgKICAgICAgICAgIGZpbmFsUG9zaXRpb25zLAogICAgICAgICAgbGVmdFBvcywKICAgICAgICAgIHZvaWQgMCwKICAgICAgICAgIGJhY2sKICAgICAgICApOwogICAgICAgIENvcnJpZG9yR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuYWRkQXR0cmlidXRlKGZpbmFsUG9zaXRpb25zLCByaWdodFBvcywgZnJvbnQpOwogICAgICAgIGFkZE5vcm1hbHMoYXR0ciwgbm9ybWFsMiwgbGVmdCwgZnJvbnQsIGJhY2ssIHZlcnRleEZvcm1hdCk7CiAgICAgICAgTFIgPSBmcm9udCAvIDM7CiAgICAgICAgTEwgPSBMUiAtIDE7CiAgICAgICAgVVIgPSAoYmFjayAtIDIpIC8gMzsKICAgICAgICBVTCA9IFVSICsgMTsKICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gVUw7CiAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IExMOwogICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBVUjsKICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gVVI7CiAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IExMOwogICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBMUjsKICAgICAgICBmcm9udCArPSAzOwogICAgICAgIGJhY2sgLT0gMzsKICAgICAgfQogICAgfQogICAgYXR0cmlidXRlcy5wb3NpdGlvbiA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRE9VQkxFLAogICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICB2YWx1ZXM6IGZpbmFsUG9zaXRpb25zCiAgICB9KTsKICAgIGlmICh2ZXJ0ZXhGb3JtYXQuc3QpIHsKICAgICAgY29uc3Qgc3QgPSBuZXcgRmxvYXQzMkFycmF5KHNpemUgLyAzICogMik7CiAgICAgIGxldCByaWdodFN0OwogICAgICBsZXQgbGVmdFN0OwogICAgICBsZXQgc3RJbmRleCA9IDA7CiAgICAgIGlmIChhZGRFbmRQb3NpdGlvbnMpIHsKICAgICAgICBsZWZ0Q291bnQgLz0gMzsKICAgICAgICByaWdodENvdW50IC89IDM7CiAgICAgICAgY29uc3QgdGhldGEgPSBNYXRoLlBJIC8gKGVuZFBvc2l0aW9uTGVuZ3RoICsgMSk7CiAgICAgICAgbGVmdFN0ID0gMSAvIChsZWZ0Q291bnQgLSBlbmRQb3NpdGlvbkxlbmd0aCArIDEpOwogICAgICAgIHJpZ2h0U3QgPSAxIC8gKHJpZ2h0Q291bnQgLSBlbmRQb3NpdGlvbkxlbmd0aCArIDEpOwogICAgICAgIGxldCBhMzsKICAgICAgICBjb25zdCBoYWxmRW5kUG9zID0gZW5kUG9zaXRpb25MZW5ndGggLyAyOwogICAgICAgIGZvciAoaSA9IGhhbGZFbmRQb3MgKyAxOyBpIDwgZW5kUG9zaXRpb25MZW5ndGggKyAxOyBpKyspIHsKICAgICAgICAgIGEzID0gTWF0aF9kZWZhdWx0LlBJX09WRVJfVFdPICsgdGhldGEgKiBpOwogICAgICAgICAgc3Rbc3RJbmRleCsrXSA9IHJpZ2h0U3QgKiAoMSArIE1hdGguY29zKGEzKSk7CiAgICAgICAgICBzdFtzdEluZGV4KytdID0gMC41ICogKDEgKyBNYXRoLnNpbihhMykpOwogICAgICAgIH0KICAgICAgICBmb3IgKGkgPSAxOyBpIDwgcmlnaHRDb3VudCAtIGVuZFBvc2l0aW9uTGVuZ3RoICsgMTsgaSsrKSB7CiAgICAgICAgICBzdFtzdEluZGV4KytdID0gaSAqIHJpZ2h0U3Q7CiAgICAgICAgICBzdFtzdEluZGV4KytdID0gMDsKICAgICAgICB9CiAgICAgICAgZm9yIChpID0gZW5kUG9zaXRpb25MZW5ndGg7IGkgPiBoYWxmRW5kUG9zOyBpLS0pIHsKICAgICAgICAgIGEzID0gTWF0aF9kZWZhdWx0LlBJX09WRVJfVFdPIC0gaSAqIHRoZXRhOwogICAgICAgICAgc3Rbc3RJbmRleCsrXSA9IDEgLSByaWdodFN0ICogKDEgKyBNYXRoLmNvcyhhMykpOwogICAgICAgICAgc3Rbc3RJbmRleCsrXSA9IDAuNSAqICgxICsgTWF0aC5zaW4oYTMpKTsKICAgICAgICB9CiAgICAgICAgZm9yIChpID0gaGFsZkVuZFBvczsgaSA+IDA7IGktLSkgewogICAgICAgICAgYTMgPSBNYXRoX2RlZmF1bHQuUElfT1ZFUl9UV08gLSB0aGV0YSAqIGk7CiAgICAgICAgICBzdFtzdEluZGV4KytdID0gMSAtIGxlZnRTdCAqICgxICsgTWF0aC5jb3MoYTMpKTsKICAgICAgICAgIHN0W3N0SW5kZXgrK10gPSAwLjUgKiAoMSArIE1hdGguc2luKGEzKSk7CiAgICAgICAgfQogICAgICAgIGZvciAoaSA9IGxlZnRDb3VudCAtIGVuZFBvc2l0aW9uTGVuZ3RoOyBpID4gMDsgaS0tKSB7CiAgICAgICAgICBzdFtzdEluZGV4KytdID0gaSAqIGxlZnRTdDsKICAgICAgICAgIHN0W3N0SW5kZXgrK10gPSAxOwogICAgICAgIH0KICAgICAgICBmb3IgKGkgPSAxOyBpIDwgaGFsZkVuZFBvcyArIDE7IGkrKykgewogICAgICAgICAgYTMgPSBNYXRoX2RlZmF1bHQuUElfT1ZFUl9UV08gKyB0aGV0YSAqIGk7CiAgICAgICAgICBzdFtzdEluZGV4KytdID0gbGVmdFN0ICogKDEgKyBNYXRoLmNvcyhhMykpOwogICAgICAgICAgc3Rbc3RJbmRleCsrXSA9IDAuNSAqICgxICsgTWF0aC5zaW4oYTMpKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgbGVmdENvdW50IC89IDM7CiAgICAgICAgcmlnaHRDb3VudCAvPSAzOwogICAgICAgIGxlZnRTdCA9IDEgLyAobGVmdENvdW50IC0gMSk7CiAgICAgICAgcmlnaHRTdCA9IDEgLyAocmlnaHRDb3VudCAtIDEpOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCByaWdodENvdW50OyBpKyspIHsKICAgICAgICAgIHN0W3N0SW5kZXgrK10gPSBpICogcmlnaHRTdDsKICAgICAgICAgIHN0W3N0SW5kZXgrK10gPSAwOwogICAgICAgIH0KICAgICAgICBmb3IgKGkgPSBsZWZ0Q291bnQ7IGkgPiAwOyBpLS0pIHsKICAgICAgICAgIHN0W3N0SW5kZXgrK10gPSAoaSAtIDEpICogbGVmdFN0OwogICAgICAgICAgc3Rbc3RJbmRleCsrXSA9IDE7CiAgICAgICAgfQogICAgICB9CiAgICAgIGF0dHJpYnV0ZXMuc3QgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMiwKICAgICAgICB2YWx1ZXM6IHN0CiAgICAgIH0pOwogICAgfQogICAgaWYgKHZlcnRleEZvcm1hdC5ub3JtYWwpIHsKICAgICAgYXR0cmlidXRlcy5ub3JtYWwgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICB2YWx1ZXM6IGF0dHIubm9ybWFscwogICAgICB9KTsKICAgIH0KICAgIGlmICh2ZXJ0ZXhGb3JtYXQudGFuZ2VudCkgewogICAgICBhdHRyaWJ1dGVzLnRhbmdlbnQgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICB2YWx1ZXM6IGF0dHIudGFuZ2VudHMKICAgICAgfSk7CiAgICB9CiAgICBpZiAodmVydGV4Rm9ybWF0LmJpdGFuZ2VudCkgewogICAgICBhdHRyaWJ1dGVzLmJpdGFuZ2VudCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgIHZhbHVlczogYXR0ci5iaXRhbmdlbnRzCiAgICAgIH0pOwogICAgfQogICAgcmV0dXJuIHsKICAgICAgYXR0cmlidXRlcywKICAgICAgaW5kaWNlcwogICAgfTsKICB9CiAgZnVuY3Rpb24gZXh0cnVkZWRBdHRyaWJ1dGVzKGF0dHJpYnV0ZXMsIHZlcnRleEZvcm1hdCkgewogICAgaWYgKCF2ZXJ0ZXhGb3JtYXQubm9ybWFsICYmICF2ZXJ0ZXhGb3JtYXQudGFuZ2VudCAmJiAhdmVydGV4Rm9ybWF0LmJpdGFuZ2VudCAmJiAhdmVydGV4Rm9ybWF0LnN0KSB7CiAgICAgIHJldHVybiBhdHRyaWJ1dGVzOwogICAgfQogICAgY29uc3QgcG9zaXRpb25zID0gYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXM7CiAgICBsZXQgdG9wTm9ybWFsczsKICAgIGxldCB0b3BCaXRhbmdlbnRzOwogICAgaWYgKHZlcnRleEZvcm1hdC5ub3JtYWwgfHwgdmVydGV4Rm9ybWF0LmJpdGFuZ2VudCkgewogICAgICB0b3BOb3JtYWxzID0gYXR0cmlidXRlcy5ub3JtYWwudmFsdWVzOwogICAgICB0b3BCaXRhbmdlbnRzID0gYXR0cmlidXRlcy5iaXRhbmdlbnQudmFsdWVzOwogICAgfQogICAgY29uc3Qgc2l6ZSA9IGF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzLmxlbmd0aCAvIDE4OwogICAgY29uc3QgdGhyZWVTaXplID0gc2l6ZSAqIDM7CiAgICBjb25zdCB0d29TaXplID0gc2l6ZSAqIDI7CiAgICBjb25zdCBzaXhTaXplID0gdGhyZWVTaXplICogMjsKICAgIGxldCBpOwogICAgaWYgKHZlcnRleEZvcm1hdC5ub3JtYWwgfHwgdmVydGV4Rm9ybWF0LmJpdGFuZ2VudCB8fCB2ZXJ0ZXhGb3JtYXQudGFuZ2VudCkgewogICAgICBjb25zdCBub3JtYWxzID0gdmVydGV4Rm9ybWF0Lm5vcm1hbCA/IG5ldyBGbG9hdDMyQXJyYXkodGhyZWVTaXplICogNikgOiB2b2lkIDA7CiAgICAgIGNvbnN0IHRhbmdlbnRzID0gdmVydGV4Rm9ybWF0LnRhbmdlbnQgPyBuZXcgRmxvYXQzMkFycmF5KHRocmVlU2l6ZSAqIDYpIDogdm9pZCAwOwogICAgICBjb25zdCBiaXRhbmdlbnRzID0gdmVydGV4Rm9ybWF0LmJpdGFuZ2VudCA/IG5ldyBGbG9hdDMyQXJyYXkodGhyZWVTaXplICogNikgOiB2b2lkIDA7CiAgICAgIGxldCB0b3BQb3NpdGlvbiA9IGNhcnRlc2lhbjEyOwogICAgICBsZXQgYm90dG9tUG9zaXRpb24gPSBjYXJ0ZXNpYW4yMjsKICAgICAgbGV0IHByZXZpb3VzUG9zaXRpb24gPSBjYXJ0ZXNpYW4zMjsKICAgICAgbGV0IG5vcm1hbDIgPSBjYXJ0ZXNpYW40MjsKICAgICAgbGV0IHRhbmdlbnQgPSBjYXJ0ZXNpYW41MjsKICAgICAgbGV0IGJpdGFuZ2VudCA9IGNhcnRlc2lhbjYyOwogICAgICBsZXQgYXR0ckluZGV4ID0gc2l4U2l6ZTsKICAgICAgZm9yIChpID0gMDsgaSA8IHRocmVlU2l6ZTsgaSArPSAzKSB7CiAgICAgICAgY29uc3QgYXR0ckluZGV4T2Zmc2V0ID0gYXR0ckluZGV4ICsgc2l4U2l6ZTsKICAgICAgICB0b3BQb3NpdGlvbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkocG9zaXRpb25zLCBpLCB0b3BQb3NpdGlvbik7CiAgICAgICAgYm90dG9tUG9zaXRpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KAogICAgICAgICAgcG9zaXRpb25zLAogICAgICAgICAgaSArIHRocmVlU2l6ZSwKICAgICAgICAgIGJvdHRvbVBvc2l0aW9uCiAgICAgICAgKTsKICAgICAgICBwcmV2aW91c1Bvc2l0aW9uID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheSgKICAgICAgICAgIHBvc2l0aW9ucywKICAgICAgICAgIChpICsgMykgJSB0aHJlZVNpemUsCiAgICAgICAgICBwcmV2aW91c1Bvc2l0aW9uCiAgICAgICAgKTsKICAgICAgICBib3R0b21Qb3NpdGlvbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdCgKICAgICAgICAgIGJvdHRvbVBvc2l0aW9uLAogICAgICAgICAgdG9wUG9zaXRpb24sCiAgICAgICAgICBib3R0b21Qb3NpdGlvbgogICAgICAgICk7CiAgICAgICAgcHJldmlvdXNQb3NpdGlvbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdCgKICAgICAgICAgIHByZXZpb3VzUG9zaXRpb24sCiAgICAgICAgICB0b3BQb3NpdGlvbiwKICAgICAgICAgIHByZXZpb3VzUG9zaXRpb24KICAgICAgICApOwogICAgICAgIG5vcm1hbDIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKGJvdHRvbVBvc2l0aW9uLCBwcmV2aW91c1Bvc2l0aW9uLCBub3JtYWwyKSwKICAgICAgICAgIG5vcm1hbDIKICAgICAgICApOwogICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQubm9ybWFsKSB7CiAgICAgICAgICBDb3JyaWRvckdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmFkZEF0dHJpYnV0ZShub3JtYWxzLCBub3JtYWwyLCBhdHRySW5kZXhPZmZzZXQpOwogICAgICAgICAgQ29ycmlkb3JHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5hZGRBdHRyaWJ1dGUoCiAgICAgICAgICAgIG5vcm1hbHMsCiAgICAgICAgICAgIG5vcm1hbDIsCiAgICAgICAgICAgIGF0dHJJbmRleE9mZnNldCArIDMKICAgICAgICAgICk7CiAgICAgICAgICBDb3JyaWRvckdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmFkZEF0dHJpYnV0ZShub3JtYWxzLCBub3JtYWwyLCBhdHRySW5kZXgpOwogICAgICAgICAgQ29ycmlkb3JHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5hZGRBdHRyaWJ1dGUobm9ybWFscywgbm9ybWFsMiwgYXR0ckluZGV4ICsgMyk7CiAgICAgICAgfQogICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQudGFuZ2VudCB8fCB2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50KSB7CiAgICAgICAgICBiaXRhbmdlbnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KHRvcE5vcm1hbHMsIGksIGJpdGFuZ2VudCk7CiAgICAgICAgICBpZiAodmVydGV4Rm9ybWF0LmJpdGFuZ2VudCkgewogICAgICAgICAgICBDb3JyaWRvckdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmFkZEF0dHJpYnV0ZSgKICAgICAgICAgICAgICBiaXRhbmdlbnRzLAogICAgICAgICAgICAgIGJpdGFuZ2VudCwKICAgICAgICAgICAgICBhdHRySW5kZXhPZmZzZXQKICAgICAgICAgICAgKTsKICAgICAgICAgICAgQ29ycmlkb3JHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5hZGRBdHRyaWJ1dGUoCiAgICAgICAgICAgICAgYml0YW5nZW50cywKICAgICAgICAgICAgICBiaXRhbmdlbnQsCiAgICAgICAgICAgICAgYXR0ckluZGV4T2Zmc2V0ICsgMwogICAgICAgICAgICApOwogICAgICAgICAgICBDb3JyaWRvckdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmFkZEF0dHJpYnV0ZSgKICAgICAgICAgICAgICBiaXRhbmdlbnRzLAogICAgICAgICAgICAgIGJpdGFuZ2VudCwKICAgICAgICAgICAgICBhdHRySW5kZXgKICAgICAgICAgICAgKTsKICAgICAgICAgICAgQ29ycmlkb3JHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5hZGRBdHRyaWJ1dGUoCiAgICAgICAgICAgICAgYml0YW5nZW50cywKICAgICAgICAgICAgICBiaXRhbmdlbnQsCiAgICAgICAgICAgICAgYXR0ckluZGV4ICsgMwogICAgICAgICAgICApOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHZlcnRleEZvcm1hdC50YW5nZW50KSB7CiAgICAgICAgICAgIHRhbmdlbnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKAogICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyhiaXRhbmdlbnQsIG5vcm1hbDIsIHRhbmdlbnQpLAogICAgICAgICAgICAgIHRhbmdlbnQKICAgICAgICAgICAgKTsKICAgICAgICAgICAgQ29ycmlkb3JHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5hZGRBdHRyaWJ1dGUoCiAgICAgICAgICAgICAgdGFuZ2VudHMsCiAgICAgICAgICAgICAgdGFuZ2VudCwKICAgICAgICAgICAgICBhdHRySW5kZXhPZmZzZXQKICAgICAgICAgICAgKTsKICAgICAgICAgICAgQ29ycmlkb3JHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5hZGRBdHRyaWJ1dGUoCiAgICAgICAgICAgICAgdGFuZ2VudHMsCiAgICAgICAgICAgICAgdGFuZ2VudCwKICAgICAgICAgICAgICBhdHRySW5kZXhPZmZzZXQgKyAzCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIENvcnJpZG9yR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuYWRkQXR0cmlidXRlKHRhbmdlbnRzLCB0YW5nZW50LCBhdHRySW5kZXgpOwogICAgICAgICAgICBDb3JyaWRvckdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmFkZEF0dHJpYnV0ZSgKICAgICAgICAgICAgICB0YW5nZW50cywKICAgICAgICAgICAgICB0YW5nZW50LAogICAgICAgICAgICAgIGF0dHJJbmRleCArIDMKICAgICAgICAgICAgKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgYXR0ckluZGV4ICs9IDY7CiAgICAgIH0KICAgICAgaWYgKHZlcnRleEZvcm1hdC5ub3JtYWwpIHsKICAgICAgICBub3JtYWxzLnNldCh0b3BOb3JtYWxzKTsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhyZWVTaXplOyBpICs9IDMpIHsKICAgICAgICAgIG5vcm1hbHNbaSArIHRocmVlU2l6ZV0gPSAtdG9wTm9ybWFsc1tpXTsKICAgICAgICAgIG5vcm1hbHNbaSArIHRocmVlU2l6ZSArIDFdID0gLXRvcE5vcm1hbHNbaSArIDFdOwogICAgICAgICAgbm9ybWFsc1tpICsgdGhyZWVTaXplICsgMl0gPSAtdG9wTm9ybWFsc1tpICsgMl07CiAgICAgICAgfQogICAgICAgIGF0dHJpYnV0ZXMubm9ybWFsLnZhbHVlcyA9IG5vcm1hbHM7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgYXR0cmlidXRlcy5ub3JtYWwgPSB2b2lkIDA7CiAgICAgIH0KICAgICAgaWYgKHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpIHsKICAgICAgICBiaXRhbmdlbnRzLnNldCh0b3BCaXRhbmdlbnRzKTsKICAgICAgICBiaXRhbmdlbnRzLnNldCh0b3BCaXRhbmdlbnRzLCB0aHJlZVNpemUpOwogICAgICAgIGF0dHJpYnV0ZXMuYml0YW5nZW50LnZhbHVlcyA9IGJpdGFuZ2VudHM7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgYXR0cmlidXRlcy5iaXRhbmdlbnQgPSB2b2lkIDA7CiAgICAgIH0KICAgICAgaWYgKHZlcnRleEZvcm1hdC50YW5nZW50KSB7CiAgICAgICAgY29uc3QgdG9wVGFuZ2VudHMgPSBhdHRyaWJ1dGVzLnRhbmdlbnQudmFsdWVzOwogICAgICAgIHRhbmdlbnRzLnNldCh0b3BUYW5nZW50cyk7CiAgICAgICAgdGFuZ2VudHMuc2V0KHRvcFRhbmdlbnRzLCB0aHJlZVNpemUpOwogICAgICAgIGF0dHJpYnV0ZXMudGFuZ2VudC52YWx1ZXMgPSB0YW5nZW50czsKICAgICAgfQogICAgfQogICAgaWYgKHZlcnRleEZvcm1hdC5zdCkgewogICAgICBjb25zdCB0b3BTdCA9IGF0dHJpYnV0ZXMuc3QudmFsdWVzOwogICAgICBjb25zdCBzdCA9IG5ldyBGbG9hdDMyQXJyYXkodHdvU2l6ZSAqIDYpOwogICAgICBzdC5zZXQodG9wU3QpOwogICAgICBzdC5zZXQodG9wU3QsIHR3b1NpemUpOwogICAgICBsZXQgaW5kZXggPSB0d29TaXplICogMjsKICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCAyOyBqKyspIHsKICAgICAgICBzdFtpbmRleCsrXSA9IHRvcFN0WzBdOwogICAgICAgIHN0W2luZGV4KytdID0gdG9wU3RbMV07CiAgICAgICAgZm9yIChpID0gMjsgaSA8IHR3b1NpemU7IGkgKz0gMikgewogICAgICAgICAgY29uc3QgcyA9IHRvcFN0W2ldOwogICAgICAgICAgY29uc3QgdCA9IHRvcFN0W2kgKyAxXTsKICAgICAgICAgIHN0W2luZGV4KytdID0gczsKICAgICAgICAgIHN0W2luZGV4KytdID0gdDsKICAgICAgICAgIHN0W2luZGV4KytdID0gczsKICAgICAgICAgIHN0W2luZGV4KytdID0gdDsKICAgICAgICB9CiAgICAgICAgc3RbaW5kZXgrK10gPSB0b3BTdFswXTsKICAgICAgICBzdFtpbmRleCsrXSA9IHRvcFN0WzFdOwogICAgICB9CiAgICAgIGF0dHJpYnV0ZXMuc3QudmFsdWVzID0gc3Q7CiAgICB9CiAgICByZXR1cm4gYXR0cmlidXRlczsKICB9CiAgZnVuY3Rpb24gYWRkV2FsbFBvc2l0aW9ucyhwb3NpdGlvbnMsIGluZGV4LCB3YWxsUG9zaXRpb25zKSB7CiAgICB3YWxsUG9zaXRpb25zW2luZGV4KytdID0gcG9zaXRpb25zWzBdOwogICAgd2FsbFBvc2l0aW9uc1tpbmRleCsrXSA9IHBvc2l0aW9uc1sxXTsKICAgIHdhbGxQb3NpdGlvbnNbaW5kZXgrK10gPSBwb3NpdGlvbnNbMl07CiAgICBmb3IgKGxldCBpID0gMzsgaSA8IHBvc2l0aW9ucy5sZW5ndGg7IGkgKz0gMykgewogICAgICBjb25zdCB4ID0gcG9zaXRpb25zW2ldOwogICAgICBjb25zdCB5ID0gcG9zaXRpb25zW2kgKyAxXTsKICAgICAgY29uc3QgeiA9IHBvc2l0aW9uc1tpICsgMl07CiAgICAgIHdhbGxQb3NpdGlvbnNbaW5kZXgrK10gPSB4OwogICAgICB3YWxsUG9zaXRpb25zW2luZGV4KytdID0geTsKICAgICAgd2FsbFBvc2l0aW9uc1tpbmRleCsrXSA9IHo7CiAgICAgIHdhbGxQb3NpdGlvbnNbaW5kZXgrK10gPSB4OwogICAgICB3YWxsUG9zaXRpb25zW2luZGV4KytdID0geTsKICAgICAgd2FsbFBvc2l0aW9uc1tpbmRleCsrXSA9IHo7CiAgICB9CiAgICB3YWxsUG9zaXRpb25zW2luZGV4KytdID0gcG9zaXRpb25zWzBdOwogICAgd2FsbFBvc2l0aW9uc1tpbmRleCsrXSA9IHBvc2l0aW9uc1sxXTsKICAgIHdhbGxQb3NpdGlvbnNbaW5kZXgrK10gPSBwb3NpdGlvbnNbMl07CiAgICByZXR1cm4gd2FsbFBvc2l0aW9uczsKICB9CiAgZnVuY3Rpb24gY29tcHV0ZVBvc2l0aW9uc0V4dHJ1ZGVkKHBhcmFtcywgdmVydGV4Rm9ybWF0KSB7CiAgICBjb25zdCB0b3BWZXJ0ZXhGb3JtYXQgPSBuZXcgVmVydGV4Rm9ybWF0X2RlZmF1bHQoewogICAgICBwb3NpdGlvbjogdmVydGV4Rm9ybWF0LnBvc2l0aW9uLAogICAgICBub3JtYWw6IHZlcnRleEZvcm1hdC5ub3JtYWwgfHwgdmVydGV4Rm9ybWF0LmJpdGFuZ2VudCB8fCBwYXJhbXMuc2hhZG93Vm9sdW1lLAogICAgICB0YW5nZW50OiB2ZXJ0ZXhGb3JtYXQudGFuZ2VudCwKICAgICAgYml0YW5nZW50OiB2ZXJ0ZXhGb3JtYXQubm9ybWFsIHx8IHZlcnRleEZvcm1hdC5iaXRhbmdlbnQsCiAgICAgIHN0OiB2ZXJ0ZXhGb3JtYXQuc3QKICAgIH0pOwogICAgY29uc3QgZWxsaXBzb2lkID0gcGFyYW1zLmVsbGlwc29pZDsKICAgIGNvbnN0IGNvbXB1dGVkUG9zaXRpb25zID0gQ29ycmlkb3JHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5jb21wdXRlUG9zaXRpb25zKHBhcmFtcyk7CiAgICBjb25zdCBhdHRyID0gY29tYmluZTIoY29tcHV0ZWRQb3NpdGlvbnMsIHRvcFZlcnRleEZvcm1hdCwgZWxsaXBzb2lkKTsKICAgIGNvbnN0IGhlaWdodCA9IHBhcmFtcy5oZWlnaHQ7CiAgICBjb25zdCBleHRydWRlZEhlaWdodCA9IHBhcmFtcy5leHRydWRlZEhlaWdodDsKICAgIGxldCBhdHRyaWJ1dGVzID0gYXR0ci5hdHRyaWJ1dGVzOwogICAgY29uc3QgaW5kaWNlcyA9IGF0dHIuaW5kaWNlczsKICAgIGxldCBwb3NpdGlvbnMgPSBhdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlczsKICAgIGxldCBsZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoOwogICAgY29uc3QgbmV3UG9zaXRpb25zID0gbmV3IEZsb2F0NjRBcnJheShsZW5ndGggKiA2KTsKICAgIGxldCBleHRydWRlZFBvc2l0aW9ucyA9IG5ldyBGbG9hdDY0QXJyYXkobGVuZ3RoKTsKICAgIGV4dHJ1ZGVkUG9zaXRpb25zLnNldChwb3NpdGlvbnMpOwogICAgbGV0IHdhbGxQb3NpdGlvbnMgPSBuZXcgRmxvYXQ2NEFycmF5KGxlbmd0aCAqIDQpOwogICAgcG9zaXRpb25zID0gUG9seWdvblBpcGVsaW5lX2RlZmF1bHQuc2NhbGVUb0dlb2RldGljSGVpZ2h0KAogICAgICBwb3NpdGlvbnMsCiAgICAgIGhlaWdodCwKICAgICAgZWxsaXBzb2lkCiAgICApOwogICAgd2FsbFBvc2l0aW9ucyA9IGFkZFdhbGxQb3NpdGlvbnMocG9zaXRpb25zLCAwLCB3YWxsUG9zaXRpb25zKTsKICAgIGV4dHJ1ZGVkUG9zaXRpb25zID0gUG9seWdvblBpcGVsaW5lX2RlZmF1bHQuc2NhbGVUb0dlb2RldGljSGVpZ2h0KAogICAgICBleHRydWRlZFBvc2l0aW9ucywKICAgICAgZXh0cnVkZWRIZWlnaHQsCiAgICAgIGVsbGlwc29pZAogICAgKTsKICAgIHdhbGxQb3NpdGlvbnMgPSBhZGRXYWxsUG9zaXRpb25zKAogICAgICBleHRydWRlZFBvc2l0aW9ucywKICAgICAgbGVuZ3RoICogMiwKICAgICAgd2FsbFBvc2l0aW9ucwogICAgKTsKICAgIG5ld1Bvc2l0aW9ucy5zZXQocG9zaXRpb25zKTsKICAgIG5ld1Bvc2l0aW9ucy5zZXQoZXh0cnVkZWRQb3NpdGlvbnMsIGxlbmd0aCk7CiAgICBuZXdQb3NpdGlvbnMuc2V0KHdhbGxQb3NpdGlvbnMsIGxlbmd0aCAqIDIpOwogICAgYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXMgPSBuZXdQb3NpdGlvbnM7CiAgICBhdHRyaWJ1dGVzID0gZXh0cnVkZWRBdHRyaWJ1dGVzKGF0dHJpYnV0ZXMsIHZlcnRleEZvcm1hdCk7CiAgICBsZXQgaTsKICAgIGNvbnN0IHNpemUgPSBsZW5ndGggLyAzOwogICAgaWYgKHBhcmFtcy5zaGFkb3dWb2x1bWUpIHsKICAgICAgY29uc3QgdG9wTm9ybWFscyA9IGF0dHJpYnV0ZXMubm9ybWFsLnZhbHVlczsKICAgICAgbGVuZ3RoID0gdG9wTm9ybWFscy5sZW5ndGg7CiAgICAgIGxldCBleHRydWRlTm9ybWFscyA9IG5ldyBGbG9hdDMyQXJyYXkobGVuZ3RoICogNik7CiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgIHRvcE5vcm1hbHNbaV0gPSAtdG9wTm9ybWFsc1tpXTsKICAgICAgfQogICAgICBleHRydWRlTm9ybWFscy5zZXQodG9wTm9ybWFscywgbGVuZ3RoKTsKICAgICAgZXh0cnVkZU5vcm1hbHMgPSBhZGRXYWxsUG9zaXRpb25zKHRvcE5vcm1hbHMsIGxlbmd0aCAqIDQsIGV4dHJ1ZGVOb3JtYWxzKTsKICAgICAgYXR0cmlidXRlcy5leHRydWRlRGlyZWN0aW9uID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkZMT0FULAogICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgdmFsdWVzOiBleHRydWRlTm9ybWFscwogICAgICB9KTsKICAgICAgaWYgKCF2ZXJ0ZXhGb3JtYXQubm9ybWFsKSB7CiAgICAgICAgYXR0cmlidXRlcy5ub3JtYWwgPSB2b2lkIDA7CiAgICAgIH0KICAgIH0KICAgIGlmIChkZWZpbmVkX2RlZmF1bHQocGFyYW1zLm9mZnNldEF0dHJpYnV0ZSkpIHsKICAgICAgbGV0IGFwcGx5T2Zmc2V0ID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSAqIDYpOwogICAgICBpZiAocGFyYW1zLm9mZnNldEF0dHJpYnV0ZSA9PT0gR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGVfZGVmYXVsdC5UT1ApIHsKICAgICAgICBhcHBseU9mZnNldCA9IGFwcGx5T2Zmc2V0LmZpbGwoMSwgMCwgc2l6ZSkuZmlsbCgxLCBzaXplICogMiwgc2l6ZSAqIDQpOwogICAgICB9IGVsc2UgewogICAgICAgIGNvbnN0IGFwcGx5T2Zmc2V0VmFsdWUgPSBwYXJhbXMub2Zmc2V0QXR0cmlidXRlID09PSBHZW9tZXRyeU9mZnNldEF0dHJpYnV0ZV9kZWZhdWx0Lk5PTkUgPyAwIDogMTsKICAgICAgICBhcHBseU9mZnNldCA9IGFwcGx5T2Zmc2V0LmZpbGwoYXBwbHlPZmZzZXRWYWx1ZSk7CiAgICAgIH0KICAgICAgYXR0cmlidXRlcy5hcHBseU9mZnNldCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5VTlNJR05FRF9CWVRFLAogICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDEsCiAgICAgICAgdmFsdWVzOiBhcHBseU9mZnNldAogICAgICB9KTsKICAgIH0KICAgIGNvbnN0IGlMZW5ndGggPSBpbmRpY2VzLmxlbmd0aDsKICAgIGNvbnN0IHR3b1NpemUgPSBzaXplICsgc2l6ZTsKICAgIGNvbnN0IG5ld0luZGljZXMgPSBJbmRleERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheSgKICAgICAgbmV3UG9zaXRpb25zLmxlbmd0aCAvIDMsCiAgICAgIGlMZW5ndGggKiAyICsgdHdvU2l6ZSAqIDMKICAgICk7CiAgICBuZXdJbmRpY2VzLnNldChpbmRpY2VzKTsKICAgIGxldCBpbmRleCA9IGlMZW5ndGg7CiAgICBmb3IgKGkgPSAwOyBpIDwgaUxlbmd0aDsgaSArPSAzKSB7CiAgICAgIGNvbnN0IHYwMiA9IGluZGljZXNbaV07CiAgICAgIGNvbnN0IHYxMiA9IGluZGljZXNbaSArIDFdOwogICAgICBjb25zdCB2MjIgPSBpbmRpY2VzW2kgKyAyXTsKICAgICAgbmV3SW5kaWNlc1tpbmRleCsrXSA9IHYyMiArIHNpemU7CiAgICAgIG5ld0luZGljZXNbaW5kZXgrK10gPSB2MTIgKyBzaXplOwogICAgICBuZXdJbmRpY2VzW2luZGV4KytdID0gdjAyICsgc2l6ZTsKICAgIH0KICAgIGxldCBVTCwgTEwsIFVSLCBMUjsKICAgIGZvciAoaSA9IDA7IGkgPCB0d29TaXplOyBpICs9IDIpIHsKICAgICAgVUwgPSBpICsgdHdvU2l6ZTsKICAgICAgTEwgPSBVTCArIHR3b1NpemU7CiAgICAgIFVSID0gVUwgKyAxOwogICAgICBMUiA9IExMICsgMTsKICAgICAgbmV3SW5kaWNlc1tpbmRleCsrXSA9IFVMOwogICAgICBuZXdJbmRpY2VzW2luZGV4KytdID0gTEw7CiAgICAgIG5ld0luZGljZXNbaW5kZXgrK10gPSBVUjsKICAgICAgbmV3SW5kaWNlc1tpbmRleCsrXSA9IFVSOwogICAgICBuZXdJbmRpY2VzW2luZGV4KytdID0gTEw7CiAgICAgIG5ld0luZGljZXNbaW5kZXgrK10gPSBMUjsKICAgIH0KICAgIHJldHVybiB7CiAgICAgIGF0dHJpYnV0ZXMsCiAgICAgIGluZGljZXM6IG5ld0luZGljZXMKICAgIH07CiAgfQogIGZ1bmN0aW9uIGNvbXB1dGVPZmZzZXRQb2ludHMocG9zaXRpb24xLCBwb3NpdGlvbjIsIGVsbGlwc29pZCwgaGFsZldpZHRoLCBtaW4zLCBtYXgzKSB7CiAgICBjb25zdCBkaXJlY3Rpb24yID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KAogICAgICBwb3NpdGlvbjIsCiAgICAgIHBvc2l0aW9uMSwKICAgICAgc2NyYXRjaENhcnRlc2lhbjE3CiAgICApOwogICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShkaXJlY3Rpb24yLCBkaXJlY3Rpb24yKTsKICAgIGNvbnN0IG5vcm1hbDIgPSBlbGxpcHNvaWQuZ2VvZGV0aWNTdXJmYWNlTm9ybWFsKHBvc2l0aW9uMSwgc2NyYXRjaENhcnRlc2lhbjI3KTsKICAgIGNvbnN0IG9mZnNldERpcmVjdGlvbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcygKICAgICAgZGlyZWN0aW9uMiwKICAgICAgbm9ybWFsMiwKICAgICAgc2NyYXRjaENhcnRlc2lhbjE3CiAgICApOwogICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIob2Zmc2V0RGlyZWN0aW9uLCBoYWxmV2lkdGgsIG9mZnNldERpcmVjdGlvbik7CiAgICBsZXQgbWluTGF0ID0gbWluMy5sYXRpdHVkZTsKICAgIGxldCBtaW5Mb24gPSBtaW4zLmxvbmdpdHVkZTsKICAgIGxldCBtYXhMYXQgPSBtYXgzLmxhdGl0dWRlOwogICAgbGV0IG1heExvbiA9IG1heDMubG9uZ2l0dWRlOwogICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChwb3NpdGlvbjEsIG9mZnNldERpcmVjdGlvbiwgc2NyYXRjaENhcnRlc2lhbjI3KTsKICAgIGVsbGlwc29pZC5jYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpYyhzY3JhdGNoQ2FydGVzaWFuMjcsIHNjcmF0Y2hDYXJ0b2dyYXBoaWM0KTsKICAgIGxldCBsYXQgPSBzY3JhdGNoQ2FydG9ncmFwaGljNC5sYXRpdHVkZTsKICAgIGxldCBsb24gPSBzY3JhdGNoQ2FydG9ncmFwaGljNC5sb25naXR1ZGU7CiAgICBtaW5MYXQgPSBNYXRoLm1pbihtaW5MYXQsIGxhdCk7CiAgICBtaW5Mb24gPSBNYXRoLm1pbihtaW5Mb24sIGxvbik7CiAgICBtYXhMYXQgPSBNYXRoLm1heChtYXhMYXQsIGxhdCk7CiAgICBtYXhMb24gPSBNYXRoLm1heChtYXhMb24sIGxvbik7CiAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QocG9zaXRpb24xLCBvZmZzZXREaXJlY3Rpb24sIHNjcmF0Y2hDYXJ0ZXNpYW4yNyk7CiAgICBlbGxpcHNvaWQuY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWMoc2NyYXRjaENhcnRlc2lhbjI3LCBzY3JhdGNoQ2FydG9ncmFwaGljNCk7CiAgICBsYXQgPSBzY3JhdGNoQ2FydG9ncmFwaGljNC5sYXRpdHVkZTsKICAgIGxvbiA9IHNjcmF0Y2hDYXJ0b2dyYXBoaWM0LmxvbmdpdHVkZTsKICAgIG1pbkxhdCA9IE1hdGgubWluKG1pbkxhdCwgbGF0KTsKICAgIG1pbkxvbiA9IE1hdGgubWluKG1pbkxvbiwgbG9uKTsKICAgIG1heExhdCA9IE1hdGgubWF4KG1heExhdCwgbGF0KTsKICAgIG1heExvbiA9IE1hdGgubWF4KG1heExvbiwgbG9uKTsKICAgIG1pbjMubGF0aXR1ZGUgPSBtaW5MYXQ7CiAgICBtaW4zLmxvbmdpdHVkZSA9IG1pbkxvbjsKICAgIG1heDMubGF0aXR1ZGUgPSBtYXhMYXQ7CiAgICBtYXgzLmxvbmdpdHVkZSA9IG1heExvbjsKICB9CiAgZnVuY3Rpb24gY29tcHV0ZVJlY3RhbmdsZTIocG9zaXRpb25zLCBlbGxpcHNvaWQsIHdpZHRoLCBjb3JuZXJUeXBlLCByZXN1bHQpIHsKICAgIHBvc2l0aW9ucyA9IHNjYWxlVG9TdXJmYWNlMihwb3NpdGlvbnMsIGVsbGlwc29pZCk7CiAgICBjb25zdCBjbGVhblBvc2l0aW9ucyA9IGFycmF5UmVtb3ZlRHVwbGljYXRlc19kZWZhdWx0KAogICAgICBwb3NpdGlvbnMsCiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5lcXVhbHNFcHNpbG9uCiAgICApOwogICAgY29uc3QgbGVuZ3RoID0gY2xlYW5Qb3NpdGlvbnMubGVuZ3RoOwogICAgaWYgKGxlbmd0aCA8IDIgfHwgd2lkdGggPD0gMCkgewogICAgICByZXR1cm4gbmV3IFJlY3RhbmdsZV9kZWZhdWx0KCk7CiAgICB9CiAgICBjb25zdCBoYWxmV2lkdGggPSB3aWR0aCAqIDAuNTsKICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWNNaW4ubGF0aXR1ZGUgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7CiAgICBzY3JhdGNoQ2FydG9ncmFwaGljTWluLmxvbmdpdHVkZSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTsKICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWNNYXgubGF0aXR1ZGUgPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7CiAgICBzY3JhdGNoQ2FydG9ncmFwaGljTWF4LmxvbmdpdHVkZSA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTsKICAgIGxldCBsYXQsIGxvbjsKICAgIGlmIChjb3JuZXJUeXBlID09PSBDb3JuZXJUeXBlX2RlZmF1bHQuUk9VTkRFRCkgewogICAgICBjb25zdCBmaXJzdCA9IGNsZWFuUG9zaXRpb25zWzBdOwogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoZmlyc3QsIGNsZWFuUG9zaXRpb25zWzFdLCBzY3JhdGNoQ2FydGVzaWFuT2Zmc2V0KTsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShzY3JhdGNoQ2FydGVzaWFuT2Zmc2V0LCBzY3JhdGNoQ2FydGVzaWFuT2Zmc2V0KTsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIoCiAgICAgICAgc2NyYXRjaENhcnRlc2lhbk9mZnNldCwKICAgICAgICBoYWxmV2lkdGgsCiAgICAgICAgc2NyYXRjaENhcnRlc2lhbk9mZnNldAogICAgICApOwogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKGZpcnN0LCBzY3JhdGNoQ2FydGVzaWFuT2Zmc2V0LCBzY3JhdGNoQ2FydGVzaWFuRW5kcyk7CiAgICAgIGVsbGlwc29pZC5jYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpYygKICAgICAgICBzY3JhdGNoQ2FydGVzaWFuRW5kcywKICAgICAgICBzY3JhdGNoQ2FydG9ncmFwaGljNAogICAgICApOwogICAgICBsYXQgPSBzY3JhdGNoQ2FydG9ncmFwaGljNC5sYXRpdHVkZTsKICAgICAgbG9uID0gc2NyYXRjaENhcnRvZ3JhcGhpYzQubG9uZ2l0dWRlOwogICAgICBzY3JhdGNoQ2FydG9ncmFwaGljTWluLmxhdGl0dWRlID0gTWF0aC5taW4oCiAgICAgICAgc2NyYXRjaENhcnRvZ3JhcGhpY01pbi5sYXRpdHVkZSwKICAgICAgICBsYXQKICAgICAgKTsKICAgICAgc2NyYXRjaENhcnRvZ3JhcGhpY01pbi5sb25naXR1ZGUgPSBNYXRoLm1pbigKICAgICAgICBzY3JhdGNoQ2FydG9ncmFwaGljTWluLmxvbmdpdHVkZSwKICAgICAgICBsb24KICAgICAgKTsKICAgICAgc2NyYXRjaENhcnRvZ3JhcGhpY01heC5sYXRpdHVkZSA9IE1hdGgubWF4KAogICAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWNNYXgubGF0aXR1ZGUsCiAgICAgICAgbGF0CiAgICAgICk7CiAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWNNYXgubG9uZ2l0dWRlID0gTWF0aC5tYXgoCiAgICAgICAgc2NyYXRjaENhcnRvZ3JhcGhpY01heC5sb25naXR1ZGUsCiAgICAgICAgbG9uCiAgICAgICk7CiAgICB9CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aCAtIDE7ICsraSkgewogICAgICBjb21wdXRlT2Zmc2V0UG9pbnRzKAogICAgICAgIGNsZWFuUG9zaXRpb25zW2ldLAogICAgICAgIGNsZWFuUG9zaXRpb25zW2kgKyAxXSwKICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgaGFsZldpZHRoLAogICAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWNNaW4sCiAgICAgICAgc2NyYXRjaENhcnRvZ3JhcGhpY01heAogICAgICApOwogICAgfQogICAgY29uc3QgbGFzdCA9IGNsZWFuUG9zaXRpb25zW2xlbmd0aCAtIDFdOwogICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KGxhc3QsIGNsZWFuUG9zaXRpb25zW2xlbmd0aCAtIDJdLCBzY3JhdGNoQ2FydGVzaWFuT2Zmc2V0KTsKICAgIENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoc2NyYXRjaENhcnRlc2lhbk9mZnNldCwgc2NyYXRjaENhcnRlc2lhbk9mZnNldCk7CiAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcigKICAgICAgc2NyYXRjaENhcnRlc2lhbk9mZnNldCwKICAgICAgaGFsZldpZHRoLAogICAgICBzY3JhdGNoQ2FydGVzaWFuT2Zmc2V0CiAgICApOwogICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChsYXN0LCBzY3JhdGNoQ2FydGVzaWFuT2Zmc2V0LCBzY3JhdGNoQ2FydGVzaWFuRW5kcyk7CiAgICBjb21wdXRlT2Zmc2V0UG9pbnRzKAogICAgICBsYXN0LAogICAgICBzY3JhdGNoQ2FydGVzaWFuRW5kcywKICAgICAgZWxsaXBzb2lkLAogICAgICBoYWxmV2lkdGgsCiAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWNNaW4sCiAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWNNYXgKICAgICk7CiAgICBpZiAoY29ybmVyVHlwZSA9PT0gQ29ybmVyVHlwZV9kZWZhdWx0LlJPVU5ERUQpIHsKICAgICAgZWxsaXBzb2lkLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljKAogICAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW5FbmRzLAogICAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWM0CiAgICAgICk7CiAgICAgIGxhdCA9IHNjcmF0Y2hDYXJ0b2dyYXBoaWM0LmxhdGl0dWRlOwogICAgICBsb24gPSBzY3JhdGNoQ2FydG9ncmFwaGljNC5sb25naXR1ZGU7CiAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWNNaW4ubGF0aXR1ZGUgPSBNYXRoLm1pbigKICAgICAgICBzY3JhdGNoQ2FydG9ncmFwaGljTWluLmxhdGl0dWRlLAogICAgICAgIGxhdAogICAgICApOwogICAgICBzY3JhdGNoQ2FydG9ncmFwaGljTWluLmxvbmdpdHVkZSA9IE1hdGgubWluKAogICAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWNNaW4ubG9uZ2l0dWRlLAogICAgICAgIGxvbgogICAgICApOwogICAgICBzY3JhdGNoQ2FydG9ncmFwaGljTWF4LmxhdGl0dWRlID0gTWF0aC5tYXgoCiAgICAgICAgc2NyYXRjaENhcnRvZ3JhcGhpY01heC5sYXRpdHVkZSwKICAgICAgICBsYXQKICAgICAgKTsKICAgICAgc2NyYXRjaENhcnRvZ3JhcGhpY01heC5sb25naXR1ZGUgPSBNYXRoLm1heCgKICAgICAgICBzY3JhdGNoQ2FydG9ncmFwaGljTWF4LmxvbmdpdHVkZSwKICAgICAgICBsb24KICAgICAgKTsKICAgIH0KICAgIGNvbnN0IHJlY3RhbmdsZSA9IGRlZmluZWRfZGVmYXVsdChyZXN1bHQpID8gcmVzdWx0IDogbmV3IFJlY3RhbmdsZV9kZWZhdWx0KCk7CiAgICByZWN0YW5nbGUubm9ydGggPSBzY3JhdGNoQ2FydG9ncmFwaGljTWF4LmxhdGl0dWRlOwogICAgcmVjdGFuZ2xlLnNvdXRoID0gc2NyYXRjaENhcnRvZ3JhcGhpY01pbi5sYXRpdHVkZTsKICAgIHJlY3RhbmdsZS5lYXN0ID0gc2NyYXRjaENhcnRvZ3JhcGhpY01heC5sb25naXR1ZGU7CiAgICByZWN0YW5nbGUud2VzdCA9IHNjcmF0Y2hDYXJ0b2dyYXBoaWNNaW4ubG9uZ2l0dWRlOwogICAgcmV0dXJuIHJlY3RhbmdsZTsKICB9CiAgZnVuY3Rpb24gQ29ycmlkb3JHZW9tZXRyeShvcHRpb25zKSB7CiAgICBvcHRpb25zID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucywgZGVmYXVsdFZhbHVlX2RlZmF1bHQuRU1QVFlfT0JKRUNUKTsKICAgIGNvbnN0IHBvc2l0aW9ucyA9IG9wdGlvbnMucG9zaXRpb25zOwogICAgY29uc3Qgd2lkdGggPSBvcHRpb25zLndpZHRoOwogICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJvcHRpb25zLnBvc2l0aW9ucyIsIHBvc2l0aW9ucyk7CiAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoIm9wdGlvbnMud2lkdGgiLCB3aWR0aCk7CiAgICBjb25zdCBoZWlnaHQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmhlaWdodCwgMCk7CiAgICBjb25zdCBleHRydWRlZEhlaWdodCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuZXh0cnVkZWRIZWlnaHQsIGhlaWdodCk7CiAgICB0aGlzLl9wb3NpdGlvbnMgPSBwb3NpdGlvbnM7CiAgICB0aGlzLl9lbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZSgKICAgICAgZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5lbGxpcHNvaWQsIEVsbGlwc29pZF9kZWZhdWx0LmRlZmF1bHQpCiAgICApOwogICAgdGhpcy5fdmVydGV4Rm9ybWF0ID0gVmVydGV4Rm9ybWF0X2RlZmF1bHQuY2xvbmUoCiAgICAgIGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMudmVydGV4Rm9ybWF0LCBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5ERUZBVUxUKQogICAgKTsKICAgIHRoaXMuX3dpZHRoID0gd2lkdGg7CiAgICB0aGlzLl9oZWlnaHQgPSBNYXRoLm1heChoZWlnaHQsIGV4dHJ1ZGVkSGVpZ2h0KTsKICAgIHRoaXMuX2V4dHJ1ZGVkSGVpZ2h0ID0gTWF0aC5taW4oaGVpZ2h0LCBleHRydWRlZEhlaWdodCk7CiAgICB0aGlzLl9jb3JuZXJUeXBlID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5jb3JuZXJUeXBlLCBDb3JuZXJUeXBlX2RlZmF1bHQuUk9VTkRFRCk7CiAgICB0aGlzLl9ncmFudWxhcml0eSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KAogICAgICBvcHRpb25zLmdyYW51bGFyaXR5LAogICAgICBNYXRoX2RlZmF1bHQuUkFESUFOU19QRVJfREVHUkVFCiAgICApOwogICAgdGhpcy5fc2hhZG93Vm9sdW1lID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5zaGFkb3dWb2x1bWUsIGZhbHNlKTsKICAgIHRoaXMuX3dvcmtlck5hbWUgPSAiY3JlYXRlQ29ycmlkb3JHZW9tZXRyeSI7CiAgICB0aGlzLl9vZmZzZXRBdHRyaWJ1dGUgPSBvcHRpb25zLm9mZnNldEF0dHJpYnV0ZTsKICAgIHRoaXMuX3JlY3RhbmdsZSA9IHZvaWQgMDsKICAgIHRoaXMucGFja2VkTGVuZ3RoID0gMSArIHBvc2l0aW9ucy5sZW5ndGggKiBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoICsgRWxsaXBzb2lkX2RlZmF1bHQucGFja2VkTGVuZ3RoICsgVmVydGV4Rm9ybWF0X2RlZmF1bHQucGFja2VkTGVuZ3RoICsgNzsKICB9CiAgdmFyIGNhcnRlc2lhbjEyLCBjYXJ0ZXNpYW4yMiwgY2FydGVzaWFuMzIsIGNhcnRlc2lhbjQyLCBjYXJ0ZXNpYW41MiwgY2FydGVzaWFuNjIsIHNjcmF0Y2gxMywgc2NyYXRjaDIzLCBzY3JhdGNoQ2FydGVzaWFuMTcsIHNjcmF0Y2hDYXJ0ZXNpYW4yNywgc2NyYXRjaENhcnRvZ3JhcGhpYzQsIHNjcmF0Y2hDYXJ0ZXNpYW5PZmZzZXQsIHNjcmF0Y2hDYXJ0ZXNpYW5FbmRzLCBzY3JhdGNoQ2FydG9ncmFwaGljTWluLCBzY3JhdGNoQ2FydG9ncmFwaGljTWF4LCBzY3JhdGNoRWxsaXBzb2lkNCwgc2NyYXRjaFZlcnRleEZvcm1hdDQsIHNjcmF0Y2hPcHRpb25zOSwgQ29ycmlkb3JHZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X0NvcnJpZG9yR2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0NvcnJpZG9yR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X2FycmF5UmVtb3ZlRHVwbGljYXRlcygpOwogICAgICBpbml0X0JvdW5kaW5nU3BoZXJlKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NhcnRvZ3JhcGhpYygpOwogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfQ29tcG9uZW50RGF0YXR5cGUoKTsKICAgICAgaW5pdF9Db3JuZXJUeXBlKCk7CiAgICAgIGluaXRfQ29ycmlkb3JHZW9tZXRyeUxpYnJhcnkoKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkKCk7CiAgICAgIGluaXRfR2VvbWV0cnkoKTsKICAgICAgaW5pdF9HZW9tZXRyeUF0dHJpYnV0ZSgpOwogICAgICBpbml0X0dlb21ldHJ5QXR0cmlidXRlcygpOwogICAgICBpbml0X0dlb21ldHJ5T2Zmc2V0QXR0cmlidXRlKCk7CiAgICAgIGluaXRfSW5kZXhEYXRhdHlwZSgpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgaW5pdF9Qb2x5Z29uUGlwZWxpbmUoKTsKICAgICAgaW5pdF9QcmltaXRpdmVUeXBlKCk7CiAgICAgIGluaXRfUmVjdGFuZ2xlKCk7CiAgICAgIGluaXRfVmVydGV4Rm9ybWF0KCk7CiAgICAgIGNhcnRlc2lhbjEyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBjYXJ0ZXNpYW4yMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgY2FydGVzaWFuMzIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGNhcnRlc2lhbjQyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBjYXJ0ZXNpYW41MiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgY2FydGVzaWFuNjIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2gxMyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaDIzID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQ2FydGVzaWFuMTcgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4yNyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaENhcnRvZ3JhcGhpYzQgPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaENhcnRlc2lhbk9mZnNldCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaENhcnRlc2lhbkVuZHMgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWNNaW4gPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaENhcnRvZ3JhcGhpY01heCA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICBDb3JyaWRvckdlb21ldHJ5LnBhY2sgPSBmdW5jdGlvbih2YWx1ZSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoInZhbHVlIiwgdmFsdWUpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIGNvbnN0IHBvc2l0aW9ucyA9IHZhbHVlLl9wb3NpdGlvbnM7CiAgICAgICAgY29uc3QgbGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gbGVuZ3RoOwogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyArK2ksIHN0YXJ0aW5nSW5kZXggKz0gQ2FydGVzaWFuM19kZWZhdWx0LnBhY2tlZExlbmd0aCkgewogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2socG9zaXRpb25zW2ldLCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgfQogICAgICAgIEVsbGlwc29pZF9kZWZhdWx0LnBhY2sodmFsdWUuX2VsbGlwc29pZCwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gRWxsaXBzb2lkX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIFZlcnRleEZvcm1hdF9kZWZhdWx0LnBhY2sodmFsdWUuX3ZlcnRleEZvcm1hdCwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gVmVydGV4Rm9ybWF0X2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fd2lkdGg7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9oZWlnaHQ7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9leHRydWRlZEhlaWdodDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX2Nvcm5lclR5cGU7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9ncmFudWxhcml0eTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX3NoYWRvd1ZvbHVtZSA/IDEgOiAwOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXhdID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQodmFsdWUuX29mZnNldEF0dHJpYnV0ZSwgLTEpOwogICAgICAgIHJldHVybiBhcnJheTsKICAgICAgfTsKICAgICAgc2NyYXRjaEVsbGlwc29pZDQgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZShFbGxpcHNvaWRfZGVmYXVsdC5VTklUX1NQSEVSRSk7CiAgICAgIHNjcmF0Y2hWZXJ0ZXhGb3JtYXQ0ID0gbmV3IFZlcnRleEZvcm1hdF9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hPcHRpb25zOSA9IHsKICAgICAgICBwb3NpdGlvbnM6IHZvaWQgMCwKICAgICAgICBlbGxpcHNvaWQ6IHNjcmF0Y2hFbGxpcHNvaWQ0LAogICAgICAgIHZlcnRleEZvcm1hdDogc2NyYXRjaFZlcnRleEZvcm1hdDQsCiAgICAgICAgd2lkdGg6IHZvaWQgMCwKICAgICAgICBoZWlnaHQ6IHZvaWQgMCwKICAgICAgICBleHRydWRlZEhlaWdodDogdm9pZCAwLAogICAgICAgIGNvcm5lclR5cGU6IHZvaWQgMCwKICAgICAgICBncmFudWxhcml0eTogdm9pZCAwLAogICAgICAgIHNoYWRvd1ZvbHVtZTogdm9pZCAwLAogICAgICAgIG9mZnNldEF0dHJpYnV0ZTogdm9pZCAwCiAgICAgIH07CiAgICAgIENvcnJpZG9yR2VvbWV0cnkudW5wYWNrID0gZnVuY3Rpb24oYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIGNvbnN0IGxlbmd0aCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gbmV3IEFycmF5KGxlbmd0aCk7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSwgc3RhcnRpbmdJbmRleCArPSBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoKSB7CiAgICAgICAgICBwb3NpdGlvbnNbaV0gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICB9CiAgICAgICAgY29uc3QgZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQudW5wYWNrKGFycmF5LCBzdGFydGluZ0luZGV4LCBzY3JhdGNoRWxsaXBzb2lkNCk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgY29uc3QgdmVydGV4Rm9ybWF0ID0gVmVydGV4Rm9ybWF0X2RlZmF1bHQudW5wYWNrKAogICAgICAgICAgYXJyYXksCiAgICAgICAgICBzdGFydGluZ0luZGV4LAogICAgICAgICAgc2NyYXRjaFZlcnRleEZvcm1hdDQKICAgICAgICApOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gVmVydGV4Rm9ybWF0X2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIGNvbnN0IHdpZHRoID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBoZWlnaHQgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IGV4dHJ1ZGVkSGVpZ2h0ID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBjb3JuZXJUeXBlID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBncmFudWxhcml0eSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3Qgc2hhZG93Vm9sdW1lID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9PT0gMTsKICAgICAgICBjb25zdCBvZmZzZXRBdHRyaWJ1dGUgPSBhcnJheVtzdGFydGluZ0luZGV4XTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczkucG9zaXRpb25zID0gcG9zaXRpb25zOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnM5LndpZHRoID0gd2lkdGg7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczkuaGVpZ2h0ID0gaGVpZ2h0OwogICAgICAgICAgc2NyYXRjaE9wdGlvbnM5LmV4dHJ1ZGVkSGVpZ2h0ID0gZXh0cnVkZWRIZWlnaHQ7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczkuY29ybmVyVHlwZSA9IGNvcm5lclR5cGU7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczkuZ3JhbnVsYXJpdHkgPSBncmFudWxhcml0eTsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zOS5zaGFkb3dWb2x1bWUgPSBzaGFkb3dWb2x1bWU7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczkub2Zmc2V0QXR0cmlidXRlID0gb2Zmc2V0QXR0cmlidXRlID09PSAtMSA/IHZvaWQgMCA6IG9mZnNldEF0dHJpYnV0ZTsKICAgICAgICAgIHJldHVybiBuZXcgQ29ycmlkb3JHZW9tZXRyeShzY3JhdGNoT3B0aW9uczkpOwogICAgICAgIH0KICAgICAgICByZXN1bHQuX3Bvc2l0aW9ucyA9IHBvc2l0aW9uczsKICAgICAgICByZXN1bHQuX2VsbGlwc29pZCA9IEVsbGlwc29pZF9kZWZhdWx0LmNsb25lKGVsbGlwc29pZCwgcmVzdWx0Ll9lbGxpcHNvaWQpOwogICAgICAgIHJlc3VsdC5fdmVydGV4Rm9ybWF0ID0gVmVydGV4Rm9ybWF0X2RlZmF1bHQuY2xvbmUodmVydGV4Rm9ybWF0LCByZXN1bHQuX3ZlcnRleEZvcm1hdCk7CiAgICAgICAgcmVzdWx0Ll93aWR0aCA9IHdpZHRoOwogICAgICAgIHJlc3VsdC5faGVpZ2h0ID0gaGVpZ2h0OwogICAgICAgIHJlc3VsdC5fZXh0cnVkZWRIZWlnaHQgPSBleHRydWRlZEhlaWdodDsKICAgICAgICByZXN1bHQuX2Nvcm5lclR5cGUgPSBjb3JuZXJUeXBlOwogICAgICAgIHJlc3VsdC5fZ3JhbnVsYXJpdHkgPSBncmFudWxhcml0eTsKICAgICAgICByZXN1bHQuX3NoYWRvd1ZvbHVtZSA9IHNoYWRvd1ZvbHVtZTsKICAgICAgICByZXN1bHQuX29mZnNldEF0dHJpYnV0ZSA9IG9mZnNldEF0dHJpYnV0ZSA9PT0gLTEgPyB2b2lkIDAgOiBvZmZzZXRBdHRyaWJ1dGU7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ29ycmlkb3JHZW9tZXRyeS5jb21wdXRlUmVjdGFuZ2xlID0gZnVuY3Rpb24ob3B0aW9ucywgcmVzdWx0KSB7CiAgICAgICAgb3B0aW9ucyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMsIGRlZmF1bHRWYWx1ZV9kZWZhdWx0LkVNUFRZX09CSkVDVCk7CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gb3B0aW9ucy5wb3NpdGlvbnM7CiAgICAgICAgY29uc3Qgd2lkdGggPSBvcHRpb25zLndpZHRoOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgib3B0aW9ucy5wb3NpdGlvbnMiLCBwb3NpdGlvbnMpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgib3B0aW9ucy53aWR0aCIsIHdpZHRoKTsKICAgICAgICBjb25zdCBlbGxpcHNvaWQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmVsbGlwc29pZCwgRWxsaXBzb2lkX2RlZmF1bHQuZGVmYXVsdCk7CiAgICAgICAgY29uc3QgY29ybmVyVHlwZSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuY29ybmVyVHlwZSwgQ29ybmVyVHlwZV9kZWZhdWx0LlJPVU5ERUQpOwogICAgICAgIHJldHVybiBjb21wdXRlUmVjdGFuZ2xlMihwb3NpdGlvbnMsIGVsbGlwc29pZCwgd2lkdGgsIGNvcm5lclR5cGUsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIENvcnJpZG9yR2VvbWV0cnkuY3JlYXRlR2VvbWV0cnkgPSBmdW5jdGlvbihjb3JyaWRvckdlb21ldHJ5KSB7CiAgICAgICAgbGV0IHBvc2l0aW9ucyA9IGNvcnJpZG9yR2VvbWV0cnkuX3Bvc2l0aW9uczsKICAgICAgICBjb25zdCB3aWR0aCA9IGNvcnJpZG9yR2VvbWV0cnkuX3dpZHRoOwogICAgICAgIGNvbnN0IGVsbGlwc29pZCA9IGNvcnJpZG9yR2VvbWV0cnkuX2VsbGlwc29pZDsKICAgICAgICBwb3NpdGlvbnMgPSBzY2FsZVRvU3VyZmFjZTIocG9zaXRpb25zLCBlbGxpcHNvaWQpOwogICAgICAgIGNvbnN0IGNsZWFuUG9zaXRpb25zID0gYXJyYXlSZW1vdmVEdXBsaWNhdGVzX2RlZmF1bHQoCiAgICAgICAgICBwb3NpdGlvbnMsCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzRXBzaWxvbgogICAgICAgICk7CiAgICAgICAgaWYgKGNsZWFuUG9zaXRpb25zLmxlbmd0aCA8IDIgfHwgd2lkdGggPD0gMCkgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBjb25zdCBoZWlnaHQgPSBjb3JyaWRvckdlb21ldHJ5Ll9oZWlnaHQ7CiAgICAgICAgY29uc3QgZXh0cnVkZWRIZWlnaHQgPSBjb3JyaWRvckdlb21ldHJ5Ll9leHRydWRlZEhlaWdodDsKICAgICAgICBjb25zdCBleHRydWRlID0gIU1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgaGVpZ2h0LAogICAgICAgICAgZXh0cnVkZWRIZWlnaHQsCiAgICAgICAgICAwLAogICAgICAgICAgTWF0aF9kZWZhdWx0LkVQU0lMT04yCiAgICAgICAgKTsKICAgICAgICBjb25zdCB2ZXJ0ZXhGb3JtYXQgPSBjb3JyaWRvckdlb21ldHJ5Ll92ZXJ0ZXhGb3JtYXQ7CiAgICAgICAgY29uc3QgcGFyYW1zID0gewogICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgcG9zaXRpb25zOiBjbGVhblBvc2l0aW9ucywKICAgICAgICAgIHdpZHRoLAogICAgICAgICAgY29ybmVyVHlwZTogY29ycmlkb3JHZW9tZXRyeS5fY29ybmVyVHlwZSwKICAgICAgICAgIGdyYW51bGFyaXR5OiBjb3JyaWRvckdlb21ldHJ5Ll9ncmFudWxhcml0eSwKICAgICAgICAgIHNhdmVBdHRyaWJ1dGVzOiB0cnVlCiAgICAgICAgfTsKICAgICAgICBsZXQgYXR0cjsKICAgICAgICBpZiAoZXh0cnVkZSkgewogICAgICAgICAgcGFyYW1zLmhlaWdodCA9IGhlaWdodDsKICAgICAgICAgIHBhcmFtcy5leHRydWRlZEhlaWdodCA9IGV4dHJ1ZGVkSGVpZ2h0OwogICAgICAgICAgcGFyYW1zLnNoYWRvd1ZvbHVtZSA9IGNvcnJpZG9yR2VvbWV0cnkuX3NoYWRvd1ZvbHVtZTsKICAgICAgICAgIHBhcmFtcy5vZmZzZXRBdHRyaWJ1dGUgPSBjb3JyaWRvckdlb21ldHJ5Ll9vZmZzZXRBdHRyaWJ1dGU7CiAgICAgICAgICBhdHRyID0gY29tcHV0ZVBvc2l0aW9uc0V4dHJ1ZGVkKHBhcmFtcywgdmVydGV4Rm9ybWF0KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY29uc3QgY29tcHV0ZWRQb3NpdGlvbnMgPSBDb3JyaWRvckdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmNvbXB1dGVQb3NpdGlvbnMocGFyYW1zKTsKICAgICAgICAgIGF0dHIgPSBjb21iaW5lMihjb21wdXRlZFBvc2l0aW9ucywgdmVydGV4Rm9ybWF0LCBlbGxpcHNvaWQpOwogICAgICAgICAgYXR0ci5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcyA9IFBvbHlnb25QaXBlbGluZV9kZWZhdWx0LnNjYWxlVG9HZW9kZXRpY0hlaWdodCgKICAgICAgICAgICAgYXR0ci5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcywKICAgICAgICAgICAgaGVpZ2h0LAogICAgICAgICAgICBlbGxpcHNvaWQKICAgICAgICAgICk7CiAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGNvcnJpZG9yR2VvbWV0cnkuX29mZnNldEF0dHJpYnV0ZSkpIHsKICAgICAgICAgICAgY29uc3QgYXBwbHlPZmZzZXRWYWx1ZSA9IGNvcnJpZG9yR2VvbWV0cnkuX29mZnNldEF0dHJpYnV0ZSA9PT0gR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGVfZGVmYXVsdC5OT05FID8gMCA6IDE7CiAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IGF0dHIuYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXMubGVuZ3RoOwogICAgICAgICAgICBjb25zdCBhcHBseU9mZnNldCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCAvIDMpLmZpbGwoYXBwbHlPZmZzZXRWYWx1ZSk7CiAgICAgICAgICAgIGF0dHIuYXR0cmlidXRlcy5hcHBseU9mZnNldCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5VTlNJR05FRF9CWVRFLAogICAgICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDEsCiAgICAgICAgICAgICAgdmFsdWVzOiBhcHBseU9mZnNldAogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IGF0dHIuYXR0cmlidXRlczsKICAgICAgICBjb25zdCBib3VuZGluZ1NwaGVyZSA9IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQuZnJvbVZlcnRpY2VzKAogICAgICAgICAgYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXMsCiAgICAgICAgICB2b2lkIDAsCiAgICAgICAgICAzCiAgICAgICAgKTsKICAgICAgICBpZiAoIXZlcnRleEZvcm1hdC5wb3NpdGlvbikgewogICAgICAgICAgYXR0ci5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcyA9IHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG5ldyBHZW9tZXRyeV9kZWZhdWx0KHsKICAgICAgICAgIGF0dHJpYnV0ZXMsCiAgICAgICAgICBpbmRpY2VzOiBhdHRyLmluZGljZXMsCiAgICAgICAgICBwcmltaXRpdmVUeXBlOiBQcmltaXRpdmVUeXBlX2RlZmF1bHQuVFJJQU5HTEVTLAogICAgICAgICAgYm91bmRpbmdTcGhlcmUsCiAgICAgICAgICBvZmZzZXRBdHRyaWJ1dGU6IGNvcnJpZG9yR2VvbWV0cnkuX29mZnNldEF0dHJpYnV0ZQogICAgICAgIH0pOwogICAgICB9OwogICAgICBDb3JyaWRvckdlb21ldHJ5LmNyZWF0ZVNoYWRvd1ZvbHVtZSA9IGZ1bmN0aW9uKGNvcnJpZG9yR2VvbWV0cnksIG1pbkhlaWdodEZ1bmMsIG1heEhlaWdodEZ1bmMpIHsKICAgICAgICBjb25zdCBncmFudWxhcml0eSA9IGNvcnJpZG9yR2VvbWV0cnkuX2dyYW51bGFyaXR5OwogICAgICAgIGNvbnN0IGVsbGlwc29pZCA9IGNvcnJpZG9yR2VvbWV0cnkuX2VsbGlwc29pZDsKICAgICAgICBjb25zdCBtaW5IZWlnaHQgPSBtaW5IZWlnaHRGdW5jKGdyYW51bGFyaXR5LCBlbGxpcHNvaWQpOwogICAgICAgIGNvbnN0IG1heEhlaWdodCA9IG1heEhlaWdodEZ1bmMoZ3JhbnVsYXJpdHksIGVsbGlwc29pZCk7CiAgICAgICAgcmV0dXJuIG5ldyBDb3JyaWRvckdlb21ldHJ5KHsKICAgICAgICAgIHBvc2l0aW9uczogY29ycmlkb3JHZW9tZXRyeS5fcG9zaXRpb25zLAogICAgICAgICAgd2lkdGg6IGNvcnJpZG9yR2VvbWV0cnkuX3dpZHRoLAogICAgICAgICAgY29ybmVyVHlwZTogY29ycmlkb3JHZW9tZXRyeS5fY29ybmVyVHlwZSwKICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgIGdyYW51bGFyaXR5LAogICAgICAgICAgZXh0cnVkZWRIZWlnaHQ6IG1pbkhlaWdodCwKICAgICAgICAgIGhlaWdodDogbWF4SGVpZ2h0LAogICAgICAgICAgdmVydGV4Rm9ybWF0OiBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5QT1NJVElPTl9PTkxZLAogICAgICAgICAgc2hhZG93Vm9sdW1lOiB0cnVlCiAgICAgICAgfSk7CiAgICAgIH07CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKENvcnJpZG9yR2VvbWV0cnkucHJvdG90eXBlLCB7CiAgICAgICAgLyoqCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKi8KICAgICAgICByZWN0YW5nbGU6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHRoaXMuX3JlY3RhbmdsZSkpIHsKICAgICAgICAgICAgICB0aGlzLl9yZWN0YW5nbGUgPSBjb21wdXRlUmVjdGFuZ2xlMigKICAgICAgICAgICAgICAgIHRoaXMuX3Bvc2l0aW9ucywKICAgICAgICAgICAgICAgIHRoaXMuX2VsbGlwc29pZCwKICAgICAgICAgICAgICAgIHRoaXMuX3dpZHRoLAogICAgICAgICAgICAgICAgdGhpcy5fY29ybmVyVHlwZQogICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlY3RhbmdsZTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIEZvciByZW1hcHBpbmcgdGV4dHVyZSBjb29yZGluYXRlcyB3aGVuIHJlbmRlcmluZyBDb3JyaWRvckdlb21ldHJpZXMgYXMgR3JvdW5kUHJpbWl0aXZlcy4KICAgICAgICAgKgogICAgICAgICAqIENvcnJpZG9ycyBkb24ndCBzdXBwb3J0IHN0Um90YXRpb24sCiAgICAgICAgICogc28ganVzdCByZXR1cm4gdGhlIGNvcm5lcnMgb2YgdGhlIG9yaWdpbmFsIHN5c3RlbS4KICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAqLwogICAgICAgIHRleHR1cmVDb29yZGluYXRlUm90YXRpb25Qb2ludHM6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBbMCwgMCwgMCwgMSwgMSwgMF07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgICAgQ29ycmlkb3JHZW9tZXRyeV9kZWZhdWx0ID0gQ29ycmlkb3JHZW9tZXRyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZUNvcnJpZG9yR2VvbWV0cnkuanMKICB2YXIgY3JlYXRlQ29ycmlkb3JHZW9tZXRyeV9leHBvcnRzID0ge307CiAgX19leHBvcnQoY3JlYXRlQ29ycmlkb3JHZW9tZXRyeV9leHBvcnRzLCB7CiAgICBkZWZhdWx0OiAoKSA9PiBjcmVhdGVDb3JyaWRvckdlb21ldHJ5X2RlZmF1bHQKICB9KTsKICBmdW5jdGlvbiBjcmVhdGVDb3JyaWRvckdlb21ldHJ5KGNvcnJpZG9yR2VvbWV0cnksIG9mZnNldCkgewogICAgaWYgKGRlZmluZWRfZGVmYXVsdChvZmZzZXQpKSB7CiAgICAgIGNvcnJpZG9yR2VvbWV0cnkgPSBDb3JyaWRvckdlb21ldHJ5X2RlZmF1bHQudW5wYWNrKGNvcnJpZG9yR2VvbWV0cnksIG9mZnNldCk7CiAgICB9CiAgICBjb3JyaWRvckdlb21ldHJ5Ll9lbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZShjb3JyaWRvckdlb21ldHJ5Ll9lbGxpcHNvaWQpOwogICAgcmV0dXJuIENvcnJpZG9yR2VvbWV0cnlfZGVmYXVsdC5jcmVhdGVHZW9tZXRyeShjb3JyaWRvckdlb21ldHJ5KTsKICB9CiAgdmFyIGNyZWF0ZUNvcnJpZG9yR2VvbWV0cnlfZGVmYXVsdDsKICB2YXIgaW5pdF9jcmVhdGVDb3JyaWRvckdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVDb3JyaWRvckdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9Db3JyaWRvckdlb21ldHJ5KCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBjcmVhdGVDb3JyaWRvckdlb21ldHJ5X2RlZmF1bHQgPSBjcmVhdGVDb3JyaWRvckdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvQ29ycmlkb3JPdXRsaW5lR2VvbWV0cnkuanMKICBmdW5jdGlvbiBzY2FsZVRvU3VyZmFjZTMocG9zaXRpb25zLCBlbGxpcHNvaWQpIHsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9zaXRpb25zLmxlbmd0aDsgaSsrKSB7CiAgICAgIHBvc2l0aW9uc1tpXSA9IGVsbGlwc29pZC5zY2FsZVRvR2VvZGV0aWNTdXJmYWNlKHBvc2l0aW9uc1tpXSwgcG9zaXRpb25zW2ldKTsKICAgIH0KICAgIHJldHVybiBwb3NpdGlvbnM7CiAgfQogIGZ1bmN0aW9uIGNvbWJpbmUzKGNvbXB1dGVkUG9zaXRpb25zLCBjb3JuZXJUeXBlKSB7CiAgICBjb25zdCB3YWxsSW5kaWNlcyA9IFtdOwogICAgY29uc3QgcG9zaXRpb25zID0gY29tcHV0ZWRQb3NpdGlvbnMucG9zaXRpb25zOwogICAgY29uc3QgY29ybmVycyA9IGNvbXB1dGVkUG9zaXRpb25zLmNvcm5lcnM7CiAgICBjb25zdCBlbmRQb3NpdGlvbnMgPSBjb21wdXRlZFBvc2l0aW9ucy5lbmRQb3NpdGlvbnM7CiAgICBjb25zdCBhdHRyaWJ1dGVzID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlc19kZWZhdWx0KCk7CiAgICBsZXQgY29ybmVyOwogICAgbGV0IGxlZnRDb3VudCA9IDA7CiAgICBsZXQgcmlnaHRDb3VudCA9IDA7CiAgICBsZXQgaTsKICAgIGxldCBpbmRpY2VzTGVuZ3RoID0gMDsKICAgIGxldCBsZW5ndGg7CiAgICBmb3IgKGkgPSAwOyBpIDwgcG9zaXRpb25zLmxlbmd0aDsgaSArPSAyKSB7CiAgICAgIGxlbmd0aCA9IHBvc2l0aW9uc1tpXS5sZW5ndGggLSAzOwogICAgICBsZWZ0Q291bnQgKz0gbGVuZ3RoOwogICAgICBpbmRpY2VzTGVuZ3RoICs9IGxlbmd0aCAvIDMgKiA0OwogICAgICByaWdodENvdW50ICs9IHBvc2l0aW9uc1tpICsgMV0ubGVuZ3RoIC0gMzsKICAgIH0KICAgIGxlZnRDb3VudCArPSAzOwogICAgcmlnaHRDb3VudCArPSAzOwogICAgZm9yIChpID0gMDsgaSA8IGNvcm5lcnMubGVuZ3RoOyBpKyspIHsKICAgICAgY29ybmVyID0gY29ybmVyc1tpXTsKICAgICAgY29uc3QgbGVmdFNpZGUgPSBjb3JuZXJzW2ldLmxlZnRQb3NpdGlvbnM7CiAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQobGVmdFNpZGUpKSB7CiAgICAgICAgbGVuZ3RoID0gbGVmdFNpZGUubGVuZ3RoOwogICAgICAgIGxlZnRDb3VudCArPSBsZW5ndGg7CiAgICAgICAgaW5kaWNlc0xlbmd0aCArPSBsZW5ndGggLyAzICogMjsKICAgICAgfSBlbHNlIHsKICAgICAgICBsZW5ndGggPSBjb3JuZXJzW2ldLnJpZ2h0UG9zaXRpb25zLmxlbmd0aDsKICAgICAgICByaWdodENvdW50ICs9IGxlbmd0aDsKICAgICAgICBpbmRpY2VzTGVuZ3RoICs9IGxlbmd0aCAvIDMgKiAyOwogICAgICB9CiAgICB9CiAgICBjb25zdCBhZGRFbmRQb3NpdGlvbnMgPSBkZWZpbmVkX2RlZmF1bHQoZW5kUG9zaXRpb25zKTsKICAgIGxldCBlbmRQb3NpdGlvbkxlbmd0aDsKICAgIGlmIChhZGRFbmRQb3NpdGlvbnMpIHsKICAgICAgZW5kUG9zaXRpb25MZW5ndGggPSBlbmRQb3NpdGlvbnNbMF0ubGVuZ3RoIC0gMzsKICAgICAgbGVmdENvdW50ICs9IGVuZFBvc2l0aW9uTGVuZ3RoOwogICAgICByaWdodENvdW50ICs9IGVuZFBvc2l0aW9uTGVuZ3RoOwogICAgICBlbmRQb3NpdGlvbkxlbmd0aCAvPSAzOwogICAgICBpbmRpY2VzTGVuZ3RoICs9IGVuZFBvc2l0aW9uTGVuZ3RoICogNDsKICAgIH0KICAgIGNvbnN0IHNpemUgPSBsZWZ0Q291bnQgKyByaWdodENvdW50OwogICAgY29uc3QgZmluYWxQb3NpdGlvbnMgPSBuZXcgRmxvYXQ2NEFycmF5KHNpemUpOwogICAgbGV0IGZyb250ID0gMDsKICAgIGxldCBiYWNrID0gc2l6ZSAtIDE7CiAgICBsZXQgVUwsIExMLCBVUiwgTFI7CiAgICBsZXQgcmlnaHRQb3MsIGxlZnRQb3M7CiAgICBjb25zdCBoYWxmTGVuZ3RoID0gZW5kUG9zaXRpb25MZW5ndGggLyAyOwogICAgY29uc3QgaW5kaWNlcyA9IEluZGV4RGF0YXR5cGVfZGVmYXVsdC5jcmVhdGVUeXBlZEFycmF5KHNpemUgLyAzLCBpbmRpY2VzTGVuZ3RoICsgNCk7CiAgICBsZXQgaW5kZXggPSAwOwogICAgaW5kaWNlc1tpbmRleCsrXSA9IGZyb250IC8gMzsKICAgIGluZGljZXNbaW5kZXgrK10gPSAoYmFjayAtIDIpIC8gMzsKICAgIGlmIChhZGRFbmRQb3NpdGlvbnMpIHsKICAgICAgd2FsbEluZGljZXMucHVzaChmcm9udCAvIDMpOwogICAgICBsZWZ0UG9zID0gY2FydGVzaWFuMTM7CiAgICAgIHJpZ2h0UG9zID0gY2FydGVzaWFuMjM7CiAgICAgIGNvbnN0IGZpcnN0RW5kUG9zaXRpb25zID0gZW5kUG9zaXRpb25zWzBdOwogICAgICBmb3IgKGkgPSAwOyBpIDwgaGFsZkxlbmd0aDsgaSsrKSB7CiAgICAgICAgbGVmdFBvcyA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkoCiAgICAgICAgICBmaXJzdEVuZFBvc2l0aW9ucywKICAgICAgICAgIChoYWxmTGVuZ3RoIC0gMSAtIGkpICogMywKICAgICAgICAgIGxlZnRQb3MKICAgICAgICApOwogICAgICAgIHJpZ2h0UG9zID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheSgKICAgICAgICAgIGZpcnN0RW5kUG9zaXRpb25zLAogICAgICAgICAgKGhhbGZMZW5ndGggKyBpKSAqIDMsCiAgICAgICAgICByaWdodFBvcwogICAgICAgICk7CiAgICAgICAgQ29ycmlkb3JHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5hZGRBdHRyaWJ1dGUoZmluYWxQb3NpdGlvbnMsIHJpZ2h0UG9zLCBmcm9udCk7CiAgICAgICAgQ29ycmlkb3JHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5hZGRBdHRyaWJ1dGUoCiAgICAgICAgICBmaW5hbFBvc2l0aW9ucywKICAgICAgICAgIGxlZnRQb3MsCiAgICAgICAgICB2b2lkIDAsCiAgICAgICAgICBiYWNrCiAgICAgICAgKTsKICAgICAgICBMTCA9IGZyb250IC8gMzsKICAgICAgICBMUiA9IExMICsgMTsKICAgICAgICBVTCA9IChiYWNrIC0gMikgLyAzOwogICAgICAgIFVSID0gVUwgLSAxOwogICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBVTDsKICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gVVI7CiAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IExMOwogICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBMUjsKICAgICAgICBmcm9udCArPSAzOwogICAgICAgIGJhY2sgLT0gMzsKICAgICAgfQogICAgfQogICAgbGV0IHBvc0luZGV4ID0gMDsKICAgIGxldCByaWdodEVkZ2UgPSBwb3NpdGlvbnNbcG9zSW5kZXgrK107CiAgICBsZXQgbGVmdEVkZ2UgPSBwb3NpdGlvbnNbcG9zSW5kZXgrK107CiAgICBmaW5hbFBvc2l0aW9ucy5zZXQocmlnaHRFZGdlLCBmcm9udCk7CiAgICBmaW5hbFBvc2l0aW9ucy5zZXQobGVmdEVkZ2UsIGJhY2sgLSBsZWZ0RWRnZS5sZW5ndGggKyAxKTsKICAgIGxlbmd0aCA9IGxlZnRFZGdlLmxlbmd0aCAtIDM7CiAgICB3YWxsSW5kaWNlcy5wdXNoKGZyb250IC8gMywgKGJhY2sgLSAyKSAvIDMpOwogICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAzKSB7CiAgICAgIExMID0gZnJvbnQgLyAzOwogICAgICBMUiA9IExMICsgMTsKICAgICAgVUwgPSAoYmFjayAtIDIpIC8gMzsKICAgICAgVVIgPSBVTCAtIDE7CiAgICAgIGluZGljZXNbaW5kZXgrK10gPSBVTDsKICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IFVSOwogICAgICBpbmRpY2VzW2luZGV4KytdID0gTEw7CiAgICAgIGluZGljZXNbaW5kZXgrK10gPSBMUjsKICAgICAgZnJvbnQgKz0gMzsKICAgICAgYmFjayAtPSAzOwogICAgfQogICAgZm9yIChpID0gMDsgaSA8IGNvcm5lcnMubGVuZ3RoOyBpKyspIHsKICAgICAgbGV0IGo7CiAgICAgIGNvcm5lciA9IGNvcm5lcnNbaV07CiAgICAgIGNvbnN0IGwgPSBjb3JuZXIubGVmdFBvc2l0aW9uczsKICAgICAgY29uc3QgciA9IGNvcm5lci5yaWdodFBvc2l0aW9uczsKICAgICAgbGV0IHN0YXJ0OwogICAgICBsZXQgb3V0c2lkZVBvaW50ID0gY2FydGVzaWFuMzM7CiAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQobCkpIHsKICAgICAgICBiYWNrIC09IDM7CiAgICAgICAgc3RhcnQgPSBVUjsKICAgICAgICB3YWxsSW5kaWNlcy5wdXNoKExSKTsKICAgICAgICBmb3IgKGogPSAwOyBqIDwgbC5sZW5ndGggLyAzOyBqKyspIHsKICAgICAgICAgIG91dHNpZGVQb2ludCA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkobCwgaiAqIDMsIG91dHNpZGVQb2ludCk7CiAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gc3RhcnQgLSBqIC0gMTsKICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBzdGFydCAtIGo7CiAgICAgICAgICBDb3JyaWRvckdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmFkZEF0dHJpYnV0ZSgKICAgICAgICAgICAgZmluYWxQb3NpdGlvbnMsCiAgICAgICAgICAgIG91dHNpZGVQb2ludCwKICAgICAgICAgICAgdm9pZCAwLAogICAgICAgICAgICBiYWNrCiAgICAgICAgICApOwogICAgICAgICAgYmFjayAtPSAzOwogICAgICAgIH0KICAgICAgICB3YWxsSW5kaWNlcy5wdXNoKHN0YXJ0IC0gTWF0aC5mbG9vcihsLmxlbmd0aCAvIDYpKTsKICAgICAgICBpZiAoY29ybmVyVHlwZSA9PT0gQ29ybmVyVHlwZV9kZWZhdWx0LkJFVkVMRUQpIHsKICAgICAgICAgIHdhbGxJbmRpY2VzLnB1c2goKGJhY2sgLSAyKSAvIDMgKyAxKTsKICAgICAgICB9CiAgICAgICAgZnJvbnQgKz0gMzsKICAgICAgfSBlbHNlIHsKICAgICAgICBmcm9udCArPSAzOwogICAgICAgIHN0YXJ0ID0gTFI7CiAgICAgICAgd2FsbEluZGljZXMucHVzaChVUik7CiAgICAgICAgZm9yIChqID0gMDsgaiA8IHIubGVuZ3RoIC8gMzsgaisrKSB7CiAgICAgICAgICBvdXRzaWRlUG9pbnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KHIsIGogKiAzLCBvdXRzaWRlUG9pbnQpOwogICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IHN0YXJ0ICsgajsKICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBzdGFydCArIGogKyAxOwogICAgICAgICAgQ29ycmlkb3JHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5hZGRBdHRyaWJ1dGUoCiAgICAgICAgICAgIGZpbmFsUG9zaXRpb25zLAogICAgICAgICAgICBvdXRzaWRlUG9pbnQsCiAgICAgICAgICAgIGZyb250CiAgICAgICAgICApOwogICAgICAgICAgZnJvbnQgKz0gMzsKICAgICAgICB9CiAgICAgICAgd2FsbEluZGljZXMucHVzaChzdGFydCArIE1hdGguZmxvb3Ioci5sZW5ndGggLyA2KSk7CiAgICAgICAgaWYgKGNvcm5lclR5cGUgPT09IENvcm5lclR5cGVfZGVmYXVsdC5CRVZFTEVEKSB7CiAgICAgICAgICB3YWxsSW5kaWNlcy5wdXNoKGZyb250IC8gMyAtIDEpOwogICAgICAgIH0KICAgICAgICBiYWNrIC09IDM7CiAgICAgIH0KICAgICAgcmlnaHRFZGdlID0gcG9zaXRpb25zW3Bvc0luZGV4KytdOwogICAgICBsZWZ0RWRnZSA9IHBvc2l0aW9uc1twb3NJbmRleCsrXTsKICAgICAgcmlnaHRFZGdlLnNwbGljZSgwLCAzKTsKICAgICAgbGVmdEVkZ2Uuc3BsaWNlKGxlZnRFZGdlLmxlbmd0aCAtIDMsIDMpOwogICAgICBmaW5hbFBvc2l0aW9ucy5zZXQocmlnaHRFZGdlLCBmcm9udCk7CiAgICAgIGZpbmFsUG9zaXRpb25zLnNldChsZWZ0RWRnZSwgYmFjayAtIGxlZnRFZGdlLmxlbmd0aCArIDEpOwogICAgICBsZW5ndGggPSBsZWZ0RWRnZS5sZW5ndGggLSAzOwogICAgICBmb3IgKGogPSAwOyBqIDwgbGVmdEVkZ2UubGVuZ3RoOyBqICs9IDMpIHsKICAgICAgICBMUiA9IGZyb250IC8gMzsKICAgICAgICBMTCA9IExSIC0gMTsKICAgICAgICBVUiA9IChiYWNrIC0gMikgLyAzOwogICAgICAgIFVMID0gVVIgKyAxOwogICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBVTDsKICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gVVI7CiAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IExMOwogICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBMUjsKICAgICAgICBmcm9udCArPSAzOwogICAgICAgIGJhY2sgLT0gMzsKICAgICAgfQogICAgICBmcm9udCAtPSAzOwogICAgICBiYWNrICs9IDM7CiAgICAgIHdhbGxJbmRpY2VzLnB1c2goZnJvbnQgLyAzLCAoYmFjayAtIDIpIC8gMyk7CiAgICB9CiAgICBpZiAoYWRkRW5kUG9zaXRpb25zKSB7CiAgICAgIGZyb250ICs9IDM7CiAgICAgIGJhY2sgLT0gMzsKICAgICAgbGVmdFBvcyA9IGNhcnRlc2lhbjEzOwogICAgICByaWdodFBvcyA9IGNhcnRlc2lhbjIzOwogICAgICBjb25zdCBsYXN0RW5kUG9zaXRpb25zID0gZW5kUG9zaXRpb25zWzFdOwogICAgICBmb3IgKGkgPSAwOyBpIDwgaGFsZkxlbmd0aDsgaSsrKSB7CiAgICAgICAgbGVmdFBvcyA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkoCiAgICAgICAgICBsYXN0RW5kUG9zaXRpb25zLAogICAgICAgICAgKGVuZFBvc2l0aW9uTGVuZ3RoIC0gaSAtIDEpICogMywKICAgICAgICAgIGxlZnRQb3MKICAgICAgICApOwogICAgICAgIHJpZ2h0UG9zID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShsYXN0RW5kUG9zaXRpb25zLCBpICogMywgcmlnaHRQb3MpOwogICAgICAgIENvcnJpZG9yR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuYWRkQXR0cmlidXRlKAogICAgICAgICAgZmluYWxQb3NpdGlvbnMsCiAgICAgICAgICBsZWZ0UG9zLAogICAgICAgICAgdm9pZCAwLAogICAgICAgICAgYmFjawogICAgICAgICk7CiAgICAgICAgQ29ycmlkb3JHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5hZGRBdHRyaWJ1dGUoZmluYWxQb3NpdGlvbnMsIHJpZ2h0UG9zLCBmcm9udCk7CiAgICAgICAgTFIgPSBmcm9udCAvIDM7CiAgICAgICAgTEwgPSBMUiAtIDE7CiAgICAgICAgVVIgPSAoYmFjayAtIDIpIC8gMzsKICAgICAgICBVTCA9IFVSICsgMTsKICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gVUw7CiAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IFVSOwogICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBMTDsKICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gTFI7CiAgICAgICAgZnJvbnQgKz0gMzsKICAgICAgICBiYWNrIC09IDM7CiAgICAgIH0KICAgICAgd2FsbEluZGljZXMucHVzaChmcm9udCAvIDMpOwogICAgfSBlbHNlIHsKICAgICAgd2FsbEluZGljZXMucHVzaChmcm9udCAvIDMsIChiYWNrIC0gMikgLyAzKTsKICAgIH0KICAgIGluZGljZXNbaW5kZXgrK10gPSBmcm9udCAvIDM7CiAgICBpbmRpY2VzW2luZGV4KytdID0gKGJhY2sgLSAyKSAvIDM7CiAgICBhdHRyaWJ1dGVzLnBvc2l0aW9uID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5ET1VCTEUsCiAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgIHZhbHVlczogZmluYWxQb3NpdGlvbnMKICAgIH0pOwogICAgcmV0dXJuIHsKICAgICAgYXR0cmlidXRlcywKICAgICAgaW5kaWNlcywKICAgICAgd2FsbEluZGljZXMKICAgIH07CiAgfQogIGZ1bmN0aW9uIGNvbXB1dGVQb3NpdGlvbnNFeHRydWRlZDIocGFyYW1zKSB7CiAgICBjb25zdCBlbGxpcHNvaWQgPSBwYXJhbXMuZWxsaXBzb2lkOwogICAgY29uc3QgY29tcHV0ZWRQb3NpdGlvbnMgPSBDb3JyaWRvckdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmNvbXB1dGVQb3NpdGlvbnMocGFyYW1zKTsKICAgIGNvbnN0IGF0dHIgPSBjb21iaW5lMyhjb21wdXRlZFBvc2l0aW9ucywgcGFyYW1zLmNvcm5lclR5cGUpOwogICAgY29uc3Qgd2FsbEluZGljZXMgPSBhdHRyLndhbGxJbmRpY2VzOwogICAgY29uc3QgaGVpZ2h0ID0gcGFyYW1zLmhlaWdodDsKICAgIGNvbnN0IGV4dHJ1ZGVkSGVpZ2h0ID0gcGFyYW1zLmV4dHJ1ZGVkSGVpZ2h0OwogICAgY29uc3QgYXR0cmlidXRlcyA9IGF0dHIuYXR0cmlidXRlczsKICAgIGNvbnN0IGluZGljZXMgPSBhdHRyLmluZGljZXM7CiAgICBsZXQgcG9zaXRpb25zID0gYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXM7CiAgICBsZXQgbGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aDsKICAgIGxldCBleHRydWRlZFBvc2l0aW9ucyA9IG5ldyBGbG9hdDY0QXJyYXkobGVuZ3RoKTsKICAgIGV4dHJ1ZGVkUG9zaXRpb25zLnNldChwb3NpdGlvbnMpOwogICAgY29uc3QgbmV3UG9zaXRpb25zID0gbmV3IEZsb2F0NjRBcnJheShsZW5ndGggKiAyKTsKICAgIHBvc2l0aW9ucyA9IFBvbHlnb25QaXBlbGluZV9kZWZhdWx0LnNjYWxlVG9HZW9kZXRpY0hlaWdodCgKICAgICAgcG9zaXRpb25zLAogICAgICBoZWlnaHQsCiAgICAgIGVsbGlwc29pZAogICAgKTsKICAgIGV4dHJ1ZGVkUG9zaXRpb25zID0gUG9seWdvblBpcGVsaW5lX2RlZmF1bHQuc2NhbGVUb0dlb2RldGljSGVpZ2h0KAogICAgICBleHRydWRlZFBvc2l0aW9ucywKICAgICAgZXh0cnVkZWRIZWlnaHQsCiAgICAgIGVsbGlwc29pZAogICAgKTsKICAgIG5ld1Bvc2l0aW9ucy5zZXQocG9zaXRpb25zKTsKICAgIG5ld1Bvc2l0aW9ucy5zZXQoZXh0cnVkZWRQb3NpdGlvbnMsIGxlbmd0aCk7CiAgICBhdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcyA9IG5ld1Bvc2l0aW9uczsKICAgIGxlbmd0aCAvPSAzOwogICAgaWYgKGRlZmluZWRfZGVmYXVsdChwYXJhbXMub2Zmc2V0QXR0cmlidXRlKSkgewogICAgICBsZXQgYXBwbHlPZmZzZXQgPSBuZXcgVWludDhBcnJheShsZW5ndGggKiAyKTsKICAgICAgaWYgKHBhcmFtcy5vZmZzZXRBdHRyaWJ1dGUgPT09IEdlb21ldHJ5T2Zmc2V0QXR0cmlidXRlX2RlZmF1bHQuVE9QKSB7CiAgICAgICAgYXBwbHlPZmZzZXQgPSBhcHBseU9mZnNldC5maWxsKDEsIDAsIGxlbmd0aCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY29uc3QgYXBwbHlPZmZzZXRWYWx1ZSA9IHBhcmFtcy5vZmZzZXRBdHRyaWJ1dGUgPT09IEdlb21ldHJ5T2Zmc2V0QXR0cmlidXRlX2RlZmF1bHQuTk9ORSA/IDAgOiAxOwogICAgICAgIGFwcGx5T2Zmc2V0ID0gYXBwbHlPZmZzZXQuZmlsbChhcHBseU9mZnNldFZhbHVlKTsKICAgICAgfQogICAgICBhdHRyaWJ1dGVzLmFwcGx5T2Zmc2V0ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LlVOU0lHTkVEX0JZVEUsCiAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMSwKICAgICAgICB2YWx1ZXM6IGFwcGx5T2Zmc2V0CiAgICAgIH0pOwogICAgfQogICAgbGV0IGk7CiAgICBjb25zdCBpTGVuZ3RoID0gaW5kaWNlcy5sZW5ndGg7CiAgICBjb25zdCBuZXdJbmRpY2VzID0gSW5kZXhEYXRhdHlwZV9kZWZhdWx0LmNyZWF0ZVR5cGVkQXJyYXkoCiAgICAgIG5ld1Bvc2l0aW9ucy5sZW5ndGggLyAzLAogICAgICAoaUxlbmd0aCArIHdhbGxJbmRpY2VzLmxlbmd0aCkgKiAyCiAgICApOwogICAgbmV3SW5kaWNlcy5zZXQoaW5kaWNlcyk7CiAgICBsZXQgaW5kZXggPSBpTGVuZ3RoOwogICAgZm9yIChpID0gMDsgaSA8IGlMZW5ndGg7IGkgKz0gMikgewogICAgICBjb25zdCB2MDIgPSBpbmRpY2VzW2ldOwogICAgICBjb25zdCB2MTIgPSBpbmRpY2VzW2kgKyAxXTsKICAgICAgbmV3SW5kaWNlc1tpbmRleCsrXSA9IHYwMiArIGxlbmd0aDsKICAgICAgbmV3SW5kaWNlc1tpbmRleCsrXSA9IHYxMiArIGxlbmd0aDsKICAgIH0KICAgIGxldCBVTCwgTEw7CiAgICBmb3IgKGkgPSAwOyBpIDwgd2FsbEluZGljZXMubGVuZ3RoOyBpKyspIHsKICAgICAgVUwgPSB3YWxsSW5kaWNlc1tpXTsKICAgICAgTEwgPSBVTCArIGxlbmd0aDsKICAgICAgbmV3SW5kaWNlc1tpbmRleCsrXSA9IFVMOwogICAgICBuZXdJbmRpY2VzW2luZGV4KytdID0gTEw7CiAgICB9CiAgICByZXR1cm4gewogICAgICBhdHRyaWJ1dGVzLAogICAgICBpbmRpY2VzOiBuZXdJbmRpY2VzCiAgICB9OwogIH0KICBmdW5jdGlvbiBDb3JyaWRvck91dGxpbmVHZW9tZXRyeShvcHRpb25zKSB7CiAgICBvcHRpb25zID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucywgZGVmYXVsdFZhbHVlX2RlZmF1bHQuRU1QVFlfT0JKRUNUKTsKICAgIGNvbnN0IHBvc2l0aW9ucyA9IG9wdGlvbnMucG9zaXRpb25zOwogICAgY29uc3Qgd2lkdGggPSBvcHRpb25zLndpZHRoOwogICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJvcHRpb25zLnBvc2l0aW9ucyIsIHBvc2l0aW9ucyk7CiAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoIm9wdGlvbnMud2lkdGgiLCB3aWR0aCk7CiAgICBjb25zdCBoZWlnaHQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmhlaWdodCwgMCk7CiAgICBjb25zdCBleHRydWRlZEhlaWdodCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuZXh0cnVkZWRIZWlnaHQsIGhlaWdodCk7CiAgICB0aGlzLl9wb3NpdGlvbnMgPSBwb3NpdGlvbnM7CiAgICB0aGlzLl9lbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZSgKICAgICAgZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5lbGxpcHNvaWQsIEVsbGlwc29pZF9kZWZhdWx0LmRlZmF1bHQpCiAgICApOwogICAgdGhpcy5fd2lkdGggPSB3aWR0aDsKICAgIHRoaXMuX2hlaWdodCA9IE1hdGgubWF4KGhlaWdodCwgZXh0cnVkZWRIZWlnaHQpOwogICAgdGhpcy5fZXh0cnVkZWRIZWlnaHQgPSBNYXRoLm1pbihoZWlnaHQsIGV4dHJ1ZGVkSGVpZ2h0KTsKICAgIHRoaXMuX2Nvcm5lclR5cGUgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmNvcm5lclR5cGUsIENvcm5lclR5cGVfZGVmYXVsdC5ST1VOREVEKTsKICAgIHRoaXMuX2dyYW51bGFyaXR5ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoCiAgICAgIG9wdGlvbnMuZ3JhbnVsYXJpdHksCiAgICAgIE1hdGhfZGVmYXVsdC5SQURJQU5TX1BFUl9ERUdSRUUKICAgICk7CiAgICB0aGlzLl9vZmZzZXRBdHRyaWJ1dGUgPSBvcHRpb25zLm9mZnNldEF0dHJpYnV0ZTsKICAgIHRoaXMuX3dvcmtlck5hbWUgPSAiY3JlYXRlQ29ycmlkb3JPdXRsaW5lR2VvbWV0cnkiOwogICAgdGhpcy5wYWNrZWRMZW5ndGggPSAxICsgcG9zaXRpb25zLmxlbmd0aCAqIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyA2OwogIH0KICB2YXIgY2FydGVzaWFuMTMsIGNhcnRlc2lhbjIzLCBjYXJ0ZXNpYW4zMywgc2NyYXRjaEVsbGlwc29pZDUsIHNjcmF0Y2hPcHRpb25zMTAsIENvcnJpZG9yT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfQ29ycmlkb3JPdXRsaW5lR2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0NvcnJpZG9yT3V0bGluZUdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9hcnJheVJlbW92ZUR1cGxpY2F0ZXMoKTsKICAgICAgaW5pdF9Cb3VuZGluZ1NwaGVyZSgpOwogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X0NvbXBvbmVudERhdGF0eXBlKCk7CiAgICAgIGluaXRfQ29ybmVyVHlwZSgpOwogICAgICBpbml0X0NvcnJpZG9yR2VvbWV0cnlMaWJyYXJ5KCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBpbml0X0dlb21ldHJ5KCk7CiAgICAgIGluaXRfR2VvbWV0cnlBdHRyaWJ1dGUoKTsKICAgICAgaW5pdF9HZW9tZXRyeUF0dHJpYnV0ZXMoKTsKICAgICAgaW5pdF9HZW9tZXRyeU9mZnNldEF0dHJpYnV0ZSgpOwogICAgICBpbml0X0luZGV4RGF0YXR5cGUoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIGluaXRfUG9seWdvblBpcGVsaW5lKCk7CiAgICAgIGluaXRfUHJpbWl0aXZlVHlwZSgpOwogICAgICBjYXJ0ZXNpYW4xMyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgY2FydGVzaWFuMjMgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGNhcnRlc2lhbjMzID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBDb3JyaWRvck91dGxpbmVHZW9tZXRyeS5wYWNrID0gZnVuY3Rpb24odmFsdWUsIGFycmF5LCBzdGFydGluZ0luZGV4KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJ2YWx1ZSIsIHZhbHVlKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImFycmF5IiwgYXJyYXkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSB2YWx1ZS5fcG9zaXRpb25zOwogICAgICAgIGNvbnN0IGxlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IGxlbmd0aDsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpLCBzdGFydGluZ0luZGV4ICs9IENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGgpIHsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKHBvc2l0aW9uc1tpXSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIH0KICAgICAgICBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrKHZhbHVlLl9lbGxpcHNvaWQsIGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IEVsbGlwc29pZF9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX3dpZHRoOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5faGVpZ2h0OwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fZXh0cnVkZWRIZWlnaHQ7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9jb3JuZXJUeXBlOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fZ3JhbnVsYXJpdHk7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleF0gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh2YWx1ZS5fb2Zmc2V0QXR0cmlidXRlLCAtMSk7CiAgICAgICAgcmV0dXJuIGFycmF5OwogICAgICB9OwogICAgICBzY3JhdGNoRWxsaXBzb2lkNSA9IEVsbGlwc29pZF9kZWZhdWx0LmNsb25lKEVsbGlwc29pZF9kZWZhdWx0LlVOSVRfU1BIRVJFKTsKICAgICAgc2NyYXRjaE9wdGlvbnMxMCA9IHsKICAgICAgICBwb3NpdGlvbnM6IHZvaWQgMCwKICAgICAgICBlbGxpcHNvaWQ6IHNjcmF0Y2hFbGxpcHNvaWQ1LAogICAgICAgIHdpZHRoOiB2b2lkIDAsCiAgICAgICAgaGVpZ2h0OiB2b2lkIDAsCiAgICAgICAgZXh0cnVkZWRIZWlnaHQ6IHZvaWQgMCwKICAgICAgICBjb3JuZXJUeXBlOiB2b2lkIDAsCiAgICAgICAgZ3JhbnVsYXJpdHk6IHZvaWQgMCwKICAgICAgICBvZmZzZXRBdHRyaWJ1dGU6IHZvaWQgMAogICAgICB9OwogICAgICBDb3JyaWRvck91dGxpbmVHZW9tZXRyeS51bnBhY2sgPSBmdW5jdGlvbihhcnJheSwgc3RhcnRpbmdJbmRleCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgY29uc3QgbGVuZ3RoID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSBuZXcgQXJyYXkobGVuZ3RoKTsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpLCBzdGFydGluZ0luZGV4ICs9IENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGgpIHsKICAgICAgICAgIHBvc2l0aW9uc1tpXSA9IENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2soYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIH0KICAgICAgICBjb25zdCBlbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC51bnBhY2soYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHNjcmF0Y2hFbGxpcHNvaWQ1KTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IEVsbGlwc29pZF9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBjb25zdCB3aWR0aCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3QgaGVpZ2h0ID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBleHRydWRlZEhlaWdodCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3QgY29ybmVyVHlwZSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3QgZ3JhbnVsYXJpdHkgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IG9mZnNldEF0dHJpYnV0ZSA9IGFycmF5W3N0YXJ0aW5nSW5kZXhdOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMTAucG9zaXRpb25zID0gcG9zaXRpb25zOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMxMC53aWR0aCA9IHdpZHRoOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMxMC5oZWlnaHQgPSBoZWlnaHQ7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczEwLmV4dHJ1ZGVkSGVpZ2h0ID0gZXh0cnVkZWRIZWlnaHQ7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczEwLmNvcm5lclR5cGUgPSBjb3JuZXJUeXBlOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMxMC5ncmFudWxhcml0eSA9IGdyYW51bGFyaXR5OwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMxMC5vZmZzZXRBdHRyaWJ1dGUgPSBvZmZzZXRBdHRyaWJ1dGUgPT09IC0xID8gdm9pZCAwIDogb2Zmc2V0QXR0cmlidXRlOwogICAgICAgICAgcmV0dXJuIG5ldyBDb3JyaWRvck91dGxpbmVHZW9tZXRyeShzY3JhdGNoT3B0aW9uczEwKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0Ll9wb3NpdGlvbnMgPSBwb3NpdGlvbnM7CiAgICAgICAgcmVzdWx0Ll9lbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZShlbGxpcHNvaWQsIHJlc3VsdC5fZWxsaXBzb2lkKTsKICAgICAgICByZXN1bHQuX3dpZHRoID0gd2lkdGg7CiAgICAgICAgcmVzdWx0Ll9oZWlnaHQgPSBoZWlnaHQ7CiAgICAgICAgcmVzdWx0Ll9leHRydWRlZEhlaWdodCA9IGV4dHJ1ZGVkSGVpZ2h0OwogICAgICAgIHJlc3VsdC5fY29ybmVyVHlwZSA9IGNvcm5lclR5cGU7CiAgICAgICAgcmVzdWx0Ll9ncmFudWxhcml0eSA9IGdyYW51bGFyaXR5OwogICAgICAgIHJlc3VsdC5fb2Zmc2V0QXR0cmlidXRlID0gb2Zmc2V0QXR0cmlidXRlID09PSAtMSA/IHZvaWQgMCA6IG9mZnNldEF0dHJpYnV0ZTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDb3JyaWRvck91dGxpbmVHZW9tZXRyeS5jcmVhdGVHZW9tZXRyeSA9IGZ1bmN0aW9uKGNvcnJpZG9yT3V0bGluZUdlb21ldHJ5KSB7CiAgICAgICAgbGV0IHBvc2l0aW9ucyA9IGNvcnJpZG9yT3V0bGluZUdlb21ldHJ5Ll9wb3NpdGlvbnM7CiAgICAgICAgY29uc3Qgd2lkdGggPSBjb3JyaWRvck91dGxpbmVHZW9tZXRyeS5fd2lkdGg7CiAgICAgICAgY29uc3QgZWxsaXBzb2lkID0gY29ycmlkb3JPdXRsaW5lR2VvbWV0cnkuX2VsbGlwc29pZDsKICAgICAgICBwb3NpdGlvbnMgPSBzY2FsZVRvU3VyZmFjZTMocG9zaXRpb25zLCBlbGxpcHNvaWQpOwogICAgICAgIGNvbnN0IGNsZWFuUG9zaXRpb25zID0gYXJyYXlSZW1vdmVEdXBsaWNhdGVzX2RlZmF1bHQoCiAgICAgICAgICBwb3NpdGlvbnMsCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzRXBzaWxvbgogICAgICAgICk7CiAgICAgICAgaWYgKGNsZWFuUG9zaXRpb25zLmxlbmd0aCA8IDIgfHwgd2lkdGggPD0gMCkgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBjb25zdCBoZWlnaHQgPSBjb3JyaWRvck91dGxpbmVHZW9tZXRyeS5faGVpZ2h0OwogICAgICAgIGNvbnN0IGV4dHJ1ZGVkSGVpZ2h0ID0gY29ycmlkb3JPdXRsaW5lR2VvbWV0cnkuX2V4dHJ1ZGVkSGVpZ2h0OwogICAgICAgIGNvbnN0IGV4dHJ1ZGUgPSAhTWF0aF9kZWZhdWx0LmVxdWFsc0Vwc2lsb24oCiAgICAgICAgICBoZWlnaHQsCiAgICAgICAgICBleHRydWRlZEhlaWdodCwKICAgICAgICAgIDAsCiAgICAgICAgICBNYXRoX2RlZmF1bHQuRVBTSUxPTjIKICAgICAgICApOwogICAgICAgIGNvbnN0IHBhcmFtcyA9IHsKICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgIHBvc2l0aW9uczogY2xlYW5Qb3NpdGlvbnMsCiAgICAgICAgICB3aWR0aCwKICAgICAgICAgIGNvcm5lclR5cGU6IGNvcnJpZG9yT3V0bGluZUdlb21ldHJ5Ll9jb3JuZXJUeXBlLAogICAgICAgICAgZ3JhbnVsYXJpdHk6IGNvcnJpZG9yT3V0bGluZUdlb21ldHJ5Ll9ncmFudWxhcml0eSwKICAgICAgICAgIHNhdmVBdHRyaWJ1dGVzOiBmYWxzZQogICAgICAgIH07CiAgICAgICAgbGV0IGF0dHI7CiAgICAgICAgaWYgKGV4dHJ1ZGUpIHsKICAgICAgICAgIHBhcmFtcy5oZWlnaHQgPSBoZWlnaHQ7CiAgICAgICAgICBwYXJhbXMuZXh0cnVkZWRIZWlnaHQgPSBleHRydWRlZEhlaWdodDsKICAgICAgICAgIHBhcmFtcy5vZmZzZXRBdHRyaWJ1dGUgPSBjb3JyaWRvck91dGxpbmVHZW9tZXRyeS5fb2Zmc2V0QXR0cmlidXRlOwogICAgICAgICAgYXR0ciA9IGNvbXB1dGVQb3NpdGlvbnNFeHRydWRlZDIocGFyYW1zKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY29uc3QgY29tcHV0ZWRQb3NpdGlvbnMgPSBDb3JyaWRvckdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmNvbXB1dGVQb3NpdGlvbnMocGFyYW1zKTsKICAgICAgICAgIGF0dHIgPSBjb21iaW5lMyhjb21wdXRlZFBvc2l0aW9ucywgcGFyYW1zLmNvcm5lclR5cGUpOwogICAgICAgICAgYXR0ci5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcyA9IFBvbHlnb25QaXBlbGluZV9kZWZhdWx0LnNjYWxlVG9HZW9kZXRpY0hlaWdodCgKICAgICAgICAgICAgYXR0ci5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcywKICAgICAgICAgICAgaGVpZ2h0LAogICAgICAgICAgICBlbGxpcHNvaWQKICAgICAgICAgICk7CiAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGNvcnJpZG9yT3V0bGluZUdlb21ldHJ5Ll9vZmZzZXRBdHRyaWJ1dGUpKSB7CiAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IGF0dHIuYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXMubGVuZ3RoOwogICAgICAgICAgICBjb25zdCBvZmZzZXRWYWx1ZSA9IGNvcnJpZG9yT3V0bGluZUdlb21ldHJ5Ll9vZmZzZXRBdHRyaWJ1dGUgPT09IEdlb21ldHJ5T2Zmc2V0QXR0cmlidXRlX2RlZmF1bHQuTk9ORSA/IDAgOiAxOwogICAgICAgICAgICBjb25zdCBhcHBseU9mZnNldCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCAvIDMpLmZpbGwob2Zmc2V0VmFsdWUpOwogICAgICAgICAgICBhdHRyLmF0dHJpYnV0ZXMuYXBwbHlPZmZzZXQgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuVU5TSUdORURfQllURSwKICAgICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAxLAogICAgICAgICAgICAgIHZhbHVlczogYXBwbHlPZmZzZXQKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBhdHRyLmF0dHJpYnV0ZXM7CiAgICAgICAgY29uc3QgYm91bmRpbmdTcGhlcmUgPSBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0LmZyb21WZXJ0aWNlcygKICAgICAgICAgIGF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzLAogICAgICAgICAgdm9pZCAwLAogICAgICAgICAgMwogICAgICAgICk7CiAgICAgICAgcmV0dXJuIG5ldyBHZW9tZXRyeV9kZWZhdWx0KHsKICAgICAgICAgIGF0dHJpYnV0ZXMsCiAgICAgICAgICBpbmRpY2VzOiBhdHRyLmluZGljZXMsCiAgICAgICAgICBwcmltaXRpdmVUeXBlOiBQcmltaXRpdmVUeXBlX2RlZmF1bHQuTElORVMsCiAgICAgICAgICBib3VuZGluZ1NwaGVyZSwKICAgICAgICAgIG9mZnNldEF0dHJpYnV0ZTogY29ycmlkb3JPdXRsaW5lR2VvbWV0cnkuX29mZnNldEF0dHJpYnV0ZQogICAgICAgIH0pOwogICAgICB9OwogICAgICBDb3JyaWRvck91dGxpbmVHZW9tZXRyeV9kZWZhdWx0ID0gQ29ycmlkb3JPdXRsaW5lR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVDb3JyaWRvck91dGxpbmVHZW9tZXRyeS5qcwogIHZhciBjcmVhdGVDb3JyaWRvck91dGxpbmVHZW9tZXRyeV9leHBvcnRzID0ge307CiAgX19leHBvcnQoY3JlYXRlQ29ycmlkb3JPdXRsaW5lR2VvbWV0cnlfZXhwb3J0cywgewogICAgZGVmYXVsdDogKCkgPT4gY3JlYXRlQ29ycmlkb3JPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdAogIH0pOwogIGZ1bmN0aW9uIGNyZWF0ZUNvcnJpZG9yT3V0bGluZUdlb21ldHJ5KGNvcnJpZG9yT3V0bGluZUdlb21ldHJ5LCBvZmZzZXQpIHsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQob2Zmc2V0KSkgewogICAgICBjb3JyaWRvck91dGxpbmVHZW9tZXRyeSA9IENvcnJpZG9yT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQudW5wYWNrKAogICAgICAgIGNvcnJpZG9yT3V0bGluZUdlb21ldHJ5LAogICAgICAgIG9mZnNldAogICAgICApOwogICAgfQogICAgY29ycmlkb3JPdXRsaW5lR2VvbWV0cnkuX2VsbGlwc29pZCA9IEVsbGlwc29pZF9kZWZhdWx0LmNsb25lKAogICAgICBjb3JyaWRvck91dGxpbmVHZW9tZXRyeS5fZWxsaXBzb2lkCiAgICApOwogICAgcmV0dXJuIENvcnJpZG9yT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQuY3JlYXRlR2VvbWV0cnkoY29ycmlkb3JPdXRsaW5lR2VvbWV0cnkpOwogIH0KICB2YXIgY3JlYXRlQ29ycmlkb3JPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdDsKICB2YXIgaW5pdF9jcmVhdGVDb3JyaWRvck91dGxpbmVHZW9tZXRyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlQ29ycmlkb3JPdXRsaW5lR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X0NvcnJpZG9yT3V0bGluZUdlb21ldHJ5KCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBjcmVhdGVDb3JyaWRvck91dGxpbmVHZW9tZXRyeV9kZWZhdWx0ID0gY3JlYXRlQ29ycmlkb3JPdXRsaW5lR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9DeWxpbmRlckdlb21ldHJ5TGlicmFyeS5qcwogIHZhciBDeWxpbmRlckdlb21ldHJ5TGlicmFyeSwgQ3lsaW5kZXJHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdDsKICB2YXIgaW5pdF9DeWxpbmRlckdlb21ldHJ5TGlicmFyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvQ3lsaW5kZXJHZW9tZXRyeUxpYnJhcnkuanMiKCkgewogICAgICBpbml0X01hdGgoKTsKICAgICAgQ3lsaW5kZXJHZW9tZXRyeUxpYnJhcnkgPSB7fTsKICAgICAgQ3lsaW5kZXJHZW9tZXRyeUxpYnJhcnkuY29tcHV0ZVBvc2l0aW9ucyA9IGZ1bmN0aW9uKGxlbmd0aCwgdG9wUmFkaXVzLCBib3R0b21SYWRpdXMsIHNsaWNlcywgZmlsbCkgewogICAgICAgIGNvbnN0IHRvcFogPSBsZW5ndGggKiAwLjU7CiAgICAgICAgY29uc3QgYm90dG9tWiA9IC10b3BaOwogICAgICAgIGNvbnN0IHR3b1NsaWNlID0gc2xpY2VzICsgc2xpY2VzOwogICAgICAgIGNvbnN0IHNpemUgPSBmaWxsID8gMiAqIHR3b1NsaWNlIDogdHdvU2xpY2U7CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gbmV3IEZsb2F0NjRBcnJheShzaXplICogMyk7CiAgICAgICAgbGV0IGk7CiAgICAgICAgbGV0IGluZGV4ID0gMDsKICAgICAgICBsZXQgdGJJbmRleCA9IDA7CiAgICAgICAgY29uc3QgYm90dG9tT2Zmc2V0ID0gZmlsbCA/IHR3b1NsaWNlICogMyA6IDA7CiAgICAgICAgY29uc3QgdG9wT2Zmc2V0ID0gZmlsbCA/ICh0d29TbGljZSArIHNsaWNlcykgKiAzIDogc2xpY2VzICogMzsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc2xpY2VzOyBpKyspIHsKICAgICAgICAgIGNvbnN0IGFuZ2xlID0gaSAvIHNsaWNlcyAqIE1hdGhfZGVmYXVsdC5UV09fUEk7CiAgICAgICAgICBjb25zdCB4ID0gTWF0aC5jb3MoYW5nbGUpOwogICAgICAgICAgY29uc3QgeSA9IE1hdGguc2luKGFuZ2xlKTsKICAgICAgICAgIGNvbnN0IGJvdHRvbVggPSB4ICogYm90dG9tUmFkaXVzOwogICAgICAgICAgY29uc3QgYm90dG9tWSA9IHkgKiBib3R0b21SYWRpdXM7CiAgICAgICAgICBjb25zdCB0b3BYID0geCAqIHRvcFJhZGl1czsKICAgICAgICAgIGNvbnN0IHRvcFkgPSB5ICogdG9wUmFkaXVzOwogICAgICAgICAgcG9zaXRpb25zW3RiSW5kZXggKyBib3R0b21PZmZzZXRdID0gYm90dG9tWDsKICAgICAgICAgIHBvc2l0aW9uc1t0YkluZGV4ICsgYm90dG9tT2Zmc2V0ICsgMV0gPSBib3R0b21ZOwogICAgICAgICAgcG9zaXRpb25zW3RiSW5kZXggKyBib3R0b21PZmZzZXQgKyAyXSA9IGJvdHRvbVo7CiAgICAgICAgICBwb3NpdGlvbnNbdGJJbmRleCArIHRvcE9mZnNldF0gPSB0b3BYOwogICAgICAgICAgcG9zaXRpb25zW3RiSW5kZXggKyB0b3BPZmZzZXQgKyAxXSA9IHRvcFk7CiAgICAgICAgICBwb3NpdGlvbnNbdGJJbmRleCArIHRvcE9mZnNldCArIDJdID0gdG9wWjsKICAgICAgICAgIHRiSW5kZXggKz0gMzsKICAgICAgICAgIGlmIChmaWxsKSB7CiAgICAgICAgICAgIHBvc2l0aW9uc1tpbmRleCsrXSA9IGJvdHRvbVg7CiAgICAgICAgICAgIHBvc2l0aW9uc1tpbmRleCsrXSA9IGJvdHRvbVk7CiAgICAgICAgICAgIHBvc2l0aW9uc1tpbmRleCsrXSA9IGJvdHRvbVo7CiAgICAgICAgICAgIHBvc2l0aW9uc1tpbmRleCsrXSA9IHRvcFg7CiAgICAgICAgICAgIHBvc2l0aW9uc1tpbmRleCsrXSA9IHRvcFk7CiAgICAgICAgICAgIHBvc2l0aW9uc1tpbmRleCsrXSA9IHRvcFo7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBwb3NpdGlvbnM7CiAgICAgIH07CiAgICAgIEN5bGluZGVyR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQgPSBDeWxpbmRlckdlb21ldHJ5TGlicmFyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0N5bGluZGVyR2VvbWV0cnkuanMKICBmdW5jdGlvbiBDeWxpbmRlckdlb21ldHJ5KG9wdGlvbnMpIHsKICAgIG9wdGlvbnMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLCBkZWZhdWx0VmFsdWVfZGVmYXVsdC5FTVBUWV9PQkpFQ1QpOwogICAgY29uc3QgbGVuZ3RoID0gb3B0aW9ucy5sZW5ndGg7CiAgICBjb25zdCB0b3BSYWRpdXMgPSBvcHRpb25zLnRvcFJhZGl1czsKICAgIGNvbnN0IGJvdHRvbVJhZGl1cyA9IG9wdGlvbnMuYm90dG9tUmFkaXVzOwogICAgY29uc3QgdmVydGV4Rm9ybWF0ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy52ZXJ0ZXhGb3JtYXQsIFZlcnRleEZvcm1hdF9kZWZhdWx0LkRFRkFVTFQpOwogICAgY29uc3Qgc2xpY2VzID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5zbGljZXMsIDEyOCk7CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChsZW5ndGgpKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJvcHRpb25zLmxlbmd0aCBtdXN0IGJlIGRlZmluZWQuIik7CiAgICB9CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdCh0b3BSYWRpdXMpKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJvcHRpb25zLnRvcFJhZGl1cyBtdXN0IGJlIGRlZmluZWQuIik7CiAgICB9CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChib3R0b21SYWRpdXMpKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJvcHRpb25zLmJvdHRvbVJhZGl1cyBtdXN0IGJlIGRlZmluZWQuIik7CiAgICB9CiAgICBpZiAoc2xpY2VzIDwgMykgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAib3B0aW9ucy5zbGljZXMgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gMy4iCiAgICAgICk7CiAgICB9CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG9wdGlvbnMub2Zmc2V0QXR0cmlidXRlKSAmJiBvcHRpb25zLm9mZnNldEF0dHJpYnV0ZSA9PT0gR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGVfZGVmYXVsdC5UT1ApIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgIkdlb21ldHJ5T2Zmc2V0QXR0cmlidXRlLlRPUCBpcyBub3QgYSBzdXBwb3J0ZWQgb3B0aW9ucy5vZmZzZXRBdHRyaWJ1dGUgZm9yIHRoaXMgZ2VvbWV0cnkuIgogICAgICApOwogICAgfQogICAgdGhpcy5fbGVuZ3RoID0gbGVuZ3RoOwogICAgdGhpcy5fdG9wUmFkaXVzID0gdG9wUmFkaXVzOwogICAgdGhpcy5fYm90dG9tUmFkaXVzID0gYm90dG9tUmFkaXVzOwogICAgdGhpcy5fdmVydGV4Rm9ybWF0ID0gVmVydGV4Rm9ybWF0X2RlZmF1bHQuY2xvbmUodmVydGV4Rm9ybWF0KTsKICAgIHRoaXMuX3NsaWNlcyA9IHNsaWNlczsKICAgIHRoaXMuX29mZnNldEF0dHJpYnV0ZSA9IG9wdGlvbnMub2Zmc2V0QXR0cmlidXRlOwogICAgdGhpcy5fd29ya2VyTmFtZSA9ICJjcmVhdGVDeWxpbmRlckdlb21ldHJ5IjsKICB9CiAgdmFyIHJhZGl1c1NjcmF0Y2gsIG5vcm1hbFNjcmF0Y2gzLCBiaXRhbmdlbnRTY3JhdGNoLCB0YW5nZW50U2NyYXRjaCwgcG9zaXRpb25TY3JhdGNoLCBzY3JhdGNoVmVydGV4Rm9ybWF0NSwgc2NyYXRjaE9wdGlvbnMxMSwgdW5pdEN5bGluZGVyR2VvbWV0cnksIEN5bGluZGVyR2VvbWV0cnlfZGVmYXVsdDsKICB2YXIgaW5pdF9DeWxpbmRlckdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9DeWxpbmRlckdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9Cb3VuZGluZ1NwaGVyZSgpOwogICAgICBpbml0X0NhcnRlc2lhbjIoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ29tcG9uZW50RGF0YXR5cGUoKTsKICAgICAgaW5pdF9DeWxpbmRlckdlb21ldHJ5TGlicmFyeSgpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X0dlb21ldHJ5KCk7CiAgICAgIGluaXRfR2VvbWV0cnlBdHRyaWJ1dGUoKTsKICAgICAgaW5pdF9HZW9tZXRyeUF0dHJpYnV0ZXMoKTsKICAgICAgaW5pdF9HZW9tZXRyeU9mZnNldEF0dHJpYnV0ZSgpOwogICAgICBpbml0X0luZGV4RGF0YXR5cGUoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIGluaXRfUHJpbWl0aXZlVHlwZSgpOwogICAgICBpbml0X1ZlcnRleEZvcm1hdCgpOwogICAgICByYWRpdXNTY3JhdGNoID0gbmV3IENhcnRlc2lhbjJfZGVmYXVsdCgpOwogICAgICBub3JtYWxTY3JhdGNoMyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgYml0YW5nZW50U2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgdGFuZ2VudFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHBvc2l0aW9uU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgQ3lsaW5kZXJHZW9tZXRyeS5wYWNrZWRMZW5ndGggPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyA1OwogICAgICBDeWxpbmRlckdlb21ldHJ5LnBhY2sgPSBmdW5jdGlvbih2YWx1ZSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdCh2YWx1ZSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJ2YWx1ZSBpcyByZXF1aXJlZCIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChhcnJheSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJhcnJheSBpcyByZXF1aXJlZCIpOwogICAgICAgIH0KICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgVmVydGV4Rm9ybWF0X2RlZmF1bHQucGFjayh2YWx1ZS5fdmVydGV4Rm9ybWF0LCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9sZW5ndGg7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl90b3BSYWRpdXM7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9ib3R0b21SYWRpdXM7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9zbGljZXM7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleF0gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh2YWx1ZS5fb2Zmc2V0QXR0cmlidXRlLCAtMSk7CiAgICAgICAgcmV0dXJuIGFycmF5OwogICAgICB9OwogICAgICBzY3JhdGNoVmVydGV4Rm9ybWF0NSA9IG5ldyBWZXJ0ZXhGb3JtYXRfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoT3B0aW9uczExID0gewogICAgICAgIHZlcnRleEZvcm1hdDogc2NyYXRjaFZlcnRleEZvcm1hdDUsCiAgICAgICAgbGVuZ3RoOiB2b2lkIDAsCiAgICAgICAgdG9wUmFkaXVzOiB2b2lkIDAsCiAgICAgICAgYm90dG9tUmFkaXVzOiB2b2lkIDAsCiAgICAgICAgc2xpY2VzOiB2b2lkIDAsCiAgICAgICAgb2Zmc2V0QXR0cmlidXRlOiB2b2lkIDAKICAgICAgfTsKICAgICAgQ3lsaW5kZXJHZW9tZXRyeS51bnBhY2sgPSBmdW5jdGlvbihhcnJheSwgc3RhcnRpbmdJbmRleCwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoYXJyYXkpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYXJyYXkgaXMgcmVxdWlyZWQiKTsKICAgICAgICB9CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIGNvbnN0IHZlcnRleEZvcm1hdCA9IFZlcnRleEZvcm1hdF9kZWZhdWx0LnVucGFjaygKICAgICAgICAgIGFycmF5LAogICAgICAgICAgc3RhcnRpbmdJbmRleCwKICAgICAgICAgIHNjcmF0Y2hWZXJ0ZXhGb3JtYXQ1CiAgICAgICAgKTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IFZlcnRleEZvcm1hdF9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBjb25zdCBsZW5ndGggPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IHRvcFJhZGl1cyA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3QgYm90dG9tUmFkaXVzID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBzbGljZXMgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IG9mZnNldEF0dHJpYnV0ZSA9IGFycmF5W3N0YXJ0aW5nSW5kZXhdOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMTEubGVuZ3RoID0gbGVuZ3RoOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMxMS50b3BSYWRpdXMgPSB0b3BSYWRpdXM7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczExLmJvdHRvbVJhZGl1cyA9IGJvdHRvbVJhZGl1czsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMTEuc2xpY2VzID0gc2xpY2VzOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMxMS5vZmZzZXRBdHRyaWJ1dGUgPSBvZmZzZXRBdHRyaWJ1dGUgPT09IC0xID8gdm9pZCAwIDogb2Zmc2V0QXR0cmlidXRlOwogICAgICAgICAgcmV0dXJuIG5ldyBDeWxpbmRlckdlb21ldHJ5KHNjcmF0Y2hPcHRpb25zMTEpOwogICAgICAgIH0KICAgICAgICByZXN1bHQuX3ZlcnRleEZvcm1hdCA9IFZlcnRleEZvcm1hdF9kZWZhdWx0LmNsb25lKHZlcnRleEZvcm1hdCwgcmVzdWx0Ll92ZXJ0ZXhGb3JtYXQpOwogICAgICAgIHJlc3VsdC5fbGVuZ3RoID0gbGVuZ3RoOwogICAgICAgIHJlc3VsdC5fdG9wUmFkaXVzID0gdG9wUmFkaXVzOwogICAgICAgIHJlc3VsdC5fYm90dG9tUmFkaXVzID0gYm90dG9tUmFkaXVzOwogICAgICAgIHJlc3VsdC5fc2xpY2VzID0gc2xpY2VzOwogICAgICAgIHJlc3VsdC5fb2Zmc2V0QXR0cmlidXRlID0gb2Zmc2V0QXR0cmlidXRlID09PSAtMSA/IHZvaWQgMCA6IG9mZnNldEF0dHJpYnV0ZTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDeWxpbmRlckdlb21ldHJ5LmNyZWF0ZUdlb21ldHJ5ID0gZnVuY3Rpb24oY3lsaW5kZXJHZW9tZXRyeSkgewogICAgICAgIGxldCBsZW5ndGggPSBjeWxpbmRlckdlb21ldHJ5Ll9sZW5ndGg7CiAgICAgICAgY29uc3QgdG9wUmFkaXVzID0gY3lsaW5kZXJHZW9tZXRyeS5fdG9wUmFkaXVzOwogICAgICAgIGNvbnN0IGJvdHRvbVJhZGl1cyA9IGN5bGluZGVyR2VvbWV0cnkuX2JvdHRvbVJhZGl1czsKICAgICAgICBjb25zdCB2ZXJ0ZXhGb3JtYXQgPSBjeWxpbmRlckdlb21ldHJ5Ll92ZXJ0ZXhGb3JtYXQ7CiAgICAgICAgY29uc3Qgc2xpY2VzID0gY3lsaW5kZXJHZW9tZXRyeS5fc2xpY2VzOwogICAgICAgIGlmIChsZW5ndGggPD0gMCB8fCB0b3BSYWRpdXMgPCAwIHx8IGJvdHRvbVJhZGl1cyA8IDAgfHwgdG9wUmFkaXVzID09PSAwICYmIGJvdHRvbVJhZGl1cyA9PT0gMCkgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBjb25zdCB0d29TbGljZXMgPSBzbGljZXMgKyBzbGljZXM7CiAgICAgICAgY29uc3QgdGhyZWVTbGljZXMgPSBzbGljZXMgKyB0d29TbGljZXM7CiAgICAgICAgY29uc3QgbnVtVmVydGljZXMgPSB0d29TbGljZXMgKyB0d29TbGljZXM7CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gQ3lsaW5kZXJHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5jb21wdXRlUG9zaXRpb25zKAogICAgICAgICAgbGVuZ3RoLAogICAgICAgICAgdG9wUmFkaXVzLAogICAgICAgICAgYm90dG9tUmFkaXVzLAogICAgICAgICAgc2xpY2VzLAogICAgICAgICAgdHJ1ZQogICAgICAgICk7CiAgICAgICAgY29uc3Qgc3QgPSB2ZXJ0ZXhGb3JtYXQuc3QgPyBuZXcgRmxvYXQzMkFycmF5KG51bVZlcnRpY2VzICogMikgOiB2b2lkIDA7CiAgICAgICAgY29uc3Qgbm9ybWFscyA9IHZlcnRleEZvcm1hdC5ub3JtYWwgPyBuZXcgRmxvYXQzMkFycmF5KG51bVZlcnRpY2VzICogMykgOiB2b2lkIDA7CiAgICAgICAgY29uc3QgdGFuZ2VudHMgPSB2ZXJ0ZXhGb3JtYXQudGFuZ2VudCA/IG5ldyBGbG9hdDMyQXJyYXkobnVtVmVydGljZXMgKiAzKSA6IHZvaWQgMDsKICAgICAgICBjb25zdCBiaXRhbmdlbnRzID0gdmVydGV4Rm9ybWF0LmJpdGFuZ2VudCA/IG5ldyBGbG9hdDMyQXJyYXkobnVtVmVydGljZXMgKiAzKSA6IHZvaWQgMDsKICAgICAgICBsZXQgaTsKICAgICAgICBjb25zdCBjb21wdXRlTm9ybWFsID0gdmVydGV4Rm9ybWF0Lm5vcm1hbCB8fCB2ZXJ0ZXhGb3JtYXQudGFuZ2VudCB8fCB2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50OwogICAgICAgIGlmIChjb21wdXRlTm9ybWFsKSB7CiAgICAgICAgICBjb25zdCBjb21wdXRlVGFuZ2VudCA9IHZlcnRleEZvcm1hdC50YW5nZW50IHx8IHZlcnRleEZvcm1hdC5iaXRhbmdlbnQ7CiAgICAgICAgICBsZXQgbm9ybWFsSW5kZXggPSAwOwogICAgICAgICAgbGV0IHRhbmdlbnRJbmRleCA9IDA7CiAgICAgICAgICBsZXQgYml0YW5nZW50SW5kZXggPSAwOwogICAgICAgICAgY29uc3QgdGhldGEgPSBNYXRoLmF0YW4yKGJvdHRvbVJhZGl1cyAtIHRvcFJhZGl1cywgbGVuZ3RoKTsKICAgICAgICAgIGNvbnN0IG5vcm1hbDIgPSBub3JtYWxTY3JhdGNoMzsKICAgICAgICAgIG5vcm1hbDIueiA9IE1hdGguc2luKHRoZXRhKTsKICAgICAgICAgIGNvbnN0IG5vcm1hbFNjYWxlMiA9IE1hdGguY29zKHRoZXRhKTsKICAgICAgICAgIGxldCB0YW5nZW50ID0gdGFuZ2VudFNjcmF0Y2g7CiAgICAgICAgICBsZXQgYml0YW5nZW50ID0gYml0YW5nZW50U2NyYXRjaDsKICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBzbGljZXM7IGkrKykgewogICAgICAgICAgICBjb25zdCBhbmdsZSA9IGkgLyBzbGljZXMgKiBNYXRoX2RlZmF1bHQuVFdPX1BJOwogICAgICAgICAgICBjb25zdCB4ID0gbm9ybWFsU2NhbGUyICogTWF0aC5jb3MoYW5nbGUpOwogICAgICAgICAgICBjb25zdCB5ID0gbm9ybWFsU2NhbGUyICogTWF0aC5zaW4oYW5nbGUpOwogICAgICAgICAgICBpZiAoY29tcHV0ZU5vcm1hbCkgewogICAgICAgICAgICAgIG5vcm1hbDIueCA9IHg7CiAgICAgICAgICAgICAgbm9ybWFsMi55ID0geTsKICAgICAgICAgICAgICBpZiAoY29tcHV0ZVRhbmdlbnQpIHsKICAgICAgICAgICAgICAgIHRhbmdlbnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKAogICAgICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY3Jvc3MoQ2FydGVzaWFuM19kZWZhdWx0LlVOSVRfWiwgbm9ybWFsMiwgdGFuZ2VudCksCiAgICAgICAgICAgICAgICAgIHRhbmdlbnQKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQubm9ybWFsKSB7CiAgICAgICAgICAgICAgICBub3JtYWxzW25vcm1hbEluZGV4KytdID0gbm9ybWFsMi54OwogICAgICAgICAgICAgICAgbm9ybWFsc1tub3JtYWxJbmRleCsrXSA9IG5vcm1hbDIueTsKICAgICAgICAgICAgICAgIG5vcm1hbHNbbm9ybWFsSW5kZXgrK10gPSBub3JtYWwyLno7CiAgICAgICAgICAgICAgICBub3JtYWxzW25vcm1hbEluZGV4KytdID0gbm9ybWFsMi54OwogICAgICAgICAgICAgICAgbm9ybWFsc1tub3JtYWxJbmRleCsrXSA9IG5vcm1hbDIueTsKICAgICAgICAgICAgICAgIG5vcm1hbHNbbm9ybWFsSW5kZXgrK10gPSBub3JtYWwyLno7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQudGFuZ2VudCkgewogICAgICAgICAgICAgICAgdGFuZ2VudHNbdGFuZ2VudEluZGV4KytdID0gdGFuZ2VudC54OwogICAgICAgICAgICAgICAgdGFuZ2VudHNbdGFuZ2VudEluZGV4KytdID0gdGFuZ2VudC55OwogICAgICAgICAgICAgICAgdGFuZ2VudHNbdGFuZ2VudEluZGV4KytdID0gdGFuZ2VudC56OwogICAgICAgICAgICAgICAgdGFuZ2VudHNbdGFuZ2VudEluZGV4KytdID0gdGFuZ2VudC54OwogICAgICAgICAgICAgICAgdGFuZ2VudHNbdGFuZ2VudEluZGV4KytdID0gdGFuZ2VudC55OwogICAgICAgICAgICAgICAgdGFuZ2VudHNbdGFuZ2VudEluZGV4KytdID0gdGFuZ2VudC56OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAodmVydGV4Rm9ybWF0LmJpdGFuZ2VudCkgewogICAgICAgICAgICAgICAgYml0YW5nZW50ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSgKICAgICAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKG5vcm1hbDIsIHRhbmdlbnQsIGJpdGFuZ2VudCksCiAgICAgICAgICAgICAgICAgIGJpdGFuZ2VudAogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIGJpdGFuZ2VudHNbYml0YW5nZW50SW5kZXgrK10gPSBiaXRhbmdlbnQueDsKICAgICAgICAgICAgICAgIGJpdGFuZ2VudHNbYml0YW5nZW50SW5kZXgrK10gPSBiaXRhbmdlbnQueTsKICAgICAgICAgICAgICAgIGJpdGFuZ2VudHNbYml0YW5nZW50SW5kZXgrK10gPSBiaXRhbmdlbnQuejsKICAgICAgICAgICAgICAgIGJpdGFuZ2VudHNbYml0YW5nZW50SW5kZXgrK10gPSBiaXRhbmdlbnQueDsKICAgICAgICAgICAgICAgIGJpdGFuZ2VudHNbYml0YW5nZW50SW5kZXgrK10gPSBiaXRhbmdlbnQueTsKICAgICAgICAgICAgICAgIGJpdGFuZ2VudHNbYml0YW5nZW50SW5kZXgrK10gPSBiaXRhbmdlbnQuejsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBzbGljZXM7IGkrKykgewogICAgICAgICAgICBpZiAodmVydGV4Rm9ybWF0Lm5vcm1hbCkgewogICAgICAgICAgICAgIG5vcm1hbHNbbm9ybWFsSW5kZXgrK10gPSAwOwogICAgICAgICAgICAgIG5vcm1hbHNbbm9ybWFsSW5kZXgrK10gPSAwOwogICAgICAgICAgICAgIG5vcm1hbHNbbm9ybWFsSW5kZXgrK10gPSAtMTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodmVydGV4Rm9ybWF0LnRhbmdlbnQpIHsKICAgICAgICAgICAgICB0YW5nZW50c1t0YW5nZW50SW5kZXgrK10gPSAxOwogICAgICAgICAgICAgIHRhbmdlbnRzW3RhbmdlbnRJbmRleCsrXSA9IDA7CiAgICAgICAgICAgICAgdGFuZ2VudHNbdGFuZ2VudEluZGV4KytdID0gMDsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodmVydGV4Rm9ybWF0LmJpdGFuZ2VudCkgewogICAgICAgICAgICAgIGJpdGFuZ2VudHNbYml0YW5nZW50SW5kZXgrK10gPSAwOwogICAgICAgICAgICAgIGJpdGFuZ2VudHNbYml0YW5nZW50SW5kZXgrK10gPSAtMTsKICAgICAgICAgICAgICBiaXRhbmdlbnRzW2JpdGFuZ2VudEluZGV4KytdID0gMDsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgZm9yIChpID0gMDsgaSA8IHNsaWNlczsgaSsrKSB7CiAgICAgICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQubm9ybWFsKSB7CiAgICAgICAgICAgICAgbm9ybWFsc1tub3JtYWxJbmRleCsrXSA9IDA7CiAgICAgICAgICAgICAgbm9ybWFsc1tub3JtYWxJbmRleCsrXSA9IDA7CiAgICAgICAgICAgICAgbm9ybWFsc1tub3JtYWxJbmRleCsrXSA9IDE7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHZlcnRleEZvcm1hdC50YW5nZW50KSB7CiAgICAgICAgICAgICAgdGFuZ2VudHNbdGFuZ2VudEluZGV4KytdID0gMTsKICAgICAgICAgICAgICB0YW5nZW50c1t0YW5nZW50SW5kZXgrK10gPSAwOwogICAgICAgICAgICAgIHRhbmdlbnRzW3RhbmdlbnRJbmRleCsrXSA9IDA7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpIHsKICAgICAgICAgICAgICBiaXRhbmdlbnRzW2JpdGFuZ2VudEluZGV4KytdID0gMDsKICAgICAgICAgICAgICBiaXRhbmdlbnRzW2JpdGFuZ2VudEluZGV4KytdID0gMTsKICAgICAgICAgICAgICBiaXRhbmdlbnRzW2JpdGFuZ2VudEluZGV4KytdID0gMDsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBjb25zdCBudW1JbmRpY2VzID0gMTIgKiBzbGljZXMgLSAxMjsKICAgICAgICBjb25zdCBpbmRpY2VzID0gSW5kZXhEYXRhdHlwZV9kZWZhdWx0LmNyZWF0ZVR5cGVkQXJyYXkobnVtVmVydGljZXMsIG51bUluZGljZXMpOwogICAgICAgIGxldCBpbmRleCA9IDA7CiAgICAgICAgbGV0IGogPSAwOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBzbGljZXMgLSAxOyBpKyspIHsKICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBqOwogICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGogKyAyOwogICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGogKyAzOwogICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGo7CiAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gaiArIDM7CiAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gaiArIDE7CiAgICAgICAgICBqICs9IDI7CiAgICAgICAgfQogICAgICAgIGluZGljZXNbaW5kZXgrK10gPSB0d29TbGljZXMgLSAyOwogICAgICAgIGluZGljZXNbaW5kZXgrK10gPSAwOwogICAgICAgIGluZGljZXNbaW5kZXgrK10gPSAxOwogICAgICAgIGluZGljZXNbaW5kZXgrK10gPSB0d29TbGljZXMgLSAyOwogICAgICAgIGluZGljZXNbaW5kZXgrK10gPSAxOwogICAgICAgIGluZGljZXNbaW5kZXgrK10gPSB0d29TbGljZXMgLSAxOwogICAgICAgIGZvciAoaSA9IDE7IGkgPCBzbGljZXMgLSAxOyBpKyspIHsKICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSB0d29TbGljZXMgKyBpICsgMTsKICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSB0d29TbGljZXMgKyBpOwogICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IHR3b1NsaWNlczsKICAgICAgICB9CiAgICAgICAgZm9yIChpID0gMTsgaSA8IHNsaWNlcyAtIDE7IGkrKykgewogICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IHRocmVlU2xpY2VzOwogICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IHRocmVlU2xpY2VzICsgaTsKICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSB0aHJlZVNsaWNlcyArIGkgKyAxOwogICAgICAgIH0KICAgICAgICBsZXQgdGV4dHVyZUNvb3JkSW5kZXggPSAwOwogICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQuc3QpIHsKICAgICAgICAgIGNvbnN0IHJhZCA9IE1hdGgubWF4KHRvcFJhZGl1cywgYm90dG9tUmFkaXVzKTsKICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1WZXJ0aWNlczsgaSsrKSB7CiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShwb3NpdGlvbnMsIGkgKiAzLCBwb3NpdGlvblNjcmF0Y2gpOwogICAgICAgICAgICBzdFt0ZXh0dXJlQ29vcmRJbmRleCsrXSA9IChwb3NpdGlvbi54ICsgcmFkKSAvICgyICogcmFkKTsKICAgICAgICAgICAgc3RbdGV4dHVyZUNvb3JkSW5kZXgrK10gPSAocG9zaXRpb24ueSArIHJhZCkgLyAoMiAqIHJhZCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVzX2RlZmF1bHQoKTsKICAgICAgICBpZiAodmVydGV4Rm9ybWF0LnBvc2l0aW9uKSB7CiAgICAgICAgICBhdHRyaWJ1dGVzLnBvc2l0aW9uID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5ET1VCTEUsCiAgICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgICAgIHZhbHVlczogcG9zaXRpb25zCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5ub3JtYWwpIHsKICAgICAgICAgIGF0dHJpYnV0ZXMubm9ybWFsID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICAgICAgdmFsdWVzOiBub3JtYWxzCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgaWYgKHZlcnRleEZvcm1hdC50YW5nZW50KSB7CiAgICAgICAgICBhdHRyaWJ1dGVzLnRhbmdlbnQgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkZMT0FULAogICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgICAgICB2YWx1ZXM6IHRhbmdlbnRzCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpIHsKICAgICAgICAgIGF0dHJpYnV0ZXMuYml0YW5nZW50ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICAgICAgdmFsdWVzOiBiaXRhbmdlbnRzCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5zdCkgewogICAgICAgICAgYXR0cmlidXRlcy5zdCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDIsCiAgICAgICAgICAgIHZhbHVlczogc3QKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICByYWRpdXNTY3JhdGNoLnggPSBsZW5ndGggKiAwLjU7CiAgICAgICAgcmFkaXVzU2NyYXRjaC55ID0gTWF0aC5tYXgoYm90dG9tUmFkaXVzLCB0b3BSYWRpdXMpOwogICAgICAgIGNvbnN0IGJvdW5kaW5nU3BoZXJlID0gbmV3IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQoCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTywKICAgICAgICAgIENhcnRlc2lhbjJfZGVmYXVsdC5tYWduaXR1ZGUocmFkaXVzU2NyYXRjaCkKICAgICAgICApOwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoY3lsaW5kZXJHZW9tZXRyeS5fb2Zmc2V0QXR0cmlidXRlKSkgewogICAgICAgICAgbGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aDsKICAgICAgICAgIGNvbnN0IG9mZnNldFZhbHVlID0gY3lsaW5kZXJHZW9tZXRyeS5fb2Zmc2V0QXR0cmlidXRlID09PSBHZW9tZXRyeU9mZnNldEF0dHJpYnV0ZV9kZWZhdWx0Lk5PTkUgPyAwIDogMTsKICAgICAgICAgIGNvbnN0IGFwcGx5T2Zmc2V0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoIC8gMykuZmlsbChvZmZzZXRWYWx1ZSk7CiAgICAgICAgICBhdHRyaWJ1dGVzLmFwcGx5T2Zmc2V0ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5VTlNJR05FRF9CWVRFLAogICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAxLAogICAgICAgICAgICB2YWx1ZXM6IGFwcGx5T2Zmc2V0CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG5ldyBHZW9tZXRyeV9kZWZhdWx0KHsKICAgICAgICAgIGF0dHJpYnV0ZXMsCiAgICAgICAgICBpbmRpY2VzLAogICAgICAgICAgcHJpbWl0aXZlVHlwZTogUHJpbWl0aXZlVHlwZV9kZWZhdWx0LlRSSUFOR0xFUywKICAgICAgICAgIGJvdW5kaW5nU3BoZXJlLAogICAgICAgICAgb2Zmc2V0QXR0cmlidXRlOiBjeWxpbmRlckdlb21ldHJ5Ll9vZmZzZXRBdHRyaWJ1dGUKICAgICAgICB9KTsKICAgICAgfTsKICAgICAgQ3lsaW5kZXJHZW9tZXRyeS5nZXRVbml0Q3lsaW5kZXIgPSBmdW5jdGlvbigpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdCh1bml0Q3lsaW5kZXJHZW9tZXRyeSkpIHsKICAgICAgICAgIHVuaXRDeWxpbmRlckdlb21ldHJ5ID0gQ3lsaW5kZXJHZW9tZXRyeS5jcmVhdGVHZW9tZXRyeSgKICAgICAgICAgICAgbmV3IEN5bGluZGVyR2VvbWV0cnkoewogICAgICAgICAgICAgIHRvcFJhZGl1czogMSwKICAgICAgICAgICAgICBib3R0b21SYWRpdXM6IDEsCiAgICAgICAgICAgICAgbGVuZ3RoOiAxLAogICAgICAgICAgICAgIHZlcnRleEZvcm1hdDogVmVydGV4Rm9ybWF0X2RlZmF1bHQuUE9TSVRJT05fT05MWQogICAgICAgICAgICB9KQogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHVuaXRDeWxpbmRlckdlb21ldHJ5OwogICAgICB9OwogICAgICBDeWxpbmRlckdlb21ldHJ5X2RlZmF1bHQgPSBDeWxpbmRlckdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlQ3lsaW5kZXJHZW9tZXRyeS5qcwogIHZhciBjcmVhdGVDeWxpbmRlckdlb21ldHJ5X2V4cG9ydHMgPSB7fTsKICBfX2V4cG9ydChjcmVhdGVDeWxpbmRlckdlb21ldHJ5X2V4cG9ydHMsIHsKICAgIGRlZmF1bHQ6ICgpID0+IGNyZWF0ZUN5bGluZGVyR2VvbWV0cnlfZGVmYXVsdAogIH0pOwogIGZ1bmN0aW9uIGNyZWF0ZUN5bGluZGVyR2VvbWV0cnkoY3lsaW5kZXJHZW9tZXRyeSwgb2Zmc2V0KSB7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG9mZnNldCkpIHsKICAgICAgY3lsaW5kZXJHZW9tZXRyeSA9IEN5bGluZGVyR2VvbWV0cnlfZGVmYXVsdC51bnBhY2soY3lsaW5kZXJHZW9tZXRyeSwgb2Zmc2V0KTsKICAgIH0KICAgIHJldHVybiBDeWxpbmRlckdlb21ldHJ5X2RlZmF1bHQuY3JlYXRlR2VvbWV0cnkoY3lsaW5kZXJHZW9tZXRyeSk7CiAgfQogIHZhciBjcmVhdGVDeWxpbmRlckdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfY3JlYXRlQ3lsaW5kZXJHZW9tZXRyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlQ3lsaW5kZXJHZW9tZXRyeS5qcyIoKSB7CiAgICAgIGluaXRfQ3lsaW5kZXJHZW9tZXRyeSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgY3JlYXRlQ3lsaW5kZXJHZW9tZXRyeV9kZWZhdWx0ID0gY3JlYXRlQ3lsaW5kZXJHZW9tZXRyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0N5bGluZGVyT3V0bGluZUdlb21ldHJ5LmpzCiAgZnVuY3Rpb24gQ3lsaW5kZXJPdXRsaW5lR2VvbWV0cnkob3B0aW9ucykgewogICAgb3B0aW9ucyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMsIGRlZmF1bHRWYWx1ZV9kZWZhdWx0LkVNUFRZX09CSkVDVCk7CiAgICBjb25zdCBsZW5ndGggPSBvcHRpb25zLmxlbmd0aDsKICAgIGNvbnN0IHRvcFJhZGl1cyA9IG9wdGlvbnMudG9wUmFkaXVzOwogICAgY29uc3QgYm90dG9tUmFkaXVzID0gb3B0aW9ucy5ib3R0b21SYWRpdXM7CiAgICBjb25zdCBzbGljZXMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLnNsaWNlcywgMTI4KTsKICAgIGNvbnN0IG51bWJlck9mVmVydGljYWxMaW5lcyA9IE1hdGgubWF4KAogICAgICBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLm51bWJlck9mVmVydGljYWxMaW5lcywgMTYpLAogICAgICAwCiAgICApOwogICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJvcHRpb25zLnBvc2l0aW9ucyIsIGxlbmd0aCk7CiAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoIm9wdGlvbnMudG9wUmFkaXVzIiwgdG9wUmFkaXVzKTsKICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigib3B0aW9ucy5ib3R0b21SYWRpdXMiLCBib3R0b21SYWRpdXMpOwogICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuT3JFcXVhbHMoIm9wdGlvbnMuc2xpY2VzIiwgc2xpY2VzLCAzKTsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQob3B0aW9ucy5vZmZzZXRBdHRyaWJ1dGUpICYmIG9wdGlvbnMub2Zmc2V0QXR0cmlidXRlID09PSBHZW9tZXRyeU9mZnNldEF0dHJpYnV0ZV9kZWZhdWx0LlRPUCkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAiR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGUuVE9QIGlzIG5vdCBhIHN1cHBvcnRlZCBvcHRpb25zLm9mZnNldEF0dHJpYnV0ZSBmb3IgdGhpcyBnZW9tZXRyeS4iCiAgICAgICk7CiAgICB9CiAgICB0aGlzLl9sZW5ndGggPSBsZW5ndGg7CiAgICB0aGlzLl90b3BSYWRpdXMgPSB0b3BSYWRpdXM7CiAgICB0aGlzLl9ib3R0b21SYWRpdXMgPSBib3R0b21SYWRpdXM7CiAgICB0aGlzLl9zbGljZXMgPSBzbGljZXM7CiAgICB0aGlzLl9udW1iZXJPZlZlcnRpY2FsTGluZXMgPSBudW1iZXJPZlZlcnRpY2FsTGluZXM7CiAgICB0aGlzLl9vZmZzZXRBdHRyaWJ1dGUgPSBvcHRpb25zLm9mZnNldEF0dHJpYnV0ZTsKICAgIHRoaXMuX3dvcmtlck5hbWUgPSAiY3JlYXRlQ3lsaW5kZXJPdXRsaW5lR2VvbWV0cnkiOwogIH0KICB2YXIgcmFkaXVzU2NyYXRjaDIsIHNjcmF0Y2hPcHRpb25zMTIsIEN5bGluZGVyT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfQ3lsaW5kZXJPdXRsaW5lR2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0N5bGluZGVyT3V0bGluZUdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9Cb3VuZGluZ1NwaGVyZSgpOwogICAgICBpbml0X0NhcnRlc2lhbjIoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgaW5pdF9Db21wb25lbnREYXRhdHlwZSgpOwogICAgICBpbml0X0N5bGluZGVyR2VvbWV0cnlMaWJyYXJ5KCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfR2VvbWV0cnkoKTsKICAgICAgaW5pdF9HZW9tZXRyeUF0dHJpYnV0ZSgpOwogICAgICBpbml0X0dlb21ldHJ5QXR0cmlidXRlcygpOwogICAgICBpbml0X0dlb21ldHJ5T2Zmc2V0QXR0cmlidXRlKCk7CiAgICAgIGluaXRfSW5kZXhEYXRhdHlwZSgpOwogICAgICBpbml0X1ByaW1pdGl2ZVR5cGUoKTsKICAgICAgcmFkaXVzU2NyYXRjaDIgPSBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCk7CiAgICAgIEN5bGluZGVyT3V0bGluZUdlb21ldHJ5LnBhY2tlZExlbmd0aCA9IDY7CiAgICAgIEN5bGluZGVyT3V0bGluZUdlb21ldHJ5LnBhY2sgPSBmdW5jdGlvbih2YWx1ZSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInZhbHVlIiwgdmFsdWUpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fbGVuZ3RoOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fdG9wUmFkaXVzOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fYm90dG9tUmFkaXVzOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fc2xpY2VzOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fbnVtYmVyT2ZWZXJ0aWNhbExpbmVzOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXhdID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQodmFsdWUuX29mZnNldEF0dHJpYnV0ZSwgLTEpOwogICAgICAgIHJldHVybiBhcnJheTsKICAgICAgfTsKICAgICAgc2NyYXRjaE9wdGlvbnMxMiA9IHsKICAgICAgICBsZW5ndGg6IHZvaWQgMCwKICAgICAgICB0b3BSYWRpdXM6IHZvaWQgMCwKICAgICAgICBib3R0b21SYWRpdXM6IHZvaWQgMCwKICAgICAgICBzbGljZXM6IHZvaWQgMCwKICAgICAgICBudW1iZXJPZlZlcnRpY2FsTGluZXM6IHZvaWQgMCwKICAgICAgICBvZmZzZXRBdHRyaWJ1dGU6IHZvaWQgMAogICAgICB9OwogICAgICBDeWxpbmRlck91dGxpbmVHZW9tZXRyeS51bnBhY2sgPSBmdW5jdGlvbihhcnJheSwgc3RhcnRpbmdJbmRleCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgY29uc3QgbGVuZ3RoID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCB0b3BSYWRpdXMgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IGJvdHRvbVJhZGl1cyA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3Qgc2xpY2VzID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBudW1iZXJPZlZlcnRpY2FsTGluZXMgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IG9mZnNldEF0dHJpYnV0ZSA9IGFycmF5W3N0YXJ0aW5nSW5kZXhdOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMTIubGVuZ3RoID0gbGVuZ3RoOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMxMi50b3BSYWRpdXMgPSB0b3BSYWRpdXM7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczEyLmJvdHRvbVJhZGl1cyA9IGJvdHRvbVJhZGl1czsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMTIuc2xpY2VzID0gc2xpY2VzOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMxMi5udW1iZXJPZlZlcnRpY2FsTGluZXMgPSBudW1iZXJPZlZlcnRpY2FsTGluZXM7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczEyLm9mZnNldEF0dHJpYnV0ZSA9IG9mZnNldEF0dHJpYnV0ZSA9PT0gLTEgPyB2b2lkIDAgOiBvZmZzZXRBdHRyaWJ1dGU7CiAgICAgICAgICByZXR1cm4gbmV3IEN5bGluZGVyT3V0bGluZUdlb21ldHJ5KHNjcmF0Y2hPcHRpb25zMTIpOwogICAgICAgIH0KICAgICAgICByZXN1bHQuX2xlbmd0aCA9IGxlbmd0aDsKICAgICAgICByZXN1bHQuX3RvcFJhZGl1cyA9IHRvcFJhZGl1czsKICAgICAgICByZXN1bHQuX2JvdHRvbVJhZGl1cyA9IGJvdHRvbVJhZGl1czsKICAgICAgICByZXN1bHQuX3NsaWNlcyA9IHNsaWNlczsKICAgICAgICByZXN1bHQuX251bWJlck9mVmVydGljYWxMaW5lcyA9IG51bWJlck9mVmVydGljYWxMaW5lczsKICAgICAgICByZXN1bHQuX29mZnNldEF0dHJpYnV0ZSA9IG9mZnNldEF0dHJpYnV0ZSA9PT0gLTEgPyB2b2lkIDAgOiBvZmZzZXRBdHRyaWJ1dGU7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ3lsaW5kZXJPdXRsaW5lR2VvbWV0cnkuY3JlYXRlR2VvbWV0cnkgPSBmdW5jdGlvbihjeWxpbmRlckdlb21ldHJ5KSB7CiAgICAgICAgbGV0IGxlbmd0aCA9IGN5bGluZGVyR2VvbWV0cnkuX2xlbmd0aDsKICAgICAgICBjb25zdCB0b3BSYWRpdXMgPSBjeWxpbmRlckdlb21ldHJ5Ll90b3BSYWRpdXM7CiAgICAgICAgY29uc3QgYm90dG9tUmFkaXVzID0gY3lsaW5kZXJHZW9tZXRyeS5fYm90dG9tUmFkaXVzOwogICAgICAgIGNvbnN0IHNsaWNlcyA9IGN5bGluZGVyR2VvbWV0cnkuX3NsaWNlczsKICAgICAgICBjb25zdCBudW1iZXJPZlZlcnRpY2FsTGluZXMgPSBjeWxpbmRlckdlb21ldHJ5Ll9udW1iZXJPZlZlcnRpY2FsTGluZXM7CiAgICAgICAgaWYgKGxlbmd0aCA8PSAwIHx8IHRvcFJhZGl1cyA8IDAgfHwgYm90dG9tUmFkaXVzIDwgMCB8fCB0b3BSYWRpdXMgPT09IDAgJiYgYm90dG9tUmFkaXVzID09PSAwKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGNvbnN0IG51bVZlcnRpY2VzID0gc2xpY2VzICogMjsKICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSBDeWxpbmRlckdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmNvbXB1dGVQb3NpdGlvbnMoCiAgICAgICAgICBsZW5ndGgsCiAgICAgICAgICB0b3BSYWRpdXMsCiAgICAgICAgICBib3R0b21SYWRpdXMsCiAgICAgICAgICBzbGljZXMsCiAgICAgICAgICBmYWxzZQogICAgICAgICk7CiAgICAgICAgbGV0IG51bUluZGljZXMgPSBzbGljZXMgKiAyOwogICAgICAgIGxldCBudW1TaWRlOwogICAgICAgIGlmIChudW1iZXJPZlZlcnRpY2FsTGluZXMgPiAwKSB7CiAgICAgICAgICBjb25zdCBudW1TaWRlTGluZXMgPSBNYXRoLm1pbihudW1iZXJPZlZlcnRpY2FsTGluZXMsIHNsaWNlcyk7CiAgICAgICAgICBudW1TaWRlID0gTWF0aC5yb3VuZChzbGljZXMgLyBudW1TaWRlTGluZXMpOwogICAgICAgICAgbnVtSW5kaWNlcyArPSBudW1TaWRlTGluZXM7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGluZGljZXMgPSBJbmRleERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheShudW1WZXJ0aWNlcywgbnVtSW5kaWNlcyAqIDIpOwogICAgICAgIGxldCBpbmRleCA9IDA7CiAgICAgICAgbGV0IGk7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IHNsaWNlcyAtIDE7IGkrKykgewogICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGk7CiAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gaSArIDE7CiAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gaSArIHNsaWNlczsKICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBpICsgMSArIHNsaWNlczsKICAgICAgICB9CiAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IHNsaWNlcyAtIDE7CiAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IDA7CiAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IHNsaWNlcyArIHNsaWNlcyAtIDE7CiAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IHNsaWNlczsKICAgICAgICBpZiAobnVtYmVyT2ZWZXJ0aWNhbExpbmVzID4gMCkgewogICAgICAgICAgZm9yIChpID0gMDsgaSA8IHNsaWNlczsgaSArPSBudW1TaWRlKSB7CiAgICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBpOwogICAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gaSArIHNsaWNlczsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZXNfZGVmYXVsdCgpOwogICAgICAgIGF0dHJpYnV0ZXMucG9zaXRpb24gPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5ET1VCTEUsCiAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgICAgdmFsdWVzOiBwb3NpdGlvbnMKICAgICAgICB9KTsKICAgICAgICByYWRpdXNTY3JhdGNoMi54ID0gbGVuZ3RoICogMC41OwogICAgICAgIHJhZGl1c1NjcmF0Y2gyLnkgPSBNYXRoLm1heChib3R0b21SYWRpdXMsIHRvcFJhZGl1cyk7CiAgICAgICAgY29uc3QgYm91bmRpbmdTcGhlcmUgPSBuZXcgQm91bmRpbmdTcGhlcmVfZGVmYXVsdCgKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5aRVJPLAogICAgICAgICAgQ2FydGVzaWFuMl9kZWZhdWx0Lm1hZ25pdHVkZShyYWRpdXNTY3JhdGNoMikKICAgICAgICApOwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoY3lsaW5kZXJHZW9tZXRyeS5fb2Zmc2V0QXR0cmlidXRlKSkgewogICAgICAgICAgbGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aDsKICAgICAgICAgIGNvbnN0IG9mZnNldFZhbHVlID0gY3lsaW5kZXJHZW9tZXRyeS5fb2Zmc2V0QXR0cmlidXRlID09PSBHZW9tZXRyeU9mZnNldEF0dHJpYnV0ZV9kZWZhdWx0Lk5PTkUgPyAwIDogMTsKICAgICAgICAgIGNvbnN0IGFwcGx5T2Zmc2V0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoIC8gMykuZmlsbChvZmZzZXRWYWx1ZSk7CiAgICAgICAgICBhdHRyaWJ1dGVzLmFwcGx5T2Zmc2V0ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5VTlNJR05FRF9CWVRFLAogICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAxLAogICAgICAgICAgICB2YWx1ZXM6IGFwcGx5T2Zmc2V0CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG5ldyBHZW9tZXRyeV9kZWZhdWx0KHsKICAgICAgICAgIGF0dHJpYnV0ZXMsCiAgICAgICAgICBpbmRpY2VzLAogICAgICAgICAgcHJpbWl0aXZlVHlwZTogUHJpbWl0aXZlVHlwZV9kZWZhdWx0LkxJTkVTLAogICAgICAgICAgYm91bmRpbmdTcGhlcmUsCiAgICAgICAgICBvZmZzZXRBdHRyaWJ1dGU6IGN5bGluZGVyR2VvbWV0cnkuX29mZnNldEF0dHJpYnV0ZQogICAgICAgIH0pOwogICAgICB9OwogICAgICBDeWxpbmRlck91dGxpbmVHZW9tZXRyeV9kZWZhdWx0ID0gQ3lsaW5kZXJPdXRsaW5lR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVDeWxpbmRlck91dGxpbmVHZW9tZXRyeS5qcwogIHZhciBjcmVhdGVDeWxpbmRlck91dGxpbmVHZW9tZXRyeV9leHBvcnRzID0ge307CiAgX19leHBvcnQoY3JlYXRlQ3lsaW5kZXJPdXRsaW5lR2VvbWV0cnlfZXhwb3J0cywgewogICAgZGVmYXVsdDogKCkgPT4gY3JlYXRlQ3lsaW5kZXJPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdAogIH0pOwogIGZ1bmN0aW9uIGNyZWF0ZUN5bGluZGVyT3V0bGluZUdlb21ldHJ5KGN5bGluZGVyR2VvbWV0cnksIG9mZnNldCkgewogICAgaWYgKGRlZmluZWRfZGVmYXVsdChvZmZzZXQpKSB7CiAgICAgIGN5bGluZGVyR2VvbWV0cnkgPSBDeWxpbmRlck91dGxpbmVHZW9tZXRyeV9kZWZhdWx0LnVucGFjayhjeWxpbmRlckdlb21ldHJ5LCBvZmZzZXQpOwogICAgfQogICAgcmV0dXJuIEN5bGluZGVyT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQuY3JlYXRlR2VvbWV0cnkoY3lsaW5kZXJHZW9tZXRyeSk7CiAgfQogIHZhciBjcmVhdGVDeWxpbmRlck91dGxpbmVHZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X2NyZWF0ZUN5bGluZGVyT3V0bGluZUdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVDeWxpbmRlck91dGxpbmVHZW9tZXRyeS5qcyIoKSB7CiAgICAgIGluaXRfQ3lsaW5kZXJPdXRsaW5lR2VvbWV0cnkoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGNyZWF0ZUN5bGluZGVyT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQgPSBjcmVhdGVDeWxpbmRlck91dGxpbmVHZW9tZXRyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZUVsbGlwc2VHZW9tZXRyeS5qcwogIHZhciBjcmVhdGVFbGxpcHNlR2VvbWV0cnlfZXhwb3J0cyA9IHt9OwogIF9fZXhwb3J0KGNyZWF0ZUVsbGlwc2VHZW9tZXRyeV9leHBvcnRzLCB7CiAgICBkZWZhdWx0OiAoKSA9PiBjcmVhdGVFbGxpcHNlR2VvbWV0cnlfZGVmYXVsdAogIH0pOwogIGZ1bmN0aW9uIGNyZWF0ZUVsbGlwc2VHZW9tZXRyeShlbGxpcHNlR2VvbWV0cnksIG9mZnNldCkgewogICAgaWYgKGRlZmluZWRfZGVmYXVsdChvZmZzZXQpKSB7CiAgICAgIGVsbGlwc2VHZW9tZXRyeSA9IEVsbGlwc2VHZW9tZXRyeV9kZWZhdWx0LnVucGFjayhlbGxpcHNlR2VvbWV0cnksIG9mZnNldCk7CiAgICB9CiAgICBlbGxpcHNlR2VvbWV0cnkuX2NlbnRlciA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShlbGxpcHNlR2VvbWV0cnkuX2NlbnRlcik7CiAgICBlbGxpcHNlR2VvbWV0cnkuX2VsbGlwc29pZCA9IEVsbGlwc29pZF9kZWZhdWx0LmNsb25lKGVsbGlwc2VHZW9tZXRyeS5fZWxsaXBzb2lkKTsKICAgIHJldHVybiBFbGxpcHNlR2VvbWV0cnlfZGVmYXVsdC5jcmVhdGVHZW9tZXRyeShlbGxpcHNlR2VvbWV0cnkpOwogIH0KICB2YXIgY3JlYXRlRWxsaXBzZUdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfY3JlYXRlRWxsaXBzZUdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVFbGxpcHNlR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRWxsaXBzZUdlb21ldHJ5KCk7CiAgICAgIGluaXRfRWxsaXBzb2lkKCk7CiAgICAgIGNyZWF0ZUVsbGlwc2VHZW9tZXRyeV9kZWZhdWx0ID0gY3JlYXRlRWxsaXBzZUdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlRWxsaXBzZU91dGxpbmVHZW9tZXRyeS5qcwogIHZhciBjcmVhdGVFbGxpcHNlT3V0bGluZUdlb21ldHJ5X2V4cG9ydHMgPSB7fTsKICBfX2V4cG9ydChjcmVhdGVFbGxpcHNlT3V0bGluZUdlb21ldHJ5X2V4cG9ydHMsIHsKICAgIGRlZmF1bHQ6ICgpID0+IGNyZWF0ZUVsbGlwc2VPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdAogIH0pOwogIGZ1bmN0aW9uIGNyZWF0ZUVsbGlwc2VPdXRsaW5lR2VvbWV0cnkoZWxsaXBzZUdlb21ldHJ5LCBvZmZzZXQpIHsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQob2Zmc2V0KSkgewogICAgICBlbGxpcHNlR2VvbWV0cnkgPSBFbGxpcHNlT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQudW5wYWNrKGVsbGlwc2VHZW9tZXRyeSwgb2Zmc2V0KTsKICAgIH0KICAgIGVsbGlwc2VHZW9tZXRyeS5fY2VudGVyID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGVsbGlwc2VHZW9tZXRyeS5fY2VudGVyKTsKICAgIGVsbGlwc2VHZW9tZXRyeS5fZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUoZWxsaXBzZUdlb21ldHJ5Ll9lbGxpcHNvaWQpOwogICAgcmV0dXJuIEVsbGlwc2VPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdC5jcmVhdGVHZW9tZXRyeShlbGxpcHNlR2VvbWV0cnkpOwogIH0KICB2YXIgY3JlYXRlRWxsaXBzZU91dGxpbmVHZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X2NyZWF0ZUVsbGlwc2VPdXRsaW5lR2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZUVsbGlwc2VPdXRsaW5lR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRWxsaXBzZU91dGxpbmVHZW9tZXRyeSgpOwogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBjcmVhdGVFbGxpcHNlT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQgPSBjcmVhdGVFbGxpcHNlT3V0bGluZUdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvRWxsaXBzb2lkR2VvbWV0cnkuanMKICBmdW5jdGlvbiBFbGxpcHNvaWRHZW9tZXRyeShvcHRpb25zKSB7CiAgICBvcHRpb25zID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucywgZGVmYXVsdFZhbHVlX2RlZmF1bHQuRU1QVFlfT0JKRUNUKTsKICAgIGNvbnN0IHJhZGlpID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5yYWRpaSwgZGVmYXVsdFJhZGlpKTsKICAgIGNvbnN0IGlubmVyUmFkaWkgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmlubmVyUmFkaWksIHJhZGlpKTsKICAgIGNvbnN0IG1pbmltdW1DbG9jayA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMubWluaW11bUNsb2NrLCAwKTsKICAgIGNvbnN0IG1heGltdW1DbG9jayA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMubWF4aW11bUNsb2NrLCBNYXRoX2RlZmF1bHQuVFdPX1BJKTsKICAgIGNvbnN0IG1pbmltdW1Db25lID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5taW5pbXVtQ29uZSwgMCk7CiAgICBjb25zdCBtYXhpbXVtQ29uZSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMubWF4aW11bUNvbmUsIE1hdGhfZGVmYXVsdC5QSSk7CiAgICBjb25zdCBzdGFja1BhcnRpdGlvbnMgPSBNYXRoLnJvdW5kKGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuc3RhY2tQYXJ0aXRpb25zLCA2NCkpOwogICAgY29uc3Qgc2xpY2VQYXJ0aXRpb25zID0gTWF0aC5yb3VuZChkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLnNsaWNlUGFydGl0aW9ucywgNjQpKTsKICAgIGNvbnN0IHZlcnRleEZvcm1hdCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMudmVydGV4Rm9ybWF0LCBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5ERUZBVUxUKTsKICAgIGlmIChzbGljZVBhcnRpdGlvbnMgPCAzKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICJvcHRpb25zLnNsaWNlUGFydGl0aW9ucyBjYW5ub3QgYmUgbGVzcyB0aGFuIHRocmVlLiIKICAgICAgKTsKICAgIH0KICAgIGlmIChzdGFja1BhcnRpdGlvbnMgPCAzKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICJvcHRpb25zLnN0YWNrUGFydGl0aW9ucyBjYW5ub3QgYmUgbGVzcyB0aGFuIHRocmVlLiIKICAgICAgKTsKICAgIH0KICAgIHRoaXMuX3JhZGlpID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKHJhZGlpKTsKICAgIHRoaXMuX2lubmVyUmFkaWkgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoaW5uZXJSYWRpaSk7CiAgICB0aGlzLl9taW5pbXVtQ2xvY2sgPSBtaW5pbXVtQ2xvY2s7CiAgICB0aGlzLl9tYXhpbXVtQ2xvY2sgPSBtYXhpbXVtQ2xvY2s7CiAgICB0aGlzLl9taW5pbXVtQ29uZSA9IG1pbmltdW1Db25lOwogICAgdGhpcy5fbWF4aW11bUNvbmUgPSBtYXhpbXVtQ29uZTsKICAgIHRoaXMuX3N0YWNrUGFydGl0aW9ucyA9IHN0YWNrUGFydGl0aW9uczsKICAgIHRoaXMuX3NsaWNlUGFydGl0aW9ucyA9IHNsaWNlUGFydGl0aW9uczsKICAgIHRoaXMuX3ZlcnRleEZvcm1hdCA9IFZlcnRleEZvcm1hdF9kZWZhdWx0LmNsb25lKHZlcnRleEZvcm1hdCk7CiAgICB0aGlzLl9vZmZzZXRBdHRyaWJ1dGUgPSBvcHRpb25zLm9mZnNldEF0dHJpYnV0ZTsKICAgIHRoaXMuX3dvcmtlck5hbWUgPSAiY3JlYXRlRWxsaXBzb2lkR2VvbWV0cnkiOwogIH0KICB2YXIgc2NyYXRjaFBvc2l0aW9uMiwgc2NyYXRjaE5vcm1hbDUsIHNjcmF0Y2hUYW5nZW50Mywgc2NyYXRjaEJpdGFuZ2VudDMsIHNjcmF0Y2hOb3JtYWxTVCwgZGVmYXVsdFJhZGlpLCBjb3MsIHNpbiwgc2NyYXRjaFJhZGlpLCBzY3JhdGNoSW5uZXJSYWRpaSwgc2NyYXRjaFZlcnRleEZvcm1hdDYsIHNjcmF0Y2hPcHRpb25zMTMsIHVuaXRFbGxpcHNvaWRHZW9tZXRyeSwgRWxsaXBzb2lkR2VvbWV0cnlfZGVmYXVsdDsKICB2YXIgaW5pdF9FbGxpcHNvaWRHZW9tZXRyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvRWxsaXBzb2lkR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X0JvdW5kaW5nU3BoZXJlKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMigpOwogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9Db21wb25lbnREYXRhdHlwZSgpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBpbml0X0dlb21ldHJ5KCk7CiAgICAgIGluaXRfR2VvbWV0cnlBdHRyaWJ1dGUoKTsKICAgICAgaW5pdF9HZW9tZXRyeUF0dHJpYnV0ZXMoKTsKICAgICAgaW5pdF9HZW9tZXRyeU9mZnNldEF0dHJpYnV0ZSgpOwogICAgICBpbml0X0luZGV4RGF0YXR5cGUoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIGluaXRfUHJpbWl0aXZlVHlwZSgpOwogICAgICBpbml0X1ZlcnRleEZvcm1hdCgpOwogICAgICBzY3JhdGNoUG9zaXRpb24yID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoTm9ybWFsNSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFRhbmdlbnQzID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQml0YW5nZW50MyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaE5vcm1hbFNUID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBkZWZhdWx0UmFkaWkgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KDEsIDEsIDEpOwogICAgICBjb3MgPSBNYXRoLmNvczsKICAgICAgc2luID0gTWF0aC5zaW47CiAgICAgIEVsbGlwc29pZEdlb21ldHJ5LnBhY2tlZExlbmd0aCA9IDIgKiBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoICsgVmVydGV4Rm9ybWF0X2RlZmF1bHQucGFja2VkTGVuZ3RoICsgNzsKICAgICAgRWxsaXBzb2lkR2VvbWV0cnkucGFjayA9IGZ1bmN0aW9uKHZhbHVlLCBhcnJheSwgc3RhcnRpbmdJbmRleCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHZhbHVlKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInZhbHVlIGlzIHJlcXVpcmVkIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGFycmF5KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImFycmF5IGlzIHJlcXVpcmVkIik7CiAgICAgICAgfQogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayh2YWx1ZS5fcmFkaWksIGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2sodmFsdWUuX2lubmVyUmFkaWksIGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgVmVydGV4Rm9ybWF0X2RlZmF1bHQucGFjayh2YWx1ZS5fdmVydGV4Rm9ybWF0LCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9taW5pbXVtQ2xvY2s7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9tYXhpbXVtQ2xvY2s7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9taW5pbXVtQ29uZTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX21heGltdW1Db25lOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fc3RhY2tQYXJ0aXRpb25zOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fc2xpY2VQYXJ0aXRpb25zOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXhdID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQodmFsdWUuX29mZnNldEF0dHJpYnV0ZSwgLTEpOwogICAgICAgIHJldHVybiBhcnJheTsKICAgICAgfTsKICAgICAgc2NyYXRjaFJhZGlpID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoSW5uZXJSYWRpaSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFZlcnRleEZvcm1hdDYgPSBuZXcgVmVydGV4Rm9ybWF0X2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaE9wdGlvbnMxMyA9IHsKICAgICAgICByYWRpaTogc2NyYXRjaFJhZGlpLAogICAgICAgIGlubmVyUmFkaWk6IHNjcmF0Y2hJbm5lclJhZGlpLAogICAgICAgIHZlcnRleEZvcm1hdDogc2NyYXRjaFZlcnRleEZvcm1hdDYsCiAgICAgICAgbWluaW11bUNsb2NrOiB2b2lkIDAsCiAgICAgICAgbWF4aW11bUNsb2NrOiB2b2lkIDAsCiAgICAgICAgbWluaW11bUNvbmU6IHZvaWQgMCwKICAgICAgICBtYXhpbXVtQ29uZTogdm9pZCAwLAogICAgICAgIHN0YWNrUGFydGl0aW9uczogdm9pZCAwLAogICAgICAgIHNsaWNlUGFydGl0aW9uczogdm9pZCAwLAogICAgICAgIG9mZnNldEF0dHJpYnV0ZTogdm9pZCAwCiAgICAgIH07CiAgICAgIEVsbGlwc29pZEdlb21ldHJ5LnVucGFjayA9IGZ1bmN0aW9uKGFycmF5LCBzdGFydGluZ0luZGV4LCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChhcnJheSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJhcnJheSBpcyByZXF1aXJlZCIpOwogICAgICAgIH0KICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgY29uc3QgcmFkaWkgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKGFycmF5LCBzdGFydGluZ0luZGV4LCBzY3JhdGNoUmFkaWkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gQ2FydGVzaWFuM19kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBjb25zdCBpbm5lclJhZGlpID0gQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjayhhcnJheSwgc3RhcnRpbmdJbmRleCwgc2NyYXRjaElubmVyUmFkaWkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gQ2FydGVzaWFuM19kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBjb25zdCB2ZXJ0ZXhGb3JtYXQgPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC51bnBhY2soCiAgICAgICAgICBhcnJheSwKICAgICAgICAgIHN0YXJ0aW5nSW5kZXgsCiAgICAgICAgICBzY3JhdGNoVmVydGV4Rm9ybWF0NgogICAgICAgICk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgY29uc3QgbWluaW11bUNsb2NrID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBtYXhpbXVtQ2xvY2sgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IG1pbmltdW1Db25lID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBtYXhpbXVtQ29uZSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3Qgc3RhY2tQYXJ0aXRpb25zID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBzbGljZVBhcnRpdGlvbnMgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IG9mZnNldEF0dHJpYnV0ZSA9IGFycmF5W3N0YXJ0aW5nSW5kZXhdOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMTMubWluaW11bUNsb2NrID0gbWluaW11bUNsb2NrOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMxMy5tYXhpbXVtQ2xvY2sgPSBtYXhpbXVtQ2xvY2s7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczEzLm1pbmltdW1Db25lID0gbWluaW11bUNvbmU7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczEzLm1heGltdW1Db25lID0gbWF4aW11bUNvbmU7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczEzLnN0YWNrUGFydGl0aW9ucyA9IHN0YWNrUGFydGl0aW9uczsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMTMuc2xpY2VQYXJ0aXRpb25zID0gc2xpY2VQYXJ0aXRpb25zOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMxMy5vZmZzZXRBdHRyaWJ1dGUgPSBvZmZzZXRBdHRyaWJ1dGUgPT09IC0xID8gdm9pZCAwIDogb2Zmc2V0QXR0cmlidXRlOwogICAgICAgICAgcmV0dXJuIG5ldyBFbGxpcHNvaWRHZW9tZXRyeShzY3JhdGNoT3B0aW9uczEzKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0Ll9yYWRpaSA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShyYWRpaSwgcmVzdWx0Ll9yYWRpaSk7CiAgICAgICAgcmVzdWx0Ll9pbm5lclJhZGlpID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGlubmVyUmFkaWksIHJlc3VsdC5faW5uZXJSYWRpaSk7CiAgICAgICAgcmVzdWx0Ll92ZXJ0ZXhGb3JtYXQgPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5jbG9uZSh2ZXJ0ZXhGb3JtYXQsIHJlc3VsdC5fdmVydGV4Rm9ybWF0KTsKICAgICAgICByZXN1bHQuX21pbmltdW1DbG9jayA9IG1pbmltdW1DbG9jazsKICAgICAgICByZXN1bHQuX21heGltdW1DbG9jayA9IG1heGltdW1DbG9jazsKICAgICAgICByZXN1bHQuX21pbmltdW1Db25lID0gbWluaW11bUNvbmU7CiAgICAgICAgcmVzdWx0Ll9tYXhpbXVtQ29uZSA9IG1heGltdW1Db25lOwogICAgICAgIHJlc3VsdC5fc3RhY2tQYXJ0aXRpb25zID0gc3RhY2tQYXJ0aXRpb25zOwogICAgICAgIHJlc3VsdC5fc2xpY2VQYXJ0aXRpb25zID0gc2xpY2VQYXJ0aXRpb25zOwogICAgICAgIHJlc3VsdC5fb2Zmc2V0QXR0cmlidXRlID0gb2Zmc2V0QXR0cmlidXRlID09PSAtMSA/IHZvaWQgMCA6IG9mZnNldEF0dHJpYnV0ZTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBFbGxpcHNvaWRHZW9tZXRyeS5jcmVhdGVHZW9tZXRyeSA9IGZ1bmN0aW9uKGVsbGlwc29pZEdlb21ldHJ5KSB7CiAgICAgICAgY29uc3QgcmFkaWkgPSBlbGxpcHNvaWRHZW9tZXRyeS5fcmFkaWk7CiAgICAgICAgaWYgKHJhZGlpLnggPD0gMCB8fCByYWRpaS55IDw9IDAgfHwgcmFkaWkueiA8PSAwKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGNvbnN0IGlubmVyUmFkaWkgPSBlbGxpcHNvaWRHZW9tZXRyeS5faW5uZXJSYWRpaTsKICAgICAgICBpZiAoaW5uZXJSYWRpaS54IDw9IDAgfHwgaW5uZXJSYWRpaS55IDw9IDAgfHwgaW5uZXJSYWRpaS56IDw9IDApIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgY29uc3QgbWluaW11bUNsb2NrID0gZWxsaXBzb2lkR2VvbWV0cnkuX21pbmltdW1DbG9jazsKICAgICAgICBjb25zdCBtYXhpbXVtQ2xvY2sgPSBlbGxpcHNvaWRHZW9tZXRyeS5fbWF4aW11bUNsb2NrOwogICAgICAgIGNvbnN0IG1pbmltdW1Db25lID0gZWxsaXBzb2lkR2VvbWV0cnkuX21pbmltdW1Db25lOwogICAgICAgIGNvbnN0IG1heGltdW1Db25lID0gZWxsaXBzb2lkR2VvbWV0cnkuX21heGltdW1Db25lOwogICAgICAgIGNvbnN0IHZlcnRleEZvcm1hdCA9IGVsbGlwc29pZEdlb21ldHJ5Ll92ZXJ0ZXhGb3JtYXQ7CiAgICAgICAgbGV0IHNsaWNlUGFydGl0aW9ucyA9IGVsbGlwc29pZEdlb21ldHJ5Ll9zbGljZVBhcnRpdGlvbnMgKyAxOwogICAgICAgIGxldCBzdGFja1BhcnRpdGlvbnMgPSBlbGxpcHNvaWRHZW9tZXRyeS5fc3RhY2tQYXJ0aXRpb25zICsgMTsKICAgICAgICBzbGljZVBhcnRpdGlvbnMgPSBNYXRoLnJvdW5kKAogICAgICAgICAgc2xpY2VQYXJ0aXRpb25zICogTWF0aC5hYnMobWF4aW11bUNsb2NrIC0gbWluaW11bUNsb2NrKSAvIE1hdGhfZGVmYXVsdC5UV09fUEkKICAgICAgICApOwogICAgICAgIHN0YWNrUGFydGl0aW9ucyA9IE1hdGgucm91bmQoCiAgICAgICAgICBzdGFja1BhcnRpdGlvbnMgKiBNYXRoLmFicyhtYXhpbXVtQ29uZSAtIG1pbmltdW1Db25lKSAvIE1hdGhfZGVmYXVsdC5QSQogICAgICAgICk7CiAgICAgICAgaWYgKHNsaWNlUGFydGl0aW9ucyA8IDIpIHsKICAgICAgICAgIHNsaWNlUGFydGl0aW9ucyA9IDI7CiAgICAgICAgfQogICAgICAgIGlmIChzdGFja1BhcnRpdGlvbnMgPCAyKSB7CiAgICAgICAgICBzdGFja1BhcnRpdGlvbnMgPSAyOwogICAgICAgIH0KICAgICAgICBsZXQgaTsKICAgICAgICBsZXQgajsKICAgICAgICBsZXQgaW5kZXggPSAwOwogICAgICAgIGNvbnN0IHBoaXMgPSBbbWluaW11bUNvbmVdOwogICAgICAgIGNvbnN0IHRoZXRhcyA9IFttaW5pbXVtQ2xvY2tdOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBzdGFja1BhcnRpdGlvbnM7IGkrKykgewogICAgICAgICAgcGhpcy5wdXNoKAogICAgICAgICAgICBtaW5pbXVtQ29uZSArIGkgKiAobWF4aW11bUNvbmUgLSBtaW5pbXVtQ29uZSkgLyAoc3RhY2tQYXJ0aXRpb25zIC0gMSkKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIHBoaXMucHVzaChtYXhpbXVtQ29uZSk7CiAgICAgICAgZm9yIChqID0gMDsgaiA8IHNsaWNlUGFydGl0aW9uczsgaisrKSB7CiAgICAgICAgICB0aGV0YXMucHVzaCgKICAgICAgICAgICAgbWluaW11bUNsb2NrICsgaiAqIChtYXhpbXVtQ2xvY2sgLSBtaW5pbXVtQ2xvY2spIC8gKHNsaWNlUGFydGl0aW9ucyAtIDEpCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICB0aGV0YXMucHVzaChtYXhpbXVtQ2xvY2spOwogICAgICAgIGNvbnN0IG51bVBoaXMgPSBwaGlzLmxlbmd0aDsKICAgICAgICBjb25zdCBudW1UaGV0YXMgPSB0aGV0YXMubGVuZ3RoOwogICAgICAgIGxldCBleHRyYUluZGljZXMgPSAwOwogICAgICAgIGxldCB2ZXJ0ZXhNdWx0aXBsaWVyID0gMTsKICAgICAgICBjb25zdCBoYXNJbm5lclN1cmZhY2UgPSBpbm5lclJhZGlpLnggIT09IHJhZGlpLnggfHwgaW5uZXJSYWRpaS55ICE9PSByYWRpaS55IHx8IGlubmVyUmFkaWkueiAhPT0gcmFkaWkuejsKICAgICAgICBsZXQgaXNUb3BPcGVuID0gZmFsc2U7CiAgICAgICAgbGV0IGlzQm90T3BlbiA9IGZhbHNlOwogICAgICAgIGxldCBpc0Nsb2NrT3BlbiA9IGZhbHNlOwogICAgICAgIGlmIChoYXNJbm5lclN1cmZhY2UpIHsKICAgICAgICAgIHZlcnRleE11bHRpcGxpZXIgPSAyOwogICAgICAgICAgaWYgKG1pbmltdW1Db25lID4gMCkgewogICAgICAgICAgICBpc1RvcE9wZW4gPSB0cnVlOwogICAgICAgICAgICBleHRyYUluZGljZXMgKz0gc2xpY2VQYXJ0aXRpb25zIC0gMTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChtYXhpbXVtQ29uZSA8IE1hdGguUEkpIHsKICAgICAgICAgICAgaXNCb3RPcGVuID0gdHJ1ZTsKICAgICAgICAgICAgZXh0cmFJbmRpY2VzICs9IHNsaWNlUGFydGl0aW9ucyAtIDE7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoKG1heGltdW1DbG9jayAtIG1pbmltdW1DbG9jaykgJSBNYXRoX2RlZmF1bHQuVFdPX1BJKSB7CiAgICAgICAgICAgIGlzQ2xvY2tPcGVuID0gdHJ1ZTsKICAgICAgICAgICAgZXh0cmFJbmRpY2VzICs9IChzdGFja1BhcnRpdGlvbnMgLSAxKSAqIDIgKyAxOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZXh0cmFJbmRpY2VzICs9IDE7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNvbnN0IHZlcnRleENvdW50ID0gbnVtVGhldGFzICogbnVtUGhpcyAqIHZlcnRleE11bHRpcGxpZXI7CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gbmV3IEZsb2F0NjRBcnJheSh2ZXJ0ZXhDb3VudCAqIDMpOwogICAgICAgIGNvbnN0IGlzSW5uZXIgPSBuZXcgQXJyYXkodmVydGV4Q291bnQpLmZpbGwoZmFsc2UpOwogICAgICAgIGNvbnN0IG5lZ2F0ZU5vcm1hbCA9IG5ldyBBcnJheSh2ZXJ0ZXhDb3VudCkuZmlsbChmYWxzZSk7CiAgICAgICAgY29uc3QgaW5kZXhDb3VudCA9IHNsaWNlUGFydGl0aW9ucyAqIHN0YWNrUGFydGl0aW9ucyAqIHZlcnRleE11bHRpcGxpZXI7CiAgICAgICAgY29uc3QgbnVtSW5kaWNlcyA9IDYgKiAoaW5kZXhDb3VudCArIGV4dHJhSW5kaWNlcyArIDEgLSAoc2xpY2VQYXJ0aXRpb25zICsgc3RhY2tQYXJ0aXRpb25zKSAqIHZlcnRleE11bHRpcGxpZXIpOwogICAgICAgIGNvbnN0IGluZGljZXMgPSBJbmRleERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheShpbmRleENvdW50LCBudW1JbmRpY2VzKTsKICAgICAgICBjb25zdCBub3JtYWxzID0gdmVydGV4Rm9ybWF0Lm5vcm1hbCA/IG5ldyBGbG9hdDMyQXJyYXkodmVydGV4Q291bnQgKiAzKSA6IHZvaWQgMDsKICAgICAgICBjb25zdCB0YW5nZW50cyA9IHZlcnRleEZvcm1hdC50YW5nZW50ID8gbmV3IEZsb2F0MzJBcnJheSh2ZXJ0ZXhDb3VudCAqIDMpIDogdm9pZCAwOwogICAgICAgIGNvbnN0IGJpdGFuZ2VudHMgPSB2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50ID8gbmV3IEZsb2F0MzJBcnJheSh2ZXJ0ZXhDb3VudCAqIDMpIDogdm9pZCAwOwogICAgICAgIGNvbnN0IHN0ID0gdmVydGV4Rm9ybWF0LnN0ID8gbmV3IEZsb2F0MzJBcnJheSh2ZXJ0ZXhDb3VudCAqIDIpIDogdm9pZCAwOwogICAgICAgIGNvbnN0IHNpblBoaSA9IG5ldyBBcnJheShudW1QaGlzKTsKICAgICAgICBjb25zdCBjb3NQaGkgPSBuZXcgQXJyYXkobnVtUGhpcyk7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IG51bVBoaXM7IGkrKykgewogICAgICAgICAgc2luUGhpW2ldID0gc2luKHBoaXNbaV0pOwogICAgICAgICAgY29zUGhpW2ldID0gY29zKHBoaXNbaV0pOwogICAgICAgIH0KICAgICAgICBjb25zdCBzaW5UaGV0YSA9IG5ldyBBcnJheShudW1UaGV0YXMpOwogICAgICAgIGNvbnN0IGNvc1RoZXRhID0gbmV3IEFycmF5KG51bVRoZXRhcyk7CiAgICAgICAgZm9yIChqID0gMDsgaiA8IG51bVRoZXRhczsgaisrKSB7CiAgICAgICAgICBjb3NUaGV0YVtqXSA9IGNvcyh0aGV0YXNbal0pOwogICAgICAgICAgc2luVGhldGFbal0gPSBzaW4odGhldGFzW2pdKTsKICAgICAgICB9CiAgICAgICAgZm9yIChpID0gMDsgaSA8IG51bVBoaXM7IGkrKykgewogICAgICAgICAgZm9yIChqID0gMDsgaiA8IG51bVRoZXRhczsgaisrKSB7CiAgICAgICAgICAgIHBvc2l0aW9uc1tpbmRleCsrXSA9IHJhZGlpLnggKiBzaW5QaGlbaV0gKiBjb3NUaGV0YVtqXTsKICAgICAgICAgICAgcG9zaXRpb25zW2luZGV4KytdID0gcmFkaWkueSAqIHNpblBoaVtpXSAqIHNpblRoZXRhW2pdOwogICAgICAgICAgICBwb3NpdGlvbnNbaW5kZXgrK10gPSByYWRpaS56ICogY29zUGhpW2ldOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBsZXQgdmVydGV4SW5kZXggPSB2ZXJ0ZXhDb3VudCAvIDI7CiAgICAgICAgaWYgKGhhc0lubmVyU3VyZmFjZSkgewogICAgICAgICAgZm9yIChpID0gMDsgaSA8IG51bVBoaXM7IGkrKykgewogICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgbnVtVGhldGFzOyBqKyspIHsKICAgICAgICAgICAgICBwb3NpdGlvbnNbaW5kZXgrK10gPSBpbm5lclJhZGlpLnggKiBzaW5QaGlbaV0gKiBjb3NUaGV0YVtqXTsKICAgICAgICAgICAgICBwb3NpdGlvbnNbaW5kZXgrK10gPSBpbm5lclJhZGlpLnkgKiBzaW5QaGlbaV0gKiBzaW5UaGV0YVtqXTsKICAgICAgICAgICAgICBwb3NpdGlvbnNbaW5kZXgrK10gPSBpbm5lclJhZGlpLnogKiBjb3NQaGlbaV07CiAgICAgICAgICAgICAgaXNJbm5lclt2ZXJ0ZXhJbmRleF0gPSB0cnVlOwogICAgICAgICAgICAgIGlmIChpID4gMCAmJiBpICE9PSBudW1QaGlzIC0gMSAmJiBqICE9PSAwICYmIGogIT09IG51bVRoZXRhcyAtIDEpIHsKICAgICAgICAgICAgICAgIG5lZ2F0ZU5vcm1hbFt2ZXJ0ZXhJbmRleF0gPSB0cnVlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB2ZXJ0ZXhJbmRleCsrOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGluZGV4ID0gMDsKICAgICAgICBsZXQgdG9wT2Zmc2V0OwogICAgICAgIGxldCBib3R0b21PZmZzZXQ7CiAgICAgICAgZm9yIChpID0gMTsgaSA8IG51bVBoaXMgLSAyOyBpKyspIHsKICAgICAgICAgIHRvcE9mZnNldCA9IGkgKiBudW1UaGV0YXM7CiAgICAgICAgICBib3R0b21PZmZzZXQgPSAoaSArIDEpICogbnVtVGhldGFzOwogICAgICAgICAgZm9yIChqID0gMTsgaiA8IG51bVRoZXRhcyAtIDI7IGorKykgewogICAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gYm90dG9tT2Zmc2V0ICsgajsKICAgICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGJvdHRvbU9mZnNldCArIGogKyAxOwogICAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gdG9wT2Zmc2V0ICsgaiArIDE7CiAgICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBib3R0b21PZmZzZXQgKyBqOwogICAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gdG9wT2Zmc2V0ICsgaiArIDE7CiAgICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSB0b3BPZmZzZXQgKyBqOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoaGFzSW5uZXJTdXJmYWNlKSB7CiAgICAgICAgICBjb25zdCBvZmZzZXQgPSBudW1QaGlzICogbnVtVGhldGFzOwogICAgICAgICAgZm9yIChpID0gMTsgaSA8IG51bVBoaXMgLSAyOyBpKyspIHsKICAgICAgICAgICAgdG9wT2Zmc2V0ID0gb2Zmc2V0ICsgaSAqIG51bVRoZXRhczsKICAgICAgICAgICAgYm90dG9tT2Zmc2V0ID0gb2Zmc2V0ICsgKGkgKyAxKSAqIG51bVRoZXRhczsKICAgICAgICAgICAgZm9yIChqID0gMTsgaiA8IG51bVRoZXRhcyAtIDI7IGorKykgewogICAgICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBib3R0b21PZmZzZXQgKyBqOwogICAgICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSB0b3BPZmZzZXQgKyBqOwogICAgICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSB0b3BPZmZzZXQgKyBqICsgMTsKICAgICAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gYm90dG9tT2Zmc2V0ICsgajsKICAgICAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gdG9wT2Zmc2V0ICsgaiArIDE7CiAgICAgICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGJvdHRvbU9mZnNldCArIGogKyAxOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGxldCBvdXRlck9mZnNldDsKICAgICAgICBsZXQgaW5uZXJPZmZzZXQ7CiAgICAgICAgaWYgKGhhc0lubmVyU3VyZmFjZSkgewogICAgICAgICAgaWYgKGlzVG9wT3BlbikgewogICAgICAgICAgICBpbm5lck9mZnNldCA9IG51bVBoaXMgKiBudW1UaGV0YXM7CiAgICAgICAgICAgIGZvciAoaSA9IDE7IGkgPCBudW1UaGV0YXMgLSAyOyBpKyspIHsKICAgICAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gaTsKICAgICAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gaSArIDE7CiAgICAgICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGlubmVyT2Zmc2V0ICsgaSArIDE7CiAgICAgICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGk7CiAgICAgICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGlubmVyT2Zmc2V0ICsgaSArIDE7CiAgICAgICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGlubmVyT2Zmc2V0ICsgaTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgaWYgKGlzQm90T3BlbikgewogICAgICAgICAgICBvdXRlck9mZnNldCA9IG51bVBoaXMgKiBudW1UaGV0YXMgLSBudW1UaGV0YXM7CiAgICAgICAgICAgIGlubmVyT2Zmc2V0ID0gbnVtUGhpcyAqIG51bVRoZXRhcyAqIHZlcnRleE11bHRpcGxpZXIgLSBudW1UaGV0YXM7CiAgICAgICAgICAgIGZvciAoaSA9IDE7IGkgPCBudW1UaGV0YXMgLSAyOyBpKyspIHsKICAgICAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gb3V0ZXJPZmZzZXQgKyBpICsgMTsKICAgICAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gb3V0ZXJPZmZzZXQgKyBpOwogICAgICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBpbm5lck9mZnNldCArIGk7CiAgICAgICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IG91dGVyT2Zmc2V0ICsgaSArIDE7CiAgICAgICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGlubmVyT2Zmc2V0ICsgaTsKICAgICAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gaW5uZXJPZmZzZXQgKyBpICsgMTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoaXNDbG9ja09wZW4pIHsKICAgICAgICAgIGZvciAoaSA9IDE7IGkgPCBudW1QaGlzIC0gMjsgaSsrKSB7CiAgICAgICAgICAgIGlubmVyT2Zmc2V0ID0gbnVtVGhldGFzICogbnVtUGhpcyArIG51bVRoZXRhcyAqIGk7CiAgICAgICAgICAgIG91dGVyT2Zmc2V0ID0gbnVtVGhldGFzICogaTsKICAgICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGlubmVyT2Zmc2V0OwogICAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gb3V0ZXJPZmZzZXQgKyBudW1UaGV0YXM7CiAgICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBvdXRlck9mZnNldDsKICAgICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGlubmVyT2Zmc2V0OwogICAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gaW5uZXJPZmZzZXQgKyBudW1UaGV0YXM7CiAgICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBvdXRlck9mZnNldCArIG51bVRoZXRhczsKICAgICAgICAgIH0KICAgICAgICAgIGZvciAoaSA9IDE7IGkgPCBudW1QaGlzIC0gMjsgaSsrKSB7CiAgICAgICAgICAgIGlubmVyT2Zmc2V0ID0gbnVtVGhldGFzICogbnVtUGhpcyArIG51bVRoZXRhcyAqIChpICsgMSkgLSAxOwogICAgICAgICAgICBvdXRlck9mZnNldCA9IG51bVRoZXRhcyAqIChpICsgMSkgLSAxOwogICAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gb3V0ZXJPZmZzZXQgKyBudW1UaGV0YXM7CiAgICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBpbm5lck9mZnNldDsKICAgICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IG91dGVyT2Zmc2V0OwogICAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gb3V0ZXJPZmZzZXQgKyBudW1UaGV0YXM7CiAgICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBpbm5lck9mZnNldCArIG51bVRoZXRhczsKICAgICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGlubmVyT2Zmc2V0OwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlc19kZWZhdWx0KCk7CiAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5wb3NpdGlvbikgewogICAgICAgICAgYXR0cmlidXRlcy5wb3NpdGlvbiA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRE9VQkxFLAogICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgICAgICB2YWx1ZXM6IHBvc2l0aW9ucwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIGxldCBzdEluZGV4ID0gMDsKICAgICAgICBsZXQgbm9ybWFsSW5kZXggPSAwOwogICAgICAgIGxldCB0YW5nZW50SW5kZXggPSAwOwogICAgICAgIGxldCBiaXRhbmdlbnRJbmRleCA9IDA7CiAgICAgICAgY29uc3QgdmVydGV4Q291bnRIYWxmID0gdmVydGV4Q291bnQgLyAyOwogICAgICAgIGxldCBlbGxpcHNvaWQ7CiAgICAgICAgY29uc3QgZWxsaXBzb2lkT3V0ZXIgPSBFbGxpcHNvaWRfZGVmYXVsdC5mcm9tQ2FydGVzaWFuMyhyYWRpaSk7CiAgICAgICAgY29uc3QgZWxsaXBzb2lkSW5uZXIgPSBFbGxpcHNvaWRfZGVmYXVsdC5mcm9tQ2FydGVzaWFuMyhpbm5lclJhZGlpKTsKICAgICAgICBpZiAodmVydGV4Rm9ybWF0LnN0IHx8IHZlcnRleEZvcm1hdC5ub3JtYWwgfHwgdmVydGV4Rm9ybWF0LnRhbmdlbnQgfHwgdmVydGV4Rm9ybWF0LmJpdGFuZ2VudCkgewogICAgICAgICAgZm9yIChpID0gMDsgaSA8IHZlcnRleENvdW50OyBpKyspIHsKICAgICAgICAgICAgZWxsaXBzb2lkID0gaXNJbm5lcltpXSA/IGVsbGlwc29pZElubmVyIDogZWxsaXBzb2lkT3V0ZXI7CiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShwb3NpdGlvbnMsIGkgKiAzLCBzY3JhdGNoUG9zaXRpb24yKTsKICAgICAgICAgICAgY29uc3Qgbm9ybWFsMiA9IGVsbGlwc29pZC5nZW9kZXRpY1N1cmZhY2VOb3JtYWwocG9zaXRpb24sIHNjcmF0Y2hOb3JtYWw1KTsKICAgICAgICAgICAgaWYgKG5lZ2F0ZU5vcm1hbFtpXSkgewogICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5uZWdhdGUobm9ybWFsMiwgbm9ybWFsMik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5zdCkgewogICAgICAgICAgICAgIGNvbnN0IG5vcm1hbFNUID0gQ2FydGVzaWFuMl9kZWZhdWx0Lm5lZ2F0ZShub3JtYWwyLCBzY3JhdGNoTm9ybWFsU1QpOwogICAgICAgICAgICAgIHN0W3N0SW5kZXgrK10gPSBNYXRoLmF0YW4yKG5vcm1hbFNULnksIG5vcm1hbFNULngpIC8gTWF0aF9kZWZhdWx0LlRXT19QSSArIDAuNTsKICAgICAgICAgICAgICBzdFtzdEluZGV4KytdID0gTWF0aC5hc2luKG5vcm1hbDIueikgLyBNYXRoLlBJICsgMC41OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQubm9ybWFsKSB7CiAgICAgICAgICAgICAgbm9ybWFsc1tub3JtYWxJbmRleCsrXSA9IG5vcm1hbDIueDsKICAgICAgICAgICAgICBub3JtYWxzW25vcm1hbEluZGV4KytdID0gbm9ybWFsMi55OwogICAgICAgICAgICAgIG5vcm1hbHNbbm9ybWFsSW5kZXgrK10gPSBub3JtYWwyLno7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHZlcnRleEZvcm1hdC50YW5nZW50IHx8IHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpIHsKICAgICAgICAgICAgICBjb25zdCB0YW5nZW50ID0gc2NyYXRjaFRhbmdlbnQzOwogICAgICAgICAgICAgIGxldCB0YW5nZXRPZmZzZXQgPSAwOwogICAgICAgICAgICAgIGxldCB1bml0OwogICAgICAgICAgICAgIGlmIChpc0lubmVyW2ldKSB7CiAgICAgICAgICAgICAgICB0YW5nZXRPZmZzZXQgPSB2ZXJ0ZXhDb3VudEhhbGY7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmICghaXNUb3BPcGVuICYmIGkgPj0gdGFuZ2V0T2Zmc2V0ICYmIGkgPCB0YW5nZXRPZmZzZXQgKyBudW1UaGV0YXMgKiAyKSB7CiAgICAgICAgICAgICAgICB1bml0ID0gQ2FydGVzaWFuM19kZWZhdWx0LlVOSVRfWDsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdW5pdCA9IENhcnRlc2lhbjNfZGVmYXVsdC5VTklUX1o7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyh1bml0LCBub3JtYWwyLCB0YW5nZW50KTsKICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKHRhbmdlbnQsIHRhbmdlbnQpOwogICAgICAgICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQudGFuZ2VudCkgewogICAgICAgICAgICAgICAgdGFuZ2VudHNbdGFuZ2VudEluZGV4KytdID0gdGFuZ2VudC54OwogICAgICAgICAgICAgICAgdGFuZ2VudHNbdGFuZ2VudEluZGV4KytdID0gdGFuZ2VudC55OwogICAgICAgICAgICAgICAgdGFuZ2VudHNbdGFuZ2VudEluZGV4KytdID0gdGFuZ2VudC56OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAodmVydGV4Rm9ybWF0LmJpdGFuZ2VudCkgewogICAgICAgICAgICAgICAgY29uc3QgYml0YW5nZW50ID0gQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKG5vcm1hbDIsIHRhbmdlbnQsIHNjcmF0Y2hCaXRhbmdlbnQzKTsKICAgICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoYml0YW5nZW50LCBiaXRhbmdlbnQpOwogICAgICAgICAgICAgICAgYml0YW5nZW50c1tiaXRhbmdlbnRJbmRleCsrXSA9IGJpdGFuZ2VudC54OwogICAgICAgICAgICAgICAgYml0YW5nZW50c1tiaXRhbmdlbnRJbmRleCsrXSA9IGJpdGFuZ2VudC55OwogICAgICAgICAgICAgICAgYml0YW5nZW50c1tiaXRhbmdlbnRJbmRleCsrXSA9IGJpdGFuZ2VudC56OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5zdCkgewogICAgICAgICAgICBhdHRyaWJ1dGVzLnN0ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkZMT0FULAogICAgICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDIsCiAgICAgICAgICAgICAgdmFsdWVzOiBzdAogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQubm9ybWFsKSB7CiAgICAgICAgICAgIGF0dHJpYnV0ZXMubm9ybWFsID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkZMT0FULAogICAgICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgICAgICAgdmFsdWVzOiBub3JtYWxzCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHZlcnRleEZvcm1hdC50YW5nZW50KSB7CiAgICAgICAgICAgIGF0dHJpYnV0ZXMudGFuZ2VudCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgICAgICAgIHZhbHVlczogdGFuZ2VudHMKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodmVydGV4Rm9ybWF0LmJpdGFuZ2VudCkgewogICAgICAgICAgICBhdHRyaWJ1dGVzLmJpdGFuZ2VudCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgICAgICAgIHZhbHVlczogYml0YW5nZW50cwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChlbGxpcHNvaWRHZW9tZXRyeS5fb2Zmc2V0QXR0cmlidXRlKSkgewogICAgICAgICAgY29uc3QgbGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aDsKICAgICAgICAgIGNvbnN0IG9mZnNldFZhbHVlID0gZWxsaXBzb2lkR2VvbWV0cnkuX29mZnNldEF0dHJpYnV0ZSA9PT0gR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGVfZGVmYXVsdC5OT05FID8gMCA6IDE7CiAgICAgICAgICBjb25zdCBhcHBseU9mZnNldCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCAvIDMpLmZpbGwob2Zmc2V0VmFsdWUpOwogICAgICAgICAgYXR0cmlidXRlcy5hcHBseU9mZnNldCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuVU5TSUdORURfQllURSwKICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMSwKICAgICAgICAgICAgdmFsdWVzOiBhcHBseU9mZnNldAogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBuZXcgR2VvbWV0cnlfZGVmYXVsdCh7CiAgICAgICAgICBhdHRyaWJ1dGVzLAogICAgICAgICAgaW5kaWNlcywKICAgICAgICAgIHByaW1pdGl2ZVR5cGU6IFByaW1pdGl2ZVR5cGVfZGVmYXVsdC5UUklBTkdMRVMsCiAgICAgICAgICBib3VuZGluZ1NwaGVyZTogQm91bmRpbmdTcGhlcmVfZGVmYXVsdC5mcm9tRWxsaXBzb2lkKGVsbGlwc29pZE91dGVyKSwKICAgICAgICAgIG9mZnNldEF0dHJpYnV0ZTogZWxsaXBzb2lkR2VvbWV0cnkuX29mZnNldEF0dHJpYnV0ZQogICAgICAgIH0pOwogICAgICB9OwogICAgICBFbGxpcHNvaWRHZW9tZXRyeS5nZXRVbml0RWxsaXBzb2lkID0gZnVuY3Rpb24oKSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQodW5pdEVsbGlwc29pZEdlb21ldHJ5KSkgewogICAgICAgICAgdW5pdEVsbGlwc29pZEdlb21ldHJ5ID0gRWxsaXBzb2lkR2VvbWV0cnkuY3JlYXRlR2VvbWV0cnkoCiAgICAgICAgICAgIG5ldyBFbGxpcHNvaWRHZW9tZXRyeSh7CiAgICAgICAgICAgICAgcmFkaWk6IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoMSwgMSwgMSksCiAgICAgICAgICAgICAgdmVydGV4Rm9ybWF0OiBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5QT1NJVElPTl9PTkxZCiAgICAgICAgICAgIH0pCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdW5pdEVsbGlwc29pZEdlb21ldHJ5OwogICAgICB9OwogICAgICBFbGxpcHNvaWRHZW9tZXRyeV9kZWZhdWx0ID0gRWxsaXBzb2lkR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVFbGxpcHNvaWRHZW9tZXRyeS5qcwogIHZhciBjcmVhdGVFbGxpcHNvaWRHZW9tZXRyeV9leHBvcnRzID0ge307CiAgX19leHBvcnQoY3JlYXRlRWxsaXBzb2lkR2VvbWV0cnlfZXhwb3J0cywgewogICAgZGVmYXVsdDogKCkgPT4gY3JlYXRlRWxsaXBzb2lkR2VvbWV0cnlfZGVmYXVsdAogIH0pOwogIGZ1bmN0aW9uIGNyZWF0ZUVsbGlwc29pZEdlb21ldHJ5KGVsbGlwc29pZEdlb21ldHJ5LCBvZmZzZXQpIHsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQob2Zmc2V0KSkgewogICAgICBlbGxpcHNvaWRHZW9tZXRyeSA9IEVsbGlwc29pZEdlb21ldHJ5X2RlZmF1bHQudW5wYWNrKGVsbGlwc29pZEdlb21ldHJ5LCBvZmZzZXQpOwogICAgfQogICAgcmV0dXJuIEVsbGlwc29pZEdlb21ldHJ5X2RlZmF1bHQuY3JlYXRlR2VvbWV0cnkoZWxsaXBzb2lkR2VvbWV0cnkpOwogIH0KICB2YXIgY3JlYXRlRWxsaXBzb2lkR2VvbWV0cnlfZGVmYXVsdDsKICB2YXIgaW5pdF9jcmVhdGVFbGxpcHNvaWRHZW9tZXRyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlRWxsaXBzb2lkR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9FbGxpcHNvaWRHZW9tZXRyeSgpOwogICAgICBjcmVhdGVFbGxpcHNvaWRHZW9tZXRyeV9kZWZhdWx0ID0gY3JlYXRlRWxsaXBzb2lkR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9FbGxpcHNvaWRPdXRsaW5lR2VvbWV0cnkuanMKICBmdW5jdGlvbiBFbGxpcHNvaWRPdXRsaW5lR2VvbWV0cnkob3B0aW9ucykgewogICAgb3B0aW9ucyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMsIGRlZmF1bHRWYWx1ZV9kZWZhdWx0LkVNUFRZX09CSkVDVCk7CiAgICBjb25zdCByYWRpaSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMucmFkaWksIGRlZmF1bHRSYWRpaTIpOwogICAgY29uc3QgaW5uZXJSYWRpaSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuaW5uZXJSYWRpaSwgcmFkaWkpOwogICAgY29uc3QgbWluaW11bUNsb2NrID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5taW5pbXVtQ2xvY2ssIDApOwogICAgY29uc3QgbWF4aW11bUNsb2NrID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5tYXhpbXVtQ2xvY2ssIE1hdGhfZGVmYXVsdC5UV09fUEkpOwogICAgY29uc3QgbWluaW11bUNvbmUgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLm1pbmltdW1Db25lLCAwKTsKICAgIGNvbnN0IG1heGltdW1Db25lID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5tYXhpbXVtQ29uZSwgTWF0aF9kZWZhdWx0LlBJKTsKICAgIGNvbnN0IHN0YWNrUGFydGl0aW9ucyA9IE1hdGgucm91bmQoZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5zdGFja1BhcnRpdGlvbnMsIDEwKSk7CiAgICBjb25zdCBzbGljZVBhcnRpdGlvbnMgPSBNYXRoLnJvdW5kKGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuc2xpY2VQYXJ0aXRpb25zLCA4KSk7CiAgICBjb25zdCBzdWJkaXZpc2lvbnMgPSBNYXRoLnJvdW5kKGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuc3ViZGl2aXNpb25zLCAxMjgpKTsKICAgIGlmIChzdGFja1BhcnRpdGlvbnMgPCAxKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJvcHRpb25zLnN0YWNrUGFydGl0aW9ucyBjYW5ub3QgYmUgbGVzcyB0aGFuIDEiKTsKICAgIH0KICAgIGlmIChzbGljZVBhcnRpdGlvbnMgPCAwKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJvcHRpb25zLnNsaWNlUGFydGl0aW9ucyBjYW5ub3QgYmUgbGVzcyB0aGFuIDAiKTsKICAgIH0KICAgIGlmIChzdWJkaXZpc2lvbnMgPCAwKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICJvcHRpb25zLnN1YmRpdmlzaW9ucyBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB6ZXJvLiIKICAgICAgKTsKICAgIH0KICAgIGlmIChkZWZpbmVkX2RlZmF1bHQob3B0aW9ucy5vZmZzZXRBdHRyaWJ1dGUpICYmIG9wdGlvbnMub2Zmc2V0QXR0cmlidXRlID09PSBHZW9tZXRyeU9mZnNldEF0dHJpYnV0ZV9kZWZhdWx0LlRPUCkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAiR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGUuVE9QIGlzIG5vdCBhIHN1cHBvcnRlZCBvcHRpb25zLm9mZnNldEF0dHJpYnV0ZSBmb3IgdGhpcyBnZW9tZXRyeS4iCiAgICAgICk7CiAgICB9CiAgICB0aGlzLl9yYWRpaSA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShyYWRpaSk7CiAgICB0aGlzLl9pbm5lclJhZGlpID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGlubmVyUmFkaWkpOwogICAgdGhpcy5fbWluaW11bUNsb2NrID0gbWluaW11bUNsb2NrOwogICAgdGhpcy5fbWF4aW11bUNsb2NrID0gbWF4aW11bUNsb2NrOwogICAgdGhpcy5fbWluaW11bUNvbmUgPSBtaW5pbXVtQ29uZTsKICAgIHRoaXMuX21heGltdW1Db25lID0gbWF4aW11bUNvbmU7CiAgICB0aGlzLl9zdGFja1BhcnRpdGlvbnMgPSBzdGFja1BhcnRpdGlvbnM7CiAgICB0aGlzLl9zbGljZVBhcnRpdGlvbnMgPSBzbGljZVBhcnRpdGlvbnM7CiAgICB0aGlzLl9zdWJkaXZpc2lvbnMgPSBzdWJkaXZpc2lvbnM7CiAgICB0aGlzLl9vZmZzZXRBdHRyaWJ1dGUgPSBvcHRpb25zLm9mZnNldEF0dHJpYnV0ZTsKICAgIHRoaXMuX3dvcmtlck5hbWUgPSAiY3JlYXRlRWxsaXBzb2lkT3V0bGluZUdlb21ldHJ5IjsKICB9CiAgdmFyIGRlZmF1bHRSYWRpaTIsIGNvczIsIHNpbjIsIHNjcmF0Y2hSYWRpaTIsIHNjcmF0Y2hJbm5lclJhZGlpMiwgc2NyYXRjaE9wdGlvbnMxNCwgRWxsaXBzb2lkT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfRWxsaXBzb2lkT3V0bGluZUdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9FbGxpcHNvaWRPdXRsaW5lR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X0JvdW5kaW5nU3BoZXJlKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NvbXBvbmVudERhdGF0eXBlKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkKCk7CiAgICAgIGluaXRfR2VvbWV0cnkoKTsKICAgICAgaW5pdF9HZW9tZXRyeUF0dHJpYnV0ZSgpOwogICAgICBpbml0X0dlb21ldHJ5QXR0cmlidXRlcygpOwogICAgICBpbml0X0dlb21ldHJ5T2Zmc2V0QXR0cmlidXRlKCk7CiAgICAgIGluaXRfSW5kZXhEYXRhdHlwZSgpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgaW5pdF9QcmltaXRpdmVUeXBlKCk7CiAgICAgIGRlZmF1bHRSYWRpaTIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KDEsIDEsIDEpOwogICAgICBjb3MyID0gTWF0aC5jb3M7CiAgICAgIHNpbjIgPSBNYXRoLnNpbjsKICAgICAgRWxsaXBzb2lkT3V0bGluZUdlb21ldHJ5LnBhY2tlZExlbmd0aCA9IDIgKiBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoICsgODsKICAgICAgRWxsaXBzb2lkT3V0bGluZUdlb21ldHJ5LnBhY2sgPSBmdW5jdGlvbih2YWx1ZSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdCh2YWx1ZSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJ2YWx1ZSBpcyByZXF1aXJlZCIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChhcnJheSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJhcnJheSBpcyByZXF1aXJlZCIpOwogICAgICAgIH0KICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2sodmFsdWUuX3JhZGlpLCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKHZhbHVlLl9pbm5lclJhZGlpLCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fbWluaW11bUNsb2NrOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fbWF4aW11bUNsb2NrOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fbWluaW11bUNvbmU7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9tYXhpbXVtQ29uZTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX3N0YWNrUGFydGl0aW9uczsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX3NsaWNlUGFydGl0aW9uczsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX3N1YmRpdmlzaW9uczsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4XSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHZhbHVlLl9vZmZzZXRBdHRyaWJ1dGUsIC0xKTsKICAgICAgICByZXR1cm4gYXJyYXk7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hSYWRpaTIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hJbm5lclJhZGlpMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaE9wdGlvbnMxNCA9IHsKICAgICAgICByYWRpaTogc2NyYXRjaFJhZGlpMiwKICAgICAgICBpbm5lclJhZGlpOiBzY3JhdGNoSW5uZXJSYWRpaTIsCiAgICAgICAgbWluaW11bUNsb2NrOiB2b2lkIDAsCiAgICAgICAgbWF4aW11bUNsb2NrOiB2b2lkIDAsCiAgICAgICAgbWluaW11bUNvbmU6IHZvaWQgMCwKICAgICAgICBtYXhpbXVtQ29uZTogdm9pZCAwLAogICAgICAgIHN0YWNrUGFydGl0aW9uczogdm9pZCAwLAogICAgICAgIHNsaWNlUGFydGl0aW9uczogdm9pZCAwLAogICAgICAgIHN1YmRpdmlzaW9uczogdm9pZCAwLAogICAgICAgIG9mZnNldEF0dHJpYnV0ZTogdm9pZCAwCiAgICAgIH07CiAgICAgIEVsbGlwc29pZE91dGxpbmVHZW9tZXRyeS51bnBhY2sgPSBmdW5jdGlvbihhcnJheSwgc3RhcnRpbmdJbmRleCwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoYXJyYXkpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYXJyYXkgaXMgcmVxdWlyZWQiKTsKICAgICAgICB9CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIGNvbnN0IHJhZGlpID0gQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjayhhcnJheSwgc3RhcnRpbmdJbmRleCwgc2NyYXRjaFJhZGlpMik7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIGNvbnN0IGlubmVyUmFkaWkgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKGFycmF5LCBzdGFydGluZ0luZGV4LCBzY3JhdGNoSW5uZXJSYWRpaTIpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gQ2FydGVzaWFuM19kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBjb25zdCBtaW5pbXVtQ2xvY2sgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IG1heGltdW1DbG9jayA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3QgbWluaW11bUNvbmUgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IG1heGltdW1Db25lID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBzdGFja1BhcnRpdGlvbnMgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IHNsaWNlUGFydGl0aW9ucyA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3Qgc3ViZGl2aXNpb25zID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBvZmZzZXRBdHRyaWJ1dGUgPSBhcnJheVtzdGFydGluZ0luZGV4XTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczE0Lm1pbmltdW1DbG9jayA9IG1pbmltdW1DbG9jazsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMTQubWF4aW11bUNsb2NrID0gbWF4aW11bUNsb2NrOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMxNC5taW5pbXVtQ29uZSA9IG1pbmltdW1Db25lOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMxNC5tYXhpbXVtQ29uZSA9IG1heGltdW1Db25lOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMxNC5zdGFja1BhcnRpdGlvbnMgPSBzdGFja1BhcnRpdGlvbnM7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczE0LnNsaWNlUGFydGl0aW9ucyA9IHNsaWNlUGFydGl0aW9uczsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMTQuc3ViZGl2aXNpb25zID0gc3ViZGl2aXNpb25zOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMxNC5vZmZzZXRBdHRyaWJ1dGUgPSBvZmZzZXRBdHRyaWJ1dGUgPT09IC0xID8gdm9pZCAwIDogb2Zmc2V0QXR0cmlidXRlOwogICAgICAgICAgcmV0dXJuIG5ldyBFbGxpcHNvaWRPdXRsaW5lR2VvbWV0cnkoc2NyYXRjaE9wdGlvbnMxNCk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5fcmFkaWkgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUocmFkaWksIHJlc3VsdC5fcmFkaWkpOwogICAgICAgIHJlc3VsdC5faW5uZXJSYWRpaSA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShpbm5lclJhZGlpLCByZXN1bHQuX2lubmVyUmFkaWkpOwogICAgICAgIHJlc3VsdC5fbWluaW11bUNsb2NrID0gbWluaW11bUNsb2NrOwogICAgICAgIHJlc3VsdC5fbWF4aW11bUNsb2NrID0gbWF4aW11bUNsb2NrOwogICAgICAgIHJlc3VsdC5fbWluaW11bUNvbmUgPSBtaW5pbXVtQ29uZTsKICAgICAgICByZXN1bHQuX21heGltdW1Db25lID0gbWF4aW11bUNvbmU7CiAgICAgICAgcmVzdWx0Ll9zdGFja1BhcnRpdGlvbnMgPSBzdGFja1BhcnRpdGlvbnM7CiAgICAgICAgcmVzdWx0Ll9zbGljZVBhcnRpdGlvbnMgPSBzbGljZVBhcnRpdGlvbnM7CiAgICAgICAgcmVzdWx0Ll9zdWJkaXZpc2lvbnMgPSBzdWJkaXZpc2lvbnM7CiAgICAgICAgcmVzdWx0Ll9vZmZzZXRBdHRyaWJ1dGUgPSBvZmZzZXRBdHRyaWJ1dGUgPT09IC0xID8gdm9pZCAwIDogb2Zmc2V0QXR0cmlidXRlOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIEVsbGlwc29pZE91dGxpbmVHZW9tZXRyeS5jcmVhdGVHZW9tZXRyeSA9IGZ1bmN0aW9uKGVsbGlwc29pZEdlb21ldHJ5KSB7CiAgICAgICAgY29uc3QgcmFkaWkgPSBlbGxpcHNvaWRHZW9tZXRyeS5fcmFkaWk7CiAgICAgICAgaWYgKHJhZGlpLnggPD0gMCB8fCByYWRpaS55IDw9IDAgfHwgcmFkaWkueiA8PSAwKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGNvbnN0IGlubmVyUmFkaWkgPSBlbGxpcHNvaWRHZW9tZXRyeS5faW5uZXJSYWRpaTsKICAgICAgICBpZiAoaW5uZXJSYWRpaS54IDw9IDAgfHwgaW5uZXJSYWRpaS55IDw9IDAgfHwgaW5uZXJSYWRpaS56IDw9IDApIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgY29uc3QgbWluaW11bUNsb2NrID0gZWxsaXBzb2lkR2VvbWV0cnkuX21pbmltdW1DbG9jazsKICAgICAgICBjb25zdCBtYXhpbXVtQ2xvY2sgPSBlbGxpcHNvaWRHZW9tZXRyeS5fbWF4aW11bUNsb2NrOwogICAgICAgIGNvbnN0IG1pbmltdW1Db25lID0gZWxsaXBzb2lkR2VvbWV0cnkuX21pbmltdW1Db25lOwogICAgICAgIGNvbnN0IG1heGltdW1Db25lID0gZWxsaXBzb2lkR2VvbWV0cnkuX21heGltdW1Db25lOwogICAgICAgIGNvbnN0IHN1YmRpdmlzaW9ucyA9IGVsbGlwc29pZEdlb21ldHJ5Ll9zdWJkaXZpc2lvbnM7CiAgICAgICAgY29uc3QgZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuZnJvbUNhcnRlc2lhbjMocmFkaWkpOwogICAgICAgIGxldCBzbGljZVBhcnRpdGlvbnMgPSBlbGxpcHNvaWRHZW9tZXRyeS5fc2xpY2VQYXJ0aXRpb25zICsgMTsKICAgICAgICBsZXQgc3RhY2tQYXJ0aXRpb25zID0gZWxsaXBzb2lkR2VvbWV0cnkuX3N0YWNrUGFydGl0aW9ucyArIDE7CiAgICAgICAgc2xpY2VQYXJ0aXRpb25zID0gTWF0aC5yb3VuZCgKICAgICAgICAgIHNsaWNlUGFydGl0aW9ucyAqIE1hdGguYWJzKG1heGltdW1DbG9jayAtIG1pbmltdW1DbG9jaykgLyBNYXRoX2RlZmF1bHQuVFdPX1BJCiAgICAgICAgKTsKICAgICAgICBzdGFja1BhcnRpdGlvbnMgPSBNYXRoLnJvdW5kKAogICAgICAgICAgc3RhY2tQYXJ0aXRpb25zICogTWF0aC5hYnMobWF4aW11bUNvbmUgLSBtaW5pbXVtQ29uZSkgLyBNYXRoX2RlZmF1bHQuUEkKICAgICAgICApOwogICAgICAgIGlmIChzbGljZVBhcnRpdGlvbnMgPCAyKSB7CiAgICAgICAgICBzbGljZVBhcnRpdGlvbnMgPSAyOwogICAgICAgIH0KICAgICAgICBpZiAoc3RhY2tQYXJ0aXRpb25zIDwgMikgewogICAgICAgICAgc3RhY2tQYXJ0aXRpb25zID0gMjsKICAgICAgICB9CiAgICAgICAgbGV0IGV4dHJhSW5kaWNlcyA9IDA7CiAgICAgICAgbGV0IHZlcnRleE11bHRpcGxpZXIgPSAxOwogICAgICAgIGNvbnN0IGhhc0lubmVyU3VyZmFjZSA9IGlubmVyUmFkaWkueCAhPT0gcmFkaWkueCB8fCBpbm5lclJhZGlpLnkgIT09IHJhZGlpLnkgfHwgaW5uZXJSYWRpaS56ICE9PSByYWRpaS56OwogICAgICAgIGxldCBpc1RvcE9wZW4gPSBmYWxzZTsKICAgICAgICBsZXQgaXNCb3RPcGVuID0gZmFsc2U7CiAgICAgICAgaWYgKGhhc0lubmVyU3VyZmFjZSkgewogICAgICAgICAgdmVydGV4TXVsdGlwbGllciA9IDI7CiAgICAgICAgICBpZiAobWluaW11bUNvbmUgPiAwKSB7CiAgICAgICAgICAgIGlzVG9wT3BlbiA9IHRydWU7CiAgICAgICAgICAgIGV4dHJhSW5kaWNlcyArPSBzbGljZVBhcnRpdGlvbnM7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAobWF4aW11bUNvbmUgPCBNYXRoLlBJKSB7CiAgICAgICAgICAgIGlzQm90T3BlbiA9IHRydWU7CiAgICAgICAgICAgIGV4dHJhSW5kaWNlcyArPSBzbGljZVBhcnRpdGlvbnM7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNvbnN0IHZlcnRleENvdW50ID0gc3ViZGl2aXNpb25zICogdmVydGV4TXVsdGlwbGllciAqIChzdGFja1BhcnRpdGlvbnMgKyBzbGljZVBhcnRpdGlvbnMpOwogICAgICAgIGNvbnN0IHBvc2l0aW9ucyA9IG5ldyBGbG9hdDY0QXJyYXkodmVydGV4Q291bnQgKiAzKTsKICAgICAgICBjb25zdCBudW1JbmRpY2VzID0gMiAqICh2ZXJ0ZXhDb3VudCArIGV4dHJhSW5kaWNlcyAtIChzbGljZVBhcnRpdGlvbnMgKyBzdGFja1BhcnRpdGlvbnMpICogdmVydGV4TXVsdGlwbGllcik7CiAgICAgICAgY29uc3QgaW5kaWNlcyA9IEluZGV4RGF0YXR5cGVfZGVmYXVsdC5jcmVhdGVUeXBlZEFycmF5KHZlcnRleENvdW50LCBudW1JbmRpY2VzKTsKICAgICAgICBsZXQgaTsKICAgICAgICBsZXQgajsKICAgICAgICBsZXQgdGhldGE7CiAgICAgICAgbGV0IHBoaTsKICAgICAgICBsZXQgaW5kZXggPSAwOwogICAgICAgIGNvbnN0IHNpblBoaSA9IG5ldyBBcnJheShzdGFja1BhcnRpdGlvbnMpOwogICAgICAgIGNvbnN0IGNvc1BoaSA9IG5ldyBBcnJheShzdGFja1BhcnRpdGlvbnMpOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBzdGFja1BhcnRpdGlvbnM7IGkrKykgewogICAgICAgICAgcGhpID0gbWluaW11bUNvbmUgKyBpICogKG1heGltdW1Db25lIC0gbWluaW11bUNvbmUpIC8gKHN0YWNrUGFydGl0aW9ucyAtIDEpOwogICAgICAgICAgc2luUGhpW2ldID0gc2luMihwaGkpOwogICAgICAgICAgY29zUGhpW2ldID0gY29zMihwaGkpOwogICAgICAgIH0KICAgICAgICBjb25zdCBzaW5UaGV0YSA9IG5ldyBBcnJheShzdWJkaXZpc2lvbnMpOwogICAgICAgIGNvbnN0IGNvc1RoZXRhID0gbmV3IEFycmF5KHN1YmRpdmlzaW9ucyk7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IHN1YmRpdmlzaW9uczsgaSsrKSB7CiAgICAgICAgICB0aGV0YSA9IG1pbmltdW1DbG9jayArIGkgKiAobWF4aW11bUNsb2NrIC0gbWluaW11bUNsb2NrKSAvIChzdWJkaXZpc2lvbnMgLSAxKTsKICAgICAgICAgIHNpblRoZXRhW2ldID0gc2luMih0aGV0YSk7CiAgICAgICAgICBjb3NUaGV0YVtpXSA9IGNvczIodGhldGEpOwogICAgICAgIH0KICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc3RhY2tQYXJ0aXRpb25zOyBpKyspIHsKICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBzdWJkaXZpc2lvbnM7IGorKykgewogICAgICAgICAgICBwb3NpdGlvbnNbaW5kZXgrK10gPSByYWRpaS54ICogc2luUGhpW2ldICogY29zVGhldGFbal07CiAgICAgICAgICAgIHBvc2l0aW9uc1tpbmRleCsrXSA9IHJhZGlpLnkgKiBzaW5QaGlbaV0gKiBzaW5UaGV0YVtqXTsKICAgICAgICAgICAgcG9zaXRpb25zW2luZGV4KytdID0gcmFkaWkueiAqIGNvc1BoaVtpXTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKGhhc0lubmVyU3VyZmFjZSkgewogICAgICAgICAgZm9yIChpID0gMDsgaSA8IHN0YWNrUGFydGl0aW9uczsgaSsrKSB7CiAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBzdWJkaXZpc2lvbnM7IGorKykgewogICAgICAgICAgICAgIHBvc2l0aW9uc1tpbmRleCsrXSA9IGlubmVyUmFkaWkueCAqIHNpblBoaVtpXSAqIGNvc1RoZXRhW2pdOwogICAgICAgICAgICAgIHBvc2l0aW9uc1tpbmRleCsrXSA9IGlubmVyUmFkaWkueSAqIHNpblBoaVtpXSAqIHNpblRoZXRhW2pdOwogICAgICAgICAgICAgIHBvc2l0aW9uc1tpbmRleCsrXSA9IGlubmVyUmFkaWkueiAqIGNvc1BoaVtpXTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBzaW5QaGkubGVuZ3RoID0gc3ViZGl2aXNpb25zOwogICAgICAgIGNvc1BoaS5sZW5ndGggPSBzdWJkaXZpc2lvbnM7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IHN1YmRpdmlzaW9uczsgaSsrKSB7CiAgICAgICAgICBwaGkgPSBtaW5pbXVtQ29uZSArIGkgKiAobWF4aW11bUNvbmUgLSBtaW5pbXVtQ29uZSkgLyAoc3ViZGl2aXNpb25zIC0gMSk7CiAgICAgICAgICBzaW5QaGlbaV0gPSBzaW4yKHBoaSk7CiAgICAgICAgICBjb3NQaGlbaV0gPSBjb3MyKHBoaSk7CiAgICAgICAgfQogICAgICAgIHNpblRoZXRhLmxlbmd0aCA9IHNsaWNlUGFydGl0aW9uczsKICAgICAgICBjb3NUaGV0YS5sZW5ndGggPSBzbGljZVBhcnRpdGlvbnM7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IHNsaWNlUGFydGl0aW9uczsgaSsrKSB7CiAgICAgICAgICB0aGV0YSA9IG1pbmltdW1DbG9jayArIGkgKiAobWF4aW11bUNsb2NrIC0gbWluaW11bUNsb2NrKSAvIChzbGljZVBhcnRpdGlvbnMgLSAxKTsKICAgICAgICAgIHNpblRoZXRhW2ldID0gc2luMih0aGV0YSk7CiAgICAgICAgICBjb3NUaGV0YVtpXSA9IGNvczIodGhldGEpOwogICAgICAgIH0KICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc3ViZGl2aXNpb25zOyBpKyspIHsKICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBzbGljZVBhcnRpdGlvbnM7IGorKykgewogICAgICAgICAgICBwb3NpdGlvbnNbaW5kZXgrK10gPSByYWRpaS54ICogc2luUGhpW2ldICogY29zVGhldGFbal07CiAgICAgICAgICAgIHBvc2l0aW9uc1tpbmRleCsrXSA9IHJhZGlpLnkgKiBzaW5QaGlbaV0gKiBzaW5UaGV0YVtqXTsKICAgICAgICAgICAgcG9zaXRpb25zW2luZGV4KytdID0gcmFkaWkueiAqIGNvc1BoaVtpXTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKGhhc0lubmVyU3VyZmFjZSkgewogICAgICAgICAgZm9yIChpID0gMDsgaSA8IHN1YmRpdmlzaW9uczsgaSsrKSB7CiAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBzbGljZVBhcnRpdGlvbnM7IGorKykgewogICAgICAgICAgICAgIHBvc2l0aW9uc1tpbmRleCsrXSA9IGlubmVyUmFkaWkueCAqIHNpblBoaVtpXSAqIGNvc1RoZXRhW2pdOwogICAgICAgICAgICAgIHBvc2l0aW9uc1tpbmRleCsrXSA9IGlubmVyUmFkaWkueSAqIHNpblBoaVtpXSAqIHNpblRoZXRhW2pdOwogICAgICAgICAgICAgIHBvc2l0aW9uc1tpbmRleCsrXSA9IGlubmVyUmFkaWkueiAqIGNvc1BoaVtpXTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpbmRleCA9IDA7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IHN0YWNrUGFydGl0aW9ucyAqIHZlcnRleE11bHRpcGxpZXI7IGkrKykgewogICAgICAgICAgY29uc3QgdG9wT2Zmc2V0ID0gaSAqIHN1YmRpdmlzaW9uczsKICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBzdWJkaXZpc2lvbnMgLSAxOyBqKyspIHsKICAgICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IHRvcE9mZnNldCArIGo7CiAgICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSB0b3BPZmZzZXQgKyBqICsgMTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgbGV0IG9mZnNldCA9IHN0YWNrUGFydGl0aW9ucyAqIHN1YmRpdmlzaW9ucyAqIHZlcnRleE11bHRpcGxpZXI7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IHNsaWNlUGFydGl0aW9uczsgaSsrKSB7CiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgc3ViZGl2aXNpb25zIC0gMTsgaisrKSB7CiAgICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBvZmZzZXQgKyBpICsgaiAqIHNsaWNlUGFydGl0aW9uczsKICAgICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IG9mZnNldCArIGkgKyAoaiArIDEpICogc2xpY2VQYXJ0aXRpb25zOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoaGFzSW5uZXJTdXJmYWNlKSB7CiAgICAgICAgICBvZmZzZXQgPSBzdGFja1BhcnRpdGlvbnMgKiBzdWJkaXZpc2lvbnMgKiB2ZXJ0ZXhNdWx0aXBsaWVyICsgc2xpY2VQYXJ0aXRpb25zICogc3ViZGl2aXNpb25zOwogICAgICAgICAgZm9yIChpID0gMDsgaSA8IHNsaWNlUGFydGl0aW9uczsgaSsrKSB7CiAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBzdWJkaXZpc2lvbnMgLSAxOyBqKyspIHsKICAgICAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gb2Zmc2V0ICsgaSArIGogKiBzbGljZVBhcnRpdGlvbnM7CiAgICAgICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IG9mZnNldCArIGkgKyAoaiArIDEpICogc2xpY2VQYXJ0aXRpb25zOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChoYXNJbm5lclN1cmZhY2UpIHsKICAgICAgICAgIGxldCBvdXRlck9mZnNldCA9IHN0YWNrUGFydGl0aW9ucyAqIHN1YmRpdmlzaW9ucyAqIHZlcnRleE11bHRpcGxpZXI7CiAgICAgICAgICBsZXQgaW5uZXJPZmZzZXQgPSBvdXRlck9mZnNldCArIHN1YmRpdmlzaW9ucyAqIHNsaWNlUGFydGl0aW9uczsKICAgICAgICAgIGlmIChpc1RvcE9wZW4pIHsKICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHNsaWNlUGFydGl0aW9uczsgaSsrKSB7CiAgICAgICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IG91dGVyT2Zmc2V0ICsgaTsKICAgICAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gaW5uZXJPZmZzZXQgKyBpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoaXNCb3RPcGVuKSB7CiAgICAgICAgICAgIG91dGVyT2Zmc2V0ICs9IHN1YmRpdmlzaW9ucyAqIHNsaWNlUGFydGl0aW9ucyAtIHNsaWNlUGFydGl0aW9uczsKICAgICAgICAgICAgaW5uZXJPZmZzZXQgKz0gc3ViZGl2aXNpb25zICogc2xpY2VQYXJ0aXRpb25zIC0gc2xpY2VQYXJ0aXRpb25zOwogICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc2xpY2VQYXJ0aXRpb25zOyBpKyspIHsKICAgICAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gb3V0ZXJPZmZzZXQgKyBpOwogICAgICAgICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBpbm5lck9mZnNldCArIGk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZXNfZGVmYXVsdCh7CiAgICAgICAgICBwb3NpdGlvbjogbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5ET1VCTEUsCiAgICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgICAgIHZhbHVlczogcG9zaXRpb25zCiAgICAgICAgICB9KQogICAgICAgIH0pOwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoZWxsaXBzb2lkR2VvbWV0cnkuX29mZnNldEF0dHJpYnV0ZSkpIHsKICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgICBjb25zdCBvZmZzZXRWYWx1ZSA9IGVsbGlwc29pZEdlb21ldHJ5Ll9vZmZzZXRBdHRyaWJ1dGUgPT09IEdlb21ldHJ5T2Zmc2V0QXR0cmlidXRlX2RlZmF1bHQuTk9ORSA/IDAgOiAxOwogICAgICAgICAgY29uc3QgYXBwbHlPZmZzZXQgPSBuZXcgVWludDhBcnJheShsZW5ndGggLyAzKS5maWxsKG9mZnNldFZhbHVlKTsKICAgICAgICAgIGF0dHJpYnV0ZXMuYXBwbHlPZmZzZXQgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LlVOU0lHTkVEX0JZVEUsCiAgICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDEsCiAgICAgICAgICAgIHZhbHVlczogYXBwbHlPZmZzZXQKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3IEdlb21ldHJ5X2RlZmF1bHQoewogICAgICAgICAgYXR0cmlidXRlcywKICAgICAgICAgIGluZGljZXMsCiAgICAgICAgICBwcmltaXRpdmVUeXBlOiBQcmltaXRpdmVUeXBlX2RlZmF1bHQuTElORVMsCiAgICAgICAgICBib3VuZGluZ1NwaGVyZTogQm91bmRpbmdTcGhlcmVfZGVmYXVsdC5mcm9tRWxsaXBzb2lkKGVsbGlwc29pZCksCiAgICAgICAgICBvZmZzZXRBdHRyaWJ1dGU6IGVsbGlwc29pZEdlb21ldHJ5Ll9vZmZzZXRBdHRyaWJ1dGUKICAgICAgICB9KTsKICAgICAgfTsKICAgICAgRWxsaXBzb2lkT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQgPSBFbGxpcHNvaWRPdXRsaW5lR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVFbGxpcHNvaWRPdXRsaW5lR2VvbWV0cnkuanMKICB2YXIgY3JlYXRlRWxsaXBzb2lkT3V0bGluZUdlb21ldHJ5X2V4cG9ydHMgPSB7fTsKICBfX2V4cG9ydChjcmVhdGVFbGxpcHNvaWRPdXRsaW5lR2VvbWV0cnlfZXhwb3J0cywgewogICAgZGVmYXVsdDogKCkgPT4gY3JlYXRlRWxsaXBzb2lkT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQKICB9KTsKICBmdW5jdGlvbiBjcmVhdGVFbGxpcHNvaWRPdXRsaW5lR2VvbWV0cnkoZWxsaXBzb2lkR2VvbWV0cnksIG9mZnNldCkgewogICAgaWYgKGRlZmluZWRfZGVmYXVsdChlbGxpcHNvaWRHZW9tZXRyeS5idWZmZXIsIG9mZnNldCkpIHsKICAgICAgZWxsaXBzb2lkR2VvbWV0cnkgPSBFbGxpcHNvaWRPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdC51bnBhY2soCiAgICAgICAgZWxsaXBzb2lkR2VvbWV0cnksCiAgICAgICAgb2Zmc2V0CiAgICAgICk7CiAgICB9CiAgICByZXR1cm4gRWxsaXBzb2lkT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQuY3JlYXRlR2VvbWV0cnkoZWxsaXBzb2lkR2VvbWV0cnkpOwogIH0KICB2YXIgY3JlYXRlRWxsaXBzb2lkT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfY3JlYXRlRWxsaXBzb2lkT3V0bGluZUdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVFbGxpcHNvaWRPdXRsaW5lR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9FbGxpcHNvaWRPdXRsaW5lR2VvbWV0cnkoKTsKICAgICAgY3JlYXRlRWxsaXBzb2lkT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQgPSBjcmVhdGVFbGxpcHNvaWRPdXRsaW5lR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9DdWxsaW5nVm9sdW1lLmpzCiAgZnVuY3Rpb24gQ3VsbGluZ1ZvbHVtZShwbGFuZXMpIHsKICAgIHRoaXMucGxhbmVzID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQocGxhbmVzLCBbXSk7CiAgfQogIHZhciBmYWNlcywgc2NyYXRjaFBsYW5lQ2VudGVyLCBzY3JhdGNoUGxhbmVOb3JtYWwyLCBzY3JhdGNoUGxhbmUyLCBDdWxsaW5nVm9sdW1lX2RlZmF1bHQ7CiAgdmFyIGluaXRfQ3VsbGluZ1ZvbHVtZSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvQ3VsbGluZ1ZvbHVtZS5qcyIoKSB7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NhcnRlc2lhbjQoKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgaW5pdF9JbnRlcnNlY3QoKTsKICAgICAgaW5pdF9QbGFuZSgpOwogICAgICBmYWNlcyA9IFtuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCksIG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKSwgbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpXTsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKENhcnRlc2lhbjNfZGVmYXVsdC5VTklUX1gsIGZhY2VzWzBdKTsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKENhcnRlc2lhbjNfZGVmYXVsdC5VTklUX1ksIGZhY2VzWzFdKTsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKENhcnRlc2lhbjNfZGVmYXVsdC5VTklUX1osIGZhY2VzWzJdKTsKICAgICAgc2NyYXRjaFBsYW5lQ2VudGVyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoUGxhbmVOb3JtYWwyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoUGxhbmUyID0gbmV3IFBsYW5lX2RlZmF1bHQobmV3IENhcnRlc2lhbjNfZGVmYXVsdCgxLCAwLCAwKSwgMCk7CiAgICAgIEN1bGxpbmdWb2x1bWUuZnJvbUJvdW5kaW5nU3BoZXJlID0gZnVuY3Rpb24oYm91bmRpbmdTcGhlcmUsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGJvdW5kaW5nU3BoZXJlKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImJvdW5kaW5nU3BoZXJlIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQ3VsbGluZ1ZvbHVtZSgpOwogICAgICAgIH0KICAgICAgICBjb25zdCBsZW5ndGggPSBmYWNlcy5sZW5ndGg7CiAgICAgICAgY29uc3QgcGxhbmVzID0gcmVzdWx0LnBsYW5lczsKICAgICAgICBwbGFuZXMubGVuZ3RoID0gMiAqIGxlbmd0aDsKICAgICAgICBjb25zdCBjZW50ZXIgPSBib3VuZGluZ1NwaGVyZS5jZW50ZXI7CiAgICAgICAgY29uc3QgcmFkaXVzID0gYm91bmRpbmdTcGhlcmUucmFkaXVzOwogICAgICAgIGxldCBwbGFuZUluZGV4ID0gMDsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgICBjb25zdCBmYWNlTm9ybWFsID0gZmFjZXNbaV07CiAgICAgICAgICBsZXQgcGxhbmUwID0gcGxhbmVzW3BsYW5lSW5kZXhdOwogICAgICAgICAgbGV0IHBsYW5lMSA9IHBsYW5lc1twbGFuZUluZGV4ICsgMV07CiAgICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwbGFuZTApKSB7CiAgICAgICAgICAgIHBsYW5lMCA9IHBsYW5lc1twbGFuZUluZGV4XSA9IG5ldyBDYXJ0ZXNpYW40X2RlZmF1bHQoKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHBsYW5lMSkpIHsKICAgICAgICAgICAgcGxhbmUxID0gcGxhbmVzW3BsYW5lSW5kZXggKyAxXSA9IG5ldyBDYXJ0ZXNpYW40X2RlZmF1bHQoKTsKICAgICAgICAgIH0KICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKGZhY2VOb3JtYWwsIC1yYWRpdXMsIHNjcmF0Y2hQbGFuZUNlbnRlcik7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKGNlbnRlciwgc2NyYXRjaFBsYW5lQ2VudGVyLCBzY3JhdGNoUGxhbmVDZW50ZXIpOwogICAgICAgICAgcGxhbmUwLnggPSBmYWNlTm9ybWFsLng7CiAgICAgICAgICBwbGFuZTAueSA9IGZhY2VOb3JtYWwueTsKICAgICAgICAgIHBsYW5lMC56ID0gZmFjZU5vcm1hbC56OwogICAgICAgICAgcGxhbmUwLncgPSAtQ2FydGVzaWFuM19kZWZhdWx0LmRvdChmYWNlTm9ybWFsLCBzY3JhdGNoUGxhbmVDZW50ZXIpOwogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIoZmFjZU5vcm1hbCwgcmFkaXVzLCBzY3JhdGNoUGxhbmVDZW50ZXIpOwogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChjZW50ZXIsIHNjcmF0Y2hQbGFuZUNlbnRlciwgc2NyYXRjaFBsYW5lQ2VudGVyKTsKICAgICAgICAgIHBsYW5lMS54ID0gLWZhY2VOb3JtYWwueDsKICAgICAgICAgIHBsYW5lMS55ID0gLWZhY2VOb3JtYWwueTsKICAgICAgICAgIHBsYW5lMS56ID0gLWZhY2VOb3JtYWwuejsKICAgICAgICAgIHBsYW5lMS53ID0gLUNhcnRlc2lhbjNfZGVmYXVsdC5kb3QoCiAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5uZWdhdGUoZmFjZU5vcm1hbCwgc2NyYXRjaFBsYW5lTm9ybWFsMiksCiAgICAgICAgICAgIHNjcmF0Y2hQbGFuZUNlbnRlcgogICAgICAgICAgKTsKICAgICAgICAgIHBsYW5lSW5kZXggKz0gMjsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ3VsbGluZ1ZvbHVtZS5wcm90b3R5cGUuY29tcHV0ZVZpc2liaWxpdHkgPSBmdW5jdGlvbihib3VuZGluZ1ZvbHVtZSkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGJvdW5kaW5nVm9sdW1lKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImJvdW5kaW5nVm9sdW1lIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBwbGFuZXMgPSB0aGlzLnBsYW5lczsKICAgICAgICBsZXQgaW50ZXJzZWN0aW5nID0gZmFsc2U7CiAgICAgICAgZm9yIChsZXQgayA9IDAsIGxlbiA9IHBsYW5lcy5sZW5ndGg7IGsgPCBsZW47ICsraykgewogICAgICAgICAgY29uc3QgcmVzdWx0ID0gYm91bmRpbmdWb2x1bWUuaW50ZXJzZWN0UGxhbmUoCiAgICAgICAgICAgIFBsYW5lX2RlZmF1bHQuZnJvbUNhcnRlc2lhbjQocGxhbmVzW2tdLCBzY3JhdGNoUGxhbmUyKQogICAgICAgICAgKTsKICAgICAgICAgIGlmIChyZXN1bHQgPT09IEludGVyc2VjdF9kZWZhdWx0Lk9VVFNJREUpIHsKICAgICAgICAgICAgcmV0dXJuIEludGVyc2VjdF9kZWZhdWx0Lk9VVFNJREU7CiAgICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdCA9PT0gSW50ZXJzZWN0X2RlZmF1bHQuSU5URVJTRUNUSU5HKSB7CiAgICAgICAgICAgIGludGVyc2VjdGluZyA9IHRydWU7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBpbnRlcnNlY3RpbmcgPyBJbnRlcnNlY3RfZGVmYXVsdC5JTlRFUlNFQ1RJTkcgOiBJbnRlcnNlY3RfZGVmYXVsdC5JTlNJREU7CiAgICAgIH07CiAgICAgIEN1bGxpbmdWb2x1bWUucHJvdG90eXBlLmNvbXB1dGVWaXNpYmlsaXR5V2l0aFBsYW5lTWFzayA9IGZ1bmN0aW9uKGJvdW5kaW5nVm9sdW1lLCBwYXJlbnRQbGFuZU1hc2spIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChib3VuZGluZ1ZvbHVtZSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJib3VuZGluZ1ZvbHVtZSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocGFyZW50UGxhbmVNYXNrKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInBhcmVudFBsYW5lTWFzayBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKHBhcmVudFBsYW5lTWFzayA9PT0gQ3VsbGluZ1ZvbHVtZS5NQVNLX09VVFNJREUgfHwgcGFyZW50UGxhbmVNYXNrID09PSBDdWxsaW5nVm9sdW1lLk1BU0tfSU5TSURFKSB7CiAgICAgICAgICByZXR1cm4gcGFyZW50UGxhbmVNYXNrOwogICAgICAgIH0KICAgICAgICBsZXQgbWFzayA9IEN1bGxpbmdWb2x1bWUuTUFTS19JTlNJREU7CiAgICAgICAgY29uc3QgcGxhbmVzID0gdGhpcy5wbGFuZXM7CiAgICAgICAgZm9yIChsZXQgayA9IDAsIGxlbiA9IHBsYW5lcy5sZW5ndGg7IGsgPCBsZW47ICsraykgewogICAgICAgICAgY29uc3QgZmxhZyA9IGsgPCAzMSA/IDEgPDwgayA6IDA7CiAgICAgICAgICBpZiAoayA8IDMxICYmIChwYXJlbnRQbGFuZU1hc2sgJiBmbGFnKSA9PT0gMCkgewogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGJvdW5kaW5nVm9sdW1lLmludGVyc2VjdFBsYW5lKAogICAgICAgICAgICBQbGFuZV9kZWZhdWx0LmZyb21DYXJ0ZXNpYW40KHBsYW5lc1trXSwgc2NyYXRjaFBsYW5lMikKICAgICAgICAgICk7CiAgICAgICAgICBpZiAocmVzdWx0ID09PSBJbnRlcnNlY3RfZGVmYXVsdC5PVVRTSURFKSB7CiAgICAgICAgICAgIHJldHVybiBDdWxsaW5nVm9sdW1lLk1BU0tfT1VUU0lERTsKICAgICAgICAgIH0gZWxzZSBpZiAocmVzdWx0ID09PSBJbnRlcnNlY3RfZGVmYXVsdC5JTlRFUlNFQ1RJTkcpIHsKICAgICAgICAgICAgbWFzayB8PSBmbGFnOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gbWFzazsKICAgICAgfTsKICAgICAgQ3VsbGluZ1ZvbHVtZS5NQVNLX09VVFNJREUgPSA0Mjk0OTY3Mjk1OwogICAgICBDdWxsaW5nVm9sdW1lLk1BU0tfSU5TSURFID0gMDsKICAgICAgQ3VsbGluZ1ZvbHVtZS5NQVNLX0lOREVURVJNSU5BVEUgPSAyMTQ3NDgzNjQ3OwogICAgICBDdWxsaW5nVm9sdW1lX2RlZmF1bHQgPSBDdWxsaW5nVm9sdW1lOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvT3J0aG9ncmFwaGljT2ZmQ2VudGVyRnJ1c3R1bS5qcwogIGZ1bmN0aW9uIE9ydGhvZ3JhcGhpY09mZkNlbnRlckZydXN0dW0ob3B0aW9ucykgewogICAgb3B0aW9ucyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMsIGRlZmF1bHRWYWx1ZV9kZWZhdWx0LkVNUFRZX09CSkVDVCk7CiAgICB0aGlzLmxlZnQgPSBvcHRpb25zLmxlZnQ7CiAgICB0aGlzLl9sZWZ0ID0gdm9pZCAwOwogICAgdGhpcy5yaWdodCA9IG9wdGlvbnMucmlnaHQ7CiAgICB0aGlzLl9yaWdodCA9IHZvaWQgMDsKICAgIHRoaXMudG9wID0gb3B0aW9ucy50b3A7CiAgICB0aGlzLl90b3AgPSB2b2lkIDA7CiAgICB0aGlzLmJvdHRvbSA9IG9wdGlvbnMuYm90dG9tOwogICAgdGhpcy5fYm90dG9tID0gdm9pZCAwOwogICAgdGhpcy5uZWFyID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5uZWFyLCAxKTsKICAgIHRoaXMuX25lYXIgPSB0aGlzLm5lYXI7CiAgICB0aGlzLmZhciA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuZmFyLCA1ZTgpOwogICAgdGhpcy5fZmFyID0gdGhpcy5mYXI7CiAgICB0aGlzLl9jdWxsaW5nVm9sdW1lID0gbmV3IEN1bGxpbmdWb2x1bWVfZGVmYXVsdCgpOwogICAgdGhpcy5fb3J0aG9ncmFwaGljTWF0cml4ID0gbmV3IE1hdHJpeDRfZGVmYXVsdCgpOwogIH0KICBmdW5jdGlvbiB1cGRhdGUoZnJ1c3R1bSkgewogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoZnJ1c3R1bS5yaWdodCkgfHwgIWRlZmluZWRfZGVmYXVsdChmcnVzdHVtLmxlZnQpIHx8ICFkZWZpbmVkX2RlZmF1bHQoZnJ1c3R1bS50b3ApIHx8ICFkZWZpbmVkX2RlZmF1bHQoZnJ1c3R1bS5ib3R0b20pIHx8ICFkZWZpbmVkX2RlZmF1bHQoZnJ1c3R1bS5uZWFyKSB8fCAhZGVmaW5lZF9kZWZhdWx0KGZydXN0dW0uZmFyKSkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAicmlnaHQsIGxlZnQsIHRvcCwgYm90dG9tLCBuZWFyLCBvciBmYXIgcGFyYW1ldGVycyBhcmUgbm90IHNldC4iCiAgICAgICk7CiAgICB9CiAgICBpZiAoZnJ1c3R1bS50b3AgIT09IGZydXN0dW0uX3RvcCB8fCBmcnVzdHVtLmJvdHRvbSAhPT0gZnJ1c3R1bS5fYm90dG9tIHx8IGZydXN0dW0ubGVmdCAhPT0gZnJ1c3R1bS5fbGVmdCB8fCBmcnVzdHVtLnJpZ2h0ICE9PSBmcnVzdHVtLl9yaWdodCB8fCBmcnVzdHVtLm5lYXIgIT09IGZydXN0dW0uX25lYXIgfHwgZnJ1c3R1bS5mYXIgIT09IGZydXN0dW0uX2ZhcikgewogICAgICBpZiAoZnJ1c3R1bS5sZWZ0ID4gZnJ1c3R1bS5yaWdodCkgewogICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJyaWdodCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBsZWZ0LiIpOwogICAgICB9CiAgICAgIGlmIChmcnVzdHVtLmJvdHRvbSA+IGZydXN0dW0udG9wKSB7CiAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInRvcCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBib3R0b20uIik7CiAgICAgIH0KICAgICAgaWYgKGZydXN0dW0ubmVhciA8PSAwIHx8IGZydXN0dW0ubmVhciA+IGZydXN0dW0uZmFyKSB7CiAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAibmVhciBtdXN0IGJlIGdyZWF0ZXIgdGhhbiB6ZXJvIGFuZCBsZXNzIHRoYW4gZmFyLiIKICAgICAgICApOwogICAgICB9CiAgICAgIGZydXN0dW0uX2xlZnQgPSBmcnVzdHVtLmxlZnQ7CiAgICAgIGZydXN0dW0uX3JpZ2h0ID0gZnJ1c3R1bS5yaWdodDsKICAgICAgZnJ1c3R1bS5fdG9wID0gZnJ1c3R1bS50b3A7CiAgICAgIGZydXN0dW0uX2JvdHRvbSA9IGZydXN0dW0uYm90dG9tOwogICAgICBmcnVzdHVtLl9uZWFyID0gZnJ1c3R1bS5uZWFyOwogICAgICBmcnVzdHVtLl9mYXIgPSBmcnVzdHVtLmZhcjsKICAgICAgZnJ1c3R1bS5fb3J0aG9ncmFwaGljTWF0cml4ID0gTWF0cml4NF9kZWZhdWx0LmNvbXB1dGVPcnRob2dyYXBoaWNPZmZDZW50ZXIoCiAgICAgICAgZnJ1c3R1bS5sZWZ0LAogICAgICAgIGZydXN0dW0ucmlnaHQsCiAgICAgICAgZnJ1c3R1bS5ib3R0b20sCiAgICAgICAgZnJ1c3R1bS50b3AsCiAgICAgICAgZnJ1c3R1bS5uZWFyLAogICAgICAgIGZydXN0dW0uZmFyLAogICAgICAgIGZydXN0dW0uX29ydGhvZ3JhcGhpY01hdHJpeAogICAgICApOwogICAgfQogIH0KICB2YXIgZ2V0UGxhbmVzUmlnaHQsIGdldFBsYW5lc05lYXJDZW50ZXIsIGdldFBsYW5lc1BvaW50LCBuZWdhdGVTY3JhdGNoLCBPcnRob2dyYXBoaWNPZmZDZW50ZXJGcnVzdHVtX2RlZmF1bHQ7CiAgdmFyIGluaXRfT3J0aG9ncmFwaGljT2ZmQ2VudGVyRnJ1c3R1bSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvT3J0aG9ncmFwaGljT2ZmQ2VudGVyRnJ1c3R1bS5qcyIoKSB7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NhcnRlc2lhbjQoKTsKICAgICAgaW5pdF9DdWxsaW5nVm9sdW1lKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X01hdHJpeDQoKTsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoT3J0aG9ncmFwaGljT2ZmQ2VudGVyRnJ1c3R1bS5wcm90b3R5cGUsIHsKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIHRoZSBvcnRob2dyYXBoaWMgcHJvamVjdGlvbiBtYXRyaXggY29tcHV0ZWQgZnJvbSB0aGUgdmlldyBmcnVzdHVtLgogICAgICAgICAqIEBtZW1iZXJvZiBPcnRob2dyYXBoaWNPZmZDZW50ZXJGcnVzdHVtLnByb3RvdHlwZQogICAgICAgICAqIEB0eXBlIHtNYXRyaXg0fQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqLwogICAgICAgIHByb2plY3Rpb25NYXRyaXg6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHVwZGF0ZSh0aGlzKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29ydGhvZ3JhcGhpY01hdHJpeDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgICBnZXRQbGFuZXNSaWdodCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgZ2V0UGxhbmVzTmVhckNlbnRlciA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgZ2V0UGxhbmVzUG9pbnQgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIG5lZ2F0ZVNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIE9ydGhvZ3JhcGhpY09mZkNlbnRlckZydXN0dW0ucHJvdG90eXBlLmNvbXB1dGVDdWxsaW5nVm9sdW1lID0gZnVuY3Rpb24ocG9zaXRpb24sIGRpcmVjdGlvbjIsIHVwKSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocG9zaXRpb24pKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgicG9zaXRpb24gaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGRpcmVjdGlvbjIpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiZGlyZWN0aW9uIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdCh1cCkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJ1cCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgcGxhbmVzID0gdGhpcy5fY3VsbGluZ1ZvbHVtZS5wbGFuZXM7CiAgICAgICAgY29uc3QgdCA9IHRoaXMudG9wOwogICAgICAgIGNvbnN0IGIgPSB0aGlzLmJvdHRvbTsKICAgICAgICBjb25zdCByID0gdGhpcy5yaWdodDsKICAgICAgICBjb25zdCBsID0gdGhpcy5sZWZ0OwogICAgICAgIGNvbnN0IG4gPSB0aGlzLm5lYXI7CiAgICAgICAgY29uc3QgZiA9IHRoaXMuZmFyOwogICAgICAgIGNvbnN0IHJpZ2h0ID0gQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKGRpcmVjdGlvbjIsIHVwLCBnZXRQbGFuZXNSaWdodCk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShyaWdodCwgcmlnaHQpOwogICAgICAgIGNvbnN0IG5lYXJDZW50ZXIgPSBnZXRQbGFuZXNOZWFyQ2VudGVyOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKGRpcmVjdGlvbjIsIG4sIG5lYXJDZW50ZXIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQocG9zaXRpb24sIG5lYXJDZW50ZXIsIG5lYXJDZW50ZXIpOwogICAgICAgIGNvbnN0IHBvaW50ID0gZ2V0UGxhbmVzUG9pbnQ7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIocmlnaHQsIGwsIHBvaW50KTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKG5lYXJDZW50ZXIsIHBvaW50LCBwb2ludCk7CiAgICAgICAgbGV0IHBsYW5lID0gcGxhbmVzWzBdOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHBsYW5lKSkgewogICAgICAgICAgcGxhbmUgPSBwbGFuZXNbMF0gPSBuZXcgQ2FydGVzaWFuNF9kZWZhdWx0KCk7CiAgICAgICAgfQogICAgICAgIHBsYW5lLnggPSByaWdodC54OwogICAgICAgIHBsYW5lLnkgPSByaWdodC55OwogICAgICAgIHBsYW5lLnogPSByaWdodC56OwogICAgICAgIHBsYW5lLncgPSAtQ2FydGVzaWFuM19kZWZhdWx0LmRvdChyaWdodCwgcG9pbnQpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKHJpZ2h0LCByLCBwb2ludCk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChuZWFyQ2VudGVyLCBwb2ludCwgcG9pbnQpOwogICAgICAgIHBsYW5lID0gcGxhbmVzWzFdOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHBsYW5lKSkgewogICAgICAgICAgcGxhbmUgPSBwbGFuZXNbMV0gPSBuZXcgQ2FydGVzaWFuNF9kZWZhdWx0KCk7CiAgICAgICAgfQogICAgICAgIHBsYW5lLnggPSAtcmlnaHQueDsKICAgICAgICBwbGFuZS55ID0gLXJpZ2h0Lnk7CiAgICAgICAgcGxhbmUueiA9IC1yaWdodC56OwogICAgICAgIHBsYW5lLncgPSAtQ2FydGVzaWFuM19kZWZhdWx0LmRvdChDYXJ0ZXNpYW4zX2RlZmF1bHQubmVnYXRlKHJpZ2h0LCBuZWdhdGVTY3JhdGNoKSwgcG9pbnQpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKHVwLCBiLCBwb2ludCk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChuZWFyQ2VudGVyLCBwb2ludCwgcG9pbnQpOwogICAgICAgIHBsYW5lID0gcGxhbmVzWzJdOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHBsYW5lKSkgewogICAgICAgICAgcGxhbmUgPSBwbGFuZXNbMl0gPSBuZXcgQ2FydGVzaWFuNF9kZWZhdWx0KCk7CiAgICAgICAgfQogICAgICAgIHBsYW5lLnggPSB1cC54OwogICAgICAgIHBsYW5lLnkgPSB1cC55OwogICAgICAgIHBsYW5lLnogPSB1cC56OwogICAgICAgIHBsYW5lLncgPSAtQ2FydGVzaWFuM19kZWZhdWx0LmRvdCh1cCwgcG9pbnQpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKHVwLCB0LCBwb2ludCk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChuZWFyQ2VudGVyLCBwb2ludCwgcG9pbnQpOwogICAgICAgIHBsYW5lID0gcGxhbmVzWzNdOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHBsYW5lKSkgewogICAgICAgICAgcGxhbmUgPSBwbGFuZXNbM10gPSBuZXcgQ2FydGVzaWFuNF9kZWZhdWx0KCk7CiAgICAgICAgfQogICAgICAgIHBsYW5lLnggPSAtdXAueDsKICAgICAgICBwbGFuZS55ID0gLXVwLnk7CiAgICAgICAgcGxhbmUueiA9IC11cC56OwogICAgICAgIHBsYW5lLncgPSAtQ2FydGVzaWFuM19kZWZhdWx0LmRvdChDYXJ0ZXNpYW4zX2RlZmF1bHQubmVnYXRlKHVwLCBuZWdhdGVTY3JhdGNoKSwgcG9pbnQpOwogICAgICAgIHBsYW5lID0gcGxhbmVzWzRdOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHBsYW5lKSkgewogICAgICAgICAgcGxhbmUgPSBwbGFuZXNbNF0gPSBuZXcgQ2FydGVzaWFuNF9kZWZhdWx0KCk7CiAgICAgICAgfQogICAgICAgIHBsYW5lLnggPSBkaXJlY3Rpb24yLng7CiAgICAgICAgcGxhbmUueSA9IGRpcmVjdGlvbjIueTsKICAgICAgICBwbGFuZS56ID0gZGlyZWN0aW9uMi56OwogICAgICAgIHBsYW5lLncgPSAtQ2FydGVzaWFuM19kZWZhdWx0LmRvdChkaXJlY3Rpb24yLCBuZWFyQ2VudGVyKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcihkaXJlY3Rpb24yLCBmLCBwb2ludCk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChwb3NpdGlvbiwgcG9pbnQsIHBvaW50KTsKICAgICAgICBwbGFuZSA9IHBsYW5lc1s1XTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwbGFuZSkpIHsKICAgICAgICAgIHBsYW5lID0gcGxhbmVzWzVdID0gbmV3IENhcnRlc2lhbjRfZGVmYXVsdCgpOwogICAgICAgIH0KICAgICAgICBwbGFuZS54ID0gLWRpcmVjdGlvbjIueDsKICAgICAgICBwbGFuZS55ID0gLWRpcmVjdGlvbjIueTsKICAgICAgICBwbGFuZS56ID0gLWRpcmVjdGlvbjIuejsKICAgICAgICBwbGFuZS53ID0gLUNhcnRlc2lhbjNfZGVmYXVsdC5kb3QoQ2FydGVzaWFuM19kZWZhdWx0Lm5lZ2F0ZShkaXJlY3Rpb24yLCBuZWdhdGVTY3JhdGNoKSwgcG9pbnQpOwogICAgICAgIHJldHVybiB0aGlzLl9jdWxsaW5nVm9sdW1lOwogICAgICB9OwogICAgICBPcnRob2dyYXBoaWNPZmZDZW50ZXJGcnVzdHVtLnByb3RvdHlwZS5nZXRQaXhlbERpbWVuc2lvbnMgPSBmdW5jdGlvbihkcmF3aW5nQnVmZmVyV2lkdGgsIGRyYXdpbmdCdWZmZXJIZWlnaHQsIGRpc3RhbmNlLCBwaXhlbFJhdGlvLCByZXN1bHQpIHsKICAgICAgICB1cGRhdGUodGhpcyk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoZHJhd2luZ0J1ZmZlcldpZHRoKSB8fCAhZGVmaW5lZF9kZWZhdWx0KGRyYXdpbmdCdWZmZXJIZWlnaHQpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgIkJvdGggZHJhd2luZ0J1ZmZlcldpZHRoIGFuZCBkcmF3aW5nQnVmZmVySGVpZ2h0IGFyZSByZXF1aXJlZC4iCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBpZiAoZHJhd2luZ0J1ZmZlcldpZHRoIDw9IDApIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJkcmF3aW5nQnVmZmVyV2lkdGggbXVzdCBiZSBncmVhdGVyIHRoYW4gemVyby4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKGRyYXdpbmdCdWZmZXJIZWlnaHQgPD0gMCkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImRyYXdpbmdCdWZmZXJIZWlnaHQgbXVzdCBiZSBncmVhdGVyIHRoYW4gemVyby4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoZGlzdGFuY2UpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiZGlzdGFuY2UgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHBpeGVsUmF0aW8pKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgicGl4ZWxSYXRpbyBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKHBpeGVsUmF0aW8gPD0gMCkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInBpeGVsUmF0aW8gbXVzdCBiZSBncmVhdGVyIHRoYW4gemVyby4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoIkEgcmVzdWx0IG9iamVjdCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgZnJ1c3R1bVdpZHRoID0gdGhpcy5yaWdodCAtIHRoaXMubGVmdDsKICAgICAgICBjb25zdCBmcnVzdHVtSGVpZ2h0ID0gdGhpcy50b3AgLSB0aGlzLmJvdHRvbTsKICAgICAgICBjb25zdCBwaXhlbFdpZHRoID0gcGl4ZWxSYXRpbyAqIGZydXN0dW1XaWR0aCAvIGRyYXdpbmdCdWZmZXJXaWR0aDsKICAgICAgICBjb25zdCBwaXhlbEhlaWdodCA9IHBpeGVsUmF0aW8gKiBmcnVzdHVtSGVpZ2h0IC8gZHJhd2luZ0J1ZmZlckhlaWdodDsKICAgICAgICByZXN1bHQueCA9IHBpeGVsV2lkdGg7CiAgICAgICAgcmVzdWx0LnkgPSBwaXhlbEhlaWdodDsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBPcnRob2dyYXBoaWNPZmZDZW50ZXJGcnVzdHVtLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBPcnRob2dyYXBoaWNPZmZDZW50ZXJGcnVzdHVtKCk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5sZWZ0ID0gdGhpcy5sZWZ0OwogICAgICAgIHJlc3VsdC5yaWdodCA9IHRoaXMucmlnaHQ7CiAgICAgICAgcmVzdWx0LnRvcCA9IHRoaXMudG9wOwogICAgICAgIHJlc3VsdC5ib3R0b20gPSB0aGlzLmJvdHRvbTsKICAgICAgICByZXN1bHQubmVhciA9IHRoaXMubmVhcjsKICAgICAgICByZXN1bHQuZmFyID0gdGhpcy5mYXI7CiAgICAgICAgcmVzdWx0Ll9sZWZ0ID0gdm9pZCAwOwogICAgICAgIHJlc3VsdC5fcmlnaHQgPSB2b2lkIDA7CiAgICAgICAgcmVzdWx0Ll90b3AgPSB2b2lkIDA7CiAgICAgICAgcmVzdWx0Ll9ib3R0b20gPSB2b2lkIDA7CiAgICAgICAgcmVzdWx0Ll9uZWFyID0gdm9pZCAwOwogICAgICAgIHJlc3VsdC5fZmFyID0gdm9pZCAwOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE9ydGhvZ3JhcGhpY09mZkNlbnRlckZydXN0dW0ucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uKG90aGVyKSB7CiAgICAgICAgcmV0dXJuIGRlZmluZWRfZGVmYXVsdChvdGhlcikgJiYgb3RoZXIgaW5zdGFuY2VvZiBPcnRob2dyYXBoaWNPZmZDZW50ZXJGcnVzdHVtICYmIHRoaXMucmlnaHQgPT09IG90aGVyLnJpZ2h0ICYmIHRoaXMubGVmdCA9PT0gb3RoZXIubGVmdCAmJiB0aGlzLnRvcCA9PT0gb3RoZXIudG9wICYmIHRoaXMuYm90dG9tID09PSBvdGhlci5ib3R0b20gJiYgdGhpcy5uZWFyID09PSBvdGhlci5uZWFyICYmIHRoaXMuZmFyID09PSBvdGhlci5mYXI7CiAgICAgIH07CiAgICAgIE9ydGhvZ3JhcGhpY09mZkNlbnRlckZydXN0dW0ucHJvdG90eXBlLmVxdWFsc0Vwc2lsb24gPSBmdW5jdGlvbihvdGhlciwgcmVsYXRpdmVFcHNpbG9uLCBhYnNvbHV0ZUVwc2lsb24pIHsKICAgICAgICByZXR1cm4gb3RoZXIgPT09IHRoaXMgfHwgZGVmaW5lZF9kZWZhdWx0KG90aGVyKSAmJiBvdGhlciBpbnN0YW5jZW9mIE9ydGhvZ3JhcGhpY09mZkNlbnRlckZydXN0dW0gJiYgTWF0aF9kZWZhdWx0LmVxdWFsc0Vwc2lsb24oCiAgICAgICAgICB0aGlzLnJpZ2h0LAogICAgICAgICAgb3RoZXIucmlnaHQsCiAgICAgICAgICByZWxhdGl2ZUVwc2lsb24sCiAgICAgICAgICBhYnNvbHV0ZUVwc2lsb24KICAgICAgICApICYmIE1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgdGhpcy5sZWZ0LAogICAgICAgICAgb3RoZXIubGVmdCwKICAgICAgICAgIHJlbGF0aXZlRXBzaWxvbiwKICAgICAgICAgIGFic29sdXRlRXBzaWxvbgogICAgICAgICkgJiYgTWF0aF9kZWZhdWx0LmVxdWFsc0Vwc2lsb24oCiAgICAgICAgICB0aGlzLnRvcCwKICAgICAgICAgIG90aGVyLnRvcCwKICAgICAgICAgIHJlbGF0aXZlRXBzaWxvbiwKICAgICAgICAgIGFic29sdXRlRXBzaWxvbgogICAgICAgICkgJiYgTWF0aF9kZWZhdWx0LmVxdWFsc0Vwc2lsb24oCiAgICAgICAgICB0aGlzLmJvdHRvbSwKICAgICAgICAgIG90aGVyLmJvdHRvbSwKICAgICAgICAgIHJlbGF0aXZlRXBzaWxvbiwKICAgICAgICAgIGFic29sdXRlRXBzaWxvbgogICAgICAgICkgJiYgTWF0aF9kZWZhdWx0LmVxdWFsc0Vwc2lsb24oCiAgICAgICAgICB0aGlzLm5lYXIsCiAgICAgICAgICBvdGhlci5uZWFyLAogICAgICAgICAgcmVsYXRpdmVFcHNpbG9uLAogICAgICAgICAgYWJzb2x1dGVFcHNpbG9uCiAgICAgICAgKSAmJiBNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbigKICAgICAgICAgIHRoaXMuZmFyLAogICAgICAgICAgb3RoZXIuZmFyLAogICAgICAgICAgcmVsYXRpdmVFcHNpbG9uLAogICAgICAgICAgYWJzb2x1dGVFcHNpbG9uCiAgICAgICAgKTsKICAgICAgfTsKICAgICAgT3J0aG9ncmFwaGljT2ZmQ2VudGVyRnJ1c3R1bV9kZWZhdWx0ID0gT3J0aG9ncmFwaGljT2ZmQ2VudGVyRnJ1c3R1bTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL09ydGhvZ3JhcGhpY0ZydXN0dW0uanMKICBmdW5jdGlvbiBPcnRob2dyYXBoaWNGcnVzdHVtKG9wdGlvbnMpIHsKICAgIG9wdGlvbnMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLCBkZWZhdWx0VmFsdWVfZGVmYXVsdC5FTVBUWV9PQkpFQ1QpOwogICAgdGhpcy5fb2ZmQ2VudGVyRnJ1c3R1bSA9IG5ldyBPcnRob2dyYXBoaWNPZmZDZW50ZXJGcnVzdHVtX2RlZmF1bHQoKTsKICAgIHRoaXMud2lkdGggPSBvcHRpb25zLndpZHRoOwogICAgdGhpcy5fd2lkdGggPSB2b2lkIDA7CiAgICB0aGlzLmFzcGVjdFJhdGlvID0gb3B0aW9ucy5hc3BlY3RSYXRpbzsKICAgIHRoaXMuX2FzcGVjdFJhdGlvID0gdm9pZCAwOwogICAgdGhpcy5uZWFyID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5uZWFyLCAxKTsKICAgIHRoaXMuX25lYXIgPSB0aGlzLm5lYXI7CiAgICB0aGlzLmZhciA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuZmFyLCA1ZTgpOwogICAgdGhpcy5fZmFyID0gdGhpcy5mYXI7CiAgfQogIGZ1bmN0aW9uIHVwZGF0ZTIoZnJ1c3R1bSkgewogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoZnJ1c3R1bS53aWR0aCkgfHwgIWRlZmluZWRfZGVmYXVsdChmcnVzdHVtLmFzcGVjdFJhdGlvKSB8fCAhZGVmaW5lZF9kZWZhdWx0KGZydXN0dW0ubmVhcikgfHwgIWRlZmluZWRfZGVmYXVsdChmcnVzdHVtLmZhcikpIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgIndpZHRoLCBhc3BlY3RSYXRpbywgbmVhciwgb3IgZmFyIHBhcmFtZXRlcnMgYXJlIG5vdCBzZXQuIgogICAgICApOwogICAgfQogICAgY29uc3QgZiA9IGZydXN0dW0uX29mZkNlbnRlckZydXN0dW07CiAgICBpZiAoZnJ1c3R1bS53aWR0aCAhPT0gZnJ1c3R1bS5fd2lkdGggfHwgZnJ1c3R1bS5hc3BlY3RSYXRpbyAhPT0gZnJ1c3R1bS5fYXNwZWN0UmF0aW8gfHwgZnJ1c3R1bS5uZWFyICE9PSBmcnVzdHVtLl9uZWFyIHx8IGZydXN0dW0uZmFyICE9PSBmcnVzdHVtLl9mYXIpIHsKICAgICAgaWYgKGZydXN0dW0uYXNwZWN0UmF0aW8gPCAwKSB7CiAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImFzcGVjdFJhdGlvIG11c3QgYmUgcG9zaXRpdmUuIik7CiAgICAgIH0KICAgICAgaWYgKGZydXN0dW0ubmVhciA8IDAgfHwgZnJ1c3R1bS5uZWFyID4gZnJ1c3R1bS5mYXIpIHsKICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICJuZWFyIG11c3QgYmUgZ3JlYXRlciB0aGFuIHplcm8gYW5kIGxlc3MgdGhhbiBmYXIuIgogICAgICAgICk7CiAgICAgIH0KICAgICAgZnJ1c3R1bS5fYXNwZWN0UmF0aW8gPSBmcnVzdHVtLmFzcGVjdFJhdGlvOwogICAgICBmcnVzdHVtLl93aWR0aCA9IGZydXN0dW0ud2lkdGg7CiAgICAgIGZydXN0dW0uX25lYXIgPSBmcnVzdHVtLm5lYXI7CiAgICAgIGZydXN0dW0uX2ZhciA9IGZydXN0dW0uZmFyOwogICAgICBjb25zdCByYXRpbyA9IDEgLyBmcnVzdHVtLmFzcGVjdFJhdGlvOwogICAgICBmLnJpZ2h0ID0gZnJ1c3R1bS53aWR0aCAqIDAuNTsKICAgICAgZi5sZWZ0ID0gLWYucmlnaHQ7CiAgICAgIGYudG9wID0gcmF0aW8gKiBmLnJpZ2h0OwogICAgICBmLmJvdHRvbSA9IC1mLnRvcDsKICAgICAgZi5uZWFyID0gZnJ1c3R1bS5uZWFyOwogICAgICBmLmZhciA9IGZydXN0dW0uZmFyOwogICAgfQogIH0KICB2YXIgT3J0aG9ncmFwaGljRnJ1c3R1bV9kZWZhdWx0OwogIHZhciBpbml0X09ydGhvZ3JhcGhpY0ZydXN0dW0gPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL09ydGhvZ3JhcGhpY0ZydXN0dW0uanMiKCkgewogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X09ydGhvZ3JhcGhpY09mZkNlbnRlckZydXN0dW0oKTsKICAgICAgT3J0aG9ncmFwaGljRnJ1c3R1bS5wYWNrZWRMZW5ndGggPSA0OwogICAgICBPcnRob2dyYXBoaWNGcnVzdHVtLnBhY2sgPSBmdW5jdGlvbih2YWx1ZSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInZhbHVlIiwgdmFsdWUpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS53aWR0aDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuYXNwZWN0UmF0aW87CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLm5lYXI7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleF0gPSB2YWx1ZS5mYXI7CiAgICAgICAgcmV0dXJuIGFycmF5OwogICAgICB9OwogICAgICBPcnRob2dyYXBoaWNGcnVzdHVtLnVucGFjayA9IGZ1bmN0aW9uKGFycmF5LCBzdGFydGluZ0luZGV4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgT3J0aG9ncmFwaGljRnJ1c3R1bSgpOwogICAgICAgIH0KICAgICAgICByZXN1bHQud2lkdGggPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIHJlc3VsdC5hc3BlY3RSYXRpbyA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgcmVzdWx0Lm5lYXIgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIHJlc3VsdC5mYXIgPSBhcnJheVtzdGFydGluZ0luZGV4XTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPcnRob2dyYXBoaWNGcnVzdHVtLnByb3RvdHlwZSwgewogICAgICAgIC8qKgogICAgICAgICAqIEdldHMgdGhlIG9ydGhvZ3JhcGhpYyBwcm9qZWN0aW9uIG1hdHJpeCBjb21wdXRlZCBmcm9tIHRoZSB2aWV3IGZydXN0dW0uCiAgICAgICAgICogQG1lbWJlcm9mIE9ydGhvZ3JhcGhpY0ZydXN0dW0ucHJvdG90eXBlCiAgICAgICAgICogQHR5cGUge01hdHJpeDR9CiAgICAgICAgICogQHJlYWRvbmx5CiAgICAgICAgICovCiAgICAgICAgcHJvamVjdGlvbk1hdHJpeDogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdXBkYXRlMih0aGlzKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29mZkNlbnRlckZydXN0dW0ucHJvamVjdGlvbk1hdHJpeDsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIEdldHMgdGhlIG9ydGhvZ3JhcGhpYyBwcm9qZWN0aW9uIG1hdHJpeCBjb21wdXRlZCBmcm9tIHRoZSB2aWV3IGZydXN0dW0uCiAgICAgICAgICogQG1lbWJlcm9mIE9ydGhvZ3JhcGhpY0ZydXN0dW0ucHJvdG90eXBlCiAgICAgICAgICogQHR5cGUge09ydGhvZ3JhcGhpY09mZkNlbnRlckZydXN0dW19CiAgICAgICAgICogQHJlYWRvbmx5CiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKi8KICAgICAgICBvZmZDZW50ZXJGcnVzdHVtOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICB1cGRhdGUyKHRoaXMpOwogICAgICAgICAgICByZXR1cm4gdGhpcy5fb2ZmQ2VudGVyRnJ1c3R1bTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgICBPcnRob2dyYXBoaWNGcnVzdHVtLnByb3RvdHlwZS5jb21wdXRlQ3VsbGluZ1ZvbHVtZSA9IGZ1bmN0aW9uKHBvc2l0aW9uLCBkaXJlY3Rpb24yLCB1cCkgewogICAgICAgIHVwZGF0ZTIodGhpcyk7CiAgICAgICAgcmV0dXJuIHRoaXMuX29mZkNlbnRlckZydXN0dW0uY29tcHV0ZUN1bGxpbmdWb2x1bWUocG9zaXRpb24sIGRpcmVjdGlvbjIsIHVwKTsKICAgICAgfTsKICAgICAgT3J0aG9ncmFwaGljRnJ1c3R1bS5wcm90b3R5cGUuZ2V0UGl4ZWxEaW1lbnNpb25zID0gZnVuY3Rpb24oZHJhd2luZ0J1ZmZlcldpZHRoLCBkcmF3aW5nQnVmZmVySGVpZ2h0LCBkaXN0YW5jZSwgcGl4ZWxSYXRpbywgcmVzdWx0KSB7CiAgICAgICAgdXBkYXRlMih0aGlzKTsKICAgICAgICByZXR1cm4gdGhpcy5fb2ZmQ2VudGVyRnJ1c3R1bS5nZXRQaXhlbERpbWVuc2lvbnMoCiAgICAgICAgICBkcmF3aW5nQnVmZmVyV2lkdGgsCiAgICAgICAgICBkcmF3aW5nQnVmZmVySGVpZ2h0LAogICAgICAgICAgZGlzdGFuY2UsCiAgICAgICAgICBwaXhlbFJhdGlvLAogICAgICAgICAgcmVzdWx0CiAgICAgICAgKTsKICAgICAgfTsKICAgICAgT3J0aG9ncmFwaGljRnJ1c3R1bS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbihyZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgT3J0aG9ncmFwaGljRnJ1c3R1bSgpOwogICAgICAgIH0KICAgICAgICByZXN1bHQuYXNwZWN0UmF0aW8gPSB0aGlzLmFzcGVjdFJhdGlvOwogICAgICAgIHJlc3VsdC53aWR0aCA9IHRoaXMud2lkdGg7CiAgICAgICAgcmVzdWx0Lm5lYXIgPSB0aGlzLm5lYXI7CiAgICAgICAgcmVzdWx0LmZhciA9IHRoaXMuZmFyOwogICAgICAgIHJlc3VsdC5fYXNwZWN0UmF0aW8gPSB2b2lkIDA7CiAgICAgICAgcmVzdWx0Ll93aWR0aCA9IHZvaWQgMDsKICAgICAgICByZXN1bHQuX25lYXIgPSB2b2lkIDA7CiAgICAgICAgcmVzdWx0Ll9mYXIgPSB2b2lkIDA7CiAgICAgICAgdGhpcy5fb2ZmQ2VudGVyRnJ1c3R1bS5jbG9uZShyZXN1bHQuX29mZkNlbnRlckZydXN0dW0pOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIE9ydGhvZ3JhcGhpY0ZydXN0dW0ucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uKG90aGVyKSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQob3RoZXIpIHx8ICEob3RoZXIgaW5zdGFuY2VvZiBPcnRob2dyYXBoaWNGcnVzdHVtKSkgewogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICB1cGRhdGUyKHRoaXMpOwogICAgICAgIHVwZGF0ZTIob3RoZXIpOwogICAgICAgIHJldHVybiB0aGlzLndpZHRoID09PSBvdGhlci53aWR0aCAmJiB0aGlzLmFzcGVjdFJhdGlvID09PSBvdGhlci5hc3BlY3RSYXRpbyAmJiB0aGlzLl9vZmZDZW50ZXJGcnVzdHVtLmVxdWFscyhvdGhlci5fb2ZmQ2VudGVyRnJ1c3R1bSk7CiAgICAgIH07CiAgICAgIE9ydGhvZ3JhcGhpY0ZydXN0dW0ucHJvdG90eXBlLmVxdWFsc0Vwc2lsb24gPSBmdW5jdGlvbihvdGhlciwgcmVsYXRpdmVFcHNpbG9uLCBhYnNvbHV0ZUVwc2lsb24pIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChvdGhlcikgfHwgIShvdGhlciBpbnN0YW5jZW9mIE9ydGhvZ3JhcGhpY0ZydXN0dW0pKSB7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIHVwZGF0ZTIodGhpcyk7CiAgICAgICAgdXBkYXRlMihvdGhlcik7CiAgICAgICAgcmV0dXJuIE1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgdGhpcy53aWR0aCwKICAgICAgICAgIG90aGVyLndpZHRoLAogICAgICAgICAgcmVsYXRpdmVFcHNpbG9uLAogICAgICAgICAgYWJzb2x1dGVFcHNpbG9uCiAgICAgICAgKSAmJiBNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbigKICAgICAgICAgIHRoaXMuYXNwZWN0UmF0aW8sCiAgICAgICAgICBvdGhlci5hc3BlY3RSYXRpbywKICAgICAgICAgIHJlbGF0aXZlRXBzaWxvbiwKICAgICAgICAgIGFic29sdXRlRXBzaWxvbgogICAgICAgICkgJiYgdGhpcy5fb2ZmQ2VudGVyRnJ1c3R1bS5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgb3RoZXIuX29mZkNlbnRlckZydXN0dW0sCiAgICAgICAgICByZWxhdGl2ZUVwc2lsb24sCiAgICAgICAgICBhYnNvbHV0ZUVwc2lsb24KICAgICAgICApOwogICAgICB9OwogICAgICBPcnRob2dyYXBoaWNGcnVzdHVtX2RlZmF1bHQgPSBPcnRob2dyYXBoaWNGcnVzdHVtOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUGVyc3BlY3RpdmVPZmZDZW50ZXJGcnVzdHVtLmpzCiAgZnVuY3Rpb24gUGVyc3BlY3RpdmVPZmZDZW50ZXJGcnVzdHVtKG9wdGlvbnMpIHsKICAgIG9wdGlvbnMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLCBkZWZhdWx0VmFsdWVfZGVmYXVsdC5FTVBUWV9PQkpFQ1QpOwogICAgdGhpcy5sZWZ0ID0gb3B0aW9ucy5sZWZ0OwogICAgdGhpcy5fbGVmdCA9IHZvaWQgMDsKICAgIHRoaXMucmlnaHQgPSBvcHRpb25zLnJpZ2h0OwogICAgdGhpcy5fcmlnaHQgPSB2b2lkIDA7CiAgICB0aGlzLnRvcCA9IG9wdGlvbnMudG9wOwogICAgdGhpcy5fdG9wID0gdm9pZCAwOwogICAgdGhpcy5ib3R0b20gPSBvcHRpb25zLmJvdHRvbTsKICAgIHRoaXMuX2JvdHRvbSA9IHZvaWQgMDsKICAgIHRoaXMubmVhciA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMubmVhciwgMSk7CiAgICB0aGlzLl9uZWFyID0gdGhpcy5uZWFyOwogICAgdGhpcy5mYXIgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmZhciwgNWU4KTsKICAgIHRoaXMuX2ZhciA9IHRoaXMuZmFyOwogICAgdGhpcy5fY3VsbGluZ1ZvbHVtZSA9IG5ldyBDdWxsaW5nVm9sdW1lX2RlZmF1bHQoKTsKICAgIHRoaXMuX3BlcnNwZWN0aXZlTWF0cml4ID0gbmV3IE1hdHJpeDRfZGVmYXVsdCgpOwogICAgdGhpcy5faW5maW5pdGVQZXJzcGVjdGl2ZSA9IG5ldyBNYXRyaXg0X2RlZmF1bHQoKTsKICB9CiAgZnVuY3Rpb24gdXBkYXRlMyhmcnVzdHVtKSB7CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChmcnVzdHVtLnJpZ2h0KSB8fCAhZGVmaW5lZF9kZWZhdWx0KGZydXN0dW0ubGVmdCkgfHwgIWRlZmluZWRfZGVmYXVsdChmcnVzdHVtLnRvcCkgfHwgIWRlZmluZWRfZGVmYXVsdChmcnVzdHVtLmJvdHRvbSkgfHwgIWRlZmluZWRfZGVmYXVsdChmcnVzdHVtLm5lYXIpIHx8ICFkZWZpbmVkX2RlZmF1bHQoZnJ1c3R1bS5mYXIpKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICJyaWdodCwgbGVmdCwgdG9wLCBib3R0b20sIG5lYXIsIG9yIGZhciBwYXJhbWV0ZXJzIGFyZSBub3Qgc2V0LiIKICAgICAgKTsKICAgIH0KICAgIGNvbnN0IHsgdG9wLCBib3R0b20sIHJpZ2h0LCBsZWZ0LCBuZWFyLCBmYXIgfSA9IGZydXN0dW07CiAgICBjb25zdCBjaGFuZ2VkID0gdG9wICE9PSBmcnVzdHVtLl90b3AgfHwgYm90dG9tICE9PSBmcnVzdHVtLl9ib3R0b20gfHwgbGVmdCAhPT0gZnJ1c3R1bS5fbGVmdCB8fCByaWdodCAhPT0gZnJ1c3R1bS5fcmlnaHQgfHwgbmVhciAhPT0gZnJ1c3R1bS5fbmVhciB8fCBmYXIgIT09IGZydXN0dW0uX2ZhcjsKICAgIGlmICghY2hhbmdlZCkgewogICAgICByZXR1cm47CiAgICB9CiAgICBpZiAoZnJ1c3R1bS5uZWFyIDw9IDAgfHwgZnJ1c3R1bS5uZWFyID4gZnJ1c3R1bS5mYXIpIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgIm5lYXIgbXVzdCBiZSBncmVhdGVyIHRoYW4gemVybyBhbmQgbGVzcyB0aGFuIGZhci4iCiAgICAgICk7CiAgICB9CiAgICBmcnVzdHVtLl9sZWZ0ID0gbGVmdDsKICAgIGZydXN0dW0uX3JpZ2h0ID0gcmlnaHQ7CiAgICBmcnVzdHVtLl90b3AgPSB0b3A7CiAgICBmcnVzdHVtLl9ib3R0b20gPSBib3R0b207CiAgICBmcnVzdHVtLl9uZWFyID0gbmVhcjsKICAgIGZydXN0dW0uX2ZhciA9IGZhcjsKICAgIGZydXN0dW0uX3BlcnNwZWN0aXZlTWF0cml4ID0gTWF0cml4NF9kZWZhdWx0LmNvbXB1dGVQZXJzcGVjdGl2ZU9mZkNlbnRlcigKICAgICAgbGVmdCwKICAgICAgcmlnaHQsCiAgICAgIGJvdHRvbSwKICAgICAgdG9wLAogICAgICBuZWFyLAogICAgICBmYXIsCiAgICAgIGZydXN0dW0uX3BlcnNwZWN0aXZlTWF0cml4CiAgICApOwogICAgZnJ1c3R1bS5faW5maW5pdGVQZXJzcGVjdGl2ZSA9IE1hdHJpeDRfZGVmYXVsdC5jb21wdXRlSW5maW5pdGVQZXJzcGVjdGl2ZU9mZkNlbnRlcigKICAgICAgbGVmdCwKICAgICAgcmlnaHQsCiAgICAgIGJvdHRvbSwKICAgICAgdG9wLAogICAgICBuZWFyLAogICAgICBmcnVzdHVtLl9pbmZpbml0ZVBlcnNwZWN0aXZlCiAgICApOwogIH0KICB2YXIgZ2V0UGxhbmVzUmlnaHQyLCBnZXRQbGFuZXNOZWFyQ2VudGVyMiwgZ2V0UGxhbmVzRmFyQ2VudGVyLCBnZXRQbGFuZXNOb3JtYWwsIFBlcnNwZWN0aXZlT2ZmQ2VudGVyRnJ1c3R1bV9kZWZhdWx0OwogIHZhciBpbml0X1BlcnNwZWN0aXZlT2ZmQ2VudGVyRnJ1c3R1bSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUGVyc3BlY3RpdmVPZmZDZW50ZXJGcnVzdHVtLmpzIigpIHsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuNCgpOwogICAgICBpbml0X0N1bGxpbmdWb2x1bWUoKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIGluaXRfTWF0cml4NCgpOwogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhQZXJzcGVjdGl2ZU9mZkNlbnRlckZydXN0dW0ucHJvdG90eXBlLCB7CiAgICAgICAgLyoqCiAgICAgICAgICogR2V0cyB0aGUgcGVyc3BlY3RpdmUgcHJvamVjdGlvbiBtYXRyaXggY29tcHV0ZWQgZnJvbSB0aGUgdmlldyBmcnVzdHVtLgogICAgICAgICAqIFRoZSBwcm9qZWN0aW9uIG1hdHJpeCB3aWxsIGJlIHJlY29tcHV0ZWQgaWYgYW55IGZydXN0dW0gcGFyYW1ldGVycyBoYXZlIGNoYW5nZWQuCiAgICAgICAgICoKICAgICAgICAgKiBAbWVtYmVyb2YgUGVyc3BlY3RpdmVPZmZDZW50ZXJGcnVzdHVtLnByb3RvdHlwZQogICAgICAgICAqIEB0eXBlIHtNYXRyaXg0fQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqCiAgICAgICAgICogQHNlZSBQZXJzcGVjdGl2ZU9mZkNlbnRlckZydXN0dW0jaW5maW5pdGVQcm9qZWN0aW9uTWF0cml4CiAgICAgICAgICovCiAgICAgICAgcHJvamVjdGlvbk1hdHJpeDogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdXBkYXRlMyh0aGlzKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BlcnNwZWN0aXZlTWF0cml4OwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgLyoqCiAgICAgICAgICogR2V0cyB0aGUgcGVyc3BlY3RpdmUgcHJvamVjdGlvbiBtYXRyaXggY29tcHV0ZWQgZnJvbSB0aGUgdmlldyBmcnVzdHVtIHdpdGggYW4gaW5maW5pdGUgZmFyIHBsYW5lLgogICAgICAgICAqIEBtZW1iZXJvZiBQZXJzcGVjdGl2ZU9mZkNlbnRlckZydXN0dW0ucHJvdG90eXBlCiAgICAgICAgICogQHR5cGUge01hdHJpeDR9CiAgICAgICAgICogQHJlYWRvbmx5CiAgICAgICAgICoKICAgICAgICAgKiBAc2VlIFBlcnNwZWN0aXZlT2ZmQ2VudGVyRnJ1c3R1bSNwcm9qZWN0aW9uTWF0cml4CiAgICAgICAgICovCiAgICAgICAgaW5maW5pdGVQcm9qZWN0aW9uTWF0cml4OiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICB1cGRhdGUzKHRoaXMpOwogICAgICAgICAgICByZXR1cm4gdGhpcy5faW5maW5pdGVQZXJzcGVjdGl2ZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgICBnZXRQbGFuZXNSaWdodDIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGdldFBsYW5lc05lYXJDZW50ZXIyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBnZXRQbGFuZXNGYXJDZW50ZXIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGdldFBsYW5lc05vcm1hbCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgUGVyc3BlY3RpdmVPZmZDZW50ZXJGcnVzdHVtLnByb3RvdHlwZS5jb21wdXRlQ3VsbGluZ1ZvbHVtZSA9IGZ1bmN0aW9uKHBvc2l0aW9uLCBkaXJlY3Rpb24yLCB1cCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHBvc2l0aW9uKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInBvc2l0aW9uIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChkaXJlY3Rpb24yKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImRpcmVjdGlvbiBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQodXApKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgidXAgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHBsYW5lcyA9IHRoaXMuX2N1bGxpbmdWb2x1bWUucGxhbmVzOwogICAgICAgIGNvbnN0IHQgPSB0aGlzLnRvcDsKICAgICAgICBjb25zdCBiID0gdGhpcy5ib3R0b207CiAgICAgICAgY29uc3QgciA9IHRoaXMucmlnaHQ7CiAgICAgICAgY29uc3QgbCA9IHRoaXMubGVmdDsKICAgICAgICBjb25zdCBuID0gdGhpcy5uZWFyOwogICAgICAgIGNvbnN0IGYgPSB0aGlzLmZhcjsKICAgICAgICBjb25zdCByaWdodCA9IENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyhkaXJlY3Rpb24yLCB1cCwgZ2V0UGxhbmVzUmlnaHQyKTsKICAgICAgICBjb25zdCBuZWFyQ2VudGVyID0gZ2V0UGxhbmVzTmVhckNlbnRlcjI7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIoZGlyZWN0aW9uMiwgbiwgbmVhckNlbnRlcik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChwb3NpdGlvbiwgbmVhckNlbnRlciwgbmVhckNlbnRlcik7CiAgICAgICAgY29uc3QgZmFyQ2VudGVyID0gZ2V0UGxhbmVzRmFyQ2VudGVyOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKGRpcmVjdGlvbjIsIGYsIGZhckNlbnRlcik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChwb3NpdGlvbiwgZmFyQ2VudGVyLCBmYXJDZW50ZXIpOwogICAgICAgIGNvbnN0IG5vcm1hbDIgPSBnZXRQbGFuZXNOb3JtYWw7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIocmlnaHQsIGwsIG5vcm1hbDIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQobmVhckNlbnRlciwgbm9ybWFsMiwgbm9ybWFsMik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KG5vcm1hbDIsIHBvc2l0aW9uLCBub3JtYWwyKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKG5vcm1hbDIsIG5vcm1hbDIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyhub3JtYWwyLCB1cCwgbm9ybWFsMik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShub3JtYWwyLCBub3JtYWwyKTsKICAgICAgICBsZXQgcGxhbmUgPSBwbGFuZXNbMF07CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocGxhbmUpKSB7CiAgICAgICAgICBwbGFuZSA9IHBsYW5lc1swXSA9IG5ldyBDYXJ0ZXNpYW40X2RlZmF1bHQoKTsKICAgICAgICB9CiAgICAgICAgcGxhbmUueCA9IG5vcm1hbDIueDsKICAgICAgICBwbGFuZS55ID0gbm9ybWFsMi55OwogICAgICAgIHBsYW5lLnogPSBub3JtYWwyLno7CiAgICAgICAgcGxhbmUudyA9IC1DYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KG5vcm1hbDIsIHBvc2l0aW9uKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcihyaWdodCwgciwgbm9ybWFsMik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChuZWFyQ2VudGVyLCBub3JtYWwyLCBub3JtYWwyKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3Qobm9ybWFsMiwgcG9zaXRpb24sIG5vcm1hbDIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyh1cCwgbm9ybWFsMiwgbm9ybWFsMik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShub3JtYWwyLCBub3JtYWwyKTsKICAgICAgICBwbGFuZSA9IHBsYW5lc1sxXTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwbGFuZSkpIHsKICAgICAgICAgIHBsYW5lID0gcGxhbmVzWzFdID0gbmV3IENhcnRlc2lhbjRfZGVmYXVsdCgpOwogICAgICAgIH0KICAgICAgICBwbGFuZS54ID0gbm9ybWFsMi54OwogICAgICAgIHBsYW5lLnkgPSBub3JtYWwyLnk7CiAgICAgICAgcGxhbmUueiA9IG5vcm1hbDIuejsKICAgICAgICBwbGFuZS53ID0gLUNhcnRlc2lhbjNfZGVmYXVsdC5kb3Qobm9ybWFsMiwgcG9zaXRpb24pOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKHVwLCBiLCBub3JtYWwyKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKG5lYXJDZW50ZXIsIG5vcm1hbDIsIG5vcm1hbDIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChub3JtYWwyLCBwb3NpdGlvbiwgbm9ybWFsMik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKHJpZ2h0LCBub3JtYWwyLCBub3JtYWwyKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKG5vcm1hbDIsIG5vcm1hbDIpOwogICAgICAgIHBsYW5lID0gcGxhbmVzWzJdOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHBsYW5lKSkgewogICAgICAgICAgcGxhbmUgPSBwbGFuZXNbMl0gPSBuZXcgQ2FydGVzaWFuNF9kZWZhdWx0KCk7CiAgICAgICAgfQogICAgICAgIHBsYW5lLnggPSBub3JtYWwyLng7CiAgICAgICAgcGxhbmUueSA9IG5vcm1hbDIueTsKICAgICAgICBwbGFuZS56ID0gbm9ybWFsMi56OwogICAgICAgIHBsYW5lLncgPSAtQ2FydGVzaWFuM19kZWZhdWx0LmRvdChub3JtYWwyLCBwb3NpdGlvbik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIodXAsIHQsIG5vcm1hbDIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQobmVhckNlbnRlciwgbm9ybWFsMiwgbm9ybWFsMik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KG5vcm1hbDIsIHBvc2l0aW9uLCBub3JtYWwyKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY3Jvc3Mobm9ybWFsMiwgcmlnaHQsIG5vcm1hbDIpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUobm9ybWFsMiwgbm9ybWFsMik7CiAgICAgICAgcGxhbmUgPSBwbGFuZXNbM107CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocGxhbmUpKSB7CiAgICAgICAgICBwbGFuZSA9IHBsYW5lc1szXSA9IG5ldyBDYXJ0ZXNpYW40X2RlZmF1bHQoKTsKICAgICAgICB9CiAgICAgICAgcGxhbmUueCA9IG5vcm1hbDIueDsKICAgICAgICBwbGFuZS55ID0gbm9ybWFsMi55OwogICAgICAgIHBsYW5lLnogPSBub3JtYWwyLno7CiAgICAgICAgcGxhbmUudyA9IC1DYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KG5vcm1hbDIsIHBvc2l0aW9uKTsKICAgICAgICBwbGFuZSA9IHBsYW5lc1s0XTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwbGFuZSkpIHsKICAgICAgICAgIHBsYW5lID0gcGxhbmVzWzRdID0gbmV3IENhcnRlc2lhbjRfZGVmYXVsdCgpOwogICAgICAgIH0KICAgICAgICBwbGFuZS54ID0gZGlyZWN0aW9uMi54OwogICAgICAgIHBsYW5lLnkgPSBkaXJlY3Rpb24yLnk7CiAgICAgICAgcGxhbmUueiA9IGRpcmVjdGlvbjIuejsKICAgICAgICBwbGFuZS53ID0gLUNhcnRlc2lhbjNfZGVmYXVsdC5kb3QoZGlyZWN0aW9uMiwgbmVhckNlbnRlcik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5lZ2F0ZShkaXJlY3Rpb24yLCBub3JtYWwyKTsKICAgICAgICBwbGFuZSA9IHBsYW5lc1s1XTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwbGFuZSkpIHsKICAgICAgICAgIHBsYW5lID0gcGxhbmVzWzVdID0gbmV3IENhcnRlc2lhbjRfZGVmYXVsdCgpOwogICAgICAgIH0KICAgICAgICBwbGFuZS54ID0gbm9ybWFsMi54OwogICAgICAgIHBsYW5lLnkgPSBub3JtYWwyLnk7CiAgICAgICAgcGxhbmUueiA9IG5vcm1hbDIuejsKICAgICAgICBwbGFuZS53ID0gLUNhcnRlc2lhbjNfZGVmYXVsdC5kb3Qobm9ybWFsMiwgZmFyQ2VudGVyKTsKICAgICAgICByZXR1cm4gdGhpcy5fY3VsbGluZ1ZvbHVtZTsKICAgICAgfTsKICAgICAgUGVyc3BlY3RpdmVPZmZDZW50ZXJGcnVzdHVtLnByb3RvdHlwZS5nZXRQaXhlbERpbWVuc2lvbnMgPSBmdW5jdGlvbihkcmF3aW5nQnVmZmVyV2lkdGgsIGRyYXdpbmdCdWZmZXJIZWlnaHQsIGRpc3RhbmNlLCBwaXhlbFJhdGlvLCByZXN1bHQpIHsKICAgICAgICB1cGRhdGUzKHRoaXMpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGRyYXdpbmdCdWZmZXJXaWR0aCkgfHwgIWRlZmluZWRfZGVmYXVsdChkcmF3aW5nQnVmZmVySGVpZ2h0KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgICJCb3RoIGRyYXdpbmdCdWZmZXJXaWR0aCBhbmQgZHJhd2luZ0J1ZmZlckhlaWdodCBhcmUgcmVxdWlyZWQuIgogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgaWYgKGRyYXdpbmdCdWZmZXJXaWR0aCA8PSAwKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiZHJhd2luZ0J1ZmZlcldpZHRoIG11c3QgYmUgZ3JlYXRlciB0aGFuIHplcm8uIik7CiAgICAgICAgfQogICAgICAgIGlmIChkcmF3aW5nQnVmZmVySGVpZ2h0IDw9IDApIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJkcmF3aW5nQnVmZmVySGVpZ2h0IG11c3QgYmUgZ3JlYXRlciB0aGFuIHplcm8uIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGRpc3RhbmNlKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImRpc3RhbmNlIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwaXhlbFJhdGlvKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInBpeGVsUmF0aW8gaXMgcmVxdWlyZWQiKTsKICAgICAgICB9CiAgICAgICAgaWYgKHBpeGVsUmF0aW8gPD0gMCkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInBpeGVsUmF0aW8gbXVzdCBiZSBncmVhdGVyIHRoYW4gemVyby4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoIkEgcmVzdWx0IG9iamVjdCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgaW52ZXJzZU5lYXIgPSAxIC8gdGhpcy5uZWFyOwogICAgICAgIGxldCB0YW5UaGV0YSA9IHRoaXMudG9wICogaW52ZXJzZU5lYXI7CiAgICAgICAgY29uc3QgcGl4ZWxIZWlnaHQgPSAyICogcGl4ZWxSYXRpbyAqIGRpc3RhbmNlICogdGFuVGhldGEgLyBkcmF3aW5nQnVmZmVySGVpZ2h0OwogICAgICAgIHRhblRoZXRhID0gdGhpcy5yaWdodCAqIGludmVyc2VOZWFyOwogICAgICAgIGNvbnN0IHBpeGVsV2lkdGggPSAyICogcGl4ZWxSYXRpbyAqIGRpc3RhbmNlICogdGFuVGhldGEgLyBkcmF3aW5nQnVmZmVyV2lkdGg7CiAgICAgICAgcmVzdWx0LnggPSBwaXhlbFdpZHRoOwogICAgICAgIHJlc3VsdC55ID0gcGl4ZWxIZWlnaHQ7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgUGVyc3BlY3RpdmVPZmZDZW50ZXJGcnVzdHVtLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBQZXJzcGVjdGl2ZU9mZkNlbnRlckZydXN0dW0oKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LnJpZ2h0ID0gdGhpcy5yaWdodDsKICAgICAgICByZXN1bHQubGVmdCA9IHRoaXMubGVmdDsKICAgICAgICByZXN1bHQudG9wID0gdGhpcy50b3A7CiAgICAgICAgcmVzdWx0LmJvdHRvbSA9IHRoaXMuYm90dG9tOwogICAgICAgIHJlc3VsdC5uZWFyID0gdGhpcy5uZWFyOwogICAgICAgIHJlc3VsdC5mYXIgPSB0aGlzLmZhcjsKICAgICAgICByZXN1bHQuX2xlZnQgPSB2b2lkIDA7CiAgICAgICAgcmVzdWx0Ll9yaWdodCA9IHZvaWQgMDsKICAgICAgICByZXN1bHQuX3RvcCA9IHZvaWQgMDsKICAgICAgICByZXN1bHQuX2JvdHRvbSA9IHZvaWQgMDsKICAgICAgICByZXN1bHQuX25lYXIgPSB2b2lkIDA7CiAgICAgICAgcmVzdWx0Ll9mYXIgPSB2b2lkIDA7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgUGVyc3BlY3RpdmVPZmZDZW50ZXJGcnVzdHVtLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbihvdGhlcikgewogICAgICAgIHJldHVybiBkZWZpbmVkX2RlZmF1bHQob3RoZXIpICYmIG90aGVyIGluc3RhbmNlb2YgUGVyc3BlY3RpdmVPZmZDZW50ZXJGcnVzdHVtICYmIHRoaXMucmlnaHQgPT09IG90aGVyLnJpZ2h0ICYmIHRoaXMubGVmdCA9PT0gb3RoZXIubGVmdCAmJiB0aGlzLnRvcCA9PT0gb3RoZXIudG9wICYmIHRoaXMuYm90dG9tID09PSBvdGhlci5ib3R0b20gJiYgdGhpcy5uZWFyID09PSBvdGhlci5uZWFyICYmIHRoaXMuZmFyID09PSBvdGhlci5mYXI7CiAgICAgIH07CiAgICAgIFBlcnNwZWN0aXZlT2ZmQ2VudGVyRnJ1c3R1bS5wcm90b3R5cGUuZXF1YWxzRXBzaWxvbiA9IGZ1bmN0aW9uKG90aGVyLCByZWxhdGl2ZUVwc2lsb24sIGFic29sdXRlRXBzaWxvbikgewogICAgICAgIHJldHVybiBvdGhlciA9PT0gdGhpcyB8fCBkZWZpbmVkX2RlZmF1bHQob3RoZXIpICYmIG90aGVyIGluc3RhbmNlb2YgUGVyc3BlY3RpdmVPZmZDZW50ZXJGcnVzdHVtICYmIE1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgdGhpcy5yaWdodCwKICAgICAgICAgIG90aGVyLnJpZ2h0LAogICAgICAgICAgcmVsYXRpdmVFcHNpbG9uLAogICAgICAgICAgYWJzb2x1dGVFcHNpbG9uCiAgICAgICAgKSAmJiBNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbigKICAgICAgICAgIHRoaXMubGVmdCwKICAgICAgICAgIG90aGVyLmxlZnQsCiAgICAgICAgICByZWxhdGl2ZUVwc2lsb24sCiAgICAgICAgICBhYnNvbHV0ZUVwc2lsb24KICAgICAgICApICYmIE1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgdGhpcy50b3AsCiAgICAgICAgICBvdGhlci50b3AsCiAgICAgICAgICByZWxhdGl2ZUVwc2lsb24sCiAgICAgICAgICBhYnNvbHV0ZUVwc2lsb24KICAgICAgICApICYmIE1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgdGhpcy5ib3R0b20sCiAgICAgICAgICBvdGhlci5ib3R0b20sCiAgICAgICAgICByZWxhdGl2ZUVwc2lsb24sCiAgICAgICAgICBhYnNvbHV0ZUVwc2lsb24KICAgICAgICApICYmIE1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgdGhpcy5uZWFyLAogICAgICAgICAgb3RoZXIubmVhciwKICAgICAgICAgIHJlbGF0aXZlRXBzaWxvbiwKICAgICAgICAgIGFic29sdXRlRXBzaWxvbgogICAgICAgICkgJiYgTWF0aF9kZWZhdWx0LmVxdWFsc0Vwc2lsb24oCiAgICAgICAgICB0aGlzLmZhciwKICAgICAgICAgIG90aGVyLmZhciwKICAgICAgICAgIHJlbGF0aXZlRXBzaWxvbiwKICAgICAgICAgIGFic29sdXRlRXBzaWxvbgogICAgICAgICk7CiAgICAgIH07CiAgICAgIFBlcnNwZWN0aXZlT2ZmQ2VudGVyRnJ1c3R1bV9kZWZhdWx0ID0gUGVyc3BlY3RpdmVPZmZDZW50ZXJGcnVzdHVtOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUGVyc3BlY3RpdmVGcnVzdHVtLmpzCiAgZnVuY3Rpb24gUGVyc3BlY3RpdmVGcnVzdHVtKG9wdGlvbnMpIHsKICAgIG9wdGlvbnMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLCBkZWZhdWx0VmFsdWVfZGVmYXVsdC5FTVBUWV9PQkpFQ1QpOwogICAgdGhpcy5fb2ZmQ2VudGVyRnJ1c3R1bSA9IG5ldyBQZXJzcGVjdGl2ZU9mZkNlbnRlckZydXN0dW1fZGVmYXVsdCgpOwogICAgdGhpcy5mb3YgPSBvcHRpb25zLmZvdjsKICAgIHRoaXMuX2ZvdiA9IHZvaWQgMDsKICAgIHRoaXMuX2ZvdnkgPSB2b2lkIDA7CiAgICB0aGlzLl9zc2VEZW5vbWluYXRvciA9IHZvaWQgMDsKICAgIHRoaXMuYXNwZWN0UmF0aW8gPSBvcHRpb25zLmFzcGVjdFJhdGlvOwogICAgdGhpcy5fYXNwZWN0UmF0aW8gPSB2b2lkIDA7CiAgICB0aGlzLm5lYXIgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLm5lYXIsIDEpOwogICAgdGhpcy5fbmVhciA9IHRoaXMubmVhcjsKICAgIHRoaXMuZmFyID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5mYXIsIDVlOCk7CiAgICB0aGlzLl9mYXIgPSB0aGlzLmZhcjsKICAgIHRoaXMueE9mZnNldCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMueE9mZnNldCwgMCk7CiAgICB0aGlzLl94T2Zmc2V0ID0gdGhpcy54T2Zmc2V0OwogICAgdGhpcy55T2Zmc2V0ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy55T2Zmc2V0LCAwKTsKICAgIHRoaXMuX3lPZmZzZXQgPSB0aGlzLnlPZmZzZXQ7CiAgfQogIGZ1bmN0aW9uIHVwZGF0ZTQoZnJ1c3R1bSkgewogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoZnJ1c3R1bS5mb3YpIHx8ICFkZWZpbmVkX2RlZmF1bHQoZnJ1c3R1bS5hc3BlY3RSYXRpbykgfHwgIWRlZmluZWRfZGVmYXVsdChmcnVzdHVtLm5lYXIpIHx8ICFkZWZpbmVkX2RlZmF1bHQoZnJ1c3R1bS5mYXIpKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICJmb3YsIGFzcGVjdFJhdGlvLCBuZWFyLCBvciBmYXIgcGFyYW1ldGVycyBhcmUgbm90IHNldC4iCiAgICAgICk7CiAgICB9CiAgICBjb25zdCBjaGFuZ2VkID0gZnJ1c3R1bS5mb3YgIT09IGZydXN0dW0uX2ZvdiB8fCBmcnVzdHVtLmFzcGVjdFJhdGlvICE9PSBmcnVzdHVtLl9hc3BlY3RSYXRpbyB8fCBmcnVzdHVtLm5lYXIgIT09IGZydXN0dW0uX25lYXIgfHwgZnJ1c3R1bS5mYXIgIT09IGZydXN0dW0uX2ZhciB8fCBmcnVzdHVtLnhPZmZzZXQgIT09IGZydXN0dW0uX3hPZmZzZXQgfHwgZnJ1c3R1bS55T2Zmc2V0ICE9PSBmcnVzdHVtLl95T2Zmc2V0OwogICAgaWYgKCFjaGFuZ2VkKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbk9yRXF1YWxzKCJmb3YiLCBmcnVzdHVtLmZvdiwgMCk7CiAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIubGVzc1RoYW4oImZvdiIsIGZydXN0dW0uZm92LCBNYXRoLlBJKTsKICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5ncmVhdGVyVGhhbk9yRXF1YWxzKAogICAgICAiYXNwZWN0UmF0aW8iLAogICAgICBmcnVzdHVtLmFzcGVjdFJhdGlvLAogICAgICAwCiAgICApOwogICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmdyZWF0ZXJUaGFuT3JFcXVhbHMoIm5lYXIiLCBmcnVzdHVtLm5lYXIsIDApOwogICAgaWYgKGZydXN0dW0ubmVhciA+IGZydXN0dW0uZmFyKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJuZWFyIG11c3QgYmUgbGVzcyB0aGFuIGZhci4iKTsKICAgIH0KICAgIGZydXN0dW0uX2FzcGVjdFJhdGlvID0gZnJ1c3R1bS5hc3BlY3RSYXRpbzsKICAgIGZydXN0dW0uX2ZvdiA9IGZydXN0dW0uZm92OwogICAgZnJ1c3R1bS5fZm92eSA9IGZydXN0dW0uYXNwZWN0UmF0aW8gPD0gMSA/IGZydXN0dW0uZm92IDogTWF0aC5hdGFuKE1hdGgudGFuKGZydXN0dW0uZm92ICogMC41KSAvIGZydXN0dW0uYXNwZWN0UmF0aW8pICogMjsKICAgIGZydXN0dW0uX25lYXIgPSBmcnVzdHVtLm5lYXI7CiAgICBmcnVzdHVtLl9mYXIgPSBmcnVzdHVtLmZhcjsKICAgIGZydXN0dW0uX3NzZURlbm9taW5hdG9yID0gMiAqIE1hdGgudGFuKDAuNSAqIGZydXN0dW0uX2ZvdnkpOwogICAgZnJ1c3R1bS5feE9mZnNldCA9IGZydXN0dW0ueE9mZnNldDsKICAgIGZydXN0dW0uX3lPZmZzZXQgPSBmcnVzdHVtLnlPZmZzZXQ7CiAgICBjb25zdCBmID0gZnJ1c3R1bS5fb2ZmQ2VudGVyRnJ1c3R1bTsKICAgIGYudG9wID0gZnJ1c3R1bS5uZWFyICogTWF0aC50YW4oMC41ICogZnJ1c3R1bS5fZm92eSk7CiAgICBmLmJvdHRvbSA9IC1mLnRvcDsKICAgIGYucmlnaHQgPSBmcnVzdHVtLmFzcGVjdFJhdGlvICogZi50b3A7CiAgICBmLmxlZnQgPSAtZi5yaWdodDsKICAgIGYubmVhciA9IGZydXN0dW0ubmVhcjsKICAgIGYuZmFyID0gZnJ1c3R1bS5mYXI7CiAgICBmLnJpZ2h0ICs9IGZydXN0dW0ueE9mZnNldDsKICAgIGYubGVmdCArPSBmcnVzdHVtLnhPZmZzZXQ7CiAgICBmLnRvcCArPSBmcnVzdHVtLnlPZmZzZXQ7CiAgICBmLmJvdHRvbSArPSBmcnVzdHVtLnlPZmZzZXQ7CiAgfQogIHZhciBQZXJzcGVjdGl2ZUZydXN0dW1fZGVmYXVsdDsKICB2YXIgaW5pdF9QZXJzcGVjdGl2ZUZydXN0dW0gPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1BlcnNwZWN0aXZlRnJ1c3R1bS5qcyIoKSB7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIGluaXRfUGVyc3BlY3RpdmVPZmZDZW50ZXJGcnVzdHVtKCk7CiAgICAgIFBlcnNwZWN0aXZlRnJ1c3R1bS5wYWNrZWRMZW5ndGggPSA2OwogICAgICBQZXJzcGVjdGl2ZUZydXN0dW0ucGFjayA9IGZ1bmN0aW9uKHZhbHVlLCBhcnJheSwgc3RhcnRpbmdJbmRleCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidmFsdWUiLCB2YWx1ZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLmZvdjsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuYXNwZWN0UmF0aW87CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLm5lYXI7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLmZhcjsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUueE9mZnNldDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4XSA9IHZhbHVlLnlPZmZzZXQ7CiAgICAgICAgcmV0dXJuIGFycmF5OwogICAgICB9OwogICAgICBQZXJzcGVjdGl2ZUZydXN0dW0udW5wYWNrID0gZnVuY3Rpb24oYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBQZXJzcGVjdGl2ZUZydXN0dW0oKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LmZvdiA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgcmVzdWx0LmFzcGVjdFJhdGlvID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICByZXN1bHQubmVhciA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgcmVzdWx0LmZhciA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgcmVzdWx0LnhPZmZzZXQgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIHJlc3VsdC55T2Zmc2V0ID0gYXJyYXlbc3RhcnRpbmdJbmRleF07CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoUGVyc3BlY3RpdmVGcnVzdHVtLnByb3RvdHlwZSwgewogICAgICAgIC8qKgogICAgICAgICAqIEdldHMgdGhlIHBlcnNwZWN0aXZlIHByb2plY3Rpb24gbWF0cml4IGNvbXB1dGVkIGZyb20gdGhlIHZpZXcgZnJ1c3R1bS4KICAgICAgICAgKiBJZiBuZWNlc3NhcnksIHRoZSBwcm9qZWN0aW9uIG1hdHJpeCB3aWxsIGJlIHJlY29tcHV0ZWQuCiAgICAgICAgICoKICAgICAgICAgKiBAbWVtYmVyb2YgUGVyc3BlY3RpdmVGcnVzdHVtLnByb3RvdHlwZQogICAgICAgICAqIEB0eXBlIHtNYXRyaXg0fQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqCiAgICAgICAgICogQHNlZSBQZXJzcGVjdGl2ZU9mZkNlbnRlckZydXN0dW0jcHJvamVjdGlvbk1hdHJpeC4KICAgICAgICAgKiBAc2VlIFBlcnNwZWN0aXZlRnJ1c3R1bSNpbmZpbml0ZVByb2plY3Rpb25NYXRyaXgKICAgICAgICAgKi8KICAgICAgICBwcm9qZWN0aW9uTWF0cml4OiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICB1cGRhdGU0KHRoaXMpOwogICAgICAgICAgICByZXR1cm4gdGhpcy5fb2ZmQ2VudGVyRnJ1c3R1bS5wcm9qZWN0aW9uTWF0cml4OwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgLyoqCiAgICAgICAgICogVGhlIHBlcnNwZWN0aXZlIHByb2plY3Rpb24gbWF0cml4IGNvbXB1dGVkIGZyb20gdGhlIHZpZXcgZnJ1c3R1bSB3aXRoIGFuIGluZmluaXRlIGZhciBwbGFuZS4KICAgICAgICAgKiBAbWVtYmVyb2YgUGVyc3BlY3RpdmVGcnVzdHVtLnByb3RvdHlwZQogICAgICAgICAqIEB0eXBlIHtNYXRyaXg0fQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqCiAgICAgICAgICogQHNlZSBQZXJzcGVjdGl2ZUZydXN0dW0jcHJvamVjdGlvbk1hdHJpeAogICAgICAgICAqLwogICAgICAgIGluZmluaXRlUHJvamVjdGlvbk1hdHJpeDogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdXBkYXRlNCh0aGlzKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29mZkNlbnRlckZydXN0dW0uaW5maW5pdGVQcm9qZWN0aW9uTWF0cml4OwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgLyoqCiAgICAgICAgICogR2V0cyB0aGUgYW5nbGUgb2YgdGhlIHZlcnRpY2FsIGZpZWxkIG9mIHZpZXcsIGluIHJhZGlhbnMuCiAgICAgICAgICogQG1lbWJlcm9mIFBlcnNwZWN0aXZlRnJ1c3R1bS5wcm90b3R5cGUKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfHVuZGVmaW5lZH0KICAgICAgICAgKiBAcmVhZG9ubHkKICAgICAgICAgKiBAZGVmYXVsdCB1bmRlZmluZWQKICAgICAgICAgKi8KICAgICAgICBmb3Z5OiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICB1cGRhdGU0KHRoaXMpOwogICAgICAgICAgICByZXR1cm4gdGhpcy5fZm92eTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqIEBwcml2YXRlCiAgICAgICAgICovCiAgICAgICAgc3NlRGVub21pbmF0b3I6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHVwZGF0ZTQodGhpcyk7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zc2VEZW5vbWluYXRvcjsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIEdldHMgdGhlIG9ydGhvZ3JhcGhpYyBwcm9qZWN0aW9uIG1hdHJpeCBjb21wdXRlZCBmcm9tIHRoZSB2aWV3IGZydXN0dW0uCiAgICAgICAgICogQG1lbWJlcm9mIFBlcnNwZWN0aXZlRnJ1c3R1bS5wcm90b3R5cGUKICAgICAgICAgKiBAdHlwZSB7UGVyc3BlY3RpdmVPZmZDZW50ZXJGcnVzdHVtfQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqIEBwcml2YXRlCiAgICAgICAgICovCiAgICAgICAgb2ZmQ2VudGVyRnJ1c3R1bTogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdXBkYXRlNCh0aGlzKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29mZkNlbnRlckZydXN0dW07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgICAgUGVyc3BlY3RpdmVGcnVzdHVtLnByb3RvdHlwZS5jb21wdXRlQ3VsbGluZ1ZvbHVtZSA9IGZ1bmN0aW9uKHBvc2l0aW9uLCBkaXJlY3Rpb24yLCB1cCkgewogICAgICAgIHVwZGF0ZTQodGhpcyk7CiAgICAgICAgcmV0dXJuIHRoaXMuX29mZkNlbnRlckZydXN0dW0uY29tcHV0ZUN1bGxpbmdWb2x1bWUocG9zaXRpb24sIGRpcmVjdGlvbjIsIHVwKTsKICAgICAgfTsKICAgICAgUGVyc3BlY3RpdmVGcnVzdHVtLnByb3RvdHlwZS5nZXRQaXhlbERpbWVuc2lvbnMgPSBmdW5jdGlvbihkcmF3aW5nQnVmZmVyV2lkdGgsIGRyYXdpbmdCdWZmZXJIZWlnaHQsIGRpc3RhbmNlLCBwaXhlbFJhdGlvLCByZXN1bHQpIHsKICAgICAgICB1cGRhdGU0KHRoaXMpOwogICAgICAgIHJldHVybiB0aGlzLl9vZmZDZW50ZXJGcnVzdHVtLmdldFBpeGVsRGltZW5zaW9ucygKICAgICAgICAgIGRyYXdpbmdCdWZmZXJXaWR0aCwKICAgICAgICAgIGRyYXdpbmdCdWZmZXJIZWlnaHQsCiAgICAgICAgICBkaXN0YW5jZSwKICAgICAgICAgIHBpeGVsUmF0aW8sCiAgICAgICAgICByZXN1bHQKICAgICAgICApOwogICAgICB9OwogICAgICBQZXJzcGVjdGl2ZUZydXN0dW0ucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24ocmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IFBlcnNwZWN0aXZlRnJ1c3R1bSgpOwogICAgICAgIH0KICAgICAgICByZXN1bHQuYXNwZWN0UmF0aW8gPSB0aGlzLmFzcGVjdFJhdGlvOwogICAgICAgIHJlc3VsdC5mb3YgPSB0aGlzLmZvdjsKICAgICAgICByZXN1bHQubmVhciA9IHRoaXMubmVhcjsKICAgICAgICByZXN1bHQuZmFyID0gdGhpcy5mYXI7CiAgICAgICAgcmVzdWx0Ll9hc3BlY3RSYXRpbyA9IHZvaWQgMDsKICAgICAgICByZXN1bHQuX2ZvdiA9IHZvaWQgMDsKICAgICAgICByZXN1bHQuX25lYXIgPSB2b2lkIDA7CiAgICAgICAgcmVzdWx0Ll9mYXIgPSB2b2lkIDA7CiAgICAgICAgdGhpcy5fb2ZmQ2VudGVyRnJ1c3R1bS5jbG9uZShyZXN1bHQuX29mZkNlbnRlckZydXN0dW0pOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFBlcnNwZWN0aXZlRnJ1c3R1bS5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24ob3RoZXIpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChvdGhlcikgfHwgIShvdGhlciBpbnN0YW5jZW9mIFBlcnNwZWN0aXZlRnJ1c3R1bSkpIHsKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgdXBkYXRlNCh0aGlzKTsKICAgICAgICB1cGRhdGU0KG90aGVyKTsKICAgICAgICByZXR1cm4gdGhpcy5mb3YgPT09IG90aGVyLmZvdiAmJiB0aGlzLmFzcGVjdFJhdGlvID09PSBvdGhlci5hc3BlY3RSYXRpbyAmJiB0aGlzLl9vZmZDZW50ZXJGcnVzdHVtLmVxdWFscyhvdGhlci5fb2ZmQ2VudGVyRnJ1c3R1bSk7CiAgICAgIH07CiAgICAgIFBlcnNwZWN0aXZlRnJ1c3R1bS5wcm90b3R5cGUuZXF1YWxzRXBzaWxvbiA9IGZ1bmN0aW9uKG90aGVyLCByZWxhdGl2ZUVwc2lsb24sIGFic29sdXRlRXBzaWxvbikgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KG90aGVyKSB8fCAhKG90aGVyIGluc3RhbmNlb2YgUGVyc3BlY3RpdmVGcnVzdHVtKSkgewogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICB1cGRhdGU0KHRoaXMpOwogICAgICAgIHVwZGF0ZTQob3RoZXIpOwogICAgICAgIHJldHVybiBNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbigKICAgICAgICAgIHRoaXMuZm92LAogICAgICAgICAgb3RoZXIuZm92LAogICAgICAgICAgcmVsYXRpdmVFcHNpbG9uLAogICAgICAgICAgYWJzb2x1dGVFcHNpbG9uCiAgICAgICAgKSAmJiBNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbigKICAgICAgICAgIHRoaXMuYXNwZWN0UmF0aW8sCiAgICAgICAgICBvdGhlci5hc3BlY3RSYXRpbywKICAgICAgICAgIHJlbGF0aXZlRXBzaWxvbiwKICAgICAgICAgIGFic29sdXRlRXBzaWxvbgogICAgICAgICkgJiYgdGhpcy5fb2ZmQ2VudGVyRnJ1c3R1bS5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgb3RoZXIuX29mZkNlbnRlckZydXN0dW0sCiAgICAgICAgICByZWxhdGl2ZUVwc2lsb24sCiAgICAgICAgICBhYnNvbHV0ZUVwc2lsb24KICAgICAgICApOwogICAgICB9OwogICAgICBQZXJzcGVjdGl2ZUZydXN0dW1fZGVmYXVsdCA9IFBlcnNwZWN0aXZlRnJ1c3R1bTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0ZydXN0dW1HZW9tZXRyeS5qcwogIGZ1bmN0aW9uIEZydXN0dW1HZW9tZXRyeShvcHRpb25zKSB7CiAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm9wdGlvbnMiLCBvcHRpb25zKTsKICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgib3B0aW9ucy5mcnVzdHVtIiwgb3B0aW9ucy5mcnVzdHVtKTsKICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgib3B0aW9ucy5vcmlnaW4iLCBvcHRpb25zLm9yaWdpbik7CiAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm9wdGlvbnMub3JpZW50YXRpb24iLCBvcHRpb25zLm9yaWVudGF0aW9uKTsKICAgIGNvbnN0IGZydXN0dW0gPSBvcHRpb25zLmZydXN0dW07CiAgICBjb25zdCBvcmllbnRhdGlvbiA9IG9wdGlvbnMub3JpZW50YXRpb247CiAgICBjb25zdCBvcmlnaW4gPSBvcHRpb25zLm9yaWdpbjsKICAgIGNvbnN0IHZlcnRleEZvcm1hdCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMudmVydGV4Rm9ybWF0LCBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5ERUZBVUxUKTsKICAgIGNvbnN0IGRyYXdOZWFyUGxhbmUgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLl9kcmF3TmVhclBsYW5lLCB0cnVlKTsKICAgIGxldCBmcnVzdHVtVHlwZTsKICAgIGxldCBmcnVzdHVtUGFja2VkTGVuZ3RoOwogICAgaWYgKGZydXN0dW0gaW5zdGFuY2VvZiBQZXJzcGVjdGl2ZUZydXN0dW1fZGVmYXVsdCkgewogICAgICBmcnVzdHVtVHlwZSA9IFBFUlNQRUNUSVZFOwogICAgICBmcnVzdHVtUGFja2VkTGVuZ3RoID0gUGVyc3BlY3RpdmVGcnVzdHVtX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgfSBlbHNlIGlmIChmcnVzdHVtIGluc3RhbmNlb2YgT3J0aG9ncmFwaGljRnJ1c3R1bV9kZWZhdWx0KSB7CiAgICAgIGZydXN0dW1UeXBlID0gT1JUSE9HUkFQSElDOwogICAgICBmcnVzdHVtUGFja2VkTGVuZ3RoID0gT3J0aG9ncmFwaGljRnJ1c3R1bV9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgIH0KICAgIHRoaXMuX2ZydXN0dW1UeXBlID0gZnJ1c3R1bVR5cGU7CiAgICB0aGlzLl9mcnVzdHVtID0gZnJ1c3R1bS5jbG9uZSgpOwogICAgdGhpcy5fb3JpZ2luID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKG9yaWdpbik7CiAgICB0aGlzLl9vcmllbnRhdGlvbiA9IFF1YXRlcm5pb25fZGVmYXVsdC5jbG9uZShvcmllbnRhdGlvbik7CiAgICB0aGlzLl9kcmF3TmVhclBsYW5lID0gZHJhd05lYXJQbGFuZTsKICAgIHRoaXMuX3ZlcnRleEZvcm1hdCA9IHZlcnRleEZvcm1hdDsKICAgIHRoaXMuX3dvcmtlck5hbWUgPSAiY3JlYXRlRnJ1c3R1bUdlb21ldHJ5IjsKICAgIHRoaXMucGFja2VkTGVuZ3RoID0gMiArIGZydXN0dW1QYWNrZWRMZW5ndGggKyBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoICsgUXVhdGVybmlvbl9kZWZhdWx0LnBhY2tlZExlbmd0aCArIFZlcnRleEZvcm1hdF9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICB9CiAgZnVuY3Rpb24gZ2V0QXR0cmlidXRlcyhvZmZzZXQsIG5vcm1hbHMsIHRhbmdlbnRzLCBiaXRhbmdlbnRzLCBzdCwgbm9ybWFsMiwgdGFuZ2VudCwgYml0YW5nZW50KSB7CiAgICBjb25zdCBzdE9mZnNldCA9IG9mZnNldCAvIDMgKiAyOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyArK2kpIHsKICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChub3JtYWxzKSkgewogICAgICAgIG5vcm1hbHNbb2Zmc2V0XSA9IG5vcm1hbDIueDsKICAgICAgICBub3JtYWxzW29mZnNldCArIDFdID0gbm9ybWFsMi55OwogICAgICAgIG5vcm1hbHNbb2Zmc2V0ICsgMl0gPSBub3JtYWwyLno7CiAgICAgIH0KICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdCh0YW5nZW50cykpIHsKICAgICAgICB0YW5nZW50c1tvZmZzZXRdID0gdGFuZ2VudC54OwogICAgICAgIHRhbmdlbnRzW29mZnNldCArIDFdID0gdGFuZ2VudC55OwogICAgICAgIHRhbmdlbnRzW29mZnNldCArIDJdID0gdGFuZ2VudC56OwogICAgICB9CiAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoYml0YW5nZW50cykpIHsKICAgICAgICBiaXRhbmdlbnRzW29mZnNldF0gPSBiaXRhbmdlbnQueDsKICAgICAgICBiaXRhbmdlbnRzW29mZnNldCArIDFdID0gYml0YW5nZW50Lnk7CiAgICAgICAgYml0YW5nZW50c1tvZmZzZXQgKyAyXSA9IGJpdGFuZ2VudC56OwogICAgICB9CiAgICAgIG9mZnNldCArPSAzOwogICAgfQogICAgc3Rbc3RPZmZzZXRdID0gMDsKICAgIHN0W3N0T2Zmc2V0ICsgMV0gPSAwOwogICAgc3Rbc3RPZmZzZXQgKyAyXSA9IDE7CiAgICBzdFtzdE9mZnNldCArIDNdID0gMDsKICAgIHN0W3N0T2Zmc2V0ICsgNF0gPSAxOwogICAgc3Rbc3RPZmZzZXQgKyA1XSA9IDE7CiAgICBzdFtzdE9mZnNldCArIDZdID0gMDsKICAgIHN0W3N0T2Zmc2V0ICsgN10gPSAxOwogIH0KICB2YXIgUEVSU1BFQ1RJVkUsIE9SVEhPR1JBUEhJQywgc2NyYXRjaFBhY2tQZXJzcGVjdGl2ZSwgc2NyYXRjaFBhY2tPcnRob2dyYXBoaWMsIHNjcmF0Y2hQYWNrUXVhdGVybmlvbiwgc2NyYXRjaFBhY2tvcmlnaW4sIHNjcmF0Y2hWZXJ0ZXhGb3JtYXQ3LCBzY3JhdGNoUm90YXRpb25NYXRyaXgyLCBzY3JhdGNoVmlld01hdHJpeCwgc2NyYXRjaEludmVyc2VNYXRyaXgsIHNjcmF0Y2hYRGlyZWN0aW9uLCBzY3JhdGNoWURpcmVjdGlvbiwgc2NyYXRjaFpEaXJlY3Rpb24sIHNjcmF0Y2hOZWdhdGl2ZVgsIHNjcmF0Y2hOZWdhdGl2ZVksIHNjcmF0Y2hOZWdhdGl2ZVosIGZydXN0dW1TcGxpdHMsIGZydXN0dW1Db3JuZXJzTkRDLCBzY3JhdGNoRnJ1c3R1bUNvcm5lcnMsIEZydXN0dW1HZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X0ZydXN0dW1HZW9tZXRyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvRnJ1c3R1bUdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9Cb3VuZGluZ1NwaGVyZSgpOwogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW40KCk7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgaW5pdF9Db21wb25lbnREYXRhdHlwZSgpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9HZW9tZXRyeSgpOwogICAgICBpbml0X0dlb21ldHJ5QXR0cmlidXRlKCk7CiAgICAgIGluaXRfR2VvbWV0cnlBdHRyaWJ1dGVzKCk7CiAgICAgIGluaXRfTWF0cml4MygpOwogICAgICBpbml0X01hdHJpeDQoKTsKICAgICAgaW5pdF9PcnRob2dyYXBoaWNGcnVzdHVtKCk7CiAgICAgIGluaXRfUGVyc3BlY3RpdmVGcnVzdHVtKCk7CiAgICAgIGluaXRfUHJpbWl0aXZlVHlwZSgpOwogICAgICBpbml0X1F1YXRlcm5pb24oKTsKICAgICAgaW5pdF9WZXJ0ZXhGb3JtYXQoKTsKICAgICAgUEVSU1BFQ1RJVkUgPSAwOwogICAgICBPUlRIT0dSQVBISUMgPSAxOwogICAgICBGcnVzdHVtR2VvbWV0cnkucGFjayA9IGZ1bmN0aW9uKHZhbHVlLCBhcnJheSwgc3RhcnRpbmdJbmRleCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidmFsdWUiLCB2YWx1ZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgY29uc3QgZnJ1c3R1bVR5cGUgPSB2YWx1ZS5fZnJ1c3R1bVR5cGU7CiAgICAgICAgY29uc3QgZnJ1c3R1bSA9IHZhbHVlLl9mcnVzdHVtOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSBmcnVzdHVtVHlwZTsKICAgICAgICBpZiAoZnJ1c3R1bVR5cGUgPT09IFBFUlNQRUNUSVZFKSB7CiAgICAgICAgICBQZXJzcGVjdGl2ZUZydXN0dW1fZGVmYXVsdC5wYWNrKGZydXN0dW0sIGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gUGVyc3BlY3RpdmVGcnVzdHVtX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBPcnRob2dyYXBoaWNGcnVzdHVtX2RlZmF1bHQucGFjayhmcnVzdHVtLCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgICBzdGFydGluZ0luZGV4ICs9IE9ydGhvZ3JhcGhpY0ZydXN0dW1fZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgfQogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKHZhbHVlLl9vcmlnaW4sIGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgUXVhdGVybmlvbl9kZWZhdWx0LnBhY2sodmFsdWUuX29yaWVudGF0aW9uLCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBRdWF0ZXJuaW9uX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIFZlcnRleEZvcm1hdF9kZWZhdWx0LnBhY2sodmFsdWUuX3ZlcnRleEZvcm1hdCwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gVmVydGV4Rm9ybWF0X2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXhdID0gdmFsdWUuX2RyYXdOZWFyUGxhbmUgPyAxIDogMDsKICAgICAgICByZXR1cm4gYXJyYXk7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hQYWNrUGVyc3BlY3RpdmUgPSBuZXcgUGVyc3BlY3RpdmVGcnVzdHVtX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFBhY2tPcnRob2dyYXBoaWMgPSBuZXcgT3J0aG9ncmFwaGljRnJ1c3R1bV9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hQYWNrUXVhdGVybmlvbiA9IG5ldyBRdWF0ZXJuaW9uX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFBhY2tvcmlnaW4gPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hWZXJ0ZXhGb3JtYXQ3ID0gbmV3IFZlcnRleEZvcm1hdF9kZWZhdWx0KCk7CiAgICAgIEZydXN0dW1HZW9tZXRyeS51bnBhY2sgPSBmdW5jdGlvbihhcnJheSwgc3RhcnRpbmdJbmRleCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgY29uc3QgZnJ1c3R1bVR5cGUgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGxldCBmcnVzdHVtOwogICAgICAgIGlmIChmcnVzdHVtVHlwZSA9PT0gUEVSU1BFQ1RJVkUpIHsKICAgICAgICAgIGZydXN0dW0gPSBQZXJzcGVjdGl2ZUZydXN0dW1fZGVmYXVsdC51bnBhY2soCiAgICAgICAgICAgIGFycmF5LAogICAgICAgICAgICBzdGFydGluZ0luZGV4LAogICAgICAgICAgICBzY3JhdGNoUGFja1BlcnNwZWN0aXZlCiAgICAgICAgICApOwogICAgICAgICAgc3RhcnRpbmdJbmRleCArPSBQZXJzcGVjdGl2ZUZydXN0dW1fZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGZydXN0dW0gPSBPcnRob2dyYXBoaWNGcnVzdHVtX2RlZmF1bHQudW5wYWNrKAogICAgICAgICAgICBhcnJheSwKICAgICAgICAgICAgc3RhcnRpbmdJbmRleCwKICAgICAgICAgICAgc2NyYXRjaFBhY2tPcnRob2dyYXBoaWMKICAgICAgICAgICk7CiAgICAgICAgICBzdGFydGluZ0luZGV4ICs9IE9ydGhvZ3JhcGhpY0ZydXN0dW1fZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgfQogICAgICAgIGNvbnN0IG9yaWdpbiA9IENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2soYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHNjcmF0Y2hQYWNrb3JpZ2luKTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgY29uc3Qgb3JpZW50YXRpb24gPSBRdWF0ZXJuaW9uX2RlZmF1bHQudW5wYWNrKAogICAgICAgICAgYXJyYXksCiAgICAgICAgICBzdGFydGluZ0luZGV4LAogICAgICAgICAgc2NyYXRjaFBhY2tRdWF0ZXJuaW9uCiAgICAgICAgKTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IFF1YXRlcm5pb25fZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgY29uc3QgdmVydGV4Rm9ybWF0ID0gVmVydGV4Rm9ybWF0X2RlZmF1bHQudW5wYWNrKAogICAgICAgICAgYXJyYXksCiAgICAgICAgICBzdGFydGluZ0luZGV4LAogICAgICAgICAgc2NyYXRjaFZlcnRleEZvcm1hdDcKICAgICAgICApOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gVmVydGV4Rm9ybWF0X2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIGNvbnN0IGRyYXdOZWFyUGxhbmUgPSBhcnJheVtzdGFydGluZ0luZGV4XSA9PT0gMTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IEZydXN0dW1HZW9tZXRyeSh7CiAgICAgICAgICAgIGZydXN0dW0sCiAgICAgICAgICAgIG9yaWdpbiwKICAgICAgICAgICAgb3JpZW50YXRpb24sCiAgICAgICAgICAgIHZlcnRleEZvcm1hdCwKICAgICAgICAgICAgX2RyYXdOZWFyUGxhbmU6IGRyYXdOZWFyUGxhbmUKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICBjb25zdCBmcnVzdHVtUmVzdWx0ID0gZnJ1c3R1bVR5cGUgPT09IHJlc3VsdC5fZnJ1c3R1bVR5cGUgPyByZXN1bHQuX2ZydXN0dW0gOiB2b2lkIDA7CiAgICAgICAgcmVzdWx0Ll9mcnVzdHVtID0gZnJ1c3R1bS5jbG9uZShmcnVzdHVtUmVzdWx0KTsKICAgICAgICByZXN1bHQuX2ZydXN0dW1UeXBlID0gZnJ1c3R1bVR5cGU7CiAgICAgICAgcmVzdWx0Ll9vcmlnaW4gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUob3JpZ2luLCByZXN1bHQuX29yaWdpbik7CiAgICAgICAgcmVzdWx0Ll9vcmllbnRhdGlvbiA9IFF1YXRlcm5pb25fZGVmYXVsdC5jbG9uZShvcmllbnRhdGlvbiwgcmVzdWx0Ll9vcmllbnRhdGlvbik7CiAgICAgICAgcmVzdWx0Ll92ZXJ0ZXhGb3JtYXQgPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5jbG9uZSh2ZXJ0ZXhGb3JtYXQsIHJlc3VsdC5fdmVydGV4Rm9ybWF0KTsKICAgICAgICByZXN1bHQuX2RyYXdOZWFyUGxhbmUgPSBkcmF3TmVhclBsYW5lOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hSb3RhdGlvbk1hdHJpeDIgPSBuZXcgTWF0cml4M19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hWaWV3TWF0cml4ID0gbmV3IE1hdHJpeDRfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoSW52ZXJzZU1hdHJpeCA9IG5ldyBNYXRyaXg0X2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFhEaXJlY3Rpb24gPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hZRGlyZWN0aW9uID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoWkRpcmVjdGlvbiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaE5lZ2F0aXZlWCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaE5lZ2F0aXZlWSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaE5lZ2F0aXZlWiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgZnJ1c3R1bVNwbGl0cyA9IG5ldyBBcnJheSgzKTsKICAgICAgZnJ1c3R1bUNvcm5lcnNOREMgPSBuZXcgQXJyYXkoNCk7CiAgICAgIGZydXN0dW1Db3JuZXJzTkRDWzBdID0gbmV3IENhcnRlc2lhbjRfZGVmYXVsdCgtMSwgLTEsIDEsIDEpOwogICAgICBmcnVzdHVtQ29ybmVyc05EQ1sxXSA9IG5ldyBDYXJ0ZXNpYW40X2RlZmF1bHQoMSwgLTEsIDEsIDEpOwogICAgICBmcnVzdHVtQ29ybmVyc05EQ1syXSA9IG5ldyBDYXJ0ZXNpYW40X2RlZmF1bHQoMSwgMSwgMSwgMSk7CiAgICAgIGZydXN0dW1Db3JuZXJzTkRDWzNdID0gbmV3IENhcnRlc2lhbjRfZGVmYXVsdCgtMSwgMSwgMSwgMSk7CiAgICAgIHNjcmF0Y2hGcnVzdHVtQ29ybmVycyA9IG5ldyBBcnJheSg0KTsKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyArK2kpIHsKICAgICAgICBzY3JhdGNoRnJ1c3R1bUNvcm5lcnNbaV0gPSBuZXcgQ2FydGVzaWFuNF9kZWZhdWx0KCk7CiAgICAgIH0KICAgICAgRnJ1c3R1bUdlb21ldHJ5Ll9jb21wdXRlTmVhckZhclBsYW5lcyA9IGZ1bmN0aW9uKG9yaWdpbiwgb3JpZW50YXRpb24sIGZydXN0dW1UeXBlLCBmcnVzdHVtLCBwb3NpdGlvbnMsIHhEaXJlY3Rpb24sIHlEaXJlY3Rpb24sIHpEaXJlY3Rpb24pIHsKICAgICAgICBjb25zdCByb3RhdGlvbk1hdHJpeCA9IE1hdHJpeDNfZGVmYXVsdC5mcm9tUXVhdGVybmlvbigKICAgICAgICAgIG9yaWVudGF0aW9uLAogICAgICAgICAgc2NyYXRjaFJvdGF0aW9uTWF0cml4MgogICAgICAgICk7CiAgICAgICAgbGV0IHggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh4RGlyZWN0aW9uLCBzY3JhdGNoWERpcmVjdGlvbik7CiAgICAgICAgbGV0IHkgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh5RGlyZWN0aW9uLCBzY3JhdGNoWURpcmVjdGlvbik7CiAgICAgICAgbGV0IHogPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh6RGlyZWN0aW9uLCBzY3JhdGNoWkRpcmVjdGlvbik7CiAgICAgICAgeCA9IE1hdHJpeDNfZGVmYXVsdC5nZXRDb2x1bW4ocm90YXRpb25NYXRyaXgsIDAsIHgpOwogICAgICAgIHkgPSBNYXRyaXgzX2RlZmF1bHQuZ2V0Q29sdW1uKHJvdGF0aW9uTWF0cml4LCAxLCB5KTsKICAgICAgICB6ID0gTWF0cml4M19kZWZhdWx0LmdldENvbHVtbihyb3RhdGlvbk1hdHJpeCwgMiwgeik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSh4LCB4KTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKHksIHkpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoeiwgeik7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5lZ2F0ZSh4LCB4KTsKICAgICAgICBjb25zdCB2aWV3ID0gTWF0cml4NF9kZWZhdWx0LmNvbXB1dGVWaWV3KG9yaWdpbiwgeiwgeSwgeCwgc2NyYXRjaFZpZXdNYXRyaXgpOwogICAgICAgIGxldCBpbnZlcnNlVmlldzsKICAgICAgICBsZXQgaW52ZXJzZVZpZXdQcm9qZWN0aW9uOwogICAgICAgIGNvbnN0IHByb2plY3Rpb24gPSBmcnVzdHVtLnByb2plY3Rpb25NYXRyaXg7CiAgICAgICAgaWYgKGZydXN0dW1UeXBlID09PSBQRVJTUEVDVElWRSkgewogICAgICAgICAgY29uc3Qgdmlld1Byb2plY3Rpb24gPSBNYXRyaXg0X2RlZmF1bHQubXVsdGlwbHkoCiAgICAgICAgICAgIHByb2plY3Rpb24sCiAgICAgICAgICAgIHZpZXcsCiAgICAgICAgICAgIHNjcmF0Y2hJbnZlcnNlTWF0cml4CiAgICAgICAgICApOwogICAgICAgICAgaW52ZXJzZVZpZXdQcm9qZWN0aW9uID0gTWF0cml4NF9kZWZhdWx0LmludmVyc2UoCiAgICAgICAgICAgIHZpZXdQcm9qZWN0aW9uLAogICAgICAgICAgICBzY3JhdGNoSW52ZXJzZU1hdHJpeAogICAgICAgICAgKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgaW52ZXJzZVZpZXcgPSBNYXRyaXg0X2RlZmF1bHQuaW52ZXJzZVRyYW5zZm9ybWF0aW9uKHZpZXcsIHNjcmF0Y2hJbnZlcnNlTWF0cml4KTsKICAgICAgICB9CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChpbnZlcnNlVmlld1Byb2plY3Rpb24pKSB7CiAgICAgICAgICBmcnVzdHVtU3BsaXRzWzBdID0gZnJ1c3R1bS5uZWFyOwogICAgICAgICAgZnJ1c3R1bVNwbGl0c1sxXSA9IGZydXN0dW0uZmFyOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBmcnVzdHVtU3BsaXRzWzBdID0gMDsKICAgICAgICAgIGZydXN0dW1TcGxpdHNbMV0gPSBmcnVzdHVtLm5lYXI7CiAgICAgICAgICBmcnVzdHVtU3BsaXRzWzJdID0gZnJ1c3R1bS5mYXI7CiAgICAgICAgfQogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMjsgKytpKSB7CiAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDQ7ICsraikgewogICAgICAgICAgICBsZXQgY29ybmVyID0gQ2FydGVzaWFuNF9kZWZhdWx0LmNsb25lKAogICAgICAgICAgICAgIGZydXN0dW1Db3JuZXJzTkRDW2pdLAogICAgICAgICAgICAgIHNjcmF0Y2hGcnVzdHVtQ29ybmVyc1tqXQogICAgICAgICAgICApOwogICAgICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChpbnZlcnNlVmlld1Byb2plY3Rpb24pKSB7CiAgICAgICAgICAgICAgY29uc3Qgb2ZmQ2VudGVyRnJ1c3R1bSA9IGZydXN0dW0ub2ZmQ2VudGVyRnJ1c3R1bTsKICAgICAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG9mZkNlbnRlckZydXN0dW0pKSB7CiAgICAgICAgICAgICAgICBmcnVzdHVtID0gb2ZmQ2VudGVyRnJ1c3R1bTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgY29uc3QgbmVhciA9IGZydXN0dW1TcGxpdHNbaV07CiAgICAgICAgICAgICAgY29uc3QgZmFyID0gZnJ1c3R1bVNwbGl0c1tpICsgMV07CiAgICAgICAgICAgICAgY29ybmVyLnggPSAoY29ybmVyLnggKiAoZnJ1c3R1bS5yaWdodCAtIGZydXN0dW0ubGVmdCkgKyBmcnVzdHVtLmxlZnQgKyBmcnVzdHVtLnJpZ2h0KSAqIDAuNTsKICAgICAgICAgICAgICBjb3JuZXIueSA9IChjb3JuZXIueSAqIChmcnVzdHVtLnRvcCAtIGZydXN0dW0uYm90dG9tKSArIGZydXN0dW0uYm90dG9tICsgZnJ1c3R1bS50b3ApICogMC41OwogICAgICAgICAgICAgIGNvcm5lci56ID0gKGNvcm5lci56ICogKG5lYXIgLSBmYXIpIC0gbmVhciAtIGZhcikgKiAwLjU7CiAgICAgICAgICAgICAgY29ybmVyLncgPSAxOwogICAgICAgICAgICAgIE1hdHJpeDRfZGVmYXVsdC5tdWx0aXBseUJ5VmVjdG9yKGludmVyc2VWaWV3LCBjb3JuZXIsIGNvcm5lcik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgY29ybmVyID0gTWF0cml4NF9kZWZhdWx0Lm11bHRpcGx5QnlWZWN0b3IoCiAgICAgICAgICAgICAgICBpbnZlcnNlVmlld1Byb2plY3Rpb24sCiAgICAgICAgICAgICAgICBjb3JuZXIsCiAgICAgICAgICAgICAgICBjb3JuZXIKICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIGNvbnN0IHcgPSAxIC8gY29ybmVyLnc7CiAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIoY29ybmVyLCB3LCBjb3JuZXIpOwogICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChjb3JuZXIsIG9yaWdpbiwgY29ybmVyKTsKICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKGNvcm5lciwgY29ybmVyKTsKICAgICAgICAgICAgICBjb25zdCBmYWMgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KHosIGNvcm5lcik7CiAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIoY29ybmVyLCBmcnVzdHVtU3BsaXRzW2ldIC8gZmFjLCBjb3JuZXIpOwogICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoY29ybmVyLCBvcmlnaW4sIGNvcm5lcik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcG9zaXRpb25zWzEyICogaSArIGogKiAzXSA9IGNvcm5lci54OwogICAgICAgICAgICBwb3NpdGlvbnNbMTIgKiBpICsgaiAqIDMgKyAxXSA9IGNvcm5lci55OwogICAgICAgICAgICBwb3NpdGlvbnNbMTIgKiBpICsgaiAqIDMgKyAyXSA9IGNvcm5lci56OwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfTsKICAgICAgRnJ1c3R1bUdlb21ldHJ5LmNyZWF0ZUdlb21ldHJ5ID0gZnVuY3Rpb24oZnJ1c3R1bUdlb21ldHJ5KSB7CiAgICAgICAgY29uc3QgZnJ1c3R1bVR5cGUgPSBmcnVzdHVtR2VvbWV0cnkuX2ZydXN0dW1UeXBlOwogICAgICAgIGNvbnN0IGZydXN0dW0gPSBmcnVzdHVtR2VvbWV0cnkuX2ZydXN0dW07CiAgICAgICAgY29uc3Qgb3JpZ2luID0gZnJ1c3R1bUdlb21ldHJ5Ll9vcmlnaW47CiAgICAgICAgY29uc3Qgb3JpZW50YXRpb24gPSBmcnVzdHVtR2VvbWV0cnkuX29yaWVudGF0aW9uOwogICAgICAgIGNvbnN0IGRyYXdOZWFyUGxhbmUgPSBmcnVzdHVtR2VvbWV0cnkuX2RyYXdOZWFyUGxhbmU7CiAgICAgICAgY29uc3QgdmVydGV4Rm9ybWF0ID0gZnJ1c3R1bUdlb21ldHJ5Ll92ZXJ0ZXhGb3JtYXQ7CiAgICAgICAgY29uc3QgbnVtYmVyT2ZQbGFuZXMgPSBkcmF3TmVhclBsYW5lID8gNiA6IDU7CiAgICAgICAgbGV0IHBvc2l0aW9ucyA9IG5ldyBGbG9hdDY0QXJyYXkoMyAqIDQgKiA2KTsKICAgICAgICBGcnVzdHVtR2VvbWV0cnkuX2NvbXB1dGVOZWFyRmFyUGxhbmVzKAogICAgICAgICAgb3JpZ2luLAogICAgICAgICAgb3JpZW50YXRpb24sCiAgICAgICAgICBmcnVzdHVtVHlwZSwKICAgICAgICAgIGZydXN0dW0sCiAgICAgICAgICBwb3NpdGlvbnMKICAgICAgICApOwogICAgICAgIGxldCBvZmZzZXQgPSAzICogNCAqIDI7CiAgICAgICAgcG9zaXRpb25zW29mZnNldF0gPSBwb3NpdGlvbnNbMyAqIDRdOwogICAgICAgIHBvc2l0aW9uc1tvZmZzZXQgKyAxXSA9IHBvc2l0aW9uc1szICogNCArIDFdOwogICAgICAgIHBvc2l0aW9uc1tvZmZzZXQgKyAyXSA9IHBvc2l0aW9uc1szICogNCArIDJdOwogICAgICAgIHBvc2l0aW9uc1tvZmZzZXQgKyAzXSA9IHBvc2l0aW9uc1swXTsKICAgICAgICBwb3NpdGlvbnNbb2Zmc2V0ICsgNF0gPSBwb3NpdGlvbnNbMV07CiAgICAgICAgcG9zaXRpb25zW29mZnNldCArIDVdID0gcG9zaXRpb25zWzJdOwogICAgICAgIHBvc2l0aW9uc1tvZmZzZXQgKyA2XSA9IHBvc2l0aW9uc1szICogM107CiAgICAgICAgcG9zaXRpb25zW29mZnNldCArIDddID0gcG9zaXRpb25zWzMgKiAzICsgMV07CiAgICAgICAgcG9zaXRpb25zW29mZnNldCArIDhdID0gcG9zaXRpb25zWzMgKiAzICsgMl07CiAgICAgICAgcG9zaXRpb25zW29mZnNldCArIDldID0gcG9zaXRpb25zWzMgKiA3XTsKICAgICAgICBwb3NpdGlvbnNbb2Zmc2V0ICsgMTBdID0gcG9zaXRpb25zWzMgKiA3ICsgMV07CiAgICAgICAgcG9zaXRpb25zW29mZnNldCArIDExXSA9IHBvc2l0aW9uc1szICogNyArIDJdOwogICAgICAgIG9mZnNldCArPSAzICogNDsKICAgICAgICBwb3NpdGlvbnNbb2Zmc2V0XSA9IHBvc2l0aW9uc1szICogNV07CiAgICAgICAgcG9zaXRpb25zW29mZnNldCArIDFdID0gcG9zaXRpb25zWzMgKiA1ICsgMV07CiAgICAgICAgcG9zaXRpb25zW29mZnNldCArIDJdID0gcG9zaXRpb25zWzMgKiA1ICsgMl07CiAgICAgICAgcG9zaXRpb25zW29mZnNldCArIDNdID0gcG9zaXRpb25zWzNdOwogICAgICAgIHBvc2l0aW9uc1tvZmZzZXQgKyA0XSA9IHBvc2l0aW9uc1szICsgMV07CiAgICAgICAgcG9zaXRpb25zW29mZnNldCArIDVdID0gcG9zaXRpb25zWzMgKyAyXTsKICAgICAgICBwb3NpdGlvbnNbb2Zmc2V0ICsgNl0gPSBwb3NpdGlvbnNbMF07CiAgICAgICAgcG9zaXRpb25zW29mZnNldCArIDddID0gcG9zaXRpb25zWzFdOwogICAgICAgIHBvc2l0aW9uc1tvZmZzZXQgKyA4XSA9IHBvc2l0aW9uc1syXTsKICAgICAgICBwb3NpdGlvbnNbb2Zmc2V0ICsgOV0gPSBwb3NpdGlvbnNbMyAqIDRdOwogICAgICAgIHBvc2l0aW9uc1tvZmZzZXQgKyAxMF0gPSBwb3NpdGlvbnNbMyAqIDQgKyAxXTsKICAgICAgICBwb3NpdGlvbnNbb2Zmc2V0ICsgMTFdID0gcG9zaXRpb25zWzMgKiA0ICsgMl07CiAgICAgICAgb2Zmc2V0ICs9IDMgKiA0OwogICAgICAgIHBvc2l0aW9uc1tvZmZzZXRdID0gcG9zaXRpb25zWzNdOwogICAgICAgIHBvc2l0aW9uc1tvZmZzZXQgKyAxXSA9IHBvc2l0aW9uc1szICsgMV07CiAgICAgICAgcG9zaXRpb25zW29mZnNldCArIDJdID0gcG9zaXRpb25zWzMgKyAyXTsKICAgICAgICBwb3NpdGlvbnNbb2Zmc2V0ICsgM10gPSBwb3NpdGlvbnNbMyAqIDVdOwogICAgICAgIHBvc2l0aW9uc1tvZmZzZXQgKyA0XSA9IHBvc2l0aW9uc1szICogNSArIDFdOwogICAgICAgIHBvc2l0aW9uc1tvZmZzZXQgKyA1XSA9IHBvc2l0aW9uc1szICogNSArIDJdOwogICAgICAgIHBvc2l0aW9uc1tvZmZzZXQgKyA2XSA9IHBvc2l0aW9uc1szICogNl07CiAgICAgICAgcG9zaXRpb25zW29mZnNldCArIDddID0gcG9zaXRpb25zWzMgKiA2ICsgMV07CiAgICAgICAgcG9zaXRpb25zW29mZnNldCArIDhdID0gcG9zaXRpb25zWzMgKiA2ICsgMl07CiAgICAgICAgcG9zaXRpb25zW29mZnNldCArIDldID0gcG9zaXRpb25zWzMgKiAyXTsKICAgICAgICBwb3NpdGlvbnNbb2Zmc2V0ICsgMTBdID0gcG9zaXRpb25zWzMgKiAyICsgMV07CiAgICAgICAgcG9zaXRpb25zW29mZnNldCArIDExXSA9IHBvc2l0aW9uc1szICogMiArIDJdOwogICAgICAgIG9mZnNldCArPSAzICogNDsKICAgICAgICBwb3NpdGlvbnNbb2Zmc2V0XSA9IHBvc2l0aW9uc1szICogMl07CiAgICAgICAgcG9zaXRpb25zW29mZnNldCArIDFdID0gcG9zaXRpb25zWzMgKiAyICsgMV07CiAgICAgICAgcG9zaXRpb25zW29mZnNldCArIDJdID0gcG9zaXRpb25zWzMgKiAyICsgMl07CiAgICAgICAgcG9zaXRpb25zW29mZnNldCArIDNdID0gcG9zaXRpb25zWzMgKiA2XTsKICAgICAgICBwb3NpdGlvbnNbb2Zmc2V0ICsgNF0gPSBwb3NpdGlvbnNbMyAqIDYgKyAxXTsKICAgICAgICBwb3NpdGlvbnNbb2Zmc2V0ICsgNV0gPSBwb3NpdGlvbnNbMyAqIDYgKyAyXTsKICAgICAgICBwb3NpdGlvbnNbb2Zmc2V0ICsgNl0gPSBwb3NpdGlvbnNbMyAqIDddOwogICAgICAgIHBvc2l0aW9uc1tvZmZzZXQgKyA3XSA9IHBvc2l0aW9uc1szICogNyArIDFdOwogICAgICAgIHBvc2l0aW9uc1tvZmZzZXQgKyA4XSA9IHBvc2l0aW9uc1szICogNyArIDJdOwogICAgICAgIHBvc2l0aW9uc1tvZmZzZXQgKyA5XSA9IHBvc2l0aW9uc1szICogM107CiAgICAgICAgcG9zaXRpb25zW29mZnNldCArIDEwXSA9IHBvc2l0aW9uc1szICogMyArIDFdOwogICAgICAgIHBvc2l0aW9uc1tvZmZzZXQgKyAxMV0gPSBwb3NpdGlvbnNbMyAqIDMgKyAyXTsKICAgICAgICBpZiAoIWRyYXdOZWFyUGxhbmUpIHsKICAgICAgICAgIHBvc2l0aW9ucyA9IHBvc2l0aW9ucy5zdWJhcnJheSgzICogNCk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVzX2RlZmF1bHQoewogICAgICAgICAgcG9zaXRpb246IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRE9VQkxFLAogICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgICAgICB2YWx1ZXM6IHBvc2l0aW9ucwogICAgICAgICAgfSkKICAgICAgICB9KTsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHZlcnRleEZvcm1hdC5ub3JtYWwpIHx8IGRlZmluZWRfZGVmYXVsdCh2ZXJ0ZXhGb3JtYXQudGFuZ2VudCkgfHwgZGVmaW5lZF9kZWZhdWx0KHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpIHx8IGRlZmluZWRfZGVmYXVsdCh2ZXJ0ZXhGb3JtYXQuc3QpKSB7CiAgICAgICAgICBjb25zdCBub3JtYWxzID0gZGVmaW5lZF9kZWZhdWx0KHZlcnRleEZvcm1hdC5ub3JtYWwpID8gbmV3IEZsb2F0MzJBcnJheSgzICogNCAqIG51bWJlck9mUGxhbmVzKSA6IHZvaWQgMDsKICAgICAgICAgIGNvbnN0IHRhbmdlbnRzID0gZGVmaW5lZF9kZWZhdWx0KHZlcnRleEZvcm1hdC50YW5nZW50KSA/IG5ldyBGbG9hdDMyQXJyYXkoMyAqIDQgKiBudW1iZXJPZlBsYW5lcykgOiB2b2lkIDA7CiAgICAgICAgICBjb25zdCBiaXRhbmdlbnRzID0gZGVmaW5lZF9kZWZhdWx0KHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpID8gbmV3IEZsb2F0MzJBcnJheSgzICogNCAqIG51bWJlck9mUGxhbmVzKSA6IHZvaWQgMDsKICAgICAgICAgIGNvbnN0IHN0ID0gZGVmaW5lZF9kZWZhdWx0KHZlcnRleEZvcm1hdC5zdCkgPyBuZXcgRmxvYXQzMkFycmF5KDIgKiA0ICogbnVtYmVyT2ZQbGFuZXMpIDogdm9pZCAwOwogICAgICAgICAgY29uc3QgeCA9IHNjcmF0Y2hYRGlyZWN0aW9uOwogICAgICAgICAgY29uc3QgeSA9IHNjcmF0Y2hZRGlyZWN0aW9uOwogICAgICAgICAgY29uc3QgeiA9IHNjcmF0Y2haRGlyZWN0aW9uOwogICAgICAgICAgY29uc3QgbmVnYXRpdmVYMiA9IENhcnRlc2lhbjNfZGVmYXVsdC5uZWdhdGUoeCwgc2NyYXRjaE5lZ2F0aXZlWCk7CiAgICAgICAgICBjb25zdCBuZWdhdGl2ZVkgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubmVnYXRlKHksIHNjcmF0Y2hOZWdhdGl2ZVkpOwogICAgICAgICAgY29uc3QgbmVnYXRpdmVaID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5lZ2F0ZSh6LCBzY3JhdGNoTmVnYXRpdmVaKTsKICAgICAgICAgIG9mZnNldCA9IDA7CiAgICAgICAgICBpZiAoZHJhd05lYXJQbGFuZSkgewogICAgICAgICAgICBnZXRBdHRyaWJ1dGVzKG9mZnNldCwgbm9ybWFscywgdGFuZ2VudHMsIGJpdGFuZ2VudHMsIHN0LCBuZWdhdGl2ZVosIHgsIHkpOwogICAgICAgICAgICBvZmZzZXQgKz0gMyAqIDQ7CiAgICAgICAgICB9CiAgICAgICAgICBnZXRBdHRyaWJ1dGVzKG9mZnNldCwgbm9ybWFscywgdGFuZ2VudHMsIGJpdGFuZ2VudHMsIHN0LCB6LCBuZWdhdGl2ZVgyLCB5KTsKICAgICAgICAgIG9mZnNldCArPSAzICogNDsKICAgICAgICAgIGdldEF0dHJpYnV0ZXMoCiAgICAgICAgICAgIG9mZnNldCwKICAgICAgICAgICAgbm9ybWFscywKICAgICAgICAgICAgdGFuZ2VudHMsCiAgICAgICAgICAgIGJpdGFuZ2VudHMsCiAgICAgICAgICAgIHN0LAogICAgICAgICAgICBuZWdhdGl2ZVgyLAogICAgICAgICAgICBuZWdhdGl2ZVosCiAgICAgICAgICAgIHkKICAgICAgICAgICk7CiAgICAgICAgICBvZmZzZXQgKz0gMyAqIDQ7CiAgICAgICAgICBnZXRBdHRyaWJ1dGVzKAogICAgICAgICAgICBvZmZzZXQsCiAgICAgICAgICAgIG5vcm1hbHMsCiAgICAgICAgICAgIHRhbmdlbnRzLAogICAgICAgICAgICBiaXRhbmdlbnRzLAogICAgICAgICAgICBzdCwKICAgICAgICAgICAgbmVnYXRpdmVZLAogICAgICAgICAgICBuZWdhdGl2ZVosCiAgICAgICAgICAgIG5lZ2F0aXZlWDIKICAgICAgICAgICk7CiAgICAgICAgICBvZmZzZXQgKz0gMyAqIDQ7CiAgICAgICAgICBnZXRBdHRyaWJ1dGVzKG9mZnNldCwgbm9ybWFscywgdGFuZ2VudHMsIGJpdGFuZ2VudHMsIHN0LCB4LCB6LCB5KTsKICAgICAgICAgIG9mZnNldCArPSAzICogNDsKICAgICAgICAgIGdldEF0dHJpYnV0ZXMob2Zmc2V0LCBub3JtYWxzLCB0YW5nZW50cywgYml0YW5nZW50cywgc3QsIHksIHosIG5lZ2F0aXZlWDIpOwogICAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChub3JtYWxzKSkgewogICAgICAgICAgICBhdHRyaWJ1dGVzLm5vcm1hbCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgICAgICAgIHZhbHVlczogbm9ybWFscwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQodGFuZ2VudHMpKSB7CiAgICAgICAgICAgIGF0dHJpYnV0ZXMudGFuZ2VudCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgICAgICAgIHZhbHVlczogdGFuZ2VudHMKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGJpdGFuZ2VudHMpKSB7CiAgICAgICAgICAgIGF0dHJpYnV0ZXMuYml0YW5nZW50ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkZMT0FULAogICAgICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgICAgICAgdmFsdWVzOiBiaXRhbmdlbnRzCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChzdCkpIHsKICAgICAgICAgICAgYXR0cmlidXRlcy5zdCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAyLAogICAgICAgICAgICAgIHZhbHVlczogc3QKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNvbnN0IGluZGljZXMgPSBuZXcgVWludDE2QXJyYXkoNiAqIG51bWJlck9mUGxhbmVzKTsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bWJlck9mUGxhbmVzOyArK2kpIHsKICAgICAgICAgIGNvbnN0IGluZGV4T2Zmc2V0ID0gaSAqIDY7CiAgICAgICAgICBjb25zdCBpbmRleCA9IGkgKiA0OwogICAgICAgICAgaW5kaWNlc1tpbmRleE9mZnNldF0gPSBpbmRleDsKICAgICAgICAgIGluZGljZXNbaW5kZXhPZmZzZXQgKyAxXSA9IGluZGV4ICsgMTsKICAgICAgICAgIGluZGljZXNbaW5kZXhPZmZzZXQgKyAyXSA9IGluZGV4ICsgMjsKICAgICAgICAgIGluZGljZXNbaW5kZXhPZmZzZXQgKyAzXSA9IGluZGV4OwogICAgICAgICAgaW5kaWNlc1tpbmRleE9mZnNldCArIDRdID0gaW5kZXggKyAyOwogICAgICAgICAgaW5kaWNlc1tpbmRleE9mZnNldCArIDVdID0gaW5kZXggKyAzOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3IEdlb21ldHJ5X2RlZmF1bHQoewogICAgICAgICAgYXR0cmlidXRlcywKICAgICAgICAgIGluZGljZXMsCiAgICAgICAgICBwcmltaXRpdmVUeXBlOiBQcmltaXRpdmVUeXBlX2RlZmF1bHQuVFJJQU5HTEVTLAogICAgICAgICAgYm91bmRpbmdTcGhlcmU6IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQuZnJvbVZlcnRpY2VzKHBvc2l0aW9ucykKICAgICAgICB9KTsKICAgICAgfTsKICAgICAgRnJ1c3R1bUdlb21ldHJ5X2RlZmF1bHQgPSBGcnVzdHVtR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVGcnVzdHVtR2VvbWV0cnkuanMKICB2YXIgY3JlYXRlRnJ1c3R1bUdlb21ldHJ5X2V4cG9ydHMgPSB7fTsKICBfX2V4cG9ydChjcmVhdGVGcnVzdHVtR2VvbWV0cnlfZXhwb3J0cywgewogICAgZGVmYXVsdDogKCkgPT4gY3JlYXRlRnJ1c3R1bUdlb21ldHJ5X2RlZmF1bHQKICB9KTsKICBmdW5jdGlvbiBjcmVhdGVGcnVzdHVtR2VvbWV0cnkoZnJ1c3R1bUdlb21ldHJ5LCBvZmZzZXQpIHsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQob2Zmc2V0KSkgewogICAgICBmcnVzdHVtR2VvbWV0cnkgPSBGcnVzdHVtR2VvbWV0cnlfZGVmYXVsdC51bnBhY2soZnJ1c3R1bUdlb21ldHJ5LCBvZmZzZXQpOwogICAgfQogICAgcmV0dXJuIEZydXN0dW1HZW9tZXRyeV9kZWZhdWx0LmNyZWF0ZUdlb21ldHJ5KGZydXN0dW1HZW9tZXRyeSk7CiAgfQogIHZhciBjcmVhdGVGcnVzdHVtR2VvbWV0cnlfZGVmYXVsdDsKICB2YXIgaW5pdF9jcmVhdGVGcnVzdHVtR2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZUZydXN0dW1HZW9tZXRyeS5qcyIoKSB7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0ZydXN0dW1HZW9tZXRyeSgpOwogICAgICBjcmVhdGVGcnVzdHVtR2VvbWV0cnlfZGVmYXVsdCA9IGNyZWF0ZUZydXN0dW1HZW9tZXRyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0ZydXN0dW1PdXRsaW5lR2VvbWV0cnkuanMKICBmdW5jdGlvbiBGcnVzdHVtT3V0bGluZUdlb21ldHJ5KG9wdGlvbnMpIHsKICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgib3B0aW9ucyIsIG9wdGlvbnMpOwogICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJvcHRpb25zLmZydXN0dW0iLCBvcHRpb25zLmZydXN0dW0pOwogICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJvcHRpb25zLm9yaWdpbiIsIG9wdGlvbnMub3JpZ2luKTsKICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgib3B0aW9ucy5vcmllbnRhdGlvbiIsIG9wdGlvbnMub3JpZW50YXRpb24pOwogICAgY29uc3QgZnJ1c3R1bSA9IG9wdGlvbnMuZnJ1c3R1bTsKICAgIGNvbnN0IG9yaWVudGF0aW9uID0gb3B0aW9ucy5vcmllbnRhdGlvbjsKICAgIGNvbnN0IG9yaWdpbiA9IG9wdGlvbnMub3JpZ2luOwogICAgY29uc3QgZHJhd05lYXJQbGFuZSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuX2RyYXdOZWFyUGxhbmUsIHRydWUpOwogICAgbGV0IGZydXN0dW1UeXBlOwogICAgbGV0IGZydXN0dW1QYWNrZWRMZW5ndGg7CiAgICBpZiAoZnJ1c3R1bSBpbnN0YW5jZW9mIFBlcnNwZWN0aXZlRnJ1c3R1bV9kZWZhdWx0KSB7CiAgICAgIGZydXN0dW1UeXBlID0gUEVSU1BFQ1RJVkUyOwogICAgICBmcnVzdHVtUGFja2VkTGVuZ3RoID0gUGVyc3BlY3RpdmVGcnVzdHVtX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgfSBlbHNlIGlmIChmcnVzdHVtIGluc3RhbmNlb2YgT3J0aG9ncmFwaGljRnJ1c3R1bV9kZWZhdWx0KSB7CiAgICAgIGZydXN0dW1UeXBlID0gT1JUSE9HUkFQSElDMjsKICAgICAgZnJ1c3R1bVBhY2tlZExlbmd0aCA9IE9ydGhvZ3JhcGhpY0ZydXN0dW1fZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICB9CiAgICB0aGlzLl9mcnVzdHVtVHlwZSA9IGZydXN0dW1UeXBlOwogICAgdGhpcy5fZnJ1c3R1bSA9IGZydXN0dW0uY2xvbmUoKTsKICAgIHRoaXMuX29yaWdpbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShvcmlnaW4pOwogICAgdGhpcy5fb3JpZW50YXRpb24gPSBRdWF0ZXJuaW9uX2RlZmF1bHQuY2xvbmUob3JpZW50YXRpb24pOwogICAgdGhpcy5fZHJhd05lYXJQbGFuZSA9IGRyYXdOZWFyUGxhbmU7CiAgICB0aGlzLl93b3JrZXJOYW1lID0gImNyZWF0ZUZydXN0dW1PdXRsaW5lR2VvbWV0cnkiOwogICAgdGhpcy5wYWNrZWRMZW5ndGggPSAyICsgZnJ1c3R1bVBhY2tlZExlbmd0aCArIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyBRdWF0ZXJuaW9uX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogIH0KICB2YXIgUEVSU1BFQ1RJVkUyLCBPUlRIT0dSQVBISUMyLCBzY3JhdGNoUGFja1BlcnNwZWN0aXZlMiwgc2NyYXRjaFBhY2tPcnRob2dyYXBoaWMyLCBzY3JhdGNoUGFja1F1YXRlcm5pb24yLCBzY3JhdGNoUGFja29yaWdpbjIsIEZydXN0dW1PdXRsaW5lR2VvbWV0cnlfZGVmYXVsdDsKICB2YXIgaW5pdF9GcnVzdHVtT3V0bGluZUdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9GcnVzdHVtT3V0bGluZUdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9Cb3VuZGluZ1NwaGVyZSgpOwogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X0NvbXBvbmVudERhdGF0eXBlKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0ZydXN0dW1HZW9tZXRyeSgpOwogICAgICBpbml0X0dlb21ldHJ5KCk7CiAgICAgIGluaXRfR2VvbWV0cnlBdHRyaWJ1dGUoKTsKICAgICAgaW5pdF9HZW9tZXRyeUF0dHJpYnV0ZXMoKTsKICAgICAgaW5pdF9PcnRob2dyYXBoaWNGcnVzdHVtKCk7CiAgICAgIGluaXRfUGVyc3BlY3RpdmVGcnVzdHVtKCk7CiAgICAgIGluaXRfUHJpbWl0aXZlVHlwZSgpOwogICAgICBpbml0X1F1YXRlcm5pb24oKTsKICAgICAgUEVSU1BFQ1RJVkUyID0gMDsKICAgICAgT1JUSE9HUkFQSElDMiA9IDE7CiAgICAgIEZydXN0dW1PdXRsaW5lR2VvbWV0cnkucGFjayA9IGZ1bmN0aW9uKHZhbHVlLCBhcnJheSwgc3RhcnRpbmdJbmRleCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidmFsdWUiLCB2YWx1ZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgY29uc3QgZnJ1c3R1bVR5cGUgPSB2YWx1ZS5fZnJ1c3R1bVR5cGU7CiAgICAgICAgY29uc3QgZnJ1c3R1bSA9IHZhbHVlLl9mcnVzdHVtOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSBmcnVzdHVtVHlwZTsKICAgICAgICBpZiAoZnJ1c3R1bVR5cGUgPT09IFBFUlNQRUNUSVZFMikgewogICAgICAgICAgUGVyc3BlY3RpdmVGcnVzdHVtX2RlZmF1bHQucGFjayhmcnVzdHVtLCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgICBzdGFydGluZ0luZGV4ICs9IFBlcnNwZWN0aXZlRnJ1c3R1bV9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgT3J0aG9ncmFwaGljRnJ1c3R1bV9kZWZhdWx0LnBhY2soZnJ1c3R1bSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgICAgc3RhcnRpbmdJbmRleCArPSBPcnRob2dyYXBoaWNGcnVzdHVtX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIH0KICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayh2YWx1ZS5fb3JpZ2luLCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIFF1YXRlcm5pb25fZGVmYXVsdC5wYWNrKHZhbHVlLl9vcmllbnRhdGlvbiwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gUXVhdGVybmlvbl9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4XSA9IHZhbHVlLl9kcmF3TmVhclBsYW5lID8gMSA6IDA7CiAgICAgICAgcmV0dXJuIGFycmF5OwogICAgICB9OwogICAgICBzY3JhdGNoUGFja1BlcnNwZWN0aXZlMiA9IG5ldyBQZXJzcGVjdGl2ZUZydXN0dW1fZGVmYXVsdCgpOwogICAgICBzY3JhdGNoUGFja09ydGhvZ3JhcGhpYzIgPSBuZXcgT3J0aG9ncmFwaGljRnJ1c3R1bV9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hQYWNrUXVhdGVybmlvbjIgPSBuZXcgUXVhdGVybmlvbl9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hQYWNrb3JpZ2luMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgRnJ1c3R1bU91dGxpbmVHZW9tZXRyeS51bnBhY2sgPSBmdW5jdGlvbihhcnJheSwgc3RhcnRpbmdJbmRleCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgY29uc3QgZnJ1c3R1bVR5cGUgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGxldCBmcnVzdHVtOwogICAgICAgIGlmIChmcnVzdHVtVHlwZSA9PT0gUEVSU1BFQ1RJVkUyKSB7CiAgICAgICAgICBmcnVzdHVtID0gUGVyc3BlY3RpdmVGcnVzdHVtX2RlZmF1bHQudW5wYWNrKAogICAgICAgICAgICBhcnJheSwKICAgICAgICAgICAgc3RhcnRpbmdJbmRleCwKICAgICAgICAgICAgc2NyYXRjaFBhY2tQZXJzcGVjdGl2ZTIKICAgICAgICAgICk7CiAgICAgICAgICBzdGFydGluZ0luZGV4ICs9IFBlcnNwZWN0aXZlRnJ1c3R1bV9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZnJ1c3R1bSA9IE9ydGhvZ3JhcGhpY0ZydXN0dW1fZGVmYXVsdC51bnBhY2soCiAgICAgICAgICAgIGFycmF5LAogICAgICAgICAgICBzdGFydGluZ0luZGV4LAogICAgICAgICAgICBzY3JhdGNoUGFja09ydGhvZ3JhcGhpYzIKICAgICAgICAgICk7CiAgICAgICAgICBzdGFydGluZ0luZGV4ICs9IE9ydGhvZ3JhcGhpY0ZydXN0dW1fZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgfQogICAgICAgIGNvbnN0IG9yaWdpbiA9IENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2soYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHNjcmF0Y2hQYWNrb3JpZ2luMik7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIGNvbnN0IG9yaWVudGF0aW9uID0gUXVhdGVybmlvbl9kZWZhdWx0LnVucGFjaygKICAgICAgICAgIGFycmF5LAogICAgICAgICAgc3RhcnRpbmdJbmRleCwKICAgICAgICAgIHNjcmF0Y2hQYWNrUXVhdGVybmlvbjIKICAgICAgICApOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gUXVhdGVybmlvbl9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBjb25zdCBkcmF3TmVhclBsYW5lID0gYXJyYXlbc3RhcnRpbmdJbmRleF0gPT09IDE7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBGcnVzdHVtT3V0bGluZUdlb21ldHJ5KHsKICAgICAgICAgICAgZnJ1c3R1bSwKICAgICAgICAgICAgb3JpZ2luLAogICAgICAgICAgICBvcmllbnRhdGlvbiwKICAgICAgICAgICAgX2RyYXdOZWFyUGxhbmU6IGRyYXdOZWFyUGxhbmUKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICBjb25zdCBmcnVzdHVtUmVzdWx0ID0gZnJ1c3R1bVR5cGUgPT09IHJlc3VsdC5fZnJ1c3R1bVR5cGUgPyByZXN1bHQuX2ZydXN0dW0gOiB2b2lkIDA7CiAgICAgICAgcmVzdWx0Ll9mcnVzdHVtID0gZnJ1c3R1bS5jbG9uZShmcnVzdHVtUmVzdWx0KTsKICAgICAgICByZXN1bHQuX2ZydXN0dW1UeXBlID0gZnJ1c3R1bVR5cGU7CiAgICAgICAgcmVzdWx0Ll9vcmlnaW4gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUob3JpZ2luLCByZXN1bHQuX29yaWdpbik7CiAgICAgICAgcmVzdWx0Ll9vcmllbnRhdGlvbiA9IFF1YXRlcm5pb25fZGVmYXVsdC5jbG9uZShvcmllbnRhdGlvbiwgcmVzdWx0Ll9vcmllbnRhdGlvbik7CiAgICAgICAgcmVzdWx0Ll9kcmF3TmVhclBsYW5lID0gZHJhd05lYXJQbGFuZTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBGcnVzdHVtT3V0bGluZUdlb21ldHJ5LmNyZWF0ZUdlb21ldHJ5ID0gZnVuY3Rpb24oZnJ1c3R1bUdlb21ldHJ5KSB7CiAgICAgICAgY29uc3QgZnJ1c3R1bVR5cGUgPSBmcnVzdHVtR2VvbWV0cnkuX2ZydXN0dW1UeXBlOwogICAgICAgIGNvbnN0IGZydXN0dW0gPSBmcnVzdHVtR2VvbWV0cnkuX2ZydXN0dW07CiAgICAgICAgY29uc3Qgb3JpZ2luID0gZnJ1c3R1bUdlb21ldHJ5Ll9vcmlnaW47CiAgICAgICAgY29uc3Qgb3JpZW50YXRpb24gPSBmcnVzdHVtR2VvbWV0cnkuX29yaWVudGF0aW9uOwogICAgICAgIGNvbnN0IGRyYXdOZWFyUGxhbmUgPSBmcnVzdHVtR2VvbWV0cnkuX2RyYXdOZWFyUGxhbmU7CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gbmV3IEZsb2F0NjRBcnJheSgzICogNCAqIDIpOwogICAgICAgIEZydXN0dW1HZW9tZXRyeV9kZWZhdWx0Ll9jb21wdXRlTmVhckZhclBsYW5lcygKICAgICAgICAgIG9yaWdpbiwKICAgICAgICAgIG9yaWVudGF0aW9uLAogICAgICAgICAgZnJ1c3R1bVR5cGUsCiAgICAgICAgICBmcnVzdHVtLAogICAgICAgICAgcG9zaXRpb25zCiAgICAgICAgKTsKICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlc19kZWZhdWx0KHsKICAgICAgICAgIHBvc2l0aW9uOiBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkRPVUJMRSwKICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICAgICAgdmFsdWVzOiBwb3NpdGlvbnMKICAgICAgICAgIH0pCiAgICAgICAgfSk7CiAgICAgICAgbGV0IG9mZnNldDsKICAgICAgICBsZXQgaW5kZXg7CiAgICAgICAgY29uc3QgbnVtYmVyT2ZQbGFuZXMgPSBkcmF3TmVhclBsYW5lID8gMiA6IDE7CiAgICAgICAgY29uc3QgaW5kaWNlcyA9IG5ldyBVaW50MTZBcnJheSg4ICogKG51bWJlck9mUGxhbmVzICsgMSkpOwogICAgICAgIGxldCBpID0gZHJhd05lYXJQbGFuZSA/IDAgOiAxOwogICAgICAgIGZvciAoOyBpIDwgMjsgKytpKSB7CiAgICAgICAgICBvZmZzZXQgPSBkcmF3TmVhclBsYW5lID8gaSAqIDggOiAwOwogICAgICAgICAgaW5kZXggPSBpICogNDsKICAgICAgICAgIGluZGljZXNbb2Zmc2V0XSA9IGluZGV4OwogICAgICAgICAgaW5kaWNlc1tvZmZzZXQgKyAxXSA9IGluZGV4ICsgMTsKICAgICAgICAgIGluZGljZXNbb2Zmc2V0ICsgMl0gPSBpbmRleCArIDE7CiAgICAgICAgICBpbmRpY2VzW29mZnNldCArIDNdID0gaW5kZXggKyAyOwogICAgICAgICAgaW5kaWNlc1tvZmZzZXQgKyA0XSA9IGluZGV4ICsgMjsKICAgICAgICAgIGluZGljZXNbb2Zmc2V0ICsgNV0gPSBpbmRleCArIDM7CiAgICAgICAgICBpbmRpY2VzW29mZnNldCArIDZdID0gaW5kZXggKyAzOwogICAgICAgICAgaW5kaWNlc1tvZmZzZXQgKyA3XSA9IGluZGV4OwogICAgICAgIH0KICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMjsgKytpKSB7CiAgICAgICAgICBvZmZzZXQgPSAobnVtYmVyT2ZQbGFuZXMgKyBpKSAqIDg7CiAgICAgICAgICBpbmRleCA9IGkgKiA0OwogICAgICAgICAgaW5kaWNlc1tvZmZzZXRdID0gaW5kZXg7CiAgICAgICAgICBpbmRpY2VzW29mZnNldCArIDFdID0gaW5kZXggKyA0OwogICAgICAgICAgaW5kaWNlc1tvZmZzZXQgKyAyXSA9IGluZGV4ICsgMTsKICAgICAgICAgIGluZGljZXNbb2Zmc2V0ICsgM10gPSBpbmRleCArIDU7CiAgICAgICAgICBpbmRpY2VzW29mZnNldCArIDRdID0gaW5kZXggKyAyOwogICAgICAgICAgaW5kaWNlc1tvZmZzZXQgKyA1XSA9IGluZGV4ICsgNjsKICAgICAgICAgIGluZGljZXNbb2Zmc2V0ICsgNl0gPSBpbmRleCArIDM7CiAgICAgICAgICBpbmRpY2VzW29mZnNldCArIDddID0gaW5kZXggKyA3OwogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3IEdlb21ldHJ5X2RlZmF1bHQoewogICAgICAgICAgYXR0cmlidXRlcywKICAgICAgICAgIGluZGljZXMsCiAgICAgICAgICBwcmltaXRpdmVUeXBlOiBQcmltaXRpdmVUeXBlX2RlZmF1bHQuTElORVMsCiAgICAgICAgICBib3VuZGluZ1NwaGVyZTogQm91bmRpbmdTcGhlcmVfZGVmYXVsdC5mcm9tVmVydGljZXMocG9zaXRpb25zKQogICAgICAgIH0pOwogICAgICB9OwogICAgICBGcnVzdHVtT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQgPSBGcnVzdHVtT3V0bGluZUdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlRnJ1c3R1bU91dGxpbmVHZW9tZXRyeS5qcwogIHZhciBjcmVhdGVGcnVzdHVtT3V0bGluZUdlb21ldHJ5X2V4cG9ydHMgPSB7fTsKICBfX2V4cG9ydChjcmVhdGVGcnVzdHVtT3V0bGluZUdlb21ldHJ5X2V4cG9ydHMsIHsKICAgIGRlZmF1bHQ6ICgpID0+IGNyZWF0ZUZydXN0dW1PdXRsaW5lR2VvbWV0cnlfZGVmYXVsdAogIH0pOwogIGZ1bmN0aW9uIGNyZWF0ZUZydXN0dW1PdXRsaW5lR2VvbWV0cnkoZnJ1c3R1bUdlb21ldHJ5LCBvZmZzZXQpIHsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQob2Zmc2V0KSkgewogICAgICBmcnVzdHVtR2VvbWV0cnkgPSBGcnVzdHVtT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQudW5wYWNrKGZydXN0dW1HZW9tZXRyeSwgb2Zmc2V0KTsKICAgIH0KICAgIHJldHVybiBGcnVzdHVtT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQuY3JlYXRlR2VvbWV0cnkoZnJ1c3R1bUdlb21ldHJ5KTsKICB9CiAgdmFyIGNyZWF0ZUZydXN0dW1PdXRsaW5lR2VvbWV0cnlfZGVmYXVsdDsKICB2YXIgaW5pdF9jcmVhdGVGcnVzdHVtT3V0bGluZUdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVGcnVzdHVtT3V0bGluZUdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRnJ1c3R1bU91dGxpbmVHZW9tZXRyeSgpOwogICAgICBjcmVhdGVGcnVzdHVtT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQgPSBjcmVhdGVGcnVzdHVtT3V0bGluZUdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvR2VvZ3JhcGhpY1RpbGluZ1NjaGVtZS5qcwogIGZ1bmN0aW9uIEdlb2dyYXBoaWNUaWxpbmdTY2hlbWUob3B0aW9ucykgewogICAgb3B0aW9ucyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMsIGRlZmF1bHRWYWx1ZV9kZWZhdWx0LkVNUFRZX09CSkVDVCk7CiAgICB0aGlzLl9lbGxpcHNvaWQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmVsbGlwc29pZCwgRWxsaXBzb2lkX2RlZmF1bHQuZGVmYXVsdCk7CiAgICB0aGlzLl9yZWN0YW5nbGUgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLnJlY3RhbmdsZSwgUmVjdGFuZ2xlX2RlZmF1bHQuTUFYX1ZBTFVFKTsKICAgIHRoaXMuX3Byb2plY3Rpb24gPSBuZXcgR2VvZ3JhcGhpY1Byb2plY3Rpb25fZGVmYXVsdCh0aGlzLl9lbGxpcHNvaWQpOwogICAgdGhpcy5fbnVtYmVyT2ZMZXZlbFplcm9UaWxlc1ggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCgKICAgICAgb3B0aW9ucy5udW1iZXJPZkxldmVsWmVyb1RpbGVzWCwKICAgICAgMgogICAgKTsKICAgIHRoaXMuX251bWJlck9mTGV2ZWxaZXJvVGlsZXNZID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoCiAgICAgIG9wdGlvbnMubnVtYmVyT2ZMZXZlbFplcm9UaWxlc1ksCiAgICAgIDEKICAgICk7CiAgfQogIHZhciBHZW9ncmFwaGljVGlsaW5nU2NoZW1lX2RlZmF1bHQ7CiAgdmFyIGluaXRfR2VvZ3JhcGhpY1RpbGluZ1NjaGVtZSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvR2VvZ3JhcGhpY1RpbGluZ1NjaGVtZS5qcyIoKSB7CiAgICAgIGluaXRfQ2FydGVzaWFuMigpOwogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBpbml0X0dlb2dyYXBoaWNQcm9qZWN0aW9uKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X1JlY3RhbmdsZSgpOwogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhHZW9ncmFwaGljVGlsaW5nU2NoZW1lLnByb3RvdHlwZSwgewogICAgICAgIC8qKgogICAgICAgICAqIEdldHMgdGhlIGVsbGlwc29pZCB0aGF0IGlzIHRpbGVkIGJ5IHRoaXMgdGlsaW5nIHNjaGVtZS4KICAgICAgICAgKiBAbWVtYmVyb2YgR2VvZ3JhcGhpY1RpbGluZ1NjaGVtZS5wcm90b3R5cGUKICAgICAgICAgKiBAdHlwZSB7RWxsaXBzb2lkfQogICAgICAgICAqLwogICAgICAgIGVsbGlwc29pZDogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VsbGlwc29pZDsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIEdldHMgdGhlIHJlY3RhbmdsZSwgaW4gcmFkaWFucywgY292ZXJlZCBieSB0aGlzIHRpbGluZyBzY2hlbWUuCiAgICAgICAgICogQG1lbWJlcm9mIEdlb2dyYXBoaWNUaWxpbmdTY2hlbWUucHJvdG90eXBlCiAgICAgICAgICogQHR5cGUge1JlY3RhbmdsZX0KICAgICAgICAgKi8KICAgICAgICByZWN0YW5nbGU6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZWN0YW5nbGU7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIHRoZSBtYXAgcHJvamVjdGlvbiB1c2VkIGJ5IHRoaXMgdGlsaW5nIHNjaGVtZS4KICAgICAgICAgKiBAbWVtYmVyb2YgR2VvZ3JhcGhpY1RpbGluZ1NjaGVtZS5wcm90b3R5cGUKICAgICAgICAgKiBAdHlwZSB7TWFwUHJvamVjdGlvbn0KICAgICAgICAgKi8KICAgICAgICBwcm9qZWN0aW9uOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5fcHJvamVjdGlvbjsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgICBHZW9ncmFwaGljVGlsaW5nU2NoZW1lLnByb3RvdHlwZS5nZXROdW1iZXJPZlhUaWxlc0F0TGV2ZWwgPSBmdW5jdGlvbihsZXZlbCkgewogICAgICAgIHJldHVybiB0aGlzLl9udW1iZXJPZkxldmVsWmVyb1RpbGVzWCA8PCBsZXZlbDsKICAgICAgfTsKICAgICAgR2VvZ3JhcGhpY1RpbGluZ1NjaGVtZS5wcm90b3R5cGUuZ2V0TnVtYmVyT2ZZVGlsZXNBdExldmVsID0gZnVuY3Rpb24obGV2ZWwpIHsKICAgICAgICByZXR1cm4gdGhpcy5fbnVtYmVyT2ZMZXZlbFplcm9UaWxlc1kgPDwgbGV2ZWw7CiAgICAgIH07CiAgICAgIEdlb2dyYXBoaWNUaWxpbmdTY2hlbWUucHJvdG90eXBlLnJlY3RhbmdsZVRvTmF0aXZlUmVjdGFuZ2xlID0gZnVuY3Rpb24ocmVjdGFuZ2xlLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoInJlY3RhbmdsZSIsIHJlY3RhbmdsZSk7CiAgICAgICAgY29uc3Qgd2VzdCA9IE1hdGhfZGVmYXVsdC50b0RlZ3JlZXMocmVjdGFuZ2xlLndlc3QpOwogICAgICAgIGNvbnN0IHNvdXRoID0gTWF0aF9kZWZhdWx0LnRvRGVncmVlcyhyZWN0YW5nbGUuc291dGgpOwogICAgICAgIGNvbnN0IGVhc3QgPSBNYXRoX2RlZmF1bHQudG9EZWdyZWVzKHJlY3RhbmdsZS5lYXN0KTsKICAgICAgICBjb25zdCBub3J0aCA9IE1hdGhfZGVmYXVsdC50b0RlZ3JlZXMocmVjdGFuZ2xlLm5vcnRoKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IFJlY3RhbmdsZV9kZWZhdWx0KHdlc3QsIHNvdXRoLCBlYXN0LCBub3J0aCk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC53ZXN0ID0gd2VzdDsKICAgICAgICByZXN1bHQuc291dGggPSBzb3V0aDsKICAgICAgICByZXN1bHQuZWFzdCA9IGVhc3Q7CiAgICAgICAgcmVzdWx0Lm5vcnRoID0gbm9ydGg7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgR2VvZ3JhcGhpY1RpbGluZ1NjaGVtZS5wcm90b3R5cGUudGlsZVhZVG9OYXRpdmVSZWN0YW5nbGUgPSBmdW5jdGlvbih4LCB5LCBsZXZlbCwgcmVzdWx0KSB7CiAgICAgICAgY29uc3QgcmVjdGFuZ2xlUmFkaWFucyA9IHRoaXMudGlsZVhZVG9SZWN0YW5nbGUoeCwgeSwgbGV2ZWwsIHJlc3VsdCk7CiAgICAgICAgcmVjdGFuZ2xlUmFkaWFucy53ZXN0ID0gTWF0aF9kZWZhdWx0LnRvRGVncmVlcyhyZWN0YW5nbGVSYWRpYW5zLndlc3QpOwogICAgICAgIHJlY3RhbmdsZVJhZGlhbnMuc291dGggPSBNYXRoX2RlZmF1bHQudG9EZWdyZWVzKHJlY3RhbmdsZVJhZGlhbnMuc291dGgpOwogICAgICAgIHJlY3RhbmdsZVJhZGlhbnMuZWFzdCA9IE1hdGhfZGVmYXVsdC50b0RlZ3JlZXMocmVjdGFuZ2xlUmFkaWFucy5lYXN0KTsKICAgICAgICByZWN0YW5nbGVSYWRpYW5zLm5vcnRoID0gTWF0aF9kZWZhdWx0LnRvRGVncmVlcyhyZWN0YW5nbGVSYWRpYW5zLm5vcnRoKTsKICAgICAgICByZXR1cm4gcmVjdGFuZ2xlUmFkaWFuczsKICAgICAgfTsKICAgICAgR2VvZ3JhcGhpY1RpbGluZ1NjaGVtZS5wcm90b3R5cGUudGlsZVhZVG9SZWN0YW5nbGUgPSBmdW5jdGlvbih4LCB5LCBsZXZlbCwgcmVzdWx0KSB7CiAgICAgICAgY29uc3QgcmVjdGFuZ2xlID0gdGhpcy5fcmVjdGFuZ2xlOwogICAgICAgIGNvbnN0IHhUaWxlcyA9IHRoaXMuZ2V0TnVtYmVyT2ZYVGlsZXNBdExldmVsKGxldmVsKTsKICAgICAgICBjb25zdCB5VGlsZXMgPSB0aGlzLmdldE51bWJlck9mWVRpbGVzQXRMZXZlbChsZXZlbCk7CiAgICAgICAgY29uc3QgeFRpbGVXaWR0aCA9IHJlY3RhbmdsZS53aWR0aCAvIHhUaWxlczsKICAgICAgICBjb25zdCB3ZXN0ID0geCAqIHhUaWxlV2lkdGggKyByZWN0YW5nbGUud2VzdDsKICAgICAgICBjb25zdCBlYXN0ID0gKHggKyAxKSAqIHhUaWxlV2lkdGggKyByZWN0YW5nbGUud2VzdDsKICAgICAgICBjb25zdCB5VGlsZUhlaWdodCA9IHJlY3RhbmdsZS5oZWlnaHQgLyB5VGlsZXM7CiAgICAgICAgY29uc3Qgbm9ydGggPSByZWN0YW5nbGUubm9ydGggLSB5ICogeVRpbGVIZWlnaHQ7CiAgICAgICAgY29uc3Qgc291dGggPSByZWN0YW5nbGUubm9ydGggLSAoeSArIDEpICogeVRpbGVIZWlnaHQ7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IFJlY3RhbmdsZV9kZWZhdWx0KHdlc3QsIHNvdXRoLCBlYXN0LCBub3J0aCk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC53ZXN0ID0gd2VzdDsKICAgICAgICByZXN1bHQuc291dGggPSBzb3V0aDsKICAgICAgICByZXN1bHQuZWFzdCA9IGVhc3Q7CiAgICAgICAgcmVzdWx0Lm5vcnRoID0gbm9ydGg7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgR2VvZ3JhcGhpY1RpbGluZ1NjaGVtZS5wcm90b3R5cGUucG9zaXRpb25Ub1RpbGVYWSA9IGZ1bmN0aW9uKHBvc2l0aW9uLCBsZXZlbCwgcmVzdWx0KSB7CiAgICAgICAgY29uc3QgcmVjdGFuZ2xlID0gdGhpcy5fcmVjdGFuZ2xlOwogICAgICAgIGlmICghUmVjdGFuZ2xlX2RlZmF1bHQuY29udGFpbnMocmVjdGFuZ2xlLCBwb3NpdGlvbikpIHsKICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHhUaWxlcyA9IHRoaXMuZ2V0TnVtYmVyT2ZYVGlsZXNBdExldmVsKGxldmVsKTsKICAgICAgICBjb25zdCB5VGlsZXMgPSB0aGlzLmdldE51bWJlck9mWVRpbGVzQXRMZXZlbChsZXZlbCk7CiAgICAgICAgY29uc3QgeFRpbGVXaWR0aCA9IHJlY3RhbmdsZS53aWR0aCAvIHhUaWxlczsKICAgICAgICBjb25zdCB5VGlsZUhlaWdodCA9IHJlY3RhbmdsZS5oZWlnaHQgLyB5VGlsZXM7CiAgICAgICAgbGV0IGxvbmdpdHVkZSA9IHBvc2l0aW9uLmxvbmdpdHVkZTsKICAgICAgICBpZiAocmVjdGFuZ2xlLmVhc3QgPCByZWN0YW5nbGUud2VzdCkgewogICAgICAgICAgbG9uZ2l0dWRlICs9IE1hdGhfZGVmYXVsdC5UV09fUEk7CiAgICAgICAgfQogICAgICAgIGxldCB4VGlsZUNvb3JkaW5hdGUgPSAobG9uZ2l0dWRlIC0gcmVjdGFuZ2xlLndlc3QpIC8geFRpbGVXaWR0aCB8IDA7CiAgICAgICAgaWYgKHhUaWxlQ29vcmRpbmF0ZSA+PSB4VGlsZXMpIHsKICAgICAgICAgIHhUaWxlQ29vcmRpbmF0ZSA9IHhUaWxlcyAtIDE7CiAgICAgICAgfQogICAgICAgIGxldCB5VGlsZUNvb3JkaW5hdGUgPSAocmVjdGFuZ2xlLm5vcnRoIC0gcG9zaXRpb24ubGF0aXR1ZGUpIC8geVRpbGVIZWlnaHQgfCAwOwogICAgICAgIGlmICh5VGlsZUNvb3JkaW5hdGUgPj0geVRpbGVzKSB7CiAgICAgICAgICB5VGlsZUNvb3JkaW5hdGUgPSB5VGlsZXMgLSAxOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IENhcnRlc2lhbjJfZGVmYXVsdCh4VGlsZUNvb3JkaW5hdGUsIHlUaWxlQ29vcmRpbmF0ZSk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC54ID0geFRpbGVDb29yZGluYXRlOwogICAgICAgIHJlc3VsdC55ID0geVRpbGVDb29yZGluYXRlOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIEdlb2dyYXBoaWNUaWxpbmdTY2hlbWVfZGVmYXVsdCA9IEdlb2dyYXBoaWNUaWxpbmdTY2hlbWU7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9BcHByb3hpbWF0ZVRlcnJhaW5IZWlnaHRzLmpzCiAgZnVuY3Rpb24gZ2V0VGlsZVhZTGV2ZWwocmVjdGFuZ2xlKSB7CiAgICBDYXJ0b2dyYXBoaWNfZGVmYXVsdC5mcm9tUmFkaWFucygKICAgICAgcmVjdGFuZ2xlLmVhc3QsCiAgICAgIHJlY3RhbmdsZS5ub3J0aCwKICAgICAgMCwKICAgICAgc2NyYXRjaENvcm5lcnNbMF0KICAgICk7CiAgICBDYXJ0b2dyYXBoaWNfZGVmYXVsdC5mcm9tUmFkaWFucygKICAgICAgcmVjdGFuZ2xlLndlc3QsCiAgICAgIHJlY3RhbmdsZS5ub3J0aCwKICAgICAgMCwKICAgICAgc2NyYXRjaENvcm5lcnNbMV0KICAgICk7CiAgICBDYXJ0b2dyYXBoaWNfZGVmYXVsdC5mcm9tUmFkaWFucygKICAgICAgcmVjdGFuZ2xlLmVhc3QsCiAgICAgIHJlY3RhbmdsZS5zb3V0aCwKICAgICAgMCwKICAgICAgc2NyYXRjaENvcm5lcnNbMl0KICAgICk7CiAgICBDYXJ0b2dyYXBoaWNfZGVmYXVsdC5mcm9tUmFkaWFucygKICAgICAgcmVjdGFuZ2xlLndlc3QsCiAgICAgIHJlY3RhbmdsZS5zb3V0aCwKICAgICAgMCwKICAgICAgc2NyYXRjaENvcm5lcnNbM10KICAgICk7CiAgICBsZXQgbGFzdExldmVsWCA9IDAsIGxhc3RMZXZlbFkgPSAwOwogICAgbGV0IGN1cnJlbnRYID0gMCwgY3VycmVudFkgPSAwOwogICAgY29uc3QgbWF4TGV2ZWwgPSBBcHByb3hpbWF0ZVRlcnJhaW5IZWlnaHRzLl90ZXJyYWluSGVpZ2h0c01heExldmVsOwogICAgbGV0IGk7CiAgICBmb3IgKGkgPSAwOyBpIDw9IG1heExldmVsOyArK2kpIHsKICAgICAgbGV0IGZhaWxlZCA9IGZhbHNlOwogICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDQ7ICsraikgewogICAgICAgIGNvbnN0IGNvcm5lciA9IHNjcmF0Y2hDb3JuZXJzW2pdOwogICAgICAgIHRpbGluZ1NjaGVtZS5wb3NpdGlvblRvVGlsZVhZKGNvcm5lciwgaSwgc2NyYXRjaFRpbGVYWSk7CiAgICAgICAgaWYgKGogPT09IDApIHsKICAgICAgICAgIGN1cnJlbnRYID0gc2NyYXRjaFRpbGVYWS54OwogICAgICAgICAgY3VycmVudFkgPSBzY3JhdGNoVGlsZVhZLnk7CiAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50WCAhPT0gc2NyYXRjaFRpbGVYWS54IHx8IGN1cnJlbnRZICE9PSBzY3JhdGNoVGlsZVhZLnkpIHsKICAgICAgICAgIGZhaWxlZCA9IHRydWU7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKGZhaWxlZCkgewogICAgICAgIGJyZWFrOwogICAgICB9CiAgICAgIGxhc3RMZXZlbFggPSBjdXJyZW50WDsKICAgICAgbGFzdExldmVsWSA9IGN1cnJlbnRZOwogICAgfQogICAgaWYgKGkgPT09IDApIHsKICAgICAgcmV0dXJuIHZvaWQgMDsKICAgIH0KICAgIHJldHVybiB7CiAgICAgIHg6IGxhc3RMZXZlbFgsCiAgICAgIHk6IGxhc3RMZXZlbFksCiAgICAgIGxldmVsOiBpID4gbWF4TGV2ZWwgPyBtYXhMZXZlbCA6IGkgLSAxCiAgICB9OwogIH0KICB2YXIgc2NyYXRjaERpYWdvbmFsQ2FydGVzaWFuTkUsIHNjcmF0Y2hEaWFnb25hbENhcnRlc2lhblNXLCBzY3JhdGNoRGlhZ29uYWxDYXJ0b2dyYXBoaWMsIHNjcmF0Y2hDZW50ZXJDYXJ0ZXNpYW4sIHNjcmF0Y2hTdXJmYWNlQ2FydGVzaWFuLCBzY3JhdGNoQm91bmRpbmdTcGhlcmUyLCB0aWxpbmdTY2hlbWUsIHNjcmF0Y2hDb3JuZXJzLCBzY3JhdGNoVGlsZVhZLCBBcHByb3hpbWF0ZVRlcnJhaW5IZWlnaHRzLCBBcHByb3hpbWF0ZVRlcnJhaW5IZWlnaHRzX2RlZmF1bHQ7CiAgdmFyIGluaXRfQXBwcm94aW1hdGVUZXJyYWluSGVpZ2h0cyA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvQXBwcm94aW1hdGVUZXJyYWluSGVpZ2h0cy5qcyIoKSB7CiAgICAgIGluaXRfQm91bmRpbmdTcGhlcmUoKTsKICAgICAgaW5pdF9idWlsZE1vZHVsZVVybCgpOwogICAgICBpbml0X0NhcnRlc2lhbjIoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ2FydG9ncmFwaGljKCk7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9HZW9ncmFwaGljVGlsaW5nU2NoZW1lKCk7CiAgICAgIGluaXRfUmVjdGFuZ2xlKCk7CiAgICAgIGluaXRfUmVzb3VyY2UoKTsKICAgICAgc2NyYXRjaERpYWdvbmFsQ2FydGVzaWFuTkUgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hEaWFnb25hbENhcnRlc2lhblNXID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoRGlhZ29uYWxDYXJ0b2dyYXBoaWMgPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaENlbnRlckNhcnRlc2lhbiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFN1cmZhY2VDYXJ0ZXNpYW4gPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hCb3VuZGluZ1NwaGVyZTIgPSBuZXcgQm91bmRpbmdTcGhlcmVfZGVmYXVsdCgpOwogICAgICB0aWxpbmdTY2hlbWUgPSBuZXcgR2VvZ3JhcGhpY1RpbGluZ1NjaGVtZV9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hDb3JuZXJzID0gWwogICAgICAgIG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpLAogICAgICAgIG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpLAogICAgICAgIG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpLAogICAgICAgIG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpCiAgICAgIF07CiAgICAgIHNjcmF0Y2hUaWxlWFkgPSBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCk7CiAgICAgIEFwcHJveGltYXRlVGVycmFpbkhlaWdodHMgPSB7fTsKICAgICAgQXBwcm94aW1hdGVUZXJyYWluSGVpZ2h0cy5pbml0aWFsaXplID0gZnVuY3Rpb24oKSB7CiAgICAgICAgbGV0IGluaXRQcm9taXNlID0gQXBwcm94aW1hdGVUZXJyYWluSGVpZ2h0cy5faW5pdFByb21pc2U7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChpbml0UHJvbWlzZSkpIHsKICAgICAgICAgIHJldHVybiBpbml0UHJvbWlzZTsKICAgICAgICB9CiAgICAgICAgaW5pdFByb21pc2UgPSBSZXNvdXJjZV9kZWZhdWx0LmZldGNoSnNvbigKICAgICAgICAgIGJ1aWxkTW9kdWxlVXJsX2RlZmF1bHQoIkFzc2V0cy9hcHByb3hpbWF0ZVRlcnJhaW5IZWlnaHRzLmpzb24iKQogICAgICAgICkudGhlbihmdW5jdGlvbihqc29uKSB7CiAgICAgICAgICBBcHByb3hpbWF0ZVRlcnJhaW5IZWlnaHRzLl90ZXJyYWluSGVpZ2h0cyA9IGpzb247CiAgICAgICAgfSk7CiAgICAgICAgQXBwcm94aW1hdGVUZXJyYWluSGVpZ2h0cy5faW5pdFByb21pc2UgPSBpbml0UHJvbWlzZTsKICAgICAgICByZXR1cm4gaW5pdFByb21pc2U7CiAgICAgIH07CiAgICAgIEFwcHJveGltYXRlVGVycmFpbkhlaWdodHMuZ2V0TWluaW11bU1heGltdW1IZWlnaHRzID0gZnVuY3Rpb24ocmVjdGFuZ2xlLCBlbGxpcHNvaWQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoInJlY3RhbmdsZSIsIHJlY3RhbmdsZSk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoQXBwcm94aW1hdGVUZXJyYWluSGVpZ2h0cy5fdGVycmFpbkhlaWdodHMpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgIllvdSBtdXN0IGNhbGwgQXBwcm94aW1hdGVUZXJyYWluSGVpZ2h0cy5pbml0aWFsaXplIGFuZCB3YWl0IGZvciB0aGUgcHJvbWlzZSB0byByZXNvbHZlIGJlZm9yZSB1c2luZyB0aGlzIGZ1bmN0aW9uIgogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgZWxsaXBzb2lkID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoZWxsaXBzb2lkLCBFbGxpcHNvaWRfZGVmYXVsdC5kZWZhdWx0KTsKICAgICAgICBjb25zdCB4eUxldmVsID0gZ2V0VGlsZVhZTGV2ZWwocmVjdGFuZ2xlKTsKICAgICAgICBsZXQgbWluVGVycmFpbkhlaWdodCA9IEFwcHJveGltYXRlVGVycmFpbkhlaWdodHMuX2RlZmF1bHRNaW5UZXJyYWluSGVpZ2h0OwogICAgICAgIGxldCBtYXhUZXJyYWluSGVpZ2h0ID0gQXBwcm94aW1hdGVUZXJyYWluSGVpZ2h0cy5fZGVmYXVsdE1heFRlcnJhaW5IZWlnaHQ7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdCh4eUxldmVsKSkgewogICAgICAgICAgY29uc3Qga2V5ID0gYCR7eHlMZXZlbC5sZXZlbH0tJHt4eUxldmVsLnh9LSR7eHlMZXZlbC55fWA7CiAgICAgICAgICBjb25zdCBoZWlnaHRzID0gQXBwcm94aW1hdGVUZXJyYWluSGVpZ2h0cy5fdGVycmFpbkhlaWdodHNba2V5XTsKICAgICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoaGVpZ2h0cykpIHsKICAgICAgICAgICAgbWluVGVycmFpbkhlaWdodCA9IGhlaWdodHNbMF07CiAgICAgICAgICAgIG1heFRlcnJhaW5IZWlnaHQgPSBoZWlnaHRzWzFdOwogICAgICAgICAgfQogICAgICAgICAgZWxsaXBzb2lkLmNhcnRvZ3JhcGhpY1RvQ2FydGVzaWFuKAogICAgICAgICAgICBSZWN0YW5nbGVfZGVmYXVsdC5ub3J0aGVhc3QocmVjdGFuZ2xlLCBzY3JhdGNoRGlhZ29uYWxDYXJ0b2dyYXBoaWMpLAogICAgICAgICAgICBzY3JhdGNoRGlhZ29uYWxDYXJ0ZXNpYW5ORQogICAgICAgICAgKTsKICAgICAgICAgIGVsbGlwc29pZC5jYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbigKICAgICAgICAgICAgUmVjdGFuZ2xlX2RlZmF1bHQuc291dGh3ZXN0KHJlY3RhbmdsZSwgc2NyYXRjaERpYWdvbmFsQ2FydG9ncmFwaGljKSwKICAgICAgICAgICAgc2NyYXRjaERpYWdvbmFsQ2FydGVzaWFuU1cKICAgICAgICAgICk7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubWlkcG9pbnQoCiAgICAgICAgICAgIHNjcmF0Y2hEaWFnb25hbENhcnRlc2lhblNXLAogICAgICAgICAgICBzY3JhdGNoRGlhZ29uYWxDYXJ0ZXNpYW5ORSwKICAgICAgICAgICAgc2NyYXRjaENlbnRlckNhcnRlc2lhbgogICAgICAgICAgKTsKICAgICAgICAgIGNvbnN0IHN1cmZhY2VQb3NpdGlvbiA9IGVsbGlwc29pZC5zY2FsZVRvR2VvZGV0aWNTdXJmYWNlKAogICAgICAgICAgICBzY3JhdGNoQ2VudGVyQ2FydGVzaWFuLAogICAgICAgICAgICBzY3JhdGNoU3VyZmFjZUNhcnRlc2lhbgogICAgICAgICAgKTsKICAgICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoc3VyZmFjZVBvc2l0aW9uKSkgewogICAgICAgICAgICBjb25zdCBkaXN0YW5jZSA9IENhcnRlc2lhbjNfZGVmYXVsdC5kaXN0YW5jZSgKICAgICAgICAgICAgICBzY3JhdGNoQ2VudGVyQ2FydGVzaWFuLAogICAgICAgICAgICAgIHN1cmZhY2VQb3NpdGlvbgogICAgICAgICAgICApOwogICAgICAgICAgICBtaW5UZXJyYWluSGVpZ2h0ID0gTWF0aC5taW4obWluVGVycmFpbkhlaWdodCwgLWRpc3RhbmNlKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG1pblRlcnJhaW5IZWlnaHQgPSBBcHByb3hpbWF0ZVRlcnJhaW5IZWlnaHRzLl9kZWZhdWx0TWluVGVycmFpbkhlaWdodDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgbWluVGVycmFpbkhlaWdodCA9IE1hdGgubWF4KAogICAgICAgICAgQXBwcm94aW1hdGVUZXJyYWluSGVpZ2h0cy5fZGVmYXVsdE1pblRlcnJhaW5IZWlnaHQsCiAgICAgICAgICBtaW5UZXJyYWluSGVpZ2h0CiAgICAgICAgKTsKICAgICAgICByZXR1cm4gewogICAgICAgICAgbWluaW11bVRlcnJhaW5IZWlnaHQ6IG1pblRlcnJhaW5IZWlnaHQsCiAgICAgICAgICBtYXhpbXVtVGVycmFpbkhlaWdodDogbWF4VGVycmFpbkhlaWdodAogICAgICAgIH07CiAgICAgIH07CiAgICAgIEFwcHJveGltYXRlVGVycmFpbkhlaWdodHMuZ2V0Qm91bmRpbmdTcGhlcmUgPSBmdW5jdGlvbihyZWN0YW5nbGUsIGVsbGlwc29pZCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgicmVjdGFuZ2xlIiwgcmVjdGFuZ2xlKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChBcHByb3hpbWF0ZVRlcnJhaW5IZWlnaHRzLl90ZXJyYWluSGVpZ2h0cykpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgICAiWW91IG11c3QgY2FsbCBBcHByb3hpbWF0ZVRlcnJhaW5IZWlnaHRzLmluaXRpYWxpemUgYW5kIHdhaXQgZm9yIHRoZSBwcm9taXNlIHRvIHJlc29sdmUgYmVmb3JlIHVzaW5nIHRoaXMgZnVuY3Rpb24iCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBlbGxpcHNvaWQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChlbGxpcHNvaWQsIEVsbGlwc29pZF9kZWZhdWx0LmRlZmF1bHQpOwogICAgICAgIGNvbnN0IHh5TGV2ZWwgPSBnZXRUaWxlWFlMZXZlbChyZWN0YW5nbGUpOwogICAgICAgIGxldCBtYXhUZXJyYWluSGVpZ2h0ID0gQXBwcm94aW1hdGVUZXJyYWluSGVpZ2h0cy5fZGVmYXVsdE1heFRlcnJhaW5IZWlnaHQ7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdCh4eUxldmVsKSkgewogICAgICAgICAgY29uc3Qga2V5ID0gYCR7eHlMZXZlbC5sZXZlbH0tJHt4eUxldmVsLnh9LSR7eHlMZXZlbC55fWA7CiAgICAgICAgICBjb25zdCBoZWlnaHRzID0gQXBwcm94aW1hdGVUZXJyYWluSGVpZ2h0cy5fdGVycmFpbkhlaWdodHNba2V5XTsKICAgICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoaGVpZ2h0cykpIHsKICAgICAgICAgICAgbWF4VGVycmFpbkhlaWdodCA9IGhlaWdodHNbMV07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNvbnN0IHJlc3VsdCA9IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQuZnJvbVJlY3RhbmdsZTNEKHJlY3RhbmdsZSwgZWxsaXBzb2lkLCAwKTsKICAgICAgICBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0LmZyb21SZWN0YW5nbGUzRCgKICAgICAgICAgIHJlY3RhbmdsZSwKICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgIG1heFRlcnJhaW5IZWlnaHQsCiAgICAgICAgICBzY3JhdGNoQm91bmRpbmdTcGhlcmUyCiAgICAgICAgKTsKICAgICAgICByZXR1cm4gQm91bmRpbmdTcGhlcmVfZGVmYXVsdC51bmlvbihyZXN1bHQsIHNjcmF0Y2hCb3VuZGluZ1NwaGVyZTIsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIEFwcHJveGltYXRlVGVycmFpbkhlaWdodHMuX3RlcnJhaW5IZWlnaHRzTWF4TGV2ZWwgPSA2OwogICAgICBBcHByb3hpbWF0ZVRlcnJhaW5IZWlnaHRzLl9kZWZhdWx0TWF4VGVycmFpbkhlaWdodCA9IDllMzsKICAgICAgQXBwcm94aW1hdGVUZXJyYWluSGVpZ2h0cy5fZGVmYXVsdE1pblRlcnJhaW5IZWlnaHQgPSAtMWU1OwogICAgICBBcHByb3hpbWF0ZVRlcnJhaW5IZWlnaHRzLl90ZXJyYWluSGVpZ2h0cyA9IHZvaWQgMDsKICAgICAgQXBwcm94aW1hdGVUZXJyYWluSGVpZ2h0cy5faW5pdFByb21pc2UgPSB2b2lkIDA7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEFwcHJveGltYXRlVGVycmFpbkhlaWdodHMsIHsKICAgICAgICAvKioKICAgICAgICAgKiBEZXRlcm1pbmVzIGlmIHRoZSB0ZXJyYWluIGhlaWdodHMgYXJlIGluaXRpYWxpemVkIGFuZCByZWFkeSB0byB1c2UuIFRvIGluaXRpYWxpemUgdGhlIHRlcnJhaW4gaGVpZ2h0cywKICAgICAgICAgKiBjYWxsIHtAbGluayBBcHByb3hpbWF0ZVRlcnJhaW5IZWlnaHRzI2luaXRpYWxpemV9IGFuZCB3YWl0IGZvciB0aGUgcmV0dXJuZWQgcHJvbWlzZSB0byByZXNvbHZlLgogICAgICAgICAqIEB0eXBlIHtib29sZWFufQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqIEBtZW1iZXJvZiBBcHByb3hpbWF0ZVRlcnJhaW5IZWlnaHRzCiAgICAgICAgICovCiAgICAgICAgaW5pdGlhbGl6ZWQ6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBkZWZpbmVkX2RlZmF1bHQoQXBwcm94aW1hdGVUZXJyYWluSGVpZ2h0cy5fdGVycmFpbkhlaWdodHMpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICAgIEFwcHJveGltYXRlVGVycmFpbkhlaWdodHNfZGVmYXVsdCA9IEFwcHJveGltYXRlVGVycmFpbkhlaWdodHM7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9Hcm91bmRQb2x5bGluZUdlb21ldHJ5LmpzCiAgZnVuY3Rpb24gR3JvdW5kUG9seWxpbmVHZW9tZXRyeShvcHRpb25zKSB7CiAgICBvcHRpb25zID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucywgZGVmYXVsdFZhbHVlX2RlZmF1bHQuRU1QVFlfT0JKRUNUKTsKICAgIGNvbnN0IHBvc2l0aW9ucyA9IG9wdGlvbnMucG9zaXRpb25zOwogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocG9zaXRpb25zKSB8fCBwb3NpdGlvbnMubGVuZ3RoIDwgMikgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiQXQgbGVhc3QgdHdvIHBvc2l0aW9ucyBhcmUgcmVxdWlyZWQuIik7CiAgICB9CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG9wdGlvbnMuYXJjVHlwZSkgJiYgb3B0aW9ucy5hcmNUeXBlICE9PSBBcmNUeXBlX2RlZmF1bHQuR0VPREVTSUMgJiYgb3B0aW9ucy5hcmNUeXBlICE9PSBBcmNUeXBlX2RlZmF1bHQuUkhVTUIpIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgIlZhbGlkIG9wdGlvbnMgZm9yIGFyY1R5cGUgYXJlIEFyY1R5cGUuR0VPREVTSUMgYW5kIEFyY1R5cGUuUkhVTUIuIgogICAgICApOwogICAgfQogICAgdGhpcy53aWR0aCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMud2lkdGgsIDEpOwogICAgdGhpcy5fcG9zaXRpb25zID0gcG9zaXRpb25zOwogICAgdGhpcy5ncmFudWxhcml0eSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuZ3JhbnVsYXJpdHksIDk5OTkpOwogICAgdGhpcy5sb29wID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5sb29wLCBmYWxzZSk7CiAgICB0aGlzLmFyY1R5cGUgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmFyY1R5cGUsIEFyY1R5cGVfZGVmYXVsdC5HRU9ERVNJQyk7CiAgICB0aGlzLl9lbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC5kZWZhdWx0OwogICAgdGhpcy5fcHJvamVjdGlvbkluZGV4ID0gMDsKICAgIHRoaXMuX3dvcmtlck5hbWUgPSAiY3JlYXRlR3JvdW5kUG9seWxpbmVHZW9tZXRyeSI7CiAgICB0aGlzLl9zY2VuZTNET25seSA9IGZhbHNlOwogIH0KICBmdW5jdGlvbiBjb21wdXRlUmlnaHROb3JtYWwoc3RhcnQsIGVuZCwgbWF4SGVpZ2h0LCBlbGxpcHNvaWQsIHJlc3VsdCkgewogICAgY29uc3Qgc3RhcnRCb3R0b20gPSBnZXRQb3NpdGlvbihlbGxpcHNvaWQsIHN0YXJ0LCAwLCBjYXJ0M1NjcmF0Y2gxKTsKICAgIGNvbnN0IHN0YXJ0VG9wID0gZ2V0UG9zaXRpb24oZWxsaXBzb2lkLCBzdGFydCwgbWF4SGVpZ2h0LCBjYXJ0M1NjcmF0Y2gyKTsKICAgIGNvbnN0IGVuZEJvdHRvbSA9IGdldFBvc2l0aW9uKGVsbGlwc29pZCwgZW5kLCAwLCBjYXJ0M1NjcmF0Y2gzKTsKICAgIGNvbnN0IHVwID0gZGlyZWN0aW9uKHN0YXJ0VG9wLCBzdGFydEJvdHRvbSwgY2FydDNTY3JhdGNoMik7CiAgICBjb25zdCBmb3J3YXJkID0gZGlyZWN0aW9uKGVuZEJvdHRvbSwgc3RhcnRCb3R0b20sIGNhcnQzU2NyYXRjaDMpOwogICAgQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKGZvcndhcmQsIHVwLCByZXN1bHQpOwogICAgcmV0dXJuIENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUocmVzdWx0LCByZXN1bHQpOwogIH0KICBmdW5jdGlvbiBpbnRlcnBvbGF0ZVNlZ21lbnQoc3RhcnQsIGVuZCwgbWluSGVpZ2h0LCBtYXhIZWlnaHQsIGdyYW51bGFyaXR5LCBhcmNUeXBlLCBlbGxpcHNvaWQsIG5vcm1hbHNBcnJheSwgYm90dG9tUG9zaXRpb25zQXJyYXksIHRvcFBvc2l0aW9uc0FycmF5LCBjYXJ0b2dyYXBoaWNzQXJyYXkpIHsKICAgIGlmIChncmFudWxhcml0eSA9PT0gMCkgewogICAgICByZXR1cm47CiAgICB9CiAgICBsZXQgZWxsaXBzb2lkTGluZTsKICAgIGlmIChhcmNUeXBlID09PSBBcmNUeXBlX2RlZmF1bHQuR0VPREVTSUMpIHsKICAgICAgZWxsaXBzb2lkTGluZSA9IG5ldyBFbGxpcHNvaWRHZW9kZXNpY19kZWZhdWx0KHN0YXJ0LCBlbmQsIGVsbGlwc29pZCk7CiAgICB9IGVsc2UgaWYgKGFyY1R5cGUgPT09IEFyY1R5cGVfZGVmYXVsdC5SSFVNQikgewogICAgICBlbGxpcHNvaWRMaW5lID0gbmV3IEVsbGlwc29pZFJodW1iTGluZV9kZWZhdWx0KHN0YXJ0LCBlbmQsIGVsbGlwc29pZCk7CiAgICB9CiAgICBjb25zdCBzdXJmYWNlRGlzdGFuY2UgPSBlbGxpcHNvaWRMaW5lLnN1cmZhY2VEaXN0YW5jZTsKICAgIGlmIChzdXJmYWNlRGlzdGFuY2UgPCBncmFudWxhcml0eSkgewogICAgICByZXR1cm47CiAgICB9CiAgICBjb25zdCBpbnRlcnBvbGF0ZWROb3JtYWwgPSBjb21wdXRlUmlnaHROb3JtYWwoCiAgICAgIHN0YXJ0LAogICAgICBlbmQsCiAgICAgIG1heEhlaWdodCwKICAgICAgZWxsaXBzb2lkLAogICAgICBpbnRlcnBvbGF0ZWROb3JtYWxTY3JhdGNoCiAgICApOwogICAgY29uc3Qgc2VnbWVudHMgPSBNYXRoLmNlaWwoc3VyZmFjZURpc3RhbmNlIC8gZ3JhbnVsYXJpdHkpOwogICAgY29uc3QgaW50ZXJwb2ludERpc3RhbmNlID0gc3VyZmFjZURpc3RhbmNlIC8gc2VnbWVudHM7CiAgICBsZXQgZGlzdGFuY2VGcm9tU3RhcnQgPSBpbnRlcnBvaW50RGlzdGFuY2U7CiAgICBjb25zdCBwb2ludHNUb0FkZCA9IHNlZ21lbnRzIC0gMTsKICAgIGxldCBwYWNrSW5kZXggPSBub3JtYWxzQXJyYXkubGVuZ3RoOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludHNUb0FkZDsgaSsrKSB7CiAgICAgIGNvbnN0IGludGVycG9sYXRlZENhcnRvZ3JhcGhpYyA9IGVsbGlwc29pZExpbmUuaW50ZXJwb2xhdGVVc2luZ1N1cmZhY2VEaXN0YW5jZSgKICAgICAgICBkaXN0YW5jZUZyb21TdGFydCwKICAgICAgICBpbnRlcnBvbGF0ZWRDYXJ0b2dyYXBoaWNTY3JhdGNoCiAgICAgICk7CiAgICAgIGNvbnN0IGludGVycG9sYXRlZEJvdHRvbSA9IGdldFBvc2l0aW9uKAogICAgICAgIGVsbGlwc29pZCwKICAgICAgICBpbnRlcnBvbGF0ZWRDYXJ0b2dyYXBoaWMsCiAgICAgICAgbWluSGVpZ2h0LAogICAgICAgIGludGVycG9sYXRlZEJvdHRvbVNjcmF0Y2gKICAgICAgKTsKICAgICAgY29uc3QgaW50ZXJwb2xhdGVkVG9wID0gZ2V0UG9zaXRpb24oCiAgICAgICAgZWxsaXBzb2lkLAogICAgICAgIGludGVycG9sYXRlZENhcnRvZ3JhcGhpYywKICAgICAgICBtYXhIZWlnaHQsCiAgICAgICAgaW50ZXJwb2xhdGVkVG9wU2NyYXRjaAogICAgICApOwogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayhpbnRlcnBvbGF0ZWROb3JtYWwsIG5vcm1hbHNBcnJheSwgcGFja0luZGV4KTsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2soaW50ZXJwb2xhdGVkQm90dG9tLCBib3R0b21Qb3NpdGlvbnNBcnJheSwgcGFja0luZGV4KTsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2soaW50ZXJwb2xhdGVkVG9wLCB0b3BQb3NpdGlvbnNBcnJheSwgcGFja0luZGV4KTsKICAgICAgY2FydG9ncmFwaGljc0FycmF5LnB1c2goaW50ZXJwb2xhdGVkQ2FydG9ncmFwaGljLmxhdGl0dWRlKTsKICAgICAgY2FydG9ncmFwaGljc0FycmF5LnB1c2goaW50ZXJwb2xhdGVkQ2FydG9ncmFwaGljLmxvbmdpdHVkZSk7CiAgICAgIHBhY2tJbmRleCArPSAzOwogICAgICBkaXN0YW5jZUZyb21TdGFydCArPSBpbnRlcnBvaW50RGlzdGFuY2U7CiAgICB9CiAgfQogIGZ1bmN0aW9uIGdldFBvc2l0aW9uKGVsbGlwc29pZCwgY2FydG9ncmFwaGljMiwgaGVpZ2h0LCByZXN1bHQpIHsKICAgIENhcnRvZ3JhcGhpY19kZWZhdWx0LmNsb25lKGNhcnRvZ3JhcGhpYzIsIGhlaWdodGxlc3NDYXJ0b2dyYXBoaWNTY3JhdGNoKTsKICAgIGhlaWdodGxlc3NDYXJ0b2dyYXBoaWNTY3JhdGNoLmhlaWdodCA9IGhlaWdodDsKICAgIHJldHVybiBDYXJ0b2dyYXBoaWNfZGVmYXVsdC50b0NhcnRlc2lhbigKICAgICAgaGVpZ2h0bGVzc0NhcnRvZ3JhcGhpY1NjcmF0Y2gsCiAgICAgIGVsbGlwc29pZCwKICAgICAgcmVzdWx0CiAgICApOwogIH0KICBmdW5jdGlvbiBkaXJlY3Rpb24odGFyZ2V0LCBvcmlnaW4sIHJlc3VsdCkgewogICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHRhcmdldCwgb3JpZ2luLCByZXN1bHQpOwogICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShyZXN1bHQsIHJlc3VsdCk7CiAgICByZXR1cm4gcmVzdWx0OwogIH0KICBmdW5jdGlvbiB0YW5nZW50RGlyZWN0aW9uKHRhcmdldCwgb3JpZ2luLCB1cCwgcmVzdWx0KSB7CiAgICByZXN1bHQgPSBkaXJlY3Rpb24odGFyZ2V0LCBvcmlnaW4sIHJlc3VsdCk7CiAgICByZXN1bHQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY3Jvc3MocmVzdWx0LCB1cCwgcmVzdWx0KTsKICAgIHJlc3VsdCA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUocmVzdWx0LCByZXN1bHQpOwogICAgcmVzdWx0ID0gQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKHVwLCByZXN1bHQsIHJlc3VsdCk7CiAgICByZXR1cm4gcmVzdWx0OwogIH0KICBmdW5jdGlvbiBjb21wdXRlVmVydGV4TWl0ZXJOb3JtYWwocHJldmlvdXNCb3R0b20sIHZlcnRleEJvdHRvbSwgdmVydGV4VG9wLCBuZXh0Qm90dG9tLCByZXN1bHQpIHsKICAgIGNvbnN0IHVwID0gZGlyZWN0aW9uKHZlcnRleFRvcCwgdmVydGV4Qm90dG9tLCB2ZXJ0ZXhVcFNjcmF0Y2gpOwogICAgY29uc3QgdG9QcmV2aW91cyA9IHRhbmdlbnREaXJlY3Rpb24oCiAgICAgIHByZXZpb3VzQm90dG9tLAogICAgICB2ZXJ0ZXhCb3R0b20sCiAgICAgIHVwLAogICAgICB0b1ByZXZpb3VzU2NyYXRjaAogICAgKTsKICAgIGNvbnN0IHRvTmV4dCA9IHRhbmdlbnREaXJlY3Rpb24obmV4dEJvdHRvbSwgdmVydGV4Qm90dG9tLCB1cCwgdG9OZXh0U2NyYXRjaCk7CiAgICBpZiAoTWF0aF9kZWZhdWx0LmVxdWFsc0Vwc2lsb24oCiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5kb3QodG9QcmV2aW91cywgdG9OZXh0KSwKICAgICAgY29zaW5lMTgwLAogICAgICBNYXRoX2RlZmF1bHQuRVBTSUxPTjUKICAgICkpIHsKICAgICAgcmVzdWx0ID0gQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKHVwLCB0b1ByZXZpb3VzLCByZXN1bHQpOwogICAgICByZXN1bHQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKHJlc3VsdCwgcmVzdWx0KTsKICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KICAgIHJlc3VsdCA9IENhcnRlc2lhbjNfZGVmYXVsdC5hZGQodG9OZXh0LCB0b1ByZXZpb3VzLCByZXN1bHQpOwogICAgcmVzdWx0ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShyZXN1bHQsIHJlc3VsdCk7CiAgICBjb25zdCBmb3J3YXJkID0gQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKHVwLCByZXN1bHQsIGZvcndhcmRTY3JhdGNoKTsKICAgIGlmIChDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KHRvTmV4dCwgZm9yd2FyZCkgPCBjb3NpbmU5MCkgewogICAgICByZXN1bHQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubmVnYXRlKHJlc3VsdCwgcmVzdWx0KTsKICAgIH0KICAgIHJldHVybiByZXN1bHQ7CiAgfQogIGZ1bmN0aW9uIGJyZWFrTWl0ZXIoZW5kR2VvbWV0cnlOb3JtYWwsIHN0YXJ0Qm90dG9tLCBlbmRCb3R0b20sIGVuZFRvcCkgewogICAgY29uc3QgbGluZURpcmVjdGlvbiA9IGRpcmVjdGlvbihlbmRCb3R0b20sIHN0YXJ0Qm90dG9tLCBsaW5lRGlyZWN0aW9uU2NyYXRjaCk7CiAgICBjb25zdCBkb3QgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KGxpbmVEaXJlY3Rpb24sIGVuZEdlb21ldHJ5Tm9ybWFsKTsKICAgIGlmIChkb3QgPiBNSVRFUl9CUkVBS19TTUFMTCB8fCBkb3QgPCBNSVRFUl9CUkVBS19MQVJHRSkgewogICAgICBjb25zdCB2ZXJ0ZXhVcCA9IGRpcmVjdGlvbihlbmRUb3AsIGVuZEJvdHRvbSwgdmVydGV4VXBTY3JhdGNoKTsKICAgICAgY29uc3QgYW5nbGUgPSBkb3QgPCBNSVRFUl9CUkVBS19MQVJHRSA/IE1hdGhfZGVmYXVsdC5QSV9PVkVSX1RXTyA6IC1NYXRoX2RlZmF1bHQuUElfT1ZFUl9UV087CiAgICAgIGNvbnN0IHF1YXRlcm5pb24gPSBRdWF0ZXJuaW9uX2RlZmF1bHQuZnJvbUF4aXNBbmdsZSgKICAgICAgICB2ZXJ0ZXhVcCwKICAgICAgICBhbmdsZSwKICAgICAgICBxdWF0ZXJuaW9uU2NyYXRjaDMKICAgICAgKTsKICAgICAgY29uc3Qgcm90YXRpb25NYXRyaXggPSBNYXRyaXgzX2RlZmF1bHQuZnJvbVF1YXRlcm5pb24ocXVhdGVybmlvbiwgbWF0cml4M1NjcmF0Y2gpOwogICAgICBNYXRyaXgzX2RlZmF1bHQubXVsdGlwbHlCeVZlY3RvcigKICAgICAgICByb3RhdGlvbk1hdHJpeCwKICAgICAgICBlbmRHZW9tZXRyeU5vcm1hbCwKICAgICAgICBlbmRHZW9tZXRyeU5vcm1hbAogICAgICApOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIHJldHVybiBmYWxzZTsKICB9CiAgZnVuY3Rpb24gcHJvamVjdE5vcm1hbChwcm9qZWN0aW9uLCBjYXJ0b2dyYXBoaWMyLCBub3JtYWwyLCBwcm9qZWN0ZWRQb3NpdGlvbiwgcmVzdWx0KSB7CiAgICBjb25zdCBwb3NpdGlvbiA9IENhcnRvZ3JhcGhpY19kZWZhdWx0LnRvQ2FydGVzaWFuKAogICAgICBjYXJ0b2dyYXBoaWMyLAogICAgICBwcm9qZWN0aW9uLl9lbGxpcHNvaWQsCiAgICAgIG5vcm1hbFN0YXJ0cG9pbnRTY3JhdGNoCiAgICApOwogICAgbGV0IG5vcm1hbEVuZHBvaW50ID0gQ2FydGVzaWFuM19kZWZhdWx0LmFkZChwb3NpdGlvbiwgbm9ybWFsMiwgbm9ybWFsRW5kcG9pbnRTY3JhdGNoKTsKICAgIGxldCBmbGlwTm9ybWFsID0gZmFsc2U7CiAgICBjb25zdCBlbGxpcHNvaWQgPSBwcm9qZWN0aW9uLl9lbGxpcHNvaWQ7CiAgICBsZXQgbm9ybWFsRW5kcG9pbnRDYXJ0b2dyYXBoaWMgPSBlbGxpcHNvaWQuY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWMoCiAgICAgIG5vcm1hbEVuZHBvaW50LAogICAgICBlbmRQb3NDYXJ0b2dyYXBoaWNTY3JhdGNoCiAgICApOwogICAgaWYgKE1hdGguYWJzKGNhcnRvZ3JhcGhpYzIubG9uZ2l0dWRlIC0gbm9ybWFsRW5kcG9pbnRDYXJ0b2dyYXBoaWMubG9uZ2l0dWRlKSA+IE1hdGhfZGVmYXVsdC5QSV9PVkVSX1RXTykgewogICAgICBmbGlwTm9ybWFsID0gdHJ1ZTsKICAgICAgbm9ybWFsRW5kcG9pbnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoCiAgICAgICAgcG9zaXRpb24sCiAgICAgICAgbm9ybWFsMiwKICAgICAgICBub3JtYWxFbmRwb2ludFNjcmF0Y2gKICAgICAgKTsKICAgICAgbm9ybWFsRW5kcG9pbnRDYXJ0b2dyYXBoaWMgPSBlbGxpcHNvaWQuY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWMoCiAgICAgICAgbm9ybWFsRW5kcG9pbnQsCiAgICAgICAgZW5kUG9zQ2FydG9ncmFwaGljU2NyYXRjaAogICAgICApOwogICAgfQogICAgbm9ybWFsRW5kcG9pbnRDYXJ0b2dyYXBoaWMuaGVpZ2h0ID0gMDsKICAgIGNvbnN0IG5vcm1hbEVuZHBvaW50UHJvamVjdGVkID0gcHJvamVjdGlvbi5wcm9qZWN0KAogICAgICBub3JtYWxFbmRwb2ludENhcnRvZ3JhcGhpYywKICAgICAgcmVzdWx0CiAgICApOwogICAgcmVzdWx0ID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KAogICAgICBub3JtYWxFbmRwb2ludFByb2plY3RlZCwKICAgICAgcHJvamVjdGVkUG9zaXRpb24sCiAgICAgIHJlc3VsdAogICAgKTsKICAgIHJlc3VsdC56ID0gMDsKICAgIHJlc3VsdCA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUocmVzdWx0LCByZXN1bHQpOwogICAgaWYgKGZsaXBOb3JtYWwpIHsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5lZ2F0ZShyZXN1bHQsIHJlc3VsdCk7CiAgICB9CiAgICByZXR1cm4gcmVzdWx0OwogIH0KICBmdW5jdGlvbiBhZGp1c3RIZWlnaHRzKGJvdHRvbSwgdG9wLCBtaW5IZWlnaHQsIG1heEhlaWdodCwgYWRqdXN0SGVpZ2h0Qm90dG9tLCBhZGp1c3RIZWlnaHRUb3ApIHsKICAgIGNvbnN0IGFkanVzdEhlaWdodE5vcm1hbCA9IENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdCgKICAgICAgdG9wLAogICAgICBib3R0b20sCiAgICAgIGFkanVzdEhlaWdodE5vcm1hbFNjcmF0Y2gKICAgICk7CiAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKGFkanVzdEhlaWdodE5vcm1hbCwgYWRqdXN0SGVpZ2h0Tm9ybWFsKTsKICAgIGNvbnN0IGRpc3RhbmNlRm9yQm90dG9tID0gbWluSGVpZ2h0IC0gV0FMTF9JTklUSUFMX01JTl9IRUlHSFQ7CiAgICBsZXQgYWRqdXN0SGVpZ2h0T2Zmc2V0ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIoCiAgICAgIGFkanVzdEhlaWdodE5vcm1hbCwKICAgICAgZGlzdGFuY2VGb3JCb3R0b20sCiAgICAgIGFkanVzdEhlaWdodE9mZnNldFNjcmF0Y2gKICAgICk7CiAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKGJvdHRvbSwgYWRqdXN0SGVpZ2h0T2Zmc2V0LCBhZGp1c3RIZWlnaHRCb3R0b20pOwogICAgY29uc3QgZGlzdGFuY2VGb3JUb3AgPSBtYXhIZWlnaHQgLSBXQUxMX0lOSVRJQUxfTUFYX0hFSUdIVDsKICAgIGFkanVzdEhlaWdodE9mZnNldCA9IENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKAogICAgICBhZGp1c3RIZWlnaHROb3JtYWwsCiAgICAgIGRpc3RhbmNlRm9yVG9wLAogICAgICBhZGp1c3RIZWlnaHRPZmZzZXRTY3JhdGNoCiAgICApOwogICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZCh0b3AsIGFkanVzdEhlaWdodE9mZnNldCwgYWRqdXN0SGVpZ2h0VG9wKTsKICB9CiAgZnVuY3Rpb24gbnVkZ2VYWihzdGFydCwgZW5kKSB7CiAgICBjb25zdCBzdGFydFRvWFpkaXN0YW5jZSA9IFBsYW5lX2RlZmF1bHQuZ2V0UG9pbnREaXN0YW5jZShYWl9QTEFORSwgc3RhcnQpOwogICAgY29uc3QgZW5kVG9YWmRpc3RhbmNlID0gUGxhbmVfZGVmYXVsdC5nZXRQb2ludERpc3RhbmNlKFhaX1BMQU5FLCBlbmQpOwogICAgbGV0IG9mZnNldCA9IG51ZGdlRGlyZWN0aW9uU2NyYXRjaDsKICAgIGlmIChNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbihzdGFydFRvWFpkaXN0YW5jZSwgMCwgTWF0aF9kZWZhdWx0LkVQU0lMT04yKSkgewogICAgICBvZmZzZXQgPSBkaXJlY3Rpb24oZW5kLCBzdGFydCwgb2Zmc2V0KTsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIob2Zmc2V0LCBNYXRoX2RlZmF1bHQuRVBTSUxPTjIsIG9mZnNldCk7CiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoc3RhcnQsIG9mZnNldCwgc3RhcnQpOwogICAgfSBlbHNlIGlmIChNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbihlbmRUb1haZGlzdGFuY2UsIDAsIE1hdGhfZGVmYXVsdC5FUFNJTE9OMikpIHsKICAgICAgb2Zmc2V0ID0gZGlyZWN0aW9uKHN0YXJ0LCBlbmQsIG9mZnNldCk7CiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKG9mZnNldCwgTWF0aF9kZWZhdWx0LkVQU0lMT04yLCBvZmZzZXQpOwogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKGVuZCwgb2Zmc2V0LCBlbmQpOwogICAgfQogIH0KICBmdW5jdGlvbiBudWRnZUNhcnRvZ3JhcGhpYyhzdGFydCwgZW5kKSB7CiAgICBjb25zdCBhYnNTdGFydExvbiA9IE1hdGguYWJzKHN0YXJ0LmxvbmdpdHVkZSk7CiAgICBjb25zdCBhYnNFbmRMb24gPSBNYXRoLmFicyhlbmQubG9uZ2l0dWRlKTsKICAgIGlmIChNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbihhYnNTdGFydExvbiwgTWF0aF9kZWZhdWx0LlBJLCBNYXRoX2RlZmF1bHQuRVBTSUxPTjExKSkgewogICAgICBjb25zdCBlbmRTaWduID0gTWF0aF9kZWZhdWx0LnNpZ24oZW5kLmxvbmdpdHVkZSk7CiAgICAgIHN0YXJ0LmxvbmdpdHVkZSA9IGVuZFNpZ24gKiAoYWJzU3RhcnRMb24gLSBNYXRoX2RlZmF1bHQuRVBTSUxPTjExKTsKICAgICAgcmV0dXJuIDE7CiAgICB9IGVsc2UgaWYgKE1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKGFic0VuZExvbiwgTWF0aF9kZWZhdWx0LlBJLCBNYXRoX2RlZmF1bHQuRVBTSUxPTjExKSkgewogICAgICBjb25zdCBzdGFydFNpZ24gPSBNYXRoX2RlZmF1bHQuc2lnbihzdGFydC5sb25naXR1ZGUpOwogICAgICBlbmQubG9uZ2l0dWRlID0gc3RhcnRTaWduICogKGFic0VuZExvbiAtIE1hdGhfZGVmYXVsdC5FUFNJTE9OMTEpOwogICAgICByZXR1cm4gMjsKICAgIH0KICAgIHJldHVybiAwOwogIH0KICBmdW5jdGlvbiBnZW5lcmF0ZUdlb21ldHJ5QXR0cmlidXRlcyhsb29wLCBwcm9qZWN0aW9uLCBib3R0b21Qb3NpdGlvbnNBcnJheSwgdG9wUG9zaXRpb25zQXJyYXksIG5vcm1hbHNBcnJheSwgY2FydG9ncmFwaGljc0FycmF5LCBjb21wdXRlMmRBdHRyaWJ1dGVzKSB7CiAgICBsZXQgaTsKICAgIGxldCBpbmRleDsKICAgIGNvbnN0IGVsbGlwc29pZCA9IHByb2plY3Rpb24uX2VsbGlwc29pZDsKICAgIGNvbnN0IHNlZ21lbnRDb3VudCA9IGJvdHRvbVBvc2l0aW9uc0FycmF5Lmxlbmd0aCAvIDMgLSAxOwogICAgY29uc3QgdmVydGV4Q291bnQgPSBzZWdtZW50Q291bnQgKiA4OwogICAgY29uc3QgYXJyYXlTaXplVmVjNCA9IHZlcnRleENvdW50ICogNDsKICAgIGNvbnN0IGluZGV4Q291bnQgPSBzZWdtZW50Q291bnQgKiAzNjsKICAgIGNvbnN0IGluZGljZXMgPSB2ZXJ0ZXhDb3VudCA+IDY1NTM1ID8gbmV3IFVpbnQzMkFycmF5KGluZGV4Q291bnQpIDogbmV3IFVpbnQxNkFycmF5KGluZGV4Q291bnQpOwogICAgY29uc3QgcG9zaXRpb25zQXJyYXkgPSBuZXcgRmxvYXQ2NEFycmF5KHZlcnRleENvdW50ICogMyk7CiAgICBjb25zdCBzdGFydEhpQW5kRm9yd2FyZE9mZnNldFggPSBuZXcgRmxvYXQzMkFycmF5KGFycmF5U2l6ZVZlYzQpOwogICAgY29uc3Qgc3RhcnRMb0FuZEZvcndhcmRPZmZzZXRZID0gbmV3IEZsb2F0MzJBcnJheShhcnJheVNpemVWZWM0KTsKICAgIGNvbnN0IHN0YXJ0Tm9ybWFsQW5kRm9yd2FyZE9mZnNldFogPSBuZXcgRmxvYXQzMkFycmF5KGFycmF5U2l6ZVZlYzQpOwogICAgY29uc3QgZW5kTm9ybWFsQW5kVGV4dHVyZUNvb3JkaW5hdGVOb3JtYWxpemF0aW9uWCA9IG5ldyBGbG9hdDMyQXJyYXkoCiAgICAgIGFycmF5U2l6ZVZlYzQKICAgICk7CiAgICBjb25zdCByaWdodE5vcm1hbEFuZFRleHR1cmVDb29yZGluYXRlTm9ybWFsaXphdGlvblkgPSBuZXcgRmxvYXQzMkFycmF5KAogICAgICBhcnJheVNpemVWZWM0CiAgICApOwogICAgbGV0IHN0YXJ0SGlMbzJEOwogICAgbGV0IG9mZnNldEFuZFJpZ2h0MkQ7CiAgICBsZXQgc3RhcnRFbmROb3JtYWxzMkQ7CiAgICBsZXQgdGV4Y29vcmROb3JtYWxpemF0aW9uMkQ7CiAgICBpZiAoY29tcHV0ZTJkQXR0cmlidXRlcykgewogICAgICBzdGFydEhpTG8yRCA9IG5ldyBGbG9hdDMyQXJyYXkoYXJyYXlTaXplVmVjNCk7CiAgICAgIG9mZnNldEFuZFJpZ2h0MkQgPSBuZXcgRmxvYXQzMkFycmF5KGFycmF5U2l6ZVZlYzQpOwogICAgICBzdGFydEVuZE5vcm1hbHMyRCA9IG5ldyBGbG9hdDMyQXJyYXkoYXJyYXlTaXplVmVjNCk7CiAgICAgIHRleGNvb3JkTm9ybWFsaXphdGlvbjJEID0gbmV3IEZsb2F0MzJBcnJheSh2ZXJ0ZXhDb3VudCAqIDIpOwogICAgfQogICAgY29uc3QgY2FydG9ncmFwaGljc0xlbmd0aCA9IGNhcnRvZ3JhcGhpY3NBcnJheS5sZW5ndGggLyAyOwogICAgbGV0IGxlbmd0aDJEID0gMDsKICAgIGNvbnN0IHN0YXJ0Q2FydG9ncmFwaGljID0gc3RhcnRDYXJ0b2dyYXBoaWNTY3JhdGNoOwogICAgc3RhcnRDYXJ0b2dyYXBoaWMuaGVpZ2h0ID0gMDsKICAgIGNvbnN0IGVuZENhcnRvZ3JhcGhpYyA9IGVuZENhcnRvZ3JhcGhpY1NjcmF0Y2g7CiAgICBlbmRDYXJ0b2dyYXBoaWMuaGVpZ2h0ID0gMDsKICAgIGxldCBzZWdtZW50U3RhcnRDYXJ0ZXNpYW4gPSBzZWdtZW50U3RhcnRUb3BTY3JhdGNoOwogICAgbGV0IHNlZ21lbnRFbmRDYXJ0ZXNpYW4gPSBzZWdtZW50RW5kVG9wU2NyYXRjaDsKICAgIGlmIChjb21wdXRlMmRBdHRyaWJ1dGVzKSB7CiAgICAgIGluZGV4ID0gMDsKICAgICAgZm9yIChpID0gMTsgaSA8IGNhcnRvZ3JhcGhpY3NMZW5ndGg7IGkrKykgewogICAgICAgIHN0YXJ0Q2FydG9ncmFwaGljLmxhdGl0dWRlID0gY2FydG9ncmFwaGljc0FycmF5W2luZGV4XTsKICAgICAgICBzdGFydENhcnRvZ3JhcGhpYy5sb25naXR1ZGUgPSBjYXJ0b2dyYXBoaWNzQXJyYXlbaW5kZXggKyAxXTsKICAgICAgICBlbmRDYXJ0b2dyYXBoaWMubGF0aXR1ZGUgPSBjYXJ0b2dyYXBoaWNzQXJyYXlbaW5kZXggKyAyXTsKICAgICAgICBlbmRDYXJ0b2dyYXBoaWMubG9uZ2l0dWRlID0gY2FydG9ncmFwaGljc0FycmF5W2luZGV4ICsgM107CiAgICAgICAgc2VnbWVudFN0YXJ0Q2FydGVzaWFuID0gcHJvamVjdGlvbi5wcm9qZWN0KAogICAgICAgICAgc3RhcnRDYXJ0b2dyYXBoaWMsCiAgICAgICAgICBzZWdtZW50U3RhcnRDYXJ0ZXNpYW4KICAgICAgICApOwogICAgICAgIHNlZ21lbnRFbmRDYXJ0ZXNpYW4gPSBwcm9qZWN0aW9uLnByb2plY3QoCiAgICAgICAgICBlbmRDYXJ0b2dyYXBoaWMsCiAgICAgICAgICBzZWdtZW50RW5kQ2FydGVzaWFuCiAgICAgICAgKTsKICAgICAgICBsZW5ndGgyRCArPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZGlzdGFuY2UoCiAgICAgICAgICBzZWdtZW50U3RhcnRDYXJ0ZXNpYW4sCiAgICAgICAgICBzZWdtZW50RW5kQ2FydGVzaWFuCiAgICAgICAgKTsKICAgICAgICBpbmRleCArPSAyOwogICAgICB9CiAgICB9CiAgICBjb25zdCBwb3NpdGlvbnNMZW5ndGggPSB0b3BQb3NpdGlvbnNBcnJheS5sZW5ndGggLyAzOwogICAgc2VnbWVudEVuZENhcnRlc2lhbiA9IENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2soCiAgICAgIHRvcFBvc2l0aW9uc0FycmF5LAogICAgICAwLAogICAgICBzZWdtZW50RW5kQ2FydGVzaWFuCiAgICApOwogICAgbGV0IGxlbmd0aDNEID0gMDsKICAgIGluZGV4ID0gMzsKICAgIGZvciAoaSA9IDE7IGkgPCBwb3NpdGlvbnNMZW5ndGg7IGkrKykgewogICAgICBzZWdtZW50U3RhcnRDYXJ0ZXNpYW4gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoCiAgICAgICAgc2VnbWVudEVuZENhcnRlc2lhbiwKICAgICAgICBzZWdtZW50U3RhcnRDYXJ0ZXNpYW4KICAgICAgKTsKICAgICAgc2VnbWVudEVuZENhcnRlc2lhbiA9IENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2soCiAgICAgICAgdG9wUG9zaXRpb25zQXJyYXksCiAgICAgICAgaW5kZXgsCiAgICAgICAgc2VnbWVudEVuZENhcnRlc2lhbgogICAgICApOwogICAgICBsZW5ndGgzRCArPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZGlzdGFuY2Uoc2VnbWVudFN0YXJ0Q2FydGVzaWFuLCBzZWdtZW50RW5kQ2FydGVzaWFuKTsKICAgICAgaW5kZXggKz0gMzsKICAgIH0KICAgIGxldCBqOwogICAgaW5kZXggPSAzOwogICAgbGV0IGNhcnRvZ3JhcGhpY3NJbmRleCA9IDA7CiAgICBsZXQgdmVjMnNXcml0ZUluZGV4ID0gMDsKICAgIGxldCB2ZWMzc1dyaXRlSW5kZXggPSAwOwogICAgbGV0IHZlYzRzV3JpdGVJbmRleCA9IDA7CiAgICBsZXQgbWl0ZXJCcm9rZW4gPSBmYWxzZTsKICAgIGxldCBlbmRCb3R0b20gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKAogICAgICBib3R0b21Qb3NpdGlvbnNBcnJheSwKICAgICAgMCwKICAgICAgc2VnbWVudEVuZEJvdHRvbVNjcmF0Y2gKICAgICk7CiAgICBsZXQgZW5kVG9wID0gQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjayh0b3BQb3NpdGlvbnNBcnJheSwgMCwgc2VnbWVudEVuZFRvcFNjcmF0Y2gpOwogICAgbGV0IGVuZEdlb21ldHJ5Tm9ybWFsID0gQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjaygKICAgICAgbm9ybWFsc0FycmF5LAogICAgICAwLAogICAgICBzZWdtZW50RW5kTm9ybWFsU2NyYXRjaAogICAgKTsKICAgIGlmIChsb29wKSB7CiAgICAgIGNvbnN0IHByZUVuZEJvdHRvbSA9IENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2soCiAgICAgICAgYm90dG9tUG9zaXRpb25zQXJyYXksCiAgICAgICAgYm90dG9tUG9zaXRpb25zQXJyYXkubGVuZ3RoIC0gNiwKICAgICAgICBzZWdtZW50U3RhcnRCb3R0b21TY3JhdGNoCiAgICAgICk7CiAgICAgIGlmIChicmVha01pdGVyKGVuZEdlb21ldHJ5Tm9ybWFsLCBwcmVFbmRCb3R0b20sIGVuZEJvdHRvbSwgZW5kVG9wKSkgewogICAgICAgIGVuZEdlb21ldHJ5Tm9ybWFsID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5lZ2F0ZSgKICAgICAgICAgIGVuZEdlb21ldHJ5Tm9ybWFsLAogICAgICAgICAgZW5kR2VvbWV0cnlOb3JtYWwKICAgICAgICApOwogICAgICB9CiAgICB9CiAgICBsZXQgbGVuZ3RoU29GYXIzRCA9IDA7CiAgICBsZXQgbGVuZ3RoU29GYXIyRCA9IDA7CiAgICBsZXQgc3VtSGVpZ2h0cyA9IDA7CiAgICBmb3IgKGkgPSAwOyBpIDwgc2VnbWVudENvdW50OyBpKyspIHsKICAgICAgY29uc3Qgc3RhcnRCb3R0b20gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoZW5kQm90dG9tLCBzZWdtZW50U3RhcnRCb3R0b21TY3JhdGNoKTsKICAgICAgY29uc3Qgc3RhcnRUb3AgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoZW5kVG9wLCBzZWdtZW50U3RhcnRUb3BTY3JhdGNoKTsKICAgICAgbGV0IHN0YXJ0R2VvbWV0cnlOb3JtYWwgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoCiAgICAgICAgZW5kR2VvbWV0cnlOb3JtYWwsCiAgICAgICAgc2VnbWVudFN0YXJ0Tm9ybWFsU2NyYXRjaAogICAgICApOwogICAgICBpZiAobWl0ZXJCcm9rZW4pIHsKICAgICAgICBzdGFydEdlb21ldHJ5Tm9ybWFsID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5lZ2F0ZSgKICAgICAgICAgIHN0YXJ0R2VvbWV0cnlOb3JtYWwsCiAgICAgICAgICBzdGFydEdlb21ldHJ5Tm9ybWFsCiAgICAgICAgKTsKICAgICAgfQogICAgICBlbmRCb3R0b20gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKAogICAgICAgIGJvdHRvbVBvc2l0aW9uc0FycmF5LAogICAgICAgIGluZGV4LAogICAgICAgIHNlZ21lbnRFbmRCb3R0b21TY3JhdGNoCiAgICAgICk7CiAgICAgIGVuZFRvcCA9IENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2sodG9wUG9zaXRpb25zQXJyYXksIGluZGV4LCBzZWdtZW50RW5kVG9wU2NyYXRjaCk7CiAgICAgIGVuZEdlb21ldHJ5Tm9ybWFsID0gQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjaygKICAgICAgICBub3JtYWxzQXJyYXksCiAgICAgICAgaW5kZXgsCiAgICAgICAgc2VnbWVudEVuZE5vcm1hbFNjcmF0Y2gKICAgICAgKTsKICAgICAgbWl0ZXJCcm9rZW4gPSBicmVha01pdGVyKGVuZEdlb21ldHJ5Tm9ybWFsLCBzdGFydEJvdHRvbSwgZW5kQm90dG9tLCBlbmRUb3ApOwogICAgICBzdGFydENhcnRvZ3JhcGhpYy5sYXRpdHVkZSA9IGNhcnRvZ3JhcGhpY3NBcnJheVtjYXJ0b2dyYXBoaWNzSW5kZXhdOwogICAgICBzdGFydENhcnRvZ3JhcGhpYy5sb25naXR1ZGUgPSBjYXJ0b2dyYXBoaWNzQXJyYXlbY2FydG9ncmFwaGljc0luZGV4ICsgMV07CiAgICAgIGVuZENhcnRvZ3JhcGhpYy5sYXRpdHVkZSA9IGNhcnRvZ3JhcGhpY3NBcnJheVtjYXJ0b2dyYXBoaWNzSW5kZXggKyAyXTsKICAgICAgZW5kQ2FydG9ncmFwaGljLmxvbmdpdHVkZSA9IGNhcnRvZ3JhcGhpY3NBcnJheVtjYXJ0b2dyYXBoaWNzSW5kZXggKyAzXTsKICAgICAgbGV0IHN0YXJ0MkQ7CiAgICAgIGxldCBlbmQyRDsKICAgICAgbGV0IHN0YXJ0R2VvbWV0cnlOb3JtYWwyRDsKICAgICAgbGV0IGVuZEdlb21ldHJ5Tm9ybWFsMkQ7CiAgICAgIGlmIChjb21wdXRlMmRBdHRyaWJ1dGVzKSB7CiAgICAgICAgY29uc3QgbnVkZ2VSZXN1bHQgPSBudWRnZUNhcnRvZ3JhcGhpYyhzdGFydENhcnRvZ3JhcGhpYywgZW5kQ2FydG9ncmFwaGljKTsKICAgICAgICBzdGFydDJEID0gcHJvamVjdGlvbi5wcm9qZWN0KHN0YXJ0Q2FydG9ncmFwaGljLCBzZWdtZW50U3RhcnQyRFNjcmF0Y2gpOwogICAgICAgIGVuZDJEID0gcHJvamVjdGlvbi5wcm9qZWN0KGVuZENhcnRvZ3JhcGhpYywgc2VnbWVudEVuZDJEU2NyYXRjaCk7CiAgICAgICAgY29uc3QgZGlyZWN0aW9uMkQgPSBkaXJlY3Rpb24oZW5kMkQsIHN0YXJ0MkQsIGZvcndhcmRPZmZzZXQyRFNjcmF0Y2gpOwogICAgICAgIGRpcmVjdGlvbjJELnkgPSBNYXRoLmFicyhkaXJlY3Rpb24yRC55KTsKICAgICAgICBzdGFydEdlb21ldHJ5Tm9ybWFsMkQgPSBzZWdtZW50U3RhcnROb3JtYWwyRFNjcmF0Y2g7CiAgICAgICAgZW5kR2VvbWV0cnlOb3JtYWwyRCA9IHNlZ21lbnRFbmROb3JtYWwyRFNjcmF0Y2g7CiAgICAgICAgaWYgKG51ZGdlUmVzdWx0ID09PSAwIHx8IENhcnRlc2lhbjNfZGVmYXVsdC5kb3QoZGlyZWN0aW9uMkQsIENhcnRlc2lhbjNfZGVmYXVsdC5VTklUX1kpID4gTUlURVJfQlJFQUtfU01BTEwpIHsKICAgICAgICAgIHN0YXJ0R2VvbWV0cnlOb3JtYWwyRCA9IHByb2plY3ROb3JtYWwoCiAgICAgICAgICAgIHByb2plY3Rpb24sCiAgICAgICAgICAgIHN0YXJ0Q2FydG9ncmFwaGljLAogICAgICAgICAgICBzdGFydEdlb21ldHJ5Tm9ybWFsLAogICAgICAgICAgICBzdGFydDJELAogICAgICAgICAgICBzZWdtZW50U3RhcnROb3JtYWwyRFNjcmF0Y2gKICAgICAgICAgICk7CiAgICAgICAgICBlbmRHZW9tZXRyeU5vcm1hbDJEID0gcHJvamVjdE5vcm1hbCgKICAgICAgICAgICAgcHJvamVjdGlvbiwKICAgICAgICAgICAgZW5kQ2FydG9ncmFwaGljLAogICAgICAgICAgICBlbmRHZW9tZXRyeU5vcm1hbCwKICAgICAgICAgICAgZW5kMkQsCiAgICAgICAgICAgIHNlZ21lbnRFbmROb3JtYWwyRFNjcmF0Y2gKICAgICAgICAgICk7CiAgICAgICAgfSBlbHNlIGlmIChudWRnZVJlc3VsdCA9PT0gMSkgewogICAgICAgICAgZW5kR2VvbWV0cnlOb3JtYWwyRCA9IHByb2plY3ROb3JtYWwoCiAgICAgICAgICAgIHByb2plY3Rpb24sCiAgICAgICAgICAgIGVuZENhcnRvZ3JhcGhpYywKICAgICAgICAgICAgZW5kR2VvbWV0cnlOb3JtYWwsCiAgICAgICAgICAgIGVuZDJELAogICAgICAgICAgICBzZWdtZW50RW5kTm9ybWFsMkRTY3JhdGNoCiAgICAgICAgICApOwogICAgICAgICAgc3RhcnRHZW9tZXRyeU5vcm1hbDJELnggPSAwOwogICAgICAgICAgc3RhcnRHZW9tZXRyeU5vcm1hbDJELnkgPSBNYXRoX2RlZmF1bHQuc2lnbigKICAgICAgICAgICAgc3RhcnRDYXJ0b2dyYXBoaWMubG9uZ2l0dWRlIC0gTWF0aC5hYnMoZW5kQ2FydG9ncmFwaGljLmxvbmdpdHVkZSkKICAgICAgICAgICk7CiAgICAgICAgICBzdGFydEdlb21ldHJ5Tm9ybWFsMkQueiA9IDA7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHN0YXJ0R2VvbWV0cnlOb3JtYWwyRCA9IHByb2plY3ROb3JtYWwoCiAgICAgICAgICAgIHByb2plY3Rpb24sCiAgICAgICAgICAgIHN0YXJ0Q2FydG9ncmFwaGljLAogICAgICAgICAgICBzdGFydEdlb21ldHJ5Tm9ybWFsLAogICAgICAgICAgICBzdGFydDJELAogICAgICAgICAgICBzZWdtZW50U3RhcnROb3JtYWwyRFNjcmF0Y2gKICAgICAgICAgICk7CiAgICAgICAgICBlbmRHZW9tZXRyeU5vcm1hbDJELnggPSAwOwogICAgICAgICAgZW5kR2VvbWV0cnlOb3JtYWwyRC55ID0gTWF0aF9kZWZhdWx0LnNpZ24oCiAgICAgICAgICAgIHN0YXJ0Q2FydG9ncmFwaGljLmxvbmdpdHVkZSAtIGVuZENhcnRvZ3JhcGhpYy5sb25naXR1ZGUKICAgICAgICAgICk7CiAgICAgICAgICBlbmRHZW9tZXRyeU5vcm1hbDJELnogPSAwOwogICAgICAgIH0KICAgICAgfQogICAgICBjb25zdCBzZWdtZW50TGVuZ3RoM0QgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZGlzdGFuY2Uoc3RhcnRUb3AsIGVuZFRvcCk7CiAgICAgIGNvbnN0IGVuY29kZWRTdGFydCA9IEVuY29kZWRDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUNhcnRlc2lhbigKICAgICAgICBzdGFydEJvdHRvbSwKICAgICAgICBlbmNvZGVTY3JhdGNoCiAgICAgICk7CiAgICAgIGNvbnN0IGZvcndhcmRPZmZzZXQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoCiAgICAgICAgZW5kQm90dG9tLAogICAgICAgIHN0YXJ0Qm90dG9tLAogICAgICAgIG9mZnNldFNjcmF0Y2gyCiAgICAgICk7CiAgICAgIGNvbnN0IGZvcndhcmQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKGZvcndhcmRPZmZzZXQsIHJpZ2h0U2NyYXRjaDIpOwogICAgICBsZXQgc3RhcnRVcCA9IENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChzdGFydFRvcCwgc3RhcnRCb3R0b20sIHN0YXJ0VXBTY3JhdGNoKTsKICAgICAgc3RhcnRVcCA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoc3RhcnRVcCwgc3RhcnRVcCk7CiAgICAgIGxldCByaWdodE5vcm1hbCA9IENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyhmb3J3YXJkLCBzdGFydFVwLCByaWdodFNjcmF0Y2gyKTsKICAgICAgcmlnaHROb3JtYWwgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKHJpZ2h0Tm9ybWFsLCByaWdodE5vcm1hbCk7CiAgICAgIGxldCBzdGFydFBsYW5lTm9ybWFsID0gQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKAogICAgICAgIHN0YXJ0VXAsCiAgICAgICAgc3RhcnRHZW9tZXRyeU5vcm1hbCwKICAgICAgICBzdGFydFBsYW5lTm9ybWFsU2NyYXRjaAogICAgICApOwogICAgICBzdGFydFBsYW5lTm9ybWFsID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShzdGFydFBsYW5lTm9ybWFsLCBzdGFydFBsYW5lTm9ybWFsKTsKICAgICAgbGV0IGVuZFVwID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KGVuZFRvcCwgZW5kQm90dG9tLCBlbmRVcFNjcmF0Y2gpOwogICAgICBlbmRVcCA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoZW5kVXAsIGVuZFVwKTsKICAgICAgbGV0IGVuZFBsYW5lTm9ybWFsID0gQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKAogICAgICAgIGVuZEdlb21ldHJ5Tm9ybWFsLAogICAgICAgIGVuZFVwLAogICAgICAgIGVuZFBsYW5lTm9ybWFsU2NyYXRjaAogICAgICApOwogICAgICBlbmRQbGFuZU5vcm1hbCA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoZW5kUGxhbmVOb3JtYWwsIGVuZFBsYW5lTm9ybWFsKTsKICAgICAgY29uc3QgdGV4Y29vcmROb3JtYWxpemF0aW9uM0RYID0gc2VnbWVudExlbmd0aDNEIC8gbGVuZ3RoM0Q7CiAgICAgIGNvbnN0IHRleGNvb3JkTm9ybWFsaXphdGlvbjNEWSA9IGxlbmd0aFNvRmFyM0QgLyBsZW5ndGgzRDsKICAgICAgbGV0IHNlZ21lbnRMZW5ndGgyRCA9IDA7CiAgICAgIGxldCBlbmNvZGVkU3RhcnQyRDsKICAgICAgbGV0IGZvcndhcmRPZmZzZXQyRDsKICAgICAgbGV0IHJpZ2h0MkQ7CiAgICAgIGxldCB0ZXhjb29yZE5vcm1hbGl6YXRpb24yRFggPSAwOwogICAgICBsZXQgdGV4Y29vcmROb3JtYWxpemF0aW9uMkRZID0gMDsKICAgICAgaWYgKGNvbXB1dGUyZEF0dHJpYnV0ZXMpIHsKICAgICAgICBzZWdtZW50TGVuZ3RoMkQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZGlzdGFuY2Uoc3RhcnQyRCwgZW5kMkQpOwogICAgICAgIGVuY29kZWRTdGFydDJEID0gRW5jb2RlZENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQ2FydGVzaWFuKAogICAgICAgICAgc3RhcnQyRCwKICAgICAgICAgIGVuY29kZVNjcmF0Y2gyRAogICAgICAgICk7CiAgICAgICAgZm9yd2FyZE9mZnNldDJEID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KAogICAgICAgICAgZW5kMkQsCiAgICAgICAgICBzdGFydDJELAogICAgICAgICAgZm9yd2FyZE9mZnNldDJEU2NyYXRjaAogICAgICAgICk7CiAgICAgICAgcmlnaHQyRCA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoZm9yd2FyZE9mZnNldDJELCByaWdodDJEU2NyYXRjaCk7CiAgICAgICAgY29uc3Qgc3dhcDIgPSByaWdodDJELng7CiAgICAgICAgcmlnaHQyRC54ID0gcmlnaHQyRC55OwogICAgICAgIHJpZ2h0MkQueSA9IC1zd2FwMjsKICAgICAgICB0ZXhjb29yZE5vcm1hbGl6YXRpb24yRFggPSBzZWdtZW50TGVuZ3RoMkQgLyBsZW5ndGgyRDsKICAgICAgICB0ZXhjb29yZE5vcm1hbGl6YXRpb24yRFkgPSBsZW5ndGhTb0ZhcjJEIC8gbGVuZ3RoMkQ7CiAgICAgIH0KICAgICAgZm9yIChqID0gMDsgaiA8IDg7IGorKykgewogICAgICAgIGNvbnN0IHZlYzRJbmRleCA9IHZlYzRzV3JpdGVJbmRleCArIGogKiA0OwogICAgICAgIGNvbnN0IHZlYzJJbmRleCA9IHZlYzJzV3JpdGVJbmRleCArIGogKiAyOwogICAgICAgIGNvbnN0IHdJbmRleCA9IHZlYzRJbmRleCArIDM7CiAgICAgICAgY29uc3QgcmlnaHRQbGFuZVNpZGUgPSBqIDwgNCA/IDEgOiAtMTsKICAgICAgICBjb25zdCB0b3BCb3R0b21TaWRlID0gaiA9PT0gMiB8fCBqID09PSAzIHx8IGogPT09IDYgfHwgaiA9PT0gNyA/IDEgOiAtMTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayhlbmNvZGVkU3RhcnQuaGlnaCwgc3RhcnRIaUFuZEZvcndhcmRPZmZzZXRYLCB2ZWM0SW5kZXgpOwogICAgICAgIHN0YXJ0SGlBbmRGb3J3YXJkT2Zmc2V0WFt3SW5kZXhdID0gZm9yd2FyZE9mZnNldC54OwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKGVuY29kZWRTdGFydC5sb3csIHN0YXJ0TG9BbmRGb3J3YXJkT2Zmc2V0WSwgdmVjNEluZGV4KTsKICAgICAgICBzdGFydExvQW5kRm9yd2FyZE9mZnNldFlbd0luZGV4XSA9IGZvcndhcmRPZmZzZXQueTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjaygKICAgICAgICAgIHN0YXJ0UGxhbmVOb3JtYWwsCiAgICAgICAgICBzdGFydE5vcm1hbEFuZEZvcndhcmRPZmZzZXRaLAogICAgICAgICAgdmVjNEluZGV4CiAgICAgICAgKTsKICAgICAgICBzdGFydE5vcm1hbEFuZEZvcndhcmRPZmZzZXRaW3dJbmRleF0gPSBmb3J3YXJkT2Zmc2V0Lno7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2soCiAgICAgICAgICBlbmRQbGFuZU5vcm1hbCwKICAgICAgICAgIGVuZE5vcm1hbEFuZFRleHR1cmVDb29yZGluYXRlTm9ybWFsaXphdGlvblgsCiAgICAgICAgICB2ZWM0SW5kZXgKICAgICAgICApOwogICAgICAgIGVuZE5vcm1hbEFuZFRleHR1cmVDb29yZGluYXRlTm9ybWFsaXphdGlvblhbd0luZGV4XSA9IHRleGNvb3JkTm9ybWFsaXphdGlvbjNEWCAqIHJpZ2h0UGxhbmVTaWRlOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKAogICAgICAgICAgcmlnaHROb3JtYWwsCiAgICAgICAgICByaWdodE5vcm1hbEFuZFRleHR1cmVDb29yZGluYXRlTm9ybWFsaXphdGlvblksCiAgICAgICAgICB2ZWM0SW5kZXgKICAgICAgICApOwogICAgICAgIGxldCB0ZXhjb29yZE5vcm1hbGl6YXRpb24gPSB0ZXhjb29yZE5vcm1hbGl6YXRpb24zRFkgKiB0b3BCb3R0b21TaWRlOwogICAgICAgIGlmICh0ZXhjb29yZE5vcm1hbGl6YXRpb24gPT09IDAgJiYgdG9wQm90dG9tU2lkZSA8IDApIHsKICAgICAgICAgIHRleGNvb3JkTm9ybWFsaXphdGlvbiA9IDk7CiAgICAgICAgfQogICAgICAgIHJpZ2h0Tm9ybWFsQW5kVGV4dHVyZUNvb3JkaW5hdGVOb3JtYWxpemF0aW9uWVt3SW5kZXhdID0gdGV4Y29vcmROb3JtYWxpemF0aW9uOwogICAgICAgIGlmIChjb21wdXRlMmRBdHRyaWJ1dGVzKSB7CiAgICAgICAgICBzdGFydEhpTG8yRFt2ZWM0SW5kZXhdID0gZW5jb2RlZFN0YXJ0MkQuaGlnaC54OwogICAgICAgICAgc3RhcnRIaUxvMkRbdmVjNEluZGV4ICsgMV0gPSBlbmNvZGVkU3RhcnQyRC5oaWdoLnk7CiAgICAgICAgICBzdGFydEhpTG8yRFt2ZWM0SW5kZXggKyAyXSA9IGVuY29kZWRTdGFydDJELmxvdy54OwogICAgICAgICAgc3RhcnRIaUxvMkRbdmVjNEluZGV4ICsgM10gPSBlbmNvZGVkU3RhcnQyRC5sb3cueTsKICAgICAgICAgIHN0YXJ0RW5kTm9ybWFsczJEW3ZlYzRJbmRleF0gPSAtc3RhcnRHZW9tZXRyeU5vcm1hbDJELnk7CiAgICAgICAgICBzdGFydEVuZE5vcm1hbHMyRFt2ZWM0SW5kZXggKyAxXSA9IHN0YXJ0R2VvbWV0cnlOb3JtYWwyRC54OwogICAgICAgICAgc3RhcnRFbmROb3JtYWxzMkRbdmVjNEluZGV4ICsgMl0gPSBlbmRHZW9tZXRyeU5vcm1hbDJELnk7CiAgICAgICAgICBzdGFydEVuZE5vcm1hbHMyRFt2ZWM0SW5kZXggKyAzXSA9IC1lbmRHZW9tZXRyeU5vcm1hbDJELng7CiAgICAgICAgICBvZmZzZXRBbmRSaWdodDJEW3ZlYzRJbmRleF0gPSBmb3J3YXJkT2Zmc2V0MkQueDsKICAgICAgICAgIG9mZnNldEFuZFJpZ2h0MkRbdmVjNEluZGV4ICsgMV0gPSBmb3J3YXJkT2Zmc2V0MkQueTsKICAgICAgICAgIG9mZnNldEFuZFJpZ2h0MkRbdmVjNEluZGV4ICsgMl0gPSByaWdodDJELng7CiAgICAgICAgICBvZmZzZXRBbmRSaWdodDJEW3ZlYzRJbmRleCArIDNdID0gcmlnaHQyRC55OwogICAgICAgICAgdGV4Y29vcmROb3JtYWxpemF0aW9uMkRbdmVjMkluZGV4XSA9IHRleGNvb3JkTm9ybWFsaXphdGlvbjJEWCAqIHJpZ2h0UGxhbmVTaWRlOwogICAgICAgICAgdGV4Y29vcmROb3JtYWxpemF0aW9uID0gdGV4Y29vcmROb3JtYWxpemF0aW9uMkRZICogdG9wQm90dG9tU2lkZTsKICAgICAgICAgIGlmICh0ZXhjb29yZE5vcm1hbGl6YXRpb24gPT09IDAgJiYgdG9wQm90dG9tU2lkZSA8IDApIHsKICAgICAgICAgICAgdGV4Y29vcmROb3JtYWxpemF0aW9uID0gOTsKICAgICAgICAgIH0KICAgICAgICAgIHRleGNvb3JkTm9ybWFsaXphdGlvbjJEW3ZlYzJJbmRleCArIDFdID0gdGV4Y29vcmROb3JtYWxpemF0aW9uOwogICAgICAgIH0KICAgICAgfQogICAgICBjb25zdCBhZGp1c3RIZWlnaHRTdGFydEJvdHRvbSA9IGFkanVzdEhlaWdodFN0YXJ0Qm90dG9tU2NyYXRjaDsKICAgICAgY29uc3QgYWRqdXN0SGVpZ2h0RW5kQm90dG9tID0gYWRqdXN0SGVpZ2h0RW5kQm90dG9tU2NyYXRjaDsKICAgICAgY29uc3QgYWRqdXN0SGVpZ2h0U3RhcnRUb3AgPSBhZGp1c3RIZWlnaHRTdGFydFRvcFNjcmF0Y2g7CiAgICAgIGNvbnN0IGFkanVzdEhlaWdodEVuZFRvcCA9IGFkanVzdEhlaWdodEVuZFRvcFNjcmF0Y2g7CiAgICAgIGNvbnN0IGdldEhlaWdodHNSZWN0YW5nbGUgPSBSZWN0YW5nbGVfZGVmYXVsdC5mcm9tQ2FydG9ncmFwaGljQXJyYXkoCiAgICAgICAgZ2V0SGVpZ2h0Q2FydG9ncmFwaGljcywKICAgICAgICBnZXRIZWlnaHRSZWN0YW5nbGVTY3JhdGNoCiAgICAgICk7CiAgICAgIGNvbnN0IG1pbk1heEhlaWdodHMgPSBBcHByb3hpbWF0ZVRlcnJhaW5IZWlnaHRzX2RlZmF1bHQuZ2V0TWluaW11bU1heGltdW1IZWlnaHRzKAogICAgICAgIGdldEhlaWdodHNSZWN0YW5nbGUsCiAgICAgICAgZWxsaXBzb2lkCiAgICAgICk7CiAgICAgIGNvbnN0IG1pbkhlaWdodCA9IG1pbk1heEhlaWdodHMubWluaW11bVRlcnJhaW5IZWlnaHQ7CiAgICAgIGNvbnN0IG1heEhlaWdodCA9IG1pbk1heEhlaWdodHMubWF4aW11bVRlcnJhaW5IZWlnaHQ7CiAgICAgIHN1bUhlaWdodHMgKz0gTWF0aC5hYnMobWluSGVpZ2h0KTsKICAgICAgc3VtSGVpZ2h0cyArPSBNYXRoLmFicyhtYXhIZWlnaHQpOwogICAgICBhZGp1c3RIZWlnaHRzKAogICAgICAgIHN0YXJ0Qm90dG9tLAogICAgICAgIHN0YXJ0VG9wLAogICAgICAgIG1pbkhlaWdodCwKICAgICAgICBtYXhIZWlnaHQsCiAgICAgICAgYWRqdXN0SGVpZ2h0U3RhcnRCb3R0b20sCiAgICAgICAgYWRqdXN0SGVpZ2h0U3RhcnRUb3AKICAgICAgKTsKICAgICAgYWRqdXN0SGVpZ2h0cygKICAgICAgICBlbmRCb3R0b20sCiAgICAgICAgZW5kVG9wLAogICAgICAgIG1pbkhlaWdodCwKICAgICAgICBtYXhIZWlnaHQsCiAgICAgICAgYWRqdXN0SGVpZ2h0RW5kQm90dG9tLAogICAgICAgIGFkanVzdEhlaWdodEVuZFRvcAogICAgICApOwogICAgICBsZXQgbm9ybWFsTnVkZ2UgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcigKICAgICAgICByaWdodE5vcm1hbCwKICAgICAgICBNYXRoX2RlZmF1bHQuRVBTSUxPTjUsCiAgICAgICAgbm9ybWFsTnVkZ2VTY3JhdGNoCiAgICAgICk7CiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoCiAgICAgICAgYWRqdXN0SGVpZ2h0U3RhcnRCb3R0b20sCiAgICAgICAgbm9ybWFsTnVkZ2UsCiAgICAgICAgYWRqdXN0SGVpZ2h0U3RhcnRCb3R0b20KICAgICAgKTsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChhZGp1c3RIZWlnaHRFbmRCb3R0b20sIG5vcm1hbE51ZGdlLCBhZGp1c3RIZWlnaHRFbmRCb3R0b20pOwogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKGFkanVzdEhlaWdodFN0YXJ0VG9wLCBub3JtYWxOdWRnZSwgYWRqdXN0SGVpZ2h0U3RhcnRUb3ApOwogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKGFkanVzdEhlaWdodEVuZFRvcCwgbm9ybWFsTnVkZ2UsIGFkanVzdEhlaWdodEVuZFRvcCk7CiAgICAgIG51ZGdlWFooYWRqdXN0SGVpZ2h0U3RhcnRCb3R0b20sIGFkanVzdEhlaWdodEVuZEJvdHRvbSk7CiAgICAgIG51ZGdlWFooYWRqdXN0SGVpZ2h0U3RhcnRUb3AsIGFkanVzdEhlaWdodEVuZFRvcCk7CiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKGFkanVzdEhlaWdodFN0YXJ0Qm90dG9tLCBwb3NpdGlvbnNBcnJheSwgdmVjM3NXcml0ZUluZGV4KTsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2soYWRqdXN0SGVpZ2h0RW5kQm90dG9tLCBwb3NpdGlvbnNBcnJheSwgdmVjM3NXcml0ZUluZGV4ICsgMyk7CiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKGFkanVzdEhlaWdodEVuZFRvcCwgcG9zaXRpb25zQXJyYXksIHZlYzNzV3JpdGVJbmRleCArIDYpOwogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayhhZGp1c3RIZWlnaHRTdGFydFRvcCwgcG9zaXRpb25zQXJyYXksIHZlYzNzV3JpdGVJbmRleCArIDkpOwogICAgICBub3JtYWxOdWRnZSA9IENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKAogICAgICAgIHJpZ2h0Tm9ybWFsLAogICAgICAgIC0yICogTWF0aF9kZWZhdWx0LkVQU0lMT041LAogICAgICAgIG5vcm1hbE51ZGdlU2NyYXRjaAogICAgICApOwogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKAogICAgICAgIGFkanVzdEhlaWdodFN0YXJ0Qm90dG9tLAogICAgICAgIG5vcm1hbE51ZGdlLAogICAgICAgIGFkanVzdEhlaWdodFN0YXJ0Qm90dG9tCiAgICAgICk7CiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoYWRqdXN0SGVpZ2h0RW5kQm90dG9tLCBub3JtYWxOdWRnZSwgYWRqdXN0SGVpZ2h0RW5kQm90dG9tKTsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChhZGp1c3RIZWlnaHRTdGFydFRvcCwgbm9ybWFsTnVkZ2UsIGFkanVzdEhlaWdodFN0YXJ0VG9wKTsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChhZGp1c3RIZWlnaHRFbmRUb3AsIG5vcm1hbE51ZGdlLCBhZGp1c3RIZWlnaHRFbmRUb3ApOwogICAgICBudWRnZVhaKGFkanVzdEhlaWdodFN0YXJ0Qm90dG9tLCBhZGp1c3RIZWlnaHRFbmRCb3R0b20pOwogICAgICBudWRnZVhaKGFkanVzdEhlaWdodFN0YXJ0VG9wLCBhZGp1c3RIZWlnaHRFbmRUb3ApOwogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjaygKICAgICAgICBhZGp1c3RIZWlnaHRTdGFydEJvdHRvbSwKICAgICAgICBwb3NpdGlvbnNBcnJheSwKICAgICAgICB2ZWMzc1dyaXRlSW5kZXggKyAxMgogICAgICApOwogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjaygKICAgICAgICBhZGp1c3RIZWlnaHRFbmRCb3R0b20sCiAgICAgICAgcG9zaXRpb25zQXJyYXksCiAgICAgICAgdmVjM3NXcml0ZUluZGV4ICsgMTUKICAgICAgKTsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2soYWRqdXN0SGVpZ2h0RW5kVG9wLCBwb3NpdGlvbnNBcnJheSwgdmVjM3NXcml0ZUluZGV4ICsgMTgpOwogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayhhZGp1c3RIZWlnaHRTdGFydFRvcCwgcG9zaXRpb25zQXJyYXksIHZlYzNzV3JpdGVJbmRleCArIDIxKTsKICAgICAgY2FydG9ncmFwaGljc0luZGV4ICs9IDI7CiAgICAgIGluZGV4ICs9IDM7CiAgICAgIHZlYzJzV3JpdGVJbmRleCArPSAxNjsKICAgICAgdmVjM3NXcml0ZUluZGV4ICs9IDI0OwogICAgICB2ZWM0c1dyaXRlSW5kZXggKz0gMzI7CiAgICAgIGxlbmd0aFNvRmFyM0QgKz0gc2VnbWVudExlbmd0aDNEOwogICAgICBsZW5ndGhTb0ZhcjJEICs9IHNlZ21lbnRMZW5ndGgyRDsKICAgIH0KICAgIGluZGV4ID0gMDsKICAgIGxldCBpbmRleE9mZnNldCA9IDA7CiAgICBmb3IgKGkgPSAwOyBpIDwgc2VnbWVudENvdW50OyBpKyspIHsKICAgICAgZm9yIChqID0gMDsgaiA8IFJFRkVSRU5DRV9JTkRJQ0VTX0xFTkdUSDsgaisrKSB7CiAgICAgICAgaW5kaWNlc1tpbmRleCArIGpdID0gUkVGRVJFTkNFX0lORElDRVNbal0gKyBpbmRleE9mZnNldDsKICAgICAgfQogICAgICBpbmRleE9mZnNldCArPSA4OwogICAgICBpbmRleCArPSBSRUZFUkVOQ0VfSU5ESUNFU19MRU5HVEg7CiAgICB9CiAgICBjb25zdCBib3VuZGluZ1NwaGVyZXMgPSBzY3JhdGNoQm91bmRpbmdTcGhlcmVzOwogICAgQm91bmRpbmdTcGhlcmVfZGVmYXVsdC5mcm9tVmVydGljZXMoCiAgICAgIGJvdHRvbVBvc2l0aW9uc0FycmF5LAogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTywKICAgICAgMywKICAgICAgYm91bmRpbmdTcGhlcmVzWzBdCiAgICApOwogICAgQm91bmRpbmdTcGhlcmVfZGVmYXVsdC5mcm9tVmVydGljZXMoCiAgICAgIHRvcFBvc2l0aW9uc0FycmF5LAogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTywKICAgICAgMywKICAgICAgYm91bmRpbmdTcGhlcmVzWzFdCiAgICApOwogICAgY29uc3QgYm91bmRpbmdTcGhlcmUgPSBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0LmZyb21Cb3VuZGluZ1NwaGVyZXMoYm91bmRpbmdTcGhlcmVzKTsKICAgIGJvdW5kaW5nU3BoZXJlLnJhZGl1cyArPSBzdW1IZWlnaHRzIC8gKHNlZ21lbnRDb3VudCAqIDIpOwogICAgY29uc3QgYXR0cmlidXRlcyA9IHsKICAgICAgcG9zaXRpb246IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5ET1VCTEUsCiAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICBub3JtYWxpemU6IGZhbHNlLAogICAgICAgIHZhbHVlczogcG9zaXRpb25zQXJyYXkKICAgICAgfSksCiAgICAgIHN0YXJ0SGlBbmRGb3J3YXJkT2Zmc2V0WDogZ2V0VmVjNEdlb21ldHJ5QXR0cmlidXRlKAogICAgICAgIHN0YXJ0SGlBbmRGb3J3YXJkT2Zmc2V0WAogICAgICApLAogICAgICBzdGFydExvQW5kRm9yd2FyZE9mZnNldFk6IGdldFZlYzRHZW9tZXRyeUF0dHJpYnV0ZSgKICAgICAgICBzdGFydExvQW5kRm9yd2FyZE9mZnNldFkKICAgICAgKSwKICAgICAgc3RhcnROb3JtYWxBbmRGb3J3YXJkT2Zmc2V0WjogZ2V0VmVjNEdlb21ldHJ5QXR0cmlidXRlKAogICAgICAgIHN0YXJ0Tm9ybWFsQW5kRm9yd2FyZE9mZnNldFoKICAgICAgKSwKICAgICAgZW5kTm9ybWFsQW5kVGV4dHVyZUNvb3JkaW5hdGVOb3JtYWxpemF0aW9uWDogZ2V0VmVjNEdlb21ldHJ5QXR0cmlidXRlKAogICAgICAgIGVuZE5vcm1hbEFuZFRleHR1cmVDb29yZGluYXRlTm9ybWFsaXphdGlvblgKICAgICAgKSwKICAgICAgcmlnaHROb3JtYWxBbmRUZXh0dXJlQ29vcmRpbmF0ZU5vcm1hbGl6YXRpb25ZOiBnZXRWZWM0R2VvbWV0cnlBdHRyaWJ1dGUoCiAgICAgICAgcmlnaHROb3JtYWxBbmRUZXh0dXJlQ29vcmRpbmF0ZU5vcm1hbGl6YXRpb25ZCiAgICAgICkKICAgIH07CiAgICBpZiAoY29tcHV0ZTJkQXR0cmlidXRlcykgewogICAgICBhdHRyaWJ1dGVzLnN0YXJ0SGlMbzJEID0gZ2V0VmVjNEdlb21ldHJ5QXR0cmlidXRlKHN0YXJ0SGlMbzJEKTsKICAgICAgYXR0cmlidXRlcy5vZmZzZXRBbmRSaWdodDJEID0gZ2V0VmVjNEdlb21ldHJ5QXR0cmlidXRlKG9mZnNldEFuZFJpZ2h0MkQpOwogICAgICBhdHRyaWJ1dGVzLnN0YXJ0RW5kTm9ybWFsczJEID0gZ2V0VmVjNEdlb21ldHJ5QXR0cmlidXRlKHN0YXJ0RW5kTm9ybWFsczJEKTsKICAgICAgYXR0cmlidXRlcy50ZXhjb29yZE5vcm1hbGl6YXRpb24yRCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAyLAogICAgICAgIG5vcm1hbGl6ZTogZmFsc2UsCiAgICAgICAgdmFsdWVzOiB0ZXhjb29yZE5vcm1hbGl6YXRpb24yRAogICAgICB9KTsKICAgIH0KICAgIHJldHVybiBuZXcgR2VvbWV0cnlfZGVmYXVsdCh7CiAgICAgIGF0dHJpYnV0ZXMsCiAgICAgIGluZGljZXMsCiAgICAgIGJvdW5kaW5nU3BoZXJlCiAgICB9KTsKICB9CiAgZnVuY3Rpb24gZ2V0VmVjNEdlb21ldHJ5QXR0cmlidXRlKHR5cGVkQXJyYXkpIHsKICAgIHJldHVybiBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkZMT0FULAogICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiA0LAogICAgICBub3JtYWxpemU6IGZhbHNlLAogICAgICB2YWx1ZXM6IHR5cGVkQXJyYXkKICAgIH0pOwogIH0KICB2YXIgUFJPSkVDVElPTlMsIFBST0pFQ1RJT05fQ09VTlQsIE1JVEVSX0JSRUFLX1NNQUxMLCBNSVRFUl9CUkVBS19MQVJHRSwgV0FMTF9JTklUSUFMX01JTl9IRUlHSFQsIFdBTExfSU5JVElBTF9NQVhfSEVJR0hULCBjYXJ0M1NjcmF0Y2gxLCBjYXJ0M1NjcmF0Y2gyLCBjYXJ0M1NjcmF0Y2gzLCBpbnRlcnBvbGF0ZWRDYXJ0b2dyYXBoaWNTY3JhdGNoLCBpbnRlcnBvbGF0ZWRCb3R0b21TY3JhdGNoLCBpbnRlcnBvbGF0ZWRUb3BTY3JhdGNoLCBpbnRlcnBvbGF0ZWROb3JtYWxTY3JhdGNoLCBoZWlnaHRsZXNzQ2FydG9ncmFwaGljU2NyYXRjaCwgdG9QcmV2aW91c1NjcmF0Y2gsIHRvTmV4dFNjcmF0Y2gsIGZvcndhcmRTY3JhdGNoLCB2ZXJ0ZXhVcFNjcmF0Y2gsIGNvc2luZTkwLCBjb3NpbmUxODAsIFhaX1BMQU5FLCBwcmV2aW91c0JvdHRvbVNjcmF0Y2gsIHZlcnRleEJvdHRvbVNjcmF0Y2gsIHZlcnRleFRvcFNjcmF0Y2gsIG5leHRCb3R0b21TY3JhdGNoLCB2ZXJ0ZXhOb3JtYWxTY3JhdGNoLCBpbnRlcnNlY3Rpb25TY3JhdGNoLCBjYXJ0b2dyYXBoaWNTY3JhdGNoMCwgY2FydG9ncmFwaGljU2NyYXRjaDEsIGNhcnRvZ3JhcGhpY0ludGVyc2VjdGlvblNjcmF0Y2gsIGxpbmVEaXJlY3Rpb25TY3JhdGNoLCBtYXRyaXgzU2NyYXRjaCwgcXVhdGVybmlvblNjcmF0Y2gzLCBlbmRQb3NDYXJ0b2dyYXBoaWNTY3JhdGNoLCBub3JtYWxTdGFydHBvaW50U2NyYXRjaCwgbm9ybWFsRW5kcG9pbnRTY3JhdGNoLCBhZGp1c3RIZWlnaHROb3JtYWxTY3JhdGNoLCBhZGp1c3RIZWlnaHRPZmZzZXRTY3JhdGNoLCBudWRnZURpcmVjdGlvblNjcmF0Y2gsIHN0YXJ0Q2FydG9ncmFwaGljU2NyYXRjaCwgZW5kQ2FydG9ncmFwaGljU2NyYXRjaCwgc2VnbWVudFN0YXJ0VG9wU2NyYXRjaCwgc2VnbWVudEVuZFRvcFNjcmF0Y2gsIHNlZ21lbnRTdGFydEJvdHRvbVNjcmF0Y2gsIHNlZ21lbnRFbmRCb3R0b21TY3JhdGNoLCBzZWdtZW50U3RhcnROb3JtYWxTY3JhdGNoLCBzZWdtZW50RW5kTm9ybWFsU2NyYXRjaCwgZ2V0SGVpZ2h0Q2FydG9ncmFwaGljcywgZ2V0SGVpZ2h0UmVjdGFuZ2xlU2NyYXRjaCwgYWRqdXN0SGVpZ2h0U3RhcnRUb3BTY3JhdGNoLCBhZGp1c3RIZWlnaHRFbmRUb3BTY3JhdGNoLCBhZGp1c3RIZWlnaHRTdGFydEJvdHRvbVNjcmF0Y2gsIGFkanVzdEhlaWdodEVuZEJvdHRvbVNjcmF0Y2gsIHNlZ21lbnRTdGFydDJEU2NyYXRjaCwgc2VnbWVudEVuZDJEU2NyYXRjaCwgc2VnbWVudFN0YXJ0Tm9ybWFsMkRTY3JhdGNoLCBzZWdtZW50RW5kTm9ybWFsMkRTY3JhdGNoLCBvZmZzZXRTY3JhdGNoMiwgc3RhcnRVcFNjcmF0Y2gsIGVuZFVwU2NyYXRjaCwgcmlnaHRTY3JhdGNoMiwgc3RhcnRQbGFuZU5vcm1hbFNjcmF0Y2gsIGVuZFBsYW5lTm9ybWFsU2NyYXRjaCwgZW5jb2RlU2NyYXRjaCwgZW5jb2RlU2NyYXRjaDJELCBmb3J3YXJkT2Zmc2V0MkRTY3JhdGNoLCByaWdodDJEU2NyYXRjaCwgbm9ybWFsTnVkZ2VTY3JhdGNoLCBzY3JhdGNoQm91bmRpbmdTcGhlcmVzLCBSRUZFUkVOQ0VfSU5ESUNFUywgUkVGRVJFTkNFX0lORElDRVNfTEVOR1RILCBHcm91bmRQb2x5bGluZUdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfR3JvdW5kUG9seWxpbmVHZW9tZXRyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvR3JvdW5kUG9seWxpbmVHZW9tZXRyeS5qcyIoKSB7CiAgICAgIGluaXRfQXBwcm94aW1hdGVUZXJyYWluSGVpZ2h0cygpOwogICAgICBpbml0X0FyY1R5cGUoKTsKICAgICAgaW5pdF9hcnJheVJlbW92ZUR1cGxpY2F0ZXMoKTsKICAgICAgaW5pdF9Cb3VuZGluZ1NwaGVyZSgpOwogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DYXJ0b2dyYXBoaWMoKTsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X0NvbXBvbmVudERhdGF0eXBlKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkR2VvZGVzaWMoKTsKICAgICAgaW5pdF9FbGxpcHNvaWRSaHVtYkxpbmUoKTsKICAgICAgaW5pdF9FbmNvZGVkQ2FydGVzaWFuMygpOwogICAgICBpbml0X0dlb2dyYXBoaWNQcm9qZWN0aW9uKCk7CiAgICAgIGluaXRfR2VvbWV0cnkoKTsKICAgICAgaW5pdF9HZW9tZXRyeUF0dHJpYnV0ZSgpOwogICAgICBpbml0X0ludGVyc2VjdGlvblRlc3RzKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X01hdHJpeDMoKTsKICAgICAgaW5pdF9QbGFuZSgpOwogICAgICBpbml0X1F1YXRlcm5pb24oKTsKICAgICAgaW5pdF9SZWN0YW5nbGUoKTsKICAgICAgaW5pdF9XZWJNZXJjYXRvclByb2plY3Rpb24oKTsKICAgICAgUFJPSkVDVElPTlMgPSBbR2VvZ3JhcGhpY1Byb2plY3Rpb25fZGVmYXVsdCwgV2ViTWVyY2F0b3JQcm9qZWN0aW9uX2RlZmF1bHRdOwogICAgICBQUk9KRUNUSU9OX0NPVU5UID0gUFJPSkVDVElPTlMubGVuZ3RoOwogICAgICBNSVRFUl9CUkVBS19TTUFMTCA9IE1hdGguY29zKE1hdGhfZGVmYXVsdC50b1JhZGlhbnMoMzApKTsKICAgICAgTUlURVJfQlJFQUtfTEFSR0UgPSBNYXRoLmNvcyhNYXRoX2RlZmF1bHQudG9SYWRpYW5zKDE1MCkpOwogICAgICBXQUxMX0lOSVRJQUxfTUlOX0hFSUdIVCA9IDA7CiAgICAgIFdBTExfSU5JVElBTF9NQVhfSEVJR0hUID0gMWUzOwogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhHcm91bmRQb2x5bGluZUdlb21ldHJ5LnByb3RvdHlwZSwgewogICAgICAgIC8qKgogICAgICAgICAqIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdXNlZCB0byBwYWNrIHRoZSBvYmplY3QgaW50byBhbiBhcnJheS4KICAgICAgICAgKiBAbWVtYmVyb2YgR3JvdW5kUG9seWxpbmVHZW9tZXRyeS5wcm90b3R5cGUKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqIEBwcml2YXRlCiAgICAgICAgICovCiAgICAgICAgcGFja2VkTGVuZ3RoOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gMSArIHRoaXMuX3Bvc2l0aW9ucy5sZW5ndGggKiAzICsgMSArIDEgKyAxICsgRWxsaXBzb2lkX2RlZmF1bHQucGFja2VkTGVuZ3RoICsgMSArIDE7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgICAgR3JvdW5kUG9seWxpbmVHZW9tZXRyeS5zZXRQcm9qZWN0aW9uQW5kRWxsaXBzb2lkID0gZnVuY3Rpb24oZ3JvdW5kUG9seWxpbmVHZW9tZXRyeSwgbWFwUHJvamVjdGlvbikgewogICAgICAgIGxldCBwcm9qZWN0aW9uSW5kZXggPSAwOwogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgUFJPSkVDVElPTl9DT1VOVDsgaSsrKSB7CiAgICAgICAgICBpZiAobWFwUHJvamVjdGlvbiBpbnN0YW5jZW9mIFBST0pFQ1RJT05TW2ldKSB7CiAgICAgICAgICAgIHByb2plY3Rpb25JbmRleCA9IGk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBncm91bmRQb2x5bGluZUdlb21ldHJ5Ll9wcm9qZWN0aW9uSW5kZXggPSBwcm9qZWN0aW9uSW5kZXg7CiAgICAgICAgZ3JvdW5kUG9seWxpbmVHZW9tZXRyeS5fZWxsaXBzb2lkID0gbWFwUHJvamVjdGlvbi5lbGxpcHNvaWQ7CiAgICAgIH07CiAgICAgIGNhcnQzU2NyYXRjaDEgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGNhcnQzU2NyYXRjaDIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGNhcnQzU2NyYXRjaDMgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGludGVycG9sYXRlZENhcnRvZ3JhcGhpY1NjcmF0Y2ggPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgaW50ZXJwb2xhdGVkQm90dG9tU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgaW50ZXJwb2xhdGVkVG9wU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgaW50ZXJwb2xhdGVkTm9ybWFsU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgaGVpZ2h0bGVzc0NhcnRvZ3JhcGhpY1NjcmF0Y2ggPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgR3JvdW5kUG9seWxpbmVHZW9tZXRyeS5wYWNrID0gZnVuY3Rpb24odmFsdWUsIGFycmF5LCBzdGFydGluZ0luZGV4KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJ2YWx1ZSIsIHZhbHVlKTsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIGxldCBpbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIGNvbnN0IHBvc2l0aW9ucyA9IHZhbHVlLl9wb3NpdGlvbnM7CiAgICAgICAgY29uc3QgcG9zaXRpb25zTGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aDsKICAgICAgICBhcnJheVtpbmRleCsrXSA9IHBvc2l0aW9uc0xlbmd0aDsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvc2l0aW9uc0xlbmd0aDsgKytpKSB7CiAgICAgICAgICBjb25zdCBjYXJ0ZXNpYW4xMSA9IHBvc2l0aW9uc1tpXTsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKGNhcnRlc2lhbjExLCBhcnJheSwgaW5kZXgpOwogICAgICAgICAgaW5kZXggKz0gMzsKICAgICAgICB9CiAgICAgICAgYXJyYXlbaW5kZXgrK10gPSB2YWx1ZS5ncmFudWxhcml0eTsKICAgICAgICBhcnJheVtpbmRleCsrXSA9IHZhbHVlLmxvb3AgPyAxIDogMDsKICAgICAgICBhcnJheVtpbmRleCsrXSA9IHZhbHVlLmFyY1R5cGU7CiAgICAgICAgRWxsaXBzb2lkX2RlZmF1bHQucGFjayh2YWx1ZS5fZWxsaXBzb2lkLCBhcnJheSwgaW5kZXgpOwogICAgICAgIGluZGV4ICs9IEVsbGlwc29pZF9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBhcnJheVtpbmRleCsrXSA9IHZhbHVlLl9wcm9qZWN0aW9uSW5kZXg7CiAgICAgICAgYXJyYXlbaW5kZXgrK10gPSB2YWx1ZS5fc2NlbmUzRE9ubHkgPyAxIDogMDsKICAgICAgICByZXR1cm4gYXJyYXk7CiAgICAgIH07CiAgICAgIEdyb3VuZFBvbHlsaW5lR2VvbWV0cnkudW5wYWNrID0gZnVuY3Rpb24oYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgbGV0IGluZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgY29uc3QgcG9zaXRpb25zTGVuZ3RoID0gYXJyYXlbaW5kZXgrK107CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gbmV3IEFycmF5KHBvc2l0aW9uc0xlbmd0aCk7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb3NpdGlvbnNMZW5ndGg7IGkrKykgewogICAgICAgICAgcG9zaXRpb25zW2ldID0gQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjayhhcnJheSwgaW5kZXgpOwogICAgICAgICAgaW5kZXggKz0gMzsKICAgICAgICB9CiAgICAgICAgY29uc3QgZ3JhbnVsYXJpdHkgPSBhcnJheVtpbmRleCsrXTsKICAgICAgICBjb25zdCBsb29wID0gYXJyYXlbaW5kZXgrK10gPT09IDE7CiAgICAgICAgY29uc3QgYXJjVHlwZSA9IGFycmF5W2luZGV4KytdOwogICAgICAgIGNvbnN0IGVsbGlwc29pZCA9IEVsbGlwc29pZF9kZWZhdWx0LnVucGFjayhhcnJheSwgaW5kZXgpOwogICAgICAgIGluZGV4ICs9IEVsbGlwc29pZF9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBjb25zdCBwcm9qZWN0aW9uSW5kZXggPSBhcnJheVtpbmRleCsrXTsKICAgICAgICBjb25zdCBzY2VuZTNET25seSA9IGFycmF5W2luZGV4KytdID09PSAxOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBHcm91bmRQb2x5bGluZUdlb21ldHJ5KHsKICAgICAgICAgICAgcG9zaXRpb25zCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0Ll9wb3NpdGlvbnMgPSBwb3NpdGlvbnM7CiAgICAgICAgcmVzdWx0LmdyYW51bGFyaXR5ID0gZ3JhbnVsYXJpdHk7CiAgICAgICAgcmVzdWx0Lmxvb3AgPSBsb29wOwogICAgICAgIHJlc3VsdC5hcmNUeXBlID0gYXJjVHlwZTsKICAgICAgICByZXN1bHQuX2VsbGlwc29pZCA9IGVsbGlwc29pZDsKICAgICAgICByZXN1bHQuX3Byb2plY3Rpb25JbmRleCA9IHByb2plY3Rpb25JbmRleDsKICAgICAgICByZXN1bHQuX3NjZW5lM0RPbmx5ID0gc2NlbmUzRE9ubHk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgdG9QcmV2aW91c1NjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHRvTmV4dFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGZvcndhcmRTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICB2ZXJ0ZXhVcFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGNvc2luZTkwID0gMDsKICAgICAgY29zaW5lMTgwID0gLTE7CiAgICAgIFhaX1BMQU5FID0gUGxhbmVfZGVmYXVsdC5mcm9tUG9pbnROb3JtYWwoQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8sIENhcnRlc2lhbjNfZGVmYXVsdC5VTklUX1kpOwogICAgICBwcmV2aW91c0JvdHRvbVNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHZlcnRleEJvdHRvbVNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHZlcnRleFRvcFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIG5leHRCb3R0b21TY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICB2ZXJ0ZXhOb3JtYWxTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBpbnRlcnNlY3Rpb25TY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBjYXJ0b2dyYXBoaWNTY3JhdGNoMCA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICBjYXJ0b2dyYXBoaWNTY3JhdGNoMSA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICBjYXJ0b2dyYXBoaWNJbnRlcnNlY3Rpb25TY3JhdGNoID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIEdyb3VuZFBvbHlsaW5lR2VvbWV0cnkuY3JlYXRlR2VvbWV0cnkgPSBmdW5jdGlvbihncm91bmRQb2x5bGluZUdlb21ldHJ5KSB7CiAgICAgICAgY29uc3QgY29tcHV0ZTJkQXR0cmlidXRlcyA9ICFncm91bmRQb2x5bGluZUdlb21ldHJ5Ll9zY2VuZTNET25seTsKICAgICAgICBsZXQgbG9vcCA9IGdyb3VuZFBvbHlsaW5lR2VvbWV0cnkubG9vcDsKICAgICAgICBjb25zdCBlbGxpcHNvaWQgPSBncm91bmRQb2x5bGluZUdlb21ldHJ5Ll9lbGxpcHNvaWQ7CiAgICAgICAgY29uc3QgZ3JhbnVsYXJpdHkgPSBncm91bmRQb2x5bGluZUdlb21ldHJ5LmdyYW51bGFyaXR5OwogICAgICAgIGNvbnN0IGFyY1R5cGUgPSBncm91bmRQb2x5bGluZUdlb21ldHJ5LmFyY1R5cGU7CiAgICAgICAgY29uc3QgcHJvamVjdGlvbiA9IG5ldyBQUk9KRUNUSU9OU1tncm91bmRQb2x5bGluZUdlb21ldHJ5Ll9wcm9qZWN0aW9uSW5kZXhdKAogICAgICAgICAgZWxsaXBzb2lkCiAgICAgICAgKTsKICAgICAgICBjb25zdCBtaW5IZWlnaHQgPSBXQUxMX0lOSVRJQUxfTUlOX0hFSUdIVDsKICAgICAgICBjb25zdCBtYXhIZWlnaHQgPSBXQUxMX0lOSVRJQUxfTUFYX0hFSUdIVDsKICAgICAgICBsZXQgaW5kZXg7CiAgICAgICAgbGV0IGk7CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gZ3JvdW5kUG9seWxpbmVHZW9tZXRyeS5fcG9zaXRpb25zOwogICAgICAgIGNvbnN0IHBvc2l0aW9uc0xlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgaWYgKHBvc2l0aW9uc0xlbmd0aCA9PT0gMikgewogICAgICAgICAgbG9vcCA9IGZhbHNlOwogICAgICAgIH0KICAgICAgICBsZXQgcDA7CiAgICAgICAgbGV0IHAxOwogICAgICAgIGxldCBjMDsKICAgICAgICBsZXQgYzE7CiAgICAgICAgY29uc3Qgcmh1bWJMaW5lID0gbmV3IEVsbGlwc29pZFJodW1iTGluZV9kZWZhdWx0KHZvaWQgMCwgdm9pZCAwLCBlbGxpcHNvaWQpOwogICAgICAgIGxldCBpbnRlcnNlY3Rpb247CiAgICAgICAgbGV0IGludGVyc2VjdGlvbkNhcnRvZ3JhcGhpYzsKICAgICAgICBsZXQgaW50ZXJzZWN0aW9uTG9uZ2l0dWRlOwogICAgICAgIGNvbnN0IHNwbGl0UG9zaXRpb25zID0gW3Bvc2l0aW9uc1swXV07CiAgICAgICAgZm9yIChpID0gMDsgaSA8IHBvc2l0aW9uc0xlbmd0aCAtIDE7IGkrKykgewogICAgICAgICAgcDAgPSBwb3NpdGlvbnNbaV07CiAgICAgICAgICBwMSA9IHBvc2l0aW9uc1tpICsgMV07CiAgICAgICAgICBpbnRlcnNlY3Rpb24gPSBJbnRlcnNlY3Rpb25UZXN0c19kZWZhdWx0LmxpbmVTZWdtZW50UGxhbmUoCiAgICAgICAgICAgIHAwLAogICAgICAgICAgICBwMSwKICAgICAgICAgICAgWFpfUExBTkUsCiAgICAgICAgICAgIGludGVyc2VjdGlvblNjcmF0Y2gKICAgICAgICAgICk7CiAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGludGVyc2VjdGlvbikgJiYgIUNhcnRlc2lhbjNfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKGludGVyc2VjdGlvbiwgcDAsIE1hdGhfZGVmYXVsdC5FUFNJTE9ONykgJiYgIUNhcnRlc2lhbjNfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKGludGVyc2VjdGlvbiwgcDEsIE1hdGhfZGVmYXVsdC5FUFNJTE9ONykpIHsKICAgICAgICAgICAgaWYgKGdyb3VuZFBvbHlsaW5lR2VvbWV0cnkuYXJjVHlwZSA9PT0gQXJjVHlwZV9kZWZhdWx0LkdFT0RFU0lDKSB7CiAgICAgICAgICAgICAgc3BsaXRQb3NpdGlvbnMucHVzaChDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoaW50ZXJzZWN0aW9uKSk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoZ3JvdW5kUG9seWxpbmVHZW9tZXRyeS5hcmNUeXBlID09PSBBcmNUeXBlX2RlZmF1bHQuUkhVTUIpIHsKICAgICAgICAgICAgICBpbnRlcnNlY3Rpb25Mb25naXR1ZGUgPSBlbGxpcHNvaWQuY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWMoCiAgICAgICAgICAgICAgICBpbnRlcnNlY3Rpb24sCiAgICAgICAgICAgICAgICBjYXJ0b2dyYXBoaWNTY3JhdGNoMAogICAgICAgICAgICAgICkubG9uZ2l0dWRlOwogICAgICAgICAgICAgIGMwID0gZWxsaXBzb2lkLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljKHAwLCBjYXJ0b2dyYXBoaWNTY3JhdGNoMCk7CiAgICAgICAgICAgICAgYzEgPSBlbGxpcHNvaWQuY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWMocDEsIGNhcnRvZ3JhcGhpY1NjcmF0Y2gxKTsKICAgICAgICAgICAgICByaHVtYkxpbmUuc2V0RW5kUG9pbnRzKGMwLCBjMSk7CiAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uQ2FydG9ncmFwaGljID0gcmh1bWJMaW5lLmZpbmRJbnRlcnNlY3Rpb25XaXRoTG9uZ2l0dWRlKAogICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uTG9uZ2l0dWRlLAogICAgICAgICAgICAgICAgY2FydG9ncmFwaGljSW50ZXJzZWN0aW9uU2NyYXRjaAogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uID0gZWxsaXBzb2lkLmNhcnRvZ3JhcGhpY1RvQ2FydGVzaWFuKAogICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uQ2FydG9ncmFwaGljLAogICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uU2NyYXRjaAogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChpbnRlcnNlY3Rpb24pICYmICFDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzRXBzaWxvbihpbnRlcnNlY3Rpb24sIHAwLCBNYXRoX2RlZmF1bHQuRVBTSUxPTjcpICYmICFDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzRXBzaWxvbihpbnRlcnNlY3Rpb24sIHAxLCBNYXRoX2RlZmF1bHQuRVBTSUxPTjcpKSB7CiAgICAgICAgICAgICAgICBzcGxpdFBvc2l0aW9ucy5wdXNoKENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShpbnRlcnNlY3Rpb24pKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHNwbGl0UG9zaXRpb25zLnB1c2gocDEpOwogICAgICAgIH0KICAgICAgICBpZiAobG9vcCkgewogICAgICAgICAgcDAgPSBwb3NpdGlvbnNbcG9zaXRpb25zTGVuZ3RoIC0gMV07CiAgICAgICAgICBwMSA9IHBvc2l0aW9uc1swXTsKICAgICAgICAgIGludGVyc2VjdGlvbiA9IEludGVyc2VjdGlvblRlc3RzX2RlZmF1bHQubGluZVNlZ21lbnRQbGFuZSgKICAgICAgICAgICAgcDAsCiAgICAgICAgICAgIHAxLAogICAgICAgICAgICBYWl9QTEFORSwKICAgICAgICAgICAgaW50ZXJzZWN0aW9uU2NyYXRjaAogICAgICAgICAgKTsKICAgICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoaW50ZXJzZWN0aW9uKSAmJiAhQ2FydGVzaWFuM19kZWZhdWx0LmVxdWFsc0Vwc2lsb24oaW50ZXJzZWN0aW9uLCBwMCwgTWF0aF9kZWZhdWx0LkVQU0lMT043KSAmJiAhQ2FydGVzaWFuM19kZWZhdWx0LmVxdWFsc0Vwc2lsb24oaW50ZXJzZWN0aW9uLCBwMSwgTWF0aF9kZWZhdWx0LkVQU0lMT043KSkgewogICAgICAgICAgICBpZiAoZ3JvdW5kUG9seWxpbmVHZW9tZXRyeS5hcmNUeXBlID09PSBBcmNUeXBlX2RlZmF1bHQuR0VPREVTSUMpIHsKICAgICAgICAgICAgICBzcGxpdFBvc2l0aW9ucy5wdXNoKENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShpbnRlcnNlY3Rpb24pKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChncm91bmRQb2x5bGluZUdlb21ldHJ5LmFyY1R5cGUgPT09IEFyY1R5cGVfZGVmYXVsdC5SSFVNQikgewogICAgICAgICAgICAgIGludGVyc2VjdGlvbkxvbmdpdHVkZSA9IGVsbGlwc29pZC5jYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpYygKICAgICAgICAgICAgICAgIGludGVyc2VjdGlvbiwKICAgICAgICAgICAgICAgIGNhcnRvZ3JhcGhpY1NjcmF0Y2gwCiAgICAgICAgICAgICAgKS5sb25naXR1ZGU7CiAgICAgICAgICAgICAgYzAgPSBlbGxpcHNvaWQuY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWMocDAsIGNhcnRvZ3JhcGhpY1NjcmF0Y2gwKTsKICAgICAgICAgICAgICBjMSA9IGVsbGlwc29pZC5jYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpYyhwMSwgY2FydG9ncmFwaGljU2NyYXRjaDEpOwogICAgICAgICAgICAgIHJodW1iTGluZS5zZXRFbmRQb2ludHMoYzAsIGMxKTsKICAgICAgICAgICAgICBpbnRlcnNlY3Rpb25DYXJ0b2dyYXBoaWMgPSByaHVtYkxpbmUuZmluZEludGVyc2VjdGlvbldpdGhMb25naXR1ZGUoCiAgICAgICAgICAgICAgICBpbnRlcnNlY3Rpb25Mb25naXR1ZGUsCiAgICAgICAgICAgICAgICBjYXJ0b2dyYXBoaWNJbnRlcnNlY3Rpb25TY3JhdGNoCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICBpbnRlcnNlY3Rpb24gPSBlbGxpcHNvaWQuY2FydG9ncmFwaGljVG9DYXJ0ZXNpYW4oCiAgICAgICAgICAgICAgICBpbnRlcnNlY3Rpb25DYXJ0b2dyYXBoaWMsCiAgICAgICAgICAgICAgICBpbnRlcnNlY3Rpb25TY3JhdGNoCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGludGVyc2VjdGlvbikgJiYgIUNhcnRlc2lhbjNfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKGludGVyc2VjdGlvbiwgcDAsIE1hdGhfZGVmYXVsdC5FUFNJTE9ONykgJiYgIUNhcnRlc2lhbjNfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKGludGVyc2VjdGlvbiwgcDEsIE1hdGhfZGVmYXVsdC5FUFNJTE9ONykpIHsKICAgICAgICAgICAgICAgIHNwbGl0UG9zaXRpb25zLnB1c2goQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGludGVyc2VjdGlvbikpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBsZXQgY2FydG9ncmFwaGljc0xlbmd0aCA9IHNwbGl0UG9zaXRpb25zLmxlbmd0aDsKICAgICAgICBsZXQgY2FydG9ncmFwaGljcyA9IG5ldyBBcnJheShjYXJ0b2dyYXBoaWNzTGVuZ3RoKTsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY2FydG9ncmFwaGljc0xlbmd0aDsgaSsrKSB7CiAgICAgICAgICBjb25zdCBjYXJ0b2dyYXBoaWMyID0gQ2FydG9ncmFwaGljX2RlZmF1bHQuZnJvbUNhcnRlc2lhbigKICAgICAgICAgICAgc3BsaXRQb3NpdGlvbnNbaV0sCiAgICAgICAgICAgIGVsbGlwc29pZAogICAgICAgICAgKTsKICAgICAgICAgIGNhcnRvZ3JhcGhpYzIuaGVpZ2h0ID0gMDsKICAgICAgICAgIGNhcnRvZ3JhcGhpY3NbaV0gPSBjYXJ0b2dyYXBoaWMyOwogICAgICAgIH0KICAgICAgICBjYXJ0b2dyYXBoaWNzID0gYXJyYXlSZW1vdmVEdXBsaWNhdGVzX2RlZmF1bHQoCiAgICAgICAgICBjYXJ0b2dyYXBoaWNzLAogICAgICAgICAgQ2FydG9ncmFwaGljX2RlZmF1bHQuZXF1YWxzRXBzaWxvbgogICAgICAgICk7CiAgICAgICAgY2FydG9ncmFwaGljc0xlbmd0aCA9IGNhcnRvZ3JhcGhpY3MubGVuZ3RoOwogICAgICAgIGlmIChjYXJ0b2dyYXBoaWNzTGVuZ3RoIDwgMikgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgY29uc3QgY2FydG9ncmFwaGljc0FycmF5ID0gW107CiAgICAgICAgY29uc3Qgbm9ybWFsc0FycmF5ID0gW107CiAgICAgICAgY29uc3QgYm90dG9tUG9zaXRpb25zQXJyYXkgPSBbXTsKICAgICAgICBjb25zdCB0b3BQb3NpdGlvbnNBcnJheSA9IFtdOwogICAgICAgIGxldCBwcmV2aW91c0JvdHRvbSA9IHByZXZpb3VzQm90dG9tU2NyYXRjaDsKICAgICAgICBsZXQgdmVydGV4Qm90dG9tID0gdmVydGV4Qm90dG9tU2NyYXRjaDsKICAgICAgICBsZXQgdmVydGV4VG9wID0gdmVydGV4VG9wU2NyYXRjaDsKICAgICAgICBsZXQgbmV4dEJvdHRvbSA9IG5leHRCb3R0b21TY3JhdGNoOwogICAgICAgIGxldCB2ZXJ0ZXhOb3JtYWwgPSB2ZXJ0ZXhOb3JtYWxTY3JhdGNoOwogICAgICAgIGNvbnN0IHN0YXJ0Q2FydG9ncmFwaGljID0gY2FydG9ncmFwaGljc1swXTsKICAgICAgICBjb25zdCBuZXh0Q2FydG9ncmFwaGljID0gY2FydG9ncmFwaGljc1sxXTsKICAgICAgICBjb25zdCBwcmVzdGFydENhcnRvZ3JhcGhpYyA9IGNhcnRvZ3JhcGhpY3NbY2FydG9ncmFwaGljc0xlbmd0aCAtIDFdOwogICAgICAgIHByZXZpb3VzQm90dG9tID0gZ2V0UG9zaXRpb24oCiAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICBwcmVzdGFydENhcnRvZ3JhcGhpYywKICAgICAgICAgIG1pbkhlaWdodCwKICAgICAgICAgIHByZXZpb3VzQm90dG9tCiAgICAgICAgKTsKICAgICAgICBuZXh0Qm90dG9tID0gZ2V0UG9zaXRpb24oZWxsaXBzb2lkLCBuZXh0Q2FydG9ncmFwaGljLCBtaW5IZWlnaHQsIG5leHRCb3R0b20pOwogICAgICAgIHZlcnRleEJvdHRvbSA9IGdldFBvc2l0aW9uKAogICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgc3RhcnRDYXJ0b2dyYXBoaWMsCiAgICAgICAgICBtaW5IZWlnaHQsCiAgICAgICAgICB2ZXJ0ZXhCb3R0b20KICAgICAgICApOwogICAgICAgIHZlcnRleFRvcCA9IGdldFBvc2l0aW9uKGVsbGlwc29pZCwgc3RhcnRDYXJ0b2dyYXBoaWMsIG1heEhlaWdodCwgdmVydGV4VG9wKTsKICAgICAgICBpZiAobG9vcCkgewogICAgICAgICAgdmVydGV4Tm9ybWFsID0gY29tcHV0ZVZlcnRleE1pdGVyTm9ybWFsKAogICAgICAgICAgICBwcmV2aW91c0JvdHRvbSwKICAgICAgICAgICAgdmVydGV4Qm90dG9tLAogICAgICAgICAgICB2ZXJ0ZXhUb3AsCiAgICAgICAgICAgIG5leHRCb3R0b20sCiAgICAgICAgICAgIHZlcnRleE5vcm1hbAogICAgICAgICAgKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdmVydGV4Tm9ybWFsID0gY29tcHV0ZVJpZ2h0Tm9ybWFsKAogICAgICAgICAgICBzdGFydENhcnRvZ3JhcGhpYywKICAgICAgICAgICAgbmV4dENhcnRvZ3JhcGhpYywKICAgICAgICAgICAgbWF4SGVpZ2h0LAogICAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICAgIHZlcnRleE5vcm1hbAogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2sodmVydGV4Tm9ybWFsLCBub3JtYWxzQXJyYXksIDApOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKHZlcnRleEJvdHRvbSwgYm90dG9tUG9zaXRpb25zQXJyYXksIDApOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKHZlcnRleFRvcCwgdG9wUG9zaXRpb25zQXJyYXksIDApOwogICAgICAgIGNhcnRvZ3JhcGhpY3NBcnJheS5wdXNoKHN0YXJ0Q2FydG9ncmFwaGljLmxhdGl0dWRlKTsKICAgICAgICBjYXJ0b2dyYXBoaWNzQXJyYXkucHVzaChzdGFydENhcnRvZ3JhcGhpYy5sb25naXR1ZGUpOwogICAgICAgIGludGVycG9sYXRlU2VnbWVudCgKICAgICAgICAgIHN0YXJ0Q2FydG9ncmFwaGljLAogICAgICAgICAgbmV4dENhcnRvZ3JhcGhpYywKICAgICAgICAgIG1pbkhlaWdodCwKICAgICAgICAgIG1heEhlaWdodCwKICAgICAgICAgIGdyYW51bGFyaXR5LAogICAgICAgICAgYXJjVHlwZSwKICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgIG5vcm1hbHNBcnJheSwKICAgICAgICAgIGJvdHRvbVBvc2l0aW9uc0FycmF5LAogICAgICAgICAgdG9wUG9zaXRpb25zQXJyYXksCiAgICAgICAgICBjYXJ0b2dyYXBoaWNzQXJyYXkKICAgICAgICApOwogICAgICAgIGZvciAoaSA9IDE7IGkgPCBjYXJ0b2dyYXBoaWNzTGVuZ3RoIC0gMTsgKytpKSB7CiAgICAgICAgICBwcmV2aW91c0JvdHRvbSA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZSh2ZXJ0ZXhCb3R0b20sIHByZXZpb3VzQm90dG9tKTsKICAgICAgICAgIHZlcnRleEJvdHRvbSA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShuZXh0Qm90dG9tLCB2ZXJ0ZXhCb3R0b20pOwogICAgICAgICAgY29uc3QgdmVydGV4Q2FydG9ncmFwaGljID0gY2FydG9ncmFwaGljc1tpXTsKICAgICAgICAgIGdldFBvc2l0aW9uKGVsbGlwc29pZCwgdmVydGV4Q2FydG9ncmFwaGljLCBtYXhIZWlnaHQsIHZlcnRleFRvcCk7CiAgICAgICAgICBnZXRQb3NpdGlvbihlbGxpcHNvaWQsIGNhcnRvZ3JhcGhpY3NbaSArIDFdLCBtaW5IZWlnaHQsIG5leHRCb3R0b20pOwogICAgICAgICAgY29tcHV0ZVZlcnRleE1pdGVyTm9ybWFsKAogICAgICAgICAgICBwcmV2aW91c0JvdHRvbSwKICAgICAgICAgICAgdmVydGV4Qm90dG9tLAogICAgICAgICAgICB2ZXJ0ZXhUb3AsCiAgICAgICAgICAgIG5leHRCb3R0b20sCiAgICAgICAgICAgIHZlcnRleE5vcm1hbAogICAgICAgICAgKTsKICAgICAgICAgIGluZGV4ID0gbm9ybWFsc0FycmF5Lmxlbmd0aDsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKHZlcnRleE5vcm1hbCwgbm9ybWFsc0FycmF5LCBpbmRleCk7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayh2ZXJ0ZXhCb3R0b20sIGJvdHRvbVBvc2l0aW9uc0FycmF5LCBpbmRleCk7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayh2ZXJ0ZXhUb3AsIHRvcFBvc2l0aW9uc0FycmF5LCBpbmRleCk7CiAgICAgICAgICBjYXJ0b2dyYXBoaWNzQXJyYXkucHVzaCh2ZXJ0ZXhDYXJ0b2dyYXBoaWMubGF0aXR1ZGUpOwogICAgICAgICAgY2FydG9ncmFwaGljc0FycmF5LnB1c2godmVydGV4Q2FydG9ncmFwaGljLmxvbmdpdHVkZSk7CiAgICAgICAgICBpbnRlcnBvbGF0ZVNlZ21lbnQoCiAgICAgICAgICAgIGNhcnRvZ3JhcGhpY3NbaV0sCiAgICAgICAgICAgIGNhcnRvZ3JhcGhpY3NbaSArIDFdLAogICAgICAgICAgICBtaW5IZWlnaHQsCiAgICAgICAgICAgIG1heEhlaWdodCwKICAgICAgICAgICAgZ3JhbnVsYXJpdHksCiAgICAgICAgICAgIGFyY1R5cGUsCiAgICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgICAgbm9ybWFsc0FycmF5LAogICAgICAgICAgICBib3R0b21Qb3NpdGlvbnNBcnJheSwKICAgICAgICAgICAgdG9wUG9zaXRpb25zQXJyYXksCiAgICAgICAgICAgIGNhcnRvZ3JhcGhpY3NBcnJheQogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgZW5kQ2FydG9ncmFwaGljID0gY2FydG9ncmFwaGljc1tjYXJ0b2dyYXBoaWNzTGVuZ3RoIC0gMV07CiAgICAgICAgY29uc3QgcHJlRW5kQ2FydG9ncmFwaGljID0gY2FydG9ncmFwaGljc1tjYXJ0b2dyYXBoaWNzTGVuZ3RoIC0gMl07CiAgICAgICAgdmVydGV4Qm90dG9tID0gZ2V0UG9zaXRpb24oCiAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICBlbmRDYXJ0b2dyYXBoaWMsCiAgICAgICAgICBtaW5IZWlnaHQsCiAgICAgICAgICB2ZXJ0ZXhCb3R0b20KICAgICAgICApOwogICAgICAgIHZlcnRleFRvcCA9IGdldFBvc2l0aW9uKGVsbGlwc29pZCwgZW5kQ2FydG9ncmFwaGljLCBtYXhIZWlnaHQsIHZlcnRleFRvcCk7CiAgICAgICAgaWYgKGxvb3ApIHsKICAgICAgICAgIGNvbnN0IHBvc3RFbmRDYXJ0b2dyYXBoaWMgPSBjYXJ0b2dyYXBoaWNzWzBdOwogICAgICAgICAgcHJldmlvdXNCb3R0b20gPSBnZXRQb3NpdGlvbigKICAgICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgICBwcmVFbmRDYXJ0b2dyYXBoaWMsCiAgICAgICAgICAgIG1pbkhlaWdodCwKICAgICAgICAgICAgcHJldmlvdXNCb3R0b20KICAgICAgICAgICk7CiAgICAgICAgICBuZXh0Qm90dG9tID0gZ2V0UG9zaXRpb24oCiAgICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgICAgcG9zdEVuZENhcnRvZ3JhcGhpYywKICAgICAgICAgICAgbWluSGVpZ2h0LAogICAgICAgICAgICBuZXh0Qm90dG9tCiAgICAgICAgICApOwogICAgICAgICAgdmVydGV4Tm9ybWFsID0gY29tcHV0ZVZlcnRleE1pdGVyTm9ybWFsKAogICAgICAgICAgICBwcmV2aW91c0JvdHRvbSwKICAgICAgICAgICAgdmVydGV4Qm90dG9tLAogICAgICAgICAgICB2ZXJ0ZXhUb3AsCiAgICAgICAgICAgIG5leHRCb3R0b20sCiAgICAgICAgICAgIHZlcnRleE5vcm1hbAogICAgICAgICAgKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdmVydGV4Tm9ybWFsID0gY29tcHV0ZVJpZ2h0Tm9ybWFsKAogICAgICAgICAgICBwcmVFbmRDYXJ0b2dyYXBoaWMsCiAgICAgICAgICAgIGVuZENhcnRvZ3JhcGhpYywKICAgICAgICAgICAgbWF4SGVpZ2h0LAogICAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICAgIHZlcnRleE5vcm1hbAogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgaW5kZXggPSBub3JtYWxzQXJyYXkubGVuZ3RoOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKHZlcnRleE5vcm1hbCwgbm9ybWFsc0FycmF5LCBpbmRleCk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2sodmVydGV4Qm90dG9tLCBib3R0b21Qb3NpdGlvbnNBcnJheSwgaW5kZXgpOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKHZlcnRleFRvcCwgdG9wUG9zaXRpb25zQXJyYXksIGluZGV4KTsKICAgICAgICBjYXJ0b2dyYXBoaWNzQXJyYXkucHVzaChlbmRDYXJ0b2dyYXBoaWMubGF0aXR1ZGUpOwogICAgICAgIGNhcnRvZ3JhcGhpY3NBcnJheS5wdXNoKGVuZENhcnRvZ3JhcGhpYy5sb25naXR1ZGUpOwogICAgICAgIGlmIChsb29wKSB7CiAgICAgICAgICBpbnRlcnBvbGF0ZVNlZ21lbnQoCiAgICAgICAgICAgIGVuZENhcnRvZ3JhcGhpYywKICAgICAgICAgICAgc3RhcnRDYXJ0b2dyYXBoaWMsCiAgICAgICAgICAgIG1pbkhlaWdodCwKICAgICAgICAgICAgbWF4SGVpZ2h0LAogICAgICAgICAgICBncmFudWxhcml0eSwKICAgICAgICAgICAgYXJjVHlwZSwKICAgICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgICBub3JtYWxzQXJyYXksCiAgICAgICAgICAgIGJvdHRvbVBvc2l0aW9uc0FycmF5LAogICAgICAgICAgICB0b3BQb3NpdGlvbnNBcnJheSwKICAgICAgICAgICAgY2FydG9ncmFwaGljc0FycmF5CiAgICAgICAgICApOwogICAgICAgICAgaW5kZXggPSBub3JtYWxzQXJyYXkubGVuZ3RoOwogICAgICAgICAgZm9yIChpID0gMDsgaSA8IDM7ICsraSkgewogICAgICAgICAgICBub3JtYWxzQXJyYXlbaW5kZXggKyBpXSA9IG5vcm1hbHNBcnJheVtpXTsKICAgICAgICAgICAgYm90dG9tUG9zaXRpb25zQXJyYXlbaW5kZXggKyBpXSA9IGJvdHRvbVBvc2l0aW9uc0FycmF5W2ldOwogICAgICAgICAgICB0b3BQb3NpdGlvbnNBcnJheVtpbmRleCArIGldID0gdG9wUG9zaXRpb25zQXJyYXlbaV07CiAgICAgICAgICB9CiAgICAgICAgICBjYXJ0b2dyYXBoaWNzQXJyYXkucHVzaChzdGFydENhcnRvZ3JhcGhpYy5sYXRpdHVkZSk7CiAgICAgICAgICBjYXJ0b2dyYXBoaWNzQXJyYXkucHVzaChzdGFydENhcnRvZ3JhcGhpYy5sb25naXR1ZGUpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZ2VuZXJhdGVHZW9tZXRyeUF0dHJpYnV0ZXMoCiAgICAgICAgICBsb29wLAogICAgICAgICAgcHJvamVjdGlvbiwKICAgICAgICAgIGJvdHRvbVBvc2l0aW9uc0FycmF5LAogICAgICAgICAgdG9wUG9zaXRpb25zQXJyYXksCiAgICAgICAgICBub3JtYWxzQXJyYXksCiAgICAgICAgICBjYXJ0b2dyYXBoaWNzQXJyYXksCiAgICAgICAgICBjb21wdXRlMmRBdHRyaWJ1dGVzCiAgICAgICAgKTsKICAgICAgfTsKICAgICAgbGluZURpcmVjdGlvblNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIG1hdHJpeDNTY3JhdGNoID0gbmV3IE1hdHJpeDNfZGVmYXVsdCgpOwogICAgICBxdWF0ZXJuaW9uU2NyYXRjaDMgPSBuZXcgUXVhdGVybmlvbl9kZWZhdWx0KCk7CiAgICAgIGVuZFBvc0NhcnRvZ3JhcGhpY1NjcmF0Y2ggPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgbm9ybWFsU3RhcnRwb2ludFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIG5vcm1hbEVuZHBvaW50U2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgYWRqdXN0SGVpZ2h0Tm9ybWFsU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgYWRqdXN0SGVpZ2h0T2Zmc2V0U2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgbnVkZ2VEaXJlY3Rpb25TY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzdGFydENhcnRvZ3JhcGhpY1NjcmF0Y2ggPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgZW5kQ2FydG9ncmFwaGljU2NyYXRjaCA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICBzZWdtZW50U3RhcnRUb3BTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzZWdtZW50RW5kVG9wU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2VnbWVudFN0YXJ0Qm90dG9tU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2VnbWVudEVuZEJvdHRvbVNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNlZ21lbnRTdGFydE5vcm1hbFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNlZ21lbnRFbmROb3JtYWxTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBnZXRIZWlnaHRDYXJ0b2dyYXBoaWNzID0gWwogICAgICAgIHN0YXJ0Q2FydG9ncmFwaGljU2NyYXRjaCwKICAgICAgICBlbmRDYXJ0b2dyYXBoaWNTY3JhdGNoCiAgICAgIF07CiAgICAgIGdldEhlaWdodFJlY3RhbmdsZVNjcmF0Y2ggPSBuZXcgUmVjdGFuZ2xlX2RlZmF1bHQoKTsKICAgICAgYWRqdXN0SGVpZ2h0U3RhcnRUb3BTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBhZGp1c3RIZWlnaHRFbmRUb3BTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBhZGp1c3RIZWlnaHRTdGFydEJvdHRvbVNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGFkanVzdEhlaWdodEVuZEJvdHRvbVNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNlZ21lbnRTdGFydDJEU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2VnbWVudEVuZDJEU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2VnbWVudFN0YXJ0Tm9ybWFsMkRTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzZWdtZW50RW5kTm9ybWFsMkRTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBvZmZzZXRTY3JhdGNoMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc3RhcnRVcFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGVuZFVwU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgcmlnaHRTY3JhdGNoMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc3RhcnRQbGFuZU5vcm1hbFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGVuZFBsYW5lTm9ybWFsU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgZW5jb2RlU2NyYXRjaCA9IG5ldyBFbmNvZGVkQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGVuY29kZVNjcmF0Y2gyRCA9IG5ldyBFbmNvZGVkQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGZvcndhcmRPZmZzZXQyRFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHJpZ2h0MkRTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBub3JtYWxOdWRnZVNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hCb3VuZGluZ1NwaGVyZXMgPSBbbmV3IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQoKSwgbmV3IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQoKV07CiAgICAgIFJFRkVSRU5DRV9JTkRJQ0VTID0gWwogICAgICAgIDAsCiAgICAgICAgMiwKICAgICAgICAxLAogICAgICAgIDAsCiAgICAgICAgMywKICAgICAgICAyLAogICAgICAgIC8vIHJpZ2h0CiAgICAgICAgMCwKICAgICAgICA3LAogICAgICAgIDMsCiAgICAgICAgMCwKICAgICAgICA0LAogICAgICAgIDcsCiAgICAgICAgLy8gc3RhcnQKICAgICAgICAwLAogICAgICAgIDUsCiAgICAgICAgNCwKICAgICAgICAwLAogICAgICAgIDEsCiAgICAgICAgNSwKICAgICAgICAvLyBib3R0b20KICAgICAgICA1LAogICAgICAgIDcsCiAgICAgICAgNCwKICAgICAgICA1LAogICAgICAgIDYsCiAgICAgICAgNywKICAgICAgICAvLyBsZWZ0CiAgICAgICAgNSwKICAgICAgICAyLAogICAgICAgIDYsCiAgICAgICAgNSwKICAgICAgICAxLAogICAgICAgIDIsCiAgICAgICAgLy8gZW5kCiAgICAgICAgMywKICAgICAgICA2LAogICAgICAgIDIsCiAgICAgICAgMywKICAgICAgICA3LAogICAgICAgIDYKICAgICAgICAvLyB0b3AKICAgICAgXTsKICAgICAgUkVGRVJFTkNFX0lORElDRVNfTEVOR1RIID0gUkVGRVJFTkNFX0lORElDRVMubGVuZ3RoOwogICAgICBHcm91bmRQb2x5bGluZUdlb21ldHJ5Ll9wcm9qZWN0Tm9ybWFsID0gcHJvamVjdE5vcm1hbDsKICAgICAgR3JvdW5kUG9seWxpbmVHZW9tZXRyeV9kZWZhdWx0ID0gR3JvdW5kUG9seWxpbmVHZW9tZXRyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZUdyb3VuZFBvbHlsaW5lR2VvbWV0cnkuanMKICB2YXIgY3JlYXRlR3JvdW5kUG9seWxpbmVHZW9tZXRyeV9leHBvcnRzID0ge307CiAgX19leHBvcnQoY3JlYXRlR3JvdW5kUG9seWxpbmVHZW9tZXRyeV9leHBvcnRzLCB7CiAgICBkZWZhdWx0OiAoKSA9PiBjcmVhdGVHcm91bmRQb2x5bGluZUdlb21ldHJ5X2RlZmF1bHQKICB9KTsKICBmdW5jdGlvbiBjcmVhdGVHcm91bmRQb2x5bGluZUdlb21ldHJ5KGdyb3VuZFBvbHlsaW5lR2VvbWV0cnksIG9mZnNldCkgewogICAgcmV0dXJuIEFwcHJveGltYXRlVGVycmFpbkhlaWdodHNfZGVmYXVsdC5pbml0aWFsaXplKCkudGhlbihmdW5jdGlvbigpIHsKICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChvZmZzZXQpKSB7CiAgICAgICAgZ3JvdW5kUG9seWxpbmVHZW9tZXRyeSA9IEdyb3VuZFBvbHlsaW5lR2VvbWV0cnlfZGVmYXVsdC51bnBhY2soCiAgICAgICAgICBncm91bmRQb2x5bGluZUdlb21ldHJ5LAogICAgICAgICAgb2Zmc2V0CiAgICAgICAgKTsKICAgICAgfQogICAgICByZXR1cm4gR3JvdW5kUG9seWxpbmVHZW9tZXRyeV9kZWZhdWx0LmNyZWF0ZUdlb21ldHJ5KGdyb3VuZFBvbHlsaW5lR2VvbWV0cnkpOwogICAgfSk7CiAgfQogIHZhciBjcmVhdGVHcm91bmRQb2x5bGluZUdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfY3JlYXRlR3JvdW5kUG9seWxpbmVHZW9tZXRyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlR3JvdW5kUG9seWxpbmVHZW9tZXRyeS5qcyIoKSB7CiAgICAgIGluaXRfQXBwcm94aW1hdGVUZXJyYWluSGVpZ2h0cygpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9Hcm91bmRQb2x5bGluZUdlb21ldHJ5KCk7CiAgICAgIGNyZWF0ZUdyb3VuZFBvbHlsaW5lR2VvbWV0cnlfZGVmYXVsdCA9IGNyZWF0ZUdyb3VuZFBvbHlsaW5lR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9QbGFuZUdlb21ldHJ5LmpzCiAgZnVuY3Rpb24gUGxhbmVHZW9tZXRyeShvcHRpb25zKSB7CiAgICBvcHRpb25zID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucywgZGVmYXVsdFZhbHVlX2RlZmF1bHQuRU1QVFlfT0JKRUNUKTsKICAgIGNvbnN0IHZlcnRleEZvcm1hdCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMudmVydGV4Rm9ybWF0LCBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5ERUZBVUxUKTsKICAgIHRoaXMuX3ZlcnRleEZvcm1hdCA9IHZlcnRleEZvcm1hdDsKICAgIHRoaXMuX3dvcmtlck5hbWUgPSAiY3JlYXRlUGxhbmVHZW9tZXRyeSI7CiAgfQogIHZhciBzY3JhdGNoVmVydGV4Rm9ybWF0OCwgc2NyYXRjaE9wdGlvbnMxNSwgbWluLCBtYXgsIFBsYW5lR2VvbWV0cnlfZGVmYXVsdDsKICB2YXIgaW5pdF9QbGFuZUdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9QbGFuZUdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9Cb3VuZGluZ1NwaGVyZSgpOwogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X0NvbXBvbmVudERhdGF0eXBlKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0dlb21ldHJ5KCk7CiAgICAgIGluaXRfR2VvbWV0cnlBdHRyaWJ1dGUoKTsKICAgICAgaW5pdF9HZW9tZXRyeUF0dHJpYnV0ZXMoKTsKICAgICAgaW5pdF9QcmltaXRpdmVUeXBlKCk7CiAgICAgIGluaXRfVmVydGV4Rm9ybWF0KCk7CiAgICAgIFBsYW5lR2VvbWV0cnkucGFja2VkTGVuZ3RoID0gVmVydGV4Rm9ybWF0X2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICBQbGFuZUdlb21ldHJ5LnBhY2sgPSBmdW5jdGlvbih2YWx1ZSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInZhbHVlIiwgdmFsdWUpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIFZlcnRleEZvcm1hdF9kZWZhdWx0LnBhY2sodmFsdWUuX3ZlcnRleEZvcm1hdCwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIHJldHVybiBhcnJheTsKICAgICAgfTsKICAgICAgc2NyYXRjaFZlcnRleEZvcm1hdDggPSBuZXcgVmVydGV4Rm9ybWF0X2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaE9wdGlvbnMxNSA9IHsKICAgICAgICB2ZXJ0ZXhGb3JtYXQ6IHNjcmF0Y2hWZXJ0ZXhGb3JtYXQ4CiAgICAgIH07CiAgICAgIFBsYW5lR2VvbWV0cnkudW5wYWNrID0gZnVuY3Rpb24oYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIGNvbnN0IHZlcnRleEZvcm1hdCA9IFZlcnRleEZvcm1hdF9kZWZhdWx0LnVucGFjaygKICAgICAgICAgIGFycmF5LAogICAgICAgICAgc3RhcnRpbmdJbmRleCwKICAgICAgICAgIHNjcmF0Y2hWZXJ0ZXhGb3JtYXQ4CiAgICAgICAgKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IFBsYW5lR2VvbWV0cnkoc2NyYXRjaE9wdGlvbnMxNSk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5fdmVydGV4Rm9ybWF0ID0gVmVydGV4Rm9ybWF0X2RlZmF1bHQuY2xvbmUodmVydGV4Rm9ybWF0LCByZXN1bHQuX3ZlcnRleEZvcm1hdCk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgbWluID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgtMC41LCAtMC41LCAwKTsKICAgICAgbWF4ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgwLjUsIDAuNSwgMCk7CiAgICAgIFBsYW5lR2VvbWV0cnkuY3JlYXRlR2VvbWV0cnkgPSBmdW5jdGlvbihwbGFuZUdlb21ldHJ5KSB7CiAgICAgICAgY29uc3QgdmVydGV4Rm9ybWF0ID0gcGxhbmVHZW9tZXRyeS5fdmVydGV4Rm9ybWF0OwogICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVzX2RlZmF1bHQoKTsKICAgICAgICBsZXQgaW5kaWNlczsKICAgICAgICBsZXQgcG9zaXRpb25zOwogICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQucG9zaXRpb24pIHsKICAgICAgICAgIHBvc2l0aW9ucyA9IG5ldyBGbG9hdDY0QXJyYXkoNCAqIDMpOwogICAgICAgICAgcG9zaXRpb25zWzBdID0gbWluLng7CiAgICAgICAgICBwb3NpdGlvbnNbMV0gPSBtaW4ueTsKICAgICAgICAgIHBvc2l0aW9uc1syXSA9IDA7CiAgICAgICAgICBwb3NpdGlvbnNbM10gPSBtYXgueDsKICAgICAgICAgIHBvc2l0aW9uc1s0XSA9IG1pbi55OwogICAgICAgICAgcG9zaXRpb25zWzVdID0gMDsKICAgICAgICAgIHBvc2l0aW9uc1s2XSA9IG1heC54OwogICAgICAgICAgcG9zaXRpb25zWzddID0gbWF4Lnk7CiAgICAgICAgICBwb3NpdGlvbnNbOF0gPSAwOwogICAgICAgICAgcG9zaXRpb25zWzldID0gbWluLng7CiAgICAgICAgICBwb3NpdGlvbnNbMTBdID0gbWF4Lnk7CiAgICAgICAgICBwb3NpdGlvbnNbMTFdID0gMDsKICAgICAgICAgIGF0dHJpYnV0ZXMucG9zaXRpb24gPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkRPVUJMRSwKICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICAgICAgdmFsdWVzOiBwb3NpdGlvbnMKICAgICAgICAgIH0pOwogICAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5ub3JtYWwpIHsKICAgICAgICAgICAgY29uc3Qgbm9ybWFscyA9IG5ldyBGbG9hdDMyQXJyYXkoNCAqIDMpOwogICAgICAgICAgICBub3JtYWxzWzBdID0gMDsKICAgICAgICAgICAgbm9ybWFsc1sxXSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbMl0gPSAxOwogICAgICAgICAgICBub3JtYWxzWzNdID0gMDsKICAgICAgICAgICAgbm9ybWFsc1s0XSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbNV0gPSAxOwogICAgICAgICAgICBub3JtYWxzWzZdID0gMDsKICAgICAgICAgICAgbm9ybWFsc1s3XSA9IDA7CiAgICAgICAgICAgIG5vcm1hbHNbOF0gPSAxOwogICAgICAgICAgICBub3JtYWxzWzldID0gMDsKICAgICAgICAgICAgbm9ybWFsc1sxMF0gPSAwOwogICAgICAgICAgICBub3JtYWxzWzExXSA9IDE7CiAgICAgICAgICAgIGF0dHJpYnV0ZXMubm9ybWFsID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkZMT0FULAogICAgICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgICAgICAgdmFsdWVzOiBub3JtYWxzCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5zdCkgewogICAgICAgICAgICBjb25zdCB0ZXhDb29yZHMgPSBuZXcgRmxvYXQzMkFycmF5KDQgKiAyKTsKICAgICAgICAgICAgdGV4Q29vcmRzWzBdID0gMDsKICAgICAgICAgICAgdGV4Q29vcmRzWzFdID0gMDsKICAgICAgICAgICAgdGV4Q29vcmRzWzJdID0gMTsKICAgICAgICAgICAgdGV4Q29vcmRzWzNdID0gMDsKICAgICAgICAgICAgdGV4Q29vcmRzWzRdID0gMTsKICAgICAgICAgICAgdGV4Q29vcmRzWzVdID0gMTsKICAgICAgICAgICAgdGV4Q29vcmRzWzZdID0gMDsKICAgICAgICAgICAgdGV4Q29vcmRzWzddID0gMTsKICAgICAgICAgICAgYXR0cmlidXRlcy5zdCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAyLAogICAgICAgICAgICAgIHZhbHVlczogdGV4Q29vcmRzCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHZlcnRleEZvcm1hdC50YW5nZW50KSB7CiAgICAgICAgICAgIGNvbnN0IHRhbmdlbnRzID0gbmV3IEZsb2F0MzJBcnJheSg0ICogMyk7CiAgICAgICAgICAgIHRhbmdlbnRzWzBdID0gMTsKICAgICAgICAgICAgdGFuZ2VudHNbMV0gPSAwOwogICAgICAgICAgICB0YW5nZW50c1syXSA9IDA7CiAgICAgICAgICAgIHRhbmdlbnRzWzNdID0gMTsKICAgICAgICAgICAgdGFuZ2VudHNbNF0gPSAwOwogICAgICAgICAgICB0YW5nZW50c1s1XSA9IDA7CiAgICAgICAgICAgIHRhbmdlbnRzWzZdID0gMTsKICAgICAgICAgICAgdGFuZ2VudHNbN10gPSAwOwogICAgICAgICAgICB0YW5nZW50c1s4XSA9IDA7CiAgICAgICAgICAgIHRhbmdlbnRzWzldID0gMTsKICAgICAgICAgICAgdGFuZ2VudHNbMTBdID0gMDsKICAgICAgICAgICAgdGFuZ2VudHNbMTFdID0gMDsKICAgICAgICAgICAgYXR0cmlidXRlcy50YW5nZW50ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkZMT0FULAogICAgICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgICAgICAgdmFsdWVzOiB0YW5nZW50cwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50KSB7CiAgICAgICAgICAgIGNvbnN0IGJpdGFuZ2VudHMgPSBuZXcgRmxvYXQzMkFycmF5KDQgKiAzKTsKICAgICAgICAgICAgYml0YW5nZW50c1swXSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbMV0gPSAxOwogICAgICAgICAgICBiaXRhbmdlbnRzWzJdID0gMDsKICAgICAgICAgICAgYml0YW5nZW50c1szXSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbNF0gPSAxOwogICAgICAgICAgICBiaXRhbmdlbnRzWzVdID0gMDsKICAgICAgICAgICAgYml0YW5nZW50c1s2XSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbN10gPSAxOwogICAgICAgICAgICBiaXRhbmdlbnRzWzhdID0gMDsKICAgICAgICAgICAgYml0YW5nZW50c1s5XSA9IDA7CiAgICAgICAgICAgIGJpdGFuZ2VudHNbMTBdID0gMTsKICAgICAgICAgICAgYml0YW5nZW50c1sxMV0gPSAwOwogICAgICAgICAgICBhdHRyaWJ1dGVzLmJpdGFuZ2VudCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgICAgICAgIHZhbHVlczogYml0YW5nZW50cwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICAgIGluZGljZXMgPSBuZXcgVWludDE2QXJyYXkoMiAqIDMpOwogICAgICAgICAgaW5kaWNlc1swXSA9IDA7CiAgICAgICAgICBpbmRpY2VzWzFdID0gMTsKICAgICAgICAgIGluZGljZXNbMl0gPSAyOwogICAgICAgICAgaW5kaWNlc1szXSA9IDA7CiAgICAgICAgICBpbmRpY2VzWzRdID0gMjsKICAgICAgICAgIGluZGljZXNbNV0gPSAzOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3IEdlb21ldHJ5X2RlZmF1bHQoewogICAgICAgICAgYXR0cmlidXRlcywKICAgICAgICAgIGluZGljZXMsCiAgICAgICAgICBwcmltaXRpdmVUeXBlOiBQcmltaXRpdmVUeXBlX2RlZmF1bHQuVFJJQU5HTEVTLAogICAgICAgICAgYm91bmRpbmdTcGhlcmU6IG5ldyBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0KENhcnRlc2lhbjNfZGVmYXVsdC5aRVJPLCBNYXRoLnNxcnQoMikpCiAgICAgICAgfSk7CiAgICAgIH07CiAgICAgIFBsYW5lR2VvbWV0cnlfZGVmYXVsdCA9IFBsYW5lR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVQbGFuZUdlb21ldHJ5LmpzCiAgdmFyIGNyZWF0ZVBsYW5lR2VvbWV0cnlfZXhwb3J0cyA9IHt9OwogIF9fZXhwb3J0KGNyZWF0ZVBsYW5lR2VvbWV0cnlfZXhwb3J0cywgewogICAgZGVmYXVsdDogKCkgPT4gY3JlYXRlUGxhbmVHZW9tZXRyeV9kZWZhdWx0CiAgfSk7CiAgZnVuY3Rpb24gY3JlYXRlUGxhbmVHZW9tZXRyeShwbGFuZUdlb21ldHJ5LCBvZmZzZXQpIHsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQob2Zmc2V0KSkgewogICAgICBwbGFuZUdlb21ldHJ5ID0gUGxhbmVHZW9tZXRyeV9kZWZhdWx0LnVucGFjayhwbGFuZUdlb21ldHJ5LCBvZmZzZXQpOwogICAgfQogICAgcmV0dXJuIFBsYW5lR2VvbWV0cnlfZGVmYXVsdC5jcmVhdGVHZW9tZXRyeShwbGFuZUdlb21ldHJ5KTsKICB9CiAgdmFyIGNyZWF0ZVBsYW5lR2VvbWV0cnlfZGVmYXVsdDsKICB2YXIgaW5pdF9jcmVhdGVQbGFuZUdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVQbGFuZUdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfUGxhbmVHZW9tZXRyeSgpOwogICAgICBjcmVhdGVQbGFuZUdlb21ldHJ5X2RlZmF1bHQgPSBjcmVhdGVQbGFuZUdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUGxhbmVPdXRsaW5lR2VvbWV0cnkuanMKICBmdW5jdGlvbiBQbGFuZU91dGxpbmVHZW9tZXRyeSgpIHsKICAgIHRoaXMuX3dvcmtlck5hbWUgPSAiY3JlYXRlUGxhbmVPdXRsaW5lR2VvbWV0cnkiOwogIH0KICB2YXIgbWluMiwgbWF4MiwgUGxhbmVPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdDsKICB2YXIgaW5pdF9QbGFuZU91dGxpbmVHZW9tZXRyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUGxhbmVPdXRsaW5lR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X0JvdW5kaW5nU3BoZXJlKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfQ29tcG9uZW50RGF0YXR5cGUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfR2VvbWV0cnkoKTsKICAgICAgaW5pdF9HZW9tZXRyeUF0dHJpYnV0ZSgpOwogICAgICBpbml0X0dlb21ldHJ5QXR0cmlidXRlcygpOwogICAgICBpbml0X1ByaW1pdGl2ZVR5cGUoKTsKICAgICAgUGxhbmVPdXRsaW5lR2VvbWV0cnkucGFja2VkTGVuZ3RoID0gMDsKICAgICAgUGxhbmVPdXRsaW5lR2VvbWV0cnkucGFjayA9IGZ1bmN0aW9uKHZhbHVlLCBhcnJheSkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgidmFsdWUiLCB2YWx1ZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICByZXR1cm4gYXJyYXk7CiAgICAgIH07CiAgICAgIFBsYW5lT3V0bGluZUdlb21ldHJ5LnVucGFjayA9IGZ1bmN0aW9uKGFycmF5LCBzdGFydGluZ0luZGV4LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgUGxhbmVPdXRsaW5lR2VvbWV0cnkoKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgbWluMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoLTAuNSwgLTAuNSwgMCk7CiAgICAgIG1heDIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KDAuNSwgMC41LCAwKTsKICAgICAgUGxhbmVPdXRsaW5lR2VvbWV0cnkuY3JlYXRlR2VvbWV0cnkgPSBmdW5jdGlvbigpIHsKICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlc19kZWZhdWx0KCk7CiAgICAgICAgY29uc3QgaW5kaWNlcyA9IG5ldyBVaW50MTZBcnJheSg0ICogMik7CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gbmV3IEZsb2F0NjRBcnJheSg0ICogMyk7CiAgICAgICAgcG9zaXRpb25zWzBdID0gbWluMi54OwogICAgICAgIHBvc2l0aW9uc1sxXSA9IG1pbjIueTsKICAgICAgICBwb3NpdGlvbnNbMl0gPSBtaW4yLno7CiAgICAgICAgcG9zaXRpb25zWzNdID0gbWF4Mi54OwogICAgICAgIHBvc2l0aW9uc1s0XSA9IG1pbjIueTsKICAgICAgICBwb3NpdGlvbnNbNV0gPSBtaW4yLno7CiAgICAgICAgcG9zaXRpb25zWzZdID0gbWF4Mi54OwogICAgICAgIHBvc2l0aW9uc1s3XSA9IG1heDIueTsKICAgICAgICBwb3NpdGlvbnNbOF0gPSBtaW4yLno7CiAgICAgICAgcG9zaXRpb25zWzldID0gbWluMi54OwogICAgICAgIHBvc2l0aW9uc1sxMF0gPSBtYXgyLnk7CiAgICAgICAgcG9zaXRpb25zWzExXSA9IG1pbjIuejsKICAgICAgICBhdHRyaWJ1dGVzLnBvc2l0aW9uID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRE9VQkxFLAogICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICAgIHZhbHVlczogcG9zaXRpb25zCiAgICAgICAgfSk7CiAgICAgICAgaW5kaWNlc1swXSA9IDA7CiAgICAgICAgaW5kaWNlc1sxXSA9IDE7CiAgICAgICAgaW5kaWNlc1syXSA9IDE7CiAgICAgICAgaW5kaWNlc1szXSA9IDI7CiAgICAgICAgaW5kaWNlc1s0XSA9IDI7CiAgICAgICAgaW5kaWNlc1s1XSA9IDM7CiAgICAgICAgaW5kaWNlc1s2XSA9IDM7CiAgICAgICAgaW5kaWNlc1s3XSA9IDA7CiAgICAgICAgcmV0dXJuIG5ldyBHZW9tZXRyeV9kZWZhdWx0KHsKICAgICAgICAgIGF0dHJpYnV0ZXMsCiAgICAgICAgICBpbmRpY2VzLAogICAgICAgICAgcHJpbWl0aXZlVHlwZTogUHJpbWl0aXZlVHlwZV9kZWZhdWx0LkxJTkVTLAogICAgICAgICAgYm91bmRpbmdTcGhlcmU6IG5ldyBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0KENhcnRlc2lhbjNfZGVmYXVsdC5aRVJPLCBNYXRoLnNxcnQoMikpCiAgICAgICAgfSk7CiAgICAgIH07CiAgICAgIFBsYW5lT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQgPSBQbGFuZU91dGxpbmVHZW9tZXRyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZVBsYW5lT3V0bGluZUdlb21ldHJ5LmpzCiAgdmFyIGNyZWF0ZVBsYW5lT3V0bGluZUdlb21ldHJ5X2V4cG9ydHMgPSB7fTsKICBfX2V4cG9ydChjcmVhdGVQbGFuZU91dGxpbmVHZW9tZXRyeV9leHBvcnRzLCB7CiAgICBkZWZhdWx0OiAoKSA9PiBjcmVhdGVQbGFuZU91dGxpbmVHZW9tZXRyeV9kZWZhdWx0CiAgfSk7CiAgZnVuY3Rpb24gY3JlYXRlUGxhbmVPdXRsaW5lR2VvbWV0cnkocGxhbmVHZW9tZXRyeSwgb2Zmc2V0KSB7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG9mZnNldCkpIHsKICAgICAgcGxhbmVHZW9tZXRyeSA9IFBsYW5lT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQudW5wYWNrKHBsYW5lR2VvbWV0cnksIG9mZnNldCk7CiAgICB9CiAgICByZXR1cm4gUGxhbmVPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdC5jcmVhdGVHZW9tZXRyeShwbGFuZUdlb21ldHJ5KTsKICB9CiAgdmFyIGNyZWF0ZVBsYW5lT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfY3JlYXRlUGxhbmVPdXRsaW5lR2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZVBsYW5lT3V0bGluZUdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfUGxhbmVPdXRsaW5lR2VvbWV0cnkoKTsKICAgICAgY3JlYXRlUGxhbmVPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdCA9IGNyZWF0ZVBsYW5lT3V0bGluZUdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvU3RlcmVvZ3JhcGhpYy5qcwogIGZ1bmN0aW9uIFN0ZXJlb2dyYXBoaWMocG9zaXRpb24sIHRhbmdlbnRQbGFuZSkgewogICAgdGhpcy5wb3NpdGlvbiA9IHBvc2l0aW9uOwogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQodGhpcy5wb3NpdGlvbikpIHsKICAgICAgdGhpcy5wb3NpdGlvbiA9IG5ldyBDYXJ0ZXNpYW4yX2RlZmF1bHQoKTsKICAgIH0KICAgIHRoaXMudGFuZ2VudFBsYW5lID0gdGFuZ2VudFBsYW5lOwogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQodGhpcy50YW5nZW50UGxhbmUpKSB7CiAgICAgIHRoaXMudGFuZ2VudFBsYW5lID0gU3RlcmVvZ3JhcGhpYy5OT1JUSF9QT0xFX1RBTkdFTlRfUExBTkU7CiAgICB9CiAgfQogIHZhciBzY3JhdGNoQ2FydG9ncmFwaGljNSwgc2NyYXRjaENhcnRlc2lhbjEwLCBzY3JhdGNoUHJvamVjdFBvaW50T250b1BsYW5lUmF5Miwgc2NyYXRjaFByb2plY3RQb2ludE9udG9QbGFuZVJheURpcmVjdGlvbiwgc2NyYXRjaFByb2plY3RQb2ludE9udG9QbGFuZUNhcnRlc2lhbjMyLCBTdGVyZW9ncmFwaGljX2RlZmF1bHQ7CiAgdmFyIGluaXRfU3RlcmVvZ3JhcGhpYyA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvU3RlcmVvZ3JhcGhpYy5qcyIoKSB7CiAgICAgIGluaXRfQ2FydGVzaWFuMigpOwogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DYXJ0b2dyYXBoaWMoKTsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9FbGxpcHNvaWRUYW5nZW50UGxhbmUoKTsKICAgICAgaW5pdF9JbnRlcnNlY3Rpb25UZXN0cygpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgaW5pdF9SYXkoKTsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoU3RlcmVvZ3JhcGhpYy5wcm90b3R5cGUsIHsKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIHRoZSBlbGxpcHNvaWQuCiAgICAgICAgICogQG1lbWJlcm9mIFN0ZXJlb2dyYXBoaWMucHJvdG90eXBlCiAgICAgICAgICogQHR5cGUge0VsbGlwc29pZH0KICAgICAgICAgKi8KICAgICAgICBlbGxpcHNvaWQ6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLnRhbmdlbnRQbGFuZS5lbGxpcHNvaWQ7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIHRoZSB4IGNvb3JkaW5hdGUKICAgICAgICAgKiBAbWVtYmVyb2YgU3RlcmVvZ3JhcGhpYy5wcm90b3R5cGUKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqLwogICAgICAgIHg6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLnBvc2l0aW9uLng7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIHRoZSB5IGNvb3JkaW5hdGUKICAgICAgICAgKiBAbWVtYmVyb2YgU3RlcmVvZ3JhcGhpYy5wcm90b3R5cGUKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqLwogICAgICAgIHk6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLnBvc2l0aW9uLnk7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBDb21wdXRlcyB0aGUgY29uZm9ybWFsIGxhdGl0dWRlLCBvciB0aGUgZWxsaXBzb2lkYWwgbGF0aXR1ZGUgcHJvamVjdGVkIG9udG8gYW4gYXJiaXRyYXJ5IHNwaGVyZS4KICAgICAgICAgKiBAbWVtYmVyb2YgU3RlcmVvZ3JhcGhpYy5wcm90b3R5cGUKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqLwogICAgICAgIGNvbmZvcm1hbExhdGl0dWRlOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBjb25zdCByID0gQ2FydGVzaWFuMl9kZWZhdWx0Lm1hZ25pdHVkZSh0aGlzLnBvc2l0aW9uKTsKICAgICAgICAgICAgY29uc3QgZCA9IDIgKiB0aGlzLmVsbGlwc29pZC5tYXhpbXVtUmFkaXVzOwogICAgICAgICAgICBjb25zdCBzaWduMiA9IHRoaXMudGFuZ2VudFBsYW5lLnBsYW5lLm5vcm1hbC56OwogICAgICAgICAgICByZXR1cm4gc2lnbjIgKiAoTWF0aF9kZWZhdWx0LlBJX09WRVJfVFdPIC0gMiAqIE1hdGguYXRhbjIociwgZCkpOwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgLyoqCiAgICAgICAgICogQ29tcHV0ZXMgdGhlIGxvbmdpdHVkZQogICAgICAgICAqIEBtZW1iZXJvZiBTdGVyZW9ncmFwaGljLnByb3RvdHlwZQogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICovCiAgICAgICAgbG9uZ2l0dWRlOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBsZXQgbG9uZ2l0dWRlID0gTWF0aF9kZWZhdWx0LlBJX09WRVJfVFdPICsgTWF0aC5hdGFuMih0aGlzLnksIHRoaXMueCk7CiAgICAgICAgICAgIGlmIChsb25naXR1ZGUgPiBNYXRoLlBJKSB7CiAgICAgICAgICAgICAgbG9uZ2l0dWRlIC09IE1hdGhfZGVmYXVsdC5UV09fUEk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGxvbmdpdHVkZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgICBzY3JhdGNoQ2FydG9ncmFwaGljNSA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQ2FydGVzaWFuMTAgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIFN0ZXJlb2dyYXBoaWMucHJvdG90eXBlLmdldExhdGl0dWRlID0gZnVuY3Rpb24oZWxsaXBzb2lkKSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoZWxsaXBzb2lkKSkgewogICAgICAgICAgZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuZGVmYXVsdDsKICAgICAgICB9CiAgICAgICAgc2NyYXRjaENhcnRvZ3JhcGhpYzUubGF0aXR1ZGUgPSB0aGlzLmNvbmZvcm1hbExhdGl0dWRlOwogICAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWM1LmxvbmdpdHVkZSA9IHRoaXMubG9uZ2l0dWRlOwogICAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWM1LmhlaWdodCA9IDA7CiAgICAgICAgY29uc3QgY2FydGVzaWFuMTEgPSB0aGlzLmVsbGlwc29pZC5jYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbigKICAgICAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWM1LAogICAgICAgICAgc2NyYXRjaENhcnRlc2lhbjEwCiAgICAgICAgKTsKICAgICAgICBlbGxpcHNvaWQuY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWMoY2FydGVzaWFuMTEsIHNjcmF0Y2hDYXJ0b2dyYXBoaWM1KTsKICAgICAgICByZXR1cm4gc2NyYXRjaENhcnRvZ3JhcGhpYzUubGF0aXR1ZGU7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hQcm9qZWN0UG9pbnRPbnRvUGxhbmVSYXkyID0gbmV3IFJheV9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hQcm9qZWN0UG9pbnRPbnRvUGxhbmVSYXlEaXJlY3Rpb24gPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hQcm9qZWN0UG9pbnRPbnRvUGxhbmVDYXJ0ZXNpYW4zMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgU3RlcmVvZ3JhcGhpYy5mcm9tQ2FydGVzaWFuID0gZnVuY3Rpb24oY2FydGVzaWFuMTEsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiY2FydGVzaWFuIiwgY2FydGVzaWFuMTEpOwogICAgICAgIGNvbnN0IHNpZ24yID0gTWF0aF9kZWZhdWx0LnNpZ25Ob3RaZXJvKGNhcnRlc2lhbjExLnopOwogICAgICAgIGxldCB0YW5nZW50UGxhbmUgPSBTdGVyZW9ncmFwaGljLk5PUlRIX1BPTEVfVEFOR0VOVF9QTEFORTsKICAgICAgICBsZXQgb3JpZ2luID0gU3RlcmVvZ3JhcGhpYy5TT1VUSF9QT0xFOwogICAgICAgIGlmIChzaWduMiA8IDApIHsKICAgICAgICAgIHRhbmdlbnRQbGFuZSA9IFN0ZXJlb2dyYXBoaWMuU09VVEhfUE9MRV9UQU5HRU5UX1BMQU5FOwogICAgICAgICAgb3JpZ2luID0gU3RlcmVvZ3JhcGhpYy5OT1JUSF9QT0xFOwogICAgICAgIH0KICAgICAgICBjb25zdCByYXkgPSBzY3JhdGNoUHJvamVjdFBvaW50T250b1BsYW5lUmF5MjsKICAgICAgICByYXkub3JpZ2luID0gdGFuZ2VudFBsYW5lLmVsbGlwc29pZC5zY2FsZVRvR2VvY2VudHJpY1N1cmZhY2UoCiAgICAgICAgICBjYXJ0ZXNpYW4xMSwKICAgICAgICAgIHJheS5vcmlnaW4KICAgICAgICApOwogICAgICAgIHJheS5kaXJlY3Rpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoCiAgICAgICAgICByYXkub3JpZ2luLAogICAgICAgICAgb3JpZ2luLAogICAgICAgICAgc2NyYXRjaFByb2plY3RQb2ludE9udG9QbGFuZVJheURpcmVjdGlvbgogICAgICAgICk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShyYXkuZGlyZWN0aW9uLCByYXkuZGlyZWN0aW9uKTsKICAgICAgICBjb25zdCBpbnRlcnNlY3Rpb25Qb2ludCA9IEludGVyc2VjdGlvblRlc3RzX2RlZmF1bHQucmF5UGxhbmUoCiAgICAgICAgICByYXksCiAgICAgICAgICB0YW5nZW50UGxhbmUucGxhbmUsCiAgICAgICAgICBzY3JhdGNoUHJvamVjdFBvaW50T250b1BsYW5lQ2FydGVzaWFuMzIKICAgICAgICApOwogICAgICAgIGNvbnN0IHYzID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KGludGVyc2VjdGlvblBvaW50LCBvcmlnaW4sIGludGVyc2VjdGlvblBvaW50KTsKICAgICAgICBjb25zdCB4ID0gQ2FydGVzaWFuM19kZWZhdWx0LmRvdCh0YW5nZW50UGxhbmUueEF4aXMsIHYzKTsKICAgICAgICBjb25zdCB5ID0gc2lnbjIgKiBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KHRhbmdlbnRQbGFuZS55QXhpcywgdjMpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBuZXcgU3RlcmVvZ3JhcGhpYyhuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KHgsIHkpLCB0YW5nZW50UGxhbmUpOwogICAgICAgIH0KICAgICAgICByZXN1bHQucG9zaXRpb24gPSBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KHgsIHkpOwogICAgICAgIHJlc3VsdC50YW5nZW50UGxhbmUgPSB0YW5nZW50UGxhbmU7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgU3RlcmVvZ3JhcGhpYy5mcm9tQ2FydGVzaWFuQXJyYXkgPSBmdW5jdGlvbihjYXJ0ZXNpYW5zLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImNhcnRlc2lhbnMiLCBjYXJ0ZXNpYW5zKTsKICAgICAgICBjb25zdCBsZW5ndGggPSBjYXJ0ZXNpYW5zLmxlbmd0aDsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQXJyYXkobGVuZ3RoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVzdWx0Lmxlbmd0aCA9IGxlbmd0aDsKICAgICAgICB9CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgICAgcmVzdWx0W2ldID0gU3RlcmVvZ3JhcGhpYy5mcm9tQ2FydGVzaWFuKGNhcnRlc2lhbnNbaV0sIHJlc3VsdFtpXSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFN0ZXJlb2dyYXBoaWMuY2xvbmUgPSBmdW5jdGlvbihzdGVyZW9ncmFwaGljLCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChzdGVyZW9ncmFwaGljKSkgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBTdGVyZW9ncmFwaGljKAogICAgICAgICAgICBzdGVyZW9ncmFwaGljLnBvc2l0aW9uLAogICAgICAgICAgICBzdGVyZW9ncmFwaGljLnRhbmdlbnRQbGFuZQogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LnBvc2l0aW9uID0gc3RlcmVvZ3JhcGhpYy5wb3NpdGlvbjsKICAgICAgICByZXN1bHQudGFuZ2VudFBsYW5lID0gc3RlcmVvZ3JhcGhpYy50YW5nZW50UGxhbmU7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgU3RlcmVvZ3JhcGhpYy5IQUxGX1VOSVRfU1BIRVJFID0gT2JqZWN0LmZyZWV6ZShuZXcgRWxsaXBzb2lkX2RlZmF1bHQoMC41LCAwLjUsIDAuNSkpOwogICAgICBTdGVyZW9ncmFwaGljLk5PUlRIX1BPTEUgPSBPYmplY3QuZnJlZXplKG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoMCwgMCwgMC41KSk7CiAgICAgIFN0ZXJlb2dyYXBoaWMuU09VVEhfUE9MRSA9IE9iamVjdC5mcmVlemUobmV3IENhcnRlc2lhbjNfZGVmYXVsdCgwLCAwLCAtMC41KSk7CiAgICAgIFN0ZXJlb2dyYXBoaWMuTk9SVEhfUE9MRV9UQU5HRU5UX1BMQU5FID0gT2JqZWN0LmZyZWV6ZSgKICAgICAgICBuZXcgRWxsaXBzb2lkVGFuZ2VudFBsYW5lX2RlZmF1bHQoCiAgICAgICAgICBTdGVyZW9ncmFwaGljLk5PUlRIX1BPTEUsCiAgICAgICAgICBTdGVyZW9ncmFwaGljLkhBTEZfVU5JVF9TUEhFUkUKICAgICAgICApCiAgICAgICk7CiAgICAgIFN0ZXJlb2dyYXBoaWMuU09VVEhfUE9MRV9UQU5HRU5UX1BMQU5FID0gT2JqZWN0LmZyZWV6ZSgKICAgICAgICBuZXcgRWxsaXBzb2lkVGFuZ2VudFBsYW5lX2RlZmF1bHQoCiAgICAgICAgICBTdGVyZW9ncmFwaGljLlNPVVRIX1BPTEUsCiAgICAgICAgICBTdGVyZW9ncmFwaGljLkhBTEZfVU5JVF9TUEhFUkUKICAgICAgICApCiAgICAgICk7CiAgICAgIFN0ZXJlb2dyYXBoaWNfZGVmYXVsdCA9IFN0ZXJlb2dyYXBoaWM7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9Qb2x5Z29uR2VvbWV0cnkuanMKICBmdW5jdGlvbiBhZGp1c3RQb3NIZWlnaHRzRm9yTm9ybWFsKHBvc2l0aW9uLCBwMSwgcDIsIGVsbGlwc29pZCkgewogICAgY29uc3QgY2FydG8xMiA9IGVsbGlwc29pZC5jYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpYyhwb3NpdGlvbiwgc2NyYXRjaENhcnRvMSk7CiAgICBjb25zdCBoZWlnaHQgPSBjYXJ0bzEyLmhlaWdodDsKICAgIGNvbnN0IHAxQ2FydG8gPSBlbGxpcHNvaWQuY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWMocDEsIHNjcmF0Y2hDYXJ0bzIpOwogICAgcDFDYXJ0by5oZWlnaHQgPSBoZWlnaHQ7CiAgICBlbGxpcHNvaWQuY2FydG9ncmFwaGljVG9DYXJ0ZXNpYW4ocDFDYXJ0bywgcDEpOwogICAgY29uc3QgcDJDYXJ0byA9IGVsbGlwc29pZC5jYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpYyhwMiwgc2NyYXRjaENhcnRvMik7CiAgICBwMkNhcnRvLmhlaWdodCA9IGhlaWdodCAtIDEwMDsKICAgIGVsbGlwc29pZC5jYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbihwMkNhcnRvLCBwMik7CiAgfQogIGZ1bmN0aW9uIGNvbXB1dGVBdHRyaWJ1dGVzKG9wdGlvbnMpIHsKICAgIGNvbnN0IHZlcnRleEZvcm1hdCA9IG9wdGlvbnMudmVydGV4Rm9ybWF0OwogICAgY29uc3QgZ2VvbWV0cnkgPSBvcHRpb25zLmdlb21ldHJ5OwogICAgY29uc3Qgc2hhZG93Vm9sdW1lID0gb3B0aW9ucy5zaGFkb3dWb2x1bWU7CiAgICBjb25zdCBmbGF0UG9zaXRpb25zID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXM7CiAgICBjb25zdCBmbGF0VGV4Y29vcmRzID0gZGVmaW5lZF9kZWZhdWx0KGdlb21ldHJ5LmF0dHJpYnV0ZXMuc3QpID8gZ2VvbWV0cnkuYXR0cmlidXRlcy5zdC52YWx1ZXMgOiB2b2lkIDA7CiAgICBsZXQgbGVuZ3RoID0gZmxhdFBvc2l0aW9ucy5sZW5ndGg7CiAgICBjb25zdCB3YWxsID0gb3B0aW9ucy53YWxsOwogICAgY29uc3QgdG9wID0gb3B0aW9ucy50b3AgfHwgd2FsbDsKICAgIGNvbnN0IGJvdHRvbSA9IG9wdGlvbnMuYm90dG9tIHx8IHdhbGw7CiAgICBpZiAodmVydGV4Rm9ybWF0LnN0IHx8IHZlcnRleEZvcm1hdC5ub3JtYWwgfHwgdmVydGV4Rm9ybWF0LnRhbmdlbnQgfHwgdmVydGV4Rm9ybWF0LmJpdGFuZ2VudCB8fCBzaGFkb3dWb2x1bWUpIHsKICAgICAgY29uc3QgYm91bmRpbmdSZWN0YW5nbGUgPSBvcHRpb25zLmJvdW5kaW5nUmVjdGFuZ2xlOwogICAgICBjb25zdCByb3RhdGlvbkF4aXMgPSBvcHRpb25zLnJvdGF0aW9uQXhpczsKICAgICAgY29uc3QgcHJvamVjdFRvMmQgPSBvcHRpb25zLnByb2plY3RUbzJkOwogICAgICBjb25zdCBlbGxpcHNvaWQgPSBvcHRpb25zLmVsbGlwc29pZDsKICAgICAgY29uc3Qgc3RSb3RhdGlvbiA9IG9wdGlvbnMuc3RSb3RhdGlvbjsKICAgICAgY29uc3QgcGVyUG9zaXRpb25IZWlnaHQgPSBvcHRpb25zLnBlclBvc2l0aW9uSGVpZ2h0OwogICAgICBjb25zdCBvcmlnaW4gPSBhcHBlbmRUZXh0dXJlQ29vcmRpbmF0ZXNPcmlnaW47CiAgICAgIG9yaWdpbi54ID0gYm91bmRpbmdSZWN0YW5nbGUueDsKICAgICAgb3JpZ2luLnkgPSBib3VuZGluZ1JlY3RhbmdsZS55OwogICAgICBjb25zdCB0ZXh0dXJlQ29vcmRpbmF0ZXMgPSB2ZXJ0ZXhGb3JtYXQuc3QgPyBuZXcgRmxvYXQzMkFycmF5KDIgKiAobGVuZ3RoIC8gMykpIDogdm9pZCAwOwogICAgICBsZXQgbm9ybWFsczsKICAgICAgaWYgKHZlcnRleEZvcm1hdC5ub3JtYWwpIHsKICAgICAgICBpZiAocGVyUG9zaXRpb25IZWlnaHQgJiYgdG9wICYmICF3YWxsKSB7CiAgICAgICAgICBub3JtYWxzID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5ub3JtYWwudmFsdWVzOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBub3JtYWxzID0gbmV3IEZsb2F0MzJBcnJheShsZW5ndGgpOwogICAgICAgIH0KICAgICAgfQogICAgICBjb25zdCB0YW5nZW50cyA9IHZlcnRleEZvcm1hdC50YW5nZW50ID8gbmV3IEZsb2F0MzJBcnJheShsZW5ndGgpIDogdm9pZCAwOwogICAgICBjb25zdCBiaXRhbmdlbnRzID0gdmVydGV4Rm9ybWF0LmJpdGFuZ2VudCA/IG5ldyBGbG9hdDMyQXJyYXkobGVuZ3RoKSA6IHZvaWQgMDsKICAgICAgY29uc3QgZXh0cnVkZU5vcm1hbHMgPSBzaGFkb3dWb2x1bWUgPyBuZXcgRmxvYXQzMkFycmF5KGxlbmd0aCkgOiB2b2lkIDA7CiAgICAgIGxldCB0ZXh0dXJlQ29vcmRJbmRleCA9IDA7CiAgICAgIGxldCBhdHRySW5kZXggPSAwOwogICAgICBsZXQgbm9ybWFsMiA9IHNjcmF0Y2hOb3JtYWw2OwogICAgICBsZXQgdGFuZ2VudCA9IHNjcmF0Y2hUYW5nZW50NDsKICAgICAgbGV0IGJpdGFuZ2VudCA9IHNjcmF0Y2hCaXRhbmdlbnQ0OwogICAgICBsZXQgcmVjb21wdXRlTm9ybWFsID0gdHJ1ZTsKICAgICAgbGV0IHRleHR1cmVNYXRyaXggPSBhcHBlbmRUZXh0dXJlQ29vcmRpbmF0ZXNNYXRyaXgzOwogICAgICBsZXQgdGFuZ2VudFJvdGF0aW9uTWF0cml4ID0gdGFuZ2VudE1hdHJpeFNjcmF0Y2gyOwogICAgICBpZiAoc3RSb3RhdGlvbiAhPT0gMCkgewogICAgICAgIGxldCByb3RhdGlvbiA9IFF1YXRlcm5pb25fZGVmYXVsdC5mcm9tQXhpc0FuZ2xlKAogICAgICAgICAgcm90YXRpb25BeGlzLAogICAgICAgICAgc3RSb3RhdGlvbiwKICAgICAgICAgIGFwcGVuZFRleHR1cmVDb29yZGluYXRlc1F1YXRlcm5pb24KICAgICAgICApOwogICAgICAgIHRleHR1cmVNYXRyaXggPSBNYXRyaXgzX2RlZmF1bHQuZnJvbVF1YXRlcm5pb24ocm90YXRpb24sIHRleHR1cmVNYXRyaXgpOwogICAgICAgIHJvdGF0aW9uID0gUXVhdGVybmlvbl9kZWZhdWx0LmZyb21BeGlzQW5nbGUoCiAgICAgICAgICByb3RhdGlvbkF4aXMsCiAgICAgICAgICAtc3RSb3RhdGlvbiwKICAgICAgICAgIGFwcGVuZFRleHR1cmVDb29yZGluYXRlc1F1YXRlcm5pb24KICAgICAgICApOwogICAgICAgIHRhbmdlbnRSb3RhdGlvbk1hdHJpeCA9IE1hdHJpeDNfZGVmYXVsdC5mcm9tUXVhdGVybmlvbigKICAgICAgICAgIHJvdGF0aW9uLAogICAgICAgICAgdGFuZ2VudFJvdGF0aW9uTWF0cml4CiAgICAgICAgKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0ZXh0dXJlTWF0cml4ID0gTWF0cml4M19kZWZhdWx0LmNsb25lKE1hdHJpeDNfZGVmYXVsdC5JREVOVElUWSwgdGV4dHVyZU1hdHJpeCk7CiAgICAgICAgdGFuZ2VudFJvdGF0aW9uTWF0cml4ID0gTWF0cml4M19kZWZhdWx0LmNsb25lKAogICAgICAgICAgTWF0cml4M19kZWZhdWx0LklERU5USVRZLAogICAgICAgICAgdGFuZ2VudFJvdGF0aW9uTWF0cml4CiAgICAgICAgKTsKICAgICAgfQogICAgICBsZXQgYm90dG9tT2Zmc2V0ID0gMDsKICAgICAgbGV0IGJvdHRvbU9mZnNldDIgPSAwOwogICAgICBpZiAodG9wICYmIGJvdHRvbSkgewogICAgICAgIGJvdHRvbU9mZnNldCA9IGxlbmd0aCAvIDI7CiAgICAgICAgYm90dG9tT2Zmc2V0MiA9IGxlbmd0aCAvIDM7CiAgICAgICAgbGVuZ3RoIC89IDI7CiAgICAgIH0KICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMykgewogICAgICAgIGNvbnN0IHBvc2l0aW9uID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheSgKICAgICAgICAgIGZsYXRQb3NpdGlvbnMsCiAgICAgICAgICBpLAogICAgICAgICAgYXBwZW5kVGV4dHVyZUNvb3JkaW5hdGVzQ2FydGVzaWFuMwogICAgICAgICk7CiAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5zdCkgewogICAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoZmxhdFRleGNvb3JkcykpIHsKICAgICAgICAgICAgbGV0IHAgPSBNYXRyaXgzX2RlZmF1bHQubXVsdGlwbHlCeVZlY3RvcigKICAgICAgICAgICAgICB0ZXh0dXJlTWF0cml4LAogICAgICAgICAgICAgIHBvc2l0aW9uLAogICAgICAgICAgICAgIHNjcmF0Y2hQb3NpdGlvbjMKICAgICAgICAgICAgKTsKICAgICAgICAgICAgcCA9IGVsbGlwc29pZC5zY2FsZVRvR2VvZGV0aWNTdXJmYWNlKHAsIHApOwogICAgICAgICAgICBjb25zdCBzdCA9IHByb2plY3RUbzJkKFtwXSwgYXBwZW5kVGV4dHVyZUNvb3JkaW5hdGVzQ2FydGVzaWFuMilbMF07CiAgICAgICAgICAgIENhcnRlc2lhbjJfZGVmYXVsdC5zdWJ0cmFjdChzdCwgb3JpZ2luLCBzdCk7CiAgICAgICAgICAgIGNvbnN0IHN0eCA9IE1hdGhfZGVmYXVsdC5jbGFtcChzdC54IC8gYm91bmRpbmdSZWN0YW5nbGUud2lkdGgsIDAsIDEpOwogICAgICAgICAgICBjb25zdCBzdHkgPSBNYXRoX2RlZmF1bHQuY2xhbXAoc3QueSAvIGJvdW5kaW5nUmVjdGFuZ2xlLmhlaWdodCwgMCwgMSk7CiAgICAgICAgICAgIGlmIChib3R0b20pIHsKICAgICAgICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZXNbdGV4dHVyZUNvb3JkSW5kZXggKyBib3R0b21PZmZzZXQyXSA9IHN0eDsKICAgICAgICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZXNbdGV4dHVyZUNvb3JkSW5kZXggKyAxICsgYm90dG9tT2Zmc2V0Ml0gPSBzdHk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHRvcCkgewogICAgICAgICAgICAgIHRleHR1cmVDb29yZGluYXRlc1t0ZXh0dXJlQ29vcmRJbmRleF0gPSBzdHg7CiAgICAgICAgICAgICAgdGV4dHVyZUNvb3JkaW5hdGVzW3RleHR1cmVDb29yZEluZGV4ICsgMV0gPSBzdHk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGV4dHVyZUNvb3JkSW5kZXggKz0gMjsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5ub3JtYWwgfHwgdmVydGV4Rm9ybWF0LnRhbmdlbnQgfHwgdmVydGV4Rm9ybWF0LmJpdGFuZ2VudCB8fCBzaGFkb3dWb2x1bWUpIHsKICAgICAgICAgIGNvbnN0IGF0dHJJbmRleDEgPSBhdHRySW5kZXggKyAxOwogICAgICAgICAgY29uc3QgYXR0ckluZGV4MiA9IGF0dHJJbmRleCArIDI7CiAgICAgICAgICBpZiAod2FsbCkgewogICAgICAgICAgICBpZiAoaSArIDMgPCBsZW5ndGgpIHsKICAgICAgICAgICAgICBjb25zdCBwMSA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkoZmxhdFBvc2l0aW9ucywgaSArIDMsIHAxU2NyYXRjaDMpOwogICAgICAgICAgICAgIGlmIChyZWNvbXB1dGVOb3JtYWwpIHsKICAgICAgICAgICAgICAgIGNvbnN0IHAyID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheSgKICAgICAgICAgICAgICAgICAgZmxhdFBvc2l0aW9ucywKICAgICAgICAgICAgICAgICAgaSArIGxlbmd0aCwKICAgICAgICAgICAgICAgICAgcDJTY3JhdGNoMwogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIGlmIChwZXJQb3NpdGlvbkhlaWdodCkgewogICAgICAgICAgICAgICAgICBhZGp1c3RQb3NIZWlnaHRzRm9yTm9ybWFsKHBvc2l0aW9uLCBwMSwgcDIsIGVsbGlwc29pZCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QocDEsIHBvc2l0aW9uLCBwMSk7CiAgICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QocDIsIHBvc2l0aW9uLCBwMik7CiAgICAgICAgICAgICAgICBub3JtYWwyID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSgKICAgICAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKHAyLCBwMSwgbm9ybWFsMiksCiAgICAgICAgICAgICAgICAgIG5vcm1hbDIKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICByZWNvbXB1dGVOb3JtYWwgPSBmYWxzZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKENhcnRlc2lhbjNfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKHAxLCBwb3NpdGlvbiwgTWF0aF9kZWZhdWx0LkVQU0lMT04xMCkpIHsKICAgICAgICAgICAgICAgIHJlY29tcHV0ZU5vcm1hbCA9IHRydWU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQudGFuZ2VudCB8fCB2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50KSB7CiAgICAgICAgICAgICAgYml0YW5nZW50ID0gZWxsaXBzb2lkLmdlb2RldGljU3VyZmFjZU5vcm1hbChwb3NpdGlvbiwgYml0YW5nZW50KTsKICAgICAgICAgICAgICBpZiAodmVydGV4Rm9ybWF0LnRhbmdlbnQpIHsKICAgICAgICAgICAgICAgIHRhbmdlbnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKAogICAgICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY3Jvc3MoYml0YW5nZW50LCBub3JtYWwyLCB0YW5nZW50KSwKICAgICAgICAgICAgICAgICAgdGFuZ2VudAogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG5vcm1hbDIgPSBlbGxpcHNvaWQuZ2VvZGV0aWNTdXJmYWNlTm9ybWFsKHBvc2l0aW9uLCBub3JtYWwyKTsKICAgICAgICAgICAgaWYgKHZlcnRleEZvcm1hdC50YW5nZW50IHx8IHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpIHsKICAgICAgICAgICAgICBpZiAocGVyUG9zaXRpb25IZWlnaHQpIHsKICAgICAgICAgICAgICAgIHNjcmF0Y2hQZXJQb3NOb3JtYWwgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KAogICAgICAgICAgICAgICAgICBub3JtYWxzLAogICAgICAgICAgICAgICAgICBhdHRySW5kZXgsCiAgICAgICAgICAgICAgICAgIHNjcmF0Y2hQZXJQb3NOb3JtYWwKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICBzY3JhdGNoUGVyUG9zVGFuZ2VudCA9IENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcygKICAgICAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LlVOSVRfWiwKICAgICAgICAgICAgICAgICAgc2NyYXRjaFBlclBvc05vcm1hbCwKICAgICAgICAgICAgICAgICAgc2NyYXRjaFBlclBvc1RhbmdlbnQKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICBzY3JhdGNoUGVyUG9zVGFuZ2VudCA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoCiAgICAgICAgICAgICAgICAgIE1hdHJpeDNfZGVmYXVsdC5tdWx0aXBseUJ5VmVjdG9yKAogICAgICAgICAgICAgICAgICAgIHRhbmdlbnRSb3RhdGlvbk1hdHJpeCwKICAgICAgICAgICAgICAgICAgICBzY3JhdGNoUGVyUG9zVGFuZ2VudCwKICAgICAgICAgICAgICAgICAgICBzY3JhdGNoUGVyUG9zVGFuZ2VudAogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBzY3JhdGNoUGVyUG9zVGFuZ2VudAogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50KSB7CiAgICAgICAgICAgICAgICAgIHNjcmF0Y2hQZXJQb3NCaXRhbmdlbnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKAogICAgICAgICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcygKICAgICAgICAgICAgICAgICAgICAgIHNjcmF0Y2hQZXJQb3NOb3JtYWwsCiAgICAgICAgICAgICAgICAgICAgICBzY3JhdGNoUGVyUG9zVGFuZ2VudCwKICAgICAgICAgICAgICAgICAgICAgIHNjcmF0Y2hQZXJQb3NCaXRhbmdlbnQKICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIHNjcmF0Y2hQZXJQb3NCaXRhbmdlbnQKICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdGFuZ2VudCA9IENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyhDYXJ0ZXNpYW4zX2RlZmF1bHQuVU5JVF9aLCBub3JtYWwyLCB0YW5nZW50KTsKICAgICAgICAgICAgICB0YW5nZW50ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSgKICAgICAgICAgICAgICAgIE1hdHJpeDNfZGVmYXVsdC5tdWx0aXBseUJ5VmVjdG9yKHRhbmdlbnRSb3RhdGlvbk1hdHJpeCwgdGFuZ2VudCwgdGFuZ2VudCksCiAgICAgICAgICAgICAgICB0YW5nZW50CiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICBpZiAodmVydGV4Rm9ybWF0LmJpdGFuZ2VudCkgewogICAgICAgICAgICAgICAgYml0YW5nZW50ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSgKICAgICAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKG5vcm1hbDIsIHRhbmdlbnQsIGJpdGFuZ2VudCksCiAgICAgICAgICAgICAgICAgIGJpdGFuZ2VudAogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQubm9ybWFsKSB7CiAgICAgICAgICAgIGlmIChvcHRpb25zLndhbGwpIHsKICAgICAgICAgICAgICBub3JtYWxzW2F0dHJJbmRleCArIGJvdHRvbU9mZnNldF0gPSBub3JtYWwyLng7CiAgICAgICAgICAgICAgbm9ybWFsc1thdHRySW5kZXgxICsgYm90dG9tT2Zmc2V0XSA9IG5vcm1hbDIueTsKICAgICAgICAgICAgICBub3JtYWxzW2F0dHJJbmRleDIgKyBib3R0b21PZmZzZXRdID0gbm9ybWFsMi56OwogICAgICAgICAgICB9IGVsc2UgaWYgKGJvdHRvbSkgewogICAgICAgICAgICAgIG5vcm1hbHNbYXR0ckluZGV4ICsgYm90dG9tT2Zmc2V0XSA9IC1ub3JtYWwyLng7CiAgICAgICAgICAgICAgbm9ybWFsc1thdHRySW5kZXgxICsgYm90dG9tT2Zmc2V0XSA9IC1ub3JtYWwyLnk7CiAgICAgICAgICAgICAgbm9ybWFsc1thdHRySW5kZXgyICsgYm90dG9tT2Zmc2V0XSA9IC1ub3JtYWwyLno7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHRvcCAmJiAhcGVyUG9zaXRpb25IZWlnaHQgfHwgd2FsbCkgewogICAgICAgICAgICAgIG5vcm1hbHNbYXR0ckluZGV4XSA9IG5vcm1hbDIueDsKICAgICAgICAgICAgICBub3JtYWxzW2F0dHJJbmRleDFdID0gbm9ybWFsMi55OwogICAgICAgICAgICAgIG5vcm1hbHNbYXR0ckluZGV4Ml0gPSBub3JtYWwyLno7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmIChzaGFkb3dWb2x1bWUpIHsKICAgICAgICAgICAgaWYgKHdhbGwpIHsKICAgICAgICAgICAgICBub3JtYWwyID0gZWxsaXBzb2lkLmdlb2RldGljU3VyZmFjZU5vcm1hbChwb3NpdGlvbiwgbm9ybWFsMik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZXh0cnVkZU5vcm1hbHNbYXR0ckluZGV4ICsgYm90dG9tT2Zmc2V0XSA9IC1ub3JtYWwyLng7CiAgICAgICAgICAgIGV4dHJ1ZGVOb3JtYWxzW2F0dHJJbmRleDEgKyBib3R0b21PZmZzZXRdID0gLW5vcm1hbDIueTsKICAgICAgICAgICAgZXh0cnVkZU5vcm1hbHNbYXR0ckluZGV4MiArIGJvdHRvbU9mZnNldF0gPSAtbm9ybWFsMi56OwogICAgICAgICAgfQogICAgICAgICAgaWYgKHZlcnRleEZvcm1hdC50YW5nZW50KSB7CiAgICAgICAgICAgIGlmIChvcHRpb25zLndhbGwpIHsKICAgICAgICAgICAgICB0YW5nZW50c1thdHRySW5kZXggKyBib3R0b21PZmZzZXRdID0gdGFuZ2VudC54OwogICAgICAgICAgICAgIHRhbmdlbnRzW2F0dHJJbmRleDEgKyBib3R0b21PZmZzZXRdID0gdGFuZ2VudC55OwogICAgICAgICAgICAgIHRhbmdlbnRzW2F0dHJJbmRleDIgKyBib3R0b21PZmZzZXRdID0gdGFuZ2VudC56OwogICAgICAgICAgICB9IGVsc2UgaWYgKGJvdHRvbSkgewogICAgICAgICAgICAgIHRhbmdlbnRzW2F0dHJJbmRleCArIGJvdHRvbU9mZnNldF0gPSAtdGFuZ2VudC54OwogICAgICAgICAgICAgIHRhbmdlbnRzW2F0dHJJbmRleDEgKyBib3R0b21PZmZzZXRdID0gLXRhbmdlbnQueTsKICAgICAgICAgICAgICB0YW5nZW50c1thdHRySW5kZXgyICsgYm90dG9tT2Zmc2V0XSA9IC10YW5nZW50Lno7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHRvcCkgewogICAgICAgICAgICAgIGlmIChwZXJQb3NpdGlvbkhlaWdodCkgewogICAgICAgICAgICAgICAgdGFuZ2VudHNbYXR0ckluZGV4XSA9IHNjcmF0Y2hQZXJQb3NUYW5nZW50Lng7CiAgICAgICAgICAgICAgICB0YW5nZW50c1thdHRySW5kZXgxXSA9IHNjcmF0Y2hQZXJQb3NUYW5nZW50Lnk7CiAgICAgICAgICAgICAgICB0YW5nZW50c1thdHRySW5kZXgyXSA9IHNjcmF0Y2hQZXJQb3NUYW5nZW50Lno7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRhbmdlbnRzW2F0dHJJbmRleF0gPSB0YW5nZW50Lng7CiAgICAgICAgICAgICAgICB0YW5nZW50c1thdHRySW5kZXgxXSA9IHRhbmdlbnQueTsKICAgICAgICAgICAgICAgIHRhbmdlbnRzW2F0dHJJbmRleDJdID0gdGFuZ2VudC56OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpIHsKICAgICAgICAgICAgaWYgKGJvdHRvbSkgewogICAgICAgICAgICAgIGJpdGFuZ2VudHNbYXR0ckluZGV4ICsgYm90dG9tT2Zmc2V0XSA9IGJpdGFuZ2VudC54OwogICAgICAgICAgICAgIGJpdGFuZ2VudHNbYXR0ckluZGV4MSArIGJvdHRvbU9mZnNldF0gPSBiaXRhbmdlbnQueTsKICAgICAgICAgICAgICBiaXRhbmdlbnRzW2F0dHJJbmRleDIgKyBib3R0b21PZmZzZXRdID0gYml0YW5nZW50Lno7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHRvcCkgewogICAgICAgICAgICAgIGlmIChwZXJQb3NpdGlvbkhlaWdodCkgewogICAgICAgICAgICAgICAgYml0YW5nZW50c1thdHRySW5kZXhdID0gc2NyYXRjaFBlclBvc0JpdGFuZ2VudC54OwogICAgICAgICAgICAgICAgYml0YW5nZW50c1thdHRySW5kZXgxXSA9IHNjcmF0Y2hQZXJQb3NCaXRhbmdlbnQueTsKICAgICAgICAgICAgICAgIGJpdGFuZ2VudHNbYXR0ckluZGV4Ml0gPSBzY3JhdGNoUGVyUG9zQml0YW5nZW50Lno7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGJpdGFuZ2VudHNbYXR0ckluZGV4XSA9IGJpdGFuZ2VudC54OwogICAgICAgICAgICAgICAgYml0YW5nZW50c1thdHRySW5kZXgxXSA9IGJpdGFuZ2VudC55OwogICAgICAgICAgICAgICAgYml0YW5nZW50c1thdHRySW5kZXgyXSA9IGJpdGFuZ2VudC56OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgYXR0ckluZGV4ICs9IDM7CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQuc3QgJiYgIWRlZmluZWRfZGVmYXVsdChmbGF0VGV4Y29vcmRzKSkgewogICAgICAgIGdlb21ldHJ5LmF0dHJpYnV0ZXMuc3QgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDIsCiAgICAgICAgICB2YWx1ZXM6IHRleHR1cmVDb29yZGluYXRlcwogICAgICAgIH0pOwogICAgICB9CiAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQubm9ybWFsKSB7CiAgICAgICAgZ2VvbWV0cnkuYXR0cmlidXRlcy5ub3JtYWwgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgICB2YWx1ZXM6IG5vcm1hbHMKICAgICAgICB9KTsKICAgICAgfQogICAgICBpZiAodmVydGV4Rm9ybWF0LnRhbmdlbnQpIHsKICAgICAgICBnZW9tZXRyeS5hdHRyaWJ1dGVzLnRhbmdlbnQgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgICB2YWx1ZXM6IHRhbmdlbnRzCiAgICAgICAgfSk7CiAgICAgIH0KICAgICAgaWYgKHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpIHsKICAgICAgICBnZW9tZXRyeS5hdHRyaWJ1dGVzLmJpdGFuZ2VudCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkZMT0FULAogICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICAgIHZhbHVlczogYml0YW5nZW50cwogICAgICAgIH0pOwogICAgICB9CiAgICAgIGlmIChzaGFkb3dWb2x1bWUpIHsKICAgICAgICBnZW9tZXRyeS5hdHRyaWJ1dGVzLmV4dHJ1ZGVEaXJlY3Rpb24gPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgICB2YWx1ZXM6IGV4dHJ1ZGVOb3JtYWxzCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KICAgIGlmIChvcHRpb25zLmV4dHJ1ZGUgJiYgZGVmaW5lZF9kZWZhdWx0KG9wdGlvbnMub2Zmc2V0QXR0cmlidXRlKSkgewogICAgICBjb25zdCBzaXplID0gZmxhdFBvc2l0aW9ucy5sZW5ndGggLyAzOwogICAgICBsZXQgb2Zmc2V0QXR0cmlidXRlID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSk7CiAgICAgIGlmIChvcHRpb25zLm9mZnNldEF0dHJpYnV0ZSA9PT0gR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGVfZGVmYXVsdC5UT1ApIHsKICAgICAgICBpZiAodG9wICYmIGJvdHRvbSB8fCB3YWxsKSB7CiAgICAgICAgICBvZmZzZXRBdHRyaWJ1dGUgPSBvZmZzZXRBdHRyaWJ1dGUuZmlsbCgxLCAwLCBzaXplIC8gMik7CiAgICAgICAgfSBlbHNlIGlmICh0b3ApIHsKICAgICAgICAgIG9mZnNldEF0dHJpYnV0ZSA9IG9mZnNldEF0dHJpYnV0ZS5maWxsKDEpOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBjb25zdCBvZmZzZXRWYWx1ZSA9IG9wdGlvbnMub2Zmc2V0QXR0cmlidXRlID09PSBHZW9tZXRyeU9mZnNldEF0dHJpYnV0ZV9kZWZhdWx0Lk5PTkUgPyAwIDogMTsKICAgICAgICBvZmZzZXRBdHRyaWJ1dGUgPSBvZmZzZXRBdHRyaWJ1dGUuZmlsbChvZmZzZXRWYWx1ZSk7CiAgICAgIH0KICAgICAgZ2VvbWV0cnkuYXR0cmlidXRlcy5hcHBseU9mZnNldCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5VTlNJR05FRF9CWVRFLAogICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDEsCiAgICAgICAgdmFsdWVzOiBvZmZzZXRBdHRyaWJ1dGUKICAgICAgfSk7CiAgICB9CiAgICByZXR1cm4gZ2VvbWV0cnk7CiAgfQogIGZ1bmN0aW9uIGNyZWF0ZUdlb21ldHJ5RnJvbVBvc2l0aW9uc0V4dHJ1ZGVkKGVsbGlwc29pZCwgcG9seWdvbjIsIHRleHR1cmVDb29yZGluYXRlcywgZ3JhbnVsYXJpdHksIGhpZXJhcmNoeSwgcGVyUG9zaXRpb25IZWlnaHQsIGNsb3NlVG9wLCBjbG9zZUJvdHRvbSwgdmVydGV4Rm9ybWF0LCBhcmNUeXBlKSB7CiAgICBjb25zdCBnZW9zID0gewogICAgICB3YWxsczogW10KICAgIH07CiAgICBsZXQgaTsKICAgIGlmIChjbG9zZVRvcCB8fCBjbG9zZUJvdHRvbSkgewogICAgICBjb25zdCB0b3BHZW8gPSBQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuY3JlYXRlR2VvbWV0cnlGcm9tUG9zaXRpb25zKAogICAgICAgIGVsbGlwc29pZCwKICAgICAgICBwb2x5Z29uMiwKICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZXMsCiAgICAgICAgZ3JhbnVsYXJpdHksCiAgICAgICAgcGVyUG9zaXRpb25IZWlnaHQsCiAgICAgICAgdmVydGV4Rm9ybWF0LAogICAgICAgIGFyY1R5cGUKICAgICAgKTsKICAgICAgY29uc3QgZWRnZVBvaW50cyA9IHRvcEdlby5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlczsKICAgICAgY29uc3QgaW5kaWNlcyA9IHRvcEdlby5pbmRpY2VzOwogICAgICBsZXQgbnVtUG9zaXRpb25zOwogICAgICBsZXQgbmV3SW5kaWNlczsKICAgICAgaWYgKGNsb3NlVG9wICYmIGNsb3NlQm90dG9tKSB7CiAgICAgICAgY29uc3QgdG9wQm90dG9tUG9zaXRpb25zID0gZWRnZVBvaW50cy5jb25jYXQoZWRnZVBvaW50cyk7CiAgICAgICAgbnVtUG9zaXRpb25zID0gdG9wQm90dG9tUG9zaXRpb25zLmxlbmd0aCAvIDM7CiAgICAgICAgbmV3SW5kaWNlcyA9IEluZGV4RGF0YXR5cGVfZGVmYXVsdC5jcmVhdGVUeXBlZEFycmF5KAogICAgICAgICAgbnVtUG9zaXRpb25zLAogICAgICAgICAgaW5kaWNlcy5sZW5ndGggKiAyCiAgICAgICAgKTsKICAgICAgICBuZXdJbmRpY2VzLnNldChpbmRpY2VzKTsKICAgICAgICBjb25zdCBpbGVuZ3RoID0gaW5kaWNlcy5sZW5ndGg7CiAgICAgICAgY29uc3QgbGVuZ3RoID0gbnVtUG9zaXRpb25zIC8gMjsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaWxlbmd0aDsgaSArPSAzKSB7CiAgICAgICAgICBjb25zdCBpMCA9IG5ld0luZGljZXNbaV0gKyBsZW5ndGg7CiAgICAgICAgICBjb25zdCBpMSA9IG5ld0luZGljZXNbaSArIDFdICsgbGVuZ3RoOwogICAgICAgICAgY29uc3QgaTIgPSBuZXdJbmRpY2VzW2kgKyAyXSArIGxlbmd0aDsKICAgICAgICAgIG5ld0luZGljZXNbaSArIGlsZW5ndGhdID0gaTI7CiAgICAgICAgICBuZXdJbmRpY2VzW2kgKyAxICsgaWxlbmd0aF0gPSBpMTsKICAgICAgICAgIG5ld0luZGljZXNbaSArIDIgKyBpbGVuZ3RoXSA9IGkwOwogICAgICAgIH0KICAgICAgICB0b3BHZW8uYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXMgPSB0b3BCb3R0b21Qb3NpdGlvbnM7CiAgICAgICAgaWYgKHBlclBvc2l0aW9uSGVpZ2h0ICYmIHZlcnRleEZvcm1hdC5ub3JtYWwpIHsKICAgICAgICAgIGNvbnN0IG5vcm1hbHMgPSB0b3BHZW8uYXR0cmlidXRlcy5ub3JtYWwudmFsdWVzOwogICAgICAgICAgdG9wR2VvLmF0dHJpYnV0ZXMubm9ybWFsLnZhbHVlcyA9IG5ldyBGbG9hdDMyQXJyYXkoCiAgICAgICAgICAgIHRvcEJvdHRvbVBvc2l0aW9ucy5sZW5ndGgKICAgICAgICAgICk7CiAgICAgICAgICB0b3BHZW8uYXR0cmlidXRlcy5ub3JtYWwudmFsdWVzLnNldChub3JtYWxzKTsKICAgICAgICB9CiAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5zdCAmJiBkZWZpbmVkX2RlZmF1bHQodGV4dHVyZUNvb3JkaW5hdGVzKSkgewogICAgICAgICAgY29uc3QgdGV4Y29vcmRzID0gdG9wR2VvLmF0dHJpYnV0ZXMuc3QudmFsdWVzOwogICAgICAgICAgdG9wR2VvLmF0dHJpYnV0ZXMuc3QudmFsdWVzID0gbmV3IEZsb2F0MzJBcnJheShudW1Qb3NpdGlvbnMgKiAyKTsKICAgICAgICAgIHRvcEdlby5hdHRyaWJ1dGVzLnN0LnZhbHVlcyA9IHRleGNvb3Jkcy5jb25jYXQodGV4Y29vcmRzKTsKICAgICAgICB9CiAgICAgICAgdG9wR2VvLmluZGljZXMgPSBuZXdJbmRpY2VzOwogICAgICB9IGVsc2UgaWYgKGNsb3NlQm90dG9tKSB7CiAgICAgICAgbnVtUG9zaXRpb25zID0gZWRnZVBvaW50cy5sZW5ndGggLyAzOwogICAgICAgIG5ld0luZGljZXMgPSBJbmRleERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheShudW1Qb3NpdGlvbnMsIGluZGljZXMubGVuZ3RoKTsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaW5kaWNlcy5sZW5ndGg7IGkgKz0gMykgewogICAgICAgICAgbmV3SW5kaWNlc1tpXSA9IGluZGljZXNbaSArIDJdOwogICAgICAgICAgbmV3SW5kaWNlc1tpICsgMV0gPSBpbmRpY2VzW2kgKyAxXTsKICAgICAgICAgIG5ld0luZGljZXNbaSArIDJdID0gaW5kaWNlc1tpXTsKICAgICAgICB9CiAgICAgICAgdG9wR2VvLmluZGljZXMgPSBuZXdJbmRpY2VzOwogICAgICB9CiAgICAgIGdlb3MudG9wQW5kQm90dG9tID0gbmV3IEdlb21ldHJ5SW5zdGFuY2VfZGVmYXVsdCh7CiAgICAgICAgZ2VvbWV0cnk6IHRvcEdlbwogICAgICB9KTsKICAgIH0KICAgIGxldCBvdXRlclJpbmcgPSBoaWVyYXJjaHkub3V0ZXJSaW5nOwogICAgY29uc3QgdGFuZ2VudFBsYW5lID0gRWxsaXBzb2lkVGFuZ2VudFBsYW5lX2RlZmF1bHQuZnJvbVBvaW50cyhvdXRlclJpbmcsIGVsbGlwc29pZCk7CiAgICBsZXQgcG9zaXRpb25zMkQgPSB0YW5nZW50UGxhbmUucHJvamVjdFBvaW50c09udG9QbGFuZSgKICAgICAgb3V0ZXJSaW5nLAogICAgICBjcmVhdGVHZW9tZXRyeUZyb21Qb3NpdGlvbnNFeHRydWRlZFBvc2l0aW9ucwogICAgKTsKICAgIGxldCB3aW5kaW5nT3JkZXIgPSBQb2x5Z29uUGlwZWxpbmVfZGVmYXVsdC5jb21wdXRlV2luZGluZ09yZGVyMkQocG9zaXRpb25zMkQpOwogICAgaWYgKHdpbmRpbmdPcmRlciA9PT0gV2luZGluZ09yZGVyX2RlZmF1bHQuQ0xPQ0tXSVNFKSB7CiAgICAgIG91dGVyUmluZyA9IG91dGVyUmluZy5zbGljZSgpLnJldmVyc2UoKTsKICAgIH0KICAgIGxldCB3YWxsR2VvID0gUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmNvbXB1dGVXYWxsR2VvbWV0cnkoCiAgICAgIG91dGVyUmluZywKICAgICAgdGV4dHVyZUNvb3JkaW5hdGVzLAogICAgICBlbGxpcHNvaWQsCiAgICAgIGdyYW51bGFyaXR5LAogICAgICBwZXJQb3NpdGlvbkhlaWdodCwKICAgICAgYXJjVHlwZQogICAgKTsKICAgIGdlb3Mud2FsbHMucHVzaCgKICAgICAgbmV3IEdlb21ldHJ5SW5zdGFuY2VfZGVmYXVsdCh7CiAgICAgICAgZ2VvbWV0cnk6IHdhbGxHZW8KICAgICAgfSkKICAgICk7CiAgICBjb25zdCBob2xlcyA9IGhpZXJhcmNoeS5ob2xlczsKICAgIGZvciAoaSA9IDA7IGkgPCBob2xlcy5sZW5ndGg7IGkrKykgewogICAgICBsZXQgaG9sZSA9IGhvbGVzW2ldOwogICAgICBwb3NpdGlvbnMyRCA9IHRhbmdlbnRQbGFuZS5wcm9qZWN0UG9pbnRzT250b1BsYW5lKAogICAgICAgIGhvbGUsCiAgICAgICAgY3JlYXRlR2VvbWV0cnlGcm9tUG9zaXRpb25zRXh0cnVkZWRQb3NpdGlvbnMKICAgICAgKTsKICAgICAgd2luZGluZ09yZGVyID0gUG9seWdvblBpcGVsaW5lX2RlZmF1bHQuY29tcHV0ZVdpbmRpbmdPcmRlcjJEKHBvc2l0aW9uczJEKTsKICAgICAgaWYgKHdpbmRpbmdPcmRlciA9PT0gV2luZGluZ09yZGVyX2RlZmF1bHQuQ09VTlRFUl9DTE9DS1dJU0UpIHsKICAgICAgICBob2xlID0gaG9sZS5zbGljZSgpLnJldmVyc2UoKTsKICAgICAgfQogICAgICB3YWxsR2VvID0gUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmNvbXB1dGVXYWxsR2VvbWV0cnkoCiAgICAgICAgaG9sZSwKICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZXMsCiAgICAgICAgZWxsaXBzb2lkLAogICAgICAgIGdyYW51bGFyaXR5LAogICAgICAgIHBlclBvc2l0aW9uSGVpZ2h0LAogICAgICAgIGFyY1R5cGUKICAgICAgKTsKICAgICAgZ2Vvcy53YWxscy5wdXNoKAogICAgICAgIG5ldyBHZW9tZXRyeUluc3RhbmNlX2RlZmF1bHQoewogICAgICAgICAgZ2VvbWV0cnk6IHdhbGxHZW8KICAgICAgICB9KQogICAgICApOwogICAgfQogICAgcmV0dXJuIGdlb3M7CiAgfQogIGZ1bmN0aW9uIFBvbHlnb25HZW9tZXRyeShvcHRpb25zKSB7CiAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm9wdGlvbnMiLCBvcHRpb25zKTsKICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgib3B0aW9ucy5wb2x5Z29uSGllcmFyY2h5Iiwgb3B0aW9ucy5wb2x5Z29uSGllcmFyY2h5KTsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQob3B0aW9ucy5wZXJQb3NpdGlvbkhlaWdodCkgJiYgb3B0aW9ucy5wZXJQb3NpdGlvbkhlaWdodCAmJiBkZWZpbmVkX2RlZmF1bHQob3B0aW9ucy5oZWlnaHQpKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICJDYW5ub3QgdXNlIGJvdGggb3B0aW9ucy5wZXJQb3NpdGlvbkhlaWdodCBhbmQgb3B0aW9ucy5oZWlnaHQiCiAgICAgICk7CiAgICB9CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG9wdGlvbnMuYXJjVHlwZSkgJiYgb3B0aW9ucy5hcmNUeXBlICE9PSBBcmNUeXBlX2RlZmF1bHQuR0VPREVTSUMgJiYgb3B0aW9ucy5hcmNUeXBlICE9PSBBcmNUeXBlX2RlZmF1bHQuUkhVTUIpIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgIkludmFsaWQgYXJjVHlwZS4gVmFsaWQgb3B0aW9ucyBhcmUgQXJjVHlwZS5HRU9ERVNJQyBhbmQgQXJjVHlwZS5SSFVNQi4iCiAgICAgICk7CiAgICB9CiAgICBjb25zdCBwb2x5Z29uSGllcmFyY2h5ID0gb3B0aW9ucy5wb2x5Z29uSGllcmFyY2h5OwogICAgY29uc3QgdmVydGV4Rm9ybWF0ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy52ZXJ0ZXhGb3JtYXQsIFZlcnRleEZvcm1hdF9kZWZhdWx0LkRFRkFVTFQpOwogICAgY29uc3QgZWxsaXBzb2lkID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5lbGxpcHNvaWQsIEVsbGlwc29pZF9kZWZhdWx0LmRlZmF1bHQpOwogICAgY29uc3QgZ3JhbnVsYXJpdHkgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCgKICAgICAgb3B0aW9ucy5ncmFudWxhcml0eSwKICAgICAgTWF0aF9kZWZhdWx0LlJBRElBTlNfUEVSX0RFR1JFRQogICAgKTsKICAgIGNvbnN0IHN0Um90YXRpb24gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLnN0Um90YXRpb24sIDApOwogICAgY29uc3QgdGV4dHVyZUNvb3JkaW5hdGVzID0gb3B0aW9ucy50ZXh0dXJlQ29vcmRpbmF0ZXM7CiAgICBjb25zdCBwZXJQb3NpdGlvbkhlaWdodCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMucGVyUG9zaXRpb25IZWlnaHQsIGZhbHNlKTsKICAgIGNvbnN0IHBlclBvc2l0aW9uSGVpZ2h0RXh0cnVkZSA9IHBlclBvc2l0aW9uSGVpZ2h0ICYmIGRlZmluZWRfZGVmYXVsdChvcHRpb25zLmV4dHJ1ZGVkSGVpZ2h0KTsKICAgIGxldCBoZWlnaHQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmhlaWdodCwgMCk7CiAgICBsZXQgZXh0cnVkZWRIZWlnaHQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmV4dHJ1ZGVkSGVpZ2h0LCBoZWlnaHQpOwogICAgaWYgKCFwZXJQb3NpdGlvbkhlaWdodEV4dHJ1ZGUpIHsKICAgICAgY29uc3QgaCA9IE1hdGgubWF4KGhlaWdodCwgZXh0cnVkZWRIZWlnaHQpOwogICAgICBleHRydWRlZEhlaWdodCA9IE1hdGgubWluKGhlaWdodCwgZXh0cnVkZWRIZWlnaHQpOwogICAgICBoZWlnaHQgPSBoOwogICAgfQogICAgdGhpcy5fdmVydGV4Rm9ybWF0ID0gVmVydGV4Rm9ybWF0X2RlZmF1bHQuY2xvbmUodmVydGV4Rm9ybWF0KTsKICAgIHRoaXMuX2VsbGlwc29pZCA9IEVsbGlwc29pZF9kZWZhdWx0LmNsb25lKGVsbGlwc29pZCk7CiAgICB0aGlzLl9ncmFudWxhcml0eSA9IGdyYW51bGFyaXR5OwogICAgdGhpcy5fc3RSb3RhdGlvbiA9IHN0Um90YXRpb247CiAgICB0aGlzLl9oZWlnaHQgPSBoZWlnaHQ7CiAgICB0aGlzLl9leHRydWRlZEhlaWdodCA9IGV4dHJ1ZGVkSGVpZ2h0OwogICAgdGhpcy5fY2xvc2VUb3AgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmNsb3NlVG9wLCB0cnVlKTsKICAgIHRoaXMuX2Nsb3NlQm90dG9tID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5jbG9zZUJvdHRvbSwgdHJ1ZSk7CiAgICB0aGlzLl9wb2x5Z29uSGllcmFyY2h5ID0gcG9seWdvbkhpZXJhcmNoeTsKICAgIHRoaXMuX3BlclBvc2l0aW9uSGVpZ2h0ID0gcGVyUG9zaXRpb25IZWlnaHQ7CiAgICB0aGlzLl9wZXJQb3NpdGlvbkhlaWdodEV4dHJ1ZGUgPSBwZXJQb3NpdGlvbkhlaWdodEV4dHJ1ZGU7CiAgICB0aGlzLl9zaGFkb3dWb2x1bWUgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLnNoYWRvd1ZvbHVtZSwgZmFsc2UpOwogICAgdGhpcy5fd29ya2VyTmFtZSA9ICJjcmVhdGVQb2x5Z29uR2VvbWV0cnkiOwogICAgdGhpcy5fb2Zmc2V0QXR0cmlidXRlID0gb3B0aW9ucy5vZmZzZXRBdHRyaWJ1dGU7CiAgICB0aGlzLl9hcmNUeXBlID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5hcmNUeXBlLCBBcmNUeXBlX2RlZmF1bHQuR0VPREVTSUMpOwogICAgdGhpcy5fcmVjdGFuZ2xlID0gdm9pZCAwOwogICAgdGhpcy5fdGV4dHVyZUNvb3JkaW5hdGVSb3RhdGlvblBvaW50cyA9IHZvaWQgMDsKICAgIHRoaXMuX3RleHR1cmVDb29yZGluYXRlcyA9IHRleHR1cmVDb29yZGluYXRlczsKICAgIHRoaXMucGFja2VkTGVuZ3RoID0gUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmNvbXB1dGVIaWVyYXJjaHlQYWNrZWRMZW5ndGgoCiAgICAgIHBvbHlnb25IaWVyYXJjaHksCiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdAogICAgKSArIEVsbGlwc29pZF9kZWZhdWx0LnBhY2tlZExlbmd0aCArIFZlcnRleEZvcm1hdF9kZWZhdWx0LnBhY2tlZExlbmd0aCArICh0ZXh0dXJlQ29vcmRpbmF0ZXMgPyBQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuY29tcHV0ZUhpZXJhcmNoeVBhY2tlZExlbmd0aCgKICAgICAgdGV4dHVyZUNvb3JkaW5hdGVzLAogICAgICBDYXJ0ZXNpYW4yX2RlZmF1bHQKICAgICkgOiAxKSArIDEyOwogIH0KICBmdW5jdGlvbiBleHBhbmRSZWN0YW5nbGUocG9sYXIsIGxhc3RQb2xhciwgZWxsaXBzb2lkLCBhcmNUeXBlLCBwb2x5Z29uMiwgcmVzdWx0KSB7CiAgICBjb25zdCBsb25naXR1ZGUgPSBwb2xhci5sb25naXR1ZGU7CiAgICBjb25zdCBsb25BZGp1c3RlZCA9IGxvbmdpdHVkZSA+PSAwID8gbG9uZ2l0dWRlIDogbG9uZ2l0dWRlICsgTWF0aF9kZWZhdWx0LlRXT19QSTsKICAgIHBvbHlnb24yLndlc3RPdmVySWRsID0gTWF0aC5taW4ocG9seWdvbjIud2VzdE92ZXJJZGwsIGxvbkFkanVzdGVkKTsKICAgIHBvbHlnb24yLmVhc3RPdmVySWRsID0gTWF0aC5tYXgocG9seWdvbjIuZWFzdE92ZXJJZGwsIGxvbkFkanVzdGVkKTsKICAgIHJlc3VsdC53ZXN0ID0gTWF0aC5taW4ocmVzdWx0Lndlc3QsIGxvbmdpdHVkZSk7CiAgICByZXN1bHQuZWFzdCA9IE1hdGgubWF4KHJlc3VsdC5lYXN0LCBsb25naXR1ZGUpOwogICAgY29uc3QgbGF0aXR1ZGUgPSBwb2xhci5nZXRMYXRpdHVkZShlbGxpcHNvaWQpOwogICAgbGV0IHNlZ21lbnRMYXRpdHVkZSA9IGxhdGl0dWRlOwogICAgcmVzdWx0LnNvdXRoID0gTWF0aC5taW4ocmVzdWx0LnNvdXRoLCBsYXRpdHVkZSk7CiAgICByZXN1bHQubm9ydGggPSBNYXRoLm1heChyZXN1bHQubm9ydGgsIGxhdGl0dWRlKTsKICAgIGlmIChhcmNUeXBlICE9PSBBcmNUeXBlX2RlZmF1bHQuUkhVTUIpIHsKICAgICAgY29uc3Qgc2VnbWVudCA9IENhcnRlc2lhbjJfZGVmYXVsdC5zdWJ0cmFjdCgKICAgICAgICBsYXN0UG9sYXIucG9zaXRpb24sCiAgICAgICAgcG9sYXIucG9zaXRpb24sCiAgICAgICAgc2NyYXRjaENhcnRlc2lhbjAyCiAgICAgICk7CiAgICAgIGNvbnN0IHQgPSBDYXJ0ZXNpYW4yX2RlZmF1bHQuZG90KGxhc3RQb2xhci5wb3NpdGlvbiwgc2VnbWVudCkgLyBDYXJ0ZXNpYW4yX2RlZmF1bHQuZG90KHNlZ21lbnQsIHNlZ21lbnQpOwogICAgICBpZiAodCA+IDAgJiYgdCA8IDEpIHsKICAgICAgICBjb25zdCBwcm9qZWN0ZWQgPSBDYXJ0ZXNpYW4yX2RlZmF1bHQuYWRkKAogICAgICAgICAgbGFzdFBvbGFyLnBvc2l0aW9uLAogICAgICAgICAgQ2FydGVzaWFuMl9kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIoc2VnbWVudCwgLXQsIHNlZ21lbnQpLAogICAgICAgICAgc2NyYXRjaENhcnRlc2lhbjE4CiAgICAgICAgKTsKICAgICAgICBjb25zdCBjbG9zZXN0UG9sYXIgPSBTdGVyZW9ncmFwaGljX2RlZmF1bHQuY2xvbmUobGFzdFBvbGFyLCBzY3JhdGNoUG9sYXJDbG9zZXN0KTsKICAgICAgICBjbG9zZXN0UG9sYXIucG9zaXRpb24gPSBwcm9qZWN0ZWQ7CiAgICAgICAgY29uc3QgYWRqdXN0ZWRMYXRpdHVkZSA9IGNsb3Nlc3RQb2xhci5nZXRMYXRpdHVkZShlbGxpcHNvaWQpOwogICAgICAgIHJlc3VsdC5zb3V0aCA9IE1hdGgubWluKHJlc3VsdC5zb3V0aCwgYWRqdXN0ZWRMYXRpdHVkZSk7CiAgICAgICAgcmVzdWx0Lm5vcnRoID0gTWF0aC5tYXgocmVzdWx0Lm5vcnRoLCBhZGp1c3RlZExhdGl0dWRlKTsKICAgICAgICBpZiAoTWF0aC5hYnMobGF0aXR1ZGUpID4gTWF0aC5hYnMoYWRqdXN0ZWRMYXRpdHVkZSkpIHsKICAgICAgICAgIHNlZ21lbnRMYXRpdHVkZSA9IGFkanVzdGVkTGF0aXR1ZGU7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBjb25zdCBkaXJlY3Rpb24yID0gbGFzdFBvbGFyLnggKiBwb2xhci55IC0gcG9sYXIueCAqIGxhc3RQb2xhci55OwogICAgbGV0IGFuZ2xlID0gTWF0aC5zaWduKGRpcmVjdGlvbjIpOwogICAgaWYgKGFuZ2xlICE9PSAwKSB7CiAgICAgIGFuZ2xlICo9IENhcnRlc2lhbjJfZGVmYXVsdC5hbmdsZUJldHdlZW4obGFzdFBvbGFyLnBvc2l0aW9uLCBwb2xhci5wb3NpdGlvbik7CiAgICB9CiAgICBpZiAoc2VnbWVudExhdGl0dWRlID49IDApIHsKICAgICAgcG9seWdvbjIubm9ydGhBbmdsZSArPSBhbmdsZTsKICAgIH0KICAgIGlmIChzZWdtZW50TGF0aXR1ZGUgPD0gMCkgewogICAgICBwb2x5Z29uMi5zb3V0aEFuZ2xlICs9IGFuZ2xlOwogICAgfQogIH0KICBmdW5jdGlvbiBnZXRUYW5nZW50UGxhbmUocmVjdGFuZ2xlLCBwb3NpdGlvbnMsIGVsbGlwc29pZCkgewogICAgaWYgKHJlY3RhbmdsZS5oZWlnaHQgPj0gTWF0aF9kZWZhdWx0LlBJIHx8IHJlY3RhbmdsZS53aWR0aCA+PSBNYXRoX2RlZmF1bHQuUEkpIHsKICAgICAgY29uc3QgcG9sYXIgPSBTdGVyZW9ncmFwaGljX2RlZmF1bHQuZnJvbUNhcnRlc2lhbigKICAgICAgICBwb3NpdGlvbnNbMF0sCiAgICAgICAgc2NyYXRjaFBvbGFyRm9yUGxhbmUKICAgICAgKTsKICAgICAgcmV0dXJuIHBvbGFyLnRhbmdlbnRQbGFuZTsKICAgIH0KICAgIHJldHVybiBFbGxpcHNvaWRUYW5nZW50UGxhbmVfZGVmYXVsdC5mcm9tUG9pbnRzKHBvc2l0aW9ucywgZWxsaXBzb2lkKTsKICB9CiAgZnVuY3Rpb24gY3JlYXRlUHJvamVjdFRvMmQocmVjdGFuZ2xlLCBvdXRlclBvc2l0aW9ucywgZWxsaXBzb2lkKSB7CiAgICByZXR1cm4gKHBvc2l0aW9ucywgcmVzdWx0cykgPT4gewogICAgICBpZiAocmVjdGFuZ2xlLmhlaWdodCA+PSBNYXRoX2RlZmF1bHQuUEkgfHwgcmVjdGFuZ2xlLndpZHRoID49IE1hdGhfZGVmYXVsdC5QSSkgewogICAgICAgIGlmIChyZWN0YW5nbGUuc291dGggPCAwICYmIHJlY3RhbmdsZS5ub3J0aCA+IDApIHsKICAgICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdHMpKSB7CiAgICAgICAgICAgIHJlc3VsdHMgPSBbXTsKICAgICAgICAgIH0KICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9zaXRpb25zLmxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgIGNvbnN0IGNhcnRvZ3JhcGhpYzIgPSBlbGxpcHNvaWQuY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWMoCiAgICAgICAgICAgICAgcG9zaXRpb25zW2ldLAogICAgICAgICAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWNDeWxsaW5kcmljYWwKICAgICAgICAgICAgKTsKICAgICAgICAgICAgcmVzdWx0c1tpXSA9IG5ldyBDYXJ0ZXNpYW4yX2RlZmF1bHQoCiAgICAgICAgICAgICAgY2FydG9ncmFwaGljMi5sb25naXR1ZGUgLyBNYXRoX2RlZmF1bHQuUEksCiAgICAgICAgICAgICAgY2FydG9ncmFwaGljMi5sYXRpdHVkZSAvIE1hdGhfZGVmYXVsdC5QSV9PVkVSX1RXTwogICAgICAgICAgICApOwogICAgICAgICAgfQogICAgICAgICAgcmVzdWx0cy5sZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoOwogICAgICAgICAgcmV0dXJuIHJlc3VsdHM7CiAgICAgICAgfQogICAgICAgIHJldHVybiBTdGVyZW9ncmFwaGljX2RlZmF1bHQuZnJvbUNhcnRlc2lhbkFycmF5KHBvc2l0aW9ucywgcmVzdWx0cyk7CiAgICAgIH0KICAgICAgY29uc3QgdGFuZ2VudFBsYW5lID0gRWxsaXBzb2lkVGFuZ2VudFBsYW5lX2RlZmF1bHQuZnJvbVBvaW50cygKICAgICAgICBvdXRlclBvc2l0aW9ucywKICAgICAgICBlbGxpcHNvaWQKICAgICAgKTsKICAgICAgcmV0dXJuIHRhbmdlbnRQbGFuZS5wcm9qZWN0UG9pbnRzT250b1BsYW5lKHBvc2l0aW9ucywgcmVzdWx0cyk7CiAgICB9OwogIH0KICBmdW5jdGlvbiBjcmVhdGVQcm9qZWN0UG9zaXRpb25UbzJkKHJlY3RhbmdsZSwgb3V0ZXJSaW5nLCBlbGxpcHNvaWQpIHsKICAgIGlmIChyZWN0YW5nbGUuaGVpZ2h0ID49IE1hdGhfZGVmYXVsdC5QSSB8fCByZWN0YW5nbGUud2lkdGggPj0gTWF0aF9kZWZhdWx0LlBJKSB7CiAgICAgIHJldHVybiAocG9zaXRpb24sIHJlc3VsdCkgPT4gewogICAgICAgIGlmIChyZWN0YW5nbGUuc291dGggPCAwICYmIHJlY3RhbmdsZS5ub3J0aCA+IDApIHsKICAgICAgICAgIGNvbnN0IGNhcnRvZ3JhcGhpYzIgPSBlbGxpcHNvaWQuY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWMoCiAgICAgICAgICAgIHBvc2l0aW9uLAogICAgICAgICAgICBzY3JhdGNoQ2FydG9ncmFwaGljQ3lsbGluZHJpY2FsCiAgICAgICAgICApOwogICAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgICByZXN1bHQgPSBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCk7CiAgICAgICAgICB9CiAgICAgICAgICByZXN1bHQueCA9IGNhcnRvZ3JhcGhpYzIubG9uZ2l0dWRlIC8gTWF0aF9kZWZhdWx0LlBJOwogICAgICAgICAgcmVzdWx0LnkgPSBjYXJ0b2dyYXBoaWMyLmxhdGl0dWRlIC8gTWF0aF9kZWZhdWx0LlBJX09WRVJfVFdPOwogICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIFN0ZXJlb2dyYXBoaWNfZGVmYXVsdC5mcm9tQ2FydGVzaWFuKHBvc2l0aW9uLCByZXN1bHQpOwogICAgICB9OwogICAgfQogICAgY29uc3QgdGFuZ2VudFBsYW5lID0gRWxsaXBzb2lkVGFuZ2VudFBsYW5lX2RlZmF1bHQuZnJvbVBvaW50cyhvdXRlclJpbmcsIGVsbGlwc29pZCk7CiAgICByZXR1cm4gKHBvc2l0aW9uLCByZXN1bHQpID0+IHsKICAgICAgcmV0dXJuIHRhbmdlbnRQbGFuZS5wcm9qZWN0UG9pbnRzT250b1BsYW5lKHBvc2l0aW9uLCByZXN1bHQpOwogICAgfTsKICB9CiAgZnVuY3Rpb24gY3JlYXRlU3BsaXRQb2x5Z29ucyhyZWN0YW5nbGUsIGVsbGlwc29pZCwgYXJjVHlwZSwgcGVyUG9zaXRpb25IZWlnaHQpIHsKICAgIHJldHVybiAocG9seWdvbnMsIHJlc3VsdHMpID0+IHsKICAgICAgaWYgKCFwZXJQb3NpdGlvbkhlaWdodCAmJiAocmVjdGFuZ2xlLmhlaWdodCA+PSBNYXRoX2RlZmF1bHQuUElfT1ZFUl9UV08gfHwgcmVjdGFuZ2xlLndpZHRoID49IDIgKiBNYXRoX2RlZmF1bHQuUElfT1ZFUl9USFJFRSkpIHsKICAgICAgICByZXR1cm4gUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LnNwbGl0UG9seWdvbnNPbkVxdWF0b3IoCiAgICAgICAgICBwb2x5Z29ucywKICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgIGFyY1R5cGUsCiAgICAgICAgICByZXN1bHRzCiAgICAgICAgKTsKICAgICAgfQogICAgICByZXR1cm4gcG9seWdvbnM7CiAgICB9OwogIH0KICBmdW5jdGlvbiBjb21wdXRlQm91bmRpbmdSZWN0YW5nbGUob3V0ZXJSaW5nLCByZWN0YW5nbGUsIGVsbGlwc29pZCwgc3RSb3RhdGlvbikgewogICAgaWYgKHJlY3RhbmdsZS5oZWlnaHQgPj0gTWF0aF9kZWZhdWx0LlBJIHx8IHJlY3RhbmdsZS53aWR0aCA+PSBNYXRoX2RlZmF1bHQuUEkpIHsKICAgICAgcmV0dXJuIEJvdW5kaW5nUmVjdGFuZ2xlX2RlZmF1bHQuZnJvbVJlY3RhbmdsZSgKICAgICAgICByZWN0YW5nbGUsCiAgICAgICAgdm9pZCAwLAogICAgICAgIHNjcmF0Y2hCb3VuZGluZ1JlY3RhbmdsZQogICAgICApOwogICAgfQogICAgY29uc3Qgb3V0ZXJQb3NpdGlvbnMgPSBvdXRlclJpbmc7CiAgICBjb25zdCB0YW5nZW50UGxhbmUgPSBFbGxpcHNvaWRUYW5nZW50UGxhbmVfZGVmYXVsdC5mcm9tUG9pbnRzKAogICAgICBvdXRlclBvc2l0aW9ucywKICAgICAgZWxsaXBzb2lkCiAgICApOwogICAgcmV0dXJuIFBvbHlnb25HZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5jb21wdXRlQm91bmRpbmdSZWN0YW5nbGUoCiAgICAgIHRhbmdlbnRQbGFuZS5wbGFuZS5ub3JtYWwsCiAgICAgIHRhbmdlbnRQbGFuZS5wcm9qZWN0UG9pbnRPbnRvUGxhbmUuYmluZCh0YW5nZW50UGxhbmUpLAogICAgICBvdXRlclBvc2l0aW9ucywKICAgICAgc3RSb3RhdGlvbiwKICAgICAgc2NyYXRjaEJvdW5kaW5nUmVjdGFuZ2xlCiAgICApOwogIH0KICBmdW5jdGlvbiB0ZXh0dXJlQ29vcmRpbmF0ZVJvdGF0aW9uUG9pbnRzMihwb2x5Z29uR2VvbWV0cnkpIHsKICAgIGNvbnN0IHN0Um90YXRpb24gPSAtcG9seWdvbkdlb21ldHJ5Ll9zdFJvdGF0aW9uOwogICAgaWYgKHN0Um90YXRpb24gPT09IDApIHsKICAgICAgcmV0dXJuIFswLCAwLCAwLCAxLCAxLCAwXTsKICAgIH0KICAgIGNvbnN0IGVsbGlwc29pZCA9IHBvbHlnb25HZW9tZXRyeS5fZWxsaXBzb2lkOwogICAgY29uc3QgcG9zaXRpb25zID0gcG9seWdvbkdlb21ldHJ5Ll9wb2x5Z29uSGllcmFyY2h5LnBvc2l0aW9uczsKICAgIGNvbnN0IGJvdW5kaW5nUmVjdGFuZ2xlID0gcG9seWdvbkdlb21ldHJ5LnJlY3RhbmdsZTsKICAgIHJldHVybiBHZW9tZXRyeV9kZWZhdWx0Ll90ZXh0dXJlQ29vcmRpbmF0ZVJvdGF0aW9uUG9pbnRzKAogICAgICBwb3NpdGlvbnMsCiAgICAgIHN0Um90YXRpb24sCiAgICAgIGVsbGlwc29pZCwKICAgICAgYm91bmRpbmdSZWN0YW5nbGUKICAgICk7CiAgfQogIHZhciBzY3JhdGNoQ2FydG8xLCBzY3JhdGNoQ2FydG8yLCBzY3JhdGNoQm91bmRpbmdSZWN0YW5nbGUsIHNjcmF0Y2hQb3NpdGlvbjMsIHNjcmF0Y2hOb3JtYWw2LCBzY3JhdGNoVGFuZ2VudDQsIHNjcmF0Y2hCaXRhbmdlbnQ0LCBwMVNjcmF0Y2gzLCBwMlNjcmF0Y2gzLCBzY3JhdGNoUGVyUG9zTm9ybWFsLCBzY3JhdGNoUGVyUG9zVGFuZ2VudCwgc2NyYXRjaFBlclBvc0JpdGFuZ2VudCwgYXBwZW5kVGV4dHVyZUNvb3JkaW5hdGVzT3JpZ2luLCBhcHBlbmRUZXh0dXJlQ29vcmRpbmF0ZXNDYXJ0ZXNpYW4yLCBhcHBlbmRUZXh0dXJlQ29vcmRpbmF0ZXNDYXJ0ZXNpYW4zLCBhcHBlbmRUZXh0dXJlQ29vcmRpbmF0ZXNRdWF0ZXJuaW9uLCBhcHBlbmRUZXh0dXJlQ29vcmRpbmF0ZXNNYXRyaXgzLCB0YW5nZW50TWF0cml4U2NyYXRjaDIsIGNyZWF0ZUdlb21ldHJ5RnJvbVBvc2l0aW9uc0V4dHJ1ZGVkUG9zaXRpb25zLCBzY3JhdGNoRWxsaXBzb2lkNiwgc2NyYXRjaFZlcnRleEZvcm1hdDksIGR1bW15T3B0aW9ucywgc2NyYXRjaENhcnRlc2lhbjAyLCBzY3JhdGNoQ2FydGVzaWFuMTgsIHNjcmF0Y2hQb2xhckNsb3Nlc3QsIHNjcmF0Y2hQb2xhciwgc2NyYXRjaFBvbGFyUHJldmlvdXMsIHBvbHlnb24sIHNjcmF0Y2hQb2xhckZvclBsYW5lLCBzY3JhdGNoQ2FydG9ncmFwaGljQ3lsbGluZHJpY2FsLCBQb2x5Z29uR2VvbWV0cnlfZGVmYXVsdDsKICB2YXIgaW5pdF9Qb2x5Z29uR2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1BvbHlnb25HZW9tZXRyeS5qcyIoKSB7CiAgICAgIGluaXRfQXJjVHlwZSgpOwogICAgICBpbml0X0JvdW5kaW5nUmVjdGFuZ2xlKCk7CiAgICAgIGluaXRfQm91bmRpbmdTcGhlcmUoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4yKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NhcnRvZ3JhcGhpYygpOwogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfQ29tcG9uZW50RGF0YXR5cGUoKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9FbGxpcHNvaWRUYW5nZW50UGxhbmUoKTsKICAgICAgaW5pdF9HZW9tZXRyeSgpOwogICAgICBpbml0X0dlb21ldHJ5QXR0cmlidXRlKCk7CiAgICAgIGluaXRfR2VvbWV0cnlJbnN0YW5jZSgpOwogICAgICBpbml0X0dlb21ldHJ5T2Zmc2V0QXR0cmlidXRlKCk7CiAgICAgIGluaXRfR2VvbWV0cnlQaXBlbGluZSgpOwogICAgICBpbml0X0luZGV4RGF0YXR5cGUoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIGluaXRfTWF0cml4MygpOwogICAgICBpbml0X1BvbHlnb25HZW9tZXRyeUxpYnJhcnkoKTsKICAgICAgaW5pdF9Qb2x5Z29uUGlwZWxpbmUoKTsKICAgICAgaW5pdF9RdWF0ZXJuaW9uKCk7CiAgICAgIGluaXRfUmVjdGFuZ2xlKCk7CiAgICAgIGluaXRfU3RlcmVvZ3JhcGhpYygpOwogICAgICBpbml0X1ZlcnRleEZvcm1hdCgpOwogICAgICBpbml0X1dpbmRpbmdPcmRlcigpOwogICAgICBzY3JhdGNoQ2FydG8xID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hDYXJ0bzIgPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaEJvdW5kaW5nUmVjdGFuZ2xlID0gbmV3IEJvdW5kaW5nUmVjdGFuZ2xlX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFBvc2l0aW9uMyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaE5vcm1hbDYgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hUYW5nZW50NCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaEJpdGFuZ2VudDQgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHAxU2NyYXRjaDMgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHAyU2NyYXRjaDMgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hQZXJQb3NOb3JtYWwgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hQZXJQb3NUYW5nZW50ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoUGVyUG9zQml0YW5nZW50ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBhcHBlbmRUZXh0dXJlQ29vcmRpbmF0ZXNPcmlnaW4gPSBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCk7CiAgICAgIGFwcGVuZFRleHR1cmVDb29yZGluYXRlc0NhcnRlc2lhbjIgPSBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCk7CiAgICAgIGFwcGVuZFRleHR1cmVDb29yZGluYXRlc0NhcnRlc2lhbjMgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGFwcGVuZFRleHR1cmVDb29yZGluYXRlc1F1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbl9kZWZhdWx0KCk7CiAgICAgIGFwcGVuZFRleHR1cmVDb29yZGluYXRlc01hdHJpeDMgPSBuZXcgTWF0cml4M19kZWZhdWx0KCk7CiAgICAgIHRhbmdlbnRNYXRyaXhTY3JhdGNoMiA9IG5ldyBNYXRyaXgzX2RlZmF1bHQoKTsKICAgICAgY3JlYXRlR2VvbWV0cnlGcm9tUG9zaXRpb25zRXh0cnVkZWRQb3NpdGlvbnMgPSBbXTsKICAgICAgUG9seWdvbkdlb21ldHJ5LmZyb21Qb3NpdGlvbnMgPSBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgICAgb3B0aW9ucyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMsIGRlZmF1bHRWYWx1ZV9kZWZhdWx0LkVNUFRZX09CSkVDVCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJvcHRpb25zLnBvc2l0aW9ucyIsIG9wdGlvbnMucG9zaXRpb25zKTsKICAgICAgICBjb25zdCBuZXdPcHRpb25zID0gewogICAgICAgICAgcG9seWdvbkhpZXJhcmNoeTogewogICAgICAgICAgICBwb3NpdGlvbnM6IG9wdGlvbnMucG9zaXRpb25zCiAgICAgICAgICB9LAogICAgICAgICAgaGVpZ2h0OiBvcHRpb25zLmhlaWdodCwKICAgICAgICAgIGV4dHJ1ZGVkSGVpZ2h0OiBvcHRpb25zLmV4dHJ1ZGVkSGVpZ2h0LAogICAgICAgICAgdmVydGV4Rm9ybWF0OiBvcHRpb25zLnZlcnRleEZvcm1hdCwKICAgICAgICAgIHN0Um90YXRpb246IG9wdGlvbnMuc3RSb3RhdGlvbiwKICAgICAgICAgIGVsbGlwc29pZDogb3B0aW9ucy5lbGxpcHNvaWQsCiAgICAgICAgICBncmFudWxhcml0eTogb3B0aW9ucy5ncmFudWxhcml0eSwKICAgICAgICAgIHBlclBvc2l0aW9uSGVpZ2h0OiBvcHRpb25zLnBlclBvc2l0aW9uSGVpZ2h0LAogICAgICAgICAgY2xvc2VUb3A6IG9wdGlvbnMuY2xvc2VUb3AsCiAgICAgICAgICBjbG9zZUJvdHRvbTogb3B0aW9ucy5jbG9zZUJvdHRvbSwKICAgICAgICAgIG9mZnNldEF0dHJpYnV0ZTogb3B0aW9ucy5vZmZzZXRBdHRyaWJ1dGUsCiAgICAgICAgICBhcmNUeXBlOiBvcHRpb25zLmFyY1R5cGUsCiAgICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZXM6IG9wdGlvbnMudGV4dHVyZUNvb3JkaW5hdGVzCiAgICAgICAgfTsKICAgICAgICByZXR1cm4gbmV3IFBvbHlnb25HZW9tZXRyeShuZXdPcHRpb25zKTsKICAgICAgfTsKICAgICAgUG9seWdvbkdlb21ldHJ5LnBhY2sgPSBmdW5jdGlvbih2YWx1ZSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInZhbHVlIiwgdmFsdWUpOwogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQucGFja1BvbHlnb25IaWVyYXJjaHkoCiAgICAgICAgICB2YWx1ZS5fcG9seWdvbkhpZXJhcmNoeSwKICAgICAgICAgIGFycmF5LAogICAgICAgICAgc3RhcnRpbmdJbmRleCwKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdAogICAgICAgICk7CiAgICAgICAgRWxsaXBzb2lkX2RlZmF1bHQucGFjayh2YWx1ZS5fZWxsaXBzb2lkLCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgVmVydGV4Rm9ybWF0X2RlZmF1bHQucGFjayh2YWx1ZS5fdmVydGV4Rm9ybWF0LCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9oZWlnaHQ7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9leHRydWRlZEhlaWdodDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX2dyYW51bGFyaXR5OwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fc3RSb3RhdGlvbjsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX3BlclBvc2l0aW9uSGVpZ2h0RXh0cnVkZSA/IDEgOiAwOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fcGVyUG9zaXRpb25IZWlnaHQgPyAxIDogMDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX2Nsb3NlVG9wID8gMSA6IDA7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9jbG9zZUJvdHRvbSA/IDEgOiAwOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fc2hhZG93Vm9sdW1lID8gMSA6IDA7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHZhbHVlLl9vZmZzZXRBdHRyaWJ1dGUsIC0xKTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX2FyY1R5cGU7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdCh2YWx1ZS5fdGV4dHVyZUNvb3JkaW5hdGVzKSkgewogICAgICAgICAgc3RhcnRpbmdJbmRleCA9IFBvbHlnb25HZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5wYWNrUG9seWdvbkhpZXJhcmNoeSgKICAgICAgICAgICAgdmFsdWUuX3RleHR1cmVDb29yZGluYXRlcywKICAgICAgICAgICAgYXJyYXksCiAgICAgICAgICAgIHN0YXJ0aW5nSW5kZXgsCiAgICAgICAgICAgIENhcnRlc2lhbjJfZGVmYXVsdAogICAgICAgICAgKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IC0xOwogICAgICAgIH0KICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUucGFja2VkTGVuZ3RoOwogICAgICAgIHJldHVybiBhcnJheTsKICAgICAgfTsKICAgICAgc2NyYXRjaEVsbGlwc29pZDYgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZShFbGxpcHNvaWRfZGVmYXVsdC5VTklUX1NQSEVSRSk7CiAgICAgIHNjcmF0Y2hWZXJ0ZXhGb3JtYXQ5ID0gbmV3IFZlcnRleEZvcm1hdF9kZWZhdWx0KCk7CiAgICAgIGR1bW15T3B0aW9ucyA9IHsKICAgICAgICBwb2x5Z29uSGllcmFyY2h5OiB7fQogICAgICB9OwogICAgICBQb2x5Z29uR2VvbWV0cnkudW5wYWNrID0gZnVuY3Rpb24oYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIGNvbnN0IHBvbHlnb25IaWVyYXJjaHkgPSBQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQudW5wYWNrUG9seWdvbkhpZXJhcmNoeSgKICAgICAgICAgIGFycmF5LAogICAgICAgICAgc3RhcnRpbmdJbmRleCwKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdAogICAgICAgICk7CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IHBvbHlnb25IaWVyYXJjaHkuc3RhcnRpbmdJbmRleDsKICAgICAgICBkZWxldGUgcG9seWdvbkhpZXJhcmNoeS5zdGFydGluZ0luZGV4OwogICAgICAgIGNvbnN0IGVsbGlwc29pZCA9IEVsbGlwc29pZF9kZWZhdWx0LnVucGFjayhhcnJheSwgc3RhcnRpbmdJbmRleCwgc2NyYXRjaEVsbGlwc29pZDYpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gRWxsaXBzb2lkX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIGNvbnN0IHZlcnRleEZvcm1hdCA9IFZlcnRleEZvcm1hdF9kZWZhdWx0LnVucGFjaygKICAgICAgICAgIGFycmF5LAogICAgICAgICAgc3RhcnRpbmdJbmRleCwKICAgICAgICAgIHNjcmF0Y2hWZXJ0ZXhGb3JtYXQ5CiAgICAgICAgKTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IFZlcnRleEZvcm1hdF9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBjb25zdCBoZWlnaHQgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IGV4dHJ1ZGVkSGVpZ2h0ID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBncmFudWxhcml0eSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3Qgc3RSb3RhdGlvbiA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3QgcGVyUG9zaXRpb25IZWlnaHRFeHRydWRlID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9PT0gMTsKICAgICAgICBjb25zdCBwZXJQb3NpdGlvbkhlaWdodCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPT09IDE7CiAgICAgICAgY29uc3QgY2xvc2VUb3AgPSBhcnJheVtzdGFydGluZ0luZGV4KytdID09PSAxOwogICAgICAgIGNvbnN0IGNsb3NlQm90dG9tID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9PT0gMTsKICAgICAgICBjb25zdCBzaGFkb3dWb2x1bWUgPSBhcnJheVtzdGFydGluZ0luZGV4KytdID09PSAxOwogICAgICAgIGNvbnN0IG9mZnNldEF0dHJpYnV0ZSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3QgYXJjVHlwZSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3QgdGV4dHVyZUNvb3JkaW5hdGVzID0gYXJyYXlbc3RhcnRpbmdJbmRleF0gPT09IC0xID8gdm9pZCAwIDogUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LnVucGFja1BvbHlnb25IaWVyYXJjaHkoCiAgICAgICAgICBhcnJheSwKICAgICAgICAgIHN0YXJ0aW5nSW5kZXgsCiAgICAgICAgICBDYXJ0ZXNpYW4yX2RlZmF1bHQKICAgICAgICApOwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQodGV4dHVyZUNvb3JkaW5hdGVzKSkgewogICAgICAgICAgc3RhcnRpbmdJbmRleCA9IHRleHR1cmVDb29yZGluYXRlcy5zdGFydGluZ0luZGV4OwogICAgICAgICAgZGVsZXRlIHRleHR1cmVDb29yZGluYXRlcy5zdGFydGluZ0luZGV4OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBzdGFydGluZ0luZGV4Kys7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHBhY2tlZExlbmd0aCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IFBvbHlnb25HZW9tZXRyeShkdW1teU9wdGlvbnMpOwogICAgICAgIH0KICAgICAgICByZXN1bHQuX3BvbHlnb25IaWVyYXJjaHkgPSBwb2x5Z29uSGllcmFyY2h5OwogICAgICAgIHJlc3VsdC5fZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUoZWxsaXBzb2lkLCByZXN1bHQuX2VsbGlwc29pZCk7CiAgICAgICAgcmVzdWx0Ll92ZXJ0ZXhGb3JtYXQgPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5jbG9uZSh2ZXJ0ZXhGb3JtYXQsIHJlc3VsdC5fdmVydGV4Rm9ybWF0KTsKICAgICAgICByZXN1bHQuX2hlaWdodCA9IGhlaWdodDsKICAgICAgICByZXN1bHQuX2V4dHJ1ZGVkSGVpZ2h0ID0gZXh0cnVkZWRIZWlnaHQ7CiAgICAgICAgcmVzdWx0Ll9ncmFudWxhcml0eSA9IGdyYW51bGFyaXR5OwogICAgICAgIHJlc3VsdC5fc3RSb3RhdGlvbiA9IHN0Um90YXRpb247CiAgICAgICAgcmVzdWx0Ll9wZXJQb3NpdGlvbkhlaWdodEV4dHJ1ZGUgPSBwZXJQb3NpdGlvbkhlaWdodEV4dHJ1ZGU7CiAgICAgICAgcmVzdWx0Ll9wZXJQb3NpdGlvbkhlaWdodCA9IHBlclBvc2l0aW9uSGVpZ2h0OwogICAgICAgIHJlc3VsdC5fY2xvc2VUb3AgPSBjbG9zZVRvcDsKICAgICAgICByZXN1bHQuX2Nsb3NlQm90dG9tID0gY2xvc2VCb3R0b207CiAgICAgICAgcmVzdWx0Ll9zaGFkb3dWb2x1bWUgPSBzaGFkb3dWb2x1bWU7CiAgICAgICAgcmVzdWx0Ll9vZmZzZXRBdHRyaWJ1dGUgPSBvZmZzZXRBdHRyaWJ1dGUgPT09IC0xID8gdm9pZCAwIDogb2Zmc2V0QXR0cmlidXRlOwogICAgICAgIHJlc3VsdC5fYXJjVHlwZSA9IGFyY1R5cGU7CiAgICAgICAgcmVzdWx0Ll90ZXh0dXJlQ29vcmRpbmF0ZXMgPSB0ZXh0dXJlQ29vcmRpbmF0ZXM7CiAgICAgICAgcmVzdWx0LnBhY2tlZExlbmd0aCA9IHBhY2tlZExlbmd0aDsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBzY3JhdGNoQ2FydGVzaWFuMDIgPSBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4xOCA9IG5ldyBDYXJ0ZXNpYW4yX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFBvbGFyQ2xvc2VzdCA9IG5ldyBTdGVyZW9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFBvbGFyID0gbmV3IFN0ZXJlb2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoUG9sYXJQcmV2aW91cyA9IG5ldyBTdGVyZW9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgcG9seWdvbiA9IHsKICAgICAgICBub3J0aEFuZ2xlOiAwLAogICAgICAgIHNvdXRoQW5nbGU6IDAsCiAgICAgICAgd2VzdE92ZXJJZGw6IDAsCiAgICAgICAgZWFzdE92ZXJJZGw6IDAKICAgICAgfTsKICAgICAgUG9seWdvbkdlb21ldHJ5LmNvbXB1dGVSZWN0YW5nbGVGcm9tUG9zaXRpb25zID0gZnVuY3Rpb24ocG9zaXRpb25zLCBlbGxpcHNvaWQsIGFyY1R5cGUsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgicG9zaXRpb25zIiwgcG9zaXRpb25zKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgUmVjdGFuZ2xlX2RlZmF1bHQoKTsKICAgICAgICB9CiAgICAgICAgaWYgKHBvc2l0aW9ucy5sZW5ndGggPCAzKSB7CiAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0KICAgICAgICByZXN1bHQud2VzdCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTsKICAgICAgICByZXN1bHQuZWFzdCA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTsKICAgICAgICByZXN1bHQuc291dGggPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7CiAgICAgICAgcmVzdWx0Lm5vcnRoID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZOwogICAgICAgIHBvbHlnb24ubm9ydGhBbmdsZSA9IDA7CiAgICAgICAgcG9seWdvbi5zb3V0aEFuZ2xlID0gMDsKICAgICAgICBwb2x5Z29uLndlc3RPdmVySWRsID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOwogICAgICAgIHBvbHlnb24uZWFzdE92ZXJJZGwgPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7CiAgICAgICAgY29uc3QgcG9zaXRpb25zTGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aDsKICAgICAgICBsZXQgbGFzdFBvbGFyUG9zaXRpb24gPSBTdGVyZW9ncmFwaGljX2RlZmF1bHQuZnJvbUNhcnRlc2lhbigKICAgICAgICAgIHBvc2l0aW9uc1swXSwKICAgICAgICAgIHNjcmF0Y2hQb2xhclByZXZpb3VzCiAgICAgICAgKTsKICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHBvc2l0aW9uc0xlbmd0aDsgaSsrKSB7CiAgICAgICAgICBjb25zdCBwb2xhclBvc2l0aW9uID0gU3RlcmVvZ3JhcGhpY19kZWZhdWx0LmZyb21DYXJ0ZXNpYW4oCiAgICAgICAgICAgIHBvc2l0aW9uc1tpXSwKICAgICAgICAgICAgc2NyYXRjaFBvbGFyCiAgICAgICAgICApOwogICAgICAgICAgZXhwYW5kUmVjdGFuZ2xlKAogICAgICAgICAgICBwb2xhclBvc2l0aW9uLAogICAgICAgICAgICBsYXN0UG9sYXJQb3NpdGlvbiwKICAgICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgICBhcmNUeXBlLAogICAgICAgICAgICBwb2x5Z29uLAogICAgICAgICAgICByZXN1bHQKICAgICAgICAgICk7CiAgICAgICAgICBsYXN0UG9sYXJQb3NpdGlvbiA9IFN0ZXJlb2dyYXBoaWNfZGVmYXVsdC5jbG9uZShwb2xhclBvc2l0aW9uLCBsYXN0UG9sYXJQb3NpdGlvbik7CiAgICAgICAgfQogICAgICAgIGV4cGFuZFJlY3RhbmdsZSgKICAgICAgICAgIFN0ZXJlb2dyYXBoaWNfZGVmYXVsdC5mcm9tQ2FydGVzaWFuKHBvc2l0aW9uc1swXSwgc2NyYXRjaFBvbGFyKSwKICAgICAgICAgIGxhc3RQb2xhclBvc2l0aW9uLAogICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgYXJjVHlwZSwKICAgICAgICAgIHBvbHlnb24sCiAgICAgICAgICByZXN1bHQKICAgICAgICApOwogICAgICAgIGlmIChyZXN1bHQuZWFzdCAtIHJlc3VsdC53ZXN0ID4gcG9seWdvbi5lYXN0T3ZlcklkbCAtIHBvbHlnb24ud2VzdE92ZXJJZGwpIHsKICAgICAgICAgIHJlc3VsdC53ZXN0ID0gcG9seWdvbi53ZXN0T3ZlcklkbDsKICAgICAgICAgIHJlc3VsdC5lYXN0ID0gcG9seWdvbi5lYXN0T3ZlcklkbDsKICAgICAgICAgIGlmIChyZXN1bHQuZWFzdCA+IE1hdGhfZGVmYXVsdC5QSSkgewogICAgICAgICAgICByZXN1bHQuZWFzdCA9IHJlc3VsdC5lYXN0IC0gTWF0aF9kZWZhdWx0LlRXT19QSTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChyZXN1bHQud2VzdCA+IE1hdGhfZGVmYXVsdC5QSSkgewogICAgICAgICAgICByZXN1bHQud2VzdCA9IHJlc3VsdC53ZXN0IC0gTWF0aF9kZWZhdWx0LlRXT19QSTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKE1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgTWF0aC5hYnMocG9seWdvbi5ub3J0aEFuZ2xlKSwKICAgICAgICAgIE1hdGhfZGVmYXVsdC5UV09fUEksCiAgICAgICAgICBNYXRoX2RlZmF1bHQuRVBTSUxPTjEwCiAgICAgICAgKSkgewogICAgICAgICAgcmVzdWx0Lm5vcnRoID0gTWF0aF9kZWZhdWx0LlBJX09WRVJfVFdPOwogICAgICAgICAgcmVzdWx0LmVhc3QgPSBNYXRoX2RlZmF1bHQuUEk7CiAgICAgICAgICByZXN1bHQud2VzdCA9IC1NYXRoX2RlZmF1bHQuUEk7CiAgICAgICAgfQogICAgICAgIGlmIChNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbigKICAgICAgICAgIE1hdGguYWJzKHBvbHlnb24uc291dGhBbmdsZSksCiAgICAgICAgICBNYXRoX2RlZmF1bHQuVFdPX1BJLAogICAgICAgICAgTWF0aF9kZWZhdWx0LkVQU0lMT04xMAogICAgICAgICkpIHsKICAgICAgICAgIHJlc3VsdC5zb3V0aCA9IC1NYXRoX2RlZmF1bHQuUElfT1ZFUl9UV087CiAgICAgICAgICByZXN1bHQuZWFzdCA9IE1hdGhfZGVmYXVsdC5QSTsKICAgICAgICAgIHJlc3VsdC53ZXN0ID0gLU1hdGhfZGVmYXVsdC5QSTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgc2NyYXRjaFBvbGFyRm9yUGxhbmUgPSBuZXcgU3RlcmVvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWNDeWxsaW5kcmljYWwgPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgUG9seWdvbkdlb21ldHJ5LmNyZWF0ZUdlb21ldHJ5ID0gZnVuY3Rpb24ocG9seWdvbkdlb21ldHJ5KSB7CiAgICAgICAgY29uc3QgdmVydGV4Rm9ybWF0ID0gcG9seWdvbkdlb21ldHJ5Ll92ZXJ0ZXhGb3JtYXQ7CiAgICAgICAgY29uc3QgZWxsaXBzb2lkID0gcG9seWdvbkdlb21ldHJ5Ll9lbGxpcHNvaWQ7CiAgICAgICAgY29uc3QgZ3JhbnVsYXJpdHkgPSBwb2x5Z29uR2VvbWV0cnkuX2dyYW51bGFyaXR5OwogICAgICAgIGNvbnN0IHN0Um90YXRpb24gPSBwb2x5Z29uR2VvbWV0cnkuX3N0Um90YXRpb247CiAgICAgICAgY29uc3QgcG9seWdvbkhpZXJhcmNoeSA9IHBvbHlnb25HZW9tZXRyeS5fcG9seWdvbkhpZXJhcmNoeTsKICAgICAgICBjb25zdCBwZXJQb3NpdGlvbkhlaWdodCA9IHBvbHlnb25HZW9tZXRyeS5fcGVyUG9zaXRpb25IZWlnaHQ7CiAgICAgICAgY29uc3QgY2xvc2VUb3AgPSBwb2x5Z29uR2VvbWV0cnkuX2Nsb3NlVG9wOwogICAgICAgIGNvbnN0IGNsb3NlQm90dG9tID0gcG9seWdvbkdlb21ldHJ5Ll9jbG9zZUJvdHRvbTsKICAgICAgICBjb25zdCBhcmNUeXBlID0gcG9seWdvbkdlb21ldHJ5Ll9hcmNUeXBlOwogICAgICAgIGNvbnN0IHRleHR1cmVDb29yZGluYXRlcyA9IHBvbHlnb25HZW9tZXRyeS5fdGV4dHVyZUNvb3JkaW5hdGVzOwogICAgICAgIGNvbnN0IGhhc1RleHR1cmVDb29yZGluYXRlcyA9IGRlZmluZWRfZGVmYXVsdCh0ZXh0dXJlQ29vcmRpbmF0ZXMpOwogICAgICAgIGNvbnN0IG91dGVyUG9zaXRpb25zID0gcG9seWdvbkhpZXJhcmNoeS5wb3NpdGlvbnM7CiAgICAgICAgaWYgKG91dGVyUG9zaXRpb25zLmxlbmd0aCA8IDMpIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgY29uc3QgcmVjdGFuZ2xlID0gcG9seWdvbkdlb21ldHJ5LnJlY3RhbmdsZTsKICAgICAgICBjb25zdCByZXN1bHRzID0gUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LnBvbHlnb25zRnJvbUhpZXJhcmNoeSgKICAgICAgICAgIHBvbHlnb25IaWVyYXJjaHksCiAgICAgICAgICBoYXNUZXh0dXJlQ29vcmRpbmF0ZXMsCiAgICAgICAgICBjcmVhdGVQcm9qZWN0VG8yZChyZWN0YW5nbGUsIG91dGVyUG9zaXRpb25zLCBlbGxpcHNvaWQpLAogICAgICAgICAgIXBlclBvc2l0aW9uSGVpZ2h0LAogICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgY3JlYXRlU3BsaXRQb2x5Z29ucyhyZWN0YW5nbGUsIGVsbGlwc29pZCwgYXJjVHlwZSwgcGVyUG9zaXRpb25IZWlnaHQpCiAgICAgICAgKTsKICAgICAgICBjb25zdCBoaWVyYXJjaHkgPSByZXN1bHRzLmhpZXJhcmNoeTsKICAgICAgICBjb25zdCBwb2x5Z29ucyA9IHJlc3VsdHMucG9seWdvbnM7CiAgICAgICAgY29uc3QgZHVtbXlGdW5jdGlvbiA9IGZ1bmN0aW9uKGlkZW50aXR5KSB7CiAgICAgICAgICByZXR1cm4gaWRlbnRpdHk7CiAgICAgICAgfTsKICAgICAgICBjb25zdCB0ZXh0dXJlQ29vcmRpbmF0ZVBvbHlnb25zID0gaGFzVGV4dHVyZUNvb3JkaW5hdGVzID8gUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LnBvbHlnb25zRnJvbUhpZXJhcmNoeSgKICAgICAgICAgIHRleHR1cmVDb29yZGluYXRlcywKICAgICAgICAgIHRydWUsCiAgICAgICAgICBkdW1teUZ1bmN0aW9uLAogICAgICAgICAgZmFsc2UsCiAgICAgICAgICBlbGxpcHNvaWQKICAgICAgICApLnBvbHlnb25zIDogdm9pZCAwOwogICAgICAgIGlmIChoaWVyYXJjaHkubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGNvbnN0IG91dGVyUmluZyA9IGhpZXJhcmNoeVswXS5vdXRlclJpbmc7CiAgICAgICAgY29uc3QgYm91bmRpbmdSZWN0YW5nbGUgPSBjb21wdXRlQm91bmRpbmdSZWN0YW5nbGUoCiAgICAgICAgICBvdXRlclJpbmcsCiAgICAgICAgICByZWN0YW5nbGUsCiAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICBzdFJvdGF0aW9uCiAgICAgICAgKTsKICAgICAgICBjb25zdCBnZW9tZXRyaWVzID0gW107CiAgICAgICAgY29uc3QgaGVpZ2h0ID0gcG9seWdvbkdlb21ldHJ5Ll9oZWlnaHQ7CiAgICAgICAgY29uc3QgZXh0cnVkZWRIZWlnaHQgPSBwb2x5Z29uR2VvbWV0cnkuX2V4dHJ1ZGVkSGVpZ2h0OwogICAgICAgIGNvbnN0IGV4dHJ1ZGUgPSBwb2x5Z29uR2VvbWV0cnkuX3BlclBvc2l0aW9uSGVpZ2h0RXh0cnVkZSB8fCAhTWF0aF9kZWZhdWx0LmVxdWFsc0Vwc2lsb24oaGVpZ2h0LCBleHRydWRlZEhlaWdodCwgMCwgTWF0aF9kZWZhdWx0LkVQU0lMT04yKTsKICAgICAgICBjb25zdCBvcHRpb25zID0gewogICAgICAgICAgcGVyUG9zaXRpb25IZWlnaHQsCiAgICAgICAgICB2ZXJ0ZXhGb3JtYXQsCiAgICAgICAgICBnZW9tZXRyeTogdm9pZCAwLAogICAgICAgICAgcm90YXRpb25BeGlzOiBnZXRUYW5nZW50UGxhbmUocmVjdGFuZ2xlLCBvdXRlclJpbmcsIGVsbGlwc29pZCkucGxhbmUubm9ybWFsLAogICAgICAgICAgcHJvamVjdFRvMmQ6IGNyZWF0ZVByb2plY3RQb3NpdGlvblRvMmQocmVjdGFuZ2xlLCBvdXRlclJpbmcsIGVsbGlwc29pZCksCiAgICAgICAgICBib3VuZGluZ1JlY3RhbmdsZSwKICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgIHN0Um90YXRpb24sCiAgICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZXM6IHZvaWQgMCwKICAgICAgICAgIGJvdHRvbTogZmFsc2UsCiAgICAgICAgICB0b3A6IHRydWUsCiAgICAgICAgICB3YWxsOiBmYWxzZSwKICAgICAgICAgIGV4dHJ1ZGU6IGZhbHNlLAogICAgICAgICAgYXJjVHlwZQogICAgICAgIH07CiAgICAgICAgbGV0IGk7CiAgICAgICAgaWYgKGV4dHJ1ZGUpIHsKICAgICAgICAgIG9wdGlvbnMuZXh0cnVkZSA9IHRydWU7CiAgICAgICAgICBvcHRpb25zLnRvcCA9IGNsb3NlVG9wOwogICAgICAgICAgb3B0aW9ucy5ib3R0b20gPSBjbG9zZUJvdHRvbTsKICAgICAgICAgIG9wdGlvbnMuc2hhZG93Vm9sdW1lID0gcG9seWdvbkdlb21ldHJ5Ll9zaGFkb3dWb2x1bWU7CiAgICAgICAgICBvcHRpb25zLm9mZnNldEF0dHJpYnV0ZSA9IHBvbHlnb25HZW9tZXRyeS5fb2Zmc2V0QXR0cmlidXRlOwogICAgICAgICAgZm9yIChpID0gMDsgaSA8IHBvbHlnb25zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGNvbnN0IHNwbGl0R2VvbWV0cnkgPSBjcmVhdGVHZW9tZXRyeUZyb21Qb3NpdGlvbnNFeHRydWRlZCgKICAgICAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICAgICAgcG9seWdvbnNbaV0sCiAgICAgICAgICAgICAgaGFzVGV4dHVyZUNvb3JkaW5hdGVzID8gdGV4dHVyZUNvb3JkaW5hdGVQb2x5Z29uc1tpXSA6IHZvaWQgMCwKICAgICAgICAgICAgICBncmFudWxhcml0eSwKICAgICAgICAgICAgICBoaWVyYXJjaHlbaV0sCiAgICAgICAgICAgICAgcGVyUG9zaXRpb25IZWlnaHQsCiAgICAgICAgICAgICAgY2xvc2VUb3AsCiAgICAgICAgICAgICAgY2xvc2VCb3R0b20sCiAgICAgICAgICAgICAgdmVydGV4Rm9ybWF0LAogICAgICAgICAgICAgIGFyY1R5cGUKICAgICAgICAgICAgKTsKICAgICAgICAgICAgbGV0IHRvcEFuZEJvdHRvbTsKICAgICAgICAgICAgaWYgKGNsb3NlVG9wICYmIGNsb3NlQm90dG9tKSB7CiAgICAgICAgICAgICAgdG9wQW5kQm90dG9tID0gc3BsaXRHZW9tZXRyeS50b3BBbmRCb3R0b207CiAgICAgICAgICAgICAgb3B0aW9ucy5nZW9tZXRyeSA9IFBvbHlnb25HZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5zY2FsZVRvR2VvZGV0aWNIZWlnaHRFeHRydWRlZCgKICAgICAgICAgICAgICAgIHRvcEFuZEJvdHRvbS5nZW9tZXRyeSwKICAgICAgICAgICAgICAgIGhlaWdodCwKICAgICAgICAgICAgICAgIGV4dHJ1ZGVkSGVpZ2h0LAogICAgICAgICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgICAgICAgcGVyUG9zaXRpb25IZWlnaHQKICAgICAgICAgICAgICApOwogICAgICAgICAgICB9IGVsc2UgaWYgKGNsb3NlVG9wKSB7CiAgICAgICAgICAgICAgdG9wQW5kQm90dG9tID0gc3BsaXRHZW9tZXRyeS50b3BBbmRCb3R0b207CiAgICAgICAgICAgICAgdG9wQW5kQm90dG9tLmdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzID0gUG9seWdvblBpcGVsaW5lX2RlZmF1bHQuc2NhbGVUb0dlb2RldGljSGVpZ2h0KAogICAgICAgICAgICAgICAgdG9wQW5kQm90dG9tLmdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzLAogICAgICAgICAgICAgICAgaGVpZ2h0LAogICAgICAgICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgICAgICAgIXBlclBvc2l0aW9uSGVpZ2h0CiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICBvcHRpb25zLmdlb21ldHJ5ID0gdG9wQW5kQm90dG9tLmdlb21ldHJ5OwogICAgICAgICAgICB9IGVsc2UgaWYgKGNsb3NlQm90dG9tKSB7CiAgICAgICAgICAgICAgdG9wQW5kQm90dG9tID0gc3BsaXRHZW9tZXRyeS50b3BBbmRCb3R0b207CiAgICAgICAgICAgICAgdG9wQW5kQm90dG9tLmdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzID0gUG9seWdvblBpcGVsaW5lX2RlZmF1bHQuc2NhbGVUb0dlb2RldGljSGVpZ2h0KAogICAgICAgICAgICAgICAgdG9wQW5kQm90dG9tLmdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzLAogICAgICAgICAgICAgICAgZXh0cnVkZWRIZWlnaHQsCiAgICAgICAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICAgICAgICB0cnVlCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICBvcHRpb25zLmdlb21ldHJ5ID0gdG9wQW5kQm90dG9tLmdlb21ldHJ5OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChjbG9zZVRvcCB8fCBjbG9zZUJvdHRvbSkgewogICAgICAgICAgICAgIG9wdGlvbnMud2FsbCA9IGZhbHNlOwogICAgICAgICAgICAgIHRvcEFuZEJvdHRvbS5nZW9tZXRyeSA9IGNvbXB1dGVBdHRyaWJ1dGVzKG9wdGlvbnMpOwogICAgICAgICAgICAgIGdlb21ldHJpZXMucHVzaCh0b3BBbmRCb3R0b20pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IHdhbGxzID0gc3BsaXRHZW9tZXRyeS53YWxsczsKICAgICAgICAgICAgb3B0aW9ucy53YWxsID0gdHJ1ZTsKICAgICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCB3YWxscy5sZW5ndGg7IGsrKykgewogICAgICAgICAgICAgIGNvbnN0IHdhbGwgPSB3YWxsc1trXTsKICAgICAgICAgICAgICBvcHRpb25zLmdlb21ldHJ5ID0gUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LnNjYWxlVG9HZW9kZXRpY0hlaWdodEV4dHJ1ZGVkKAogICAgICAgICAgICAgICAgd2FsbC5nZW9tZXRyeSwKICAgICAgICAgICAgICAgIGhlaWdodCwKICAgICAgICAgICAgICAgIGV4dHJ1ZGVkSGVpZ2h0LAogICAgICAgICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgICAgICAgcGVyUG9zaXRpb25IZWlnaHQKICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIHdhbGwuZ2VvbWV0cnkgPSBjb21wdXRlQXR0cmlidXRlcyhvcHRpb25zKTsKICAgICAgICAgICAgICBnZW9tZXRyaWVzLnB1c2god2FsbCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgZm9yIChpID0gMDsgaSA8IHBvbHlnb25zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGNvbnN0IGdlb21ldHJ5SW5zdGFuY2UgPSBuZXcgR2VvbWV0cnlJbnN0YW5jZV9kZWZhdWx0KHsKICAgICAgICAgICAgICBnZW9tZXRyeTogUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmNyZWF0ZUdlb21ldHJ5RnJvbVBvc2l0aW9ucygKICAgICAgICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgICAgICAgIHBvbHlnb25zW2ldLAogICAgICAgICAgICAgICAgaGFzVGV4dHVyZUNvb3JkaW5hdGVzID8gdGV4dHVyZUNvb3JkaW5hdGVQb2x5Z29uc1tpXSA6IHZvaWQgMCwKICAgICAgICAgICAgICAgIGdyYW51bGFyaXR5LAogICAgICAgICAgICAgICAgcGVyUG9zaXRpb25IZWlnaHQsCiAgICAgICAgICAgICAgICB2ZXJ0ZXhGb3JtYXQsCiAgICAgICAgICAgICAgICBhcmNUeXBlCiAgICAgICAgICAgICAgKQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgZ2VvbWV0cnlJbnN0YW5jZS5nZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcyA9IFBvbHlnb25QaXBlbGluZV9kZWZhdWx0LnNjYWxlVG9HZW9kZXRpY0hlaWdodCgKICAgICAgICAgICAgICBnZW9tZXRyeUluc3RhbmNlLmdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzLAogICAgICAgICAgICAgIGhlaWdodCwKICAgICAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICAgICAgIXBlclBvc2l0aW9uSGVpZ2h0CiAgICAgICAgICAgICk7CiAgICAgICAgICAgIG9wdGlvbnMuZ2VvbWV0cnkgPSBnZW9tZXRyeUluc3RhbmNlLmdlb21ldHJ5OwogICAgICAgICAgICBnZW9tZXRyeUluc3RhbmNlLmdlb21ldHJ5ID0gY29tcHV0ZUF0dHJpYnV0ZXMob3B0aW9ucyk7CiAgICAgICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQocG9seWdvbkdlb21ldHJ5Ll9vZmZzZXRBdHRyaWJ1dGUpKSB7CiAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gZ2VvbWV0cnlJbnN0YW5jZS5nZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcy5sZW5ndGg7CiAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0VmFsdWUgPSBwb2x5Z29uR2VvbWV0cnkuX29mZnNldEF0dHJpYnV0ZSA9PT0gR2VvbWV0cnlPZmZzZXRBdHRyaWJ1dGVfZGVmYXVsdC5OT05FID8gMCA6IDE7CiAgICAgICAgICAgICAgY29uc3QgYXBwbHlPZmZzZXQgPSBuZXcgVWludDhBcnJheShsZW5ndGggLyAzKS5maWxsKG9mZnNldFZhbHVlKTsKICAgICAgICAgICAgICBnZW9tZXRyeUluc3RhbmNlLmdlb21ldHJ5LmF0dHJpYnV0ZXMuYXBwbHlPZmZzZXQgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5VTlNJR05FRF9CWVRFLAogICAgICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMSwKICAgICAgICAgICAgICAgIHZhbHVlczogYXBwbHlPZmZzZXQKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBnZW9tZXRyaWVzLnB1c2goZ2VvbWV0cnlJbnN0YW5jZSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNvbnN0IGdlb21ldHJ5ID0gR2VvbWV0cnlQaXBlbGluZV9kZWZhdWx0LmNvbWJpbmVJbnN0YW5jZXMoZ2VvbWV0cmllcylbMF07CiAgICAgICAgZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXMgPSBuZXcgRmxvYXQ2NEFycmF5KAogICAgICAgICAgZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXMKICAgICAgICApOwogICAgICAgIGdlb21ldHJ5LmluZGljZXMgPSBJbmRleERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheSgKICAgICAgICAgIGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzLmxlbmd0aCAvIDMsCiAgICAgICAgICBnZW9tZXRyeS5pbmRpY2VzCiAgICAgICAgKTsKICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlczsKICAgICAgICBjb25zdCBib3VuZGluZ1NwaGVyZSA9IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQuZnJvbVZlcnRpY2VzKAogICAgICAgICAgYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXMKICAgICAgICApOwogICAgICAgIGlmICghdmVydGV4Rm9ybWF0LnBvc2l0aW9uKSB7CiAgICAgICAgICBkZWxldGUgYXR0cmlidXRlcy5wb3NpdGlvbjsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG5ldyBHZW9tZXRyeV9kZWZhdWx0KHsKICAgICAgICAgIGF0dHJpYnV0ZXMsCiAgICAgICAgICBpbmRpY2VzOiBnZW9tZXRyeS5pbmRpY2VzLAogICAgICAgICAgcHJpbWl0aXZlVHlwZTogZ2VvbWV0cnkucHJpbWl0aXZlVHlwZSwKICAgICAgICAgIGJvdW5kaW5nU3BoZXJlLAogICAgICAgICAgb2Zmc2V0QXR0cmlidXRlOiBwb2x5Z29uR2VvbWV0cnkuX29mZnNldEF0dHJpYnV0ZQogICAgICAgIH0pOwogICAgICB9OwogICAgICBQb2x5Z29uR2VvbWV0cnkuY3JlYXRlU2hhZG93Vm9sdW1lID0gZnVuY3Rpb24ocG9seWdvbkdlb21ldHJ5LCBtaW5IZWlnaHRGdW5jLCBtYXhIZWlnaHRGdW5jKSB7CiAgICAgICAgY29uc3QgZ3JhbnVsYXJpdHkgPSBwb2x5Z29uR2VvbWV0cnkuX2dyYW51bGFyaXR5OwogICAgICAgIGNvbnN0IGVsbGlwc29pZCA9IHBvbHlnb25HZW9tZXRyeS5fZWxsaXBzb2lkOwogICAgICAgIGNvbnN0IG1pbkhlaWdodCA9IG1pbkhlaWdodEZ1bmMoZ3JhbnVsYXJpdHksIGVsbGlwc29pZCk7CiAgICAgICAgY29uc3QgbWF4SGVpZ2h0ID0gbWF4SGVpZ2h0RnVuYyhncmFudWxhcml0eSwgZWxsaXBzb2lkKTsKICAgICAgICByZXR1cm4gbmV3IFBvbHlnb25HZW9tZXRyeSh7CiAgICAgICAgICBwb2x5Z29uSGllcmFyY2h5OiBwb2x5Z29uR2VvbWV0cnkuX3BvbHlnb25IaWVyYXJjaHksCiAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICBzdFJvdGF0aW9uOiBwb2x5Z29uR2VvbWV0cnkuX3N0Um90YXRpb24sCiAgICAgICAgICBncmFudWxhcml0eSwKICAgICAgICAgIHBlclBvc2l0aW9uSGVpZ2h0OiBmYWxzZSwKICAgICAgICAgIGV4dHJ1ZGVkSGVpZ2h0OiBtaW5IZWlnaHQsCiAgICAgICAgICBoZWlnaHQ6IG1heEhlaWdodCwKICAgICAgICAgIHZlcnRleEZvcm1hdDogVmVydGV4Rm9ybWF0X2RlZmF1bHQuUE9TSVRJT05fT05MWSwKICAgICAgICAgIHNoYWRvd1ZvbHVtZTogdHJ1ZSwKICAgICAgICAgIGFyY1R5cGU6IHBvbHlnb25HZW9tZXRyeS5fYXJjVHlwZQogICAgICAgIH0pOwogICAgICB9OwogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhQb2x5Z29uR2VvbWV0cnkucHJvdG90eXBlLCB7CiAgICAgICAgLyoqCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKi8KICAgICAgICByZWN0YW5nbGU6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHRoaXMuX3JlY3RhbmdsZSkpIHsKICAgICAgICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSB0aGlzLl9wb2x5Z29uSGllcmFyY2h5LnBvc2l0aW9uczsKICAgICAgICAgICAgICB0aGlzLl9yZWN0YW5nbGUgPSBQb2x5Z29uR2VvbWV0cnkuY29tcHV0ZVJlY3RhbmdsZUZyb21Qb3NpdGlvbnMoCiAgICAgICAgICAgICAgICBwb3NpdGlvbnMsCiAgICAgICAgICAgICAgICB0aGlzLl9lbGxpcHNvaWQsCiAgICAgICAgICAgICAgICB0aGlzLl9hcmNUeXBlCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVjdGFuZ2xlOwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgLyoqCiAgICAgICAgICogRm9yIHJlbWFwcGluZyB0ZXh0dXJlIGNvb3JkaW5hdGVzIHdoZW4gcmVuZGVyaW5nIFBvbHlnb25HZW9tZXRyaWVzIGFzIEdyb3VuZFByaW1pdGl2ZXMuCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKi8KICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZVJvdGF0aW9uUG9pbnRzOiB7CiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdCh0aGlzLl90ZXh0dXJlQ29vcmRpbmF0ZVJvdGF0aW9uUG9pbnRzKSkgewogICAgICAgICAgICAgIHRoaXMuX3RleHR1cmVDb29yZGluYXRlUm90YXRpb25Qb2ludHMgPSB0ZXh0dXJlQ29vcmRpbmF0ZVJvdGF0aW9uUG9pbnRzMih0aGlzKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdGhpcy5fdGV4dHVyZUNvb3JkaW5hdGVSb3RhdGlvblBvaW50czsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgICBQb2x5Z29uR2VvbWV0cnlfZGVmYXVsdCA9IFBvbHlnb25HZW9tZXRyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZVBvbHlnb25HZW9tZXRyeS5qcwogIHZhciBjcmVhdGVQb2x5Z29uR2VvbWV0cnlfZXhwb3J0cyA9IHt9OwogIF9fZXhwb3J0KGNyZWF0ZVBvbHlnb25HZW9tZXRyeV9leHBvcnRzLCB7CiAgICBkZWZhdWx0OiAoKSA9PiBjcmVhdGVQb2x5Z29uR2VvbWV0cnlfZGVmYXVsdAogIH0pOwogIGZ1bmN0aW9uIGNyZWF0ZVBvbHlnb25HZW9tZXRyeShwb2x5Z29uR2VvbWV0cnksIG9mZnNldCkgewogICAgaWYgKGRlZmluZWRfZGVmYXVsdChvZmZzZXQpKSB7CiAgICAgIHBvbHlnb25HZW9tZXRyeSA9IFBvbHlnb25HZW9tZXRyeV9kZWZhdWx0LnVucGFjayhwb2x5Z29uR2VvbWV0cnksIG9mZnNldCk7CiAgICB9CiAgICBwb2x5Z29uR2VvbWV0cnkuX2VsbGlwc29pZCA9IEVsbGlwc29pZF9kZWZhdWx0LmNsb25lKHBvbHlnb25HZW9tZXRyeS5fZWxsaXBzb2lkKTsKICAgIHJldHVybiBQb2x5Z29uR2VvbWV0cnlfZGVmYXVsdC5jcmVhdGVHZW9tZXRyeShwb2x5Z29uR2VvbWV0cnkpOwogIH0KICB2YXIgY3JlYXRlUG9seWdvbkdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfY3JlYXRlUG9seWdvbkdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVQb2x5Z29uR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9Qb2x5Z29uR2VvbWV0cnkoKTsKICAgICAgY3JlYXRlUG9seWdvbkdlb21ldHJ5X2RlZmF1bHQgPSBjcmVhdGVQb2x5Z29uR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9Qb2x5Z29uT3V0bGluZUdlb21ldHJ5LmpzCiAgZnVuY3Rpb24gY3JlYXRlR2VvbWV0cnlGcm9tUG9zaXRpb25zMihlbGxpcHNvaWQsIHBvc2l0aW9ucywgbWluRGlzdGFuY2UsIHBlclBvc2l0aW9uSGVpZ2h0LCBhcmNUeXBlKSB7CiAgICBjb25zdCB0YW5nZW50UGxhbmUgPSBFbGxpcHNvaWRUYW5nZW50UGxhbmVfZGVmYXVsdC5mcm9tUG9pbnRzKHBvc2l0aW9ucywgZWxsaXBzb2lkKTsKICAgIGNvbnN0IHBvc2l0aW9uczJEID0gdGFuZ2VudFBsYW5lLnByb2plY3RQb2ludHNPbnRvUGxhbmUoCiAgICAgIHBvc2l0aW9ucywKICAgICAgY3JlYXRlR2VvbWV0cnlGcm9tUG9zaXRpb25zUG9zaXRpb25zCiAgICApOwogICAgY29uc3Qgb3JpZ2luYWxXaW5kaW5nT3JkZXIgPSBQb2x5Z29uUGlwZWxpbmVfZGVmYXVsdC5jb21wdXRlV2luZGluZ09yZGVyMkQocG9zaXRpb25zMkQpOwogICAgaWYgKG9yaWdpbmFsV2luZGluZ09yZGVyID09PSBXaW5kaW5nT3JkZXJfZGVmYXVsdC5DTE9DS1dJU0UpIHsKICAgICAgcG9zaXRpb25zMkQucmV2ZXJzZSgpOwogICAgICBwb3NpdGlvbnMgPSBwb3NpdGlvbnMuc2xpY2UoKS5yZXZlcnNlKCk7CiAgICB9CiAgICBsZXQgc3ViZGl2aWRlZFBvc2l0aW9uczsKICAgIGxldCBpOwogICAgbGV0IGxlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICBsZXQgaW5kZXggPSAwOwogICAgaWYgKCFwZXJQb3NpdGlvbkhlaWdodCkgewogICAgICBsZXQgbnVtVmVydGljZXMgPSAwOwogICAgICBpZiAoYXJjVHlwZSA9PT0gQXJjVHlwZV9kZWZhdWx0LkdFT0RFU0lDKSB7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgICBudW1WZXJ0aWNlcyArPSBQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuc3ViZGl2aWRlTGluZUNvdW50KAogICAgICAgICAgICBwb3NpdGlvbnNbaV0sCiAgICAgICAgICAgIHBvc2l0aW9uc1soaSArIDEpICUgbGVuZ3RoXSwKICAgICAgICAgICAgbWluRGlzdGFuY2UKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKGFyY1R5cGUgPT09IEFyY1R5cGVfZGVmYXVsdC5SSFVNQikgewogICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgICAgbnVtVmVydGljZXMgKz0gUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LnN1YmRpdmlkZVJodW1iTGluZUNvdW50KAogICAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICAgIHBvc2l0aW9uc1tpXSwKICAgICAgICAgICAgcG9zaXRpb25zWyhpICsgMSkgJSBsZW5ndGhdLAogICAgICAgICAgICBtaW5EaXN0YW5jZQogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgc3ViZGl2aWRlZFBvc2l0aW9ucyA9IG5ldyBGbG9hdDY0QXJyYXkobnVtVmVydGljZXMgKiAzKTsKICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgbGV0IHRlbXBQb3NpdGlvbnM7CiAgICAgICAgaWYgKGFyY1R5cGUgPT09IEFyY1R5cGVfZGVmYXVsdC5HRU9ERVNJQykgewogICAgICAgICAgdGVtcFBvc2l0aW9ucyA9IFBvbHlnb25HZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5zdWJkaXZpZGVMaW5lKAogICAgICAgICAgICBwb3NpdGlvbnNbaV0sCiAgICAgICAgICAgIHBvc2l0aW9uc1soaSArIDEpICUgbGVuZ3RoXSwKICAgICAgICAgICAgbWluRGlzdGFuY2UsCiAgICAgICAgICAgIGNyZWF0ZUdlb21ldHJ5RnJvbVBvc2l0aW9uc1N1YmRpdmlkZWQKICAgICAgICAgICk7CiAgICAgICAgfSBlbHNlIGlmIChhcmNUeXBlID09PSBBcmNUeXBlX2RlZmF1bHQuUkhVTUIpIHsKICAgICAgICAgIHRlbXBQb3NpdGlvbnMgPSBQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuc3ViZGl2aWRlUmh1bWJMaW5lKAogICAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICAgIHBvc2l0aW9uc1tpXSwKICAgICAgICAgICAgcG9zaXRpb25zWyhpICsgMSkgJSBsZW5ndGhdLAogICAgICAgICAgICBtaW5EaXN0YW5jZSwKICAgICAgICAgICAgY3JlYXRlR2VvbWV0cnlGcm9tUG9zaXRpb25zU3ViZGl2aWRlZAogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgdGVtcFBvc2l0aW9uc0xlbmd0aCA9IHRlbXBQb3NpdGlvbnMubGVuZ3RoOwogICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGVtcFBvc2l0aW9uc0xlbmd0aDsgKytqKSB7CiAgICAgICAgICBzdWJkaXZpZGVkUG9zaXRpb25zW2luZGV4KytdID0gdGVtcFBvc2l0aW9uc1tqXTsKICAgICAgICB9CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIHN1YmRpdmlkZWRQb3NpdGlvbnMgPSBuZXcgRmxvYXQ2NEFycmF5KGxlbmd0aCAqIDIgKiAzKTsKICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgY29uc3QgcDAgPSBwb3NpdGlvbnNbaV07CiAgICAgICAgY29uc3QgcDEgPSBwb3NpdGlvbnNbKGkgKyAxKSAlIGxlbmd0aF07CiAgICAgICAgc3ViZGl2aWRlZFBvc2l0aW9uc1tpbmRleCsrXSA9IHAwLng7CiAgICAgICAgc3ViZGl2aWRlZFBvc2l0aW9uc1tpbmRleCsrXSA9IHAwLnk7CiAgICAgICAgc3ViZGl2aWRlZFBvc2l0aW9uc1tpbmRleCsrXSA9IHAwLno7CiAgICAgICAgc3ViZGl2aWRlZFBvc2l0aW9uc1tpbmRleCsrXSA9IHAxLng7CiAgICAgICAgc3ViZGl2aWRlZFBvc2l0aW9uc1tpbmRleCsrXSA9IHAxLnk7CiAgICAgICAgc3ViZGl2aWRlZFBvc2l0aW9uc1tpbmRleCsrXSA9IHAxLno7CiAgICAgIH0KICAgIH0KICAgIGxlbmd0aCA9IHN1YmRpdmlkZWRQb3NpdGlvbnMubGVuZ3RoIC8gMzsKICAgIGNvbnN0IGluZGljZXNTaXplID0gbGVuZ3RoICogMjsKICAgIGNvbnN0IGluZGljZXMgPSBJbmRleERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheShsZW5ndGgsIGluZGljZXNTaXplKTsKICAgIGluZGV4ID0gMDsKICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGggLSAxOyBpKyspIHsKICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGk7CiAgICAgIGluZGljZXNbaW5kZXgrK10gPSBpICsgMTsKICAgIH0KICAgIGluZGljZXNbaW5kZXgrK10gPSBsZW5ndGggLSAxOwogICAgaW5kaWNlc1tpbmRleCsrXSA9IDA7CiAgICByZXR1cm4gbmV3IEdlb21ldHJ5SW5zdGFuY2VfZGVmYXVsdCh7CiAgICAgIGdlb21ldHJ5OiBuZXcgR2VvbWV0cnlfZGVmYXVsdCh7CiAgICAgICAgYXR0cmlidXRlczogbmV3IEdlb21ldHJ5QXR0cmlidXRlc19kZWZhdWx0KHsKICAgICAgICAgIHBvc2l0aW9uOiBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkRPVUJMRSwKICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICAgICAgdmFsdWVzOiBzdWJkaXZpZGVkUG9zaXRpb25zCiAgICAgICAgICB9KQogICAgICAgIH0pLAogICAgICAgIGluZGljZXMsCiAgICAgICAgcHJpbWl0aXZlVHlwZTogUHJpbWl0aXZlVHlwZV9kZWZhdWx0LkxJTkVTCiAgICAgIH0pCiAgICB9KTsKICB9CiAgZnVuY3Rpb24gY3JlYXRlR2VvbWV0cnlGcm9tUG9zaXRpb25zRXh0cnVkZWQyKGVsbGlwc29pZCwgcG9zaXRpb25zLCBtaW5EaXN0YW5jZSwgcGVyUG9zaXRpb25IZWlnaHQsIGFyY1R5cGUpIHsKICAgIGNvbnN0IHRhbmdlbnRQbGFuZSA9IEVsbGlwc29pZFRhbmdlbnRQbGFuZV9kZWZhdWx0LmZyb21Qb2ludHMocG9zaXRpb25zLCBlbGxpcHNvaWQpOwogICAgY29uc3QgcG9zaXRpb25zMkQgPSB0YW5nZW50UGxhbmUucHJvamVjdFBvaW50c09udG9QbGFuZSgKICAgICAgcG9zaXRpb25zLAogICAgICBjcmVhdGVHZW9tZXRyeUZyb21Qb3NpdGlvbnNQb3NpdGlvbnMKICAgICk7CiAgICBjb25zdCBvcmlnaW5hbFdpbmRpbmdPcmRlciA9IFBvbHlnb25QaXBlbGluZV9kZWZhdWx0LmNvbXB1dGVXaW5kaW5nT3JkZXIyRChwb3NpdGlvbnMyRCk7CiAgICBpZiAob3JpZ2luYWxXaW5kaW5nT3JkZXIgPT09IFdpbmRpbmdPcmRlcl9kZWZhdWx0LkNMT0NLV0lTRSkgewogICAgICBwb3NpdGlvbnMyRC5yZXZlcnNlKCk7CiAgICAgIHBvc2l0aW9ucyA9IHBvc2l0aW9ucy5zbGljZSgpLnJldmVyc2UoKTsKICAgIH0KICAgIGxldCBzdWJkaXZpZGVkUG9zaXRpb25zOwogICAgbGV0IGk7CiAgICBsZXQgbGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aDsKICAgIGNvbnN0IGNvcm5lcnMgPSBuZXcgQXJyYXkobGVuZ3RoKTsKICAgIGxldCBpbmRleCA9IDA7CiAgICBpZiAoIXBlclBvc2l0aW9uSGVpZ2h0KSB7CiAgICAgIGxldCBudW1WZXJ0aWNlcyA9IDA7CiAgICAgIGlmIChhcmNUeXBlID09PSBBcmNUeXBlX2RlZmF1bHQuR0VPREVTSUMpIHsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICAgIG51bVZlcnRpY2VzICs9IFBvbHlnb25HZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5zdWJkaXZpZGVMaW5lQ291bnQoCiAgICAgICAgICAgIHBvc2l0aW9uc1tpXSwKICAgICAgICAgICAgcG9zaXRpb25zWyhpICsgMSkgJSBsZW5ndGhdLAogICAgICAgICAgICBtaW5EaXN0YW5jZQogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAoYXJjVHlwZSA9PT0gQXJjVHlwZV9kZWZhdWx0LlJIVU1CKSB7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgICBudW1WZXJ0aWNlcyArPSBQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuc3ViZGl2aWRlUmh1bWJMaW5lQ291bnQoCiAgICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgICAgcG9zaXRpb25zW2ldLAogICAgICAgICAgICBwb3NpdGlvbnNbKGkgKyAxKSAlIGxlbmd0aF0sCiAgICAgICAgICAgIG1pbkRpc3RhbmNlCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgfQogICAgICBzdWJkaXZpZGVkUG9zaXRpb25zID0gbmV3IEZsb2F0NjRBcnJheShudW1WZXJ0aWNlcyAqIDMgKiAyKTsKICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgY29ybmVyc1tpXSA9IGluZGV4IC8gMzsKICAgICAgICBsZXQgdGVtcFBvc2l0aW9uczsKICAgICAgICBpZiAoYXJjVHlwZSA9PT0gQXJjVHlwZV9kZWZhdWx0LkdFT0RFU0lDKSB7CiAgICAgICAgICB0ZW1wUG9zaXRpb25zID0gUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LnN1YmRpdmlkZUxpbmUoCiAgICAgICAgICAgIHBvc2l0aW9uc1tpXSwKICAgICAgICAgICAgcG9zaXRpb25zWyhpICsgMSkgJSBsZW5ndGhdLAogICAgICAgICAgICBtaW5EaXN0YW5jZSwKICAgICAgICAgICAgY3JlYXRlR2VvbWV0cnlGcm9tUG9zaXRpb25zU3ViZGl2aWRlZAogICAgICAgICAgKTsKICAgICAgICB9IGVsc2UgaWYgKGFyY1R5cGUgPT09IEFyY1R5cGVfZGVmYXVsdC5SSFVNQikgewogICAgICAgICAgdGVtcFBvc2l0aW9ucyA9IFBvbHlnb25HZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5zdWJkaXZpZGVSaHVtYkxpbmUoCiAgICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgICAgcG9zaXRpb25zW2ldLAogICAgICAgICAgICBwb3NpdGlvbnNbKGkgKyAxKSAlIGxlbmd0aF0sCiAgICAgICAgICAgIG1pbkRpc3RhbmNlLAogICAgICAgICAgICBjcmVhdGVHZW9tZXRyeUZyb21Qb3NpdGlvbnNTdWJkaXZpZGVkCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBjb25zdCB0ZW1wUG9zaXRpb25zTGVuZ3RoID0gdGVtcFBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0ZW1wUG9zaXRpb25zTGVuZ3RoOyArK2opIHsKICAgICAgICAgIHN1YmRpdmlkZWRQb3NpdGlvbnNbaW5kZXgrK10gPSB0ZW1wUG9zaXRpb25zW2pdOwogICAgICAgIH0KICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgc3ViZGl2aWRlZFBvc2l0aW9ucyA9IG5ldyBGbG9hdDY0QXJyYXkobGVuZ3RoICogMiAqIDMgKiAyKTsKICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgY29ybmVyc1tpXSA9IGluZGV4IC8gMzsKICAgICAgICBjb25zdCBwMCA9IHBvc2l0aW9uc1tpXTsKICAgICAgICBjb25zdCBwMSA9IHBvc2l0aW9uc1soaSArIDEpICUgbGVuZ3RoXTsKICAgICAgICBzdWJkaXZpZGVkUG9zaXRpb25zW2luZGV4KytdID0gcDAueDsKICAgICAgICBzdWJkaXZpZGVkUG9zaXRpb25zW2luZGV4KytdID0gcDAueTsKICAgICAgICBzdWJkaXZpZGVkUG9zaXRpb25zW2luZGV4KytdID0gcDAuejsKICAgICAgICBzdWJkaXZpZGVkUG9zaXRpb25zW2luZGV4KytdID0gcDEueDsKICAgICAgICBzdWJkaXZpZGVkUG9zaXRpb25zW2luZGV4KytdID0gcDEueTsKICAgICAgICBzdWJkaXZpZGVkUG9zaXRpb25zW2luZGV4KytdID0gcDEuejsKICAgICAgfQogICAgfQogICAgbGVuZ3RoID0gc3ViZGl2aWRlZFBvc2l0aW9ucy5sZW5ndGggLyAoMyAqIDIpOwogICAgY29uc3QgY29ybmVyc0xlbmd0aCA9IGNvcm5lcnMubGVuZ3RoOwogICAgY29uc3QgaW5kaWNlc1NpemUgPSAobGVuZ3RoICogMiArIGNvcm5lcnNMZW5ndGgpICogMjsKICAgIGNvbnN0IGluZGljZXMgPSBJbmRleERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheSgKICAgICAgbGVuZ3RoICsgY29ybmVyc0xlbmd0aCwKICAgICAgaW5kaWNlc1NpemUKICAgICk7CiAgICBpbmRleCA9IDA7CiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGk7CiAgICAgIGluZGljZXNbaW5kZXgrK10gPSAoaSArIDEpICUgbGVuZ3RoOwogICAgICBpbmRpY2VzW2luZGV4KytdID0gaSArIGxlbmd0aDsKICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IChpICsgMSkgJSBsZW5ndGggKyBsZW5ndGg7CiAgICB9CiAgICBmb3IgKGkgPSAwOyBpIDwgY29ybmVyc0xlbmd0aDsgaSsrKSB7CiAgICAgIGNvbnN0IGNvcm5lciA9IGNvcm5lcnNbaV07CiAgICAgIGluZGljZXNbaW5kZXgrK10gPSBjb3JuZXI7CiAgICAgIGluZGljZXNbaW5kZXgrK10gPSBjb3JuZXIgKyBsZW5ndGg7CiAgICB9CiAgICByZXR1cm4gbmV3IEdlb21ldHJ5SW5zdGFuY2VfZGVmYXVsdCh7CiAgICAgIGdlb21ldHJ5OiBuZXcgR2VvbWV0cnlfZGVmYXVsdCh7CiAgICAgICAgYXR0cmlidXRlczogbmV3IEdlb21ldHJ5QXR0cmlidXRlc19kZWZhdWx0KHsKICAgICAgICAgIHBvc2l0aW9uOiBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkRPVUJMRSwKICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICAgICAgdmFsdWVzOiBzdWJkaXZpZGVkUG9zaXRpb25zCiAgICAgICAgICB9KQogICAgICAgIH0pLAogICAgICAgIGluZGljZXMsCiAgICAgICAgcHJpbWl0aXZlVHlwZTogUHJpbWl0aXZlVHlwZV9kZWZhdWx0LkxJTkVTCiAgICAgIH0pCiAgICB9KTsKICB9CiAgZnVuY3Rpb24gUG9seWdvbk91dGxpbmVHZW9tZXRyeShvcHRpb25zKSB7CiAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoIm9wdGlvbnMiLCBvcHRpb25zKTsKICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgib3B0aW9ucy5wb2x5Z29uSGllcmFyY2h5Iiwgb3B0aW9ucy5wb2x5Z29uSGllcmFyY2h5KTsKICAgIGlmIChvcHRpb25zLnBlclBvc2l0aW9uSGVpZ2h0ICYmIGRlZmluZWRfZGVmYXVsdChvcHRpb25zLmhlaWdodCkpIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgIkNhbm5vdCB1c2UgYm90aCBvcHRpb25zLnBlclBvc2l0aW9uSGVpZ2h0IGFuZCBvcHRpb25zLmhlaWdodCIKICAgICAgKTsKICAgIH0KICAgIGlmIChkZWZpbmVkX2RlZmF1bHQob3B0aW9ucy5hcmNUeXBlKSAmJiBvcHRpb25zLmFyY1R5cGUgIT09IEFyY1R5cGVfZGVmYXVsdC5HRU9ERVNJQyAmJiBvcHRpb25zLmFyY1R5cGUgIT09IEFyY1R5cGVfZGVmYXVsdC5SSFVNQikgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAiSW52YWxpZCBhcmNUeXBlLiBWYWxpZCBvcHRpb25zIGFyZSBBcmNUeXBlLkdFT0RFU0lDIGFuZCBBcmNUeXBlLlJIVU1CLiIKICAgICAgKTsKICAgIH0KICAgIGNvbnN0IHBvbHlnb25IaWVyYXJjaHkgPSBvcHRpb25zLnBvbHlnb25IaWVyYXJjaHk7CiAgICBjb25zdCBlbGxpcHNvaWQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmVsbGlwc29pZCwgRWxsaXBzb2lkX2RlZmF1bHQuZGVmYXVsdCk7CiAgICBjb25zdCBncmFudWxhcml0eSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KAogICAgICBvcHRpb25zLmdyYW51bGFyaXR5LAogICAgICBNYXRoX2RlZmF1bHQuUkFESUFOU19QRVJfREVHUkVFCiAgICApOwogICAgY29uc3QgcGVyUG9zaXRpb25IZWlnaHQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLnBlclBvc2l0aW9uSGVpZ2h0LCBmYWxzZSk7CiAgICBjb25zdCBwZXJQb3NpdGlvbkhlaWdodEV4dHJ1ZGUgPSBwZXJQb3NpdGlvbkhlaWdodCAmJiBkZWZpbmVkX2RlZmF1bHQob3B0aW9ucy5leHRydWRlZEhlaWdodCk7CiAgICBjb25zdCBhcmNUeXBlID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5hcmNUeXBlLCBBcmNUeXBlX2RlZmF1bHQuR0VPREVTSUMpOwogICAgbGV0IGhlaWdodCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuaGVpZ2h0LCAwKTsKICAgIGxldCBleHRydWRlZEhlaWdodCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuZXh0cnVkZWRIZWlnaHQsIGhlaWdodCk7CiAgICBpZiAoIXBlclBvc2l0aW9uSGVpZ2h0RXh0cnVkZSkgewogICAgICBjb25zdCBoID0gTWF0aC5tYXgoaGVpZ2h0LCBleHRydWRlZEhlaWdodCk7CiAgICAgIGV4dHJ1ZGVkSGVpZ2h0ID0gTWF0aC5taW4oaGVpZ2h0LCBleHRydWRlZEhlaWdodCk7CiAgICAgIGhlaWdodCA9IGg7CiAgICB9CiAgICB0aGlzLl9lbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZShlbGxpcHNvaWQpOwogICAgdGhpcy5fZ3JhbnVsYXJpdHkgPSBncmFudWxhcml0eTsKICAgIHRoaXMuX2hlaWdodCA9IGhlaWdodDsKICAgIHRoaXMuX2V4dHJ1ZGVkSGVpZ2h0ID0gZXh0cnVkZWRIZWlnaHQ7CiAgICB0aGlzLl9hcmNUeXBlID0gYXJjVHlwZTsKICAgIHRoaXMuX3BvbHlnb25IaWVyYXJjaHkgPSBwb2x5Z29uSGllcmFyY2h5OwogICAgdGhpcy5fcGVyUG9zaXRpb25IZWlnaHQgPSBwZXJQb3NpdGlvbkhlaWdodDsKICAgIHRoaXMuX3BlclBvc2l0aW9uSGVpZ2h0RXh0cnVkZSA9IHBlclBvc2l0aW9uSGVpZ2h0RXh0cnVkZTsKICAgIHRoaXMuX29mZnNldEF0dHJpYnV0ZSA9IG9wdGlvbnMub2Zmc2V0QXR0cmlidXRlOwogICAgdGhpcy5fd29ya2VyTmFtZSA9ICJjcmVhdGVQb2x5Z29uT3V0bGluZUdlb21ldHJ5IjsKICAgIHRoaXMucGFja2VkTGVuZ3RoID0gUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmNvbXB1dGVIaWVyYXJjaHlQYWNrZWRMZW5ndGgoCiAgICAgIHBvbHlnb25IaWVyYXJjaHksCiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdAogICAgKSArIEVsbGlwc29pZF9kZWZhdWx0LnBhY2tlZExlbmd0aCArIDg7CiAgfQogIHZhciBjcmVhdGVHZW9tZXRyeUZyb21Qb3NpdGlvbnNQb3NpdGlvbnMsIGNyZWF0ZUdlb21ldHJ5RnJvbVBvc2l0aW9uc1N1YmRpdmlkZWQsIHNjcmF0Y2hFbGxpcHNvaWQ3LCBkdW1teU9wdGlvbnMyLCBQb2x5Z29uT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfUG9seWdvbk91dGxpbmVHZW9tZXRyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUG9seWdvbk91dGxpbmVHZW9tZXRyeS5qcyIoKSB7CiAgICAgIGluaXRfQXJjVHlwZSgpOwogICAgICBpbml0X0JvdW5kaW5nU3BoZXJlKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfQ29tcG9uZW50RGF0YXR5cGUoKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9FbGxpcHNvaWRUYW5nZW50UGxhbmUoKTsKICAgICAgaW5pdF9HZW9tZXRyeSgpOwogICAgICBpbml0X0dlb21ldHJ5QXR0cmlidXRlKCk7CiAgICAgIGluaXRfR2VvbWV0cnlBdHRyaWJ1dGVzKCk7CiAgICAgIGluaXRfR2VvbWV0cnlJbnN0YW5jZSgpOwogICAgICBpbml0X0dlb21ldHJ5T2Zmc2V0QXR0cmlidXRlKCk7CiAgICAgIGluaXRfR2VvbWV0cnlQaXBlbGluZSgpOwogICAgICBpbml0X0luZGV4RGF0YXR5cGUoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIGluaXRfUG9seWdvbkdlb21ldHJ5TGlicmFyeSgpOwogICAgICBpbml0X1BvbHlnb25QaXBlbGluZSgpOwogICAgICBpbml0X1ByaW1pdGl2ZVR5cGUoKTsKICAgICAgaW5pdF9XaW5kaW5nT3JkZXIoKTsKICAgICAgY3JlYXRlR2VvbWV0cnlGcm9tUG9zaXRpb25zUG9zaXRpb25zID0gW107CiAgICAgIGNyZWF0ZUdlb21ldHJ5RnJvbVBvc2l0aW9uc1N1YmRpdmlkZWQgPSBbXTsKICAgICAgUG9seWdvbk91dGxpbmVHZW9tZXRyeS5wYWNrID0gZnVuY3Rpb24odmFsdWUsIGFycmF5LCBzdGFydGluZ0luZGV4KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJ2YWx1ZSIsIHZhbHVlKTsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gUG9seWdvbkdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LnBhY2tQb2x5Z29uSGllcmFyY2h5KAogICAgICAgICAgdmFsdWUuX3BvbHlnb25IaWVyYXJjaHksCiAgICAgICAgICBhcnJheSwKICAgICAgICAgIHN0YXJ0aW5nSW5kZXgsCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQKICAgICAgICApOwogICAgICAgIEVsbGlwc29pZF9kZWZhdWx0LnBhY2sodmFsdWUuX2VsbGlwc29pZCwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gRWxsaXBzb2lkX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5faGVpZ2h0OwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fZXh0cnVkZWRIZWlnaHQ7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9ncmFudWxhcml0eTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX3BlclBvc2l0aW9uSGVpZ2h0RXh0cnVkZSA/IDEgOiAwOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fcGVyUG9zaXRpb25IZWlnaHQgPyAxIDogMDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX2FyY1R5cGU7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHZhbHVlLl9vZmZzZXRBdHRyaWJ1dGUsIC0xKTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4XSA9IHZhbHVlLnBhY2tlZExlbmd0aDsKICAgICAgICByZXR1cm4gYXJyYXk7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hFbGxpcHNvaWQ3ID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUoRWxsaXBzb2lkX2RlZmF1bHQuVU5JVF9TUEhFUkUpOwogICAgICBkdW1teU9wdGlvbnMyID0gewogICAgICAgIHBvbHlnb25IaWVyYXJjaHk6IHt9CiAgICAgIH07CiAgICAgIFBvbHlnb25PdXRsaW5lR2VvbWV0cnkudW5wYWNrID0gZnVuY3Rpb24oYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIGNvbnN0IHBvbHlnb25IaWVyYXJjaHkgPSBQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQudW5wYWNrUG9seWdvbkhpZXJhcmNoeSgKICAgICAgICAgIGFycmF5LAogICAgICAgICAgc3RhcnRpbmdJbmRleCwKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdAogICAgICAgICk7CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IHBvbHlnb25IaWVyYXJjaHkuc3RhcnRpbmdJbmRleDsKICAgICAgICBkZWxldGUgcG9seWdvbkhpZXJhcmNoeS5zdGFydGluZ0luZGV4OwogICAgICAgIGNvbnN0IGVsbGlwc29pZCA9IEVsbGlwc29pZF9kZWZhdWx0LnVucGFjayhhcnJheSwgc3RhcnRpbmdJbmRleCwgc2NyYXRjaEVsbGlwc29pZDcpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gRWxsaXBzb2lkX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIGNvbnN0IGhlaWdodCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3QgZXh0cnVkZWRIZWlnaHQgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IGdyYW51bGFyaXR5ID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBwZXJQb3NpdGlvbkhlaWdodEV4dHJ1ZGUgPSBhcnJheVtzdGFydGluZ0luZGV4KytdID09PSAxOwogICAgICAgIGNvbnN0IHBlclBvc2l0aW9uSGVpZ2h0ID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9PT0gMTsKICAgICAgICBjb25zdCBhcmNUeXBlID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBvZmZzZXRBdHRyaWJ1dGUgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IHBhY2tlZExlbmd0aCA9IGFycmF5W3N0YXJ0aW5nSW5kZXhdOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBQb2x5Z29uT3V0bGluZUdlb21ldHJ5KGR1bW15T3B0aW9uczIpOwogICAgICAgIH0KICAgICAgICByZXN1bHQuX3BvbHlnb25IaWVyYXJjaHkgPSBwb2x5Z29uSGllcmFyY2h5OwogICAgICAgIHJlc3VsdC5fZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUoZWxsaXBzb2lkLCByZXN1bHQuX2VsbGlwc29pZCk7CiAgICAgICAgcmVzdWx0Ll9oZWlnaHQgPSBoZWlnaHQ7CiAgICAgICAgcmVzdWx0Ll9leHRydWRlZEhlaWdodCA9IGV4dHJ1ZGVkSGVpZ2h0OwogICAgICAgIHJlc3VsdC5fZ3JhbnVsYXJpdHkgPSBncmFudWxhcml0eTsKICAgICAgICByZXN1bHQuX3BlclBvc2l0aW9uSGVpZ2h0ID0gcGVyUG9zaXRpb25IZWlnaHQ7CiAgICAgICAgcmVzdWx0Ll9wZXJQb3NpdGlvbkhlaWdodEV4dHJ1ZGUgPSBwZXJQb3NpdGlvbkhlaWdodEV4dHJ1ZGU7CiAgICAgICAgcmVzdWx0Ll9hcmNUeXBlID0gYXJjVHlwZTsKICAgICAgICByZXN1bHQuX29mZnNldEF0dHJpYnV0ZSA9IG9mZnNldEF0dHJpYnV0ZSA9PT0gLTEgPyB2b2lkIDAgOiBvZmZzZXRBdHRyaWJ1dGU7CiAgICAgICAgcmVzdWx0LnBhY2tlZExlbmd0aCA9IHBhY2tlZExlbmd0aDsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBQb2x5Z29uT3V0bGluZUdlb21ldHJ5LmZyb21Qb3NpdGlvbnMgPSBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgICAgb3B0aW9ucyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMsIGRlZmF1bHRWYWx1ZV9kZWZhdWx0LkVNUFRZX09CSkVDVCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJvcHRpb25zLnBvc2l0aW9ucyIsIG9wdGlvbnMucG9zaXRpb25zKTsKICAgICAgICBjb25zdCBuZXdPcHRpb25zID0gewogICAgICAgICAgcG9seWdvbkhpZXJhcmNoeTogewogICAgICAgICAgICBwb3NpdGlvbnM6IG9wdGlvbnMucG9zaXRpb25zCiAgICAgICAgICB9LAogICAgICAgICAgaGVpZ2h0OiBvcHRpb25zLmhlaWdodCwKICAgICAgICAgIGV4dHJ1ZGVkSGVpZ2h0OiBvcHRpb25zLmV4dHJ1ZGVkSGVpZ2h0LAogICAgICAgICAgZWxsaXBzb2lkOiBvcHRpb25zLmVsbGlwc29pZCwKICAgICAgICAgIGdyYW51bGFyaXR5OiBvcHRpb25zLmdyYW51bGFyaXR5LAogICAgICAgICAgcGVyUG9zaXRpb25IZWlnaHQ6IG9wdGlvbnMucGVyUG9zaXRpb25IZWlnaHQsCiAgICAgICAgICBhcmNUeXBlOiBvcHRpb25zLmFyY1R5cGUsCiAgICAgICAgICBvZmZzZXRBdHRyaWJ1dGU6IG9wdGlvbnMub2Zmc2V0QXR0cmlidXRlCiAgICAgICAgfTsKICAgICAgICByZXR1cm4gbmV3IFBvbHlnb25PdXRsaW5lR2VvbWV0cnkobmV3T3B0aW9ucyk7CiAgICAgIH07CiAgICAgIFBvbHlnb25PdXRsaW5lR2VvbWV0cnkuY3JlYXRlR2VvbWV0cnkgPSBmdW5jdGlvbihwb2x5Z29uR2VvbWV0cnkpIHsKICAgICAgICBjb25zdCBlbGxpcHNvaWQgPSBwb2x5Z29uR2VvbWV0cnkuX2VsbGlwc29pZDsKICAgICAgICBjb25zdCBncmFudWxhcml0eSA9IHBvbHlnb25HZW9tZXRyeS5fZ3JhbnVsYXJpdHk7CiAgICAgICAgY29uc3QgcG9seWdvbkhpZXJhcmNoeSA9IHBvbHlnb25HZW9tZXRyeS5fcG9seWdvbkhpZXJhcmNoeTsKICAgICAgICBjb25zdCBwZXJQb3NpdGlvbkhlaWdodCA9IHBvbHlnb25HZW9tZXRyeS5fcGVyUG9zaXRpb25IZWlnaHQ7CiAgICAgICAgY29uc3QgYXJjVHlwZSA9IHBvbHlnb25HZW9tZXRyeS5fYXJjVHlwZTsKICAgICAgICBjb25zdCBwb2x5Z29ucyA9IFBvbHlnb25HZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5wb2x5Z29uT3V0bGluZXNGcm9tSGllcmFyY2h5KAogICAgICAgICAgcG9seWdvbkhpZXJhcmNoeSwKICAgICAgICAgICFwZXJQb3NpdGlvbkhlaWdodCwKICAgICAgICAgIGVsbGlwc29pZAogICAgICAgICk7CiAgICAgICAgaWYgKHBvbHlnb25zLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgbGV0IGdlb21ldHJ5SW5zdGFuY2U7CiAgICAgICAgY29uc3QgZ2VvbWV0cmllcyA9IFtdOwogICAgICAgIGNvbnN0IG1pbkRpc3RhbmNlID0gTWF0aF9kZWZhdWx0LmNob3JkTGVuZ3RoKAogICAgICAgICAgZ3JhbnVsYXJpdHksCiAgICAgICAgICBlbGxpcHNvaWQubWF4aW11bVJhZGl1cwogICAgICAgICk7CiAgICAgICAgY29uc3QgaGVpZ2h0ID0gcG9seWdvbkdlb21ldHJ5Ll9oZWlnaHQ7CiAgICAgICAgY29uc3QgZXh0cnVkZWRIZWlnaHQgPSBwb2x5Z29uR2VvbWV0cnkuX2V4dHJ1ZGVkSGVpZ2h0OwogICAgICAgIGNvbnN0IGV4dHJ1ZGUgPSBwb2x5Z29uR2VvbWV0cnkuX3BlclBvc2l0aW9uSGVpZ2h0RXh0cnVkZSB8fCAhTWF0aF9kZWZhdWx0LmVxdWFsc0Vwc2lsb24oaGVpZ2h0LCBleHRydWRlZEhlaWdodCwgMCwgTWF0aF9kZWZhdWx0LkVQU0lMT04yKTsKICAgICAgICBsZXQgb2Zmc2V0VmFsdWU7CiAgICAgICAgbGV0IGk7CiAgICAgICAgaWYgKGV4dHJ1ZGUpIHsKICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBwb2x5Z29ucy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBnZW9tZXRyeUluc3RhbmNlID0gY3JlYXRlR2VvbWV0cnlGcm9tUG9zaXRpb25zRXh0cnVkZWQyKAogICAgICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgICAgICBwb2x5Z29uc1tpXSwKICAgICAgICAgICAgICBtaW5EaXN0YW5jZSwKICAgICAgICAgICAgICBwZXJQb3NpdGlvbkhlaWdodCwKICAgICAgICAgICAgICBhcmNUeXBlCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIGdlb21ldHJ5SW5zdGFuY2UuZ2VvbWV0cnkgPSBQb2x5Z29uR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuc2NhbGVUb0dlb2RldGljSGVpZ2h0RXh0cnVkZWQoCiAgICAgICAgICAgICAgZ2VvbWV0cnlJbnN0YW5jZS5nZW9tZXRyeSwKICAgICAgICAgICAgICBoZWlnaHQsCiAgICAgICAgICAgICAgZXh0cnVkZWRIZWlnaHQsCiAgICAgICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgICAgIHBlclBvc2l0aW9uSGVpZ2h0CiAgICAgICAgICAgICk7CiAgICAgICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQocG9seWdvbkdlb21ldHJ5Ll9vZmZzZXRBdHRyaWJ1dGUpKSB7CiAgICAgICAgICAgICAgY29uc3Qgc2l6ZSA9IGdlb21ldHJ5SW5zdGFuY2UuZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXMubGVuZ3RoIC8gMzsKICAgICAgICAgICAgICBsZXQgb2Zmc2V0QXR0cmlidXRlID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSk7CiAgICAgICAgICAgICAgaWYgKHBvbHlnb25HZW9tZXRyeS5fb2Zmc2V0QXR0cmlidXRlID09PSBHZW9tZXRyeU9mZnNldEF0dHJpYnV0ZV9kZWZhdWx0LlRPUCkgewogICAgICAgICAgICAgICAgb2Zmc2V0QXR0cmlidXRlID0gb2Zmc2V0QXR0cmlidXRlLmZpbGwoMSwgMCwgc2l6ZSAvIDIpOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBvZmZzZXRWYWx1ZSA9IHBvbHlnb25HZW9tZXRyeS5fb2Zmc2V0QXR0cmlidXRlID09PSBHZW9tZXRyeU9mZnNldEF0dHJpYnV0ZV9kZWZhdWx0Lk5PTkUgPyAwIDogMTsKICAgICAgICAgICAgICAgIG9mZnNldEF0dHJpYnV0ZSA9IG9mZnNldEF0dHJpYnV0ZS5maWxsKG9mZnNldFZhbHVlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZ2VvbWV0cnlJbnN0YW5jZS5nZW9tZXRyeS5hdHRyaWJ1dGVzLmFwcGx5T2Zmc2V0ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuVU5TSUdORURfQllURSwKICAgICAgICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDEsCiAgICAgICAgICAgICAgICB2YWx1ZXM6IG9mZnNldEF0dHJpYnV0ZQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGdlb21ldHJpZXMucHVzaChnZW9tZXRyeUluc3RhbmNlKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgZm9yIChpID0gMDsgaSA8IHBvbHlnb25zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGdlb21ldHJ5SW5zdGFuY2UgPSBjcmVhdGVHZW9tZXRyeUZyb21Qb3NpdGlvbnMyKAogICAgICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgICAgICBwb2x5Z29uc1tpXSwKICAgICAgICAgICAgICBtaW5EaXN0YW5jZSwKICAgICAgICAgICAgICBwZXJQb3NpdGlvbkhlaWdodCwKICAgICAgICAgICAgICBhcmNUeXBlCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIGdlb21ldHJ5SW5zdGFuY2UuZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXMgPSBQb2x5Z29uUGlwZWxpbmVfZGVmYXVsdC5zY2FsZVRvR2VvZGV0aWNIZWlnaHQoCiAgICAgICAgICAgICAgZ2VvbWV0cnlJbnN0YW5jZS5nZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcywKICAgICAgICAgICAgICBoZWlnaHQsCiAgICAgICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgICAgICFwZXJQb3NpdGlvbkhlaWdodAogICAgICAgICAgICApOwogICAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHBvbHlnb25HZW9tZXRyeS5fb2Zmc2V0QXR0cmlidXRlKSkgewogICAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IGdlb21ldHJ5SW5zdGFuY2UuZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXMubGVuZ3RoOwogICAgICAgICAgICAgIG9mZnNldFZhbHVlID0gcG9seWdvbkdlb21ldHJ5Ll9vZmZzZXRBdHRyaWJ1dGUgPT09IEdlb21ldHJ5T2Zmc2V0QXR0cmlidXRlX2RlZmF1bHQuTk9ORSA/IDAgOiAxOwogICAgICAgICAgICAgIGNvbnN0IGFwcGx5T2Zmc2V0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoIC8gMykuZmlsbChvZmZzZXRWYWx1ZSk7CiAgICAgICAgICAgICAgZ2VvbWV0cnlJbnN0YW5jZS5nZW9tZXRyeS5hdHRyaWJ1dGVzLmFwcGx5T2Zmc2V0ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuVU5TSUdORURfQllURSwKICAgICAgICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDEsCiAgICAgICAgICAgICAgICB2YWx1ZXM6IGFwcGx5T2Zmc2V0CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZ2VvbWV0cmllcy5wdXNoKGdlb21ldHJ5SW5zdGFuY2UpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBjb25zdCBnZW9tZXRyeSA9IEdlb21ldHJ5UGlwZWxpbmVfZGVmYXVsdC5jb21iaW5lSW5zdGFuY2VzKGdlb21ldHJpZXMpWzBdOwogICAgICAgIGNvbnN0IGJvdW5kaW5nU3BoZXJlID0gQm91bmRpbmdTcGhlcmVfZGVmYXVsdC5mcm9tVmVydGljZXMoCiAgICAgICAgICBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcwogICAgICAgICk7CiAgICAgICAgcmV0dXJuIG5ldyBHZW9tZXRyeV9kZWZhdWx0KHsKICAgICAgICAgIGF0dHJpYnV0ZXM6IGdlb21ldHJ5LmF0dHJpYnV0ZXMsCiAgICAgICAgICBpbmRpY2VzOiBnZW9tZXRyeS5pbmRpY2VzLAogICAgICAgICAgcHJpbWl0aXZlVHlwZTogZ2VvbWV0cnkucHJpbWl0aXZlVHlwZSwKICAgICAgICAgIGJvdW5kaW5nU3BoZXJlLAogICAgICAgICAgb2Zmc2V0QXR0cmlidXRlOiBwb2x5Z29uR2VvbWV0cnkuX29mZnNldEF0dHJpYnV0ZQogICAgICAgIH0pOwogICAgICB9OwogICAgICBQb2x5Z29uT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQgPSBQb2x5Z29uT3V0bGluZUdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlUG9seWdvbk91dGxpbmVHZW9tZXRyeS5qcwogIHZhciBjcmVhdGVQb2x5Z29uT3V0bGluZUdlb21ldHJ5X2V4cG9ydHMgPSB7fTsKICBfX2V4cG9ydChjcmVhdGVQb2x5Z29uT3V0bGluZUdlb21ldHJ5X2V4cG9ydHMsIHsKICAgIGRlZmF1bHQ6ICgpID0+IGNyZWF0ZVBvbHlnb25PdXRsaW5lR2VvbWV0cnlfZGVmYXVsdAogIH0pOwogIGZ1bmN0aW9uIGNyZWF0ZVBvbHlnb25PdXRsaW5lR2VvbWV0cnkocG9seWdvbkdlb21ldHJ5LCBvZmZzZXQpIHsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQob2Zmc2V0KSkgewogICAgICBwb2x5Z29uR2VvbWV0cnkgPSBQb2x5Z29uT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQudW5wYWNrKHBvbHlnb25HZW9tZXRyeSwgb2Zmc2V0KTsKICAgIH0KICAgIHBvbHlnb25HZW9tZXRyeS5fZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUocG9seWdvbkdlb21ldHJ5Ll9lbGxpcHNvaWQpOwogICAgcmV0dXJuIFBvbHlnb25PdXRsaW5lR2VvbWV0cnlfZGVmYXVsdC5jcmVhdGVHZW9tZXRyeShwb2x5Z29uR2VvbWV0cnkpOwogIH0KICB2YXIgY3JlYXRlUG9seWdvbk91dGxpbmVHZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X2NyZWF0ZVBvbHlnb25PdXRsaW5lR2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZVBvbHlnb25PdXRsaW5lR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9Qb2x5Z29uT3V0bGluZUdlb21ldHJ5KCk7CiAgICAgIGNyZWF0ZVBvbHlnb25PdXRsaW5lR2VvbWV0cnlfZGVmYXVsdCA9IGNyZWF0ZVBvbHlnb25PdXRsaW5lR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9Db2xvci5qcwogIGZ1bmN0aW9uIGh1ZTJyZ2IobTEsIG0yLCBoKSB7CiAgICBpZiAoaCA8IDApIHsKICAgICAgaCArPSAxOwogICAgfQogICAgaWYgKGggPiAxKSB7CiAgICAgIGggLT0gMTsKICAgIH0KICAgIGlmIChoICogNiA8IDEpIHsKICAgICAgcmV0dXJuIG0xICsgKG0yIC0gbTEpICogNiAqIGg7CiAgICB9CiAgICBpZiAoaCAqIDIgPCAxKSB7CiAgICAgIHJldHVybiBtMjsKICAgIH0KICAgIGlmIChoICogMyA8IDIpIHsKICAgICAgcmV0dXJuIG0xICsgKG0yIC0gbTEpICogKDIgLyAzIC0gaCkgKiA2OwogICAgfQogICAgcmV0dXJuIG0xOwogIH0KICBmdW5jdGlvbiBDb2xvcihyZWQsIGdyZWVuLCBibHVlLCBhbHBoYSkgewogICAgdGhpcy5yZWQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChyZWQsIDEpOwogICAgdGhpcy5ncmVlbiA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGdyZWVuLCAxKTsKICAgIHRoaXMuYmx1ZSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGJsdWUsIDEpOwogICAgdGhpcy5hbHBoYSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGFscGhhLCAxKTsKICB9CiAgdmFyIHNjcmF0Y2hBcnJheUJ1ZmZlciwgc2NyYXRjaFVpbnQzMkFycmF5LCBzY3JhdGNoVWludDhBcnJheSwgcmdiYU1hdGNoZXIsIHJyZ2diYmFhTWF0Y2hlciwgcmdiUGFyZW50aGVzZXNNYXRjaGVyLCBoc2xQYXJlbnRoZXNlc01hdGNoZXIsIENvbG9yX2RlZmF1bHQ7CiAgdmFyIGluaXRfQ29sb3IgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0NvbG9yLmpzIigpIHsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9GZWF0dXJlRGV0ZWN0aW9uKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBDb2xvci5mcm9tQ2FydGVzaWFuNCA9IGZ1bmN0aW9uKGNhcnRlc2lhbjExLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImNhcnRlc2lhbiIsIGNhcnRlc2lhbjExKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKGNhcnRlc2lhbjExLngsIGNhcnRlc2lhbjExLnksIGNhcnRlc2lhbjExLnosIGNhcnRlc2lhbjExLncpOwogICAgICAgIH0KICAgICAgICByZXN1bHQucmVkID0gY2FydGVzaWFuMTEueDsKICAgICAgICByZXN1bHQuZ3JlZW4gPSBjYXJ0ZXNpYW4xMS55OwogICAgICAgIHJlc3VsdC5ibHVlID0gY2FydGVzaWFuMTEuejsKICAgICAgICByZXN1bHQuYWxwaGEgPSBjYXJ0ZXNpYW4xMS53OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENvbG9yLmZyb21CeXRlcyA9IGZ1bmN0aW9uKHJlZCwgZ3JlZW4sIGJsdWUsIGFscGhhLCByZXN1bHQpIHsKICAgICAgICByZWQgPSBDb2xvci5ieXRlVG9GbG9hdChkZWZhdWx0VmFsdWVfZGVmYXVsdChyZWQsIDI1NSkpOwogICAgICAgIGdyZWVuID0gQ29sb3IuYnl0ZVRvRmxvYXQoZGVmYXVsdFZhbHVlX2RlZmF1bHQoZ3JlZW4sIDI1NSkpOwogICAgICAgIGJsdWUgPSBDb2xvci5ieXRlVG9GbG9hdChkZWZhdWx0VmFsdWVfZGVmYXVsdChibHVlLCAyNTUpKTsKICAgICAgICBhbHBoYSA9IENvbG9yLmJ5dGVUb0Zsb2F0KGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGFscGhhLCAyNTUpKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKHJlZCwgZ3JlZW4sIGJsdWUsIGFscGhhKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LnJlZCA9IHJlZDsKICAgICAgICByZXN1bHQuZ3JlZW4gPSBncmVlbjsKICAgICAgICByZXN1bHQuYmx1ZSA9IGJsdWU7CiAgICAgICAgcmVzdWx0LmFscGhhID0gYWxwaGE7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ29sb3IuZnJvbUFscGhhID0gZnVuY3Rpb24oY29sb3IsIGFscGhhLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImNvbG9yIiwgY29sb3IpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigiYWxwaGEiLCBhbHBoYSk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihjb2xvci5yZWQsIGNvbG9yLmdyZWVuLCBjb2xvci5ibHVlLCBhbHBoYSk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5yZWQgPSBjb2xvci5yZWQ7CiAgICAgICAgcmVzdWx0LmdyZWVuID0gY29sb3IuZ3JlZW47CiAgICAgICAgcmVzdWx0LmJsdWUgPSBjb2xvci5ibHVlOwogICAgICAgIHJlc3VsdC5hbHBoYSA9IGFscGhhOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIGlmIChGZWF0dXJlRGV0ZWN0aW9uX2RlZmF1bHQuc3VwcG9ydHNUeXBlZEFycmF5cygpKSB7CiAgICAgICAgc2NyYXRjaEFycmF5QnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKDQpOwogICAgICAgIHNjcmF0Y2hVaW50MzJBcnJheSA9IG5ldyBVaW50MzJBcnJheShzY3JhdGNoQXJyYXlCdWZmZXIpOwogICAgICAgIHNjcmF0Y2hVaW50OEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoc2NyYXRjaEFycmF5QnVmZmVyKTsKICAgICAgfQogICAgICBDb2xvci5mcm9tUmdiYSA9IGZ1bmN0aW9uKHJnYmEsIHJlc3VsdCkgewogICAgICAgIHNjcmF0Y2hVaW50MzJBcnJheVswXSA9IHJnYmE7CiAgICAgICAgcmV0dXJuIENvbG9yLmZyb21CeXRlcygKICAgICAgICAgIHNjcmF0Y2hVaW50OEFycmF5WzBdLAogICAgICAgICAgc2NyYXRjaFVpbnQ4QXJyYXlbMV0sCiAgICAgICAgICBzY3JhdGNoVWludDhBcnJheVsyXSwKICAgICAgICAgIHNjcmF0Y2hVaW50OEFycmF5WzNdLAogICAgICAgICAgcmVzdWx0CiAgICAgICAgKTsKICAgICAgfTsKICAgICAgQ29sb3IuZnJvbUhzbCA9IGZ1bmN0aW9uKGh1ZSwgc2F0dXJhdGlvbiwgbGlnaHRuZXNzLCBhbHBoYSwgcmVzdWx0KSB7CiAgICAgICAgaHVlID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoaHVlLCAwKSAlIDE7CiAgICAgICAgc2F0dXJhdGlvbiA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHNhdHVyYXRpb24sIDApOwogICAgICAgIGxpZ2h0bmVzcyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KGxpZ2h0bmVzcywgMCk7CiAgICAgICAgYWxwaGEgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChhbHBoYSwgMSk7CiAgICAgICAgbGV0IHJlZCA9IGxpZ2h0bmVzczsKICAgICAgICBsZXQgZ3JlZW4gPSBsaWdodG5lc3M7CiAgICAgICAgbGV0IGJsdWUgPSBsaWdodG5lc3M7CiAgICAgICAgaWYgKHNhdHVyYXRpb24gIT09IDApIHsKICAgICAgICAgIGxldCBtMjsKICAgICAgICAgIGlmIChsaWdodG5lc3MgPCAwLjUpIHsKICAgICAgICAgICAgbTIgPSBsaWdodG5lc3MgKiAoMSArIHNhdHVyYXRpb24pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbTIgPSBsaWdodG5lc3MgKyBzYXR1cmF0aW9uIC0gbGlnaHRuZXNzICogc2F0dXJhdGlvbjsKICAgICAgICAgIH0KICAgICAgICAgIGNvbnN0IG0xID0gMiAqIGxpZ2h0bmVzcyAtIG0yOwogICAgICAgICAgcmVkID0gaHVlMnJnYihtMSwgbTIsIGh1ZSArIDEgLyAzKTsKICAgICAgICAgIGdyZWVuID0gaHVlMnJnYihtMSwgbTIsIGh1ZSk7CiAgICAgICAgICBibHVlID0gaHVlMnJnYihtMSwgbTIsIGh1ZSAtIDEgLyAzKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihyZWQsIGdyZWVuLCBibHVlLCBhbHBoYSk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5yZWQgPSByZWQ7CiAgICAgICAgcmVzdWx0LmdyZWVuID0gZ3JlZW47CiAgICAgICAgcmVzdWx0LmJsdWUgPSBibHVlOwogICAgICAgIHJlc3VsdC5hbHBoYSA9IGFscGhhOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENvbG9yLmZyb21SYW5kb20gPSBmdW5jdGlvbihvcHRpb25zLCByZXN1bHQpIHsKICAgICAgICBvcHRpb25zID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucywgZGVmYXVsdFZhbHVlX2RlZmF1bHQuRU1QVFlfT0JKRUNUKTsKICAgICAgICBsZXQgcmVkID0gb3B0aW9ucy5yZWQ7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVkKSkgewogICAgICAgICAgY29uc3QgbWluaW11bVJlZCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMubWluaW11bVJlZCwgMCk7CiAgICAgICAgICBjb25zdCBtYXhpbXVtUmVkID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5tYXhpbXVtUmVkLCAxKTsKICAgICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5sZXNzVGhhbk9yRXF1YWxzKCJtaW5pbXVtUmVkIiwgbWluaW11bVJlZCwgbWF4aW11bVJlZCk7CiAgICAgICAgICByZWQgPSBtaW5pbXVtUmVkICsgTWF0aF9kZWZhdWx0Lm5leHRSYW5kb21OdW1iZXIoKSAqIChtYXhpbXVtUmVkIC0gbWluaW11bVJlZCk7CiAgICAgICAgfQogICAgICAgIGxldCBncmVlbiA9IG9wdGlvbnMuZ3JlZW47CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoZ3JlZW4pKSB7CiAgICAgICAgICBjb25zdCBtaW5pbXVtR3JlZW4gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLm1pbmltdW1HcmVlbiwgMCk7CiAgICAgICAgICBjb25zdCBtYXhpbXVtR3JlZW4gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLm1heGltdW1HcmVlbiwgMSk7CiAgICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIubGVzc1RoYW5PckVxdWFscygKICAgICAgICAgICAgIm1pbmltdW1HcmVlbiIsCiAgICAgICAgICAgIG1pbmltdW1HcmVlbiwKICAgICAgICAgICAgbWF4aW11bUdyZWVuCiAgICAgICAgICApOwogICAgICAgICAgZ3JlZW4gPSBtaW5pbXVtR3JlZW4gKyBNYXRoX2RlZmF1bHQubmV4dFJhbmRvbU51bWJlcigpICogKG1heGltdW1HcmVlbiAtIG1pbmltdW1HcmVlbik7CiAgICAgICAgfQogICAgICAgIGxldCBibHVlID0gb3B0aW9ucy5ibHVlOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGJsdWUpKSB7CiAgICAgICAgICBjb25zdCBtaW5pbXVtQmx1ZSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMubWluaW11bUJsdWUsIDApOwogICAgICAgICAgY29uc3QgbWF4aW11bUJsdWUgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLm1heGltdW1CbHVlLCAxKTsKICAgICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlci5sZXNzVGhhbk9yRXF1YWxzKAogICAgICAgICAgICAibWluaW11bUJsdWUiLAogICAgICAgICAgICBtaW5pbXVtQmx1ZSwKICAgICAgICAgICAgbWF4aW11bUJsdWUKICAgICAgICAgICk7CiAgICAgICAgICBibHVlID0gbWluaW11bUJsdWUgKyBNYXRoX2RlZmF1bHQubmV4dFJhbmRvbU51bWJlcigpICogKG1heGltdW1CbHVlIC0gbWluaW11bUJsdWUpOwogICAgICAgIH0KICAgICAgICBsZXQgYWxwaGEgPSBvcHRpb25zLmFscGhhOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGFscGhhKSkgewogICAgICAgICAgY29uc3QgbWluaW11bUFscGhhID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5taW5pbXVtQWxwaGEsIDApOwogICAgICAgICAgY29uc3QgbWF4aW11bUFscGhhID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5tYXhpbXVtQWxwaGEsIDEpOwogICAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyLmxlc3NUaGFuT3JFcXVhbHMoCiAgICAgICAgICAgICJtaW5pbXVtQWxwaGEiLAogICAgICAgICAgICBtaW5pbXVtQWxwaGEsCiAgICAgICAgICAgIG1heGltdW1BbHBoYQogICAgICAgICAgKTsKICAgICAgICAgIGFscGhhID0gbWluaW11bUFscGhhICsgTWF0aF9kZWZhdWx0Lm5leHRSYW5kb21OdW1iZXIoKSAqIChtYXhpbXVtQWxwaGEgLSBtaW5pbXVtQWxwaGEpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKHJlZCwgZ3JlZW4sIGJsdWUsIGFscGhhKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LnJlZCA9IHJlZDsKICAgICAgICByZXN1bHQuZ3JlZW4gPSBncmVlbjsKICAgICAgICByZXN1bHQuYmx1ZSA9IGJsdWU7CiAgICAgICAgcmVzdWx0LmFscGhhID0gYWxwaGE7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgcmdiYU1hdGNoZXIgPSAvXiMoWzAtOWEtZl0pKFswLTlhLWZdKShbMC05YS1mXSkoWzAtOWEtZl0pPyQvaTsKICAgICAgcnJnZ2JiYWFNYXRjaGVyID0gL14jKFswLTlhLWZdezJ9KShbMC05YS1mXXsyfSkoWzAtOWEtZl17Mn0pKFswLTlhLWZdezJ9KT8kL2k7CiAgICAgIHJnYlBhcmVudGhlc2VzTWF0Y2hlciA9IC9ecmdiYT9ccypcKFxzKihbMC05Ll0rJT8pXHMqWyxcc10rXHMqKFswLTkuXSslPylccypbLFxzXStccyooWzAtOS5dKyU/KSg/OlxzKlssXHMvXStccyooWzAtOS5dKykpP1xzKlwpJC9pOwogICAgICBoc2xQYXJlbnRoZXNlc01hdGNoZXIgPSAvXmhzbGE/XHMqXChccyooWzAtOS5dKylccypbLFxzXStccyooWzAtOS5dKyUpXHMqWyxcc10rXHMqKFswLTkuXSslKSg/OlxzKlssXHMvXStccyooWzAtOS5dKykpP1xzKlwpJC9pOwogICAgICBDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcgPSBmdW5jdGlvbihjb2xvciwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yuc3RyaW5nKCJjb2xvciIsIGNvbG9yKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQ29sb3IoKTsKICAgICAgICB9CiAgICAgICAgY29sb3IgPSBjb2xvci50cmltKCk7CiAgICAgICAgY29uc3QgbmFtZWRDb2xvciA9IENvbG9yW2NvbG9yLnRvVXBwZXJDYXNlKCldOwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQobmFtZWRDb2xvcikpIHsKICAgICAgICAgIENvbG9yLmNsb25lKG5hbWVkQ29sb3IsIHJlc3VsdCk7CiAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0KICAgICAgICBsZXQgbWF0Y2hlcyA9IHJnYmFNYXRjaGVyLmV4ZWMoY29sb3IpOwogICAgICAgIGlmIChtYXRjaGVzICE9PSBudWxsKSB7CiAgICAgICAgICByZXN1bHQucmVkID0gcGFyc2VJbnQobWF0Y2hlc1sxXSwgMTYpIC8gMTU7CiAgICAgICAgICByZXN1bHQuZ3JlZW4gPSBwYXJzZUludChtYXRjaGVzWzJdLCAxNikgLyAxNTsKICAgICAgICAgIHJlc3VsdC5ibHVlID0gcGFyc2VJbnQobWF0Y2hlc1szXSwgMTYpIC8gMTU7CiAgICAgICAgICByZXN1bHQuYWxwaGEgPSBwYXJzZUludChkZWZhdWx0VmFsdWVfZGVmYXVsdChtYXRjaGVzWzRdLCAiZiIpLCAxNikgLyAxNTsKICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfQogICAgICAgIG1hdGNoZXMgPSBycmdnYmJhYU1hdGNoZXIuZXhlYyhjb2xvcik7CiAgICAgICAgaWYgKG1hdGNoZXMgIT09IG51bGwpIHsKICAgICAgICAgIHJlc3VsdC5yZWQgPSBwYXJzZUludChtYXRjaGVzWzFdLCAxNikgLyAyNTU7CiAgICAgICAgICByZXN1bHQuZ3JlZW4gPSBwYXJzZUludChtYXRjaGVzWzJdLCAxNikgLyAyNTU7CiAgICAgICAgICByZXN1bHQuYmx1ZSA9IHBhcnNlSW50KG1hdGNoZXNbM10sIDE2KSAvIDI1NTsKICAgICAgICAgIHJlc3VsdC5hbHBoYSA9IHBhcnNlSW50KGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG1hdGNoZXNbNF0sICJmZiIpLCAxNikgLyAyNTU7CiAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0KICAgICAgICBtYXRjaGVzID0gcmdiUGFyZW50aGVzZXNNYXRjaGVyLmV4ZWMoY29sb3IpOwogICAgICAgIGlmIChtYXRjaGVzICE9PSBudWxsKSB7CiAgICAgICAgICByZXN1bHQucmVkID0gcGFyc2VGbG9hdChtYXRjaGVzWzFdKSAvICgiJSIgPT09IG1hdGNoZXNbMV0uc3Vic3RyKC0xKSA/IDEwMCA6IDI1NSk7CiAgICAgICAgICByZXN1bHQuZ3JlZW4gPSBwYXJzZUZsb2F0KG1hdGNoZXNbMl0pIC8gKCIlIiA9PT0gbWF0Y2hlc1syXS5zdWJzdHIoLTEpID8gMTAwIDogMjU1KTsKICAgICAgICAgIHJlc3VsdC5ibHVlID0gcGFyc2VGbG9hdChtYXRjaGVzWzNdKSAvICgiJSIgPT09IG1hdGNoZXNbM10uc3Vic3RyKC0xKSA/IDEwMCA6IDI1NSk7CiAgICAgICAgICByZXN1bHQuYWxwaGEgPSBwYXJzZUZsb2F0KGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG1hdGNoZXNbNF0sICIxLjAiKSk7CiAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0KICAgICAgICBtYXRjaGVzID0gaHNsUGFyZW50aGVzZXNNYXRjaGVyLmV4ZWMoY29sb3IpOwogICAgICAgIGlmIChtYXRjaGVzICE9PSBudWxsKSB7CiAgICAgICAgICByZXR1cm4gQ29sb3IuZnJvbUhzbCgKICAgICAgICAgICAgcGFyc2VGbG9hdChtYXRjaGVzWzFdKSAvIDM2MCwKICAgICAgICAgICAgcGFyc2VGbG9hdChtYXRjaGVzWzJdKSAvIDEwMCwKICAgICAgICAgICAgcGFyc2VGbG9hdChtYXRjaGVzWzNdKSAvIDEwMCwKICAgICAgICAgICAgcGFyc2VGbG9hdChkZWZhdWx0VmFsdWVfZGVmYXVsdChtYXRjaGVzWzRdLCAiMS4wIikpLAogICAgICAgICAgICByZXN1bHQKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdCA9IHZvaWQgMDsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDb2xvci5wYWNrZWRMZW5ndGggPSA0OwogICAgICBDb2xvci5wYWNrID0gZnVuY3Rpb24odmFsdWUsIGFycmF5LCBzdGFydGluZ0luZGV4KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJ2YWx1ZSIsIHZhbHVlKTsKICAgICAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoImFycmF5IiwgYXJyYXkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUucmVkOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5ncmVlbjsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuYmx1ZTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4XSA9IHZhbHVlLmFscGhhOwogICAgICAgIHJldHVybiBhcnJheTsKICAgICAgfTsKICAgICAgQ29sb3IudW5wYWNrID0gZnVuY3Rpb24oYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQuZGVmaW5lZCgiYXJyYXkiLCBhcnJheSk7CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBDb2xvcigpOwogICAgICAgIH0KICAgICAgICByZXN1bHQucmVkID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICByZXN1bHQuZ3JlZW4gPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIHJlc3VsdC5ibHVlID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICByZXN1bHQuYWxwaGEgPSBhcnJheVtzdGFydGluZ0luZGV4XTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDb2xvci5ieXRlVG9GbG9hdCA9IGZ1bmN0aW9uKG51bWJlcikgewogICAgICAgIHJldHVybiBudW1iZXIgLyAyNTU7CiAgICAgIH07CiAgICAgIENvbG9yLmZsb2F0VG9CeXRlID0gZnVuY3Rpb24obnVtYmVyKSB7CiAgICAgICAgcmV0dXJuIG51bWJlciA9PT0gMSA/IDI1NSA6IG51bWJlciAqIDI1NiB8IDA7CiAgICAgIH07CiAgICAgIENvbG9yLmNsb25lID0gZnVuY3Rpb24oY29sb3IsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGNvbG9yKSkgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihjb2xvci5yZWQsIGNvbG9yLmdyZWVuLCBjb2xvci5ibHVlLCBjb2xvci5hbHBoYSk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5yZWQgPSBjb2xvci5yZWQ7CiAgICAgICAgcmVzdWx0LmdyZWVuID0gY29sb3IuZ3JlZW47CiAgICAgICAgcmVzdWx0LmJsdWUgPSBjb2xvci5ibHVlOwogICAgICAgIHJlc3VsdC5hbHBoYSA9IGNvbG9yLmFscGhhOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENvbG9yLmVxdWFscyA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7CiAgICAgICAgcmV0dXJuIGxlZnQgPT09IHJpZ2h0IHx8IC8vCiAgICAgICAgZGVmaW5lZF9kZWZhdWx0KGxlZnQpICYmIC8vCiAgICAgICAgZGVmaW5lZF9kZWZhdWx0KHJpZ2h0KSAmJiAvLwogICAgICAgIGxlZnQucmVkID09PSByaWdodC5yZWQgJiYgLy8KICAgICAgICBsZWZ0LmdyZWVuID09PSByaWdodC5ncmVlbiAmJiAvLwogICAgICAgIGxlZnQuYmx1ZSA9PT0gcmlnaHQuYmx1ZSAmJiAvLwogICAgICAgIGxlZnQuYWxwaGEgPT09IHJpZ2h0LmFscGhhOwogICAgICB9OwogICAgICBDb2xvci5lcXVhbHNBcnJheSA9IGZ1bmN0aW9uKGNvbG9yLCBhcnJheSwgb2Zmc2V0KSB7CiAgICAgICAgcmV0dXJuIGNvbG9yLnJlZCA9PT0gYXJyYXlbb2Zmc2V0XSAmJiBjb2xvci5ncmVlbiA9PT0gYXJyYXlbb2Zmc2V0ICsgMV0gJiYgY29sb3IuYmx1ZSA9PT0gYXJyYXlbb2Zmc2V0ICsgMl0gJiYgY29sb3IuYWxwaGEgPT09IGFycmF5W29mZnNldCArIDNdOwogICAgICB9OwogICAgICBDb2xvci5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbihyZXN1bHQpIHsKICAgICAgICByZXR1cm4gQ29sb3IuY2xvbmUodGhpcywgcmVzdWx0KTsKICAgICAgfTsKICAgICAgQ29sb3IucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uKG90aGVyKSB7CiAgICAgICAgcmV0dXJuIENvbG9yLmVxdWFscyh0aGlzLCBvdGhlcik7CiAgICAgIH07CiAgICAgIENvbG9yLnByb3RvdHlwZS5lcXVhbHNFcHNpbG9uID0gZnVuY3Rpb24ob3RoZXIsIGVwc2lsb24pIHsKICAgICAgICByZXR1cm4gdGhpcyA9PT0gb3RoZXIgfHwgLy8KICAgICAgICBkZWZpbmVkX2RlZmF1bHQob3RoZXIpICYmIC8vCiAgICAgICAgTWF0aC5hYnModGhpcy5yZWQgLSBvdGhlci5yZWQpIDw9IGVwc2lsb24gJiYgLy8KICAgICAgICBNYXRoLmFicyh0aGlzLmdyZWVuIC0gb3RoZXIuZ3JlZW4pIDw9IGVwc2lsb24gJiYgLy8KICAgICAgICBNYXRoLmFicyh0aGlzLmJsdWUgLSBvdGhlci5ibHVlKSA8PSBlcHNpbG9uICYmIC8vCiAgICAgICAgTWF0aC5hYnModGhpcy5hbHBoYSAtIG90aGVyLmFscGhhKSA8PSBlcHNpbG9uOwogICAgICB9OwogICAgICBDb2xvci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gYCgke3RoaXMucmVkfSwgJHt0aGlzLmdyZWVufSwgJHt0aGlzLmJsdWV9LCAke3RoaXMuYWxwaGF9KWA7CiAgICAgIH07CiAgICAgIENvbG9yLnByb3RvdHlwZS50b0Nzc0NvbG9yU3RyaW5nID0gZnVuY3Rpb24oKSB7CiAgICAgICAgY29uc3QgcmVkID0gQ29sb3IuZmxvYXRUb0J5dGUodGhpcy5yZWQpOwogICAgICAgIGNvbnN0IGdyZWVuID0gQ29sb3IuZmxvYXRUb0J5dGUodGhpcy5ncmVlbik7CiAgICAgICAgY29uc3QgYmx1ZSA9IENvbG9yLmZsb2F0VG9CeXRlKHRoaXMuYmx1ZSk7CiAgICAgICAgaWYgKHRoaXMuYWxwaGEgPT09IDEpIHsKICAgICAgICAgIHJldHVybiBgcmdiKCR7cmVkfSwke2dyZWVufSwke2JsdWV9KWA7CiAgICAgICAgfQogICAgICAgIHJldHVybiBgcmdiYSgke3JlZH0sJHtncmVlbn0sJHtibHVlfSwke3RoaXMuYWxwaGF9KWA7CiAgICAgIH07CiAgICAgIENvbG9yLnByb3RvdHlwZS50b0Nzc0hleFN0cmluZyA9IGZ1bmN0aW9uKCkgewogICAgICAgIGxldCByID0gQ29sb3IuZmxvYXRUb0J5dGUodGhpcy5yZWQpLnRvU3RyaW5nKDE2KTsKICAgICAgICBpZiAoci5sZW5ndGggPCAyKSB7CiAgICAgICAgICByID0gYDAke3J9YDsKICAgICAgICB9CiAgICAgICAgbGV0IGcgPSBDb2xvci5mbG9hdFRvQnl0ZSh0aGlzLmdyZWVuKS50b1N0cmluZygxNik7CiAgICAgICAgaWYgKGcubGVuZ3RoIDwgMikgewogICAgICAgICAgZyA9IGAwJHtnfWA7CiAgICAgICAgfQogICAgICAgIGxldCBiID0gQ29sb3IuZmxvYXRUb0J5dGUodGhpcy5ibHVlKS50b1N0cmluZygxNik7CiAgICAgICAgaWYgKGIubGVuZ3RoIDwgMikgewogICAgICAgICAgYiA9IGAwJHtifWA7CiAgICAgICAgfQogICAgICAgIGlmICh0aGlzLmFscGhhIDwgMSkgewogICAgICAgICAgbGV0IGhleEFscGhhID0gQ29sb3IuZmxvYXRUb0J5dGUodGhpcy5hbHBoYSkudG9TdHJpbmcoMTYpOwogICAgICAgICAgaWYgKGhleEFscGhhLmxlbmd0aCA8IDIpIHsKICAgICAgICAgICAgaGV4QWxwaGEgPSBgMCR7aGV4QWxwaGF9YDsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBgIyR7cn0ke2d9JHtifSR7aGV4QWxwaGF9YDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGAjJHtyfSR7Z30ke2J9YDsKICAgICAgfTsKICAgICAgQ29sb3IucHJvdG90eXBlLnRvQnl0ZXMgPSBmdW5jdGlvbihyZXN1bHQpIHsKICAgICAgICBjb25zdCByZWQgPSBDb2xvci5mbG9hdFRvQnl0ZSh0aGlzLnJlZCk7CiAgICAgICAgY29uc3QgZ3JlZW4gPSBDb2xvci5mbG9hdFRvQnl0ZSh0aGlzLmdyZWVuKTsKICAgICAgICBjb25zdCBibHVlID0gQ29sb3IuZmxvYXRUb0J5dGUodGhpcy5ibHVlKTsKICAgICAgICBjb25zdCBhbHBoYSA9IENvbG9yLmZsb2F0VG9CeXRlKHRoaXMuYWxwaGEpOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJldHVybiBbcmVkLCBncmVlbiwgYmx1ZSwgYWxwaGFdOwogICAgICAgIH0KICAgICAgICByZXN1bHRbMF0gPSByZWQ7CiAgICAgICAgcmVzdWx0WzFdID0gZ3JlZW47CiAgICAgICAgcmVzdWx0WzJdID0gYmx1ZTsKICAgICAgICByZXN1bHRbM10gPSBhbHBoYTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDb2xvci5wcm90b3R5cGUudG9SZ2JhID0gZnVuY3Rpb24oKSB7CiAgICAgICAgc2NyYXRjaFVpbnQ4QXJyYXlbMF0gPSBDb2xvci5mbG9hdFRvQnl0ZSh0aGlzLnJlZCk7CiAgICAgICAgc2NyYXRjaFVpbnQ4QXJyYXlbMV0gPSBDb2xvci5mbG9hdFRvQnl0ZSh0aGlzLmdyZWVuKTsKICAgICAgICBzY3JhdGNoVWludDhBcnJheVsyXSA9IENvbG9yLmZsb2F0VG9CeXRlKHRoaXMuYmx1ZSk7CiAgICAgICAgc2NyYXRjaFVpbnQ4QXJyYXlbM10gPSBDb2xvci5mbG9hdFRvQnl0ZSh0aGlzLmFscGhhKTsKICAgICAgICByZXR1cm4gc2NyYXRjaFVpbnQzMkFycmF5WzBdOwogICAgICB9OwogICAgICBDb2xvci5wcm90b3R5cGUuYnJpZ2h0ZW4gPSBmdW5jdGlvbihtYWduaXR1ZGUsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigibWFnbml0dWRlIiwgbWFnbml0dWRlKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygibWFnbml0dWRlIiwgbWFnbml0dWRlLCAwKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgbWFnbml0dWRlID0gMSAtIG1hZ25pdHVkZTsKICAgICAgICByZXN1bHQucmVkID0gMSAtICgxIC0gdGhpcy5yZWQpICogbWFnbml0dWRlOwogICAgICAgIHJlc3VsdC5ncmVlbiA9IDEgLSAoMSAtIHRoaXMuZ3JlZW4pICogbWFnbml0dWRlOwogICAgICAgIHJlc3VsdC5ibHVlID0gMSAtICgxIC0gdGhpcy5ibHVlKSAqIG1hZ25pdHVkZTsKICAgICAgICByZXN1bHQuYWxwaGEgPSB0aGlzLmFscGhhOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENvbG9yLnByb3RvdHlwZS5kYXJrZW4gPSBmdW5jdGlvbihtYWduaXR1ZGUsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigibWFnbml0dWRlIiwgbWFnbml0dWRlKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIuZ3JlYXRlclRoYW5PckVxdWFscygibWFnbml0dWRlIiwgbWFnbml0dWRlLCAwKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgbWFnbml0dWRlID0gMSAtIG1hZ25pdHVkZTsKICAgICAgICByZXN1bHQucmVkID0gdGhpcy5yZWQgKiBtYWduaXR1ZGU7CiAgICAgICAgcmVzdWx0LmdyZWVuID0gdGhpcy5ncmVlbiAqIG1hZ25pdHVkZTsKICAgICAgICByZXN1bHQuYmx1ZSA9IHRoaXMuYmx1ZSAqIG1hZ25pdHVkZTsKICAgICAgICByZXN1bHQuYWxwaGEgPSB0aGlzLmFscGhhOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENvbG9yLnByb3RvdHlwZS53aXRoQWxwaGEgPSBmdW5jdGlvbihhbHBoYSwgcmVzdWx0KSB7CiAgICAgICAgcmV0dXJuIENvbG9yLmZyb21BbHBoYSh0aGlzLCBhbHBoYSwgcmVzdWx0KTsKICAgICAgfTsKICAgICAgQ29sb3IuYWRkID0gZnVuY3Rpb24obGVmdCwgcmlnaHQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibGVmdCIsIGxlZnQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmlnaHQiLCByaWdodCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdC5yZWQgPSBsZWZ0LnJlZCArIHJpZ2h0LnJlZDsKICAgICAgICByZXN1bHQuZ3JlZW4gPSBsZWZ0LmdyZWVuICsgcmlnaHQuZ3JlZW47CiAgICAgICAgcmVzdWx0LmJsdWUgPSBsZWZ0LmJsdWUgKyByaWdodC5ibHVlOwogICAgICAgIHJlc3VsdC5hbHBoYSA9IGxlZnQuYWxwaGEgKyByaWdodC5hbHBoYTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDb2xvci5zdWJ0cmFjdCA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImxlZnQiLCBsZWZ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJpZ2h0IiwgcmlnaHQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHQucmVkID0gbGVmdC5yZWQgLSByaWdodC5yZWQ7CiAgICAgICAgcmVzdWx0LmdyZWVuID0gbGVmdC5ncmVlbiAtIHJpZ2h0LmdyZWVuOwogICAgICAgIHJlc3VsdC5ibHVlID0gbGVmdC5ibHVlIC0gcmlnaHQuYmx1ZTsKICAgICAgICByZXN1bHQuYWxwaGEgPSBsZWZ0LmFscGhhIC0gcmlnaHQuYWxwaGE7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ29sb3IubXVsdGlwbHkgPSBmdW5jdGlvbihsZWZ0LCByaWdodCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJsZWZ0IiwgbGVmdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyaWdodCIsIHJpZ2h0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0LnJlZCA9IGxlZnQucmVkICogcmlnaHQucmVkOwogICAgICAgIHJlc3VsdC5ncmVlbiA9IGxlZnQuZ3JlZW4gKiByaWdodC5ncmVlbjsKICAgICAgICByZXN1bHQuYmx1ZSA9IGxlZnQuYmx1ZSAqIHJpZ2h0LmJsdWU7CiAgICAgICAgcmVzdWx0LmFscGhhID0gbGVmdC5hbHBoYSAqIHJpZ2h0LmFscGhhOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENvbG9yLmRpdmlkZSA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImxlZnQiLCBsZWZ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJpZ2h0IiwgcmlnaHQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICByZXN1bHQucmVkID0gbGVmdC5yZWQgLyByaWdodC5yZWQ7CiAgICAgICAgcmVzdWx0LmdyZWVuID0gbGVmdC5ncmVlbiAvIHJpZ2h0LmdyZWVuOwogICAgICAgIHJlc3VsdC5ibHVlID0gbGVmdC5ibHVlIC8gcmlnaHQuYmx1ZTsKICAgICAgICByZXN1bHQuYWxwaGEgPSBsZWZ0LmFscGhhIC8gcmlnaHQuYWxwaGE7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ29sb3IubW9kID0gZnVuY3Rpb24obGVmdCwgcmlnaHQsIHJlc3VsdCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgibGVmdCIsIGxlZnQpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmlnaHQiLCByaWdodCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdC5yZWQgPSBsZWZ0LnJlZCAlIHJpZ2h0LnJlZDsKICAgICAgICByZXN1bHQuZ3JlZW4gPSBsZWZ0LmdyZWVuICUgcmlnaHQuZ3JlZW47CiAgICAgICAgcmVzdWx0LmJsdWUgPSBsZWZ0LmJsdWUgJSByaWdodC5ibHVlOwogICAgICAgIHJlc3VsdC5hbHBoYSA9IGxlZnQuYWxwaGEgJSByaWdodC5hbHBoYTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBDb2xvci5sZXJwID0gZnVuY3Rpb24oc3RhcnQsIGVuZCwgdCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJzdGFydCIsIHN0YXJ0KTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImVuZCIsIGVuZCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJ0IiwgdCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZXN1bHQiLCByZXN1bHQpOwogICAgICAgIHJlc3VsdC5yZWQgPSBNYXRoX2RlZmF1bHQubGVycChzdGFydC5yZWQsIGVuZC5yZWQsIHQpOwogICAgICAgIHJlc3VsdC5ncmVlbiA9IE1hdGhfZGVmYXVsdC5sZXJwKHN0YXJ0LmdyZWVuLCBlbmQuZ3JlZW4sIHQpOwogICAgICAgIHJlc3VsdC5ibHVlID0gTWF0aF9kZWZhdWx0LmxlcnAoc3RhcnQuYmx1ZSwgZW5kLmJsdWUsIHQpOwogICAgICAgIHJlc3VsdC5hbHBoYSA9IE1hdGhfZGVmYXVsdC5sZXJwKHN0YXJ0LmFscGhhLCBlbmQuYWxwaGEsIHQpOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIENvbG9yLm11bHRpcGx5QnlTY2FsYXIgPSBmdW5jdGlvbihjb2xvciwgc2NhbGFyLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImNvbG9yIiwgY29sb3IpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigic2NhbGFyIiwgc2NhbGFyKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0LnJlZCA9IGNvbG9yLnJlZCAqIHNjYWxhcjsKICAgICAgICByZXN1bHQuZ3JlZW4gPSBjb2xvci5ncmVlbiAqIHNjYWxhcjsKICAgICAgICByZXN1bHQuYmx1ZSA9IGNvbG9yLmJsdWUgKiBzY2FsYXI7CiAgICAgICAgcmVzdWx0LmFscGhhID0gY29sb3IuYWxwaGEgKiBzY2FsYXI7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ29sb3IuZGl2aWRlQnlTY2FsYXIgPSBmdW5jdGlvbihjb2xvciwgc2NhbGFyLCByZXN1bHQpIHsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImNvbG9yIiwgY29sb3IpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigic2NhbGFyIiwgc2NhbGFyKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoInJlc3VsdCIsIHJlc3VsdCk7CiAgICAgICAgcmVzdWx0LnJlZCA9IGNvbG9yLnJlZCAvIHNjYWxhcjsKICAgICAgICByZXN1bHQuZ3JlZW4gPSBjb2xvci5ncmVlbiAvIHNjYWxhcjsKICAgICAgICByZXN1bHQuYmx1ZSA9IGNvbG9yLmJsdWUgLyBzY2FsYXI7CiAgICAgICAgcmVzdWx0LmFscGhhID0gY29sb3IuYWxwaGEgLyBzY2FsYXI7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgQ29sb3IuQUxJQ0VCTFVFID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNGMEY4RkYiKSk7CiAgICAgIENvbG9yLkFOVElRVUVXSElURSA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjRkFFQkQ3IikpOwogICAgICBDb2xvci5BUVVBID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiMwMEZGRkYiKSk7CiAgICAgIENvbG9yLkFRVUFNQVJJTkUgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzdGRkZENCIpKTsKICAgICAgQ29sb3IuQVpVUkUgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0YwRkZGRiIpKTsKICAgICAgQ29sb3IuQkVJR0UgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0Y1RjVEQyIpKTsKICAgICAgQ29sb3IuQklTUVVFID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNGRkU0QzQiKSk7CiAgICAgIENvbG9yLkJMQUNLID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiMwMDAwMDAiKSk7CiAgICAgIENvbG9yLkJMQU5DSEVEQUxNT05EID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNGRkVCQ0QiKSk7CiAgICAgIENvbG9yLkJMVUUgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzAwMDBGRiIpKTsKICAgICAgQ29sb3IuQkxVRVZJT0xFVCA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjOEEyQkUyIikpOwogICAgICBDb2xvci5CUk9XTiA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjQTUyQTJBIikpOwogICAgICBDb2xvci5CVVJMWVdPT0QgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0RFQjg4NyIpKTsKICAgICAgQ29sb3IuQ0FERVRCTFVFID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiM1RjlFQTAiKSk7CiAgICAgIENvbG9yLkNIQVJUUkVVU0UgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzdGRkYwMCIpKTsKICAgICAgQ29sb3IuQ0hPQ09MQVRFID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNEMjY5MUUiKSk7CiAgICAgIENvbG9yLkNPUkFMID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNGRjdGNTAiKSk7CiAgICAgIENvbG9yLkNPUk5GTE9XRVJCTFVFID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiM2NDk1RUQiKSk7CiAgICAgIENvbG9yLkNPUk5TSUxLID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNGRkY4REMiKSk7CiAgICAgIENvbG9yLkNSSU1TT04gPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0RDMTQzQyIpKTsKICAgICAgQ29sb3IuQ1lBTiA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjMDBGRkZGIikpOwogICAgICBDb2xvci5EQVJLQkxVRSA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjMDAwMDhCIikpOwogICAgICBDb2xvci5EQVJLQ1lBTiA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjMDA4QjhCIikpOwogICAgICBDb2xvci5EQVJLR09MREVOUk9EID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNCODg2MEIiKSk7CiAgICAgIENvbG9yLkRBUktHUkFZID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNBOUE5QTkiKSk7CiAgICAgIENvbG9yLkRBUktHUkVFTiA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjMDA2NDAwIikpOwogICAgICBDb2xvci5EQVJLR1JFWSA9IENvbG9yLkRBUktHUkFZOwogICAgICBDb2xvci5EQVJLS0hBS0kgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0JEQjc2QiIpKTsKICAgICAgQ29sb3IuREFSS01BR0VOVEEgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzhCMDA4QiIpKTsKICAgICAgQ29sb3IuREFSS09MSVZFR1JFRU4gPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzU1NkIyRiIpKTsKICAgICAgQ29sb3IuREFSS09SQU5HRSA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjRkY4QzAwIikpOwogICAgICBDb2xvci5EQVJLT1JDSElEID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiM5OTMyQ0MiKSk7CiAgICAgIENvbG9yLkRBUktSRUQgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzhCMDAwMCIpKTsKICAgICAgQ29sb3IuREFSS1NBTE1PTiA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjRTk5NjdBIikpOwogICAgICBDb2xvci5EQVJLU0VBR1JFRU4gPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzhGQkM4RiIpKTsKICAgICAgQ29sb3IuREFSS1NMQVRFQkxVRSA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjNDgzRDhCIikpOwogICAgICBDb2xvci5EQVJLU0xBVEVHUkFZID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiMyRjRGNEYiKSk7CiAgICAgIENvbG9yLkRBUktTTEFURUdSRVkgPSBDb2xvci5EQVJLU0xBVEVHUkFZOwogICAgICBDb2xvci5EQVJLVFVSUVVPSVNFID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiMwMENFRDEiKSk7CiAgICAgIENvbG9yLkRBUktWSU9MRVQgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzk0MDBEMyIpKTsKICAgICAgQ29sb3IuREVFUFBJTksgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0ZGMTQ5MyIpKTsKICAgICAgQ29sb3IuREVFUFNLWUJMVUUgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzAwQkZGRiIpKTsKICAgICAgQ29sb3IuRElNR1JBWSA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjNjk2OTY5IikpOwogICAgICBDb2xvci5ESU1HUkVZID0gQ29sb3IuRElNR1JBWTsKICAgICAgQ29sb3IuRE9ER0VSQkxVRSA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjMUU5MEZGIikpOwogICAgICBDb2xvci5GSVJFQlJJQ0sgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0IyMjIyMiIpKTsKICAgICAgQ29sb3IuRkxPUkFMV0hJVEUgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0ZGRkFGMCIpKTsKICAgICAgQ29sb3IuRk9SRVNUR1JFRU4gPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzIyOEIyMiIpKTsKICAgICAgQ29sb3IuRlVDSFNJQSA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjRkYwMEZGIikpOwogICAgICBDb2xvci5HQUlOU0JPUk8gPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0RDRENEQyIpKTsKICAgICAgQ29sb3IuR0hPU1RXSElURSA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjRjhGOEZGIikpOwogICAgICBDb2xvci5HT0xEID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNGRkQ3MDAiKSk7CiAgICAgIENvbG9yLkdPTERFTlJPRCA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjREFBNTIwIikpOwogICAgICBDb2xvci5HUkFZID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiM4MDgwODAiKSk7CiAgICAgIENvbG9yLkdSRUVOID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiMwMDgwMDAiKSk7CiAgICAgIENvbG9yLkdSRUVOWUVMTE9XID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNBREZGMkYiKSk7CiAgICAgIENvbG9yLkdSRVkgPSBDb2xvci5HUkFZOwogICAgICBDb2xvci5IT05FWURFVyA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjRjBGRkYwIikpOwogICAgICBDb2xvci5IT1RQSU5LID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNGRjY5QjQiKSk7CiAgICAgIENvbG9yLklORElBTlJFRCA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjQ0Q1QzVDIikpOwogICAgICBDb2xvci5JTkRJR08gPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzRCMDA4MiIpKTsKICAgICAgQ29sb3IuSVZPUlkgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0ZGRkZGMCIpKTsKICAgICAgQ29sb3IuS0hBS0kgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0YwRTY4QyIpKTsKICAgICAgQ29sb3IuTEFWRU5ERVIgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0U2RTZGQSIpKTsKICAgICAgQ29sb3IuTEFWRU5EQVJfQkxVU0ggPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0ZGRjBGNSIpKTsKICAgICAgQ29sb3IuTEFXTkdSRUVOID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiM3Q0ZDMDAiKSk7CiAgICAgIENvbG9yLkxFTU9OQ0hJRkZPTiA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjRkZGQUNEIikpOwogICAgICBDb2xvci5MSUdIVEJMVUUgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0FERDhFNiIpKTsKICAgICAgQ29sb3IuTElHSFRDT1JBTCA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjRjA4MDgwIikpOwogICAgICBDb2xvci5MSUdIVENZQU4gPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0UwRkZGRiIpKTsKICAgICAgQ29sb3IuTElHSFRHT0xERU5ST0RZRUxMT1cgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0ZBRkFEMiIpKTsKICAgICAgQ29sb3IuTElHSFRHUkFZID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNEM0QzRDMiKSk7CiAgICAgIENvbG9yLkxJR0hUR1JFRU4gPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzkwRUU5MCIpKTsKICAgICAgQ29sb3IuTElHSFRHUkVZID0gQ29sb3IuTElHSFRHUkFZOwogICAgICBDb2xvci5MSUdIVFBJTksgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0ZGQjZDMSIpKTsKICAgICAgQ29sb3IuTElHSFRTRUFHUkVFTiA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjMjBCMkFBIikpOwogICAgICBDb2xvci5MSUdIVFNLWUJMVUUgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzg3Q0VGQSIpKTsKICAgICAgQ29sb3IuTElHSFRTTEFURUdSQVkgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzc3ODg5OSIpKTsKICAgICAgQ29sb3IuTElHSFRTTEFURUdSRVkgPSBDb2xvci5MSUdIVFNMQVRFR1JBWTsKICAgICAgQ29sb3IuTElHSFRTVEVFTEJMVUUgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0IwQzRERSIpKTsKICAgICAgQ29sb3IuTElHSFRZRUxMT1cgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0ZGRkZFMCIpKTsKICAgICAgQ29sb3IuTElNRSA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjMDBGRjAwIikpOwogICAgICBDb2xvci5MSU1FR1JFRU4gPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzMyQ0QzMiIpKTsKICAgICAgQ29sb3IuTElORU4gPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0ZBRjBFNiIpKTsKICAgICAgQ29sb3IuTUFHRU5UQSA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjRkYwMEZGIikpOwogICAgICBDb2xvci5NQVJPT04gPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzgwMDAwMCIpKTsKICAgICAgQ29sb3IuTUVESVVNQVFVQU1BUklORSA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjNjZDREFBIikpOwogICAgICBDb2xvci5NRURJVU1CTFVFID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiMwMDAwQ0QiKSk7CiAgICAgIENvbG9yLk1FRElVTU9SQ0hJRCA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjQkE1NUQzIikpOwogICAgICBDb2xvci5NRURJVU1QVVJQTEUgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzkzNzBEQiIpKTsKICAgICAgQ29sb3IuTUVESVVNU0VBR1JFRU4gPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzNDQjM3MSIpKTsKICAgICAgQ29sb3IuTUVESVVNU0xBVEVCTFVFID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiM3QjY4RUUiKSk7CiAgICAgIENvbG9yLk1FRElVTVNQUklOR0dSRUVOID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiMwMEZBOUEiKSk7CiAgICAgIENvbG9yLk1FRElVTVRVUlFVT0lTRSA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjNDhEMUNDIikpOwogICAgICBDb2xvci5NRURJVU1WSU9MRVRSRUQgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0M3MTU4NSIpKTsKICAgICAgQ29sb3IuTUlETklHSFRCTFVFID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiMxOTE5NzAiKSk7CiAgICAgIENvbG9yLk1JTlRDUkVBTSA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjRjVGRkZBIikpOwogICAgICBDb2xvci5NSVNUWVJPU0UgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0ZGRTRFMSIpKTsKICAgICAgQ29sb3IuTU9DQ0FTSU4gPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0ZGRTRCNSIpKTsKICAgICAgQ29sb3IuTkFWQUpPV0hJVEUgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0ZGREVBRCIpKTsKICAgICAgQ29sb3IuTkFWWSA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjMDAwMDgwIikpOwogICAgICBDb2xvci5PTERMQUNFID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNGREY1RTYiKSk7CiAgICAgIENvbG9yLk9MSVZFID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiM4MDgwMDAiKSk7CiAgICAgIENvbG9yLk9MSVZFRFJBQiA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjNkI4RTIzIikpOwogICAgICBDb2xvci5PUkFOR0UgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0ZGQTUwMCIpKTsKICAgICAgQ29sb3IuT1JBTkdFUkVEID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNGRjQ1MDAiKSk7CiAgICAgIENvbG9yLk9SQ0hJRCA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjREE3MEQ2IikpOwogICAgICBDb2xvci5QQUxFR09MREVOUk9EID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNFRUU4QUEiKSk7CiAgICAgIENvbG9yLlBBTEVHUkVFTiA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjOThGQjk4IikpOwogICAgICBDb2xvci5QQUxFVFVSUVVPSVNFID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNBRkVFRUUiKSk7CiAgICAgIENvbG9yLlBBTEVWSU9MRVRSRUQgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0RCNzA5MyIpKTsKICAgICAgQ29sb3IuUEFQQVlBV0hJUCA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjRkZFRkQ1IikpOwogICAgICBDb2xvci5QRUFDSFBVRkYgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0ZGREFCOSIpKTsKICAgICAgQ29sb3IuUEVSVSA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjQ0Q4NTNGIikpOwogICAgICBDb2xvci5QSU5LID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNGRkMwQ0IiKSk7CiAgICAgIENvbG9yLlBMVU0gPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0REQTBERCIpKTsKICAgICAgQ29sb3IuUE9XREVSQkxVRSA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjQjBFMEU2IikpOwogICAgICBDb2xvci5QVVJQTEUgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzgwMDA4MCIpKTsKICAgICAgQ29sb3IuUkVEID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNGRjAwMDAiKSk7CiAgICAgIENvbG9yLlJPU1lCUk9XTiA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjQkM4RjhGIikpOwogICAgICBDb2xvci5ST1lBTEJMVUUgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzQxNjlFMSIpKTsKICAgICAgQ29sb3IuU0FERExFQlJPV04gPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzhCNDUxMyIpKTsKICAgICAgQ29sb3IuU0FMTU9OID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNGQTgwNzIiKSk7CiAgICAgIENvbG9yLlNBTkRZQlJPV04gPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0Y0QTQ2MCIpKTsKICAgICAgQ29sb3IuU0VBR1JFRU4gPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzJFOEI1NyIpKTsKICAgICAgQ29sb3IuU0VBU0hFTEwgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0ZGRjVFRSIpKTsKICAgICAgQ29sb3IuU0lFTk5BID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNBMDUyMkQiKSk7CiAgICAgIENvbG9yLlNJTFZFUiA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjQzBDMEMwIikpOwogICAgICBDb2xvci5TS1lCTFVFID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiM4N0NFRUIiKSk7CiAgICAgIENvbG9yLlNMQVRFQkxVRSA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjNkE1QUNEIikpOwogICAgICBDb2xvci5TTEFURUdSQVkgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzcwODA5MCIpKTsKICAgICAgQ29sb3IuU0xBVEVHUkVZID0gQ29sb3IuU0xBVEVHUkFZOwogICAgICBDb2xvci5TTk9XID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNGRkZBRkEiKSk7CiAgICAgIENvbG9yLlNQUklOR0dSRUVOID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiMwMEZGN0YiKSk7CiAgICAgIENvbG9yLlNURUVMQkxVRSA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjNDY4MkI0IikpOwogICAgICBDb2xvci5UQU4gPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0QyQjQ4QyIpKTsKICAgICAgQ29sb3IuVEVBTCA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjMDA4MDgwIikpOwogICAgICBDb2xvci5USElTVExFID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNEOEJGRDgiKSk7CiAgICAgIENvbG9yLlRPTUFUTyA9IE9iamVjdC5mcmVlemUoQ29sb3IuZnJvbUNzc0NvbG9yU3RyaW5nKCIjRkY2MzQ3IikpOwogICAgICBDb2xvci5UVVJRVU9JU0UgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiIzQwRTBEMCIpKTsKICAgICAgQ29sb3IuVklPTEVUID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNFRTgyRUUiKSk7CiAgICAgIENvbG9yLldIRUFUID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNGNURFQjMiKSk7CiAgICAgIENvbG9yLldISVRFID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNGRkZGRkYiKSk7CiAgICAgIENvbG9yLldISVRFU01PS0UgPSBPYmplY3QuZnJlZXplKENvbG9yLmZyb21Dc3NDb2xvclN0cmluZygiI0Y1RjVGNSIpKTsKICAgICAgQ29sb3IuWUVMTE9XID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiNGRkZGMDAiKSk7CiAgICAgIENvbG9yLllFTExPV0dSRUVOID0gT2JqZWN0LmZyZWV6ZShDb2xvci5mcm9tQ3NzQ29sb3JTdHJpbmcoIiM5QUNEMzIiKSk7CiAgICAgIENvbG9yLlRSQU5TUEFSRU5UID0gT2JqZWN0LmZyZWV6ZShuZXcgQ29sb3IoMCwgMCwgMCwgMCkpOwogICAgICBDb2xvcl9kZWZhdWx0ID0gQ29sb3I7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9Qb2x5bGluZUdlb21ldHJ5LmpzCiAgZnVuY3Rpb24gaW50ZXJwb2xhdGVDb2xvcnMocDAsIHAxLCBjb2xvcjAsIGNvbG9yMSwgbnVtUG9pbnRzKSB7CiAgICBjb25zdCBjb2xvcnMgPSBzY3JhdGNoSW50ZXJwb2xhdGVDb2xvcnNBcnJheTsKICAgIGNvbG9ycy5sZW5ndGggPSBudW1Qb2ludHM7CiAgICBsZXQgaTsKICAgIGNvbnN0IHIwID0gY29sb3IwLnJlZDsKICAgIGNvbnN0IGcwID0gY29sb3IwLmdyZWVuOwogICAgY29uc3QgYjAgPSBjb2xvcjAuYmx1ZTsKICAgIGNvbnN0IGEwID0gY29sb3IwLmFscGhhOwogICAgY29uc3QgcjEgPSBjb2xvcjEucmVkOwogICAgY29uc3QgZzEgPSBjb2xvcjEuZ3JlZW47CiAgICBjb25zdCBiMSA9IGNvbG9yMS5ibHVlOwogICAgY29uc3QgYTEgPSBjb2xvcjEuYWxwaGE7CiAgICBpZiAoQ29sb3JfZGVmYXVsdC5lcXVhbHMoY29sb3IwLCBjb2xvcjEpKSB7CiAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1Qb2ludHM7IGkrKykgewogICAgICAgIGNvbG9yc1tpXSA9IENvbG9yX2RlZmF1bHQuY2xvbmUoY29sb3IwKTsKICAgICAgfQogICAgICByZXR1cm4gY29sb3JzOwogICAgfQogICAgY29uc3QgcmVkUGVyVmVydGV4ID0gKHIxIC0gcjApIC8gbnVtUG9pbnRzOwogICAgY29uc3QgZ3JlZW5QZXJWZXJ0ZXggPSAoZzEgLSBnMCkgLyBudW1Qb2ludHM7CiAgICBjb25zdCBibHVlUGVyVmVydGV4ID0gKGIxIC0gYjApIC8gbnVtUG9pbnRzOwogICAgY29uc3QgYWxwaGFQZXJWZXJ0ZXggPSAoYTEgLSBhMCkgLyBudW1Qb2ludHM7CiAgICBmb3IgKGkgPSAwOyBpIDwgbnVtUG9pbnRzOyBpKyspIHsKICAgICAgY29sb3JzW2ldID0gbmV3IENvbG9yX2RlZmF1bHQoCiAgICAgICAgcjAgKyBpICogcmVkUGVyVmVydGV4LAogICAgICAgIGcwICsgaSAqIGdyZWVuUGVyVmVydGV4LAogICAgICAgIGIwICsgaSAqIGJsdWVQZXJWZXJ0ZXgsCiAgICAgICAgYTAgKyBpICogYWxwaGFQZXJWZXJ0ZXgKICAgICAgKTsKICAgIH0KICAgIHJldHVybiBjb2xvcnM7CiAgfQogIGZ1bmN0aW9uIFBvbHlsaW5lR2VvbWV0cnkob3B0aW9ucykgewogICAgb3B0aW9ucyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMsIGRlZmF1bHRWYWx1ZV9kZWZhdWx0LkVNUFRZX09CSkVDVCk7CiAgICBjb25zdCBwb3NpdGlvbnMgPSBvcHRpb25zLnBvc2l0aW9uczsKICAgIGNvbnN0IGNvbG9ycyA9IG9wdGlvbnMuY29sb3JzOwogICAgY29uc3Qgd2lkdGggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLndpZHRoLCAxKTsKICAgIGNvbnN0IGNvbG9yc1BlclZlcnRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuY29sb3JzUGVyVmVydGV4LCBmYWxzZSk7CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwb3NpdGlvbnMpIHx8IHBvc2l0aW9ucy5sZW5ndGggPCAyKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJBdCBsZWFzdCB0d28gcG9zaXRpb25zIGFyZSByZXF1aXJlZC4iKTsKICAgIH0KICAgIGlmICh0eXBlb2Ygd2lkdGggIT09ICJudW1iZXIiKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJ3aWR0aCBtdXN0IGJlIGEgbnVtYmVyIik7CiAgICB9CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGNvbG9ycykgJiYgKGNvbG9yc1BlclZlcnRleCAmJiBjb2xvcnMubGVuZ3RoIDwgcG9zaXRpb25zLmxlbmd0aCB8fCAhY29sb3JzUGVyVmVydGV4ICYmIGNvbG9ycy5sZW5ndGggPCBwb3NpdGlvbnMubGVuZ3RoIC0gMSkpIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImNvbG9ycyBoYXMgYW4gaW52YWxpZCBsZW5ndGguIik7CiAgICB9CiAgICB0aGlzLl9wb3NpdGlvbnMgPSBwb3NpdGlvbnM7CiAgICB0aGlzLl9jb2xvcnMgPSBjb2xvcnM7CiAgICB0aGlzLl93aWR0aCA9IHdpZHRoOwogICAgdGhpcy5fY29sb3JzUGVyVmVydGV4ID0gY29sb3JzUGVyVmVydGV4OwogICAgdGhpcy5fdmVydGV4Rm9ybWF0ID0gVmVydGV4Rm9ybWF0X2RlZmF1bHQuY2xvbmUoCiAgICAgIGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMudmVydGV4Rm9ybWF0LCBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5ERUZBVUxUKQogICAgKTsKICAgIHRoaXMuX2FyY1R5cGUgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmFyY1R5cGUsIEFyY1R5cGVfZGVmYXVsdC5HRU9ERVNJQyk7CiAgICB0aGlzLl9ncmFudWxhcml0eSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KAogICAgICBvcHRpb25zLmdyYW51bGFyaXR5LAogICAgICBNYXRoX2RlZmF1bHQuUkFESUFOU19QRVJfREVHUkVFCiAgICApOwogICAgdGhpcy5fZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUoCiAgICAgIGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuZWxsaXBzb2lkLCBFbGxpcHNvaWRfZGVmYXVsdC5kZWZhdWx0KQogICAgKTsKICAgIHRoaXMuX3dvcmtlck5hbWUgPSAiY3JlYXRlUG9seWxpbmVHZW9tZXRyeSI7CiAgICBsZXQgbnVtQ29tcG9uZW50cyA9IDEgKyBwb3NpdGlvbnMubGVuZ3RoICogQ2FydGVzaWFuM19kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgIG51bUNvbXBvbmVudHMgKz0gZGVmaW5lZF9kZWZhdWx0KGNvbG9ycykgPyAxICsgY29sb3JzLmxlbmd0aCAqIENvbG9yX2RlZmF1bHQucGFja2VkTGVuZ3RoIDogMTsKICAgIHRoaXMucGFja2VkTGVuZ3RoID0gbnVtQ29tcG9uZW50cyArIEVsbGlwc29pZF9kZWZhdWx0LnBhY2tlZExlbmd0aCArIFZlcnRleEZvcm1hdF9kZWZhdWx0LnBhY2tlZExlbmd0aCArIDQ7CiAgfQogIHZhciBzY3JhdGNoSW50ZXJwb2xhdGVDb2xvcnNBcnJheSwgc2NyYXRjaEVsbGlwc29pZDgsIHNjcmF0Y2hWZXJ0ZXhGb3JtYXQxMCwgc2NyYXRjaE9wdGlvbnMxNiwgc2NyYXRjaENhcnRlc2lhbjM4LCBzY3JhdGNoUG9zaXRpb240LCBzY3JhdGNoUHJldlBvc2l0aW9uLCBzY3JhdGNoTmV4dFBvc2l0aW9uLCBQb2x5bGluZUdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfUG9seWxpbmVHZW9tZXRyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUG9seWxpbmVHZW9tZXRyeS5qcyIoKSB7CiAgICAgIGluaXRfQXJjVHlwZSgpOwogICAgICBpbml0X2FycmF5UmVtb3ZlRHVwbGljYXRlcygpOwogICAgICBpbml0X0JvdW5kaW5nU3BoZXJlKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NvbG9yKCk7CiAgICAgIGluaXRfQ29tcG9uZW50RGF0YXR5cGUoKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9HZW9tZXRyeSgpOwogICAgICBpbml0X0dlb21ldHJ5QXR0cmlidXRlKCk7CiAgICAgIGluaXRfR2VvbWV0cnlBdHRyaWJ1dGVzKCk7CiAgICAgIGluaXRfR2VvbWV0cnlUeXBlKCk7CiAgICAgIGluaXRfSW5kZXhEYXRhdHlwZSgpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgaW5pdF9Qb2x5bGluZVBpcGVsaW5lKCk7CiAgICAgIGluaXRfUHJpbWl0aXZlVHlwZSgpOwogICAgICBpbml0X1ZlcnRleEZvcm1hdCgpOwogICAgICBzY3JhdGNoSW50ZXJwb2xhdGVDb2xvcnNBcnJheSA9IFtdOwogICAgICBQb2x5bGluZUdlb21ldHJ5LnBhY2sgPSBmdW5jdGlvbih2YWx1ZSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdCh2YWx1ZSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJ2YWx1ZSBpcyByZXF1aXJlZCIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChhcnJheSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJhcnJheSBpcyByZXF1aXJlZCIpOwogICAgICAgIH0KICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgbGV0IGk7CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gdmFsdWUuX3Bvc2l0aW9uczsKICAgICAgICBsZXQgbGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gbGVuZ3RoOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSwgc3RhcnRpbmdJbmRleCArPSBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoKSB7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayhwb3NpdGlvbnNbaV0sIGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICB9CiAgICAgICAgY29uc3QgY29sb3JzID0gdmFsdWUuX2NvbG9yczsKICAgICAgICBsZW5ndGggPSBkZWZpbmVkX2RlZmF1bHQoY29sb3JzKSA/IGNvbG9ycy5sZW5ndGggOiAwOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSBsZW5ndGg7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpLCBzdGFydGluZ0luZGV4ICs9IENvbG9yX2RlZmF1bHQucGFja2VkTGVuZ3RoKSB7CiAgICAgICAgICBDb2xvcl9kZWZhdWx0LnBhY2soY29sb3JzW2ldLCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgfQogICAgICAgIEVsbGlwc29pZF9kZWZhdWx0LnBhY2sodmFsdWUuX2VsbGlwc29pZCwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gRWxsaXBzb2lkX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIFZlcnRleEZvcm1hdF9kZWZhdWx0LnBhY2sodmFsdWUuX3ZlcnRleEZvcm1hdCwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gVmVydGV4Rm9ybWF0X2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fd2lkdGg7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9jb2xvcnNQZXJWZXJ0ZXggPyAxIDogMDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX2FyY1R5cGU7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleF0gPSB2YWx1ZS5fZ3JhbnVsYXJpdHk7CiAgICAgICAgcmV0dXJuIGFycmF5OwogICAgICB9OwogICAgICBzY3JhdGNoRWxsaXBzb2lkOCA9IEVsbGlwc29pZF9kZWZhdWx0LmNsb25lKEVsbGlwc29pZF9kZWZhdWx0LlVOSVRfU1BIRVJFKTsKICAgICAgc2NyYXRjaFZlcnRleEZvcm1hdDEwID0gbmV3IFZlcnRleEZvcm1hdF9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hPcHRpb25zMTYgPSB7CiAgICAgICAgcG9zaXRpb25zOiB2b2lkIDAsCiAgICAgICAgY29sb3JzOiB2b2lkIDAsCiAgICAgICAgZWxsaXBzb2lkOiBzY3JhdGNoRWxsaXBzb2lkOCwKICAgICAgICB2ZXJ0ZXhGb3JtYXQ6IHNjcmF0Y2hWZXJ0ZXhGb3JtYXQxMCwKICAgICAgICB3aWR0aDogdm9pZCAwLAogICAgICAgIGNvbG9yc1BlclZlcnRleDogdm9pZCAwLAogICAgICAgIGFyY1R5cGU6IHZvaWQgMCwKICAgICAgICBncmFudWxhcml0eTogdm9pZCAwCiAgICAgIH07CiAgICAgIFBvbHlsaW5lR2VvbWV0cnkudW5wYWNrID0gZnVuY3Rpb24oYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGFycmF5KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImFycmF5IGlzIHJlcXVpcmVkIik7CiAgICAgICAgfQogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBsZXQgaTsKICAgICAgICBsZXQgbGVuZ3RoID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSBuZXcgQXJyYXkobGVuZ3RoKTsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2ksIHN0YXJ0aW5nSW5kZXggKz0gQ2FydGVzaWFuM19kZWZhdWx0LnBhY2tlZExlbmd0aCkgewogICAgICAgICAgcG9zaXRpb25zW2ldID0gQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjayhhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgfQogICAgICAgIGxlbmd0aCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3QgY29sb3JzID0gbGVuZ3RoID4gMCA/IG5ldyBBcnJheShsZW5ndGgpIDogdm9pZCAwOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSwgc3RhcnRpbmdJbmRleCArPSBDb2xvcl9kZWZhdWx0LnBhY2tlZExlbmd0aCkgewogICAgICAgICAgY29sb3JzW2ldID0gQ29sb3JfZGVmYXVsdC51bnBhY2soYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIH0KICAgICAgICBjb25zdCBlbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC51bnBhY2soYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHNjcmF0Y2hFbGxpcHNvaWQ4KTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IEVsbGlwc29pZF9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBjb25zdCB2ZXJ0ZXhGb3JtYXQgPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC51bnBhY2soCiAgICAgICAgICBhcnJheSwKICAgICAgICAgIHN0YXJ0aW5nSW5kZXgsCiAgICAgICAgICBzY3JhdGNoVmVydGV4Rm9ybWF0MTAKICAgICAgICApOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gVmVydGV4Rm9ybWF0X2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIGNvbnN0IHdpZHRoID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBjb2xvcnNQZXJWZXJ0ZXggPSBhcnJheVtzdGFydGluZ0luZGV4KytdID09PSAxOwogICAgICAgIGNvbnN0IGFyY1R5cGUgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IGdyYW51bGFyaXR5ID0gYXJyYXlbc3RhcnRpbmdJbmRleF07CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgc2NyYXRjaE9wdGlvbnMxNi5wb3NpdGlvbnMgPSBwb3NpdGlvbnM7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczE2LmNvbG9ycyA9IGNvbG9yczsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMTYud2lkdGggPSB3aWR0aDsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMTYuY29sb3JzUGVyVmVydGV4ID0gY29sb3JzUGVyVmVydGV4OwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMxNi5hcmNUeXBlID0gYXJjVHlwZTsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMTYuZ3JhbnVsYXJpdHkgPSBncmFudWxhcml0eTsKICAgICAgICAgIHJldHVybiBuZXcgUG9seWxpbmVHZW9tZXRyeShzY3JhdGNoT3B0aW9uczE2KTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0Ll9wb3NpdGlvbnMgPSBwb3NpdGlvbnM7CiAgICAgICAgcmVzdWx0Ll9jb2xvcnMgPSBjb2xvcnM7CiAgICAgICAgcmVzdWx0Ll9lbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZShlbGxpcHNvaWQsIHJlc3VsdC5fZWxsaXBzb2lkKTsKICAgICAgICByZXN1bHQuX3ZlcnRleEZvcm1hdCA9IFZlcnRleEZvcm1hdF9kZWZhdWx0LmNsb25lKHZlcnRleEZvcm1hdCwgcmVzdWx0Ll92ZXJ0ZXhGb3JtYXQpOwogICAgICAgIHJlc3VsdC5fd2lkdGggPSB3aWR0aDsKICAgICAgICByZXN1bHQuX2NvbG9yc1BlclZlcnRleCA9IGNvbG9yc1BlclZlcnRleDsKICAgICAgICByZXN1bHQuX2FyY1R5cGUgPSBhcmNUeXBlOwogICAgICAgIHJlc3VsdC5fZ3JhbnVsYXJpdHkgPSBncmFudWxhcml0eTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBzY3JhdGNoQ2FydGVzaWFuMzggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hQb3NpdGlvbjQgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hQcmV2UG9zaXRpb24gPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hOZXh0UG9zaXRpb24gPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIFBvbHlsaW5lR2VvbWV0cnkuY3JlYXRlR2VvbWV0cnkgPSBmdW5jdGlvbihwb2x5bGluZUdlb21ldHJ5KSB7CiAgICAgICAgY29uc3Qgd2lkdGggPSBwb2x5bGluZUdlb21ldHJ5Ll93aWR0aDsKICAgICAgICBjb25zdCB2ZXJ0ZXhGb3JtYXQgPSBwb2x5bGluZUdlb21ldHJ5Ll92ZXJ0ZXhGb3JtYXQ7CiAgICAgICAgbGV0IGNvbG9ycyA9IHBvbHlsaW5lR2VvbWV0cnkuX2NvbG9yczsKICAgICAgICBjb25zdCBjb2xvcnNQZXJWZXJ0ZXggPSBwb2x5bGluZUdlb21ldHJ5Ll9jb2xvcnNQZXJWZXJ0ZXg7CiAgICAgICAgY29uc3QgYXJjVHlwZSA9IHBvbHlsaW5lR2VvbWV0cnkuX2FyY1R5cGU7CiAgICAgICAgY29uc3QgZ3JhbnVsYXJpdHkgPSBwb2x5bGluZUdlb21ldHJ5Ll9ncmFudWxhcml0eTsKICAgICAgICBjb25zdCBlbGxpcHNvaWQgPSBwb2x5bGluZUdlb21ldHJ5Ll9lbGxpcHNvaWQ7CiAgICAgICAgbGV0IGk7CiAgICAgICAgbGV0IGo7CiAgICAgICAgbGV0IGs7CiAgICAgICAgY29uc3QgcmVtb3ZlZEluZGljZXMgPSBbXTsKICAgICAgICBsZXQgcG9zaXRpb25zID0gYXJyYXlSZW1vdmVEdXBsaWNhdGVzX2RlZmF1bHQoCiAgICAgICAgICBwb2x5bGluZUdlb21ldHJ5Ll9wb3NpdGlvbnMsCiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzRXBzaWxvbiwKICAgICAgICAgIGZhbHNlLAogICAgICAgICAgcmVtb3ZlZEluZGljZXMKICAgICAgICApOwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoY29sb3JzKSAmJiByZW1vdmVkSW5kaWNlcy5sZW5ndGggPiAwKSB7CiAgICAgICAgICBsZXQgcmVtb3ZlZEFycmF5SW5kZXggPSAwOwogICAgICAgICAgbGV0IG5leHRSZW1vdmVkSW5kZXggPSByZW1vdmVkSW5kaWNlc1swXTsKICAgICAgICAgIGNvbG9ycyA9IGNvbG9ycy5maWx0ZXIoZnVuY3Rpb24oY29sb3IsIGluZGV4MikgewogICAgICAgICAgICBsZXQgcmVtb3ZlID0gZmFsc2U7CiAgICAgICAgICAgIGlmIChjb2xvcnNQZXJWZXJ0ZXgpIHsKICAgICAgICAgICAgICByZW1vdmUgPSBpbmRleDIgPT09IG5leHRSZW1vdmVkSW5kZXggfHwgaW5kZXgyID09PSAwICYmIG5leHRSZW1vdmVkSW5kZXggPT09IDE7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgcmVtb3ZlID0gaW5kZXgyICsgMSA9PT0gbmV4dFJlbW92ZWRJbmRleDsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAocmVtb3ZlKSB7CiAgICAgICAgICAgICAgcmVtb3ZlZEFycmF5SW5kZXgrKzsKICAgICAgICAgICAgICBuZXh0UmVtb3ZlZEluZGV4ID0gcmVtb3ZlZEluZGljZXNbcmVtb3ZlZEFycmF5SW5kZXhdOwogICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICBsZXQgcG9zaXRpb25zTGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aDsKICAgICAgICBpZiAocG9zaXRpb25zTGVuZ3RoIDwgMiB8fCB3aWR0aCA8PSAwKSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICBpZiAoYXJjVHlwZSA9PT0gQXJjVHlwZV9kZWZhdWx0LkdFT0RFU0lDIHx8IGFyY1R5cGUgPT09IEFyY1R5cGVfZGVmYXVsdC5SSFVNQikgewogICAgICAgICAgbGV0IHN1YmRpdmlzaW9uU2l6ZTsKICAgICAgICAgIGxldCBudW1iZXJPZlBvaW50c0Z1bmN0aW9uOwogICAgICAgICAgaWYgKGFyY1R5cGUgPT09IEFyY1R5cGVfZGVmYXVsdC5HRU9ERVNJQykgewogICAgICAgICAgICBzdWJkaXZpc2lvblNpemUgPSBNYXRoX2RlZmF1bHQuY2hvcmRMZW5ndGgoCiAgICAgICAgICAgICAgZ3JhbnVsYXJpdHksCiAgICAgICAgICAgICAgZWxsaXBzb2lkLm1heGltdW1SYWRpdXMKICAgICAgICAgICAgKTsKICAgICAgICAgICAgbnVtYmVyT2ZQb2ludHNGdW5jdGlvbiA9IFBvbHlsaW5lUGlwZWxpbmVfZGVmYXVsdC5udW1iZXJPZlBvaW50czsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHN1YmRpdmlzaW9uU2l6ZSA9IGdyYW51bGFyaXR5OwogICAgICAgICAgICBudW1iZXJPZlBvaW50c0Z1bmN0aW9uID0gUG9seWxpbmVQaXBlbGluZV9kZWZhdWx0Lm51bWJlck9mUG9pbnRzUmh1bWJMaW5lOwogICAgICAgICAgfQogICAgICAgICAgY29uc3QgaGVpZ2h0cyA9IFBvbHlsaW5lUGlwZWxpbmVfZGVmYXVsdC5leHRyYWN0SGVpZ2h0cyhwb3NpdGlvbnMsIGVsbGlwc29pZCk7CiAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGNvbG9ycykpIHsKICAgICAgICAgICAgbGV0IGNvbG9yTGVuZ3RoID0gMTsKICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHBvc2l0aW9uc0xlbmd0aCAtIDE7ICsraSkgewogICAgICAgICAgICAgIGNvbG9yTGVuZ3RoICs9IG51bWJlck9mUG9pbnRzRnVuY3Rpb24oCiAgICAgICAgICAgICAgICBwb3NpdGlvbnNbaV0sCiAgICAgICAgICAgICAgICBwb3NpdGlvbnNbaSArIDFdLAogICAgICAgICAgICAgICAgc3ViZGl2aXNpb25TaXplCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjb25zdCBuZXdDb2xvcnMgPSBuZXcgQXJyYXkoY29sb3JMZW5ndGgpOwogICAgICAgICAgICBsZXQgbmV3Q29sb3JJbmRleCA9IDA7CiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBwb3NpdGlvbnNMZW5ndGggLSAxOyArK2kpIHsKICAgICAgICAgICAgICBjb25zdCBwMCA9IHBvc2l0aW9uc1tpXTsKICAgICAgICAgICAgICBjb25zdCBwMSA9IHBvc2l0aW9uc1tpICsgMV07CiAgICAgICAgICAgICAgY29uc3QgYzAgPSBjb2xvcnNbaV07CiAgICAgICAgICAgICAgY29uc3QgbnVtQ29sb3JzID0gbnVtYmVyT2ZQb2ludHNGdW5jdGlvbihwMCwgcDEsIHN1YmRpdmlzaW9uU2l6ZSk7CiAgICAgICAgICAgICAgaWYgKGNvbG9yc1BlclZlcnRleCAmJiBpIDwgY29sb3JMZW5ndGgpIHsKICAgICAgICAgICAgICAgIGNvbnN0IGMxID0gY29sb3JzW2kgKyAxXTsKICAgICAgICAgICAgICAgIGNvbnN0IGludGVycG9sYXRlZENvbG9ycyA9IGludGVycG9sYXRlQ29sb3JzKAogICAgICAgICAgICAgICAgICBwMCwKICAgICAgICAgICAgICAgICAgcDEsCiAgICAgICAgICAgICAgICAgIGMwLAogICAgICAgICAgICAgICAgICBjMSwKICAgICAgICAgICAgICAgICAgbnVtQ29sb3JzCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgY29uc3QgaW50ZXJwb2xhdGVkQ29sb3JzTGVuZ3RoID0gaW50ZXJwb2xhdGVkQ29sb3JzLmxlbmd0aDsKICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBpbnRlcnBvbGF0ZWRDb2xvcnNMZW5ndGg7ICsraikgewogICAgICAgICAgICAgICAgICBuZXdDb2xvcnNbbmV3Q29sb3JJbmRleCsrXSA9IGludGVycG9sYXRlZENvbG9yc1tqXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IG51bUNvbG9yczsgKytqKSB7CiAgICAgICAgICAgICAgICAgIG5ld0NvbG9yc1tuZXdDb2xvckluZGV4KytdID0gQ29sb3JfZGVmYXVsdC5jbG9uZShjMCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIG5ld0NvbG9yc1tuZXdDb2xvckluZGV4XSA9IENvbG9yX2RlZmF1bHQuY2xvbmUoY29sb3JzW2NvbG9ycy5sZW5ndGggLSAxXSk7CiAgICAgICAgICAgIGNvbG9ycyA9IG5ld0NvbG9yczsKICAgICAgICAgICAgc2NyYXRjaEludGVycG9sYXRlQ29sb3JzQXJyYXkubGVuZ3RoID0gMDsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChhcmNUeXBlID09PSBBcmNUeXBlX2RlZmF1bHQuR0VPREVTSUMpIHsKICAgICAgICAgICAgcG9zaXRpb25zID0gUG9seWxpbmVQaXBlbGluZV9kZWZhdWx0LmdlbmVyYXRlQ2FydGVzaWFuQXJjKHsKICAgICAgICAgICAgICBwb3NpdGlvbnMsCiAgICAgICAgICAgICAgbWluRGlzdGFuY2U6IHN1YmRpdmlzaW9uU2l6ZSwKICAgICAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHRzCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcG9zaXRpb25zID0gUG9seWxpbmVQaXBlbGluZV9kZWZhdWx0LmdlbmVyYXRlQ2FydGVzaWFuUmh1bWJBcmMoewogICAgICAgICAgICAgIHBvc2l0aW9ucywKICAgICAgICAgICAgICBncmFudWxhcml0eTogc3ViZGl2aXNpb25TaXplLAogICAgICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodHMKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHBvc2l0aW9uc0xlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgY29uc3Qgc2l6ZSA9IHBvc2l0aW9uc0xlbmd0aCAqIDQgLSA0OwogICAgICAgIGNvbnN0IGZpbmFsUG9zaXRpb25zID0gbmV3IEZsb2F0NjRBcnJheShzaXplICogMyk7CiAgICAgICAgY29uc3QgcHJldlBvc2l0aW9ucyA9IG5ldyBGbG9hdDY0QXJyYXkoc2l6ZSAqIDMpOwogICAgICAgIGNvbnN0IG5leHRQb3NpdGlvbnMgPSBuZXcgRmxvYXQ2NEFycmF5KHNpemUgKiAzKTsKICAgICAgICBjb25zdCBleHBhbmRBbmRXaWR0aCA9IG5ldyBGbG9hdDMyQXJyYXkoc2l6ZSAqIDIpOwogICAgICAgIGNvbnN0IHN0ID0gdmVydGV4Rm9ybWF0LnN0ID8gbmV3IEZsb2F0MzJBcnJheShzaXplICogMikgOiB2b2lkIDA7CiAgICAgICAgY29uc3QgZmluYWxDb2xvcnMgPSBkZWZpbmVkX2RlZmF1bHQoY29sb3JzKSA/IG5ldyBVaW50OEFycmF5KHNpemUgKiA0KSA6IHZvaWQgMDsKICAgICAgICBsZXQgcG9zaXRpb25JbmRleCA9IDA7CiAgICAgICAgbGV0IGV4cGFuZEFuZFdpZHRoSW5kZXggPSAwOwogICAgICAgIGxldCBzdEluZGV4ID0gMDsKICAgICAgICBsZXQgY29sb3JJbmRleCA9IDA7CiAgICAgICAgbGV0IHBvc2l0aW9uOwogICAgICAgIGZvciAoaiA9IDA7IGogPCBwb3NpdGlvbnNMZW5ndGg7ICsraikgewogICAgICAgICAgaWYgKGogPT09IDApIHsKICAgICAgICAgICAgcG9zaXRpb24gPSBzY3JhdGNoQ2FydGVzaWFuMzg7CiAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChwb3NpdGlvbnNbMF0sIHBvc2l0aW9uc1sxXSwgcG9zaXRpb24pOwogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKHBvc2l0aW9uc1swXSwgcG9zaXRpb24sIHBvc2l0aW9uKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHBvc2l0aW9uID0gcG9zaXRpb25zW2ogLSAxXTsKICAgICAgICAgIH0KICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShwb3NpdGlvbiwgc2NyYXRjaFByZXZQb3NpdGlvbik7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUocG9zaXRpb25zW2pdLCBzY3JhdGNoUG9zaXRpb240KTsKICAgICAgICAgIGlmIChqID09PSBwb3NpdGlvbnNMZW5ndGggLSAxKSB7CiAgICAgICAgICAgIHBvc2l0aW9uID0gc2NyYXRjaENhcnRlc2lhbjM4OwogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoCiAgICAgICAgICAgICAgcG9zaXRpb25zW3Bvc2l0aW9uc0xlbmd0aCAtIDFdLAogICAgICAgICAgICAgIHBvc2l0aW9uc1twb3NpdGlvbnNMZW5ndGggLSAyXSwKICAgICAgICAgICAgICBwb3NpdGlvbgogICAgICAgICAgICApOwogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKHBvc2l0aW9uc1twb3NpdGlvbnNMZW5ndGggLSAxXSwgcG9zaXRpb24sIHBvc2l0aW9uKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHBvc2l0aW9uID0gcG9zaXRpb25zW2ogKyAxXTsKICAgICAgICAgIH0KICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShwb3NpdGlvbiwgc2NyYXRjaE5leHRQb3NpdGlvbik7CiAgICAgICAgICBsZXQgY29sb3IwLCBjb2xvcjE7CiAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGZpbmFsQ29sb3JzKSkgewogICAgICAgICAgICBpZiAoaiAhPT0gMCAmJiAhY29sb3JzUGVyVmVydGV4KSB7CiAgICAgICAgICAgICAgY29sb3IwID0gY29sb3JzW2ogLSAxXTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBjb2xvcjAgPSBjb2xvcnNbal07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGogIT09IHBvc2l0aW9uc0xlbmd0aCAtIDEpIHsKICAgICAgICAgICAgICBjb2xvcjEgPSBjb2xvcnNbal07CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGNvbnN0IHN0YXJ0SyA9IGogPT09IDAgPyAyIDogMDsKICAgICAgICAgIGNvbnN0IGVuZEsgPSBqID09PSBwb3NpdGlvbnNMZW5ndGggLSAxID8gMiA6IDQ7CiAgICAgICAgICBmb3IgKGsgPSBzdGFydEs7IGsgPCBlbmRLOyArK2spIHsKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2soc2NyYXRjaFBvc2l0aW9uNCwgZmluYWxQb3NpdGlvbnMsIHBvc2l0aW9uSW5kZXgpOwogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayhzY3JhdGNoUHJldlBvc2l0aW9uLCBwcmV2UG9zaXRpb25zLCBwb3NpdGlvbkluZGV4KTsKICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2soc2NyYXRjaE5leHRQb3NpdGlvbiwgbmV4dFBvc2l0aW9ucywgcG9zaXRpb25JbmRleCk7CiAgICAgICAgICAgIHBvc2l0aW9uSW5kZXggKz0gMzsKICAgICAgICAgICAgY29uc3QgZGlyZWN0aW9uMiA9IGsgLSAyIDwgMCA/IC0xIDogMTsKICAgICAgICAgICAgZXhwYW5kQW5kV2lkdGhbZXhwYW5kQW5kV2lkdGhJbmRleCsrXSA9IDIgKiAoayAlIDIpIC0gMTsKICAgICAgICAgICAgZXhwYW5kQW5kV2lkdGhbZXhwYW5kQW5kV2lkdGhJbmRleCsrXSA9IGRpcmVjdGlvbjIgKiB3aWR0aDsKICAgICAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5zdCkgewogICAgICAgICAgICAgIHN0W3N0SW5kZXgrK10gPSBqIC8gKHBvc2l0aW9uc0xlbmd0aCAtIDEpOwogICAgICAgICAgICAgIHN0W3N0SW5kZXgrK10gPSBNYXRoLm1heChleHBhbmRBbmRXaWR0aFtleHBhbmRBbmRXaWR0aEluZGV4IC0gMl0sIDApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoZmluYWxDb2xvcnMpKSB7CiAgICAgICAgICAgICAgY29uc3QgY29sb3IgPSBrIDwgMiA/IGNvbG9yMCA6IGNvbG9yMTsKICAgICAgICAgICAgICBmaW5hbENvbG9yc1tjb2xvckluZGV4KytdID0gQ29sb3JfZGVmYXVsdC5mbG9hdFRvQnl0ZShjb2xvci5yZWQpOwogICAgICAgICAgICAgIGZpbmFsQ29sb3JzW2NvbG9ySW5kZXgrK10gPSBDb2xvcl9kZWZhdWx0LmZsb2F0VG9CeXRlKGNvbG9yLmdyZWVuKTsKICAgICAgICAgICAgICBmaW5hbENvbG9yc1tjb2xvckluZGV4KytdID0gQ29sb3JfZGVmYXVsdC5mbG9hdFRvQnl0ZShjb2xvci5ibHVlKTsKICAgICAgICAgICAgICBmaW5hbENvbG9yc1tjb2xvckluZGV4KytdID0gQ29sb3JfZGVmYXVsdC5mbG9hdFRvQnl0ZShjb2xvci5hbHBoYSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZXNfZGVmYXVsdCgpOwogICAgICAgIGF0dHJpYnV0ZXMucG9zaXRpb24gPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5ET1VCTEUsCiAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgICAgdmFsdWVzOiBmaW5hbFBvc2l0aW9ucwogICAgICAgIH0pOwogICAgICAgIGF0dHJpYnV0ZXMucHJldlBvc2l0aW9uID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRE9VQkxFLAogICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICAgIHZhbHVlczogcHJldlBvc2l0aW9ucwogICAgICAgIH0pOwogICAgICAgIGF0dHJpYnV0ZXMubmV4dFBvc2l0aW9uID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRE9VQkxFLAogICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICAgIHZhbHVlczogbmV4dFBvc2l0aW9ucwogICAgICAgIH0pOwogICAgICAgIGF0dHJpYnV0ZXMuZXhwYW5kQW5kV2lkdGggPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDIsCiAgICAgICAgICB2YWx1ZXM6IGV4cGFuZEFuZFdpZHRoCiAgICAgICAgfSk7CiAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5zdCkgewogICAgICAgICAgYXR0cmlidXRlcy5zdCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDIsCiAgICAgICAgICAgIHZhbHVlczogc3QKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGZpbmFsQ29sb3JzKSkgewogICAgICAgICAgYXR0cmlidXRlcy5jb2xvciA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuVU5TSUdORURfQllURSwKICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogNCwKICAgICAgICAgICAgdmFsdWVzOiBmaW5hbENvbG9ycywKICAgICAgICAgICAgbm9ybWFsaXplOiB0cnVlCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgY29uc3QgaW5kaWNlcyA9IEluZGV4RGF0YXR5cGVfZGVmYXVsdC5jcmVhdGVUeXBlZEFycmF5KHNpemUsIHBvc2l0aW9uc0xlbmd0aCAqIDYgLSA2KTsKICAgICAgICBsZXQgaW5kZXggPSAwOwogICAgICAgIGxldCBpbmRpY2VzSW5kZXggPSAwOwogICAgICAgIGNvbnN0IGxlbmd0aCA9IHBvc2l0aW9uc0xlbmd0aCAtIDE7CiAgICAgICAgZm9yIChqID0gMDsgaiA8IGxlbmd0aDsgKytqKSB7CiAgICAgICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IGluZGV4OwogICAgICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBpbmRleCArIDI7CiAgICAgICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IGluZGV4ICsgMTsKICAgICAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gaW5kZXggKyAxOwogICAgICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBpbmRleCArIDI7CiAgICAgICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IGluZGV4ICsgMzsKICAgICAgICAgIGluZGV4ICs9IDQ7CiAgICAgICAgfQogICAgICAgIHJldHVybiBuZXcgR2VvbWV0cnlfZGVmYXVsdCh7CiAgICAgICAgICBhdHRyaWJ1dGVzLAogICAgICAgICAgaW5kaWNlcywKICAgICAgICAgIHByaW1pdGl2ZVR5cGU6IFByaW1pdGl2ZVR5cGVfZGVmYXVsdC5UUklBTkdMRVMsCiAgICAgICAgICBib3VuZGluZ1NwaGVyZTogQm91bmRpbmdTcGhlcmVfZGVmYXVsdC5mcm9tUG9pbnRzKHBvc2l0aW9ucyksCiAgICAgICAgICBnZW9tZXRyeVR5cGU6IEdlb21ldHJ5VHlwZV9kZWZhdWx0LlBPTFlMSU5FUwogICAgICAgIH0pOwogICAgICB9OwogICAgICBQb2x5bGluZUdlb21ldHJ5X2RlZmF1bHQgPSBQb2x5bGluZUdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlUG9seWxpbmVHZW9tZXRyeS5qcwogIHZhciBjcmVhdGVQb2x5bGluZUdlb21ldHJ5X2V4cG9ydHMgPSB7fTsKICBfX2V4cG9ydChjcmVhdGVQb2x5bGluZUdlb21ldHJ5X2V4cG9ydHMsIHsKICAgIGRlZmF1bHQ6ICgpID0+IGNyZWF0ZVBvbHlsaW5lR2VvbWV0cnlfZGVmYXVsdAogIH0pOwogIGZ1bmN0aW9uIGNyZWF0ZVBvbHlsaW5lR2VvbWV0cnkocG9seWxpbmVHZW9tZXRyeSwgb2Zmc2V0KSB7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG9mZnNldCkpIHsKICAgICAgcG9seWxpbmVHZW9tZXRyeSA9IFBvbHlsaW5lR2VvbWV0cnlfZGVmYXVsdC51bnBhY2socG9seWxpbmVHZW9tZXRyeSwgb2Zmc2V0KTsKICAgIH0KICAgIHBvbHlsaW5lR2VvbWV0cnkuX2VsbGlwc29pZCA9IEVsbGlwc29pZF9kZWZhdWx0LmNsb25lKHBvbHlsaW5lR2VvbWV0cnkuX2VsbGlwc29pZCk7CiAgICByZXR1cm4gUG9seWxpbmVHZW9tZXRyeV9kZWZhdWx0LmNyZWF0ZUdlb21ldHJ5KHBvbHlsaW5lR2VvbWV0cnkpOwogIH0KICB2YXIgY3JlYXRlUG9seWxpbmVHZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X2NyZWF0ZVBvbHlsaW5lR2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZVBvbHlsaW5lR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9Qb2x5bGluZUdlb21ldHJ5KCk7CiAgICAgIGNyZWF0ZVBvbHlsaW5lR2VvbWV0cnlfZGVmYXVsdCA9IGNyZWF0ZVBvbHlsaW5lR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9Qb2x5bGluZVZvbHVtZUdlb21ldHJ5LmpzCiAgZnVuY3Rpb24gY29tcHV0ZUF0dHJpYnV0ZXMyKGNvbWJpbmVkUG9zaXRpb25zLCBzaGFwZSwgYm91bmRpbmdSZWN0YW5nbGUsIHZlcnRleEZvcm1hdCkgewogICAgY29uc3QgYXR0cmlidXRlcyA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZXNfZGVmYXVsdCgpOwogICAgaWYgKHZlcnRleEZvcm1hdC5wb3NpdGlvbikgewogICAgICBhdHRyaWJ1dGVzLnBvc2l0aW9uID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkRPVUJMRSwKICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgIHZhbHVlczogY29tYmluZWRQb3NpdGlvbnMKICAgICAgfSk7CiAgICB9CiAgICBjb25zdCBzaGFwZUxlbmd0aCA9IHNoYXBlLmxlbmd0aDsKICAgIGNvbnN0IHZlcnRleENvdW50ID0gY29tYmluZWRQb3NpdGlvbnMubGVuZ3RoIC8gMzsKICAgIGNvbnN0IGxlbmd0aCA9ICh2ZXJ0ZXhDb3VudCAtIHNoYXBlTGVuZ3RoICogMikgLyAoc2hhcGVMZW5ndGggKiAyKTsKICAgIGNvbnN0IGZpcnN0RW5kSW5kaWNlcyA9IFBvbHlnb25QaXBlbGluZV9kZWZhdWx0LnRyaWFuZ3VsYXRlKHNoYXBlKTsKICAgIGNvbnN0IGluZGljZXNDb3VudCA9IChsZW5ndGggLSAxKSAqIHNoYXBlTGVuZ3RoICogNiArIGZpcnN0RW5kSW5kaWNlcy5sZW5ndGggKiAyOwogICAgY29uc3QgaW5kaWNlcyA9IEluZGV4RGF0YXR5cGVfZGVmYXVsdC5jcmVhdGVUeXBlZEFycmF5KHZlcnRleENvdW50LCBpbmRpY2VzQ291bnQpOwogICAgbGV0IGksIGo7CiAgICBsZXQgbGwsIHVsLCB1ciwgbHI7CiAgICBjb25zdCBvZmZzZXQgPSBzaGFwZUxlbmd0aCAqIDI7CiAgICBsZXQgaW5kZXggPSAwOwogICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aCAtIDE7IGkrKykgewogICAgICBmb3IgKGogPSAwOyBqIDwgc2hhcGVMZW5ndGggLSAxOyBqKyspIHsKICAgICAgICBsbCA9IGogKiAyICsgaSAqIHNoYXBlTGVuZ3RoICogMjsKICAgICAgICBsciA9IGxsICsgb2Zmc2V0OwogICAgICAgIHVsID0gbGwgKyAxOwogICAgICAgIHVyID0gdWwgKyBvZmZzZXQ7CiAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IHVsOwogICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBsbDsKICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gdXI7CiAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IHVyOwogICAgICAgIGluZGljZXNbaW5kZXgrK10gPSBsbDsKICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gbHI7CiAgICAgIH0KICAgICAgbGwgPSBzaGFwZUxlbmd0aCAqIDIgLSAyICsgaSAqIHNoYXBlTGVuZ3RoICogMjsKICAgICAgdWwgPSBsbCArIDE7CiAgICAgIHVyID0gdWwgKyBvZmZzZXQ7CiAgICAgIGxyID0gbGwgKyBvZmZzZXQ7CiAgICAgIGluZGljZXNbaW5kZXgrK10gPSB1bDsKICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGxsOwogICAgICBpbmRpY2VzW2luZGV4KytdID0gdXI7CiAgICAgIGluZGljZXNbaW5kZXgrK10gPSB1cjsKICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGxsOwogICAgICBpbmRpY2VzW2luZGV4KytdID0gbHI7CiAgICB9CiAgICBpZiAodmVydGV4Rm9ybWF0LnN0IHx8IHZlcnRleEZvcm1hdC50YW5nZW50IHx8IHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpIHsKICAgICAgY29uc3Qgc3QgPSBuZXcgRmxvYXQzMkFycmF5KHZlcnRleENvdW50ICogMik7CiAgICAgIGNvbnN0IGxlbmd0aFN0ID0gMSAvIChsZW5ndGggLSAxKTsKICAgICAgY29uc3QgaGVpZ2h0U3QgPSAxIC8gYm91bmRpbmdSZWN0YW5nbGUuaGVpZ2h0OwogICAgICBjb25zdCBoZWlnaHRPZmZzZXQgPSBib3VuZGluZ1JlY3RhbmdsZS5oZWlnaHQgLyAyOwogICAgICBsZXQgcywgdDsKICAgICAgbGV0IHN0aW5kZXggPSAwOwogICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICBzID0gaSAqIGxlbmd0aFN0OwogICAgICAgIHQgPSBoZWlnaHRTdCAqIChzaGFwZVswXS55ICsgaGVpZ2h0T2Zmc2V0KTsKICAgICAgICBzdFtzdGluZGV4KytdID0gczsKICAgICAgICBzdFtzdGluZGV4KytdID0gdDsKICAgICAgICBmb3IgKGogPSAxOyBqIDwgc2hhcGVMZW5ndGg7IGorKykgewogICAgICAgICAgdCA9IGhlaWdodFN0ICogKHNoYXBlW2pdLnkgKyBoZWlnaHRPZmZzZXQpOwogICAgICAgICAgc3Rbc3RpbmRleCsrXSA9IHM7CiAgICAgICAgICBzdFtzdGluZGV4KytdID0gdDsKICAgICAgICAgIHN0W3N0aW5kZXgrK10gPSBzOwogICAgICAgICAgc3Rbc3RpbmRleCsrXSA9IHQ7CiAgICAgICAgfQogICAgICAgIHQgPSBoZWlnaHRTdCAqIChzaGFwZVswXS55ICsgaGVpZ2h0T2Zmc2V0KTsKICAgICAgICBzdFtzdGluZGV4KytdID0gczsKICAgICAgICBzdFtzdGluZGV4KytdID0gdDsKICAgICAgfQogICAgICBmb3IgKGogPSAwOyBqIDwgc2hhcGVMZW5ndGg7IGorKykgewogICAgICAgIHMgPSAwOwogICAgICAgIHQgPSBoZWlnaHRTdCAqIChzaGFwZVtqXS55ICsgaGVpZ2h0T2Zmc2V0KTsKICAgICAgICBzdFtzdGluZGV4KytdID0gczsKICAgICAgICBzdFtzdGluZGV4KytdID0gdDsKICAgICAgfQogICAgICBmb3IgKGogPSAwOyBqIDwgc2hhcGVMZW5ndGg7IGorKykgewogICAgICAgIHMgPSAobGVuZ3RoIC0gMSkgKiBsZW5ndGhTdDsKICAgICAgICB0ID0gaGVpZ2h0U3QgKiAoc2hhcGVbal0ueSArIGhlaWdodE9mZnNldCk7CiAgICAgICAgc3Rbc3RpbmRleCsrXSA9IHM7CiAgICAgICAgc3Rbc3RpbmRleCsrXSA9IHQ7CiAgICAgIH0KICAgICAgYXR0cmlidXRlcy5zdCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAyLAogICAgICAgIHZhbHVlczogbmV3IEZsb2F0MzJBcnJheShzdCkKICAgICAgfSk7CiAgICB9CiAgICBjb25zdCBlbmRPZmZzZXQgPSB2ZXJ0ZXhDb3VudCAtIHNoYXBlTGVuZ3RoICogMjsKICAgIGZvciAoaSA9IDA7IGkgPCBmaXJzdEVuZEluZGljZXMubGVuZ3RoOyBpICs9IDMpIHsKICAgICAgY29uc3QgdjAyID0gZmlyc3RFbmRJbmRpY2VzW2ldICsgZW5kT2Zmc2V0OwogICAgICBjb25zdCB2MTIgPSBmaXJzdEVuZEluZGljZXNbaSArIDFdICsgZW5kT2Zmc2V0OwogICAgICBjb25zdCB2MjIgPSBmaXJzdEVuZEluZGljZXNbaSArIDJdICsgZW5kT2Zmc2V0OwogICAgICBpbmRpY2VzW2luZGV4KytdID0gdjAyOwogICAgICBpbmRpY2VzW2luZGV4KytdID0gdjEyOwogICAgICBpbmRpY2VzW2luZGV4KytdID0gdjIyOwogICAgICBpbmRpY2VzW2luZGV4KytdID0gdjIyICsgc2hhcGVMZW5ndGg7CiAgICAgIGluZGljZXNbaW5kZXgrK10gPSB2MTIgKyBzaGFwZUxlbmd0aDsKICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IHYwMiArIHNoYXBlTGVuZ3RoOwogICAgfQogICAgbGV0IGdlb21ldHJ5ID0gbmV3IEdlb21ldHJ5X2RlZmF1bHQoewogICAgICBhdHRyaWJ1dGVzLAogICAgICBpbmRpY2VzLAogICAgICBib3VuZGluZ1NwaGVyZTogQm91bmRpbmdTcGhlcmVfZGVmYXVsdC5mcm9tVmVydGljZXMoY29tYmluZWRQb3NpdGlvbnMpLAogICAgICBwcmltaXRpdmVUeXBlOiBQcmltaXRpdmVUeXBlX2RlZmF1bHQuVFJJQU5HTEVTCiAgICB9KTsKICAgIGlmICh2ZXJ0ZXhGb3JtYXQubm9ybWFsKSB7CiAgICAgIGdlb21ldHJ5ID0gR2VvbWV0cnlQaXBlbGluZV9kZWZhdWx0LmNvbXB1dGVOb3JtYWwoZ2VvbWV0cnkpOwogICAgfQogICAgaWYgKHZlcnRleEZvcm1hdC50YW5nZW50IHx8IHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpIHsKICAgICAgdHJ5IHsKICAgICAgICBnZW9tZXRyeSA9IEdlb21ldHJ5UGlwZWxpbmVfZGVmYXVsdC5jb21wdXRlVGFuZ2VudEFuZEJpdGFuZ2VudChnZW9tZXRyeSk7CiAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICBvbmVUaW1lV2FybmluZ19kZWZhdWx0KAogICAgICAgICAgInBvbHlsaW5lLXZvbHVtZS10YW5nZW50LWJpdGFuZ2VudCIsCiAgICAgICAgICAiVW5hYmxlIHRvIGNvbXB1dGUgdGFuZ2VudHMgYW5kIGJpdGFuZ2VudHMgZm9yIHBvbHlsaW5lIHZvbHVtZSBnZW9tZXRyeSIKICAgICAgICApOwogICAgICB9CiAgICAgIGlmICghdmVydGV4Rm9ybWF0LnRhbmdlbnQpIHsKICAgICAgICBnZW9tZXRyeS5hdHRyaWJ1dGVzLnRhbmdlbnQgPSB2b2lkIDA7CiAgICAgIH0KICAgICAgaWYgKCF2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50KSB7CiAgICAgICAgZ2VvbWV0cnkuYXR0cmlidXRlcy5iaXRhbmdlbnQgPSB2b2lkIDA7CiAgICAgIH0KICAgICAgaWYgKCF2ZXJ0ZXhGb3JtYXQuc3QpIHsKICAgICAgICBnZW9tZXRyeS5hdHRyaWJ1dGVzLnN0ID0gdm9pZCAwOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gZ2VvbWV0cnk7CiAgfQogIGZ1bmN0aW9uIFBvbHlsaW5lVm9sdW1lR2VvbWV0cnkob3B0aW9ucykgewogICAgb3B0aW9ucyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMsIGRlZmF1bHRWYWx1ZV9kZWZhdWx0LkVNUFRZX09CSkVDVCk7CiAgICBjb25zdCBwb3NpdGlvbnMgPSBvcHRpb25zLnBvbHlsaW5lUG9zaXRpb25zOwogICAgY29uc3Qgc2hhcGUgPSBvcHRpb25zLnNoYXBlUG9zaXRpb25zOwogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocG9zaXRpb25zKSkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgib3B0aW9ucy5wb2x5bGluZVBvc2l0aW9ucyBpcyByZXF1aXJlZC4iKTsKICAgIH0KICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHNoYXBlKSkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgib3B0aW9ucy5zaGFwZVBvc2l0aW9ucyBpcyByZXF1aXJlZC4iKTsKICAgIH0KICAgIHRoaXMuX3Bvc2l0aW9ucyA9IHBvc2l0aW9uczsKICAgIHRoaXMuX3NoYXBlID0gc2hhcGU7CiAgICB0aGlzLl9lbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZSgKICAgICAgZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5lbGxpcHNvaWQsIEVsbGlwc29pZF9kZWZhdWx0LmRlZmF1bHQpCiAgICApOwogICAgdGhpcy5fY29ybmVyVHlwZSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuY29ybmVyVHlwZSwgQ29ybmVyVHlwZV9kZWZhdWx0LlJPVU5ERUQpOwogICAgdGhpcy5fdmVydGV4Rm9ybWF0ID0gVmVydGV4Rm9ybWF0X2RlZmF1bHQuY2xvbmUoCiAgICAgIGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMudmVydGV4Rm9ybWF0LCBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5ERUZBVUxUKQogICAgKTsKICAgIHRoaXMuX2dyYW51bGFyaXR5ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoCiAgICAgIG9wdGlvbnMuZ3JhbnVsYXJpdHksCiAgICAgIE1hdGhfZGVmYXVsdC5SQURJQU5TX1BFUl9ERUdSRUUKICAgICk7CiAgICB0aGlzLl93b3JrZXJOYW1lID0gImNyZWF0ZVBvbHlsaW5lVm9sdW1lR2VvbWV0cnkiOwogICAgbGV0IG51bUNvbXBvbmVudHMgPSAxICsgcG9zaXRpb25zLmxlbmd0aCAqIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICBudW1Db21wb25lbnRzICs9IDEgKyBzaGFwZS5sZW5ndGggKiBDYXJ0ZXNpYW4yX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgdGhpcy5wYWNrZWRMZW5ndGggPSBudW1Db21wb25lbnRzICsgRWxsaXBzb2lkX2RlZmF1bHQucGFja2VkTGVuZ3RoICsgVmVydGV4Rm9ybWF0X2RlZmF1bHQucGFja2VkTGVuZ3RoICsgMjsKICB9CiAgdmFyIHNjcmF0Y2hFbGxpcHNvaWQ5LCBzY3JhdGNoVmVydGV4Rm9ybWF0MTEsIHNjcmF0Y2hPcHRpb25zMTcsIGJyU2NyYXRjaCwgUG9seWxpbmVWb2x1bWVHZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X1BvbHlsaW5lVm9sdW1lR2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1BvbHlsaW5lVm9sdW1lR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X2FycmF5UmVtb3ZlRHVwbGljYXRlcygpOwogICAgICBpbml0X0JvdW5kaW5nUmVjdGFuZ2xlKCk7CiAgICAgIGluaXRfQm91bmRpbmdTcGhlcmUoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4yKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NvbXBvbmVudERhdGF0eXBlKCk7CiAgICAgIGluaXRfQ29ybmVyVHlwZSgpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBpbml0X0dlb21ldHJ5KCk7CiAgICAgIGluaXRfR2VvbWV0cnlBdHRyaWJ1dGUoKTsKICAgICAgaW5pdF9HZW9tZXRyeUF0dHJpYnV0ZXMoKTsKICAgICAgaW5pdF9HZW9tZXRyeVBpcGVsaW5lKCk7CiAgICAgIGluaXRfSW5kZXhEYXRhdHlwZSgpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgaW5pdF9vbmVUaW1lV2FybmluZygpOwogICAgICBpbml0X1BvbHlnb25QaXBlbGluZSgpOwogICAgICBpbml0X1BvbHlsaW5lVm9sdW1lR2VvbWV0cnlMaWJyYXJ5KCk7CiAgICAgIGluaXRfUHJpbWl0aXZlVHlwZSgpOwogICAgICBpbml0X1ZlcnRleEZvcm1hdCgpOwogICAgICBpbml0X1dpbmRpbmdPcmRlcigpOwogICAgICBQb2x5bGluZVZvbHVtZUdlb21ldHJ5LnBhY2sgPSBmdW5jdGlvbih2YWx1ZSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdCh2YWx1ZSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJ2YWx1ZSBpcyByZXF1aXJlZCIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChhcnJheSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJhcnJheSBpcyByZXF1aXJlZCIpOwogICAgICAgIH0KICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgbGV0IGk7CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gdmFsdWUuX3Bvc2l0aW9uczsKICAgICAgICBsZXQgbGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gbGVuZ3RoOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSwgc3RhcnRpbmdJbmRleCArPSBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoKSB7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayhwb3NpdGlvbnNbaV0sIGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICB9CiAgICAgICAgY29uc3Qgc2hhcGUgPSB2YWx1ZS5fc2hhcGU7CiAgICAgICAgbGVuZ3RoID0gc2hhcGUubGVuZ3RoOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSBsZW5ndGg7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpLCBzdGFydGluZ0luZGV4ICs9IENhcnRlc2lhbjJfZGVmYXVsdC5wYWNrZWRMZW5ndGgpIHsKICAgICAgICAgIENhcnRlc2lhbjJfZGVmYXVsdC5wYWNrKHNoYXBlW2ldLCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgfQogICAgICAgIEVsbGlwc29pZF9kZWZhdWx0LnBhY2sodmFsdWUuX2VsbGlwc29pZCwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gRWxsaXBzb2lkX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIFZlcnRleEZvcm1hdF9kZWZhdWx0LnBhY2sodmFsdWUuX3ZlcnRleEZvcm1hdCwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gVmVydGV4Rm9ybWF0X2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fY29ybmVyVHlwZTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4XSA9IHZhbHVlLl9ncmFudWxhcml0eTsKICAgICAgICByZXR1cm4gYXJyYXk7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hFbGxpcHNvaWQ5ID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUoRWxsaXBzb2lkX2RlZmF1bHQuVU5JVF9TUEhFUkUpOwogICAgICBzY3JhdGNoVmVydGV4Rm9ybWF0MTEgPSBuZXcgVmVydGV4Rm9ybWF0X2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaE9wdGlvbnMxNyA9IHsKICAgICAgICBwb2x5bGluZVBvc2l0aW9uczogdm9pZCAwLAogICAgICAgIHNoYXBlUG9zaXRpb25zOiB2b2lkIDAsCiAgICAgICAgZWxsaXBzb2lkOiBzY3JhdGNoRWxsaXBzb2lkOSwKICAgICAgICB2ZXJ0ZXhGb3JtYXQ6IHNjcmF0Y2hWZXJ0ZXhGb3JtYXQxMSwKICAgICAgICBjb3JuZXJUeXBlOiB2b2lkIDAsCiAgICAgICAgZ3JhbnVsYXJpdHk6IHZvaWQgMAogICAgICB9OwogICAgICBQb2x5bGluZVZvbHVtZUdlb21ldHJ5LnVucGFjayA9IGZ1bmN0aW9uKGFycmF5LCBzdGFydGluZ0luZGV4LCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChhcnJheSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJhcnJheSBpcyByZXF1aXJlZCIpOwogICAgICAgIH0KICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgbGV0IGk7CiAgICAgICAgbGV0IGxlbmd0aCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gbmV3IEFycmF5KGxlbmd0aCk7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpLCBzdGFydGluZ0luZGV4ICs9IENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGgpIHsKICAgICAgICAgIHBvc2l0aW9uc1tpXSA9IENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2soYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIH0KICAgICAgICBsZW5ndGggPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IHNoYXBlID0gbmV3IEFycmF5KGxlbmd0aCk7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpLCBzdGFydGluZ0luZGV4ICs9IENhcnRlc2lhbjJfZGVmYXVsdC5wYWNrZWRMZW5ndGgpIHsKICAgICAgICAgIHNoYXBlW2ldID0gQ2FydGVzaWFuMl9kZWZhdWx0LnVucGFjayhhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGVsbGlwc29pZCA9IEVsbGlwc29pZF9kZWZhdWx0LnVucGFjayhhcnJheSwgc3RhcnRpbmdJbmRleCwgc2NyYXRjaEVsbGlwc29pZDkpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gRWxsaXBzb2lkX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIGNvbnN0IHZlcnRleEZvcm1hdCA9IFZlcnRleEZvcm1hdF9kZWZhdWx0LnVucGFjaygKICAgICAgICAgIGFycmF5LAogICAgICAgICAgc3RhcnRpbmdJbmRleCwKICAgICAgICAgIHNjcmF0Y2hWZXJ0ZXhGb3JtYXQxMQogICAgICAgICk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgY29uc3QgY29ybmVyVHlwZSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3QgZ3JhbnVsYXJpdHkgPSBhcnJheVtzdGFydGluZ0luZGV4XTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczE3LnBvbHlsaW5lUG9zaXRpb25zID0gcG9zaXRpb25zOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMxNy5zaGFwZVBvc2l0aW9ucyA9IHNoYXBlOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMxNy5jb3JuZXJUeXBlID0gY29ybmVyVHlwZTsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMTcuZ3JhbnVsYXJpdHkgPSBncmFudWxhcml0eTsKICAgICAgICAgIHJldHVybiBuZXcgUG9seWxpbmVWb2x1bWVHZW9tZXRyeShzY3JhdGNoT3B0aW9uczE3KTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0Ll9wb3NpdGlvbnMgPSBwb3NpdGlvbnM7CiAgICAgICAgcmVzdWx0Ll9zaGFwZSA9IHNoYXBlOwogICAgICAgIHJlc3VsdC5fZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUoZWxsaXBzb2lkLCByZXN1bHQuX2VsbGlwc29pZCk7CiAgICAgICAgcmVzdWx0Ll92ZXJ0ZXhGb3JtYXQgPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5jbG9uZSh2ZXJ0ZXhGb3JtYXQsIHJlc3VsdC5fdmVydGV4Rm9ybWF0KTsKICAgICAgICByZXN1bHQuX2Nvcm5lclR5cGUgPSBjb3JuZXJUeXBlOwogICAgICAgIHJlc3VsdC5fZ3JhbnVsYXJpdHkgPSBncmFudWxhcml0eTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBiclNjcmF0Y2ggPSBuZXcgQm91bmRpbmdSZWN0YW5nbGVfZGVmYXVsdCgpOwogICAgICBQb2x5bGluZVZvbHVtZUdlb21ldHJ5LmNyZWF0ZUdlb21ldHJ5ID0gZnVuY3Rpb24ocG9seWxpbmVWb2x1bWVHZW9tZXRyeSkgewogICAgICAgIGNvbnN0IHBvc2l0aW9ucyA9IHBvbHlsaW5lVm9sdW1lR2VvbWV0cnkuX3Bvc2l0aW9uczsKICAgICAgICBjb25zdCBjbGVhblBvc2l0aW9ucyA9IGFycmF5UmVtb3ZlRHVwbGljYXRlc19kZWZhdWx0KAogICAgICAgICAgcG9zaXRpb25zLAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmVxdWFsc0Vwc2lsb24KICAgICAgICApOwogICAgICAgIGxldCBzaGFwZTJEID0gcG9seWxpbmVWb2x1bWVHZW9tZXRyeS5fc2hhcGU7CiAgICAgICAgc2hhcGUyRCA9IFBvbHlsaW5lVm9sdW1lR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQucmVtb3ZlRHVwbGljYXRlc0Zyb21TaGFwZShzaGFwZTJEKTsKICAgICAgICBpZiAoY2xlYW5Qb3NpdGlvbnMubGVuZ3RoIDwgMiB8fCBzaGFwZTJELmxlbmd0aCA8IDMpIHsKICAgICAgICAgIHJldHVybiB2b2lkIDA7CiAgICAgICAgfQogICAgICAgIGlmIChQb2x5Z29uUGlwZWxpbmVfZGVmYXVsdC5jb21wdXRlV2luZGluZ09yZGVyMkQoc2hhcGUyRCkgPT09IFdpbmRpbmdPcmRlcl9kZWZhdWx0LkNMT0NLV0lTRSkgewogICAgICAgICAgc2hhcGUyRC5yZXZlcnNlKCk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGJvdW5kaW5nUmVjdGFuZ2xlID0gQm91bmRpbmdSZWN0YW5nbGVfZGVmYXVsdC5mcm9tUG9pbnRzKHNoYXBlMkQsIGJyU2NyYXRjaCk7CiAgICAgICAgY29uc3QgY29tcHV0ZWRQb3NpdGlvbnMgPSBQb2x5bGluZVZvbHVtZUdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmNvbXB1dGVQb3NpdGlvbnMoCiAgICAgICAgICBjbGVhblBvc2l0aW9ucywKICAgICAgICAgIHNoYXBlMkQsCiAgICAgICAgICBib3VuZGluZ1JlY3RhbmdsZSwKICAgICAgICAgIHBvbHlsaW5lVm9sdW1lR2VvbWV0cnksCiAgICAgICAgICB0cnVlCiAgICAgICAgKTsKICAgICAgICByZXR1cm4gY29tcHV0ZUF0dHJpYnV0ZXMyKAogICAgICAgICAgY29tcHV0ZWRQb3NpdGlvbnMsCiAgICAgICAgICBzaGFwZTJELAogICAgICAgICAgYm91bmRpbmdSZWN0YW5nbGUsCiAgICAgICAgICBwb2x5bGluZVZvbHVtZUdlb21ldHJ5Ll92ZXJ0ZXhGb3JtYXQKICAgICAgICApOwogICAgICB9OwogICAgICBQb2x5bGluZVZvbHVtZUdlb21ldHJ5X2RlZmF1bHQgPSBQb2x5bGluZVZvbHVtZUdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlUG9seWxpbmVWb2x1bWVHZW9tZXRyeS5qcwogIHZhciBjcmVhdGVQb2x5bGluZVZvbHVtZUdlb21ldHJ5X2V4cG9ydHMgPSB7fTsKICBfX2V4cG9ydChjcmVhdGVQb2x5bGluZVZvbHVtZUdlb21ldHJ5X2V4cG9ydHMsIHsKICAgIGRlZmF1bHQ6ICgpID0+IGNyZWF0ZVBvbHlsaW5lVm9sdW1lR2VvbWV0cnlfZGVmYXVsdAogIH0pOwogIGZ1bmN0aW9uIGNyZWF0ZVBvbHlsaW5lVm9sdW1lR2VvbWV0cnkocG9seWxpbmVWb2x1bWVHZW9tZXRyeSwgb2Zmc2V0KSB7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG9mZnNldCkpIHsKICAgICAgcG9seWxpbmVWb2x1bWVHZW9tZXRyeSA9IFBvbHlsaW5lVm9sdW1lR2VvbWV0cnlfZGVmYXVsdC51bnBhY2soCiAgICAgICAgcG9seWxpbmVWb2x1bWVHZW9tZXRyeSwKICAgICAgICBvZmZzZXQKICAgICAgKTsKICAgIH0KICAgIHBvbHlsaW5lVm9sdW1lR2VvbWV0cnkuX2VsbGlwc29pZCA9IEVsbGlwc29pZF9kZWZhdWx0LmNsb25lKAogICAgICBwb2x5bGluZVZvbHVtZUdlb21ldHJ5Ll9lbGxpcHNvaWQKICAgICk7CiAgICByZXR1cm4gUG9seWxpbmVWb2x1bWVHZW9tZXRyeV9kZWZhdWx0LmNyZWF0ZUdlb21ldHJ5KHBvbHlsaW5lVm9sdW1lR2VvbWV0cnkpOwogIH0KICB2YXIgY3JlYXRlUG9seWxpbmVWb2x1bWVHZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X2NyZWF0ZVBvbHlsaW5lVm9sdW1lR2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZVBvbHlsaW5lVm9sdW1lR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9Qb2x5bGluZVZvbHVtZUdlb21ldHJ5KCk7CiAgICAgIGNyZWF0ZVBvbHlsaW5lVm9sdW1lR2VvbWV0cnlfZGVmYXVsdCA9IGNyZWF0ZVBvbHlsaW5lVm9sdW1lR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9Qb2x5bGluZVZvbHVtZU91dGxpbmVHZW9tZXRyeS5qcwogIGZ1bmN0aW9uIGNvbXB1dGVBdHRyaWJ1dGVzMyhwb3NpdGlvbnMsIHNoYXBlKSB7CiAgICBjb25zdCBhdHRyaWJ1dGVzID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlc19kZWZhdWx0KCk7CiAgICBhdHRyaWJ1dGVzLnBvc2l0aW9uID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5ET1VCTEUsCiAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgIHZhbHVlczogcG9zaXRpb25zCiAgICB9KTsKICAgIGNvbnN0IHNoYXBlTGVuZ3RoID0gc2hhcGUubGVuZ3RoOwogICAgY29uc3QgdmVydGV4Q291bnQgPSBhdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcy5sZW5ndGggLyAzOwogICAgY29uc3QgcG9zaXRpb25MZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoIC8gMzsKICAgIGNvbnN0IHNoYXBlQ291bnQgPSBwb3NpdGlvbkxlbmd0aCAvIHNoYXBlTGVuZ3RoOwogICAgY29uc3QgaW5kaWNlcyA9IEluZGV4RGF0YXR5cGVfZGVmYXVsdC5jcmVhdGVUeXBlZEFycmF5KAogICAgICB2ZXJ0ZXhDb3VudCwKICAgICAgMiAqIHNoYXBlTGVuZ3RoICogKHNoYXBlQ291bnQgKyAxKQogICAgKTsKICAgIGxldCBpLCBqOwogICAgbGV0IGluZGV4ID0gMDsKICAgIGkgPSAwOwogICAgbGV0IG9mZnNldCA9IGkgKiBzaGFwZUxlbmd0aDsKICAgIGZvciAoaiA9IDA7IGogPCBzaGFwZUxlbmd0aCAtIDE7IGorKykgewogICAgICBpbmRpY2VzW2luZGV4KytdID0gaiArIG9mZnNldDsKICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGogKyBvZmZzZXQgKyAxOwogICAgfQogICAgaW5kaWNlc1tpbmRleCsrXSA9IHNoYXBlTGVuZ3RoIC0gMSArIG9mZnNldDsKICAgIGluZGljZXNbaW5kZXgrK10gPSBvZmZzZXQ7CiAgICBpID0gc2hhcGVDb3VudCAtIDE7CiAgICBvZmZzZXQgPSBpICogc2hhcGVMZW5ndGg7CiAgICBmb3IgKGogPSAwOyBqIDwgc2hhcGVMZW5ndGggLSAxOyBqKyspIHsKICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGogKyBvZmZzZXQ7CiAgICAgIGluZGljZXNbaW5kZXgrK10gPSBqICsgb2Zmc2V0ICsgMTsKICAgIH0KICAgIGluZGljZXNbaW5kZXgrK10gPSBzaGFwZUxlbmd0aCAtIDEgKyBvZmZzZXQ7CiAgICBpbmRpY2VzW2luZGV4KytdID0gb2Zmc2V0OwogICAgZm9yIChpID0gMDsgaSA8IHNoYXBlQ291bnQgLSAxOyBpKyspIHsKICAgICAgY29uc3QgZmlyc3RPZmZzZXQgPSBzaGFwZUxlbmd0aCAqIGk7CiAgICAgIGNvbnN0IHNlY29uZE9mZnNldCA9IGZpcnN0T2Zmc2V0ICsgc2hhcGVMZW5ndGg7CiAgICAgIGZvciAoaiA9IDA7IGogPCBzaGFwZUxlbmd0aDsgaisrKSB7CiAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGogKyBmaXJzdE9mZnNldDsKICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gaiArIHNlY29uZE9mZnNldDsKICAgICAgfQogICAgfQogICAgY29uc3QgZ2VvbWV0cnkgPSBuZXcgR2VvbWV0cnlfZGVmYXVsdCh7CiAgICAgIGF0dHJpYnV0ZXMsCiAgICAgIGluZGljZXM6IEluZGV4RGF0YXR5cGVfZGVmYXVsdC5jcmVhdGVUeXBlZEFycmF5KHZlcnRleENvdW50LCBpbmRpY2VzKSwKICAgICAgYm91bmRpbmdTcGhlcmU6IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQuZnJvbVZlcnRpY2VzKHBvc2l0aW9ucyksCiAgICAgIHByaW1pdGl2ZVR5cGU6IFByaW1pdGl2ZVR5cGVfZGVmYXVsdC5MSU5FUwogICAgfSk7CiAgICByZXR1cm4gZ2VvbWV0cnk7CiAgfQogIGZ1bmN0aW9uIFBvbHlsaW5lVm9sdW1lT3V0bGluZUdlb21ldHJ5KG9wdGlvbnMpIHsKICAgIG9wdGlvbnMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLCBkZWZhdWx0VmFsdWVfZGVmYXVsdC5FTVBUWV9PQkpFQ1QpOwogICAgY29uc3QgcG9zaXRpb25zID0gb3B0aW9ucy5wb2x5bGluZVBvc2l0aW9uczsKICAgIGNvbnN0IHNoYXBlID0gb3B0aW9ucy5zaGFwZVBvc2l0aW9uczsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHBvc2l0aW9ucykpIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoIm9wdGlvbnMucG9seWxpbmVQb3NpdGlvbnMgaXMgcmVxdWlyZWQuIik7CiAgICB9CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChzaGFwZSkpIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoIm9wdGlvbnMuc2hhcGVQb3NpdGlvbnMgaXMgcmVxdWlyZWQuIik7CiAgICB9CiAgICB0aGlzLl9wb3NpdGlvbnMgPSBwb3NpdGlvbnM7CiAgICB0aGlzLl9zaGFwZSA9IHNoYXBlOwogICAgdGhpcy5fZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUoCiAgICAgIGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuZWxsaXBzb2lkLCBFbGxpcHNvaWRfZGVmYXVsdC5kZWZhdWx0KQogICAgKTsKICAgIHRoaXMuX2Nvcm5lclR5cGUgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmNvcm5lclR5cGUsIENvcm5lclR5cGVfZGVmYXVsdC5ST1VOREVEKTsKICAgIHRoaXMuX2dyYW51bGFyaXR5ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoCiAgICAgIG9wdGlvbnMuZ3JhbnVsYXJpdHksCiAgICAgIE1hdGhfZGVmYXVsdC5SQURJQU5TX1BFUl9ERUdSRUUKICAgICk7CiAgICB0aGlzLl93b3JrZXJOYW1lID0gImNyZWF0ZVBvbHlsaW5lVm9sdW1lT3V0bGluZUdlb21ldHJ5IjsKICAgIGxldCBudW1Db21wb25lbnRzID0gMSArIHBvc2l0aW9ucy5sZW5ndGggKiBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgbnVtQ29tcG9uZW50cyArPSAxICsgc2hhcGUubGVuZ3RoICogQ2FydGVzaWFuMl9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgIHRoaXMucGFja2VkTGVuZ3RoID0gbnVtQ29tcG9uZW50cyArIEVsbGlwc29pZF9kZWZhdWx0LnBhY2tlZExlbmd0aCArIDI7CiAgfQogIHZhciBzY3JhdGNoRWxsaXBzb2lkMTAsIHNjcmF0Y2hPcHRpb25zMTgsIGJyU2NyYXRjaDIsIFBvbHlsaW5lVm9sdW1lT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfUG9seWxpbmVWb2x1bWVPdXRsaW5lR2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1BvbHlsaW5lVm9sdW1lT3V0bGluZUdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9hcnJheVJlbW92ZUR1cGxpY2F0ZXMoKTsKICAgICAgaW5pdF9Cb3VuZGluZ1JlY3RhbmdsZSgpOwogICAgICBpbml0X0JvdW5kaW5nU3BoZXJlKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMigpOwogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9Db21wb25lbnREYXRhdHlwZSgpOwogICAgICBpbml0X0Nvcm5lclR5cGUoKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9HZW9tZXRyeSgpOwogICAgICBpbml0X0dlb21ldHJ5QXR0cmlidXRlKCk7CiAgICAgIGluaXRfR2VvbWV0cnlBdHRyaWJ1dGVzKCk7CiAgICAgIGluaXRfSW5kZXhEYXRhdHlwZSgpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgaW5pdF9Qb2x5Z29uUGlwZWxpbmUoKTsKICAgICAgaW5pdF9Qb2x5bGluZVZvbHVtZUdlb21ldHJ5TGlicmFyeSgpOwogICAgICBpbml0X1ByaW1pdGl2ZVR5cGUoKTsKICAgICAgaW5pdF9XaW5kaW5nT3JkZXIoKTsKICAgICAgUG9seWxpbmVWb2x1bWVPdXRsaW5lR2VvbWV0cnkucGFjayA9IGZ1bmN0aW9uKHZhbHVlLCBhcnJheSwgc3RhcnRpbmdJbmRleCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHZhbHVlKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInZhbHVlIGlzIHJlcXVpcmVkIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGFycmF5KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImFycmF5IGlzIHJlcXVpcmVkIik7CiAgICAgICAgfQogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBsZXQgaTsKICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSB2YWx1ZS5fcG9zaXRpb25zOwogICAgICAgIGxldCBsZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSBsZW5ndGg7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpLCBzdGFydGluZ0luZGV4ICs9IENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGgpIHsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKHBvc2l0aW9uc1tpXSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIH0KICAgICAgICBjb25zdCBzaGFwZSA9IHZhbHVlLl9zaGFwZTsKICAgICAgICBsZW5ndGggPSBzaGFwZS5sZW5ndGg7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IGxlbmd0aDsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2ksIHN0YXJ0aW5nSW5kZXggKz0gQ2FydGVzaWFuMl9kZWZhdWx0LnBhY2tlZExlbmd0aCkgewogICAgICAgICAgQ2FydGVzaWFuMl9kZWZhdWx0LnBhY2soc2hhcGVbaV0sIGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICB9CiAgICAgICAgRWxsaXBzb2lkX2RlZmF1bHQucGFjayh2YWx1ZS5fZWxsaXBzb2lkLCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9jb3JuZXJUeXBlOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXhdID0gdmFsdWUuX2dyYW51bGFyaXR5OwogICAgICAgIHJldHVybiBhcnJheTsKICAgICAgfTsKICAgICAgc2NyYXRjaEVsbGlwc29pZDEwID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUoRWxsaXBzb2lkX2RlZmF1bHQuVU5JVF9TUEhFUkUpOwogICAgICBzY3JhdGNoT3B0aW9uczE4ID0gewogICAgICAgIHBvbHlsaW5lUG9zaXRpb25zOiB2b2lkIDAsCiAgICAgICAgc2hhcGVQb3NpdGlvbnM6IHZvaWQgMCwKICAgICAgICBlbGxpcHNvaWQ6IHNjcmF0Y2hFbGxpcHNvaWQxMCwKICAgICAgICBoZWlnaHQ6IHZvaWQgMCwKICAgICAgICBjb3JuZXJUeXBlOiB2b2lkIDAsCiAgICAgICAgZ3JhbnVsYXJpdHk6IHZvaWQgMAogICAgICB9OwogICAgICBQb2x5bGluZVZvbHVtZU91dGxpbmVHZW9tZXRyeS51bnBhY2sgPSBmdW5jdGlvbihhcnJheSwgc3RhcnRpbmdJbmRleCwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoYXJyYXkpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYXJyYXkgaXMgcmVxdWlyZWQiKTsKICAgICAgICB9CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIGxldCBpOwogICAgICAgIGxldCBsZW5ndGggPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IHBvc2l0aW9ucyA9IG5ldyBBcnJheShsZW5ndGgpOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSwgc3RhcnRpbmdJbmRleCArPSBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoKSB7CiAgICAgICAgICBwb3NpdGlvbnNbaV0gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICB9CiAgICAgICAgbGVuZ3RoID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBzaGFwZSA9IG5ldyBBcnJheShsZW5ndGgpOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSwgc3RhcnRpbmdJbmRleCArPSBDYXJ0ZXNpYW4yX2RlZmF1bHQucGFja2VkTGVuZ3RoKSB7CiAgICAgICAgICBzaGFwZVtpXSA9IENhcnRlc2lhbjJfZGVmYXVsdC51bnBhY2soYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIH0KICAgICAgICBjb25zdCBlbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC51bnBhY2soYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHNjcmF0Y2hFbGxpcHNvaWQxMCk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgY29uc3QgY29ybmVyVHlwZSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3QgZ3JhbnVsYXJpdHkgPSBhcnJheVtzdGFydGluZ0luZGV4XTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczE4LnBvbHlsaW5lUG9zaXRpb25zID0gcG9zaXRpb25zOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMxOC5zaGFwZVBvc2l0aW9ucyA9IHNoYXBlOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMxOC5jb3JuZXJUeXBlID0gY29ybmVyVHlwZTsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMTguZ3JhbnVsYXJpdHkgPSBncmFudWxhcml0eTsKICAgICAgICAgIHJldHVybiBuZXcgUG9seWxpbmVWb2x1bWVPdXRsaW5lR2VvbWV0cnkoc2NyYXRjaE9wdGlvbnMxOCk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5fcG9zaXRpb25zID0gcG9zaXRpb25zOwogICAgICAgIHJlc3VsdC5fc2hhcGUgPSBzaGFwZTsKICAgICAgICByZXN1bHQuX2VsbGlwc29pZCA9IEVsbGlwc29pZF9kZWZhdWx0LmNsb25lKGVsbGlwc29pZCwgcmVzdWx0Ll9lbGxpcHNvaWQpOwogICAgICAgIHJlc3VsdC5fY29ybmVyVHlwZSA9IGNvcm5lclR5cGU7CiAgICAgICAgcmVzdWx0Ll9ncmFudWxhcml0eSA9IGdyYW51bGFyaXR5OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIGJyU2NyYXRjaDIgPSBuZXcgQm91bmRpbmdSZWN0YW5nbGVfZGVmYXVsdCgpOwogICAgICBQb2x5bGluZVZvbHVtZU91dGxpbmVHZW9tZXRyeS5jcmVhdGVHZW9tZXRyeSA9IGZ1bmN0aW9uKHBvbHlsaW5lVm9sdW1lT3V0bGluZUdlb21ldHJ5KSB7CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gcG9seWxpbmVWb2x1bWVPdXRsaW5lR2VvbWV0cnkuX3Bvc2l0aW9uczsKICAgICAgICBjb25zdCBjbGVhblBvc2l0aW9ucyA9IGFycmF5UmVtb3ZlRHVwbGljYXRlc19kZWZhdWx0KAogICAgICAgICAgcG9zaXRpb25zLAogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmVxdWFsc0Vwc2lsb24KICAgICAgICApOwogICAgICAgIGxldCBzaGFwZTJEID0gcG9seWxpbmVWb2x1bWVPdXRsaW5lR2VvbWV0cnkuX3NoYXBlOwogICAgICAgIHNoYXBlMkQgPSBQb2x5bGluZVZvbHVtZUdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LnJlbW92ZUR1cGxpY2F0ZXNGcm9tU2hhcGUoc2hhcGUyRCk7CiAgICAgICAgaWYgKGNsZWFuUG9zaXRpb25zLmxlbmd0aCA8IDIgfHwgc2hhcGUyRC5sZW5ndGggPCAzKSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICBpZiAoUG9seWdvblBpcGVsaW5lX2RlZmF1bHQuY29tcHV0ZVdpbmRpbmdPcmRlcjJEKHNoYXBlMkQpID09PSBXaW5kaW5nT3JkZXJfZGVmYXVsdC5DTE9DS1dJU0UpIHsKICAgICAgICAgIHNoYXBlMkQucmV2ZXJzZSgpOwogICAgICAgIH0KICAgICAgICBjb25zdCBib3VuZGluZ1JlY3RhbmdsZSA9IEJvdW5kaW5nUmVjdGFuZ2xlX2RlZmF1bHQuZnJvbVBvaW50cyhzaGFwZTJELCBiclNjcmF0Y2gyKTsKICAgICAgICBjb25zdCBjb21wdXRlZFBvc2l0aW9ucyA9IFBvbHlsaW5lVm9sdW1lR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuY29tcHV0ZVBvc2l0aW9ucygKICAgICAgICAgIGNsZWFuUG9zaXRpb25zLAogICAgICAgICAgc2hhcGUyRCwKICAgICAgICAgIGJvdW5kaW5nUmVjdGFuZ2xlLAogICAgICAgICAgcG9seWxpbmVWb2x1bWVPdXRsaW5lR2VvbWV0cnksCiAgICAgICAgICBmYWxzZQogICAgICAgICk7CiAgICAgICAgcmV0dXJuIGNvbXB1dGVBdHRyaWJ1dGVzMyhjb21wdXRlZFBvc2l0aW9ucywgc2hhcGUyRCk7CiAgICAgIH07CiAgICAgIFBvbHlsaW5lVm9sdW1lT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQgPSBQb2x5bGluZVZvbHVtZU91dGxpbmVHZW9tZXRyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZVBvbHlsaW5lVm9sdW1lT3V0bGluZUdlb21ldHJ5LmpzCiAgdmFyIGNyZWF0ZVBvbHlsaW5lVm9sdW1lT3V0bGluZUdlb21ldHJ5X2V4cG9ydHMgPSB7fTsKICBfX2V4cG9ydChjcmVhdGVQb2x5bGluZVZvbHVtZU91dGxpbmVHZW9tZXRyeV9leHBvcnRzLCB7CiAgICBkZWZhdWx0OiAoKSA9PiBjcmVhdGVQb2x5bGluZVZvbHVtZU91dGxpbmVHZW9tZXRyeV9kZWZhdWx0CiAgfSk7CiAgZnVuY3Rpb24gY3JlYXRlUG9seWxpbmVWb2x1bWVPdXRsaW5lR2VvbWV0cnkocG9seWxpbmVWb2x1bWVPdXRsaW5lR2VvbWV0cnksIG9mZnNldCkgewogICAgaWYgKGRlZmluZWRfZGVmYXVsdChvZmZzZXQpKSB7CiAgICAgIHBvbHlsaW5lVm9sdW1lT3V0bGluZUdlb21ldHJ5ID0gUG9seWxpbmVWb2x1bWVPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdC51bnBhY2soCiAgICAgICAgcG9seWxpbmVWb2x1bWVPdXRsaW5lR2VvbWV0cnksCiAgICAgICAgb2Zmc2V0CiAgICAgICk7CiAgICB9CiAgICBwb2x5bGluZVZvbHVtZU91dGxpbmVHZW9tZXRyeS5fZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUoCiAgICAgIHBvbHlsaW5lVm9sdW1lT3V0bGluZUdlb21ldHJ5Ll9lbGxpcHNvaWQKICAgICk7CiAgICByZXR1cm4gUG9seWxpbmVWb2x1bWVPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdC5jcmVhdGVHZW9tZXRyeSgKICAgICAgcG9seWxpbmVWb2x1bWVPdXRsaW5lR2VvbWV0cnkKICAgICk7CiAgfQogIHZhciBjcmVhdGVQb2x5bGluZVZvbHVtZU91dGxpbmVHZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X2NyZWF0ZVBvbHlsaW5lVm9sdW1lT3V0bGluZUdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVQb2x5bGluZVZvbHVtZU91dGxpbmVHZW9tZXRyeS5qcyIoKSB7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBpbml0X1BvbHlsaW5lVm9sdW1lT3V0bGluZUdlb21ldHJ5KCk7CiAgICAgIGNyZWF0ZVBvbHlsaW5lVm9sdW1lT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQgPSBjcmVhdGVQb2x5bGluZVZvbHVtZU91dGxpbmVHZW9tZXRyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1JlY3RhbmdsZUdlb21ldHJ5TGlicmFyeS5qcwogIGZ1bmN0aW9uIGdldFJvdGF0aW9uT3B0aW9ucyhud0Nvcm5lciwgcm90YXRpb24sIGdyYW51bGFyaXR5WCwgZ3JhbnVsYXJpdHlZLCBjZW50ZXIsIHdpZHRoLCBoZWlnaHQpIHsKICAgIGNvbnN0IGNvc1JvdGF0aW9uID0gTWF0aC5jb3Mocm90YXRpb24pOwogICAgY29uc3QgZ3JhbllDb3MgPSBncmFudWxhcml0eVkgKiBjb3NSb3RhdGlvbjsKICAgIGNvbnN0IGdyYW5YQ29zID0gZ3JhbnVsYXJpdHlYICogY29zUm90YXRpb247CiAgICBjb25zdCBzaW5Sb3RhdGlvbiA9IE1hdGguc2luKHJvdGF0aW9uKTsKICAgIGNvbnN0IGdyYW5ZU2luID0gZ3JhbnVsYXJpdHlZICogc2luUm90YXRpb247CiAgICBjb25zdCBncmFuWFNpbiA9IGdyYW51bGFyaXR5WCAqIHNpblJvdGF0aW9uOwogICAgcHJvai5fZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuZGVmYXVsdDsKICAgIG53Q2FydGVzaWFuID0gcHJvai5wcm9qZWN0KG53Q29ybmVyLCBud0NhcnRlc2lhbik7CiAgICBud0NhcnRlc2lhbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChud0NhcnRlc2lhbiwgY2VudGVyQ2FydGVzaWFuLCBud0NhcnRlc2lhbik7CiAgICBjb25zdCByb3RhdGlvbk1hdHJpeCA9IE1hdHJpeDJfZGVmYXVsdC5mcm9tUm90YXRpb24ocm90YXRpb24sIHJvdGF0aW9uTWF0cml4U2NyYXRjaCk7CiAgICBud0NhcnRlc2lhbiA9IE1hdHJpeDJfZGVmYXVsdC5tdWx0aXBseUJ5VmVjdG9yKAogICAgICByb3RhdGlvbk1hdHJpeCwKICAgICAgbndDYXJ0ZXNpYW4sCiAgICAgIG53Q2FydGVzaWFuCiAgICApOwogICAgbndDYXJ0ZXNpYW4gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKG53Q2FydGVzaWFuLCBjZW50ZXJDYXJ0ZXNpYW4sIG53Q2FydGVzaWFuKTsKICAgIG53Q29ybmVyID0gcHJvai51bnByb2plY3QobndDYXJ0ZXNpYW4sIG53Q29ybmVyKTsKICAgIHdpZHRoIC09IDE7CiAgICBoZWlnaHQgLT0gMTsKICAgIGNvbnN0IGxhdGl0dWRlID0gbndDb3JuZXIubGF0aXR1ZGU7CiAgICBjb25zdCBsYXRpdHVkZTAgPSBsYXRpdHVkZSArIHdpZHRoICogZ3JhblhTaW47CiAgICBjb25zdCBsYXRpdHVkZTEgPSBsYXRpdHVkZSAtIGdyYW5ZQ29zICogaGVpZ2h0OwogICAgY29uc3QgbGF0aXR1ZGUyID0gbGF0aXR1ZGUgLSBncmFuWUNvcyAqIGhlaWdodCArIHdpZHRoICogZ3JhblhTaW47CiAgICBjb25zdCBub3J0aCA9IE1hdGgubWF4KGxhdGl0dWRlLCBsYXRpdHVkZTAsIGxhdGl0dWRlMSwgbGF0aXR1ZGUyKTsKICAgIGNvbnN0IHNvdXRoID0gTWF0aC5taW4obGF0aXR1ZGUsIGxhdGl0dWRlMCwgbGF0aXR1ZGUxLCBsYXRpdHVkZTIpOwogICAgY29uc3QgbG9uZ2l0dWRlID0gbndDb3JuZXIubG9uZ2l0dWRlOwogICAgY29uc3QgbG9uZ2l0dWRlMCA9IGxvbmdpdHVkZSArIHdpZHRoICogZ3JhblhDb3M7CiAgICBjb25zdCBsb25naXR1ZGUxID0gbG9uZ2l0dWRlICsgaGVpZ2h0ICogZ3JhbllTaW47CiAgICBjb25zdCBsb25naXR1ZGUyID0gbG9uZ2l0dWRlICsgaGVpZ2h0ICogZ3JhbllTaW4gKyB3aWR0aCAqIGdyYW5YQ29zOwogICAgY29uc3QgZWFzdCA9IE1hdGgubWF4KGxvbmdpdHVkZSwgbG9uZ2l0dWRlMCwgbG9uZ2l0dWRlMSwgbG9uZ2l0dWRlMik7CiAgICBjb25zdCB3ZXN0ID0gTWF0aC5taW4obG9uZ2l0dWRlLCBsb25naXR1ZGUwLCBsb25naXR1ZGUxLCBsb25naXR1ZGUyKTsKICAgIHJldHVybiB7CiAgICAgIG5vcnRoLAogICAgICBzb3V0aCwKICAgICAgZWFzdCwKICAgICAgd2VzdCwKICAgICAgZ3JhbllDb3MsCiAgICAgIGdyYW5ZU2luLAogICAgICBncmFuWENvcywKICAgICAgZ3JhblhTaW4sCiAgICAgIG53Q29ybmVyCiAgICB9OwogIH0KICB2YXIgY29zMywgc2luMywgc3FydCwgUmVjdGFuZ2xlR2VvbWV0cnlMaWJyYXJ5LCByb3RhdGlvbk1hdHJpeFNjcmF0Y2gsIG53Q2FydGVzaWFuLCBjZW50ZXJTY3JhdGNoMywgY2VudGVyQ2FydGVzaWFuLCBwcm9qLCBSZWN0YW5nbGVHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdDsKICB2YXIgaW5pdF9SZWN0YW5nbGVHZW9tZXRyeUxpYnJhcnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1JlY3RhbmdsZUdlb21ldHJ5TGlicmFyeS5qcyIoKSB7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NhcnRvZ3JhcGhpYygpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBpbml0X0dlb2dyYXBoaWNQcm9qZWN0aW9uKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X01hdHJpeDIoKTsKICAgICAgaW5pdF9SZWN0YW5nbGUoKTsKICAgICAgY29zMyA9IE1hdGguY29zOwogICAgICBzaW4zID0gTWF0aC5zaW47CiAgICAgIHNxcnQgPSBNYXRoLnNxcnQ7CiAgICAgIFJlY3RhbmdsZUdlb21ldHJ5TGlicmFyeSA9IHt9OwogICAgICBSZWN0YW5nbGVHZW9tZXRyeUxpYnJhcnkuY29tcHV0ZVBvc2l0aW9uID0gZnVuY3Rpb24oY29tcHV0ZWRPcHRpb25zLCBlbGxpcHNvaWQsIGNvbXB1dGVTVCwgcm93LCBjb2wsIHBvc2l0aW9uLCBzdCkgewogICAgICAgIGNvbnN0IHJhZGlpU3F1YXJlZCA9IGVsbGlwc29pZC5yYWRpaVNxdWFyZWQ7CiAgICAgICAgY29uc3QgbndDb3JuZXIgPSBjb21wdXRlZE9wdGlvbnMubndDb3JuZXI7CiAgICAgICAgY29uc3QgcmVjdGFuZ2xlID0gY29tcHV0ZWRPcHRpb25zLmJvdW5kaW5nUmVjdGFuZ2xlOwogICAgICAgIGxldCBzdExhdGl0dWRlID0gbndDb3JuZXIubGF0aXR1ZGUgLSBjb21wdXRlZE9wdGlvbnMuZ3JhbllDb3MgKiByb3cgKyBjb2wgKiBjb21wdXRlZE9wdGlvbnMuZ3JhblhTaW47CiAgICAgICAgY29uc3QgY29zTGF0aXR1ZGUgPSBjb3MzKHN0TGF0aXR1ZGUpOwogICAgICAgIGNvbnN0IG5aID0gc2luMyhzdExhdGl0dWRlKTsKICAgICAgICBjb25zdCBrWiA9IHJhZGlpU3F1YXJlZC56ICogblo7CiAgICAgICAgbGV0IHN0TG9uZ2l0dWRlID0gbndDb3JuZXIubG9uZ2l0dWRlICsgcm93ICogY29tcHV0ZWRPcHRpb25zLmdyYW5ZU2luICsgY29sICogY29tcHV0ZWRPcHRpb25zLmdyYW5YQ29zOwogICAgICAgIGNvbnN0IG5YID0gY29zTGF0aXR1ZGUgKiBjb3MzKHN0TG9uZ2l0dWRlKTsKICAgICAgICBjb25zdCBuWSA9IGNvc0xhdGl0dWRlICogc2luMyhzdExvbmdpdHVkZSk7CiAgICAgICAgY29uc3Qga1ggPSByYWRpaVNxdWFyZWQueCAqIG5YOwogICAgICAgIGNvbnN0IGtZID0gcmFkaWlTcXVhcmVkLnkgKiBuWTsKICAgICAgICBjb25zdCBnYW1tYSA9IHNxcnQoa1ggKiBuWCArIGtZICogblkgKyBrWiAqIG5aKTsKICAgICAgICBwb3NpdGlvbi54ID0ga1ggLyBnYW1tYTsKICAgICAgICBwb3NpdGlvbi55ID0ga1kgLyBnYW1tYTsKICAgICAgICBwb3NpdGlvbi56ID0ga1ogLyBnYW1tYTsKICAgICAgICBpZiAoY29tcHV0ZVNUKSB7CiAgICAgICAgICBjb25zdCBzdE53Q29ybmVyID0gY29tcHV0ZWRPcHRpb25zLnN0TndDb3JuZXI7CiAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHN0TndDb3JuZXIpKSB7CiAgICAgICAgICAgIHN0TGF0aXR1ZGUgPSBzdE53Q29ybmVyLmxhdGl0dWRlIC0gY29tcHV0ZWRPcHRpb25zLnN0R3JhbllDb3MgKiByb3cgKyBjb2wgKiBjb21wdXRlZE9wdGlvbnMuc3RHcmFuWFNpbjsKICAgICAgICAgICAgc3RMb25naXR1ZGUgPSBzdE53Q29ybmVyLmxvbmdpdHVkZSArIHJvdyAqIGNvbXB1dGVkT3B0aW9ucy5zdEdyYW5ZU2luICsgY29sICogY29tcHV0ZWRPcHRpb25zLnN0R3JhblhDb3M7CiAgICAgICAgICAgIHN0LnggPSAoc3RMb25naXR1ZGUgLSBjb21wdXRlZE9wdGlvbnMuc3RXZXN0KSAqIGNvbXB1dGVkT3B0aW9ucy5sb25TY2FsYXI7CiAgICAgICAgICAgIHN0LnkgPSAoc3RMYXRpdHVkZSAtIGNvbXB1dGVkT3B0aW9ucy5zdFNvdXRoKSAqIGNvbXB1dGVkT3B0aW9ucy5sYXRTY2FsYXI7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBzdC54ID0gKHN0TG9uZ2l0dWRlIC0gcmVjdGFuZ2xlLndlc3QpICogY29tcHV0ZWRPcHRpb25zLmxvblNjYWxhcjsKICAgICAgICAgICAgc3QueSA9IChzdExhdGl0dWRlIC0gcmVjdGFuZ2xlLnNvdXRoKSAqIGNvbXB1dGVkT3B0aW9ucy5sYXRTY2FsYXI7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9OwogICAgICByb3RhdGlvbk1hdHJpeFNjcmF0Y2ggPSBuZXcgTWF0cml4Ml9kZWZhdWx0KCk7CiAgICAgIG53Q2FydGVzaWFuID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBjZW50ZXJTY3JhdGNoMyA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICBjZW50ZXJDYXJ0ZXNpYW4gPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHByb2ogPSBuZXcgR2VvZ3JhcGhpY1Byb2plY3Rpb25fZGVmYXVsdCgpOwogICAgICBSZWN0YW5nbGVHZW9tZXRyeUxpYnJhcnkuY29tcHV0ZU9wdGlvbnMgPSBmdW5jdGlvbihyZWN0YW5nbGUsIGdyYW51bGFyaXR5LCByb3RhdGlvbiwgc3RSb3RhdGlvbiwgYm91bmRpbmdSZWN0YW5nbGVTY3JhdGNoLCBud0Nvcm5lclJlc3VsdCwgc3ROd0Nvcm5lclJlc3VsdCkgewogICAgICAgIGxldCBlYXN0ID0gcmVjdGFuZ2xlLmVhc3Q7CiAgICAgICAgbGV0IHdlc3QgPSByZWN0YW5nbGUud2VzdDsKICAgICAgICBsZXQgbm9ydGggPSByZWN0YW5nbGUubm9ydGg7CiAgICAgICAgbGV0IHNvdXRoID0gcmVjdGFuZ2xlLnNvdXRoOwogICAgICAgIGxldCBub3J0aENhcCA9IGZhbHNlOwogICAgICAgIGxldCBzb3V0aENhcCA9IGZhbHNlOwogICAgICAgIGlmIChub3J0aCA9PT0gTWF0aF9kZWZhdWx0LlBJX09WRVJfVFdPKSB7CiAgICAgICAgICBub3J0aENhcCA9IHRydWU7CiAgICAgICAgfQogICAgICAgIGlmIChzb3V0aCA9PT0gLU1hdGhfZGVmYXVsdC5QSV9PVkVSX1RXTykgewogICAgICAgICAgc291dGhDYXAgPSB0cnVlOwogICAgICAgIH0KICAgICAgICBsZXQgZHg7CiAgICAgICAgY29uc3QgZHkgPSBub3J0aCAtIHNvdXRoOwogICAgICAgIGlmICh3ZXN0ID4gZWFzdCkgewogICAgICAgICAgZHggPSBNYXRoX2RlZmF1bHQuVFdPX1BJIC0gd2VzdCArIGVhc3Q7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGR4ID0gZWFzdCAtIHdlc3Q7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHdpZHRoID0gTWF0aC5jZWlsKGR4IC8gZ3JhbnVsYXJpdHkpICsgMTsKICAgICAgICBjb25zdCBoZWlnaHQgPSBNYXRoLmNlaWwoZHkgLyBncmFudWxhcml0eSkgKyAxOwogICAgICAgIGNvbnN0IGdyYW51bGFyaXR5WCA9IGR4IC8gKHdpZHRoIC0gMSk7CiAgICAgICAgY29uc3QgZ3JhbnVsYXJpdHlZID0gZHkgLyAoaGVpZ2h0IC0gMSk7CiAgICAgICAgY29uc3QgbndDb3JuZXIgPSBSZWN0YW5nbGVfZGVmYXVsdC5ub3J0aHdlc3QocmVjdGFuZ2xlLCBud0Nvcm5lclJlc3VsdCk7CiAgICAgICAgY29uc3QgY2VudGVyID0gUmVjdGFuZ2xlX2RlZmF1bHQuY2VudGVyKHJlY3RhbmdsZSwgY2VudGVyU2NyYXRjaDMpOwogICAgICAgIGlmIChyb3RhdGlvbiAhPT0gMCB8fCBzdFJvdGF0aW9uICE9PSAwKSB7CiAgICAgICAgICBpZiAoY2VudGVyLmxvbmdpdHVkZSA8IG53Q29ybmVyLmxvbmdpdHVkZSkgewogICAgICAgICAgICBjZW50ZXIubG9uZ2l0dWRlICs9IE1hdGhfZGVmYXVsdC5UV09fUEk7CiAgICAgICAgICB9CiAgICAgICAgICBwcm9qLl9lbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC5kZWZhdWx0OwogICAgICAgICAgY2VudGVyQ2FydGVzaWFuID0gcHJvai5wcm9qZWN0KGNlbnRlciwgY2VudGVyQ2FydGVzaWFuKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgZ3JhbllDb3MgPSBncmFudWxhcml0eVk7CiAgICAgICAgY29uc3QgZ3JhblhDb3MgPSBncmFudWxhcml0eVg7CiAgICAgICAgY29uc3QgZ3JhbllTaW4gPSAwOwogICAgICAgIGNvbnN0IGdyYW5YU2luID0gMDsKICAgICAgICBjb25zdCBib3VuZGluZ1JlY3RhbmdsZSA9IFJlY3RhbmdsZV9kZWZhdWx0LmNsb25lKAogICAgICAgICAgcmVjdGFuZ2xlLAogICAgICAgICAgYm91bmRpbmdSZWN0YW5nbGVTY3JhdGNoCiAgICAgICAgKTsKICAgICAgICBjb25zdCBjb21wdXRlZE9wdGlvbnMgPSB7CiAgICAgICAgICBncmFuWUNvcywKICAgICAgICAgIGdyYW5ZU2luLAogICAgICAgICAgZ3JhblhDb3MsCiAgICAgICAgICBncmFuWFNpbiwKICAgICAgICAgIG53Q29ybmVyLAogICAgICAgICAgYm91bmRpbmdSZWN0YW5nbGUsCiAgICAgICAgICB3aWR0aCwKICAgICAgICAgIGhlaWdodCwKICAgICAgICAgIG5vcnRoQ2FwLAogICAgICAgICAgc291dGhDYXAKICAgICAgICB9OwogICAgICAgIGlmIChyb3RhdGlvbiAhPT0gMCkgewogICAgICAgICAgY29uc3Qgcm90YXRpb25PcHRpb25zID0gZ2V0Um90YXRpb25PcHRpb25zKAogICAgICAgICAgICBud0Nvcm5lciwKICAgICAgICAgICAgcm90YXRpb24sCiAgICAgICAgICAgIGdyYW51bGFyaXR5WCwKICAgICAgICAgICAgZ3JhbnVsYXJpdHlZLAogICAgICAgICAgICBjZW50ZXIsCiAgICAgICAgICAgIHdpZHRoLAogICAgICAgICAgICBoZWlnaHQKICAgICAgICAgICk7CiAgICAgICAgICBub3J0aCA9IHJvdGF0aW9uT3B0aW9ucy5ub3J0aDsKICAgICAgICAgIHNvdXRoID0gcm90YXRpb25PcHRpb25zLnNvdXRoOwogICAgICAgICAgZWFzdCA9IHJvdGF0aW9uT3B0aW9ucy5lYXN0OwogICAgICAgICAgd2VzdCA9IHJvdGF0aW9uT3B0aW9ucy53ZXN0OwogICAgICAgICAgaWYgKG5vcnRoIDwgLU1hdGhfZGVmYXVsdC5QSV9PVkVSX1RXTyB8fCBub3J0aCA+IE1hdGhfZGVmYXVsdC5QSV9PVkVSX1RXTyB8fCBzb3V0aCA8IC1NYXRoX2RlZmF1bHQuUElfT1ZFUl9UV08gfHwgc291dGggPiBNYXRoX2RlZmF1bHQuUElfT1ZFUl9UV08pIHsKICAgICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgICAgIlJvdGF0ZWQgcmVjdGFuZ2xlIGlzIGludmFsaWQuICBJdCBjcm9zc2VzIG92ZXIgZWl0aGVyIHRoZSBub3J0aCBvciBzb3V0aCBwb2xlLiIKICAgICAgICAgICAgKTsKICAgICAgICAgIH0KICAgICAgICAgIGNvbXB1dGVkT3B0aW9ucy5ncmFuWUNvcyA9IHJvdGF0aW9uT3B0aW9ucy5ncmFuWUNvczsKICAgICAgICAgIGNvbXB1dGVkT3B0aW9ucy5ncmFuWVNpbiA9IHJvdGF0aW9uT3B0aW9ucy5ncmFuWVNpbjsKICAgICAgICAgIGNvbXB1dGVkT3B0aW9ucy5ncmFuWENvcyA9IHJvdGF0aW9uT3B0aW9ucy5ncmFuWENvczsKICAgICAgICAgIGNvbXB1dGVkT3B0aW9ucy5ncmFuWFNpbiA9IHJvdGF0aW9uT3B0aW9ucy5ncmFuWFNpbjsKICAgICAgICAgIGJvdW5kaW5nUmVjdGFuZ2xlLm5vcnRoID0gbm9ydGg7CiAgICAgICAgICBib3VuZGluZ1JlY3RhbmdsZS5zb3V0aCA9IHNvdXRoOwogICAgICAgICAgYm91bmRpbmdSZWN0YW5nbGUuZWFzdCA9IGVhc3Q7CiAgICAgICAgICBib3VuZGluZ1JlY3RhbmdsZS53ZXN0ID0gd2VzdDsKICAgICAgICB9CiAgICAgICAgaWYgKHN0Um90YXRpb24gIT09IDApIHsKICAgICAgICAgIHJvdGF0aW9uID0gcm90YXRpb24gLSBzdFJvdGF0aW9uOwogICAgICAgICAgY29uc3Qgc3ROd0Nvcm5lciA9IFJlY3RhbmdsZV9kZWZhdWx0Lm5vcnRod2VzdChib3VuZGluZ1JlY3RhbmdsZSwgc3ROd0Nvcm5lclJlc3VsdCk7CiAgICAgICAgICBjb25zdCBzdFJvdGF0aW9uT3B0aW9ucyA9IGdldFJvdGF0aW9uT3B0aW9ucygKICAgICAgICAgICAgc3ROd0Nvcm5lciwKICAgICAgICAgICAgcm90YXRpb24sCiAgICAgICAgICAgIGdyYW51bGFyaXR5WCwKICAgICAgICAgICAgZ3JhbnVsYXJpdHlZLAogICAgICAgICAgICBjZW50ZXIsCiAgICAgICAgICAgIHdpZHRoLAogICAgICAgICAgICBoZWlnaHQKICAgICAgICAgICk7CiAgICAgICAgICBjb21wdXRlZE9wdGlvbnMuc3RHcmFuWUNvcyA9IHN0Um90YXRpb25PcHRpb25zLmdyYW5ZQ29zOwogICAgICAgICAgY29tcHV0ZWRPcHRpb25zLnN0R3JhblhDb3MgPSBzdFJvdGF0aW9uT3B0aW9ucy5ncmFuWENvczsKICAgICAgICAgIGNvbXB1dGVkT3B0aW9ucy5zdEdyYW5ZU2luID0gc3RSb3RhdGlvbk9wdGlvbnMuZ3JhbllTaW47CiAgICAgICAgICBjb21wdXRlZE9wdGlvbnMuc3RHcmFuWFNpbiA9IHN0Um90YXRpb25PcHRpb25zLmdyYW5YU2luOwogICAgICAgICAgY29tcHV0ZWRPcHRpb25zLnN0TndDb3JuZXIgPSBzdE53Q29ybmVyOwogICAgICAgICAgY29tcHV0ZWRPcHRpb25zLnN0V2VzdCA9IHN0Um90YXRpb25PcHRpb25zLndlc3Q7CiAgICAgICAgICBjb21wdXRlZE9wdGlvbnMuc3RTb3V0aCA9IHN0Um90YXRpb25PcHRpb25zLnNvdXRoOwogICAgICAgIH0KICAgICAgICByZXR1cm4gY29tcHV0ZWRPcHRpb25zOwogICAgICB9OwogICAgICBSZWN0YW5nbGVHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdCA9IFJlY3RhbmdsZUdlb21ldHJ5TGlicmFyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1JlY3RhbmdsZUdlb21ldHJ5LmpzCiAgZnVuY3Rpb24gY3JlYXRlQXR0cmlidXRlcyh2ZXJ0ZXhGb3JtYXQsIGF0dHJpYnV0ZXMpIHsKICAgIGNvbnN0IGdlbyA9IG5ldyBHZW9tZXRyeV9kZWZhdWx0KHsKICAgICAgYXR0cmlidXRlczogbmV3IEdlb21ldHJ5QXR0cmlidXRlc19kZWZhdWx0KCksCiAgICAgIHByaW1pdGl2ZVR5cGU6IFByaW1pdGl2ZVR5cGVfZGVmYXVsdC5UUklBTkdMRVMKICAgIH0pOwogICAgZ2VvLmF0dHJpYnV0ZXMucG9zaXRpb24gPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkRPVUJMRSwKICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgdmFsdWVzOiBhdHRyaWJ1dGVzLnBvc2l0aW9ucwogICAgfSk7CiAgICBpZiAodmVydGV4Rm9ybWF0Lm5vcm1hbCkgewogICAgICBnZW8uYXR0cmlidXRlcy5ub3JtYWwgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICB2YWx1ZXM6IGF0dHJpYnV0ZXMubm9ybWFscwogICAgICB9KTsKICAgIH0KICAgIGlmICh2ZXJ0ZXhGb3JtYXQudGFuZ2VudCkgewogICAgICBnZW8uYXR0cmlidXRlcy50YW5nZW50ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkZMT0FULAogICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgdmFsdWVzOiBhdHRyaWJ1dGVzLnRhbmdlbnRzCiAgICAgIH0pOwogICAgfQogICAgaWYgKHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpIHsKICAgICAgZ2VvLmF0dHJpYnV0ZXMuYml0YW5nZW50ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkZMT0FULAogICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgdmFsdWVzOiBhdHRyaWJ1dGVzLmJpdGFuZ2VudHMKICAgICAgfSk7CiAgICB9CiAgICByZXR1cm4gZ2VvOwogIH0KICBmdW5jdGlvbiBjYWxjdWxhdGVBdHRyaWJ1dGVzKHBvc2l0aW9ucywgdmVydGV4Rm9ybWF0LCBlbGxpcHNvaWQsIHRhbmdlbnRSb3RhdGlvbk1hdHJpeCkgewogICAgY29uc3QgbGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aDsKICAgIGNvbnN0IG5vcm1hbHMgPSB2ZXJ0ZXhGb3JtYXQubm9ybWFsID8gbmV3IEZsb2F0MzJBcnJheShsZW5ndGgpIDogdm9pZCAwOwogICAgY29uc3QgdGFuZ2VudHMgPSB2ZXJ0ZXhGb3JtYXQudGFuZ2VudCA/IG5ldyBGbG9hdDMyQXJyYXkobGVuZ3RoKSA6IHZvaWQgMDsKICAgIGNvbnN0IGJpdGFuZ2VudHMgPSB2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50ID8gbmV3IEZsb2F0MzJBcnJheShsZW5ndGgpIDogdm9pZCAwOwogICAgbGV0IGF0dHJJbmRleCA9IDA7CiAgICBjb25zdCBiaXRhbmdlbnQgPSBiaXRhbmdlbnRTY3JhdGNoMjsKICAgIGNvbnN0IHRhbmdlbnQgPSB0YW5nZW50U2NyYXRjaDI7CiAgICBsZXQgbm9ybWFsMiA9IG5vcm1hbFNjcmF0Y2g0OwogICAgaWYgKHZlcnRleEZvcm1hdC5ub3JtYWwgfHwgdmVydGV4Rm9ybWF0LnRhbmdlbnQgfHwgdmVydGV4Rm9ybWF0LmJpdGFuZ2VudCkgewogICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAzKSB7CiAgICAgICAgY29uc3QgcCA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkocG9zaXRpb25zLCBpLCBwb3NpdGlvblNjcmF0Y2gyKTsKICAgICAgICBjb25zdCBhdHRySW5kZXgxID0gYXR0ckluZGV4ICsgMTsKICAgICAgICBjb25zdCBhdHRySW5kZXgyID0gYXR0ckluZGV4ICsgMjsKICAgICAgICBub3JtYWwyID0gZWxsaXBzb2lkLmdlb2RldGljU3VyZmFjZU5vcm1hbChwLCBub3JtYWwyKTsKICAgICAgICBpZiAodmVydGV4Rm9ybWF0LnRhbmdlbnQgfHwgdmVydGV4Rm9ybWF0LmJpdGFuZ2VudCkgewogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKENhcnRlc2lhbjNfZGVmYXVsdC5VTklUX1osIG5vcm1hbDIsIHRhbmdlbnQpOwogICAgICAgICAgTWF0cml4M19kZWZhdWx0Lm11bHRpcGx5QnlWZWN0b3IodGFuZ2VudFJvdGF0aW9uTWF0cml4LCB0YW5nZW50LCB0YW5nZW50KTsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUodGFuZ2VudCwgdGFuZ2VudCk7CiAgICAgICAgICBpZiAodmVydGV4Rm9ybWF0LmJpdGFuZ2VudCkgewogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKAogICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyhub3JtYWwyLCB0YW5nZW50LCBiaXRhbmdlbnQpLAogICAgICAgICAgICAgIGJpdGFuZ2VudAogICAgICAgICAgICApOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAodmVydGV4Rm9ybWF0Lm5vcm1hbCkgewogICAgICAgICAgbm9ybWFsc1thdHRySW5kZXhdID0gbm9ybWFsMi54OwogICAgICAgICAgbm9ybWFsc1thdHRySW5kZXgxXSA9IG5vcm1hbDIueTsKICAgICAgICAgIG5vcm1hbHNbYXR0ckluZGV4Ml0gPSBub3JtYWwyLno7CiAgICAgICAgfQogICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQudGFuZ2VudCkgewogICAgICAgICAgdGFuZ2VudHNbYXR0ckluZGV4XSA9IHRhbmdlbnQueDsKICAgICAgICAgIHRhbmdlbnRzW2F0dHJJbmRleDFdID0gdGFuZ2VudC55OwogICAgICAgICAgdGFuZ2VudHNbYXR0ckluZGV4Ml0gPSB0YW5nZW50Lno7CiAgICAgICAgfQogICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50KSB7CiAgICAgICAgICBiaXRhbmdlbnRzW2F0dHJJbmRleF0gPSBiaXRhbmdlbnQueDsKICAgICAgICAgIGJpdGFuZ2VudHNbYXR0ckluZGV4MV0gPSBiaXRhbmdlbnQueTsKICAgICAgICAgIGJpdGFuZ2VudHNbYXR0ckluZGV4Ml0gPSBiaXRhbmdlbnQuejsKICAgICAgICB9CiAgICAgICAgYXR0ckluZGV4ICs9IDM7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBjcmVhdGVBdHRyaWJ1dGVzKHZlcnRleEZvcm1hdCwgewogICAgICBwb3NpdGlvbnMsCiAgICAgIG5vcm1hbHMsCiAgICAgIHRhbmdlbnRzLAogICAgICBiaXRhbmdlbnRzCiAgICB9KTsKICB9CiAgZnVuY3Rpb24gY2FsY3VsYXRlQXR0cmlidXRlc1dhbGwocG9zaXRpb25zLCB2ZXJ0ZXhGb3JtYXQsIGVsbGlwc29pZCkgewogICAgY29uc3QgbGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aDsKICAgIGNvbnN0IG5vcm1hbHMgPSB2ZXJ0ZXhGb3JtYXQubm9ybWFsID8gbmV3IEZsb2F0MzJBcnJheShsZW5ndGgpIDogdm9pZCAwOwogICAgY29uc3QgdGFuZ2VudHMgPSB2ZXJ0ZXhGb3JtYXQudGFuZ2VudCA/IG5ldyBGbG9hdDMyQXJyYXkobGVuZ3RoKSA6IHZvaWQgMDsKICAgIGNvbnN0IGJpdGFuZ2VudHMgPSB2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50ID8gbmV3IEZsb2F0MzJBcnJheShsZW5ndGgpIDogdm9pZCAwOwogICAgbGV0IG5vcm1hbEluZGV4ID0gMDsKICAgIGxldCB0YW5nZW50SW5kZXggPSAwOwogICAgbGV0IGJpdGFuZ2VudEluZGV4ID0gMDsKICAgIGxldCByZWNvbXB1dGVOb3JtYWwgPSB0cnVlOwogICAgbGV0IGJpdGFuZ2VudCA9IGJpdGFuZ2VudFNjcmF0Y2gyOwogICAgbGV0IHRhbmdlbnQgPSB0YW5nZW50U2NyYXRjaDI7CiAgICBsZXQgbm9ybWFsMiA9IG5vcm1hbFNjcmF0Y2g0OwogICAgaWYgKHZlcnRleEZvcm1hdC5ub3JtYWwgfHwgdmVydGV4Rm9ybWF0LnRhbmdlbnQgfHwgdmVydGV4Rm9ybWF0LmJpdGFuZ2VudCkgewogICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSA2KSB7CiAgICAgICAgY29uc3QgcCA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkocG9zaXRpb25zLCBpLCBwb3NpdGlvblNjcmF0Y2gyKTsKICAgICAgICBjb25zdCBwMSA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkocG9zaXRpb25zLCAoaSArIDYpICUgbGVuZ3RoLCB2MVNjcmF0Y2gpOwogICAgICAgIGlmIChyZWNvbXB1dGVOb3JtYWwpIHsKICAgICAgICAgIGNvbnN0IHAyID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShwb3NpdGlvbnMsIChpICsgMykgJSBsZW5ndGgsIHYyU2NyYXRjaCk7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QocDEsIHAsIHAxKTsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChwMiwgcCwgcDIpOwogICAgICAgICAgbm9ybWFsMiA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKHAyLCBwMSwgbm9ybWFsMiksIG5vcm1hbDIpOwogICAgICAgICAgcmVjb21wdXRlTm9ybWFsID0gZmFsc2U7CiAgICAgICAgfQogICAgICAgIGlmIChDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzRXBzaWxvbihwMSwgcCwgTWF0aF9kZWZhdWx0LkVQU0lMT04xMCkpIHsKICAgICAgICAgIHJlY29tcHV0ZU5vcm1hbCA9IHRydWU7CiAgICAgICAgfQogICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQudGFuZ2VudCB8fCB2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50KSB7CiAgICAgICAgICBiaXRhbmdlbnQgPSBlbGxpcHNvaWQuZ2VvZGV0aWNTdXJmYWNlTm9ybWFsKHAsIGJpdGFuZ2VudCk7CiAgICAgICAgICBpZiAodmVydGV4Rm9ybWF0LnRhbmdlbnQpIHsKICAgICAgICAgICAgdGFuZ2VudCA9IENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUoCiAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKGJpdGFuZ2VudCwgbm9ybWFsMiwgdGFuZ2VudCksCiAgICAgICAgICAgICAgdGFuZ2VudAogICAgICAgICAgICApOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAodmVydGV4Rm9ybWF0Lm5vcm1hbCkgewogICAgICAgICAgbm9ybWFsc1tub3JtYWxJbmRleCsrXSA9IG5vcm1hbDIueDsKICAgICAgICAgIG5vcm1hbHNbbm9ybWFsSW5kZXgrK10gPSBub3JtYWwyLnk7CiAgICAgICAgICBub3JtYWxzW25vcm1hbEluZGV4KytdID0gbm9ybWFsMi56OwogICAgICAgICAgbm9ybWFsc1tub3JtYWxJbmRleCsrXSA9IG5vcm1hbDIueDsKICAgICAgICAgIG5vcm1hbHNbbm9ybWFsSW5kZXgrK10gPSBub3JtYWwyLnk7CiAgICAgICAgICBub3JtYWxzW25vcm1hbEluZGV4KytdID0gbm9ybWFsMi56OwogICAgICAgIH0KICAgICAgICBpZiAodmVydGV4Rm9ybWF0LnRhbmdlbnQpIHsKICAgICAgICAgIHRhbmdlbnRzW3RhbmdlbnRJbmRleCsrXSA9IHRhbmdlbnQueDsKICAgICAgICAgIHRhbmdlbnRzW3RhbmdlbnRJbmRleCsrXSA9IHRhbmdlbnQueTsKICAgICAgICAgIHRhbmdlbnRzW3RhbmdlbnRJbmRleCsrXSA9IHRhbmdlbnQuejsKICAgICAgICAgIHRhbmdlbnRzW3RhbmdlbnRJbmRleCsrXSA9IHRhbmdlbnQueDsKICAgICAgICAgIHRhbmdlbnRzW3RhbmdlbnRJbmRleCsrXSA9IHRhbmdlbnQueTsKICAgICAgICAgIHRhbmdlbnRzW3RhbmdlbnRJbmRleCsrXSA9IHRhbmdlbnQuejsKICAgICAgICB9CiAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpIHsKICAgICAgICAgIGJpdGFuZ2VudHNbYml0YW5nZW50SW5kZXgrK10gPSBiaXRhbmdlbnQueDsKICAgICAgICAgIGJpdGFuZ2VudHNbYml0YW5nZW50SW5kZXgrK10gPSBiaXRhbmdlbnQueTsKICAgICAgICAgIGJpdGFuZ2VudHNbYml0YW5nZW50SW5kZXgrK10gPSBiaXRhbmdlbnQuejsKICAgICAgICAgIGJpdGFuZ2VudHNbYml0YW5nZW50SW5kZXgrK10gPSBiaXRhbmdlbnQueDsKICAgICAgICAgIGJpdGFuZ2VudHNbYml0YW5nZW50SW5kZXgrK10gPSBiaXRhbmdlbnQueTsKICAgICAgICAgIGJpdGFuZ2VudHNbYml0YW5nZW50SW5kZXgrK10gPSBiaXRhbmdlbnQuejsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBjcmVhdGVBdHRyaWJ1dGVzKHZlcnRleEZvcm1hdCwgewogICAgICBwb3NpdGlvbnMsCiAgICAgIG5vcm1hbHMsCiAgICAgIHRhbmdlbnRzLAogICAgICBiaXRhbmdlbnRzCiAgICB9KTsKICB9CiAgZnVuY3Rpb24gY29uc3RydWN0UmVjdGFuZ2xlKHJlY3RhbmdsZUdlb21ldHJ5LCBjb21wdXRlZE9wdGlvbnMpIHsKICAgIGNvbnN0IHZlcnRleEZvcm1hdCA9IHJlY3RhbmdsZUdlb21ldHJ5Ll92ZXJ0ZXhGb3JtYXQ7CiAgICBjb25zdCBlbGxpcHNvaWQgPSByZWN0YW5nbGVHZW9tZXRyeS5fZWxsaXBzb2lkOwogICAgY29uc3QgaGVpZ2h0ID0gY29tcHV0ZWRPcHRpb25zLmhlaWdodDsKICAgIGNvbnN0IHdpZHRoID0gY29tcHV0ZWRPcHRpb25zLndpZHRoOwogICAgY29uc3Qgbm9ydGhDYXAgPSBjb21wdXRlZE9wdGlvbnMubm9ydGhDYXA7CiAgICBjb25zdCBzb3V0aENhcCA9IGNvbXB1dGVkT3B0aW9ucy5zb3V0aENhcDsKICAgIGxldCByb3dTdGFydCA9IDA7CiAgICBsZXQgcm93RW5kID0gaGVpZ2h0OwogICAgbGV0IHJvd0hlaWdodCA9IGhlaWdodDsKICAgIGxldCBzaXplID0gMDsKICAgIGlmIChub3J0aENhcCkgewogICAgICByb3dTdGFydCA9IDE7CiAgICAgIHJvd0hlaWdodCAtPSAxOwogICAgICBzaXplICs9IDE7CiAgICB9CiAgICBpZiAoc291dGhDYXApIHsKICAgICAgcm93RW5kIC09IDE7CiAgICAgIHJvd0hlaWdodCAtPSAxOwogICAgICBzaXplICs9IDE7CiAgICB9CiAgICBzaXplICs9IHdpZHRoICogcm93SGVpZ2h0OwogICAgY29uc3QgcG9zaXRpb25zID0gdmVydGV4Rm9ybWF0LnBvc2l0aW9uID8gbmV3IEZsb2F0NjRBcnJheShzaXplICogMykgOiB2b2lkIDA7CiAgICBjb25zdCB0ZXh0dXJlQ29vcmRpbmF0ZXMgPSB2ZXJ0ZXhGb3JtYXQuc3QgPyBuZXcgRmxvYXQzMkFycmF5KHNpemUgKiAyKSA6IHZvaWQgMDsKICAgIGxldCBwb3NJbmRleCA9IDA7CiAgICBsZXQgc3RJbmRleCA9IDA7CiAgICBjb25zdCBwb3NpdGlvbiA9IHBvc2l0aW9uU2NyYXRjaDI7CiAgICBjb25zdCBzdCA9IHN0U2NyYXRjaDI7CiAgICBsZXQgbWluWCA9IE51bWJlci5NQVhfVkFMVUU7CiAgICBsZXQgbWluWSA9IE51bWJlci5NQVhfVkFMVUU7CiAgICBsZXQgbWF4WCA9IC1OdW1iZXIuTUFYX1ZBTFVFOwogICAgbGV0IG1heFkgPSAtTnVtYmVyLk1BWF9WQUxVRTsKICAgIGZvciAobGV0IHJvdyA9IHJvd1N0YXJ0OyByb3cgPCByb3dFbmQ7ICsrcm93KSB7CiAgICAgIGZvciAobGV0IGNvbCA9IDA7IGNvbCA8IHdpZHRoOyArK2NvbCkgewogICAgICAgIFJlY3RhbmdsZUdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmNvbXB1dGVQb3NpdGlvbigKICAgICAgICAgIGNvbXB1dGVkT3B0aW9ucywKICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgIHZlcnRleEZvcm1hdC5zdCwKICAgICAgICAgIHJvdywKICAgICAgICAgIGNvbCwKICAgICAgICAgIHBvc2l0aW9uLAogICAgICAgICAgc3QKICAgICAgICApOwogICAgICAgIHBvc2l0aW9uc1twb3NJbmRleCsrXSA9IHBvc2l0aW9uLng7CiAgICAgICAgcG9zaXRpb25zW3Bvc0luZGV4KytdID0gcG9zaXRpb24ueTsKICAgICAgICBwb3NpdGlvbnNbcG9zSW5kZXgrK10gPSBwb3NpdGlvbi56OwogICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQuc3QpIHsKICAgICAgICAgIHRleHR1cmVDb29yZGluYXRlc1tzdEluZGV4KytdID0gc3QueDsKICAgICAgICAgIHRleHR1cmVDb29yZGluYXRlc1tzdEluZGV4KytdID0gc3QueTsKICAgICAgICAgIG1pblggPSBNYXRoLm1pbihtaW5YLCBzdC54KTsKICAgICAgICAgIG1pblkgPSBNYXRoLm1pbihtaW5ZLCBzdC55KTsKICAgICAgICAgIG1heFggPSBNYXRoLm1heChtYXhYLCBzdC54KTsKICAgICAgICAgIG1heFkgPSBNYXRoLm1heChtYXhZLCBzdC55KTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIGlmIChub3J0aENhcCkgewogICAgICBSZWN0YW5nbGVHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5jb21wdXRlUG9zaXRpb24oCiAgICAgICAgY29tcHV0ZWRPcHRpb25zLAogICAgICAgIGVsbGlwc29pZCwKICAgICAgICB2ZXJ0ZXhGb3JtYXQuc3QsCiAgICAgICAgMCwKICAgICAgICAwLAogICAgICAgIHBvc2l0aW9uLAogICAgICAgIHN0CiAgICAgICk7CiAgICAgIHBvc2l0aW9uc1twb3NJbmRleCsrXSA9IHBvc2l0aW9uLng7CiAgICAgIHBvc2l0aW9uc1twb3NJbmRleCsrXSA9IHBvc2l0aW9uLnk7CiAgICAgIHBvc2l0aW9uc1twb3NJbmRleCsrXSA9IHBvc2l0aW9uLno7CiAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQuc3QpIHsKICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZXNbc3RJbmRleCsrXSA9IHN0Lng7CiAgICAgICAgdGV4dHVyZUNvb3JkaW5hdGVzW3N0SW5kZXgrK10gPSBzdC55OwogICAgICAgIG1pblggPSBzdC54OwogICAgICAgIG1pblkgPSBzdC55OwogICAgICAgIG1heFggPSBzdC54OwogICAgICAgIG1heFkgPSBzdC55OwogICAgICB9CiAgICB9CiAgICBpZiAoc291dGhDYXApIHsKICAgICAgUmVjdGFuZ2xlR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuY29tcHV0ZVBvc2l0aW9uKAogICAgICAgIGNvbXB1dGVkT3B0aW9ucywKICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgdmVydGV4Rm9ybWF0LnN0LAogICAgICAgIGhlaWdodCAtIDEsCiAgICAgICAgMCwKICAgICAgICBwb3NpdGlvbiwKICAgICAgICBzdAogICAgICApOwogICAgICBwb3NpdGlvbnNbcG9zSW5kZXgrK10gPSBwb3NpdGlvbi54OwogICAgICBwb3NpdGlvbnNbcG9zSW5kZXgrK10gPSBwb3NpdGlvbi55OwogICAgICBwb3NpdGlvbnNbcG9zSW5kZXhdID0gcG9zaXRpb24uejsKICAgICAgaWYgKHZlcnRleEZvcm1hdC5zdCkgewogICAgICAgIHRleHR1cmVDb29yZGluYXRlc1tzdEluZGV4KytdID0gc3QueDsKICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZXNbc3RJbmRleF0gPSBzdC55OwogICAgICAgIG1pblggPSBNYXRoLm1pbihtaW5YLCBzdC54KTsKICAgICAgICBtaW5ZID0gTWF0aC5taW4obWluWSwgc3QueSk7CiAgICAgICAgbWF4WCA9IE1hdGgubWF4KG1heFgsIHN0LngpOwogICAgICAgIG1heFkgPSBNYXRoLm1heChtYXhZLCBzdC55KTsKICAgICAgfQogICAgfQogICAgaWYgKHZlcnRleEZvcm1hdC5zdCAmJiAobWluWCA8IDAgfHwgbWluWSA8IDAgfHwgbWF4WCA+IDEgfHwgbWF4WSA+IDEpKSB7CiAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgdGV4dHVyZUNvb3JkaW5hdGVzLmxlbmd0aDsgayArPSAyKSB7CiAgICAgICAgdGV4dHVyZUNvb3JkaW5hdGVzW2tdID0gKHRleHR1cmVDb29yZGluYXRlc1trXSAtIG1pblgpIC8gKG1heFggLSBtaW5YKTsKICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZXNbayArIDFdID0gKHRleHR1cmVDb29yZGluYXRlc1trICsgMV0gLSBtaW5ZKSAvIChtYXhZIC0gbWluWSk7CiAgICAgIH0KICAgIH0KICAgIGNvbnN0IGdlbyA9IGNhbGN1bGF0ZUF0dHJpYnV0ZXMoCiAgICAgIHBvc2l0aW9ucywKICAgICAgdmVydGV4Rm9ybWF0LAogICAgICBlbGxpcHNvaWQsCiAgICAgIGNvbXB1dGVkT3B0aW9ucy50YW5nZW50Um90YXRpb25NYXRyaXgKICAgICk7CiAgICBsZXQgaW5kaWNlc1NpemUgPSA2ICogKHdpZHRoIC0gMSkgKiAocm93SGVpZ2h0IC0gMSk7CiAgICBpZiAobm9ydGhDYXApIHsKICAgICAgaW5kaWNlc1NpemUgKz0gMyAqICh3aWR0aCAtIDEpOwogICAgfQogICAgaWYgKHNvdXRoQ2FwKSB7CiAgICAgIGluZGljZXNTaXplICs9IDMgKiAod2lkdGggLSAxKTsKICAgIH0KICAgIGNvbnN0IGluZGljZXMgPSBJbmRleERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheShzaXplLCBpbmRpY2VzU2l6ZSk7CiAgICBsZXQgaW5kZXggPSAwOwogICAgbGV0IGluZGljZXNJbmRleCA9IDA7CiAgICBsZXQgaTsKICAgIGZvciAoaSA9IDA7IGkgPCByb3dIZWlnaHQgLSAxOyArK2kpIHsKICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB3aWR0aCAtIDE7ICsraikgewogICAgICAgIGNvbnN0IHVwcGVyTGVmdCA9IGluZGV4OwogICAgICAgIGNvbnN0IGxvd2VyTGVmdCA9IHVwcGVyTGVmdCArIHdpZHRoOwogICAgICAgIGNvbnN0IGxvd2VyUmlnaHQgPSBsb3dlckxlZnQgKyAxOwogICAgICAgIGNvbnN0IHVwcGVyUmlnaHQgPSB1cHBlckxlZnQgKyAxOwogICAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gdXBwZXJMZWZ0OwogICAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gbG93ZXJMZWZ0OwogICAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gdXBwZXJSaWdodDsKICAgICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IHVwcGVyUmlnaHQ7CiAgICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBsb3dlckxlZnQ7CiAgICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBsb3dlclJpZ2h0OwogICAgICAgICsraW5kZXg7CiAgICAgIH0KICAgICAgKytpbmRleDsKICAgIH0KICAgIGlmIChub3J0aENhcCB8fCBzb3V0aENhcCkgewogICAgICBsZXQgbm9ydGhJbmRleCA9IHNpemUgLSAxOwogICAgICBjb25zdCBzb3V0aEluZGV4ID0gc2l6ZSAtIDE7CiAgICAgIGlmIChub3J0aENhcCAmJiBzb3V0aENhcCkgewogICAgICAgIG5vcnRoSW5kZXggPSBzaXplIC0gMjsKICAgICAgfQogICAgICBsZXQgcDE7CiAgICAgIGxldCBwMjsKICAgICAgaW5kZXggPSAwOwogICAgICBpZiAobm9ydGhDYXApIHsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgd2lkdGggLSAxOyBpKyspIHsKICAgICAgICAgIHAxID0gaW5kZXg7CiAgICAgICAgICBwMiA9IHAxICsgMTsKICAgICAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gbm9ydGhJbmRleDsKICAgICAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gcDE7CiAgICAgICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IHAyOwogICAgICAgICAgKytpbmRleDsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKHNvdXRoQ2FwKSB7CiAgICAgICAgaW5kZXggPSAocm93SGVpZ2h0IC0gMSkgKiB3aWR0aDsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgd2lkdGggLSAxOyBpKyspIHsKICAgICAgICAgIHAxID0gaW5kZXg7CiAgICAgICAgICBwMiA9IHAxICsgMTsKICAgICAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gcDE7CiAgICAgICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IHNvdXRoSW5kZXg7CiAgICAgICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IHAyOwogICAgICAgICAgKytpbmRleDsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIGdlby5pbmRpY2VzID0gaW5kaWNlczsKICAgIGlmICh2ZXJ0ZXhGb3JtYXQuc3QpIHsKICAgICAgZ2VvLmF0dHJpYnV0ZXMuc3QgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMiwKICAgICAgICB2YWx1ZXM6IHRleHR1cmVDb29yZGluYXRlcwogICAgICB9KTsKICAgIH0KICAgIHJldHVybiBnZW87CiAgfQogIGZ1bmN0aW9uIGFkZFdhbGxQb3NpdGlvbnMyKHdhbGxQb3NpdGlvbnMsIHBvc0luZGV4LCBpLCB0b3BQb3NpdGlvbnMsIGJvdHRvbVBvc2l0aW9ucykgewogICAgd2FsbFBvc2l0aW9uc1twb3NJbmRleCsrXSA9IHRvcFBvc2l0aW9uc1tpXTsKICAgIHdhbGxQb3NpdGlvbnNbcG9zSW5kZXgrK10gPSB0b3BQb3NpdGlvbnNbaSArIDFdOwogICAgd2FsbFBvc2l0aW9uc1twb3NJbmRleCsrXSA9IHRvcFBvc2l0aW9uc1tpICsgMl07CiAgICB3YWxsUG9zaXRpb25zW3Bvc0luZGV4KytdID0gYm90dG9tUG9zaXRpb25zW2ldOwogICAgd2FsbFBvc2l0aW9uc1twb3NJbmRleCsrXSA9IGJvdHRvbVBvc2l0aW9uc1tpICsgMV07CiAgICB3YWxsUG9zaXRpb25zW3Bvc0luZGV4XSA9IGJvdHRvbVBvc2l0aW9uc1tpICsgMl07CiAgICByZXR1cm4gd2FsbFBvc2l0aW9uczsKICB9CiAgZnVuY3Rpb24gYWRkV2FsbFRleHR1cmVDb29yZGluYXRlcyh3YWxsVGV4dHVyZXMsIHN0SW5kZXgsIGksIHN0KSB7CiAgICB3YWxsVGV4dHVyZXNbc3RJbmRleCsrXSA9IHN0W2ldOwogICAgd2FsbFRleHR1cmVzW3N0SW5kZXgrK10gPSBzdFtpICsgMV07CiAgICB3YWxsVGV4dHVyZXNbc3RJbmRleCsrXSA9IHN0W2ldOwogICAgd2FsbFRleHR1cmVzW3N0SW5kZXhdID0gc3RbaSArIDFdOwogICAgcmV0dXJuIHdhbGxUZXh0dXJlczsKICB9CiAgZnVuY3Rpb24gY29uc3RydWN0RXh0cnVkZWRSZWN0YW5nbGUocmVjdGFuZ2xlR2VvbWV0cnksIGNvbXB1dGVkT3B0aW9ucykgewogICAgY29uc3Qgc2hhZG93Vm9sdW1lID0gcmVjdGFuZ2xlR2VvbWV0cnkuX3NoYWRvd1ZvbHVtZTsKICAgIGNvbnN0IG9mZnNldEF0dHJpYnV0ZVZhbHVlID0gcmVjdGFuZ2xlR2VvbWV0cnkuX29mZnNldEF0dHJpYnV0ZTsKICAgIGNvbnN0IHZlcnRleEZvcm1hdCA9IHJlY3RhbmdsZUdlb21ldHJ5Ll92ZXJ0ZXhGb3JtYXQ7CiAgICBjb25zdCBtaW5IZWlnaHQgPSByZWN0YW5nbGVHZW9tZXRyeS5fZXh0cnVkZWRIZWlnaHQ7CiAgICBjb25zdCBtYXhIZWlnaHQgPSByZWN0YW5nbGVHZW9tZXRyeS5fc3VyZmFjZUhlaWdodDsKICAgIGNvbnN0IGVsbGlwc29pZCA9IHJlY3RhbmdsZUdlb21ldHJ5Ll9lbGxpcHNvaWQ7CiAgICBjb25zdCBoZWlnaHQgPSBjb21wdXRlZE9wdGlvbnMuaGVpZ2h0OwogICAgY29uc3Qgd2lkdGggPSBjb21wdXRlZE9wdGlvbnMud2lkdGg7CiAgICBsZXQgaTsKICAgIGlmIChzaGFkb3dWb2x1bWUpIHsKICAgICAgY29uc3QgbmV3VmVydGV4Rm9ybWF0ID0gVmVydGV4Rm9ybWF0X2RlZmF1bHQuY2xvbmUoCiAgICAgICAgdmVydGV4Rm9ybWF0LAogICAgICAgIHNjcmF0Y2hWZXJ0ZXhGb3JtYXQxMgogICAgICApOwogICAgICBuZXdWZXJ0ZXhGb3JtYXQubm9ybWFsID0gdHJ1ZTsKICAgICAgcmVjdGFuZ2xlR2VvbWV0cnkuX3ZlcnRleEZvcm1hdCA9IG5ld1ZlcnRleEZvcm1hdDsKICAgIH0KICAgIGNvbnN0IHRvcEJvdHRvbUdlbyA9IGNvbnN0cnVjdFJlY3RhbmdsZShyZWN0YW5nbGVHZW9tZXRyeSwgY29tcHV0ZWRPcHRpb25zKTsKICAgIGlmIChzaGFkb3dWb2x1bWUpIHsKICAgICAgcmVjdGFuZ2xlR2VvbWV0cnkuX3ZlcnRleEZvcm1hdCA9IHZlcnRleEZvcm1hdDsKICAgIH0KICAgIGxldCB0b3BQb3NpdGlvbnMgPSBQb2x5Z29uUGlwZWxpbmVfZGVmYXVsdC5zY2FsZVRvR2VvZGV0aWNIZWlnaHQoCiAgICAgIHRvcEJvdHRvbUdlby5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcywKICAgICAgbWF4SGVpZ2h0LAogICAgICBlbGxpcHNvaWQsCiAgICAgIGZhbHNlCiAgICApOwogICAgdG9wUG9zaXRpb25zID0gbmV3IEZsb2F0NjRBcnJheSh0b3BQb3NpdGlvbnMpOwogICAgbGV0IGxlbmd0aCA9IHRvcFBvc2l0aW9ucy5sZW5ndGg7CiAgICBjb25zdCBuZXdMZW5ndGggPSBsZW5ndGggKiAyOwogICAgY29uc3QgcG9zaXRpb25zID0gbmV3IEZsb2F0NjRBcnJheShuZXdMZW5ndGgpOwogICAgcG9zaXRpb25zLnNldCh0b3BQb3NpdGlvbnMpOwogICAgY29uc3QgYm90dG9tUG9zaXRpb25zID0gUG9seWdvblBpcGVsaW5lX2RlZmF1bHQuc2NhbGVUb0dlb2RldGljSGVpZ2h0KAogICAgICB0b3BCb3R0b21HZW8uYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXMsCiAgICAgIG1pbkhlaWdodCwKICAgICAgZWxsaXBzb2lkCiAgICApOwogICAgcG9zaXRpb25zLnNldChib3R0b21Qb3NpdGlvbnMsIGxlbmd0aCk7CiAgICB0b3BCb3R0b21HZW8uYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXMgPSBwb3NpdGlvbnM7CiAgICBjb25zdCBub3JtYWxzID0gdmVydGV4Rm9ybWF0Lm5vcm1hbCA/IG5ldyBGbG9hdDMyQXJyYXkobmV3TGVuZ3RoKSA6IHZvaWQgMDsKICAgIGNvbnN0IHRhbmdlbnRzID0gdmVydGV4Rm9ybWF0LnRhbmdlbnQgPyBuZXcgRmxvYXQzMkFycmF5KG5ld0xlbmd0aCkgOiB2b2lkIDA7CiAgICBjb25zdCBiaXRhbmdlbnRzID0gdmVydGV4Rm9ybWF0LmJpdGFuZ2VudCA/IG5ldyBGbG9hdDMyQXJyYXkobmV3TGVuZ3RoKSA6IHZvaWQgMDsKICAgIGNvbnN0IHRleHR1cmVzID0gdmVydGV4Rm9ybWF0LnN0ID8gbmV3IEZsb2F0MzJBcnJheShuZXdMZW5ndGggLyAzICogMikgOiB2b2lkIDA7CiAgICBsZXQgdG9wU3Q7CiAgICBsZXQgdG9wTm9ybWFsczsKICAgIGlmICh2ZXJ0ZXhGb3JtYXQubm9ybWFsKSB7CiAgICAgIHRvcE5vcm1hbHMgPSB0b3BCb3R0b21HZW8uYXR0cmlidXRlcy5ub3JtYWwudmFsdWVzOwogICAgICBub3JtYWxzLnNldCh0b3BOb3JtYWxzKTsKICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgdG9wTm9ybWFsc1tpXSA9IC10b3BOb3JtYWxzW2ldOwogICAgICB9CiAgICAgIG5vcm1hbHMuc2V0KHRvcE5vcm1hbHMsIGxlbmd0aCk7CiAgICAgIHRvcEJvdHRvbUdlby5hdHRyaWJ1dGVzLm5vcm1hbC52YWx1ZXMgPSBub3JtYWxzOwogICAgfQogICAgaWYgKHNoYWRvd1ZvbHVtZSkgewogICAgICB0b3BOb3JtYWxzID0gdG9wQm90dG9tR2VvLmF0dHJpYnV0ZXMubm9ybWFsLnZhbHVlczsKICAgICAgaWYgKCF2ZXJ0ZXhGb3JtYXQubm9ybWFsKSB7CiAgICAgICAgdG9wQm90dG9tR2VvLmF0dHJpYnV0ZXMubm9ybWFsID0gdm9pZCAwOwogICAgICB9CiAgICAgIGNvbnN0IGV4dHJ1ZGVOb3JtYWxzID0gbmV3IEZsb2F0MzJBcnJheShuZXdMZW5ndGgpOwogICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICB0b3BOb3JtYWxzW2ldID0gLXRvcE5vcm1hbHNbaV07CiAgICAgIH0KICAgICAgZXh0cnVkZU5vcm1hbHMuc2V0KHRvcE5vcm1hbHMsIGxlbmd0aCk7CiAgICAgIHRvcEJvdHRvbUdlby5hdHRyaWJ1dGVzLmV4dHJ1ZGVEaXJlY3Rpb24gPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICB2YWx1ZXM6IGV4dHJ1ZGVOb3JtYWxzCiAgICAgIH0pOwogICAgfQogICAgbGV0IG9mZnNldFZhbHVlOwogICAgY29uc3QgaGFzT2Zmc2V0cyA9IGRlZmluZWRfZGVmYXVsdChvZmZzZXRBdHRyaWJ1dGVWYWx1ZSk7CiAgICBpZiAoaGFzT2Zmc2V0cykgewogICAgICBjb25zdCBzaXplID0gbGVuZ3RoIC8gMyAqIDI7CiAgICAgIGxldCBvZmZzZXRBdHRyaWJ1dGUgPSBuZXcgVWludDhBcnJheShzaXplKTsKICAgICAgaWYgKG9mZnNldEF0dHJpYnV0ZVZhbHVlID09PSBHZW9tZXRyeU9mZnNldEF0dHJpYnV0ZV9kZWZhdWx0LlRPUCkgewogICAgICAgIG9mZnNldEF0dHJpYnV0ZSA9IG9mZnNldEF0dHJpYnV0ZS5maWxsKDEsIDAsIHNpemUgLyAyKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBvZmZzZXRWYWx1ZSA9IG9mZnNldEF0dHJpYnV0ZVZhbHVlID09PSBHZW9tZXRyeU9mZnNldEF0dHJpYnV0ZV9kZWZhdWx0Lk5PTkUgPyAwIDogMTsKICAgICAgICBvZmZzZXRBdHRyaWJ1dGUgPSBvZmZzZXRBdHRyaWJ1dGUuZmlsbChvZmZzZXRWYWx1ZSk7CiAgICAgIH0KICAgICAgdG9wQm90dG9tR2VvLmF0dHJpYnV0ZXMuYXBwbHlPZmZzZXQgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuVU5TSUdORURfQllURSwKICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAxLAogICAgICAgIHZhbHVlczogb2Zmc2V0QXR0cmlidXRlCiAgICAgIH0pOwogICAgfQogICAgaWYgKHZlcnRleEZvcm1hdC50YW5nZW50KSB7CiAgICAgIGNvbnN0IHRvcFRhbmdlbnRzID0gdG9wQm90dG9tR2VvLmF0dHJpYnV0ZXMudGFuZ2VudC52YWx1ZXM7CiAgICAgIHRhbmdlbnRzLnNldCh0b3BUYW5nZW50cyk7CiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgIHRvcFRhbmdlbnRzW2ldID0gLXRvcFRhbmdlbnRzW2ldOwogICAgICB9CiAgICAgIHRhbmdlbnRzLnNldCh0b3BUYW5nZW50cywgbGVuZ3RoKTsKICAgICAgdG9wQm90dG9tR2VvLmF0dHJpYnV0ZXMudGFuZ2VudC52YWx1ZXMgPSB0YW5nZW50czsKICAgIH0KICAgIGlmICh2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50KSB7CiAgICAgIGNvbnN0IHRvcEJpdGFuZ2VudHMgPSB0b3BCb3R0b21HZW8uYXR0cmlidXRlcy5iaXRhbmdlbnQudmFsdWVzOwogICAgICBiaXRhbmdlbnRzLnNldCh0b3BCaXRhbmdlbnRzKTsKICAgICAgYml0YW5nZW50cy5zZXQodG9wQml0YW5nZW50cywgbGVuZ3RoKTsKICAgICAgdG9wQm90dG9tR2VvLmF0dHJpYnV0ZXMuYml0YW5nZW50LnZhbHVlcyA9IGJpdGFuZ2VudHM7CiAgICB9CiAgICBpZiAodmVydGV4Rm9ybWF0LnN0KSB7CiAgICAgIHRvcFN0ID0gdG9wQm90dG9tR2VvLmF0dHJpYnV0ZXMuc3QudmFsdWVzOwogICAgICB0ZXh0dXJlcy5zZXQodG9wU3QpOwogICAgICB0ZXh0dXJlcy5zZXQodG9wU3QsIGxlbmd0aCAvIDMgKiAyKTsKICAgICAgdG9wQm90dG9tR2VvLmF0dHJpYnV0ZXMuc3QudmFsdWVzID0gdGV4dHVyZXM7CiAgICB9CiAgICBjb25zdCBpbmRpY2VzID0gdG9wQm90dG9tR2VvLmluZGljZXM7CiAgICBjb25zdCBpbmRpY2VzTGVuZ3RoID0gaW5kaWNlcy5sZW5ndGg7CiAgICBjb25zdCBwb3NMZW5ndGggPSBsZW5ndGggLyAzOwogICAgY29uc3QgbmV3SW5kaWNlcyA9IEluZGV4RGF0YXR5cGVfZGVmYXVsdC5jcmVhdGVUeXBlZEFycmF5KAogICAgICBuZXdMZW5ndGggLyAzLAogICAgICBpbmRpY2VzTGVuZ3RoICogMgogICAgKTsKICAgIG5ld0luZGljZXMuc2V0KGluZGljZXMpOwogICAgZm9yIChpID0gMDsgaSA8IGluZGljZXNMZW5ndGg7IGkgKz0gMykgewogICAgICBuZXdJbmRpY2VzW2kgKyBpbmRpY2VzTGVuZ3RoXSA9IGluZGljZXNbaSArIDJdICsgcG9zTGVuZ3RoOwogICAgICBuZXdJbmRpY2VzW2kgKyAxICsgaW5kaWNlc0xlbmd0aF0gPSBpbmRpY2VzW2kgKyAxXSArIHBvc0xlbmd0aDsKICAgICAgbmV3SW5kaWNlc1tpICsgMiArIGluZGljZXNMZW5ndGhdID0gaW5kaWNlc1tpXSArIHBvc0xlbmd0aDsKICAgIH0KICAgIHRvcEJvdHRvbUdlby5pbmRpY2VzID0gbmV3SW5kaWNlczsKICAgIGNvbnN0IG5vcnRoQ2FwID0gY29tcHV0ZWRPcHRpb25zLm5vcnRoQ2FwOwogICAgY29uc3Qgc291dGhDYXAgPSBjb21wdXRlZE9wdGlvbnMuc291dGhDYXA7CiAgICBsZXQgcm93SGVpZ2h0ID0gaGVpZ2h0OwogICAgbGV0IHdpZHRoTXVsdGlwbGllciA9IDI7CiAgICBsZXQgcGVyaW1ldGVyUG9zaXRpb25zID0gMDsKICAgIGxldCBjb3JuZXJzID0gNDsKICAgIGxldCBkdXBsaWF0ZUNvcm5lcnMgPSA0OwogICAgaWYgKG5vcnRoQ2FwKSB7CiAgICAgIHdpZHRoTXVsdGlwbGllciAtPSAxOwogICAgICByb3dIZWlnaHQgLT0gMTsKICAgICAgcGVyaW1ldGVyUG9zaXRpb25zICs9IDE7CiAgICAgIGNvcm5lcnMgLT0gMjsKICAgICAgZHVwbGlhdGVDb3JuZXJzIC09IDE7CiAgICB9CiAgICBpZiAoc291dGhDYXApIHsKICAgICAgd2lkdGhNdWx0aXBsaWVyIC09IDE7CiAgICAgIHJvd0hlaWdodCAtPSAxOwogICAgICBwZXJpbWV0ZXJQb3NpdGlvbnMgKz0gMTsKICAgICAgY29ybmVycyAtPSAyOwogICAgICBkdXBsaWF0ZUNvcm5lcnMgLT0gMTsKICAgIH0KICAgIHBlcmltZXRlclBvc2l0aW9ucyArPSB3aWR0aE11bHRpcGxpZXIgKiB3aWR0aCArIDIgKiByb3dIZWlnaHQgLSBjb3JuZXJzOwogICAgY29uc3Qgd2FsbENvdW50ID0gKHBlcmltZXRlclBvc2l0aW9ucyArIGR1cGxpYXRlQ29ybmVycykgKiAyOwogICAgbGV0IHdhbGxQb3NpdGlvbnMgPSBuZXcgRmxvYXQ2NEFycmF5KHdhbGxDb3VudCAqIDMpOwogICAgY29uc3Qgd2FsbEV4dHJ1ZGVOb3JtYWxzID0gc2hhZG93Vm9sdW1lID8gbmV3IEZsb2F0MzJBcnJheSh3YWxsQ291bnQgKiAzKSA6IHZvaWQgMDsKICAgIGxldCB3YWxsT2Zmc2V0QXR0cmlidXRlID0gaGFzT2Zmc2V0cyA/IG5ldyBVaW50OEFycmF5KHdhbGxDb3VudCkgOiB2b2lkIDA7CiAgICBsZXQgd2FsbFRleHR1cmVzID0gdmVydGV4Rm9ybWF0LnN0ID8gbmV3IEZsb2F0MzJBcnJheSh3YWxsQ291bnQgKiAyKSA6IHZvaWQgMDsKICAgIGNvbnN0IGNvbXB1dGVUb3BPZmZzZXRzID0gb2Zmc2V0QXR0cmlidXRlVmFsdWUgPT09IEdlb21ldHJ5T2Zmc2V0QXR0cmlidXRlX2RlZmF1bHQuVE9QOwogICAgaWYgKGhhc09mZnNldHMgJiYgIWNvbXB1dGVUb3BPZmZzZXRzKSB7CiAgICAgIG9mZnNldFZhbHVlID0gb2Zmc2V0QXR0cmlidXRlVmFsdWUgPT09IEdlb21ldHJ5T2Zmc2V0QXR0cmlidXRlX2RlZmF1bHQuQUxMID8gMSA6IDA7CiAgICAgIHdhbGxPZmZzZXRBdHRyaWJ1dGUgPSB3YWxsT2Zmc2V0QXR0cmlidXRlLmZpbGwob2Zmc2V0VmFsdWUpOwogICAgfQogICAgbGV0IHBvc0luZGV4ID0gMDsKICAgIGxldCBzdEluZGV4ID0gMDsKICAgIGxldCBleHRydWRlTm9ybWFsSW5kZXggPSAwOwogICAgbGV0IHdhbGxPZmZzZXRJbmRleCA9IDA7CiAgICBjb25zdCBhcmVhID0gd2lkdGggKiByb3dIZWlnaHQ7CiAgICBsZXQgdGhyZWVJOwogICAgZm9yIChpID0gMDsgaSA8IGFyZWE7IGkgKz0gd2lkdGgpIHsKICAgICAgdGhyZWVJID0gaSAqIDM7CiAgICAgIHdhbGxQb3NpdGlvbnMgPSBhZGRXYWxsUG9zaXRpb25zMigKICAgICAgICB3YWxsUG9zaXRpb25zLAogICAgICAgIHBvc0luZGV4LAogICAgICAgIHRocmVlSSwKICAgICAgICB0b3BQb3NpdGlvbnMsCiAgICAgICAgYm90dG9tUG9zaXRpb25zCiAgICAgICk7CiAgICAgIHBvc0luZGV4ICs9IDY7CiAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQuc3QpIHsKICAgICAgICB3YWxsVGV4dHVyZXMgPSBhZGRXYWxsVGV4dHVyZUNvb3JkaW5hdGVzKAogICAgICAgICAgd2FsbFRleHR1cmVzLAogICAgICAgICAgc3RJbmRleCwKICAgICAgICAgIGkgKiAyLAogICAgICAgICAgdG9wU3QKICAgICAgICApOwogICAgICAgIHN0SW5kZXggKz0gNDsKICAgICAgfQogICAgICBpZiAoc2hhZG93Vm9sdW1lKSB7CiAgICAgICAgZXh0cnVkZU5vcm1hbEluZGV4ICs9IDM7CiAgICAgICAgd2FsbEV4dHJ1ZGVOb3JtYWxzW2V4dHJ1ZGVOb3JtYWxJbmRleCsrXSA9IHRvcE5vcm1hbHNbdGhyZWVJXTsKICAgICAgICB3YWxsRXh0cnVkZU5vcm1hbHNbZXh0cnVkZU5vcm1hbEluZGV4KytdID0gdG9wTm9ybWFsc1t0aHJlZUkgKyAxXTsKICAgICAgICB3YWxsRXh0cnVkZU5vcm1hbHNbZXh0cnVkZU5vcm1hbEluZGV4KytdID0gdG9wTm9ybWFsc1t0aHJlZUkgKyAyXTsKICAgICAgfQogICAgICBpZiAoY29tcHV0ZVRvcE9mZnNldHMpIHsKICAgICAgICB3YWxsT2Zmc2V0QXR0cmlidXRlW3dhbGxPZmZzZXRJbmRleCsrXSA9IDE7CiAgICAgICAgd2FsbE9mZnNldEluZGV4ICs9IDE7CiAgICAgIH0KICAgIH0KICAgIGlmICghc291dGhDYXApIHsKICAgICAgZm9yIChpID0gYXJlYSAtIHdpZHRoOyBpIDwgYXJlYTsgaSsrKSB7CiAgICAgICAgdGhyZWVJID0gaSAqIDM7CiAgICAgICAgd2FsbFBvc2l0aW9ucyA9IGFkZFdhbGxQb3NpdGlvbnMyKAogICAgICAgICAgd2FsbFBvc2l0aW9ucywKICAgICAgICAgIHBvc0luZGV4LAogICAgICAgICAgdGhyZWVJLAogICAgICAgICAgdG9wUG9zaXRpb25zLAogICAgICAgICAgYm90dG9tUG9zaXRpb25zCiAgICAgICAgKTsKICAgICAgICBwb3NJbmRleCArPSA2OwogICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQuc3QpIHsKICAgICAgICAgIHdhbGxUZXh0dXJlcyA9IGFkZFdhbGxUZXh0dXJlQ29vcmRpbmF0ZXMoCiAgICAgICAgICAgIHdhbGxUZXh0dXJlcywKICAgICAgICAgICAgc3RJbmRleCwKICAgICAgICAgICAgaSAqIDIsCiAgICAgICAgICAgIHRvcFN0CiAgICAgICAgICApOwogICAgICAgICAgc3RJbmRleCArPSA0OwogICAgICAgIH0KICAgICAgICBpZiAoc2hhZG93Vm9sdW1lKSB7CiAgICAgICAgICBleHRydWRlTm9ybWFsSW5kZXggKz0gMzsKICAgICAgICAgIHdhbGxFeHRydWRlTm9ybWFsc1tleHRydWRlTm9ybWFsSW5kZXgrK10gPSB0b3BOb3JtYWxzW3RocmVlSV07CiAgICAgICAgICB3YWxsRXh0cnVkZU5vcm1hbHNbZXh0cnVkZU5vcm1hbEluZGV4KytdID0gdG9wTm9ybWFsc1t0aHJlZUkgKyAxXTsKICAgICAgICAgIHdhbGxFeHRydWRlTm9ybWFsc1tleHRydWRlTm9ybWFsSW5kZXgrK10gPSB0b3BOb3JtYWxzW3RocmVlSSArIDJdOwogICAgICAgIH0KICAgICAgICBpZiAoY29tcHV0ZVRvcE9mZnNldHMpIHsKICAgICAgICAgIHdhbGxPZmZzZXRBdHRyaWJ1dGVbd2FsbE9mZnNldEluZGV4KytdID0gMTsKICAgICAgICAgIHdhbGxPZmZzZXRJbmRleCArPSAxOwogICAgICAgIH0KICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgY29uc3Qgc291dGhJbmRleCA9IG5vcnRoQ2FwID8gYXJlYSArIDEgOiBhcmVhOwogICAgICB0aHJlZUkgPSBzb3V0aEluZGV4ICogMzsKICAgICAgZm9yIChpID0gMDsgaSA8IDI7IGkrKykgewogICAgICAgIHdhbGxQb3NpdGlvbnMgPSBhZGRXYWxsUG9zaXRpb25zMigKICAgICAgICAgIHdhbGxQb3NpdGlvbnMsCiAgICAgICAgICBwb3NJbmRleCwKICAgICAgICAgIHRocmVlSSwKICAgICAgICAgIHRvcFBvc2l0aW9ucywKICAgICAgICAgIGJvdHRvbVBvc2l0aW9ucwogICAgICAgICk7CiAgICAgICAgcG9zSW5kZXggKz0gNjsKICAgICAgICBpZiAodmVydGV4Rm9ybWF0LnN0KSB7CiAgICAgICAgICB3YWxsVGV4dHVyZXMgPSBhZGRXYWxsVGV4dHVyZUNvb3JkaW5hdGVzKAogICAgICAgICAgICB3YWxsVGV4dHVyZXMsCiAgICAgICAgICAgIHN0SW5kZXgsCiAgICAgICAgICAgIHNvdXRoSW5kZXggKiAyLAogICAgICAgICAgICB0b3BTdAogICAgICAgICAgKTsKICAgICAgICAgIHN0SW5kZXggKz0gNDsKICAgICAgICB9CiAgICAgICAgaWYgKHNoYWRvd1ZvbHVtZSkgewogICAgICAgICAgZXh0cnVkZU5vcm1hbEluZGV4ICs9IDM7CiAgICAgICAgICB3YWxsRXh0cnVkZU5vcm1hbHNbZXh0cnVkZU5vcm1hbEluZGV4KytdID0gdG9wTm9ybWFsc1t0aHJlZUldOwogICAgICAgICAgd2FsbEV4dHJ1ZGVOb3JtYWxzW2V4dHJ1ZGVOb3JtYWxJbmRleCsrXSA9IHRvcE5vcm1hbHNbdGhyZWVJICsgMV07CiAgICAgICAgICB3YWxsRXh0cnVkZU5vcm1hbHNbZXh0cnVkZU5vcm1hbEluZGV4KytdID0gdG9wTm9ybWFsc1t0aHJlZUkgKyAyXTsKICAgICAgICB9CiAgICAgICAgaWYgKGNvbXB1dGVUb3BPZmZzZXRzKSB7CiAgICAgICAgICB3YWxsT2Zmc2V0QXR0cmlidXRlW3dhbGxPZmZzZXRJbmRleCsrXSA9IDE7CiAgICAgICAgICB3YWxsT2Zmc2V0SW5kZXggKz0gMTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIGZvciAoaSA9IGFyZWEgLSAxOyBpID4gMDsgaSAtPSB3aWR0aCkgewogICAgICB0aHJlZUkgPSBpICogMzsKICAgICAgd2FsbFBvc2l0aW9ucyA9IGFkZFdhbGxQb3NpdGlvbnMyKAogICAgICAgIHdhbGxQb3NpdGlvbnMsCiAgICAgICAgcG9zSW5kZXgsCiAgICAgICAgdGhyZWVJLAogICAgICAgIHRvcFBvc2l0aW9ucywKICAgICAgICBib3R0b21Qb3NpdGlvbnMKICAgICAgKTsKICAgICAgcG9zSW5kZXggKz0gNjsKICAgICAgaWYgKHZlcnRleEZvcm1hdC5zdCkgewogICAgICAgIHdhbGxUZXh0dXJlcyA9IGFkZFdhbGxUZXh0dXJlQ29vcmRpbmF0ZXMoCiAgICAgICAgICB3YWxsVGV4dHVyZXMsCiAgICAgICAgICBzdEluZGV4LAogICAgICAgICAgaSAqIDIsCiAgICAgICAgICB0b3BTdAogICAgICAgICk7CiAgICAgICAgc3RJbmRleCArPSA0OwogICAgICB9CiAgICAgIGlmIChzaGFkb3dWb2x1bWUpIHsKICAgICAgICBleHRydWRlTm9ybWFsSW5kZXggKz0gMzsKICAgICAgICB3YWxsRXh0cnVkZU5vcm1hbHNbZXh0cnVkZU5vcm1hbEluZGV4KytdID0gdG9wTm9ybWFsc1t0aHJlZUldOwogICAgICAgIHdhbGxFeHRydWRlTm9ybWFsc1tleHRydWRlTm9ybWFsSW5kZXgrK10gPSB0b3BOb3JtYWxzW3RocmVlSSArIDFdOwogICAgICAgIHdhbGxFeHRydWRlTm9ybWFsc1tleHRydWRlTm9ybWFsSW5kZXgrK10gPSB0b3BOb3JtYWxzW3RocmVlSSArIDJdOwogICAgICB9CiAgICAgIGlmIChjb21wdXRlVG9wT2Zmc2V0cykgewogICAgICAgIHdhbGxPZmZzZXRBdHRyaWJ1dGVbd2FsbE9mZnNldEluZGV4KytdID0gMTsKICAgICAgICB3YWxsT2Zmc2V0SW5kZXggKz0gMTsKICAgICAgfQogICAgfQogICAgaWYgKCFub3J0aENhcCkgewogICAgICBmb3IgKGkgPSB3aWR0aCAtIDE7IGkgPj0gMDsgaS0tKSB7CiAgICAgICAgdGhyZWVJID0gaSAqIDM7CiAgICAgICAgd2FsbFBvc2l0aW9ucyA9IGFkZFdhbGxQb3NpdGlvbnMyKAogICAgICAgICAgd2FsbFBvc2l0aW9ucywKICAgICAgICAgIHBvc0luZGV4LAogICAgICAgICAgdGhyZWVJLAogICAgICAgICAgdG9wUG9zaXRpb25zLAogICAgICAgICAgYm90dG9tUG9zaXRpb25zCiAgICAgICAgKTsKICAgICAgICBwb3NJbmRleCArPSA2OwogICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQuc3QpIHsKICAgICAgICAgIHdhbGxUZXh0dXJlcyA9IGFkZFdhbGxUZXh0dXJlQ29vcmRpbmF0ZXMoCiAgICAgICAgICAgIHdhbGxUZXh0dXJlcywKICAgICAgICAgICAgc3RJbmRleCwKICAgICAgICAgICAgaSAqIDIsCiAgICAgICAgICAgIHRvcFN0CiAgICAgICAgICApOwogICAgICAgICAgc3RJbmRleCArPSA0OwogICAgICAgIH0KICAgICAgICBpZiAoc2hhZG93Vm9sdW1lKSB7CiAgICAgICAgICBleHRydWRlTm9ybWFsSW5kZXggKz0gMzsKICAgICAgICAgIHdhbGxFeHRydWRlTm9ybWFsc1tleHRydWRlTm9ybWFsSW5kZXgrK10gPSB0b3BOb3JtYWxzW3RocmVlSV07CiAgICAgICAgICB3YWxsRXh0cnVkZU5vcm1hbHNbZXh0cnVkZU5vcm1hbEluZGV4KytdID0gdG9wTm9ybWFsc1t0aHJlZUkgKyAxXTsKICAgICAgICAgIHdhbGxFeHRydWRlTm9ybWFsc1tleHRydWRlTm9ybWFsSW5kZXgrK10gPSB0b3BOb3JtYWxzW3RocmVlSSArIDJdOwogICAgICAgIH0KICAgICAgICBpZiAoY29tcHV0ZVRvcE9mZnNldHMpIHsKICAgICAgICAgIHdhbGxPZmZzZXRBdHRyaWJ1dGVbd2FsbE9mZnNldEluZGV4KytdID0gMTsKICAgICAgICAgIHdhbGxPZmZzZXRJbmRleCArPSAxOwogICAgICAgIH0KICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgY29uc3Qgbm9ydGhJbmRleCA9IGFyZWE7CiAgICAgIHRocmVlSSA9IG5vcnRoSW5kZXggKiAzOwogICAgICBmb3IgKGkgPSAwOyBpIDwgMjsgaSsrKSB7CiAgICAgICAgd2FsbFBvc2l0aW9ucyA9IGFkZFdhbGxQb3NpdGlvbnMyKAogICAgICAgICAgd2FsbFBvc2l0aW9ucywKICAgICAgICAgIHBvc0luZGV4LAogICAgICAgICAgdGhyZWVJLAogICAgICAgICAgdG9wUG9zaXRpb25zLAogICAgICAgICAgYm90dG9tUG9zaXRpb25zCiAgICAgICAgKTsKICAgICAgICBwb3NJbmRleCArPSA2OwogICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQuc3QpIHsKICAgICAgICAgIHdhbGxUZXh0dXJlcyA9IGFkZFdhbGxUZXh0dXJlQ29vcmRpbmF0ZXMoCiAgICAgICAgICAgIHdhbGxUZXh0dXJlcywKICAgICAgICAgICAgc3RJbmRleCwKICAgICAgICAgICAgbm9ydGhJbmRleCAqIDIsCiAgICAgICAgICAgIHRvcFN0CiAgICAgICAgICApOwogICAgICAgICAgc3RJbmRleCArPSA0OwogICAgICAgIH0KICAgICAgICBpZiAoc2hhZG93Vm9sdW1lKSB7CiAgICAgICAgICBleHRydWRlTm9ybWFsSW5kZXggKz0gMzsKICAgICAgICAgIHdhbGxFeHRydWRlTm9ybWFsc1tleHRydWRlTm9ybWFsSW5kZXgrK10gPSB0b3BOb3JtYWxzW3RocmVlSV07CiAgICAgICAgICB3YWxsRXh0cnVkZU5vcm1hbHNbZXh0cnVkZU5vcm1hbEluZGV4KytdID0gdG9wTm9ybWFsc1t0aHJlZUkgKyAxXTsKICAgICAgICAgIHdhbGxFeHRydWRlTm9ybWFsc1tleHRydWRlTm9ybWFsSW5kZXgrK10gPSB0b3BOb3JtYWxzW3RocmVlSSArIDJdOwogICAgICAgIH0KICAgICAgICBpZiAoY29tcHV0ZVRvcE9mZnNldHMpIHsKICAgICAgICAgIHdhbGxPZmZzZXRBdHRyaWJ1dGVbd2FsbE9mZnNldEluZGV4KytdID0gMTsKICAgICAgICAgIHdhbGxPZmZzZXRJbmRleCArPSAxOwogICAgICAgIH0KICAgICAgfQogICAgfQogICAgbGV0IGdlbyA9IGNhbGN1bGF0ZUF0dHJpYnV0ZXNXYWxsKHdhbGxQb3NpdGlvbnMsIHZlcnRleEZvcm1hdCwgZWxsaXBzb2lkKTsKICAgIGlmICh2ZXJ0ZXhGb3JtYXQuc3QpIHsKICAgICAgZ2VvLmF0dHJpYnV0ZXMuc3QgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMiwKICAgICAgICB2YWx1ZXM6IHdhbGxUZXh0dXJlcwogICAgICB9KTsKICAgIH0KICAgIGlmIChzaGFkb3dWb2x1bWUpIHsKICAgICAgZ2VvLmF0dHJpYnV0ZXMuZXh0cnVkZURpcmVjdGlvbiA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgIHZhbHVlczogd2FsbEV4dHJ1ZGVOb3JtYWxzCiAgICAgIH0pOwogICAgfQogICAgaWYgKGhhc09mZnNldHMpIHsKICAgICAgZ2VvLmF0dHJpYnV0ZXMuYXBwbHlPZmZzZXQgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuVU5TSUdORURfQllURSwKICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAxLAogICAgICAgIHZhbHVlczogd2FsbE9mZnNldEF0dHJpYnV0ZQogICAgICB9KTsKICAgIH0KICAgIGNvbnN0IHdhbGxJbmRpY2VzID0gSW5kZXhEYXRhdHlwZV9kZWZhdWx0LmNyZWF0ZVR5cGVkQXJyYXkoCiAgICAgIHdhbGxDb3VudCwKICAgICAgcGVyaW1ldGVyUG9zaXRpb25zICogNgogICAgKTsKICAgIGxldCB1cHBlckxlZnQ7CiAgICBsZXQgbG93ZXJMZWZ0OwogICAgbGV0IGxvd2VyUmlnaHQ7CiAgICBsZXQgdXBwZXJSaWdodDsKICAgIGxlbmd0aCA9IHdhbGxQb3NpdGlvbnMubGVuZ3RoIC8gMzsKICAgIGxldCBpbmRleCA9IDA7CiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoIC0gMTsgaSArPSAyKSB7CiAgICAgIHVwcGVyTGVmdCA9IGk7CiAgICAgIHVwcGVyUmlnaHQgPSAodXBwZXJMZWZ0ICsgMikgJSBsZW5ndGg7CiAgICAgIGNvbnN0IHAxID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheSh3YWxsUG9zaXRpb25zLCB1cHBlckxlZnQgKiAzLCB2MVNjcmF0Y2gpOwogICAgICBjb25zdCBwMiA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkod2FsbFBvc2l0aW9ucywgdXBwZXJSaWdodCAqIDMsIHYyU2NyYXRjaCk7CiAgICAgIGlmIChDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzRXBzaWxvbihwMSwgcDIsIE1hdGhfZGVmYXVsdC5FUFNJTE9OMTApKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgbG93ZXJMZWZ0ID0gKHVwcGVyTGVmdCArIDEpICUgbGVuZ3RoOwogICAgICBsb3dlclJpZ2h0ID0gKGxvd2VyTGVmdCArIDIpICUgbGVuZ3RoOwogICAgICB3YWxsSW5kaWNlc1tpbmRleCsrXSA9IHVwcGVyTGVmdDsKICAgICAgd2FsbEluZGljZXNbaW5kZXgrK10gPSBsb3dlckxlZnQ7CiAgICAgIHdhbGxJbmRpY2VzW2luZGV4KytdID0gdXBwZXJSaWdodDsKICAgICAgd2FsbEluZGljZXNbaW5kZXgrK10gPSB1cHBlclJpZ2h0OwogICAgICB3YWxsSW5kaWNlc1tpbmRleCsrXSA9IGxvd2VyTGVmdDsKICAgICAgd2FsbEluZGljZXNbaW5kZXgrK10gPSBsb3dlclJpZ2h0OwogICAgfQogICAgZ2VvLmluZGljZXMgPSB3YWxsSW5kaWNlczsKICAgIGdlbyA9IEdlb21ldHJ5UGlwZWxpbmVfZGVmYXVsdC5jb21iaW5lSW5zdGFuY2VzKFsKICAgICAgbmV3IEdlb21ldHJ5SW5zdGFuY2VfZGVmYXVsdCh7CiAgICAgICAgZ2VvbWV0cnk6IHRvcEJvdHRvbUdlbwogICAgICB9KSwKICAgICAgbmV3IEdlb21ldHJ5SW5zdGFuY2VfZGVmYXVsdCh7CiAgICAgICAgZ2VvbWV0cnk6IGdlbwogICAgICB9KQogICAgXSk7CiAgICByZXR1cm4gZ2VvWzBdOwogIH0KICBmdW5jdGlvbiBjb21wdXRlUmVjdGFuZ2xlMyhyZWN0YW5nbGUsIGdyYW51bGFyaXR5LCByb3RhdGlvbiwgZWxsaXBzb2lkLCByZXN1bHQpIHsKICAgIGlmIChyb3RhdGlvbiA9PT0gMCkgewogICAgICByZXR1cm4gUmVjdGFuZ2xlX2RlZmF1bHQuY2xvbmUocmVjdGFuZ2xlLCByZXN1bHQpOwogICAgfQogICAgY29uc3QgY29tcHV0ZWRPcHRpb25zID0gUmVjdGFuZ2xlR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuY29tcHV0ZU9wdGlvbnMoCiAgICAgIHJlY3RhbmdsZSwKICAgICAgZ3JhbnVsYXJpdHksCiAgICAgIHJvdGF0aW9uLAogICAgICAwLAogICAgICByZWN0YW5nbGVTY3JhdGNoLAogICAgICBud1NjcmF0Y2gKICAgICk7CiAgICBjb25zdCBoZWlnaHQgPSBjb21wdXRlZE9wdGlvbnMuaGVpZ2h0OwogICAgY29uc3Qgd2lkdGggPSBjb21wdXRlZE9wdGlvbnMud2lkdGg7CiAgICBjb25zdCBwb3NpdGlvbnMgPSBzY3JhdGNoUmVjdGFuZ2xlUG9pbnRzOwogICAgUmVjdGFuZ2xlR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuY29tcHV0ZVBvc2l0aW9uKAogICAgICBjb21wdXRlZE9wdGlvbnMsCiAgICAgIGVsbGlwc29pZCwKICAgICAgZmFsc2UsCiAgICAgIDAsCiAgICAgIDAsCiAgICAgIHBvc2l0aW9uc1swXQogICAgKTsKICAgIFJlY3RhbmdsZUdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmNvbXB1dGVQb3NpdGlvbigKICAgICAgY29tcHV0ZWRPcHRpb25zLAogICAgICBlbGxpcHNvaWQsCiAgICAgIGZhbHNlLAogICAgICAwLAogICAgICB3aWR0aCAtIDEsCiAgICAgIHBvc2l0aW9uc1sxXQogICAgKTsKICAgIFJlY3RhbmdsZUdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmNvbXB1dGVQb3NpdGlvbigKICAgICAgY29tcHV0ZWRPcHRpb25zLAogICAgICBlbGxpcHNvaWQsCiAgICAgIGZhbHNlLAogICAgICBoZWlnaHQgLSAxLAogICAgICAwLAogICAgICBwb3NpdGlvbnNbMl0KICAgICk7CiAgICBSZWN0YW5nbGVHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5jb21wdXRlUG9zaXRpb24oCiAgICAgIGNvbXB1dGVkT3B0aW9ucywKICAgICAgZWxsaXBzb2lkLAogICAgICBmYWxzZSwKICAgICAgaGVpZ2h0IC0gMSwKICAgICAgd2lkdGggLSAxLAogICAgICBwb3NpdGlvbnNbM10KICAgICk7CiAgICByZXR1cm4gUmVjdGFuZ2xlX2RlZmF1bHQuZnJvbUNhcnRlc2lhbkFycmF5KHBvc2l0aW9ucywgZWxsaXBzb2lkLCByZXN1bHQpOwogIH0KICBmdW5jdGlvbiBSZWN0YW5nbGVHZW9tZXRyeShvcHRpb25zKSB7CiAgICBvcHRpb25zID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucywgZGVmYXVsdFZhbHVlX2RlZmF1bHQuRU1QVFlfT0JKRUNUKTsKICAgIGNvbnN0IHJlY3RhbmdsZSA9IG9wdGlvbnMucmVjdGFuZ2xlOwogICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZWN0YW5nbGUiLCByZWN0YW5nbGUpOwogICAgUmVjdGFuZ2xlX2RlZmF1bHQuX3ZhbGlkYXRlKHJlY3RhbmdsZSk7CiAgICBpZiAocmVjdGFuZ2xlLm5vcnRoIDwgcmVjdGFuZ2xlLnNvdXRoKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICJvcHRpb25zLnJlY3RhbmdsZS5ub3J0aCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byBvcHRpb25zLnJlY3RhbmdsZS5zb3V0aCIKICAgICAgKTsKICAgIH0KICAgIGNvbnN0IGhlaWdodCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuaGVpZ2h0LCAwKTsKICAgIGNvbnN0IGV4dHJ1ZGVkSGVpZ2h0ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5leHRydWRlZEhlaWdodCwgaGVpZ2h0KTsKICAgIHRoaXMuX3JlY3RhbmdsZSA9IFJlY3RhbmdsZV9kZWZhdWx0LmNsb25lKHJlY3RhbmdsZSk7CiAgICB0aGlzLl9ncmFudWxhcml0eSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KAogICAgICBvcHRpb25zLmdyYW51bGFyaXR5LAogICAgICBNYXRoX2RlZmF1bHQuUkFESUFOU19QRVJfREVHUkVFCiAgICApOwogICAgdGhpcy5fZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUoCiAgICAgIGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuZWxsaXBzb2lkLCBFbGxpcHNvaWRfZGVmYXVsdC5kZWZhdWx0KQogICAgKTsKICAgIHRoaXMuX3N1cmZhY2VIZWlnaHQgPSBNYXRoLm1heChoZWlnaHQsIGV4dHJ1ZGVkSGVpZ2h0KTsKICAgIHRoaXMuX3JvdGF0aW9uID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5yb3RhdGlvbiwgMCk7CiAgICB0aGlzLl9zdFJvdGF0aW9uID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5zdFJvdGF0aW9uLCAwKTsKICAgIHRoaXMuX3ZlcnRleEZvcm1hdCA9IFZlcnRleEZvcm1hdF9kZWZhdWx0LmNsb25lKAogICAgICBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLnZlcnRleEZvcm1hdCwgVmVydGV4Rm9ybWF0X2RlZmF1bHQuREVGQVVMVCkKICAgICk7CiAgICB0aGlzLl9leHRydWRlZEhlaWdodCA9IE1hdGgubWluKGhlaWdodCwgZXh0cnVkZWRIZWlnaHQpOwogICAgdGhpcy5fc2hhZG93Vm9sdW1lID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5zaGFkb3dWb2x1bWUsIGZhbHNlKTsKICAgIHRoaXMuX3dvcmtlck5hbWUgPSAiY3JlYXRlUmVjdGFuZ2xlR2VvbWV0cnkiOwogICAgdGhpcy5fb2Zmc2V0QXR0cmlidXRlID0gb3B0aW9ucy5vZmZzZXRBdHRyaWJ1dGU7CiAgICB0aGlzLl9yb3RhdGVkUmVjdGFuZ2xlID0gdm9pZCAwOwogICAgdGhpcy5fdGV4dHVyZUNvb3JkaW5hdGVSb3RhdGlvblBvaW50cyA9IHZvaWQgMDsKICB9CiAgZnVuY3Rpb24gdGV4dHVyZUNvb3JkaW5hdGVSb3RhdGlvblBvaW50czMocmVjdGFuZ2xlR2VvbWV0cnkpIHsKICAgIGlmIChyZWN0YW5nbGVHZW9tZXRyeS5fc3RSb3RhdGlvbiA9PT0gMCkgewogICAgICByZXR1cm4gWzAsIDAsIDAsIDEsIDEsIDBdOwogICAgfQogICAgY29uc3QgcmVjdGFuZ2xlID0gUmVjdGFuZ2xlX2RlZmF1bHQuY2xvbmUoCiAgICAgIHJlY3RhbmdsZUdlb21ldHJ5Ll9yZWN0YW5nbGUsCiAgICAgIHVucm90YXRlZFRleHR1cmVSZWN0YW5nbGVTY3JhdGNoCiAgICApOwogICAgY29uc3QgZ3JhbnVsYXJpdHkgPSByZWN0YW5nbGVHZW9tZXRyeS5fZ3JhbnVsYXJpdHk7CiAgICBjb25zdCBlbGxpcHNvaWQgPSByZWN0YW5nbGVHZW9tZXRyeS5fZWxsaXBzb2lkOwogICAgY29uc3Qgcm90YXRpb24gPSByZWN0YW5nbGVHZW9tZXRyeS5fcm90YXRpb24gLSByZWN0YW5nbGVHZW9tZXRyeS5fc3RSb3RhdGlvbjsKICAgIGNvbnN0IHVucm90YXRlZFRleHR1cmVSZWN0YW5nbGUgPSBjb21wdXRlUmVjdGFuZ2xlMygKICAgICAgcmVjdGFuZ2xlLAogICAgICBncmFudWxhcml0eSwKICAgICAgcm90YXRpb24sCiAgICAgIGVsbGlwc29pZCwKICAgICAgdW5yb3RhdGVkVGV4dHVyZVJlY3RhbmdsZVNjcmF0Y2gKICAgICk7CiAgICBjb25zdCBwb2ludHMyRCA9IHBvaW50czJEU2NyYXRjaDI7CiAgICBwb2ludHMyRFswXS54ID0gdW5yb3RhdGVkVGV4dHVyZVJlY3RhbmdsZS53ZXN0OwogICAgcG9pbnRzMkRbMF0ueSA9IHVucm90YXRlZFRleHR1cmVSZWN0YW5nbGUuc291dGg7CiAgICBwb2ludHMyRFsxXS54ID0gdW5yb3RhdGVkVGV4dHVyZVJlY3RhbmdsZS53ZXN0OwogICAgcG9pbnRzMkRbMV0ueSA9IHVucm90YXRlZFRleHR1cmVSZWN0YW5nbGUubm9ydGg7CiAgICBwb2ludHMyRFsyXS54ID0gdW5yb3RhdGVkVGV4dHVyZVJlY3RhbmdsZS5lYXN0OwogICAgcG9pbnRzMkRbMl0ueSA9IHVucm90YXRlZFRleHR1cmVSZWN0YW5nbGUuc291dGg7CiAgICBjb25zdCBib3VuZGluZ1JlY3RhbmdsZSA9IHJlY3RhbmdsZUdlb21ldHJ5LnJlY3RhbmdsZTsKICAgIGNvbnN0IHRvRGVzaXJlZEluQ29tcHV0ZWQgPSBNYXRyaXgyX2RlZmF1bHQuZnJvbVJvdGF0aW9uKAogICAgICByZWN0YW5nbGVHZW9tZXRyeS5fc3RSb3RhdGlvbiwKICAgICAgcm90YXRpb24yRFNjcmF0Y2gyCiAgICApOwogICAgY29uc3QgYm91bmRpbmdSZWN0YW5nbGVDZW50ZXIgPSBSZWN0YW5nbGVfZGVmYXVsdC5jZW50ZXIoCiAgICAgIGJvdW5kaW5nUmVjdGFuZ2xlLAogICAgICByZWN0YW5nbGVDZW50ZXJTY3JhdGNoMgogICAgKTsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgKytpKSB7CiAgICAgIGNvbnN0IHBvaW50MkQgPSBwb2ludHMyRFtpXTsKICAgICAgcG9pbnQyRC54IC09IGJvdW5kaW5nUmVjdGFuZ2xlQ2VudGVyLmxvbmdpdHVkZTsKICAgICAgcG9pbnQyRC55IC09IGJvdW5kaW5nUmVjdGFuZ2xlQ2VudGVyLmxhdGl0dWRlOwogICAgICBNYXRyaXgyX2RlZmF1bHQubXVsdGlwbHlCeVZlY3Rvcih0b0Rlc2lyZWRJbkNvbXB1dGVkLCBwb2ludDJELCBwb2ludDJEKTsKICAgICAgcG9pbnQyRC54ICs9IGJvdW5kaW5nUmVjdGFuZ2xlQ2VudGVyLmxvbmdpdHVkZTsKICAgICAgcG9pbnQyRC55ICs9IGJvdW5kaW5nUmVjdGFuZ2xlQ2VudGVyLmxhdGl0dWRlOwogICAgICBwb2ludDJELnggPSAocG9pbnQyRC54IC0gYm91bmRpbmdSZWN0YW5nbGUud2VzdCkgLyBib3VuZGluZ1JlY3RhbmdsZS53aWR0aDsKICAgICAgcG9pbnQyRC55ID0gKHBvaW50MkQueSAtIGJvdW5kaW5nUmVjdGFuZ2xlLnNvdXRoKSAvIGJvdW5kaW5nUmVjdGFuZ2xlLmhlaWdodDsKICAgIH0KICAgIGNvbnN0IG1pblhZQ29ybmVyID0gcG9pbnRzMkRbMF07CiAgICBjb25zdCBtYXhZQ29ybmVyID0gcG9pbnRzMkRbMV07CiAgICBjb25zdCBtYXhYQ29ybmVyID0gcG9pbnRzMkRbMl07CiAgICBjb25zdCByZXN1bHQgPSBuZXcgQXJyYXkoNik7CiAgICBDYXJ0ZXNpYW4yX2RlZmF1bHQucGFjayhtaW5YWUNvcm5lciwgcmVzdWx0KTsKICAgIENhcnRlc2lhbjJfZGVmYXVsdC5wYWNrKG1heFlDb3JuZXIsIHJlc3VsdCwgMik7CiAgICBDYXJ0ZXNpYW4yX2RlZmF1bHQucGFjayhtYXhYQ29ybmVyLCByZXN1bHQsIDQpOwogICAgcmV0dXJuIHJlc3VsdDsKICB9CiAgdmFyIHBvc2l0aW9uU2NyYXRjaDIsIG5vcm1hbFNjcmF0Y2g0LCB0YW5nZW50U2NyYXRjaDIsIGJpdGFuZ2VudFNjcmF0Y2gyLCByZWN0YW5nbGVTY3JhdGNoLCBzdFNjcmF0Y2gyLCBib3R0b21Cb3VuZGluZ1NwaGVyZTMsIHRvcEJvdW5kaW5nU3BoZXJlMywgdjFTY3JhdGNoLCB2MlNjcmF0Y2gsIHNjcmF0Y2hWZXJ0ZXhGb3JtYXQxMiwgc2NyYXRjaFJlY3RhbmdsZVBvaW50cywgbndTY3JhdGNoLCBzdE53U2NyYXRjaCwgc2NyYXRjaFJlY3RhbmdsZSwgc2NyYXRjaEVsbGlwc29pZDExLCBzY3JhdGNoT3B0aW9uczE5LCB0YW5nZW50Um90YXRpb25NYXRyaXhTY3JhdGNoLCBxdWF0ZXJuaW9uU2NyYXRjaDQsIGNlbnRlclNjcmF0Y2g0LCB1bnJvdGF0ZWRUZXh0dXJlUmVjdGFuZ2xlU2NyYXRjaCwgcG9pbnRzMkRTY3JhdGNoMiwgcm90YXRpb24yRFNjcmF0Y2gyLCByZWN0YW5nbGVDZW50ZXJTY3JhdGNoMiwgUmVjdGFuZ2xlR2VvbWV0cnlfZGVmYXVsdDsKICB2YXIgaW5pdF9SZWN0YW5nbGVHZW9tZXRyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUmVjdGFuZ2xlR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X0JvdW5kaW5nU3BoZXJlKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMigpOwogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DYXJ0b2dyYXBoaWMoKTsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X0NvbXBvbmVudERhdGF0eXBlKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkKCk7CiAgICAgIGluaXRfR2VvbWV0cnkoKTsKICAgICAgaW5pdF9HZW9tZXRyeUF0dHJpYnV0ZSgpOwogICAgICBpbml0X0dlb21ldHJ5QXR0cmlidXRlcygpOwogICAgICBpbml0X0dlb21ldHJ5SW5zdGFuY2UoKTsKICAgICAgaW5pdF9HZW9tZXRyeU9mZnNldEF0dHJpYnV0ZSgpOwogICAgICBpbml0X0dlb21ldHJ5UGlwZWxpbmUoKTsKICAgICAgaW5pdF9JbmRleERhdGF0eXBlKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X01hdHJpeDIoKTsKICAgICAgaW5pdF9NYXRyaXgzKCk7CiAgICAgIGluaXRfUG9seWdvblBpcGVsaW5lKCk7CiAgICAgIGluaXRfUHJpbWl0aXZlVHlwZSgpOwogICAgICBpbml0X1F1YXRlcm5pb24oKTsKICAgICAgaW5pdF9SZWN0YW5nbGUoKTsKICAgICAgaW5pdF9SZWN0YW5nbGVHZW9tZXRyeUxpYnJhcnkoKTsKICAgICAgaW5pdF9WZXJ0ZXhGb3JtYXQoKTsKICAgICAgcG9zaXRpb25TY3JhdGNoMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgbm9ybWFsU2NyYXRjaDQgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHRhbmdlbnRTY3JhdGNoMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgYml0YW5nZW50U2NyYXRjaDIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHJlY3RhbmdsZVNjcmF0Y2ggPSBuZXcgUmVjdGFuZ2xlX2RlZmF1bHQoKTsKICAgICAgc3RTY3JhdGNoMiA9IG5ldyBDYXJ0ZXNpYW4yX2RlZmF1bHQoKTsKICAgICAgYm90dG9tQm91bmRpbmdTcGhlcmUzID0gbmV3IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQoKTsKICAgICAgdG9wQm91bmRpbmdTcGhlcmUzID0gbmV3IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQoKTsKICAgICAgdjFTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICB2MlNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hWZXJ0ZXhGb3JtYXQxMiA9IG5ldyBWZXJ0ZXhGb3JtYXRfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoUmVjdGFuZ2xlUG9pbnRzID0gWwogICAgICAgIG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKSwKICAgICAgICBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCksCiAgICAgICAgbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpLAogICAgICAgIG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKQogICAgICBdOwogICAgICBud1NjcmF0Y2ggPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgc3ROd1NjcmF0Y2ggPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgUmVjdGFuZ2xlR2VvbWV0cnkucGFja2VkTGVuZ3RoID0gUmVjdGFuZ2xlX2RlZmF1bHQucGFja2VkTGVuZ3RoICsgRWxsaXBzb2lkX2RlZmF1bHQucGFja2VkTGVuZ3RoICsgVmVydGV4Rm9ybWF0X2RlZmF1bHQucGFja2VkTGVuZ3RoICsgNzsKICAgICAgUmVjdGFuZ2xlR2VvbWV0cnkucGFjayA9IGZ1bmN0aW9uKHZhbHVlLCBhcnJheSwgc3RhcnRpbmdJbmRleCkgewogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgidmFsdWUiLCB2YWx1ZSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgUmVjdGFuZ2xlX2RlZmF1bHQucGFjayh2YWx1ZS5fcmVjdGFuZ2xlLCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBSZWN0YW5nbGVfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgRWxsaXBzb2lkX2RlZmF1bHQucGFjayh2YWx1ZS5fZWxsaXBzb2lkLCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgVmVydGV4Rm9ybWF0X2RlZmF1bHQucGFjayh2YWx1ZS5fdmVydGV4Rm9ybWF0LCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9ncmFudWxhcml0eTsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX3N1cmZhY2VIZWlnaHQ7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9yb3RhdGlvbjsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX3N0Um90YXRpb247CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9leHRydWRlZEhlaWdodDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX3NoYWRvd1ZvbHVtZSA/IDEgOiAwOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXhdID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQodmFsdWUuX29mZnNldEF0dHJpYnV0ZSwgLTEpOwogICAgICAgIHJldHVybiBhcnJheTsKICAgICAgfTsKICAgICAgc2NyYXRjaFJlY3RhbmdsZSA9IG5ldyBSZWN0YW5nbGVfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoRWxsaXBzb2lkMTEgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZShFbGxpcHNvaWRfZGVmYXVsdC5VTklUX1NQSEVSRSk7CiAgICAgIHNjcmF0Y2hPcHRpb25zMTkgPSB7CiAgICAgICAgcmVjdGFuZ2xlOiBzY3JhdGNoUmVjdGFuZ2xlLAogICAgICAgIGVsbGlwc29pZDogc2NyYXRjaEVsbGlwc29pZDExLAogICAgICAgIHZlcnRleEZvcm1hdDogc2NyYXRjaFZlcnRleEZvcm1hdDEyLAogICAgICAgIGdyYW51bGFyaXR5OiB2b2lkIDAsCiAgICAgICAgaGVpZ2h0OiB2b2lkIDAsCiAgICAgICAgcm90YXRpb246IHZvaWQgMCwKICAgICAgICBzdFJvdGF0aW9uOiB2b2lkIDAsCiAgICAgICAgZXh0cnVkZWRIZWlnaHQ6IHZvaWQgMCwKICAgICAgICBzaGFkb3dWb2x1bWU6IHZvaWQgMCwKICAgICAgICBvZmZzZXRBdHRyaWJ1dGU6IHZvaWQgMAogICAgICB9OwogICAgICBSZWN0YW5nbGVHZW9tZXRyeS51bnBhY2sgPSBmdW5jdGlvbihhcnJheSwgc3RhcnRpbmdJbmRleCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJhcnJheSIsIGFycmF5KTsKICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgY29uc3QgcmVjdGFuZ2xlID0gUmVjdGFuZ2xlX2RlZmF1bHQudW5wYWNrKGFycmF5LCBzdGFydGluZ0luZGV4LCBzY3JhdGNoUmVjdGFuZ2xlKTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IFJlY3RhbmdsZV9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBjb25zdCBlbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC51bnBhY2soYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHNjcmF0Y2hFbGxpcHNvaWQxMSk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgY29uc3QgdmVydGV4Rm9ybWF0ID0gVmVydGV4Rm9ybWF0X2RlZmF1bHQudW5wYWNrKAogICAgICAgICAgYXJyYXksCiAgICAgICAgICBzdGFydGluZ0luZGV4LAogICAgICAgICAgc2NyYXRjaFZlcnRleEZvcm1hdDEyCiAgICAgICAgKTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IFZlcnRleEZvcm1hdF9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBjb25zdCBncmFudWxhcml0eSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3Qgc3VyZmFjZUhlaWdodCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3Qgcm90YXRpb24gPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IHN0Um90YXRpb24gPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IGV4dHJ1ZGVkSGVpZ2h0ID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBzaGFkb3dWb2x1bWUgPSBhcnJheVtzdGFydGluZ0luZGV4KytdID09PSAxOwogICAgICAgIGNvbnN0IG9mZnNldEF0dHJpYnV0ZSA9IGFycmF5W3N0YXJ0aW5nSW5kZXhdOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMTkuZ3JhbnVsYXJpdHkgPSBncmFudWxhcml0eTsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMTkuaGVpZ2h0ID0gc3VyZmFjZUhlaWdodDsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMTkucm90YXRpb24gPSByb3RhdGlvbjsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMTkuc3RSb3RhdGlvbiA9IHN0Um90YXRpb247CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczE5LmV4dHJ1ZGVkSGVpZ2h0ID0gZXh0cnVkZWRIZWlnaHQ7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczE5LnNoYWRvd1ZvbHVtZSA9IHNoYWRvd1ZvbHVtZTsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMTkub2Zmc2V0QXR0cmlidXRlID0gb2Zmc2V0QXR0cmlidXRlID09PSAtMSA/IHZvaWQgMCA6IG9mZnNldEF0dHJpYnV0ZTsKICAgICAgICAgIHJldHVybiBuZXcgUmVjdGFuZ2xlR2VvbWV0cnkoc2NyYXRjaE9wdGlvbnMxOSk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5fcmVjdGFuZ2xlID0gUmVjdGFuZ2xlX2RlZmF1bHQuY2xvbmUocmVjdGFuZ2xlLCByZXN1bHQuX3JlY3RhbmdsZSk7CiAgICAgICAgcmVzdWx0Ll9lbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZShlbGxpcHNvaWQsIHJlc3VsdC5fZWxsaXBzb2lkKTsKICAgICAgICByZXN1bHQuX3ZlcnRleEZvcm1hdCA9IFZlcnRleEZvcm1hdF9kZWZhdWx0LmNsb25lKHZlcnRleEZvcm1hdCwgcmVzdWx0Ll92ZXJ0ZXhGb3JtYXQpOwogICAgICAgIHJlc3VsdC5fZ3JhbnVsYXJpdHkgPSBncmFudWxhcml0eTsKICAgICAgICByZXN1bHQuX3N1cmZhY2VIZWlnaHQgPSBzdXJmYWNlSGVpZ2h0OwogICAgICAgIHJlc3VsdC5fcm90YXRpb24gPSByb3RhdGlvbjsKICAgICAgICByZXN1bHQuX3N0Um90YXRpb24gPSBzdFJvdGF0aW9uOwogICAgICAgIHJlc3VsdC5fZXh0cnVkZWRIZWlnaHQgPSBleHRydWRlZEhlaWdodDsKICAgICAgICByZXN1bHQuX3NoYWRvd1ZvbHVtZSA9IHNoYWRvd1ZvbHVtZTsKICAgICAgICByZXN1bHQuX29mZnNldEF0dHJpYnV0ZSA9IG9mZnNldEF0dHJpYnV0ZSA9PT0gLTEgPyB2b2lkIDAgOiBvZmZzZXRBdHRyaWJ1dGU7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgUmVjdGFuZ2xlR2VvbWV0cnkuY29tcHV0ZVJlY3RhbmdsZSA9IGZ1bmN0aW9uKG9wdGlvbnMsIHJlc3VsdCkgewogICAgICAgIG9wdGlvbnMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLCBkZWZhdWx0VmFsdWVfZGVmYXVsdC5FTVBUWV9PQkpFQ1QpOwogICAgICAgIGNvbnN0IHJlY3RhbmdsZSA9IG9wdGlvbnMucmVjdGFuZ2xlOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgicmVjdGFuZ2xlIiwgcmVjdGFuZ2xlKTsKICAgICAgICBSZWN0YW5nbGVfZGVmYXVsdC5fdmFsaWRhdGUocmVjdGFuZ2xlKTsKICAgICAgICBpZiAocmVjdGFuZ2xlLm5vcnRoIDwgcmVjdGFuZ2xlLnNvdXRoKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAgICAgIm9wdGlvbnMucmVjdGFuZ2xlLm5vcnRoIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIG9wdGlvbnMucmVjdGFuZ2xlLnNvdXRoIgogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgZ3JhbnVsYXJpdHkgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCgKICAgICAgICAgIG9wdGlvbnMuZ3JhbnVsYXJpdHksCiAgICAgICAgICBNYXRoX2RlZmF1bHQuUkFESUFOU19QRVJfREVHUkVFCiAgICAgICAgKTsKICAgICAgICBjb25zdCBlbGxpcHNvaWQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmVsbGlwc29pZCwgRWxsaXBzb2lkX2RlZmF1bHQuZGVmYXVsdCk7CiAgICAgICAgY29uc3Qgcm90YXRpb24gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLnJvdGF0aW9uLCAwKTsKICAgICAgICByZXR1cm4gY29tcHV0ZVJlY3RhbmdsZTMocmVjdGFuZ2xlLCBncmFudWxhcml0eSwgcm90YXRpb24sIGVsbGlwc29pZCwgcmVzdWx0KTsKICAgICAgfTsKICAgICAgdGFuZ2VudFJvdGF0aW9uTWF0cml4U2NyYXRjaCA9IG5ldyBNYXRyaXgzX2RlZmF1bHQoKTsKICAgICAgcXVhdGVybmlvblNjcmF0Y2g0ID0gbmV3IFF1YXRlcm5pb25fZGVmYXVsdCgpOwogICAgICBjZW50ZXJTY3JhdGNoNCA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICBSZWN0YW5nbGVHZW9tZXRyeS5jcmVhdGVHZW9tZXRyeSA9IGZ1bmN0aW9uKHJlY3RhbmdsZUdlb21ldHJ5KSB7CiAgICAgICAgaWYgKE1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgcmVjdGFuZ2xlR2VvbWV0cnkuX3JlY3RhbmdsZS5ub3J0aCwKICAgICAgICAgIHJlY3RhbmdsZUdlb21ldHJ5Ll9yZWN0YW5nbGUuc291dGgsCiAgICAgICAgICBNYXRoX2RlZmF1bHQuRVBTSUxPTjEwCiAgICAgICAgKSB8fCBNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbigKICAgICAgICAgIHJlY3RhbmdsZUdlb21ldHJ5Ll9yZWN0YW5nbGUuZWFzdCwKICAgICAgICAgIHJlY3RhbmdsZUdlb21ldHJ5Ll9yZWN0YW5nbGUud2VzdCwKICAgICAgICAgIE1hdGhfZGVmYXVsdC5FUFNJTE9OMTAKICAgICAgICApKSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICBsZXQgcmVjdGFuZ2xlID0gcmVjdGFuZ2xlR2VvbWV0cnkuX3JlY3RhbmdsZTsKICAgICAgICBjb25zdCBlbGxpcHNvaWQgPSByZWN0YW5nbGVHZW9tZXRyeS5fZWxsaXBzb2lkOwogICAgICAgIGNvbnN0IHJvdGF0aW9uID0gcmVjdGFuZ2xlR2VvbWV0cnkuX3JvdGF0aW9uOwogICAgICAgIGNvbnN0IHN0Um90YXRpb24gPSByZWN0YW5nbGVHZW9tZXRyeS5fc3RSb3RhdGlvbjsKICAgICAgICBjb25zdCB2ZXJ0ZXhGb3JtYXQgPSByZWN0YW5nbGVHZW9tZXRyeS5fdmVydGV4Rm9ybWF0OwogICAgICAgIGNvbnN0IGNvbXB1dGVkT3B0aW9ucyA9IFJlY3RhbmdsZUdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmNvbXB1dGVPcHRpb25zKAogICAgICAgICAgcmVjdGFuZ2xlLAogICAgICAgICAgcmVjdGFuZ2xlR2VvbWV0cnkuX2dyYW51bGFyaXR5LAogICAgICAgICAgcm90YXRpb24sCiAgICAgICAgICBzdFJvdGF0aW9uLAogICAgICAgICAgcmVjdGFuZ2xlU2NyYXRjaCwKICAgICAgICAgIG53U2NyYXRjaCwKICAgICAgICAgIHN0TndTY3JhdGNoCiAgICAgICAgKTsKICAgICAgICBjb25zdCB0YW5nZW50Um90YXRpb25NYXRyaXggPSB0YW5nZW50Um90YXRpb25NYXRyaXhTY3JhdGNoOwogICAgICAgIGlmIChzdFJvdGF0aW9uICE9PSAwIHx8IHJvdGF0aW9uICE9PSAwKSB7CiAgICAgICAgICBjb25zdCBjZW50ZXIgPSBSZWN0YW5nbGVfZGVmYXVsdC5jZW50ZXIocmVjdGFuZ2xlLCBjZW50ZXJTY3JhdGNoNCk7CiAgICAgICAgICBjb25zdCBheGlzID0gZWxsaXBzb2lkLmdlb2RldGljU3VyZmFjZU5vcm1hbENhcnRvZ3JhcGhpYyhjZW50ZXIsIHYxU2NyYXRjaCk7CiAgICAgICAgICBRdWF0ZXJuaW9uX2RlZmF1bHQuZnJvbUF4aXNBbmdsZShheGlzLCAtc3RSb3RhdGlvbiwgcXVhdGVybmlvblNjcmF0Y2g0KTsKICAgICAgICAgIE1hdHJpeDNfZGVmYXVsdC5mcm9tUXVhdGVybmlvbihxdWF0ZXJuaW9uU2NyYXRjaDQsIHRhbmdlbnRSb3RhdGlvbk1hdHJpeCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIE1hdHJpeDNfZGVmYXVsdC5jbG9uZShNYXRyaXgzX2RlZmF1bHQuSURFTlRJVFksIHRhbmdlbnRSb3RhdGlvbk1hdHJpeCk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHN1cmZhY2VIZWlnaHQgPSByZWN0YW5nbGVHZW9tZXRyeS5fc3VyZmFjZUhlaWdodDsKICAgICAgICBjb25zdCBleHRydWRlZEhlaWdodCA9IHJlY3RhbmdsZUdlb21ldHJ5Ll9leHRydWRlZEhlaWdodDsKICAgICAgICBjb25zdCBleHRydWRlID0gIU1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgc3VyZmFjZUhlaWdodCwKICAgICAgICAgIGV4dHJ1ZGVkSGVpZ2h0LAogICAgICAgICAgMCwKICAgICAgICAgIE1hdGhfZGVmYXVsdC5FUFNJTE9OMgogICAgICAgICk7CiAgICAgICAgY29tcHV0ZWRPcHRpb25zLmxvblNjYWxhciA9IDEgLyByZWN0YW5nbGVHZW9tZXRyeS5fcmVjdGFuZ2xlLndpZHRoOwogICAgICAgIGNvbXB1dGVkT3B0aW9ucy5sYXRTY2FsYXIgPSAxIC8gcmVjdGFuZ2xlR2VvbWV0cnkuX3JlY3RhbmdsZS5oZWlnaHQ7CiAgICAgICAgY29tcHV0ZWRPcHRpb25zLnRhbmdlbnRSb3RhdGlvbk1hdHJpeCA9IHRhbmdlbnRSb3RhdGlvbk1hdHJpeDsKICAgICAgICBsZXQgZ2VvbWV0cnk7CiAgICAgICAgbGV0IGJvdW5kaW5nU3BoZXJlOwogICAgICAgIHJlY3RhbmdsZSA9IHJlY3RhbmdsZUdlb21ldHJ5Ll9yZWN0YW5nbGU7CiAgICAgICAgaWYgKGV4dHJ1ZGUpIHsKICAgICAgICAgIGdlb21ldHJ5ID0gY29uc3RydWN0RXh0cnVkZWRSZWN0YW5nbGUocmVjdGFuZ2xlR2VvbWV0cnksIGNvbXB1dGVkT3B0aW9ucyk7CiAgICAgICAgICBjb25zdCB0b3BCUyA9IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQuZnJvbVJlY3RhbmdsZTNEKAogICAgICAgICAgICByZWN0YW5nbGUsCiAgICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgICAgc3VyZmFjZUhlaWdodCwKICAgICAgICAgICAgdG9wQm91bmRpbmdTcGhlcmUzCiAgICAgICAgICApOwogICAgICAgICAgY29uc3QgYm90dG9tQlMgPSBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0LmZyb21SZWN0YW5nbGUzRCgKICAgICAgICAgICAgcmVjdGFuZ2xlLAogICAgICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgICAgIGV4dHJ1ZGVkSGVpZ2h0LAogICAgICAgICAgICBib3R0b21Cb3VuZGluZ1NwaGVyZTMKICAgICAgICAgICk7CiAgICAgICAgICBib3VuZGluZ1NwaGVyZSA9IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQudW5pb24odG9wQlMsIGJvdHRvbUJTKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZ2VvbWV0cnkgPSBjb25zdHJ1Y3RSZWN0YW5nbGUocmVjdGFuZ2xlR2VvbWV0cnksIGNvbXB1dGVkT3B0aW9ucyk7CiAgICAgICAgICBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcyA9IFBvbHlnb25QaXBlbGluZV9kZWZhdWx0LnNjYWxlVG9HZW9kZXRpY0hlaWdodCgKICAgICAgICAgICAgZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXMsCiAgICAgICAgICAgIHN1cmZhY2VIZWlnaHQsCiAgICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgICAgZmFsc2UKICAgICAgICAgICk7CiAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHJlY3RhbmdsZUdlb21ldHJ5Ll9vZmZzZXRBdHRyaWJ1dGUpKSB7CiAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzLmxlbmd0aDsKICAgICAgICAgICAgY29uc3Qgb2Zmc2V0VmFsdWUgPSByZWN0YW5nbGVHZW9tZXRyeS5fb2Zmc2V0QXR0cmlidXRlID09PSBHZW9tZXRyeU9mZnNldEF0dHJpYnV0ZV9kZWZhdWx0Lk5PTkUgPyAwIDogMTsKICAgICAgICAgICAgY29uc3QgYXBwbHlPZmZzZXQgPSBuZXcgVWludDhBcnJheShsZW5ndGggLyAzKS5maWxsKG9mZnNldFZhbHVlKTsKICAgICAgICAgICAgZ2VvbWV0cnkuYXR0cmlidXRlcy5hcHBseU9mZnNldCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5VTlNJR05FRF9CWVRFLAogICAgICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDEsCiAgICAgICAgICAgICAgdmFsdWVzOiBhcHBseU9mZnNldAogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICAgIGJvdW5kaW5nU3BoZXJlID0gQm91bmRpbmdTcGhlcmVfZGVmYXVsdC5mcm9tUmVjdGFuZ2xlM0QoCiAgICAgICAgICAgIHJlY3RhbmdsZSwKICAgICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgICBzdXJmYWNlSGVpZ2h0CiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBpZiAoIXZlcnRleEZvcm1hdC5wb3NpdGlvbikgewogICAgICAgICAgZGVsZXRlIGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247CiAgICAgICAgfQogICAgICAgIHJldHVybiBuZXcgR2VvbWV0cnlfZGVmYXVsdCh7CiAgICAgICAgICBhdHRyaWJ1dGVzOiBnZW9tZXRyeS5hdHRyaWJ1dGVzLAogICAgICAgICAgaW5kaWNlczogZ2VvbWV0cnkuaW5kaWNlcywKICAgICAgICAgIHByaW1pdGl2ZVR5cGU6IGdlb21ldHJ5LnByaW1pdGl2ZVR5cGUsCiAgICAgICAgICBib3VuZGluZ1NwaGVyZSwKICAgICAgICAgIG9mZnNldEF0dHJpYnV0ZTogcmVjdGFuZ2xlR2VvbWV0cnkuX29mZnNldEF0dHJpYnV0ZQogICAgICAgIH0pOwogICAgICB9OwogICAgICBSZWN0YW5nbGVHZW9tZXRyeS5jcmVhdGVTaGFkb3dWb2x1bWUgPSBmdW5jdGlvbihyZWN0YW5nbGVHZW9tZXRyeSwgbWluSGVpZ2h0RnVuYywgbWF4SGVpZ2h0RnVuYykgewogICAgICAgIGNvbnN0IGdyYW51bGFyaXR5ID0gcmVjdGFuZ2xlR2VvbWV0cnkuX2dyYW51bGFyaXR5OwogICAgICAgIGNvbnN0IGVsbGlwc29pZCA9IHJlY3RhbmdsZUdlb21ldHJ5Ll9lbGxpcHNvaWQ7CiAgICAgICAgY29uc3QgbWluSGVpZ2h0ID0gbWluSGVpZ2h0RnVuYyhncmFudWxhcml0eSwgZWxsaXBzb2lkKTsKICAgICAgICBjb25zdCBtYXhIZWlnaHQgPSBtYXhIZWlnaHRGdW5jKGdyYW51bGFyaXR5LCBlbGxpcHNvaWQpOwogICAgICAgIHJldHVybiBuZXcgUmVjdGFuZ2xlR2VvbWV0cnkoewogICAgICAgICAgcmVjdGFuZ2xlOiByZWN0YW5nbGVHZW9tZXRyeS5fcmVjdGFuZ2xlLAogICAgICAgICAgcm90YXRpb246IHJlY3RhbmdsZUdlb21ldHJ5Ll9yb3RhdGlvbiwKICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgIHN0Um90YXRpb246IHJlY3RhbmdsZUdlb21ldHJ5Ll9zdFJvdGF0aW9uLAogICAgICAgICAgZ3JhbnVsYXJpdHksCiAgICAgICAgICBleHRydWRlZEhlaWdodDogbWF4SGVpZ2h0LAogICAgICAgICAgaGVpZ2h0OiBtaW5IZWlnaHQsCiAgICAgICAgICB2ZXJ0ZXhGb3JtYXQ6IFZlcnRleEZvcm1hdF9kZWZhdWx0LlBPU0lUSU9OX09OTFksCiAgICAgICAgICBzaGFkb3dWb2x1bWU6IHRydWUKICAgICAgICB9KTsKICAgICAgfTsKICAgICAgdW5yb3RhdGVkVGV4dHVyZVJlY3RhbmdsZVNjcmF0Y2ggPSBuZXcgUmVjdGFuZ2xlX2RlZmF1bHQoKTsKICAgICAgcG9pbnRzMkRTY3JhdGNoMiA9IFtuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCksIG5ldyBDYXJ0ZXNpYW4yX2RlZmF1bHQoKSwgbmV3IENhcnRlc2lhbjJfZGVmYXVsdCgpXTsKICAgICAgcm90YXRpb24yRFNjcmF0Y2gyID0gbmV3IE1hdHJpeDJfZGVmYXVsdCgpOwogICAgICByZWN0YW5nbGVDZW50ZXJTY3JhdGNoMiA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhSZWN0YW5nbGVHZW9tZXRyeS5wcm90b3R5cGUsIHsKICAgICAgICAvKioKICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAqLwogICAgICAgIHJlY3RhbmdsZTogewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQodGhpcy5fcm90YXRlZFJlY3RhbmdsZSkpIHsKICAgICAgICAgICAgICB0aGlzLl9yb3RhdGVkUmVjdGFuZ2xlID0gY29tcHV0ZVJlY3RhbmdsZTMoCiAgICAgICAgICAgICAgICB0aGlzLl9yZWN0YW5nbGUsCiAgICAgICAgICAgICAgICB0aGlzLl9ncmFudWxhcml0eSwKICAgICAgICAgICAgICAgIHRoaXMuX3JvdGF0aW9uLAogICAgICAgICAgICAgICAgdGhpcy5fZWxsaXBzb2lkCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdGhpcy5fcm90YXRlZFJlY3RhbmdsZTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIEZvciByZW1hcHBpbmcgdGV4dHVyZSBjb29yZGluYXRlcyB3aGVuIHJlbmRlcmluZyBSZWN0YW5nbGVHZW9tZXRyaWVzIGFzIEdyb3VuZFByaW1pdGl2ZXMuCiAgICAgICAgICogVGhpcyB2ZXJzaW9uIHBlcm1pdHMgc2tldyBpbiB0ZXh0dXJlcyBieSBjb21wdXRpbmcgb2Zmc2V0cyBkaXJlY3RseSBpbiBjYXJ0b2dyYXBoaWMgc3BhY2UgYW5kCiAgICAgICAgICogbW9yZSBhY2N1cmF0ZWx5IGFwcHJveGltYXRlcyByZW5kZXJpbmcgUmVjdGFuZ2xlR2VvbWV0cmllcyB3aXRoIGhlaWdodCBhcyBzdGFuZGFyZCBQcmltaXRpdmVzLgogICAgICAgICAqIEBzZWUgR2VvbWV0cnkjX3RleHR1cmVDb29yZGluYXRlUm90YXRpb25Qb2ludHMKICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAqLwogICAgICAgIHRleHR1cmVDb29yZGluYXRlUm90YXRpb25Qb2ludHM6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHRoaXMuX3RleHR1cmVDb29yZGluYXRlUm90YXRpb25Qb2ludHMpKSB7CiAgICAgICAgICAgICAgdGhpcy5fdGV4dHVyZUNvb3JkaW5hdGVSb3RhdGlvblBvaW50cyA9IHRleHR1cmVDb29yZGluYXRlUm90YXRpb25Qb2ludHMzKHRoaXMpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB0aGlzLl90ZXh0dXJlQ29vcmRpbmF0ZVJvdGF0aW9uUG9pbnRzOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICAgIFJlY3RhbmdsZUdlb21ldHJ5X2RlZmF1bHQgPSBSZWN0YW5nbGVHZW9tZXRyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZVJlY3RhbmdsZUdlb21ldHJ5LmpzCiAgdmFyIGNyZWF0ZVJlY3RhbmdsZUdlb21ldHJ5X2V4cG9ydHMgPSB7fTsKICBfX2V4cG9ydChjcmVhdGVSZWN0YW5nbGVHZW9tZXRyeV9leHBvcnRzLCB7CiAgICBkZWZhdWx0OiAoKSA9PiBjcmVhdGVSZWN0YW5nbGVHZW9tZXRyeV9kZWZhdWx0CiAgfSk7CiAgZnVuY3Rpb24gY3JlYXRlUmVjdGFuZ2xlR2VvbWV0cnkocmVjdGFuZ2xlR2VvbWV0cnksIG9mZnNldCkgewogICAgaWYgKGRlZmluZWRfZGVmYXVsdChvZmZzZXQpKSB7CiAgICAgIHJlY3RhbmdsZUdlb21ldHJ5ID0gUmVjdGFuZ2xlR2VvbWV0cnlfZGVmYXVsdC51bnBhY2socmVjdGFuZ2xlR2VvbWV0cnksIG9mZnNldCk7CiAgICB9CiAgICByZWN0YW5nbGVHZW9tZXRyeS5fZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUocmVjdGFuZ2xlR2VvbWV0cnkuX2VsbGlwc29pZCk7CiAgICByZWN0YW5nbGVHZW9tZXRyeS5fcmVjdGFuZ2xlID0gUmVjdGFuZ2xlX2RlZmF1bHQuY2xvbmUocmVjdGFuZ2xlR2VvbWV0cnkuX3JlY3RhbmdsZSk7CiAgICByZXR1cm4gUmVjdGFuZ2xlR2VvbWV0cnlfZGVmYXVsdC5jcmVhdGVHZW9tZXRyeShyZWN0YW5nbGVHZW9tZXRyeSk7CiAgfQogIHZhciBjcmVhdGVSZWN0YW5nbGVHZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X2NyZWF0ZVJlY3RhbmdsZUdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVSZWN0YW5nbGVHZW9tZXRyeS5qcyIoKSB7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBpbml0X1JlY3RhbmdsZSgpOwogICAgICBpbml0X1JlY3RhbmdsZUdlb21ldHJ5KCk7CiAgICAgIGNyZWF0ZVJlY3RhbmdsZUdlb21ldHJ5X2RlZmF1bHQgPSBjcmVhdGVSZWN0YW5nbGVHZW9tZXRyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1JlY3RhbmdsZU91dGxpbmVHZW9tZXRyeS5qcwogIGZ1bmN0aW9uIGNvbnN0cnVjdFJlY3RhbmdsZTIoZ2VvbWV0cnksIGNvbXB1dGVkT3B0aW9ucykgewogICAgY29uc3QgZWxsaXBzb2lkID0gZ2VvbWV0cnkuX2VsbGlwc29pZDsKICAgIGNvbnN0IGhlaWdodCA9IGNvbXB1dGVkT3B0aW9ucy5oZWlnaHQ7CiAgICBjb25zdCB3aWR0aCA9IGNvbXB1dGVkT3B0aW9ucy53aWR0aDsKICAgIGNvbnN0IG5vcnRoQ2FwID0gY29tcHV0ZWRPcHRpb25zLm5vcnRoQ2FwOwogICAgY29uc3Qgc291dGhDYXAgPSBjb21wdXRlZE9wdGlvbnMuc291dGhDYXA7CiAgICBsZXQgcm93SGVpZ2h0ID0gaGVpZ2h0OwogICAgbGV0IHdpZHRoTXVsdGlwbGllciA9IDI7CiAgICBsZXQgc2l6ZSA9IDA7CiAgICBsZXQgY29ybmVycyA9IDQ7CiAgICBpZiAobm9ydGhDYXApIHsKICAgICAgd2lkdGhNdWx0aXBsaWVyIC09IDE7CiAgICAgIHJvd0hlaWdodCAtPSAxOwogICAgICBzaXplICs9IDE7CiAgICAgIGNvcm5lcnMgLT0gMjsKICAgIH0KICAgIGlmIChzb3V0aENhcCkgewogICAgICB3aWR0aE11bHRpcGxpZXIgLT0gMTsKICAgICAgcm93SGVpZ2h0IC09IDE7CiAgICAgIHNpemUgKz0gMTsKICAgICAgY29ybmVycyAtPSAyOwogICAgfQogICAgc2l6ZSArPSB3aWR0aE11bHRpcGxpZXIgKiB3aWR0aCArIDIgKiByb3dIZWlnaHQgLSBjb3JuZXJzOwogICAgY29uc3QgcG9zaXRpb25zID0gbmV3IEZsb2F0NjRBcnJheShzaXplICogMyk7CiAgICBsZXQgcG9zSW5kZXggPSAwOwogICAgbGV0IHJvdyA9IDA7CiAgICBsZXQgY29sOwogICAgY29uc3QgcG9zaXRpb24gPSBwb3NpdGlvblNjcmF0Y2gzOwogICAgaWYgKG5vcnRoQ2FwKSB7CiAgICAgIFJlY3RhbmdsZUdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmNvbXB1dGVQb3NpdGlvbigKICAgICAgICBjb21wdXRlZE9wdGlvbnMsCiAgICAgICAgZWxsaXBzb2lkLAogICAgICAgIGZhbHNlLAogICAgICAgIHJvdywKICAgICAgICAwLAogICAgICAgIHBvc2l0aW9uCiAgICAgICk7CiAgICAgIHBvc2l0aW9uc1twb3NJbmRleCsrXSA9IHBvc2l0aW9uLng7CiAgICAgIHBvc2l0aW9uc1twb3NJbmRleCsrXSA9IHBvc2l0aW9uLnk7CiAgICAgIHBvc2l0aW9uc1twb3NJbmRleCsrXSA9IHBvc2l0aW9uLno7CiAgICB9IGVsc2UgewogICAgICBmb3IgKGNvbCA9IDA7IGNvbCA8IHdpZHRoOyBjb2wrKykgewogICAgICAgIFJlY3RhbmdsZUdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmNvbXB1dGVQb3NpdGlvbigKICAgICAgICAgIGNvbXB1dGVkT3B0aW9ucywKICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgIGZhbHNlLAogICAgICAgICAgcm93LAogICAgICAgICAgY29sLAogICAgICAgICAgcG9zaXRpb24KICAgICAgICApOwogICAgICAgIHBvc2l0aW9uc1twb3NJbmRleCsrXSA9IHBvc2l0aW9uLng7CiAgICAgICAgcG9zaXRpb25zW3Bvc0luZGV4KytdID0gcG9zaXRpb24ueTsKICAgICAgICBwb3NpdGlvbnNbcG9zSW5kZXgrK10gPSBwb3NpdGlvbi56OwogICAgICB9CiAgICB9CiAgICBjb2wgPSB3aWR0aCAtIDE7CiAgICBmb3IgKHJvdyA9IDE7IHJvdyA8IGhlaWdodDsgcm93KyspIHsKICAgICAgUmVjdGFuZ2xlR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuY29tcHV0ZVBvc2l0aW9uKAogICAgICAgIGNvbXB1dGVkT3B0aW9ucywKICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgZmFsc2UsCiAgICAgICAgcm93LAogICAgICAgIGNvbCwKICAgICAgICBwb3NpdGlvbgogICAgICApOwogICAgICBwb3NpdGlvbnNbcG9zSW5kZXgrK10gPSBwb3NpdGlvbi54OwogICAgICBwb3NpdGlvbnNbcG9zSW5kZXgrK10gPSBwb3NpdGlvbi55OwogICAgICBwb3NpdGlvbnNbcG9zSW5kZXgrK10gPSBwb3NpdGlvbi56OwogICAgfQogICAgcm93ID0gaGVpZ2h0IC0gMTsKICAgIGlmICghc291dGhDYXApIHsKICAgICAgZm9yIChjb2wgPSB3aWR0aCAtIDI7IGNvbCA+PSAwOyBjb2wtLSkgewogICAgICAgIFJlY3RhbmdsZUdlb21ldHJ5TGlicmFyeV9kZWZhdWx0LmNvbXB1dGVQb3NpdGlvbigKICAgICAgICAgIGNvbXB1dGVkT3B0aW9ucywKICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgIGZhbHNlLAogICAgICAgICAgcm93LAogICAgICAgICAgY29sLAogICAgICAgICAgcG9zaXRpb24KICAgICAgICApOwogICAgICAgIHBvc2l0aW9uc1twb3NJbmRleCsrXSA9IHBvc2l0aW9uLng7CiAgICAgICAgcG9zaXRpb25zW3Bvc0luZGV4KytdID0gcG9zaXRpb24ueTsKICAgICAgICBwb3NpdGlvbnNbcG9zSW5kZXgrK10gPSBwb3NpdGlvbi56OwogICAgICB9CiAgICB9CiAgICBjb2wgPSAwOwogICAgZm9yIChyb3cgPSBoZWlnaHQgLSAyOyByb3cgPiAwOyByb3ctLSkgewogICAgICBSZWN0YW5nbGVHZW9tZXRyeUxpYnJhcnlfZGVmYXVsdC5jb21wdXRlUG9zaXRpb24oCiAgICAgICAgY29tcHV0ZWRPcHRpb25zLAogICAgICAgIGVsbGlwc29pZCwKICAgICAgICBmYWxzZSwKICAgICAgICByb3csCiAgICAgICAgY29sLAogICAgICAgIHBvc2l0aW9uCiAgICAgICk7CiAgICAgIHBvc2l0aW9uc1twb3NJbmRleCsrXSA9IHBvc2l0aW9uLng7CiAgICAgIHBvc2l0aW9uc1twb3NJbmRleCsrXSA9IHBvc2l0aW9uLnk7CiAgICAgIHBvc2l0aW9uc1twb3NJbmRleCsrXSA9IHBvc2l0aW9uLno7CiAgICB9CiAgICBjb25zdCBpbmRpY2VzU2l6ZSA9IHBvc2l0aW9ucy5sZW5ndGggLyAzICogMjsKICAgIGNvbnN0IGluZGljZXMgPSBJbmRleERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheSgKICAgICAgcG9zaXRpb25zLmxlbmd0aCAvIDMsCiAgICAgIGluZGljZXNTaXplCiAgICApOwogICAgbGV0IGluZGV4ID0gMDsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9zaXRpb25zLmxlbmd0aCAvIDMgLSAxOyBpKyspIHsKICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGk7CiAgICAgIGluZGljZXNbaW5kZXgrK10gPSBpICsgMTsKICAgIH0KICAgIGluZGljZXNbaW5kZXgrK10gPSBwb3NpdGlvbnMubGVuZ3RoIC8gMyAtIDE7CiAgICBpbmRpY2VzW2luZGV4KytdID0gMDsKICAgIGNvbnN0IGdlbyA9IG5ldyBHZW9tZXRyeV9kZWZhdWx0KHsKICAgICAgYXR0cmlidXRlczogbmV3IEdlb21ldHJ5QXR0cmlidXRlc19kZWZhdWx0KCksCiAgICAgIHByaW1pdGl2ZVR5cGU6IFByaW1pdGl2ZVR5cGVfZGVmYXVsdC5MSU5FUwogICAgfSk7CiAgICBnZW8uYXR0cmlidXRlcy5wb3NpdGlvbiA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRE9VQkxFLAogICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICB2YWx1ZXM6IHBvc2l0aW9ucwogICAgfSk7CiAgICBnZW8uaW5kaWNlcyA9IGluZGljZXM7CiAgICByZXR1cm4gZ2VvOwogIH0KICBmdW5jdGlvbiBjb25zdHJ1Y3RFeHRydWRlZFJlY3RhbmdsZTIocmVjdGFuZ2xlR2VvbWV0cnksIGNvbXB1dGVkT3B0aW9ucykgewogICAgY29uc3QgbWF4SGVpZ2h0ID0gcmVjdGFuZ2xlR2VvbWV0cnkuX3N1cmZhY2VIZWlnaHQ7CiAgICBjb25zdCBtaW5IZWlnaHQgPSByZWN0YW5nbGVHZW9tZXRyeS5fZXh0cnVkZWRIZWlnaHQ7CiAgICBjb25zdCBlbGxpcHNvaWQgPSByZWN0YW5nbGVHZW9tZXRyeS5fZWxsaXBzb2lkOwogICAgY29uc3QgZ2VvID0gY29uc3RydWN0UmVjdGFuZ2xlMihyZWN0YW5nbGVHZW9tZXRyeSwgY29tcHV0ZWRPcHRpb25zKTsKICAgIGNvbnN0IGhlaWdodCA9IGNvbXB1dGVkT3B0aW9ucy5oZWlnaHQ7CiAgICBjb25zdCB3aWR0aCA9IGNvbXB1dGVkT3B0aW9ucy53aWR0aDsKICAgIGNvbnN0IHRvcFBvc2l0aW9ucyA9IFBvbHlnb25QaXBlbGluZV9kZWZhdWx0LnNjYWxlVG9HZW9kZXRpY0hlaWdodCgKICAgICAgZ2VvLmF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzLAogICAgICBtYXhIZWlnaHQsCiAgICAgIGVsbGlwc29pZCwKICAgICAgZmFsc2UKICAgICk7CiAgICBsZXQgbGVuZ3RoID0gdG9wUG9zaXRpb25zLmxlbmd0aDsKICAgIGNvbnN0IHBvc2l0aW9ucyA9IG5ldyBGbG9hdDY0QXJyYXkobGVuZ3RoICogMik7CiAgICBwb3NpdGlvbnMuc2V0KHRvcFBvc2l0aW9ucyk7CiAgICBjb25zdCBib3R0b21Qb3NpdGlvbnMgPSBQb2x5Z29uUGlwZWxpbmVfZGVmYXVsdC5zY2FsZVRvR2VvZGV0aWNIZWlnaHQoCiAgICAgIGdlby5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcywKICAgICAgbWluSGVpZ2h0LAogICAgICBlbGxpcHNvaWQKICAgICk7CiAgICBwb3NpdGlvbnMuc2V0KGJvdHRvbVBvc2l0aW9ucywgbGVuZ3RoKTsKICAgIGdlby5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcyA9IHBvc2l0aW9uczsKICAgIGNvbnN0IG5vcnRoQ2FwID0gY29tcHV0ZWRPcHRpb25zLm5vcnRoQ2FwOwogICAgY29uc3Qgc291dGhDYXAgPSBjb21wdXRlZE9wdGlvbnMuc291dGhDYXA7CiAgICBsZXQgY29ybmVycyA9IDQ7CiAgICBpZiAobm9ydGhDYXApIHsKICAgICAgY29ybmVycyAtPSAxOwogICAgfQogICAgaWYgKHNvdXRoQ2FwKSB7CiAgICAgIGNvcm5lcnMgLT0gMTsKICAgIH0KICAgIGNvbnN0IGluZGljZXNTaXplID0gKHBvc2l0aW9ucy5sZW5ndGggLyAzICsgY29ybmVycykgKiAyOwogICAgY29uc3QgaW5kaWNlcyA9IEluZGV4RGF0YXR5cGVfZGVmYXVsdC5jcmVhdGVUeXBlZEFycmF5KAogICAgICBwb3NpdGlvbnMubGVuZ3RoIC8gMywKICAgICAgaW5kaWNlc1NpemUKICAgICk7CiAgICBsZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoIC8gNjsKICAgIGxldCBpbmRleCA9IDA7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aCAtIDE7IGkrKykgewogICAgICBpbmRpY2VzW2luZGV4KytdID0gaTsKICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGkgKyAxOwogICAgICBpbmRpY2VzW2luZGV4KytdID0gaSArIGxlbmd0aDsKICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGkgKyBsZW5ndGggKyAxOwogICAgfQogICAgaW5kaWNlc1tpbmRleCsrXSA9IGxlbmd0aCAtIDE7CiAgICBpbmRpY2VzW2luZGV4KytdID0gMDsKICAgIGluZGljZXNbaW5kZXgrK10gPSBsZW5ndGggKyBsZW5ndGggLSAxOwogICAgaW5kaWNlc1tpbmRleCsrXSA9IGxlbmd0aDsKICAgIGluZGljZXNbaW5kZXgrK10gPSAwOwogICAgaW5kaWNlc1tpbmRleCsrXSA9IGxlbmd0aDsKICAgIGxldCBib3R0b21Db3JuZXI7CiAgICBpZiAobm9ydGhDYXApIHsKICAgICAgYm90dG9tQ29ybmVyID0gaGVpZ2h0IC0gMTsKICAgIH0gZWxzZSB7CiAgICAgIGNvbnN0IHRvcFJpZ2h0Q29ybmVyID0gd2lkdGggLSAxOwogICAgICBpbmRpY2VzW2luZGV4KytdID0gdG9wUmlnaHRDb3JuZXI7CiAgICAgIGluZGljZXNbaW5kZXgrK10gPSB0b3BSaWdodENvcm5lciArIGxlbmd0aDsKICAgICAgYm90dG9tQ29ybmVyID0gd2lkdGggKyBoZWlnaHQgLSAyOwogICAgfQogICAgaW5kaWNlc1tpbmRleCsrXSA9IGJvdHRvbUNvcm5lcjsKICAgIGluZGljZXNbaW5kZXgrK10gPSBib3R0b21Db3JuZXIgKyBsZW5ndGg7CiAgICBpZiAoIXNvdXRoQ2FwKSB7CiAgICAgIGNvbnN0IGJvdHRvbUxlZnRDb3JuZXIgPSB3aWR0aCArIGJvdHRvbUNvcm5lciAtIDE7CiAgICAgIGluZGljZXNbaW5kZXgrK10gPSBib3R0b21MZWZ0Q29ybmVyOwogICAgICBpbmRpY2VzW2luZGV4XSA9IGJvdHRvbUxlZnRDb3JuZXIgKyBsZW5ndGg7CiAgICB9CiAgICBnZW8uaW5kaWNlcyA9IGluZGljZXM7CiAgICByZXR1cm4gZ2VvOwogIH0KICBmdW5jdGlvbiBSZWN0YW5nbGVPdXRsaW5lR2VvbWV0cnkob3B0aW9ucykgewogICAgb3B0aW9ucyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMsIGRlZmF1bHRWYWx1ZV9kZWZhdWx0LkVNUFRZX09CSkVDVCk7CiAgICBjb25zdCByZWN0YW5nbGUgPSBvcHRpb25zLnJlY3RhbmdsZTsKICAgIGNvbnN0IGdyYW51bGFyaXR5ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoCiAgICAgIG9wdGlvbnMuZ3JhbnVsYXJpdHksCiAgICAgIE1hdGhfZGVmYXVsdC5SQURJQU5TX1BFUl9ERUdSRUUKICAgICk7CiAgICBjb25zdCBlbGxpcHNvaWQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmVsbGlwc29pZCwgRWxsaXBzb2lkX2RlZmF1bHQuZGVmYXVsdCk7CiAgICBjb25zdCByb3RhdGlvbiA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMucm90YXRpb24sIDApOwogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVjdGFuZ2xlKSkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgicmVjdGFuZ2xlIGlzIHJlcXVpcmVkLiIpOwogICAgfQogICAgUmVjdGFuZ2xlX2RlZmF1bHQuX3ZhbGlkYXRlKHJlY3RhbmdsZSk7CiAgICBpZiAocmVjdGFuZ2xlLm5vcnRoIDwgcmVjdGFuZ2xlLnNvdXRoKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICJvcHRpb25zLnJlY3RhbmdsZS5ub3J0aCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvcHRpb25zLnJlY3RhbmdsZS5zb3V0aCIKICAgICAgKTsKICAgIH0KICAgIGNvbnN0IGhlaWdodCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuaGVpZ2h0LCAwKTsKICAgIGNvbnN0IGV4dHJ1ZGVkSGVpZ2h0ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5leHRydWRlZEhlaWdodCwgaGVpZ2h0KTsKICAgIHRoaXMuX3JlY3RhbmdsZSA9IFJlY3RhbmdsZV9kZWZhdWx0LmNsb25lKHJlY3RhbmdsZSk7CiAgICB0aGlzLl9ncmFudWxhcml0eSA9IGdyYW51bGFyaXR5OwogICAgdGhpcy5fZWxsaXBzb2lkID0gZWxsaXBzb2lkOwogICAgdGhpcy5fc3VyZmFjZUhlaWdodCA9IE1hdGgubWF4KGhlaWdodCwgZXh0cnVkZWRIZWlnaHQpOwogICAgdGhpcy5fcm90YXRpb24gPSByb3RhdGlvbjsKICAgIHRoaXMuX2V4dHJ1ZGVkSGVpZ2h0ID0gTWF0aC5taW4oaGVpZ2h0LCBleHRydWRlZEhlaWdodCk7CiAgICB0aGlzLl9vZmZzZXRBdHRyaWJ1dGUgPSBvcHRpb25zLm9mZnNldEF0dHJpYnV0ZTsKICAgIHRoaXMuX3dvcmtlck5hbWUgPSAiY3JlYXRlUmVjdGFuZ2xlT3V0bGluZUdlb21ldHJ5IjsKICB9CiAgdmFyIGJvdHRvbUJvdW5kaW5nU3BoZXJlNCwgdG9wQm91bmRpbmdTcGhlcmU0LCBwb3NpdGlvblNjcmF0Y2gzLCByZWN0YW5nbGVTY3JhdGNoMiwgc2NyYXRjaFJlY3RhbmdsZTIsIHNjcmF0Y2hFbGxpcHNvaWQxMiwgc2NyYXRjaE9wdGlvbnMyMCwgbndTY3JhdGNoMiwgUmVjdGFuZ2xlT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfUmVjdGFuZ2xlT3V0bGluZUdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9SZWN0YW5nbGVPdXRsaW5lR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X0JvdW5kaW5nU3BoZXJlKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NhcnRvZ3JhcGhpYygpOwogICAgICBpbml0X0NvbXBvbmVudERhdGF0eXBlKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkKCk7CiAgICAgIGluaXRfR2VvbWV0cnkoKTsKICAgICAgaW5pdF9HZW9tZXRyeUF0dHJpYnV0ZSgpOwogICAgICBpbml0X0dlb21ldHJ5QXR0cmlidXRlcygpOwogICAgICBpbml0X0dlb21ldHJ5T2Zmc2V0QXR0cmlidXRlKCk7CiAgICAgIGluaXRfSW5kZXhEYXRhdHlwZSgpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgaW5pdF9Qb2x5Z29uUGlwZWxpbmUoKTsKICAgICAgaW5pdF9QcmltaXRpdmVUeXBlKCk7CiAgICAgIGluaXRfUmVjdGFuZ2xlKCk7CiAgICAgIGluaXRfUmVjdGFuZ2xlR2VvbWV0cnlMaWJyYXJ5KCk7CiAgICAgIGJvdHRvbUJvdW5kaW5nU3BoZXJlNCA9IG5ldyBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0KCk7CiAgICAgIHRvcEJvdW5kaW5nU3BoZXJlNCA9IG5ldyBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0KCk7CiAgICAgIHBvc2l0aW9uU2NyYXRjaDMgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHJlY3RhbmdsZVNjcmF0Y2gyID0gbmV3IFJlY3RhbmdsZV9kZWZhdWx0KCk7CiAgICAgIFJlY3RhbmdsZU91dGxpbmVHZW9tZXRyeS5wYWNrZWRMZW5ndGggPSBSZWN0YW5nbGVfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyA1OwogICAgICBSZWN0YW5nbGVPdXRsaW5lR2VvbWV0cnkucGFjayA9IGZ1bmN0aW9uKHZhbHVlLCBhcnJheSwgc3RhcnRpbmdJbmRleCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHZhbHVlKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInZhbHVlIGlzIHJlcXVpcmVkIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGFycmF5KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImFycmF5IGlzIHJlcXVpcmVkIik7CiAgICAgICAgfQogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBSZWN0YW5nbGVfZGVmYXVsdC5wYWNrKHZhbHVlLl9yZWN0YW5nbGUsIGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IFJlY3RhbmdsZV9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrKHZhbHVlLl9lbGxpcHNvaWQsIGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IEVsbGlwc29pZF9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX2dyYW51bGFyaXR5OwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fc3VyZmFjZUhlaWdodDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX3JvdGF0aW9uOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSB2YWx1ZS5fZXh0cnVkZWRIZWlnaHQ7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleF0gPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCh2YWx1ZS5fb2Zmc2V0QXR0cmlidXRlLCAtMSk7CiAgICAgICAgcmV0dXJuIGFycmF5OwogICAgICB9OwogICAgICBzY3JhdGNoUmVjdGFuZ2xlMiA9IG5ldyBSZWN0YW5nbGVfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoRWxsaXBzb2lkMTIgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZShFbGxpcHNvaWRfZGVmYXVsdC5VTklUX1NQSEVSRSk7CiAgICAgIHNjcmF0Y2hPcHRpb25zMjAgPSB7CiAgICAgICAgcmVjdGFuZ2xlOiBzY3JhdGNoUmVjdGFuZ2xlMiwKICAgICAgICBlbGxpcHNvaWQ6IHNjcmF0Y2hFbGxpcHNvaWQxMiwKICAgICAgICBncmFudWxhcml0eTogdm9pZCAwLAogICAgICAgIGhlaWdodDogdm9pZCAwLAogICAgICAgIHJvdGF0aW9uOiB2b2lkIDAsCiAgICAgICAgZXh0cnVkZWRIZWlnaHQ6IHZvaWQgMCwKICAgICAgICBvZmZzZXRBdHRyaWJ1dGU6IHZvaWQgMAogICAgICB9OwogICAgICBSZWN0YW5nbGVPdXRsaW5lR2VvbWV0cnkudW5wYWNrID0gZnVuY3Rpb24oYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGFycmF5KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImFycmF5IGlzIHJlcXVpcmVkIik7CiAgICAgICAgfQogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBjb25zdCByZWN0YW5nbGUgPSBSZWN0YW5nbGVfZGVmYXVsdC51bnBhY2soYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHNjcmF0Y2hSZWN0YW5nbGUyKTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IFJlY3RhbmdsZV9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBjb25zdCBlbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC51bnBhY2soYXJyYXksIHN0YXJ0aW5nSW5kZXgsIHNjcmF0Y2hFbGxpcHNvaWQxMik7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgY29uc3QgZ3JhbnVsYXJpdHkgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IGhlaWdodCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3Qgcm90YXRpb24gPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IGV4dHJ1ZGVkSGVpZ2h0ID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBjb25zdCBvZmZzZXRBdHRyaWJ1dGUgPSBhcnJheVtzdGFydGluZ0luZGV4XTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczIwLmdyYW51bGFyaXR5ID0gZ3JhbnVsYXJpdHk7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczIwLmhlaWdodCA9IGhlaWdodDsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMjAucm90YXRpb24gPSByb3RhdGlvbjsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMjAuZXh0cnVkZWRIZWlnaHQgPSBleHRydWRlZEhlaWdodDsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMjAub2Zmc2V0QXR0cmlidXRlID0gb2Zmc2V0QXR0cmlidXRlID09PSAtMSA/IHZvaWQgMCA6IG9mZnNldEF0dHJpYnV0ZTsKICAgICAgICAgIHJldHVybiBuZXcgUmVjdGFuZ2xlT3V0bGluZUdlb21ldHJ5KHNjcmF0Y2hPcHRpb25zMjApOwogICAgICAgIH0KICAgICAgICByZXN1bHQuX3JlY3RhbmdsZSA9IFJlY3RhbmdsZV9kZWZhdWx0LmNsb25lKHJlY3RhbmdsZSwgcmVzdWx0Ll9yZWN0YW5nbGUpOwogICAgICAgIHJlc3VsdC5fZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUoZWxsaXBzb2lkLCByZXN1bHQuX2VsbGlwc29pZCk7CiAgICAgICAgcmVzdWx0Ll9zdXJmYWNlSGVpZ2h0ID0gaGVpZ2h0OwogICAgICAgIHJlc3VsdC5fcm90YXRpb24gPSByb3RhdGlvbjsKICAgICAgICByZXN1bHQuX2V4dHJ1ZGVkSGVpZ2h0ID0gZXh0cnVkZWRIZWlnaHQ7CiAgICAgICAgcmVzdWx0Ll9vZmZzZXRBdHRyaWJ1dGUgPSBvZmZzZXRBdHRyaWJ1dGUgPT09IC0xID8gdm9pZCAwIDogb2Zmc2V0QXR0cmlidXRlOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIG53U2NyYXRjaDIgPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgUmVjdGFuZ2xlT3V0bGluZUdlb21ldHJ5LmNyZWF0ZUdlb21ldHJ5ID0gZnVuY3Rpb24ocmVjdGFuZ2xlR2VvbWV0cnkpIHsKICAgICAgICBjb25zdCByZWN0YW5nbGUgPSByZWN0YW5nbGVHZW9tZXRyeS5fcmVjdGFuZ2xlOwogICAgICAgIGNvbnN0IGVsbGlwc29pZCA9IHJlY3RhbmdsZUdlb21ldHJ5Ll9lbGxpcHNvaWQ7CiAgICAgICAgY29uc3QgY29tcHV0ZWRPcHRpb25zID0gUmVjdGFuZ2xlR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuY29tcHV0ZU9wdGlvbnMoCiAgICAgICAgICByZWN0YW5nbGUsCiAgICAgICAgICByZWN0YW5nbGVHZW9tZXRyeS5fZ3JhbnVsYXJpdHksCiAgICAgICAgICByZWN0YW5nbGVHZW9tZXRyeS5fcm90YXRpb24sCiAgICAgICAgICAwLAogICAgICAgICAgcmVjdGFuZ2xlU2NyYXRjaDIsCiAgICAgICAgICBud1NjcmF0Y2gyCiAgICAgICAgKTsKICAgICAgICBsZXQgZ2VvbWV0cnk7CiAgICAgICAgbGV0IGJvdW5kaW5nU3BoZXJlOwogICAgICAgIGlmIChNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbigKICAgICAgICAgIHJlY3RhbmdsZS5ub3J0aCwKICAgICAgICAgIHJlY3RhbmdsZS5zb3V0aCwKICAgICAgICAgIE1hdGhfZGVmYXVsdC5FUFNJTE9OMTAKICAgICAgICApIHx8IE1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKAogICAgICAgICAgcmVjdGFuZ2xlLmVhc3QsCiAgICAgICAgICByZWN0YW5nbGUud2VzdCwKICAgICAgICAgIE1hdGhfZGVmYXVsdC5FUFNJTE9OMTAKICAgICAgICApKSB7CiAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgIH0KICAgICAgICBjb25zdCBzdXJmYWNlSGVpZ2h0ID0gcmVjdGFuZ2xlR2VvbWV0cnkuX3N1cmZhY2VIZWlnaHQ7CiAgICAgICAgY29uc3QgZXh0cnVkZWRIZWlnaHQgPSByZWN0YW5nbGVHZW9tZXRyeS5fZXh0cnVkZWRIZWlnaHQ7CiAgICAgICAgY29uc3QgZXh0cnVkZSA9ICFNYXRoX2RlZmF1bHQuZXF1YWxzRXBzaWxvbigKICAgICAgICAgIHN1cmZhY2VIZWlnaHQsCiAgICAgICAgICBleHRydWRlZEhlaWdodCwKICAgICAgICAgIDAsCiAgICAgICAgICBNYXRoX2RlZmF1bHQuRVBTSUxPTjIKICAgICAgICApOwogICAgICAgIGxldCBvZmZzZXRWYWx1ZTsKICAgICAgICBpZiAoZXh0cnVkZSkgewogICAgICAgICAgZ2VvbWV0cnkgPSBjb25zdHJ1Y3RFeHRydWRlZFJlY3RhbmdsZTIocmVjdGFuZ2xlR2VvbWV0cnksIGNvbXB1dGVkT3B0aW9ucyk7CiAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHJlY3RhbmdsZUdlb21ldHJ5Ll9vZmZzZXRBdHRyaWJ1dGUpKSB7CiAgICAgICAgICAgIGNvbnN0IHNpemUgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcy5sZW5ndGggLyAzOwogICAgICAgICAgICBsZXQgb2Zmc2V0QXR0cmlidXRlID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSk7CiAgICAgICAgICAgIGlmIChyZWN0YW5nbGVHZW9tZXRyeS5fb2Zmc2V0QXR0cmlidXRlID09PSBHZW9tZXRyeU9mZnNldEF0dHJpYnV0ZV9kZWZhdWx0LlRPUCkgewogICAgICAgICAgICAgIG9mZnNldEF0dHJpYnV0ZSA9IG9mZnNldEF0dHJpYnV0ZS5maWxsKDEsIDAsIHNpemUgLyAyKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBvZmZzZXRWYWx1ZSA9IHJlY3RhbmdsZUdlb21ldHJ5Ll9vZmZzZXRBdHRyaWJ1dGUgPT09IEdlb21ldHJ5T2Zmc2V0QXR0cmlidXRlX2RlZmF1bHQuTk9ORSA/IDAgOiAxOwogICAgICAgICAgICAgIG9mZnNldEF0dHJpYnV0ZSA9IG9mZnNldEF0dHJpYnV0ZS5maWxsKG9mZnNldFZhbHVlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBnZW9tZXRyeS5hdHRyaWJ1dGVzLmFwcGx5T2Zmc2V0ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LlVOU0lHTkVEX0JZVEUsCiAgICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMSwKICAgICAgICAgICAgICB2YWx1ZXM6IG9mZnNldEF0dHJpYnV0ZQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICAgIGNvbnN0IHRvcEJTID0gQm91bmRpbmdTcGhlcmVfZGVmYXVsdC5mcm9tUmVjdGFuZ2xlM0QoCiAgICAgICAgICAgIHJlY3RhbmdsZSwKICAgICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgICBzdXJmYWNlSGVpZ2h0LAogICAgICAgICAgICB0b3BCb3VuZGluZ1NwaGVyZTQKICAgICAgICAgICk7CiAgICAgICAgICBjb25zdCBib3R0b21CUyA9IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQuZnJvbVJlY3RhbmdsZTNEKAogICAgICAgICAgICByZWN0YW5nbGUsCiAgICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgICAgZXh0cnVkZWRIZWlnaHQsCiAgICAgICAgICAgIGJvdHRvbUJvdW5kaW5nU3BoZXJlNAogICAgICAgICAgKTsKICAgICAgICAgIGJvdW5kaW5nU3BoZXJlID0gQm91bmRpbmdTcGhlcmVfZGVmYXVsdC51bmlvbih0b3BCUywgYm90dG9tQlMpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBnZW9tZXRyeSA9IGNvbnN0cnVjdFJlY3RhbmdsZTIocmVjdGFuZ2xlR2VvbWV0cnksIGNvbXB1dGVkT3B0aW9ucyk7CiAgICAgICAgICBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlcyA9IFBvbHlnb25QaXBlbGluZV9kZWZhdWx0LnNjYWxlVG9HZW9kZXRpY0hlaWdodCgKICAgICAgICAgICAgZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZXMsCiAgICAgICAgICAgIHN1cmZhY2VIZWlnaHQsCiAgICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgICAgZmFsc2UKICAgICAgICAgICk7CiAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHJlY3RhbmdsZUdlb21ldHJ5Ll9vZmZzZXRBdHRyaWJ1dGUpKSB7CiAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzLmxlbmd0aDsKICAgICAgICAgICAgb2Zmc2V0VmFsdWUgPSByZWN0YW5nbGVHZW9tZXRyeS5fb2Zmc2V0QXR0cmlidXRlID09PSBHZW9tZXRyeU9mZnNldEF0dHJpYnV0ZV9kZWZhdWx0Lk5PTkUgPyAwIDogMTsKICAgICAgICAgICAgY29uc3QgYXBwbHlPZmZzZXQgPSBuZXcgVWludDhBcnJheShsZW5ndGggLyAzKS5maWxsKG9mZnNldFZhbHVlKTsKICAgICAgICAgICAgZ2VvbWV0cnkuYXR0cmlidXRlcy5hcHBseU9mZnNldCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5VTlNJR05FRF9CWVRFLAogICAgICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDEsCiAgICAgICAgICAgICAgdmFsdWVzOiBhcHBseU9mZnNldAogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICAgIGJvdW5kaW5nU3BoZXJlID0gQm91bmRpbmdTcGhlcmVfZGVmYXVsdC5mcm9tUmVjdGFuZ2xlM0QoCiAgICAgICAgICAgIHJlY3RhbmdsZSwKICAgICAgICAgICAgZWxsaXBzb2lkLAogICAgICAgICAgICBzdXJmYWNlSGVpZ2h0CiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3IEdlb21ldHJ5X2RlZmF1bHQoewogICAgICAgICAgYXR0cmlidXRlczogZ2VvbWV0cnkuYXR0cmlidXRlcywKICAgICAgICAgIGluZGljZXM6IGdlb21ldHJ5LmluZGljZXMsCiAgICAgICAgICBwcmltaXRpdmVUeXBlOiBQcmltaXRpdmVUeXBlX2RlZmF1bHQuTElORVMsCiAgICAgICAgICBib3VuZGluZ1NwaGVyZSwKICAgICAgICAgIG9mZnNldEF0dHJpYnV0ZTogcmVjdGFuZ2xlR2VvbWV0cnkuX29mZnNldEF0dHJpYnV0ZQogICAgICAgIH0pOwogICAgICB9OwogICAgICBSZWN0YW5nbGVPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdCA9IFJlY3RhbmdsZU91dGxpbmVHZW9tZXRyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZVJlY3RhbmdsZU91dGxpbmVHZW9tZXRyeS5qcwogIHZhciBjcmVhdGVSZWN0YW5nbGVPdXRsaW5lR2VvbWV0cnlfZXhwb3J0cyA9IHt9OwogIF9fZXhwb3J0KGNyZWF0ZVJlY3RhbmdsZU91dGxpbmVHZW9tZXRyeV9leHBvcnRzLCB7CiAgICBkZWZhdWx0OiAoKSA9PiBjcmVhdGVSZWN0YW5nbGVPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdAogIH0pOwogIGZ1bmN0aW9uIGNyZWF0ZVJlY3RhbmdsZU91dGxpbmVHZW9tZXRyeShyZWN0YW5nbGVHZW9tZXRyeSwgb2Zmc2V0KSB7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG9mZnNldCkpIHsKICAgICAgcmVjdGFuZ2xlR2VvbWV0cnkgPSBSZWN0YW5nbGVPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdC51bnBhY2soCiAgICAgICAgcmVjdGFuZ2xlR2VvbWV0cnksCiAgICAgICAgb2Zmc2V0CiAgICAgICk7CiAgICB9CiAgICByZWN0YW5nbGVHZW9tZXRyeS5fZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUocmVjdGFuZ2xlR2VvbWV0cnkuX2VsbGlwc29pZCk7CiAgICByZWN0YW5nbGVHZW9tZXRyeS5fcmVjdGFuZ2xlID0gUmVjdGFuZ2xlX2RlZmF1bHQuY2xvbmUocmVjdGFuZ2xlR2VvbWV0cnkuX3JlY3RhbmdsZSk7CiAgICByZXR1cm4gUmVjdGFuZ2xlT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQuY3JlYXRlR2VvbWV0cnkocmVjdGFuZ2xlR2VvbWV0cnkpOwogIH0KICB2YXIgY3JlYXRlUmVjdGFuZ2xlT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfY3JlYXRlUmVjdGFuZ2xlT3V0bGluZUdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVSZWN0YW5nbGVPdXRsaW5lR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9SZWN0YW5nbGUoKTsKICAgICAgaW5pdF9SZWN0YW5nbGVPdXRsaW5lR2VvbWV0cnkoKTsKICAgICAgY3JlYXRlUmVjdGFuZ2xlT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQgPSBjcmVhdGVSZWN0YW5nbGVPdXRsaW5lR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9TaW1wbGVQb2x5bGluZUdlb21ldHJ5LmpzCiAgZnVuY3Rpb24gaW50ZXJwb2xhdGVDb2xvcnMyKHAwLCBwMSwgY29sb3IwLCBjb2xvcjEsIG1pbkRpc3RhbmNlLCBhcnJheSwgb2Zmc2V0KSB7CiAgICBjb25zdCBudW1Qb2ludHMgPSBQb2x5bGluZVBpcGVsaW5lX2RlZmF1bHQubnVtYmVyT2ZQb2ludHMocDAsIHAxLCBtaW5EaXN0YW5jZSk7CiAgICBsZXQgaTsKICAgIGNvbnN0IHIwID0gY29sb3IwLnJlZDsKICAgIGNvbnN0IGcwID0gY29sb3IwLmdyZWVuOwogICAgY29uc3QgYjAgPSBjb2xvcjAuYmx1ZTsKICAgIGNvbnN0IGEwID0gY29sb3IwLmFscGhhOwogICAgY29uc3QgcjEgPSBjb2xvcjEucmVkOwogICAgY29uc3QgZzEgPSBjb2xvcjEuZ3JlZW47CiAgICBjb25zdCBiMSA9IGNvbG9yMS5ibHVlOwogICAgY29uc3QgYTEgPSBjb2xvcjEuYWxwaGE7CiAgICBpZiAoQ29sb3JfZGVmYXVsdC5lcXVhbHMoY29sb3IwLCBjb2xvcjEpKSB7CiAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1Qb2ludHM7IGkrKykgewogICAgICAgIGFycmF5W29mZnNldCsrXSA9IENvbG9yX2RlZmF1bHQuZmxvYXRUb0J5dGUocjApOwogICAgICAgIGFycmF5W29mZnNldCsrXSA9IENvbG9yX2RlZmF1bHQuZmxvYXRUb0J5dGUoZzApOwogICAgICAgIGFycmF5W29mZnNldCsrXSA9IENvbG9yX2RlZmF1bHQuZmxvYXRUb0J5dGUoYjApOwogICAgICAgIGFycmF5W29mZnNldCsrXSA9IENvbG9yX2RlZmF1bHQuZmxvYXRUb0J5dGUoYTApOwogICAgICB9CiAgICAgIHJldHVybiBvZmZzZXQ7CiAgICB9CiAgICBjb25zdCByZWRQZXJWZXJ0ZXggPSAocjEgLSByMCkgLyBudW1Qb2ludHM7CiAgICBjb25zdCBncmVlblBlclZlcnRleCA9IChnMSAtIGcwKSAvIG51bVBvaW50czsKICAgIGNvbnN0IGJsdWVQZXJWZXJ0ZXggPSAoYjEgLSBiMCkgLyBudW1Qb2ludHM7CiAgICBjb25zdCBhbHBoYVBlclZlcnRleCA9IChhMSAtIGEwKSAvIG51bVBvaW50czsKICAgIGxldCBpbmRleCA9IG9mZnNldDsKICAgIGZvciAoaSA9IDA7IGkgPCBudW1Qb2ludHM7IGkrKykgewogICAgICBhcnJheVtpbmRleCsrXSA9IENvbG9yX2RlZmF1bHQuZmxvYXRUb0J5dGUocjAgKyBpICogcmVkUGVyVmVydGV4KTsKICAgICAgYXJyYXlbaW5kZXgrK10gPSBDb2xvcl9kZWZhdWx0LmZsb2F0VG9CeXRlKGcwICsgaSAqIGdyZWVuUGVyVmVydGV4KTsKICAgICAgYXJyYXlbaW5kZXgrK10gPSBDb2xvcl9kZWZhdWx0LmZsb2F0VG9CeXRlKGIwICsgaSAqIGJsdWVQZXJWZXJ0ZXgpOwogICAgICBhcnJheVtpbmRleCsrXSA9IENvbG9yX2RlZmF1bHQuZmxvYXRUb0J5dGUoYTAgKyBpICogYWxwaGFQZXJWZXJ0ZXgpOwogICAgfQogICAgcmV0dXJuIGluZGV4OwogIH0KICBmdW5jdGlvbiBTaW1wbGVQb2x5bGluZUdlb21ldHJ5KG9wdGlvbnMpIHsKICAgIG9wdGlvbnMgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLCBkZWZhdWx0VmFsdWVfZGVmYXVsdC5FTVBUWV9PQkpFQ1QpOwogICAgY29uc3QgcG9zaXRpb25zID0gb3B0aW9ucy5wb3NpdGlvbnM7CiAgICBjb25zdCBjb2xvcnMgPSBvcHRpb25zLmNvbG9yczsKICAgIGNvbnN0IGNvbG9yc1BlclZlcnRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuY29sb3JzUGVyVmVydGV4LCBmYWxzZSk7CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwb3NpdGlvbnMpIHx8IHBvc2l0aW9ucy5sZW5ndGggPCAyKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJBdCBsZWFzdCB0d28gcG9zaXRpb25zIGFyZSByZXF1aXJlZC4iKTsKICAgIH0KICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoY29sb3JzKSAmJiAoY29sb3JzUGVyVmVydGV4ICYmIGNvbG9ycy5sZW5ndGggPCBwb3NpdGlvbnMubGVuZ3RoIHx8ICFjb2xvcnNQZXJWZXJ0ZXggJiYgY29sb3JzLmxlbmd0aCA8IHBvc2l0aW9ucy5sZW5ndGggLSAxKSkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiY29sb3JzIGhhcyBhbiBpbnZhbGlkIGxlbmd0aC4iKTsKICAgIH0KICAgIHRoaXMuX3Bvc2l0aW9ucyA9IHBvc2l0aW9uczsKICAgIHRoaXMuX2NvbG9ycyA9IGNvbG9yczsKICAgIHRoaXMuX2NvbG9yc1BlclZlcnRleCA9IGNvbG9yc1BlclZlcnRleDsKICAgIHRoaXMuX2FyY1R5cGUgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmFyY1R5cGUsIEFyY1R5cGVfZGVmYXVsdC5HRU9ERVNJQyk7CiAgICB0aGlzLl9ncmFudWxhcml0eSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KAogICAgICBvcHRpb25zLmdyYW51bGFyaXR5LAogICAgICBNYXRoX2RlZmF1bHQuUkFESUFOU19QRVJfREVHUkVFCiAgICApOwogICAgdGhpcy5fZWxsaXBzb2lkID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5lbGxpcHNvaWQsIEVsbGlwc29pZF9kZWZhdWx0LmRlZmF1bHQpOwogICAgdGhpcy5fd29ya2VyTmFtZSA9ICJjcmVhdGVTaW1wbGVQb2x5bGluZUdlb21ldHJ5IjsKICAgIGxldCBudW1Db21wb25lbnRzID0gMSArIHBvc2l0aW9ucy5sZW5ndGggKiBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgbnVtQ29tcG9uZW50cyArPSBkZWZpbmVkX2RlZmF1bHQoY29sb3JzKSA/IDEgKyBjb2xvcnMubGVuZ3RoICogQ29sb3JfZGVmYXVsdC5wYWNrZWRMZW5ndGggOiAxOwogICAgdGhpcy5wYWNrZWRMZW5ndGggPSBudW1Db21wb25lbnRzICsgRWxsaXBzb2lkX2RlZmF1bHQucGFja2VkTGVuZ3RoICsgMzsKICB9CiAgdmFyIHNjcmF0Y2hBcnJheTEsIHNjcmF0Y2hBcnJheTIsIGdlbmVyYXRlQXJjT3B0aW9uc1NjcmF0Y2gsIFNpbXBsZVBvbHlsaW5lR2VvbWV0cnlfZGVmYXVsdDsKICB2YXIgaW5pdF9TaW1wbGVQb2x5bGluZUdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9TaW1wbGVQb2x5bGluZUdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9BcmNUeXBlKCk7CiAgICAgIGluaXRfQm91bmRpbmdTcGhlcmUoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ29sb3IoKTsKICAgICAgaW5pdF9Db21wb25lbnREYXRhdHlwZSgpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBpbml0X0dlb21ldHJ5KCk7CiAgICAgIGluaXRfR2VvbWV0cnlBdHRyaWJ1dGUoKTsKICAgICAgaW5pdF9HZW9tZXRyeUF0dHJpYnV0ZXMoKTsKICAgICAgaW5pdF9JbmRleERhdGF0eXBlKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X1BvbHlsaW5lUGlwZWxpbmUoKTsKICAgICAgaW5pdF9QcmltaXRpdmVUeXBlKCk7CiAgICAgIFNpbXBsZVBvbHlsaW5lR2VvbWV0cnkucGFjayA9IGZ1bmN0aW9uKHZhbHVlLCBhcnJheSwgc3RhcnRpbmdJbmRleCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHZhbHVlKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInZhbHVlIGlzIHJlcXVpcmVkIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGFycmF5KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImFycmF5IGlzIHJlcXVpcmVkIik7CiAgICAgICAgfQogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBsZXQgaTsKICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSB2YWx1ZS5fcG9zaXRpb25zOwogICAgICAgIGxldCBsZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSBsZW5ndGg7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpLCBzdGFydGluZ0luZGV4ICs9IENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGgpIHsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKHBvc2l0aW9uc1tpXSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIH0KICAgICAgICBjb25zdCBjb2xvcnMgPSB2YWx1ZS5fY29sb3JzOwogICAgICAgIGxlbmd0aCA9IGRlZmluZWRfZGVmYXVsdChjb2xvcnMpID8gY29sb3JzLmxlbmd0aCA6IDA7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IGxlbmd0aDsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2ksIHN0YXJ0aW5nSW5kZXggKz0gQ29sb3JfZGVmYXVsdC5wYWNrZWRMZW5ndGgpIHsKICAgICAgICAgIENvbG9yX2RlZmF1bHQucGFjayhjb2xvcnNbaV0sIGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICB9CiAgICAgICAgRWxsaXBzb2lkX2RlZmF1bHQucGFjayh2YWx1ZS5fZWxsaXBzb2lkLCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IHZhbHVlLl9jb2xvcnNQZXJWZXJ0ZXggPyAxIDogMDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gdmFsdWUuX2FyY1R5cGU7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleF0gPSB2YWx1ZS5fZ3JhbnVsYXJpdHk7CiAgICAgICAgcmV0dXJuIGFycmF5OwogICAgICB9OwogICAgICBTaW1wbGVQb2x5bGluZUdlb21ldHJ5LnVucGFjayA9IGZ1bmN0aW9uKGFycmF5LCBzdGFydGluZ0luZGV4LCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChhcnJheSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJhcnJheSBpcyByZXF1aXJlZCIpOwogICAgICAgIH0KICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgbGV0IGk7CiAgICAgICAgbGV0IGxlbmd0aCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gbmV3IEFycmF5KGxlbmd0aCk7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpLCBzdGFydGluZ0luZGV4ICs9IENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGgpIHsKICAgICAgICAgIHBvc2l0aW9uc1tpXSA9IENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2soYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIH0KICAgICAgICBsZW5ndGggPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IGNvbG9ycyA9IGxlbmd0aCA+IDAgPyBuZXcgQXJyYXkobGVuZ3RoKSA6IHZvaWQgMDsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2ksIHN0YXJ0aW5nSW5kZXggKz0gQ29sb3JfZGVmYXVsdC5wYWNrZWRMZW5ndGgpIHsKICAgICAgICAgIGNvbG9yc1tpXSA9IENvbG9yX2RlZmF1bHQudW5wYWNrKGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICB9CiAgICAgICAgY29uc3QgZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQudW5wYWNrKGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IEVsbGlwc29pZF9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBjb25zdCBjb2xvcnNQZXJWZXJ0ZXggPSBhcnJheVtzdGFydGluZ0luZGV4KytdID09PSAxOwogICAgICAgIGNvbnN0IGFyY1R5cGUgPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IGdyYW51bGFyaXR5ID0gYXJyYXlbc3RhcnRpbmdJbmRleF07CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmV0dXJuIG5ldyBTaW1wbGVQb2x5bGluZUdlb21ldHJ5KHsKICAgICAgICAgICAgcG9zaXRpb25zLAogICAgICAgICAgICBjb2xvcnMsCiAgICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgICAgY29sb3JzUGVyVmVydGV4LAogICAgICAgICAgICBhcmNUeXBlLAogICAgICAgICAgICBncmFudWxhcml0eQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5fcG9zaXRpb25zID0gcG9zaXRpb25zOwogICAgICAgIHJlc3VsdC5fY29sb3JzID0gY29sb3JzOwogICAgICAgIHJlc3VsdC5fZWxsaXBzb2lkID0gZWxsaXBzb2lkOwogICAgICAgIHJlc3VsdC5fY29sb3JzUGVyVmVydGV4ID0gY29sb3JzUGVyVmVydGV4OwogICAgICAgIHJlc3VsdC5fYXJjVHlwZSA9IGFyY1R5cGU7CiAgICAgICAgcmVzdWx0Ll9ncmFudWxhcml0eSA9IGdyYW51bGFyaXR5OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hBcnJheTEgPSBuZXcgQXJyYXkoMik7CiAgICAgIHNjcmF0Y2hBcnJheTIgPSBuZXcgQXJyYXkoMik7CiAgICAgIGdlbmVyYXRlQXJjT3B0aW9uc1NjcmF0Y2ggPSB7CiAgICAgICAgcG9zaXRpb25zOiBzY3JhdGNoQXJyYXkxLAogICAgICAgIGhlaWdodDogc2NyYXRjaEFycmF5MiwKICAgICAgICBlbGxpcHNvaWQ6IHZvaWQgMCwKICAgICAgICBtaW5EaXN0YW5jZTogdm9pZCAwLAogICAgICAgIGdyYW51bGFyaXR5OiB2b2lkIDAKICAgICAgfTsKICAgICAgU2ltcGxlUG9seWxpbmVHZW9tZXRyeS5jcmVhdGVHZW9tZXRyeSA9IGZ1bmN0aW9uKHNpbXBsZVBvbHlsaW5lR2VvbWV0cnkpIHsKICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSBzaW1wbGVQb2x5bGluZUdlb21ldHJ5Ll9wb3NpdGlvbnM7CiAgICAgICAgY29uc3QgY29sb3JzID0gc2ltcGxlUG9seWxpbmVHZW9tZXRyeS5fY29sb3JzOwogICAgICAgIGNvbnN0IGNvbG9yc1BlclZlcnRleCA9IHNpbXBsZVBvbHlsaW5lR2VvbWV0cnkuX2NvbG9yc1BlclZlcnRleDsKICAgICAgICBjb25zdCBhcmNUeXBlID0gc2ltcGxlUG9seWxpbmVHZW9tZXRyeS5fYXJjVHlwZTsKICAgICAgICBjb25zdCBncmFudWxhcml0eSA9IHNpbXBsZVBvbHlsaW5lR2VvbWV0cnkuX2dyYW51bGFyaXR5OwogICAgICAgIGNvbnN0IGVsbGlwc29pZCA9IHNpbXBsZVBvbHlsaW5lR2VvbWV0cnkuX2VsbGlwc29pZDsKICAgICAgICBjb25zdCBtaW5EaXN0YW5jZSA9IE1hdGhfZGVmYXVsdC5jaG9yZExlbmd0aCgKICAgICAgICAgIGdyYW51bGFyaXR5LAogICAgICAgICAgZWxsaXBzb2lkLm1heGltdW1SYWRpdXMKICAgICAgICApOwogICAgICAgIGNvbnN0IHBlclNlZ21lbnRDb2xvcnMgPSBkZWZpbmVkX2RlZmF1bHQoY29sb3JzKSAmJiAhY29sb3JzUGVyVmVydGV4OwogICAgICAgIGxldCBpOwogICAgICAgIGNvbnN0IGxlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgbGV0IHBvc2l0aW9uVmFsdWVzOwogICAgICAgIGxldCBudW1iZXJPZlBvc2l0aW9uczsKICAgICAgICBsZXQgY29sb3JWYWx1ZXM7CiAgICAgICAgbGV0IGNvbG9yOwogICAgICAgIGxldCBvZmZzZXQgPSAwOwogICAgICAgIGlmIChhcmNUeXBlID09PSBBcmNUeXBlX2RlZmF1bHQuR0VPREVTSUMgfHwgYXJjVHlwZSA9PT0gQXJjVHlwZV9kZWZhdWx0LlJIVU1CKSB7CiAgICAgICAgICBsZXQgc3ViZGl2aXNpb25TaXplOwogICAgICAgICAgbGV0IG51bWJlck9mUG9pbnRzRnVuY3Rpb247CiAgICAgICAgICBsZXQgZ2VuZXJhdGVBcmNGdW5jdGlvbjsKICAgICAgICAgIGlmIChhcmNUeXBlID09PSBBcmNUeXBlX2RlZmF1bHQuR0VPREVTSUMpIHsKICAgICAgICAgICAgc3ViZGl2aXNpb25TaXplID0gTWF0aF9kZWZhdWx0LmNob3JkTGVuZ3RoKAogICAgICAgICAgICAgIGdyYW51bGFyaXR5LAogICAgICAgICAgICAgIGVsbGlwc29pZC5tYXhpbXVtUmFkaXVzCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIG51bWJlck9mUG9pbnRzRnVuY3Rpb24gPSBQb2x5bGluZVBpcGVsaW5lX2RlZmF1bHQubnVtYmVyT2ZQb2ludHM7CiAgICAgICAgICAgIGdlbmVyYXRlQXJjRnVuY3Rpb24gPSBQb2x5bGluZVBpcGVsaW5lX2RlZmF1bHQuZ2VuZXJhdGVBcmM7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBzdWJkaXZpc2lvblNpemUgPSBncmFudWxhcml0eTsKICAgICAgICAgICAgbnVtYmVyT2ZQb2ludHNGdW5jdGlvbiA9IFBvbHlsaW5lUGlwZWxpbmVfZGVmYXVsdC5udW1iZXJPZlBvaW50c1JodW1iTGluZTsKICAgICAgICAgICAgZ2VuZXJhdGVBcmNGdW5jdGlvbiA9IFBvbHlsaW5lUGlwZWxpbmVfZGVmYXVsdC5nZW5lcmF0ZVJodW1iQXJjOwogICAgICAgICAgfQogICAgICAgICAgY29uc3QgaGVpZ2h0cyA9IFBvbHlsaW5lUGlwZWxpbmVfZGVmYXVsdC5leHRyYWN0SGVpZ2h0cyhwb3NpdGlvbnMsIGVsbGlwc29pZCk7CiAgICAgICAgICBjb25zdCBnZW5lcmF0ZUFyY09wdGlvbnMgPSBnZW5lcmF0ZUFyY09wdGlvbnNTY3JhdGNoOwogICAgICAgICAgaWYgKGFyY1R5cGUgPT09IEFyY1R5cGVfZGVmYXVsdC5HRU9ERVNJQykgewogICAgICAgICAgICBnZW5lcmF0ZUFyY09wdGlvbnMubWluRGlzdGFuY2UgPSBtaW5EaXN0YW5jZTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGdlbmVyYXRlQXJjT3B0aW9ucy5ncmFudWxhcml0eSA9IGdyYW51bGFyaXR5OwogICAgICAgICAgfQogICAgICAgICAgZ2VuZXJhdGVBcmNPcHRpb25zLmVsbGlwc29pZCA9IGVsbGlwc29pZDsKICAgICAgICAgIGlmIChwZXJTZWdtZW50Q29sb3JzKSB7CiAgICAgICAgICAgIGxldCBwb3NpdGlvbkNvdW50ID0gMDsKICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aCAtIDE7IGkrKykgewogICAgICAgICAgICAgIHBvc2l0aW9uQ291bnQgKz0gbnVtYmVyT2ZQb2ludHNGdW5jdGlvbigKICAgICAgICAgICAgICAgIHBvc2l0aW9uc1tpXSwKICAgICAgICAgICAgICAgIHBvc2l0aW9uc1tpICsgMV0sCiAgICAgICAgICAgICAgICBzdWJkaXZpc2lvblNpemUKICAgICAgICAgICAgICApICsgMTsKICAgICAgICAgICAgfQogICAgICAgICAgICBwb3NpdGlvblZhbHVlcyA9IG5ldyBGbG9hdDY0QXJyYXkocG9zaXRpb25Db3VudCAqIDMpOwogICAgICAgICAgICBjb2xvclZhbHVlcyA9IG5ldyBVaW50OEFycmF5KHBvc2l0aW9uQ291bnQgKiA0KTsKICAgICAgICAgICAgZ2VuZXJhdGVBcmNPcHRpb25zLnBvc2l0aW9ucyA9IHNjcmF0Y2hBcnJheTE7CiAgICAgICAgICAgIGdlbmVyYXRlQXJjT3B0aW9ucy5oZWlnaHQgPSBzY3JhdGNoQXJyYXkyOwogICAgICAgICAgICBsZXQgY2kgPSAwOwogICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoIC0gMTsgKytpKSB7CiAgICAgICAgICAgICAgc2NyYXRjaEFycmF5MVswXSA9IHBvc2l0aW9uc1tpXTsKICAgICAgICAgICAgICBzY3JhdGNoQXJyYXkxWzFdID0gcG9zaXRpb25zW2kgKyAxXTsKICAgICAgICAgICAgICBzY3JhdGNoQXJyYXkyWzBdID0gaGVpZ2h0c1tpXTsKICAgICAgICAgICAgICBzY3JhdGNoQXJyYXkyWzFdID0gaGVpZ2h0c1tpICsgMV07CiAgICAgICAgICAgICAgY29uc3QgcG9zID0gZ2VuZXJhdGVBcmNGdW5jdGlvbihnZW5lcmF0ZUFyY09wdGlvbnMpOwogICAgICAgICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoY29sb3JzKSkgewogICAgICAgICAgICAgICAgY29uc3Qgc2VnTGVuID0gcG9zLmxlbmd0aCAvIDM7CiAgICAgICAgICAgICAgICBjb2xvciA9IGNvbG9yc1tpXTsKICAgICAgICAgICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgc2VnTGVuOyArK2spIHsKICAgICAgICAgICAgICAgICAgY29sb3JWYWx1ZXNbY2krK10gPSBDb2xvcl9kZWZhdWx0LmZsb2F0VG9CeXRlKGNvbG9yLnJlZCk7CiAgICAgICAgICAgICAgICAgIGNvbG9yVmFsdWVzW2NpKytdID0gQ29sb3JfZGVmYXVsdC5mbG9hdFRvQnl0ZShjb2xvci5ncmVlbik7CiAgICAgICAgICAgICAgICAgIGNvbG9yVmFsdWVzW2NpKytdID0gQ29sb3JfZGVmYXVsdC5mbG9hdFRvQnl0ZShjb2xvci5ibHVlKTsKICAgICAgICAgICAgICAgICAgY29sb3JWYWx1ZXNbY2krK10gPSBDb2xvcl9kZWZhdWx0LmZsb2F0VG9CeXRlKGNvbG9yLmFscGhhKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcG9zaXRpb25WYWx1ZXMuc2V0KHBvcywgb2Zmc2V0KTsKICAgICAgICAgICAgICBvZmZzZXQgKz0gcG9zLmxlbmd0aDsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZ2VuZXJhdGVBcmNPcHRpb25zLnBvc2l0aW9ucyA9IHBvc2l0aW9uczsKICAgICAgICAgICAgZ2VuZXJhdGVBcmNPcHRpb25zLmhlaWdodCA9IGhlaWdodHM7CiAgICAgICAgICAgIHBvc2l0aW9uVmFsdWVzID0gbmV3IEZsb2F0NjRBcnJheSgKICAgICAgICAgICAgICBnZW5lcmF0ZUFyY0Z1bmN0aW9uKGdlbmVyYXRlQXJjT3B0aW9ucykKICAgICAgICAgICAgKTsKICAgICAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChjb2xvcnMpKSB7CiAgICAgICAgICAgICAgY29sb3JWYWx1ZXMgPSBuZXcgVWludDhBcnJheShwb3NpdGlvblZhbHVlcy5sZW5ndGggLyAzICogNCk7CiAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aCAtIDE7ICsraSkgewogICAgICAgICAgICAgICAgY29uc3QgcDAgPSBwb3NpdGlvbnNbaV07CiAgICAgICAgICAgICAgICBjb25zdCBwMSA9IHBvc2l0aW9uc1tpICsgMV07CiAgICAgICAgICAgICAgICBjb25zdCBjMCA9IGNvbG9yc1tpXTsKICAgICAgICAgICAgICAgIGNvbnN0IGMxID0gY29sb3JzW2kgKyAxXTsKICAgICAgICAgICAgICAgIG9mZnNldCA9IGludGVycG9sYXRlQ29sb3JzMigKICAgICAgICAgICAgICAgICAgcDAsCiAgICAgICAgICAgICAgICAgIHAxLAogICAgICAgICAgICAgICAgICBjMCwKICAgICAgICAgICAgICAgICAgYzEsCiAgICAgICAgICAgICAgICAgIG1pbkRpc3RhbmNlLAogICAgICAgICAgICAgICAgICBjb2xvclZhbHVlcywKICAgICAgICAgICAgICAgICAgb2Zmc2V0CiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBjb25zdCBsYXN0Q29sb3IgPSBjb2xvcnNbbGVuZ3RoIC0gMV07CiAgICAgICAgICAgICAgY29sb3JWYWx1ZXNbb2Zmc2V0KytdID0gQ29sb3JfZGVmYXVsdC5mbG9hdFRvQnl0ZShsYXN0Q29sb3IucmVkKTsKICAgICAgICAgICAgICBjb2xvclZhbHVlc1tvZmZzZXQrK10gPSBDb2xvcl9kZWZhdWx0LmZsb2F0VG9CeXRlKGxhc3RDb2xvci5ncmVlbik7CiAgICAgICAgICAgICAgY29sb3JWYWx1ZXNbb2Zmc2V0KytdID0gQ29sb3JfZGVmYXVsdC5mbG9hdFRvQnl0ZShsYXN0Q29sb3IuYmx1ZSk7CiAgICAgICAgICAgICAgY29sb3JWYWx1ZXNbb2Zmc2V0KytdID0gQ29sb3JfZGVmYXVsdC5mbG9hdFRvQnl0ZShsYXN0Q29sb3IuYWxwaGEpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIG51bWJlck9mUG9zaXRpb25zID0gcGVyU2VnbWVudENvbG9ycyA/IGxlbmd0aCAqIDIgLSAyIDogbGVuZ3RoOwogICAgICAgICAgcG9zaXRpb25WYWx1ZXMgPSBuZXcgRmxvYXQ2NEFycmF5KG51bWJlck9mUG9zaXRpb25zICogMyk7CiAgICAgICAgICBjb2xvclZhbHVlcyA9IGRlZmluZWRfZGVmYXVsdChjb2xvcnMpID8gbmV3IFVpbnQ4QXJyYXkobnVtYmVyT2ZQb3NpdGlvbnMgKiA0KSA6IHZvaWQgMDsKICAgICAgICAgIGxldCBwb3NpdGlvbkluZGV4ID0gMDsKICAgICAgICAgIGxldCBjb2xvckluZGV4ID0gMDsKICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgICAgICAgICBjb25zdCBwID0gcG9zaXRpb25zW2ldOwogICAgICAgICAgICBpZiAocGVyU2VnbWVudENvbG9ycyAmJiBpID4gMCkgewogICAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKHAsIHBvc2l0aW9uVmFsdWVzLCBwb3NpdGlvbkluZGV4KTsKICAgICAgICAgICAgICBwb3NpdGlvbkluZGV4ICs9IDM7CiAgICAgICAgICAgICAgY29sb3IgPSBjb2xvcnNbaSAtIDFdOwogICAgICAgICAgICAgIGNvbG9yVmFsdWVzW2NvbG9ySW5kZXgrK10gPSBDb2xvcl9kZWZhdWx0LmZsb2F0VG9CeXRlKGNvbG9yLnJlZCk7CiAgICAgICAgICAgICAgY29sb3JWYWx1ZXNbY29sb3JJbmRleCsrXSA9IENvbG9yX2RlZmF1bHQuZmxvYXRUb0J5dGUoY29sb3IuZ3JlZW4pOwogICAgICAgICAgICAgIGNvbG9yVmFsdWVzW2NvbG9ySW5kZXgrK10gPSBDb2xvcl9kZWZhdWx0LmZsb2F0VG9CeXRlKGNvbG9yLmJsdWUpOwogICAgICAgICAgICAgIGNvbG9yVmFsdWVzW2NvbG9ySW5kZXgrK10gPSBDb2xvcl9kZWZhdWx0LmZsb2F0VG9CeXRlKGNvbG9yLmFscGhhKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAocGVyU2VnbWVudENvbG9ycyAmJiBpID09PSBsZW5ndGggLSAxKSB7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2socCwgcG9zaXRpb25WYWx1ZXMsIHBvc2l0aW9uSW5kZXgpOwogICAgICAgICAgICBwb3NpdGlvbkluZGV4ICs9IDM7CiAgICAgICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoY29sb3JzKSkgewogICAgICAgICAgICAgIGNvbG9yID0gY29sb3JzW2ldOwogICAgICAgICAgICAgIGNvbG9yVmFsdWVzW2NvbG9ySW5kZXgrK10gPSBDb2xvcl9kZWZhdWx0LmZsb2F0VG9CeXRlKGNvbG9yLnJlZCk7CiAgICAgICAgICAgICAgY29sb3JWYWx1ZXNbY29sb3JJbmRleCsrXSA9IENvbG9yX2RlZmF1bHQuZmxvYXRUb0J5dGUoY29sb3IuZ3JlZW4pOwogICAgICAgICAgICAgIGNvbG9yVmFsdWVzW2NvbG9ySW5kZXgrK10gPSBDb2xvcl9kZWZhdWx0LmZsb2F0VG9CeXRlKGNvbG9yLmJsdWUpOwogICAgICAgICAgICAgIGNvbG9yVmFsdWVzW2NvbG9ySW5kZXgrK10gPSBDb2xvcl9kZWZhdWx0LmZsb2F0VG9CeXRlKGNvbG9yLmFscGhhKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlc19kZWZhdWx0KCk7CiAgICAgICAgYXR0cmlidXRlcy5wb3NpdGlvbiA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkRPVUJMRSwKICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgICB2YWx1ZXM6IHBvc2l0aW9uVmFsdWVzCiAgICAgICAgfSk7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChjb2xvcnMpKSB7CiAgICAgICAgICBhdHRyaWJ1dGVzLmNvbG9yID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5VTlNJR05FRF9CWVRFLAogICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiA0LAogICAgICAgICAgICB2YWx1ZXM6IGNvbG9yVmFsdWVzLAogICAgICAgICAgICBub3JtYWxpemU6IHRydWUKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICBudW1iZXJPZlBvc2l0aW9ucyA9IHBvc2l0aW9uVmFsdWVzLmxlbmd0aCAvIDM7CiAgICAgICAgY29uc3QgbnVtYmVyT2ZJbmRpY2VzID0gKG51bWJlck9mUG9zaXRpb25zIC0gMSkgKiAyOwogICAgICAgIGNvbnN0IGluZGljZXMgPSBJbmRleERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheSgKICAgICAgICAgIG51bWJlck9mUG9zaXRpb25zLAogICAgICAgICAgbnVtYmVyT2ZJbmRpY2VzCiAgICAgICAgKTsKICAgICAgICBsZXQgaW5kZXggPSAwOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1iZXJPZlBvc2l0aW9ucyAtIDE7ICsraSkgewogICAgICAgICAgaW5kaWNlc1tpbmRleCsrXSA9IGk7CiAgICAgICAgICBpbmRpY2VzW2luZGV4KytdID0gaSArIDE7CiAgICAgICAgfQogICAgICAgIHJldHVybiBuZXcgR2VvbWV0cnlfZGVmYXVsdCh7CiAgICAgICAgICBhdHRyaWJ1dGVzLAogICAgICAgICAgaW5kaWNlcywKICAgICAgICAgIHByaW1pdGl2ZVR5cGU6IFByaW1pdGl2ZVR5cGVfZGVmYXVsdC5MSU5FUywKICAgICAgICAgIGJvdW5kaW5nU3BoZXJlOiBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0LmZyb21Qb2ludHMocG9zaXRpb25zKQogICAgICAgIH0pOwogICAgICB9OwogICAgICBTaW1wbGVQb2x5bGluZUdlb21ldHJ5X2RlZmF1bHQgPSBTaW1wbGVQb2x5bGluZUdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlU2ltcGxlUG9seWxpbmVHZW9tZXRyeS5qcwogIHZhciBjcmVhdGVTaW1wbGVQb2x5bGluZUdlb21ldHJ5X2V4cG9ydHMgPSB7fTsKICBfX2V4cG9ydChjcmVhdGVTaW1wbGVQb2x5bGluZUdlb21ldHJ5X2V4cG9ydHMsIHsKICAgIGRlZmF1bHQ6ICgpID0+IGNyZWF0ZVNpbXBsZVBvbHlsaW5lR2VvbWV0cnlfZGVmYXVsdAogIH0pOwogIGZ1bmN0aW9uIGNyZWF0ZVNpbXBsZVBvbHlsaW5lR2VvbWV0cnkoc2ltcGxlUG9seWxpbmVHZW9tZXRyeSwgb2Zmc2V0KSB7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG9mZnNldCkpIHsKICAgICAgc2ltcGxlUG9seWxpbmVHZW9tZXRyeSA9IFNpbXBsZVBvbHlsaW5lR2VvbWV0cnlfZGVmYXVsdC51bnBhY2soCiAgICAgICAgc2ltcGxlUG9seWxpbmVHZW9tZXRyeSwKICAgICAgICBvZmZzZXQKICAgICAgKTsKICAgIH0KICAgIHNpbXBsZVBvbHlsaW5lR2VvbWV0cnkuX2VsbGlwc29pZCA9IEVsbGlwc29pZF9kZWZhdWx0LmNsb25lKAogICAgICBzaW1wbGVQb2x5bGluZUdlb21ldHJ5Ll9lbGxpcHNvaWQKICAgICk7CiAgICByZXR1cm4gU2ltcGxlUG9seWxpbmVHZW9tZXRyeV9kZWZhdWx0LmNyZWF0ZUdlb21ldHJ5KHNpbXBsZVBvbHlsaW5lR2VvbWV0cnkpOwogIH0KICB2YXIgY3JlYXRlU2ltcGxlUG9seWxpbmVHZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X2NyZWF0ZVNpbXBsZVBvbHlsaW5lR2VvbWV0cnkgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZVNpbXBsZVBvbHlsaW5lR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9TaW1wbGVQb2x5bGluZUdlb21ldHJ5KCk7CiAgICAgIGNyZWF0ZVNpbXBsZVBvbHlsaW5lR2VvbWV0cnlfZGVmYXVsdCA9IGNyZWF0ZVNpbXBsZVBvbHlsaW5lR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9TcGhlcmVHZW9tZXRyeS5qcwogIGZ1bmN0aW9uIFNwaGVyZUdlb21ldHJ5KG9wdGlvbnMpIHsKICAgIGNvbnN0IHJhZGl1cyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMucmFkaXVzLCAxKTsKICAgIGNvbnN0IHJhZGlpID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdChyYWRpdXMsIHJhZGl1cywgcmFkaXVzKTsKICAgIGNvbnN0IGVsbGlwc29pZE9wdGlvbnMgPSB7CiAgICAgIHJhZGlpLAogICAgICBzdGFja1BhcnRpdGlvbnM6IG9wdGlvbnMuc3RhY2tQYXJ0aXRpb25zLAogICAgICBzbGljZVBhcnRpdGlvbnM6IG9wdGlvbnMuc2xpY2VQYXJ0aXRpb25zLAogICAgICB2ZXJ0ZXhGb3JtYXQ6IG9wdGlvbnMudmVydGV4Rm9ybWF0CiAgICB9OwogICAgdGhpcy5fZWxsaXBzb2lkR2VvbWV0cnkgPSBuZXcgRWxsaXBzb2lkR2VvbWV0cnlfZGVmYXVsdChlbGxpcHNvaWRPcHRpb25zKTsKICAgIHRoaXMuX3dvcmtlck5hbWUgPSAiY3JlYXRlU3BoZXJlR2VvbWV0cnkiOwogIH0KICB2YXIgc2NyYXRjaEVsbGlwc29pZEdlb21ldHJ5LCBzY3JhdGNoT3B0aW9uczIxLCBTcGhlcmVHZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X1NwaGVyZUdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9TcGhlcmVHZW9tZXRyeS5qcyIoKSB7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0VsbGlwc29pZEdlb21ldHJ5KCk7CiAgICAgIGluaXRfVmVydGV4Rm9ybWF0KCk7CiAgICAgIFNwaGVyZUdlb21ldHJ5LnBhY2tlZExlbmd0aCA9IEVsbGlwc29pZEdlb21ldHJ5X2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICBTcGhlcmVHZW9tZXRyeS5wYWNrID0gZnVuY3Rpb24odmFsdWUsIGFycmF5LCBzdGFydGluZ0luZGV4KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJ2YWx1ZSIsIHZhbHVlKTsKICAgICAgICByZXR1cm4gRWxsaXBzb2lkR2VvbWV0cnlfZGVmYXVsdC5wYWNrKHZhbHVlLl9lbGxpcHNvaWRHZW9tZXRyeSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICB9OwogICAgICBzY3JhdGNoRWxsaXBzb2lkR2VvbWV0cnkgPSBuZXcgRWxsaXBzb2lkR2VvbWV0cnlfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoT3B0aW9uczIxID0gewogICAgICAgIHJhZGl1czogdm9pZCAwLAogICAgICAgIHJhZGlpOiBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCksCiAgICAgICAgdmVydGV4Rm9ybWF0OiBuZXcgVmVydGV4Rm9ybWF0X2RlZmF1bHQoKSwKICAgICAgICBzdGFja1BhcnRpdGlvbnM6IHZvaWQgMCwKICAgICAgICBzbGljZVBhcnRpdGlvbnM6IHZvaWQgMAogICAgICB9OwogICAgICBTcGhlcmVHZW9tZXRyeS51bnBhY2sgPSBmdW5jdGlvbihhcnJheSwgc3RhcnRpbmdJbmRleCwgcmVzdWx0KSB7CiAgICAgICAgY29uc3QgZWxsaXBzb2lkR2VvbWV0cnkgPSBFbGxpcHNvaWRHZW9tZXRyeV9kZWZhdWx0LnVucGFjaygKICAgICAgICAgIGFycmF5LAogICAgICAgICAgc3RhcnRpbmdJbmRleCwKICAgICAgICAgIHNjcmF0Y2hFbGxpcHNvaWRHZW9tZXRyeQogICAgICAgICk7CiAgICAgICAgc2NyYXRjaE9wdGlvbnMyMS52ZXJ0ZXhGb3JtYXQgPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5jbG9uZSgKICAgICAgICAgIGVsbGlwc29pZEdlb21ldHJ5Ll92ZXJ0ZXhGb3JtYXQsCiAgICAgICAgICBzY3JhdGNoT3B0aW9uczIxLnZlcnRleEZvcm1hdAogICAgICAgICk7CiAgICAgICAgc2NyYXRjaE9wdGlvbnMyMS5zdGFja1BhcnRpdGlvbnMgPSBlbGxpcHNvaWRHZW9tZXRyeS5fc3RhY2tQYXJ0aXRpb25zOwogICAgICAgIHNjcmF0Y2hPcHRpb25zMjEuc2xpY2VQYXJ0aXRpb25zID0gZWxsaXBzb2lkR2VvbWV0cnkuX3NsaWNlUGFydGl0aW9uczsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczIxLnJhZGl1cyA9IGVsbGlwc29pZEdlb21ldHJ5Ll9yYWRpaS54OwogICAgICAgICAgcmV0dXJuIG5ldyBTcGhlcmVHZW9tZXRyeShzY3JhdGNoT3B0aW9uczIxKTsKICAgICAgICB9CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGVsbGlwc29pZEdlb21ldHJ5Ll9yYWRpaSwgc2NyYXRjaE9wdGlvbnMyMS5yYWRpaSk7CiAgICAgICAgcmVzdWx0Ll9lbGxpcHNvaWRHZW9tZXRyeSA9IG5ldyBFbGxpcHNvaWRHZW9tZXRyeV9kZWZhdWx0KHNjcmF0Y2hPcHRpb25zMjEpOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFNwaGVyZUdlb21ldHJ5LmNyZWF0ZUdlb21ldHJ5ID0gZnVuY3Rpb24oc3BoZXJlR2VvbWV0cnkpIHsKICAgICAgICByZXR1cm4gRWxsaXBzb2lkR2VvbWV0cnlfZGVmYXVsdC5jcmVhdGVHZW9tZXRyeShzcGhlcmVHZW9tZXRyeS5fZWxsaXBzb2lkR2VvbWV0cnkpOwogICAgICB9OwogICAgICBTcGhlcmVHZW9tZXRyeV9kZWZhdWx0ID0gU3BoZXJlR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVTcGhlcmVHZW9tZXRyeS5qcwogIHZhciBjcmVhdGVTcGhlcmVHZW9tZXRyeV9leHBvcnRzID0ge307CiAgX19leHBvcnQoY3JlYXRlU3BoZXJlR2VvbWV0cnlfZXhwb3J0cywgewogICAgZGVmYXVsdDogKCkgPT4gY3JlYXRlU3BoZXJlR2VvbWV0cnlfZGVmYXVsdAogIH0pOwogIGZ1bmN0aW9uIGNyZWF0ZVNwaGVyZUdlb21ldHJ5KHNwaGVyZUdlb21ldHJ5LCBvZmZzZXQpIHsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQob2Zmc2V0KSkgewogICAgICBzcGhlcmVHZW9tZXRyeSA9IFNwaGVyZUdlb21ldHJ5X2RlZmF1bHQudW5wYWNrKHNwaGVyZUdlb21ldHJ5LCBvZmZzZXQpOwogICAgfQogICAgcmV0dXJuIFNwaGVyZUdlb21ldHJ5X2RlZmF1bHQuY3JlYXRlR2VvbWV0cnkoc3BoZXJlR2VvbWV0cnkpOwogIH0KICB2YXIgY3JlYXRlU3BoZXJlR2VvbWV0cnlfZGVmYXVsdDsKICB2YXIgaW5pdF9jcmVhdGVTcGhlcmVHZW9tZXRyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlU3BoZXJlR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9TcGhlcmVHZW9tZXRyeSgpOwogICAgICBjcmVhdGVTcGhlcmVHZW9tZXRyeV9kZWZhdWx0ID0gY3JlYXRlU3BoZXJlR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9TcGhlcmVPdXRsaW5lR2VvbWV0cnkuanMKICBmdW5jdGlvbiBTcGhlcmVPdXRsaW5lR2VvbWV0cnkob3B0aW9ucykgewogICAgY29uc3QgcmFkaXVzID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5yYWRpdXMsIDEpOwogICAgY29uc3QgcmFkaWkgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KHJhZGl1cywgcmFkaXVzLCByYWRpdXMpOwogICAgY29uc3QgZWxsaXBzb2lkT3B0aW9ucyA9IHsKICAgICAgcmFkaWksCiAgICAgIHN0YWNrUGFydGl0aW9uczogb3B0aW9ucy5zdGFja1BhcnRpdGlvbnMsCiAgICAgIHNsaWNlUGFydGl0aW9uczogb3B0aW9ucy5zbGljZVBhcnRpdGlvbnMsCiAgICAgIHN1YmRpdmlzaW9uczogb3B0aW9ucy5zdWJkaXZpc2lvbnMKICAgIH07CiAgICB0aGlzLl9lbGxpcHNvaWRHZW9tZXRyeSA9IG5ldyBFbGxpcHNvaWRPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdChlbGxpcHNvaWRPcHRpb25zKTsKICAgIHRoaXMuX3dvcmtlck5hbWUgPSAiY3JlYXRlU3BoZXJlT3V0bGluZUdlb21ldHJ5IjsKICB9CiAgdmFyIHNjcmF0Y2hFbGxpcHNvaWRHZW9tZXRyeTIsIHNjcmF0Y2hPcHRpb25zMjIsIFNwaGVyZU91dGxpbmVHZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X1NwaGVyZU91dGxpbmVHZW9tZXRyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvU3BoZXJlT3V0bGluZUdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkT3V0bGluZUdlb21ldHJ5KCk7CiAgICAgIFNwaGVyZU91dGxpbmVHZW9tZXRyeS5wYWNrZWRMZW5ndGggPSBFbGxpcHNvaWRPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgIFNwaGVyZU91dGxpbmVHZW9tZXRyeS5wYWNrID0gZnVuY3Rpb24odmFsdWUsIGFycmF5LCBzdGFydGluZ0luZGV4KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJ2YWx1ZSIsIHZhbHVlKTsKICAgICAgICByZXR1cm4gRWxsaXBzb2lkT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQucGFjaygKICAgICAgICAgIHZhbHVlLl9lbGxpcHNvaWRHZW9tZXRyeSwKICAgICAgICAgIGFycmF5LAogICAgICAgICAgc3RhcnRpbmdJbmRleAogICAgICAgICk7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hFbGxpcHNvaWRHZW9tZXRyeTIgPSBuZXcgRWxsaXBzb2lkT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaE9wdGlvbnMyMiA9IHsKICAgICAgICByYWRpdXM6IHZvaWQgMCwKICAgICAgICByYWRpaTogbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpLAogICAgICAgIHN0YWNrUGFydGl0aW9uczogdm9pZCAwLAogICAgICAgIHNsaWNlUGFydGl0aW9uczogdm9pZCAwLAogICAgICAgIHN1YmRpdmlzaW9uczogdm9pZCAwCiAgICAgIH07CiAgICAgIFNwaGVyZU91dGxpbmVHZW9tZXRyeS51bnBhY2sgPSBmdW5jdGlvbihhcnJheSwgc3RhcnRpbmdJbmRleCwgcmVzdWx0KSB7CiAgICAgICAgY29uc3QgZWxsaXBzb2lkR2VvbWV0cnkgPSBFbGxpcHNvaWRPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdC51bnBhY2soCiAgICAgICAgICBhcnJheSwKICAgICAgICAgIHN0YXJ0aW5nSW5kZXgsCiAgICAgICAgICBzY3JhdGNoRWxsaXBzb2lkR2VvbWV0cnkyCiAgICAgICAgKTsKICAgICAgICBzY3JhdGNoT3B0aW9uczIyLnN0YWNrUGFydGl0aW9ucyA9IGVsbGlwc29pZEdlb21ldHJ5Ll9zdGFja1BhcnRpdGlvbnM7CiAgICAgICAgc2NyYXRjaE9wdGlvbnMyMi5zbGljZVBhcnRpdGlvbnMgPSBlbGxpcHNvaWRHZW9tZXRyeS5fc2xpY2VQYXJ0aXRpb25zOwogICAgICAgIHNjcmF0Y2hPcHRpb25zMjIuc3ViZGl2aXNpb25zID0gZWxsaXBzb2lkR2VvbWV0cnkuX3N1YmRpdmlzaW9uczsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczIyLnJhZGl1cyA9IGVsbGlwc29pZEdlb21ldHJ5Ll9yYWRpaS54OwogICAgICAgICAgcmV0dXJuIG5ldyBTcGhlcmVPdXRsaW5lR2VvbWV0cnkoc2NyYXRjaE9wdGlvbnMyMik7CiAgICAgICAgfQogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShlbGxpcHNvaWRHZW9tZXRyeS5fcmFkaWksIHNjcmF0Y2hPcHRpb25zMjIucmFkaWkpOwogICAgICAgIHJlc3VsdC5fZWxsaXBzb2lkR2VvbWV0cnkgPSBuZXcgRWxsaXBzb2lkT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQoc2NyYXRjaE9wdGlvbnMyMik7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgU3BoZXJlT3V0bGluZUdlb21ldHJ5LmNyZWF0ZUdlb21ldHJ5ID0gZnVuY3Rpb24oc3BoZXJlR2VvbWV0cnkpIHsKICAgICAgICByZXR1cm4gRWxsaXBzb2lkT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQuY3JlYXRlR2VvbWV0cnkoCiAgICAgICAgICBzcGhlcmVHZW9tZXRyeS5fZWxsaXBzb2lkR2VvbWV0cnkKICAgICAgICApOwogICAgICB9OwogICAgICBTcGhlcmVPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdCA9IFNwaGVyZU91dGxpbmVHZW9tZXRyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZVNwaGVyZU91dGxpbmVHZW9tZXRyeS5qcwogIHZhciBjcmVhdGVTcGhlcmVPdXRsaW5lR2VvbWV0cnlfZXhwb3J0cyA9IHt9OwogIF9fZXhwb3J0KGNyZWF0ZVNwaGVyZU91dGxpbmVHZW9tZXRyeV9leHBvcnRzLCB7CiAgICBkZWZhdWx0OiAoKSA9PiBjcmVhdGVTcGhlcmVPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdAogIH0pOwogIGZ1bmN0aW9uIGNyZWF0ZVNwaGVyZU91dGxpbmVHZW9tZXRyeShzcGhlcmVHZW9tZXRyeSwgb2Zmc2V0KSB7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG9mZnNldCkpIHsKICAgICAgc3BoZXJlR2VvbWV0cnkgPSBTcGhlcmVPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdC51bnBhY2soc3BoZXJlR2VvbWV0cnksIG9mZnNldCk7CiAgICB9CiAgICByZXR1cm4gU3BoZXJlT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQuY3JlYXRlR2VvbWV0cnkoc3BoZXJlR2VvbWV0cnkpOwogIH0KICB2YXIgY3JlYXRlU3BoZXJlT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfY3JlYXRlU3BoZXJlT3V0bGluZUdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVTcGhlcmVPdXRsaW5lR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9TcGhlcmVPdXRsaW5lR2VvbWV0cnkoKTsKICAgICAgY3JlYXRlU3BoZXJlT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQgPSBjcmVhdGVTcGhlcmVPdXRsaW5lR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVWZWN0b3JUaWxlQ2xhbXBlZFBvbHlsaW5lcy5qcwogIHZhciBjcmVhdGVWZWN0b3JUaWxlQ2xhbXBlZFBvbHlsaW5lc19leHBvcnRzID0ge307CiAgX19leHBvcnQoY3JlYXRlVmVjdG9yVGlsZUNsYW1wZWRQb2x5bGluZXNfZXhwb3J0cywgewogICAgZGVmYXVsdDogKCkgPT4gY3JlYXRlVmVjdG9yVGlsZUNsYW1wZWRQb2x5bGluZXNfZGVmYXVsdAogIH0pOwogIGZ1bmN0aW9uIGRlY29kZVBvc2l0aW9ucyh1QnVmZmVyLCB2QnVmZmVyLCBoZWlnaHRCdWZmZXIsIHJlY3RhbmdsZSwgbWluaW11bUhlaWdodCwgbWF4aW11bUhlaWdodCwgZWxsaXBzb2lkKSB7CiAgICBjb25zdCBwb3NpdGlvbnNMZW5ndGggPSB1QnVmZmVyLmxlbmd0aDsKICAgIGNvbnN0IGRlY29kZWRQb3NpdGlvbnMgPSBuZXcgRmxvYXQ2NEFycmF5KHBvc2l0aW9uc0xlbmd0aCAqIDMpOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb3NpdGlvbnNMZW5ndGg7ICsraSkgewogICAgICBjb25zdCB1MyA9IHVCdWZmZXJbaV07CiAgICAgIGNvbnN0IHYzID0gdkJ1ZmZlcltpXTsKICAgICAgY29uc3QgaCA9IGhlaWdodEJ1ZmZlcltpXTsKICAgICAgY29uc3QgbG9uID0gTWF0aF9kZWZhdWx0LmxlcnAocmVjdGFuZ2xlLndlc3QsIHJlY3RhbmdsZS5lYXN0LCB1MyAvIE1BWF9TSE9SVCk7CiAgICAgIGNvbnN0IGxhdCA9IE1hdGhfZGVmYXVsdC5sZXJwKAogICAgICAgIHJlY3RhbmdsZS5zb3V0aCwKICAgICAgICByZWN0YW5nbGUubm9ydGgsCiAgICAgICAgdjMgLyBNQVhfU0hPUlQKICAgICAgKTsKICAgICAgY29uc3QgYWx0ID0gTWF0aF9kZWZhdWx0LmxlcnAobWluaW11bUhlaWdodCwgbWF4aW11bUhlaWdodCwgaCAvIE1BWF9TSE9SVCk7CiAgICAgIGNvbnN0IGNhcnRvZ3JhcGhpYzIgPSBDYXJ0b2dyYXBoaWNfZGVmYXVsdC5mcm9tUmFkaWFucygKICAgICAgICBsb24sCiAgICAgICAgbGF0LAogICAgICAgIGFsdCwKICAgICAgICBzY3JhdGNoQlZDYXJ0b2dyYXBoaWMKICAgICAgKTsKICAgICAgY29uc3QgZGVjb2RlZFBvc2l0aW9uID0gZWxsaXBzb2lkLmNhcnRvZ3JhcGhpY1RvQ2FydGVzaWFuKAogICAgICAgIGNhcnRvZ3JhcGhpYzIsCiAgICAgICAgc2NyYXRjaEVuY29kZWRQb3NpdGlvbgogICAgICApOwogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayhkZWNvZGVkUG9zaXRpb24sIGRlY29kZWRQb3NpdGlvbnMsIGkgKiAzKTsKICAgIH0KICAgIHJldHVybiBkZWNvZGVkUG9zaXRpb25zOwogIH0KICBmdW5jdGlvbiBnZXRQb3NpdGlvbk9mZnNldHMoY291bnRzKSB7CiAgICBjb25zdCBjb3VudHNMZW5ndGggPSBjb3VudHMubGVuZ3RoOwogICAgY29uc3QgcG9zaXRpb25PZmZzZXRzID0gbmV3IFVpbnQzMkFycmF5KGNvdW50c0xlbmd0aCArIDEpOwogICAgbGV0IG9mZnNldCA9IDA7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50c0xlbmd0aDsgKytpKSB7CiAgICAgIHBvc2l0aW9uT2Zmc2V0c1tpXSA9IG9mZnNldDsKICAgICAgb2Zmc2V0ICs9IGNvdW50c1tpXTsKICAgIH0KICAgIHBvc2l0aW9uT2Zmc2V0c1tjb3VudHNMZW5ndGhdID0gb2Zmc2V0OwogICAgcmV0dXJuIHBvc2l0aW9uT2Zmc2V0czsKICB9CiAgZnVuY3Rpb24gcmVtb3ZlRHVwbGljYXRlcyh1QnVmZmVyLCB2QnVmZmVyLCBoZWlnaHRCdWZmZXIsIGNvdW50cykgewogICAgY29uc3QgY291bnRzTGVuZ3RoID0gY291bnRzLmxlbmd0aDsKICAgIGNvbnN0IHBvc2l0aW9uc0xlbmd0aCA9IHVCdWZmZXIubGVuZ3RoOwogICAgY29uc3QgbWFya1JlbW92YWwgPSBuZXcgVWludDhBcnJheShwb3NpdGlvbnNMZW5ndGgpOwogICAgY29uc3QgcHJldmlvdXMgPSBwcmV2aW91c0NvbXByZXNzZWRDYXJ0b2dyYXBoaWNTY3JhdGNoOwogICAgY29uc3QgY3VycmVudCA9IGN1cnJlbnRDb21wcmVzc2VkQ2FydG9ncmFwaGljU2NyYXRjaDsKICAgIGxldCBvZmZzZXQgPSAwOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudHNMZW5ndGg7IGkrKykgewogICAgICBjb25zdCBjb3VudCA9IGNvdW50c1tpXTsKICAgICAgbGV0IHVwZGF0ZWRDb3VudCA9IGNvdW50OwogICAgICBmb3IgKGxldCBqID0gMTsgaiA8IGNvdW50OyBqKyspIHsKICAgICAgICBjb25zdCBpbmRleCA9IG9mZnNldCArIGo7CiAgICAgICAgY29uc3QgcHJldmlvdXNJbmRleCA9IGluZGV4IC0gMTsKICAgICAgICBjdXJyZW50LmxvbmdpdHVkZSA9IHVCdWZmZXJbaW5kZXhdOwogICAgICAgIGN1cnJlbnQubGF0aXR1ZGUgPSB2QnVmZmVyW2luZGV4XTsKICAgICAgICBwcmV2aW91cy5sb25naXR1ZGUgPSB1QnVmZmVyW3ByZXZpb3VzSW5kZXhdOwogICAgICAgIHByZXZpb3VzLmxhdGl0dWRlID0gdkJ1ZmZlcltwcmV2aW91c0luZGV4XTsKICAgICAgICBpZiAoQ2FydG9ncmFwaGljX2RlZmF1bHQuZXF1YWxzKGN1cnJlbnQsIHByZXZpb3VzKSkgewogICAgICAgICAgdXBkYXRlZENvdW50LS07CiAgICAgICAgICBtYXJrUmVtb3ZhbFtwcmV2aW91c0luZGV4XSA9IDE7CiAgICAgICAgfQogICAgICB9CiAgICAgIGNvdW50c1tpXSA9IHVwZGF0ZWRDb3VudDsKICAgICAgb2Zmc2V0ICs9IGNvdW50OwogICAgfQogICAgbGV0IG5leHRBdmFpbGFibGVJbmRleCA9IDA7CiAgICBmb3IgKGxldCBrID0gMDsgayA8IHBvc2l0aW9uc0xlbmd0aDsgaysrKSB7CiAgICAgIGlmIChtYXJrUmVtb3ZhbFtrXSAhPT0gMSkgewogICAgICAgIHVCdWZmZXJbbmV4dEF2YWlsYWJsZUluZGV4XSA9IHVCdWZmZXJba107CiAgICAgICAgdkJ1ZmZlcltuZXh0QXZhaWxhYmxlSW5kZXhdID0gdkJ1ZmZlcltrXTsKICAgICAgICBoZWlnaHRCdWZmZXJbbmV4dEF2YWlsYWJsZUluZGV4XSA9IGhlaWdodEJ1ZmZlcltrXTsKICAgICAgICBuZXh0QXZhaWxhYmxlSW5kZXgrKzsKICAgICAgfQogICAgfQogIH0KICBmdW5jdGlvbiBWZXJ0ZXhBdHRyaWJ1dGVzQW5kSW5kaWNlcyh2b2x1bWVzQ291bnQpIHsKICAgIGNvbnN0IHZlcnRleENvdW50ID0gdm9sdW1lc0NvdW50ICogODsKICAgIGNvbnN0IHZlYzNGbG9hdHMgPSB2ZXJ0ZXhDb3VudCAqIDM7CiAgICBjb25zdCB2ZWM0RmxvYXRzID0gdmVydGV4Q291bnQgKiA0OwogICAgdGhpcy5zdGFydEVsbGlwc29pZE5vcm1hbHMgPSBuZXcgRmxvYXQzMkFycmF5KHZlYzNGbG9hdHMpOwogICAgdGhpcy5lbmRFbGxpcHNvaWROb3JtYWxzID0gbmV3IEZsb2F0MzJBcnJheSh2ZWMzRmxvYXRzKTsKICAgIHRoaXMuc3RhcnRQb3NpdGlvbkFuZEhlaWdodHMgPSBuZXcgRmxvYXQzMkFycmF5KHZlYzRGbG9hdHMpOwogICAgdGhpcy5zdGFydEZhY2VOb3JtYWxBbmRWZXJ0ZXhDb3JuZXJJZHMgPSBuZXcgRmxvYXQzMkFycmF5KHZlYzRGbG9hdHMpOwogICAgdGhpcy5lbmRQb3NpdGlvbkFuZEhlaWdodHMgPSBuZXcgRmxvYXQzMkFycmF5KHZlYzRGbG9hdHMpOwogICAgdGhpcy5lbmRGYWNlTm9ybWFsQW5kSGFsZldpZHRocyA9IG5ldyBGbG9hdDMyQXJyYXkodmVjNEZsb2F0cyk7CiAgICB0aGlzLnZlcnRleEJhdGNoSWRzID0gbmV3IFVpbnQxNkFycmF5KHZlcnRleENvdW50KTsKICAgIHRoaXMuaW5kaWNlcyA9IEluZGV4RGF0YXR5cGVfZGVmYXVsdC5jcmVhdGVUeXBlZEFycmF5KHZlcnRleENvdW50LCAzNiAqIHZvbHVtZXNDb3VudCk7CiAgICB0aGlzLnZlYzNPZmZzZXQgPSAwOwogICAgdGhpcy52ZWM0T2Zmc2V0ID0gMDsKICAgIHRoaXMuYmF0Y2hJZE9mZnNldCA9IDA7CiAgICB0aGlzLmluZGV4T2Zmc2V0ID0gMDsKICAgIHRoaXMudm9sdW1lU3RhcnRJbmRleCA9IDA7CiAgfQogIGZ1bmN0aW9uIGNvbXB1dGVNaXRlcmVkTm9ybWFsKHByZXZpb3VzUG9zaXRpb24sIHBvc2l0aW9uLCBuZXh0UG9zaXRpb24sIGVsbGlwc29pZFN1cmZhY2VOb3JtYWwsIHJlc3VsdCkgewogICAgY29uc3QgdG93YXJkTmV4dCA9IENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdCgKICAgICAgbmV4dFBvc2l0aW9uLAogICAgICBwb3NpdGlvbiwKICAgICAgdG93YXJkTmV4dFNjcmF0Y2gKICAgICk7CiAgICBsZXQgdG93YXJkQ3VyciA9IENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdCgKICAgICAgcG9zaXRpb24sCiAgICAgIHByZXZpb3VzUG9zaXRpb24sCiAgICAgIHRvd2FyZEN1cnJTY3JhdGNoCiAgICApOwogICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSh0b3dhcmROZXh0LCB0b3dhcmROZXh0KTsKICAgIENhcnRlc2lhbjNfZGVmYXVsdC5ub3JtYWxpemUodG93YXJkQ3VyciwgdG93YXJkQ3Vycik7CiAgICBpZiAoQ2FydGVzaWFuM19kZWZhdWx0LmRvdCh0b3dhcmROZXh0LCB0b3dhcmRDdXJyKSA8IE1JVEVSX0JSRUFLKSB7CiAgICAgIHRvd2FyZEN1cnIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubXVsdGlwbHlCeVNjYWxhcigKICAgICAgICB0b3dhcmRDdXJyLAogICAgICAgIC0xLAogICAgICAgIHRvd2FyZEN1cnJTY3JhdGNoCiAgICAgICk7CiAgICB9CiAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKHRvd2FyZE5leHQsIHRvd2FyZEN1cnIsIHJlc3VsdCk7CiAgICBpZiAoQ2FydGVzaWFuM19kZWZhdWx0LmVxdWFscyhyZXN1bHQsIENhcnRlc2lhbjNfZGVmYXVsdC5aRVJPKSkgewogICAgICByZXN1bHQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QocHJldmlvdXNQb3NpdGlvbiwgcG9zaXRpb24pOwogICAgfQogICAgQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKHJlc3VsdCwgZWxsaXBzb2lkU3VyZmFjZU5vcm1hbCwgcmVzdWx0KTsKICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyhlbGxpcHNvaWRTdXJmYWNlTm9ybWFsLCByZXN1bHQsIHJlc3VsdCk7CiAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKHJlc3VsdCwgcmVzdWx0KTsKICAgIHJldHVybiByZXN1bHQ7CiAgfQogIGZ1bmN0aW9uIGNyZWF0ZVZlY3RvclRpbGVDbGFtcGVkUG9seWxpbmVzKHBhcmFtZXRlcnMsIHRyYW5zZmVyYWJsZU9iamVjdHMpIHsKICAgIGNvbnN0IGVuY29kZWRQb3NpdGlvbnMgPSBuZXcgVWludDE2QXJyYXkocGFyYW1ldGVycy5wb3NpdGlvbnMpOwogICAgY29uc3Qgd2lkdGhzID0gbmV3IFVpbnQxNkFycmF5KHBhcmFtZXRlcnMud2lkdGhzKTsKICAgIGNvbnN0IGNvdW50cyA9IG5ldyBVaW50MzJBcnJheShwYXJhbWV0ZXJzLmNvdW50cyk7CiAgICBjb25zdCBiYXRjaElkcyA9IG5ldyBVaW50MTZBcnJheShwYXJhbWV0ZXJzLmJhdGNoSWRzKTsKICAgIGNvbnN0IHJlY3RhbmdsZSA9IHNjcmF0Y2hSZWN0YW5nbGUzOwogICAgY29uc3QgZWxsaXBzb2lkID0gc2NyYXRjaEVsbGlwc29pZDEzOwogICAgY29uc3QgY2VudGVyID0gc2NyYXRjaENlbnRlcjQ7CiAgICBjb25zdCBwYWNrZWRCdWZmZXIgPSBuZXcgRmxvYXQ2NEFycmF5KHBhcmFtZXRlcnMucGFja2VkQnVmZmVyKTsKICAgIGxldCBvZmZzZXQgPSAwOwogICAgY29uc3QgbWluaW11bUhlaWdodCA9IHBhY2tlZEJ1ZmZlcltvZmZzZXQrK107CiAgICBjb25zdCBtYXhpbXVtSGVpZ2h0ID0gcGFja2VkQnVmZmVyW29mZnNldCsrXTsKICAgIFJlY3RhbmdsZV9kZWZhdWx0LnVucGFjayhwYWNrZWRCdWZmZXIsIG9mZnNldCwgcmVjdGFuZ2xlKTsKICAgIG9mZnNldCArPSBSZWN0YW5nbGVfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICBFbGxpcHNvaWRfZGVmYXVsdC51bnBhY2socGFja2VkQnVmZmVyLCBvZmZzZXQsIGVsbGlwc29pZCk7CiAgICBvZmZzZXQgKz0gRWxsaXBzb2lkX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjayhwYWNrZWRCdWZmZXIsIG9mZnNldCwgY2VudGVyKTsKICAgIGxldCBpOwogICAgbGV0IHBvc2l0aW9uc0xlbmd0aCA9IGVuY29kZWRQb3NpdGlvbnMubGVuZ3RoIC8gMzsKICAgIGNvbnN0IHVCdWZmZXIgPSBlbmNvZGVkUG9zaXRpb25zLnN1YmFycmF5KDAsIHBvc2l0aW9uc0xlbmd0aCk7CiAgICBjb25zdCB2QnVmZmVyID0gZW5jb2RlZFBvc2l0aW9ucy5zdWJhcnJheSgKICAgICAgcG9zaXRpb25zTGVuZ3RoLAogICAgICAyICogcG9zaXRpb25zTGVuZ3RoCiAgICApOwogICAgY29uc3QgaGVpZ2h0QnVmZmVyID0gZW5jb2RlZFBvc2l0aW9ucy5zdWJhcnJheSgKICAgICAgMiAqIHBvc2l0aW9uc0xlbmd0aCwKICAgICAgMyAqIHBvc2l0aW9uc0xlbmd0aAogICAgKTsKICAgIEF0dHJpYnV0ZUNvbXByZXNzaW9uX2RlZmF1bHQuemlnWmFnRGVsdGFEZWNvZGUodUJ1ZmZlciwgdkJ1ZmZlciwgaGVpZ2h0QnVmZmVyKTsKICAgIHJlbW92ZUR1cGxpY2F0ZXModUJ1ZmZlciwgdkJ1ZmZlciwgaGVpZ2h0QnVmZmVyLCBjb3VudHMpOwogICAgY29uc3QgY291bnRzTGVuZ3RoID0gY291bnRzLmxlbmd0aDsKICAgIGxldCB2b2x1bWVzQ291bnQgPSAwOwogICAgZm9yIChpID0gMDsgaSA8IGNvdW50c0xlbmd0aDsgaSsrKSB7CiAgICAgIGNvbnN0IHBvbHlsaW5lUG9zaXRpb25Db3VudCA9IGNvdW50c1tpXTsKICAgICAgdm9sdW1lc0NvdW50ICs9IHBvbHlsaW5lUG9zaXRpb25Db3VudCAtIDE7CiAgICB9CiAgICBjb25zdCBhdHRyaWJzQW5kSW5kaWNlcyA9IG5ldyBWZXJ0ZXhBdHRyaWJ1dGVzQW5kSW5kaWNlcyh2b2x1bWVzQ291bnQpOwogICAgY29uc3QgcG9zaXRpb25zID0gZGVjb2RlUG9zaXRpb25zKAogICAgICB1QnVmZmVyLAogICAgICB2QnVmZmVyLAogICAgICBoZWlnaHRCdWZmZXIsCiAgICAgIHJlY3RhbmdsZSwKICAgICAgbWluaW11bUhlaWdodCwKICAgICAgbWF4aW11bUhlaWdodCwKICAgICAgZWxsaXBzb2lkLAogICAgICBjZW50ZXIKICAgICk7CiAgICBwb3NpdGlvbnNMZW5ndGggPSB1QnVmZmVyLmxlbmd0aDsKICAgIGNvbnN0IHBvc2l0aW9uc1JUQyA9IG5ldyBGbG9hdDMyQXJyYXkocG9zaXRpb25zTGVuZ3RoICogMyk7CiAgICBmb3IgKGkgPSAwOyBpIDwgcG9zaXRpb25zTGVuZ3RoOyArK2kpIHsKICAgICAgcG9zaXRpb25zUlRDW2kgKiAzXSA9IHBvc2l0aW9uc1tpICogM10gLSBjZW50ZXIueDsKICAgICAgcG9zaXRpb25zUlRDW2kgKiAzICsgMV0gPSBwb3NpdGlvbnNbaSAqIDMgKyAxXSAtIGNlbnRlci55OwogICAgICBwb3NpdGlvbnNSVENbaSAqIDMgKyAyXSA9IHBvc2l0aW9uc1tpICogMyArIDJdIC0gY2VudGVyLno7CiAgICB9CiAgICBsZXQgY3VycmVudFBvc2l0aW9uSW5kZXggPSAwOwogICAgbGV0IGN1cnJlbnRIZWlnaHRJbmRleCA9IDA7CiAgICBmb3IgKGkgPSAwOyBpIDwgY291bnRzTGVuZ3RoOyBpKyspIHsKICAgICAgY29uc3QgcG9seWxpbmVWb2x1bWVDb3VudCA9IGNvdW50c1tpXSAtIDE7CiAgICAgIGNvbnN0IGhhbGZXaWR0aCA9IHdpZHRoc1tpXSAqIDAuNTsKICAgICAgY29uc3QgYmF0Y2hJZCA9IGJhdGNoSWRzW2ldOwogICAgICBjb25zdCB2b2x1bWVGaXJzdFBvc2l0aW9uSW5kZXggPSBjdXJyZW50UG9zaXRpb25JbmRleDsKICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBwb2x5bGluZVZvbHVtZUNvdW50OyBqKyspIHsKICAgICAgICBjb25zdCB2b2x1bWVTdGFydCA9IENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2soCiAgICAgICAgICBwb3NpdGlvbnNSVEMsCiAgICAgICAgICBjdXJyZW50UG9zaXRpb25JbmRleCwKICAgICAgICAgIHNjcmF0Y2hQMAogICAgICAgICk7CiAgICAgICAgY29uc3Qgdm9sdW1lRW5kID0gQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjaygKICAgICAgICAgIHBvc2l0aW9uc1JUQywKICAgICAgICAgIGN1cnJlbnRQb3NpdGlvbkluZGV4ICsgMywKICAgICAgICAgIHNjcmF0Y2hQMQogICAgICAgICk7CiAgICAgICAgbGV0IHN0YXJ0SGVpZ2h0ID0gaGVpZ2h0QnVmZmVyW2N1cnJlbnRIZWlnaHRJbmRleF07CiAgICAgICAgbGV0IGVuZEhlaWdodCA9IGhlaWdodEJ1ZmZlcltjdXJyZW50SGVpZ2h0SW5kZXggKyAxXTsKICAgICAgICBzdGFydEhlaWdodCA9IE1hdGhfZGVmYXVsdC5sZXJwKAogICAgICAgICAgbWluaW11bUhlaWdodCwKICAgICAgICAgIG1heGltdW1IZWlnaHQsCiAgICAgICAgICBzdGFydEhlaWdodCAvIE1BWF9TSE9SVAogICAgICAgICk7CiAgICAgICAgZW5kSGVpZ2h0ID0gTWF0aF9kZWZhdWx0LmxlcnAoCiAgICAgICAgICBtaW5pbXVtSGVpZ2h0LAogICAgICAgICAgbWF4aW11bUhlaWdodCwKICAgICAgICAgIGVuZEhlaWdodCAvIE1BWF9TSE9SVAogICAgICAgICk7CiAgICAgICAgY3VycmVudEhlaWdodEluZGV4Kys7CiAgICAgICAgbGV0IHByZVN0YXJ0ID0gc2NyYXRjaFByZXY7CiAgICAgICAgbGV0IHBvc3RFbmQgPSBzY3JhdGNoTmV4dDsKICAgICAgICBpZiAoaiA9PT0gMCkgewogICAgICAgICAgY29uc3QgZmluYWxQb3NpdGlvbkluZGV4ID0gdm9sdW1lRmlyc3RQb3NpdGlvbkluZGV4ICsgcG9seWxpbmVWb2x1bWVDb3VudCAqIDM7CiAgICAgICAgICBjb25zdCBmaW5hbFBvc2l0aW9uID0gQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjaygKICAgICAgICAgICAgcG9zaXRpb25zUlRDLAogICAgICAgICAgICBmaW5hbFBvc2l0aW9uSW5kZXgsCiAgICAgICAgICAgIHNjcmF0Y2hQcmV2CiAgICAgICAgICApOwogICAgICAgICAgaWYgKENhcnRlc2lhbjNfZGVmYXVsdC5lcXVhbHMoZmluYWxQb3NpdGlvbiwgdm9sdW1lU3RhcnQpKSB7CiAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2socG9zaXRpb25zUlRDLCBmaW5hbFBvc2l0aW9uSW5kZXggLSAzLCBwcmVTdGFydCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBjb25zdCBvZmZzZXRQYXN0U3RhcnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoCiAgICAgICAgICAgICAgdm9sdW1lU3RhcnQsCiAgICAgICAgICAgICAgdm9sdW1lRW5kLAogICAgICAgICAgICAgIHNjcmF0Y2hQcmV2CiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHByZVN0YXJ0ID0gQ2FydGVzaWFuM19kZWZhdWx0LmFkZChvZmZzZXRQYXN0U3RhcnQsIHZvbHVtZVN0YXJ0LCBzY3JhdGNoUHJldik7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2socG9zaXRpb25zUlRDLCBjdXJyZW50UG9zaXRpb25JbmRleCAtIDMsIHByZVN0YXJ0KTsKICAgICAgICB9CiAgICAgICAgaWYgKGogPT09IHBvbHlsaW5lVm9sdW1lQ291bnQgLSAxKSB7CiAgICAgICAgICBjb25zdCBmaXJzdFBvc2l0aW9uID0gQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjaygKICAgICAgICAgICAgcG9zaXRpb25zUlRDLAogICAgICAgICAgICB2b2x1bWVGaXJzdFBvc2l0aW9uSW5kZXgsCiAgICAgICAgICAgIHNjcmF0Y2hOZXh0CiAgICAgICAgICApOwogICAgICAgICAgaWYgKENhcnRlc2lhbjNfZGVmYXVsdC5lcXVhbHMoZmlyc3RQb3NpdGlvbiwgdm9sdW1lRW5kKSkgewogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKAogICAgICAgICAgICAgIHBvc2l0aW9uc1JUQywKICAgICAgICAgICAgICB2b2x1bWVGaXJzdFBvc2l0aW9uSW5kZXggKyAzLAogICAgICAgICAgICAgIHBvc3RFbmQKICAgICAgICAgICAgKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNvbnN0IG9mZnNldFBhc3RFbmQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoCiAgICAgICAgICAgICAgdm9sdW1lRW5kLAogICAgICAgICAgICAgIHZvbHVtZVN0YXJ0LAogICAgICAgICAgICAgIHNjcmF0Y2hOZXh0CiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHBvc3RFbmQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKG9mZnNldFBhc3RFbmQsIHZvbHVtZUVuZCwgc2NyYXRjaE5leHQpOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKHBvc2l0aW9uc1JUQywgY3VycmVudFBvc2l0aW9uSW5kZXggKyA2LCBwb3N0RW5kKTsKICAgICAgICB9CiAgICAgICAgYXR0cmlic0FuZEluZGljZXMuYWRkVm9sdW1lKAogICAgICAgICAgcHJlU3RhcnQsCiAgICAgICAgICB2b2x1bWVTdGFydCwKICAgICAgICAgIHZvbHVtZUVuZCwKICAgICAgICAgIHBvc3RFbmQsCiAgICAgICAgICBzdGFydEhlaWdodCwKICAgICAgICAgIGVuZEhlaWdodCwKICAgICAgICAgIGhhbGZXaWR0aCwKICAgICAgICAgIGJhdGNoSWQsCiAgICAgICAgICBjZW50ZXIsCiAgICAgICAgICBlbGxpcHNvaWQKICAgICAgICApOwogICAgICAgIGN1cnJlbnRQb3NpdGlvbkluZGV4ICs9IDM7CiAgICAgIH0KICAgICAgY3VycmVudFBvc2l0aW9uSW5kZXggKz0gMzsKICAgICAgY3VycmVudEhlaWdodEluZGV4Kys7CiAgICB9CiAgICBjb25zdCBpbmRpY2VzID0gYXR0cmlic0FuZEluZGljZXMuaW5kaWNlczsKICAgIHRyYW5zZmVyYWJsZU9iamVjdHMucHVzaChhdHRyaWJzQW5kSW5kaWNlcy5zdGFydEVsbGlwc29pZE5vcm1hbHMuYnVmZmVyKTsKICAgIHRyYW5zZmVyYWJsZU9iamVjdHMucHVzaChhdHRyaWJzQW5kSW5kaWNlcy5lbmRFbGxpcHNvaWROb3JtYWxzLmJ1ZmZlcik7CiAgICB0cmFuc2ZlcmFibGVPYmplY3RzLnB1c2goYXR0cmlic0FuZEluZGljZXMuc3RhcnRQb3NpdGlvbkFuZEhlaWdodHMuYnVmZmVyKTsKICAgIHRyYW5zZmVyYWJsZU9iamVjdHMucHVzaCgKICAgICAgYXR0cmlic0FuZEluZGljZXMuc3RhcnRGYWNlTm9ybWFsQW5kVmVydGV4Q29ybmVySWRzLmJ1ZmZlcgogICAgKTsKICAgIHRyYW5zZmVyYWJsZU9iamVjdHMucHVzaChhdHRyaWJzQW5kSW5kaWNlcy5lbmRQb3NpdGlvbkFuZEhlaWdodHMuYnVmZmVyKTsKICAgIHRyYW5zZmVyYWJsZU9iamVjdHMucHVzaChhdHRyaWJzQW5kSW5kaWNlcy5lbmRGYWNlTm9ybWFsQW5kSGFsZldpZHRocy5idWZmZXIpOwogICAgdHJhbnNmZXJhYmxlT2JqZWN0cy5wdXNoKGF0dHJpYnNBbmRJbmRpY2VzLnZlcnRleEJhdGNoSWRzLmJ1ZmZlcik7CiAgICB0cmFuc2ZlcmFibGVPYmplY3RzLnB1c2goaW5kaWNlcy5idWZmZXIpOwogICAgbGV0IHJlc3VsdHMgPSB7CiAgICAgIGluZGV4RGF0YXR5cGU6IGluZGljZXMuQllURVNfUEVSX0VMRU1FTlQgPT09IDIgPyBJbmRleERhdGF0eXBlX2RlZmF1bHQuVU5TSUdORURfU0hPUlQgOiBJbmRleERhdGF0eXBlX2RlZmF1bHQuVU5TSUdORURfSU5ULAogICAgICBzdGFydEVsbGlwc29pZE5vcm1hbHM6IGF0dHJpYnNBbmRJbmRpY2VzLnN0YXJ0RWxsaXBzb2lkTm9ybWFscy5idWZmZXIsCiAgICAgIGVuZEVsbGlwc29pZE5vcm1hbHM6IGF0dHJpYnNBbmRJbmRpY2VzLmVuZEVsbGlwc29pZE5vcm1hbHMuYnVmZmVyLAogICAgICBzdGFydFBvc2l0aW9uQW5kSGVpZ2h0czogYXR0cmlic0FuZEluZGljZXMuc3RhcnRQb3NpdGlvbkFuZEhlaWdodHMuYnVmZmVyLAogICAgICBzdGFydEZhY2VOb3JtYWxBbmRWZXJ0ZXhDb3JuZXJJZHM6IGF0dHJpYnNBbmRJbmRpY2VzLnN0YXJ0RmFjZU5vcm1hbEFuZFZlcnRleENvcm5lcklkcy5idWZmZXIsCiAgICAgIGVuZFBvc2l0aW9uQW5kSGVpZ2h0czogYXR0cmlic0FuZEluZGljZXMuZW5kUG9zaXRpb25BbmRIZWlnaHRzLmJ1ZmZlciwKICAgICAgZW5kRmFjZU5vcm1hbEFuZEhhbGZXaWR0aHM6IGF0dHJpYnNBbmRJbmRpY2VzLmVuZEZhY2VOb3JtYWxBbmRIYWxmV2lkdGhzLmJ1ZmZlciwKICAgICAgdmVydGV4QmF0Y2hJZHM6IGF0dHJpYnNBbmRJbmRpY2VzLnZlcnRleEJhdGNoSWRzLmJ1ZmZlciwKICAgICAgaW5kaWNlczogaW5kaWNlcy5idWZmZXIKICAgIH07CiAgICBpZiAocGFyYW1ldGVycy5rZWVwRGVjb2RlZFBvc2l0aW9ucykgewogICAgICBjb25zdCBwb3NpdGlvbk9mZnNldHMgPSBnZXRQb3NpdGlvbk9mZnNldHMoY291bnRzKTsKICAgICAgdHJhbnNmZXJhYmxlT2JqZWN0cy5wdXNoKHBvc2l0aW9ucy5idWZmZXIsIHBvc2l0aW9uT2Zmc2V0cy5idWZmZXIpOwogICAgICByZXN1bHRzID0gY29tYmluZV9kZWZhdWx0KHJlc3VsdHMsIHsKICAgICAgICBkZWNvZGVkUG9zaXRpb25zOiBwb3NpdGlvbnMuYnVmZmVyLAogICAgICAgIGRlY29kZWRQb3NpdGlvbk9mZnNldHM6IHBvc2l0aW9uT2Zmc2V0cy5idWZmZXIKICAgICAgfSk7CiAgICB9CiAgICByZXR1cm4gcmVzdWx0czsKICB9CiAgdmFyIE1BWF9TSE9SVCwgTUlURVJfQlJFQUssIHNjcmF0Y2hCVkNhcnRvZ3JhcGhpYywgc2NyYXRjaEVuY29kZWRQb3NpdGlvbiwgcHJldmlvdXNDb21wcmVzc2VkQ2FydG9ncmFwaGljU2NyYXRjaCwgY3VycmVudENvbXByZXNzZWRDYXJ0b2dyYXBoaWNTY3JhdGNoLCB0b3dhcmRDdXJyU2NyYXRjaCwgdG93YXJkTmV4dFNjcmF0Y2gsIFJFRkVSRU5DRV9JTkRJQ0VTMiwgUkVGRVJFTkNFX0lORElDRVNfTEVOR1RIMiwgcG9zaXRpb25TY3JhdGNoNCwgc2NyYXRjaFN0YXJ0RWxsaXBzb2lkTm9ybWFsLCBzY3JhdGNoU3RhcnRGYWNlTm9ybWFsLCBzY3JhdGNoRW5kRWxsaXBzb2lkTm9ybWFsLCBzY3JhdGNoRW5kRmFjZU5vcm1hbCwgc2NyYXRjaFJlY3RhbmdsZTMsIHNjcmF0Y2hFbGxpcHNvaWQxMywgc2NyYXRjaENlbnRlcjQsIHNjcmF0Y2hQcmV2LCBzY3JhdGNoUDAsIHNjcmF0Y2hQMSwgc2NyYXRjaE5leHQsIGNyZWF0ZVZlY3RvclRpbGVDbGFtcGVkUG9seWxpbmVzX2RlZmF1bHQ7CiAgdmFyIGluaXRfY3JlYXRlVmVjdG9yVGlsZUNsYW1wZWRQb2x5bGluZXMgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZVZlY3RvclRpbGVDbGFtcGVkUG9seWxpbmVzLmpzIigpIHsKICAgICAgaW5pdF9BdHRyaWJ1dGVDb21wcmVzc2lvbigpOwogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DYXJ0b2dyYXBoaWMoKTsKICAgICAgaW5pdF9jb21iaW5lKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkKCk7CiAgICAgIGluaXRfSW5kZXhEYXRhdHlwZSgpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgaW5pdF9SZWN0YW5nbGUoKTsKICAgICAgaW5pdF9jcmVhdGVUYXNrUHJvY2Vzc29yV29ya2VyKCk7CiAgICAgIE1BWF9TSE9SVCA9IDMyNzY3OwogICAgICBNSVRFUl9CUkVBSyA9IE1hdGguY29zKE1hdGhfZGVmYXVsdC50b1JhZGlhbnMoMTUwKSk7CiAgICAgIHNjcmF0Y2hCVkNhcnRvZ3JhcGhpYyA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoRW5jb2RlZFBvc2l0aW9uID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBwcmV2aW91c0NvbXByZXNzZWRDYXJ0b2dyYXBoaWNTY3JhdGNoID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIGN1cnJlbnRDb21wcmVzc2VkQ2FydG9ncmFwaGljU2NyYXRjaCA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICB0b3dhcmRDdXJyU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgdG93YXJkTmV4dFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIFJFRkVSRU5DRV9JTkRJQ0VTMiA9IFsKICAgICAgICAwLAogICAgICAgIDIsCiAgICAgICAgNiwKICAgICAgICAwLAogICAgICAgIDYsCiAgICAgICAgNCwKICAgICAgICAvLyByaWdodAogICAgICAgIDAsCiAgICAgICAgMSwKICAgICAgICAzLAogICAgICAgIDAsCiAgICAgICAgMywKICAgICAgICAyLAogICAgICAgIC8vIHN0YXJ0IGZhY2UKICAgICAgICAwLAogICAgICAgIDQsCiAgICAgICAgNSwKICAgICAgICAwLAogICAgICAgIDUsCiAgICAgICAgMSwKICAgICAgICAvLyBib3R0b20KICAgICAgICA1LAogICAgICAgIDMsCiAgICAgICAgMSwKICAgICAgICA1LAogICAgICAgIDcsCiAgICAgICAgMywKICAgICAgICAvLyBsZWZ0CiAgICAgICAgNywKICAgICAgICA1LAogICAgICAgIDQsCiAgICAgICAgNywKICAgICAgICA0LAogICAgICAgIDYsCiAgICAgICAgLy8gZW5kIGZhY2UKICAgICAgICA3LAogICAgICAgIDYsCiAgICAgICAgMiwKICAgICAgICA3LAogICAgICAgIDIsCiAgICAgICAgMwogICAgICAgIC8vIHRvcAogICAgICBdOwogICAgICBSRUZFUkVOQ0VfSU5ESUNFU19MRU5HVEgyID0gUkVGRVJFTkNFX0lORElDRVMyLmxlbmd0aDsKICAgICAgcG9zaXRpb25TY3JhdGNoNCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFN0YXJ0RWxsaXBzb2lkTm9ybWFsID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoU3RhcnRGYWNlTm9ybWFsID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoRW5kRWxsaXBzb2lkTm9ybWFsID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoRW5kRmFjZU5vcm1hbCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgVmVydGV4QXR0cmlidXRlc0FuZEluZGljZXMucHJvdG90eXBlLmFkZFZvbHVtZSA9IGZ1bmN0aW9uKHByZVN0YXJ0UlRDLCBzdGFydFJUQywgZW5kUlRDLCBwb3N0RW5kUlRDLCBzdGFydEhlaWdodCwgZW5kSGVpZ2h0LCBoYWxmV2lkdGgsIGJhdGNoSWQsIGNlbnRlciwgZWxsaXBzb2lkKSB7CiAgICAgICAgbGV0IHBvc2l0aW9uID0gQ2FydGVzaWFuM19kZWZhdWx0LmFkZChzdGFydFJUQywgY2VudGVyLCBwb3NpdGlvblNjcmF0Y2g0KTsKICAgICAgICBjb25zdCBzdGFydEVsbGlwc29pZE5vcm1hbCA9IGVsbGlwc29pZC5nZW9kZXRpY1N1cmZhY2VOb3JtYWwoCiAgICAgICAgICBwb3NpdGlvbiwKICAgICAgICAgIHNjcmF0Y2hTdGFydEVsbGlwc29pZE5vcm1hbAogICAgICAgICk7CiAgICAgICAgcG9zaXRpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKGVuZFJUQywgY2VudGVyLCBwb3NpdGlvblNjcmF0Y2g0KTsKICAgICAgICBjb25zdCBlbmRFbGxpcHNvaWROb3JtYWwgPSBlbGxpcHNvaWQuZ2VvZGV0aWNTdXJmYWNlTm9ybWFsKAogICAgICAgICAgcG9zaXRpb24sCiAgICAgICAgICBzY3JhdGNoRW5kRWxsaXBzb2lkTm9ybWFsCiAgICAgICAgKTsKICAgICAgICBjb25zdCBzdGFydEZhY2VOb3JtYWwgPSBjb21wdXRlTWl0ZXJlZE5vcm1hbCgKICAgICAgICAgIHByZVN0YXJ0UlRDLAogICAgICAgICAgc3RhcnRSVEMsCiAgICAgICAgICBlbmRSVEMsCiAgICAgICAgICBzdGFydEVsbGlwc29pZE5vcm1hbCwKICAgICAgICAgIHNjcmF0Y2hTdGFydEZhY2VOb3JtYWwKICAgICAgICApOwogICAgICAgIGNvbnN0IGVuZEZhY2VOb3JtYWwgPSBjb21wdXRlTWl0ZXJlZE5vcm1hbCgKICAgICAgICAgIHBvc3RFbmRSVEMsCiAgICAgICAgICBlbmRSVEMsCiAgICAgICAgICBzdGFydFJUQywKICAgICAgICAgIGVuZEVsbGlwc29pZE5vcm1hbCwKICAgICAgICAgIHNjcmF0Y2hFbmRGYWNlTm9ybWFsCiAgICAgICAgKTsKICAgICAgICBjb25zdCBzdGFydEVsbGlwc29pZE5vcm1hbHMgPSB0aGlzLnN0YXJ0RWxsaXBzb2lkTm9ybWFsczsKICAgICAgICBjb25zdCBlbmRFbGxpcHNvaWROb3JtYWxzID0gdGhpcy5lbmRFbGxpcHNvaWROb3JtYWxzOwogICAgICAgIGNvbnN0IHN0YXJ0UG9zaXRpb25BbmRIZWlnaHRzID0gdGhpcy5zdGFydFBvc2l0aW9uQW5kSGVpZ2h0czsKICAgICAgICBjb25zdCBzdGFydEZhY2VOb3JtYWxBbmRWZXJ0ZXhDb3JuZXJJZHMgPSB0aGlzLnN0YXJ0RmFjZU5vcm1hbEFuZFZlcnRleENvcm5lcklkczsKICAgICAgICBjb25zdCBlbmRQb3NpdGlvbkFuZEhlaWdodHMgPSB0aGlzLmVuZFBvc2l0aW9uQW5kSGVpZ2h0czsKICAgICAgICBjb25zdCBlbmRGYWNlTm9ybWFsQW5kSGFsZldpZHRocyA9IHRoaXMuZW5kRmFjZU5vcm1hbEFuZEhhbGZXaWR0aHM7CiAgICAgICAgY29uc3QgdmVydGV4QmF0Y2hJZHMgPSB0aGlzLnZlcnRleEJhdGNoSWRzOwogICAgICAgIGxldCBiYXRjaElkT2Zmc2V0ID0gdGhpcy5iYXRjaElkT2Zmc2V0OwogICAgICAgIGxldCB2ZWMzT2Zmc2V0ID0gdGhpcy52ZWMzT2Zmc2V0OwogICAgICAgIGxldCB2ZWM0T2Zmc2V0ID0gdGhpcy52ZWM0T2Zmc2V0OwogICAgICAgIGxldCBpOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCA4OyBpKyspIHsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKHN0YXJ0RWxsaXBzb2lkTm9ybWFsLCBzdGFydEVsbGlwc29pZE5vcm1hbHMsIHZlYzNPZmZzZXQpOwogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2soZW5kRWxsaXBzb2lkTm9ybWFsLCBlbmRFbGxpcHNvaWROb3JtYWxzLCB2ZWMzT2Zmc2V0KTsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKHN0YXJ0UlRDLCBzdGFydFBvc2l0aW9uQW5kSGVpZ2h0cywgdmVjNE9mZnNldCk7CiAgICAgICAgICBzdGFydFBvc2l0aW9uQW5kSGVpZ2h0c1t2ZWM0T2Zmc2V0ICsgM10gPSBzdGFydEhlaWdodDsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKGVuZFJUQywgZW5kUG9zaXRpb25BbmRIZWlnaHRzLCB2ZWM0T2Zmc2V0KTsKICAgICAgICAgIGVuZFBvc2l0aW9uQW5kSGVpZ2h0c1t2ZWM0T2Zmc2V0ICsgM10gPSBlbmRIZWlnaHQ7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjaygKICAgICAgICAgICAgc3RhcnRGYWNlTm9ybWFsLAogICAgICAgICAgICBzdGFydEZhY2VOb3JtYWxBbmRWZXJ0ZXhDb3JuZXJJZHMsCiAgICAgICAgICAgIHZlYzRPZmZzZXQKICAgICAgICAgICk7CiAgICAgICAgICBzdGFydEZhY2VOb3JtYWxBbmRWZXJ0ZXhDb3JuZXJJZHNbdmVjNE9mZnNldCArIDNdID0gaTsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKGVuZEZhY2VOb3JtYWwsIGVuZEZhY2VOb3JtYWxBbmRIYWxmV2lkdGhzLCB2ZWM0T2Zmc2V0KTsKICAgICAgICAgIGVuZEZhY2VOb3JtYWxBbmRIYWxmV2lkdGhzW3ZlYzRPZmZzZXQgKyAzXSA9IGhhbGZXaWR0aDsKICAgICAgICAgIHZlcnRleEJhdGNoSWRzW2JhdGNoSWRPZmZzZXQrK10gPSBiYXRjaElkOwogICAgICAgICAgdmVjM09mZnNldCArPSAzOwogICAgICAgICAgdmVjNE9mZnNldCArPSA0OwogICAgICAgIH0KICAgICAgICB0aGlzLmJhdGNoSWRPZmZzZXQgPSBiYXRjaElkT2Zmc2V0OwogICAgICAgIHRoaXMudmVjM09mZnNldCA9IHZlYzNPZmZzZXQ7CiAgICAgICAgdGhpcy52ZWM0T2Zmc2V0ID0gdmVjNE9mZnNldDsKICAgICAgICBjb25zdCBpbmRpY2VzID0gdGhpcy5pbmRpY2VzOwogICAgICAgIGNvbnN0IHZvbHVtZVN0YXJ0SW5kZXggPSB0aGlzLnZvbHVtZVN0YXJ0SW5kZXg7CiAgICAgICAgY29uc3QgaW5kZXhPZmZzZXQgPSB0aGlzLmluZGV4T2Zmc2V0OwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBSRUZFUkVOQ0VfSU5ESUNFU19MRU5HVEgyOyBpKyspIHsKICAgICAgICAgIGluZGljZXNbaW5kZXhPZmZzZXQgKyBpXSA9IFJFRkVSRU5DRV9JTkRJQ0VTMltpXSArIHZvbHVtZVN0YXJ0SW5kZXg7CiAgICAgICAgfQogICAgICAgIHRoaXMudm9sdW1lU3RhcnRJbmRleCArPSA4OwogICAgICAgIHRoaXMuaW5kZXhPZmZzZXQgKz0gUkVGRVJFTkNFX0lORElDRVNfTEVOR1RIMjsKICAgICAgfTsKICAgICAgc2NyYXRjaFJlY3RhbmdsZTMgPSBuZXcgUmVjdGFuZ2xlX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaEVsbGlwc29pZDEzID0gbmV3IEVsbGlwc29pZF9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hDZW50ZXI0ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoUHJldiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFAwID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoUDEgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hOZXh0ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBjcmVhdGVWZWN0b3JUaWxlQ2xhbXBlZFBvbHlsaW5lc19kZWZhdWx0ID0gY3JlYXRlVGFza1Byb2Nlc3Nvcldvcmtlcl9kZWZhdWx0KGNyZWF0ZVZlY3RvclRpbGVDbGFtcGVkUG9seWxpbmVzKTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9TY2VuZS9WZWN0b3IzRFRpbGVCYXRjaC5qcwogIGZ1bmN0aW9uIFZlY3RvcjNEVGlsZUJhdGNoKG9wdGlvbnMpIHsKICAgIHRoaXMub2Zmc2V0ID0gb3B0aW9ucy5vZmZzZXQ7CiAgICB0aGlzLmNvdW50ID0gb3B0aW9ucy5jb3VudDsKICAgIHRoaXMuY29sb3IgPSBvcHRpb25zLmNvbG9yOwogICAgdGhpcy5iYXRjaElkcyA9IG9wdGlvbnMuYmF0Y2hJZHM7CiAgfQogIHZhciBWZWN0b3IzRFRpbGVCYXRjaF9kZWZhdWx0OwogIHZhciBpbml0X1ZlY3RvcjNEVGlsZUJhdGNoID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvU2NlbmUvVmVjdG9yM0RUaWxlQmF0Y2guanMiKCkgewogICAgICBWZWN0b3IzRFRpbGVCYXRjaF9kZWZhdWx0ID0gVmVjdG9yM0RUaWxlQmF0Y2g7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVWZWN0b3JUaWxlR2VvbWV0cmllcy5qcwogIHZhciBjcmVhdGVWZWN0b3JUaWxlR2VvbWV0cmllc19leHBvcnRzID0ge307CiAgX19leHBvcnQoY3JlYXRlVmVjdG9yVGlsZUdlb21ldHJpZXNfZXhwb3J0cywgewogICAgZGVmYXVsdDogKCkgPT4gY3JlYXRlVmVjdG9yVGlsZUdlb21ldHJpZXNfZGVmYXVsdAogIH0pOwogIGZ1bmN0aW9uIGJveE1vZGVsTWF0cml4QW5kQm91bmRpbmdWb2x1bWUoYm94ZXMsIGluZGV4KSB7CiAgICBsZXQgYm94SW5kZXggPSBpbmRleCAqIHBhY2tlZEJveExlbmd0aDsKICAgIGNvbnN0IGRpbWVuc2lvbnMgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKGJveGVzLCBib3hJbmRleCwgc2NyYXRjaENhcnRlc2lhbjExKTsKICAgIGJveEluZGV4ICs9IENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICBjb25zdCBib3hNb2RlbE1hdHJpeCA9IE1hdHJpeDRfZGVmYXVsdC51bnBhY2soCiAgICAgIGJveGVzLAogICAgICBib3hJbmRleCwKICAgICAgc2NyYXRjaE1vZGVsTWF0cml4QW5kQlYubW9kZWxNYXRyaXgKICAgICk7CiAgICBNYXRyaXg0X2RlZmF1bHQubXVsdGlwbHlCeVNjYWxlKGJveE1vZGVsTWF0cml4LCBkaW1lbnNpb25zLCBib3hNb2RlbE1hdHJpeCk7CiAgICBjb25zdCBib3VuZGluZ1ZvbHVtZSA9IHNjcmF0Y2hNb2RlbE1hdHJpeEFuZEJWLmJvdW5kaW5nVm9sdW1lOwogICAgQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKENhcnRlc2lhbjNfZGVmYXVsdC5aRVJPLCBib3VuZGluZ1ZvbHVtZS5jZW50ZXIpOwogICAgYm91bmRpbmdWb2x1bWUucmFkaXVzID0gTWF0aC5zcXJ0KDMpOwogICAgcmV0dXJuIHNjcmF0Y2hNb2RlbE1hdHJpeEFuZEJWOwogIH0KICBmdW5jdGlvbiBjeWxpbmRlck1vZGVsTWF0cml4QW5kQm91bmRpbmdWb2x1bWUoY3lsaW5kZXJzLCBpbmRleCkgewogICAgbGV0IGN5bGluZGVySW5kZXggPSBpbmRleCAqIHBhY2tlZEN5bGluZGVyTGVuZ3RoOwogICAgY29uc3QgY3lsaW5kZXJSYWRpdXMgPSBjeWxpbmRlcnNbY3lsaW5kZXJJbmRleCsrXTsKICAgIGNvbnN0IGxlbmd0aCA9IGN5bGluZGVyc1tjeWxpbmRlckluZGV4KytdOwogICAgY29uc3Qgc2NhbGUgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUVsZW1lbnRzKAogICAgICBjeWxpbmRlclJhZGl1cywKICAgICAgY3lsaW5kZXJSYWRpdXMsCiAgICAgIGxlbmd0aCwKICAgICAgc2NyYXRjaENhcnRlc2lhbjExCiAgICApOwogICAgY29uc3QgY3lsaW5kZXJNb2RlbE1hdHJpeCA9IE1hdHJpeDRfZGVmYXVsdC51bnBhY2soCiAgICAgIGN5bGluZGVycywKICAgICAgY3lsaW5kZXJJbmRleCwKICAgICAgc2NyYXRjaE1vZGVsTWF0cml4QW5kQlYubW9kZWxNYXRyaXgKICAgICk7CiAgICBNYXRyaXg0X2RlZmF1bHQubXVsdGlwbHlCeVNjYWxlKGN5bGluZGVyTW9kZWxNYXRyaXgsIHNjYWxlLCBjeWxpbmRlck1vZGVsTWF0cml4KTsKICAgIGNvbnN0IGJvdW5kaW5nVm9sdW1lID0gc2NyYXRjaE1vZGVsTWF0cml4QW5kQlYuYm91bmRpbmdWb2x1bWU7CiAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8sIGJvdW5kaW5nVm9sdW1lLmNlbnRlcik7CiAgICBib3VuZGluZ1ZvbHVtZS5yYWRpdXMgPSBNYXRoLnNxcnQoMik7CiAgICByZXR1cm4gc2NyYXRjaE1vZGVsTWF0cml4QW5kQlY7CiAgfQogIGZ1bmN0aW9uIGVsbGlwc29pZE1vZGVsTWF0cml4QW5kQm91bmRpbmdWb2x1bWUoZWxsaXBzb2lkcywgaW5kZXgpIHsKICAgIGxldCBlbGxpcHNvaWRJbmRleCA9IGluZGV4ICogcGFja2VkRWxsaXBzb2lkTGVuZ3RoOwogICAgY29uc3QgcmFkaWkgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKGVsbGlwc29pZHMsIGVsbGlwc29pZEluZGV4LCBzY3JhdGNoQ2FydGVzaWFuMTEpOwogICAgZWxsaXBzb2lkSW5kZXggKz0gQ2FydGVzaWFuM19kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgIGNvbnN0IGVsbGlwc29pZE1vZGVsTWF0cml4ID0gTWF0cml4NF9kZWZhdWx0LnVucGFjaygKICAgICAgZWxsaXBzb2lkcywKICAgICAgZWxsaXBzb2lkSW5kZXgsCiAgICAgIHNjcmF0Y2hNb2RlbE1hdHJpeEFuZEJWLm1vZGVsTWF0cml4CiAgICApOwogICAgTWF0cml4NF9kZWZhdWx0Lm11bHRpcGx5QnlTY2FsZShlbGxpcHNvaWRNb2RlbE1hdHJpeCwgcmFkaWksIGVsbGlwc29pZE1vZGVsTWF0cml4KTsKICAgIGNvbnN0IGJvdW5kaW5nVm9sdW1lID0gc2NyYXRjaE1vZGVsTWF0cml4QW5kQlYuYm91bmRpbmdWb2x1bWU7CiAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8sIGJvdW5kaW5nVm9sdW1lLmNlbnRlcik7CiAgICBib3VuZGluZ1ZvbHVtZS5yYWRpdXMgPSAxOwogICAgcmV0dXJuIHNjcmF0Y2hNb2RlbE1hdHJpeEFuZEJWOwogIH0KICBmdW5jdGlvbiBzcGhlcmVNb2RlbE1hdHJpeEFuZEJvdW5kaW5nVm9sdW1lKHNwaGVyZXMsIGluZGV4KSB7CiAgICBsZXQgc3BoZXJlSW5kZXggPSBpbmRleCAqIHBhY2tlZFNwaGVyZUxlbmd0aDsKICAgIGNvbnN0IHNwaGVyZVJhZGl1cyA9IHNwaGVyZXNbc3BoZXJlSW5kZXgrK107CiAgICBjb25zdCBzcGhlcmVUcmFuc2xhdGlvbiA9IENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2soCiAgICAgIHNwaGVyZXMsCiAgICAgIHNwaGVyZUluZGV4LAogICAgICBzY3JhdGNoQ2FydGVzaWFuMTEKICAgICk7CiAgICBjb25zdCBzcGhlcmVNb2RlbE1hdHJpeCA9IE1hdHJpeDRfZGVmYXVsdC5mcm9tVHJhbnNsYXRpb24oCiAgICAgIHNwaGVyZVRyYW5zbGF0aW9uLAogICAgICBzY3JhdGNoTW9kZWxNYXRyaXhBbmRCVi5tb2RlbE1hdHJpeAogICAgKTsKICAgIE1hdHJpeDRfZGVmYXVsdC5tdWx0aXBseUJ5VW5pZm9ybVNjYWxlKAogICAgICBzcGhlcmVNb2RlbE1hdHJpeCwKICAgICAgc3BoZXJlUmFkaXVzLAogICAgICBzcGhlcmVNb2RlbE1hdHJpeAogICAgKTsKICAgIGNvbnN0IGJvdW5kaW5nVm9sdW1lID0gc2NyYXRjaE1vZGVsTWF0cml4QW5kQlYuYm91bmRpbmdWb2x1bWU7CiAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8sIGJvdW5kaW5nVm9sdW1lLmNlbnRlcik7CiAgICBib3VuZGluZ1ZvbHVtZS5yYWRpdXMgPSAxOwogICAgcmV0dXJuIHNjcmF0Y2hNb2RlbE1hdHJpeEFuZEJWOwogIH0KICBmdW5jdGlvbiBjcmVhdGVQcmltaXRpdmUob3B0aW9ucywgcHJpbWl0aXZlLCBwcmltaXRpdmVCYXRjaElkcywgZ2VvbWV0cnksIGdldE1vZGVsTWF0cml4QW5kQm91bmRpbmdWb2x1bWUpIHsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHByaW1pdGl2ZSkpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgY29uc3QgbnVtYmVyT2ZQcmltaXRpdmVzID0gcHJpbWl0aXZlQmF0Y2hJZHMubGVuZ3RoOwogICAgY29uc3QgZ2VvbWV0cnlQb3NpdGlvbnMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlczsKICAgIGNvbnN0IGdlb21ldHJ5SW5kaWNlcyA9IGdlb21ldHJ5LmluZGljZXM7CiAgICBjb25zdCBwb3NpdGlvbnMgPSBvcHRpb25zLnBvc2l0aW9uczsKICAgIGNvbnN0IHZlcnRleEJhdGNoSWRzID0gb3B0aW9ucy52ZXJ0ZXhCYXRjaElkczsKICAgIGNvbnN0IGluZGljZXMgPSBvcHRpb25zLmluZGljZXM7CiAgICBjb25zdCBiYXRjaElkcyA9IG9wdGlvbnMuYmF0Y2hJZHM7CiAgICBjb25zdCBiYXRjaFRhYmxlQ29sb3JzID0gb3B0aW9ucy5iYXRjaFRhYmxlQ29sb3JzOwogICAgY29uc3QgYmF0Y2hlZEluZGljZXMgPSBvcHRpb25zLmJhdGNoZWRJbmRpY2VzOwogICAgY29uc3QgaW5kZXhPZmZzZXRzID0gb3B0aW9ucy5pbmRleE9mZnNldHM7CiAgICBjb25zdCBpbmRleENvdW50cyA9IG9wdGlvbnMuaW5kZXhDb3VudHM7CiAgICBjb25zdCBib3VuZGluZ1ZvbHVtZXMgPSBvcHRpb25zLmJvdW5kaW5nVm9sdW1lczsKICAgIGNvbnN0IG1vZGVsTWF0cml4ID0gb3B0aW9ucy5tb2RlbE1hdHJpeDsKICAgIGNvbnN0IGNlbnRlciA9IG9wdGlvbnMuY2VudGVyOwogICAgbGV0IHBvc2l0aW9uT2Zmc2V0ID0gb3B0aW9ucy5wb3NpdGlvbk9mZnNldDsKICAgIGxldCBiYXRjaElkSW5kZXggPSBvcHRpb25zLmJhdGNoSWRJbmRleDsKICAgIGxldCBpbmRleE9mZnNldCA9IG9wdGlvbnMuaW5kZXhPZmZzZXQ7CiAgICBjb25zdCBiYXRjaGVkSW5kaWNlc09mZnNldCA9IG9wdGlvbnMuYmF0Y2hlZEluZGljZXNPZmZzZXQ7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bWJlck9mUHJpbWl0aXZlczsgKytpKSB7CiAgICAgIGNvbnN0IHByaW1pdGl2ZU1vZGVsTWF0cml4QW5kQlYgPSBnZXRNb2RlbE1hdHJpeEFuZEJvdW5kaW5nVm9sdW1lKAogICAgICAgIHByaW1pdGl2ZSwKICAgICAgICBpCiAgICAgICk7CiAgICAgIGNvbnN0IHByaW1pdGl2ZU1vZGVsTWF0cml4ID0gcHJpbWl0aXZlTW9kZWxNYXRyaXhBbmRCVi5tb2RlbE1hdHJpeDsKICAgICAgTWF0cml4NF9kZWZhdWx0Lm11bHRpcGx5KG1vZGVsTWF0cml4LCBwcmltaXRpdmVNb2RlbE1hdHJpeCwgcHJpbWl0aXZlTW9kZWxNYXRyaXgpOwogICAgICBjb25zdCBiYXRjaElkID0gcHJpbWl0aXZlQmF0Y2hJZHNbaV07CiAgICAgIGNvbnN0IHBvc2l0aW9uc0xlbmd0aCA9IGdlb21ldHJ5UG9zaXRpb25zLmxlbmd0aDsKICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBwb3NpdGlvbnNMZW5ndGg7IGogKz0gMykgewogICAgICAgIGNvbnN0IHBvc2l0aW9uID0gQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjayhnZW9tZXRyeVBvc2l0aW9ucywgaiwgc2NyYXRjaFBvc2l0aW9uNSk7CiAgICAgICAgTWF0cml4NF9kZWZhdWx0Lm11bHRpcGx5QnlQb2ludChwcmltaXRpdmVNb2RlbE1hdHJpeCwgcG9zaXRpb24sIHBvc2l0aW9uKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QocG9zaXRpb24sIGNlbnRlciwgcG9zaXRpb24pOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKHBvc2l0aW9uLCBwb3NpdGlvbnMsIHBvc2l0aW9uT2Zmc2V0ICogMyArIGopOwogICAgICAgIHZlcnRleEJhdGNoSWRzW2JhdGNoSWRJbmRleCsrXSA9IGJhdGNoSWQ7CiAgICAgIH0KICAgICAgY29uc3QgaW5kaWNlc0xlbmd0aCA9IGdlb21ldHJ5SW5kaWNlcy5sZW5ndGg7CiAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgaW5kaWNlc0xlbmd0aDsgKytrKSB7CiAgICAgICAgaW5kaWNlc1tpbmRleE9mZnNldCArIGtdID0gZ2VvbWV0cnlJbmRpY2VzW2tdICsgcG9zaXRpb25PZmZzZXQ7CiAgICAgIH0KICAgICAgY29uc3Qgb2Zmc2V0ID0gaSArIGJhdGNoZWRJbmRpY2VzT2Zmc2V0OwogICAgICBiYXRjaGVkSW5kaWNlc1tvZmZzZXRdID0gbmV3IFZlY3RvcjNEVGlsZUJhdGNoX2RlZmF1bHQoewogICAgICAgIG9mZnNldDogaW5kZXhPZmZzZXQsCiAgICAgICAgY291bnQ6IGluZGljZXNMZW5ndGgsCiAgICAgICAgY29sb3I6IENvbG9yX2RlZmF1bHQuZnJvbVJnYmEoYmF0Y2hUYWJsZUNvbG9yc1tiYXRjaElkXSksCiAgICAgICAgYmF0Y2hJZHM6IFtiYXRjaElkXQogICAgICB9KTsKICAgICAgYmF0Y2hJZHNbb2Zmc2V0XSA9IGJhdGNoSWQ7CiAgICAgIGluZGV4T2Zmc2V0c1tvZmZzZXRdID0gaW5kZXhPZmZzZXQ7CiAgICAgIGluZGV4Q291bnRzW29mZnNldF0gPSBpbmRpY2VzTGVuZ3RoOwogICAgICBib3VuZGluZ1ZvbHVtZXNbb2Zmc2V0XSA9IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQudHJhbnNmb3JtKAogICAgICAgIHByaW1pdGl2ZU1vZGVsTWF0cml4QW5kQlYuYm91bmRpbmdWb2x1bWUsCiAgICAgICAgcHJpbWl0aXZlTW9kZWxNYXRyaXgKICAgICAgKTsKICAgICAgcG9zaXRpb25PZmZzZXQgKz0gcG9zaXRpb25zTGVuZ3RoIC8gMzsKICAgICAgaW5kZXhPZmZzZXQgKz0gaW5kaWNlc0xlbmd0aDsKICAgIH0KICAgIG9wdGlvbnMucG9zaXRpb25PZmZzZXQgPSBwb3NpdGlvbk9mZnNldDsKICAgIG9wdGlvbnMuYmF0Y2hJZEluZGV4ID0gYmF0Y2hJZEluZGV4OwogICAgb3B0aW9ucy5pbmRleE9mZnNldCA9IGluZGV4T2Zmc2V0OwogICAgb3B0aW9ucy5iYXRjaGVkSW5kaWNlc09mZnNldCArPSBudW1iZXJPZlByaW1pdGl2ZXM7CiAgfQogIGZ1bmN0aW9uIHVucGFja0J1ZmZlcihidWZmZXIpIHsKICAgIGNvbnN0IHBhY2tlZEJ1ZmZlciA9IG5ldyBGbG9hdDY0QXJyYXkoYnVmZmVyKTsKICAgIGxldCBvZmZzZXQgPSAwOwogICAgQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjayhwYWNrZWRCdWZmZXIsIG9mZnNldCwgc2NyYXRjaENlbnRlcjUpOwogICAgb2Zmc2V0ICs9IENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICBNYXRyaXg0X2RlZmF1bHQudW5wYWNrKHBhY2tlZEJ1ZmZlciwgb2Zmc2V0LCBzY3JhdGNoTWF0cml4NCk7CiAgfQogIGZ1bmN0aW9uIHBhY2tlZEJhdGNoZWRJbmRpY2VzTGVuZ3RoKGJhdGNoZWRJbmRpY2VzKSB7CiAgICBjb25zdCBsZW5ndGggPSBiYXRjaGVkSW5kaWNlcy5sZW5ndGg7CiAgICBsZXQgY291bnQgPSAwOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgICBjb3VudCArPSBDb2xvcl9kZWZhdWx0LnBhY2tlZExlbmd0aCArIDMgKyBiYXRjaGVkSW5kaWNlc1tpXS5iYXRjaElkcy5sZW5ndGg7CiAgICB9CiAgICByZXR1cm4gY291bnQ7CiAgfQogIGZ1bmN0aW9uIHBhY2tCdWZmZXIoaW5kaWNlc0J5dGVzUGVyRWxlbWVudCwgYmF0Y2hlZEluZGljZXMsIGJvdW5kaW5nVm9sdW1lcykgewogICAgY29uc3QgbnVtQlZzID0gYm91bmRpbmdWb2x1bWVzLmxlbmd0aDsKICAgIGNvbnN0IGxlbmd0aCA9IDEgKyAxICsgbnVtQlZzICogQm91bmRpbmdTcGhlcmVfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyAxICsgcGFja2VkQmF0Y2hlZEluZGljZXNMZW5ndGgoYmF0Y2hlZEluZGljZXMpOwogICAgY29uc3QgcGFja2VkQnVmZmVyID0gbmV3IEZsb2F0NjRBcnJheShsZW5ndGgpOwogICAgbGV0IG9mZnNldCA9IDA7CiAgICBwYWNrZWRCdWZmZXJbb2Zmc2V0KytdID0gaW5kaWNlc0J5dGVzUGVyRWxlbWVudDsKICAgIHBhY2tlZEJ1ZmZlcltvZmZzZXQrK10gPSBudW1CVnM7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUJWczsgKytpKSB7CiAgICAgIEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQucGFjayhib3VuZGluZ1ZvbHVtZXNbaV0sIHBhY2tlZEJ1ZmZlciwgb2Zmc2V0KTsKICAgICAgb2Zmc2V0ICs9IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgfQogICAgY29uc3QgaW5kaWNlc0xlbmd0aCA9IGJhdGNoZWRJbmRpY2VzLmxlbmd0aDsKICAgIHBhY2tlZEJ1ZmZlcltvZmZzZXQrK10gPSBpbmRpY2VzTGVuZ3RoOwogICAgZm9yIChsZXQgaiA9IDA7IGogPCBpbmRpY2VzTGVuZ3RoOyArK2opIHsKICAgICAgY29uc3QgYmF0Y2hlZEluZGV4ID0gYmF0Y2hlZEluZGljZXNbal07CiAgICAgIENvbG9yX2RlZmF1bHQucGFjayhiYXRjaGVkSW5kZXguY29sb3IsIHBhY2tlZEJ1ZmZlciwgb2Zmc2V0KTsKICAgICAgb2Zmc2V0ICs9IENvbG9yX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICBwYWNrZWRCdWZmZXJbb2Zmc2V0KytdID0gYmF0Y2hlZEluZGV4Lm9mZnNldDsKICAgICAgcGFja2VkQnVmZmVyW29mZnNldCsrXSA9IGJhdGNoZWRJbmRleC5jb3VudDsKICAgICAgY29uc3QgYmF0Y2hJZHMgPSBiYXRjaGVkSW5kZXguYmF0Y2hJZHM7CiAgICAgIGNvbnN0IGJhdGNoSWRzTGVuZ3RoID0gYmF0Y2hJZHMubGVuZ3RoOwogICAgICBwYWNrZWRCdWZmZXJbb2Zmc2V0KytdID0gYmF0Y2hJZHNMZW5ndGg7CiAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgYmF0Y2hJZHNMZW5ndGg7ICsraykgewogICAgICAgIHBhY2tlZEJ1ZmZlcltvZmZzZXQrK10gPSBiYXRjaElkc1trXTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIHBhY2tlZEJ1ZmZlcjsKICB9CiAgZnVuY3Rpb24gY3JlYXRlVmVjdG9yVGlsZUdlb21ldHJpZXMocGFyYW1ldGVycywgdHJhbnNmZXJhYmxlT2JqZWN0cykgewogICAgY29uc3QgYm94ZXMgPSBkZWZpbmVkX2RlZmF1bHQocGFyYW1ldGVycy5ib3hlcykgPyBuZXcgRmxvYXQzMkFycmF5KHBhcmFtZXRlcnMuYm94ZXMpIDogdm9pZCAwOwogICAgY29uc3QgYm94QmF0Y2hJZHMgPSBkZWZpbmVkX2RlZmF1bHQocGFyYW1ldGVycy5ib3hCYXRjaElkcykgPyBuZXcgVWludDE2QXJyYXkocGFyYW1ldGVycy5ib3hCYXRjaElkcykgOiB2b2lkIDA7CiAgICBjb25zdCBjeWxpbmRlcnMgPSBkZWZpbmVkX2RlZmF1bHQocGFyYW1ldGVycy5jeWxpbmRlcnMpID8gbmV3IEZsb2F0MzJBcnJheShwYXJhbWV0ZXJzLmN5bGluZGVycykgOiB2b2lkIDA7CiAgICBjb25zdCBjeWxpbmRlckJhdGNoSWRzID0gZGVmaW5lZF9kZWZhdWx0KHBhcmFtZXRlcnMuY3lsaW5kZXJCYXRjaElkcykgPyBuZXcgVWludDE2QXJyYXkocGFyYW1ldGVycy5jeWxpbmRlckJhdGNoSWRzKSA6IHZvaWQgMDsKICAgIGNvbnN0IGVsbGlwc29pZHMgPSBkZWZpbmVkX2RlZmF1bHQocGFyYW1ldGVycy5lbGxpcHNvaWRzKSA/IG5ldyBGbG9hdDMyQXJyYXkocGFyYW1ldGVycy5lbGxpcHNvaWRzKSA6IHZvaWQgMDsKICAgIGNvbnN0IGVsbGlwc29pZEJhdGNoSWRzID0gZGVmaW5lZF9kZWZhdWx0KHBhcmFtZXRlcnMuZWxsaXBzb2lkQmF0Y2hJZHMpID8gbmV3IFVpbnQxNkFycmF5KHBhcmFtZXRlcnMuZWxsaXBzb2lkQmF0Y2hJZHMpIDogdm9pZCAwOwogICAgY29uc3Qgc3BoZXJlcyA9IGRlZmluZWRfZGVmYXVsdChwYXJhbWV0ZXJzLnNwaGVyZXMpID8gbmV3IEZsb2F0MzJBcnJheShwYXJhbWV0ZXJzLnNwaGVyZXMpIDogdm9pZCAwOwogICAgY29uc3Qgc3BoZXJlQmF0Y2hJZHMgPSBkZWZpbmVkX2RlZmF1bHQocGFyYW1ldGVycy5zcGhlcmVCYXRjaElkcykgPyBuZXcgVWludDE2QXJyYXkocGFyYW1ldGVycy5zcGhlcmVCYXRjaElkcykgOiB2b2lkIDA7CiAgICBjb25zdCBudW1iZXJPZkJveGVzID0gZGVmaW5lZF9kZWZhdWx0KGJveGVzKSA/IGJveEJhdGNoSWRzLmxlbmd0aCA6IDA7CiAgICBjb25zdCBudW1iZXJPZkN5bGluZGVycyA9IGRlZmluZWRfZGVmYXVsdChjeWxpbmRlcnMpID8gY3lsaW5kZXJCYXRjaElkcy5sZW5ndGggOiAwOwogICAgY29uc3QgbnVtYmVyT2ZFbGxpcHNvaWRzID0gZGVmaW5lZF9kZWZhdWx0KGVsbGlwc29pZHMpID8gZWxsaXBzb2lkQmF0Y2hJZHMubGVuZ3RoIDogMDsKICAgIGNvbnN0IG51bWJlck9mU3BoZXJlcyA9IGRlZmluZWRfZGVmYXVsdChzcGhlcmVzKSA/IHNwaGVyZUJhdGNoSWRzLmxlbmd0aCA6IDA7CiAgICBjb25zdCBib3hHZW9tZXRyeSA9IEJveEdlb21ldHJ5X2RlZmF1bHQuZ2V0VW5pdEJveCgpOwogICAgY29uc3QgY3lsaW5kZXJHZW9tZXRyeSA9IEN5bGluZGVyR2VvbWV0cnlfZGVmYXVsdC5nZXRVbml0Q3lsaW5kZXIoKTsKICAgIGNvbnN0IGVsbGlwc29pZEdlb21ldHJ5ID0gRWxsaXBzb2lkR2VvbWV0cnlfZGVmYXVsdC5nZXRVbml0RWxsaXBzb2lkKCk7CiAgICBjb25zdCBib3hQb3NpdGlvbnMgPSBib3hHZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlczsKICAgIGNvbnN0IGN5bGluZGVyUG9zaXRpb25zID0gY3lsaW5kZXJHZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlczsKICAgIGNvbnN0IGVsbGlwc29pZFBvc2l0aW9ucyA9IGVsbGlwc29pZEdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWVzOwogICAgbGV0IG51bWJlck9mUG9zaXRpb25zID0gYm94UG9zaXRpb25zLmxlbmd0aCAqIG51bWJlck9mQm94ZXM7CiAgICBudW1iZXJPZlBvc2l0aW9ucyArPSBjeWxpbmRlclBvc2l0aW9ucy5sZW5ndGggKiBudW1iZXJPZkN5bGluZGVyczsKICAgIG51bWJlck9mUG9zaXRpb25zICs9IGVsbGlwc29pZFBvc2l0aW9ucy5sZW5ndGggKiAobnVtYmVyT2ZFbGxpcHNvaWRzICsgbnVtYmVyT2ZTcGhlcmVzKTsKICAgIGNvbnN0IGJveEluZGljZXMgPSBib3hHZW9tZXRyeS5pbmRpY2VzOwogICAgY29uc3QgY3lsaW5kZXJJbmRpY2VzID0gY3lsaW5kZXJHZW9tZXRyeS5pbmRpY2VzOwogICAgY29uc3QgZWxsaXBzb2lkSW5kaWNlcyA9IGVsbGlwc29pZEdlb21ldHJ5LmluZGljZXM7CiAgICBsZXQgbnVtYmVyT2ZJbmRpY2VzID0gYm94SW5kaWNlcy5sZW5ndGggKiBudW1iZXJPZkJveGVzOwogICAgbnVtYmVyT2ZJbmRpY2VzICs9IGN5bGluZGVySW5kaWNlcy5sZW5ndGggKiBudW1iZXJPZkN5bGluZGVyczsKICAgIG51bWJlck9mSW5kaWNlcyArPSBlbGxpcHNvaWRJbmRpY2VzLmxlbmd0aCAqIChudW1iZXJPZkVsbGlwc29pZHMgKyBudW1iZXJPZlNwaGVyZXMpOwogICAgY29uc3QgcG9zaXRpb25zID0gbmV3IEZsb2F0MzJBcnJheShudW1iZXJPZlBvc2l0aW9ucyk7CiAgICBjb25zdCB2ZXJ0ZXhCYXRjaElkcyA9IG5ldyBVaW50MTZBcnJheShudW1iZXJPZlBvc2l0aW9ucyAvIDMpOwogICAgY29uc3QgaW5kaWNlcyA9IEluZGV4RGF0YXR5cGVfZGVmYXVsdC5jcmVhdGVUeXBlZEFycmF5KAogICAgICBudW1iZXJPZlBvc2l0aW9ucyAvIDMsCiAgICAgIG51bWJlck9mSW5kaWNlcwogICAgKTsKICAgIGNvbnN0IG51bWJlck9mR2VvbWV0cmllcyA9IG51bWJlck9mQm94ZXMgKyBudW1iZXJPZkN5bGluZGVycyArIG51bWJlck9mRWxsaXBzb2lkcyArIG51bWJlck9mU3BoZXJlczsKICAgIGNvbnN0IGJhdGNoSWRzID0gbmV3IFVpbnQxNkFycmF5KG51bWJlck9mR2VvbWV0cmllcyk7CiAgICBjb25zdCBiYXRjaGVkSW5kaWNlcyA9IG5ldyBBcnJheShudW1iZXJPZkdlb21ldHJpZXMpOwogICAgY29uc3QgaW5kZXhPZmZzZXRzID0gbmV3IFVpbnQzMkFycmF5KG51bWJlck9mR2VvbWV0cmllcyk7CiAgICBjb25zdCBpbmRleENvdW50cyA9IG5ldyBVaW50MzJBcnJheShudW1iZXJPZkdlb21ldHJpZXMpOwogICAgY29uc3QgYm91bmRpbmdWb2x1bWVzID0gbmV3IEFycmF5KG51bWJlck9mR2VvbWV0cmllcyk7CiAgICB1bnBhY2tCdWZmZXIocGFyYW1ldGVycy5wYWNrZWRCdWZmZXIpOwogICAgY29uc3Qgb3B0aW9ucyA9IHsKICAgICAgYmF0Y2hUYWJsZUNvbG9yczogbmV3IFVpbnQzMkFycmF5KHBhcmFtZXRlcnMuYmF0Y2hUYWJsZUNvbG9ycyksCiAgICAgIHBvc2l0aW9ucywKICAgICAgdmVydGV4QmF0Y2hJZHMsCiAgICAgIGluZGljZXMsCiAgICAgIGJhdGNoSWRzLAogICAgICBiYXRjaGVkSW5kaWNlcywKICAgICAgaW5kZXhPZmZzZXRzLAogICAgICBpbmRleENvdW50cywKICAgICAgYm91bmRpbmdWb2x1bWVzLAogICAgICBwb3NpdGlvbk9mZnNldDogMCwKICAgICAgYmF0Y2hJZEluZGV4OiAwLAogICAgICBpbmRleE9mZnNldDogMCwKICAgICAgYmF0Y2hlZEluZGljZXNPZmZzZXQ6IDAsCiAgICAgIG1vZGVsTWF0cml4OiBzY3JhdGNoTWF0cml4NCwKICAgICAgY2VudGVyOiBzY3JhdGNoQ2VudGVyNQogICAgfTsKICAgIGNyZWF0ZVByaW1pdGl2ZSgKICAgICAgb3B0aW9ucywKICAgICAgYm94ZXMsCiAgICAgIGJveEJhdGNoSWRzLAogICAgICBib3hHZW9tZXRyeSwKICAgICAgYm94TW9kZWxNYXRyaXhBbmRCb3VuZGluZ1ZvbHVtZQogICAgKTsKICAgIGNyZWF0ZVByaW1pdGl2ZSgKICAgICAgb3B0aW9ucywKICAgICAgY3lsaW5kZXJzLAogICAgICBjeWxpbmRlckJhdGNoSWRzLAogICAgICBjeWxpbmRlckdlb21ldHJ5LAogICAgICBjeWxpbmRlck1vZGVsTWF0cml4QW5kQm91bmRpbmdWb2x1bWUKICAgICk7CiAgICBjcmVhdGVQcmltaXRpdmUoCiAgICAgIG9wdGlvbnMsCiAgICAgIGVsbGlwc29pZHMsCiAgICAgIGVsbGlwc29pZEJhdGNoSWRzLAogICAgICBlbGxpcHNvaWRHZW9tZXRyeSwKICAgICAgZWxsaXBzb2lkTW9kZWxNYXRyaXhBbmRCb3VuZGluZ1ZvbHVtZQogICAgKTsKICAgIGNyZWF0ZVByaW1pdGl2ZSgKICAgICAgb3B0aW9ucywKICAgICAgc3BoZXJlcywKICAgICAgc3BoZXJlQmF0Y2hJZHMsCiAgICAgIGVsbGlwc29pZEdlb21ldHJ5LAogICAgICBzcGhlcmVNb2RlbE1hdHJpeEFuZEJvdW5kaW5nVm9sdW1lCiAgICApOwogICAgY29uc3QgcGFja2VkQnVmZmVyID0gcGFja0J1ZmZlcigKICAgICAgaW5kaWNlcy5CWVRFU19QRVJfRUxFTUVOVCwKICAgICAgYmF0Y2hlZEluZGljZXMsCiAgICAgIGJvdW5kaW5nVm9sdW1lcwogICAgKTsKICAgIHRyYW5zZmVyYWJsZU9iamVjdHMucHVzaCgKICAgICAgcG9zaXRpb25zLmJ1ZmZlciwKICAgICAgdmVydGV4QmF0Y2hJZHMuYnVmZmVyLAogICAgICBpbmRpY2VzLmJ1ZmZlcgogICAgKTsKICAgIHRyYW5zZmVyYWJsZU9iamVjdHMucHVzaCgKICAgICAgYmF0Y2hJZHMuYnVmZmVyLAogICAgICBpbmRleE9mZnNldHMuYnVmZmVyLAogICAgICBpbmRleENvdW50cy5idWZmZXIKICAgICk7CiAgICB0cmFuc2ZlcmFibGVPYmplY3RzLnB1c2gocGFja2VkQnVmZmVyLmJ1ZmZlcik7CiAgICByZXR1cm4gewogICAgICBwb3NpdGlvbnM6IHBvc2l0aW9ucy5idWZmZXIsCiAgICAgIHZlcnRleEJhdGNoSWRzOiB2ZXJ0ZXhCYXRjaElkcy5idWZmZXIsCiAgICAgIGluZGljZXM6IGluZGljZXMuYnVmZmVyLAogICAgICBpbmRleE9mZnNldHM6IGluZGV4T2Zmc2V0cy5idWZmZXIsCiAgICAgIGluZGV4Q291bnRzOiBpbmRleENvdW50cy5idWZmZXIsCiAgICAgIGJhdGNoSWRzOiBiYXRjaElkcy5idWZmZXIsCiAgICAgIHBhY2tlZEJ1ZmZlcjogcGFja2VkQnVmZmVyLmJ1ZmZlcgogICAgfTsKICB9CiAgdmFyIHNjcmF0Y2hDYXJ0ZXNpYW4xMSwgcGFja2VkQm94TGVuZ3RoLCBwYWNrZWRDeWxpbmRlckxlbmd0aCwgcGFja2VkRWxsaXBzb2lkTGVuZ3RoLCBwYWNrZWRTcGhlcmVMZW5ndGgsIHNjcmF0Y2hNb2RlbE1hdHJpeEFuZEJWLCBzY3JhdGNoUG9zaXRpb241LCBzY3JhdGNoQ2VudGVyNSwgc2NyYXRjaE1hdHJpeDQsIGNyZWF0ZVZlY3RvclRpbGVHZW9tZXRyaWVzX2RlZmF1bHQ7CiAgdmFyIGluaXRfY3JlYXRlVmVjdG9yVGlsZUdlb21ldHJpZXMgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZVZlY3RvclRpbGVHZW9tZXRyaWVzLmpzIigpIHsKICAgICAgaW5pdF9Cb3VuZGluZ1NwaGVyZSgpOwogICAgICBpbml0X0JveEdlb21ldHJ5KCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NvbG9yKCk7CiAgICAgIGluaXRfQ3lsaW5kZXJHZW9tZXRyeSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9FbGxpcHNvaWRHZW9tZXRyeSgpOwogICAgICBpbml0X0luZGV4RGF0YXR5cGUoKTsKICAgICAgaW5pdF9NYXRyaXg0KCk7CiAgICAgIGluaXRfVmVjdG9yM0RUaWxlQmF0Y2goKTsKICAgICAgaW5pdF9jcmVhdGVUYXNrUHJvY2Vzc29yV29ya2VyKCk7CiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4xMSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgcGFja2VkQm94TGVuZ3RoID0gTWF0cml4NF9kZWZhdWx0LnBhY2tlZExlbmd0aCArIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgIHBhY2tlZEN5bGluZGVyTGVuZ3RoID0gTWF0cml4NF9kZWZhdWx0LnBhY2tlZExlbmd0aCArIDI7CiAgICAgIHBhY2tlZEVsbGlwc29pZExlbmd0aCA9IE1hdHJpeDRfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICBwYWNrZWRTcGhlcmVMZW5ndGggPSBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoICsgMTsKICAgICAgc2NyYXRjaE1vZGVsTWF0cml4QW5kQlYgPSB7CiAgICAgICAgbW9kZWxNYXRyaXg6IG5ldyBNYXRyaXg0X2RlZmF1bHQoKSwKICAgICAgICBib3VuZGluZ1ZvbHVtZTogbmV3IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQoKQogICAgICB9OwogICAgICBzY3JhdGNoUG9zaXRpb241ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQ2VudGVyNSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaE1hdHJpeDQgPSBuZXcgTWF0cml4NF9kZWZhdWx0KCk7CiAgICAgIGNyZWF0ZVZlY3RvclRpbGVHZW9tZXRyaWVzX2RlZmF1bHQgPSBjcmVhdGVUYXNrUHJvY2Vzc29yV29ya2VyX2RlZmF1bHQoY3JlYXRlVmVjdG9yVGlsZUdlb21ldHJpZXMpOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlVmVjdG9yVGlsZVBvaW50cy5qcwogIHZhciBjcmVhdGVWZWN0b3JUaWxlUG9pbnRzX2V4cG9ydHMgPSB7fTsKICBfX2V4cG9ydChjcmVhdGVWZWN0b3JUaWxlUG9pbnRzX2V4cG9ydHMsIHsKICAgIGRlZmF1bHQ6ICgpID0+IGNyZWF0ZVZlY3RvclRpbGVQb2ludHNfZGVmYXVsdAogIH0pOwogIGZ1bmN0aW9uIHVucGFja0J1ZmZlcjIocGFja2VkQnVmZmVyKSB7CiAgICBwYWNrZWRCdWZmZXIgPSBuZXcgRmxvYXQ2NEFycmF5KHBhY2tlZEJ1ZmZlcik7CiAgICBsZXQgb2Zmc2V0ID0gMDsKICAgIHNjcmF0Y2hNaW5NYXhIZWlnaHRzLm1pbiA9IHBhY2tlZEJ1ZmZlcltvZmZzZXQrK107CiAgICBzY3JhdGNoTWluTWF4SGVpZ2h0cy5tYXggPSBwYWNrZWRCdWZmZXJbb2Zmc2V0KytdOwogICAgUmVjdGFuZ2xlX2RlZmF1bHQudW5wYWNrKHBhY2tlZEJ1ZmZlciwgb2Zmc2V0LCBzY3JhdGNoUmVjdGFuZ2xlNCk7CiAgICBvZmZzZXQgKz0gUmVjdGFuZ2xlX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgRWxsaXBzb2lkX2RlZmF1bHQudW5wYWNrKHBhY2tlZEJ1ZmZlciwgb2Zmc2V0LCBzY3JhdGNoRWxsaXBzb2lkMTQpOwogIH0KICBmdW5jdGlvbiBjcmVhdGVWZWN0b3JUaWxlUG9pbnRzKHBhcmFtZXRlcnMsIHRyYW5zZmVyYWJsZU9iamVjdHMpIHsKICAgIGNvbnN0IHBvc2l0aW9ucyA9IG5ldyBVaW50MTZBcnJheShwYXJhbWV0ZXJzLnBvc2l0aW9ucyk7CiAgICB1bnBhY2tCdWZmZXIyKHBhcmFtZXRlcnMucGFja2VkQnVmZmVyKTsKICAgIGNvbnN0IHJlY3RhbmdsZSA9IHNjcmF0Y2hSZWN0YW5nbGU0OwogICAgY29uc3QgZWxsaXBzb2lkID0gc2NyYXRjaEVsbGlwc29pZDE0OwogICAgY29uc3QgbWluaW11bUhlaWdodCA9IHNjcmF0Y2hNaW5NYXhIZWlnaHRzLm1pbjsKICAgIGNvbnN0IG1heGltdW1IZWlnaHQgPSBzY3JhdGNoTWluTWF4SGVpZ2h0cy5tYXg7CiAgICBjb25zdCBwb3NpdGlvbnNMZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoIC8gMzsKICAgIGNvbnN0IHVCdWZmZXIgPSBwb3NpdGlvbnMuc3ViYXJyYXkoMCwgcG9zaXRpb25zTGVuZ3RoKTsKICAgIGNvbnN0IHZCdWZmZXIgPSBwb3NpdGlvbnMuc3ViYXJyYXkocG9zaXRpb25zTGVuZ3RoLCAyICogcG9zaXRpb25zTGVuZ3RoKTsKICAgIGNvbnN0IGhlaWdodEJ1ZmZlciA9IHBvc2l0aW9ucy5zdWJhcnJheSgKICAgICAgMiAqIHBvc2l0aW9uc0xlbmd0aCwKICAgICAgMyAqIHBvc2l0aW9uc0xlbmd0aAogICAgKTsKICAgIEF0dHJpYnV0ZUNvbXByZXNzaW9uX2RlZmF1bHQuemlnWmFnRGVsdGFEZWNvZGUodUJ1ZmZlciwgdkJ1ZmZlciwgaGVpZ2h0QnVmZmVyKTsKICAgIGNvbnN0IGRlY29kZWQgPSBuZXcgRmxvYXQ2NEFycmF5KHBvc2l0aW9ucy5sZW5ndGgpOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb3NpdGlvbnNMZW5ndGg7ICsraSkgewogICAgICBjb25zdCB1MyA9IHVCdWZmZXJbaV07CiAgICAgIGNvbnN0IHYzID0gdkJ1ZmZlcltpXTsKICAgICAgY29uc3QgaCA9IGhlaWdodEJ1ZmZlcltpXTsKICAgICAgY29uc3QgbG9uID0gTWF0aF9kZWZhdWx0LmxlcnAocmVjdGFuZ2xlLndlc3QsIHJlY3RhbmdsZS5lYXN0LCB1MyAvIG1heFNob3J0KTsKICAgICAgY29uc3QgbGF0ID0gTWF0aF9kZWZhdWx0LmxlcnAocmVjdGFuZ2xlLnNvdXRoLCByZWN0YW5nbGUubm9ydGgsIHYzIC8gbWF4U2hvcnQpOwogICAgICBjb25zdCBhbHQgPSBNYXRoX2RlZmF1bHQubGVycChtaW5pbXVtSGVpZ2h0LCBtYXhpbXVtSGVpZ2h0LCBoIC8gbWF4U2hvcnQpOwogICAgICBjb25zdCBjYXJ0b2dyYXBoaWMyID0gQ2FydG9ncmFwaGljX2RlZmF1bHQuZnJvbVJhZGlhbnMoCiAgICAgICAgbG9uLAogICAgICAgIGxhdCwKICAgICAgICBhbHQsCiAgICAgICAgc2NyYXRjaEJWQ2FydG9ncmFwaGljMgogICAgICApOwogICAgICBjb25zdCBkZWNvZGVkUG9zaXRpb24gPSBlbGxpcHNvaWQuY2FydG9ncmFwaGljVG9DYXJ0ZXNpYW4oCiAgICAgICAgY2FydG9ncmFwaGljMiwKICAgICAgICBzY3JhdGNoRW5jb2RlZFBvc2l0aW9uMgogICAgICApOwogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayhkZWNvZGVkUG9zaXRpb24sIGRlY29kZWQsIGkgKiAzKTsKICAgIH0KICAgIHRyYW5zZmVyYWJsZU9iamVjdHMucHVzaChkZWNvZGVkLmJ1ZmZlcik7CiAgICByZXR1cm4gewogICAgICBwb3NpdGlvbnM6IGRlY29kZWQuYnVmZmVyCiAgICB9OwogIH0KICB2YXIgbWF4U2hvcnQsIHNjcmF0Y2hCVkNhcnRvZ3JhcGhpYzIsIHNjcmF0Y2hFbmNvZGVkUG9zaXRpb24yLCBzY3JhdGNoUmVjdGFuZ2xlNCwgc2NyYXRjaEVsbGlwc29pZDE0LCBzY3JhdGNoTWluTWF4SGVpZ2h0cywgY3JlYXRlVmVjdG9yVGlsZVBvaW50c19kZWZhdWx0OwogIHZhciBpbml0X2NyZWF0ZVZlY3RvclRpbGVQb2ludHMgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZVZlY3RvclRpbGVQb2ludHMuanMiKCkgewogICAgICBpbml0X0F0dHJpYnV0ZUNvbXByZXNzaW9uKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NhcnRvZ3JhcGhpYygpOwogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgaW5pdF9SZWN0YW5nbGUoKTsKICAgICAgaW5pdF9jcmVhdGVUYXNrUHJvY2Vzc29yV29ya2VyKCk7CiAgICAgIG1heFNob3J0ID0gMzI3Njc7CiAgICAgIHNjcmF0Y2hCVkNhcnRvZ3JhcGhpYzIgPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaEVuY29kZWRQb3NpdGlvbjIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hSZWN0YW5nbGU0ID0gbmV3IFJlY3RhbmdsZV9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hFbGxpcHNvaWQxNCA9IG5ldyBFbGxpcHNvaWRfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoTWluTWF4SGVpZ2h0cyA9IHsKICAgICAgICBtaW46IHZvaWQgMCwKICAgICAgICBtYXg6IHZvaWQgMAogICAgICB9OwogICAgICBjcmVhdGVWZWN0b3JUaWxlUG9pbnRzX2RlZmF1bHQgPSBjcmVhdGVUYXNrUHJvY2Vzc29yV29ya2VyX2RlZmF1bHQoY3JlYXRlVmVjdG9yVGlsZVBvaW50cyk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVWZWN0b3JUaWxlUG9seWdvbnMuanMKICB2YXIgY3JlYXRlVmVjdG9yVGlsZVBvbHlnb25zX2V4cG9ydHMgPSB7fTsKICBfX2V4cG9ydChjcmVhdGVWZWN0b3JUaWxlUG9seWdvbnNfZXhwb3J0cywgewogICAgZGVmYXVsdDogKCkgPT4gY3JlYXRlVmVjdG9yVGlsZVBvbHlnb25zX2RlZmF1bHQKICB9KTsKICBmdW5jdGlvbiB1bnBhY2tCdWZmZXIzKGJ1ZmZlcikgewogICAgY29uc3QgcGFja2VkQnVmZmVyID0gbmV3IEZsb2F0NjRBcnJheShidWZmZXIpOwogICAgbGV0IG9mZnNldCA9IDA7CiAgICBzY3JhdGNoU2NhbGFycy5pbmRleEJ5dGVzUGVyRWxlbWVudCA9IHBhY2tlZEJ1ZmZlcltvZmZzZXQrK107CiAgICBzY3JhdGNoU2NhbGFycy5taW4gPSBwYWNrZWRCdWZmZXJbb2Zmc2V0KytdOwogICAgc2NyYXRjaFNjYWxhcnMubWF4ID0gcGFja2VkQnVmZmVyW29mZnNldCsrXTsKICAgIENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2socGFja2VkQnVmZmVyLCBvZmZzZXQsIHNjcmF0Y2hDZW50ZXI2KTsKICAgIG9mZnNldCArPSBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgRWxsaXBzb2lkX2RlZmF1bHQudW5wYWNrKHBhY2tlZEJ1ZmZlciwgb2Zmc2V0LCBzY3JhdGNoRWxsaXBzb2lkMTUpOwogICAgb2Zmc2V0ICs9IEVsbGlwc29pZF9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgIFJlY3RhbmdsZV9kZWZhdWx0LnVucGFjayhwYWNrZWRCdWZmZXIsIG9mZnNldCwgc2NyYXRjaFJlY3RhbmdsZTUpOwogIH0KICBmdW5jdGlvbiBwYWNrZWRCYXRjaGVkSW5kaWNlc0xlbmd0aDIoYmF0Y2hlZEluZGljZXMpIHsKICAgIGNvbnN0IGxlbmd0aCA9IGJhdGNoZWRJbmRpY2VzLmxlbmd0aDsKICAgIGxldCBjb3VudCA9IDA7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgIGNvdW50ICs9IENvbG9yX2RlZmF1bHQucGFja2VkTGVuZ3RoICsgMyArIGJhdGNoZWRJbmRpY2VzW2ldLmJhdGNoSWRzLmxlbmd0aDsKICAgIH0KICAgIHJldHVybiBjb3VudDsKICB9CiAgZnVuY3Rpb24gcGFja0J1ZmZlcjIoaW5kZXhEYXRhdHlwZSwgYm91bmRpbmdWb2x1bWVzLCBiYXRjaGVkSW5kaWNlcykgewogICAgY29uc3QgbnVtQlZzID0gYm91bmRpbmdWb2x1bWVzLmxlbmd0aDsKICAgIGNvbnN0IGxlbmd0aCA9IDEgKyAxICsgbnVtQlZzICogT3JpZW50ZWRCb3VuZGluZ0JveF9kZWZhdWx0LnBhY2tlZExlbmd0aCArIDEgKyBwYWNrZWRCYXRjaGVkSW5kaWNlc0xlbmd0aDIoYmF0Y2hlZEluZGljZXMpOwogICAgY29uc3QgcGFja2VkQnVmZmVyID0gbmV3IEZsb2F0NjRBcnJheShsZW5ndGgpOwogICAgbGV0IG9mZnNldCA9IDA7CiAgICBwYWNrZWRCdWZmZXJbb2Zmc2V0KytdID0gaW5kZXhEYXRhdHlwZTsKICAgIHBhY2tlZEJ1ZmZlcltvZmZzZXQrK10gPSBudW1CVnM7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUJWczsgKytpKSB7CiAgICAgIE9yaWVudGVkQm91bmRpbmdCb3hfZGVmYXVsdC5wYWNrKGJvdW5kaW5nVm9sdW1lc1tpXSwgcGFja2VkQnVmZmVyLCBvZmZzZXQpOwogICAgICBvZmZzZXQgKz0gT3JpZW50ZWRCb3VuZGluZ0JveF9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgIH0KICAgIGNvbnN0IGluZGljZXNMZW5ndGggPSBiYXRjaGVkSW5kaWNlcy5sZW5ndGg7CiAgICBwYWNrZWRCdWZmZXJbb2Zmc2V0KytdID0gaW5kaWNlc0xlbmd0aDsKICAgIGZvciAobGV0IGogPSAwOyBqIDwgaW5kaWNlc0xlbmd0aDsgKytqKSB7CiAgICAgIGNvbnN0IGJhdGNoZWRJbmRleCA9IGJhdGNoZWRJbmRpY2VzW2pdOwogICAgICBDb2xvcl9kZWZhdWx0LnBhY2soYmF0Y2hlZEluZGV4LmNvbG9yLCBwYWNrZWRCdWZmZXIsIG9mZnNldCk7CiAgICAgIG9mZnNldCArPSBDb2xvcl9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgcGFja2VkQnVmZmVyW29mZnNldCsrXSA9IGJhdGNoZWRJbmRleC5vZmZzZXQ7CiAgICAgIHBhY2tlZEJ1ZmZlcltvZmZzZXQrK10gPSBiYXRjaGVkSW5kZXguY291bnQ7CiAgICAgIGNvbnN0IGJhdGNoSWRzID0gYmF0Y2hlZEluZGV4LmJhdGNoSWRzOwogICAgICBjb25zdCBiYXRjaElkc0xlbmd0aCA9IGJhdGNoSWRzLmxlbmd0aDsKICAgICAgcGFja2VkQnVmZmVyW29mZnNldCsrXSA9IGJhdGNoSWRzTGVuZ3RoOwogICAgICBmb3IgKGxldCBrID0gMDsgayA8IGJhdGNoSWRzTGVuZ3RoOyArK2spIHsKICAgICAgICBwYWNrZWRCdWZmZXJbb2Zmc2V0KytdID0gYmF0Y2hJZHNba107CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBwYWNrZWRCdWZmZXI7CiAgfQogIGZ1bmN0aW9uIGNyZWF0ZVZlY3RvclRpbGVQb2x5Z29ucyhwYXJhbWV0ZXJzLCB0cmFuc2ZlcmFibGVPYmplY3RzKSB7CiAgICB1bnBhY2tCdWZmZXIzKHBhcmFtZXRlcnMucGFja2VkQnVmZmVyKTsKICAgIGxldCBpbmRpY2VzOwogICAgY29uc3QgaW5kZXhCeXRlc1BlckVsZW1lbnQgPSBzY3JhdGNoU2NhbGFycy5pbmRleEJ5dGVzUGVyRWxlbWVudDsKICAgIGlmIChpbmRleEJ5dGVzUGVyRWxlbWVudCA9PT0gMikgewogICAgICBpbmRpY2VzID0gbmV3IFVpbnQxNkFycmF5KHBhcmFtZXRlcnMuaW5kaWNlcyk7CiAgICB9IGVsc2UgewogICAgICBpbmRpY2VzID0gbmV3IFVpbnQzMkFycmF5KHBhcmFtZXRlcnMuaW5kaWNlcyk7CiAgICB9CiAgICBjb25zdCBwb3NpdGlvbnMgPSBuZXcgVWludDE2QXJyYXkocGFyYW1ldGVycy5wb3NpdGlvbnMpOwogICAgY29uc3QgY291bnRzID0gbmV3IFVpbnQzMkFycmF5KHBhcmFtZXRlcnMuY291bnRzKTsKICAgIGNvbnN0IGluZGV4Q291bnRzID0gbmV3IFVpbnQzMkFycmF5KHBhcmFtZXRlcnMuaW5kZXhDb3VudHMpOwogICAgY29uc3QgYmF0Y2hJZHMgPSBuZXcgVWludDMyQXJyYXkocGFyYW1ldGVycy5iYXRjaElkcyk7CiAgICBjb25zdCBiYXRjaFRhYmxlQ29sb3JzID0gbmV3IFVpbnQzMkFycmF5KHBhcmFtZXRlcnMuYmF0Y2hUYWJsZUNvbG9ycyk7CiAgICBjb25zdCBib3VuZGluZ1ZvbHVtZXMgPSBuZXcgQXJyYXkoY291bnRzLmxlbmd0aCk7CiAgICBjb25zdCBjZW50ZXIgPSBzY3JhdGNoQ2VudGVyNjsKICAgIGNvbnN0IGVsbGlwc29pZCA9IHNjcmF0Y2hFbGxpcHNvaWQxNTsKICAgIGxldCByZWN0YW5nbGUgPSBzY3JhdGNoUmVjdGFuZ2xlNTsKICAgIGNvbnN0IG1pbkhlaWdodCA9IHNjcmF0Y2hTY2FsYXJzLm1pbjsKICAgIGNvbnN0IG1heEhlaWdodCA9IHNjcmF0Y2hTY2FsYXJzLm1heDsKICAgIGxldCBtaW5pbXVtSGVpZ2h0cyA9IHBhcmFtZXRlcnMubWluaW11bUhlaWdodHM7CiAgICBsZXQgbWF4aW11bUhlaWdodHMgPSBwYXJhbWV0ZXJzLm1heGltdW1IZWlnaHRzOwogICAgaWYgKGRlZmluZWRfZGVmYXVsdChtaW5pbXVtSGVpZ2h0cykgJiYgZGVmaW5lZF9kZWZhdWx0KG1heGltdW1IZWlnaHRzKSkgewogICAgICBtaW5pbXVtSGVpZ2h0cyA9IG5ldyBGbG9hdDMyQXJyYXkobWluaW11bUhlaWdodHMpOwogICAgICBtYXhpbXVtSGVpZ2h0cyA9IG5ldyBGbG9hdDMyQXJyYXkobWF4aW11bUhlaWdodHMpOwogICAgfQogICAgbGV0IGk7CiAgICBsZXQgajsKICAgIGxldCByZ2JhOwogICAgY29uc3QgcG9zaXRpb25zTGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aCAvIDI7CiAgICBjb25zdCB1QnVmZmVyID0gcG9zaXRpb25zLnN1YmFycmF5KDAsIHBvc2l0aW9uc0xlbmd0aCk7CiAgICBjb25zdCB2QnVmZmVyID0gcG9zaXRpb25zLnN1YmFycmF5KHBvc2l0aW9uc0xlbmd0aCwgMiAqIHBvc2l0aW9uc0xlbmd0aCk7CiAgICBBdHRyaWJ1dGVDb21wcmVzc2lvbl9kZWZhdWx0LnppZ1phZ0RlbHRhRGVjb2RlKHVCdWZmZXIsIHZCdWZmZXIpOwogICAgY29uc3QgZGVjb2RlZFBvc2l0aW9ucyA9IG5ldyBGbG9hdDY0QXJyYXkocG9zaXRpb25zTGVuZ3RoICogMyk7CiAgICBmb3IgKGkgPSAwOyBpIDwgcG9zaXRpb25zTGVuZ3RoOyArK2kpIHsKICAgICAgY29uc3QgdTMgPSB1QnVmZmVyW2ldOwogICAgICBjb25zdCB2MyA9IHZCdWZmZXJbaV07CiAgICAgIGNvbnN0IHggPSBNYXRoX2RlZmF1bHQubGVycChyZWN0YW5nbGUud2VzdCwgcmVjdGFuZ2xlLmVhc3QsIHUzIC8gbWF4U2hvcnQyKTsKICAgICAgY29uc3QgeSA9IE1hdGhfZGVmYXVsdC5sZXJwKHJlY3RhbmdsZS5zb3V0aCwgcmVjdGFuZ2xlLm5vcnRoLCB2MyAvIG1heFNob3J0Mik7CiAgICAgIGNvbnN0IGNhcnQgPSBDYXJ0b2dyYXBoaWNfZGVmYXVsdC5mcm9tUmFkaWFucyh4LCB5LCAwLCBzY3JhdGNoQlZDYXJ0b2dyYXBoaWMzKTsKICAgICAgY29uc3QgZGVjb2RlZFBvc2l0aW9uID0gZWxsaXBzb2lkLmNhcnRvZ3JhcGhpY1RvQ2FydGVzaWFuKAogICAgICAgIGNhcnQsCiAgICAgICAgc2NyYXRjaEVuY29kZWRQb3NpdGlvbjMKICAgICAgKTsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2soZGVjb2RlZFBvc2l0aW9uLCBkZWNvZGVkUG9zaXRpb25zLCBpICogMyk7CiAgICB9CiAgICBjb25zdCBjb3VudHNMZW5ndGggPSBjb3VudHMubGVuZ3RoOwogICAgY29uc3Qgb2Zmc2V0cyA9IG5ldyBBcnJheShjb3VudHNMZW5ndGgpOwogICAgY29uc3QgaW5kZXhPZmZzZXRzID0gbmV3IEFycmF5KGNvdW50c0xlbmd0aCk7CiAgICBsZXQgY3VycmVudE9mZnNldCA9IDA7CiAgICBsZXQgY3VycmVudEluZGV4T2Zmc2V0ID0gMDsKICAgIGZvciAoaSA9IDA7IGkgPCBjb3VudHNMZW5ndGg7ICsraSkgewogICAgICBvZmZzZXRzW2ldID0gY3VycmVudE9mZnNldDsKICAgICAgaW5kZXhPZmZzZXRzW2ldID0gY3VycmVudEluZGV4T2Zmc2V0OwogICAgICBjdXJyZW50T2Zmc2V0ICs9IGNvdW50c1tpXTsKICAgICAgY3VycmVudEluZGV4T2Zmc2V0ICs9IGluZGV4Q291bnRzW2ldOwogICAgfQogICAgY29uc3QgYmF0Y2hlZFBvc2l0aW9ucyA9IG5ldyBGbG9hdDMyQXJyYXkocG9zaXRpb25zTGVuZ3RoICogMyAqIDIpOwogICAgY29uc3QgYmF0Y2hlZElkcyA9IG5ldyBVaW50MTZBcnJheShwb3NpdGlvbnNMZW5ndGggKiAyKTsKICAgIGNvbnN0IGJhdGNoZWRJbmRleE9mZnNldHMgPSBuZXcgVWludDMyQXJyYXkoaW5kZXhPZmZzZXRzLmxlbmd0aCk7CiAgICBjb25zdCBiYXRjaGVkSW5kZXhDb3VudHMgPSBuZXcgVWludDMyQXJyYXkoaW5kZXhDb3VudHMubGVuZ3RoKTsKICAgIGxldCBiYXRjaGVkSW5kaWNlcyA9IFtdOwogICAgY29uc3QgY29sb3JUb0J1ZmZlcnMgPSB7fTsKICAgIGZvciAoaSA9IDA7IGkgPCBjb3VudHNMZW5ndGg7ICsraSkgewogICAgICByZ2JhID0gYmF0Y2hUYWJsZUNvbG9yc1tpXTsKICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoY29sb3JUb0J1ZmZlcnNbcmdiYV0pKSB7CiAgICAgICAgY29sb3JUb0J1ZmZlcnNbcmdiYV0gPSB7CiAgICAgICAgICBwb3NpdGlvbkxlbmd0aDogY291bnRzW2ldLAogICAgICAgICAgaW5kZXhMZW5ndGg6IGluZGV4Q291bnRzW2ldLAogICAgICAgICAgb2Zmc2V0OiAwLAogICAgICAgICAgaW5kZXhPZmZzZXQ6IDAsCiAgICAgICAgICBiYXRjaElkczogW2ldCiAgICAgICAgfTsKICAgICAgfSBlbHNlIHsKICAgICAgICBjb2xvclRvQnVmZmVyc1tyZ2JhXS5wb3NpdGlvbkxlbmd0aCArPSBjb3VudHNbaV07CiAgICAgICAgY29sb3JUb0J1ZmZlcnNbcmdiYV0uaW5kZXhMZW5ndGggKz0gaW5kZXhDb3VudHNbaV07CiAgICAgICAgY29sb3JUb0J1ZmZlcnNbcmdiYV0uYmF0Y2hJZHMucHVzaChpKTsKICAgICAgfQogICAgfQogICAgbGV0IGJ1ZmZlcjsKICAgIGxldCBieUNvbG9yUG9zaXRpb25PZmZzZXQgPSAwOwogICAgbGV0IGJ5Q29sb3JJbmRleE9mZnNldCA9IDA7CiAgICBmb3IgKHJnYmEgaW4gY29sb3JUb0J1ZmZlcnMpIHsKICAgICAgaWYgKGNvbG9yVG9CdWZmZXJzLmhhc093blByb3BlcnR5KHJnYmEpKSB7CiAgICAgICAgYnVmZmVyID0gY29sb3JUb0J1ZmZlcnNbcmdiYV07CiAgICAgICAgYnVmZmVyLm9mZnNldCA9IGJ5Q29sb3JQb3NpdGlvbk9mZnNldDsKICAgICAgICBidWZmZXIuaW5kZXhPZmZzZXQgPSBieUNvbG9ySW5kZXhPZmZzZXQ7CiAgICAgICAgY29uc3QgcG9zaXRpb25MZW5ndGggPSBidWZmZXIucG9zaXRpb25MZW5ndGggKiAyOwogICAgICAgIGNvbnN0IGluZGV4TGVuZ3RoID0gYnVmZmVyLmluZGV4TGVuZ3RoICogMiArIGJ1ZmZlci5wb3NpdGlvbkxlbmd0aCAqIDY7CiAgICAgICAgYnlDb2xvclBvc2l0aW9uT2Zmc2V0ICs9IHBvc2l0aW9uTGVuZ3RoOwogICAgICAgIGJ5Q29sb3JJbmRleE9mZnNldCArPSBpbmRleExlbmd0aDsKICAgICAgICBidWZmZXIuaW5kZXhMZW5ndGggPSBpbmRleExlbmd0aDsKICAgICAgfQogICAgfQogICAgY29uc3QgYmF0Y2hlZERyYXdDYWxscyA9IFtdOwogICAgZm9yIChyZ2JhIGluIGNvbG9yVG9CdWZmZXJzKSB7CiAgICAgIGlmIChjb2xvclRvQnVmZmVycy5oYXNPd25Qcm9wZXJ0eShyZ2JhKSkgewogICAgICAgIGJ1ZmZlciA9IGNvbG9yVG9CdWZmZXJzW3JnYmFdOwogICAgICAgIGJhdGNoZWREcmF3Q2FsbHMucHVzaCh7CiAgICAgICAgICBjb2xvcjogQ29sb3JfZGVmYXVsdC5mcm9tUmdiYShwYXJzZUludChyZ2JhKSksCiAgICAgICAgICBvZmZzZXQ6IGJ1ZmZlci5pbmRleE9mZnNldCwKICAgICAgICAgIGNvdW50OiBidWZmZXIuaW5kZXhMZW5ndGgsCiAgICAgICAgICBiYXRjaElkczogYnVmZmVyLmJhdGNoSWRzCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KICAgIGZvciAoaSA9IDA7IGkgPCBjb3VudHNMZW5ndGg7ICsraSkgewogICAgICByZ2JhID0gYmF0Y2hUYWJsZUNvbG9yc1tpXTsKICAgICAgYnVmZmVyID0gY29sb3JUb0J1ZmZlcnNbcmdiYV07CiAgICAgIGNvbnN0IHBvc2l0aW9uT2Zmc2V0ID0gYnVmZmVyLm9mZnNldDsKICAgICAgbGV0IHBvc2l0aW9uSW5kZXggPSBwb3NpdGlvbk9mZnNldCAqIDM7CiAgICAgIGxldCBiYXRjaElkSW5kZXggPSBwb3NpdGlvbk9mZnNldDsKICAgICAgY29uc3QgcG9seWdvbk9mZnNldCA9IG9mZnNldHNbaV07CiAgICAgIGNvbnN0IHBvbHlnb25Db3VudCA9IGNvdW50c1tpXTsKICAgICAgY29uc3QgYmF0Y2hJZCA9IGJhdGNoSWRzW2ldOwogICAgICBsZXQgcG9seWdvbk1pbmltdW1IZWlnaHQgPSBtaW5IZWlnaHQ7CiAgICAgIGxldCBwb2x5Z29uTWF4aW11bUhlaWdodCA9IG1heEhlaWdodDsKICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChtaW5pbXVtSGVpZ2h0cykgJiYgZGVmaW5lZF9kZWZhdWx0KG1heGltdW1IZWlnaHRzKSkgewogICAgICAgIHBvbHlnb25NaW5pbXVtSGVpZ2h0ID0gbWluaW11bUhlaWdodHNbaV07CiAgICAgICAgcG9seWdvbk1heGltdW1IZWlnaHQgPSBtYXhpbXVtSGVpZ2h0c1tpXTsKICAgICAgfQogICAgICBsZXQgbWluTGF0ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOwogICAgICBsZXQgbWF4TGF0ID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZOwogICAgICBsZXQgbWluTG9uID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOwogICAgICBsZXQgbWF4TG9uID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZOwogICAgICBmb3IgKGogPSAwOyBqIDwgcG9seWdvbkNvdW50OyArK2opIHsKICAgICAgICBjb25zdCBwb3NpdGlvbiA9IENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2soCiAgICAgICAgICBkZWNvZGVkUG9zaXRpb25zLAogICAgICAgICAgcG9seWdvbk9mZnNldCAqIDMgKyBqICogMywKICAgICAgICAgIHNjcmF0Y2hFbmNvZGVkUG9zaXRpb24zCiAgICAgICAgKTsKICAgICAgICBlbGxpcHNvaWQuc2NhbGVUb0dlb2RldGljU3VyZmFjZShwb3NpdGlvbiwgcG9zaXRpb24pOwogICAgICAgIGNvbnN0IGNhcnRvID0gZWxsaXBzb2lkLmNhcnRlc2lhblRvQ2FydG9ncmFwaGljKAogICAgICAgICAgcG9zaXRpb24sCiAgICAgICAgICBzY3JhdGNoQlZDYXJ0b2dyYXBoaWMzCiAgICAgICAgKTsKICAgICAgICBjb25zdCBsYXQgPSBjYXJ0by5sYXRpdHVkZTsKICAgICAgICBjb25zdCBsb24gPSBjYXJ0by5sb25naXR1ZGU7CiAgICAgICAgbWluTGF0ID0gTWF0aC5taW4obGF0LCBtaW5MYXQpOwogICAgICAgIG1heExhdCA9IE1hdGgubWF4KGxhdCwgbWF4TGF0KTsKICAgICAgICBtaW5Mb24gPSBNYXRoLm1pbihsb24sIG1pbkxvbik7CiAgICAgICAgbWF4TG9uID0gTWF0aC5tYXgobG9uLCBtYXhMb24pOwogICAgICAgIGNvbnN0IG5vcm1hbDIgPSBlbGxpcHNvaWQuZ2VvZGV0aWNTdXJmYWNlTm9ybWFsKHBvc2l0aW9uLCBzY3JhdGNoTm9ybWFsNyk7CiAgICAgICAgbGV0IHNjYWxlZE5vcm1hbCA9IENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKAogICAgICAgICAgbm9ybWFsMiwKICAgICAgICAgIHBvbHlnb25NaW5pbXVtSGVpZ2h0LAogICAgICAgICAgc2NyYXRjaFNjYWxlZE5vcm1hbAogICAgICAgICk7CiAgICAgICAgY29uc3QgbWluSGVpZ2h0UG9zaXRpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuYWRkKAogICAgICAgICAgcG9zaXRpb24sCiAgICAgICAgICBzY2FsZWROb3JtYWwsCiAgICAgICAgICBzY3JhdGNoTWluSGVpZ2h0UG9zaXRpb24KICAgICAgICApOwogICAgICAgIHNjYWxlZE5vcm1hbCA9IENhcnRlc2lhbjNfZGVmYXVsdC5tdWx0aXBseUJ5U2NhbGFyKAogICAgICAgICAgbm9ybWFsMiwKICAgICAgICAgIHBvbHlnb25NYXhpbXVtSGVpZ2h0LAogICAgICAgICAgc2NhbGVkTm9ybWFsCiAgICAgICAgKTsKICAgICAgICBjb25zdCBtYXhIZWlnaHRQb3NpdGlvbiA9IENhcnRlc2lhbjNfZGVmYXVsdC5hZGQoCiAgICAgICAgICBwb3NpdGlvbiwKICAgICAgICAgIHNjYWxlZE5vcm1hbCwKICAgICAgICAgIHNjcmF0Y2hNYXhIZWlnaHRQb3NpdGlvbgogICAgICAgICk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KG1heEhlaWdodFBvc2l0aW9uLCBjZW50ZXIsIG1heEhlaWdodFBvc2l0aW9uKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QobWluSGVpZ2h0UG9zaXRpb24sIGNlbnRlciwgbWluSGVpZ2h0UG9zaXRpb24pOwogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKG1heEhlaWdodFBvc2l0aW9uLCBiYXRjaGVkUG9zaXRpb25zLCBwb3NpdGlvbkluZGV4KTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayhtaW5IZWlnaHRQb3NpdGlvbiwgYmF0Y2hlZFBvc2l0aW9ucywgcG9zaXRpb25JbmRleCArIDMpOwogICAgICAgIGJhdGNoZWRJZHNbYmF0Y2hJZEluZGV4XSA9IGJhdGNoSWQ7CiAgICAgICAgYmF0Y2hlZElkc1tiYXRjaElkSW5kZXggKyAxXSA9IGJhdGNoSWQ7CiAgICAgICAgcG9zaXRpb25JbmRleCArPSA2OwogICAgICAgIGJhdGNoSWRJbmRleCArPSAyOwogICAgICB9CiAgICAgIHJlY3RhbmdsZSA9IHNjcmF0Y2hCVlJlY3RhbmdsZTsKICAgICAgcmVjdGFuZ2xlLndlc3QgPSBtaW5Mb247CiAgICAgIHJlY3RhbmdsZS5lYXN0ID0gbWF4TG9uOwogICAgICByZWN0YW5nbGUuc291dGggPSBtaW5MYXQ7CiAgICAgIHJlY3RhbmdsZS5ub3J0aCA9IG1heExhdDsKICAgICAgYm91bmRpbmdWb2x1bWVzW2ldID0gT3JpZW50ZWRCb3VuZGluZ0JveF9kZWZhdWx0LmZyb21SZWN0YW5nbGUoCiAgICAgICAgcmVjdGFuZ2xlLAogICAgICAgIG1pbkhlaWdodCwKICAgICAgICBtYXhIZWlnaHQsCiAgICAgICAgZWxsaXBzb2lkCiAgICAgICk7CiAgICAgIGxldCBpbmRpY2VzSW5kZXggPSBidWZmZXIuaW5kZXhPZmZzZXQ7CiAgICAgIGNvbnN0IGluZGV4T2Zmc2V0ID0gaW5kZXhPZmZzZXRzW2ldOwogICAgICBjb25zdCBpbmRleENvdW50ID0gaW5kZXhDb3VudHNbaV07CiAgICAgIGJhdGNoZWRJbmRleE9mZnNldHNbaV0gPSBpbmRpY2VzSW5kZXg7CiAgICAgIGZvciAoaiA9IDA7IGogPCBpbmRleENvdW50OyBqICs9IDMpIHsKICAgICAgICBjb25zdCBpMCA9IGluZGljZXNbaW5kZXhPZmZzZXQgKyBqXSAtIHBvbHlnb25PZmZzZXQ7CiAgICAgICAgY29uc3QgaTEgPSBpbmRpY2VzW2luZGV4T2Zmc2V0ICsgaiArIDFdIC0gcG9seWdvbk9mZnNldDsKICAgICAgICBjb25zdCBpMiA9IGluZGljZXNbaW5kZXhPZmZzZXQgKyBqICsgMl0gLSBwb2x5Z29uT2Zmc2V0OwogICAgICAgIGJhdGNoZWRJbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IGkwICogMiArIHBvc2l0aW9uT2Zmc2V0OwogICAgICAgIGJhdGNoZWRJbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IGkxICogMiArIHBvc2l0aW9uT2Zmc2V0OwogICAgICAgIGJhdGNoZWRJbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IGkyICogMiArIHBvc2l0aW9uT2Zmc2V0OwogICAgICAgIGJhdGNoZWRJbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IGkyICogMiArIDEgKyBwb3NpdGlvbk9mZnNldDsKICAgICAgICBiYXRjaGVkSW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBpMSAqIDIgKyAxICsgcG9zaXRpb25PZmZzZXQ7CiAgICAgICAgYmF0Y2hlZEluZGljZXNbaW5kaWNlc0luZGV4KytdID0gaTAgKiAyICsgMSArIHBvc2l0aW9uT2Zmc2V0OwogICAgICB9CiAgICAgIGZvciAoaiA9IDA7IGogPCBwb2x5Z29uQ291bnQ7ICsraikgewogICAgICAgIGNvbnN0IHYwMiA9IGo7CiAgICAgICAgY29uc3QgdjEyID0gKGogKyAxKSAlIHBvbHlnb25Db3VudDsKICAgICAgICBiYXRjaGVkSW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSB2MDIgKiAyICsgMSArIHBvc2l0aW9uT2Zmc2V0OwogICAgICAgIGJhdGNoZWRJbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IHYxMiAqIDIgKyBwb3NpdGlvbk9mZnNldDsKICAgICAgICBiYXRjaGVkSW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSB2MDIgKiAyICsgcG9zaXRpb25PZmZzZXQ7CiAgICAgICAgYmF0Y2hlZEluZGljZXNbaW5kaWNlc0luZGV4KytdID0gdjAyICogMiArIDEgKyBwb3NpdGlvbk9mZnNldDsKICAgICAgICBiYXRjaGVkSW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSB2MTIgKiAyICsgMSArIHBvc2l0aW9uT2Zmc2V0OwogICAgICAgIGJhdGNoZWRJbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IHYxMiAqIDIgKyBwb3NpdGlvbk9mZnNldDsKICAgICAgfQogICAgICBidWZmZXIub2Zmc2V0ICs9IHBvbHlnb25Db3VudCAqIDI7CiAgICAgIGJ1ZmZlci5pbmRleE9mZnNldCA9IGluZGljZXNJbmRleDsKICAgICAgYmF0Y2hlZEluZGV4Q291bnRzW2ldID0gaW5kaWNlc0luZGV4IC0gYmF0Y2hlZEluZGV4T2Zmc2V0c1tpXTsKICAgIH0KICAgIGJhdGNoZWRJbmRpY2VzID0gSW5kZXhEYXRhdHlwZV9kZWZhdWx0LmNyZWF0ZVR5cGVkQXJyYXkoCiAgICAgIGJhdGNoZWRQb3NpdGlvbnMubGVuZ3RoIC8gMywKICAgICAgYmF0Y2hlZEluZGljZXMKICAgICk7CiAgICBjb25zdCBiYXRjaGVkSW5kaWNlc0xlbmd0aCA9IGJhdGNoZWREcmF3Q2FsbHMubGVuZ3RoOwogICAgZm9yIChsZXQgbSA9IDA7IG0gPCBiYXRjaGVkSW5kaWNlc0xlbmd0aDsgKyttKSB7CiAgICAgIGNvbnN0IHRlbXBJZHMgPSBiYXRjaGVkRHJhd0NhbGxzW21dLmJhdGNoSWRzOwogICAgICBsZXQgY291bnQgPSAwOwogICAgICBjb25zdCB0ZW1wSWRzTGVuZ3RoID0gdGVtcElkcy5sZW5ndGg7CiAgICAgIGZvciAobGV0IG4gPSAwOyBuIDwgdGVtcElkc0xlbmd0aDsgKytuKSB7CiAgICAgICAgY291bnQgKz0gYmF0Y2hlZEluZGV4Q291bnRzW3RlbXBJZHNbbl1dOwogICAgICB9CiAgICAgIGJhdGNoZWREcmF3Q2FsbHNbbV0uY291bnQgPSBjb3VudDsKICAgIH0KICAgIGNvbnN0IGluZGV4RGF0YXR5cGUgPSBiYXRjaGVkSW5kaWNlcy5CWVRFU19QRVJfRUxFTUVOVCA9PT0gMiA/IEluZGV4RGF0YXR5cGVfZGVmYXVsdC5VTlNJR05FRF9TSE9SVCA6IEluZGV4RGF0YXR5cGVfZGVmYXVsdC5VTlNJR05FRF9JTlQ7CiAgICBjb25zdCBwYWNrZWRCdWZmZXIgPSBwYWNrQnVmZmVyMigKICAgICAgaW5kZXhEYXRhdHlwZSwKICAgICAgYm91bmRpbmdWb2x1bWVzLAogICAgICBiYXRjaGVkRHJhd0NhbGxzCiAgICApOwogICAgdHJhbnNmZXJhYmxlT2JqZWN0cy5wdXNoKAogICAgICBiYXRjaGVkUG9zaXRpb25zLmJ1ZmZlciwKICAgICAgYmF0Y2hlZEluZGljZXMuYnVmZmVyLAogICAgICBiYXRjaGVkSW5kZXhPZmZzZXRzLmJ1ZmZlciwKICAgICAgYmF0Y2hlZEluZGV4Q291bnRzLmJ1ZmZlciwKICAgICAgYmF0Y2hlZElkcy5idWZmZXIsCiAgICAgIHBhY2tlZEJ1ZmZlci5idWZmZXIKICAgICk7CiAgICByZXR1cm4gewogICAgICBwb3NpdGlvbnM6IGJhdGNoZWRQb3NpdGlvbnMuYnVmZmVyLAogICAgICBpbmRpY2VzOiBiYXRjaGVkSW5kaWNlcy5idWZmZXIsCiAgICAgIGluZGV4T2Zmc2V0czogYmF0Y2hlZEluZGV4T2Zmc2V0cy5idWZmZXIsCiAgICAgIGluZGV4Q291bnRzOiBiYXRjaGVkSW5kZXhDb3VudHMuYnVmZmVyLAogICAgICBiYXRjaElkczogYmF0Y2hlZElkcy5idWZmZXIsCiAgICAgIHBhY2tlZEJ1ZmZlcjogcGFja2VkQnVmZmVyLmJ1ZmZlcgogICAgfTsKICB9CiAgdmFyIHNjcmF0Y2hDZW50ZXI2LCBzY3JhdGNoRWxsaXBzb2lkMTUsIHNjcmF0Y2hSZWN0YW5nbGU1LCBzY3JhdGNoU2NhbGFycywgbWF4U2hvcnQyLCBzY3JhdGNoRW5jb2RlZFBvc2l0aW9uMywgc2NyYXRjaE5vcm1hbDcsIHNjcmF0Y2hTY2FsZWROb3JtYWwsIHNjcmF0Y2hNaW5IZWlnaHRQb3NpdGlvbiwgc2NyYXRjaE1heEhlaWdodFBvc2l0aW9uLCBzY3JhdGNoQlZDYXJ0b2dyYXBoaWMzLCBzY3JhdGNoQlZSZWN0YW5nbGUsIGNyZWF0ZVZlY3RvclRpbGVQb2x5Z29uc19kZWZhdWx0OwogIHZhciBpbml0X2NyZWF0ZVZlY3RvclRpbGVQb2x5Z29ucyA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlVmVjdG9yVGlsZVBvbHlnb25zLmpzIigpIHsKICAgICAgaW5pdF9BdHRyaWJ1dGVDb21wcmVzc2lvbigpOwogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DYXJ0b2dyYXBoaWMoKTsKICAgICAgaW5pdF9Db2xvcigpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9JbmRleERhdGF0eXBlKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X09yaWVudGVkQm91bmRpbmdCb3goKTsKICAgICAgaW5pdF9SZWN0YW5nbGUoKTsKICAgICAgaW5pdF9jcmVhdGVUYXNrUHJvY2Vzc29yV29ya2VyKCk7CiAgICAgIHNjcmF0Y2hDZW50ZXI2ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoRWxsaXBzb2lkMTUgPSBuZXcgRWxsaXBzb2lkX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFJlY3RhbmdsZTUgPSBuZXcgUmVjdGFuZ2xlX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaFNjYWxhcnMgPSB7CiAgICAgICAgbWluOiB2b2lkIDAsCiAgICAgICAgbWF4OiB2b2lkIDAsCiAgICAgICAgaW5kZXhCeXRlc1BlckVsZW1lbnQ6IHZvaWQgMAogICAgICB9OwogICAgICBtYXhTaG9ydDIgPSAzMjc2NzsKICAgICAgc2NyYXRjaEVuY29kZWRQb3NpdGlvbjMgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hOb3JtYWw3ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoU2NhbGVkTm9ybWFsID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoTWluSGVpZ2h0UG9zaXRpb24gPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hNYXhIZWlnaHRQb3NpdGlvbiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaEJWQ2FydG9ncmFwaGljMyA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQlZSZWN0YW5nbGUgPSBuZXcgUmVjdGFuZ2xlX2RlZmF1bHQoKTsKICAgICAgY3JlYXRlVmVjdG9yVGlsZVBvbHlnb25zX2RlZmF1bHQgPSBjcmVhdGVUYXNrUHJvY2Vzc29yV29ya2VyX2RlZmF1bHQoY3JlYXRlVmVjdG9yVGlsZVBvbHlnb25zKTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2RlY29kZVZlY3RvclBvbHlsaW5lUG9zaXRpb25zLmpzCiAgZnVuY3Rpb24gZGVjb2RlVmVjdG9yUG9seWxpbmVQb3NpdGlvbnMocG9zaXRpb25zLCByZWN0YW5nbGUsIG1pbmltdW1IZWlnaHQsIG1heGltdW1IZWlnaHQsIGVsbGlwc29pZCkgewogICAgY29uc3QgcG9zaXRpb25zTGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aCAvIDM7CiAgICBjb25zdCB1QnVmZmVyID0gcG9zaXRpb25zLnN1YmFycmF5KDAsIHBvc2l0aW9uc0xlbmd0aCk7CiAgICBjb25zdCB2QnVmZmVyID0gcG9zaXRpb25zLnN1YmFycmF5KHBvc2l0aW9uc0xlbmd0aCwgMiAqIHBvc2l0aW9uc0xlbmd0aCk7CiAgICBjb25zdCBoZWlnaHRCdWZmZXIgPSBwb3NpdGlvbnMuc3ViYXJyYXkoCiAgICAgIDIgKiBwb3NpdGlvbnNMZW5ndGgsCiAgICAgIDMgKiBwb3NpdGlvbnNMZW5ndGgKICAgICk7CiAgICBBdHRyaWJ1dGVDb21wcmVzc2lvbl9kZWZhdWx0LnppZ1phZ0RlbHRhRGVjb2RlKHVCdWZmZXIsIHZCdWZmZXIsIGhlaWdodEJ1ZmZlcik7CiAgICBjb25zdCBkZWNvZGVkID0gbmV3IEZsb2F0NjRBcnJheShwb3NpdGlvbnMubGVuZ3RoKTsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9zaXRpb25zTGVuZ3RoOyArK2kpIHsKICAgICAgY29uc3QgdTMgPSB1QnVmZmVyW2ldOwogICAgICBjb25zdCB2MyA9IHZCdWZmZXJbaV07CiAgICAgIGNvbnN0IGggPSBoZWlnaHRCdWZmZXJbaV07CiAgICAgIGNvbnN0IGxvbiA9IE1hdGhfZGVmYXVsdC5sZXJwKHJlY3RhbmdsZS53ZXN0LCByZWN0YW5nbGUuZWFzdCwgdTMgLyBtYXhTaG9ydDMpOwogICAgICBjb25zdCBsYXQgPSBNYXRoX2RlZmF1bHQubGVycChyZWN0YW5nbGUuc291dGgsIHJlY3RhbmdsZS5ub3J0aCwgdjMgLyBtYXhTaG9ydDMpOwogICAgICBjb25zdCBhbHQgPSBNYXRoX2RlZmF1bHQubGVycChtaW5pbXVtSGVpZ2h0LCBtYXhpbXVtSGVpZ2h0LCBoIC8gbWF4U2hvcnQzKTsKICAgICAgY29uc3QgY2FydG9ncmFwaGljMiA9IENhcnRvZ3JhcGhpY19kZWZhdWx0LmZyb21SYWRpYW5zKAogICAgICAgIGxvbiwKICAgICAgICBsYXQsCiAgICAgICAgYWx0LAogICAgICAgIHNjcmF0Y2hCVkNhcnRvZ3JhcGhpYzQKICAgICAgKTsKICAgICAgY29uc3QgZGVjb2RlZFBvc2l0aW9uID0gZWxsaXBzb2lkLmNhcnRvZ3JhcGhpY1RvQ2FydGVzaWFuKAogICAgICAgIGNhcnRvZ3JhcGhpYzIsCiAgICAgICAgc2NyYXRjaEVuY29kZWRQb3NpdGlvbjQKICAgICAgKTsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2soZGVjb2RlZFBvc2l0aW9uLCBkZWNvZGVkLCBpICogMyk7CiAgICB9CiAgICByZXR1cm4gZGVjb2RlZDsKICB9CiAgdmFyIG1heFNob3J0Mywgc2NyYXRjaEJWQ2FydG9ncmFwaGljNCwgc2NyYXRjaEVuY29kZWRQb3NpdGlvbjQsIGRlY29kZVZlY3RvclBvbHlsaW5lUG9zaXRpb25zX2RlZmF1bHQ7CiAgdmFyIGluaXRfZGVjb2RlVmVjdG9yUG9seWxpbmVQb3NpdGlvbnMgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2RlY29kZVZlY3RvclBvbHlsaW5lUG9zaXRpb25zLmpzIigpIHsKICAgICAgaW5pdF9BdHRyaWJ1dGVDb21wcmVzc2lvbigpOwogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DYXJ0b2dyYXBoaWMoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIG1heFNob3J0MyA9IDMyNzY3OwogICAgICBzY3JhdGNoQlZDYXJ0b2dyYXBoaWM0ID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hFbmNvZGVkUG9zaXRpb240ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBkZWNvZGVWZWN0b3JQb2x5bGluZVBvc2l0aW9uc19kZWZhdWx0ID0gZGVjb2RlVmVjdG9yUG9seWxpbmVQb3NpdGlvbnM7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVWZWN0b3JUaWxlUG9seWxpbmVzLmpzCiAgdmFyIGNyZWF0ZVZlY3RvclRpbGVQb2x5bGluZXNfZXhwb3J0cyA9IHt9OwogIF9fZXhwb3J0KGNyZWF0ZVZlY3RvclRpbGVQb2x5bGluZXNfZXhwb3J0cywgewogICAgZGVmYXVsdDogKCkgPT4gY3JlYXRlVmVjdG9yVGlsZVBvbHlsaW5lc19kZWZhdWx0CiAgfSk7CiAgZnVuY3Rpb24gdW5wYWNrQnVmZmVyNChwYWNrZWRCdWZmZXIpIHsKICAgIHBhY2tlZEJ1ZmZlciA9IG5ldyBGbG9hdDY0QXJyYXkocGFja2VkQnVmZmVyKTsKICAgIGxldCBvZmZzZXQgPSAwOwogICAgc2NyYXRjaE1pbk1heEhlaWdodHMyLm1pbiA9IHBhY2tlZEJ1ZmZlcltvZmZzZXQrK107CiAgICBzY3JhdGNoTWluTWF4SGVpZ2h0czIubWF4ID0gcGFja2VkQnVmZmVyW29mZnNldCsrXTsKICAgIFJlY3RhbmdsZV9kZWZhdWx0LnVucGFjayhwYWNrZWRCdWZmZXIsIG9mZnNldCwgc2NyYXRjaFJlY3RhbmdsZTYpOwogICAgb2Zmc2V0ICs9IFJlY3RhbmdsZV9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgIEVsbGlwc29pZF9kZWZhdWx0LnVucGFjayhwYWNrZWRCdWZmZXIsIG9mZnNldCwgc2NyYXRjaEVsbGlwc29pZDE2KTsKICAgIG9mZnNldCArPSBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKHBhY2tlZEJ1ZmZlciwgb2Zmc2V0LCBzY3JhdGNoQ2VudGVyNyk7CiAgfQogIGZ1bmN0aW9uIGdldFBvc2l0aW9uT2Zmc2V0czIoY291bnRzKSB7CiAgICBjb25zdCBjb3VudHNMZW5ndGggPSBjb3VudHMubGVuZ3RoOwogICAgY29uc3QgcG9zaXRpb25PZmZzZXRzID0gbmV3IFVpbnQzMkFycmF5KGNvdW50c0xlbmd0aCArIDEpOwogICAgbGV0IG9mZnNldCA9IDA7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50c0xlbmd0aDsgKytpKSB7CiAgICAgIHBvc2l0aW9uT2Zmc2V0c1tpXSA9IG9mZnNldDsKICAgICAgb2Zmc2V0ICs9IGNvdW50c1tpXTsKICAgIH0KICAgIHBvc2l0aW9uT2Zmc2V0c1tjb3VudHNMZW5ndGhdID0gb2Zmc2V0OwogICAgcmV0dXJuIHBvc2l0aW9uT2Zmc2V0czsKICB9CiAgZnVuY3Rpb24gY3JlYXRlVmVjdG9yVGlsZVBvbHlsaW5lcyhwYXJhbWV0ZXJzLCB0cmFuc2ZlcmFibGVPYmplY3RzKSB7CiAgICBjb25zdCBlbmNvZGVkUG9zaXRpb25zID0gbmV3IFVpbnQxNkFycmF5KHBhcmFtZXRlcnMucG9zaXRpb25zKTsKICAgIGNvbnN0IHdpZHRocyA9IG5ldyBVaW50MTZBcnJheShwYXJhbWV0ZXJzLndpZHRocyk7CiAgICBjb25zdCBjb3VudHMgPSBuZXcgVWludDMyQXJyYXkocGFyYW1ldGVycy5jb3VudHMpOwogICAgY29uc3QgYmF0Y2hJZHMgPSBuZXcgVWludDE2QXJyYXkocGFyYW1ldGVycy5iYXRjaElkcyk7CiAgICB1bnBhY2tCdWZmZXI0KHBhcmFtZXRlcnMucGFja2VkQnVmZmVyKTsKICAgIGNvbnN0IHJlY3RhbmdsZSA9IHNjcmF0Y2hSZWN0YW5nbGU2OwogICAgY29uc3QgZWxsaXBzb2lkID0gc2NyYXRjaEVsbGlwc29pZDE2OwogICAgY29uc3QgY2VudGVyID0gc2NyYXRjaENlbnRlcjc7CiAgICBjb25zdCBtaW5pbXVtSGVpZ2h0ID0gc2NyYXRjaE1pbk1heEhlaWdodHMyLm1pbjsKICAgIGNvbnN0IG1heGltdW1IZWlnaHQgPSBzY3JhdGNoTWluTWF4SGVpZ2h0czIubWF4OwogICAgY29uc3QgcG9zaXRpb25zID0gZGVjb2RlVmVjdG9yUG9seWxpbmVQb3NpdGlvbnNfZGVmYXVsdCgKICAgICAgZW5jb2RlZFBvc2l0aW9ucywKICAgICAgcmVjdGFuZ2xlLAogICAgICBtaW5pbXVtSGVpZ2h0LAogICAgICBtYXhpbXVtSGVpZ2h0LAogICAgICBlbGxpcHNvaWQKICAgICk7CiAgICBjb25zdCBwb3NpdGlvbnNMZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoIC8gMzsKICAgIGNvbnN0IHNpemUgPSBwb3NpdGlvbnNMZW5ndGggKiA0IC0gNDsKICAgIGNvbnN0IGN1clBvc2l0aW9ucyA9IG5ldyBGbG9hdDMyQXJyYXkoc2l6ZSAqIDMpOwogICAgY29uc3QgcHJldlBvc2l0aW9ucyA9IG5ldyBGbG9hdDMyQXJyYXkoc2l6ZSAqIDMpOwogICAgY29uc3QgbmV4dFBvc2l0aW9ucyA9IG5ldyBGbG9hdDMyQXJyYXkoc2l6ZSAqIDMpOwogICAgY29uc3QgZXhwYW5kQW5kV2lkdGggPSBuZXcgRmxvYXQzMkFycmF5KHNpemUgKiAyKTsKICAgIGNvbnN0IHZlcnRleEJhdGNoSWRzID0gbmV3IFVpbnQxNkFycmF5KHNpemUpOwogICAgbGV0IHBvc2l0aW9uSW5kZXggPSAwOwogICAgbGV0IGV4cGFuZEFuZFdpZHRoSW5kZXggPSAwOwogICAgbGV0IGJhdGNoSWRJbmRleCA9IDA7CiAgICBsZXQgaTsKICAgIGxldCBvZmZzZXQgPSAwOwogICAgbGV0IGxlbmd0aCA9IGNvdW50cy5sZW5ndGg7CiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgY29uc3QgY291bnQgPSBjb3VudHNbaV07CiAgICAgIGNvbnN0IHdpZHRoID0gd2lkdGhzW2ldOwogICAgICBjb25zdCBiYXRjaElkID0gYmF0Y2hJZHNbaV07CiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY291bnQ7ICsraikgewogICAgICAgIGxldCBwcmV2aW91czsKICAgICAgICBpZiAoaiA9PT0gMCkgewogICAgICAgICAgY29uc3QgcDAgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKHBvc2l0aW9ucywgb2Zmc2V0ICogMywgc2NyYXRjaFAwMik7CiAgICAgICAgICBjb25zdCBwMSA9IENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2socG9zaXRpb25zLCAob2Zmc2V0ICsgMSkgKiAzLCBzY3JhdGNoUDEyKTsKICAgICAgICAgIHByZXZpb3VzID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHAwLCBwMSwgc2NyYXRjaFByZXYyKTsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQocDAsIHByZXZpb3VzLCBwcmV2aW91cyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHByZXZpb3VzID0gQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjaygKICAgICAgICAgICAgcG9zaXRpb25zLAogICAgICAgICAgICAob2Zmc2V0ICsgaiAtIDEpICogMywKICAgICAgICAgICAgc2NyYXRjaFByZXYyCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBjb25zdCBjdXJyZW50ID0gQ2FydGVzaWFuM19kZWZhdWx0LnVucGFjaygKICAgICAgICAgIHBvc2l0aW9ucywKICAgICAgICAgIChvZmZzZXQgKyBqKSAqIDMsCiAgICAgICAgICBzY3JhdGNoQ3VyCiAgICAgICAgKTsKICAgICAgICBsZXQgbmV4dDsKICAgICAgICBpZiAoaiA9PT0gY291bnQgLSAxKSB7CiAgICAgICAgICBjb25zdCBwMiA9IENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2soCiAgICAgICAgICAgIHBvc2l0aW9ucywKICAgICAgICAgICAgKG9mZnNldCArIGNvdW50IC0gMSkgKiAzLAogICAgICAgICAgICBzY3JhdGNoUDAyCiAgICAgICAgICApOwogICAgICAgICAgY29uc3QgcDMgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKAogICAgICAgICAgICBwb3NpdGlvbnMsCiAgICAgICAgICAgIChvZmZzZXQgKyBjb3VudCAtIDIpICogMywKICAgICAgICAgICAgc2NyYXRjaFAxMgogICAgICAgICAgKTsKICAgICAgICAgIG5leHQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QocDIsIHAzLCBzY3JhdGNoTmV4dDIpOwogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmFkZChwMiwgbmV4dCwgbmV4dCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIG5leHQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKHBvc2l0aW9ucywgKG9mZnNldCArIGogKyAxKSAqIDMsIHNjcmF0Y2hOZXh0Mik7CiAgICAgICAgfQogICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdChwcmV2aW91cywgY2VudGVyLCBwcmV2aW91cyk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KGN1cnJlbnQsIGNlbnRlciwgY3VycmVudCk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KG5leHQsIGNlbnRlciwgbmV4dCk7CiAgICAgICAgY29uc3Qgc3RhcnRLID0gaiA9PT0gMCA/IDIgOiAwOwogICAgICAgIGNvbnN0IGVuZEsgPSBqID09PSBjb3VudCAtIDEgPyAyIDogNDsKICAgICAgICBmb3IgKGxldCBrID0gc3RhcnRLOyBrIDwgZW5kSzsgKytrKSB7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayhjdXJyZW50LCBjdXJQb3NpdGlvbnMsIHBvc2l0aW9uSW5kZXgpOwogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2socHJldmlvdXMsIHByZXZQb3NpdGlvbnMsIHBvc2l0aW9uSW5kZXgpOwogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2sobmV4dCwgbmV4dFBvc2l0aW9ucywgcG9zaXRpb25JbmRleCk7CiAgICAgICAgICBwb3NpdGlvbkluZGV4ICs9IDM7CiAgICAgICAgICBjb25zdCBkaXJlY3Rpb24yID0gayAtIDIgPCAwID8gLTEgOiAxOwogICAgICAgICAgZXhwYW5kQW5kV2lkdGhbZXhwYW5kQW5kV2lkdGhJbmRleCsrXSA9IDIgKiAoayAlIDIpIC0gMTsKICAgICAgICAgIGV4cGFuZEFuZFdpZHRoW2V4cGFuZEFuZFdpZHRoSW5kZXgrK10gPSBkaXJlY3Rpb24yICogd2lkdGg7CiAgICAgICAgICB2ZXJ0ZXhCYXRjaElkc1tiYXRjaElkSW5kZXgrK10gPSBiYXRjaElkOwogICAgICAgIH0KICAgICAgfQogICAgICBvZmZzZXQgKz0gY291bnQ7CiAgICB9CiAgICBjb25zdCBpbmRpY2VzID0gSW5kZXhEYXRhdHlwZV9kZWZhdWx0LmNyZWF0ZVR5cGVkQXJyYXkoc2l6ZSwgcG9zaXRpb25zTGVuZ3RoICogNiAtIDYpOwogICAgbGV0IGluZGV4ID0gMDsKICAgIGxldCBpbmRpY2VzSW5kZXggPSAwOwogICAgbGVuZ3RoID0gcG9zaXRpb25zTGVuZ3RoIC0gMTsKICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IGluZGV4OwogICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IGluZGV4ICsgMjsKICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBpbmRleCArIDE7CiAgICAgIGluZGljZXNbaW5kaWNlc0luZGV4KytdID0gaW5kZXggKyAxOwogICAgICBpbmRpY2VzW2luZGljZXNJbmRleCsrXSA9IGluZGV4ICsgMjsKICAgICAgaW5kaWNlc1tpbmRpY2VzSW5kZXgrK10gPSBpbmRleCArIDM7CiAgICAgIGluZGV4ICs9IDQ7CiAgICB9CiAgICB0cmFuc2ZlcmFibGVPYmplY3RzLnB1c2goCiAgICAgIGN1clBvc2l0aW9ucy5idWZmZXIsCiAgICAgIHByZXZQb3NpdGlvbnMuYnVmZmVyLAogICAgICBuZXh0UG9zaXRpb25zLmJ1ZmZlcgogICAgKTsKICAgIHRyYW5zZmVyYWJsZU9iamVjdHMucHVzaCgKICAgICAgZXhwYW5kQW5kV2lkdGguYnVmZmVyLAogICAgICB2ZXJ0ZXhCYXRjaElkcy5idWZmZXIsCiAgICAgIGluZGljZXMuYnVmZmVyCiAgICApOwogICAgbGV0IHJlc3VsdHMgPSB7CiAgICAgIGluZGV4RGF0YXR5cGU6IGluZGljZXMuQllURVNfUEVSX0VMRU1FTlQgPT09IDIgPyBJbmRleERhdGF0eXBlX2RlZmF1bHQuVU5TSUdORURfU0hPUlQgOiBJbmRleERhdGF0eXBlX2RlZmF1bHQuVU5TSUdORURfSU5ULAogICAgICBjdXJyZW50UG9zaXRpb25zOiBjdXJQb3NpdGlvbnMuYnVmZmVyLAogICAgICBwcmV2aW91c1Bvc2l0aW9uczogcHJldlBvc2l0aW9ucy5idWZmZXIsCiAgICAgIG5leHRQb3NpdGlvbnM6IG5leHRQb3NpdGlvbnMuYnVmZmVyLAogICAgICBleHBhbmRBbmRXaWR0aDogZXhwYW5kQW5kV2lkdGguYnVmZmVyLAogICAgICBiYXRjaElkczogdmVydGV4QmF0Y2hJZHMuYnVmZmVyLAogICAgICBpbmRpY2VzOiBpbmRpY2VzLmJ1ZmZlcgogICAgfTsKICAgIGlmIChwYXJhbWV0ZXJzLmtlZXBEZWNvZGVkUG9zaXRpb25zKSB7CiAgICAgIGNvbnN0IHBvc2l0aW9uT2Zmc2V0cyA9IGdldFBvc2l0aW9uT2Zmc2V0czIoY291bnRzKTsKICAgICAgdHJhbnNmZXJhYmxlT2JqZWN0cy5wdXNoKHBvc2l0aW9ucy5idWZmZXIsIHBvc2l0aW9uT2Zmc2V0cy5idWZmZXIpOwogICAgICByZXN1bHRzID0gY29tYmluZV9kZWZhdWx0KHJlc3VsdHMsIHsKICAgICAgICBkZWNvZGVkUG9zaXRpb25zOiBwb3NpdGlvbnMuYnVmZmVyLAogICAgICAgIGRlY29kZWRQb3NpdGlvbk9mZnNldHM6IHBvc2l0aW9uT2Zmc2V0cy5idWZmZXIKICAgICAgfSk7CiAgICB9CiAgICByZXR1cm4gcmVzdWx0czsKICB9CiAgdmFyIHNjcmF0Y2hSZWN0YW5nbGU2LCBzY3JhdGNoRWxsaXBzb2lkMTYsIHNjcmF0Y2hDZW50ZXI3LCBzY3JhdGNoTWluTWF4SGVpZ2h0czIsIHNjcmF0Y2hQMDIsIHNjcmF0Y2hQMTIsIHNjcmF0Y2hQcmV2Miwgc2NyYXRjaEN1ciwgc2NyYXRjaE5leHQyLCBjcmVhdGVWZWN0b3JUaWxlUG9seWxpbmVzX2RlZmF1bHQ7CiAgdmFyIGluaXRfY3JlYXRlVmVjdG9yVGlsZVBvbHlsaW5lcyA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlVmVjdG9yVGlsZVBvbHlsaW5lcy5qcyIoKSB7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X2NvbWJpbmUoKTsKICAgICAgaW5pdF9kZWNvZGVWZWN0b3JQb2x5bGluZVBvc2l0aW9ucygpOwogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBpbml0X0luZGV4RGF0YXR5cGUoKTsKICAgICAgaW5pdF9SZWN0YW5nbGUoKTsKICAgICAgaW5pdF9jcmVhdGVUYXNrUHJvY2Vzc29yV29ya2VyKCk7CiAgICAgIHNjcmF0Y2hSZWN0YW5nbGU2ID0gbmV3IFJlY3RhbmdsZV9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hFbGxpcHNvaWQxNiA9IG5ldyBFbGxpcHNvaWRfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQ2VudGVyNyA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaE1pbk1heEhlaWdodHMyID0gewogICAgICAgIG1pbjogdm9pZCAwLAogICAgICAgIG1heDogdm9pZCAwCiAgICAgIH07CiAgICAgIHNjcmF0Y2hQMDIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hQMTIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hQcmV2MiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaEN1ciA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaE5leHQyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBjcmVhdGVWZWN0b3JUaWxlUG9seWxpbmVzX2RlZmF1bHQgPSBjcmVhdGVUYXNrUHJvY2Vzc29yV29ya2VyX2RlZmF1bHQoY3JlYXRlVmVjdG9yVGlsZVBvbHlsaW5lcyk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9FbGxpcHNvaWRhbE9jY2x1ZGVyLmpzCiAgZnVuY3Rpb24gRWxsaXBzb2lkYWxPY2NsdWRlcihlbGxpcHNvaWQsIGNhbWVyYVBvc2l0aW9uKSB7CiAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5vYmplY3QoImVsbGlwc29pZCIsIGVsbGlwc29pZCk7CiAgICB0aGlzLl9lbGxpcHNvaWQgPSBlbGxpcHNvaWQ7CiAgICB0aGlzLl9jYW1lcmFQb3NpdGlvbiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgIHRoaXMuX2NhbWVyYVBvc2l0aW9uSW5TY2FsZWRTcGFjZSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgIHRoaXMuX2Rpc3RhbmNlVG9MaW1iSW5TY2FsZWRTcGFjZVNxdWFyZWQgPSAwOwogICAgaWYgKGRlZmluZWRfZGVmYXVsdChjYW1lcmFQb3NpdGlvbikpIHsKICAgICAgdGhpcy5jYW1lcmFQb3NpdGlvbiA9IGNhbWVyYVBvc2l0aW9uOwogICAgfQogIH0KICBmdW5jdGlvbiBnZXRQb3NzaWJseVNocnVua0VsbGlwc29pZChlbGxpcHNvaWQsIG1pbmltdW1IZWlnaHQsIHJlc3VsdCkgewogICAgaWYgKGRlZmluZWRfZGVmYXVsdChtaW5pbXVtSGVpZ2h0KSAmJiBtaW5pbXVtSGVpZ2h0IDwgMCAmJiBlbGxpcHNvaWQubWluaW11bVJhZGl1cyA+IC1taW5pbXVtSGVpZ2h0KSB7CiAgICAgIGNvbnN0IGVsbGlwc29pZFNocnVua1JhZGlpID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21FbGVtZW50cygKICAgICAgICBlbGxpcHNvaWQucmFkaWkueCArIG1pbmltdW1IZWlnaHQsCiAgICAgICAgZWxsaXBzb2lkLnJhZGlpLnkgKyBtaW5pbXVtSGVpZ2h0LAogICAgICAgIGVsbGlwc29pZC5yYWRpaS56ICsgbWluaW11bUhlaWdodCwKICAgICAgICBzY3JhdGNoRWxsaXBzb2lkU2hydW5rUmFkaWkKICAgICAgKTsKICAgICAgZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuZnJvbUNhcnRlc2lhbjMoZWxsaXBzb2lkU2hydW5rUmFkaWksIHJlc3VsdCk7CiAgICB9CiAgICByZXR1cm4gZWxsaXBzb2lkOwogIH0KICBmdW5jdGlvbiBjb21wdXRlSG9yaXpvbkN1bGxpbmdQb2ludEZyb21Qb3NpdGlvbnMoZWxsaXBzb2lkLCBkaXJlY3Rpb25Ub1BvaW50LCBwb3NpdGlvbnMsIHJlc3VsdCkgewogICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJkaXJlY3Rpb25Ub1BvaW50IiwgZGlyZWN0aW9uVG9Qb2ludCk7CiAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoInBvc2l0aW9ucyIsIHBvc2l0aW9ucyk7CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgIHJlc3VsdCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgIH0KICAgIGNvbnN0IHNjYWxlZFNwYWNlRGlyZWN0aW9uVG9Qb2ludCA9IGNvbXB1dGVTY2FsZWRTcGFjZURpcmVjdGlvblRvUG9pbnQoCiAgICAgIGVsbGlwc29pZCwKICAgICAgZGlyZWN0aW9uVG9Qb2ludAogICAgKTsKICAgIGxldCByZXN1bHRNYWduaXR1ZGUgPSAwOwogICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHBvc2l0aW9ucy5sZW5ndGg7IGkgPCBsZW47ICsraSkgewogICAgICBjb25zdCBwb3NpdGlvbiA9IHBvc2l0aW9uc1tpXTsKICAgICAgY29uc3QgY2FuZGlkYXRlTWFnbml0dWRlID0gY29tcHV0ZU1hZ25pdHVkZSgKICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgcG9zaXRpb24sCiAgICAgICAgc2NhbGVkU3BhY2VEaXJlY3Rpb25Ub1BvaW50CiAgICAgICk7CiAgICAgIGlmIChjYW5kaWRhdGVNYWduaXR1ZGUgPCAwKSB7CiAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgfQogICAgICByZXN1bHRNYWduaXR1ZGUgPSBNYXRoLm1heChyZXN1bHRNYWduaXR1ZGUsIGNhbmRpZGF0ZU1hZ25pdHVkZSk7CiAgICB9CiAgICByZXR1cm4gbWFnbml0dWRlVG9Qb2ludChzY2FsZWRTcGFjZURpcmVjdGlvblRvUG9pbnQsIHJlc3VsdE1hZ25pdHVkZSwgcmVzdWx0KTsKICB9CiAgZnVuY3Rpb24gY29tcHV0ZUhvcml6b25DdWxsaW5nUG9pbnRGcm9tVmVydGljZXMoZWxsaXBzb2lkLCBkaXJlY3Rpb25Ub1BvaW50LCB2ZXJ0aWNlcywgc3RyaWRlLCBjZW50ZXIsIHJlc3VsdCkgewogICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJkaXJlY3Rpb25Ub1BvaW50IiwgZGlyZWN0aW9uVG9Qb2ludCk7CiAgICBDaGVja19kZWZhdWx0LmRlZmluZWQoInZlcnRpY2VzIiwgdmVydGljZXMpOwogICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJzdHJpZGUiLCBzdHJpZGUpOwogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICByZXN1bHQgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICB9CiAgICBzdHJpZGUgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdHJpZGUsIDMpOwogICAgY2VudGVyID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoY2VudGVyLCBDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTyk7CiAgICBjb25zdCBzY2FsZWRTcGFjZURpcmVjdGlvblRvUG9pbnQgPSBjb21wdXRlU2NhbGVkU3BhY2VEaXJlY3Rpb25Ub1BvaW50KAogICAgICBlbGxpcHNvaWQsCiAgICAgIGRpcmVjdGlvblRvUG9pbnQKICAgICk7CiAgICBsZXQgcmVzdWx0TWFnbml0dWRlID0gMDsKICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB2ZXJ0aWNlcy5sZW5ndGg7IGkgPCBsZW47IGkgKz0gc3RyaWRlKSB7CiAgICAgIHBvc2l0aW9uU2NyYXRjaDUueCA9IHZlcnRpY2VzW2ldICsgY2VudGVyLng7CiAgICAgIHBvc2l0aW9uU2NyYXRjaDUueSA9IHZlcnRpY2VzW2kgKyAxXSArIGNlbnRlci55OwogICAgICBwb3NpdGlvblNjcmF0Y2g1LnogPSB2ZXJ0aWNlc1tpICsgMl0gKyBjZW50ZXIuejsKICAgICAgY29uc3QgY2FuZGlkYXRlTWFnbml0dWRlID0gY29tcHV0ZU1hZ25pdHVkZSgKICAgICAgICBlbGxpcHNvaWQsCiAgICAgICAgcG9zaXRpb25TY3JhdGNoNSwKICAgICAgICBzY2FsZWRTcGFjZURpcmVjdGlvblRvUG9pbnQKICAgICAgKTsKICAgICAgaWYgKGNhbmRpZGF0ZU1hZ25pdHVkZSA8IDApIHsKICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICB9CiAgICAgIHJlc3VsdE1hZ25pdHVkZSA9IE1hdGgubWF4KHJlc3VsdE1hZ25pdHVkZSwgY2FuZGlkYXRlTWFnbml0dWRlKTsKICAgIH0KICAgIHJldHVybiBtYWduaXR1ZGVUb1BvaW50KHNjYWxlZFNwYWNlRGlyZWN0aW9uVG9Qb2ludCwgcmVzdWx0TWFnbml0dWRlLCByZXN1bHQpOwogIH0KICBmdW5jdGlvbiBpc1NjYWxlZFNwYWNlUG9pbnRWaXNpYmxlKG9jY2x1ZGVlU2NhbGVkU3BhY2VQb3NpdGlvbiwgY2FtZXJhUG9zaXRpb25JblNjYWxlZFNwYWNlLCBkaXN0YW5jZVRvTGltYkluU2NhbGVkU3BhY2VTcXVhcmVkKSB7CiAgICBjb25zdCBjdiA9IGNhbWVyYVBvc2l0aW9uSW5TY2FsZWRTcGFjZTsKICAgIGNvbnN0IHZoTWFnbml0dWRlU3F1YXJlZCA9IGRpc3RhbmNlVG9MaW1iSW5TY2FsZWRTcGFjZVNxdWFyZWQ7CiAgICBjb25zdCB2dCA9IENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdCgKICAgICAgb2NjbHVkZWVTY2FsZWRTcGFjZVBvc2l0aW9uLAogICAgICBjdiwKICAgICAgc2NyYXRjaENhcnRlc2lhbjE5CiAgICApOwogICAgY29uc3QgdnREb3RWYyA9IC1DYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KHZ0LCBjdik7CiAgICBjb25zdCBpc09jY2x1ZGVkID0gdmhNYWduaXR1ZGVTcXVhcmVkIDwgMCA/IHZ0RG90VmMgPiAwIDogdnREb3RWYyA+IHZoTWFnbml0dWRlU3F1YXJlZCAmJiB2dERvdFZjICogdnREb3RWYyAvIENhcnRlc2lhbjNfZGVmYXVsdC5tYWduaXR1ZGVTcXVhcmVkKHZ0KSA+IHZoTWFnbml0dWRlU3F1YXJlZDsKICAgIHJldHVybiAhaXNPY2NsdWRlZDsKICB9CiAgZnVuY3Rpb24gY29tcHV0ZU1hZ25pdHVkZShlbGxpcHNvaWQsIHBvc2l0aW9uLCBzY2FsZWRTcGFjZURpcmVjdGlvblRvUG9pbnQpIHsKICAgIGNvbnN0IHNjYWxlZFNwYWNlUG9zaXRpb24gPSBlbGxpcHNvaWQudHJhbnNmb3JtUG9zaXRpb25Ub1NjYWxlZFNwYWNlKAogICAgICBwb3NpdGlvbiwKICAgICAgc2NhbGVkU3BhY2VTY3JhdGNoCiAgICApOwogICAgbGV0IG1hZ25pdHVkZVNxdWFyZWQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlU3F1YXJlZChzY2FsZWRTcGFjZVBvc2l0aW9uKTsKICAgIGxldCBtYWduaXR1ZGUgPSBNYXRoLnNxcnQobWFnbml0dWRlU3F1YXJlZCk7CiAgICBjb25zdCBkaXJlY3Rpb24yID0gQ2FydGVzaWFuM19kZWZhdWx0LmRpdmlkZUJ5U2NhbGFyKAogICAgICBzY2FsZWRTcGFjZVBvc2l0aW9uLAogICAgICBtYWduaXR1ZGUsCiAgICAgIGRpcmVjdGlvblNjcmF0Y2gKICAgICk7CiAgICBtYWduaXR1ZGVTcXVhcmVkID0gTWF0aC5tYXgoMSwgbWFnbml0dWRlU3F1YXJlZCk7CiAgICBtYWduaXR1ZGUgPSBNYXRoLm1heCgxLCBtYWduaXR1ZGUpOwogICAgY29uc3QgY29zQWxwaGEgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZG90KGRpcmVjdGlvbjIsIHNjYWxlZFNwYWNlRGlyZWN0aW9uVG9Qb2ludCk7CiAgICBjb25zdCBzaW5BbHBoYSA9IENhcnRlc2lhbjNfZGVmYXVsdC5tYWduaXR1ZGUoCiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcyhkaXJlY3Rpb24yLCBzY2FsZWRTcGFjZURpcmVjdGlvblRvUG9pbnQsIGRpcmVjdGlvbjIpCiAgICApOwogICAgY29uc3QgY29zQmV0YSA9IDEgLyBtYWduaXR1ZGU7CiAgICBjb25zdCBzaW5CZXRhID0gTWF0aC5zcXJ0KG1hZ25pdHVkZVNxdWFyZWQgLSAxKSAqIGNvc0JldGE7CiAgICByZXR1cm4gMSAvIChjb3NBbHBoYSAqIGNvc0JldGEgLSBzaW5BbHBoYSAqIHNpbkJldGEpOwogIH0KICBmdW5jdGlvbiBtYWduaXR1ZGVUb1BvaW50KHNjYWxlZFNwYWNlRGlyZWN0aW9uVG9Qb2ludCwgcmVzdWx0TWFnbml0dWRlLCByZXN1bHQpIHsKICAgIGlmIChyZXN1bHRNYWduaXR1ZGUgPD0gMCB8fCByZXN1bHRNYWduaXR1ZGUgPT09IDEgLyAwIHx8IHJlc3VsdE1hZ25pdHVkZSAhPT0gcmVzdWx0TWFnbml0dWRlKSB7CiAgICAgIHJldHVybiB2b2lkIDA7CiAgICB9CiAgICByZXR1cm4gQ2FydGVzaWFuM19kZWZhdWx0Lm11bHRpcGx5QnlTY2FsYXIoCiAgICAgIHNjYWxlZFNwYWNlRGlyZWN0aW9uVG9Qb2ludCwKICAgICAgcmVzdWx0TWFnbml0dWRlLAogICAgICByZXN1bHQKICAgICk7CiAgfQogIGZ1bmN0aW9uIGNvbXB1dGVTY2FsZWRTcGFjZURpcmVjdGlvblRvUG9pbnQoZWxsaXBzb2lkLCBkaXJlY3Rpb25Ub1BvaW50KSB7CiAgICBpZiAoQ2FydGVzaWFuM19kZWZhdWx0LmVxdWFscyhkaXJlY3Rpb25Ub1BvaW50LCBDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTykpIHsKICAgICAgcmV0dXJuIGRpcmVjdGlvblRvUG9pbnQ7CiAgICB9CiAgICBlbGxpcHNvaWQudHJhbnNmb3JtUG9zaXRpb25Ub1NjYWxlZFNwYWNlKAogICAgICBkaXJlY3Rpb25Ub1BvaW50LAogICAgICBkaXJlY3Rpb25Ub1BvaW50U2NyYXRjaAogICAgKTsKICAgIHJldHVybiBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKGRpcmVjdGlvblRvUG9pbnRTY3JhdGNoLCBkaXJlY3Rpb25Ub1BvaW50U2NyYXRjaCk7CiAgfQogIHZhciBzY3JhdGNoQ2FydGVzaWFuMTksIHNjcmF0Y2hDYW1lcmFQb3NpdGlvbkluU2NhbGVkU3BhY2VTaHJ1bmssIHNjcmF0Y2hFbGxpcHNvaWRTaHJ1bmssIHN1YnNhbXBsZVNjcmF0Y2gsIHNjcmF0Y2hFbGxpcHNvaWRTaHJ1bmtSYWRpaSwgcG9zaXRpb25TY3JhdGNoNSwgc2NhbGVkU3BhY2VTY3JhdGNoLCBkaXJlY3Rpb25TY3JhdGNoLCBkaXJlY3Rpb25Ub1BvaW50U2NyYXRjaCwgRWxsaXBzb2lkYWxPY2NsdWRlcl9kZWZhdWx0OwogIHZhciBpbml0X0VsbGlwc29pZGFsT2NjbHVkZXIgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0VsbGlwc29pZGFsT2NjbHVkZXIuanMiKCkgewogICAgICBpbml0X0JvdW5kaW5nU3BoZXJlKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NoZWNrKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBpbml0X1JlY3RhbmdsZSgpOwogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhFbGxpcHNvaWRhbE9jY2x1ZGVyLnByb3RvdHlwZSwgewogICAgICAgIC8qKgogICAgICAgICAqIEdldHMgdGhlIG9jY2x1ZGluZyBlbGxpcHNvaWQuCiAgICAgICAgICogQG1lbWJlcm9mIEVsbGlwc29pZGFsT2NjbHVkZXIucHJvdG90eXBlCiAgICAgICAgICogQHR5cGUge0VsbGlwc29pZH0KICAgICAgICAgKi8KICAgICAgICBlbGxpcHNvaWQ6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9lbGxpcHNvaWQ7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHBvc2l0aW9uIG9mIHRoZSBjYW1lcmEuCiAgICAgICAgICogQG1lbWJlcm9mIEVsbGlwc29pZGFsT2NjbHVkZXIucHJvdG90eXBlCiAgICAgICAgICogQHR5cGUge0NhcnRlc2lhbjN9CiAgICAgICAgICovCiAgICAgICAgY2FtZXJhUG9zaXRpb246IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYW1lcmFQb3NpdGlvbjsKICAgICAgICAgIH0sCiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKGNhbWVyYVBvc2l0aW9uKSB7CiAgICAgICAgICAgIGNvbnN0IGVsbGlwc29pZCA9IHRoaXMuX2VsbGlwc29pZDsKICAgICAgICAgICAgY29uc3QgY3YgPSBlbGxpcHNvaWQudHJhbnNmb3JtUG9zaXRpb25Ub1NjYWxlZFNwYWNlKAogICAgICAgICAgICAgIGNhbWVyYVBvc2l0aW9uLAogICAgICAgICAgICAgIHRoaXMuX2NhbWVyYVBvc2l0aW9uSW5TY2FsZWRTcGFjZQogICAgICAgICAgICApOwogICAgICAgICAgICBjb25zdCB2aE1hZ25pdHVkZVNxdWFyZWQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlU3F1YXJlZChjdikgLSAxOwogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoY2FtZXJhUG9zaXRpb24sIHRoaXMuX2NhbWVyYVBvc2l0aW9uKTsKICAgICAgICAgICAgdGhpcy5fY2FtZXJhUG9zaXRpb25JblNjYWxlZFNwYWNlID0gY3Y7CiAgICAgICAgICAgIHRoaXMuX2Rpc3RhbmNlVG9MaW1iSW5TY2FsZWRTcGFjZVNxdWFyZWQgPSB2aE1hZ25pdHVkZVNxdWFyZWQ7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgICAgc2NyYXRjaENhcnRlc2lhbjE5ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBFbGxpcHNvaWRhbE9jY2x1ZGVyLnByb3RvdHlwZS5pc1BvaW50VmlzaWJsZSA9IGZ1bmN0aW9uKG9jY2x1ZGVlKSB7CiAgICAgICAgY29uc3QgZWxsaXBzb2lkID0gdGhpcy5fZWxsaXBzb2lkOwogICAgICAgIGNvbnN0IG9jY2x1ZGVlU2NhbGVkU3BhY2VQb3NpdGlvbiA9IGVsbGlwc29pZC50cmFuc2Zvcm1Qb3NpdGlvblRvU2NhbGVkU3BhY2UoCiAgICAgICAgICBvY2NsdWRlZSwKICAgICAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4xOQogICAgICAgICk7CiAgICAgICAgcmV0dXJuIGlzU2NhbGVkU3BhY2VQb2ludFZpc2libGUoCiAgICAgICAgICBvY2NsdWRlZVNjYWxlZFNwYWNlUG9zaXRpb24sCiAgICAgICAgICB0aGlzLl9jYW1lcmFQb3NpdGlvbkluU2NhbGVkU3BhY2UsCiAgICAgICAgICB0aGlzLl9kaXN0YW5jZVRvTGltYkluU2NhbGVkU3BhY2VTcXVhcmVkCiAgICAgICAgKTsKICAgICAgfTsKICAgICAgRWxsaXBzb2lkYWxPY2NsdWRlci5wcm90b3R5cGUuaXNTY2FsZWRTcGFjZVBvaW50VmlzaWJsZSA9IGZ1bmN0aW9uKG9jY2x1ZGVlU2NhbGVkU3BhY2VQb3NpdGlvbikgewogICAgICAgIHJldHVybiBpc1NjYWxlZFNwYWNlUG9pbnRWaXNpYmxlKAogICAgICAgICAgb2NjbHVkZWVTY2FsZWRTcGFjZVBvc2l0aW9uLAogICAgICAgICAgdGhpcy5fY2FtZXJhUG9zaXRpb25JblNjYWxlZFNwYWNlLAogICAgICAgICAgdGhpcy5fZGlzdGFuY2VUb0xpbWJJblNjYWxlZFNwYWNlU3F1YXJlZAogICAgICAgICk7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hDYW1lcmFQb3NpdGlvbkluU2NhbGVkU3BhY2VTaHJ1bmsgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIEVsbGlwc29pZGFsT2NjbHVkZXIucHJvdG90eXBlLmlzU2NhbGVkU3BhY2VQb2ludFZpc2libGVQb3NzaWJseVVuZGVyRWxsaXBzb2lkID0gZnVuY3Rpb24ob2NjbHVkZWVTY2FsZWRTcGFjZVBvc2l0aW9uLCBtaW5pbXVtSGVpZ2h0KSB7CiAgICAgICAgY29uc3QgZWxsaXBzb2lkID0gdGhpcy5fZWxsaXBzb2lkOwogICAgICAgIGxldCB2aE1hZ25pdHVkZVNxdWFyZWQ7CiAgICAgICAgbGV0IGN2OwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQobWluaW11bUhlaWdodCkgJiYgbWluaW11bUhlaWdodCA8IDAgJiYgZWxsaXBzb2lkLm1pbmltdW1SYWRpdXMgPiAtbWluaW11bUhlaWdodCkgewogICAgICAgICAgY3YgPSBzY3JhdGNoQ2FtZXJhUG9zaXRpb25JblNjYWxlZFNwYWNlU2hydW5rOwogICAgICAgICAgY3YueCA9IHRoaXMuX2NhbWVyYVBvc2l0aW9uLnggLyAoZWxsaXBzb2lkLnJhZGlpLnggKyBtaW5pbXVtSGVpZ2h0KTsKICAgICAgICAgIGN2LnkgPSB0aGlzLl9jYW1lcmFQb3NpdGlvbi55IC8gKGVsbGlwc29pZC5yYWRpaS55ICsgbWluaW11bUhlaWdodCk7CiAgICAgICAgICBjdi56ID0gdGhpcy5fY2FtZXJhUG9zaXRpb24ueiAvIChlbGxpcHNvaWQucmFkaWkueiArIG1pbmltdW1IZWlnaHQpOwogICAgICAgICAgdmhNYWduaXR1ZGVTcXVhcmVkID0gY3YueCAqIGN2LnggKyBjdi55ICogY3YueSArIGN2LnogKiBjdi56IC0gMTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY3YgPSB0aGlzLl9jYW1lcmFQb3NpdGlvbkluU2NhbGVkU3BhY2U7CiAgICAgICAgICB2aE1hZ25pdHVkZVNxdWFyZWQgPSB0aGlzLl9kaXN0YW5jZVRvTGltYkluU2NhbGVkU3BhY2VTcXVhcmVkOwogICAgICAgIH0KICAgICAgICByZXR1cm4gaXNTY2FsZWRTcGFjZVBvaW50VmlzaWJsZSgKICAgICAgICAgIG9jY2x1ZGVlU2NhbGVkU3BhY2VQb3NpdGlvbiwKICAgICAgICAgIGN2LAogICAgICAgICAgdmhNYWduaXR1ZGVTcXVhcmVkCiAgICAgICAgKTsKICAgICAgfTsKICAgICAgRWxsaXBzb2lkYWxPY2NsdWRlci5wcm90b3R5cGUuY29tcHV0ZUhvcml6b25DdWxsaW5nUG9pbnQgPSBmdW5jdGlvbihkaXJlY3Rpb25Ub1BvaW50LCBwb3NpdGlvbnMsIHJlc3VsdCkgewogICAgICAgIHJldHVybiBjb21wdXRlSG9yaXpvbkN1bGxpbmdQb2ludEZyb21Qb3NpdGlvbnMoCiAgICAgICAgICB0aGlzLl9lbGxpcHNvaWQsCiAgICAgICAgICBkaXJlY3Rpb25Ub1BvaW50LAogICAgICAgICAgcG9zaXRpb25zLAogICAgICAgICAgcmVzdWx0CiAgICAgICAgKTsKICAgICAgfTsKICAgICAgc2NyYXRjaEVsbGlwc29pZFNocnVuayA9IEVsbGlwc29pZF9kZWZhdWx0LmNsb25lKEVsbGlwc29pZF9kZWZhdWx0LlVOSVRfU1BIRVJFKTsKICAgICAgRWxsaXBzb2lkYWxPY2NsdWRlci5wcm90b3R5cGUuY29tcHV0ZUhvcml6b25DdWxsaW5nUG9pbnRQb3NzaWJseVVuZGVyRWxsaXBzb2lkID0gZnVuY3Rpb24oZGlyZWN0aW9uVG9Qb2ludCwgcG9zaXRpb25zLCBtaW5pbXVtSGVpZ2h0LCByZXN1bHQpIHsKICAgICAgICBjb25zdCBwb3NzaWJseVNocnVua0VsbGlwc29pZCA9IGdldFBvc3NpYmx5U2hydW5rRWxsaXBzb2lkKAogICAgICAgICAgdGhpcy5fZWxsaXBzb2lkLAogICAgICAgICAgbWluaW11bUhlaWdodCwKICAgICAgICAgIHNjcmF0Y2hFbGxpcHNvaWRTaHJ1bmsKICAgICAgICApOwogICAgICAgIHJldHVybiBjb21wdXRlSG9yaXpvbkN1bGxpbmdQb2ludEZyb21Qb3NpdGlvbnMoCiAgICAgICAgICBwb3NzaWJseVNocnVua0VsbGlwc29pZCwKICAgICAgICAgIGRpcmVjdGlvblRvUG9pbnQsCiAgICAgICAgICBwb3NpdGlvbnMsCiAgICAgICAgICByZXN1bHQKICAgICAgICApOwogICAgICB9OwogICAgICBFbGxpcHNvaWRhbE9jY2x1ZGVyLnByb3RvdHlwZS5jb21wdXRlSG9yaXpvbkN1bGxpbmdQb2ludEZyb21WZXJ0aWNlcyA9IGZ1bmN0aW9uKGRpcmVjdGlvblRvUG9pbnQsIHZlcnRpY2VzLCBzdHJpZGUsIGNlbnRlciwgcmVzdWx0KSB7CiAgICAgICAgcmV0dXJuIGNvbXB1dGVIb3Jpem9uQ3VsbGluZ1BvaW50RnJvbVZlcnRpY2VzKAogICAgICAgICAgdGhpcy5fZWxsaXBzb2lkLAogICAgICAgICAgZGlyZWN0aW9uVG9Qb2ludCwKICAgICAgICAgIHZlcnRpY2VzLAogICAgICAgICAgc3RyaWRlLAogICAgICAgICAgY2VudGVyLAogICAgICAgICAgcmVzdWx0CiAgICAgICAgKTsKICAgICAgfTsKICAgICAgRWxsaXBzb2lkYWxPY2NsdWRlci5wcm90b3R5cGUuY29tcHV0ZUhvcml6b25DdWxsaW5nUG9pbnRGcm9tVmVydGljZXNQb3NzaWJseVVuZGVyRWxsaXBzb2lkID0gZnVuY3Rpb24oZGlyZWN0aW9uVG9Qb2ludCwgdmVydGljZXMsIHN0cmlkZSwgY2VudGVyLCBtaW5pbXVtSGVpZ2h0LCByZXN1bHQpIHsKICAgICAgICBjb25zdCBwb3NzaWJseVNocnVua0VsbGlwc29pZCA9IGdldFBvc3NpYmx5U2hydW5rRWxsaXBzb2lkKAogICAgICAgICAgdGhpcy5fZWxsaXBzb2lkLAogICAgICAgICAgbWluaW11bUhlaWdodCwKICAgICAgICAgIHNjcmF0Y2hFbGxpcHNvaWRTaHJ1bmsKICAgICAgICApOwogICAgICAgIHJldHVybiBjb21wdXRlSG9yaXpvbkN1bGxpbmdQb2ludEZyb21WZXJ0aWNlcygKICAgICAgICAgIHBvc3NpYmx5U2hydW5rRWxsaXBzb2lkLAogICAgICAgICAgZGlyZWN0aW9uVG9Qb2ludCwKICAgICAgICAgIHZlcnRpY2VzLAogICAgICAgICAgc3RyaWRlLAogICAgICAgICAgY2VudGVyLAogICAgICAgICAgcmVzdWx0CiAgICAgICAgKTsKICAgICAgfTsKICAgICAgc3Vic2FtcGxlU2NyYXRjaCA9IFtdOwogICAgICBFbGxpcHNvaWRhbE9jY2x1ZGVyLnByb3RvdHlwZS5jb21wdXRlSG9yaXpvbkN1bGxpbmdQb2ludEZyb21SZWN0YW5nbGUgPSBmdW5jdGlvbihyZWN0YW5nbGUsIGVsbGlwc29pZCwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJyZWN0YW5nbGUiLCByZWN0YW5nbGUpOwogICAgICAgIGNvbnN0IHBvc2l0aW9ucyA9IFJlY3RhbmdsZV9kZWZhdWx0LnN1YnNhbXBsZSgKICAgICAgICAgIHJlY3RhbmdsZSwKICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgIDAsCiAgICAgICAgICBzdWJzYW1wbGVTY3JhdGNoCiAgICAgICAgKTsKICAgICAgICBjb25zdCBicyA9IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQuZnJvbVBvaW50cyhwb3NpdGlvbnMpOwogICAgICAgIGlmIChDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlKGJzLmNlbnRlcikgPCAwLjEgKiBlbGxpcHNvaWQubWluaW11bVJhZGl1cykgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRoaXMuY29tcHV0ZUhvcml6b25DdWxsaW5nUG9pbnQoYnMuY2VudGVyLCBwb3NpdGlvbnMsIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hFbGxpcHNvaWRTaHJ1bmtSYWRpaSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgcG9zaXRpb25TY3JhdGNoNSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NhbGVkU3BhY2VTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBkaXJlY3Rpb25TY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBkaXJlY3Rpb25Ub1BvaW50U2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgRWxsaXBzb2lkYWxPY2NsdWRlcl9kZWZhdWx0ID0gRWxsaXBzb2lkYWxPY2NsdWRlcjsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1ZlcnRpY2FsRXhhZ2dlcmF0aW9uLmpzCiAgdmFyIFZlcnRpY2FsRXhhZ2dlcmF0aW9uLCBzY3JhdGNoQ2FydG9ncmFwaGljNiwgVmVydGljYWxFeGFnZ2VyYXRpb25fZGVmYXVsdDsKICB2YXIgaW5pdF9WZXJ0aWNhbEV4YWdnZXJhdGlvbiA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvVmVydGljYWxFeGFnZ2VyYXRpb24uanMiKCkgewogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DYXJ0b2dyYXBoaWMoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgVmVydGljYWxFeGFnZ2VyYXRpb24gPSB7fTsKICAgICAgVmVydGljYWxFeGFnZ2VyYXRpb24uZ2V0SGVpZ2h0ID0gZnVuY3Rpb24oaGVpZ2h0LCBzY2FsZSwgcmVsYXRpdmVIZWlnaHQpIHsKICAgICAgICBpZiAoIU51bWJlci5pc0Zpbml0ZShzY2FsZSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJzY2FsZSBtdXN0IGJlIGEgZmluaXRlIG51bWJlci4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFOdW1iZXIuaXNGaW5pdGUocmVsYXRpdmVIZWlnaHQpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgicmVsYXRpdmVIZWlnaHQgbXVzdCBiZSBhIGZpbml0ZSBudW1iZXIuIik7CiAgICAgICAgfQogICAgICAgIHJldHVybiAoaGVpZ2h0IC0gcmVsYXRpdmVIZWlnaHQpICogc2NhbGUgKyByZWxhdGl2ZUhlaWdodDsKICAgICAgfTsKICAgICAgc2NyYXRjaENhcnRvZ3JhcGhpYzYgPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgVmVydGljYWxFeGFnZ2VyYXRpb24uZ2V0UG9zaXRpb24gPSBmdW5jdGlvbihwb3NpdGlvbiwgZWxsaXBzb2lkLCB2ZXJ0aWNhbEV4YWdnZXJhdGlvbiwgdmVydGljYWxFeGFnZ2VyYXRpb25SZWxhdGl2ZUhlaWdodCwgcmVzdWx0KSB7CiAgICAgICAgY29uc3QgY2FydG9ncmFwaGljMiA9IGVsbGlwc29pZC5jYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpYygKICAgICAgICAgIHBvc2l0aW9uLAogICAgICAgICAgc2NyYXRjaENhcnRvZ3JhcGhpYzYKICAgICAgICApOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGNhcnRvZ3JhcGhpYzIpKSB7CiAgICAgICAgICByZXR1cm4gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKHBvc2l0aW9uLCByZXN1bHQpOwogICAgICAgIH0KICAgICAgICBjb25zdCBuZXdIZWlnaHQgPSBWZXJ0aWNhbEV4YWdnZXJhdGlvbi5nZXRIZWlnaHQoCiAgICAgICAgICBjYXJ0b2dyYXBoaWMyLmhlaWdodCwKICAgICAgICAgIHZlcnRpY2FsRXhhZ2dlcmF0aW9uLAogICAgICAgICAgdmVydGljYWxFeGFnZ2VyYXRpb25SZWxhdGl2ZUhlaWdodAogICAgICAgICk7CiAgICAgICAgcmV0dXJuIENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tUmFkaWFucygKICAgICAgICAgIGNhcnRvZ3JhcGhpYzIubG9uZ2l0dWRlLAogICAgICAgICAgY2FydG9ncmFwaGljMi5sYXRpdHVkZSwKICAgICAgICAgIG5ld0hlaWdodCwKICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgIHJlc3VsdAogICAgICAgICk7CiAgICAgIH07CiAgICAgIFZlcnRpY2FsRXhhZ2dlcmF0aW9uX2RlZmF1bHQgPSBWZXJ0aWNhbEV4YWdnZXJhdGlvbjsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1RlcnJhaW5RdWFudGl6YXRpb24uanMKICB2YXIgVGVycmFpblF1YW50aXphdGlvbiwgVGVycmFpblF1YW50aXphdGlvbl9kZWZhdWx0OwogIHZhciBpbml0X1RlcnJhaW5RdWFudGl6YXRpb24gPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1RlcnJhaW5RdWFudGl6YXRpb24uanMiKCkgewogICAgICBUZXJyYWluUXVhbnRpemF0aW9uID0gewogICAgICAgIC8qKgogICAgICAgICAqIFRoZSB2ZXJ0aWNlcyBhcmUgbm90IGNvbXByZXNzZWQuCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIE5PTkU6IDAsCiAgICAgICAgLyoqCiAgICAgICAgICogVGhlIHZlcnRpY2VzIGFyZSBjb21wcmVzc2VkIHRvIDEyIGJpdHMuCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIEJJVFMxMjogMQogICAgICB9OwogICAgICBUZXJyYWluUXVhbnRpemF0aW9uX2RlZmF1bHQgPSBPYmplY3QuZnJlZXplKFRlcnJhaW5RdWFudGl6YXRpb24pOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvVGVycmFpbkVuY29kaW5nLmpzCiAgZnVuY3Rpb24gVGVycmFpbkVuY29kaW5nKGNlbnRlciwgYXhpc0FsaWduZWRCb3VuZGluZ0JveCwgbWluaW11bUhlaWdodCwgbWF4aW11bUhlaWdodCwgZnJvbUVOVSwgaGFzVmVydGV4Tm9ybWFscywgaGFzV2ViTWVyY2F0b3JULCBoYXNHZW9kZXRpY1N1cmZhY2VOb3JtYWxzLCBleGFnZ2VyYXRpb24sIGV4YWdnZXJhdGlvblJlbGF0aXZlSGVpZ2h0KSB7CiAgICBsZXQgcXVhbnRpemF0aW9uID0gVGVycmFpblF1YW50aXphdGlvbl9kZWZhdWx0Lk5PTkU7CiAgICBsZXQgdG9FTlU7CiAgICBsZXQgbWF0cml4OwogICAgaWYgKGRlZmluZWRfZGVmYXVsdChheGlzQWxpZ25lZEJvdW5kaW5nQm94KSAmJiBkZWZpbmVkX2RlZmF1bHQobWluaW11bUhlaWdodCkgJiYgZGVmaW5lZF9kZWZhdWx0KG1heGltdW1IZWlnaHQpICYmIGRlZmluZWRfZGVmYXVsdChmcm9tRU5VKSkgewogICAgICBjb25zdCBtaW5pbXVtID0gYXhpc0FsaWduZWRCb3VuZGluZ0JveC5taW5pbXVtOwogICAgICBjb25zdCBtYXhpbXVtID0gYXhpc0FsaWduZWRCb3VuZGluZ0JveC5tYXhpbXVtOwogICAgICBjb25zdCBkaW1lbnNpb25zID0gQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KAogICAgICAgIG1heGltdW0sCiAgICAgICAgbWluaW11bSwKICAgICAgICBjYXJ0ZXNpYW4zRGltU2NyYXRjaAogICAgICApOwogICAgICBjb25zdCBoRGltID0gbWF4aW11bUhlaWdodCAtIG1pbmltdW1IZWlnaHQ7CiAgICAgIGNvbnN0IG1heERpbSA9IE1hdGgubWF4KENhcnRlc2lhbjNfZGVmYXVsdC5tYXhpbXVtQ29tcG9uZW50KGRpbWVuc2lvbnMpLCBoRGltKTsKICAgICAgaWYgKG1heERpbSA8IFNISUZUX0xFRlRfMTIgLSAxKSB7CiAgICAgICAgcXVhbnRpemF0aW9uID0gVGVycmFpblF1YW50aXphdGlvbl9kZWZhdWx0LkJJVFMxMjsKICAgICAgfSBlbHNlIHsKICAgICAgICBxdWFudGl6YXRpb24gPSBUZXJyYWluUXVhbnRpemF0aW9uX2RlZmF1bHQuTk9ORTsKICAgICAgfQogICAgICB0b0VOVSA9IE1hdHJpeDRfZGVmYXVsdC5pbnZlcnNlVHJhbnNmb3JtYXRpb24oZnJvbUVOVSwgbmV3IE1hdHJpeDRfZGVmYXVsdCgpKTsKICAgICAgY29uc3QgdHJhbnNsYXRpb24yID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5lZ2F0ZShtaW5pbXVtLCBjYXJ0ZXNpYW4zU2NyYXRjaCk7CiAgICAgIE1hdHJpeDRfZGVmYXVsdC5tdWx0aXBseSgKICAgICAgICBNYXRyaXg0X2RlZmF1bHQuZnJvbVRyYW5zbGF0aW9uKHRyYW5zbGF0aW9uMiwgbWF0cml4NFNjcmF0Y2gpLAogICAgICAgIHRvRU5VLAogICAgICAgIHRvRU5VCiAgICAgICk7CiAgICAgIGNvbnN0IHNjYWxlID0gY2FydGVzaWFuM1NjcmF0Y2g7CiAgICAgIHNjYWxlLnggPSAxIC8gZGltZW5zaW9ucy54OwogICAgICBzY2FsZS55ID0gMSAvIGRpbWVuc2lvbnMueTsKICAgICAgc2NhbGUueiA9IDEgLyBkaW1lbnNpb25zLno7CiAgICAgIE1hdHJpeDRfZGVmYXVsdC5tdWx0aXBseShNYXRyaXg0X2RlZmF1bHQuZnJvbVNjYWxlKHNjYWxlLCBtYXRyaXg0U2NyYXRjaCksIHRvRU5VLCB0b0VOVSk7CiAgICAgIG1hdHJpeCA9IE1hdHJpeDRfZGVmYXVsdC5jbG9uZShmcm9tRU5VKTsKICAgICAgTWF0cml4NF9kZWZhdWx0LnNldFRyYW5zbGF0aW9uKG1hdHJpeCwgQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8sIG1hdHJpeCk7CiAgICAgIGZyb21FTlUgPSBNYXRyaXg0X2RlZmF1bHQuY2xvbmUoZnJvbUVOVSwgbmV3IE1hdHJpeDRfZGVmYXVsdCgpKTsKICAgICAgY29uc3QgdHJhbnNsYXRpb25NYXRyaXggPSBNYXRyaXg0X2RlZmF1bHQuZnJvbVRyYW5zbGF0aW9uKG1pbmltdW0sIG1hdHJpeDRTY3JhdGNoKTsKICAgICAgY29uc3Qgc2NhbGVNYXRyaXgyID0gTWF0cml4NF9kZWZhdWx0LmZyb21TY2FsZShkaW1lbnNpb25zLCBtYXRyaXg0U2NyYXRjaDIpOwogICAgICBjb25zdCBzdCA9IE1hdHJpeDRfZGVmYXVsdC5tdWx0aXBseSh0cmFuc2xhdGlvbk1hdHJpeCwgc2NhbGVNYXRyaXgyLCBtYXRyaXg0U2NyYXRjaCk7CiAgICAgIE1hdHJpeDRfZGVmYXVsdC5tdWx0aXBseShmcm9tRU5VLCBzdCwgZnJvbUVOVSk7CiAgICAgIE1hdHJpeDRfZGVmYXVsdC5tdWx0aXBseShtYXRyaXgsIHN0LCBtYXRyaXgpOwogICAgfQogICAgdGhpcy5xdWFudGl6YXRpb24gPSBxdWFudGl6YXRpb247CiAgICB0aGlzLm1pbmltdW1IZWlnaHQgPSBtaW5pbXVtSGVpZ2h0OwogICAgdGhpcy5tYXhpbXVtSGVpZ2h0ID0gbWF4aW11bUhlaWdodDsKICAgIHRoaXMuY2VudGVyID0gQ2FydGVzaWFuM19kZWZhdWx0LmNsb25lKGNlbnRlcik7CiAgICB0aGlzLnRvU2NhbGVkRU5VID0gdG9FTlU7CiAgICB0aGlzLmZyb21TY2FsZWRFTlUgPSBmcm9tRU5VOwogICAgdGhpcy5tYXRyaXggPSBtYXRyaXg7CiAgICB0aGlzLmhhc1ZlcnRleE5vcm1hbHMgPSBoYXNWZXJ0ZXhOb3JtYWxzOwogICAgdGhpcy5oYXNXZWJNZXJjYXRvclQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChoYXNXZWJNZXJjYXRvclQsIGZhbHNlKTsKICAgIHRoaXMuaGFzR2VvZGV0aWNTdXJmYWNlTm9ybWFscyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KAogICAgICBoYXNHZW9kZXRpY1N1cmZhY2VOb3JtYWxzLAogICAgICBmYWxzZQogICAgKTsKICAgIHRoaXMuZXhhZ2dlcmF0aW9uID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoZXhhZ2dlcmF0aW9uLCAxKTsKICAgIHRoaXMuZXhhZ2dlcmF0aW9uUmVsYXRpdmVIZWlnaHQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCgKICAgICAgZXhhZ2dlcmF0aW9uUmVsYXRpdmVIZWlnaHQsCiAgICAgIDAKICAgICk7CiAgICB0aGlzLnN0cmlkZSA9IDA7CiAgICB0aGlzLl9vZmZzZXRHZW9kZXRpY1N1cmZhY2VOb3JtYWwgPSAwOwogICAgdGhpcy5fb2Zmc2V0VmVydGV4Tm9ybWFsID0gMDsKICAgIHRoaXMuX2NhbGN1bGF0ZVN0cmlkZUFuZE9mZnNldHMoKTsKICB9CiAgdmFyIGNhcnRlc2lhbjNTY3JhdGNoLCBjYXJ0ZXNpYW4zRGltU2NyYXRjaCwgY2FydGVzaWFuMlNjcmF0Y2gsIG1hdHJpeDRTY3JhdGNoLCBtYXRyaXg0U2NyYXRjaDIsIFNISUZUX0xFRlRfMTIsIHNjcmF0Y2hQb3NpdGlvbjYsIHNjcmF0Y2hHZW9kZXRpY1N1cmZhY2VOb3JtYWwsIGF0dHJpYnV0ZXNJbmRpY2VzTm9uZSwgYXR0cmlidXRlc0luZGljZXNCaXRzMTIsIFRlcnJhaW5FbmNvZGluZ19kZWZhdWx0OwogIHZhciBpbml0X1RlcnJhaW5FbmNvZGluZyA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvVGVycmFpbkVuY29kaW5nLmpzIigpIHsKICAgICAgaW5pdF9BdHRyaWJ1dGVDb21wcmVzc2lvbigpOwogICAgICBpbml0X0NhcnRlc2lhbjIoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ29tcG9uZW50RGF0YXR5cGUoKTsKICAgICAgaW5pdF9kZWZhdWx0VmFsdWUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X01hdHJpeDQoKTsKICAgICAgaW5pdF9WZXJ0aWNhbEV4YWdnZXJhdGlvbigpOwogICAgICBpbml0X1RlcnJhaW5RdWFudGl6YXRpb24oKTsKICAgICAgY2FydGVzaWFuM1NjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGNhcnRlc2lhbjNEaW1TY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBjYXJ0ZXNpYW4yU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4yX2RlZmF1bHQoKTsKICAgICAgbWF0cml4NFNjcmF0Y2ggPSBuZXcgTWF0cml4NF9kZWZhdWx0KCk7CiAgICAgIG1hdHJpeDRTY3JhdGNoMiA9IG5ldyBNYXRyaXg0X2RlZmF1bHQoKTsKICAgICAgU0hJRlRfTEVGVF8xMiA9IE1hdGgucG93KDIsIDEyKTsKICAgICAgVGVycmFpbkVuY29kaW5nLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbih2ZXJ0ZXhCdWZmZXIsIGJ1ZmZlckluZGV4LCBwb3NpdGlvbiwgdXYsIGhlaWdodCwgbm9ybWFsVG9QYWNrLCB3ZWJNZXJjYXRvclQsIGdlb2RldGljU3VyZmFjZU5vcm1hbCkgewogICAgICAgIGNvbnN0IHUzID0gdXYueDsKICAgICAgICBjb25zdCB2MyA9IHV2Lnk7CiAgICAgICAgaWYgKHRoaXMucXVhbnRpemF0aW9uID09PSBUZXJyYWluUXVhbnRpemF0aW9uX2RlZmF1bHQuQklUUzEyKSB7CiAgICAgICAgICBwb3NpdGlvbiA9IE1hdHJpeDRfZGVmYXVsdC5tdWx0aXBseUJ5UG9pbnQoCiAgICAgICAgICAgIHRoaXMudG9TY2FsZWRFTlUsCiAgICAgICAgICAgIHBvc2l0aW9uLAogICAgICAgICAgICBjYXJ0ZXNpYW4zU2NyYXRjaAogICAgICAgICAgKTsKICAgICAgICAgIHBvc2l0aW9uLnggPSBNYXRoX2RlZmF1bHQuY2xhbXAocG9zaXRpb24ueCwgMCwgMSk7CiAgICAgICAgICBwb3NpdGlvbi55ID0gTWF0aF9kZWZhdWx0LmNsYW1wKHBvc2l0aW9uLnksIDAsIDEpOwogICAgICAgICAgcG9zaXRpb24ueiA9IE1hdGhfZGVmYXVsdC5jbGFtcChwb3NpdGlvbi56LCAwLCAxKTsKICAgICAgICAgIGNvbnN0IGhEaW0gPSB0aGlzLm1heGltdW1IZWlnaHQgLSB0aGlzLm1pbmltdW1IZWlnaHQ7CiAgICAgICAgICBjb25zdCBoID0gTWF0aF9kZWZhdWx0LmNsYW1wKChoZWlnaHQgLSB0aGlzLm1pbmltdW1IZWlnaHQpIC8gaERpbSwgMCwgMSk7CiAgICAgICAgICBDYXJ0ZXNpYW4yX2RlZmF1bHQuZnJvbUVsZW1lbnRzKHBvc2l0aW9uLngsIHBvc2l0aW9uLnksIGNhcnRlc2lhbjJTY3JhdGNoKTsKICAgICAgICAgIGNvbnN0IGNvbXByZXNzZWQwID0gQXR0cmlidXRlQ29tcHJlc3Npb25fZGVmYXVsdC5jb21wcmVzc1RleHR1cmVDb29yZGluYXRlcyhjYXJ0ZXNpYW4yU2NyYXRjaCk7CiAgICAgICAgICBDYXJ0ZXNpYW4yX2RlZmF1bHQuZnJvbUVsZW1lbnRzKHBvc2l0aW9uLnosIGgsIGNhcnRlc2lhbjJTY3JhdGNoKTsKICAgICAgICAgIGNvbnN0IGNvbXByZXNzZWQxID0gQXR0cmlidXRlQ29tcHJlc3Npb25fZGVmYXVsdC5jb21wcmVzc1RleHR1cmVDb29yZGluYXRlcyhjYXJ0ZXNpYW4yU2NyYXRjaCk7CiAgICAgICAgICBDYXJ0ZXNpYW4yX2RlZmF1bHQuZnJvbUVsZW1lbnRzKHUzLCB2MywgY2FydGVzaWFuMlNjcmF0Y2gpOwogICAgICAgICAgY29uc3QgY29tcHJlc3NlZDIgPSBBdHRyaWJ1dGVDb21wcmVzc2lvbl9kZWZhdWx0LmNvbXByZXNzVGV4dHVyZUNvb3JkaW5hdGVzKGNhcnRlc2lhbjJTY3JhdGNoKTsKICAgICAgICAgIHZlcnRleEJ1ZmZlcltidWZmZXJJbmRleCsrXSA9IGNvbXByZXNzZWQwOwogICAgICAgICAgdmVydGV4QnVmZmVyW2J1ZmZlckluZGV4KytdID0gY29tcHJlc3NlZDE7CiAgICAgICAgICB2ZXJ0ZXhCdWZmZXJbYnVmZmVySW5kZXgrK10gPSBjb21wcmVzc2VkMjsKICAgICAgICAgIGlmICh0aGlzLmhhc1dlYk1lcmNhdG9yVCkgewogICAgICAgICAgICBDYXJ0ZXNpYW4yX2RlZmF1bHQuZnJvbUVsZW1lbnRzKHdlYk1lcmNhdG9yVCwgMCwgY2FydGVzaWFuMlNjcmF0Y2gpOwogICAgICAgICAgICBjb25zdCBjb21wcmVzc2VkMyA9IEF0dHJpYnV0ZUNvbXByZXNzaW9uX2RlZmF1bHQuY29tcHJlc3NUZXh0dXJlQ29vcmRpbmF0ZXMoY2FydGVzaWFuMlNjcmF0Y2gpOwogICAgICAgICAgICB2ZXJ0ZXhCdWZmZXJbYnVmZmVySW5kZXgrK10gPSBjb21wcmVzc2VkMzsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LnN1YnRyYWN0KHBvc2l0aW9uLCB0aGlzLmNlbnRlciwgY2FydGVzaWFuM1NjcmF0Y2gpOwogICAgICAgICAgdmVydGV4QnVmZmVyW2J1ZmZlckluZGV4KytdID0gY2FydGVzaWFuM1NjcmF0Y2gueDsKICAgICAgICAgIHZlcnRleEJ1ZmZlcltidWZmZXJJbmRleCsrXSA9IGNhcnRlc2lhbjNTY3JhdGNoLnk7CiAgICAgICAgICB2ZXJ0ZXhCdWZmZXJbYnVmZmVySW5kZXgrK10gPSBjYXJ0ZXNpYW4zU2NyYXRjaC56OwogICAgICAgICAgdmVydGV4QnVmZmVyW2J1ZmZlckluZGV4KytdID0gaGVpZ2h0OwogICAgICAgICAgdmVydGV4QnVmZmVyW2J1ZmZlckluZGV4KytdID0gdTM7CiAgICAgICAgICB2ZXJ0ZXhCdWZmZXJbYnVmZmVySW5kZXgrK10gPSB2MzsKICAgICAgICAgIGlmICh0aGlzLmhhc1dlYk1lcmNhdG9yVCkgewogICAgICAgICAgICB2ZXJ0ZXhCdWZmZXJbYnVmZmVySW5kZXgrK10gPSB3ZWJNZXJjYXRvclQ7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmICh0aGlzLmhhc1ZlcnRleE5vcm1hbHMpIHsKICAgICAgICAgIHZlcnRleEJ1ZmZlcltidWZmZXJJbmRleCsrXSA9IEF0dHJpYnV0ZUNvbXByZXNzaW9uX2RlZmF1bHQub2N0UGFja0Zsb2F0KG5vcm1hbFRvUGFjayk7CiAgICAgICAgfQogICAgICAgIGlmICh0aGlzLmhhc0dlb2RldGljU3VyZmFjZU5vcm1hbHMpIHsKICAgICAgICAgIHZlcnRleEJ1ZmZlcltidWZmZXJJbmRleCsrXSA9IGdlb2RldGljU3VyZmFjZU5vcm1hbC54OwogICAgICAgICAgdmVydGV4QnVmZmVyW2J1ZmZlckluZGV4KytdID0gZ2VvZGV0aWNTdXJmYWNlTm9ybWFsLnk7CiAgICAgICAgICB2ZXJ0ZXhCdWZmZXJbYnVmZmVySW5kZXgrK10gPSBnZW9kZXRpY1N1cmZhY2VOb3JtYWwuejsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGJ1ZmZlckluZGV4OwogICAgICB9OwogICAgICBzY3JhdGNoUG9zaXRpb242ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoR2VvZGV0aWNTdXJmYWNlTm9ybWFsID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBUZXJyYWluRW5jb2RpbmcucHJvdG90eXBlLmFkZEdlb2RldGljU3VyZmFjZU5vcm1hbHMgPSBmdW5jdGlvbihvbGRCdWZmZXIsIG5ld0J1ZmZlciwgZWxsaXBzb2lkKSB7CiAgICAgICAgaWYgKHRoaXMuaGFzR2VvZGV0aWNTdXJmYWNlTm9ybWFscykgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBjb25zdCBvbGRTdHJpZGUgPSB0aGlzLnN0cmlkZTsKICAgICAgICBjb25zdCB2ZXJ0ZXhDb3VudCA9IG9sZEJ1ZmZlci5sZW5ndGggLyBvbGRTdHJpZGU7CiAgICAgICAgdGhpcy5oYXNHZW9kZXRpY1N1cmZhY2VOb3JtYWxzID0gdHJ1ZTsKICAgICAgICB0aGlzLl9jYWxjdWxhdGVTdHJpZGVBbmRPZmZzZXRzKCk7CiAgICAgICAgY29uc3QgbmV3U3RyaWRlID0gdGhpcy5zdHJpZGU7CiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHZlcnRleENvdW50OyBpbmRleCsrKSB7CiAgICAgICAgICBmb3IgKGxldCBvZmZzZXQgPSAwOyBvZmZzZXQgPCBvbGRTdHJpZGU7IG9mZnNldCsrKSB7CiAgICAgICAgICAgIGNvbnN0IG9sZEluZGV4ID0gaW5kZXggKiBvbGRTdHJpZGUgKyBvZmZzZXQ7CiAgICAgICAgICAgIGNvbnN0IG5ld0luZGV4ID0gaW5kZXggKiBuZXdTdHJpZGUgKyBvZmZzZXQ7CiAgICAgICAgICAgIG5ld0J1ZmZlcltuZXdJbmRleF0gPSBvbGRCdWZmZXJbb2xkSW5kZXhdOwogICAgICAgICAgfQogICAgICAgICAgY29uc3QgcG9zaXRpb24gPSB0aGlzLmRlY29kZVBvc2l0aW9uKG5ld0J1ZmZlciwgaW5kZXgsIHNjcmF0Y2hQb3NpdGlvbjYpOwogICAgICAgICAgY29uc3QgZ2VvZGV0aWNTdXJmYWNlTm9ybWFsID0gZWxsaXBzb2lkLmdlb2RldGljU3VyZmFjZU5vcm1hbCgKICAgICAgICAgICAgcG9zaXRpb24sCiAgICAgICAgICAgIHNjcmF0Y2hHZW9kZXRpY1N1cmZhY2VOb3JtYWwKICAgICAgICAgICk7CiAgICAgICAgICBjb25zdCBidWZmZXJJbmRleCA9IGluZGV4ICogbmV3U3RyaWRlICsgdGhpcy5fb2Zmc2V0R2VvZGV0aWNTdXJmYWNlTm9ybWFsOwogICAgICAgICAgbmV3QnVmZmVyW2J1ZmZlckluZGV4XSA9IGdlb2RldGljU3VyZmFjZU5vcm1hbC54OwogICAgICAgICAgbmV3QnVmZmVyW2J1ZmZlckluZGV4ICsgMV0gPSBnZW9kZXRpY1N1cmZhY2VOb3JtYWwueTsKICAgICAgICAgIG5ld0J1ZmZlcltidWZmZXJJbmRleCArIDJdID0gZ2VvZGV0aWNTdXJmYWNlTm9ybWFsLno7CiAgICAgICAgfQogICAgICB9OwogICAgICBUZXJyYWluRW5jb2RpbmcucHJvdG90eXBlLnJlbW92ZUdlb2RldGljU3VyZmFjZU5vcm1hbHMgPSBmdW5jdGlvbihvbGRCdWZmZXIsIG5ld0J1ZmZlcikgewogICAgICAgIGlmICghdGhpcy5oYXNHZW9kZXRpY1N1cmZhY2VOb3JtYWxzKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGNvbnN0IG9sZFN0cmlkZSA9IHRoaXMuc3RyaWRlOwogICAgICAgIGNvbnN0IHZlcnRleENvdW50ID0gb2xkQnVmZmVyLmxlbmd0aCAvIG9sZFN0cmlkZTsKICAgICAgICB0aGlzLmhhc0dlb2RldGljU3VyZmFjZU5vcm1hbHMgPSBmYWxzZTsKICAgICAgICB0aGlzLl9jYWxjdWxhdGVTdHJpZGVBbmRPZmZzZXRzKCk7CiAgICAgICAgY29uc3QgbmV3U3RyaWRlID0gdGhpcy5zdHJpZGU7CiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHZlcnRleENvdW50OyBpbmRleCsrKSB7CiAgICAgICAgICBmb3IgKGxldCBvZmZzZXQgPSAwOyBvZmZzZXQgPCBuZXdTdHJpZGU7IG9mZnNldCsrKSB7CiAgICAgICAgICAgIGNvbnN0IG9sZEluZGV4ID0gaW5kZXggKiBvbGRTdHJpZGUgKyBvZmZzZXQ7CiAgICAgICAgICAgIGNvbnN0IG5ld0luZGV4ID0gaW5kZXggKiBuZXdTdHJpZGUgKyBvZmZzZXQ7CiAgICAgICAgICAgIG5ld0J1ZmZlcltuZXdJbmRleF0gPSBvbGRCdWZmZXJbb2xkSW5kZXhdOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfTsKICAgICAgVGVycmFpbkVuY29kaW5nLnByb3RvdHlwZS5kZWNvZGVQb3NpdGlvbiA9IGZ1bmN0aW9uKGJ1ZmZlciwgaW5kZXgsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgICB9CiAgICAgICAgaW5kZXggKj0gdGhpcy5zdHJpZGU7CiAgICAgICAgaWYgKHRoaXMucXVhbnRpemF0aW9uID09PSBUZXJyYWluUXVhbnRpemF0aW9uX2RlZmF1bHQuQklUUzEyKSB7CiAgICAgICAgICBjb25zdCB4eSA9IEF0dHJpYnV0ZUNvbXByZXNzaW9uX2RlZmF1bHQuZGVjb21wcmVzc1RleHR1cmVDb29yZGluYXRlcygKICAgICAgICAgICAgYnVmZmVyW2luZGV4XSwKICAgICAgICAgICAgY2FydGVzaWFuMlNjcmF0Y2gKICAgICAgICAgICk7CiAgICAgICAgICByZXN1bHQueCA9IHh5Lng7CiAgICAgICAgICByZXN1bHQueSA9IHh5Lnk7CiAgICAgICAgICBjb25zdCB6aCA9IEF0dHJpYnV0ZUNvbXByZXNzaW9uX2RlZmF1bHQuZGVjb21wcmVzc1RleHR1cmVDb29yZGluYXRlcygKICAgICAgICAgICAgYnVmZmVyW2luZGV4ICsgMV0sCiAgICAgICAgICAgIGNhcnRlc2lhbjJTY3JhdGNoCiAgICAgICAgICApOwogICAgICAgICAgcmVzdWx0LnogPSB6aC54OwogICAgICAgICAgcmV0dXJuIE1hdHJpeDRfZGVmYXVsdC5tdWx0aXBseUJ5UG9pbnQodGhpcy5mcm9tU2NhbGVkRU5VLCByZXN1bHQsIHJlc3VsdCk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC54ID0gYnVmZmVyW2luZGV4XTsKICAgICAgICByZXN1bHQueSA9IGJ1ZmZlcltpbmRleCArIDFdOwogICAgICAgIHJlc3VsdC56ID0gYnVmZmVyW2luZGV4ICsgMl07CiAgICAgICAgcmV0dXJuIENhcnRlc2lhbjNfZGVmYXVsdC5hZGQocmVzdWx0LCB0aGlzLmNlbnRlciwgcmVzdWx0KTsKICAgICAgfTsKICAgICAgVGVycmFpbkVuY29kaW5nLnByb3RvdHlwZS5nZXRFeGFnZ2VyYXRlZFBvc2l0aW9uID0gZnVuY3Rpb24oYnVmZmVyLCBpbmRleCwgcmVzdWx0KSB7CiAgICAgICAgcmVzdWx0ID0gdGhpcy5kZWNvZGVQb3NpdGlvbihidWZmZXIsIGluZGV4LCByZXN1bHQpOwogICAgICAgIGNvbnN0IGV4YWdnZXJhdGlvbiA9IHRoaXMuZXhhZ2dlcmF0aW9uOwogICAgICAgIGNvbnN0IGV4YWdnZXJhdGlvblJlbGF0aXZlSGVpZ2h0ID0gdGhpcy5leGFnZ2VyYXRpb25SZWxhdGl2ZUhlaWdodDsKICAgICAgICBjb25zdCBoYXNFeGFnZ2VyYXRpb24gPSBleGFnZ2VyYXRpb24gIT09IDE7CiAgICAgICAgaWYgKGhhc0V4YWdnZXJhdGlvbiAmJiB0aGlzLmhhc0dlb2RldGljU3VyZmFjZU5vcm1hbHMpIHsKICAgICAgICAgIGNvbnN0IGdlb2RldGljU3VyZmFjZU5vcm1hbCA9IHRoaXMuZGVjb2RlR2VvZGV0aWNTdXJmYWNlTm9ybWFsKAogICAgICAgICAgICBidWZmZXIsCiAgICAgICAgICAgIGluZGV4LAogICAgICAgICAgICBzY3JhdGNoR2VvZGV0aWNTdXJmYWNlTm9ybWFsCiAgICAgICAgICApOwogICAgICAgICAgY29uc3QgcmF3SGVpZ2h0ID0gdGhpcy5kZWNvZGVIZWlnaHQoYnVmZmVyLCBpbmRleCk7CiAgICAgICAgICBjb25zdCBoZWlnaHREaWZmZXJlbmNlID0gVmVydGljYWxFeGFnZ2VyYXRpb25fZGVmYXVsdC5nZXRIZWlnaHQoCiAgICAgICAgICAgIHJhd0hlaWdodCwKICAgICAgICAgICAgZXhhZ2dlcmF0aW9uLAogICAgICAgICAgICBleGFnZ2VyYXRpb25SZWxhdGl2ZUhlaWdodAogICAgICAgICAgKSAtIHJhd0hlaWdodDsKICAgICAgICAgIHJlc3VsdC54ICs9IGdlb2RldGljU3VyZmFjZU5vcm1hbC54ICogaGVpZ2h0RGlmZmVyZW5jZTsKICAgICAgICAgIHJlc3VsdC55ICs9IGdlb2RldGljU3VyZmFjZU5vcm1hbC55ICogaGVpZ2h0RGlmZmVyZW5jZTsKICAgICAgICAgIHJlc3VsdC56ICs9IGdlb2RldGljU3VyZmFjZU5vcm1hbC56ICogaGVpZ2h0RGlmZmVyZW5jZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgVGVycmFpbkVuY29kaW5nLnByb3RvdHlwZS5kZWNvZGVUZXh0dXJlQ29vcmRpbmF0ZXMgPSBmdW5jdGlvbihidWZmZXIsIGluZGV4LCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KCk7CiAgICAgICAgfQogICAgICAgIGluZGV4ICo9IHRoaXMuc3RyaWRlOwogICAgICAgIGlmICh0aGlzLnF1YW50aXphdGlvbiA9PT0gVGVycmFpblF1YW50aXphdGlvbl9kZWZhdWx0LkJJVFMxMikgewogICAgICAgICAgcmV0dXJuIEF0dHJpYnV0ZUNvbXByZXNzaW9uX2RlZmF1bHQuZGVjb21wcmVzc1RleHR1cmVDb29yZGluYXRlcygKICAgICAgICAgICAgYnVmZmVyW2luZGV4ICsgMl0sCiAgICAgICAgICAgIHJlc3VsdAogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIENhcnRlc2lhbjJfZGVmYXVsdC5mcm9tRWxlbWVudHMoYnVmZmVyW2luZGV4ICsgNF0sIGJ1ZmZlcltpbmRleCArIDVdLCByZXN1bHQpOwogICAgICB9OwogICAgICBUZXJyYWluRW5jb2RpbmcucHJvdG90eXBlLmRlY29kZUhlaWdodCA9IGZ1bmN0aW9uKGJ1ZmZlciwgaW5kZXgpIHsKICAgICAgICBpbmRleCAqPSB0aGlzLnN0cmlkZTsKICAgICAgICBpZiAodGhpcy5xdWFudGl6YXRpb24gPT09IFRlcnJhaW5RdWFudGl6YXRpb25fZGVmYXVsdC5CSVRTMTIpIHsKICAgICAgICAgIGNvbnN0IHpoID0gQXR0cmlidXRlQ29tcHJlc3Npb25fZGVmYXVsdC5kZWNvbXByZXNzVGV4dHVyZUNvb3JkaW5hdGVzKAogICAgICAgICAgICBidWZmZXJbaW5kZXggKyAxXSwKICAgICAgICAgICAgY2FydGVzaWFuMlNjcmF0Y2gKICAgICAgICAgICk7CiAgICAgICAgICByZXR1cm4gemgueSAqICh0aGlzLm1heGltdW1IZWlnaHQgLSB0aGlzLm1pbmltdW1IZWlnaHQpICsgdGhpcy5taW5pbXVtSGVpZ2h0OwogICAgICAgIH0KICAgICAgICByZXR1cm4gYnVmZmVyW2luZGV4ICsgM107CiAgICAgIH07CiAgICAgIFRlcnJhaW5FbmNvZGluZy5wcm90b3R5cGUuZGVjb2RlV2ViTWVyY2F0b3JUID0gZnVuY3Rpb24oYnVmZmVyLCBpbmRleCkgewogICAgICAgIGluZGV4ICo9IHRoaXMuc3RyaWRlOwogICAgICAgIGlmICh0aGlzLnF1YW50aXphdGlvbiA9PT0gVGVycmFpblF1YW50aXphdGlvbl9kZWZhdWx0LkJJVFMxMikgewogICAgICAgICAgcmV0dXJuIEF0dHJpYnV0ZUNvbXByZXNzaW9uX2RlZmF1bHQuZGVjb21wcmVzc1RleHR1cmVDb29yZGluYXRlcygKICAgICAgICAgICAgYnVmZmVyW2luZGV4ICsgM10sCiAgICAgICAgICAgIGNhcnRlc2lhbjJTY3JhdGNoCiAgICAgICAgICApLng7CiAgICAgICAgfQogICAgICAgIHJldHVybiBidWZmZXJbaW5kZXggKyA2XTsKICAgICAgfTsKICAgICAgVGVycmFpbkVuY29kaW5nLnByb3RvdHlwZS5nZXRPY3RFbmNvZGVkTm9ybWFsID0gZnVuY3Rpb24oYnVmZmVyLCBpbmRleCwgcmVzdWx0KSB7CiAgICAgICAgaW5kZXggPSBpbmRleCAqIHRoaXMuc3RyaWRlICsgdGhpcy5fb2Zmc2V0VmVydGV4Tm9ybWFsOwogICAgICAgIGNvbnN0IHRlbXAgPSBidWZmZXJbaW5kZXhdIC8gMjU2OwogICAgICAgIGNvbnN0IHggPSBNYXRoLmZsb29yKHRlbXApOwogICAgICAgIGNvbnN0IHkgPSAodGVtcCAtIHgpICogMjU2OwogICAgICAgIHJldHVybiBDYXJ0ZXNpYW4yX2RlZmF1bHQuZnJvbUVsZW1lbnRzKHgsIHksIHJlc3VsdCk7CiAgICAgIH07CiAgICAgIFRlcnJhaW5FbmNvZGluZy5wcm90b3R5cGUuZGVjb2RlR2VvZGV0aWNTdXJmYWNlTm9ybWFsID0gZnVuY3Rpb24oYnVmZmVyLCBpbmRleCwgcmVzdWx0KSB7CiAgICAgICAgaW5kZXggPSBpbmRleCAqIHRoaXMuc3RyaWRlICsgdGhpcy5fb2Zmc2V0R2VvZGV0aWNTdXJmYWNlTm9ybWFsOwogICAgICAgIHJlc3VsdC54ID0gYnVmZmVyW2luZGV4XTsKICAgICAgICByZXN1bHQueSA9IGJ1ZmZlcltpbmRleCArIDFdOwogICAgICAgIHJlc3VsdC56ID0gYnVmZmVyW2luZGV4ICsgMl07CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgVGVycmFpbkVuY29kaW5nLnByb3RvdHlwZS5fY2FsY3VsYXRlU3RyaWRlQW5kT2Zmc2V0cyA9IGZ1bmN0aW9uKCkgewogICAgICAgIGxldCB2ZXJ0ZXhTdHJpZGUgPSAwOwogICAgICAgIHN3aXRjaCAodGhpcy5xdWFudGl6YXRpb24pIHsKICAgICAgICAgIGNhc2UgVGVycmFpblF1YW50aXphdGlvbl9kZWZhdWx0LkJJVFMxMjoKICAgICAgICAgICAgdmVydGV4U3RyaWRlICs9IDM7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgdmVydGV4U3RyaWRlICs9IDY7CiAgICAgICAgfQogICAgICAgIGlmICh0aGlzLmhhc1dlYk1lcmNhdG9yVCkgewogICAgICAgICAgdmVydGV4U3RyaWRlICs9IDE7CiAgICAgICAgfQogICAgICAgIGlmICh0aGlzLmhhc1ZlcnRleE5vcm1hbHMpIHsKICAgICAgICAgIHRoaXMuX29mZnNldFZlcnRleE5vcm1hbCA9IHZlcnRleFN0cmlkZTsKICAgICAgICAgIHZlcnRleFN0cmlkZSArPSAxOwogICAgICAgIH0KICAgICAgICBpZiAodGhpcy5oYXNHZW9kZXRpY1N1cmZhY2VOb3JtYWxzKSB7CiAgICAgICAgICB0aGlzLl9vZmZzZXRHZW9kZXRpY1N1cmZhY2VOb3JtYWwgPSB2ZXJ0ZXhTdHJpZGU7CiAgICAgICAgICB2ZXJ0ZXhTdHJpZGUgKz0gMzsKICAgICAgICB9CiAgICAgICAgdGhpcy5zdHJpZGUgPSB2ZXJ0ZXhTdHJpZGU7CiAgICAgIH07CiAgICAgIGF0dHJpYnV0ZXNJbmRpY2VzTm9uZSA9IHsKICAgICAgICBwb3NpdGlvbjNEQW5kSGVpZ2h0OiAwLAogICAgICAgIHRleHR1cmVDb29yZEFuZEVuY29kZWROb3JtYWxzOiAxLAogICAgICAgIGdlb2RldGljU3VyZmFjZU5vcm1hbDogMgogICAgICB9OwogICAgICBhdHRyaWJ1dGVzSW5kaWNlc0JpdHMxMiA9IHsKICAgICAgICBjb21wcmVzc2VkMDogMCwKICAgICAgICBjb21wcmVzc2VkMTogMSwKICAgICAgICBnZW9kZXRpY1N1cmZhY2VOb3JtYWw6IDIKICAgICAgfTsKICAgICAgVGVycmFpbkVuY29kaW5nLnByb3RvdHlwZS5nZXRBdHRyaWJ1dGVzID0gZnVuY3Rpb24oYnVmZmVyKSB7CiAgICAgICAgY29uc3QgZGF0YXR5cGUgPSBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkZMT0FUOwogICAgICAgIGNvbnN0IHNpemVJbkJ5dGVzID0gQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5nZXRTaXplSW5CeXRlcyhkYXRhdHlwZSk7CiAgICAgICAgY29uc3Qgc3RyaWRlSW5CeXRlcyA9IHRoaXMuc3RyaWRlICogc2l6ZUluQnl0ZXM7CiAgICAgICAgbGV0IG9mZnNldEluQnl0ZXMgPSAwOwogICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBbXTsKICAgICAgICBmdW5jdGlvbiBhZGRBdHRyaWJ1dGUoaW5kZXgsIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGUpIHsKICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaCh7CiAgICAgICAgICAgIGluZGV4LAogICAgICAgICAgICB2ZXJ0ZXhCdWZmZXI6IGJ1ZmZlciwKICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IGRhdGF0eXBlLAogICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlLAogICAgICAgICAgICBvZmZzZXRJbkJ5dGVzLAogICAgICAgICAgICBzdHJpZGVJbkJ5dGVzCiAgICAgICAgICB9KTsKICAgICAgICAgIG9mZnNldEluQnl0ZXMgKz0gY29tcG9uZW50c1BlckF0dHJpYnV0ZSAqIHNpemVJbkJ5dGVzOwogICAgICAgIH0KICAgICAgICBpZiAodGhpcy5xdWFudGl6YXRpb24gPT09IFRlcnJhaW5RdWFudGl6YXRpb25fZGVmYXVsdC5OT05FKSB7CiAgICAgICAgICBhZGRBdHRyaWJ1dGUoYXR0cmlidXRlc0luZGljZXNOb25lLnBvc2l0aW9uM0RBbmRIZWlnaHQsIDQpOwogICAgICAgICAgbGV0IGNvbXBvbmVudHNUZXhDb29yZEFuZE5vcm1hbHMgPSAyOwogICAgICAgICAgY29tcG9uZW50c1RleENvb3JkQW5kTm9ybWFscyArPSB0aGlzLmhhc1dlYk1lcmNhdG9yVCA/IDEgOiAwOwogICAgICAgICAgY29tcG9uZW50c1RleENvb3JkQW5kTm9ybWFscyArPSB0aGlzLmhhc1ZlcnRleE5vcm1hbHMgPyAxIDogMDsKICAgICAgICAgIGFkZEF0dHJpYnV0ZSgKICAgICAgICAgICAgYXR0cmlidXRlc0luZGljZXNOb25lLnRleHR1cmVDb29yZEFuZEVuY29kZWROb3JtYWxzLAogICAgICAgICAgICBjb21wb25lbnRzVGV4Q29vcmRBbmROb3JtYWxzCiAgICAgICAgICApOwogICAgICAgICAgaWYgKHRoaXMuaGFzR2VvZGV0aWNTdXJmYWNlTm9ybWFscykgewogICAgICAgICAgICBhZGRBdHRyaWJ1dGUoYXR0cmlidXRlc0luZGljZXNOb25lLmdlb2RldGljU3VyZmFjZU5vcm1hbCwgMyk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNvbnN0IHVzaW5nQXR0cmlidXRlMENvbXBvbmVudDQgPSB0aGlzLmhhc1dlYk1lcmNhdG9yVCB8fCB0aGlzLmhhc1ZlcnRleE5vcm1hbHM7CiAgICAgICAgICBjb25zdCB1c2luZ0F0dHJpYnV0ZTFDb21wb25lbnQxID0gdGhpcy5oYXNXZWJNZXJjYXRvclQgJiYgdGhpcy5oYXNWZXJ0ZXhOb3JtYWxzOwogICAgICAgICAgYWRkQXR0cmlidXRlKAogICAgICAgICAgICBhdHRyaWJ1dGVzSW5kaWNlc0JpdHMxMi5jb21wcmVzc2VkMCwKICAgICAgICAgICAgdXNpbmdBdHRyaWJ1dGUwQ29tcG9uZW50NCA/IDQgOiAzCiAgICAgICAgICApOwogICAgICAgICAgaWYgKHVzaW5nQXR0cmlidXRlMUNvbXBvbmVudDEpIHsKICAgICAgICAgICAgYWRkQXR0cmlidXRlKGF0dHJpYnV0ZXNJbmRpY2VzQml0czEyLmNvbXByZXNzZWQxLCAxKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh0aGlzLmhhc0dlb2RldGljU3VyZmFjZU5vcm1hbHMpIHsKICAgICAgICAgICAgYWRkQXR0cmlidXRlKGF0dHJpYnV0ZXNJbmRpY2VzQml0czEyLmdlb2RldGljU3VyZmFjZU5vcm1hbCwgMyk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBhdHRyaWJ1dGVzOwogICAgICB9OwogICAgICBUZXJyYWluRW5jb2RpbmcucHJvdG90eXBlLmdldEF0dHJpYnV0ZUxvY2F0aW9ucyA9IGZ1bmN0aW9uKCkgewogICAgICAgIGlmICh0aGlzLnF1YW50aXphdGlvbiA9PT0gVGVycmFpblF1YW50aXphdGlvbl9kZWZhdWx0Lk5PTkUpIHsKICAgICAgICAgIHJldHVybiBhdHRyaWJ1dGVzSW5kaWNlc05vbmU7CiAgICAgICAgfQogICAgICAgIHJldHVybiBhdHRyaWJ1dGVzSW5kaWNlc0JpdHMxMjsKICAgICAgfTsKICAgICAgVGVycmFpbkVuY29kaW5nLmNsb25lID0gZnVuY3Rpb24oZW5jb2RpbmcsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGVuY29kaW5nKSkgewogICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVzdWx0KSkgewogICAgICAgICAgcmVzdWx0ID0gbmV3IFRlcnJhaW5FbmNvZGluZygpOwogICAgICAgIH0KICAgICAgICByZXN1bHQucXVhbnRpemF0aW9uID0gZW5jb2RpbmcucXVhbnRpemF0aW9uOwogICAgICAgIHJlc3VsdC5taW5pbXVtSGVpZ2h0ID0gZW5jb2RpbmcubWluaW11bUhlaWdodDsKICAgICAgICByZXN1bHQubWF4aW11bUhlaWdodCA9IGVuY29kaW5nLm1heGltdW1IZWlnaHQ7CiAgICAgICAgcmVzdWx0LmNlbnRlciA9IENhcnRlc2lhbjNfZGVmYXVsdC5jbG9uZShlbmNvZGluZy5jZW50ZXIpOwogICAgICAgIHJlc3VsdC50b1NjYWxlZEVOVSA9IE1hdHJpeDRfZGVmYXVsdC5jbG9uZShlbmNvZGluZy50b1NjYWxlZEVOVSk7CiAgICAgICAgcmVzdWx0LmZyb21TY2FsZWRFTlUgPSBNYXRyaXg0X2RlZmF1bHQuY2xvbmUoZW5jb2RpbmcuZnJvbVNjYWxlZEVOVSk7CiAgICAgICAgcmVzdWx0Lm1hdHJpeCA9IE1hdHJpeDRfZGVmYXVsdC5jbG9uZShlbmNvZGluZy5tYXRyaXgpOwogICAgICAgIHJlc3VsdC5oYXNWZXJ0ZXhOb3JtYWxzID0gZW5jb2RpbmcuaGFzVmVydGV4Tm9ybWFsczsKICAgICAgICByZXN1bHQuaGFzV2ViTWVyY2F0b3JUID0gZW5jb2RpbmcuaGFzV2ViTWVyY2F0b3JUOwogICAgICAgIHJlc3VsdC5oYXNHZW9kZXRpY1N1cmZhY2VOb3JtYWxzID0gZW5jb2RpbmcuaGFzR2VvZGV0aWNTdXJmYWNlTm9ybWFsczsKICAgICAgICByZXN1bHQuZXhhZ2dlcmF0aW9uID0gZW5jb2RpbmcuZXhhZ2dlcmF0aW9uOwogICAgICAgIHJlc3VsdC5leGFnZ2VyYXRpb25SZWxhdGl2ZUhlaWdodCA9IGVuY29kaW5nLmV4YWdnZXJhdGlvblJlbGF0aXZlSGVpZ2h0OwogICAgICAgIHJlc3VsdC5fY2FsY3VsYXRlU3RyaWRlQW5kT2Zmc2V0cygpOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFRlcnJhaW5FbmNvZGluZ19kZWZhdWx0ID0gVGVycmFpbkVuY29kaW5nOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlVmVydGljZXNGcm9tR29vZ2xlRWFydGhFbnRlcnByaXNlQnVmZmVyLmpzCiAgdmFyIGNyZWF0ZVZlcnRpY2VzRnJvbUdvb2dsZUVhcnRoRW50ZXJwcmlzZUJ1ZmZlcl9leHBvcnRzID0ge307CiAgX19leHBvcnQoY3JlYXRlVmVydGljZXNGcm9tR29vZ2xlRWFydGhFbnRlcnByaXNlQnVmZmVyX2V4cG9ydHMsIHsKICAgIGRlZmF1bHQ6ICgpID0+IGNyZWF0ZVZlcnRpY2VzRnJvbUdvb2dsZUVhcnRoRW50ZXJwcmlzZUJ1ZmZlcl9kZWZhdWx0CiAgfSk7CiAgZnVuY3Rpb24gaW5kZXhPZkVwc2lsb24oYXJyLCBlbGVtLCBlbGVtVHlwZSkgewogICAgZWxlbVR5cGUgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChlbGVtVHlwZSwgTWF0aF9kZWZhdWx0KTsKICAgIGNvbnN0IGNvdW50ID0gYXJyLmxlbmd0aDsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7ICsraSkgewogICAgICBpZiAoZWxlbVR5cGUuZXF1YWxzRXBzaWxvbihhcnJbaV0sIGVsZW0sIE1hdGhfZGVmYXVsdC5FUFNJTE9OMTIpKSB7CiAgICAgICAgcmV0dXJuIGk7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiAtMTsKICB9CiAgZnVuY3Rpb24gY3JlYXRlVmVydGljZXNGcm9tR29vZ2xlRWFydGhFbnRlcnByaXNlQnVmZmVyKHBhcmFtZXRlcnMsIHRyYW5zZmVyYWJsZU9iamVjdHMpIHsKICAgIHBhcmFtZXRlcnMuZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUocGFyYW1ldGVycy5lbGxpcHNvaWQpOwogICAgcGFyYW1ldGVycy5yZWN0YW5nbGUgPSBSZWN0YW5nbGVfZGVmYXVsdC5jbG9uZShwYXJhbWV0ZXJzLnJlY3RhbmdsZSk7CiAgICBjb25zdCBzdGF0aXN0aWNzMiA9IHByb2Nlc3NCdWZmZXIoCiAgICAgIHBhcmFtZXRlcnMuYnVmZmVyLAogICAgICBwYXJhbWV0ZXJzLnJlbGF0aXZlVG9DZW50ZXIsCiAgICAgIHBhcmFtZXRlcnMuZWxsaXBzb2lkLAogICAgICBwYXJhbWV0ZXJzLnJlY3RhbmdsZSwKICAgICAgcGFyYW1ldGVycy5uYXRpdmVSZWN0YW5nbGUsCiAgICAgIHBhcmFtZXRlcnMuZXhhZ2dlcmF0aW9uLAogICAgICBwYXJhbWV0ZXJzLmV4YWdnZXJhdGlvblJlbGF0aXZlSGVpZ2h0LAogICAgICBwYXJhbWV0ZXJzLnNraXJ0SGVpZ2h0LAogICAgICBwYXJhbWV0ZXJzLmluY2x1ZGVXZWJNZXJjYXRvclQsCiAgICAgIHBhcmFtZXRlcnMubmVnYXRpdmVBbHRpdHVkZUV4cG9uZW50QmlhcywKICAgICAgcGFyYW1ldGVycy5uZWdhdGl2ZUVsZXZhdGlvblRocmVzaG9sZAogICAgKTsKICAgIGNvbnN0IHZlcnRpY2VzID0gc3RhdGlzdGljczIudmVydGljZXM7CiAgICB0cmFuc2ZlcmFibGVPYmplY3RzLnB1c2godmVydGljZXMuYnVmZmVyKTsKICAgIGNvbnN0IGluZGljZXMgPSBzdGF0aXN0aWNzMi5pbmRpY2VzOwogICAgdHJhbnNmZXJhYmxlT2JqZWN0cy5wdXNoKGluZGljZXMuYnVmZmVyKTsKICAgIHJldHVybiB7CiAgICAgIHZlcnRpY2VzOiB2ZXJ0aWNlcy5idWZmZXIsCiAgICAgIGluZGljZXM6IGluZGljZXMuYnVmZmVyLAogICAgICBudW1iZXJPZkF0dHJpYnV0ZXM6IHN0YXRpc3RpY3MyLmVuY29kaW5nLnN0cmlkZSwKICAgICAgbWluaW11bUhlaWdodDogc3RhdGlzdGljczIubWluaW11bUhlaWdodCwKICAgICAgbWF4aW11bUhlaWdodDogc3RhdGlzdGljczIubWF4aW11bUhlaWdodCwKICAgICAgYm91bmRpbmdTcGhlcmUzRDogc3RhdGlzdGljczIuYm91bmRpbmdTcGhlcmUzRCwKICAgICAgb3JpZW50ZWRCb3VuZGluZ0JveDogc3RhdGlzdGljczIub3JpZW50ZWRCb3VuZGluZ0JveCwKICAgICAgb2NjbHVkZWVQb2ludEluU2NhbGVkU3BhY2U6IHN0YXRpc3RpY3MyLm9jY2x1ZGVlUG9pbnRJblNjYWxlZFNwYWNlLAogICAgICBlbmNvZGluZzogc3RhdGlzdGljczIuZW5jb2RpbmcsCiAgICAgIHZlcnRleENvdW50V2l0aG91dFNraXJ0czogc3RhdGlzdGljczIudmVydGV4Q291bnRXaXRob3V0U2tpcnRzLAogICAgICBpbmRleENvdW50V2l0aG91dFNraXJ0czogc3RhdGlzdGljczIuaW5kZXhDb3VudFdpdGhvdXRTa2lydHMsCiAgICAgIHdlc3RJbmRpY2VzU291dGhUb05vcnRoOiBzdGF0aXN0aWNzMi53ZXN0SW5kaWNlc1NvdXRoVG9Ob3J0aCwKICAgICAgc291dGhJbmRpY2VzRWFzdFRvV2VzdDogc3RhdGlzdGljczIuc291dGhJbmRpY2VzRWFzdFRvV2VzdCwKICAgICAgZWFzdEluZGljZXNOb3J0aFRvU291dGg6IHN0YXRpc3RpY3MyLmVhc3RJbmRpY2VzTm9ydGhUb1NvdXRoLAogICAgICBub3J0aEluZGljZXNXZXN0VG9FYXN0OiBzdGF0aXN0aWNzMi5ub3J0aEluZGljZXNXZXN0VG9FYXN0CiAgICB9OwogIH0KICBmdW5jdGlvbiBwcm9jZXNzQnVmZmVyKGJ1ZmZlciwgcmVsYXRpdmVUb0NlbnRlciwgZWxsaXBzb2lkLCByZWN0YW5nbGUsIG5hdGl2ZVJlY3RhbmdsZSwgZXhhZ2dlcmF0aW9uLCBleGFnZ2VyYXRpb25SZWxhdGl2ZUhlaWdodCwgc2tpcnRIZWlnaHQsIGluY2x1ZGVXZWJNZXJjYXRvclQsIG5lZ2F0aXZlQWx0aXR1ZGVFeHBvbmVudEJpYXMsIG5lZ2F0aXZlRWxldmF0aW9uVGhyZXNob2xkKSB7CiAgICBsZXQgZ2VvZ3JhcGhpY1dlc3Q7CiAgICBsZXQgZ2VvZ3JhcGhpY1NvdXRoOwogICAgbGV0IGdlb2dyYXBoaWNFYXN0OwogICAgbGV0IGdlb2dyYXBoaWNOb3J0aDsKICAgIGxldCByZWN0YW5nbGVXaWR0aCwgcmVjdGFuZ2xlSGVpZ2h0OwogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocmVjdGFuZ2xlKSkgewogICAgICBnZW9ncmFwaGljV2VzdCA9IE1hdGhfZGVmYXVsdC50b1JhZGlhbnMobmF0aXZlUmVjdGFuZ2xlLndlc3QpOwogICAgICBnZW9ncmFwaGljU291dGggPSBNYXRoX2RlZmF1bHQudG9SYWRpYW5zKG5hdGl2ZVJlY3RhbmdsZS5zb3V0aCk7CiAgICAgIGdlb2dyYXBoaWNFYXN0ID0gTWF0aF9kZWZhdWx0LnRvUmFkaWFucyhuYXRpdmVSZWN0YW5nbGUuZWFzdCk7CiAgICAgIGdlb2dyYXBoaWNOb3J0aCA9IE1hdGhfZGVmYXVsdC50b1JhZGlhbnMobmF0aXZlUmVjdGFuZ2xlLm5vcnRoKTsKICAgICAgcmVjdGFuZ2xlV2lkdGggPSBNYXRoX2RlZmF1bHQudG9SYWRpYW5zKHJlY3RhbmdsZS53aWR0aCk7CiAgICAgIHJlY3RhbmdsZUhlaWdodCA9IE1hdGhfZGVmYXVsdC50b1JhZGlhbnMocmVjdGFuZ2xlLmhlaWdodCk7CiAgICB9IGVsc2UgewogICAgICBnZW9ncmFwaGljV2VzdCA9IHJlY3RhbmdsZS53ZXN0OwogICAgICBnZW9ncmFwaGljU291dGggPSByZWN0YW5nbGUuc291dGg7CiAgICAgIGdlb2dyYXBoaWNFYXN0ID0gcmVjdGFuZ2xlLmVhc3Q7CiAgICAgIGdlb2dyYXBoaWNOb3J0aCA9IHJlY3RhbmdsZS5ub3J0aDsKICAgICAgcmVjdGFuZ2xlV2lkdGggPSByZWN0YW5nbGUud2lkdGg7CiAgICAgIHJlY3RhbmdsZUhlaWdodCA9IHJlY3RhbmdsZS5oZWlnaHQ7CiAgICB9CiAgICBjb25zdCBxdWFkQm9yZGVyTGF0aXR1ZGVzID0gW2dlb2dyYXBoaWNTb3V0aCwgZ2VvZ3JhcGhpY05vcnRoXTsKICAgIGNvbnN0IHF1YWRCb3JkZXJMb25naXR1ZGVzID0gW2dlb2dyYXBoaWNXZXN0LCBnZW9ncmFwaGljRWFzdF07CiAgICBjb25zdCBmcm9tRU5VID0gVHJhbnNmb3Jtc19kZWZhdWx0LmVhc3ROb3J0aFVwVG9GaXhlZEZyYW1lKAogICAgICByZWxhdGl2ZVRvQ2VudGVyLAogICAgICBlbGxpcHNvaWQKICAgICk7CiAgICBjb25zdCB0b0VOVSA9IE1hdHJpeDRfZGVmYXVsdC5pbnZlcnNlVHJhbnNmb3JtYXRpb24oZnJvbUVOVSwgbWF0cml4NFNjcmF0Y2gzKTsKICAgIGxldCBzb3V0aE1lcmNhdG9yWTsKICAgIGxldCBvbmVPdmVyTWVyY2F0b3JIZWlnaHQ7CiAgICBpZiAoaW5jbHVkZVdlYk1lcmNhdG9yVCkgewogICAgICBzb3V0aE1lcmNhdG9yWSA9IFdlYk1lcmNhdG9yUHJvamVjdGlvbl9kZWZhdWx0Lmdlb2RldGljTGF0aXR1ZGVUb01lcmNhdG9yQW5nbGUoZ2VvZ3JhcGhpY1NvdXRoKTsKICAgICAgb25lT3Zlck1lcmNhdG9ySGVpZ2h0ID0gMSAvIChXZWJNZXJjYXRvclByb2plY3Rpb25fZGVmYXVsdC5nZW9kZXRpY0xhdGl0dWRlVG9NZXJjYXRvckFuZ2xlKGdlb2dyYXBoaWNOb3J0aCkgLSBzb3V0aE1lcmNhdG9yWSk7CiAgICB9CiAgICBjb25zdCBoYXNFeGFnZ2VyYXRpb24gPSBleGFnZ2VyYXRpb24gIT09IDE7CiAgICBjb25zdCBpbmNsdWRlR2VvZGV0aWNTdXJmYWNlTm9ybWFscyA9IGhhc0V4YWdnZXJhdGlvbjsKICAgIGNvbnN0IGR2ID0gbmV3IERhdGFWaWV3KGJ1ZmZlcik7CiAgICBsZXQgbWluSGVpZ2h0ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOwogICAgbGV0IG1heEhlaWdodCA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTsKICAgIGNvbnN0IG1pbmltdW0gPSBtaW5pbXVtU2NyYXRjaDsKICAgIG1pbmltdW0ueCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTsKICAgIG1pbmltdW0ueSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTsKICAgIG1pbmltdW0ueiA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTsKICAgIGNvbnN0IG1heGltdW0gPSBtYXhpbXVtU2NyYXRjaDsKICAgIG1heGltdW0ueCA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTsKICAgIG1heGltdW0ueSA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTsKICAgIG1heGltdW0ueiA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTsKICAgIGxldCBvZmZzZXQgPSAwOwogICAgbGV0IHNpemUgPSAwOwogICAgbGV0IGluZGljZXNTaXplID0gMDsKICAgIGxldCBxdWFkU2l6ZTsKICAgIGxldCBxdWFkOwogICAgZm9yIChxdWFkID0gMDsgcXVhZCA8IDQ7ICsrcXVhZCkgewogICAgICBsZXQgbyA9IG9mZnNldDsKICAgICAgcXVhZFNpemUgPSBkdi5nZXRVaW50MzIobywgdHJ1ZSk7CiAgICAgIG8gKz0gc2l6ZU9mVWludDMyOwogICAgICBjb25zdCB4ID0gTWF0aF9kZWZhdWx0LnRvUmFkaWFucyhkdi5nZXRGbG9hdDY0KG8sIHRydWUpICogMTgwKTsKICAgICAgbyArPSBzaXplT2ZEb3VibGU7CiAgICAgIGlmIChpbmRleE9mRXBzaWxvbihxdWFkQm9yZGVyTG9uZ2l0dWRlcywgeCkgPT09IC0xKSB7CiAgICAgICAgcXVhZEJvcmRlckxvbmdpdHVkZXMucHVzaCh4KTsKICAgICAgfQogICAgICBjb25zdCB5ID0gTWF0aF9kZWZhdWx0LnRvUmFkaWFucyhkdi5nZXRGbG9hdDY0KG8sIHRydWUpICogMTgwKTsKICAgICAgbyArPSBzaXplT2ZEb3VibGU7CiAgICAgIGlmIChpbmRleE9mRXBzaWxvbihxdWFkQm9yZGVyTGF0aXR1ZGVzLCB5KSA9PT0gLTEpIHsKICAgICAgICBxdWFkQm9yZGVyTGF0aXR1ZGVzLnB1c2goeSk7CiAgICAgIH0KICAgICAgbyArPSAyICogc2l6ZU9mRG91YmxlOwogICAgICBsZXQgYyA9IGR2LmdldEludDMyKG8sIHRydWUpOwogICAgICBvICs9IHNpemVPZkludDMyOwogICAgICBzaXplICs9IGM7CiAgICAgIGMgPSBkdi5nZXRJbnQzMihvLCB0cnVlKTsKICAgICAgaW5kaWNlc1NpemUgKz0gYyAqIDM7CiAgICAgIG9mZnNldCArPSBxdWFkU2l6ZSArIHNpemVPZlVpbnQzMjsKICAgIH0KICAgIGNvbnN0IHF1YWRCb3JkZXJQb2ludHMgPSBbXTsKICAgIGNvbnN0IHF1YWRCb3JkZXJJbmRpY2VzID0gW107CiAgICBjb25zdCBwb3NpdGlvbnMgPSBuZXcgQXJyYXkoc2l6ZSk7CiAgICBjb25zdCB1dnMgPSBuZXcgQXJyYXkoc2l6ZSk7CiAgICBjb25zdCBoZWlnaHRzID0gbmV3IEFycmF5KHNpemUpOwogICAgY29uc3Qgd2ViTWVyY2F0b3JUcyA9IGluY2x1ZGVXZWJNZXJjYXRvclQgPyBuZXcgQXJyYXkoc2l6ZSkgOiBbXTsKICAgIGNvbnN0IGdlb2RldGljU3VyZmFjZU5vcm1hbHMgPSBpbmNsdWRlR2VvZGV0aWNTdXJmYWNlTm9ybWFscyA/IG5ldyBBcnJheShzaXplKSA6IFtdOwogICAgY29uc3QgaW5kaWNlcyA9IG5ldyBBcnJheShpbmRpY2VzU2l6ZSk7CiAgICBjb25zdCB3ZXN0Qm9yZGVyID0gW107CiAgICBjb25zdCBzb3V0aEJvcmRlciA9IFtdOwogICAgY29uc3QgZWFzdEJvcmRlciA9IFtdOwogICAgY29uc3Qgbm9ydGhCb3JkZXIgPSBbXTsKICAgIGxldCBwb2ludE9mZnNldCA9IDA7CiAgICBsZXQgaW5kaWNlc09mZnNldCA9IDA7CiAgICBvZmZzZXQgPSAwOwogICAgZm9yIChxdWFkID0gMDsgcXVhZCA8IDQ7ICsrcXVhZCkgewogICAgICBxdWFkU2l6ZSA9IGR2LmdldFVpbnQzMihvZmZzZXQsIHRydWUpOwogICAgICBvZmZzZXQgKz0gc2l6ZU9mVWludDMyOwogICAgICBjb25zdCBzdGFydFF1YWQgPSBvZmZzZXQ7CiAgICAgIGNvbnN0IG9yaWdpblggPSBNYXRoX2RlZmF1bHQudG9SYWRpYW5zKGR2LmdldEZsb2F0NjQob2Zmc2V0LCB0cnVlKSAqIDE4MCk7CiAgICAgIG9mZnNldCArPSBzaXplT2ZEb3VibGU7CiAgICAgIGNvbnN0IG9yaWdpblkgPSBNYXRoX2RlZmF1bHQudG9SYWRpYW5zKGR2LmdldEZsb2F0NjQob2Zmc2V0LCB0cnVlKSAqIDE4MCk7CiAgICAgIG9mZnNldCArPSBzaXplT2ZEb3VibGU7CiAgICAgIGNvbnN0IHN0ZXBYID0gTWF0aF9kZWZhdWx0LnRvUmFkaWFucyhkdi5nZXRGbG9hdDY0KG9mZnNldCwgdHJ1ZSkgKiAxODApOwogICAgICBjb25zdCBoYWxmU3RlcFggPSBzdGVwWCAqIDAuNTsKICAgICAgb2Zmc2V0ICs9IHNpemVPZkRvdWJsZTsKICAgICAgY29uc3Qgc3RlcFkgPSBNYXRoX2RlZmF1bHQudG9SYWRpYW5zKGR2LmdldEZsb2F0NjQob2Zmc2V0LCB0cnVlKSAqIDE4MCk7CiAgICAgIGNvbnN0IGhhbGZTdGVwWSA9IHN0ZXBZICogMC41OwogICAgICBvZmZzZXQgKz0gc2l6ZU9mRG91YmxlOwogICAgICBjb25zdCBudW1Qb2ludHMgPSBkdi5nZXRJbnQzMihvZmZzZXQsIHRydWUpOwogICAgICBvZmZzZXQgKz0gc2l6ZU9mSW50MzI7CiAgICAgIGNvbnN0IG51bUZhY2VzID0gZHYuZ2V0SW50MzIob2Zmc2V0LCB0cnVlKTsKICAgICAgb2Zmc2V0ICs9IHNpemVPZkludDMyOwogICAgICBvZmZzZXQgKz0gc2l6ZU9mSW50MzI7CiAgICAgIGNvbnN0IGluZGljZXNNYXBwaW5nID0gbmV3IEFycmF5KG51bVBvaW50cyk7CiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtUG9pbnRzOyArK2kpIHsKICAgICAgICBjb25zdCBsb25naXR1ZGUgPSBvcmlnaW5YICsgZHYuZ2V0VWludDgob2Zmc2V0KyspICogc3RlcFg7CiAgICAgICAgc2NyYXRjaENhcnRvZ3JhcGhpYzcubG9uZ2l0dWRlID0gbG9uZ2l0dWRlOwogICAgICAgIGNvbnN0IGxhdGl0dWRlID0gb3JpZ2luWSArIGR2LmdldFVpbnQ4KG9mZnNldCsrKSAqIHN0ZXBZOwogICAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWM3LmxhdGl0dWRlID0gbGF0aXR1ZGU7CiAgICAgICAgbGV0IGhlaWdodCA9IGR2LmdldEZsb2F0MzIob2Zmc2V0LCB0cnVlKTsKICAgICAgICBvZmZzZXQgKz0gc2l6ZU9mRmxvYXQ7CiAgICAgICAgaWYgKGhlaWdodCAhPT0gMCAmJiBoZWlnaHQgPCBuZWdhdGl2ZUVsZXZhdGlvblRocmVzaG9sZCkgewogICAgICAgICAgaGVpZ2h0ICo9IC1NYXRoLnBvdygyLCBuZWdhdGl2ZUFsdGl0dWRlRXhwb25lbnRCaWFzKTsKICAgICAgICB9CiAgICAgICAgaGVpZ2h0ICo9IDYzNzEwMTA7CiAgICAgICAgc2NyYXRjaENhcnRvZ3JhcGhpYzcuaGVpZ2h0ID0gaGVpZ2h0OwogICAgICAgIGlmIChpbmRleE9mRXBzaWxvbihxdWFkQm9yZGVyTG9uZ2l0dWRlcywgbG9uZ2l0dWRlKSAhPT0gLTEgfHwgaW5kZXhPZkVwc2lsb24ocXVhZEJvcmRlckxhdGl0dWRlcywgbGF0aXR1ZGUpICE9PSAtMSkgewogICAgICAgICAgY29uc3QgaW5kZXggPSBpbmRleE9mRXBzaWxvbigKICAgICAgICAgICAgcXVhZEJvcmRlclBvaW50cywKICAgICAgICAgICAgc2NyYXRjaENhcnRvZ3JhcGhpYzcsCiAgICAgICAgICAgIENhcnRvZ3JhcGhpY19kZWZhdWx0CiAgICAgICAgICApOwogICAgICAgICAgaWYgKGluZGV4ID09PSAtMSkgewogICAgICAgICAgICBxdWFkQm9yZGVyUG9pbnRzLnB1c2goQ2FydG9ncmFwaGljX2RlZmF1bHQuY2xvbmUoc2NyYXRjaENhcnRvZ3JhcGhpYzcpKTsKICAgICAgICAgICAgcXVhZEJvcmRlckluZGljZXMucHVzaChwb2ludE9mZnNldCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpbmRpY2VzTWFwcGluZ1tpXSA9IHF1YWRCb3JkZXJJbmRpY2VzW2luZGV4XTsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGluZGljZXNNYXBwaW5nW2ldID0gcG9pbnRPZmZzZXQ7CiAgICAgICAgaWYgKE1hdGguYWJzKGxvbmdpdHVkZSAtIGdlb2dyYXBoaWNXZXN0KSA8IGhhbGZTdGVwWCkgewogICAgICAgICAgd2VzdEJvcmRlci5wdXNoKHsKICAgICAgICAgICAgaW5kZXg6IHBvaW50T2Zmc2V0LAogICAgICAgICAgICBjYXJ0b2dyYXBoaWM6IENhcnRvZ3JhcGhpY19kZWZhdWx0LmNsb25lKHNjcmF0Y2hDYXJ0b2dyYXBoaWM3KQogICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIGlmIChNYXRoLmFicyhsb25naXR1ZGUgLSBnZW9ncmFwaGljRWFzdCkgPCBoYWxmU3RlcFgpIHsKICAgICAgICAgIGVhc3RCb3JkZXIucHVzaCh7CiAgICAgICAgICAgIGluZGV4OiBwb2ludE9mZnNldCwKICAgICAgICAgICAgY2FydG9ncmFwaGljOiBDYXJ0b2dyYXBoaWNfZGVmYXVsdC5jbG9uZShzY3JhdGNoQ2FydG9ncmFwaGljNykKICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSBpZiAoTWF0aC5hYnMobGF0aXR1ZGUgLSBnZW9ncmFwaGljU291dGgpIDwgaGFsZlN0ZXBZKSB7CiAgICAgICAgICBzb3V0aEJvcmRlci5wdXNoKHsKICAgICAgICAgICAgaW5kZXg6IHBvaW50T2Zmc2V0LAogICAgICAgICAgICBjYXJ0b2dyYXBoaWM6IENhcnRvZ3JhcGhpY19kZWZhdWx0LmNsb25lKHNjcmF0Y2hDYXJ0b2dyYXBoaWM3KQogICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIGlmIChNYXRoLmFicyhsYXRpdHVkZSAtIGdlb2dyYXBoaWNOb3J0aCkgPCBoYWxmU3RlcFkpIHsKICAgICAgICAgIG5vcnRoQm9yZGVyLnB1c2goewogICAgICAgICAgICBpbmRleDogcG9pbnRPZmZzZXQsCiAgICAgICAgICAgIGNhcnRvZ3JhcGhpYzogQ2FydG9ncmFwaGljX2RlZmF1bHQuY2xvbmUoc2NyYXRjaENhcnRvZ3JhcGhpYzcpCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgbWluSGVpZ2h0ID0gTWF0aC5taW4oaGVpZ2h0LCBtaW5IZWlnaHQpOwogICAgICAgIG1heEhlaWdodCA9IE1hdGgubWF4KGhlaWdodCwgbWF4SGVpZ2h0KTsKICAgICAgICBoZWlnaHRzW3BvaW50T2Zmc2V0XSA9IGhlaWdodDsKICAgICAgICBjb25zdCBwb3MgPSBlbGxpcHNvaWQuY2FydG9ncmFwaGljVG9DYXJ0ZXNpYW4oc2NyYXRjaENhcnRvZ3JhcGhpYzcpOwogICAgICAgIHBvc2l0aW9uc1twb2ludE9mZnNldF0gPSBwb3M7CiAgICAgICAgaWYgKGluY2x1ZGVXZWJNZXJjYXRvclQpIHsKICAgICAgICAgIHdlYk1lcmNhdG9yVHNbcG9pbnRPZmZzZXRdID0gKFdlYk1lcmNhdG9yUHJvamVjdGlvbl9kZWZhdWx0Lmdlb2RldGljTGF0aXR1ZGVUb01lcmNhdG9yQW5nbGUobGF0aXR1ZGUpIC0gc291dGhNZXJjYXRvclkpICogb25lT3Zlck1lcmNhdG9ySGVpZ2h0OwogICAgICAgIH0KICAgICAgICBpZiAoaW5jbHVkZUdlb2RldGljU3VyZmFjZU5vcm1hbHMpIHsKICAgICAgICAgIGNvbnN0IG5vcm1hbDIgPSBlbGxpcHNvaWQuZ2VvZGV0aWNTdXJmYWNlTm9ybWFsKHBvcyk7CiAgICAgICAgICBnZW9kZXRpY1N1cmZhY2VOb3JtYWxzW3BvaW50T2Zmc2V0XSA9IG5vcm1hbDI7CiAgICAgICAgfQogICAgICAgIE1hdHJpeDRfZGVmYXVsdC5tdWx0aXBseUJ5UG9pbnQodG9FTlUsIHBvcywgc2NyYXRjaENhcnRlc2lhbjIwKTsKICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubWluaW11bUJ5Q29tcG9uZW50KHNjcmF0Y2hDYXJ0ZXNpYW4yMCwgbWluaW11bSwgbWluaW11bSk7CiAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm1heGltdW1CeUNvbXBvbmVudChzY3JhdGNoQ2FydGVzaWFuMjAsIG1heGltdW0sIG1heGltdW0pOwogICAgICAgIGxldCB1MyA9IChsb25naXR1ZGUgLSBnZW9ncmFwaGljV2VzdCkgLyAoZ2VvZ3JhcGhpY0Vhc3QgLSBnZW9ncmFwaGljV2VzdCk7CiAgICAgICAgdTMgPSBNYXRoX2RlZmF1bHQuY2xhbXAodTMsIDAsIDEpOwogICAgICAgIGxldCB2MyA9IChsYXRpdHVkZSAtIGdlb2dyYXBoaWNTb3V0aCkgLyAoZ2VvZ3JhcGhpY05vcnRoIC0gZ2VvZ3JhcGhpY1NvdXRoKTsKICAgICAgICB2MyA9IE1hdGhfZGVmYXVsdC5jbGFtcCh2MywgMCwgMSk7CiAgICAgICAgdXZzW3BvaW50T2Zmc2V0XSA9IG5ldyBDYXJ0ZXNpYW4yX2RlZmF1bHQodTMsIHYzKTsKICAgICAgICArK3BvaW50T2Zmc2V0OwogICAgICB9CiAgICAgIGNvbnN0IGZhY2VzRWxlbWVudENvdW50ID0gbnVtRmFjZXMgKiAzOwogICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGZhY2VzRWxlbWVudENvdW50OyArK2osICsraW5kaWNlc09mZnNldCkgewogICAgICAgIGluZGljZXNbaW5kaWNlc09mZnNldF0gPSBpbmRpY2VzTWFwcGluZ1tkdi5nZXRVaW50MTYob2Zmc2V0LCB0cnVlKV07CiAgICAgICAgb2Zmc2V0ICs9IHNpemVPZlVpbnQxNjsKICAgICAgfQogICAgICBpZiAocXVhZFNpemUgIT09IG9mZnNldCAtIHN0YXJ0UXVhZCkgewogICAgICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3JfZGVmYXVsdCgiSW52YWxpZCB0ZXJyYWluIHRpbGUuIik7CiAgICAgIH0KICAgIH0KICAgIHBvc2l0aW9ucy5sZW5ndGggPSBwb2ludE9mZnNldDsKICAgIHV2cy5sZW5ndGggPSBwb2ludE9mZnNldDsKICAgIGhlaWdodHMubGVuZ3RoID0gcG9pbnRPZmZzZXQ7CiAgICBpZiAoaW5jbHVkZVdlYk1lcmNhdG9yVCkgewogICAgICB3ZWJNZXJjYXRvclRzLmxlbmd0aCA9IHBvaW50T2Zmc2V0OwogICAgfQogICAgaWYgKGluY2x1ZGVHZW9kZXRpY1N1cmZhY2VOb3JtYWxzKSB7CiAgICAgIGdlb2RldGljU3VyZmFjZU5vcm1hbHMubGVuZ3RoID0gcG9pbnRPZmZzZXQ7CiAgICB9CiAgICBjb25zdCB2ZXJ0ZXhDb3VudFdpdGhvdXRTa2lydHMgPSBwb2ludE9mZnNldDsKICAgIGNvbnN0IGluZGV4Q291bnRXaXRob3V0U2tpcnRzID0gaW5kaWNlc09mZnNldDsKICAgIGNvbnN0IHNraXJ0T3B0aW9ucyA9IHsKICAgICAgaE1pbjogbWluSGVpZ2h0LAogICAgICBsYXN0Qm9yZGVyUG9pbnQ6IHZvaWQgMCwKICAgICAgc2tpcnRIZWlnaHQsCiAgICAgIHRvRU5VLAogICAgICBlbGxpcHNvaWQsCiAgICAgIG1pbmltdW0sCiAgICAgIG1heGltdW0KICAgIH07CiAgICB3ZXN0Qm9yZGVyLnNvcnQoZnVuY3Rpb24oYTMsIGIpIHsKICAgICAgcmV0dXJuIGIuY2FydG9ncmFwaGljLmxhdGl0dWRlIC0gYTMuY2FydG9ncmFwaGljLmxhdGl0dWRlOwogICAgfSk7CiAgICBzb3V0aEJvcmRlci5zb3J0KGZ1bmN0aW9uKGEzLCBiKSB7CiAgICAgIHJldHVybiBhMy5jYXJ0b2dyYXBoaWMubG9uZ2l0dWRlIC0gYi5jYXJ0b2dyYXBoaWMubG9uZ2l0dWRlOwogICAgfSk7CiAgICBlYXN0Qm9yZGVyLnNvcnQoZnVuY3Rpb24oYTMsIGIpIHsKICAgICAgcmV0dXJuIGEzLmNhcnRvZ3JhcGhpYy5sYXRpdHVkZSAtIGIuY2FydG9ncmFwaGljLmxhdGl0dWRlOwogICAgfSk7CiAgICBub3J0aEJvcmRlci5zb3J0KGZ1bmN0aW9uKGEzLCBiKSB7CiAgICAgIHJldHVybiBiLmNhcnRvZ3JhcGhpYy5sb25naXR1ZGUgLSBhMy5jYXJ0b2dyYXBoaWMubG9uZ2l0dWRlOwogICAgfSk7CiAgICBjb25zdCBwZXJjZW50YWdlID0gMWUtNTsKICAgIGFkZFNraXJ0KAogICAgICBwb3NpdGlvbnMsCiAgICAgIGhlaWdodHMsCiAgICAgIHV2cywKICAgICAgd2ViTWVyY2F0b3JUcywKICAgICAgZ2VvZGV0aWNTdXJmYWNlTm9ybWFscywKICAgICAgaW5kaWNlcywKICAgICAgc2tpcnRPcHRpb25zLAogICAgICB3ZXN0Qm9yZGVyLAogICAgICAtcGVyY2VudGFnZSAqIHJlY3RhbmdsZVdpZHRoLAogICAgICB0cnVlLAogICAgICAtcGVyY2VudGFnZSAqIHJlY3RhbmdsZUhlaWdodAogICAgKTsKICAgIGFkZFNraXJ0KAogICAgICBwb3NpdGlvbnMsCiAgICAgIGhlaWdodHMsCiAgICAgIHV2cywKICAgICAgd2ViTWVyY2F0b3JUcywKICAgICAgZ2VvZGV0aWNTdXJmYWNlTm9ybWFscywKICAgICAgaW5kaWNlcywKICAgICAgc2tpcnRPcHRpb25zLAogICAgICBzb3V0aEJvcmRlciwKICAgICAgLXBlcmNlbnRhZ2UgKiByZWN0YW5nbGVIZWlnaHQsCiAgICAgIGZhbHNlCiAgICApOwogICAgYWRkU2tpcnQoCiAgICAgIHBvc2l0aW9ucywKICAgICAgaGVpZ2h0cywKICAgICAgdXZzLAogICAgICB3ZWJNZXJjYXRvclRzLAogICAgICBnZW9kZXRpY1N1cmZhY2VOb3JtYWxzLAogICAgICBpbmRpY2VzLAogICAgICBza2lydE9wdGlvbnMsCiAgICAgIGVhc3RCb3JkZXIsCiAgICAgIHBlcmNlbnRhZ2UgKiByZWN0YW5nbGVXaWR0aCwKICAgICAgdHJ1ZSwKICAgICAgcGVyY2VudGFnZSAqIHJlY3RhbmdsZUhlaWdodAogICAgKTsKICAgIGFkZFNraXJ0KAogICAgICBwb3NpdGlvbnMsCiAgICAgIGhlaWdodHMsCiAgICAgIHV2cywKICAgICAgd2ViTWVyY2F0b3JUcywKICAgICAgZ2VvZGV0aWNTdXJmYWNlTm9ybWFscywKICAgICAgaW5kaWNlcywKICAgICAgc2tpcnRPcHRpb25zLAogICAgICBub3J0aEJvcmRlciwKICAgICAgcGVyY2VudGFnZSAqIHJlY3RhbmdsZUhlaWdodCwKICAgICAgZmFsc2UKICAgICk7CiAgICBpZiAod2VzdEJvcmRlci5sZW5ndGggPiAwICYmIG5vcnRoQm9yZGVyLmxlbmd0aCA+IDApIHsKICAgICAgY29uc3QgZmlyc3RCb3JkZXJJbmRleCA9IHdlc3RCb3JkZXJbMF0uaW5kZXg7CiAgICAgIGNvbnN0IGZpcnN0U2tpcnRJbmRleCA9IHZlcnRleENvdW50V2l0aG91dFNraXJ0czsKICAgICAgY29uc3QgbGFzdEJvcmRlckluZGV4ID0gbm9ydGhCb3JkZXJbbm9ydGhCb3JkZXIubGVuZ3RoIC0gMV0uaW5kZXg7CiAgICAgIGNvbnN0IGxhc3RTa2lydEluZGV4ID0gcG9zaXRpb25zLmxlbmd0aCAtIDE7CiAgICAgIGluZGljZXMucHVzaCgKICAgICAgICBsYXN0Qm9yZGVySW5kZXgsCiAgICAgICAgbGFzdFNraXJ0SW5kZXgsCiAgICAgICAgZmlyc3RTa2lydEluZGV4LAogICAgICAgIGZpcnN0U2tpcnRJbmRleCwKICAgICAgICBmaXJzdEJvcmRlckluZGV4LAogICAgICAgIGxhc3RCb3JkZXJJbmRleAogICAgICApOwogICAgfQogICAgc2l6ZSA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICBjb25zdCBib3VuZGluZ1NwaGVyZTNEID0gQm91bmRpbmdTcGhlcmVfZGVmYXVsdC5mcm9tUG9pbnRzKHBvc2l0aW9ucyk7CiAgICBsZXQgb3JpZW50ZWRCb3VuZGluZ0JveDsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQocmVjdGFuZ2xlKSkgewogICAgICBvcmllbnRlZEJvdW5kaW5nQm94ID0gT3JpZW50ZWRCb3VuZGluZ0JveF9kZWZhdWx0LmZyb21SZWN0YW5nbGUoCiAgICAgICAgcmVjdGFuZ2xlLAogICAgICAgIG1pbkhlaWdodCwKICAgICAgICBtYXhIZWlnaHQsCiAgICAgICAgZWxsaXBzb2lkCiAgICAgICk7CiAgICB9CiAgICBjb25zdCBvY2NsdWRlciA9IG5ldyBFbGxpcHNvaWRhbE9jY2x1ZGVyX2RlZmF1bHQoZWxsaXBzb2lkKTsKICAgIGNvbnN0IG9jY2x1ZGVlUG9pbnRJblNjYWxlZFNwYWNlID0gb2NjbHVkZXIuY29tcHV0ZUhvcml6b25DdWxsaW5nUG9pbnRQb3NzaWJseVVuZGVyRWxsaXBzb2lkKAogICAgICByZWxhdGl2ZVRvQ2VudGVyLAogICAgICBwb3NpdGlvbnMsCiAgICAgIG1pbkhlaWdodAogICAgKTsKICAgIGNvbnN0IGFhQm94ID0gbmV3IEF4aXNBbGlnbmVkQm91bmRpbmdCb3hfZGVmYXVsdChtaW5pbXVtLCBtYXhpbXVtLCByZWxhdGl2ZVRvQ2VudGVyKTsKICAgIGNvbnN0IGVuY29kaW5nID0gbmV3IFRlcnJhaW5FbmNvZGluZ19kZWZhdWx0KAogICAgICByZWxhdGl2ZVRvQ2VudGVyLAogICAgICBhYUJveCwKICAgICAgc2tpcnRPcHRpb25zLmhNaW4sCiAgICAgIG1heEhlaWdodCwKICAgICAgZnJvbUVOVSwKICAgICAgZmFsc2UsCiAgICAgIGluY2x1ZGVXZWJNZXJjYXRvclQsCiAgICAgIGluY2x1ZGVHZW9kZXRpY1N1cmZhY2VOb3JtYWxzLAogICAgICBleGFnZ2VyYXRpb24sCiAgICAgIGV4YWdnZXJhdGlvblJlbGF0aXZlSGVpZ2h0CiAgICApOwogICAgY29uc3QgdmVydGljZXMgPSBuZXcgRmxvYXQzMkFycmF5KHNpemUgKiBlbmNvZGluZy5zdHJpZGUpOwogICAgbGV0IGJ1ZmZlckluZGV4ID0gMDsKICAgIGZvciAobGV0IGsgPSAwOyBrIDwgc2l6ZTsgKytrKSB7CiAgICAgIGJ1ZmZlckluZGV4ID0gZW5jb2RpbmcuZW5jb2RlKAogICAgICAgIHZlcnRpY2VzLAogICAgICAgIGJ1ZmZlckluZGV4LAogICAgICAgIHBvc2l0aW9uc1trXSwKICAgICAgICB1dnNba10sCiAgICAgICAgaGVpZ2h0c1trXSwKICAgICAgICB2b2lkIDAsCiAgICAgICAgd2ViTWVyY2F0b3JUc1trXSwKICAgICAgICBnZW9kZXRpY1N1cmZhY2VOb3JtYWxzW2tdCiAgICAgICk7CiAgICB9CiAgICBjb25zdCB3ZXN0SW5kaWNlc1NvdXRoVG9Ob3J0aCA9IHdlc3RCb3JkZXIubWFwKGZ1bmN0aW9uKHZlcnRleCkgewogICAgICByZXR1cm4gdmVydGV4LmluZGV4OwogICAgfSkucmV2ZXJzZSgpOwogICAgY29uc3Qgc291dGhJbmRpY2VzRWFzdFRvV2VzdCA9IHNvdXRoQm9yZGVyLm1hcChmdW5jdGlvbih2ZXJ0ZXgpIHsKICAgICAgcmV0dXJuIHZlcnRleC5pbmRleDsKICAgIH0pLnJldmVyc2UoKTsKICAgIGNvbnN0IGVhc3RJbmRpY2VzTm9ydGhUb1NvdXRoID0gZWFzdEJvcmRlci5tYXAoZnVuY3Rpb24odmVydGV4KSB7CiAgICAgIHJldHVybiB2ZXJ0ZXguaW5kZXg7CiAgICB9KS5yZXZlcnNlKCk7CiAgICBjb25zdCBub3J0aEluZGljZXNXZXN0VG9FYXN0ID0gbm9ydGhCb3JkZXIubWFwKGZ1bmN0aW9uKHZlcnRleCkgewogICAgICByZXR1cm4gdmVydGV4LmluZGV4OwogICAgfSkucmV2ZXJzZSgpOwogICAgc291dGhJbmRpY2VzRWFzdFRvV2VzdC51bnNoaWZ0KAogICAgICBlYXN0SW5kaWNlc05vcnRoVG9Tb3V0aFtlYXN0SW5kaWNlc05vcnRoVG9Tb3V0aC5sZW5ndGggLSAxXQogICAgKTsKICAgIHNvdXRoSW5kaWNlc0Vhc3RUb1dlc3QucHVzaCh3ZXN0SW5kaWNlc1NvdXRoVG9Ob3J0aFswXSk7CiAgICBub3J0aEluZGljZXNXZXN0VG9FYXN0LnVuc2hpZnQoCiAgICAgIHdlc3RJbmRpY2VzU291dGhUb05vcnRoW3dlc3RJbmRpY2VzU291dGhUb05vcnRoLmxlbmd0aCAtIDFdCiAgICApOwogICAgbm9ydGhJbmRpY2VzV2VzdFRvRWFzdC5wdXNoKGVhc3RJbmRpY2VzTm9ydGhUb1NvdXRoWzBdKTsKICAgIHJldHVybiB7CiAgICAgIHZlcnRpY2VzLAogICAgICBpbmRpY2VzOiBuZXcgVWludDE2QXJyYXkoaW5kaWNlcyksCiAgICAgIG1heGltdW1IZWlnaHQ6IG1heEhlaWdodCwKICAgICAgbWluaW11bUhlaWdodDogbWluSGVpZ2h0LAogICAgICBlbmNvZGluZywKICAgICAgYm91bmRpbmdTcGhlcmUzRCwKICAgICAgb3JpZW50ZWRCb3VuZGluZ0JveCwKICAgICAgb2NjbHVkZWVQb2ludEluU2NhbGVkU3BhY2UsCiAgICAgIHZlcnRleENvdW50V2l0aG91dFNraXJ0cywKICAgICAgaW5kZXhDb3VudFdpdGhvdXRTa2lydHMsCiAgICAgIHdlc3RJbmRpY2VzU291dGhUb05vcnRoLAogICAgICBzb3V0aEluZGljZXNFYXN0VG9XZXN0LAogICAgICBlYXN0SW5kaWNlc05vcnRoVG9Tb3V0aCwKICAgICAgbm9ydGhJbmRpY2VzV2VzdFRvRWFzdAogICAgfTsKICB9CiAgZnVuY3Rpb24gYWRkU2tpcnQocG9zaXRpb25zLCBoZWlnaHRzLCB1dnMsIHdlYk1lcmNhdG9yVHMsIGdlb2RldGljU3VyZmFjZU5vcm1hbHMsIGluZGljZXMsIHNraXJ0T3B0aW9ucywgYm9yZGVyUG9pbnRzLCBmdWRnZUZhY3RvciwgZWFzdE9yV2VzdCwgY29ybmVyRnVkZ2UpIHsKICAgIGNvbnN0IGNvdW50ID0gYm9yZGVyUG9pbnRzLmxlbmd0aDsKICAgIGZvciAobGV0IGogPSAwOyBqIDwgY291bnQ7ICsraikgewogICAgICBjb25zdCBib3JkZXJQb2ludCA9IGJvcmRlclBvaW50c1tqXTsKICAgICAgY29uc3QgYm9yZGVyQ2FydG9ncmFwaGljID0gYm9yZGVyUG9pbnQuY2FydG9ncmFwaGljOwogICAgICBjb25zdCBib3JkZXJJbmRleCA9IGJvcmRlclBvaW50LmluZGV4OwogICAgICBjb25zdCBjdXJyZW50SW5kZXggPSBwb3NpdGlvbnMubGVuZ3RoOwogICAgICBjb25zdCBsb25naXR1ZGUgPSBib3JkZXJDYXJ0b2dyYXBoaWMubG9uZ2l0dWRlOwogICAgICBsZXQgbGF0aXR1ZGUgPSBib3JkZXJDYXJ0b2dyYXBoaWMubGF0aXR1ZGU7CiAgICAgIGxhdGl0dWRlID0gTWF0aF9kZWZhdWx0LmNsYW1wKAogICAgICAgIGxhdGl0dWRlLAogICAgICAgIC1NYXRoX2RlZmF1bHQuUElfT1ZFUl9UV08sCiAgICAgICAgTWF0aF9kZWZhdWx0LlBJX09WRVJfVFdPCiAgICAgICk7CiAgICAgIGNvbnN0IGhlaWdodCA9IGJvcmRlckNhcnRvZ3JhcGhpYy5oZWlnaHQgLSBza2lydE9wdGlvbnMuc2tpcnRIZWlnaHQ7CiAgICAgIHNraXJ0T3B0aW9ucy5oTWluID0gTWF0aC5taW4oc2tpcnRPcHRpb25zLmhNaW4sIGhlaWdodCk7CiAgICAgIENhcnRvZ3JhcGhpY19kZWZhdWx0LmZyb21SYWRpYW5zKGxvbmdpdHVkZSwgbGF0aXR1ZGUsIGhlaWdodCwgc2NyYXRjaENhcnRvZ3JhcGhpYzcpOwogICAgICBpZiAoZWFzdE9yV2VzdCkgewogICAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWM3LmxvbmdpdHVkZSArPSBmdWRnZUZhY3RvcjsKICAgICAgfQogICAgICBpZiAoIWVhc3RPcldlc3QpIHsKICAgICAgICBzY3JhdGNoQ2FydG9ncmFwaGljNy5sYXRpdHVkZSArPSBmdWRnZUZhY3RvcjsKICAgICAgfSBlbHNlIGlmIChqID09PSBjb3VudCAtIDEpIHsKICAgICAgICBzY3JhdGNoQ2FydG9ncmFwaGljNy5sYXRpdHVkZSArPSBjb3JuZXJGdWRnZTsKICAgICAgfSBlbHNlIGlmIChqID09PSAwKSB7CiAgICAgICAgc2NyYXRjaENhcnRvZ3JhcGhpYzcubGF0aXR1ZGUgLT0gY29ybmVyRnVkZ2U7CiAgICAgIH0KICAgICAgY29uc3QgcG9zID0gc2tpcnRPcHRpb25zLmVsbGlwc29pZC5jYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbihzY3JhdGNoQ2FydG9ncmFwaGljNyk7CiAgICAgIHBvc2l0aW9ucy5wdXNoKHBvcyk7CiAgICAgIGhlaWdodHMucHVzaChoZWlnaHQpOwogICAgICB1dnMucHVzaChDYXJ0ZXNpYW4yX2RlZmF1bHQuY2xvbmUodXZzW2JvcmRlckluZGV4XSkpOwogICAgICBpZiAod2ViTWVyY2F0b3JUcy5sZW5ndGggPiAwKSB7CiAgICAgICAgd2ViTWVyY2F0b3JUcy5wdXNoKHdlYk1lcmNhdG9yVHNbYm9yZGVySW5kZXhdKTsKICAgICAgfQogICAgICBpZiAoZ2VvZGV0aWNTdXJmYWNlTm9ybWFscy5sZW5ndGggPiAwKSB7CiAgICAgICAgZ2VvZGV0aWNTdXJmYWNlTm9ybWFscy5wdXNoKGdlb2RldGljU3VyZmFjZU5vcm1hbHNbYm9yZGVySW5kZXhdKTsKICAgICAgfQogICAgICBNYXRyaXg0X2RlZmF1bHQubXVsdGlwbHlCeVBvaW50KHNraXJ0T3B0aW9ucy50b0VOVSwgcG9zLCBzY3JhdGNoQ2FydGVzaWFuMjApOwogICAgICBjb25zdCBtaW5pbXVtID0gc2tpcnRPcHRpb25zLm1pbmltdW07CiAgICAgIGNvbnN0IG1heGltdW0gPSBza2lydE9wdGlvbnMubWF4aW11bTsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm1pbmltdW1CeUNvbXBvbmVudChzY3JhdGNoQ2FydGVzaWFuMjAsIG1pbmltdW0sIG1pbmltdW0pOwogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubWF4aW11bUJ5Q29tcG9uZW50KHNjcmF0Y2hDYXJ0ZXNpYW4yMCwgbWF4aW11bSwgbWF4aW11bSk7CiAgICAgIGNvbnN0IGxhc3RCb3JkZXJQb2ludCA9IHNraXJ0T3B0aW9ucy5sYXN0Qm9yZGVyUG9pbnQ7CiAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQobGFzdEJvcmRlclBvaW50KSkgewogICAgICAgIGNvbnN0IGxhc3RCb3JkZXJJbmRleCA9IGxhc3RCb3JkZXJQb2ludC5pbmRleDsKICAgICAgICBpbmRpY2VzLnB1c2goCiAgICAgICAgICBsYXN0Qm9yZGVySW5kZXgsCiAgICAgICAgICBjdXJyZW50SW5kZXggLSAxLAogICAgICAgICAgY3VycmVudEluZGV4LAogICAgICAgICAgY3VycmVudEluZGV4LAogICAgICAgICAgYm9yZGVySW5kZXgsCiAgICAgICAgICBsYXN0Qm9yZGVySW5kZXgKICAgICAgICApOwogICAgICB9CiAgICAgIHNraXJ0T3B0aW9ucy5sYXN0Qm9yZGVyUG9pbnQgPSBib3JkZXJQb2ludDsKICAgIH0KICB9CiAgdmFyIHNpemVPZlVpbnQxNiwgc2l6ZU9mSW50MzIsIHNpemVPZlVpbnQzMiwgc2l6ZU9mRmxvYXQsIHNpemVPZkRvdWJsZSwgc2NyYXRjaENhcnRvZ3JhcGhpYzcsIHNjcmF0Y2hDYXJ0ZXNpYW4yMCwgbWluaW11bVNjcmF0Y2gsIG1heGltdW1TY3JhdGNoLCBtYXRyaXg0U2NyYXRjaDMsIGNyZWF0ZVZlcnRpY2VzRnJvbUdvb2dsZUVhcnRoRW50ZXJwcmlzZUJ1ZmZlcl9kZWZhdWx0OwogIHZhciBpbml0X2NyZWF0ZVZlcnRpY2VzRnJvbUdvb2dsZUVhcnRoRW50ZXJwcmlzZUJ1ZmZlciA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlVmVydGljZXNGcm9tR29vZ2xlRWFydGhFbnRlcnByaXNlQnVmZmVyLmpzIigpIHsKICAgICAgaW5pdF9BeGlzQWxpZ25lZEJvdW5kaW5nQm94KCk7CiAgICAgIGluaXRfQm91bmRpbmdTcGhlcmUoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4yKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NhcnRvZ3JhcGhpYygpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9FbGxpcHNvaWRhbE9jY2x1ZGVyKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X01hdHJpeDQoKTsKICAgICAgaW5pdF9PcmllbnRlZEJvdW5kaW5nQm94KCk7CiAgICAgIGluaXRfUmVjdGFuZ2xlKCk7CiAgICAgIGluaXRfUnVudGltZUVycm9yKCk7CiAgICAgIGluaXRfVGVycmFpbkVuY29kaW5nKCk7CiAgICAgIGluaXRfVHJhbnNmb3JtcygpOwogICAgICBpbml0X1dlYk1lcmNhdG9yUHJvamVjdGlvbigpOwogICAgICBpbml0X2NyZWF0ZVRhc2tQcm9jZXNzb3JXb3JrZXIoKTsKICAgICAgc2l6ZU9mVWludDE2ID0gVWludDE2QXJyYXkuQllURVNfUEVSX0VMRU1FTlQ7CiAgICAgIHNpemVPZkludDMyID0gSW50MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVDsKICAgICAgc2l6ZU9mVWludDMyID0gVWludDMyQXJyYXkuQllURVNfUEVSX0VMRU1FTlQ7CiAgICAgIHNpemVPZkZsb2F0ID0gRmxvYXQzMkFycmF5LkJZVEVTX1BFUl9FTEVNRU5UOwogICAgICBzaXplT2ZEb3VibGUgPSBGbG9hdDY0QXJyYXkuQllURVNfUEVSX0VMRU1FTlQ7CiAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWM3ID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4yMCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgbWluaW11bVNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIG1heGltdW1TY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBtYXRyaXg0U2NyYXRjaDMgPSBuZXcgTWF0cml4NF9kZWZhdWx0KCk7CiAgICAgIGNyZWF0ZVZlcnRpY2VzRnJvbUdvb2dsZUVhcnRoRW50ZXJwcmlzZUJ1ZmZlcl9kZWZhdWx0ID0gY3JlYXRlVGFza1Byb2Nlc3Nvcldvcmtlcl9kZWZhdWx0KAogICAgICAgIGNyZWF0ZVZlcnRpY2VzRnJvbUdvb2dsZUVhcnRoRW50ZXJwcmlzZUJ1ZmZlcgogICAgICApOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvSGVpZ2h0bWFwRW5jb2RpbmcuanMKICB2YXIgSGVpZ2h0bWFwRW5jb2RpbmcsIEhlaWdodG1hcEVuY29kaW5nX2RlZmF1bHQ7CiAgdmFyIGluaXRfSGVpZ2h0bWFwRW5jb2RpbmcgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL0hlaWdodG1hcEVuY29kaW5nLmpzIigpIHsKICAgICAgSGVpZ2h0bWFwRW5jb2RpbmcgPSB7CiAgICAgICAgLyoqCiAgICAgICAgICogTm8gZW5jb2RpbmcKICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgTk9ORTogMCwKICAgICAgICAvKioKICAgICAgICAgKiBMRVJDIGVuY29kaW5nCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqCiAgICAgICAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL0VzcmkvbGVyY3xUaGUgTEVSQyBzcGVjaWZpY2F0aW9ufQogICAgICAgICAqLwogICAgICAgIExFUkM6IDEKICAgICAgfTsKICAgICAgSGVpZ2h0bWFwRW5jb2RpbmdfZGVmYXVsdCA9IE9iamVjdC5mcmVlemUoSGVpZ2h0bWFwRW5jb2RpbmcpOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvSGVpZ2h0bWFwVGVzc2VsbGF0b3IuanMKICB2YXIgSGVpZ2h0bWFwVGVzc2VsbGF0b3IsIGNhcnRlc2lhbjNTY3JhdGNoNywgbWF0cml4NFNjcmF0Y2g0LCBtaW5pbXVtU2NyYXRjaDIsIG1heGltdW1TY3JhdGNoMiwgSGVpZ2h0bWFwVGVzc2VsbGF0b3JfZGVmYXVsdDsKICB2YXIgaW5pdF9IZWlnaHRtYXBUZXNzZWxsYXRvciA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvSGVpZ2h0bWFwVGVzc2VsbGF0b3IuanMiKCkgewogICAgICBpbml0X0F4aXNBbGlnbmVkQm91bmRpbmdCb3goKTsKICAgICAgaW5pdF9Cb3VuZGluZ1NwaGVyZSgpOwogICAgICBpbml0X0NhcnRlc2lhbjIoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkYWxPY2NsdWRlcigpOwogICAgICBpbml0X01hdGgoKTsKICAgICAgaW5pdF9NYXRyaXg0KCk7CiAgICAgIGluaXRfT3JpZW50ZWRCb3VuZGluZ0JveCgpOwogICAgICBpbml0X1JlY3RhbmdsZSgpOwogICAgICBpbml0X1RlcnJhaW5FbmNvZGluZygpOwogICAgICBpbml0X1RyYW5zZm9ybXMoKTsKICAgICAgaW5pdF9XZWJNZXJjYXRvclByb2plY3Rpb24oKTsKICAgICAgSGVpZ2h0bWFwVGVzc2VsbGF0b3IgPSB7fTsKICAgICAgSGVpZ2h0bWFwVGVzc2VsbGF0b3IuREVGQVVMVF9TVFJVQ1RVUkUgPSBPYmplY3QuZnJlZXplKHsKICAgICAgICBoZWlnaHRTY2FsZTogMSwKICAgICAgICBoZWlnaHRPZmZzZXQ6IDAsCiAgICAgICAgZWxlbWVudHNQZXJIZWlnaHQ6IDEsCiAgICAgICAgc3RyaWRlOiAxLAogICAgICAgIGVsZW1lbnRNdWx0aXBsaWVyOiAyNTYsCiAgICAgICAgaXNCaWdFbmRpYW46IGZhbHNlCiAgICAgIH0pOwogICAgICBjYXJ0ZXNpYW4zU2NyYXRjaDcgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIG1hdHJpeDRTY3JhdGNoNCA9IG5ldyBNYXRyaXg0X2RlZmF1bHQoKTsKICAgICAgbWluaW11bVNjcmF0Y2gyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBtYXhpbXVtU2NyYXRjaDIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIEhlaWdodG1hcFRlc3NlbGxhdG9yLmNvbXB1dGVWZXJ0aWNlcyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChvcHRpb25zKSB8fCAhZGVmaW5lZF9kZWZhdWx0KG9wdGlvbnMuaGVpZ2h0bWFwKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoIm9wdGlvbnMuaGVpZ2h0bWFwIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChvcHRpb25zLndpZHRoKSB8fCAhZGVmaW5lZF9kZWZhdWx0KG9wdGlvbnMuaGVpZ2h0KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoIm9wdGlvbnMud2lkdGggYW5kIG9wdGlvbnMuaGVpZ2h0IGFyZSByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQob3B0aW9ucy5uYXRpdmVSZWN0YW5nbGUpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgib3B0aW9ucy5uYXRpdmVSZWN0YW5nbGUgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KG9wdGlvbnMuc2tpcnRIZWlnaHQpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgib3B0aW9ucy5za2lydEhlaWdodCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgY29zNCA9IE1hdGguY29zOwogICAgICAgIGNvbnN0IHNpbjQgPSBNYXRoLnNpbjsKICAgICAgICBjb25zdCBzcXJ0MiA9IE1hdGguc3FydDsKICAgICAgICBjb25zdCBhdGFuID0gTWF0aC5hdGFuOwogICAgICAgIGNvbnN0IGV4cCA9IE1hdGguZXhwOwogICAgICAgIGNvbnN0IHBpT3ZlclR3byA9IE1hdGhfZGVmYXVsdC5QSV9PVkVSX1RXTzsKICAgICAgICBjb25zdCB0b1JhZGlhbnMgPSBNYXRoX2RlZmF1bHQudG9SYWRpYW5zOwogICAgICAgIGNvbnN0IGhlaWdodG1hcCA9IG9wdGlvbnMuaGVpZ2h0bWFwOwogICAgICAgIGNvbnN0IHdpZHRoID0gb3B0aW9ucy53aWR0aDsKICAgICAgICBjb25zdCBoZWlnaHQgPSBvcHRpb25zLmhlaWdodDsKICAgICAgICBjb25zdCBza2lydEhlaWdodCA9IG9wdGlvbnMuc2tpcnRIZWlnaHQ7CiAgICAgICAgY29uc3QgaGFzU2tpcnRzID0gc2tpcnRIZWlnaHQgPiAwOwogICAgICAgIGNvbnN0IGlzR2VvZ3JhcGhpYyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuaXNHZW9ncmFwaGljLCB0cnVlKTsKICAgICAgICBjb25zdCBlbGxpcHNvaWQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLmVsbGlwc29pZCwgRWxsaXBzb2lkX2RlZmF1bHQuZGVmYXVsdCk7CiAgICAgICAgY29uc3Qgb25lT3Zlckdsb2JlU2VtaW1ham9yQXhpcyA9IDEgLyBlbGxpcHNvaWQubWF4aW11bVJhZGl1czsKICAgICAgICBjb25zdCBuYXRpdmVSZWN0YW5nbGUgPSBSZWN0YW5nbGVfZGVmYXVsdC5jbG9uZShvcHRpb25zLm5hdGl2ZVJlY3RhbmdsZSk7CiAgICAgICAgY29uc3QgcmVjdGFuZ2xlID0gUmVjdGFuZ2xlX2RlZmF1bHQuY2xvbmUob3B0aW9ucy5yZWN0YW5nbGUpOwogICAgICAgIGxldCBnZW9ncmFwaGljV2VzdDsKICAgICAgICBsZXQgZ2VvZ3JhcGhpY1NvdXRoOwogICAgICAgIGxldCBnZW9ncmFwaGljRWFzdDsKICAgICAgICBsZXQgZ2VvZ3JhcGhpY05vcnRoOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlY3RhbmdsZSkpIHsKICAgICAgICAgIGlmIChpc0dlb2dyYXBoaWMpIHsKICAgICAgICAgICAgZ2VvZ3JhcGhpY1dlc3QgPSB0b1JhZGlhbnMobmF0aXZlUmVjdGFuZ2xlLndlc3QpOwogICAgICAgICAgICBnZW9ncmFwaGljU291dGggPSB0b1JhZGlhbnMobmF0aXZlUmVjdGFuZ2xlLnNvdXRoKTsKICAgICAgICAgICAgZ2VvZ3JhcGhpY0Vhc3QgPSB0b1JhZGlhbnMobmF0aXZlUmVjdGFuZ2xlLmVhc3QpOwogICAgICAgICAgICBnZW9ncmFwaGljTm9ydGggPSB0b1JhZGlhbnMobmF0aXZlUmVjdGFuZ2xlLm5vcnRoKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGdlb2dyYXBoaWNXZXN0ID0gbmF0aXZlUmVjdGFuZ2xlLndlc3QgKiBvbmVPdmVyR2xvYmVTZW1pbWFqb3JBeGlzOwogICAgICAgICAgICBnZW9ncmFwaGljU291dGggPSBwaU92ZXJUd28gLSAyICogYXRhbihleHAoLW5hdGl2ZVJlY3RhbmdsZS5zb3V0aCAqIG9uZU92ZXJHbG9iZVNlbWltYWpvckF4aXMpKTsKICAgICAgICAgICAgZ2VvZ3JhcGhpY0Vhc3QgPSBuYXRpdmVSZWN0YW5nbGUuZWFzdCAqIG9uZU92ZXJHbG9iZVNlbWltYWpvckF4aXM7CiAgICAgICAgICAgIGdlb2dyYXBoaWNOb3J0aCA9IHBpT3ZlclR3byAtIDIgKiBhdGFuKGV4cCgtbmF0aXZlUmVjdGFuZ2xlLm5vcnRoICogb25lT3Zlckdsb2JlU2VtaW1ham9yQXhpcykpOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBnZW9ncmFwaGljV2VzdCA9IHJlY3RhbmdsZS53ZXN0OwogICAgICAgICAgZ2VvZ3JhcGhpY1NvdXRoID0gcmVjdGFuZ2xlLnNvdXRoOwogICAgICAgICAgZ2VvZ3JhcGhpY0Vhc3QgPSByZWN0YW5nbGUuZWFzdDsKICAgICAgICAgIGdlb2dyYXBoaWNOb3J0aCA9IHJlY3RhbmdsZS5ub3J0aDsKICAgICAgICB9CiAgICAgICAgbGV0IHJlbGF0aXZlVG9DZW50ZXIgPSBvcHRpb25zLnJlbGF0aXZlVG9DZW50ZXI7CiAgICAgICAgY29uc3QgaGFzUmVsYXRpdmVUb0NlbnRlciA9IGRlZmluZWRfZGVmYXVsdChyZWxhdGl2ZVRvQ2VudGVyKTsKICAgICAgICByZWxhdGl2ZVRvQ2VudGVyID0gaGFzUmVsYXRpdmVUb0NlbnRlciA/IHJlbGF0aXZlVG9DZW50ZXIgOiBDYXJ0ZXNpYW4zX2RlZmF1bHQuWkVSTzsKICAgICAgICBjb25zdCBpbmNsdWRlV2ViTWVyY2F0b3JUID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5pbmNsdWRlV2ViTWVyY2F0b3JULCBmYWxzZSk7CiAgICAgICAgY29uc3QgZXhhZ2dlcmF0aW9uID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5leGFnZ2VyYXRpb24sIDEpOwogICAgICAgIGNvbnN0IGV4YWdnZXJhdGlvblJlbGF0aXZlSGVpZ2h0ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoCiAgICAgICAgICBvcHRpb25zLmV4YWdnZXJhdGlvblJlbGF0aXZlSGVpZ2h0LAogICAgICAgICAgMAogICAgICAgICk7CiAgICAgICAgY29uc3QgaGFzRXhhZ2dlcmF0aW9uID0gZXhhZ2dlcmF0aW9uICE9PSAxOwogICAgICAgIGNvbnN0IGluY2x1ZGVHZW9kZXRpY1N1cmZhY2VOb3JtYWxzID0gaGFzRXhhZ2dlcmF0aW9uOwogICAgICAgIGNvbnN0IHN0cnVjdHVyZSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KAogICAgICAgICAgb3B0aW9ucy5zdHJ1Y3R1cmUsCiAgICAgICAgICBIZWlnaHRtYXBUZXNzZWxsYXRvci5ERUZBVUxUX1NUUlVDVFVSRQogICAgICAgICk7CiAgICAgICAgY29uc3QgaGVpZ2h0U2NhbGUgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCgKICAgICAgICAgIHN0cnVjdHVyZS5oZWlnaHRTY2FsZSwKICAgICAgICAgIEhlaWdodG1hcFRlc3NlbGxhdG9yLkRFRkFVTFRfU1RSVUNUVVJFLmhlaWdodFNjYWxlCiAgICAgICAgKTsKICAgICAgICBjb25zdCBoZWlnaHRPZmZzZXQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCgKICAgICAgICAgIHN0cnVjdHVyZS5oZWlnaHRPZmZzZXQsCiAgICAgICAgICBIZWlnaHRtYXBUZXNzZWxsYXRvci5ERUZBVUxUX1NUUlVDVFVSRS5oZWlnaHRPZmZzZXQKICAgICAgICApOwogICAgICAgIGNvbnN0IGVsZW1lbnRzUGVySGVpZ2h0ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoCiAgICAgICAgICBzdHJ1Y3R1cmUuZWxlbWVudHNQZXJIZWlnaHQsCiAgICAgICAgICBIZWlnaHRtYXBUZXNzZWxsYXRvci5ERUZBVUxUX1NUUlVDVFVSRS5lbGVtZW50c1BlckhlaWdodAogICAgICAgICk7CiAgICAgICAgY29uc3Qgc3RyaWRlID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoCiAgICAgICAgICBzdHJ1Y3R1cmUuc3RyaWRlLAogICAgICAgICAgSGVpZ2h0bWFwVGVzc2VsbGF0b3IuREVGQVVMVF9TVFJVQ1RVUkUuc3RyaWRlCiAgICAgICAgKTsKICAgICAgICBjb25zdCBlbGVtZW50TXVsdGlwbGllciA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KAogICAgICAgICAgc3RydWN0dXJlLmVsZW1lbnRNdWx0aXBsaWVyLAogICAgICAgICAgSGVpZ2h0bWFwVGVzc2VsbGF0b3IuREVGQVVMVF9TVFJVQ1RVUkUuZWxlbWVudE11bHRpcGxpZXIKICAgICAgICApOwogICAgICAgIGNvbnN0IGlzQmlnRW5kaWFuID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoCiAgICAgICAgICBzdHJ1Y3R1cmUuaXNCaWdFbmRpYW4sCiAgICAgICAgICBIZWlnaHRtYXBUZXNzZWxsYXRvci5ERUZBVUxUX1NUUlVDVFVSRS5pc0JpZ0VuZGlhbgogICAgICAgICk7CiAgICAgICAgbGV0IHJlY3RhbmdsZVdpZHRoID0gUmVjdGFuZ2xlX2RlZmF1bHQuY29tcHV0ZVdpZHRoKG5hdGl2ZVJlY3RhbmdsZSk7CiAgICAgICAgbGV0IHJlY3RhbmdsZUhlaWdodCA9IFJlY3RhbmdsZV9kZWZhdWx0LmNvbXB1dGVIZWlnaHQobmF0aXZlUmVjdGFuZ2xlKTsKICAgICAgICBjb25zdCBncmFudWxhcml0eVggPSByZWN0YW5nbGVXaWR0aCAvICh3aWR0aCAtIDEpOwogICAgICAgIGNvbnN0IGdyYW51bGFyaXR5WSA9IHJlY3RhbmdsZUhlaWdodCAvIChoZWlnaHQgLSAxKTsKICAgICAgICBpZiAoIWlzR2VvZ3JhcGhpYykgewogICAgICAgICAgcmVjdGFuZ2xlV2lkdGggKj0gb25lT3Zlckdsb2JlU2VtaW1ham9yQXhpczsKICAgICAgICAgIHJlY3RhbmdsZUhlaWdodCAqPSBvbmVPdmVyR2xvYmVTZW1pbWFqb3JBeGlzOwogICAgICAgIH0KICAgICAgICBjb25zdCByYWRpaVNxdWFyZWQgPSBlbGxpcHNvaWQucmFkaWlTcXVhcmVkOwogICAgICAgIGNvbnN0IHJhZGlpU3F1YXJlZFggPSByYWRpaVNxdWFyZWQueDsKICAgICAgICBjb25zdCByYWRpaVNxdWFyZWRZID0gcmFkaWlTcXVhcmVkLnk7CiAgICAgICAgY29uc3QgcmFkaWlTcXVhcmVkWiA9IHJhZGlpU3F1YXJlZC56OwogICAgICAgIGxldCBtaW5pbXVtSGVpZ2h0ID0gNjU1MzY7CiAgICAgICAgbGV0IG1heGltdW1IZWlnaHQgPSAtNjU1MzY7CiAgICAgICAgY29uc3QgZnJvbUVOVSA9IFRyYW5zZm9ybXNfZGVmYXVsdC5lYXN0Tm9ydGhVcFRvRml4ZWRGcmFtZSgKICAgICAgICAgIHJlbGF0aXZlVG9DZW50ZXIsCiAgICAgICAgICBlbGxpcHNvaWQKICAgICAgICApOwogICAgICAgIGNvbnN0IHRvRU5VID0gTWF0cml4NF9kZWZhdWx0LmludmVyc2VUcmFuc2Zvcm1hdGlvbihmcm9tRU5VLCBtYXRyaXg0U2NyYXRjaDQpOwogICAgICAgIGxldCBzb3V0aE1lcmNhdG9yWTsKICAgICAgICBsZXQgb25lT3Zlck1lcmNhdG9ySGVpZ2h0OwogICAgICAgIGlmIChpbmNsdWRlV2ViTWVyY2F0b3JUKSB7CiAgICAgICAgICBzb3V0aE1lcmNhdG9yWSA9IFdlYk1lcmNhdG9yUHJvamVjdGlvbl9kZWZhdWx0Lmdlb2RldGljTGF0aXR1ZGVUb01lcmNhdG9yQW5nbGUoZ2VvZ3JhcGhpY1NvdXRoKTsKICAgICAgICAgIG9uZU92ZXJNZXJjYXRvckhlaWdodCA9IDEgLyAoV2ViTWVyY2F0b3JQcm9qZWN0aW9uX2RlZmF1bHQuZ2VvZGV0aWNMYXRpdHVkZVRvTWVyY2F0b3JBbmdsZShnZW9ncmFwaGljTm9ydGgpIC0gc291dGhNZXJjYXRvclkpOwogICAgICAgIH0KICAgICAgICBjb25zdCBtaW5pbXVtID0gbWluaW11bVNjcmF0Y2gyOwogICAgICAgIG1pbmltdW0ueCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTsKICAgICAgICBtaW5pbXVtLnkgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7CiAgICAgICAgbWluaW11bS56ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOwogICAgICAgIGNvbnN0IG1heGltdW0gPSBtYXhpbXVtU2NyYXRjaDI7CiAgICAgICAgbWF4aW11bS54ID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZOwogICAgICAgIG1heGltdW0ueSA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTsKICAgICAgICBtYXhpbXVtLnogPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7CiAgICAgICAgbGV0IGhNaW4gPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7CiAgICAgICAgY29uc3QgZ3JpZFZlcnRleENvdW50ID0gd2lkdGggKiBoZWlnaHQ7CiAgICAgICAgY29uc3QgZWRnZVZlcnRleENvdW50ID0gc2tpcnRIZWlnaHQgPiAwID8gd2lkdGggKiAyICsgaGVpZ2h0ICogMiA6IDA7CiAgICAgICAgY29uc3QgdmVydGV4Q291bnQgPSBncmlkVmVydGV4Q291bnQgKyBlZGdlVmVydGV4Q291bnQ7CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gbmV3IEFycmF5KHZlcnRleENvdW50KTsKICAgICAgICBjb25zdCBoZWlnaHRzID0gbmV3IEFycmF5KHZlcnRleENvdW50KTsKICAgICAgICBjb25zdCB1dnMgPSBuZXcgQXJyYXkodmVydGV4Q291bnQpOwogICAgICAgIGNvbnN0IHdlYk1lcmNhdG9yVHMgPSBpbmNsdWRlV2ViTWVyY2F0b3JUID8gbmV3IEFycmF5KHZlcnRleENvdW50KSA6IFtdOwogICAgICAgIGNvbnN0IGdlb2RldGljU3VyZmFjZU5vcm1hbHMgPSBpbmNsdWRlR2VvZGV0aWNTdXJmYWNlTm9ybWFscyA/IG5ldyBBcnJheSh2ZXJ0ZXhDb3VudCkgOiBbXTsKICAgICAgICBsZXQgc3RhcnRSb3cgPSAwOwogICAgICAgIGxldCBlbmRSb3cgPSBoZWlnaHQ7CiAgICAgICAgbGV0IHN0YXJ0Q29sID0gMDsKICAgICAgICBsZXQgZW5kQ29sID0gd2lkdGg7CiAgICAgICAgaWYgKGhhc1NraXJ0cykgewogICAgICAgICAgLS1zdGFydFJvdzsKICAgICAgICAgICsrZW5kUm93OwogICAgICAgICAgLS1zdGFydENvbDsKICAgICAgICAgICsrZW5kQ29sOwogICAgICAgIH0KICAgICAgICBjb25zdCBza2lydE9mZnNldFBlcmNlbnRhZ2UgPSAxZS01OwogICAgICAgIGZvciAobGV0IHJvd0luZGV4ID0gc3RhcnRSb3c7IHJvd0luZGV4IDwgZW5kUm93OyArK3Jvd0luZGV4KSB7CiAgICAgICAgICBsZXQgcm93ID0gcm93SW5kZXg7CiAgICAgICAgICBpZiAocm93IDwgMCkgewogICAgICAgICAgICByb3cgPSAwOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHJvdyA+PSBoZWlnaHQpIHsKICAgICAgICAgICAgcm93ID0gaGVpZ2h0IC0gMTsKICAgICAgICAgIH0KICAgICAgICAgIGxldCBsYXRpdHVkZSA9IG5hdGl2ZVJlY3RhbmdsZS5ub3J0aCAtIGdyYW51bGFyaXR5WSAqIHJvdzsKICAgICAgICAgIGlmICghaXNHZW9ncmFwaGljKSB7CiAgICAgICAgICAgIGxhdGl0dWRlID0gcGlPdmVyVHdvIC0gMiAqIGF0YW4oZXhwKC1sYXRpdHVkZSAqIG9uZU92ZXJHbG9iZVNlbWltYWpvckF4aXMpKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGxhdGl0dWRlID0gdG9SYWRpYW5zKGxhdGl0dWRlKTsKICAgICAgICAgIH0KICAgICAgICAgIGxldCB2MyA9IChsYXRpdHVkZSAtIGdlb2dyYXBoaWNTb3V0aCkgLyAoZ2VvZ3JhcGhpY05vcnRoIC0gZ2VvZ3JhcGhpY1NvdXRoKTsKICAgICAgICAgIHYzID0gTWF0aF9kZWZhdWx0LmNsYW1wKHYzLCAwLCAxKTsKICAgICAgICAgIGNvbnN0IGlzTm9ydGhFZGdlID0gcm93SW5kZXggPT09IHN0YXJ0Um93OwogICAgICAgICAgY29uc3QgaXNTb3V0aEVkZ2UgPSByb3dJbmRleCA9PT0gZW5kUm93IC0gMTsKICAgICAgICAgIGlmIChza2lydEhlaWdodCA+IDApIHsKICAgICAgICAgICAgaWYgKGlzTm9ydGhFZGdlKSB7CiAgICAgICAgICAgICAgbGF0aXR1ZGUgKz0gc2tpcnRPZmZzZXRQZXJjZW50YWdlICogcmVjdGFuZ2xlSGVpZ2h0OwogICAgICAgICAgICB9IGVsc2UgaWYgKGlzU291dGhFZGdlKSB7CiAgICAgICAgICAgICAgbGF0aXR1ZGUgLT0gc2tpcnRPZmZzZXRQZXJjZW50YWdlICogcmVjdGFuZ2xlSGVpZ2h0OwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBjb25zdCBjb3NMYXRpdHVkZSA9IGNvczQobGF0aXR1ZGUpOwogICAgICAgICAgY29uc3QgblogPSBzaW40KGxhdGl0dWRlKTsKICAgICAgICAgIGNvbnN0IGtaID0gcmFkaWlTcXVhcmVkWiAqIG5aOwogICAgICAgICAgbGV0IHdlYk1lcmNhdG9yVDsKICAgICAgICAgIGlmIChpbmNsdWRlV2ViTWVyY2F0b3JUKSB7CiAgICAgICAgICAgIHdlYk1lcmNhdG9yVCA9IChXZWJNZXJjYXRvclByb2plY3Rpb25fZGVmYXVsdC5nZW9kZXRpY0xhdGl0dWRlVG9NZXJjYXRvckFuZ2xlKGxhdGl0dWRlKSAtIHNvdXRoTWVyY2F0b3JZKSAqIG9uZU92ZXJNZXJjYXRvckhlaWdodDsKICAgICAgICAgIH0KICAgICAgICAgIGZvciAobGV0IGNvbEluZGV4ID0gc3RhcnRDb2w7IGNvbEluZGV4IDwgZW5kQ29sOyArK2NvbEluZGV4KSB7CiAgICAgICAgICAgIGxldCBjb2wgPSBjb2xJbmRleDsKICAgICAgICAgICAgaWYgKGNvbCA8IDApIHsKICAgICAgICAgICAgICBjb2wgPSAwOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChjb2wgPj0gd2lkdGgpIHsKICAgICAgICAgICAgICBjb2wgPSB3aWR0aCAtIDE7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgdGVycmFpbk9mZnNldCA9IHJvdyAqICh3aWR0aCAqIHN0cmlkZSkgKyBjb2wgKiBzdHJpZGU7CiAgICAgICAgICAgIGxldCBoZWlnaHRTYW1wbGU7CiAgICAgICAgICAgIGlmIChlbGVtZW50c1BlckhlaWdodCA9PT0gMSkgewogICAgICAgICAgICAgIGhlaWdodFNhbXBsZSA9IGhlaWdodG1hcFt0ZXJyYWluT2Zmc2V0XTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBoZWlnaHRTYW1wbGUgPSAwOwogICAgICAgICAgICAgIGxldCBlbGVtZW50T2Zmc2V0OwogICAgICAgICAgICAgIGlmIChpc0JpZ0VuZGlhbikgewogICAgICAgICAgICAgICAgZm9yIChlbGVtZW50T2Zmc2V0ID0gMDsgZWxlbWVudE9mZnNldCA8IGVsZW1lbnRzUGVySGVpZ2h0OyArK2VsZW1lbnRPZmZzZXQpIHsKICAgICAgICAgICAgICAgICAgaGVpZ2h0U2FtcGxlID0gaGVpZ2h0U2FtcGxlICogZWxlbWVudE11bHRpcGxpZXIgKyBoZWlnaHRtYXBbdGVycmFpbk9mZnNldCArIGVsZW1lbnRPZmZzZXRdOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBmb3IgKGVsZW1lbnRPZmZzZXQgPSBlbGVtZW50c1BlckhlaWdodCAtIDE7IGVsZW1lbnRPZmZzZXQgPj0gMDsgLS1lbGVtZW50T2Zmc2V0KSB7CiAgICAgICAgICAgICAgICAgIGhlaWdodFNhbXBsZSA9IGhlaWdodFNhbXBsZSAqIGVsZW1lbnRNdWx0aXBsaWVyICsgaGVpZ2h0bWFwW3RlcnJhaW5PZmZzZXQgKyBlbGVtZW50T2Zmc2V0XTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaGVpZ2h0U2FtcGxlID0gaGVpZ2h0U2FtcGxlICogaGVpZ2h0U2NhbGUgKyBoZWlnaHRPZmZzZXQ7CiAgICAgICAgICAgIG1heGltdW1IZWlnaHQgPSBNYXRoLm1heChtYXhpbXVtSGVpZ2h0LCBoZWlnaHRTYW1wbGUpOwogICAgICAgICAgICBtaW5pbXVtSGVpZ2h0ID0gTWF0aC5taW4obWluaW11bUhlaWdodCwgaGVpZ2h0U2FtcGxlKTsKICAgICAgICAgICAgbGV0IGxvbmdpdHVkZSA9IG5hdGl2ZVJlY3RhbmdsZS53ZXN0ICsgZ3JhbnVsYXJpdHlYICogY29sOwogICAgICAgICAgICBpZiAoIWlzR2VvZ3JhcGhpYykgewogICAgICAgICAgICAgIGxvbmdpdHVkZSA9IGxvbmdpdHVkZSAqIG9uZU92ZXJHbG9iZVNlbWltYWpvckF4aXM7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgbG9uZ2l0dWRlID0gdG9SYWRpYW5zKGxvbmdpdHVkZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgbGV0IHUzID0gKGxvbmdpdHVkZSAtIGdlb2dyYXBoaWNXZXN0KSAvIChnZW9ncmFwaGljRWFzdCAtIGdlb2dyYXBoaWNXZXN0KTsKICAgICAgICAgICAgdTMgPSBNYXRoX2RlZmF1bHQuY2xhbXAodTMsIDAsIDEpOwogICAgICAgICAgICBsZXQgaW5kZXggPSByb3cgKiB3aWR0aCArIGNvbDsKICAgICAgICAgICAgaWYgKHNraXJ0SGVpZ2h0ID4gMCkgewogICAgICAgICAgICAgIGNvbnN0IGlzV2VzdEVkZ2UgPSBjb2xJbmRleCA9PT0gc3RhcnRDb2w7CiAgICAgICAgICAgICAgY29uc3QgaXNFYXN0RWRnZSA9IGNvbEluZGV4ID09PSBlbmRDb2wgLSAxOwogICAgICAgICAgICAgIGNvbnN0IGlzRWRnZTIgPSBpc05vcnRoRWRnZSB8fCBpc1NvdXRoRWRnZSB8fCBpc1dlc3RFZGdlIHx8IGlzRWFzdEVkZ2U7CiAgICAgICAgICAgICAgY29uc3QgaXNDb3JuZXIgPSAoaXNOb3J0aEVkZ2UgfHwgaXNTb3V0aEVkZ2UpICYmIChpc1dlc3RFZGdlIHx8IGlzRWFzdEVkZ2UpOwogICAgICAgICAgICAgIGlmIChpc0Nvcm5lcikgewogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc0VkZ2UyKSB7CiAgICAgICAgICAgICAgICBoZWlnaHRTYW1wbGUgLT0gc2tpcnRIZWlnaHQ7CiAgICAgICAgICAgICAgICBpZiAoaXNXZXN0RWRnZSkgewogICAgICAgICAgICAgICAgICBpbmRleCA9IGdyaWRWZXJ0ZXhDb3VudCArIChoZWlnaHQgLSByb3cgLSAxKTsKICAgICAgICAgICAgICAgICAgbG9uZ2l0dWRlIC09IHNraXJ0T2Zmc2V0UGVyY2VudGFnZSAqIHJlY3RhbmdsZVdpZHRoOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc1NvdXRoRWRnZSkgewogICAgICAgICAgICAgICAgICBpbmRleCA9IGdyaWRWZXJ0ZXhDb3VudCArIGhlaWdodCArICh3aWR0aCAtIGNvbCAtIDEpOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc0Vhc3RFZGdlKSB7CiAgICAgICAgICAgICAgICAgIGluZGV4ID0gZ3JpZFZlcnRleENvdW50ICsgaGVpZ2h0ICsgd2lkdGggKyByb3c7CiAgICAgICAgICAgICAgICAgIGxvbmdpdHVkZSArPSBza2lydE9mZnNldFBlcmNlbnRhZ2UgKiByZWN0YW5nbGVXaWR0aDsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNOb3J0aEVkZ2UpIHsKICAgICAgICAgICAgICAgICAgaW5kZXggPSBncmlkVmVydGV4Q291bnQgKyBoZWlnaHQgKyB3aWR0aCArIGhlaWdodCArIGNvbDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgblggPSBjb3NMYXRpdHVkZSAqIGNvczQobG9uZ2l0dWRlKTsKICAgICAgICAgICAgY29uc3QgblkgPSBjb3NMYXRpdHVkZSAqIHNpbjQobG9uZ2l0dWRlKTsKICAgICAgICAgICAgY29uc3Qga1ggPSByYWRpaVNxdWFyZWRYICogblg7CiAgICAgICAgICAgIGNvbnN0IGtZID0gcmFkaWlTcXVhcmVkWSAqIG5ZOwogICAgICAgICAgICBjb25zdCBnYW1tYSA9IHNxcnQyKGtYICogblggKyBrWSAqIG5ZICsga1ogKiBuWik7CiAgICAgICAgICAgIGNvbnN0IG9uZU92ZXJHYW1tYSA9IDEgLyBnYW1tYTsKICAgICAgICAgICAgY29uc3QgclN1cmZhY2VYID0ga1ggKiBvbmVPdmVyR2FtbWE7CiAgICAgICAgICAgIGNvbnN0IHJTdXJmYWNlWSA9IGtZICogb25lT3ZlckdhbW1hOwogICAgICAgICAgICBjb25zdCByU3VyZmFjZVogPSBrWiAqIG9uZU92ZXJHYW1tYTsKICAgICAgICAgICAgY29uc3QgcG9zaXRpb24gPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgICAgICAgIHBvc2l0aW9uLnggPSByU3VyZmFjZVggKyBuWCAqIGhlaWdodFNhbXBsZTsKICAgICAgICAgICAgcG9zaXRpb24ueSA9IHJTdXJmYWNlWSArIG5ZICogaGVpZ2h0U2FtcGxlOwogICAgICAgICAgICBwb3NpdGlvbi56ID0gclN1cmZhY2VaICsgblogKiBoZWlnaHRTYW1wbGU7CiAgICAgICAgICAgIE1hdHJpeDRfZGVmYXVsdC5tdWx0aXBseUJ5UG9pbnQodG9FTlUsIHBvc2l0aW9uLCBjYXJ0ZXNpYW4zU2NyYXRjaDcpOwogICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubWluaW11bUJ5Q29tcG9uZW50KGNhcnRlc2lhbjNTY3JhdGNoNywgbWluaW11bSwgbWluaW11bSk7CiAgICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5tYXhpbXVtQnlDb21wb25lbnQoY2FydGVzaWFuM1NjcmF0Y2g3LCBtYXhpbXVtLCBtYXhpbXVtKTsKICAgICAgICAgICAgaE1pbiA9IE1hdGgubWluKGhNaW4sIGhlaWdodFNhbXBsZSk7CiAgICAgICAgICAgIHBvc2l0aW9uc1tpbmRleF0gPSBwb3NpdGlvbjsKICAgICAgICAgICAgdXZzW2luZGV4XSA9IG5ldyBDYXJ0ZXNpYW4yX2RlZmF1bHQodTMsIHYzKTsKICAgICAgICAgICAgaGVpZ2h0c1tpbmRleF0gPSBoZWlnaHRTYW1wbGU7CiAgICAgICAgICAgIGlmIChpbmNsdWRlV2ViTWVyY2F0b3JUKSB7CiAgICAgICAgICAgICAgd2ViTWVyY2F0b3JUc1tpbmRleF0gPSB3ZWJNZXJjYXRvclQ7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGluY2x1ZGVHZW9kZXRpY1N1cmZhY2VOb3JtYWxzKSB7CiAgICAgICAgICAgICAgZ2VvZGV0aWNTdXJmYWNlTm9ybWFsc1tpbmRleF0gPSBlbGxpcHNvaWQuZ2VvZGV0aWNTdXJmYWNlTm9ybWFsKHBvc2l0aW9uKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBjb25zdCBib3VuZGluZ1NwaGVyZTNEID0gQm91bmRpbmdTcGhlcmVfZGVmYXVsdC5mcm9tUG9pbnRzKHBvc2l0aW9ucyk7CiAgICAgICAgbGV0IG9yaWVudGVkQm91bmRpbmdCb3g7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChyZWN0YW5nbGUpKSB7CiAgICAgICAgICBvcmllbnRlZEJvdW5kaW5nQm94ID0gT3JpZW50ZWRCb3VuZGluZ0JveF9kZWZhdWx0LmZyb21SZWN0YW5nbGUoCiAgICAgICAgICAgIHJlY3RhbmdsZSwKICAgICAgICAgICAgbWluaW11bUhlaWdodCwKICAgICAgICAgICAgbWF4aW11bUhlaWdodCwKICAgICAgICAgICAgZWxsaXBzb2lkCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBsZXQgb2NjbHVkZWVQb2ludEluU2NhbGVkU3BhY2U7CiAgICAgICAgaWYgKGhhc1JlbGF0aXZlVG9DZW50ZXIpIHsKICAgICAgICAgIGNvbnN0IG9jY2x1ZGVyID0gbmV3IEVsbGlwc29pZGFsT2NjbHVkZXJfZGVmYXVsdChlbGxpcHNvaWQpOwogICAgICAgICAgb2NjbHVkZWVQb2ludEluU2NhbGVkU3BhY2UgPSBvY2NsdWRlci5jb21wdXRlSG9yaXpvbkN1bGxpbmdQb2ludFBvc3NpYmx5VW5kZXJFbGxpcHNvaWQoCiAgICAgICAgICAgIHJlbGF0aXZlVG9DZW50ZXIsCiAgICAgICAgICAgIHBvc2l0aW9ucywKICAgICAgICAgICAgbWluaW11bUhlaWdodAogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgYWFCb3ggPSBuZXcgQXhpc0FsaWduZWRCb3VuZGluZ0JveF9kZWZhdWx0KG1pbmltdW0sIG1heGltdW0sIHJlbGF0aXZlVG9DZW50ZXIpOwogICAgICAgIGNvbnN0IGVuY29kaW5nID0gbmV3IFRlcnJhaW5FbmNvZGluZ19kZWZhdWx0KAogICAgICAgICAgcmVsYXRpdmVUb0NlbnRlciwKICAgICAgICAgIGFhQm94LAogICAgICAgICAgaE1pbiwKICAgICAgICAgIG1heGltdW1IZWlnaHQsCiAgICAgICAgICBmcm9tRU5VLAogICAgICAgICAgZmFsc2UsCiAgICAgICAgICBpbmNsdWRlV2ViTWVyY2F0b3JULAogICAgICAgICAgaW5jbHVkZUdlb2RldGljU3VyZmFjZU5vcm1hbHMsCiAgICAgICAgICBleGFnZ2VyYXRpb24sCiAgICAgICAgICBleGFnZ2VyYXRpb25SZWxhdGl2ZUhlaWdodAogICAgICAgICk7CiAgICAgICAgY29uc3QgdmVydGljZXMgPSBuZXcgRmxvYXQzMkFycmF5KHZlcnRleENvdW50ICogZW5jb2Rpbmcuc3RyaWRlKTsKICAgICAgICBsZXQgYnVmZmVySW5kZXggPSAwOwogICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdmVydGV4Q291bnQ7ICsraikgewogICAgICAgICAgYnVmZmVySW5kZXggPSBlbmNvZGluZy5lbmNvZGUoCiAgICAgICAgICAgIHZlcnRpY2VzLAogICAgICAgICAgICBidWZmZXJJbmRleCwKICAgICAgICAgICAgcG9zaXRpb25zW2pdLAogICAgICAgICAgICB1dnNbal0sCiAgICAgICAgICAgIGhlaWdodHNbal0sCiAgICAgICAgICAgIHZvaWQgMCwKICAgICAgICAgICAgd2ViTWVyY2F0b3JUc1tqXSwKICAgICAgICAgICAgZ2VvZGV0aWNTdXJmYWNlTm9ybWFsc1tqXQogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIHZlcnRpY2VzLAogICAgICAgICAgbWF4aW11bUhlaWdodCwKICAgICAgICAgIG1pbmltdW1IZWlnaHQsCiAgICAgICAgICBlbmNvZGluZywKICAgICAgICAgIGJvdW5kaW5nU3BoZXJlM0QsCiAgICAgICAgICBvcmllbnRlZEJvdW5kaW5nQm94LAogICAgICAgICAgb2NjbHVkZWVQb2ludEluU2NhbGVkU3BhY2UKICAgICAgICB9OwogICAgICB9OwogICAgICBIZWlnaHRtYXBUZXNzZWxsYXRvcl9kZWZhdWx0ID0gSGVpZ2h0bWFwVGVzc2VsbGF0b3I7CiAgICB9CiAgfSk7CgogIC8vIG5vZGVfbW9kdWxlcy9sZXJjL0xlcmNEZWNvZGUuanMKICB2YXIgcmVxdWlyZV9MZXJjRGVjb2RlID0gX19jb21tb25KUyh7CiAgICAibm9kZV9tb2R1bGVzL2xlcmMvTGVyY0RlY29kZS5qcyIoZXhwb3J0czIsIG1vZHVsZSkgewogICAgICAvKiBDb3B5cmlnaHQgMjAxNS0yMDE4IEVzcmkuIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAgQHByZXNlcnZlICovCiAgICAgIChmdW5jdGlvbigpIHsKICAgICAgICB2YXIgTGVyY0RlY29kZSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgdmFyIENudFpJbWFnZSA9IHt9OwogICAgICAgICAgQ250WkltYWdlLmRlZmF1bHROb0RhdGFWYWx1ZSA9IC0zNDAyNzk5OTM4NzkwMTQ4NGUyMjsKICAgICAgICAgIENudFpJbWFnZS5kZWNvZGUgPSBmdW5jdGlvbihpbnB1dCwgb3B0aW9ucykgewogICAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsKICAgICAgICAgICAgdmFyIHNraXBNYXNrID0gb3B0aW9ucy5lbmNvZGVkTWFza0RhdGEgfHwgb3B0aW9ucy5lbmNvZGVkTWFza0RhdGEgPT09IG51bGw7CiAgICAgICAgICAgIHZhciBwYXJzZWREYXRhID0gcGFyc2UoaW5wdXQsIG9wdGlvbnMuaW5wdXRPZmZzZXQgfHwgMCwgc2tpcE1hc2spOwogICAgICAgICAgICB2YXIgbm9EYXRhVmFsdWUgPSBvcHRpb25zLm5vRGF0YVZhbHVlICE9PSBudWxsID8gb3B0aW9ucy5ub0RhdGFWYWx1ZSA6IENudFpJbWFnZS5kZWZhdWx0Tm9EYXRhVmFsdWU7CiAgICAgICAgICAgIHZhciB1bmNvbXByZXNzZWREYXRhID0gdW5jb21wcmVzc1BpeGVsVmFsdWVzKAogICAgICAgICAgICAgIHBhcnNlZERhdGEsCiAgICAgICAgICAgICAgb3B0aW9ucy5waXhlbFR5cGUgfHwgRmxvYXQzMkFycmF5LAogICAgICAgICAgICAgIG9wdGlvbnMuZW5jb2RlZE1hc2tEYXRhLAogICAgICAgICAgICAgIG5vRGF0YVZhbHVlLAogICAgICAgICAgICAgIG9wdGlvbnMucmV0dXJuTWFzawogICAgICAgICAgICApOwogICAgICAgICAgICB2YXIgcmVzdWx0ID0gewogICAgICAgICAgICAgIHdpZHRoOiBwYXJzZWREYXRhLndpZHRoLAogICAgICAgICAgICAgIGhlaWdodDogcGFyc2VkRGF0YS5oZWlnaHQsCiAgICAgICAgICAgICAgcGl4ZWxEYXRhOiB1bmNvbXByZXNzZWREYXRhLnJlc3VsdFBpeGVscywKICAgICAgICAgICAgICBtaW5WYWx1ZTogdW5jb21wcmVzc2VkRGF0YS5taW5WYWx1ZSwKICAgICAgICAgICAgICBtYXhWYWx1ZTogcGFyc2VkRGF0YS5waXhlbHMubWF4VmFsdWUsCiAgICAgICAgICAgICAgbm9EYXRhVmFsdWUKICAgICAgICAgICAgfTsKICAgICAgICAgICAgaWYgKHVuY29tcHJlc3NlZERhdGEucmVzdWx0TWFzaykgewogICAgICAgICAgICAgIHJlc3VsdC5tYXNrRGF0YSA9IHVuY29tcHJlc3NlZERhdGEucmVzdWx0TWFzazsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAob3B0aW9ucy5yZXR1cm5FbmNvZGVkTWFzayAmJiBwYXJzZWREYXRhLm1hc2spIHsKICAgICAgICAgICAgICByZXN1bHQuZW5jb2RlZE1hc2tEYXRhID0gcGFyc2VkRGF0YS5tYXNrLmJpdHNldCA/IHBhcnNlZERhdGEubWFzay5iaXRzZXQgOiBudWxsOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChvcHRpb25zLnJldHVybkZpbGVJbmZvKSB7CiAgICAgICAgICAgICAgcmVzdWx0LmZpbGVJbmZvID0gZm9ybWF0RmlsZUluZm8ocGFyc2VkRGF0YSk7CiAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuY29tcHV0ZVVzZWRCaXREZXB0aHMpIHsKICAgICAgICAgICAgICAgIHJlc3VsdC5maWxlSW5mby5iaXREZXB0aHMgPSBjb21wdXRlVXNlZEJpdERlcHRocyhwYXJzZWREYXRhKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICAgIH07CiAgICAgICAgICB2YXIgdW5jb21wcmVzc1BpeGVsVmFsdWVzID0gZnVuY3Rpb24oZGF0YSwgVHlwZWRBcnJheUNsYXNzLCBtYXNrQml0c2V0LCBub0RhdGFWYWx1ZSwgc3RvcmVEZWNvZGVkTWFzaykgewogICAgICAgICAgICB2YXIgYmxvY2tJZHggPSAwOwogICAgICAgICAgICB2YXIgbnVtWCA9IGRhdGEucGl4ZWxzLm51bUJsb2Nrc1g7CiAgICAgICAgICAgIHZhciBudW1ZID0gZGF0YS5waXhlbHMubnVtQmxvY2tzWTsKICAgICAgICAgICAgdmFyIGJsb2NrV2lkdGggPSBNYXRoLmZsb29yKGRhdGEud2lkdGggLyBudW1YKTsKICAgICAgICAgICAgdmFyIGJsb2NrSGVpZ2h0ID0gTWF0aC5mbG9vcihkYXRhLmhlaWdodCAvIG51bVkpOwogICAgICAgICAgICB2YXIgc2NhbGUgPSAyICogZGF0YS5tYXhaRXJyb3I7CiAgICAgICAgICAgIHZhciBtaW5WYWx1ZSA9IE51bWJlci5NQVhfVkFMVUUsIGN1cnJlbnRWYWx1ZTsKICAgICAgICAgICAgbWFza0JpdHNldCA9IG1hc2tCaXRzZXQgfHwgKGRhdGEubWFzayA/IGRhdGEubWFzay5iaXRzZXQgOiBudWxsKTsKICAgICAgICAgICAgdmFyIHJlc3VsdFBpeGVscywgcmVzdWx0TWFzazsKICAgICAgICAgICAgcmVzdWx0UGl4ZWxzID0gbmV3IFR5cGVkQXJyYXlDbGFzcyhkYXRhLndpZHRoICogZGF0YS5oZWlnaHQpOwogICAgICAgICAgICBpZiAoc3RvcmVEZWNvZGVkTWFzayAmJiBtYXNrQml0c2V0KSB7CiAgICAgICAgICAgICAgcmVzdWx0TWFzayA9IG5ldyBVaW50OEFycmF5KGRhdGEud2lkdGggKiBkYXRhLmhlaWdodCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGJsb2NrRGF0YUJ1ZmZlciA9IG5ldyBGbG9hdDMyQXJyYXkoYmxvY2tXaWR0aCAqIGJsb2NrSGVpZ2h0KTsKICAgICAgICAgICAgdmFyIHh4LCB5eTsKICAgICAgICAgICAgZm9yICh2YXIgeSA9IDA7IHkgPD0gbnVtWTsgeSsrKSB7CiAgICAgICAgICAgICAgdmFyIHRoaXNCbG9ja0hlaWdodCA9IHkgIT09IG51bVkgPyBibG9ja0hlaWdodCA6IGRhdGEuaGVpZ2h0ICUgbnVtWTsKICAgICAgICAgICAgICBpZiAodGhpc0Jsb2NrSGVpZ2h0ID09PSAwKSB7CiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPD0gbnVtWDsgeCsrKSB7CiAgICAgICAgICAgICAgICB2YXIgdGhpc0Jsb2NrV2lkdGggPSB4ICE9PSBudW1YID8gYmxvY2tXaWR0aCA6IGRhdGEud2lkdGggJSBudW1YOwogICAgICAgICAgICAgICAgaWYgKHRoaXNCbG9ja1dpZHRoID09PSAwKSB7CiAgICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIG91dFB0ciA9IHkgKiBkYXRhLndpZHRoICogYmxvY2tIZWlnaHQgKyB4ICogYmxvY2tXaWR0aDsKICAgICAgICAgICAgICAgIHZhciBvdXRTdHJpZGUgPSBkYXRhLndpZHRoIC0gdGhpc0Jsb2NrV2lkdGg7CiAgICAgICAgICAgICAgICB2YXIgYmxvY2sgPSBkYXRhLnBpeGVscy5ibG9ja3NbYmxvY2tJZHhdOwogICAgICAgICAgICAgICAgdmFyIGJsb2NrRGF0YSwgYmxvY2tQdHIsIGNvbnN0VmFsdWU7CiAgICAgICAgICAgICAgICBpZiAoYmxvY2suZW5jb2RpbmcgPCAyKSB7CiAgICAgICAgICAgICAgICAgIGlmIChibG9jay5lbmNvZGluZyA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgIGJsb2NrRGF0YSA9IGJsb2NrLnJhd0RhdGE7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdW5zdHVmZihibG9jay5zdHVmZmVkRGF0YSwgYmxvY2suYml0c1BlclBpeGVsLCBibG9jay5udW1WYWxpZFBpeGVscywgYmxvY2sub2Zmc2V0LCBzY2FsZSwgYmxvY2tEYXRhQnVmZmVyLCBkYXRhLnBpeGVscy5tYXhWYWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgYmxvY2tEYXRhID0gYmxvY2tEYXRhQnVmZmVyOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGJsb2NrUHRyID0gMDsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYmxvY2suZW5jb2RpbmcgPT09IDIpIHsKICAgICAgICAgICAgICAgICAgY29uc3RWYWx1ZSA9IDA7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICBjb25zdFZhbHVlID0gYmxvY2sub2Zmc2V0OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIG1hc2tCeXRlOwogICAgICAgICAgICAgICAgaWYgKG1hc2tCaXRzZXQpIHsKICAgICAgICAgICAgICAgICAgZm9yICh5eSA9IDA7IHl5IDwgdGhpc0Jsb2NrSGVpZ2h0OyB5eSsrKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKG91dFB0ciAmIDcpIHsKICAgICAgICAgICAgICAgICAgICAgIG1hc2tCeXRlID0gbWFza0JpdHNldFtvdXRQdHIgPj4gM107CiAgICAgICAgICAgICAgICAgICAgICBtYXNrQnl0ZSA8PD0gb3V0UHRyICYgNzsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZm9yICh4eCA9IDA7IHh4IDwgdGhpc0Jsb2NrV2lkdGg7IHh4KyspIHsKICAgICAgICAgICAgICAgICAgICAgIGlmICghKG91dFB0ciAmIDcpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tCeXRlID0gbWFza0JpdHNldFtvdXRQdHIgPj4gM107CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBpZiAobWFza0J5dGUgJiAxMjgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdE1hc2spIHsKICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRNYXNrW291dFB0cl0gPSAxOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSA9IGJsb2NrLmVuY29kaW5nIDwgMiA/IGJsb2NrRGF0YVtibG9ja1B0cisrXSA6IGNvbnN0VmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgIG1pblZhbHVlID0gbWluVmFsdWUgPiBjdXJyZW50VmFsdWUgPyBjdXJyZW50VmFsdWUgOiBtaW5WYWx1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0UGl4ZWxzW291dFB0cisrXSA9IGN1cnJlbnRWYWx1ZTsKICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHRNYXNrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0TWFza1tvdXRQdHJdID0gMDsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRQaXhlbHNbb3V0UHRyKytdID0gbm9EYXRhVmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBtYXNrQnl0ZSA8PD0gMTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgb3V0UHRyICs9IG91dFN0cmlkZTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgaWYgKGJsb2NrLmVuY29kaW5nIDwgMikgewogICAgICAgICAgICAgICAgICAgIGZvciAoeXkgPSAwOyB5eSA8IHRoaXNCbG9ja0hlaWdodDsgeXkrKykgewogICAgICAgICAgICAgICAgICAgICAgZm9yICh4eCA9IDA7IHh4IDwgdGhpc0Jsb2NrV2lkdGg7IHh4KyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFZhbHVlID0gYmxvY2tEYXRhW2Jsb2NrUHRyKytdOwogICAgICAgICAgICAgICAgICAgICAgICBtaW5WYWx1ZSA9IG1pblZhbHVlID4gY3VycmVudFZhbHVlID8gY3VycmVudFZhbHVlIDogbWluVmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFBpeGVsc1tvdXRQdHIrK10gPSBjdXJyZW50VmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBvdXRQdHIgKz0gb3V0U3RyaWRlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBtaW5WYWx1ZSA9IG1pblZhbHVlID4gY29uc3RWYWx1ZSA/IGNvbnN0VmFsdWUgOiBtaW5WYWx1ZTsKICAgICAgICAgICAgICAgICAgICBmb3IgKHl5ID0gMDsgeXkgPCB0aGlzQmxvY2tIZWlnaHQ7IHl5KyspIHsKICAgICAgICAgICAgICAgICAgICAgIGZvciAoeHggPSAwOyB4eCA8IHRoaXNCbG9ja1dpZHRoOyB4eCsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFBpeGVsc1tvdXRQdHIrK10gPSBjb25zdFZhbHVlOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgb3V0UHRyICs9IG91dFN0cmlkZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChibG9jay5lbmNvZGluZyA9PT0gMSAmJiBibG9ja1B0ciAhPT0gYmxvY2subnVtVmFsaWRQaXhlbHMpIHsKICAgICAgICAgICAgICAgICAgdGhyb3cgIkJsb2NrIGFuZCBNYXNrIGRvIG5vdCBtYXRjaCI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBibG9ja0lkeCsrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgIHJlc3VsdFBpeGVscywKICAgICAgICAgICAgICByZXN1bHRNYXNrLAogICAgICAgICAgICAgIG1pblZhbHVlCiAgICAgICAgICAgIH07CiAgICAgICAgICB9OwogICAgICAgICAgdmFyIGZvcm1hdEZpbGVJbmZvID0gZnVuY3Rpb24oZGF0YSkgewogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICJmaWxlSWRlbnRpZmllclN0cmluZyI6IGRhdGEuZmlsZUlkZW50aWZpZXJTdHJpbmcsCiAgICAgICAgICAgICAgImZpbGVWZXJzaW9uIjogZGF0YS5maWxlVmVyc2lvbiwKICAgICAgICAgICAgICAiaW1hZ2VUeXBlIjogZGF0YS5pbWFnZVR5cGUsCiAgICAgICAgICAgICAgImhlaWdodCI6IGRhdGEuaGVpZ2h0LAogICAgICAgICAgICAgICJ3aWR0aCI6IGRhdGEud2lkdGgsCiAgICAgICAgICAgICAgIm1heFpFcnJvciI6IGRhdGEubWF4WkVycm9yLAogICAgICAgICAgICAgICJlb2ZPZmZzZXQiOiBkYXRhLmVvZk9mZnNldCwKICAgICAgICAgICAgICAibWFzayI6IGRhdGEubWFzayA/IHsKICAgICAgICAgICAgICAgICJudW1CbG9ja3NYIjogZGF0YS5tYXNrLm51bUJsb2Nrc1gsCiAgICAgICAgICAgICAgICAibnVtQmxvY2tzWSI6IGRhdGEubWFzay5udW1CbG9ja3NZLAogICAgICAgICAgICAgICAgIm51bUJ5dGVzIjogZGF0YS5tYXNrLm51bUJ5dGVzLAogICAgICAgICAgICAgICAgIm1heFZhbHVlIjogZGF0YS5tYXNrLm1heFZhbHVlCiAgICAgICAgICAgICAgfSA6IG51bGwsCiAgICAgICAgICAgICAgInBpeGVscyI6IHsKICAgICAgICAgICAgICAgICJudW1CbG9ja3NYIjogZGF0YS5waXhlbHMubnVtQmxvY2tzWCwKICAgICAgICAgICAgICAgICJudW1CbG9ja3NZIjogZGF0YS5waXhlbHMubnVtQmxvY2tzWSwKICAgICAgICAgICAgICAgICJudW1CeXRlcyI6IGRhdGEucGl4ZWxzLm51bUJ5dGVzLAogICAgICAgICAgICAgICAgIm1heFZhbHVlIjogZGF0YS5waXhlbHMubWF4VmFsdWUsCiAgICAgICAgICAgICAgICAibm9EYXRhVmFsdWUiOiBkYXRhLm5vRGF0YVZhbHVlCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwogICAgICAgICAgfTsKICAgICAgICAgIHZhciBjb21wdXRlVXNlZEJpdERlcHRocyA9IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICAgICAgdmFyIG51bUJsb2NrcyA9IGRhdGEucGl4ZWxzLm51bUJsb2Nrc1ggKiBkYXRhLnBpeGVscy5udW1CbG9ja3NZOwogICAgICAgICAgICB2YXIgYml0RGVwdGhzID0ge307CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtQmxvY2tzOyBpKyspIHsKICAgICAgICAgICAgICB2YXIgYmxvY2sgPSBkYXRhLnBpeGVscy5ibG9ja3NbaV07CiAgICAgICAgICAgICAgaWYgKGJsb2NrLmVuY29kaW5nID09PSAwKSB7CiAgICAgICAgICAgICAgICBiaXREZXB0aHMuZmxvYXQzMiA9IHRydWU7CiAgICAgICAgICAgICAgfSBlbHNlIGlmIChibG9jay5lbmNvZGluZyA9PT0gMSkgewogICAgICAgICAgICAgICAgYml0RGVwdGhzW2Jsb2NrLmJpdHNQZXJQaXhlbF0gPSB0cnVlOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBiaXREZXB0aHNbMF0gPSB0cnVlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMoYml0RGVwdGhzKTsKICAgICAgICAgIH07CiAgICAgICAgICB2YXIgcGFyc2UgPSBmdW5jdGlvbihpbnB1dCwgZnAsIHNraXBNYXNrKSB7CiAgICAgICAgICAgIHZhciBkYXRhID0ge307CiAgICAgICAgICAgIHZhciBmaWxlSWRWaWV3ID0gbmV3IFVpbnQ4QXJyYXkoaW5wdXQsIGZwLCAxMCk7CiAgICAgICAgICAgIGRhdGEuZmlsZUlkZW50aWZpZXJTdHJpbmcgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGZpbGVJZFZpZXcpOwogICAgICAgICAgICBpZiAoZGF0YS5maWxlSWRlbnRpZmllclN0cmluZy50cmltKCkgIT09ICJDbnRaSW1hZ2UiKSB7CiAgICAgICAgICAgICAgdGhyb3cgIlVuZXhwZWN0ZWQgZmlsZSBpZGVudGlmaWVyIHN0cmluZzogIiArIGRhdGEuZmlsZUlkZW50aWZpZXJTdHJpbmc7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnAgKz0gMTA7CiAgICAgICAgICAgIHZhciB2aWV3ID0gbmV3IERhdGFWaWV3KGlucHV0LCBmcCwgMjQpOwogICAgICAgICAgICBkYXRhLmZpbGVWZXJzaW9uID0gdmlldy5nZXRJbnQzMigwLCB0cnVlKTsKICAgICAgICAgICAgZGF0YS5pbWFnZVR5cGUgPSB2aWV3LmdldEludDMyKDQsIHRydWUpOwogICAgICAgICAgICBkYXRhLmhlaWdodCA9IHZpZXcuZ2V0VWludDMyKDgsIHRydWUpOwogICAgICAgICAgICBkYXRhLndpZHRoID0gdmlldy5nZXRVaW50MzIoMTIsIHRydWUpOwogICAgICAgICAgICBkYXRhLm1heFpFcnJvciA9IHZpZXcuZ2V0RmxvYXQ2NCgxNiwgdHJ1ZSk7CiAgICAgICAgICAgIGZwICs9IDI0OwogICAgICAgICAgICBpZiAoIXNraXBNYXNrKSB7CiAgICAgICAgICAgICAgdmlldyA9IG5ldyBEYXRhVmlldyhpbnB1dCwgZnAsIDE2KTsKICAgICAgICAgICAgICBkYXRhLm1hc2sgPSB7fTsKICAgICAgICAgICAgICBkYXRhLm1hc2subnVtQmxvY2tzWSA9IHZpZXcuZ2V0VWludDMyKDAsIHRydWUpOwogICAgICAgICAgICAgIGRhdGEubWFzay5udW1CbG9ja3NYID0gdmlldy5nZXRVaW50MzIoNCwgdHJ1ZSk7CiAgICAgICAgICAgICAgZGF0YS5tYXNrLm51bUJ5dGVzID0gdmlldy5nZXRVaW50MzIoOCwgdHJ1ZSk7CiAgICAgICAgICAgICAgZGF0YS5tYXNrLm1heFZhbHVlID0gdmlldy5nZXRGbG9hdDMyKDEyLCB0cnVlKTsKICAgICAgICAgICAgICBmcCArPSAxNjsKICAgICAgICAgICAgICBpZiAoZGF0YS5tYXNrLm51bUJ5dGVzID4gMCkgewogICAgICAgICAgICAgICAgdmFyIGJpdHNldCA9IG5ldyBVaW50OEFycmF5KE1hdGguY2VpbChkYXRhLndpZHRoICogZGF0YS5oZWlnaHQgLyA4KSk7CiAgICAgICAgICAgICAgICB2aWV3ID0gbmV3IERhdGFWaWV3KGlucHV0LCBmcCwgZGF0YS5tYXNrLm51bUJ5dGVzKTsKICAgICAgICAgICAgICAgIHZhciBjbnQgPSB2aWV3LmdldEludDE2KDAsIHRydWUpOwogICAgICAgICAgICAgICAgdmFyIGlwID0gMiwgb3AgPSAwOwogICAgICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgICAgICBpZiAoY250ID4gMCkgewogICAgICAgICAgICAgICAgICAgIHdoaWxlIChjbnQtLSkgewogICAgICAgICAgICAgICAgICAgICAgYml0c2V0W29wKytdID0gdmlldy5nZXRVaW50OChpcCsrKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbCA9IHZpZXcuZ2V0VWludDgoaXArKyk7CiAgICAgICAgICAgICAgICAgICAgY250ID0gLWNudDsKICAgICAgICAgICAgICAgICAgICB3aGlsZSAoY250LS0pIHsKICAgICAgICAgICAgICAgICAgICAgIGJpdHNldFtvcCsrXSA9IHZhbDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgY250ID0gdmlldy5nZXRJbnQxNihpcCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgIGlwICs9IDI7CiAgICAgICAgICAgICAgICB9IHdoaWxlIChpcCA8IGRhdGEubWFzay5udW1CeXRlcyk7CiAgICAgICAgICAgICAgICBpZiAoY250ICE9PSAtMzI3NjggfHwgb3AgPCBiaXRzZXQubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgIHRocm93ICJVbmV4cGVjdGVkIGVuZCBvZiBtYXNrIFJMRSBlbmNvZGluZyI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBkYXRhLm1hc2suYml0c2V0ID0gYml0c2V0OwogICAgICAgICAgICAgICAgZnAgKz0gZGF0YS5tYXNrLm51bUJ5dGVzOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAoKGRhdGEubWFzay5udW1CeXRlcyB8IGRhdGEubWFzay5udW1CbG9ja3NZIHwgZGF0YS5tYXNrLm1heFZhbHVlKSA9PT0gMCkgewogICAgICAgICAgICAgICAgZGF0YS5tYXNrLmJpdHNldCA9IG5ldyBVaW50OEFycmF5KE1hdGguY2VpbChkYXRhLndpZHRoICogZGF0YS5oZWlnaHQgLyA4KSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHZpZXcgPSBuZXcgRGF0YVZpZXcoaW5wdXQsIGZwLCAxNik7CiAgICAgICAgICAgIGRhdGEucGl4ZWxzID0ge307CiAgICAgICAgICAgIGRhdGEucGl4ZWxzLm51bUJsb2Nrc1kgPSB2aWV3LmdldFVpbnQzMigwLCB0cnVlKTsKICAgICAgICAgICAgZGF0YS5waXhlbHMubnVtQmxvY2tzWCA9IHZpZXcuZ2V0VWludDMyKDQsIHRydWUpOwogICAgICAgICAgICBkYXRhLnBpeGVscy5udW1CeXRlcyA9IHZpZXcuZ2V0VWludDMyKDgsIHRydWUpOwogICAgICAgICAgICBkYXRhLnBpeGVscy5tYXhWYWx1ZSA9IHZpZXcuZ2V0RmxvYXQzMigxMiwgdHJ1ZSk7CiAgICAgICAgICAgIGZwICs9IDE2OwogICAgICAgICAgICB2YXIgbnVtQmxvY2tzWCA9IGRhdGEucGl4ZWxzLm51bUJsb2Nrc1g7CiAgICAgICAgICAgIHZhciBudW1CbG9ja3NZID0gZGF0YS5waXhlbHMubnVtQmxvY2tzWTsKICAgICAgICAgICAgdmFyIGFjdHVhbE51bUJsb2Nrc1ggPSBudW1CbG9ja3NYICsgKGRhdGEud2lkdGggJSBudW1CbG9ja3NYID4gMCA/IDEgOiAwKTsKICAgICAgICAgICAgdmFyIGFjdHVhbE51bUJsb2Nrc1kgPSBudW1CbG9ja3NZICsgKGRhdGEuaGVpZ2h0ICUgbnVtQmxvY2tzWSA+IDAgPyAxIDogMCk7CiAgICAgICAgICAgIGRhdGEucGl4ZWxzLmJsb2NrcyA9IG5ldyBBcnJheShhY3R1YWxOdW1CbG9ja3NYICogYWN0dWFsTnVtQmxvY2tzWSk7CiAgICAgICAgICAgIHZhciBibG9ja0kgPSAwOwogICAgICAgICAgICBmb3IgKHZhciBibG9ja1kgPSAwOyBibG9ja1kgPCBhY3R1YWxOdW1CbG9ja3NZOyBibG9ja1krKykgewogICAgICAgICAgICAgIGZvciAodmFyIGJsb2NrWCA9IDA7IGJsb2NrWCA8IGFjdHVhbE51bUJsb2Nrc1g7IGJsb2NrWCsrKSB7CiAgICAgICAgICAgICAgICB2YXIgc2l6ZSA9IDA7CiAgICAgICAgICAgICAgICB2YXIgYnl0ZXNMZWZ0ID0gaW5wdXQuYnl0ZUxlbmd0aCAtIGZwOwogICAgICAgICAgICAgICAgdmlldyA9IG5ldyBEYXRhVmlldyhpbnB1dCwgZnAsIE1hdGgubWluKDEwLCBieXRlc0xlZnQpKTsKICAgICAgICAgICAgICAgIHZhciBibG9jayA9IHt9OwogICAgICAgICAgICAgICAgZGF0YS5waXhlbHMuYmxvY2tzW2Jsb2NrSSsrXSA9IGJsb2NrOwogICAgICAgICAgICAgICAgdmFyIGhlYWRlckJ5dGUgPSB2aWV3LmdldFVpbnQ4KDApOwogICAgICAgICAgICAgICAgc2l6ZSsrOwogICAgICAgICAgICAgICAgYmxvY2suZW5jb2RpbmcgPSBoZWFkZXJCeXRlICYgNjM7CiAgICAgICAgICAgICAgICBpZiAoYmxvY2suZW5jb2RpbmcgPiAzKSB7CiAgICAgICAgICAgICAgICAgIHRocm93ICJJbnZhbGlkIGJsb2NrIGVuY29kaW5nICgiICsgYmxvY2suZW5jb2RpbmcgKyAiKSI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoYmxvY2suZW5jb2RpbmcgPT09IDIpIHsKICAgICAgICAgICAgICAgICAgZnArKzsKICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoaGVhZGVyQnl0ZSAhPT0gMCAmJiBoZWFkZXJCeXRlICE9PSAyKSB7CiAgICAgICAgICAgICAgICAgIGhlYWRlckJ5dGUgPj49IDY7CiAgICAgICAgICAgICAgICAgIGJsb2NrLm9mZnNldFR5cGUgPSBoZWFkZXJCeXRlOwogICAgICAgICAgICAgICAgICBpZiAoaGVhZGVyQnl0ZSA9PT0gMikgewogICAgICAgICAgICAgICAgICAgIGJsb2NrLm9mZnNldCA9IHZpZXcuZ2V0SW50OCgxKTsKICAgICAgICAgICAgICAgICAgICBzaXplKys7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaGVhZGVyQnl0ZSA9PT0gMSkgewogICAgICAgICAgICAgICAgICAgIGJsb2NrLm9mZnNldCA9IHZpZXcuZ2V0SW50MTYoMSwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgc2l6ZSArPSAyOwogICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGhlYWRlckJ5dGUgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICBibG9jay5vZmZzZXQgPSB2aWV3LmdldEZsb2F0MzIoMSwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgc2l6ZSArPSA0OwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHRocm93ICJJbnZhbGlkIGJsb2NrIG9mZnNldCB0eXBlIjsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoYmxvY2suZW5jb2RpbmcgPT09IDEpIHsKICAgICAgICAgICAgICAgICAgICBoZWFkZXJCeXRlID0gdmlldy5nZXRVaW50OChzaXplKTsKICAgICAgICAgICAgICAgICAgICBzaXplKys7CiAgICAgICAgICAgICAgICAgICAgYmxvY2suYml0c1BlclBpeGVsID0gaGVhZGVyQnl0ZSAmIDYzOwogICAgICAgICAgICAgICAgICAgIGhlYWRlckJ5dGUgPj49IDY7CiAgICAgICAgICAgICAgICAgICAgYmxvY2subnVtVmFsaWRQaXhlbHNUeXBlID0gaGVhZGVyQnl0ZTsKICAgICAgICAgICAgICAgICAgICBpZiAoaGVhZGVyQnl0ZSA9PT0gMikgewogICAgICAgICAgICAgICAgICAgICAgYmxvY2subnVtVmFsaWRQaXhlbHMgPSB2aWV3LmdldFVpbnQ4KHNpemUpOwogICAgICAgICAgICAgICAgICAgICAgc2l6ZSsrOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaGVhZGVyQnl0ZSA9PT0gMSkgewogICAgICAgICAgICAgICAgICAgICAgYmxvY2subnVtVmFsaWRQaXhlbHMgPSB2aWV3LmdldFVpbnQxNihzaXplLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICAgIHNpemUgKz0gMjsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGhlYWRlckJ5dGUgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICAgIGJsb2NrLm51bVZhbGlkUGl4ZWxzID0gdmlldy5nZXRVaW50MzIoc2l6ZSwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgICBzaXplICs9IDQ7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgIHRocm93ICJJbnZhbGlkIHZhbGlkIHBpeGVsIGNvdW50IHR5cGUiOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZnAgKz0gc2l6ZTsKICAgICAgICAgICAgICAgIGlmIChibG9jay5lbmNvZGluZyA9PT0gMykgewogICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciBhcnJheUJ1Ziwgc3RvcmU4OwogICAgICAgICAgICAgICAgaWYgKGJsb2NrLmVuY29kaW5nID09PSAwKSB7CiAgICAgICAgICAgICAgICAgIHZhciBudW1QaXhlbHMgPSAoZGF0YS5waXhlbHMubnVtQnl0ZXMgLSAxKSAvIDQ7CiAgICAgICAgICAgICAgICAgIGlmIChudW1QaXhlbHMgIT09IE1hdGguZmxvb3IobnVtUGl4ZWxzKSkgewogICAgICAgICAgICAgICAgICAgIHRocm93ICJ1bmNvbXByZXNzZWQgYmxvY2sgaGFzIGludmFsaWQgbGVuZ3RoIjsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBhcnJheUJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcihudW1QaXhlbHMgKiA0KTsKICAgICAgICAgICAgICAgICAgc3RvcmU4ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWYpOwogICAgICAgICAgICAgICAgICBzdG9yZTguc2V0KG5ldyBVaW50OEFycmF5KGlucHV0LCBmcCwgbnVtUGl4ZWxzICogNCkpOwogICAgICAgICAgICAgICAgICB2YXIgcmF3RGF0YSA9IG5ldyBGbG9hdDMyQXJyYXkoYXJyYXlCdWYpOwogICAgICAgICAgICAgICAgICBibG9jay5yYXdEYXRhID0gcmF3RGF0YTsKICAgICAgICAgICAgICAgICAgZnAgKz0gbnVtUGl4ZWxzICogNDsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYmxvY2suZW5jb2RpbmcgPT09IDEpIHsKICAgICAgICAgICAgICAgICAgdmFyIGRhdGFCeXRlcyA9IE1hdGguY2VpbChibG9jay5udW1WYWxpZFBpeGVscyAqIGJsb2NrLmJpdHNQZXJQaXhlbCAvIDgpOwogICAgICAgICAgICAgICAgICB2YXIgZGF0YVdvcmRzID0gTWF0aC5jZWlsKGRhdGFCeXRlcyAvIDQpOwogICAgICAgICAgICAgICAgICBhcnJheUJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcihkYXRhV29yZHMgKiA0KTsKICAgICAgICAgICAgICAgICAgc3RvcmU4ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWYpOwogICAgICAgICAgICAgICAgICBzdG9yZTguc2V0KG5ldyBVaW50OEFycmF5KGlucHV0LCBmcCwgZGF0YUJ5dGVzKSk7CiAgICAgICAgICAgICAgICAgIGJsb2NrLnN0dWZmZWREYXRhID0gbmV3IFVpbnQzMkFycmF5KGFycmF5QnVmKTsKICAgICAgICAgICAgICAgICAgZnAgKz0gZGF0YUJ5dGVzOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBkYXRhLmVvZk9mZnNldCA9IGZwOwogICAgICAgICAgICByZXR1cm4gZGF0YTsKICAgICAgICAgIH07CiAgICAgICAgICB2YXIgdW5zdHVmZiA9IGZ1bmN0aW9uKHNyYywgYml0c1BlclBpeGVsLCBudW1QaXhlbHMsIG9mZnNldCwgc2NhbGUsIGRlc3QsIG1heFZhbHVlKSB7CiAgICAgICAgICAgIHZhciBiaXRNYXNrID0gKDEgPDwgYml0c1BlclBpeGVsKSAtIDE7CiAgICAgICAgICAgIHZhciBpID0gMCwgbzsKICAgICAgICAgICAgdmFyIGJpdHNMZWZ0ID0gMDsKICAgICAgICAgICAgdmFyIG4sIGJ1ZmZlcjsKICAgICAgICAgICAgdmFyIG5tYXggPSBNYXRoLmNlaWwoKG1heFZhbHVlIC0gb2Zmc2V0KSAvIHNjYWxlKTsKICAgICAgICAgICAgdmFyIG51bUludmFsaWRUYWlsQnl0ZXMgPSBzcmMubGVuZ3RoICogNCAtIE1hdGguY2VpbChiaXRzUGVyUGl4ZWwgKiBudW1QaXhlbHMgLyA4KTsKICAgICAgICAgICAgc3JjW3NyYy5sZW5ndGggLSAxXSA8PD0gOCAqIG51bUludmFsaWRUYWlsQnl0ZXM7CiAgICAgICAgICAgIGZvciAobyA9IDA7IG8gPCBudW1QaXhlbHM7IG8rKykgewogICAgICAgICAgICAgIGlmIChiaXRzTGVmdCA9PT0gMCkgewogICAgICAgICAgICAgICAgYnVmZmVyID0gc3JjW2krK107CiAgICAgICAgICAgICAgICBiaXRzTGVmdCA9IDMyOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAoYml0c0xlZnQgPj0gYml0c1BlclBpeGVsKSB7CiAgICAgICAgICAgICAgICBuID0gYnVmZmVyID4+PiBiaXRzTGVmdCAtIGJpdHNQZXJQaXhlbCAmIGJpdE1hc2s7CiAgICAgICAgICAgICAgICBiaXRzTGVmdCAtPSBiaXRzUGVyUGl4ZWw7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHZhciBtaXNzaW5nQml0cyA9IGJpdHNQZXJQaXhlbCAtIGJpdHNMZWZ0OwogICAgICAgICAgICAgICAgbiA9IChidWZmZXIgJiBiaXRNYXNrKSA8PCBtaXNzaW5nQml0cyAmIGJpdE1hc2s7CiAgICAgICAgICAgICAgICBidWZmZXIgPSBzcmNbaSsrXTsKICAgICAgICAgICAgICAgIGJpdHNMZWZ0ID0gMzIgLSBtaXNzaW5nQml0czsKICAgICAgICAgICAgICAgIG4gKz0gYnVmZmVyID4+PiBiaXRzTGVmdDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZGVzdFtvXSA9IG4gPCBubWF4ID8gb2Zmc2V0ICsgbiAqIHNjYWxlIDogbWF4VmFsdWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGRlc3Q7CiAgICAgICAgICB9OwogICAgICAgICAgcmV0dXJuIENudFpJbWFnZTsKICAgICAgICB9KCk7CiAgICAgICAgdmFyIExlcmMyRGVjb2RlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAidXNlIHN0cmljdCI7CiAgICAgICAgICB2YXIgQml0U3R1ZmZlciA9IHsKICAgICAgICAgICAgLy9tZXRob2RzIGVuZGluZyB3aXRoIDIgYXJlIGZvciB0aGUgbmV3IGJ5dGUgb3JkZXIgdXNlZCBieSBMZXJjMi4zIGFuZCBhYm92ZS4KICAgICAgICAgICAgLy9vcmlnaW5hbFVuc3R1ZmYgaXMgdXNlZCB0byB1bnBhY2sgSHVmZm1hbiBjb2RlIHRhYmxlLiBjb2RlIGlzIGR1cGxpY2F0ZWQgdG8gdW5zdHVmZnggZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMuCiAgICAgICAgICAgIHVuc3R1ZmY6IGZ1bmN0aW9uKHNyYywgZGVzdCwgYml0c1BlclBpeGVsLCBudW1QaXhlbHMsIGx1dEFyciwgb2Zmc2V0LCBzY2FsZSwgbWF4VmFsdWUpIHsKICAgICAgICAgICAgICB2YXIgYml0TWFzayA9ICgxIDw8IGJpdHNQZXJQaXhlbCkgLSAxOwogICAgICAgICAgICAgIHZhciBpID0gMCwgbzsKICAgICAgICAgICAgICB2YXIgYml0c0xlZnQgPSAwOwogICAgICAgICAgICAgIHZhciBuLCBidWZmZXIsIG1pc3NpbmdCaXRzLCBubWF4OwogICAgICAgICAgICAgIHZhciBudW1JbnZhbGlkVGFpbEJ5dGVzID0gc3JjLmxlbmd0aCAqIDQgLSBNYXRoLmNlaWwoYml0c1BlclBpeGVsICogbnVtUGl4ZWxzIC8gOCk7CiAgICAgICAgICAgICAgc3JjW3NyYy5sZW5ndGggLSAxXSA8PD0gOCAqIG51bUludmFsaWRUYWlsQnl0ZXM7CiAgICAgICAgICAgICAgaWYgKGx1dEFycikgewogICAgICAgICAgICAgICAgZm9yIChvID0gMDsgbyA8IG51bVBpeGVsczsgbysrKSB7CiAgICAgICAgICAgICAgICAgIGlmIChiaXRzTGVmdCA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgIGJ1ZmZlciA9IHNyY1tpKytdOwogICAgICAgICAgICAgICAgICAgIGJpdHNMZWZ0ID0gMzI7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKGJpdHNMZWZ0ID49IGJpdHNQZXJQaXhlbCkgewogICAgICAgICAgICAgICAgICAgIG4gPSBidWZmZXIgPj4+IGJpdHNMZWZ0IC0gYml0c1BlclBpeGVsICYgYml0TWFzazsKICAgICAgICAgICAgICAgICAgICBiaXRzTGVmdCAtPSBiaXRzUGVyUGl4ZWw7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgbWlzc2luZ0JpdHMgPSBiaXRzUGVyUGl4ZWwgLSBiaXRzTGVmdDsKICAgICAgICAgICAgICAgICAgICBuID0gKGJ1ZmZlciAmIGJpdE1hc2spIDw8IG1pc3NpbmdCaXRzICYgYml0TWFzazsKICAgICAgICAgICAgICAgICAgICBidWZmZXIgPSBzcmNbaSsrXTsKICAgICAgICAgICAgICAgICAgICBiaXRzTGVmdCA9IDMyIC0gbWlzc2luZ0JpdHM7CiAgICAgICAgICAgICAgICAgICAgbiArPSBidWZmZXIgPj4+IGJpdHNMZWZ0OwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGRlc3Rbb10gPSBsdXRBcnJbbl07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIG5tYXggPSBNYXRoLmNlaWwoKG1heFZhbHVlIC0gb2Zmc2V0KSAvIHNjYWxlKTsKICAgICAgICAgICAgICAgIGZvciAobyA9IDA7IG8gPCBudW1QaXhlbHM7IG8rKykgewogICAgICAgICAgICAgICAgICBpZiAoYml0c0xlZnQgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICBidWZmZXIgPSBzcmNbaSsrXTsKICAgICAgICAgICAgICAgICAgICBiaXRzTGVmdCA9IDMyOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChiaXRzTGVmdCA+PSBiaXRzUGVyUGl4ZWwpIHsKICAgICAgICAgICAgICAgICAgICBuID0gYnVmZmVyID4+PiBiaXRzTGVmdCAtIGJpdHNQZXJQaXhlbCAmIGJpdE1hc2s7CiAgICAgICAgICAgICAgICAgICAgYml0c0xlZnQgLT0gYml0c1BlclBpeGVsOwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIG1pc3NpbmdCaXRzID0gYml0c1BlclBpeGVsIC0gYml0c0xlZnQ7CiAgICAgICAgICAgICAgICAgICAgbiA9IChidWZmZXIgJiBiaXRNYXNrKSA8PCBtaXNzaW5nQml0cyAmIGJpdE1hc2s7CiAgICAgICAgICAgICAgICAgICAgYnVmZmVyID0gc3JjW2krK107CiAgICAgICAgICAgICAgICAgICAgYml0c0xlZnQgPSAzMiAtIG1pc3NpbmdCaXRzOwogICAgICAgICAgICAgICAgICAgIG4gKz0gYnVmZmVyID4+PiBiaXRzTGVmdDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBkZXN0W29dID0gbiA8IG5tYXggPyBvZmZzZXQgKyBuICogc2NhbGUgOiBtYXhWYWx1ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHVuc3R1ZmZMVVQ6IGZ1bmN0aW9uKHNyYywgYml0c1BlclBpeGVsLCBudW1QaXhlbHMsIG9mZnNldCwgc2NhbGUsIG1heFZhbHVlKSB7CiAgICAgICAgICAgICAgdmFyIGJpdE1hc2sgPSAoMSA8PCBiaXRzUGVyUGl4ZWwpIC0gMTsKICAgICAgICAgICAgICB2YXIgaSA9IDAsIG8gPSAwLCBtaXNzaW5nQml0cyA9IDAsIGJpdHNMZWZ0ID0gMCwgbiA9IDA7CiAgICAgICAgICAgICAgdmFyIGJ1ZmZlcjsKICAgICAgICAgICAgICB2YXIgZGVzdCA9IFtdOwogICAgICAgICAgICAgIHZhciBudW1JbnZhbGlkVGFpbEJ5dGVzID0gc3JjLmxlbmd0aCAqIDQgLSBNYXRoLmNlaWwoYml0c1BlclBpeGVsICogbnVtUGl4ZWxzIC8gOCk7CiAgICAgICAgICAgICAgc3JjW3NyYy5sZW5ndGggLSAxXSA8PD0gOCAqIG51bUludmFsaWRUYWlsQnl0ZXM7CiAgICAgICAgICAgICAgdmFyIG5tYXggPSBNYXRoLmNlaWwoKG1heFZhbHVlIC0gb2Zmc2V0KSAvIHNjYWxlKTsKICAgICAgICAgICAgICBmb3IgKG8gPSAwOyBvIDwgbnVtUGl4ZWxzOyBvKyspIHsKICAgICAgICAgICAgICAgIGlmIChiaXRzTGVmdCA9PT0gMCkgewogICAgICAgICAgICAgICAgICBidWZmZXIgPSBzcmNbaSsrXTsKICAgICAgICAgICAgICAgICAgYml0c0xlZnQgPSAzMjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChiaXRzTGVmdCA+PSBiaXRzUGVyUGl4ZWwpIHsKICAgICAgICAgICAgICAgICAgbiA9IGJ1ZmZlciA+Pj4gYml0c0xlZnQgLSBiaXRzUGVyUGl4ZWwgJiBiaXRNYXNrOwogICAgICAgICAgICAgICAgICBiaXRzTGVmdCAtPSBiaXRzUGVyUGl4ZWw7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICBtaXNzaW5nQml0cyA9IGJpdHNQZXJQaXhlbCAtIGJpdHNMZWZ0OwogICAgICAgICAgICAgICAgICBuID0gKGJ1ZmZlciAmIGJpdE1hc2spIDw8IG1pc3NpbmdCaXRzICYgYml0TWFzazsKICAgICAgICAgICAgICAgICAgYnVmZmVyID0gc3JjW2krK107CiAgICAgICAgICAgICAgICAgIGJpdHNMZWZ0ID0gMzIgLSBtaXNzaW5nQml0czsKICAgICAgICAgICAgICAgICAgbiArPSBidWZmZXIgPj4+IGJpdHNMZWZ0OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZGVzdFtvXSA9IG4gPCBubWF4ID8gb2Zmc2V0ICsgbiAqIHNjYWxlIDogbWF4VmFsdWU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGRlc3QudW5zaGlmdChvZmZzZXQpOwogICAgICAgICAgICAgIHJldHVybiBkZXN0OwogICAgICAgICAgICB9LAogICAgICAgICAgICB1bnN0dWZmMjogZnVuY3Rpb24oc3JjLCBkZXN0LCBiaXRzUGVyUGl4ZWwsIG51bVBpeGVscywgbHV0QXJyLCBvZmZzZXQsIHNjYWxlLCBtYXhWYWx1ZSkgewogICAgICAgICAgICAgIHZhciBiaXRNYXNrID0gKDEgPDwgYml0c1BlclBpeGVsKSAtIDE7CiAgICAgICAgICAgICAgdmFyIGkgPSAwLCBvOwogICAgICAgICAgICAgIHZhciBiaXRzTGVmdCA9IDAsIGJpdFBvcyA9IDA7CiAgICAgICAgICAgICAgdmFyIG4sIGJ1ZmZlciwgbWlzc2luZ0JpdHM7CiAgICAgICAgICAgICAgaWYgKGx1dEFycikgewogICAgICAgICAgICAgICAgZm9yIChvID0gMDsgbyA8IG51bVBpeGVsczsgbysrKSB7CiAgICAgICAgICAgICAgICAgIGlmIChiaXRzTGVmdCA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgIGJ1ZmZlciA9IHNyY1tpKytdOwogICAgICAgICAgICAgICAgICAgIGJpdHNMZWZ0ID0gMzI7CiAgICAgICAgICAgICAgICAgICAgYml0UG9zID0gMDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoYml0c0xlZnQgPj0gYml0c1BlclBpeGVsKSB7CiAgICAgICAgICAgICAgICAgICAgbiA9IGJ1ZmZlciA+Pj4gYml0UG9zICYgYml0TWFzazsKICAgICAgICAgICAgICAgICAgICBiaXRzTGVmdCAtPSBiaXRzUGVyUGl4ZWw7CiAgICAgICAgICAgICAgICAgICAgYml0UG9zICs9IGJpdHNQZXJQaXhlbDsKICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBtaXNzaW5nQml0cyA9IGJpdHNQZXJQaXhlbCAtIGJpdHNMZWZ0OwogICAgICAgICAgICAgICAgICAgIG4gPSBidWZmZXIgPj4+IGJpdFBvcyAmIGJpdE1hc2s7CiAgICAgICAgICAgICAgICAgICAgYnVmZmVyID0gc3JjW2krK107CiAgICAgICAgICAgICAgICAgICAgYml0c0xlZnQgPSAzMiAtIG1pc3NpbmdCaXRzOwogICAgICAgICAgICAgICAgICAgIG4gfD0gKGJ1ZmZlciAmICgxIDw8IG1pc3NpbmdCaXRzKSAtIDEpIDw8IGJpdHNQZXJQaXhlbCAtIG1pc3NpbmdCaXRzOwogICAgICAgICAgICAgICAgICAgIGJpdFBvcyA9IG1pc3NpbmdCaXRzOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGRlc3Rbb10gPSBsdXRBcnJbbl07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHZhciBubWF4ID0gTWF0aC5jZWlsKChtYXhWYWx1ZSAtIG9mZnNldCkgLyBzY2FsZSk7CiAgICAgICAgICAgICAgICBmb3IgKG8gPSAwOyBvIDwgbnVtUGl4ZWxzOyBvKyspIHsKICAgICAgICAgICAgICAgICAgaWYgKGJpdHNMZWZ0ID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgYnVmZmVyID0gc3JjW2krK107CiAgICAgICAgICAgICAgICAgICAgYml0c0xlZnQgPSAzMjsKICAgICAgICAgICAgICAgICAgICBiaXRQb3MgPSAwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChiaXRzTGVmdCA+PSBiaXRzUGVyUGl4ZWwpIHsKICAgICAgICAgICAgICAgICAgICBuID0gYnVmZmVyID4+PiBiaXRQb3MgJiBiaXRNYXNrOwogICAgICAgICAgICAgICAgICAgIGJpdHNMZWZ0IC09IGJpdHNQZXJQaXhlbDsKICAgICAgICAgICAgICAgICAgICBiaXRQb3MgKz0gYml0c1BlclBpeGVsOwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIG1pc3NpbmdCaXRzID0gYml0c1BlclBpeGVsIC0gYml0c0xlZnQ7CiAgICAgICAgICAgICAgICAgICAgbiA9IGJ1ZmZlciA+Pj4gYml0UG9zICYgYml0TWFzazsKICAgICAgICAgICAgICAgICAgICBidWZmZXIgPSBzcmNbaSsrXTsKICAgICAgICAgICAgICAgICAgICBiaXRzTGVmdCA9IDMyIC0gbWlzc2luZ0JpdHM7CiAgICAgICAgICAgICAgICAgICAgbiB8PSAoYnVmZmVyICYgKDEgPDwgbWlzc2luZ0JpdHMpIC0gMSkgPDwgYml0c1BlclBpeGVsIC0gbWlzc2luZ0JpdHM7CiAgICAgICAgICAgICAgICAgICAgYml0UG9zID0gbWlzc2luZ0JpdHM7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgZGVzdFtvXSA9IG4gPCBubWF4ID8gb2Zmc2V0ICsgbiAqIHNjYWxlIDogbWF4VmFsdWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiBkZXN0OwogICAgICAgICAgICB9LAogICAgICAgICAgICB1bnN0dWZmTFVUMjogZnVuY3Rpb24oc3JjLCBiaXRzUGVyUGl4ZWwsIG51bVBpeGVscywgb2Zmc2V0LCBzY2FsZSwgbWF4VmFsdWUpIHsKICAgICAgICAgICAgICB2YXIgYml0TWFzayA9ICgxIDw8IGJpdHNQZXJQaXhlbCkgLSAxOwogICAgICAgICAgICAgIHZhciBpID0gMCwgbyA9IDAsIG1pc3NpbmdCaXRzID0gMCwgYml0c0xlZnQgPSAwLCBuID0gMCwgYml0UG9zID0gMDsKICAgICAgICAgICAgICB2YXIgYnVmZmVyOwogICAgICAgICAgICAgIHZhciBkZXN0ID0gW107CiAgICAgICAgICAgICAgdmFyIG5tYXggPSBNYXRoLmNlaWwoKG1heFZhbHVlIC0gb2Zmc2V0KSAvIHNjYWxlKTsKICAgICAgICAgICAgICBmb3IgKG8gPSAwOyBvIDwgbnVtUGl4ZWxzOyBvKyspIHsKICAgICAgICAgICAgICAgIGlmIChiaXRzTGVmdCA9PT0gMCkgewogICAgICAgICAgICAgICAgICBidWZmZXIgPSBzcmNbaSsrXTsKICAgICAgICAgICAgICAgICAgYml0c0xlZnQgPSAzMjsKICAgICAgICAgICAgICAgICAgYml0UG9zID0gMDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChiaXRzTGVmdCA+PSBiaXRzUGVyUGl4ZWwpIHsKICAgICAgICAgICAgICAgICAgbiA9IGJ1ZmZlciA+Pj4gYml0UG9zICYgYml0TWFzazsKICAgICAgICAgICAgICAgICAgYml0c0xlZnQgLT0gYml0c1BlclBpeGVsOwogICAgICAgICAgICAgICAgICBiaXRQb3MgKz0gYml0c1BlclBpeGVsOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgbWlzc2luZ0JpdHMgPSBiaXRzUGVyUGl4ZWwgLSBiaXRzTGVmdDsKICAgICAgICAgICAgICAgICAgbiA9IGJ1ZmZlciA+Pj4gYml0UG9zICYgYml0TWFzazsKICAgICAgICAgICAgICAgICAgYnVmZmVyID0gc3JjW2krK107CiAgICAgICAgICAgICAgICAgIGJpdHNMZWZ0ID0gMzIgLSBtaXNzaW5nQml0czsKICAgICAgICAgICAgICAgICAgbiB8PSAoYnVmZmVyICYgKDEgPDwgbWlzc2luZ0JpdHMpIC0gMSkgPDwgYml0c1BlclBpeGVsIC0gbWlzc2luZ0JpdHM7CiAgICAgICAgICAgICAgICAgIGJpdFBvcyA9IG1pc3NpbmdCaXRzOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZGVzdFtvXSA9IG4gPCBubWF4ID8gb2Zmc2V0ICsgbiAqIHNjYWxlIDogbWF4VmFsdWU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGRlc3QudW5zaGlmdChvZmZzZXQpOwogICAgICAgICAgICAgIHJldHVybiBkZXN0OwogICAgICAgICAgICB9LAogICAgICAgICAgICBvcmlnaW5hbFVuc3R1ZmY6IGZ1bmN0aW9uKHNyYywgZGVzdCwgYml0c1BlclBpeGVsLCBudW1QaXhlbHMpIHsKICAgICAgICAgICAgICB2YXIgYml0TWFzayA9ICgxIDw8IGJpdHNQZXJQaXhlbCkgLSAxOwogICAgICAgICAgICAgIHZhciBpID0gMCwgbzsKICAgICAgICAgICAgICB2YXIgYml0c0xlZnQgPSAwOwogICAgICAgICAgICAgIHZhciBuLCBidWZmZXIsIG1pc3NpbmdCaXRzOwogICAgICAgICAgICAgIHZhciBudW1JbnZhbGlkVGFpbEJ5dGVzID0gc3JjLmxlbmd0aCAqIDQgLSBNYXRoLmNlaWwoYml0c1BlclBpeGVsICogbnVtUGl4ZWxzIC8gOCk7CiAgICAgICAgICAgICAgc3JjW3NyYy5sZW5ndGggLSAxXSA8PD0gOCAqIG51bUludmFsaWRUYWlsQnl0ZXM7CiAgICAgICAgICAgICAgZm9yIChvID0gMDsgbyA8IG51bVBpeGVsczsgbysrKSB7CiAgICAgICAgICAgICAgICBpZiAoYml0c0xlZnQgPT09IDApIHsKICAgICAgICAgICAgICAgICAgYnVmZmVyID0gc3JjW2krK107CiAgICAgICAgICAgICAgICAgIGJpdHNMZWZ0ID0gMzI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoYml0c0xlZnQgPj0gYml0c1BlclBpeGVsKSB7CiAgICAgICAgICAgICAgICAgIG4gPSBidWZmZXIgPj4+IGJpdHNMZWZ0IC0gYml0c1BlclBpeGVsICYgYml0TWFzazsKICAgICAgICAgICAgICAgICAgYml0c0xlZnQgLT0gYml0c1BlclBpeGVsOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgbWlzc2luZ0JpdHMgPSBiaXRzUGVyUGl4ZWwgLSBiaXRzTGVmdDsKICAgICAgICAgICAgICAgICAgbiA9IChidWZmZXIgJiBiaXRNYXNrKSA8PCBtaXNzaW5nQml0cyAmIGJpdE1hc2s7CiAgICAgICAgICAgICAgICAgIGJ1ZmZlciA9IHNyY1tpKytdOwogICAgICAgICAgICAgICAgICBiaXRzTGVmdCA9IDMyIC0gbWlzc2luZ0JpdHM7CiAgICAgICAgICAgICAgICAgIG4gKz0gYnVmZmVyID4+PiBiaXRzTGVmdDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGRlc3Rbb10gPSBuOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gZGVzdDsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgb3JpZ2luYWxVbnN0dWZmMjogZnVuY3Rpb24oc3JjLCBkZXN0LCBiaXRzUGVyUGl4ZWwsIG51bVBpeGVscykgewogICAgICAgICAgICAgIHZhciBiaXRNYXNrID0gKDEgPDwgYml0c1BlclBpeGVsKSAtIDE7CiAgICAgICAgICAgICAgdmFyIGkgPSAwLCBvOwogICAgICAgICAgICAgIHZhciBiaXRzTGVmdCA9IDAsIGJpdFBvcyA9IDA7CiAgICAgICAgICAgICAgdmFyIG4sIGJ1ZmZlciwgbWlzc2luZ0JpdHM7CiAgICAgICAgICAgICAgZm9yIChvID0gMDsgbyA8IG51bVBpeGVsczsgbysrKSB7CiAgICAgICAgICAgICAgICBpZiAoYml0c0xlZnQgPT09IDApIHsKICAgICAgICAgICAgICAgICAgYnVmZmVyID0gc3JjW2krK107CiAgICAgICAgICAgICAgICAgIGJpdHNMZWZ0ID0gMzI7CiAgICAgICAgICAgICAgICAgIGJpdFBvcyA9IDA7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoYml0c0xlZnQgPj0gYml0c1BlclBpeGVsKSB7CiAgICAgICAgICAgICAgICAgIG4gPSBidWZmZXIgPj4+IGJpdFBvcyAmIGJpdE1hc2s7CiAgICAgICAgICAgICAgICAgIGJpdHNMZWZ0IC09IGJpdHNQZXJQaXhlbDsKICAgICAgICAgICAgICAgICAgYml0UG9zICs9IGJpdHNQZXJQaXhlbDsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIG1pc3NpbmdCaXRzID0gYml0c1BlclBpeGVsIC0gYml0c0xlZnQ7CiAgICAgICAgICAgICAgICAgIG4gPSBidWZmZXIgPj4+IGJpdFBvcyAmIGJpdE1hc2s7CiAgICAgICAgICAgICAgICAgIGJ1ZmZlciA9IHNyY1tpKytdOwogICAgICAgICAgICAgICAgICBiaXRzTGVmdCA9IDMyIC0gbWlzc2luZ0JpdHM7CiAgICAgICAgICAgICAgICAgIG4gfD0gKGJ1ZmZlciAmICgxIDw8IG1pc3NpbmdCaXRzKSAtIDEpIDw8IGJpdHNQZXJQaXhlbCAtIG1pc3NpbmdCaXRzOwogICAgICAgICAgICAgICAgICBiaXRQb3MgPSBtaXNzaW5nQml0czsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGRlc3Rbb10gPSBuOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gZGVzdDsKICAgICAgICAgICAgfQogICAgICAgICAgfTsKICAgICAgICAgIHZhciBMZXJjMkhlbHBlcnMgPSB7CiAgICAgICAgICAgIEhVRkZNQU5fTFVUX0JJVFNfTUFYOiAxMiwKICAgICAgICAgICAgLy91c2UgMl4xMiBsdXQsIHRyZWF0IGl0IGxpa2UgY29uc3RhbnQKICAgICAgICAgICAgY29tcHV0ZUNoZWNrc3VtRmxldGNoZXIzMjogZnVuY3Rpb24oaW5wdXQpIHsKICAgICAgICAgICAgICB2YXIgc3VtMSA9IDY1NTM1LCBzdW0yID0gNjU1MzU7CiAgICAgICAgICAgICAgdmFyIGxlbiA9IGlucHV0Lmxlbmd0aDsKICAgICAgICAgICAgICB2YXIgd29yZHMgPSBNYXRoLmZsb29yKGxlbiAvIDIpOwogICAgICAgICAgICAgIHZhciBpID0gMDsKICAgICAgICAgICAgICB3aGlsZSAod29yZHMpIHsKICAgICAgICAgICAgICAgIHZhciB0bGVuID0gd29yZHMgPj0gMzU5ID8gMzU5IDogd29yZHM7CiAgICAgICAgICAgICAgICB3b3JkcyAtPSB0bGVuOwogICAgICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgICAgICBzdW0xICs9IGlucHV0W2krK10gPDwgODsKICAgICAgICAgICAgICAgICAgc3VtMiArPSBzdW0xICs9IGlucHV0W2krK107CiAgICAgICAgICAgICAgICB9IHdoaWxlICgtLXRsZW4pOwogICAgICAgICAgICAgICAgc3VtMSA9IChzdW0xICYgNjU1MzUpICsgKHN1bTEgPj4+IDE2KTsKICAgICAgICAgICAgICAgIHN1bTIgPSAoc3VtMiAmIDY1NTM1KSArIChzdW0yID4+PiAxNik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmIChsZW4gJiAxKSB7CiAgICAgICAgICAgICAgICBzdW0yICs9IHN1bTEgKz0gaW5wdXRbaV0gPDwgODsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgc3VtMSA9IChzdW0xICYgNjU1MzUpICsgKHN1bTEgPj4+IDE2KTsKICAgICAgICAgICAgICBzdW0yID0gKHN1bTIgJiA2NTUzNSkgKyAoc3VtMiA+Pj4gMTYpOwogICAgICAgICAgICAgIHJldHVybiAoc3VtMiA8PCAxNiB8IHN1bTEpID4+PiAwOwogICAgICAgICAgICB9LAogICAgICAgICAgICByZWFkSGVhZGVySW5mbzogZnVuY3Rpb24oaW5wdXQsIGRhdGEpIHsKICAgICAgICAgICAgICB2YXIgcHRyID0gZGF0YS5wdHI7CiAgICAgICAgICAgICAgdmFyIGZpbGVJZFZpZXcgPSBuZXcgVWludDhBcnJheShpbnB1dCwgcHRyLCA2KTsKICAgICAgICAgICAgICB2YXIgaGVhZGVySW5mbyA9IHt9OwogICAgICAgICAgICAgIGhlYWRlckluZm8uZmlsZUlkZW50aWZpZXJTdHJpbmcgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGZpbGVJZFZpZXcpOwogICAgICAgICAgICAgIGlmIChoZWFkZXJJbmZvLmZpbGVJZGVudGlmaWVyU3RyaW5nLmxhc3RJbmRleE9mKCJMZXJjMiIsIDApICE9PSAwKSB7CiAgICAgICAgICAgICAgICB0aHJvdyAiVW5leHBlY3RlZCBmaWxlIGlkZW50aWZpZXIgc3RyaW5nIChleHBlY3QgTGVyYzIgKTogIiArIGhlYWRlckluZm8uZmlsZUlkZW50aWZpZXJTdHJpbmc7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHB0ciArPSA2OwogICAgICAgICAgICAgIHZhciB2aWV3ID0gbmV3IERhdGFWaWV3KGlucHV0LCBwdHIsIDgpOwogICAgICAgICAgICAgIHZhciBmaWxlVmVyc2lvbiA9IHZpZXcuZ2V0SW50MzIoMCwgdHJ1ZSk7CiAgICAgICAgICAgICAgaGVhZGVySW5mby5maWxlVmVyc2lvbiA9IGZpbGVWZXJzaW9uOwogICAgICAgICAgICAgIHB0ciArPSA0OwogICAgICAgICAgICAgIGlmIChmaWxlVmVyc2lvbiA+PSAzKSB7CiAgICAgICAgICAgICAgICBoZWFkZXJJbmZvLmNoZWNrc3VtID0gdmlldy5nZXRVaW50MzIoNCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICBwdHIgKz0gNDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdmlldyA9IG5ldyBEYXRhVmlldyhpbnB1dCwgcHRyLCAxMik7CiAgICAgICAgICAgICAgaGVhZGVySW5mby5oZWlnaHQgPSB2aWV3LmdldFVpbnQzMigwLCB0cnVlKTsKICAgICAgICAgICAgICBoZWFkZXJJbmZvLndpZHRoID0gdmlldy5nZXRVaW50MzIoNCwgdHJ1ZSk7CiAgICAgICAgICAgICAgcHRyICs9IDg7CiAgICAgICAgICAgICAgaWYgKGZpbGVWZXJzaW9uID49IDQpIHsKICAgICAgICAgICAgICAgIGhlYWRlckluZm8ubnVtRGltcyA9IHZpZXcuZ2V0VWludDMyKDgsIHRydWUpOwogICAgICAgICAgICAgICAgcHRyICs9IDQ7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGhlYWRlckluZm8ubnVtRGltcyA9IDE7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHZpZXcgPSBuZXcgRGF0YVZpZXcoaW5wdXQsIHB0ciwgNDApOwogICAgICAgICAgICAgIGhlYWRlckluZm8ubnVtVmFsaWRQaXhlbCA9IHZpZXcuZ2V0VWludDMyKDAsIHRydWUpOwogICAgICAgICAgICAgIGhlYWRlckluZm8ubWljcm9CbG9ja1NpemUgPSB2aWV3LmdldEludDMyKDQsIHRydWUpOwogICAgICAgICAgICAgIGhlYWRlckluZm8uYmxvYlNpemUgPSB2aWV3LmdldEludDMyKDgsIHRydWUpOwogICAgICAgICAgICAgIGhlYWRlckluZm8uaW1hZ2VUeXBlID0gdmlldy5nZXRJbnQzMigxMiwgdHJ1ZSk7CiAgICAgICAgICAgICAgaGVhZGVySW5mby5tYXhaRXJyb3IgPSB2aWV3LmdldEZsb2F0NjQoMTYsIHRydWUpOwogICAgICAgICAgICAgIGhlYWRlckluZm8uek1pbiA9IHZpZXcuZ2V0RmxvYXQ2NCgyNCwgdHJ1ZSk7CiAgICAgICAgICAgICAgaGVhZGVySW5mby56TWF4ID0gdmlldy5nZXRGbG9hdDY0KDMyLCB0cnVlKTsKICAgICAgICAgICAgICBwdHIgKz0gNDA7CiAgICAgICAgICAgICAgZGF0YS5oZWFkZXJJbmZvID0gaGVhZGVySW5mbzsKICAgICAgICAgICAgICBkYXRhLnB0ciA9IHB0cjsKICAgICAgICAgICAgICB2YXIgY2hlY2tzdW0sIGtleUxlbmd0aDsKICAgICAgICAgICAgICBpZiAoZmlsZVZlcnNpb24gPj0gMykgewogICAgICAgICAgICAgICAga2V5TGVuZ3RoID0gZmlsZVZlcnNpb24gPj0gNCA/IDUyIDogNDg7CiAgICAgICAgICAgICAgICBjaGVja3N1bSA9IHRoaXMuY29tcHV0ZUNoZWNrc3VtRmxldGNoZXIzMihuZXcgVWludDhBcnJheShpbnB1dCwgcHRyIC0ga2V5TGVuZ3RoLCBoZWFkZXJJbmZvLmJsb2JTaXplIC0gMTQpKTsKICAgICAgICAgICAgICAgIGlmIChjaGVja3N1bSAhPT0gaGVhZGVySW5mby5jaGVja3N1bSkgewogICAgICAgICAgICAgICAgICB0aHJvdyAiQ2hlY2tzdW0gZmFpbGVkLiI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9LAogICAgICAgICAgICBjaGVja01pbk1heFJhbmdlczogZnVuY3Rpb24oaW5wdXQsIGRhdGEpIHsKICAgICAgICAgICAgICB2YXIgaGVhZGVySW5mbyA9IGRhdGEuaGVhZGVySW5mbzsKICAgICAgICAgICAgICB2YXIgT3V0UGl4ZWxUeXBlQXJyYXkgPSB0aGlzLmdldERhdGFUeXBlQXJyYXkoaGVhZGVySW5mby5pbWFnZVR5cGUpOwogICAgICAgICAgICAgIHZhciByYW5nZUJ5dGVzID0gaGVhZGVySW5mby5udW1EaW1zICogdGhpcy5nZXREYXRhVHlwZVNpemUoaGVhZGVySW5mby5pbWFnZVR5cGUpOwogICAgICAgICAgICAgIHZhciBtaW5WYWx1ZXMgPSB0aGlzLnJlYWRTdWJBcnJheShpbnB1dCwgZGF0YS5wdHIsIE91dFBpeGVsVHlwZUFycmF5LCByYW5nZUJ5dGVzKTsKICAgICAgICAgICAgICB2YXIgbWF4VmFsdWVzID0gdGhpcy5yZWFkU3ViQXJyYXkoaW5wdXQsIGRhdGEucHRyICsgcmFuZ2VCeXRlcywgT3V0UGl4ZWxUeXBlQXJyYXksIHJhbmdlQnl0ZXMpOwogICAgICAgICAgICAgIGRhdGEucHRyICs9IDIgKiByYW5nZUJ5dGVzOwogICAgICAgICAgICAgIHZhciBpLCBlcXVhbCA9IHRydWU7CiAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGhlYWRlckluZm8ubnVtRGltczsgaSsrKSB7CiAgICAgICAgICAgICAgICBpZiAobWluVmFsdWVzW2ldICE9PSBtYXhWYWx1ZXNbaV0pIHsKICAgICAgICAgICAgICAgICAgZXF1YWwgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGhlYWRlckluZm8ubWluVmFsdWVzID0gbWluVmFsdWVzOwogICAgICAgICAgICAgIGhlYWRlckluZm8ubWF4VmFsdWVzID0gbWF4VmFsdWVzOwogICAgICAgICAgICAgIHJldHVybiBlcXVhbDsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcmVhZFN1YkFycmF5OiBmdW5jdGlvbihpbnB1dCwgcHRyLCBPdXRQaXhlbFR5cGVBcnJheSwgbnVtQnl0ZXMpIHsKICAgICAgICAgICAgICB2YXIgcmF3RGF0YTsKICAgICAgICAgICAgICBpZiAoT3V0UGl4ZWxUeXBlQXJyYXkgPT09IFVpbnQ4QXJyYXkpIHsKICAgICAgICAgICAgICAgIHJhd0RhdGEgPSBuZXcgVWludDhBcnJheShpbnB1dCwgcHRyLCBudW1CeXRlcyk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHZhciBhcnJheUJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcihudW1CeXRlcyk7CiAgICAgICAgICAgICAgICB2YXIgc3RvcmU4ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWYpOwogICAgICAgICAgICAgICAgc3RvcmU4LnNldChuZXcgVWludDhBcnJheShpbnB1dCwgcHRyLCBudW1CeXRlcykpOwogICAgICAgICAgICAgICAgcmF3RGF0YSA9IG5ldyBPdXRQaXhlbFR5cGVBcnJheShhcnJheUJ1Zik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiByYXdEYXRhOwogICAgICAgICAgICB9LAogICAgICAgICAgICByZWFkTWFzazogZnVuY3Rpb24oaW5wdXQsIGRhdGEpIHsKICAgICAgICAgICAgICB2YXIgcHRyID0gZGF0YS5wdHI7CiAgICAgICAgICAgICAgdmFyIGhlYWRlckluZm8gPSBkYXRhLmhlYWRlckluZm87CiAgICAgICAgICAgICAgdmFyIG51bVBpeGVscyA9IGhlYWRlckluZm8ud2lkdGggKiBoZWFkZXJJbmZvLmhlaWdodDsKICAgICAgICAgICAgICB2YXIgbnVtVmFsaWRQaXhlbCA9IGhlYWRlckluZm8ubnVtVmFsaWRQaXhlbDsKICAgICAgICAgICAgICB2YXIgdmlldyA9IG5ldyBEYXRhVmlldyhpbnB1dCwgcHRyLCA0KTsKICAgICAgICAgICAgICB2YXIgbWFzayA9IHt9OwogICAgICAgICAgICAgIG1hc2subnVtQnl0ZXMgPSB2aWV3LmdldFVpbnQzMigwLCB0cnVlKTsKICAgICAgICAgICAgICBwdHIgKz0gNDsKICAgICAgICAgICAgICBpZiAoKDAgPT09IG51bVZhbGlkUGl4ZWwgfHwgbnVtUGl4ZWxzID09PSBudW1WYWxpZFBpeGVsKSAmJiAwICE9PSBtYXNrLm51bUJ5dGVzKSB7CiAgICAgICAgICAgICAgICB0aHJvdyAiaW52YWxpZCBtYXNrIjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdmFyIGJpdHNldCwgcmVzdWx0TWFzazsKICAgICAgICAgICAgICBpZiAobnVtVmFsaWRQaXhlbCA9PT0gMCkgewogICAgICAgICAgICAgICAgYml0c2V0ID0gbmV3IFVpbnQ4QXJyYXkoTWF0aC5jZWlsKG51bVBpeGVscyAvIDgpKTsKICAgICAgICAgICAgICAgIG1hc2suYml0c2V0ID0gYml0c2V0OwogICAgICAgICAgICAgICAgcmVzdWx0TWFzayA9IG5ldyBVaW50OEFycmF5KG51bVBpeGVscyk7CiAgICAgICAgICAgICAgICBkYXRhLnBpeGVscy5yZXN1bHRNYXNrID0gcmVzdWx0TWFzazsKICAgICAgICAgICAgICAgIHB0ciArPSBtYXNrLm51bUJ5dGVzOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAobWFzay5udW1CeXRlcyA+IDApIHsKICAgICAgICAgICAgICAgIGJpdHNldCA9IG5ldyBVaW50OEFycmF5KE1hdGguY2VpbChudW1QaXhlbHMgLyA4KSk7CiAgICAgICAgICAgICAgICB2aWV3ID0gbmV3IERhdGFWaWV3KGlucHV0LCBwdHIsIG1hc2subnVtQnl0ZXMpOwogICAgICAgICAgICAgICAgdmFyIGNudCA9IHZpZXcuZ2V0SW50MTYoMCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICB2YXIgaXAgPSAyLCBvcCA9IDAsIHZhbCA9IDA7CiAgICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICAgIGlmIChjbnQgPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGNudC0tKSB7CiAgICAgICAgICAgICAgICAgICAgICBiaXRzZXRbb3ArK10gPSB2aWV3LmdldFVpbnQ4KGlwKyspOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB2YWwgPSB2aWV3LmdldFVpbnQ4KGlwKyspOwogICAgICAgICAgICAgICAgICAgIGNudCA9IC1jbnQ7CiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGNudC0tKSB7CiAgICAgICAgICAgICAgICAgICAgICBiaXRzZXRbb3ArK10gPSB2YWw7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGNudCA9IHZpZXcuZ2V0SW50MTYoaXAsIHRydWUpOwogICAgICAgICAgICAgICAgICBpcCArPSAyOwogICAgICAgICAgICAgICAgfSB3aGlsZSAoaXAgPCBtYXNrLm51bUJ5dGVzKTsKICAgICAgICAgICAgICAgIGlmIChjbnQgIT09IC0zMjc2OCB8fCBvcCA8IGJpdHNldC5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgdGhyb3cgIlVuZXhwZWN0ZWQgZW5kIG9mIG1hc2sgUkxFIGVuY29kaW5nIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJlc3VsdE1hc2sgPSBuZXcgVWludDhBcnJheShudW1QaXhlbHMpOwogICAgICAgICAgICAgICAgdmFyIG1iID0gMCwgayA9IDA7CiAgICAgICAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwgbnVtUGl4ZWxzOyBrKyspIHsKICAgICAgICAgICAgICAgICAgaWYgKGsgJiA3KSB7CiAgICAgICAgICAgICAgICAgICAgbWIgPSBiaXRzZXRbayA+PiAzXTsKICAgICAgICAgICAgICAgICAgICBtYiA8PD0gayAmIDc7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgbWIgPSBiaXRzZXRbayA+PiAzXTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAobWIgJiAxMjgpIHsKICAgICAgICAgICAgICAgICAgICByZXN1bHRNYXNrW2tdID0gMTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZGF0YS5waXhlbHMucmVzdWx0TWFzayA9IHJlc3VsdE1hc2s7CiAgICAgICAgICAgICAgICBtYXNrLmJpdHNldCA9IGJpdHNldDsKICAgICAgICAgICAgICAgIHB0ciArPSBtYXNrLm51bUJ5dGVzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBkYXRhLnB0ciA9IHB0cjsKICAgICAgICAgICAgICBkYXRhLm1hc2sgPSBtYXNrOwogICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9LAogICAgICAgICAgICByZWFkRGF0YU9uZVN3ZWVwOiBmdW5jdGlvbihpbnB1dCwgZGF0YSwgT3V0UGl4ZWxUeXBlQXJyYXkpIHsKICAgICAgICAgICAgICB2YXIgcHRyID0gZGF0YS5wdHI7CiAgICAgICAgICAgICAgdmFyIGhlYWRlckluZm8gPSBkYXRhLmhlYWRlckluZm87CiAgICAgICAgICAgICAgdmFyIG51bURpbXMgPSBoZWFkZXJJbmZvLm51bURpbXM7CiAgICAgICAgICAgICAgdmFyIG51bVBpeGVscyA9IGhlYWRlckluZm8ud2lkdGggKiBoZWFkZXJJbmZvLmhlaWdodDsKICAgICAgICAgICAgICB2YXIgaW1hZ2VUeXBlID0gaGVhZGVySW5mby5pbWFnZVR5cGU7CiAgICAgICAgICAgICAgdmFyIG51bUJ5dGVzID0gaGVhZGVySW5mby5udW1WYWxpZFBpeGVsICogTGVyYzJIZWxwZXJzLmdldERhdGFUeXBlU2l6ZShpbWFnZVR5cGUpICogbnVtRGltczsKICAgICAgICAgICAgICB2YXIgcmF3RGF0YTsKICAgICAgICAgICAgICB2YXIgbWFzayA9IGRhdGEucGl4ZWxzLnJlc3VsdE1hc2s7CiAgICAgICAgICAgICAgaWYgKE91dFBpeGVsVHlwZUFycmF5ID09PSBVaW50OEFycmF5KSB7CiAgICAgICAgICAgICAgICByYXdEYXRhID0gbmV3IFVpbnQ4QXJyYXkoaW5wdXQsIHB0ciwgbnVtQnl0ZXMpOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB2YXIgYXJyYXlCdWYgPSBuZXcgQXJyYXlCdWZmZXIobnVtQnl0ZXMpOwogICAgICAgICAgICAgICAgdmFyIHN0b3JlOCA9IG5ldyBVaW50OEFycmF5KGFycmF5QnVmKTsKICAgICAgICAgICAgICAgIHN0b3JlOC5zZXQobmV3IFVpbnQ4QXJyYXkoaW5wdXQsIHB0ciwgbnVtQnl0ZXMpKTsKICAgICAgICAgICAgICAgIHJhd0RhdGEgPSBuZXcgT3V0UGl4ZWxUeXBlQXJyYXkoYXJyYXlCdWYpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAocmF3RGF0YS5sZW5ndGggPT09IG51bVBpeGVscyAqIG51bURpbXMpIHsKICAgICAgICAgICAgICAgIGRhdGEucGl4ZWxzLnJlc3VsdFBpeGVscyA9IHJhd0RhdGE7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGRhdGEucGl4ZWxzLnJlc3VsdFBpeGVscyA9IG5ldyBPdXRQaXhlbFR5cGVBcnJheShudW1QaXhlbHMgKiBudW1EaW1zKTsKICAgICAgICAgICAgICAgIHZhciB6ID0gMCwgayA9IDAsIGkgPSAwLCBuU3RhcnQgPSAwOwogICAgICAgICAgICAgICAgaWYgKG51bURpbXMgPiAxKSB7CiAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1EaW1zOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICBuU3RhcnQgPSBpICogbnVtUGl4ZWxzOwogICAgICAgICAgICAgICAgICAgIGZvciAoayA9IDA7IGsgPCBudW1QaXhlbHM7IGsrKykgewogICAgICAgICAgICAgICAgICAgICAgaWYgKG1hc2tba10pIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5waXhlbHMucmVzdWx0UGl4ZWxzW25TdGFydCArIGtdID0gcmF3RGF0YVt6KytdOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgZm9yIChrID0gMDsgayA8IG51bVBpeGVsczsgaysrKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKG1hc2tba10pIHsKICAgICAgICAgICAgICAgICAgICAgIGRhdGEucGl4ZWxzLnJlc3VsdFBpeGVsc1trXSA9IHJhd0RhdGFbeisrXTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcHRyICs9IG51bUJ5dGVzOwogICAgICAgICAgICAgIGRhdGEucHRyID0gcHRyOwogICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9LAogICAgICAgICAgICByZWFkSHVmZm1hblRyZWU6IGZ1bmN0aW9uKGlucHV0LCBkYXRhKSB7CiAgICAgICAgICAgICAgdmFyIEJJVFNfTUFYID0gdGhpcy5IVUZGTUFOX0xVVF9CSVRTX01BWDsKICAgICAgICAgICAgICB2YXIgdmlldyA9IG5ldyBEYXRhVmlldyhpbnB1dCwgZGF0YS5wdHIsIDE2KTsKICAgICAgICAgICAgICBkYXRhLnB0ciArPSAxNjsKICAgICAgICAgICAgICB2YXIgdmVyc2lvbiA9IHZpZXcuZ2V0SW50MzIoMCwgdHJ1ZSk7CiAgICAgICAgICAgICAgaWYgKHZlcnNpb24gPCAyKSB7CiAgICAgICAgICAgICAgICB0aHJvdyAidW5zdXBwb3J0ZWQgSHVmZm1hbiB2ZXJzaW9uIjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdmFyIHNpemUgPSB2aWV3LmdldEludDMyKDQsIHRydWUpOwogICAgICAgICAgICAgIHZhciBpMCA9IHZpZXcuZ2V0SW50MzIoOCwgdHJ1ZSk7CiAgICAgICAgICAgICAgdmFyIGkxID0gdmlldy5nZXRJbnQzMigxMiwgdHJ1ZSk7CiAgICAgICAgICAgICAgaWYgKGkwID49IGkxKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHZhciBibG9ja0RhdGFCdWZmZXIgPSBuZXcgVWludDMyQXJyYXkoaTEgLSBpMCk7CiAgICAgICAgICAgICAgTGVyYzJIZWxwZXJzLmRlY29kZUJpdHMoaW5wdXQsIGRhdGEsIGJsb2NrRGF0YUJ1ZmZlcik7CiAgICAgICAgICAgICAgdmFyIGNvZGVUYWJsZSA9IFtdOwogICAgICAgICAgICAgIHZhciBpLCBqLCBrLCBsZW47CiAgICAgICAgICAgICAgZm9yIChpID0gaTA7IGkgPCBpMTsgaSsrKSB7CiAgICAgICAgICAgICAgICBqID0gaSAtIChpIDwgc2l6ZSA/IDAgOiBzaXplKTsKICAgICAgICAgICAgICAgIGNvZGVUYWJsZVtqXSA9IHsgZmlyc3Q6IGJsb2NrRGF0YUJ1ZmZlcltpIC0gaTBdLCBzZWNvbmQ6IG51bGwgfTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdmFyIGRhdGFCeXRlcyA9IGlucHV0LmJ5dGVMZW5ndGggLSBkYXRhLnB0cjsKICAgICAgICAgICAgICB2YXIgZGF0YVdvcmRzID0gTWF0aC5jZWlsKGRhdGFCeXRlcyAvIDQpOwogICAgICAgICAgICAgIHZhciBhcnJheUJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcihkYXRhV29yZHMgKiA0KTsKICAgICAgICAgICAgICB2YXIgc3RvcmU4ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWYpOwogICAgICAgICAgICAgIHN0b3JlOC5zZXQobmV3IFVpbnQ4QXJyYXkoaW5wdXQsIGRhdGEucHRyLCBkYXRhQnl0ZXMpKTsKICAgICAgICAgICAgICB2YXIgc3R1ZmZlZERhdGEgPSBuZXcgVWludDMyQXJyYXkoYXJyYXlCdWYpOwogICAgICAgICAgICAgIHZhciBiaXRQb3MgPSAwLCB3b3JkLCBzcmNQdHIgPSAwOwogICAgICAgICAgICAgIHdvcmQgPSBzdHVmZmVkRGF0YVswXTsKICAgICAgICAgICAgICBmb3IgKGkgPSBpMDsgaSA8IGkxOyBpKyspIHsKICAgICAgICAgICAgICAgIGogPSBpIC0gKGkgPCBzaXplID8gMCA6IHNpemUpOwogICAgICAgICAgICAgICAgbGVuID0gY29kZVRhYmxlW2pdLmZpcnN0OwogICAgICAgICAgICAgICAgaWYgKGxlbiA+IDApIHsKICAgICAgICAgICAgICAgICAgY29kZVRhYmxlW2pdLnNlY29uZCA9IHdvcmQgPDwgYml0UG9zID4+PiAzMiAtIGxlbjsKICAgICAgICAgICAgICAgICAgaWYgKDMyIC0gYml0UG9zID49IGxlbikgewogICAgICAgICAgICAgICAgICAgIGJpdFBvcyArPSBsZW47CiAgICAgICAgICAgICAgICAgICAgaWYgKGJpdFBvcyA9PT0gMzIpIHsKICAgICAgICAgICAgICAgICAgICAgIGJpdFBvcyA9IDA7CiAgICAgICAgICAgICAgICAgICAgICBzcmNQdHIrKzsKICAgICAgICAgICAgICAgICAgICAgIHdvcmQgPSBzdHVmZmVkRGF0YVtzcmNQdHJdOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBiaXRQb3MgKz0gbGVuIC0gMzI7CiAgICAgICAgICAgICAgICAgICAgc3JjUHRyKys7CiAgICAgICAgICAgICAgICAgICAgd29yZCA9IHN0dWZmZWREYXRhW3NyY1B0cl07CiAgICAgICAgICAgICAgICAgICAgY29kZVRhYmxlW2pdLnNlY29uZCB8PSB3b3JkID4+PiAzMiAtIGJpdFBvczsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB2YXIgbnVtQml0c0xVVCA9IDAsIG51bUJpdHNMVVRRaWNrID0gMDsKICAgICAgICAgICAgICB2YXIgdHJlZSA9IG5ldyBUcmVlTm9kZSgpOwogICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb2RlVGFibGUubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgIGlmIChjb2RlVGFibGVbaV0gIT09IHZvaWQgMCkgewogICAgICAgICAgICAgICAgICBudW1CaXRzTFVUID0gTWF0aC5tYXgobnVtQml0c0xVVCwgY29kZVRhYmxlW2ldLmZpcnN0KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKG51bUJpdHNMVVQgPj0gQklUU19NQVgpIHsKICAgICAgICAgICAgICAgIG51bUJpdHNMVVRRaWNrID0gQklUU19NQVg7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIG51bUJpdHNMVVRRaWNrID0gbnVtQml0c0xVVDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKG51bUJpdHNMVVQgPj0gMzApIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJXQVJuaW5nLCBsYXJnZSBOVU0gTFVUIEJJVFMgSVMgIiArIG51bUJpdHNMVVQpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB2YXIgZGVjb2RlTHV0ID0gW10sIGVudHJ5LCBjb2RlLCBudW1FbnRyaWVzLCBqaiwgY3VycmVudEJpdCwgbm9kZTsKICAgICAgICAgICAgICBmb3IgKGkgPSBpMDsgaSA8IGkxOyBpKyspIHsKICAgICAgICAgICAgICAgIGogPSBpIC0gKGkgPCBzaXplID8gMCA6IHNpemUpOwogICAgICAgICAgICAgICAgbGVuID0gY29kZVRhYmxlW2pdLmZpcnN0OwogICAgICAgICAgICAgICAgaWYgKGxlbiA+IDApIHsKICAgICAgICAgICAgICAgICAgZW50cnkgPSBbbGVuLCBqXTsKICAgICAgICAgICAgICAgICAgaWYgKGxlbiA8PSBudW1CaXRzTFVUUWljaykgewogICAgICAgICAgICAgICAgICAgIGNvZGUgPSBjb2RlVGFibGVbal0uc2Vjb25kIDw8IG51bUJpdHNMVVRRaWNrIC0gbGVuOwogICAgICAgICAgICAgICAgICAgIG51bUVudHJpZXMgPSAxIDw8IG51bUJpdHNMVVRRaWNrIC0gbGVuOwogICAgICAgICAgICAgICAgICAgIGZvciAoayA9IDA7IGsgPCBudW1FbnRyaWVzOyBrKyspIHsKICAgICAgICAgICAgICAgICAgICAgIGRlY29kZUx1dFtjb2RlIHwga10gPSBlbnRyeTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgY29kZSA9IGNvZGVUYWJsZVtqXS5zZWNvbmQ7CiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IHRyZWU7CiAgICAgICAgICAgICAgICAgICAgZm9yIChqaiA9IGxlbiAtIDE7IGpqID49IDA7IGpqLS0pIHsKICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRCaXQgPSBjb2RlID4+PiBqaiAmIDE7CiAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudEJpdCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW5vZGUucmlnaHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnJpZ2h0ID0gbmV3IFRyZWVOb2RlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUucmlnaHQ7CiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW5vZGUubGVmdCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUubGVmdCA9IG5ldyBUcmVlTm9kZSgpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLmxlZnQ7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBpZiAoamogPT09IDAgJiYgIW5vZGUudmFsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUudmFsID0gZW50cnlbMV07CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBkZWNvZGVMdXQsCiAgICAgICAgICAgICAgICBudW1CaXRzTFVUUWljaywKICAgICAgICAgICAgICAgIG51bUJpdHNMVVQsCiAgICAgICAgICAgICAgICB0cmVlLAogICAgICAgICAgICAgICAgc3R1ZmZlZERhdGEsCiAgICAgICAgICAgICAgICBzcmNQdHIsCiAgICAgICAgICAgICAgICBiaXRQb3MKICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9LAogICAgICAgICAgICByZWFkSHVmZm1hbjogZnVuY3Rpb24oaW5wdXQsIGRhdGEsIE91dFBpeGVsVHlwZUFycmF5KSB7CiAgICAgICAgICAgICAgdmFyIGhlYWRlckluZm8gPSBkYXRhLmhlYWRlckluZm87CiAgICAgICAgICAgICAgdmFyIG51bURpbXMgPSBoZWFkZXJJbmZvLm51bURpbXM7CiAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IGRhdGEuaGVhZGVySW5mby5oZWlnaHQ7CiAgICAgICAgICAgICAgdmFyIHdpZHRoID0gZGF0YS5oZWFkZXJJbmZvLndpZHRoOwogICAgICAgICAgICAgIHZhciBudW1QaXhlbHMgPSB3aWR0aCAqIGhlaWdodDsKICAgICAgICAgICAgICB2YXIgaHVmZm1hbkluZm8gPSB0aGlzLnJlYWRIdWZmbWFuVHJlZShpbnB1dCwgZGF0YSk7CiAgICAgICAgICAgICAgdmFyIGRlY29kZUx1dCA9IGh1ZmZtYW5JbmZvLmRlY29kZUx1dDsKICAgICAgICAgICAgICB2YXIgdHJlZSA9IGh1ZmZtYW5JbmZvLnRyZWU7CiAgICAgICAgICAgICAgdmFyIHN0dWZmZWREYXRhID0gaHVmZm1hbkluZm8uc3R1ZmZlZERhdGE7CiAgICAgICAgICAgICAgdmFyIHNyY1B0ciA9IGh1ZmZtYW5JbmZvLnNyY1B0cjsKICAgICAgICAgICAgICB2YXIgYml0UG9zID0gaHVmZm1hbkluZm8uYml0UG9zOwogICAgICAgICAgICAgIHZhciBudW1CaXRzTFVUUWljayA9IGh1ZmZtYW5JbmZvLm51bUJpdHNMVVRRaWNrOwogICAgICAgICAgICAgIHZhciBudW1CaXRzTFVUID0gaHVmZm1hbkluZm8ubnVtQml0c0xVVDsKICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gZGF0YS5oZWFkZXJJbmZvLmltYWdlVHlwZSA9PT0gMCA/IDEyOCA6IDA7CiAgICAgICAgICAgICAgdmFyIG5vZGUsIHZhbCwgZGVsdGEsIG1hc2sgPSBkYXRhLnBpeGVscy5yZXN1bHRNYXNrLCB2YWxUbXAsIHZhbFRtcFF1aWNrLCBjdXJyZW50Qml0OwogICAgICAgICAgICAgIHZhciBpLCBqLCBrLCBpaTsKICAgICAgICAgICAgICB2YXIgcHJldlZhbCA9IDA7CiAgICAgICAgICAgICAgaWYgKGJpdFBvcyA+IDApIHsKICAgICAgICAgICAgICAgIHNyY1B0cisrOwogICAgICAgICAgICAgICAgYml0UG9zID0gMDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdmFyIHdvcmQgPSBzdHVmZmVkRGF0YVtzcmNQdHJdOwogICAgICAgICAgICAgIHZhciBkZWx0YUVuY29kZSA9IGRhdGEuZW5jb2RlTW9kZSA9PT0gMTsKICAgICAgICAgICAgICB2YXIgcmVzdWx0UGl4ZWxzQWxsRGltID0gbmV3IE91dFBpeGVsVHlwZUFycmF5KG51bVBpeGVscyAqIG51bURpbXMpOwogICAgICAgICAgICAgIHZhciByZXN1bHRQaXhlbHMgPSByZXN1bHRQaXhlbHNBbGxEaW07CiAgICAgICAgICAgICAgdmFyIGlEaW07CiAgICAgICAgICAgICAgZm9yIChpRGltID0gMDsgaURpbSA8IGhlYWRlckluZm8ubnVtRGltczsgaURpbSsrKSB7CiAgICAgICAgICAgICAgICBpZiAobnVtRGltcyA+IDEpIHsKICAgICAgICAgICAgICAgICAgcmVzdWx0UGl4ZWxzID0gbmV3IE91dFBpeGVsVHlwZUFycmF5KHJlc3VsdFBpeGVsc0FsbERpbS5idWZmZXIsIG51bVBpeGVscyAqIGlEaW0sIG51bVBpeGVscyk7CiAgICAgICAgICAgICAgICAgIHByZXZWYWwgPSAwOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKGRhdGEuaGVhZGVySW5mby5udW1WYWxpZFBpeGVsID09PSB3aWR0aCAqIGhlaWdodCkgewogICAgICAgICAgICAgICAgICBmb3IgKGsgPSAwLCBpID0gMDsgaSA8IGhlaWdodDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IHdpZHRoOyBqKyssIGsrKykgewogICAgICAgICAgICAgICAgICAgICAgdmFsID0gMDsKICAgICAgICAgICAgICAgICAgICAgIHZhbFRtcCA9IHdvcmQgPDwgYml0UG9zID4+PiAzMiAtIG51bUJpdHNMVVRRaWNrOwogICAgICAgICAgICAgICAgICAgICAgdmFsVG1wUXVpY2sgPSB2YWxUbXA7CiAgICAgICAgICAgICAgICAgICAgICBpZiAoMzIgLSBiaXRQb3MgPCBudW1CaXRzTFVUUWljaykgewogICAgICAgICAgICAgICAgICAgICAgICB2YWxUbXAgfD0gc3R1ZmZlZERhdGFbc3JjUHRyICsgMV0gPj4+IDY0IC0gYml0UG9zIC0gbnVtQml0c0xVVFFpY2s7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbFRtcFF1aWNrID0gdmFsVG1wOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgaWYgKGRlY29kZUx1dFt2YWxUbXBRdWlja10pIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFsID0gZGVjb2RlTHV0W3ZhbFRtcFF1aWNrXVsxXTsKICAgICAgICAgICAgICAgICAgICAgICAgYml0UG9zICs9IGRlY29kZUx1dFt2YWxUbXBRdWlja11bMF07CiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICB2YWxUbXAgPSB3b3JkIDw8IGJpdFBvcyA+Pj4gMzIgLSBudW1CaXRzTFVUOwogICAgICAgICAgICAgICAgICAgICAgICB2YWxUbXBRdWljayA9IHZhbFRtcDsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDMyIC0gYml0UG9zIDwgbnVtQml0c0xVVCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHZhbFRtcCB8PSBzdHVmZmVkRGF0YVtzcmNQdHIgKyAxXSA+Pj4gNjQgLSBiaXRQb3MgLSBudW1CaXRzTFVUOwogICAgICAgICAgICAgICAgICAgICAgICAgIHZhbFRtcFF1aWNrID0gdmFsVG1wOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUgPSB0cmVlOwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGlpID0gMDsgaWkgPCBudW1CaXRzTFVUOyBpaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEJpdCA9IHZhbFRtcCA+Pj4gbnVtQml0c0xVVCAtIGlpIC0gMSAmIDE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSA9IGN1cnJlbnRCaXQgPyBub2RlLnJpZ2h0IDogbm9kZS5sZWZ0OwogICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKG5vZGUubGVmdCB8fCBub2RlLnJpZ2h0KSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsID0gbm9kZS52YWw7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaXRQb3MgPSBiaXRQb3MgKyBpaSArIDE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIGlmIChiaXRQb3MgPj0gMzIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgYml0UG9zIC09IDMyOwogICAgICAgICAgICAgICAgICAgICAgICBzcmNQdHIrKzsKICAgICAgICAgICAgICAgICAgICAgICAgd29yZCA9IHN0dWZmZWREYXRhW3NyY1B0cl07CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBkZWx0YSA9IHZhbCAtIG9mZnNldDsKICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWx0YUVuY29kZSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaiA+IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBkZWx0YSArPSBwcmV2VmFsOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGkgPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsdGEgKz0gcmVzdWx0UGl4ZWxzW2sgLSB3aWR0aF07CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsdGEgKz0gcHJldlZhbDsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBkZWx0YSAmPSAyNTU7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFBpeGVsc1trXSA9IGRlbHRhOwogICAgICAgICAgICAgICAgICAgICAgICBwcmV2VmFsID0gZGVsdGE7CiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRQaXhlbHNba10gPSBkZWx0YTsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIGZvciAoayA9IDAsIGkgPSAwOyBpIDwgaGVpZ2h0OyBpKyspIHsKICAgICAgICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgd2lkdGg7IGorKywgaysrKSB7CiAgICAgICAgICAgICAgICAgICAgICBpZiAobWFza1trXSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YWwgPSAwOwogICAgICAgICAgICAgICAgICAgICAgICB2YWxUbXAgPSB3b3JkIDw8IGJpdFBvcyA+Pj4gMzIgLSBudW1CaXRzTFVUUWljazsKICAgICAgICAgICAgICAgICAgICAgICAgdmFsVG1wUXVpY2sgPSB2YWxUbXA7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgzMiAtIGJpdFBvcyA8IG51bUJpdHNMVVRRaWNrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsVG1wIHw9IHN0dWZmZWREYXRhW3NyY1B0ciArIDFdID4+PiA2NCAtIGJpdFBvcyAtIG51bUJpdHNMVVRRaWNrOwogICAgICAgICAgICAgICAgICAgICAgICAgIHZhbFRtcFF1aWNrID0gdmFsVG1wOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWNvZGVMdXRbdmFsVG1wUXVpY2tdKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsID0gZGVjb2RlTHV0W3ZhbFRtcFF1aWNrXVsxXTsKICAgICAgICAgICAgICAgICAgICAgICAgICBiaXRQb3MgKz0gZGVjb2RlTHV0W3ZhbFRtcFF1aWNrXVswXTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxUbXAgPSB3b3JkIDw8IGJpdFBvcyA+Pj4gMzIgLSBudW1CaXRzTFVUOwogICAgICAgICAgICAgICAgICAgICAgICAgIHZhbFRtcFF1aWNrID0gdmFsVG1wOwogICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgzMiAtIGJpdFBvcyA8IG51bUJpdHNMVVQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbFRtcCB8PSBzdHVmZmVkRGF0YVtzcmNQdHIgKyAxXSA+Pj4gNjQgLSBiaXRQb3MgLSBudW1CaXRzTFVUOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsVG1wUXVpY2sgPSB2YWxUbXA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUgPSB0cmVlOwogICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaWkgPSAwOyBpaSA8IG51bUJpdHNMVVQ7IGlpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRCaXQgPSB2YWxUbXAgPj4+IG51bUJpdHNMVVQgLSBpaSAtIDEgJiAxOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSA9IGN1cnJlbnRCaXQgPyBub2RlLnJpZ2h0IDogbm9kZS5sZWZ0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEobm9kZS5sZWZ0IHx8IG5vZGUucmlnaHQpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbCA9IG5vZGUudmFsOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaXRQb3MgPSBiaXRQb3MgKyBpaSArIDE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoYml0UG9zID49IDMyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgYml0UG9zIC09IDMyOwogICAgICAgICAgICAgICAgICAgICAgICAgIHNyY1B0cisrOwogICAgICAgICAgICAgICAgICAgICAgICAgIHdvcmQgPSBzdHVmZmVkRGF0YVtzcmNQdHJdOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGRlbHRhID0gdmFsIC0gb2Zmc2V0OwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVsdGFFbmNvZGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaiA+IDAgJiYgbWFza1trIC0gMV0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbHRhICs9IHByZXZWYWw7CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpID4gMCAmJiBtYXNrW2sgLSB3aWR0aF0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbHRhICs9IHJlc3VsdFBpeGVsc1trIC0gd2lkdGhdOwogICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWx0YSArPSBwcmV2VmFsOwogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICBkZWx0YSAmPSAyNTU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0UGl4ZWxzW2tdID0gZGVsdGE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldlZhbCA9IGRlbHRhOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFBpeGVsc1trXSA9IGRlbHRhOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBkYXRhLnB0ciA9IGRhdGEucHRyICsgKHNyY1B0ciArIDEpICogNCArIChiaXRQb3MgPiAwID8gNCA6IDApOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBkYXRhLnBpeGVscy5yZXN1bHRQaXhlbHMgPSByZXN1bHRQaXhlbHNBbGxEaW07CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGRlY29kZUJpdHM6IGZ1bmN0aW9uKGlucHV0LCBkYXRhLCBibG9ja0RhdGFCdWZmZXIsIG9mZnNldCwgaURpbSkgewogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHZhciBoZWFkZXJJbmZvID0gZGF0YS5oZWFkZXJJbmZvOwogICAgICAgICAgICAgICAgdmFyIGZpbGVWZXJzaW9uID0gaGVhZGVySW5mby5maWxlVmVyc2lvbjsKICAgICAgICAgICAgICAgIHZhciBibG9ja1B0ciA9IDA7CiAgICAgICAgICAgICAgICB2YXIgdmlldyA9IG5ldyBEYXRhVmlldyhpbnB1dCwgZGF0YS5wdHIsIDUpOwogICAgICAgICAgICAgICAgdmFyIGhlYWRlckJ5dGUgPSB2aWV3LmdldFVpbnQ4KDApOwogICAgICAgICAgICAgICAgYmxvY2tQdHIrKzsKICAgICAgICAgICAgICAgIHZhciBiaXRzNjcgPSBoZWFkZXJCeXRlID4+IDY7CiAgICAgICAgICAgICAgICB2YXIgbiA9IGJpdHM2NyA9PT0gMCA/IDQgOiAzIC0gYml0czY3OwogICAgICAgICAgICAgICAgdmFyIGRvTHV0ID0gKGhlYWRlckJ5dGUgJiAzMikgPiAwID8gdHJ1ZSA6IGZhbHNlOwogICAgICAgICAgICAgICAgdmFyIG51bUJpdHMgPSBoZWFkZXJCeXRlICYgMzE7CiAgICAgICAgICAgICAgICB2YXIgbnVtRWxlbWVudHMgPSAwOwogICAgICAgICAgICAgICAgaWYgKG4gPT09IDEpIHsKICAgICAgICAgICAgICAgICAgbnVtRWxlbWVudHMgPSB2aWV3LmdldFVpbnQ4KGJsb2NrUHRyKTsKICAgICAgICAgICAgICAgICAgYmxvY2tQdHIrKzsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobiA9PT0gMikgewogICAgICAgICAgICAgICAgICBudW1FbGVtZW50cyA9IHZpZXcuZ2V0VWludDE2KGJsb2NrUHRyLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgYmxvY2tQdHIgKz0gMjsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobiA9PT0gNCkgewogICAgICAgICAgICAgICAgICBudW1FbGVtZW50cyA9IHZpZXcuZ2V0VWludDMyKGJsb2NrUHRyLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgYmxvY2tQdHIgKz0gNDsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIHRocm93ICJJbnZhbGlkIHZhbGlkIHBpeGVsIGNvdW50IHR5cGUiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIHNjYWxlID0gMiAqIGhlYWRlckluZm8ubWF4WkVycm9yOwogICAgICAgICAgICAgICAgdmFyIHN0dWZmZWREYXRhLCBhcnJheUJ1Ziwgc3RvcmU4LCBkYXRhQnl0ZXMsIGRhdGFXb3JkczsKICAgICAgICAgICAgICAgIHZhciBsdXRBcnIsIGx1dERhdGEsIGx1dEJ5dGVzLCBsdXRCaXRzUGVyRWxlbWVudCwgYml0c1BlclBpeGVsOwogICAgICAgICAgICAgICAgdmFyIHpNYXggPSBoZWFkZXJJbmZvLm51bURpbXMgPiAxID8gaGVhZGVySW5mby5tYXhWYWx1ZXNbaURpbV0gOiBoZWFkZXJJbmZvLnpNYXg7CiAgICAgICAgICAgICAgICBpZiAoZG9MdXQpIHsKICAgICAgICAgICAgICAgICAgZGF0YS5jb3VudGVyLmx1dCsrOwogICAgICAgICAgICAgICAgICBsdXRCeXRlcyA9IHZpZXcuZ2V0VWludDgoYmxvY2tQdHIpOwogICAgICAgICAgICAgICAgICBsdXRCaXRzUGVyRWxlbWVudCA9IG51bUJpdHM7CiAgICAgICAgICAgICAgICAgIGJsb2NrUHRyKys7CiAgICAgICAgICAgICAgICAgIGRhdGFCeXRlcyA9IE1hdGguY2VpbCgobHV0Qnl0ZXMgLSAxKSAqIG51bUJpdHMgLyA4KTsKICAgICAgICAgICAgICAgICAgZGF0YVdvcmRzID0gTWF0aC5jZWlsKGRhdGFCeXRlcyAvIDQpOwogICAgICAgICAgICAgICAgICBhcnJheUJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcihkYXRhV29yZHMgKiA0KTsKICAgICAgICAgICAgICAgICAgc3RvcmU4ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWYpOwogICAgICAgICAgICAgICAgICBkYXRhLnB0ciArPSBibG9ja1B0cjsKICAgICAgICAgICAgICAgICAgc3RvcmU4LnNldChuZXcgVWludDhBcnJheShpbnB1dCwgZGF0YS5wdHIsIGRhdGFCeXRlcykpOwogICAgICAgICAgICAgICAgICBsdXREYXRhID0gbmV3IFVpbnQzMkFycmF5KGFycmF5QnVmKTsKICAgICAgICAgICAgICAgICAgZGF0YS5wdHIgKz0gZGF0YUJ5dGVzOwogICAgICAgICAgICAgICAgICBiaXRzUGVyUGl4ZWwgPSAwOwogICAgICAgICAgICAgICAgICB3aGlsZSAobHV0Qnl0ZXMgLSAxID4+PiBiaXRzUGVyUGl4ZWwpIHsKICAgICAgICAgICAgICAgICAgICBiaXRzUGVyUGl4ZWwrKzsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBkYXRhQnl0ZXMgPSBNYXRoLmNlaWwobnVtRWxlbWVudHMgKiBiaXRzUGVyUGl4ZWwgLyA4KTsKICAgICAgICAgICAgICAgICAgZGF0YVdvcmRzID0gTWF0aC5jZWlsKGRhdGFCeXRlcyAvIDQpOwogICAgICAgICAgICAgICAgICBhcnJheUJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcihkYXRhV29yZHMgKiA0KTsKICAgICAgICAgICAgICAgICAgc3RvcmU4ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWYpOwogICAgICAgICAgICAgICAgICBzdG9yZTguc2V0KG5ldyBVaW50OEFycmF5KGlucHV0LCBkYXRhLnB0ciwgZGF0YUJ5dGVzKSk7CiAgICAgICAgICAgICAgICAgIHN0dWZmZWREYXRhID0gbmV3IFVpbnQzMkFycmF5KGFycmF5QnVmKTsKICAgICAgICAgICAgICAgICAgZGF0YS5wdHIgKz0gZGF0YUJ5dGVzOwogICAgICAgICAgICAgICAgICBpZiAoZmlsZVZlcnNpb24gPj0gMykgewogICAgICAgICAgICAgICAgICAgIGx1dEFyciA9IEJpdFN0dWZmZXIudW5zdHVmZkxVVDIobHV0RGF0YSwgbnVtQml0cywgbHV0Qnl0ZXMgLSAxLCBvZmZzZXQsIHNjYWxlLCB6TWF4KTsKICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBsdXRBcnIgPSBCaXRTdHVmZmVyLnVuc3R1ZmZMVVQobHV0RGF0YSwgbnVtQml0cywgbHV0Qnl0ZXMgLSAxLCBvZmZzZXQsIHNjYWxlLCB6TWF4KTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoZmlsZVZlcnNpb24gPj0gMykgewogICAgICAgICAgICAgICAgICAgIEJpdFN0dWZmZXIudW5zdHVmZjIoc3R1ZmZlZERhdGEsIGJsb2NrRGF0YUJ1ZmZlciwgYml0c1BlclBpeGVsLCBudW1FbGVtZW50cywgbHV0QXJyKTsKICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBCaXRTdHVmZmVyLnVuc3R1ZmYoc3R1ZmZlZERhdGEsIGJsb2NrRGF0YUJ1ZmZlciwgYml0c1BlclBpeGVsLCBudW1FbGVtZW50cywgbHV0QXJyKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgZGF0YS5jb3VudGVyLmJpdHN0dWZmZXIrKzsKICAgICAgICAgICAgICAgICAgYml0c1BlclBpeGVsID0gbnVtQml0czsKICAgICAgICAgICAgICAgICAgZGF0YS5wdHIgKz0gYmxvY2tQdHI7CiAgICAgICAgICAgICAgICAgIGlmIChiaXRzUGVyUGl4ZWwgPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgZGF0YUJ5dGVzID0gTWF0aC5jZWlsKG51bUVsZW1lbnRzICogYml0c1BlclBpeGVsIC8gOCk7CiAgICAgICAgICAgICAgICAgICAgZGF0YVdvcmRzID0gTWF0aC5jZWlsKGRhdGFCeXRlcyAvIDQpOwogICAgICAgICAgICAgICAgICAgIGFycmF5QnVmID0gbmV3IEFycmF5QnVmZmVyKGRhdGFXb3JkcyAqIDQpOwogICAgICAgICAgICAgICAgICAgIHN0b3JlOCA9IG5ldyBVaW50OEFycmF5KGFycmF5QnVmKTsKICAgICAgICAgICAgICAgICAgICBzdG9yZTguc2V0KG5ldyBVaW50OEFycmF5KGlucHV0LCBkYXRhLnB0ciwgZGF0YUJ5dGVzKSk7CiAgICAgICAgICAgICAgICAgICAgc3R1ZmZlZERhdGEgPSBuZXcgVWludDMyQXJyYXkoYXJyYXlCdWYpOwogICAgICAgICAgICAgICAgICAgIGRhdGEucHRyICs9IGRhdGFCeXRlczsKICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZVZlcnNpb24gPj0gMykgewogICAgICAgICAgICAgICAgICAgICAgaWYgKG9mZnNldCA9PSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIEJpdFN0dWZmZXIub3JpZ2luYWxVbnN0dWZmMihzdHVmZmVkRGF0YSwgYmxvY2tEYXRhQnVmZmVyLCBiaXRzUGVyUGl4ZWwsIG51bUVsZW1lbnRzKTsKICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIEJpdFN0dWZmZXIudW5zdHVmZjIoc3R1ZmZlZERhdGEsIGJsb2NrRGF0YUJ1ZmZlciwgYml0c1BlclBpeGVsLCBudW1FbGVtZW50cywgZmFsc2UsIG9mZnNldCwgc2NhbGUsIHpNYXgpOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICBpZiAob2Zmc2V0ID09IG51bGwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgQml0U3R1ZmZlci5vcmlnaW5hbFVuc3R1ZmYoc3R1ZmZlZERhdGEsIGJsb2NrRGF0YUJ1ZmZlciwgYml0c1BlclBpeGVsLCBudW1FbGVtZW50cyk7CiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBCaXRTdHVmZmVyLnVuc3R1ZmYoc3R1ZmZlZERhdGEsIGJsb2NrRGF0YUJ1ZmZlciwgYml0c1BlclBpeGVsLCBudW1FbGVtZW50cywgZmFsc2UsIG9mZnNldCwgc2NhbGUsIHpNYXgpOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgcmVhZFRpbGVzOiBmdW5jdGlvbihpbnB1dCwgZGF0YSwgT3V0UGl4ZWxUeXBlQXJyYXkpIHsKICAgICAgICAgICAgICB2YXIgaGVhZGVySW5mbyA9IGRhdGEuaGVhZGVySW5mbzsKICAgICAgICAgICAgICB2YXIgd2lkdGggPSBoZWFkZXJJbmZvLndpZHRoOwogICAgICAgICAgICAgIHZhciBoZWlnaHQgPSBoZWFkZXJJbmZvLmhlaWdodDsKICAgICAgICAgICAgICB2YXIgbWljcm9CbG9ja1NpemUgPSBoZWFkZXJJbmZvLm1pY3JvQmxvY2tTaXplOwogICAgICAgICAgICAgIHZhciBpbWFnZVR5cGUgPSBoZWFkZXJJbmZvLmltYWdlVHlwZTsKICAgICAgICAgICAgICB2YXIgZGF0YVR5cGVTaXplID0gTGVyYzJIZWxwZXJzLmdldERhdGFUeXBlU2l6ZShpbWFnZVR5cGUpOwogICAgICAgICAgICAgIHZhciBudW1CbG9ja3NYID0gTWF0aC5jZWlsKHdpZHRoIC8gbWljcm9CbG9ja1NpemUpOwogICAgICAgICAgICAgIHZhciBudW1CbG9ja3NZID0gTWF0aC5jZWlsKGhlaWdodCAvIG1pY3JvQmxvY2tTaXplKTsKICAgICAgICAgICAgICBkYXRhLnBpeGVscy5udW1CbG9ja3NZID0gbnVtQmxvY2tzWTsKICAgICAgICAgICAgICBkYXRhLnBpeGVscy5udW1CbG9ja3NYID0gbnVtQmxvY2tzWDsKICAgICAgICAgICAgICBkYXRhLnBpeGVscy5wdHIgPSAwOwogICAgICAgICAgICAgIHZhciByb3cgPSAwLCBjb2wgPSAwLCBibG9ja1kgPSAwLCBibG9ja1ggPSAwLCB0aGlzQmxvY2tIZWlnaHQgPSAwLCB0aGlzQmxvY2tXaWR0aCA9IDAsIGJ5dGVzTGVmdCA9IDAsIGhlYWRlckJ5dGUgPSAwLCBiaXRzNjcgPSAwLCB0ZXN0Q29kZSA9IDAsIG91dFB0ciA9IDAsIG91dFN0cmlkZSA9IDAsIG51bUJ5dGVzID0gMCwgYnl0ZXNsZWZ0ID0gMCwgeiA9IDAsIGJsb2NrUHRyID0gMDsKICAgICAgICAgICAgICB2YXIgdmlldywgYmxvY2ssIGFycmF5QnVmLCBzdG9yZTgsIHJhd0RhdGE7CiAgICAgICAgICAgICAgdmFyIGJsb2NrRW5jb2Rpbmc7CiAgICAgICAgICAgICAgdmFyIGJsb2NrRGF0YUJ1ZmZlciA9IG5ldyBPdXRQaXhlbFR5cGVBcnJheShtaWNyb0Jsb2NrU2l6ZSAqIG1pY3JvQmxvY2tTaXplKTsKICAgICAgICAgICAgICB2YXIgbGFzdEJsb2NrSGVpZ2h0ID0gaGVpZ2h0ICUgbWljcm9CbG9ja1NpemUgfHwgbWljcm9CbG9ja1NpemU7CiAgICAgICAgICAgICAgdmFyIGxhc3RCbG9ja1dpZHRoID0gd2lkdGggJSBtaWNyb0Jsb2NrU2l6ZSB8fCBtaWNyb0Jsb2NrU2l6ZTsKICAgICAgICAgICAgICB2YXIgb2Zmc2V0VHlwZSwgb2Zmc2V0OwogICAgICAgICAgICAgIHZhciBudW1EaW1zID0gaGVhZGVySW5mby5udW1EaW1zLCBpRGltOwogICAgICAgICAgICAgIHZhciBtYXNrID0gZGF0YS5waXhlbHMucmVzdWx0TWFzazsKICAgICAgICAgICAgICB2YXIgcmVzdWx0UGl4ZWxzID0gZGF0YS5waXhlbHMucmVzdWx0UGl4ZWxzOwogICAgICAgICAgICAgIGZvciAoYmxvY2tZID0gMDsgYmxvY2tZIDwgbnVtQmxvY2tzWTsgYmxvY2tZKyspIHsKICAgICAgICAgICAgICAgIHRoaXNCbG9ja0hlaWdodCA9IGJsb2NrWSAhPT0gbnVtQmxvY2tzWSAtIDEgPyBtaWNyb0Jsb2NrU2l6ZSA6IGxhc3RCbG9ja0hlaWdodDsKICAgICAgICAgICAgICAgIGZvciAoYmxvY2tYID0gMDsgYmxvY2tYIDwgbnVtQmxvY2tzWDsgYmxvY2tYKyspIHsKICAgICAgICAgICAgICAgICAgdGhpc0Jsb2NrV2lkdGggPSBibG9ja1ggIT09IG51bUJsb2Nrc1ggLSAxID8gbWljcm9CbG9ja1NpemUgOiBsYXN0QmxvY2tXaWR0aDsKICAgICAgICAgICAgICAgICAgb3V0UHRyID0gYmxvY2tZICogd2lkdGggKiBtaWNyb0Jsb2NrU2l6ZSArIGJsb2NrWCAqIG1pY3JvQmxvY2tTaXplOwogICAgICAgICAgICAgICAgICBvdXRTdHJpZGUgPSB3aWR0aCAtIHRoaXNCbG9ja1dpZHRoOwogICAgICAgICAgICAgICAgICBmb3IgKGlEaW0gPSAwOyBpRGltIDwgbnVtRGltczsgaURpbSsrKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKG51bURpbXMgPiAxKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXN1bHRQaXhlbHMgPSBuZXcgT3V0UGl4ZWxUeXBlQXJyYXkoZGF0YS5waXhlbHMucmVzdWx0UGl4ZWxzLmJ1ZmZlciwgd2lkdGggKiBoZWlnaHQgKiBpRGltICogZGF0YVR5cGVTaXplLCB3aWR0aCAqIGhlaWdodCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGJ5dGVzTGVmdCA9IGlucHV0LmJ5dGVMZW5ndGggLSBkYXRhLnB0cjsKICAgICAgICAgICAgICAgICAgICB2aWV3ID0gbmV3IERhdGFWaWV3KGlucHV0LCBkYXRhLnB0ciwgTWF0aC5taW4oMTAsIGJ5dGVzTGVmdCkpOwogICAgICAgICAgICAgICAgICAgIGJsb2NrID0ge307CiAgICAgICAgICAgICAgICAgICAgYmxvY2tQdHIgPSAwOwogICAgICAgICAgICAgICAgICAgIGhlYWRlckJ5dGUgPSB2aWV3LmdldFVpbnQ4KDApOwogICAgICAgICAgICAgICAgICAgIGJsb2NrUHRyKys7CiAgICAgICAgICAgICAgICAgICAgYml0czY3ID0gaGVhZGVyQnl0ZSA+PiA2ICYgMjU1OwogICAgICAgICAgICAgICAgICAgIHRlc3RDb2RlID0gaGVhZGVyQnl0ZSA+PiAyICYgMTU7CiAgICAgICAgICAgICAgICAgICAgaWYgKHRlc3RDb2RlICE9PSAoYmxvY2tYICogbWljcm9CbG9ja1NpemUgPj4gMyAmIDE1KSkgewogICAgICAgICAgICAgICAgICAgICAgdGhyb3cgImludGVncml0eSBpc3N1ZSI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGJsb2NrRW5jb2RpbmcgPSBoZWFkZXJCeXRlICYgMzsKICAgICAgICAgICAgICAgICAgICBpZiAoYmxvY2tFbmNvZGluZyA+IDMpIHsKICAgICAgICAgICAgICAgICAgICAgIGRhdGEucHRyICs9IGJsb2NrUHRyOwogICAgICAgICAgICAgICAgICAgICAgdGhyb3cgIkludmFsaWQgYmxvY2sgZW5jb2RpbmcgKCIgKyBibG9ja0VuY29kaW5nICsgIikiOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYmxvY2tFbmNvZGluZyA9PT0gMikgewogICAgICAgICAgICAgICAgICAgICAgZGF0YS5jb3VudGVyLmNvbnN0YW50Kys7CiAgICAgICAgICAgICAgICAgICAgICBkYXRhLnB0ciArPSBibG9ja1B0cjsKICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYmxvY2tFbmNvZGluZyA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgZGF0YS5jb3VudGVyLnVuY29tcHJlc3NlZCsrOwogICAgICAgICAgICAgICAgICAgICAgZGF0YS5wdHIgKz0gYmxvY2tQdHI7CiAgICAgICAgICAgICAgICAgICAgICBudW1CeXRlcyA9IHRoaXNCbG9ja0hlaWdodCAqIHRoaXNCbG9ja1dpZHRoICogZGF0YVR5cGVTaXplOwogICAgICAgICAgICAgICAgICAgICAgYnl0ZXNsZWZ0ID0gaW5wdXQuYnl0ZUxlbmd0aCAtIGRhdGEucHRyOwogICAgICAgICAgICAgICAgICAgICAgbnVtQnl0ZXMgPSBudW1CeXRlcyA8IGJ5dGVzbGVmdCA/IG51bUJ5dGVzIDogYnl0ZXNsZWZ0OwogICAgICAgICAgICAgICAgICAgICAgYXJyYXlCdWYgPSBuZXcgQXJyYXlCdWZmZXIobnVtQnl0ZXMgJSBkYXRhVHlwZVNpemUgPT09IDAgPyBudW1CeXRlcyA6IG51bUJ5dGVzICsgZGF0YVR5cGVTaXplIC0gbnVtQnl0ZXMgJSBkYXRhVHlwZVNpemUpOwogICAgICAgICAgICAgICAgICAgICAgc3RvcmU4ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWYpOwogICAgICAgICAgICAgICAgICAgICAgc3RvcmU4LnNldChuZXcgVWludDhBcnJheShpbnB1dCwgZGF0YS5wdHIsIG51bUJ5dGVzKSk7CiAgICAgICAgICAgICAgICAgICAgICByYXdEYXRhID0gbmV3IE91dFBpeGVsVHlwZUFycmF5KGFycmF5QnVmKTsKICAgICAgICAgICAgICAgICAgICAgIHogPSAwOwogICAgICAgICAgICAgICAgICAgICAgaWYgKG1hc2spIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChyb3cgPSAwOyByb3cgPCB0aGlzQmxvY2tIZWlnaHQ7IHJvdysrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb2wgPSAwOyBjb2wgPCB0aGlzQmxvY2tXaWR0aDsgY29sKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXNrW291dFB0cl0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0UGl4ZWxzW291dFB0cl0gPSByYXdEYXRhW3orK107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRQdHIrKzsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0UHRyICs9IG91dFN0cmlkZTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChyb3cgPSAwOyByb3cgPCB0aGlzQmxvY2tIZWlnaHQ7IHJvdysrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb2wgPSAwOyBjb2wgPCB0aGlzQmxvY2tXaWR0aDsgY29sKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFBpeGVsc1tvdXRQdHIrK10gPSByYXdEYXRhW3orK107CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIG91dFB0ciArPSBvdXRTdHJpZGU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIGRhdGEucHRyICs9IHogKiBkYXRhVHlwZVNpemU7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgIG9mZnNldFR5cGUgPSBMZXJjMkhlbHBlcnMuZ2V0RGF0YVR5cGVVc2VkKGltYWdlVHlwZSwgYml0czY3KTsKICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IExlcmMySGVscGVycy5nZXRPbmVQaXhlbChibG9jaywgYmxvY2tQdHIsIG9mZnNldFR5cGUsIHZpZXcpOwogICAgICAgICAgICAgICAgICAgICAgYmxvY2tQdHIgKz0gTGVyYzJIZWxwZXJzLmdldERhdGFUeXBlU2l6ZShvZmZzZXRUeXBlKTsKICAgICAgICAgICAgICAgICAgICAgIGlmIChibG9ja0VuY29kaW5nID09PSAzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEucHRyICs9IGJsb2NrUHRyOwogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmNvdW50ZXIuY29uc3RhbnRvZmZzZXQrKzsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hc2spIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHJvdyA9IDA7IHJvdyA8IHRoaXNCbG9ja0hlaWdodDsgcm93KyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29sID0gMDsgY29sIDwgdGhpc0Jsb2NrV2lkdGg7IGNvbCsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXNrW291dFB0cl0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRQaXhlbHNbb3V0UHRyXSA9IG9mZnNldDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRQdHIrKzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dFB0ciArPSBvdXRTdHJpZGU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAocm93ID0gMDsgcm93IDwgdGhpc0Jsb2NrSGVpZ2h0OyByb3crKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb2wgPSAwOyBjb2wgPCB0aGlzQmxvY2tXaWR0aDsgY29sKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0UGl4ZWxzW291dFB0cisrXSA9IG9mZnNldDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dFB0ciArPSBvdXRTdHJpZGU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnB0ciArPSBibG9ja1B0cjsKICAgICAgICAgICAgICAgICAgICAgICAgTGVyYzJIZWxwZXJzLmRlY29kZUJpdHMoaW5wdXQsIGRhdGEsIGJsb2NrRGF0YUJ1ZmZlciwgb2Zmc2V0LCBpRGltKTsKICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tQdHIgPSAwOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFzaykgewogICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAocm93ID0gMDsgcm93IDwgdGhpc0Jsb2NrSGVpZ2h0OyByb3crKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb2wgPSAwOyBjb2wgPCB0aGlzQmxvY2tXaWR0aDsgY29sKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hc2tbb3V0UHRyXSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFBpeGVsc1tvdXRQdHJdID0gYmxvY2tEYXRhQnVmZmVyW2Jsb2NrUHRyKytdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dFB0cisrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0UHRyICs9IG91dFN0cmlkZTsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChyb3cgPSAwOyByb3cgPCB0aGlzQmxvY2tIZWlnaHQ7IHJvdysrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbCA9IDA7IGNvbCA8IHRoaXNCbG9ja1dpZHRoOyBjb2wrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRQaXhlbHNbb3V0UHRyKytdID0gYmxvY2tEYXRhQnVmZmVyW2Jsb2NrUHRyKytdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0UHRyICs9IG91dFN0cmlkZTsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIC8qKioqKioqKioqKioqKioqKgogICAgICAgICAgICAqICBwcml2YXRlIG1ldGhvZHMgKGhlbHBlciBtZXRob2RzKQogICAgICAgICAgICAqKioqKioqKioqKioqKioqKi8KICAgICAgICAgICAgZm9ybWF0RmlsZUluZm86IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgImZpbGVJZGVudGlmaWVyU3RyaW5nIjogZGF0YS5oZWFkZXJJbmZvLmZpbGVJZGVudGlmaWVyU3RyaW5nLAogICAgICAgICAgICAgICAgImZpbGVWZXJzaW9uIjogZGF0YS5oZWFkZXJJbmZvLmZpbGVWZXJzaW9uLAogICAgICAgICAgICAgICAgImltYWdlVHlwZSI6IGRhdGEuaGVhZGVySW5mby5pbWFnZVR5cGUsCiAgICAgICAgICAgICAgICAiaGVpZ2h0IjogZGF0YS5oZWFkZXJJbmZvLmhlaWdodCwKICAgICAgICAgICAgICAgICJ3aWR0aCI6IGRhdGEuaGVhZGVySW5mby53aWR0aCwKICAgICAgICAgICAgICAgICJudW1WYWxpZFBpeGVsIjogZGF0YS5oZWFkZXJJbmZvLm51bVZhbGlkUGl4ZWwsCiAgICAgICAgICAgICAgICAibWljcm9CbG9ja1NpemUiOiBkYXRhLmhlYWRlckluZm8ubWljcm9CbG9ja1NpemUsCiAgICAgICAgICAgICAgICAiYmxvYlNpemUiOiBkYXRhLmhlYWRlckluZm8uYmxvYlNpemUsCiAgICAgICAgICAgICAgICAibWF4WkVycm9yIjogZGF0YS5oZWFkZXJJbmZvLm1heFpFcnJvciwKICAgICAgICAgICAgICAgICJwaXhlbFR5cGUiOiBMZXJjMkhlbHBlcnMuZ2V0UGl4ZWxUeXBlKGRhdGEuaGVhZGVySW5mby5pbWFnZVR5cGUpLAogICAgICAgICAgICAgICAgImVvZk9mZnNldCI6IGRhdGEuZW9mT2Zmc2V0LAogICAgICAgICAgICAgICAgIm1hc2siOiBkYXRhLm1hc2sgPyB7CiAgICAgICAgICAgICAgICAgICJudW1CeXRlcyI6IGRhdGEubWFzay5udW1CeXRlcwogICAgICAgICAgICAgICAgfSA6IG51bGwsCiAgICAgICAgICAgICAgICAicGl4ZWxzIjogewogICAgICAgICAgICAgICAgICAibnVtQmxvY2tzWCI6IGRhdGEucGl4ZWxzLm51bUJsb2Nrc1gsCiAgICAgICAgICAgICAgICAgICJudW1CbG9ja3NZIjogZGF0YS5waXhlbHMubnVtQmxvY2tzWSwKICAgICAgICAgICAgICAgICAgLy8ibnVtQnl0ZXMiOiBkYXRhLnBpeGVscy5udW1CeXRlcywKICAgICAgICAgICAgICAgICAgIm1heFZhbHVlIjogZGF0YS5oZWFkZXJJbmZvLnpNYXgsCiAgICAgICAgICAgICAgICAgICJtaW5WYWx1ZSI6IGRhdGEuaGVhZGVySW5mby56TWluLAogICAgICAgICAgICAgICAgICAibm9EYXRhVmFsdWUiOiBkYXRhLm5vRGF0YVZhbHVlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgY29uc3RydWN0Q29uc3RhbnRTdXJmYWNlOiBmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgICAgICAgdmFyIHZhbCA9IGRhdGEuaGVhZGVySW5mby56TWF4OwogICAgICAgICAgICAgIHZhciBudW1EaW1zID0gZGF0YS5oZWFkZXJJbmZvLm51bURpbXM7CiAgICAgICAgICAgICAgdmFyIG51bVBpeGVscyA9IGRhdGEuaGVhZGVySW5mby5oZWlnaHQgKiBkYXRhLmhlYWRlckluZm8ud2lkdGg7CiAgICAgICAgICAgICAgdmFyIG51bVBpeGVsQWxsRGltcyA9IG51bVBpeGVscyAqIG51bURpbXM7CiAgICAgICAgICAgICAgdmFyIGkgPSAwLCBrID0gMCwgblN0YXJ0ID0gMDsKICAgICAgICAgICAgICB2YXIgbWFzayA9IGRhdGEucGl4ZWxzLnJlc3VsdE1hc2s7CiAgICAgICAgICAgICAgaWYgKG1hc2spIHsKICAgICAgICAgICAgICAgIGlmIChudW1EaW1zID4gMSkgewogICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbnVtRGltczsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgblN0YXJ0ID0gaSAqIG51bVBpeGVsczsKICAgICAgICAgICAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwgbnVtUGl4ZWxzOyBrKyspIHsKICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXNrW2tdKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEucGl4ZWxzLnJlc3VsdFBpeGVsc1tuU3RhcnQgKyBrXSA9IHZhbDsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIGZvciAoayA9IDA7IGsgPCBudW1QaXhlbHM7IGsrKykgewogICAgICAgICAgICAgICAgICAgIGlmIChtYXNrW2tdKSB7CiAgICAgICAgICAgICAgICAgICAgICBkYXRhLnBpeGVscy5yZXN1bHRQaXhlbHNba10gPSB2YWw7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGlmIChkYXRhLnBpeGVscy5yZXN1bHRQaXhlbHMuZmlsbCkgewogICAgICAgICAgICAgICAgICBkYXRhLnBpeGVscy5yZXN1bHRQaXhlbHMuZmlsbCh2YWwpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgZm9yIChrID0gMDsgayA8IG51bVBpeGVsQWxsRGltczsgaysrKSB7CiAgICAgICAgICAgICAgICAgICAgZGF0YS5waXhlbHMucmVzdWx0UGl4ZWxzW2tdID0gdmFsOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZ2V0RGF0YVR5cGVBcnJheTogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgIHZhciB0cDsKICAgICAgICAgICAgICBzd2l0Y2ggKHQpIHsKICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgdHAgPSBJbnQ4QXJyYXk7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgICAgICB0cCA9IFVpbnQ4QXJyYXk7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgICB0cCA9IEludDE2QXJyYXk7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgICB0cCA9IFVpbnQxNkFycmF5OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICAgICAgdHAgPSBJbnQzMkFycmF5OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgICAgdHAgPSBVaW50MzJBcnJheTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICAgIHRwID0gRmxvYXQzMkFycmF5OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgICAgdHAgPSBGbG9hdDY0QXJyYXk7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgICAgdHAgPSBGbG9hdDMyQXJyYXk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiB0cDsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZ2V0UGl4ZWxUeXBlOiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgdmFyIHRwOwogICAgICAgICAgICAgIHN3aXRjaCAodCkgewogICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICB0cCA9ICJTOCI7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgICAgICB0cCA9ICJVOCI7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgICB0cCA9ICJTMTYiOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgICAgdHAgPSAiVTE2IjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICAgIHRwID0gIlMzMiI7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgICB0cCA9ICJVMzIiOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICAgICAgdHAgPSAiRjMyIjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICAgIHRwID0gIkY2NCI7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgICAgdHAgPSAiRjMyIjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuIHRwOwogICAgICAgICAgICB9LAogICAgICAgICAgICBpc1ZhbGlkUGl4ZWxWYWx1ZTogZnVuY3Rpb24odCwgdmFsKSB7CiAgICAgICAgICAgICAgaWYgKHZhbCA9PSBudWxsKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHZhciBpc1ZhbGlkOwogICAgICAgICAgICAgIHN3aXRjaCAodCkgewogICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICBpc1ZhbGlkID0gdmFsID49IC0xMjggJiYgdmFsIDw9IDEyNzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgICAgIGlzVmFsaWQgPSB2YWwgPj0gMCAmJiB2YWwgPD0gMjU1OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgICAgaXNWYWxpZCA9IHZhbCA+PSAtMzI3NjggJiYgdmFsIDw9IDMyNzY3OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgICAgaXNWYWxpZCA9IHZhbCA+PSAwICYmIHZhbCA8PSA2NTUzNjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICAgIGlzVmFsaWQgPSB2YWwgPj0gLTIxNDc0ODM2NDggJiYgdmFsIDw9IDIxNDc0ODM2NDc7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgICBpc1ZhbGlkID0gdmFsID49IDAgJiYgdmFsIDw9IDQyOTQ5NjcyOTY7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgICBpc1ZhbGlkID0gdmFsID49IC0zNDAyNzk5OTM4NzkwMTQ4NGUyMiAmJiB2YWwgPD0gMzQwMjc5OTkzODc5MDE0ODRlMjI7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgICAgICBpc1ZhbGlkID0gdmFsID49IDVlLTMyNCAmJiB2YWwgPD0gMTc5NzY5MzEzNDg2MjMxNTdlMjkyOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAgIGlzVmFsaWQgPSBmYWxzZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWQ7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGdldERhdGFUeXBlU2l6ZTogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgIHZhciBzID0gMDsKICAgICAgICAgICAgICBzd2l0Y2ggKHQpIHsKICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICAgICAgcyA9IDE7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgICBzID0gMjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICAgIHMgPSA0OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgICAgcyA9IDg7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgICAgcyA9IHQ7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiBzOwogICAgICAgICAgICB9LAogICAgICAgICAgICBnZXREYXRhVHlwZVVzZWQ6IGZ1bmN0aW9uKGR0LCB0YykgewogICAgICAgICAgICAgIHZhciB0ID0gZHQ7CiAgICAgICAgICAgICAgc3dpdGNoIChkdCkgewogICAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgICB0ID0gZHQgLSB0YzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICAgIHQgPSBkdCAtIDIgKiB0YzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICAgIGlmICgwID09PSB0YykgewogICAgICAgICAgICAgICAgICAgIHQgPSBkdDsKICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgxID09PSB0YykgewogICAgICAgICAgICAgICAgICAgIHQgPSAyOwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHQgPSAxOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgICAgICBpZiAoMCA9PT0gdGMpIHsKICAgICAgICAgICAgICAgICAgICB0ID0gZHQ7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdCA9IGR0IC0gMiAqIHRjICsgMTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAgIHQgPSBkdDsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiB0OwogICAgICAgICAgICB9LAogICAgICAgICAgICBnZXRPbmVQaXhlbDogZnVuY3Rpb24oYmxvY2ssIGJsb2NrUHRyLCBvZmZzZXRUeXBlLCB2aWV3KSB7CiAgICAgICAgICAgICAgdmFyIHRlbXAgPSAwOwogICAgICAgICAgICAgIHN3aXRjaCAob2Zmc2V0VHlwZSkgewogICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICB0ZW1wID0gdmlldy5nZXRJbnQ4KGJsb2NrUHRyKTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgICAgIHRlbXAgPSB2aWV3LmdldFVpbnQ4KGJsb2NrUHRyKTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICAgIHRlbXAgPSB2aWV3LmdldEludDE2KGJsb2NrUHRyLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICAgIHRlbXAgPSB2aWV3LmdldFVpbnQxNihibG9ja1B0ciwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgICB0ZW1wID0gdmlldy5nZXRJbnQzMihibG9ja1B0ciwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgICB0ZW1wID0gdmlldy5nZXRVSW50MzIoYmxvY2tQdHIsIHRydWUpOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICAgICAgdGVtcCA9IHZpZXcuZ2V0RmxvYXQzMihibG9ja1B0ciwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgICAgICB0ZW1wID0gdmlldy5nZXRGbG9hdDY0KGJsb2NrUHRyLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICB0aHJvdyAidGhlIGRlY29kZXIgZG9lcyBub3QgdW5kZXJzdGFuZCB0aGlzIHBpeGVsIHR5cGUiOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gdGVtcDsKICAgICAgICAgICAgfQogICAgICAgICAgfTsKICAgICAgICAgIHZhciBUcmVlTm9kZSA9IGZ1bmN0aW9uKHZhbCwgbGVmdCwgcmlnaHQpIHsKICAgICAgICAgICAgdGhpcy52YWwgPSB2YWw7CiAgICAgICAgICAgIHRoaXMubGVmdCA9IGxlZnQ7CiAgICAgICAgICAgIHRoaXMucmlnaHQgPSByaWdodDsKICAgICAgICAgIH07CiAgICAgICAgICB2YXIgTGVyYzJEZWNvZGUyID0gewogICAgICAgICAgICAvKgogICAgICAgICAgICAqICoqKioqKioqcmVtb3ZlZCBvcHRpb25zIGNvbXBhcmVkIHRvIExFUkMxLiBXZSBjYW4gYnJpbmcgc29tZSBvZiB0aGVtIGJhY2sgaWYgbmVlZGVkLgogICAgICAgICAgICAgKiByZW1vdmVkIHBpeGVsIHR5cGUuIExFUkMyIGlzIHR5cGVkIGFuZCBkb2Vzbid0IHJlcXVpcmUgdXNlciB0byBnaXZlIHBpeGVsIHR5cGUKICAgICAgICAgICAgICogY2hhbmdlZCBlbmNvZGVkTWFza0RhdGEgdG8gbWFza0RhdGEuIExFUkMyICdzIGpzIHZlcnNpb24gbWFrZSBpdCBmYXN0ZXIgdG8gdXNlIG1hc2tEYXRhIGRpcmVjdGx5LgogICAgICAgICAgICAgKiByZW1vdmVkIHJldHVybk1hc2suIG1hc2sgaXMgdXNlZCBieSBMRVJDMiBpbnRlcm5hbGx5IGFuZCBpcyBjb3N0IGZyZWUuIEluIGNhc2Ugb2YgdXNlciBpbnB1dCBtYXNrLCBpdCdzIHJldHVybmVkIGFzIHdlbGwgYW5kIGhhcyBuZWdsaWJsZSBjb3N0LgogICAgICAgICAgICAgKiByZW1vdmVkIG5vZGF0YXZhbHVlLiBCZWNhdXNlIExFUkMyIHBpeGVscyBhcmUgdHlwZWQsIG5vZGF0YXZhbHVlIHdpbGwgc2FjcmlmeSBhIHVzZWZ1bCB2YWx1ZSBmb3IgbWFueSB0eXBlcyAoOGJpdCwgMTZiaXQpIGV0YywKICAgICAgICAgICAgICogICAgICAgdXNlciBoYXMgdG8gYmUga25vd2xlZGdhYmxlIGVub3VnaCBhYm91dCByYXN0ZXIgYW5kIHRoZWlyIGRhdGEgdG8gYXZvaWQgdXNhYmlsaXR5IGlzc3Vlcy4gc28gbm9kYXRhIHZhbHVlIGlzIHNpbXBseSByZW1vdmVkIG5vdy4KICAgICAgICAgICAgICogICAgICAgV2UgY2FuIGFkZCBpdCBiYWNrIGxhdGVyIGlmIHRoZWlyJ3MgYSBjbGVhciByZXF1aXJlbWVudC4KICAgICAgICAgICAgICogcmVtb3ZlZCBlbmNvZGVkTWFzay4gVGhpcyBvcHRpb24gd2FzIG5vdCBpbXBsZW1lbnRlZCBpbiBMZXJjRGVjb2RlLiBJdCBjYW4gYmUgZG9uZSBhZnRlciBkZWNvZGluZyAobGVzcyBlZmZpY2llbnQpCiAgICAgICAgICAgICAqIHJlbW92ZWQgY29tcHV0ZVVzZWRCaXREZXB0aHMuCiAgICAgICAgICAgICAqCiAgICAgICAgICAgICAqCiAgICAgICAgICAgICAqIHJlc3BvbnNlIGNoYW5nZXMgY29tcGFyZWQgdG8gTEVSQzEKICAgICAgICAgICAgICogMS4gZW5jb2RlZE1hc2tEYXRhIGlzIG5vdCBhdmFpbGFibGUKICAgICAgICAgICAgICogMi4gbm9EYXRhVmFsdWUgaXMgb3B0aW9uYWwgKHJldHVybnMgb25seSBpZiB1c2VyJ3Mgbm9EYXRhVmFsdWUgaXMgd2l0aCBpbiB0aGUgdmFsaWQgZGF0YSB0eXBlIHJhbmdlKQogICAgICAgICAgICAgKiAzLiBtYXNrRGF0YSBpcyBhbHdheXMgYXZhaWxhYmxlCiAgICAgICAgICAgICovCiAgICAgICAgICAgIC8qKioqKioqKioqKioqKioqKgogICAgICAgICAgICAqICBwdWJsaWMgcHJvcGVydGllcwogICAgICAgICAgICAqKioqKioqKioqKioqKioqKiovCiAgICAgICAgICAgIC8vSFVGRk1BTl9MVVRfQklUU19NQVg6IDEyLCAvL3VzZSAyXjEyIGx1dCwgbm90IGNvbmZpZ3VyYWJsZQogICAgICAgICAgICAvKioqKioqKioqKioqKioqKioKICAgICAgICAgICAgKiAgcHVibGljIG1ldGhvZHMKICAgICAgICAgICAgKioqKioqKioqKioqKioqKiovCiAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgKiBEZWNvZGUgYSBMRVJDMiBieXRlIHN0cmVhbSBhbmQgcmV0dXJuIGFuIG9iamVjdCBjb250YWluaW5nIHRoZSBwaXhlbCBkYXRhIGFuZCBvcHRpb25hbCBtZXRhZGF0YS4KICAgICAgICAgICAgICoKICAgICAgICAgICAgICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gaW5wdXQgVGhlIExFUkMgaW5wdXQgYnl0ZSBzdHJlYW0KICAgICAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSBvcHRpb25zIERlY29kaW5nIG9wdGlvbnMKICAgICAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmlucHV0T2Zmc2V0XSBUaGUgbnVtYmVyIG9mIGJ5dGVzIHRvIHNraXAgaW4gdGhlIGlucHV0IGJ5dGUgc3RyZWFtLiBBIHZhbGlkIExFUkMgZmlsZSBpcyBleHBlY3RlZCBhdCB0aGF0IHBvc2l0aW9uCiAgICAgICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucmV0dXJuRmlsZUluZm9dIElmIHRydWUsIHRoZSByZXR1cm4gdmFsdWUgd2lsbCBoYXZlIGEgZmlsZUluZm8gcHJvcGVydHkgdGhhdCBjb250YWlucyBtZXRhZGF0YSBvYnRhaW5lZCBmcm9tIHRoZSBMRVJDIGhlYWRlcnMgYW5kIHRoZSBkZWNvZGluZyBwcm9jZXNzCiAgICAgICAgICAgICAqLwogICAgICAgICAgICBkZWNvZGU6IGZ1bmN0aW9uKGlucHV0LCBvcHRpb25zKSB7CiAgICAgICAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CiAgICAgICAgICAgICAgdmFyIG5vRGF0YVZhbHVlID0gb3B0aW9ucy5ub0RhdGFWYWx1ZTsKICAgICAgICAgICAgICB2YXIgaSA9IDAsIGRhdGEgPSB7fTsKICAgICAgICAgICAgICBkYXRhLnB0ciA9IG9wdGlvbnMuaW5wdXRPZmZzZXQgfHwgMDsKICAgICAgICAgICAgICBkYXRhLnBpeGVscyA9IHt9OwogICAgICAgICAgICAgIGlmICghTGVyYzJIZWxwZXJzLnJlYWRIZWFkZXJJbmZvKGlucHV0LCBkYXRhKSkgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB2YXIgaGVhZGVySW5mbyA9IGRhdGEuaGVhZGVySW5mbzsKICAgICAgICAgICAgICB2YXIgZmlsZVZlcnNpb24gPSBoZWFkZXJJbmZvLmZpbGVWZXJzaW9uOwogICAgICAgICAgICAgIHZhciBPdXRQaXhlbFR5cGVBcnJheSA9IExlcmMySGVscGVycy5nZXREYXRhVHlwZUFycmF5KGhlYWRlckluZm8uaW1hZ2VUeXBlKTsKICAgICAgICAgICAgICBMZXJjMkhlbHBlcnMucmVhZE1hc2soaW5wdXQsIGRhdGEpOwogICAgICAgICAgICAgIGlmIChoZWFkZXJJbmZvLm51bVZhbGlkUGl4ZWwgIT09IGhlYWRlckluZm8ud2lkdGggKiBoZWFkZXJJbmZvLmhlaWdodCAmJiAhZGF0YS5waXhlbHMucmVzdWx0TWFzaykgewogICAgICAgICAgICAgICAgZGF0YS5waXhlbHMucmVzdWx0TWFzayA9IG9wdGlvbnMubWFza0RhdGE7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHZhciBudW1QaXhlbHMgPSBoZWFkZXJJbmZvLndpZHRoICogaGVhZGVySW5mby5oZWlnaHQ7CiAgICAgICAgICAgICAgZGF0YS5waXhlbHMucmVzdWx0UGl4ZWxzID0gbmV3IE91dFBpeGVsVHlwZUFycmF5KG51bVBpeGVscyAqIGhlYWRlckluZm8ubnVtRGltcyk7CiAgICAgICAgICAgICAgZGF0YS5jb3VudGVyID0gewogICAgICAgICAgICAgICAgb25lc3dlZXA6IDAsCiAgICAgICAgICAgICAgICB1bmNvbXByZXNzZWQ6IDAsCiAgICAgICAgICAgICAgICBsdXQ6IDAsCiAgICAgICAgICAgICAgICBiaXRzdHVmZmVyOiAwLAogICAgICAgICAgICAgICAgY29uc3RhbnQ6IDAsCiAgICAgICAgICAgICAgICBjb25zdGFudG9mZnNldDogMAogICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgaWYgKGhlYWRlckluZm8ubnVtVmFsaWRQaXhlbCAhPT0gMCkgewogICAgICAgICAgICAgICAgaWYgKGhlYWRlckluZm8uek1heCA9PT0gaGVhZGVySW5mby56TWluKSB7CiAgICAgICAgICAgICAgICAgIExlcmMySGVscGVycy5jb25zdHJ1Y3RDb25zdGFudFN1cmZhY2UoZGF0YSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZpbGVWZXJzaW9uID49IDQgJiYgTGVyYzJIZWxwZXJzLmNoZWNrTWluTWF4UmFuZ2VzKGlucHV0LCBkYXRhKSkgewogICAgICAgICAgICAgICAgICBMZXJjMkhlbHBlcnMuY29uc3RydWN0Q29uc3RhbnRTdXJmYWNlKGRhdGEpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgdmFyIHZpZXcgPSBuZXcgRGF0YVZpZXcoaW5wdXQsIGRhdGEucHRyLCAyKTsKICAgICAgICAgICAgICAgICAgdmFyIGJSZWFkRGF0YU9uZVN3ZWVwID0gdmlldy5nZXRVaW50OCgwKTsKICAgICAgICAgICAgICAgICAgZGF0YS5wdHIrKzsKICAgICAgICAgICAgICAgICAgaWYgKGJSZWFkRGF0YU9uZVN3ZWVwKSB7CiAgICAgICAgICAgICAgICAgICAgTGVyYzJIZWxwZXJzLnJlYWREYXRhT25lU3dlZXAoaW5wdXQsIGRhdGEsIE91dFBpeGVsVHlwZUFycmF5KTsKICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZVZlcnNpb24gPiAxICYmIGhlYWRlckluZm8uaW1hZ2VUeXBlIDw9IDEgJiYgTWF0aC5hYnMoaGVhZGVySW5mby5tYXhaRXJyb3IgLSAwLjUpIDwgMWUtNSkgewogICAgICAgICAgICAgICAgICAgICAgdmFyIGZsYWdIdWZmbWFuID0gdmlldy5nZXRVaW50OCgxKTsKICAgICAgICAgICAgICAgICAgICAgIGRhdGEucHRyKys7CiAgICAgICAgICAgICAgICAgICAgICBkYXRhLmVuY29kZU1vZGUgPSBmbGFnSHVmZm1hbjsKICAgICAgICAgICAgICAgICAgICAgIGlmIChmbGFnSHVmZm1hbiA+IDIgfHwgZmlsZVZlcnNpb24gPCA0ICYmIGZsYWdIdWZmbWFuID4gMSkgewogICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyAiSW52YWxpZCBIdWZmbWFuIGZsYWcgIiArIGZsYWdIdWZmbWFuOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgaWYgKGZsYWdIdWZmbWFuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIExlcmMySGVscGVycy5yZWFkSHVmZm1hbihpbnB1dCwgZGF0YSwgT3V0UGl4ZWxUeXBlQXJyYXkpOwogICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgTGVyYzJIZWxwZXJzLnJlYWRUaWxlcyhpbnB1dCwgZGF0YSwgT3V0UGl4ZWxUeXBlQXJyYXkpOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICBMZXJjMkhlbHBlcnMucmVhZFRpbGVzKGlucHV0LCBkYXRhLCBPdXRQaXhlbFR5cGVBcnJheSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGRhdGEuZW9mT2Zmc2V0ID0gZGF0YS5wdHI7CiAgICAgICAgICAgICAgdmFyIGRpZmY7CiAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuaW5wdXRPZmZzZXQpIHsKICAgICAgICAgICAgICAgIGRpZmYgPSBkYXRhLmhlYWRlckluZm8uYmxvYlNpemUgKyBvcHRpb25zLmlucHV0T2Zmc2V0IC0gZGF0YS5wdHI7CiAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMoZGlmZikgPj0gMSkgewogICAgICAgICAgICAgICAgICBkYXRhLmVvZk9mZnNldCA9IG9wdGlvbnMuaW5wdXRPZmZzZXQgKyBkYXRhLmhlYWRlckluZm8uYmxvYlNpemU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGRpZmYgPSBkYXRhLmhlYWRlckluZm8uYmxvYlNpemUgLSBkYXRhLnB0cjsKICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyhkaWZmKSA+PSAxKSB7CiAgICAgICAgICAgICAgICAgIGRhdGEuZW9mT2Zmc2V0ID0gZGF0YS5oZWFkZXJJbmZvLmJsb2JTaXplOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gewogICAgICAgICAgICAgICAgd2lkdGg6IGhlYWRlckluZm8ud2lkdGgsCiAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlYWRlckluZm8uaGVpZ2h0LAogICAgICAgICAgICAgICAgcGl4ZWxEYXRhOiBkYXRhLnBpeGVscy5yZXN1bHRQaXhlbHMsCiAgICAgICAgICAgICAgICBtaW5WYWx1ZTogaGVhZGVySW5mby56TWluLAogICAgICAgICAgICAgICAgbWF4VmFsdWU6IGhlYWRlckluZm8uek1heCwKICAgICAgICAgICAgICAgIHZhbGlkUGl4ZWxDb3VudDogaGVhZGVySW5mby5udW1WYWxpZFBpeGVsLAogICAgICAgICAgICAgICAgZGltQ291bnQ6IGhlYWRlckluZm8ubnVtRGltcywKICAgICAgICAgICAgICAgIGRpbVN0YXRzOiB7CiAgICAgICAgICAgICAgICAgIG1pblZhbHVlczogaGVhZGVySW5mby5taW5WYWx1ZXMsCiAgICAgICAgICAgICAgICAgIG1heFZhbHVlczogaGVhZGVySW5mby5tYXhWYWx1ZXMKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBtYXNrRGF0YTogZGF0YS5waXhlbHMucmVzdWx0TWFzawogICAgICAgICAgICAgICAgLy9ub0RhdGFWYWx1ZTogbm9EYXRhVmFsdWUKICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIGlmIChkYXRhLnBpeGVscy5yZXN1bHRNYXNrICYmIExlcmMySGVscGVycy5pc1ZhbGlkUGl4ZWxWYWx1ZShoZWFkZXJJbmZvLmltYWdlVHlwZSwgbm9EYXRhVmFsdWUpKSB7CiAgICAgICAgICAgICAgICB2YXIgbWFzayA9IGRhdGEucGl4ZWxzLnJlc3VsdE1hc2s7CiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbnVtUGl4ZWxzOyBpKyspIHsKICAgICAgICAgICAgICAgICAgaWYgKCFtYXNrW2ldKSB7CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnBpeGVsRGF0YVtpXSA9IG5vRGF0YVZhbHVlOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXN1bHQubm9EYXRhVmFsdWUgPSBub0RhdGFWYWx1ZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZGF0YS5ub0RhdGFWYWx1ZSA9IG5vRGF0YVZhbHVlOwogICAgICAgICAgICAgIGlmIChvcHRpb25zLnJldHVybkZpbGVJbmZvKSB7CiAgICAgICAgICAgICAgICByZXN1bHQuZmlsZUluZm8gPSBMZXJjMkhlbHBlcnMuZm9ybWF0RmlsZUluZm8oZGF0YSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGdldEJhbmRDb3VudDogZnVuY3Rpb24oaW5wdXQpIHsKICAgICAgICAgICAgICB2YXIgY291bnQgPSAwOwogICAgICAgICAgICAgIHZhciBpID0gMDsKICAgICAgICAgICAgICB2YXIgdGVtcCA9IHt9OwogICAgICAgICAgICAgIHRlbXAucHRyID0gMDsKICAgICAgICAgICAgICB0ZW1wLnBpeGVscyA9IHt9OwogICAgICAgICAgICAgIHdoaWxlIChpIDwgaW5wdXQuYnl0ZUxlbmd0aCAtIDU4KSB7CiAgICAgICAgICAgICAgICBMZXJjMkhlbHBlcnMucmVhZEhlYWRlckluZm8oaW5wdXQsIHRlbXApOwogICAgICAgICAgICAgICAgaSArPSB0ZW1wLmhlYWRlckluZm8uYmxvYlNpemU7CiAgICAgICAgICAgICAgICBjb3VudCsrOwogICAgICAgICAgICAgICAgdGVtcC5wdHIgPSBpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gY291bnQ7CiAgICAgICAgICAgIH0KICAgICAgICAgIH07CiAgICAgICAgICByZXR1cm4gTGVyYzJEZWNvZGUyOwogICAgICAgIH0oKTsKICAgICAgICB2YXIgaXNQbGF0Zm9ybUxpdHRsZUVuZGlhbiA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgdmFyIGEzID0gbmV3IEFycmF5QnVmZmVyKDQpOwogICAgICAgICAgdmFyIGIgPSBuZXcgVWludDhBcnJheShhMyk7CiAgICAgICAgICB2YXIgYyA9IG5ldyBVaW50MzJBcnJheShhMyk7CiAgICAgICAgICBjWzBdID0gMTsKICAgICAgICAgIHJldHVybiBiWzBdID09PSAxOwogICAgICAgIH0oKTsKICAgICAgICB2YXIgTGVyYzIgPSB7CiAgICAgICAgICAvKioqKioqKioqKioqd3JhcHBlcioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCiAgICAgICAgICAvKioKICAgICAgICAgICAqIEEgd3JhcHBlciBmb3IgZGVjb2RpbmcgYm90aCBMRVJDMSBhbmQgTEVSQzIgYnl0ZSBzdHJlYW1zIGNhcGFibGUgb2YgaGFuZGxpbmcgbXVsdGliYW5kIHBpeGVsIGJsb2NrcyBmb3IgdmFyaW91cyBwaXhlbCB0eXBlcy4KICAgICAgICAgICAqCiAgICAgICAgICAgKiBAYWxpYXMgbW9kdWxlOkxlcmMKICAgICAgICAgICAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGlucHV0IFRoZSBMRVJDIGlucHV0IGJ5dGUgc3RyZWFtCiAgICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIFRoZSBkZWNvZGluZyBvcHRpb25zIGJlbG93IGFyZSBvcHRpb25hbC4KICAgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5pbnB1dE9mZnNldF0gVGhlIG51bWJlciBvZiBieXRlcyB0byBza2lwIGluIHRoZSBpbnB1dCBieXRlIHN0cmVhbS4gQSB2YWxpZCBMZXJjIGZpbGUgaXMgZXhwZWN0ZWQgYXQgdGhhdCBwb3NpdGlvbi4KICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5waXhlbFR5cGVdIChMRVJDMSBvbmx5KSBEZWZhdWx0IHZhbHVlIGlzIEYzMi4gVmFsaWQgcGl4ZWwgdHlwZXMgZm9yIGlucHV0IGFyZSBVOC9TOC9TMTYvVTE2L1MzMi9VMzIvRjMyLgogICAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm5vRGF0YVZhbHVlXSAoTEVSQzEgb25seSkuIEl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGUgcmV0dXJuZWQgbWFzayBpbnN0ZWFkIG9mIHNldHRpbmcgdGhpcyB2YWx1ZS4KICAgICAgICAgICAqIEByZXR1cm5zIHt7d2lkdGgsIGhlaWdodCwgcGl4ZWxzLCBwaXhlbFR5cGUsIG1hc2ssIHN0YXRpc3RpY3N9fQogICAgICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcn0gd2lkdGggV2lkdGggb2YgZGVjb2RlZCBpbWFnZS4KICAgICAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGhlaWdodCBIZWlnaHQgb2YgZGVjb2RlZCBpbWFnZS4KICAgICAgICAgICAgICogQHByb3BlcnR5IHthcnJheX0gcGl4ZWxzIFtiYW5kMSwgYmFuZDIsIOKApl0gRWFjaCBiYW5kIGlzIGEgdHlwZWQgYXJyYXkgb2Ygd2lkdGgqaGVpZ2h0LgogICAgICAgICAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gcGl4ZWxUeXBlIFRoZSB0eXBlIG9mIHBpeGVscyByZXByZXNlbnRlZCBpbiB0aGUgb3V0cHV0LgogICAgICAgICAgICAgKiBAcHJvcGVydHkge21hc2t9IG1hc2sgVHlwZWQgYXJyYXkgd2l0aCBhIHNpemUgb2Ygd2lkdGgqaGVpZ2h0LCBvciBudWxsIGlmIGFsbCBwaXhlbHMgYXJlIHZhbGlkLgogICAgICAgICAgICAgKiBAcHJvcGVydHkge2FycmF5fSBzdGF0aXN0aWNzIFtzdGF0aXN0aWNzX2JhbmQxLCBzdGF0aXN0aWNzX2JhbmQyLCDigKZdIEVhY2ggZWxlbWVudCBpcyBhIHN0YXRpc3RpY3Mgb2JqZWN0IHJlcHJlc2VudGluZyBtaW4gYW5kIG1heCB2YWx1ZXMKICAgICAgICAgICoqLwogICAgICAgICAgZGVjb2RlOiBmdW5jdGlvbihlbmNvZGVkRGF0YSwgb3B0aW9ucykgewogICAgICAgICAgICBpZiAoIWlzUGxhdGZvcm1MaXR0bGVFbmRpYW4pIHsKICAgICAgICAgICAgICB0aHJvdyAiQmlnIGVuZGlhbiBzeXN0ZW0gaXMgbm90IHN1cHBvcnRlZC4iOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwogICAgICAgICAgICB2YXIgaW5wdXRPZmZzZXQgPSBvcHRpb25zLmlucHV0T2Zmc2V0IHx8IDA7CiAgICAgICAgICAgIHZhciBmaWxlSWRWaWV3ID0gbmV3IFVpbnQ4QXJyYXkoZW5jb2RlZERhdGEsIGlucHV0T2Zmc2V0LCAxMCk7CiAgICAgICAgICAgIHZhciBmaWxlSWRlbnRpZmllclN0cmluZyA9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgZmlsZUlkVmlldyk7CiAgICAgICAgICAgIHZhciBsZXJjLCBtYWpvclZlcnNpb247CiAgICAgICAgICAgIGlmIChmaWxlSWRlbnRpZmllclN0cmluZy50cmltKCkgPT09ICJDbnRaSW1hZ2UiKSB7CiAgICAgICAgICAgICAgbGVyYyA9IExlcmNEZWNvZGU7CiAgICAgICAgICAgICAgbWFqb3JWZXJzaW9uID0gMTsKICAgICAgICAgICAgfSBlbHNlIGlmIChmaWxlSWRlbnRpZmllclN0cmluZy5zdWJzdHJpbmcoMCwgNSkgPT09ICJMZXJjMiIpIHsKICAgICAgICAgICAgICBsZXJjID0gTGVyYzJEZWNvZGU7CiAgICAgICAgICAgICAgbWFqb3JWZXJzaW9uID0gMjsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICB0aHJvdyAiVW5leHBlY3RlZCBmaWxlIGlkZW50aWZpZXIgc3RyaW5nOiAiICsgZmlsZUlkZW50aWZpZXJTdHJpbmc7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGlQbGFuZSA9IDAsIGVvZiA9IGVuY29kZWREYXRhLmJ5dGVMZW5ndGggLSAxMCwgZW5jb2RlZE1hc2tEYXRhLCBiYW5kTWFza3MgPSBbXSwgYmFuZE1hc2ssIG1hc2tEYXRhOwogICAgICAgICAgICB2YXIgZGVjb2RlZFBpeGVsQmxvY2sgPSB7CiAgICAgICAgICAgICAgd2lkdGg6IDAsCiAgICAgICAgICAgICAgaGVpZ2h0OiAwLAogICAgICAgICAgICAgIHBpeGVsczogW10sCiAgICAgICAgICAgICAgcGl4ZWxUeXBlOiBvcHRpb25zLnBpeGVsVHlwZSwKICAgICAgICAgICAgICBtYXNrOiBudWxsLAogICAgICAgICAgICAgIHN0YXRpc3RpY3M6IFtdCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHdoaWxlIChpbnB1dE9mZnNldCA8IGVvZikgewogICAgICAgICAgICAgIHZhciByZXN1bHQgPSBsZXJjLmRlY29kZShlbmNvZGVkRGF0YSwgewogICAgICAgICAgICAgICAgaW5wdXRPZmZzZXQsCiAgICAgICAgICAgICAgICAvL2ZvciBib3RoIGxlcmMxIGFuZCBsZXJjMgogICAgICAgICAgICAgICAgZW5jb2RlZE1hc2tEYXRhLAogICAgICAgICAgICAgICAgLy9sZXJjMSBvbmx5CiAgICAgICAgICAgICAgICBtYXNrRGF0YSwKICAgICAgICAgICAgICAgIC8vbGVyYzIgb25seQogICAgICAgICAgICAgICAgcmV0dXJuTWFzazogaVBsYW5lID09PSAwID8gdHJ1ZSA6IGZhbHNlLAogICAgICAgICAgICAgICAgLy9sZXJjMSBvbmx5CiAgICAgICAgICAgICAgICByZXR1cm5FbmNvZGVkTWFzazogaVBsYW5lID09PSAwID8gdHJ1ZSA6IGZhbHNlLAogICAgICAgICAgICAgICAgLy9sZXJjMSBvbmx5CiAgICAgICAgICAgICAgICByZXR1cm5GaWxlSW5mbzogdHJ1ZSwKICAgICAgICAgICAgICAgIC8vZm9yIGJvdGggbGVyYzEgYW5kIGxlcmMyCiAgICAgICAgICAgICAgICBwaXhlbFR5cGU6IG9wdGlvbnMucGl4ZWxUeXBlIHx8IG51bGwsCiAgICAgICAgICAgICAgICAvL2xlcmMxIG9ubHkKICAgICAgICAgICAgICAgIG5vRGF0YVZhbHVlOiBvcHRpb25zLm5vRGF0YVZhbHVlIHx8IG51bGwKICAgICAgICAgICAgICAgIC8vbGVyYzEgb25seQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIGlucHV0T2Zmc2V0ID0gcmVzdWx0LmZpbGVJbmZvLmVvZk9mZnNldDsKICAgICAgICAgICAgICBpZiAoaVBsYW5lID09PSAwKSB7CiAgICAgICAgICAgICAgICBlbmNvZGVkTWFza0RhdGEgPSByZXN1bHQuZW5jb2RlZE1hc2tEYXRhOwogICAgICAgICAgICAgICAgbWFza0RhdGEgPSByZXN1bHQubWFza0RhdGE7CiAgICAgICAgICAgICAgICBkZWNvZGVkUGl4ZWxCbG9jay53aWR0aCA9IHJlc3VsdC53aWR0aDsKICAgICAgICAgICAgICAgIGRlY29kZWRQaXhlbEJsb2NrLmhlaWdodCA9IHJlc3VsdC5oZWlnaHQ7CiAgICAgICAgICAgICAgICBkZWNvZGVkUGl4ZWxCbG9jay5kaW1Db3VudCA9IHJlc3VsdC5kaW1Db3VudCB8fCAxOwogICAgICAgICAgICAgICAgZGVjb2RlZFBpeGVsQmxvY2sucGl4ZWxUeXBlID0gcmVzdWx0LnBpeGVsVHlwZSB8fCByZXN1bHQuZmlsZUluZm8ucGl4ZWxUeXBlOwogICAgICAgICAgICAgICAgZGVjb2RlZFBpeGVsQmxvY2subWFzayA9IHJlc3VsdC5tYXNrRGF0YTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKG1ham9yVmVyc2lvbiA+IDEgJiYgcmVzdWx0LmZpbGVJbmZvLm1hc2sgJiYgcmVzdWx0LmZpbGVJbmZvLm1hc2subnVtQnl0ZXMgPiAwKSB7CiAgICAgICAgICAgICAgICBiYW5kTWFza3MucHVzaChyZXN1bHQubWFza0RhdGEpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpUGxhbmUrKzsKICAgICAgICAgICAgICBkZWNvZGVkUGl4ZWxCbG9jay5waXhlbHMucHVzaChyZXN1bHQucGl4ZWxEYXRhKTsKICAgICAgICAgICAgICBkZWNvZGVkUGl4ZWxCbG9jay5zdGF0aXN0aWNzLnB1c2goewogICAgICAgICAgICAgICAgbWluVmFsdWU6IHJlc3VsdC5taW5WYWx1ZSwKICAgICAgICAgICAgICAgIG1heFZhbHVlOiByZXN1bHQubWF4VmFsdWUsCiAgICAgICAgICAgICAgICBub0RhdGFWYWx1ZTogcmVzdWx0Lm5vRGF0YVZhbHVlLAogICAgICAgICAgICAgICAgZGltU3RhdHM6IHJlc3VsdC5kaW1TdGF0cwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBpLCBqLCBudW1QaXhlbHM7CiAgICAgICAgICAgIGlmIChtYWpvclZlcnNpb24gPiAxICYmIGJhbmRNYXNrcy5sZW5ndGggPiAxKSB7CiAgICAgICAgICAgICAgbnVtUGl4ZWxzID0gZGVjb2RlZFBpeGVsQmxvY2sud2lkdGggKiBkZWNvZGVkUGl4ZWxCbG9jay5oZWlnaHQ7CiAgICAgICAgICAgICAgZGVjb2RlZFBpeGVsQmxvY2suYmFuZE1hc2tzID0gYmFuZE1hc2tzOwogICAgICAgICAgICAgIG1hc2tEYXRhID0gbmV3IFVpbnQ4QXJyYXkobnVtUGl4ZWxzKTsKICAgICAgICAgICAgICBtYXNrRGF0YS5zZXQoYmFuZE1hc2tzWzBdKTsKICAgICAgICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYmFuZE1hc2tzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICBiYW5kTWFzayA9IGJhbmRNYXNrc1tpXTsKICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBudW1QaXhlbHM7IGorKykgewogICAgICAgICAgICAgICAgICBtYXNrRGF0YVtqXSA9IG1hc2tEYXRhW2pdICYgYmFuZE1hc2tbal07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGRlY29kZWRQaXhlbEJsb2NrLm1hc2tEYXRhID0gbWFza0RhdGE7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGRlY29kZWRQaXhlbEJsb2NrOwogICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICJmdW5jdGlvbiIgJiYgZGVmaW5lLmFtZCkgewogICAgICAgICAgZGVmaW5lKFtdLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIExlcmMyOwogICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9PSAidW5kZWZpbmVkIiAmJiBtb2R1bGUuZXhwb3J0cykgewogICAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBMZXJjMjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy5MZXJjID0gTGVyYzI7CiAgICAgICAgfQogICAgICB9KSgpOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlVmVydGljZXNGcm9tSGVpZ2h0bWFwLmpzCiAgdmFyIGNyZWF0ZVZlcnRpY2VzRnJvbUhlaWdodG1hcF9leHBvcnRzID0ge307CiAgX19leHBvcnQoY3JlYXRlVmVydGljZXNGcm9tSGVpZ2h0bWFwX2V4cG9ydHMsIHsKICAgIGRlZmF1bHQ6ICgpID0+IGNyZWF0ZVZlcnRpY2VzRnJvbUhlaWdodG1hcF9kZWZhdWx0CiAgfSk7CiAgZnVuY3Rpb24gY3JlYXRlVmVydGljZXNGcm9tSGVpZ2h0bWFwKHBhcmFtZXRlcnMsIHRyYW5zZmVyYWJsZU9iamVjdHMpIHsKICAgIGlmIChwYXJhbWV0ZXJzLmVuY29kaW5nID09PSBIZWlnaHRtYXBFbmNvZGluZ19kZWZhdWx0LkxFUkMpIHsKICAgICAgbGV0IHJlc3VsdDsKICAgICAgdHJ5IHsKICAgICAgICByZXN1bHQgPSBpbXBvcnRfbGVyYy5kZWZhdWx0LmRlY29kZShwYXJhbWV0ZXJzLmhlaWdodG1hcCk7CiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcl9kZWZhdWx0KGVycm9yKTsKICAgICAgfQogICAgICBjb25zdCBsZXJjU3RhdGlzdGljcyA9IHJlc3VsdC5zdGF0aXN0aWNzWzBdOwogICAgICBpZiAobGVyY1N0YXRpc3RpY3MubWluVmFsdWUgPT09IE51bWJlci5NQVhfVkFMVUUpIHsKICAgICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yX2RlZmF1bHQoIkludmFsaWQgdGlsZSBkYXRhIik7CiAgICAgIH0KICAgICAgcGFyYW1ldGVycy5oZWlnaHRtYXAgPSByZXN1bHQucGl4ZWxzWzBdOwogICAgICBwYXJhbWV0ZXJzLndpZHRoID0gcmVzdWx0LndpZHRoOwogICAgICBwYXJhbWV0ZXJzLmhlaWdodCA9IHJlc3VsdC5oZWlnaHQ7CiAgICB9CiAgICBwYXJhbWV0ZXJzLmVsbGlwc29pZCA9IEVsbGlwc29pZF9kZWZhdWx0LmNsb25lKHBhcmFtZXRlcnMuZWxsaXBzb2lkKTsKICAgIHBhcmFtZXRlcnMucmVjdGFuZ2xlID0gUmVjdGFuZ2xlX2RlZmF1bHQuY2xvbmUocGFyYW1ldGVycy5yZWN0YW5nbGUpOwogICAgY29uc3Qgc3RhdGlzdGljczIgPSBIZWlnaHRtYXBUZXNzZWxsYXRvcl9kZWZhdWx0LmNvbXB1dGVWZXJ0aWNlcyhwYXJhbWV0ZXJzKTsKICAgIGNvbnN0IHZlcnRpY2VzID0gc3RhdGlzdGljczIudmVydGljZXM7CiAgICB0cmFuc2ZlcmFibGVPYmplY3RzLnB1c2godmVydGljZXMuYnVmZmVyKTsKICAgIHJldHVybiB7CiAgICAgIHZlcnRpY2VzOiB2ZXJ0aWNlcy5idWZmZXIsCiAgICAgIG51bWJlck9mQXR0cmlidXRlczogc3RhdGlzdGljczIuZW5jb2Rpbmcuc3RyaWRlLAogICAgICBtaW5pbXVtSGVpZ2h0OiBzdGF0aXN0aWNzMi5taW5pbXVtSGVpZ2h0LAogICAgICBtYXhpbXVtSGVpZ2h0OiBzdGF0aXN0aWNzMi5tYXhpbXVtSGVpZ2h0LAogICAgICBncmlkV2lkdGg6IHBhcmFtZXRlcnMud2lkdGgsCiAgICAgIGdyaWRIZWlnaHQ6IHBhcmFtZXRlcnMuaGVpZ2h0LAogICAgICBib3VuZGluZ1NwaGVyZTNEOiBzdGF0aXN0aWNzMi5ib3VuZGluZ1NwaGVyZTNELAogICAgICBvcmllbnRlZEJvdW5kaW5nQm94OiBzdGF0aXN0aWNzMi5vcmllbnRlZEJvdW5kaW5nQm94LAogICAgICBvY2NsdWRlZVBvaW50SW5TY2FsZWRTcGFjZTogc3RhdGlzdGljczIub2NjbHVkZWVQb2ludEluU2NhbGVkU3BhY2UsCiAgICAgIGVuY29kaW5nOiBzdGF0aXN0aWNzMi5lbmNvZGluZywKICAgICAgd2VzdEluZGljZXNTb3V0aFRvTm9ydGg6IHN0YXRpc3RpY3MyLndlc3RJbmRpY2VzU291dGhUb05vcnRoLAogICAgICBzb3V0aEluZGljZXNFYXN0VG9XZXN0OiBzdGF0aXN0aWNzMi5zb3V0aEluZGljZXNFYXN0VG9XZXN0LAogICAgICBlYXN0SW5kaWNlc05vcnRoVG9Tb3V0aDogc3RhdGlzdGljczIuZWFzdEluZGljZXNOb3J0aFRvU291dGgsCiAgICAgIG5vcnRoSW5kaWNlc1dlc3RUb0Vhc3Q6IHN0YXRpc3RpY3MyLm5vcnRoSW5kaWNlc1dlc3RUb0Vhc3QKICAgIH07CiAgfQogIHZhciBpbXBvcnRfbGVyYywgY3JlYXRlVmVydGljZXNGcm9tSGVpZ2h0bWFwX2RlZmF1bHQ7CiAgdmFyIGluaXRfY3JlYXRlVmVydGljZXNGcm9tSGVpZ2h0bWFwID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVWZXJ0aWNlc0Zyb21IZWlnaHRtYXAuanMiKCkgewogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBpbml0X0hlaWdodG1hcEVuY29kaW5nKCk7CiAgICAgIGluaXRfSGVpZ2h0bWFwVGVzc2VsbGF0b3IoKTsKICAgICAgaW5pdF9SZWN0YW5nbGUoKTsKICAgICAgaW5pdF9SdW50aW1lRXJyb3IoKTsKICAgICAgaW1wb3J0X2xlcmMgPSBfX3RvRVNNKHJlcXVpcmVfTGVyY0RlY29kZSgpLCAxKTsKICAgICAgaW5pdF9jcmVhdGVUYXNrUHJvY2Vzc29yV29ya2VyKCk7CiAgICAgIGNyZWF0ZVZlcnRpY2VzRnJvbUhlaWdodG1hcF9kZWZhdWx0ID0gY3JlYXRlVGFza1Byb2Nlc3Nvcldvcmtlcl9kZWZhdWx0KGNyZWF0ZVZlcnRpY2VzRnJvbUhlaWdodG1hcCk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9UZXJyYWluUHJvdmlkZXIuanMKICBmdW5jdGlvbiBUZXJyYWluUHJvdmlkZXIoKSB7CiAgICBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0LnRocm93SW5zdGFudGlhdGlvbkVycm9yKCk7CiAgfQogIGZ1bmN0aW9uIGdldEVkZ2VJbmRpY2VzKHdpZHRoLCBoZWlnaHQpIHsKICAgIGNvbnN0IHdlc3RJbmRpY2VzU291dGhUb05vcnRoID0gbmV3IEFycmF5KGhlaWdodCk7CiAgICBjb25zdCBzb3V0aEluZGljZXNFYXN0VG9XZXN0ID0gbmV3IEFycmF5KHdpZHRoKTsKICAgIGNvbnN0IGVhc3RJbmRpY2VzTm9ydGhUb1NvdXRoID0gbmV3IEFycmF5KGhlaWdodCk7CiAgICBjb25zdCBub3J0aEluZGljZXNXZXN0VG9FYXN0ID0gbmV3IEFycmF5KHdpZHRoKTsKICAgIGxldCBpOwogICAgZm9yIChpID0gMDsgaSA8IHdpZHRoOyArK2kpIHsKICAgICAgbm9ydGhJbmRpY2VzV2VzdFRvRWFzdFtpXSA9IGk7CiAgICAgIHNvdXRoSW5kaWNlc0Vhc3RUb1dlc3RbaV0gPSB3aWR0aCAqIGhlaWdodCAtIDEgLSBpOwogICAgfQogICAgZm9yIChpID0gMDsgaSA8IGhlaWdodDsgKytpKSB7CiAgICAgIGVhc3RJbmRpY2VzTm9ydGhUb1NvdXRoW2ldID0gKGkgKyAxKSAqIHdpZHRoIC0gMTsKICAgICAgd2VzdEluZGljZXNTb3V0aFRvTm9ydGhbaV0gPSAoaGVpZ2h0IC0gaSAtIDEpICogd2lkdGg7CiAgICB9CiAgICByZXR1cm4gewogICAgICB3ZXN0SW5kaWNlc1NvdXRoVG9Ob3J0aCwKICAgICAgc291dGhJbmRpY2VzRWFzdFRvV2VzdCwKICAgICAgZWFzdEluZGljZXNOb3J0aFRvU291dGgsCiAgICAgIG5vcnRoSW5kaWNlc1dlc3RUb0Vhc3QKICAgIH07CiAgfQogIGZ1bmN0aW9uIGFkZFJlZ3VsYXJHcmlkSW5kaWNlcyh3aWR0aCwgaGVpZ2h0LCBpbmRpY2VzLCBvZmZzZXQpIHsKICAgIGxldCBpbmRleCA9IDA7CiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGhlaWdodCAtIDE7ICsraikgewogICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHdpZHRoIC0gMTsgKytpKSB7CiAgICAgICAgY29uc3QgdXBwZXJMZWZ0ID0gaW5kZXg7CiAgICAgICAgY29uc3QgbG93ZXJMZWZ0ID0gdXBwZXJMZWZ0ICsgd2lkdGg7CiAgICAgICAgY29uc3QgbG93ZXJSaWdodCA9IGxvd2VyTGVmdCArIDE7CiAgICAgICAgY29uc3QgdXBwZXJSaWdodCA9IHVwcGVyTGVmdCArIDE7CiAgICAgICAgaW5kaWNlc1tvZmZzZXQrK10gPSB1cHBlckxlZnQ7CiAgICAgICAgaW5kaWNlc1tvZmZzZXQrK10gPSBsb3dlckxlZnQ7CiAgICAgICAgaW5kaWNlc1tvZmZzZXQrK10gPSB1cHBlclJpZ2h0OwogICAgICAgIGluZGljZXNbb2Zmc2V0KytdID0gdXBwZXJSaWdodDsKICAgICAgICBpbmRpY2VzW29mZnNldCsrXSA9IGxvd2VyTGVmdDsKICAgICAgICBpbmRpY2VzW29mZnNldCsrXSA9IGxvd2VyUmlnaHQ7CiAgICAgICAgKytpbmRleDsKICAgICAgfQogICAgICArK2luZGV4OwogICAgfQogIH0KICBmdW5jdGlvbiBhZGRTa2lydEluZGljZXMoZWRnZUluZGljZXMsIHZlcnRleEluZGV4LCBpbmRpY2VzLCBvZmZzZXQpIHsKICAgIGxldCBwcmV2aW91c0luZGV4ID0gZWRnZUluZGljZXNbMF07CiAgICBjb25zdCBsZW5ndGggPSBlZGdlSW5kaWNlcy5sZW5ndGg7CiAgICBmb3IgKGxldCBpID0gMTsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgIGNvbnN0IGluZGV4ID0gZWRnZUluZGljZXNbaV07CiAgICAgIGluZGljZXNbb2Zmc2V0KytdID0gcHJldmlvdXNJbmRleDsKICAgICAgaW5kaWNlc1tvZmZzZXQrK10gPSBpbmRleDsKICAgICAgaW5kaWNlc1tvZmZzZXQrK10gPSB2ZXJ0ZXhJbmRleDsKICAgICAgaW5kaWNlc1tvZmZzZXQrK10gPSB2ZXJ0ZXhJbmRleDsKICAgICAgaW5kaWNlc1tvZmZzZXQrK10gPSBpbmRleDsKICAgICAgaW5kaWNlc1tvZmZzZXQrK10gPSB2ZXJ0ZXhJbmRleCArIDE7CiAgICAgIHByZXZpb3VzSW5kZXggPSBpbmRleDsKICAgICAgKyt2ZXJ0ZXhJbmRleDsKICAgIH0KICAgIHJldHVybiBvZmZzZXQ7CiAgfQogIHZhciByZWd1bGFyR3JpZEluZGljZXNDYWNoZSwgcmVndWxhckdyaWRBbmRFZGdlSW5kaWNlc0NhY2hlLCByZWd1bGFyR3JpZEFuZFNraXJ0QW5kRWRnZUluZGljZXNDYWNoZSwgVGVycmFpblByb3ZpZGVyX2RlZmF1bHQ7CiAgdmFyIGluaXRfVGVycmFpblByb3ZpZGVyID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9UZXJyYWluUHJvdmlkZXIuanMiKCkgewogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X0luZGV4RGF0YXR5cGUoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFRlcnJhaW5Qcm92aWRlci5wcm90b3R5cGUsIHsKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIGFuIGV2ZW50IHRoYXQgaXMgcmFpc2VkIHdoZW4gdGhlIHRlcnJhaW4gcHJvdmlkZXIgZW5jb3VudGVycyBhbiBhc3luY2hyb25vdXMgZXJyb3IuICBCeSBzdWJzY3JpYmluZwogICAgICAgICAqIHRvIHRoZSBldmVudCwgeW91IHdpbGwgYmUgbm90aWZpZWQgb2YgdGhlIGVycm9yIGFuZCBjYW4gcG90ZW50aWFsbHkgcmVjb3ZlciBmcm9tIGl0LiAgRXZlbnQgbGlzdGVuZXJzCiAgICAgICAgICogYXJlIHBhc3NlZCBhbiBpbnN0YW5jZSBvZiB7QGxpbmsgVGlsZVByb3ZpZGVyRXJyb3J9LgogICAgICAgICAqIEBtZW1iZXJvZiBUZXJyYWluUHJvdmlkZXIucHJvdG90eXBlCiAgICAgICAgICogQHR5cGUge0V2ZW50PFRlcnJhaW5Qcm92aWRlci5FcnJvckV2ZW50Pn0KICAgICAgICAgKiBAcmVhZG9ubHkKICAgICAgICAgKi8KICAgICAgICBlcnJvckV2ZW50OiB7CiAgICAgICAgICBnZXQ6IERldmVsb3BlckVycm9yX2RlZmF1bHQudGhyb3dJbnN0YW50aWF0aW9uRXJyb3IKICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIEdldHMgdGhlIGNyZWRpdCB0byBkaXNwbGF5IHdoZW4gdGhpcyB0ZXJyYWluIHByb3ZpZGVyIGlzIGFjdGl2ZS4gIFR5cGljYWxseSB0aGlzIGlzIHVzZWQgdG8gY3JlZGl0CiAgICAgICAgICogdGhlIHNvdXJjZSBvZiB0aGUgdGVycmFpbi4KICAgICAgICAgKiBAbWVtYmVyb2YgVGVycmFpblByb3ZpZGVyLnByb3RvdHlwZQogICAgICAgICAqIEB0eXBlIHtDcmVkaXR9CiAgICAgICAgICogQHJlYWRvbmx5CiAgICAgICAgICovCiAgICAgICAgY3JlZGl0OiB7CiAgICAgICAgICBnZXQ6IERldmVsb3BlckVycm9yX2RlZmF1bHQudGhyb3dJbnN0YW50aWF0aW9uRXJyb3IKICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIEdldHMgdGhlIHRpbGluZyBzY2hlbWUgdXNlZCBieSB0aGUgcHJvdmlkZXIuCiAgICAgICAgICogQG1lbWJlcm9mIFRlcnJhaW5Qcm92aWRlci5wcm90b3R5cGUKICAgICAgICAgKiBAdHlwZSB7VGlsaW5nU2NoZW1lfQogICAgICAgICAqIEByZWFkb25seQogICAgICAgICAqLwogICAgICAgIHRpbGluZ1NjaGVtZTogewogICAgICAgICAgZ2V0OiBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0LnRocm93SW5zdGFudGlhdGlvbkVycm9yCiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIGEgdmFsdWUgaW5kaWNhdGluZyB3aGV0aGVyIG9yIG5vdCB0aGUgcHJvdmlkZXIgaW5jbHVkZXMgYSB3YXRlciBtYXNrLiAgVGhlIHdhdGVyIG1hc2sKICAgICAgICAgKiBpbmRpY2F0ZXMgd2hpY2ggYXJlYXMgb2YgdGhlIGdsb2JlIGFyZSB3YXRlciByYXRoZXIgdGhhbiBsYW5kLCBzbyB0aGV5IGNhbiBiZSByZW5kZXJlZAogICAgICAgICAqIGFzIGEgcmVmbGVjdGl2ZSBzdXJmYWNlIHdpdGggYW5pbWF0ZWQgd2F2ZXMuCiAgICAgICAgICogQG1lbWJlcm9mIFRlcnJhaW5Qcm92aWRlci5wcm90b3R5cGUKICAgICAgICAgKiBAdHlwZSB7Ym9vbGVhbn0KICAgICAgICAgKiBAcmVhZG9ubHkKICAgICAgICAgKi8KICAgICAgICBoYXNXYXRlck1hc2s6IHsKICAgICAgICAgIGdldDogRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdC50aHJvd0luc3RhbnRpYXRpb25FcnJvcgogICAgICAgIH0sCiAgICAgICAgLyoqCiAgICAgICAgICogR2V0cyBhIHZhbHVlIGluZGljYXRpbmcgd2hldGhlciBvciBub3QgdGhlIHJlcXVlc3RlZCB0aWxlcyBpbmNsdWRlIHZlcnRleCBub3JtYWxzLgogICAgICAgICAqIEBtZW1iZXJvZiBUZXJyYWluUHJvdmlkZXIucHJvdG90eXBlCiAgICAgICAgICogQHR5cGUge2Jvb2xlYW59CiAgICAgICAgICogQHJlYWRvbmx5CiAgICAgICAgICovCiAgICAgICAgaGFzVmVydGV4Tm9ybWFsczogewogICAgICAgICAgZ2V0OiBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0LnRocm93SW5zdGFudGlhdGlvbkVycm9yCiAgICAgICAgfSwKICAgICAgICAvKioKICAgICAgICAgKiBHZXRzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIGRldGVybWluZSBhdmFpbGFiaWxpdHkgb2YgdGVycmFpbiBmcm9tIHRoaXMgcHJvdmlkZXIsIHN1Y2ggYXMKICAgICAgICAgKiBhdCBwb2ludHMgYW5kIGluIHJlY3RhbmdsZXMuIFRoaXMgcHJvcGVydHkgbWF5IGJlIHVuZGVmaW5lZCBpZiBhdmFpbGFiaWxpdHkKICAgICAgICAgKiBpbmZvcm1hdGlvbiBpcyBub3QgYXZhaWxhYmxlLgogICAgICAgICAqIEBtZW1iZXJvZiBUZXJyYWluUHJvdmlkZXIucHJvdG90eXBlCiAgICAgICAgICogQHR5cGUge1RpbGVBdmFpbGFiaWxpdHl9CiAgICAgICAgICogQHJlYWRvbmx5CiAgICAgICAgICovCiAgICAgICAgYXZhaWxhYmlsaXR5OiB7CiAgICAgICAgICBnZXQ6IERldmVsb3BlckVycm9yX2RlZmF1bHQudGhyb3dJbnN0YW50aWF0aW9uRXJyb3IKICAgICAgICB9CiAgICAgIH0pOwogICAgICByZWd1bGFyR3JpZEluZGljZXNDYWNoZSA9IFtdOwogICAgICBUZXJyYWluUHJvdmlkZXIuZ2V0UmVndWxhckdyaWRJbmRpY2VzID0gZnVuY3Rpb24od2lkdGgsIGhlaWdodCkgewogICAgICAgIGlmICh3aWR0aCAqIGhlaWdodCA+PSBNYXRoX2RlZmF1bHQuRk9VUl9HSUdBQllURVMpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgICAiVGhlIHRvdGFsIG51bWJlciBvZiB2ZXJ0aWNlcyAod2lkdGggKiBoZWlnaHQpIG11c3QgYmUgbGVzcyB0aGFuIDQsMjk0LDk2NywyOTYuIgogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgbGV0IGJ5V2lkdGggPSByZWd1bGFyR3JpZEluZGljZXNDYWNoZVt3aWR0aF07CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoYnlXaWR0aCkpIHsKICAgICAgICAgIHJlZ3VsYXJHcmlkSW5kaWNlc0NhY2hlW3dpZHRoXSA9IGJ5V2lkdGggPSBbXTsKICAgICAgICB9CiAgICAgICAgbGV0IGluZGljZXMgPSBieVdpZHRoW2hlaWdodF07CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoaW5kaWNlcykpIHsKICAgICAgICAgIGlmICh3aWR0aCAqIGhlaWdodCA8IE1hdGhfZGVmYXVsdC5TSVhUWV9GT1VSX0tJTE9CWVRFUykgewogICAgICAgICAgICBpbmRpY2VzID0gYnlXaWR0aFtoZWlnaHRdID0gbmV3IFVpbnQxNkFycmF5KAogICAgICAgICAgICAgICh3aWR0aCAtIDEpICogKGhlaWdodCAtIDEpICogNgogICAgICAgICAgICApOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaW5kaWNlcyA9IGJ5V2lkdGhbaGVpZ2h0XSA9IG5ldyBVaW50MzJBcnJheSgKICAgICAgICAgICAgICAod2lkdGggLSAxKSAqIChoZWlnaHQgLSAxKSAqIDYKICAgICAgICAgICAgKTsKICAgICAgICAgIH0KICAgICAgICAgIGFkZFJlZ3VsYXJHcmlkSW5kaWNlcyh3aWR0aCwgaGVpZ2h0LCBpbmRpY2VzLCAwKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGluZGljZXM7CiAgICAgIH07CiAgICAgIHJlZ3VsYXJHcmlkQW5kRWRnZUluZGljZXNDYWNoZSA9IFtdOwogICAgICBUZXJyYWluUHJvdmlkZXIuZ2V0UmVndWxhckdyaWRJbmRpY2VzQW5kRWRnZUluZGljZXMgPSBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0KSB7CiAgICAgICAgaWYgKHdpZHRoICogaGVpZ2h0ID49IE1hdGhfZGVmYXVsdC5GT1VSX0dJR0FCWVRFUykgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgICAgICJUaGUgdG90YWwgbnVtYmVyIG9mIHZlcnRpY2VzICh3aWR0aCAqIGhlaWdodCkgbXVzdCBiZSBsZXNzIHRoYW4gNCwyOTQsOTY3LDI5Ni4iCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBsZXQgYnlXaWR0aCA9IHJlZ3VsYXJHcmlkQW5kRWRnZUluZGljZXNDYWNoZVt3aWR0aF07CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoYnlXaWR0aCkpIHsKICAgICAgICAgIHJlZ3VsYXJHcmlkQW5kRWRnZUluZGljZXNDYWNoZVt3aWR0aF0gPSBieVdpZHRoID0gW107CiAgICAgICAgfQogICAgICAgIGxldCBpbmRpY2VzQW5kRWRnZXMgPSBieVdpZHRoW2hlaWdodF07CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoaW5kaWNlc0FuZEVkZ2VzKSkgewogICAgICAgICAgY29uc3QgaW5kaWNlcyA9IFRlcnJhaW5Qcm92aWRlci5nZXRSZWd1bGFyR3JpZEluZGljZXMod2lkdGgsIGhlaWdodCk7CiAgICAgICAgICBjb25zdCBlZGdlSW5kaWNlcyA9IGdldEVkZ2VJbmRpY2VzKHdpZHRoLCBoZWlnaHQpOwogICAgICAgICAgY29uc3Qgd2VzdEluZGljZXNTb3V0aFRvTm9ydGggPSBlZGdlSW5kaWNlcy53ZXN0SW5kaWNlc1NvdXRoVG9Ob3J0aDsKICAgICAgICAgIGNvbnN0IHNvdXRoSW5kaWNlc0Vhc3RUb1dlc3QgPSBlZGdlSW5kaWNlcy5zb3V0aEluZGljZXNFYXN0VG9XZXN0OwogICAgICAgICAgY29uc3QgZWFzdEluZGljZXNOb3J0aFRvU291dGggPSBlZGdlSW5kaWNlcy5lYXN0SW5kaWNlc05vcnRoVG9Tb3V0aDsKICAgICAgICAgIGNvbnN0IG5vcnRoSW5kaWNlc1dlc3RUb0Vhc3QgPSBlZGdlSW5kaWNlcy5ub3J0aEluZGljZXNXZXN0VG9FYXN0OwogICAgICAgICAgaW5kaWNlc0FuZEVkZ2VzID0gYnlXaWR0aFtoZWlnaHRdID0gewogICAgICAgICAgICBpbmRpY2VzLAogICAgICAgICAgICB3ZXN0SW5kaWNlc1NvdXRoVG9Ob3J0aCwKICAgICAgICAgICAgc291dGhJbmRpY2VzRWFzdFRvV2VzdCwKICAgICAgICAgICAgZWFzdEluZGljZXNOb3J0aFRvU291dGgsCiAgICAgICAgICAgIG5vcnRoSW5kaWNlc1dlc3RUb0Vhc3QKICAgICAgICAgIH07CiAgICAgICAgfQogICAgICAgIHJldHVybiBpbmRpY2VzQW5kRWRnZXM7CiAgICAgIH07CiAgICAgIHJlZ3VsYXJHcmlkQW5kU2tpcnRBbmRFZGdlSW5kaWNlc0NhY2hlID0gW107CiAgICAgIFRlcnJhaW5Qcm92aWRlci5nZXRSZWd1bGFyR3JpZEFuZFNraXJ0SW5kaWNlc0FuZEVkZ2VJbmRpY2VzID0gZnVuY3Rpb24od2lkdGgsIGhlaWdodCkgewogICAgICAgIGlmICh3aWR0aCAqIGhlaWdodCA+PSBNYXRoX2RlZmF1bHQuRk9VUl9HSUdBQllURVMpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICAgICAiVGhlIHRvdGFsIG51bWJlciBvZiB2ZXJ0aWNlcyAod2lkdGggKiBoZWlnaHQpIG11c3QgYmUgbGVzcyB0aGFuIDQsMjk0LDk2NywyOTYuIgogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgbGV0IGJ5V2lkdGggPSByZWd1bGFyR3JpZEFuZFNraXJ0QW5kRWRnZUluZGljZXNDYWNoZVt3aWR0aF07CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoYnlXaWR0aCkpIHsKICAgICAgICAgIHJlZ3VsYXJHcmlkQW5kU2tpcnRBbmRFZGdlSW5kaWNlc0NhY2hlW3dpZHRoXSA9IGJ5V2lkdGggPSBbXTsKICAgICAgICB9CiAgICAgICAgbGV0IGluZGljZXNBbmRFZGdlcyA9IGJ5V2lkdGhbaGVpZ2h0XTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChpbmRpY2VzQW5kRWRnZXMpKSB7CiAgICAgICAgICBjb25zdCBncmlkVmVydGV4Q291bnQgPSB3aWR0aCAqIGhlaWdodDsKICAgICAgICAgIGNvbnN0IGdyaWRJbmRleENvdW50ID0gKHdpZHRoIC0gMSkgKiAoaGVpZ2h0IC0gMSkgKiA2OwogICAgICAgICAgY29uc3QgZWRnZVZlcnRleENvdW50ID0gd2lkdGggKiAyICsgaGVpZ2h0ICogMjsKICAgICAgICAgIGNvbnN0IGVkZ2VJbmRleENvdW50ID0gTWF0aC5tYXgoMCwgZWRnZVZlcnRleENvdW50IC0gNCkgKiA2OwogICAgICAgICAgY29uc3QgdmVydGV4Q291bnQgPSBncmlkVmVydGV4Q291bnQgKyBlZGdlVmVydGV4Q291bnQ7CiAgICAgICAgICBjb25zdCBpbmRleENvdW50ID0gZ3JpZEluZGV4Q291bnQgKyBlZGdlSW5kZXhDb3VudDsKICAgICAgICAgIGNvbnN0IGVkZ2VJbmRpY2VzID0gZ2V0RWRnZUluZGljZXMod2lkdGgsIGhlaWdodCk7CiAgICAgICAgICBjb25zdCB3ZXN0SW5kaWNlc1NvdXRoVG9Ob3J0aCA9IGVkZ2VJbmRpY2VzLndlc3RJbmRpY2VzU291dGhUb05vcnRoOwogICAgICAgICAgY29uc3Qgc291dGhJbmRpY2VzRWFzdFRvV2VzdCA9IGVkZ2VJbmRpY2VzLnNvdXRoSW5kaWNlc0Vhc3RUb1dlc3Q7CiAgICAgICAgICBjb25zdCBlYXN0SW5kaWNlc05vcnRoVG9Tb3V0aCA9IGVkZ2VJbmRpY2VzLmVhc3RJbmRpY2VzTm9ydGhUb1NvdXRoOwogICAgICAgICAgY29uc3Qgbm9ydGhJbmRpY2VzV2VzdFRvRWFzdCA9IGVkZ2VJbmRpY2VzLm5vcnRoSW5kaWNlc1dlc3RUb0Vhc3Q7CiAgICAgICAgICBjb25zdCBpbmRpY2VzID0gSW5kZXhEYXRhdHlwZV9kZWZhdWx0LmNyZWF0ZVR5cGVkQXJyYXkodmVydGV4Q291bnQsIGluZGV4Q291bnQpOwogICAgICAgICAgYWRkUmVndWxhckdyaWRJbmRpY2VzKHdpZHRoLCBoZWlnaHQsIGluZGljZXMsIDApOwogICAgICAgICAgVGVycmFpblByb3ZpZGVyLmFkZFNraXJ0SW5kaWNlcygKICAgICAgICAgICAgd2VzdEluZGljZXNTb3V0aFRvTm9ydGgsCiAgICAgICAgICAgIHNvdXRoSW5kaWNlc0Vhc3RUb1dlc3QsCiAgICAgICAgICAgIGVhc3RJbmRpY2VzTm9ydGhUb1NvdXRoLAogICAgICAgICAgICBub3J0aEluZGljZXNXZXN0VG9FYXN0LAogICAgICAgICAgICBncmlkVmVydGV4Q291bnQsCiAgICAgICAgICAgIGluZGljZXMsCiAgICAgICAgICAgIGdyaWRJbmRleENvdW50CiAgICAgICAgICApOwogICAgICAgICAgaW5kaWNlc0FuZEVkZ2VzID0gYnlXaWR0aFtoZWlnaHRdID0gewogICAgICAgICAgICBpbmRpY2VzLAogICAgICAgICAgICB3ZXN0SW5kaWNlc1NvdXRoVG9Ob3J0aCwKICAgICAgICAgICAgc291dGhJbmRpY2VzRWFzdFRvV2VzdCwKICAgICAgICAgICAgZWFzdEluZGljZXNOb3J0aFRvU291dGgsCiAgICAgICAgICAgIG5vcnRoSW5kaWNlc1dlc3RUb0Vhc3QsCiAgICAgICAgICAgIGluZGV4Q291bnRXaXRob3V0U2tpcnRzOiBncmlkSW5kZXhDb3VudAogICAgICAgICAgfTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGluZGljZXNBbmRFZGdlczsKICAgICAgfTsKICAgICAgVGVycmFpblByb3ZpZGVyLmFkZFNraXJ0SW5kaWNlcyA9IGZ1bmN0aW9uKHdlc3RJbmRpY2VzU291dGhUb05vcnRoLCBzb3V0aEluZGljZXNFYXN0VG9XZXN0LCBlYXN0SW5kaWNlc05vcnRoVG9Tb3V0aCwgbm9ydGhJbmRpY2VzV2VzdFRvRWFzdCwgdmVydGV4Q291bnQsIGluZGljZXMsIG9mZnNldCkgewogICAgICAgIGxldCB2ZXJ0ZXhJbmRleCA9IHZlcnRleENvdW50OwogICAgICAgIG9mZnNldCA9IGFkZFNraXJ0SW5kaWNlcygKICAgICAgICAgIHdlc3RJbmRpY2VzU291dGhUb05vcnRoLAogICAgICAgICAgdmVydGV4SW5kZXgsCiAgICAgICAgICBpbmRpY2VzLAogICAgICAgICAgb2Zmc2V0CiAgICAgICAgKTsKICAgICAgICB2ZXJ0ZXhJbmRleCArPSB3ZXN0SW5kaWNlc1NvdXRoVG9Ob3J0aC5sZW5ndGg7CiAgICAgICAgb2Zmc2V0ID0gYWRkU2tpcnRJbmRpY2VzKAogICAgICAgICAgc291dGhJbmRpY2VzRWFzdFRvV2VzdCwKICAgICAgICAgIHZlcnRleEluZGV4LAogICAgICAgICAgaW5kaWNlcywKICAgICAgICAgIG9mZnNldAogICAgICAgICk7CiAgICAgICAgdmVydGV4SW5kZXggKz0gc291dGhJbmRpY2VzRWFzdFRvV2VzdC5sZW5ndGg7CiAgICAgICAgb2Zmc2V0ID0gYWRkU2tpcnRJbmRpY2VzKAogICAgICAgICAgZWFzdEluZGljZXNOb3J0aFRvU291dGgsCiAgICAgICAgICB2ZXJ0ZXhJbmRleCwKICAgICAgICAgIGluZGljZXMsCiAgICAgICAgICBvZmZzZXQKICAgICAgICApOwogICAgICAgIHZlcnRleEluZGV4ICs9IGVhc3RJbmRpY2VzTm9ydGhUb1NvdXRoLmxlbmd0aDsKICAgICAgICBhZGRTa2lydEluZGljZXMobm9ydGhJbmRpY2VzV2VzdFRvRWFzdCwgdmVydGV4SW5kZXgsIGluZGljZXMsIG9mZnNldCk7CiAgICAgIH07CiAgICAgIFRlcnJhaW5Qcm92aWRlci5oZWlnaHRtYXBUZXJyYWluUXVhbGl0eSA9IDAuMjU7CiAgICAgIFRlcnJhaW5Qcm92aWRlci5nZXRFc3RpbWF0ZWRMZXZlbFplcm9HZW9tZXRyaWNFcnJvckZvckFIZWlnaHRtYXAgPSBmdW5jdGlvbihlbGxpcHNvaWQsIHRpbGVJbWFnZVdpZHRoLCBudW1iZXJPZlRpbGVzQXRMZXZlbFplcm8pIHsKICAgICAgICByZXR1cm4gZWxsaXBzb2lkLm1heGltdW1SYWRpdXMgKiAyICogTWF0aC5QSSAqIFRlcnJhaW5Qcm92aWRlci5oZWlnaHRtYXBUZXJyYWluUXVhbGl0eSAvICh0aWxlSW1hZ2VXaWR0aCAqIG51bWJlck9mVGlsZXNBdExldmVsWmVybyk7CiAgICAgIH07CiAgICAgIFRlcnJhaW5Qcm92aWRlci5wcm90b3R5cGUucmVxdWVzdFRpbGVHZW9tZXRyeSA9IERldmVsb3BlckVycm9yX2RlZmF1bHQudGhyb3dJbnN0YW50aWF0aW9uRXJyb3I7CiAgICAgIFRlcnJhaW5Qcm92aWRlci5wcm90b3R5cGUuZ2V0TGV2ZWxNYXhpbXVtR2VvbWV0cmljRXJyb3IgPSBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0LnRocm93SW5zdGFudGlhdGlvbkVycm9yOwogICAgICBUZXJyYWluUHJvdmlkZXIucHJvdG90eXBlLmdldFRpbGVEYXRhQXZhaWxhYmxlID0gRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdC50aHJvd0luc3RhbnRpYXRpb25FcnJvcjsKICAgICAgVGVycmFpblByb3ZpZGVyLnByb3RvdHlwZS5sb2FkVGlsZURhdGFBdmFpbGFiaWxpdHkgPSBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0LnRocm93SW5zdGFudGlhdGlvbkVycm9yOwogICAgICBUZXJyYWluUHJvdmlkZXJfZGVmYXVsdCA9IFRlcnJhaW5Qcm92aWRlcjsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZVZlcnRpY2VzRnJvbVF1YW50aXplZFRlcnJhaW5NZXNoLmpzCiAgdmFyIGNyZWF0ZVZlcnRpY2VzRnJvbVF1YW50aXplZFRlcnJhaW5NZXNoX2V4cG9ydHMgPSB7fTsKICBfX2V4cG9ydChjcmVhdGVWZXJ0aWNlc0Zyb21RdWFudGl6ZWRUZXJyYWluTWVzaF9leHBvcnRzLCB7CiAgICBkZWZhdWx0OiAoKSA9PiBjcmVhdGVWZXJ0aWNlc0Zyb21RdWFudGl6ZWRUZXJyYWluTWVzaF9kZWZhdWx0CiAgfSk7CiAgZnVuY3Rpb24gY3JlYXRlVmVydGljZXNGcm9tUXVhbnRpemVkVGVycmFpbk1lc2gocGFyYW1ldGVycywgdHJhbnNmZXJhYmxlT2JqZWN0cykgewogICAgY29uc3QgcXVhbnRpemVkVmVydGljZXMgPSBwYXJhbWV0ZXJzLnF1YW50aXplZFZlcnRpY2VzOwogICAgY29uc3QgcXVhbnRpemVkVmVydGV4Q291bnQgPSBxdWFudGl6ZWRWZXJ0aWNlcy5sZW5ndGggLyAzOwogICAgY29uc3Qgb2N0RW5jb2RlZE5vcm1hbHMgPSBwYXJhbWV0ZXJzLm9jdEVuY29kZWROb3JtYWxzOwogICAgY29uc3QgZWRnZVZlcnRleENvdW50ID0gcGFyYW1ldGVycy53ZXN0SW5kaWNlcy5sZW5ndGggKyBwYXJhbWV0ZXJzLmVhc3RJbmRpY2VzLmxlbmd0aCArIHBhcmFtZXRlcnMuc291dGhJbmRpY2VzLmxlbmd0aCArIHBhcmFtZXRlcnMubm9ydGhJbmRpY2VzLmxlbmd0aDsKICAgIGNvbnN0IGluY2x1ZGVXZWJNZXJjYXRvclQgPSBwYXJhbWV0ZXJzLmluY2x1ZGVXZWJNZXJjYXRvclQ7CiAgICBjb25zdCBleGFnZ2VyYXRpb24gPSBwYXJhbWV0ZXJzLmV4YWdnZXJhdGlvbjsKICAgIGNvbnN0IGV4YWdnZXJhdGlvblJlbGF0aXZlSGVpZ2h0ID0gcGFyYW1ldGVycy5leGFnZ2VyYXRpb25SZWxhdGl2ZUhlaWdodDsKICAgIGNvbnN0IGhhc0V4YWdnZXJhdGlvbiA9IGV4YWdnZXJhdGlvbiAhPT0gMTsKICAgIGNvbnN0IGluY2x1ZGVHZW9kZXRpY1N1cmZhY2VOb3JtYWxzID0gaGFzRXhhZ2dlcmF0aW9uOwogICAgY29uc3QgcmVjdGFuZ2xlID0gUmVjdGFuZ2xlX2RlZmF1bHQuY2xvbmUocGFyYW1ldGVycy5yZWN0YW5nbGUpOwogICAgY29uc3Qgd2VzdCA9IHJlY3RhbmdsZS53ZXN0OwogICAgY29uc3Qgc291dGggPSByZWN0YW5nbGUuc291dGg7CiAgICBjb25zdCBlYXN0ID0gcmVjdGFuZ2xlLmVhc3Q7CiAgICBjb25zdCBub3J0aCA9IHJlY3RhbmdsZS5ub3J0aDsKICAgIGNvbnN0IGVsbGlwc29pZCA9IEVsbGlwc29pZF9kZWZhdWx0LmNsb25lKHBhcmFtZXRlcnMuZWxsaXBzb2lkKTsKICAgIGNvbnN0IG1pbmltdW1IZWlnaHQgPSBwYXJhbWV0ZXJzLm1pbmltdW1IZWlnaHQ7CiAgICBjb25zdCBtYXhpbXVtSGVpZ2h0ID0gcGFyYW1ldGVycy5tYXhpbXVtSGVpZ2h0OwogICAgY29uc3QgY2VudGVyID0gcGFyYW1ldGVycy5yZWxhdGl2ZVRvQ2VudGVyOwogICAgY29uc3QgZnJvbUVOVSA9IFRyYW5zZm9ybXNfZGVmYXVsdC5lYXN0Tm9ydGhVcFRvRml4ZWRGcmFtZShjZW50ZXIsIGVsbGlwc29pZCk7CiAgICBjb25zdCB0b0VOVSA9IE1hdHJpeDRfZGVmYXVsdC5pbnZlcnNlVHJhbnNmb3JtYXRpb24oZnJvbUVOVSwgbmV3IE1hdHJpeDRfZGVmYXVsdCgpKTsKICAgIGxldCBzb3V0aE1lcmNhdG9yWTsKICAgIGxldCBvbmVPdmVyTWVyY2F0b3JIZWlnaHQ7CiAgICBpZiAoaW5jbHVkZVdlYk1lcmNhdG9yVCkgewogICAgICBzb3V0aE1lcmNhdG9yWSA9IFdlYk1lcmNhdG9yUHJvamVjdGlvbl9kZWZhdWx0Lmdlb2RldGljTGF0aXR1ZGVUb01lcmNhdG9yQW5nbGUoc291dGgpOwogICAgICBvbmVPdmVyTWVyY2F0b3JIZWlnaHQgPSAxIC8gKFdlYk1lcmNhdG9yUHJvamVjdGlvbl9kZWZhdWx0Lmdlb2RldGljTGF0aXR1ZGVUb01lcmNhdG9yQW5nbGUobm9ydGgpIC0gc291dGhNZXJjYXRvclkpOwogICAgfQogICAgY29uc3QgdUJ1ZmZlciA9IHF1YW50aXplZFZlcnRpY2VzLnN1YmFycmF5KDAsIHF1YW50aXplZFZlcnRleENvdW50KTsKICAgIGNvbnN0IHZCdWZmZXIgPSBxdWFudGl6ZWRWZXJ0aWNlcy5zdWJhcnJheSgKICAgICAgcXVhbnRpemVkVmVydGV4Q291bnQsCiAgICAgIDIgKiBxdWFudGl6ZWRWZXJ0ZXhDb3VudAogICAgKTsKICAgIGNvbnN0IGhlaWdodEJ1ZmZlciA9IHF1YW50aXplZFZlcnRpY2VzLnN1YmFycmF5KAogICAgICBxdWFudGl6ZWRWZXJ0ZXhDb3VudCAqIDIsCiAgICAgIDMgKiBxdWFudGl6ZWRWZXJ0ZXhDb3VudAogICAgKTsKICAgIGNvbnN0IGhhc1ZlcnRleE5vcm1hbHMgPSBkZWZpbmVkX2RlZmF1bHQob2N0RW5jb2RlZE5vcm1hbHMpOwogICAgY29uc3QgdXZzID0gbmV3IEFycmF5KHF1YW50aXplZFZlcnRleENvdW50KTsKICAgIGNvbnN0IGhlaWdodHMgPSBuZXcgQXJyYXkocXVhbnRpemVkVmVydGV4Q291bnQpOwogICAgY29uc3QgcG9zaXRpb25zID0gbmV3IEFycmF5KHF1YW50aXplZFZlcnRleENvdW50KTsKICAgIGNvbnN0IHdlYk1lcmNhdG9yVHMgPSBpbmNsdWRlV2ViTWVyY2F0b3JUID8gbmV3IEFycmF5KHF1YW50aXplZFZlcnRleENvdW50KSA6IFtdOwogICAgY29uc3QgZ2VvZGV0aWNTdXJmYWNlTm9ybWFscyA9IGluY2x1ZGVHZW9kZXRpY1N1cmZhY2VOb3JtYWxzID8gbmV3IEFycmF5KHF1YW50aXplZFZlcnRleENvdW50KSA6IFtdOwogICAgY29uc3QgbWluaW11bSA9IHNjcmF0Y2hNaW5pbXVtOwogICAgbWluaW11bS54ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOwogICAgbWluaW11bS55ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOwogICAgbWluaW11bS56ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOwogICAgY29uc3QgbWF4aW11bSA9IHNjcmF0Y2hNYXhpbXVtOwogICAgbWF4aW11bS54ID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZOwogICAgbWF4aW11bS55ID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZOwogICAgbWF4aW11bS56ID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZOwogICAgbGV0IG1pbkxvbmdpdHVkZSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTsKICAgIGxldCBtYXhMb25naXR1ZGUgPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7CiAgICBsZXQgbWluTGF0aXR1ZGUgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7CiAgICBsZXQgbWF4TGF0aXR1ZGUgPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHF1YW50aXplZFZlcnRleENvdW50OyArK2kpIHsKICAgICAgY29uc3QgcmF3VSA9IHVCdWZmZXJbaV07CiAgICAgIGNvbnN0IHJhd1YgPSB2QnVmZmVyW2ldOwogICAgICBjb25zdCB1MyA9IHJhd1UgLyBtYXhTaG9ydDQ7CiAgICAgIGNvbnN0IHYzID0gcmF3ViAvIG1heFNob3J0NDsKICAgICAgY29uc3QgaGVpZ2h0ID0gTWF0aF9kZWZhdWx0LmxlcnAoCiAgICAgICAgbWluaW11bUhlaWdodCwKICAgICAgICBtYXhpbXVtSGVpZ2h0LAogICAgICAgIGhlaWdodEJ1ZmZlcltpXSAvIG1heFNob3J0NAogICAgICApOwogICAgICBjYXJ0b2dyYXBoaWNTY3JhdGNoLmxvbmdpdHVkZSA9IE1hdGhfZGVmYXVsdC5sZXJwKHdlc3QsIGVhc3QsIHUzKTsKICAgICAgY2FydG9ncmFwaGljU2NyYXRjaC5sYXRpdHVkZSA9IE1hdGhfZGVmYXVsdC5sZXJwKHNvdXRoLCBub3J0aCwgdjMpOwogICAgICBjYXJ0b2dyYXBoaWNTY3JhdGNoLmhlaWdodCA9IGhlaWdodDsKICAgICAgbWluTG9uZ2l0dWRlID0gTWF0aC5taW4oY2FydG9ncmFwaGljU2NyYXRjaC5sb25naXR1ZGUsIG1pbkxvbmdpdHVkZSk7CiAgICAgIG1heExvbmdpdHVkZSA9IE1hdGgubWF4KGNhcnRvZ3JhcGhpY1NjcmF0Y2gubG9uZ2l0dWRlLCBtYXhMb25naXR1ZGUpOwogICAgICBtaW5MYXRpdHVkZSA9IE1hdGgubWluKGNhcnRvZ3JhcGhpY1NjcmF0Y2gubGF0aXR1ZGUsIG1pbkxhdGl0dWRlKTsKICAgICAgbWF4TGF0aXR1ZGUgPSBNYXRoLm1heChjYXJ0b2dyYXBoaWNTY3JhdGNoLmxhdGl0dWRlLCBtYXhMYXRpdHVkZSk7CiAgICAgIGNvbnN0IHBvc2l0aW9uID0gZWxsaXBzb2lkLmNhcnRvZ3JhcGhpY1RvQ2FydGVzaWFuKGNhcnRvZ3JhcGhpY1NjcmF0Y2gpOwogICAgICB1dnNbaV0gPSBuZXcgQ2FydGVzaWFuMl9kZWZhdWx0KHUzLCB2Myk7CiAgICAgIGhlaWdodHNbaV0gPSBoZWlnaHQ7CiAgICAgIHBvc2l0aW9uc1tpXSA9IHBvc2l0aW9uOwogICAgICBpZiAoaW5jbHVkZVdlYk1lcmNhdG9yVCkgewogICAgICAgIHdlYk1lcmNhdG9yVHNbaV0gPSAoV2ViTWVyY2F0b3JQcm9qZWN0aW9uX2RlZmF1bHQuZ2VvZGV0aWNMYXRpdHVkZVRvTWVyY2F0b3JBbmdsZSgKICAgICAgICAgIGNhcnRvZ3JhcGhpY1NjcmF0Y2gubGF0aXR1ZGUKICAgICAgICApIC0gc291dGhNZXJjYXRvclkpICogb25lT3Zlck1lcmNhdG9ySGVpZ2h0OwogICAgICB9CiAgICAgIGlmIChpbmNsdWRlR2VvZGV0aWNTdXJmYWNlTm9ybWFscykgewogICAgICAgIGdlb2RldGljU3VyZmFjZU5vcm1hbHNbaV0gPSBlbGxpcHNvaWQuZ2VvZGV0aWNTdXJmYWNlTm9ybWFsKHBvc2l0aW9uKTsKICAgICAgfQogICAgICBNYXRyaXg0X2RlZmF1bHQubXVsdGlwbHlCeVBvaW50KHRvRU5VLCBwb3NpdGlvbiwgY2FydGVzaWFuM1NjcmF0Y2g4KTsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm1pbmltdW1CeUNvbXBvbmVudChjYXJ0ZXNpYW4zU2NyYXRjaDgsIG1pbmltdW0sIG1pbmltdW0pOwogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubWF4aW11bUJ5Q29tcG9uZW50KGNhcnRlc2lhbjNTY3JhdGNoOCwgbWF4aW11bSwgbWF4aW11bSk7CiAgICB9CiAgICBjb25zdCB3ZXN0SW5kaWNlc1NvdXRoVG9Ob3J0aCA9IGNvcHlBbmRTb3J0KAogICAgICBwYXJhbWV0ZXJzLndlc3RJbmRpY2VzLAogICAgICBmdW5jdGlvbihhMywgYikgewogICAgICAgIHJldHVybiB1dnNbYTNdLnkgLSB1dnNbYl0ueTsKICAgICAgfQogICAgKTsKICAgIGNvbnN0IGVhc3RJbmRpY2VzTm9ydGhUb1NvdXRoID0gY29weUFuZFNvcnQoCiAgICAgIHBhcmFtZXRlcnMuZWFzdEluZGljZXMsCiAgICAgIGZ1bmN0aW9uKGEzLCBiKSB7CiAgICAgICAgcmV0dXJuIHV2c1tiXS55IC0gdXZzW2EzXS55OwogICAgICB9CiAgICApOwogICAgY29uc3Qgc291dGhJbmRpY2VzRWFzdFRvV2VzdCA9IGNvcHlBbmRTb3J0KAogICAgICBwYXJhbWV0ZXJzLnNvdXRoSW5kaWNlcywKICAgICAgZnVuY3Rpb24oYTMsIGIpIHsKICAgICAgICByZXR1cm4gdXZzW2JdLnggLSB1dnNbYTNdLng7CiAgICAgIH0KICAgICk7CiAgICBjb25zdCBub3J0aEluZGljZXNXZXN0VG9FYXN0ID0gY29weUFuZFNvcnQoCiAgICAgIHBhcmFtZXRlcnMubm9ydGhJbmRpY2VzLAogICAgICBmdW5jdGlvbihhMywgYikgewogICAgICAgIHJldHVybiB1dnNbYTNdLnggLSB1dnNbYl0ueDsKICAgICAgfQogICAgKTsKICAgIGxldCBvY2NsdWRlZVBvaW50SW5TY2FsZWRTcGFjZTsKICAgIGlmIChtaW5pbXVtSGVpZ2h0IDwgMCkgewogICAgICBjb25zdCBvY2NsdWRlciA9IG5ldyBFbGxpcHNvaWRhbE9jY2x1ZGVyX2RlZmF1bHQoZWxsaXBzb2lkKTsKICAgICAgb2NjbHVkZWVQb2ludEluU2NhbGVkU3BhY2UgPSBvY2NsdWRlci5jb21wdXRlSG9yaXpvbkN1bGxpbmdQb2ludFBvc3NpYmx5VW5kZXJFbGxpcHNvaWQoCiAgICAgICAgY2VudGVyLAogICAgICAgIHBvc2l0aW9ucywKICAgICAgICBtaW5pbXVtSGVpZ2h0CiAgICAgICk7CiAgICB9CiAgICBsZXQgaE1pbiA9IG1pbmltdW1IZWlnaHQ7CiAgICBoTWluID0gTWF0aC5taW4oCiAgICAgIGhNaW4sCiAgICAgIGZpbmRNaW5NYXhTa2lydHMoCiAgICAgICAgcGFyYW1ldGVycy53ZXN0SW5kaWNlcywKICAgICAgICBwYXJhbWV0ZXJzLndlc3RTa2lydEhlaWdodCwKICAgICAgICBoZWlnaHRzLAogICAgICAgIHV2cywKICAgICAgICByZWN0YW5nbGUsCiAgICAgICAgZWxsaXBzb2lkLAogICAgICAgIHRvRU5VLAogICAgICAgIG1pbmltdW0sCiAgICAgICAgbWF4aW11bQogICAgICApCiAgICApOwogICAgaE1pbiA9IE1hdGgubWluKAogICAgICBoTWluLAogICAgICBmaW5kTWluTWF4U2tpcnRzKAogICAgICAgIHBhcmFtZXRlcnMuc291dGhJbmRpY2VzLAogICAgICAgIHBhcmFtZXRlcnMuc291dGhTa2lydEhlaWdodCwKICAgICAgICBoZWlnaHRzLAogICAgICAgIHV2cywKICAgICAgICByZWN0YW5nbGUsCiAgICAgICAgZWxsaXBzb2lkLAogICAgICAgIHRvRU5VLAogICAgICAgIG1pbmltdW0sCiAgICAgICAgbWF4aW11bQogICAgICApCiAgICApOwogICAgaE1pbiA9IE1hdGgubWluKAogICAgICBoTWluLAogICAgICBmaW5kTWluTWF4U2tpcnRzKAogICAgICAgIHBhcmFtZXRlcnMuZWFzdEluZGljZXMsCiAgICAgICAgcGFyYW1ldGVycy5lYXN0U2tpcnRIZWlnaHQsCiAgICAgICAgaGVpZ2h0cywKICAgICAgICB1dnMsCiAgICAgICAgcmVjdGFuZ2xlLAogICAgICAgIGVsbGlwc29pZCwKICAgICAgICB0b0VOVSwKICAgICAgICBtaW5pbXVtLAogICAgICAgIG1heGltdW0KICAgICAgKQogICAgKTsKICAgIGhNaW4gPSBNYXRoLm1pbigKICAgICAgaE1pbiwKICAgICAgZmluZE1pbk1heFNraXJ0cygKICAgICAgICBwYXJhbWV0ZXJzLm5vcnRoSW5kaWNlcywKICAgICAgICBwYXJhbWV0ZXJzLm5vcnRoU2tpcnRIZWlnaHQsCiAgICAgICAgaGVpZ2h0cywKICAgICAgICB1dnMsCiAgICAgICAgcmVjdGFuZ2xlLAogICAgICAgIGVsbGlwc29pZCwKICAgICAgICB0b0VOVSwKICAgICAgICBtaW5pbXVtLAogICAgICAgIG1heGltdW0KICAgICAgKQogICAgKTsKICAgIGNvbnN0IGFhQm94ID0gbmV3IEF4aXNBbGlnbmVkQm91bmRpbmdCb3hfZGVmYXVsdChtaW5pbXVtLCBtYXhpbXVtLCBjZW50ZXIpOwogICAgY29uc3QgZW5jb2RpbmcgPSBuZXcgVGVycmFpbkVuY29kaW5nX2RlZmF1bHQoCiAgICAgIGNlbnRlciwKICAgICAgYWFCb3gsCiAgICAgIGhNaW4sCiAgICAgIG1heGltdW1IZWlnaHQsCiAgICAgIGZyb21FTlUsCiAgICAgIGhhc1ZlcnRleE5vcm1hbHMsCiAgICAgIGluY2x1ZGVXZWJNZXJjYXRvclQsCiAgICAgIGluY2x1ZGVHZW9kZXRpY1N1cmZhY2VOb3JtYWxzLAogICAgICBleGFnZ2VyYXRpb24sCiAgICAgIGV4YWdnZXJhdGlvblJlbGF0aXZlSGVpZ2h0CiAgICApOwogICAgY29uc3QgdmVydGV4U3RyaWRlID0gZW5jb2Rpbmcuc3RyaWRlOwogICAgY29uc3Qgc2l6ZSA9IHF1YW50aXplZFZlcnRleENvdW50ICogdmVydGV4U3RyaWRlICsgZWRnZVZlcnRleENvdW50ICogdmVydGV4U3RyaWRlOwogICAgY29uc3QgdmVydGV4QnVmZmVyID0gbmV3IEZsb2F0MzJBcnJheShzaXplKTsKICAgIGxldCBidWZmZXJJbmRleCA9IDA7CiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHF1YW50aXplZFZlcnRleENvdW50OyArK2opIHsKICAgICAgaWYgKGhhc1ZlcnRleE5vcm1hbHMpIHsKICAgICAgICBjb25zdCBuID0gaiAqIDI7CiAgICAgICAgdG9QYWNrLnggPSBvY3RFbmNvZGVkTm9ybWFsc1tuXTsKICAgICAgICB0b1BhY2sueSA9IG9jdEVuY29kZWROb3JtYWxzW24gKyAxXTsKICAgICAgfQogICAgICBidWZmZXJJbmRleCA9IGVuY29kaW5nLmVuY29kZSgKICAgICAgICB2ZXJ0ZXhCdWZmZXIsCiAgICAgICAgYnVmZmVySW5kZXgsCiAgICAgICAgcG9zaXRpb25zW2pdLAogICAgICAgIHV2c1tqXSwKICAgICAgICBoZWlnaHRzW2pdLAogICAgICAgIHRvUGFjaywKICAgICAgICB3ZWJNZXJjYXRvclRzW2pdLAogICAgICAgIGdlb2RldGljU3VyZmFjZU5vcm1hbHNbal0KICAgICAgKTsKICAgIH0KICAgIGNvbnN0IGVkZ2VUcmlhbmdsZUNvdW50ID0gTWF0aC5tYXgoMCwgKGVkZ2VWZXJ0ZXhDb3VudCAtIDQpICogMik7CiAgICBjb25zdCBpbmRleEJ1ZmZlckxlbmd0aCA9IHBhcmFtZXRlcnMuaW5kaWNlcy5sZW5ndGggKyBlZGdlVHJpYW5nbGVDb3VudCAqIDM7CiAgICBjb25zdCBpbmRleEJ1ZmZlciA9IEluZGV4RGF0YXR5cGVfZGVmYXVsdC5jcmVhdGVUeXBlZEFycmF5KAogICAgICBxdWFudGl6ZWRWZXJ0ZXhDb3VudCArIGVkZ2VWZXJ0ZXhDb3VudCwKICAgICAgaW5kZXhCdWZmZXJMZW5ndGgKICAgICk7CiAgICBpbmRleEJ1ZmZlci5zZXQocGFyYW1ldGVycy5pbmRpY2VzLCAwKTsKICAgIGNvbnN0IHBlcmNlbnRhZ2UgPSAxZS00OwogICAgY29uc3QgbG9uT2Zmc2V0ID0gKG1heExvbmdpdHVkZSAtIG1pbkxvbmdpdHVkZSkgKiBwZXJjZW50YWdlOwogICAgY29uc3QgbGF0T2Zmc2V0ID0gKG1heExhdGl0dWRlIC0gbWluTGF0aXR1ZGUpICogcGVyY2VudGFnZTsKICAgIGNvbnN0IHdlc3RMb25naXR1ZGVPZmZzZXQgPSAtbG9uT2Zmc2V0OwogICAgY29uc3Qgd2VzdExhdGl0dWRlT2Zmc2V0ID0gMDsKICAgIGNvbnN0IGVhc3RMb25naXR1ZGVPZmZzZXQgPSBsb25PZmZzZXQ7CiAgICBjb25zdCBlYXN0TGF0aXR1ZGVPZmZzZXQgPSAwOwogICAgY29uc3Qgbm9ydGhMb25naXR1ZGVPZmZzZXQgPSAwOwogICAgY29uc3Qgbm9ydGhMYXRpdHVkZU9mZnNldCA9IGxhdE9mZnNldDsKICAgIGNvbnN0IHNvdXRoTG9uZ2l0dWRlT2Zmc2V0ID0gMDsKICAgIGNvbnN0IHNvdXRoTGF0aXR1ZGVPZmZzZXQgPSAtbGF0T2Zmc2V0OwogICAgbGV0IHZlcnRleEJ1ZmZlckluZGV4ID0gcXVhbnRpemVkVmVydGV4Q291bnQgKiB2ZXJ0ZXhTdHJpZGU7CiAgICBhZGRTa2lydDIoCiAgICAgIHZlcnRleEJ1ZmZlciwKICAgICAgdmVydGV4QnVmZmVySW5kZXgsCiAgICAgIHdlc3RJbmRpY2VzU291dGhUb05vcnRoLAogICAgICBlbmNvZGluZywKICAgICAgaGVpZ2h0cywKICAgICAgdXZzLAogICAgICBvY3RFbmNvZGVkTm9ybWFscywKICAgICAgZWxsaXBzb2lkLAogICAgICByZWN0YW5nbGUsCiAgICAgIHBhcmFtZXRlcnMud2VzdFNraXJ0SGVpZ2h0LAogICAgICBzb3V0aE1lcmNhdG9yWSwKICAgICAgb25lT3Zlck1lcmNhdG9ySGVpZ2h0LAogICAgICB3ZXN0TG9uZ2l0dWRlT2Zmc2V0LAogICAgICB3ZXN0TGF0aXR1ZGVPZmZzZXQKICAgICk7CiAgICB2ZXJ0ZXhCdWZmZXJJbmRleCArPSBwYXJhbWV0ZXJzLndlc3RJbmRpY2VzLmxlbmd0aCAqIHZlcnRleFN0cmlkZTsKICAgIGFkZFNraXJ0MigKICAgICAgdmVydGV4QnVmZmVyLAogICAgICB2ZXJ0ZXhCdWZmZXJJbmRleCwKICAgICAgc291dGhJbmRpY2VzRWFzdFRvV2VzdCwKICAgICAgZW5jb2RpbmcsCiAgICAgIGhlaWdodHMsCiAgICAgIHV2cywKICAgICAgb2N0RW5jb2RlZE5vcm1hbHMsCiAgICAgIGVsbGlwc29pZCwKICAgICAgcmVjdGFuZ2xlLAogICAgICBwYXJhbWV0ZXJzLnNvdXRoU2tpcnRIZWlnaHQsCiAgICAgIHNvdXRoTWVyY2F0b3JZLAogICAgICBvbmVPdmVyTWVyY2F0b3JIZWlnaHQsCiAgICAgIHNvdXRoTG9uZ2l0dWRlT2Zmc2V0LAogICAgICBzb3V0aExhdGl0dWRlT2Zmc2V0CiAgICApOwogICAgdmVydGV4QnVmZmVySW5kZXggKz0gcGFyYW1ldGVycy5zb3V0aEluZGljZXMubGVuZ3RoICogdmVydGV4U3RyaWRlOwogICAgYWRkU2tpcnQyKAogICAgICB2ZXJ0ZXhCdWZmZXIsCiAgICAgIHZlcnRleEJ1ZmZlckluZGV4LAogICAgICBlYXN0SW5kaWNlc05vcnRoVG9Tb3V0aCwKICAgICAgZW5jb2RpbmcsCiAgICAgIGhlaWdodHMsCiAgICAgIHV2cywKICAgICAgb2N0RW5jb2RlZE5vcm1hbHMsCiAgICAgIGVsbGlwc29pZCwKICAgICAgcmVjdGFuZ2xlLAogICAgICBwYXJhbWV0ZXJzLmVhc3RTa2lydEhlaWdodCwKICAgICAgc291dGhNZXJjYXRvclksCiAgICAgIG9uZU92ZXJNZXJjYXRvckhlaWdodCwKICAgICAgZWFzdExvbmdpdHVkZU9mZnNldCwKICAgICAgZWFzdExhdGl0dWRlT2Zmc2V0CiAgICApOwogICAgdmVydGV4QnVmZmVySW5kZXggKz0gcGFyYW1ldGVycy5lYXN0SW5kaWNlcy5sZW5ndGggKiB2ZXJ0ZXhTdHJpZGU7CiAgICBhZGRTa2lydDIoCiAgICAgIHZlcnRleEJ1ZmZlciwKICAgICAgdmVydGV4QnVmZmVySW5kZXgsCiAgICAgIG5vcnRoSW5kaWNlc1dlc3RUb0Vhc3QsCiAgICAgIGVuY29kaW5nLAogICAgICBoZWlnaHRzLAogICAgICB1dnMsCiAgICAgIG9jdEVuY29kZWROb3JtYWxzLAogICAgICBlbGxpcHNvaWQsCiAgICAgIHJlY3RhbmdsZSwKICAgICAgcGFyYW1ldGVycy5ub3J0aFNraXJ0SGVpZ2h0LAogICAgICBzb3V0aE1lcmNhdG9yWSwKICAgICAgb25lT3Zlck1lcmNhdG9ySGVpZ2h0LAogICAgICBub3J0aExvbmdpdHVkZU9mZnNldCwKICAgICAgbm9ydGhMYXRpdHVkZU9mZnNldAogICAgKTsKICAgIFRlcnJhaW5Qcm92aWRlcl9kZWZhdWx0LmFkZFNraXJ0SW5kaWNlcygKICAgICAgd2VzdEluZGljZXNTb3V0aFRvTm9ydGgsCiAgICAgIHNvdXRoSW5kaWNlc0Vhc3RUb1dlc3QsCiAgICAgIGVhc3RJbmRpY2VzTm9ydGhUb1NvdXRoLAogICAgICBub3J0aEluZGljZXNXZXN0VG9FYXN0LAogICAgICBxdWFudGl6ZWRWZXJ0ZXhDb3VudCwKICAgICAgaW5kZXhCdWZmZXIsCiAgICAgIHBhcmFtZXRlcnMuaW5kaWNlcy5sZW5ndGgKICAgICk7CiAgICB0cmFuc2ZlcmFibGVPYmplY3RzLnB1c2godmVydGV4QnVmZmVyLmJ1ZmZlciwgaW5kZXhCdWZmZXIuYnVmZmVyKTsKICAgIHJldHVybiB7CiAgICAgIHZlcnRpY2VzOiB2ZXJ0ZXhCdWZmZXIuYnVmZmVyLAogICAgICBpbmRpY2VzOiBpbmRleEJ1ZmZlci5idWZmZXIsCiAgICAgIHdlc3RJbmRpY2VzU291dGhUb05vcnRoLAogICAgICBzb3V0aEluZGljZXNFYXN0VG9XZXN0LAogICAgICBlYXN0SW5kaWNlc05vcnRoVG9Tb3V0aCwKICAgICAgbm9ydGhJbmRpY2VzV2VzdFRvRWFzdCwKICAgICAgdmVydGV4U3RyaWRlLAogICAgICBjZW50ZXIsCiAgICAgIG1pbmltdW1IZWlnaHQsCiAgICAgIG1heGltdW1IZWlnaHQsCiAgICAgIG9jY2x1ZGVlUG9pbnRJblNjYWxlZFNwYWNlLAogICAgICBlbmNvZGluZywKICAgICAgaW5kZXhDb3VudFdpdGhvdXRTa2lydHM6IHBhcmFtZXRlcnMuaW5kaWNlcy5sZW5ndGgKICAgIH07CiAgfQogIGZ1bmN0aW9uIGZpbmRNaW5NYXhTa2lydHMoZWRnZUluZGljZXMsIGVkZ2VIZWlnaHQsIGhlaWdodHMsIHV2cywgcmVjdGFuZ2xlLCBlbGxpcHNvaWQsIHRvRU5VLCBtaW5pbXVtLCBtYXhpbXVtKSB7CiAgICBsZXQgaE1pbiA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTsKICAgIGNvbnN0IG5vcnRoID0gcmVjdGFuZ2xlLm5vcnRoOwogICAgY29uc3Qgc291dGggPSByZWN0YW5nbGUuc291dGg7CiAgICBsZXQgZWFzdCA9IHJlY3RhbmdsZS5lYXN0OwogICAgY29uc3Qgd2VzdCA9IHJlY3RhbmdsZS53ZXN0OwogICAgaWYgKGVhc3QgPCB3ZXN0KSB7CiAgICAgIGVhc3QgKz0gTWF0aF9kZWZhdWx0LlRXT19QSTsKICAgIH0KICAgIGNvbnN0IGxlbmd0aCA9IGVkZ2VJbmRpY2VzLmxlbmd0aDsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgY29uc3QgaW5kZXggPSBlZGdlSW5kaWNlc1tpXTsKICAgICAgY29uc3QgaCA9IGhlaWdodHNbaW5kZXhdOwogICAgICBjb25zdCB1diA9IHV2c1tpbmRleF07CiAgICAgIGNhcnRvZ3JhcGhpY1NjcmF0Y2gubG9uZ2l0dWRlID0gTWF0aF9kZWZhdWx0LmxlcnAod2VzdCwgZWFzdCwgdXYueCk7CiAgICAgIGNhcnRvZ3JhcGhpY1NjcmF0Y2gubGF0aXR1ZGUgPSBNYXRoX2RlZmF1bHQubGVycChzb3V0aCwgbm9ydGgsIHV2LnkpOwogICAgICBjYXJ0b2dyYXBoaWNTY3JhdGNoLmhlaWdodCA9IGggLSBlZGdlSGVpZ2h0OwogICAgICBjb25zdCBwb3NpdGlvbiA9IGVsbGlwc29pZC5jYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbigKICAgICAgICBjYXJ0b2dyYXBoaWNTY3JhdGNoLAogICAgICAgIGNhcnRlc2lhbjNTY3JhdGNoOAogICAgICApOwogICAgICBNYXRyaXg0X2RlZmF1bHQubXVsdGlwbHlCeVBvaW50KHRvRU5VLCBwb3NpdGlvbiwgcG9zaXRpb24pOwogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQubWluaW11bUJ5Q29tcG9uZW50KHBvc2l0aW9uLCBtaW5pbXVtLCBtaW5pbXVtKTsKICAgICAgQ2FydGVzaWFuM19kZWZhdWx0Lm1heGltdW1CeUNvbXBvbmVudChwb3NpdGlvbiwgbWF4aW11bSwgbWF4aW11bSk7CiAgICAgIGhNaW4gPSBNYXRoLm1pbihoTWluLCBjYXJ0b2dyYXBoaWNTY3JhdGNoLmhlaWdodCk7CiAgICB9CiAgICByZXR1cm4gaE1pbjsKICB9CiAgZnVuY3Rpb24gYWRkU2tpcnQyKHZlcnRleEJ1ZmZlciwgdmVydGV4QnVmZmVySW5kZXgsIGVkZ2VWZXJ0aWNlcywgZW5jb2RpbmcsIGhlaWdodHMsIHV2cywgb2N0RW5jb2RlZE5vcm1hbHMsIGVsbGlwc29pZCwgcmVjdGFuZ2xlLCBza2lydExlbmd0aCwgc291dGhNZXJjYXRvclksIG9uZU92ZXJNZXJjYXRvckhlaWdodCwgbG9uZ2l0dWRlT2Zmc2V0LCBsYXRpdHVkZU9mZnNldCkgewogICAgY29uc3QgaGFzVmVydGV4Tm9ybWFscyA9IGRlZmluZWRfZGVmYXVsdChvY3RFbmNvZGVkTm9ybWFscyk7CiAgICBjb25zdCBub3J0aCA9IHJlY3RhbmdsZS5ub3J0aDsKICAgIGNvbnN0IHNvdXRoID0gcmVjdGFuZ2xlLnNvdXRoOwogICAgbGV0IGVhc3QgPSByZWN0YW5nbGUuZWFzdDsKICAgIGNvbnN0IHdlc3QgPSByZWN0YW5nbGUud2VzdDsKICAgIGlmIChlYXN0IDwgd2VzdCkgewogICAgICBlYXN0ICs9IE1hdGhfZGVmYXVsdC5UV09fUEk7CiAgICB9CiAgICBjb25zdCBsZW5ndGggPSBlZGdlVmVydGljZXMubGVuZ3RoOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgICBjb25zdCBpbmRleCA9IGVkZ2VWZXJ0aWNlc1tpXTsKICAgICAgY29uc3QgaCA9IGhlaWdodHNbaW5kZXhdOwogICAgICBjb25zdCB1diA9IHV2c1tpbmRleF07CiAgICAgIGNhcnRvZ3JhcGhpY1NjcmF0Y2gubG9uZ2l0dWRlID0gTWF0aF9kZWZhdWx0LmxlcnAod2VzdCwgZWFzdCwgdXYueCkgKyBsb25naXR1ZGVPZmZzZXQ7CiAgICAgIGNhcnRvZ3JhcGhpY1NjcmF0Y2gubGF0aXR1ZGUgPSBNYXRoX2RlZmF1bHQubGVycChzb3V0aCwgbm9ydGgsIHV2LnkpICsgbGF0aXR1ZGVPZmZzZXQ7CiAgICAgIGNhcnRvZ3JhcGhpY1NjcmF0Y2guaGVpZ2h0ID0gaCAtIHNraXJ0TGVuZ3RoOwogICAgICBjb25zdCBwb3NpdGlvbiA9IGVsbGlwc29pZC5jYXJ0b2dyYXBoaWNUb0NhcnRlc2lhbigKICAgICAgICBjYXJ0b2dyYXBoaWNTY3JhdGNoLAogICAgICAgIGNhcnRlc2lhbjNTY3JhdGNoOAogICAgICApOwogICAgICBpZiAoaGFzVmVydGV4Tm9ybWFscykgewogICAgICAgIGNvbnN0IG4gPSBpbmRleCAqIDI7CiAgICAgICAgdG9QYWNrLnggPSBvY3RFbmNvZGVkTm9ybWFsc1tuXTsKICAgICAgICB0b1BhY2sueSA9IG9jdEVuY29kZWROb3JtYWxzW24gKyAxXTsKICAgICAgfQogICAgICBsZXQgd2ViTWVyY2F0b3JUOwogICAgICBpZiAoZW5jb2RpbmcuaGFzV2ViTWVyY2F0b3JUKSB7CiAgICAgICAgd2ViTWVyY2F0b3JUID0gKFdlYk1lcmNhdG9yUHJvamVjdGlvbl9kZWZhdWx0Lmdlb2RldGljTGF0aXR1ZGVUb01lcmNhdG9yQW5nbGUoCiAgICAgICAgICBjYXJ0b2dyYXBoaWNTY3JhdGNoLmxhdGl0dWRlCiAgICAgICAgKSAtIHNvdXRoTWVyY2F0b3JZKSAqIG9uZU92ZXJNZXJjYXRvckhlaWdodDsKICAgICAgfQogICAgICBsZXQgZ2VvZGV0aWNTdXJmYWNlTm9ybWFsOwogICAgICBpZiAoZW5jb2RpbmcuaGFzR2VvZGV0aWNTdXJmYWNlTm9ybWFscykgewogICAgICAgIGdlb2RldGljU3VyZmFjZU5vcm1hbCA9IGVsbGlwc29pZC5nZW9kZXRpY1N1cmZhY2VOb3JtYWwocG9zaXRpb24pOwogICAgICB9CiAgICAgIHZlcnRleEJ1ZmZlckluZGV4ID0gZW5jb2RpbmcuZW5jb2RlKAogICAgICAgIHZlcnRleEJ1ZmZlciwKICAgICAgICB2ZXJ0ZXhCdWZmZXJJbmRleCwKICAgICAgICBwb3NpdGlvbiwKICAgICAgICB1diwKICAgICAgICBjYXJ0b2dyYXBoaWNTY3JhdGNoLmhlaWdodCwKICAgICAgICB0b1BhY2ssCiAgICAgICAgd2ViTWVyY2F0b3JULAogICAgICAgIGdlb2RldGljU3VyZmFjZU5vcm1hbAogICAgICApOwogICAgfQogIH0KICBmdW5jdGlvbiBjb3B5QW5kU29ydCh0eXBlZEFycmF5LCBjb21wYXJhdG9yKSB7CiAgICBsZXQgY29weTsKICAgIGlmICh0eXBlb2YgdHlwZWRBcnJheS5zbGljZSA9PT0gImZ1bmN0aW9uIikgewogICAgICBjb3B5ID0gdHlwZWRBcnJheS5zbGljZSgpOwogICAgICBpZiAodHlwZW9mIGNvcHkuc29ydCAhPT0gImZ1bmN0aW9uIikgewogICAgICAgIGNvcHkgPSB2b2lkIDA7CiAgICAgIH0KICAgIH0KICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGNvcHkpKSB7CiAgICAgIGNvcHkgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0eXBlZEFycmF5KTsKICAgIH0KICAgIGNvcHkuc29ydChjb21wYXJhdG9yKTsKICAgIHJldHVybiBjb3B5OwogIH0KICB2YXIgbWF4U2hvcnQ0LCBjYXJ0ZXNpYW4zU2NyYXRjaDgsIHNjcmF0Y2hNaW5pbXVtLCBzY3JhdGNoTWF4aW11bSwgY2FydG9ncmFwaGljU2NyYXRjaCwgdG9QYWNrLCBjcmVhdGVWZXJ0aWNlc0Zyb21RdWFudGl6ZWRUZXJyYWluTWVzaF9kZWZhdWx0OwogIHZhciBpbml0X2NyZWF0ZVZlcnRpY2VzRnJvbVF1YW50aXplZFRlcnJhaW5NZXNoID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVWZXJ0aWNlc0Zyb21RdWFudGl6ZWRUZXJyYWluTWVzaC5qcyIoKSB7CiAgICAgIGluaXRfQXhpc0FsaWduZWRCb3VuZGluZ0JveCgpOwogICAgICBpbml0X0NhcnRlc2lhbjIoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ2FydG9ncmFwaGljKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBpbml0X0VsbGlwc29pZGFsT2NjbHVkZXIoKTsKICAgICAgaW5pdF9JbmRleERhdGF0eXBlKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X01hdHJpeDQoKTsKICAgICAgaW5pdF9SZWN0YW5nbGUoKTsKICAgICAgaW5pdF9UZXJyYWluRW5jb2RpbmcoKTsKICAgICAgaW5pdF9UZXJyYWluUHJvdmlkZXIoKTsKICAgICAgaW5pdF9UcmFuc2Zvcm1zKCk7CiAgICAgIGluaXRfV2ViTWVyY2F0b3JQcm9qZWN0aW9uKCk7CiAgICAgIGluaXRfY3JlYXRlVGFza1Byb2Nlc3NvcldvcmtlcigpOwogICAgICBtYXhTaG9ydDQgPSAzMjc2NzsKICAgICAgY2FydGVzaWFuM1NjcmF0Y2g4ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoTWluaW11bSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaE1heGltdW0gPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGNhcnRvZ3JhcGhpY1NjcmF0Y2ggPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgdG9QYWNrID0gbmV3IENhcnRlc2lhbjJfZGVmYXVsdCgpOwogICAgICBjcmVhdGVWZXJ0aWNlc0Zyb21RdWFudGl6ZWRUZXJyYWluTWVzaF9kZWZhdWx0ID0gY3JlYXRlVGFza1Byb2Nlc3Nvcldvcmtlcl9kZWZhdWx0KAogICAgICAgIGNyZWF0ZVZlcnRpY2VzRnJvbVF1YW50aXplZFRlcnJhaW5NZXNoCiAgICAgICk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9XYWxsR2VvbWV0cnlMaWJyYXJ5LmpzCiAgZnVuY3Rpb24gbGF0TG9uRXF1YWxzKGMwLCBjMSkgewogICAgcmV0dXJuIE1hdGhfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKGMwLmxhdGl0dWRlLCBjMS5sYXRpdHVkZSwgTWF0aF9kZWZhdWx0LkVQU0lMT04xMCkgJiYgTWF0aF9kZWZhdWx0LmVxdWFsc0Vwc2lsb24oYzAubG9uZ2l0dWRlLCBjMS5sb25naXR1ZGUsIE1hdGhfZGVmYXVsdC5FUFNJTE9OMTApOwogIH0KICBmdW5jdGlvbiByZW1vdmVEdXBsaWNhdGVzMihlbGxpcHNvaWQsIHBvc2l0aW9ucywgdG9wSGVpZ2h0cywgYm90dG9tSGVpZ2h0cykgewogICAgcG9zaXRpb25zID0gYXJyYXlSZW1vdmVEdXBsaWNhdGVzX2RlZmF1bHQocG9zaXRpb25zLCBDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzRXBzaWxvbik7CiAgICBjb25zdCBsZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoOwogICAgaWYgKGxlbmd0aCA8IDIpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgY29uc3QgaGFzQm90dG9tSGVpZ2h0cyA9IGRlZmluZWRfZGVmYXVsdChib3R0b21IZWlnaHRzKTsKICAgIGNvbnN0IGhhc1RvcEhlaWdodHMgPSBkZWZpbmVkX2RlZmF1bHQodG9wSGVpZ2h0cyk7CiAgICBjb25zdCBjbGVhbmVkUG9zaXRpb25zID0gbmV3IEFycmF5KGxlbmd0aCk7CiAgICBjb25zdCBjbGVhbmVkVG9wSGVpZ2h0cyA9IG5ldyBBcnJheShsZW5ndGgpOwogICAgY29uc3QgY2xlYW5lZEJvdHRvbUhlaWdodHMgPSBuZXcgQXJyYXkobGVuZ3RoKTsKICAgIGNvbnN0IHYwMiA9IHBvc2l0aW9uc1swXTsKICAgIGNsZWFuZWRQb3NpdGlvbnNbMF0gPSB2MDI7CiAgICBjb25zdCBjMCA9IGVsbGlwc29pZC5jYXJ0ZXNpYW5Ub0NhcnRvZ3JhcGhpYyh2MDIsIHNjcmF0Y2hDYXJ0b2dyYXBoaWMxMyk7CiAgICBpZiAoaGFzVG9wSGVpZ2h0cykgewogICAgICBjMC5oZWlnaHQgPSB0b3BIZWlnaHRzWzBdOwogICAgfQogICAgY2xlYW5lZFRvcEhlaWdodHNbMF0gPSBjMC5oZWlnaHQ7CiAgICBpZiAoaGFzQm90dG9tSGVpZ2h0cykgewogICAgICBjbGVhbmVkQm90dG9tSGVpZ2h0c1swXSA9IGJvdHRvbUhlaWdodHNbMF07CiAgICB9IGVsc2UgewogICAgICBjbGVhbmVkQm90dG9tSGVpZ2h0c1swXSA9IDA7CiAgICB9CiAgICBjb25zdCBzdGFydFRvcEhlaWdodCA9IGNsZWFuZWRUb3BIZWlnaHRzWzBdOwogICAgY29uc3Qgc3RhcnRCb3R0b21IZWlnaHQgPSBjbGVhbmVkQm90dG9tSGVpZ2h0c1swXTsKICAgIGxldCBoYXNBbGxTYW1lSGVpZ2h0cyA9IHN0YXJ0VG9wSGVpZ2h0ID09PSBzdGFydEJvdHRvbUhlaWdodDsKICAgIGxldCBpbmRleCA9IDE7CiAgICBmb3IgKGxldCBpID0gMTsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgIGNvbnN0IHYxMiA9IHBvc2l0aW9uc1tpXTsKICAgICAgY29uc3QgYzEgPSBlbGxpcHNvaWQuY2FydGVzaWFuVG9DYXJ0b2dyYXBoaWModjEyLCBzY3JhdGNoQ2FydG9ncmFwaGljMjMpOwogICAgICBpZiAoaGFzVG9wSGVpZ2h0cykgewogICAgICAgIGMxLmhlaWdodCA9IHRvcEhlaWdodHNbaV07CiAgICAgIH0KICAgICAgaGFzQWxsU2FtZUhlaWdodHMgPSBoYXNBbGxTYW1lSGVpZ2h0cyAmJiBjMS5oZWlnaHQgPT09IDA7CiAgICAgIGlmICghbGF0TG9uRXF1YWxzKGMwLCBjMSkpIHsKICAgICAgICBjbGVhbmVkUG9zaXRpb25zW2luZGV4XSA9IHYxMjsKICAgICAgICBjbGVhbmVkVG9wSGVpZ2h0c1tpbmRleF0gPSBjMS5oZWlnaHQ7CiAgICAgICAgaWYgKGhhc0JvdHRvbUhlaWdodHMpIHsKICAgICAgICAgIGNsZWFuZWRCb3R0b21IZWlnaHRzW2luZGV4XSA9IGJvdHRvbUhlaWdodHNbaV07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNsZWFuZWRCb3R0b21IZWlnaHRzW2luZGV4XSA9IDA7CiAgICAgICAgfQogICAgICAgIGhhc0FsbFNhbWVIZWlnaHRzID0gaGFzQWxsU2FtZUhlaWdodHMgJiYgY2xlYW5lZFRvcEhlaWdodHNbaW5kZXhdID09PSBjbGVhbmVkQm90dG9tSGVpZ2h0c1tpbmRleF07CiAgICAgICAgQ2FydG9ncmFwaGljX2RlZmF1bHQuY2xvbmUoYzEsIGMwKTsKICAgICAgICArK2luZGV4OwogICAgICB9IGVsc2UgaWYgKGMwLmhlaWdodCA8IGMxLmhlaWdodCkgewogICAgICAgIGNsZWFuZWRUb3BIZWlnaHRzW2luZGV4IC0gMV0gPSBjMS5oZWlnaHQ7CiAgICAgIH0KICAgIH0KICAgIGlmIChoYXNBbGxTYW1lSGVpZ2h0cyB8fCBpbmRleCA8IDIpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgY2xlYW5lZFBvc2l0aW9ucy5sZW5ndGggPSBpbmRleDsKICAgIGNsZWFuZWRUb3BIZWlnaHRzLmxlbmd0aCA9IGluZGV4OwogICAgY2xlYW5lZEJvdHRvbUhlaWdodHMubGVuZ3RoID0gaW5kZXg7CiAgICByZXR1cm4gewogICAgICBwb3NpdGlvbnM6IGNsZWFuZWRQb3NpdGlvbnMsCiAgICAgIHRvcEhlaWdodHM6IGNsZWFuZWRUb3BIZWlnaHRzLAogICAgICBib3R0b21IZWlnaHRzOiBjbGVhbmVkQm90dG9tSGVpZ2h0cwogICAgfTsKICB9CiAgdmFyIFdhbGxHZW9tZXRyeUxpYnJhcnksIHNjcmF0Y2hDYXJ0b2dyYXBoaWMxMywgc2NyYXRjaENhcnRvZ3JhcGhpYzIzLCBwb3NpdGlvbnNBcnJheVNjcmF0Y2gsIGhlaWdodHNBcnJheVNjcmF0Y2gsIGdlbmVyYXRlQXJjT3B0aW9uc1NjcmF0Y2gyLCBXYWxsR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfV2FsbEdlb21ldHJ5TGlicmFyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvV2FsbEdlb21ldHJ5TGlicmFyeS5qcyIoKSB7CiAgICAgIGluaXRfYXJyYXlSZW1vdmVEdXBsaWNhdGVzKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NhcnRvZ3JhcGhpYygpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIGluaXRfUG9seWxpbmVQaXBlbGluZSgpOwogICAgICBXYWxsR2VvbWV0cnlMaWJyYXJ5ID0ge307CiAgICAgIHNjcmF0Y2hDYXJ0b2dyYXBoaWMxMyA9IG5ldyBDYXJ0b2dyYXBoaWNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQ2FydG9ncmFwaGljMjMgPSBuZXcgQ2FydG9ncmFwaGljX2RlZmF1bHQoKTsKICAgICAgcG9zaXRpb25zQXJyYXlTY3JhdGNoID0gbmV3IEFycmF5KDIpOwogICAgICBoZWlnaHRzQXJyYXlTY3JhdGNoID0gbmV3IEFycmF5KDIpOwogICAgICBnZW5lcmF0ZUFyY09wdGlvbnNTY3JhdGNoMiA9IHsKICAgICAgICBwb3NpdGlvbnM6IHZvaWQgMCwKICAgICAgICBoZWlnaHQ6IHZvaWQgMCwKICAgICAgICBncmFudWxhcml0eTogdm9pZCAwLAogICAgICAgIGVsbGlwc29pZDogdm9pZCAwCiAgICAgIH07CiAgICAgIFdhbGxHZW9tZXRyeUxpYnJhcnkuY29tcHV0ZVBvc2l0aW9ucyA9IGZ1bmN0aW9uKGVsbGlwc29pZCwgd2FsbFBvc2l0aW9ucywgbWF4aW11bUhlaWdodHMsIG1pbmltdW1IZWlnaHRzLCBncmFudWxhcml0eSwgZHVwbGljYXRlQ29ybmVycykgewogICAgICAgIGNvbnN0IG8gPSByZW1vdmVEdXBsaWNhdGVzMigKICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgIHdhbGxQb3NpdGlvbnMsCiAgICAgICAgICBtYXhpbXVtSGVpZ2h0cywKICAgICAgICAgIG1pbmltdW1IZWlnaHRzCiAgICAgICAgKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChvKSkgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICB3YWxsUG9zaXRpb25zID0gby5wb3NpdGlvbnM7CiAgICAgICAgbWF4aW11bUhlaWdodHMgPSBvLnRvcEhlaWdodHM7CiAgICAgICAgbWluaW11bUhlaWdodHMgPSBvLmJvdHRvbUhlaWdodHM7CiAgICAgICAgY29uc3QgbGVuZ3RoID0gd2FsbFBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgY29uc3QgbnVtQ29ybmVycyA9IGxlbmd0aCAtIDI7CiAgICAgICAgbGV0IHRvcFBvc2l0aW9uczsKICAgICAgICBsZXQgYm90dG9tUG9zaXRpb25zOwogICAgICAgIGNvbnN0IG1pbkRpc3RhbmNlID0gTWF0aF9kZWZhdWx0LmNob3JkTGVuZ3RoKAogICAgICAgICAgZ3JhbnVsYXJpdHksCiAgICAgICAgICBlbGxpcHNvaWQubWF4aW11bVJhZGl1cwogICAgICAgICk7CiAgICAgICAgY29uc3QgZ2VuZXJhdGVBcmNPcHRpb25zID0gZ2VuZXJhdGVBcmNPcHRpb25zU2NyYXRjaDI7CiAgICAgICAgZ2VuZXJhdGVBcmNPcHRpb25zLm1pbkRpc3RhbmNlID0gbWluRGlzdGFuY2U7CiAgICAgICAgZ2VuZXJhdGVBcmNPcHRpb25zLmVsbGlwc29pZCA9IGVsbGlwc29pZDsKICAgICAgICBpZiAoZHVwbGljYXRlQ29ybmVycykgewogICAgICAgICAgbGV0IGNvdW50ID0gMDsKICAgICAgICAgIGxldCBpOwogICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aCAtIDE7IGkrKykgewogICAgICAgICAgICBjb3VudCArPSBQb2x5bGluZVBpcGVsaW5lX2RlZmF1bHQubnVtYmVyT2ZQb2ludHMoCiAgICAgICAgICAgICAgd2FsbFBvc2l0aW9uc1tpXSwKICAgICAgICAgICAgICB3YWxsUG9zaXRpb25zW2kgKyAxXSwKICAgICAgICAgICAgICBtaW5EaXN0YW5jZQogICAgICAgICAgICApICsgMTsKICAgICAgICAgIH0KICAgICAgICAgIHRvcFBvc2l0aW9ucyA9IG5ldyBGbG9hdDY0QXJyYXkoY291bnQgKiAzKTsKICAgICAgICAgIGJvdHRvbVBvc2l0aW9ucyA9IG5ldyBGbG9hdDY0QXJyYXkoY291bnQgKiAzKTsKICAgICAgICAgIGNvbnN0IGdlbmVyYXRlQXJjUG9zaXRpb25zID0gcG9zaXRpb25zQXJyYXlTY3JhdGNoOwogICAgICAgICAgY29uc3QgZ2VuZXJhdGVBcmNIZWlnaHRzID0gaGVpZ2h0c0FycmF5U2NyYXRjaDsKICAgICAgICAgIGdlbmVyYXRlQXJjT3B0aW9ucy5wb3NpdGlvbnMgPSBnZW5lcmF0ZUFyY1Bvc2l0aW9uczsKICAgICAgICAgIGdlbmVyYXRlQXJjT3B0aW9ucy5oZWlnaHQgPSBnZW5lcmF0ZUFyY0hlaWdodHM7CiAgICAgICAgICBsZXQgb2Zmc2V0ID0gMDsKICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGggLSAxOyBpKyspIHsKICAgICAgICAgICAgZ2VuZXJhdGVBcmNQb3NpdGlvbnNbMF0gPSB3YWxsUG9zaXRpb25zW2ldOwogICAgICAgICAgICBnZW5lcmF0ZUFyY1Bvc2l0aW9uc1sxXSA9IHdhbGxQb3NpdGlvbnNbaSArIDFdOwogICAgICAgICAgICBnZW5lcmF0ZUFyY0hlaWdodHNbMF0gPSBtYXhpbXVtSGVpZ2h0c1tpXTsKICAgICAgICAgICAgZ2VuZXJhdGVBcmNIZWlnaHRzWzFdID0gbWF4aW11bUhlaWdodHNbaSArIDFdOwogICAgICAgICAgICBjb25zdCBwb3MgPSBQb2x5bGluZVBpcGVsaW5lX2RlZmF1bHQuZ2VuZXJhdGVBcmMoZ2VuZXJhdGVBcmNPcHRpb25zKTsKICAgICAgICAgICAgdG9wUG9zaXRpb25zLnNldChwb3MsIG9mZnNldCk7CiAgICAgICAgICAgIGdlbmVyYXRlQXJjSGVpZ2h0c1swXSA9IG1pbmltdW1IZWlnaHRzW2ldOwogICAgICAgICAgICBnZW5lcmF0ZUFyY0hlaWdodHNbMV0gPSBtaW5pbXVtSGVpZ2h0c1tpICsgMV07CiAgICAgICAgICAgIGJvdHRvbVBvc2l0aW9ucy5zZXQoCiAgICAgICAgICAgICAgUG9seWxpbmVQaXBlbGluZV9kZWZhdWx0LmdlbmVyYXRlQXJjKGdlbmVyYXRlQXJjT3B0aW9ucyksCiAgICAgICAgICAgICAgb2Zmc2V0CiAgICAgICAgICAgICk7CiAgICAgICAgICAgIG9mZnNldCArPSBwb3MubGVuZ3RoOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBnZW5lcmF0ZUFyY09wdGlvbnMucG9zaXRpb25zID0gd2FsbFBvc2l0aW9uczsKICAgICAgICAgIGdlbmVyYXRlQXJjT3B0aW9ucy5oZWlnaHQgPSBtYXhpbXVtSGVpZ2h0czsKICAgICAgICAgIHRvcFBvc2l0aW9ucyA9IG5ldyBGbG9hdDY0QXJyYXkoCiAgICAgICAgICAgIFBvbHlsaW5lUGlwZWxpbmVfZGVmYXVsdC5nZW5lcmF0ZUFyYyhnZW5lcmF0ZUFyY09wdGlvbnMpCiAgICAgICAgICApOwogICAgICAgICAgZ2VuZXJhdGVBcmNPcHRpb25zLmhlaWdodCA9IG1pbmltdW1IZWlnaHRzOwogICAgICAgICAgYm90dG9tUG9zaXRpb25zID0gbmV3IEZsb2F0NjRBcnJheSgKICAgICAgICAgICAgUG9seWxpbmVQaXBlbGluZV9kZWZhdWx0LmdlbmVyYXRlQXJjKGdlbmVyYXRlQXJjT3B0aW9ucykKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIHJldHVybiB7CiAgICAgICAgICBib3R0b21Qb3NpdGlvbnMsCiAgICAgICAgICB0b3BQb3NpdGlvbnMsCiAgICAgICAgICBudW1Db3JuZXJzCiAgICAgICAgfTsKICAgICAgfTsKICAgICAgV2FsbEdlb21ldHJ5TGlicmFyeV9kZWZhdWx0ID0gV2FsbEdlb21ldHJ5TGlicmFyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL1dhbGxHZW9tZXRyeS5qcwogIGZ1bmN0aW9uIFdhbGxHZW9tZXRyeShvcHRpb25zKSB7CiAgICBvcHRpb25zID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucywgZGVmYXVsdFZhbHVlX2RlZmF1bHQuRU1QVFlfT0JKRUNUKTsKICAgIGNvbnN0IHdhbGxQb3NpdGlvbnMgPSBvcHRpb25zLnBvc2l0aW9uczsKICAgIGNvbnN0IG1heGltdW1IZWlnaHRzID0gb3B0aW9ucy5tYXhpbXVtSGVpZ2h0czsKICAgIGNvbnN0IG1pbmltdW1IZWlnaHRzID0gb3B0aW9ucy5taW5pbXVtSGVpZ2h0czsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHdhbGxQb3NpdGlvbnMpKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJvcHRpb25zLnBvc2l0aW9ucyBpcyByZXF1aXJlZC4iKTsKICAgIH0KICAgIGlmIChkZWZpbmVkX2RlZmF1bHQobWF4aW11bUhlaWdodHMpICYmIG1heGltdW1IZWlnaHRzLmxlbmd0aCAhPT0gd2FsbFBvc2l0aW9ucy5sZW5ndGgpIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgIm9wdGlvbnMucG9zaXRpb25zIGFuZCBvcHRpb25zLm1heGltdW1IZWlnaHRzIG11c3QgaGF2ZSB0aGUgc2FtZSBsZW5ndGguIgogICAgICApOwogICAgfQogICAgaWYgKGRlZmluZWRfZGVmYXVsdChtaW5pbXVtSGVpZ2h0cykgJiYgbWluaW11bUhlaWdodHMubGVuZ3RoICE9PSB3YWxsUG9zaXRpb25zLmxlbmd0aCkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgKICAgICAgICAib3B0aW9ucy5wb3NpdGlvbnMgYW5kIG9wdGlvbnMubWluaW11bUhlaWdodHMgbXVzdCBoYXZlIHRoZSBzYW1lIGxlbmd0aC4iCiAgICAgICk7CiAgICB9CiAgICBjb25zdCB2ZXJ0ZXhGb3JtYXQgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChvcHRpb25zLnZlcnRleEZvcm1hdCwgVmVydGV4Rm9ybWF0X2RlZmF1bHQuREVGQVVMVCk7CiAgICBjb25zdCBncmFudWxhcml0eSA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KAogICAgICBvcHRpb25zLmdyYW51bGFyaXR5LAogICAgICBNYXRoX2RlZmF1bHQuUkFESUFOU19QRVJfREVHUkVFCiAgICApOwogICAgY29uc3QgZWxsaXBzb2lkID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucy5lbGxpcHNvaWQsIEVsbGlwc29pZF9kZWZhdWx0LmRlZmF1bHQpOwogICAgdGhpcy5fcG9zaXRpb25zID0gd2FsbFBvc2l0aW9uczsKICAgIHRoaXMuX21pbmltdW1IZWlnaHRzID0gbWluaW11bUhlaWdodHM7CiAgICB0aGlzLl9tYXhpbXVtSGVpZ2h0cyA9IG1heGltdW1IZWlnaHRzOwogICAgdGhpcy5fdmVydGV4Rm9ybWF0ID0gVmVydGV4Rm9ybWF0X2RlZmF1bHQuY2xvbmUodmVydGV4Rm9ybWF0KTsKICAgIHRoaXMuX2dyYW51bGFyaXR5ID0gZ3JhbnVsYXJpdHk7CiAgICB0aGlzLl9lbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZShlbGxpcHNvaWQpOwogICAgdGhpcy5fd29ya2VyTmFtZSA9ICJjcmVhdGVXYWxsR2VvbWV0cnkiOwogICAgbGV0IG51bUNvbXBvbmVudHMgPSAxICsgd2FsbFBvc2l0aW9ucy5sZW5ndGggKiBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoICsgMjsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQobWluaW11bUhlaWdodHMpKSB7CiAgICAgIG51bUNvbXBvbmVudHMgKz0gbWluaW11bUhlaWdodHMubGVuZ3RoOwogICAgfQogICAgaWYgKGRlZmluZWRfZGVmYXVsdChtYXhpbXVtSGVpZ2h0cykpIHsKICAgICAgbnVtQ29tcG9uZW50cyArPSBtYXhpbXVtSGVpZ2h0cy5sZW5ndGg7CiAgICB9CiAgICB0aGlzLnBhY2tlZExlbmd0aCA9IG51bUNvbXBvbmVudHMgKyBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5wYWNrZWRMZW5ndGggKyAxOwogIH0KICB2YXIgc2NyYXRjaENhcnRlc2lhbjNQb3NpdGlvbjEsIHNjcmF0Y2hDYXJ0ZXNpYW4zUG9zaXRpb24yLCBzY3JhdGNoQ2FydGVzaWFuM1Bvc2l0aW9uNCwgc2NyYXRjaENhcnRlc2lhbjNQb3NpdGlvbjUsIHNjcmF0Y2hCaXRhbmdlbnQ1LCBzY3JhdGNoVGFuZ2VudDUsIHNjcmF0Y2hOb3JtYWw4LCBzY3JhdGNoRWxsaXBzb2lkMTcsIHNjcmF0Y2hWZXJ0ZXhGb3JtYXQxMywgc2NyYXRjaE9wdGlvbnMyMywgV2FsbEdlb21ldHJ5X2RlZmF1bHQ7CiAgdmFyIGluaXRfV2FsbEdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9XYWxsR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X0JvdW5kaW5nU3BoZXJlKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMygpOwogICAgICBpbml0X0NvbXBvbmVudERhdGF0eXBlKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkKCk7CiAgICAgIGluaXRfR2VvbWV0cnkoKTsKICAgICAgaW5pdF9HZW9tZXRyeUF0dHJpYnV0ZSgpOwogICAgICBpbml0X0dlb21ldHJ5QXR0cmlidXRlcygpOwogICAgICBpbml0X0luZGV4RGF0YXR5cGUoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIGluaXRfUHJpbWl0aXZlVHlwZSgpOwogICAgICBpbml0X1ZlcnRleEZvcm1hdCgpOwogICAgICBpbml0X1dhbGxHZW9tZXRyeUxpYnJhcnkoKTsKICAgICAgc2NyYXRjaENhcnRlc2lhbjNQb3NpdGlvbjEgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4zUG9zaXRpb24yID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoQ2FydGVzaWFuM1Bvc2l0aW9uNCA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaENhcnRlc2lhbjNQb3NpdGlvbjUgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hCaXRhbmdlbnQ1ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBzY3JhdGNoVGFuZ2VudDUgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hOb3JtYWw4ID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBXYWxsR2VvbWV0cnkucGFjayA9IGZ1bmN0aW9uKHZhbHVlLCBhcnJheSwgc3RhcnRpbmdJbmRleCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHZhbHVlKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInZhbHVlIGlzIHJlcXVpcmVkIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGFycmF5KSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImFycmF5IGlzIHJlcXVpcmVkIik7CiAgICAgICAgfQogICAgICAgIHN0YXJ0aW5nSW5kZXggPSBkZWZhdWx0VmFsdWVfZGVmYXVsdChzdGFydGluZ0luZGV4LCAwKTsKICAgICAgICBsZXQgaTsKICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSB2YWx1ZS5fcG9zaXRpb25zOwogICAgICAgIGxldCBsZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoOwogICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSBsZW5ndGg7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpLCBzdGFydGluZ0luZGV4ICs9IENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGgpIHsKICAgICAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKHBvc2l0aW9uc1tpXSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIH0KICAgICAgICBjb25zdCBtaW5pbXVtSGVpZ2h0cyA9IHZhbHVlLl9taW5pbXVtSGVpZ2h0czsKICAgICAgICBsZW5ndGggPSBkZWZpbmVkX2RlZmF1bHQobWluaW11bUhlaWdodHMpID8gbWluaW11bUhlaWdodHMubGVuZ3RoIDogMDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gbGVuZ3RoOwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQobWluaW11bUhlaWdodHMpKSB7CiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IG1pbmltdW1IZWlnaHRzW2ldOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBjb25zdCBtYXhpbXVtSGVpZ2h0cyA9IHZhbHVlLl9tYXhpbXVtSGVpZ2h0czsKICAgICAgICBsZW5ndGggPSBkZWZpbmVkX2RlZmF1bHQobWF4aW11bUhlaWdodHMpID8gbWF4aW11bUhlaWdodHMubGVuZ3RoIDogMDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gbGVuZ3RoOwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQobWF4aW11bUhlaWdodHMpKSB7CiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IG1heGltdW1IZWlnaHRzW2ldOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrKHZhbHVlLl9lbGxpcHNvaWQsIGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IEVsbGlwc29pZF9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5wYWNrKHZhbHVlLl92ZXJ0ZXhGb3JtYXQsIGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IFZlcnRleEZvcm1hdF9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4XSA9IHZhbHVlLl9ncmFudWxhcml0eTsKICAgICAgICByZXR1cm4gYXJyYXk7CiAgICAgIH07CiAgICAgIHNjcmF0Y2hFbGxpcHNvaWQxNyA9IEVsbGlwc29pZF9kZWZhdWx0LmNsb25lKEVsbGlwc29pZF9kZWZhdWx0LlVOSVRfU1BIRVJFKTsKICAgICAgc2NyYXRjaFZlcnRleEZvcm1hdDEzID0gbmV3IFZlcnRleEZvcm1hdF9kZWZhdWx0KCk7CiAgICAgIHNjcmF0Y2hPcHRpb25zMjMgPSB7CiAgICAgICAgcG9zaXRpb25zOiB2b2lkIDAsCiAgICAgICAgbWluaW11bUhlaWdodHM6IHZvaWQgMCwKICAgICAgICBtYXhpbXVtSGVpZ2h0czogdm9pZCAwLAogICAgICAgIGVsbGlwc29pZDogc2NyYXRjaEVsbGlwc29pZDE3LAogICAgICAgIHZlcnRleEZvcm1hdDogc2NyYXRjaFZlcnRleEZvcm1hdDEzLAogICAgICAgIGdyYW51bGFyaXR5OiB2b2lkIDAKICAgICAgfTsKICAgICAgV2FsbEdlb21ldHJ5LnVucGFjayA9IGZ1bmN0aW9uKGFycmF5LCBzdGFydGluZ0luZGV4LCByZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChhcnJheSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJhcnJheSBpcyByZXF1aXJlZCIpOwogICAgICAgIH0KICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgbGV0IGk7CiAgICAgICAgbGV0IGxlbmd0aCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gbmV3IEFycmF5KGxlbmd0aCk7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpLCBzdGFydGluZ0luZGV4ICs9IENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrZWRMZW5ndGgpIHsKICAgICAgICAgIHBvc2l0aW9uc1tpXSA9IENhcnRlc2lhbjNfZGVmYXVsdC51bnBhY2soYXJyYXksIHN0YXJ0aW5nSW5kZXgpOwogICAgICAgIH0KICAgICAgICBsZW5ndGggPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGxldCBtaW5pbXVtSGVpZ2h0czsKICAgICAgICBpZiAobGVuZ3RoID4gMCkgewogICAgICAgICAgbWluaW11bUhlaWdodHMgPSBuZXcgQXJyYXkobGVuZ3RoKTsKICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgICAgICAgICBtaW5pbXVtSGVpZ2h0c1tpXSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGxlbmd0aCA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgbGV0IG1heGltdW1IZWlnaHRzOwogICAgICAgIGlmIChsZW5ndGggPiAwKSB7CiAgICAgICAgICBtYXhpbXVtSGVpZ2h0cyA9IG5ldyBBcnJheShsZW5ndGgpOwogICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgIG1heGltdW1IZWlnaHRzW2ldID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY29uc3QgZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQudW5wYWNrKGFycmF5LCBzdGFydGluZ0luZGV4LCBzY3JhdGNoRWxsaXBzb2lkMTcpOwogICAgICAgIHN0YXJ0aW5nSW5kZXggKz0gRWxsaXBzb2lkX2RlZmF1bHQucGFja2VkTGVuZ3RoOwogICAgICAgIGNvbnN0IHZlcnRleEZvcm1hdCA9IFZlcnRleEZvcm1hdF9kZWZhdWx0LnVucGFjaygKICAgICAgICAgIGFycmF5LAogICAgICAgICAgc3RhcnRpbmdJbmRleCwKICAgICAgICAgIHNjcmF0Y2hWZXJ0ZXhGb3JtYXQxMwogICAgICAgICk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgY29uc3QgZ3JhbnVsYXJpdHkgPSBhcnJheVtzdGFydGluZ0luZGV4XTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICBzY3JhdGNoT3B0aW9uczIzLnBvc2l0aW9ucyA9IHBvc2l0aW9uczsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMjMubWluaW11bUhlaWdodHMgPSBtaW5pbXVtSGVpZ2h0czsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMjMubWF4aW11bUhlaWdodHMgPSBtYXhpbXVtSGVpZ2h0czsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMjMuZ3JhbnVsYXJpdHkgPSBncmFudWxhcml0eTsKICAgICAgICAgIHJldHVybiBuZXcgV2FsbEdlb21ldHJ5KHNjcmF0Y2hPcHRpb25zMjMpOwogICAgICAgIH0KICAgICAgICByZXN1bHQuX3Bvc2l0aW9ucyA9IHBvc2l0aW9uczsKICAgICAgICByZXN1bHQuX21pbmltdW1IZWlnaHRzID0gbWluaW11bUhlaWdodHM7CiAgICAgICAgcmVzdWx0Ll9tYXhpbXVtSGVpZ2h0cyA9IG1heGltdW1IZWlnaHRzOwogICAgICAgIHJlc3VsdC5fZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUoZWxsaXBzb2lkLCByZXN1bHQuX2VsbGlwc29pZCk7CiAgICAgICAgcmVzdWx0Ll92ZXJ0ZXhGb3JtYXQgPSBWZXJ0ZXhGb3JtYXRfZGVmYXVsdC5jbG9uZSh2ZXJ0ZXhGb3JtYXQsIHJlc3VsdC5fdmVydGV4Rm9ybWF0KTsKICAgICAgICByZXN1bHQuX2dyYW51bGFyaXR5ID0gZ3JhbnVsYXJpdHk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgICAgV2FsbEdlb21ldHJ5LmZyb21Db25zdGFudEhlaWdodHMgPSBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgICAgb3B0aW9ucyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMsIGRlZmF1bHRWYWx1ZV9kZWZhdWx0LkVNUFRZX09CSkVDVCk7CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gb3B0aW9ucy5wb3NpdGlvbnM7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocG9zaXRpb25zKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoIm9wdGlvbnMucG9zaXRpb25zIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBsZXQgbWluSGVpZ2h0czsKICAgICAgICBsZXQgbWF4SGVpZ2h0czsKICAgICAgICBjb25zdCBtaW4zID0gb3B0aW9ucy5taW5pbXVtSGVpZ2h0OwogICAgICAgIGNvbnN0IG1heDMgPSBvcHRpb25zLm1heGltdW1IZWlnaHQ7CiAgICAgICAgY29uc3QgZG9NaW4gPSBkZWZpbmVkX2RlZmF1bHQobWluMyk7CiAgICAgICAgY29uc3QgZG9NYXggPSBkZWZpbmVkX2RlZmF1bHQobWF4Myk7CiAgICAgICAgaWYgKGRvTWluIHx8IGRvTWF4KSB7CiAgICAgICAgICBjb25zdCBsZW5ndGggPSBwb3NpdGlvbnMubGVuZ3RoOwogICAgICAgICAgbWluSGVpZ2h0cyA9IGRvTWluID8gbmV3IEFycmF5KGxlbmd0aCkgOiB2b2lkIDA7CiAgICAgICAgICBtYXhIZWlnaHRzID0gZG9NYXggPyBuZXcgQXJyYXkobGVuZ3RoKSA6IHZvaWQgMDsKICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgaWYgKGRvTWluKSB7CiAgICAgICAgICAgICAgbWluSGVpZ2h0c1tpXSA9IG1pbjM7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGRvTWF4KSB7CiAgICAgICAgICAgICAgbWF4SGVpZ2h0c1tpXSA9IG1heDM7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY29uc3QgbmV3T3B0aW9ucyA9IHsKICAgICAgICAgIHBvc2l0aW9ucywKICAgICAgICAgIG1heGltdW1IZWlnaHRzOiBtYXhIZWlnaHRzLAogICAgICAgICAgbWluaW11bUhlaWdodHM6IG1pbkhlaWdodHMsCiAgICAgICAgICBlbGxpcHNvaWQ6IG9wdGlvbnMuZWxsaXBzb2lkLAogICAgICAgICAgdmVydGV4Rm9ybWF0OiBvcHRpb25zLnZlcnRleEZvcm1hdAogICAgICAgIH07CiAgICAgICAgcmV0dXJuIG5ldyBXYWxsR2VvbWV0cnkobmV3T3B0aW9ucyk7CiAgICAgIH07CiAgICAgIFdhbGxHZW9tZXRyeS5jcmVhdGVHZW9tZXRyeSA9IGZ1bmN0aW9uKHdhbGxHZW9tZXRyeSkgewogICAgICAgIGNvbnN0IHdhbGxQb3NpdGlvbnMgPSB3YWxsR2VvbWV0cnkuX3Bvc2l0aW9uczsKICAgICAgICBjb25zdCBtaW5pbXVtSGVpZ2h0cyA9IHdhbGxHZW9tZXRyeS5fbWluaW11bUhlaWdodHM7CiAgICAgICAgY29uc3QgbWF4aW11bUhlaWdodHMgPSB3YWxsR2VvbWV0cnkuX21heGltdW1IZWlnaHRzOwogICAgICAgIGNvbnN0IHZlcnRleEZvcm1hdCA9IHdhbGxHZW9tZXRyeS5fdmVydGV4Rm9ybWF0OwogICAgICAgIGNvbnN0IGdyYW51bGFyaXR5ID0gd2FsbEdlb21ldHJ5Ll9ncmFudWxhcml0eTsKICAgICAgICBjb25zdCBlbGxpcHNvaWQgPSB3YWxsR2VvbWV0cnkuX2VsbGlwc29pZDsKICAgICAgICBjb25zdCBwb3MgPSBXYWxsR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuY29tcHV0ZVBvc2l0aW9ucygKICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgIHdhbGxQb3NpdGlvbnMsCiAgICAgICAgICBtYXhpbXVtSGVpZ2h0cywKICAgICAgICAgIG1pbmltdW1IZWlnaHRzLAogICAgICAgICAgZ3JhbnVsYXJpdHksCiAgICAgICAgICB0cnVlCiAgICAgICAgKTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwb3MpKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGNvbnN0IGJvdHRvbVBvc2l0aW9ucyA9IHBvcy5ib3R0b21Qb3NpdGlvbnM7CiAgICAgICAgY29uc3QgdG9wUG9zaXRpb25zID0gcG9zLnRvcFBvc2l0aW9uczsKICAgICAgICBjb25zdCBudW1Db3JuZXJzID0gcG9zLm51bUNvcm5lcnM7CiAgICAgICAgbGV0IGxlbmd0aCA9IHRvcFBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgbGV0IHNpemUgPSBsZW5ndGggKiAyOwogICAgICAgIGNvbnN0IHBvc2l0aW9ucyA9IHZlcnRleEZvcm1hdC5wb3NpdGlvbiA/IG5ldyBGbG9hdDY0QXJyYXkoc2l6ZSkgOiB2b2lkIDA7CiAgICAgICAgY29uc3Qgbm9ybWFscyA9IHZlcnRleEZvcm1hdC5ub3JtYWwgPyBuZXcgRmxvYXQzMkFycmF5KHNpemUpIDogdm9pZCAwOwogICAgICAgIGNvbnN0IHRhbmdlbnRzID0gdmVydGV4Rm9ybWF0LnRhbmdlbnQgPyBuZXcgRmxvYXQzMkFycmF5KHNpemUpIDogdm9pZCAwOwogICAgICAgIGNvbnN0IGJpdGFuZ2VudHMgPSB2ZXJ0ZXhGb3JtYXQuYml0YW5nZW50ID8gbmV3IEZsb2F0MzJBcnJheShzaXplKSA6IHZvaWQgMDsKICAgICAgICBjb25zdCB0ZXh0dXJlQ29vcmRpbmF0ZXMgPSB2ZXJ0ZXhGb3JtYXQuc3QgPyBuZXcgRmxvYXQzMkFycmF5KHNpemUgLyAzICogMikgOiB2b2lkIDA7CiAgICAgICAgbGV0IHBvc2l0aW9uSW5kZXggPSAwOwogICAgICAgIGxldCBub3JtYWxJbmRleCA9IDA7CiAgICAgICAgbGV0IGJpdGFuZ2VudEluZGV4ID0gMDsKICAgICAgICBsZXQgdGFuZ2VudEluZGV4ID0gMDsKICAgICAgICBsZXQgc3RJbmRleCA9IDA7CiAgICAgICAgbGV0IG5vcm1hbDIgPSBzY3JhdGNoTm9ybWFsODsKICAgICAgICBsZXQgdGFuZ2VudCA9IHNjcmF0Y2hUYW5nZW50NTsKICAgICAgICBsZXQgYml0YW5nZW50ID0gc2NyYXRjaEJpdGFuZ2VudDU7CiAgICAgICAgbGV0IHJlY29tcHV0ZU5vcm1hbCA9IHRydWU7CiAgICAgICAgbGVuZ3RoIC89IDM7CiAgICAgICAgbGV0IGk7CiAgICAgICAgbGV0IHMgPSAwOwogICAgICAgIGNvbnN0IGRzID0gMSAvIChsZW5ndGggLSBudW1Db3JuZXJzIC0gMSk7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgICBjb25zdCBpMyA9IGkgKiAzOwogICAgICAgICAgY29uc3QgdG9wUG9zaXRpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KAogICAgICAgICAgICB0b3BQb3NpdGlvbnMsCiAgICAgICAgICAgIGkzLAogICAgICAgICAgICBzY3JhdGNoQ2FydGVzaWFuM1Bvc2l0aW9uMQogICAgICAgICAgKTsKICAgICAgICAgIGNvbnN0IGJvdHRvbVBvc2l0aW9uID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheSgKICAgICAgICAgICAgYm90dG9tUG9zaXRpb25zLAogICAgICAgICAgICBpMywKICAgICAgICAgICAgc2NyYXRjaENhcnRlc2lhbjNQb3NpdGlvbjIKICAgICAgICAgICk7CiAgICAgICAgICBpZiAodmVydGV4Rm9ybWF0LnBvc2l0aW9uKSB7CiAgICAgICAgICAgIHBvc2l0aW9uc1twb3NpdGlvbkluZGV4KytdID0gYm90dG9tUG9zaXRpb24ueDsKICAgICAgICAgICAgcG9zaXRpb25zW3Bvc2l0aW9uSW5kZXgrK10gPSBib3R0b21Qb3NpdGlvbi55OwogICAgICAgICAgICBwb3NpdGlvbnNbcG9zaXRpb25JbmRleCsrXSA9IGJvdHRvbVBvc2l0aW9uLno7CiAgICAgICAgICAgIHBvc2l0aW9uc1twb3NpdGlvbkluZGV4KytdID0gdG9wUG9zaXRpb24ueDsKICAgICAgICAgICAgcG9zaXRpb25zW3Bvc2l0aW9uSW5kZXgrK10gPSB0b3BQb3NpdGlvbi55OwogICAgICAgICAgICBwb3NpdGlvbnNbcG9zaXRpb25JbmRleCsrXSA9IHRvcFBvc2l0aW9uLno7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodmVydGV4Rm9ybWF0LnN0KSB7CiAgICAgICAgICAgIHRleHR1cmVDb29yZGluYXRlc1tzdEluZGV4KytdID0gczsKICAgICAgICAgICAgdGV4dHVyZUNvb3JkaW5hdGVzW3N0SW5kZXgrK10gPSAwOwogICAgICAgICAgICB0ZXh0dXJlQ29vcmRpbmF0ZXNbc3RJbmRleCsrXSA9IHM7CiAgICAgICAgICAgIHRleHR1cmVDb29yZGluYXRlc1tzdEluZGV4KytdID0gMTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh2ZXJ0ZXhGb3JtYXQubm9ybWFsIHx8IHZlcnRleEZvcm1hdC50YW5nZW50IHx8IHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpIHsKICAgICAgICAgICAgbGV0IG5leHRUb3AgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuY2xvbmUoCiAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LlpFUk8sCiAgICAgICAgICAgICAgc2NyYXRjaENhcnRlc2lhbjNQb3NpdGlvbjUKICAgICAgICAgICAgKTsKICAgICAgICAgICAgY29uc3QgZ3JvdW5kUG9zaXRpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoCiAgICAgICAgICAgICAgdG9wUG9zaXRpb24sCiAgICAgICAgICAgICAgZWxsaXBzb2lkLmdlb2RldGljU3VyZmFjZU5vcm1hbCgKICAgICAgICAgICAgICAgIHRvcFBvc2l0aW9uLAogICAgICAgICAgICAgICAgc2NyYXRjaENhcnRlc2lhbjNQb3NpdGlvbjIKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4zUG9zaXRpb24yCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIGlmIChpICsgMSA8IGxlbmd0aCkgewogICAgICAgICAgICAgIG5leHRUb3AgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KAogICAgICAgICAgICAgICAgdG9wUG9zaXRpb25zLAogICAgICAgICAgICAgICAgaTMgKyAzLAogICAgICAgICAgICAgICAgc2NyYXRjaENhcnRlc2lhbjNQb3NpdGlvbjUKICAgICAgICAgICAgICApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChyZWNvbXB1dGVOb3JtYWwpIHsKICAgICAgICAgICAgICBjb25zdCBzY2FsZWRuZXh0UG9zaXRpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoCiAgICAgICAgICAgICAgICBuZXh0VG9wLAogICAgICAgICAgICAgICAgdG9wUG9zaXRpb24sCiAgICAgICAgICAgICAgICBzY3JhdGNoQ2FydGVzaWFuM1Bvc2l0aW9uNAogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgY29uc3Qgc2NhbGVkR3JvdW5kUG9zaXRpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QoCiAgICAgICAgICAgICAgICBncm91bmRQb3NpdGlvbiwKICAgICAgICAgICAgICAgIHRvcFBvc2l0aW9uLAogICAgICAgICAgICAgICAgc2NyYXRjaENhcnRlc2lhbjNQb3NpdGlvbjEKICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIG5vcm1hbDIgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKAogICAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKHNjYWxlZEdyb3VuZFBvc2l0aW9uLCBzY2FsZWRuZXh0UG9zaXRpb24sIG5vcm1hbDIpLAogICAgICAgICAgICAgICAgbm9ybWFsMgogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgcmVjb21wdXRlTm9ybWFsID0gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKENhcnRlc2lhbjNfZGVmYXVsdC5lcXVhbHNFcHNpbG9uKHRvcFBvc2l0aW9uLCBuZXh0VG9wLCBNYXRoX2RlZmF1bHQuRVBTSUxPTjEwKSkgewogICAgICAgICAgICAgIHJlY29tcHV0ZU5vcm1hbCA9IHRydWU7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgcyArPSBkczsKICAgICAgICAgICAgICBpZiAodmVydGV4Rm9ybWF0LnRhbmdlbnQpIHsKICAgICAgICAgICAgICAgIHRhbmdlbnQgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubm9ybWFsaXplKAogICAgICAgICAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuc3VidHJhY3QobmV4dFRvcCwgdG9wUG9zaXRpb24sIHRhbmdlbnQpLAogICAgICAgICAgICAgICAgICB0YW5nZW50CiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAodmVydGV4Rm9ybWF0LmJpdGFuZ2VudCkgewogICAgICAgICAgICAgICAgYml0YW5nZW50ID0gQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZSgKICAgICAgICAgICAgICAgICAgQ2FydGVzaWFuM19kZWZhdWx0LmNyb3NzKG5vcm1hbDIsIHRhbmdlbnQsIGJpdGFuZ2VudCksCiAgICAgICAgICAgICAgICAgIGJpdGFuZ2VudAogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5ub3JtYWwpIHsKICAgICAgICAgICAgICBub3JtYWxzW25vcm1hbEluZGV4KytdID0gbm9ybWFsMi54OwogICAgICAgICAgICAgIG5vcm1hbHNbbm9ybWFsSW5kZXgrK10gPSBub3JtYWwyLnk7CiAgICAgICAgICAgICAgbm9ybWFsc1tub3JtYWxJbmRleCsrXSA9IG5vcm1hbDIuejsKICAgICAgICAgICAgICBub3JtYWxzW25vcm1hbEluZGV4KytdID0gbm9ybWFsMi54OwogICAgICAgICAgICAgIG5vcm1hbHNbbm9ybWFsSW5kZXgrK10gPSBub3JtYWwyLnk7CiAgICAgICAgICAgICAgbm9ybWFsc1tub3JtYWxJbmRleCsrXSA9IG5vcm1hbDIuejsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodmVydGV4Rm9ybWF0LnRhbmdlbnQpIHsKICAgICAgICAgICAgICB0YW5nZW50c1t0YW5nZW50SW5kZXgrK10gPSB0YW5nZW50Lng7CiAgICAgICAgICAgICAgdGFuZ2VudHNbdGFuZ2VudEluZGV4KytdID0gdGFuZ2VudC55OwogICAgICAgICAgICAgIHRhbmdlbnRzW3RhbmdlbnRJbmRleCsrXSA9IHRhbmdlbnQuejsKICAgICAgICAgICAgICB0YW5nZW50c1t0YW5nZW50SW5kZXgrK10gPSB0YW5nZW50Lng7CiAgICAgICAgICAgICAgdGFuZ2VudHNbdGFuZ2VudEluZGV4KytdID0gdGFuZ2VudC55OwogICAgICAgICAgICAgIHRhbmdlbnRzW3RhbmdlbnRJbmRleCsrXSA9IHRhbmdlbnQuejsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodmVydGV4Rm9ybWF0LmJpdGFuZ2VudCkgewogICAgICAgICAgICAgIGJpdGFuZ2VudHNbYml0YW5nZW50SW5kZXgrK10gPSBiaXRhbmdlbnQueDsKICAgICAgICAgICAgICBiaXRhbmdlbnRzW2JpdGFuZ2VudEluZGV4KytdID0gYml0YW5nZW50Lnk7CiAgICAgICAgICAgICAgYml0YW5nZW50c1tiaXRhbmdlbnRJbmRleCsrXSA9IGJpdGFuZ2VudC56OwogICAgICAgICAgICAgIGJpdGFuZ2VudHNbYml0YW5nZW50SW5kZXgrK10gPSBiaXRhbmdlbnQueDsKICAgICAgICAgICAgICBiaXRhbmdlbnRzW2JpdGFuZ2VudEluZGV4KytdID0gYml0YW5nZW50Lnk7CiAgICAgICAgICAgICAgYml0YW5nZW50c1tiaXRhbmdlbnRJbmRleCsrXSA9IGJpdGFuZ2VudC56OwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVzX2RlZmF1bHQoKTsKICAgICAgICBpZiAodmVydGV4Rm9ybWF0LnBvc2l0aW9uKSB7CiAgICAgICAgICBhdHRyaWJ1dGVzLnBvc2l0aW9uID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5ET1VCTEUsCiAgICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDMsCiAgICAgICAgICAgIHZhbHVlczogcG9zaXRpb25zCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5ub3JtYWwpIHsKICAgICAgICAgIGF0dHJpYnV0ZXMubm9ybWFsID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICAgICAgdmFsdWVzOiBub3JtYWxzCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgaWYgKHZlcnRleEZvcm1hdC50YW5nZW50KSB7CiAgICAgICAgICBhdHRyaWJ1dGVzLnRhbmdlbnQgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVfZGVmYXVsdCh7CiAgICAgICAgICAgIGNvbXBvbmVudERhdGF0eXBlOiBDb21wb25lbnREYXRhdHlwZV9kZWZhdWx0LkZMT0FULAogICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgICAgICB2YWx1ZXM6IHRhbmdlbnRzCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5iaXRhbmdlbnQpIHsKICAgICAgICAgIGF0dHJpYnV0ZXMuYml0YW5nZW50ID0gbmV3IEdlb21ldHJ5QXR0cmlidXRlX2RlZmF1bHQoewogICAgICAgICAgICBjb21wb25lbnREYXRhdHlwZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5GTE9BVCwKICAgICAgICAgICAgY29tcG9uZW50c1BlckF0dHJpYnV0ZTogMywKICAgICAgICAgICAgdmFsdWVzOiBiaXRhbmdlbnRzCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgaWYgKHZlcnRleEZvcm1hdC5zdCkgewogICAgICAgICAgYXR0cmlidXRlcy5zdCA9IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRkxPQVQsCiAgICAgICAgICAgIGNvbXBvbmVudHNQZXJBdHRyaWJ1dGU6IDIsCiAgICAgICAgICAgIHZhbHVlczogdGV4dHVyZUNvb3JkaW5hdGVzCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgY29uc3QgbnVtVmVydGljZXMgPSBzaXplIC8gMzsKICAgICAgICBzaXplIC09IDYgKiAobnVtQ29ybmVycyArIDEpOwogICAgICAgIGNvbnN0IGluZGljZXMgPSBJbmRleERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheShudW1WZXJ0aWNlcywgc2l6ZSk7CiAgICAgICAgbGV0IGVkZ2VJbmRleCA9IDA7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IG51bVZlcnRpY2VzIC0gMjsgaSArPSAyKSB7CiAgICAgICAgICBjb25zdCBMTCA9IGk7CiAgICAgICAgICBjb25zdCBMUiA9IGkgKyAyOwogICAgICAgICAgY29uc3QgcGwgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KAogICAgICAgICAgICBwb3NpdGlvbnMsCiAgICAgICAgICAgIExMICogMywKICAgICAgICAgICAgc2NyYXRjaENhcnRlc2lhbjNQb3NpdGlvbjEKICAgICAgICAgICk7CiAgICAgICAgICBjb25zdCBwciA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkoCiAgICAgICAgICAgIHBvc2l0aW9ucywKICAgICAgICAgICAgTFIgKiAzLAogICAgICAgICAgICBzY3JhdGNoQ2FydGVzaWFuM1Bvc2l0aW9uMgogICAgICAgICAgKTsKICAgICAgICAgIGlmIChDYXJ0ZXNpYW4zX2RlZmF1bHQuZXF1YWxzRXBzaWxvbihwbCwgcHIsIE1hdGhfZGVmYXVsdC5FUFNJTE9OMTApKSB7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgICAgY29uc3QgVUwgPSBpICsgMTsKICAgICAgICAgIGNvbnN0IFVSID0gaSArIDM7CiAgICAgICAgICBpbmRpY2VzW2VkZ2VJbmRleCsrXSA9IFVMOwogICAgICAgICAgaW5kaWNlc1tlZGdlSW5kZXgrK10gPSBMTDsKICAgICAgICAgIGluZGljZXNbZWRnZUluZGV4KytdID0gVVI7CiAgICAgICAgICBpbmRpY2VzW2VkZ2VJbmRleCsrXSA9IFVSOwogICAgICAgICAgaW5kaWNlc1tlZGdlSW5kZXgrK10gPSBMTDsKICAgICAgICAgIGluZGljZXNbZWRnZUluZGV4KytdID0gTFI7CiAgICAgICAgfQogICAgICAgIHJldHVybiBuZXcgR2VvbWV0cnlfZGVmYXVsdCh7CiAgICAgICAgICBhdHRyaWJ1dGVzLAogICAgICAgICAgaW5kaWNlcywKICAgICAgICAgIHByaW1pdGl2ZVR5cGU6IFByaW1pdGl2ZVR5cGVfZGVmYXVsdC5UUklBTkdMRVMsCiAgICAgICAgICBib3VuZGluZ1NwaGVyZTogbmV3IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQuZnJvbVZlcnRpY2VzKHBvc2l0aW9ucykKICAgICAgICB9KTsKICAgICAgfTsKICAgICAgV2FsbEdlb21ldHJ5X2RlZmF1bHQgPSBXYWxsR2VvbWV0cnk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVXYWxsR2VvbWV0cnkuanMKICB2YXIgY3JlYXRlV2FsbEdlb21ldHJ5X2V4cG9ydHMgPSB7fTsKICBfX2V4cG9ydChjcmVhdGVXYWxsR2VvbWV0cnlfZXhwb3J0cywgewogICAgZGVmYXVsdDogKCkgPT4gY3JlYXRlV2FsbEdlb21ldHJ5X2RlZmF1bHQKICB9KTsKICBmdW5jdGlvbiBjcmVhdGVXYWxsR2VvbWV0cnkod2FsbEdlb21ldHJ5LCBvZmZzZXQpIHsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQob2Zmc2V0KSkgewogICAgICB3YWxsR2VvbWV0cnkgPSBXYWxsR2VvbWV0cnlfZGVmYXVsdC51bnBhY2sod2FsbEdlb21ldHJ5LCBvZmZzZXQpOwogICAgfQogICAgd2FsbEdlb21ldHJ5Ll9lbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZSh3YWxsR2VvbWV0cnkuX2VsbGlwc29pZCk7CiAgICByZXR1cm4gV2FsbEdlb21ldHJ5X2RlZmF1bHQuY3JlYXRlR2VvbWV0cnkod2FsbEdlb21ldHJ5KTsKICB9CiAgdmFyIGNyZWF0ZVdhbGxHZW9tZXRyeV9kZWZhdWx0OwogIHZhciBpbml0X2NyZWF0ZVdhbGxHZW9tZXRyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlV2FsbEdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkKCk7CiAgICAgIGluaXRfV2FsbEdlb21ldHJ5KCk7CiAgICAgIGNyZWF0ZVdhbGxHZW9tZXRyeV9kZWZhdWx0ID0gY3JlYXRlV2FsbEdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvV2FsbE91dGxpbmVHZW9tZXRyeS5qcwogIGZ1bmN0aW9uIFdhbGxPdXRsaW5lR2VvbWV0cnkob3B0aW9ucykgewogICAgb3B0aW9ucyA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMsIGRlZmF1bHRWYWx1ZV9kZWZhdWx0LkVNUFRZX09CSkVDVCk7CiAgICBjb25zdCB3YWxsUG9zaXRpb25zID0gb3B0aW9ucy5wb3NpdGlvbnM7CiAgICBjb25zdCBtYXhpbXVtSGVpZ2h0cyA9IG9wdGlvbnMubWF4aW11bUhlaWdodHM7CiAgICBjb25zdCBtaW5pbXVtSGVpZ2h0cyA9IG9wdGlvbnMubWluaW11bUhlaWdodHM7CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdCh3YWxsUG9zaXRpb25zKSkgewogICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgib3B0aW9ucy5wb3NpdGlvbnMgaXMgcmVxdWlyZWQuIik7CiAgICB9CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG1heGltdW1IZWlnaHRzKSAmJiBtYXhpbXVtSGVpZ2h0cy5sZW5ndGggIT09IHdhbGxQb3NpdGlvbnMubGVuZ3RoKSB7CiAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KAogICAgICAgICJvcHRpb25zLnBvc2l0aW9ucyBhbmQgb3B0aW9ucy5tYXhpbXVtSGVpZ2h0cyBtdXN0IGhhdmUgdGhlIHNhbWUgbGVuZ3RoLiIKICAgICAgKTsKICAgIH0KICAgIGlmIChkZWZpbmVkX2RlZmF1bHQobWluaW11bUhlaWdodHMpICYmIG1pbmltdW1IZWlnaHRzLmxlbmd0aCAhPT0gd2FsbFBvc2l0aW9ucy5sZW5ndGgpIHsKICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoCiAgICAgICAgIm9wdGlvbnMucG9zaXRpb25zIGFuZCBvcHRpb25zLm1pbmltdW1IZWlnaHRzIG11c3QgaGF2ZSB0aGUgc2FtZSBsZW5ndGguIgogICAgICApOwogICAgfQogICAgY29uc3QgZ3JhbnVsYXJpdHkgPSBkZWZhdWx0VmFsdWVfZGVmYXVsdCgKICAgICAgb3B0aW9ucy5ncmFudWxhcml0eSwKICAgICAgTWF0aF9kZWZhdWx0LlJBRElBTlNfUEVSX0RFR1JFRQogICAgKTsKICAgIGNvbnN0IGVsbGlwc29pZCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KG9wdGlvbnMuZWxsaXBzb2lkLCBFbGxpcHNvaWRfZGVmYXVsdC5kZWZhdWx0KTsKICAgIHRoaXMuX3Bvc2l0aW9ucyA9IHdhbGxQb3NpdGlvbnM7CiAgICB0aGlzLl9taW5pbXVtSGVpZ2h0cyA9IG1pbmltdW1IZWlnaHRzOwogICAgdGhpcy5fbWF4aW11bUhlaWdodHMgPSBtYXhpbXVtSGVpZ2h0czsKICAgIHRoaXMuX2dyYW51bGFyaXR5ID0gZ3JhbnVsYXJpdHk7CiAgICB0aGlzLl9lbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZShlbGxpcHNvaWQpOwogICAgdGhpcy5fd29ya2VyTmFtZSA9ICJjcmVhdGVXYWxsT3V0bGluZUdlb21ldHJ5IjsKICAgIGxldCBudW1Db21wb25lbnRzID0gMSArIHdhbGxQb3NpdGlvbnMubGVuZ3RoICogQ2FydGVzaWFuM19kZWZhdWx0LnBhY2tlZExlbmd0aCArIDI7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG1pbmltdW1IZWlnaHRzKSkgewogICAgICBudW1Db21wb25lbnRzICs9IG1pbmltdW1IZWlnaHRzLmxlbmd0aDsKICAgIH0KICAgIGlmIChkZWZpbmVkX2RlZmF1bHQobWF4aW11bUhlaWdodHMpKSB7CiAgICAgIG51bUNvbXBvbmVudHMgKz0gbWF4aW11bUhlaWdodHMubGVuZ3RoOwogICAgfQogICAgdGhpcy5wYWNrZWRMZW5ndGggPSBudW1Db21wb25lbnRzICsgRWxsaXBzb2lkX2RlZmF1bHQucGFja2VkTGVuZ3RoICsgMTsKICB9CiAgdmFyIHNjcmF0Y2hDYXJ0ZXNpYW4zUG9zaXRpb24xMiwgc2NyYXRjaENhcnRlc2lhbjNQb3NpdGlvbjIyLCBzY3JhdGNoRWxsaXBzb2lkMTgsIHNjcmF0Y2hPcHRpb25zMjQsIFdhbGxPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdDsKICB2YXIgaW5pdF9XYWxsT3V0bGluZUdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9XYWxsT3V0bGluZUdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9Cb3VuZGluZ1NwaGVyZSgpOwogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9Db21wb25lbnREYXRhdHlwZSgpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9EZXZlbG9wZXJFcnJvcigpOwogICAgICBpbml0X0VsbGlwc29pZCgpOwogICAgICBpbml0X0dlb21ldHJ5KCk7CiAgICAgIGluaXRfR2VvbWV0cnlBdHRyaWJ1dGUoKTsKICAgICAgaW5pdF9HZW9tZXRyeUF0dHJpYnV0ZXMoKTsKICAgICAgaW5pdF9JbmRleERhdGF0eXBlKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbml0X1ByaW1pdGl2ZVR5cGUoKTsKICAgICAgaW5pdF9XYWxsR2VvbWV0cnlMaWJyYXJ5KCk7CiAgICAgIHNjcmF0Y2hDYXJ0ZXNpYW4zUG9zaXRpb24xMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgc2NyYXRjaENhcnRlc2lhbjNQb3NpdGlvbjIyID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBXYWxsT3V0bGluZUdlb21ldHJ5LnBhY2sgPSBmdW5jdGlvbih2YWx1ZSwgYXJyYXksIHN0YXJ0aW5nSW5kZXgpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdCh2YWx1ZSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJ2YWx1ZSBpcyByZXF1aXJlZCIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChhcnJheSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJhcnJheSBpcyByZXF1aXJlZCIpOwogICAgICAgIH0KICAgICAgICBzdGFydGluZ0luZGV4ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoc3RhcnRpbmdJbmRleCwgMCk7CiAgICAgICAgbGV0IGk7CiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gdmFsdWUuX3Bvc2l0aW9uczsKICAgICAgICBsZXQgbGVuZ3RoID0gcG9zaXRpb25zLmxlbmd0aDsKICAgICAgICBhcnJheVtzdGFydGluZ0luZGV4KytdID0gbGVuZ3RoOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSwgc3RhcnRpbmdJbmRleCArPSBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoKSB7CiAgICAgICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayhwb3NpdGlvbnNbaV0sIGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICB9CiAgICAgICAgY29uc3QgbWluaW11bUhlaWdodHMgPSB2YWx1ZS5fbWluaW11bUhlaWdodHM7CiAgICAgICAgbGVuZ3RoID0gZGVmaW5lZF9kZWZhdWx0KG1pbmltdW1IZWlnaHRzKSA/IG1pbmltdW1IZWlnaHRzLmxlbmd0aCA6IDA7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IGxlbmd0aDsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG1pbmltdW1IZWlnaHRzKSkgewogICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSBtaW5pbXVtSGVpZ2h0c1tpXTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY29uc3QgbWF4aW11bUhlaWdodHMgPSB2YWx1ZS5fbWF4aW11bUhlaWdodHM7CiAgICAgICAgbGVuZ3RoID0gZGVmaW5lZF9kZWZhdWx0KG1heGltdW1IZWlnaHRzKSA/IG1heGltdW1IZWlnaHRzLmxlbmd0aCA6IDA7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleCsrXSA9IGxlbmd0aDsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG1heGltdW1IZWlnaHRzKSkgewogICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgIGFycmF5W3N0YXJ0aW5nSW5kZXgrK10gPSBtYXhpbXVtSGVpZ2h0c1tpXTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgRWxsaXBzb2lkX2RlZmF1bHQucGFjayh2YWx1ZS5fZWxsaXBzb2lkLCBhcnJheSwgc3RhcnRpbmdJbmRleCk7CiAgICAgICAgc3RhcnRpbmdJbmRleCArPSBFbGxpcHNvaWRfZGVmYXVsdC5wYWNrZWRMZW5ndGg7CiAgICAgICAgYXJyYXlbc3RhcnRpbmdJbmRleF0gPSB2YWx1ZS5fZ3JhbnVsYXJpdHk7CiAgICAgICAgcmV0dXJuIGFycmF5OwogICAgICB9OwogICAgICBzY3JhdGNoRWxsaXBzb2lkMTggPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZShFbGxpcHNvaWRfZGVmYXVsdC5VTklUX1NQSEVSRSk7CiAgICAgIHNjcmF0Y2hPcHRpb25zMjQgPSB7CiAgICAgICAgcG9zaXRpb25zOiB2b2lkIDAsCiAgICAgICAgbWluaW11bUhlaWdodHM6IHZvaWQgMCwKICAgICAgICBtYXhpbXVtSGVpZ2h0czogdm9pZCAwLAogICAgICAgIGVsbGlwc29pZDogc2NyYXRjaEVsbGlwc29pZDE4LAogICAgICAgIGdyYW51bGFyaXR5OiB2b2lkIDAKICAgICAgfTsKICAgICAgV2FsbE91dGxpbmVHZW9tZXRyeS51bnBhY2sgPSBmdW5jdGlvbihhcnJheSwgc3RhcnRpbmdJbmRleCwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoYXJyYXkpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgiYXJyYXkgaXMgcmVxdWlyZWQiKTsKICAgICAgICB9CiAgICAgICAgc3RhcnRpbmdJbmRleCA9IGRlZmF1bHRWYWx1ZV9kZWZhdWx0KHN0YXJ0aW5nSW5kZXgsIDApOwogICAgICAgIGxldCBpOwogICAgICAgIGxldCBsZW5ndGggPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGNvbnN0IHBvc2l0aW9ucyA9IG5ldyBBcnJheShsZW5ndGgpOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSwgc3RhcnRpbmdJbmRleCArPSBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFja2VkTGVuZ3RoKSB7CiAgICAgICAgICBwb3NpdGlvbnNbaV0gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQudW5wYWNrKGFycmF5LCBzdGFydGluZ0luZGV4KTsKICAgICAgICB9CiAgICAgICAgbGVuZ3RoID0gYXJyYXlbc3RhcnRpbmdJbmRleCsrXTsKICAgICAgICBsZXQgbWluaW11bUhlaWdodHM7CiAgICAgICAgaWYgKGxlbmd0aCA+IDApIHsKICAgICAgICAgIG1pbmltdW1IZWlnaHRzID0gbmV3IEFycmF5KGxlbmd0aCk7CiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgbWluaW11bUhlaWdodHNbaV0gPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBsZW5ndGggPSBhcnJheVtzdGFydGluZ0luZGV4KytdOwogICAgICAgIGxldCBtYXhpbXVtSGVpZ2h0czsKICAgICAgICBpZiAobGVuZ3RoID4gMCkgewogICAgICAgICAgbWF4aW11bUhlaWdodHMgPSBuZXcgQXJyYXkobGVuZ3RoKTsKICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgICAgICAgICBtYXhpbXVtSGVpZ2h0c1tpXSA9IGFycmF5W3N0YXJ0aW5nSW5kZXgrK107CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNvbnN0IGVsbGlwc29pZCA9IEVsbGlwc29pZF9kZWZhdWx0LnVucGFjayhhcnJheSwgc3RhcnRpbmdJbmRleCwgc2NyYXRjaEVsbGlwc29pZDE4KTsKICAgICAgICBzdGFydGluZ0luZGV4ICs9IEVsbGlwc29pZF9kZWZhdWx0LnBhY2tlZExlbmd0aDsKICAgICAgICBjb25zdCBncmFudWxhcml0eSA9IGFycmF5W3N0YXJ0aW5nSW5kZXhdOwogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHNjcmF0Y2hPcHRpb25zMjQucG9zaXRpb25zID0gcG9zaXRpb25zOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMyNC5taW5pbXVtSGVpZ2h0cyA9IG1pbmltdW1IZWlnaHRzOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMyNC5tYXhpbXVtSGVpZ2h0cyA9IG1heGltdW1IZWlnaHRzOwogICAgICAgICAgc2NyYXRjaE9wdGlvbnMyNC5ncmFudWxhcml0eSA9IGdyYW51bGFyaXR5OwogICAgICAgICAgcmV0dXJuIG5ldyBXYWxsT3V0bGluZUdlb21ldHJ5KHNjcmF0Y2hPcHRpb25zMjQpOwogICAgICAgIH0KICAgICAgICByZXN1bHQuX3Bvc2l0aW9ucyA9IHBvc2l0aW9uczsKICAgICAgICByZXN1bHQuX21pbmltdW1IZWlnaHRzID0gbWluaW11bUhlaWdodHM7CiAgICAgICAgcmVzdWx0Ll9tYXhpbXVtSGVpZ2h0cyA9IG1heGltdW1IZWlnaHRzOwogICAgICAgIHJlc3VsdC5fZWxsaXBzb2lkID0gRWxsaXBzb2lkX2RlZmF1bHQuY2xvbmUoZWxsaXBzb2lkLCByZXN1bHQuX2VsbGlwc29pZCk7CiAgICAgICAgcmVzdWx0Ll9ncmFudWxhcml0eSA9IGdyYW51bGFyaXR5OwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFdhbGxPdXRsaW5lR2VvbWV0cnkuZnJvbUNvbnN0YW50SGVpZ2h0cyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgICBvcHRpb25zID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQob3B0aW9ucywgZGVmYXVsdFZhbHVlX2RlZmF1bHQuRU1QVFlfT0JKRUNUKTsKICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSBvcHRpb25zLnBvc2l0aW9uczsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChwb3NpdGlvbnMpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgib3B0aW9ucy5wb3NpdGlvbnMgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGxldCBtaW5IZWlnaHRzOwogICAgICAgIGxldCBtYXhIZWlnaHRzOwogICAgICAgIGNvbnN0IG1pbjMgPSBvcHRpb25zLm1pbmltdW1IZWlnaHQ7CiAgICAgICAgY29uc3QgbWF4MyA9IG9wdGlvbnMubWF4aW11bUhlaWdodDsKICAgICAgICBjb25zdCBkb01pbiA9IGRlZmluZWRfZGVmYXVsdChtaW4zKTsKICAgICAgICBjb25zdCBkb01heCA9IGRlZmluZWRfZGVmYXVsdChtYXgzKTsKICAgICAgICBpZiAoZG9NaW4gfHwgZG9NYXgpIHsKICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IHBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgICBtaW5IZWlnaHRzID0gZG9NaW4gPyBuZXcgQXJyYXkobGVuZ3RoKSA6IHZvaWQgMDsKICAgICAgICAgIG1heEhlaWdodHMgPSBkb01heCA/IG5ldyBBcnJheShsZW5ndGgpIDogdm9pZCAwOwogICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgICAgICAgICBpZiAoZG9NaW4pIHsKICAgICAgICAgICAgICBtaW5IZWlnaHRzW2ldID0gbWluMzsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoZG9NYXgpIHsKICAgICAgICAgICAgICBtYXhIZWlnaHRzW2ldID0gbWF4MzsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBjb25zdCBuZXdPcHRpb25zID0gewogICAgICAgICAgcG9zaXRpb25zLAogICAgICAgICAgbWF4aW11bUhlaWdodHM6IG1heEhlaWdodHMsCiAgICAgICAgICBtaW5pbXVtSGVpZ2h0czogbWluSGVpZ2h0cywKICAgICAgICAgIGVsbGlwc29pZDogb3B0aW9ucy5lbGxpcHNvaWQKICAgICAgICB9OwogICAgICAgIHJldHVybiBuZXcgV2FsbE91dGxpbmVHZW9tZXRyeShuZXdPcHRpb25zKTsKICAgICAgfTsKICAgICAgV2FsbE91dGxpbmVHZW9tZXRyeS5jcmVhdGVHZW9tZXRyeSA9IGZ1bmN0aW9uKHdhbGxHZW9tZXRyeSkgewogICAgICAgIGNvbnN0IHdhbGxQb3NpdGlvbnMgPSB3YWxsR2VvbWV0cnkuX3Bvc2l0aW9uczsKICAgICAgICBjb25zdCBtaW5pbXVtSGVpZ2h0cyA9IHdhbGxHZW9tZXRyeS5fbWluaW11bUhlaWdodHM7CiAgICAgICAgY29uc3QgbWF4aW11bUhlaWdodHMgPSB3YWxsR2VvbWV0cnkuX21heGltdW1IZWlnaHRzOwogICAgICAgIGNvbnN0IGdyYW51bGFyaXR5ID0gd2FsbEdlb21ldHJ5Ll9ncmFudWxhcml0eTsKICAgICAgICBjb25zdCBlbGxpcHNvaWQgPSB3YWxsR2VvbWV0cnkuX2VsbGlwc29pZDsKICAgICAgICBjb25zdCBwb3MgPSBXYWxsR2VvbWV0cnlMaWJyYXJ5X2RlZmF1bHQuY29tcHV0ZVBvc2l0aW9ucygKICAgICAgICAgIGVsbGlwc29pZCwKICAgICAgICAgIHdhbGxQb3NpdGlvbnMsCiAgICAgICAgICBtYXhpbXVtSGVpZ2h0cywKICAgICAgICAgIG1pbmltdW1IZWlnaHRzLAogICAgICAgICAgZ3JhbnVsYXJpdHksCiAgICAgICAgICBmYWxzZQogICAgICAgICk7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQocG9zKSkgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBjb25zdCBib3R0b21Qb3NpdGlvbnMgPSBwb3MuYm90dG9tUG9zaXRpb25zOwogICAgICAgIGNvbnN0IHRvcFBvc2l0aW9ucyA9IHBvcy50b3BQb3NpdGlvbnM7CiAgICAgICAgbGV0IGxlbmd0aCA9IHRvcFBvc2l0aW9ucy5sZW5ndGg7CiAgICAgICAgbGV0IHNpemUgPSBsZW5ndGggKiAyOwogICAgICAgIGNvbnN0IHBvc2l0aW9ucyA9IG5ldyBGbG9hdDY0QXJyYXkoc2l6ZSk7CiAgICAgICAgbGV0IHBvc2l0aW9uSW5kZXggPSAwOwogICAgICAgIGxlbmd0aCAvPSAzOwogICAgICAgIGxldCBpOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgICAgICAgY29uc3QgaTMgPSBpICogMzsKICAgICAgICAgIGNvbnN0IHRvcFBvc2l0aW9uID0gQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheSgKICAgICAgICAgICAgdG9wUG9zaXRpb25zLAogICAgICAgICAgICBpMywKICAgICAgICAgICAgc2NyYXRjaENhcnRlc2lhbjNQb3NpdGlvbjEyCiAgICAgICAgICApOwogICAgICAgICAgY29uc3QgYm90dG9tUG9zaXRpb24gPSBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KAogICAgICAgICAgICBib3R0b21Qb3NpdGlvbnMsCiAgICAgICAgICAgIGkzLAogICAgICAgICAgICBzY3JhdGNoQ2FydGVzaWFuM1Bvc2l0aW9uMjIKICAgICAgICAgICk7CiAgICAgICAgICBwb3NpdGlvbnNbcG9zaXRpb25JbmRleCsrXSA9IGJvdHRvbVBvc2l0aW9uLng7CiAgICAgICAgICBwb3NpdGlvbnNbcG9zaXRpb25JbmRleCsrXSA9IGJvdHRvbVBvc2l0aW9uLnk7CiAgICAgICAgICBwb3NpdGlvbnNbcG9zaXRpb25JbmRleCsrXSA9IGJvdHRvbVBvc2l0aW9uLno7CiAgICAgICAgICBwb3NpdGlvbnNbcG9zaXRpb25JbmRleCsrXSA9IHRvcFBvc2l0aW9uLng7CiAgICAgICAgICBwb3NpdGlvbnNbcG9zaXRpb25JbmRleCsrXSA9IHRvcFBvc2l0aW9uLnk7CiAgICAgICAgICBwb3NpdGlvbnNbcG9zaXRpb25JbmRleCsrXSA9IHRvcFBvc2l0aW9uLno7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBuZXcgR2VvbWV0cnlBdHRyaWJ1dGVzX2RlZmF1bHQoewogICAgICAgICAgcG9zaXRpb246IG5ldyBHZW9tZXRyeUF0dHJpYnV0ZV9kZWZhdWx0KHsKICAgICAgICAgICAgY29tcG9uZW50RGF0YXR5cGU6IENvbXBvbmVudERhdGF0eXBlX2RlZmF1bHQuRE9VQkxFLAogICAgICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiAzLAogICAgICAgICAgICB2YWx1ZXM6IHBvc2l0aW9ucwogICAgICAgICAgfSkKICAgICAgICB9KTsKICAgICAgICBjb25zdCBudW1WZXJ0aWNlcyA9IHNpemUgLyAzOwogICAgICAgIHNpemUgPSAyICogbnVtVmVydGljZXMgLSA0ICsgbnVtVmVydGljZXM7CiAgICAgICAgY29uc3QgaW5kaWNlcyA9IEluZGV4RGF0YXR5cGVfZGVmYXVsdC5jcmVhdGVUeXBlZEFycmF5KG51bVZlcnRpY2VzLCBzaXplKTsKICAgICAgICBsZXQgZWRnZUluZGV4ID0gMDsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbnVtVmVydGljZXMgLSAyOyBpICs9IDIpIHsKICAgICAgICAgIGNvbnN0IExMID0gaTsKICAgICAgICAgIGNvbnN0IExSID0gaSArIDI7CiAgICAgICAgICBjb25zdCBwbCA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkoCiAgICAgICAgICAgIHBvc2l0aW9ucywKICAgICAgICAgICAgTEwgKiAzLAogICAgICAgICAgICBzY3JhdGNoQ2FydGVzaWFuM1Bvc2l0aW9uMTIKICAgICAgICAgICk7CiAgICAgICAgICBjb25zdCBwciA9IENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkoCiAgICAgICAgICAgIHBvc2l0aW9ucywKICAgICAgICAgICAgTFIgKiAzLAogICAgICAgICAgICBzY3JhdGNoQ2FydGVzaWFuM1Bvc2l0aW9uMjIKICAgICAgICAgICk7CiAgICAgICAgICBpZiAoQ2FydGVzaWFuM19kZWZhdWx0LmVxdWFsc0Vwc2lsb24ocGwsIHByLCBNYXRoX2RlZmF1bHQuRVBTSUxPTjEwKSkgewogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICAgIGNvbnN0IFVMID0gaSArIDE7CiAgICAgICAgICBjb25zdCBVUiA9IGkgKyAzOwogICAgICAgICAgaW5kaWNlc1tlZGdlSW5kZXgrK10gPSBVTDsKICAgICAgICAgIGluZGljZXNbZWRnZUluZGV4KytdID0gTEw7CiAgICAgICAgICBpbmRpY2VzW2VkZ2VJbmRleCsrXSA9IFVMOwogICAgICAgICAgaW5kaWNlc1tlZGdlSW5kZXgrK10gPSBVUjsKICAgICAgICAgIGluZGljZXNbZWRnZUluZGV4KytdID0gTEw7CiAgICAgICAgICBpbmRpY2VzW2VkZ2VJbmRleCsrXSA9IExSOwogICAgICAgIH0KICAgICAgICBpbmRpY2VzW2VkZ2VJbmRleCsrXSA9IG51bVZlcnRpY2VzIC0gMjsKICAgICAgICBpbmRpY2VzW2VkZ2VJbmRleCsrXSA9IG51bVZlcnRpY2VzIC0gMTsKICAgICAgICByZXR1cm4gbmV3IEdlb21ldHJ5X2RlZmF1bHQoewogICAgICAgICAgYXR0cmlidXRlcywKICAgICAgICAgIGluZGljZXMsCiAgICAgICAgICBwcmltaXRpdmVUeXBlOiBQcmltaXRpdmVUeXBlX2RlZmF1bHQuTElORVMsCiAgICAgICAgICBib3VuZGluZ1NwaGVyZTogbmV3IEJvdW5kaW5nU3BoZXJlX2RlZmF1bHQuZnJvbVZlcnRpY2VzKHBvc2l0aW9ucykKICAgICAgICB9KTsKICAgICAgfTsKICAgICAgV2FsbE91dGxpbmVHZW9tZXRyeV9kZWZhdWx0ID0gV2FsbE91dGxpbmVHZW9tZXRyeTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZVdhbGxPdXRsaW5lR2VvbWV0cnkuanMKICB2YXIgY3JlYXRlV2FsbE91dGxpbmVHZW9tZXRyeV9leHBvcnRzID0ge307CiAgX19leHBvcnQoY3JlYXRlV2FsbE91dGxpbmVHZW9tZXRyeV9leHBvcnRzLCB7CiAgICBkZWZhdWx0OiAoKSA9PiBjcmVhdGVXYWxsT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQKICB9KTsKICBmdW5jdGlvbiBjcmVhdGVXYWxsT3V0bGluZUdlb21ldHJ5KHdhbGxHZW9tZXRyeSwgb2Zmc2V0KSB7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG9mZnNldCkpIHsKICAgICAgd2FsbEdlb21ldHJ5ID0gV2FsbE91dGxpbmVHZW9tZXRyeV9kZWZhdWx0LnVucGFjayh3YWxsR2VvbWV0cnksIG9mZnNldCk7CiAgICB9CiAgICB3YWxsR2VvbWV0cnkuX2VsbGlwc29pZCA9IEVsbGlwc29pZF9kZWZhdWx0LmNsb25lKHdhbGxHZW9tZXRyeS5fZWxsaXBzb2lkKTsKICAgIHJldHVybiBXYWxsT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQuY3JlYXRlR2VvbWV0cnkod2FsbEdlb21ldHJ5KTsKICB9CiAgdmFyIGNyZWF0ZVdhbGxPdXRsaW5lR2VvbWV0cnlfZGVmYXVsdDsKICB2YXIgaW5pdF9jcmVhdGVXYWxsT3V0bGluZUdlb21ldHJ5ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVXYWxsT3V0bGluZUdlb21ldHJ5LmpzIigpIHsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkKCk7CiAgICAgIGluaXRfV2FsbE91dGxpbmVHZW9tZXRyeSgpOwogICAgICBjcmVhdGVXYWxsT3V0bGluZUdlb21ldHJ5X2RlZmF1bHQgPSBjcmVhdGVXYWxsT3V0bGluZUdlb21ldHJ5OwogICAgfQogIH0pOwoKICAvLyBub2RlX21vZHVsZXMvZHJhY28zZC9kcmFjb19kZWNvZGVyX25vZGVqcy5qcwogIHZhciByZXF1aXJlX2RyYWNvX2RlY29kZXJfbm9kZWpzID0gX19jb21tb25KUyh7CiAgICAibm9kZV9tb2R1bGVzL2RyYWNvM2QvZHJhY29fZGVjb2Rlcl9ub2RlanMuanMiKGV4cG9ydHMyLCBtb2R1bGUpIHsKICAgICAgdmFyICRqc2NvbXAgPSAkanNjb21wIHx8IHt9OwogICAgICAkanNjb21wLnNjb3BlID0ge307CiAgICAgICRqc2NvbXAuYXJyYXlJdGVyYXRvckltcGwgPSBmdW5jdGlvbihrKSB7CiAgICAgICAgdmFyIG4gPSAwOwogICAgICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgICAgIHJldHVybiBuIDwgay5sZW5ndGggPyB7IGRvbmU6IGZhbHNlLCB2YWx1ZToga1tuKytdIH0gOiB7IGRvbmU6IHRydWUgfTsKICAgICAgICB9OwogICAgICB9OwogICAgICAkanNjb21wLmFycmF5SXRlcmF0b3IgPSBmdW5jdGlvbihrKSB7CiAgICAgICAgcmV0dXJuIHsgbmV4dDogJGpzY29tcC5hcnJheUl0ZXJhdG9ySW1wbChrKSB9OwogICAgICB9OwogICAgICAkanNjb21wLm1ha2VJdGVyYXRvciA9IGZ1bmN0aW9uKGspIHsKICAgICAgICB2YXIgbiA9ICJ1bmRlZmluZWQiICE9IHR5cGVvZiBTeW1ib2wgJiYgU3ltYm9sLml0ZXJhdG9yICYmIGtbU3ltYm9sLml0ZXJhdG9yXTsKICAgICAgICByZXR1cm4gbiA/IG4uY2FsbChrKSA6ICRqc2NvbXAuYXJyYXlJdGVyYXRvcihrKTsKICAgICAgfTsKICAgICAgJGpzY29tcC5BU1NVTUVfRVM1ID0gZmFsc2U7CiAgICAgICRqc2NvbXAuQVNTVU1FX05PX05BVElWRV9NQVAgPSBmYWxzZTsKICAgICAgJGpzY29tcC5BU1NVTUVfTk9fTkFUSVZFX1NFVCA9IGZhbHNlOwogICAgICAkanNjb21wLlNJTVBMRV9GUk9VTkRfUE9MWUZJTEwgPSBmYWxzZTsKICAgICAgJGpzY29tcC5JU09MQVRFX1BPTFlGSUxMUyA9IGZhbHNlOwogICAgICAkanNjb21wLkZPUkNFX1BPTFlGSUxMX1BST01JU0UgPSBmYWxzZTsKICAgICAgJGpzY29tcC5GT1JDRV9QT0xZRklMTF9QUk9NSVNFX1dIRU5fTk9fVU5IQU5ETEVEX1JFSkVDVElPTiA9IGZhbHNlOwogICAgICAkanNjb21wLmdldEdsb2JhbCA9IGZ1bmN0aW9uKGspIHsKICAgICAgICBrID0gWyJvYmplY3QiID09IHR5cGVvZiBnbG9iYWxUaGlzICYmIGdsb2JhbFRoaXMsIGssICJvYmplY3QiID09IHR5cGVvZiB3aW5kb3cgJiYgd2luZG93LCAib2JqZWN0IiA9PSB0eXBlb2Ygc2VsZiAmJiBzZWxmLCAib2JqZWN0IiA9PSB0eXBlb2YgZ2xvYmFsICYmIGdsb2JhbF07CiAgICAgICAgZm9yICh2YXIgbiA9IDA7IG4gPCBrLmxlbmd0aDsgKytuKSB7CiAgICAgICAgICB2YXIgbCA9IGtbbl07CiAgICAgICAgICBpZiAobCAmJiBsLk1hdGggPT0gTWF0aCkKICAgICAgICAgICAgcmV0dXJuIGw7CiAgICAgICAgfQogICAgICAgIHRocm93IEVycm9yKCJDYW5ub3QgZmluZCBnbG9iYWwgb2JqZWN0Iik7CiAgICAgIH07CiAgICAgICRqc2NvbXAuZ2xvYmFsID0gJGpzY29tcC5nZXRHbG9iYWwoZXhwb3J0czIpOwogICAgICAkanNjb21wLmRlZmluZVByb3BlcnR5ID0gJGpzY29tcC5BU1NVTUVfRVM1IHx8ICJmdW5jdGlvbiIgPT0gdHlwZW9mIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24oaywgbiwgbCkgewogICAgICAgIGlmIChrID09IEFycmF5LnByb3RvdHlwZSB8fCBrID09IE9iamVjdC5wcm90b3R5cGUpCiAgICAgICAgICByZXR1cm4gazsKICAgICAgICBrW25dID0gbC52YWx1ZTsKICAgICAgICByZXR1cm4gazsKICAgICAgfTsKICAgICAgJGpzY29tcC5JU19TWU1CT0xfTkFUSVZFID0gImZ1bmN0aW9uIiA9PT0gdHlwZW9mIFN5bWJvbCAmJiAic3ltYm9sIiA9PT0gdHlwZW9mIFN5bWJvbCgieCIpOwogICAgICAkanNjb21wLlRSVVNUX0VTNl9QT0xZRklMTFMgPSAhJGpzY29tcC5JU09MQVRFX1BPTFlGSUxMUyB8fCAkanNjb21wLklTX1NZTUJPTF9OQVRJVkU7CiAgICAgICRqc2NvbXAucG9seWZpbGxzID0ge307CiAgICAgICRqc2NvbXAucHJvcGVydHlUb1BvbHlmaWxsU3ltYm9sID0ge307CiAgICAgICRqc2NvbXAuUE9MWUZJTExfUFJFRklYID0gIiRqc2NwJCI7CiAgICAgICRqc2NvbXAucG9seWZpbGwgPSBmdW5jdGlvbihrLCBuLCBsLCBwKSB7CiAgICAgICAgbiAmJiAoJGpzY29tcC5JU09MQVRFX1BPTFlGSUxMUyA/ICRqc2NvbXAucG9seWZpbGxJc29sYXRlZChrLCBuLCBsLCBwKSA6ICRqc2NvbXAucG9seWZpbGxVbmlzb2xhdGVkKGssIG4sIGwsIHApKTsKICAgICAgfTsKICAgICAgJGpzY29tcC5wb2x5ZmlsbFVuaXNvbGF0ZWQgPSBmdW5jdGlvbihrLCBuLCBsLCBwKSB7CiAgICAgICAgbCA9ICRqc2NvbXAuZ2xvYmFsOwogICAgICAgIGsgPSBrLnNwbGl0KCIuIik7CiAgICAgICAgZm9yIChwID0gMDsgcCA8IGsubGVuZ3RoIC0gMTsgcCsrKSB7CiAgICAgICAgICB2YXIgaCA9IGtbcF07CiAgICAgICAgICBpZiAoIShoIGluIGwpKQogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICBsID0gbFtoXTsKICAgICAgICB9CiAgICAgICAgayA9IGtbay5sZW5ndGggLSAxXTsKICAgICAgICBwID0gbFtrXTsKICAgICAgICBuID0gbihwKTsKICAgICAgICBuICE9IHAgJiYgbnVsbCAhPSBuICYmICRqc2NvbXAuZGVmaW5lUHJvcGVydHkobCwgaywgeyBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlLCB2YWx1ZTogbiB9KTsKICAgICAgfTsKICAgICAgJGpzY29tcC5wb2x5ZmlsbElzb2xhdGVkID0gZnVuY3Rpb24oaywgbiwgbCwgcCkgewogICAgICAgIHZhciBoID0gay5zcGxpdCgiLiIpOwogICAgICAgIGsgPSAxID09PSBoLmxlbmd0aDsKICAgICAgICBwID0gaFswXTsKICAgICAgICBwID0gIWsgJiYgcCBpbiAkanNjb21wLnBvbHlmaWxscyA/ICRqc2NvbXAucG9seWZpbGxzIDogJGpzY29tcC5nbG9iYWw7CiAgICAgICAgZm9yICh2YXIgQSA9IDA7IEEgPCBoLmxlbmd0aCAtIDE7IEErKykgewogICAgICAgICAgdmFyIGYgPSBoW0FdOwogICAgICAgICAgaWYgKCEoZiBpbiBwKSkKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgcCA9IHBbZl07CiAgICAgICAgfQogICAgICAgIGggPSBoW2gubGVuZ3RoIC0gMV07CiAgICAgICAgbCA9ICRqc2NvbXAuSVNfU1lNQk9MX05BVElWRSAmJiAiZXM2IiA9PT0gbCA/IHBbaF0gOiBudWxsOwogICAgICAgIG4gPSBuKGwpOwogICAgICAgIG51bGwgIT0gbiAmJiAoayA/ICRqc2NvbXAuZGVmaW5lUHJvcGVydHkoJGpzY29tcC5wb2x5ZmlsbHMsIGgsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSwgdmFsdWU6IG4gfSkgOiBuICE9PSBsICYmICh2b2lkIDAgPT09ICRqc2NvbXAucHJvcGVydHlUb1BvbHlmaWxsU3ltYm9sW2hdICYmIChsID0gMWU5ICogTWF0aC5yYW5kb20oKSA+Pj4gMCwgJGpzY29tcC5wcm9wZXJ0eVRvUG9seWZpbGxTeW1ib2xbaF0gPSAkanNjb21wLklTX1NZTUJPTF9OQVRJVkUgPyAkanNjb21wLmdsb2JhbC5TeW1ib2woaCkgOiAkanNjb21wLlBPTFlGSUxMX1BSRUZJWCArIGwgKyAiJCIgKyBoKSwgJGpzY29tcC5kZWZpbmVQcm9wZXJ0eShwLCAkanNjb21wLnByb3BlcnR5VG9Qb2x5ZmlsbFN5bWJvbFtoXSwgeyBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlLCB2YWx1ZTogbiB9KSkpOwogICAgICB9OwogICAgICAkanNjb21wLnBvbHlmaWxsKCJQcm9taXNlIiwgZnVuY3Rpb24oaykgewogICAgICAgIGZ1bmN0aW9uIG4oKSB7CiAgICAgICAgICB0aGlzLmJhdGNoXyA9IG51bGw7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIGwoZikgewogICAgICAgICAgcmV0dXJuIGYgaW5zdGFuY2VvZiBoID8gZiA6IG5ldyBoKGZ1bmN0aW9uKHEsIHYzKSB7CiAgICAgICAgICAgIHEoZik7CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgaWYgKGsgJiYgKCEoJGpzY29tcC5GT1JDRV9QT0xZRklMTF9QUk9NSVNFIHx8ICRqc2NvbXAuRk9SQ0VfUE9MWUZJTExfUFJPTUlTRV9XSEVOX05PX1VOSEFORExFRF9SRUpFQ1RJT04gJiYgInVuZGVmaW5lZCIgPT09IHR5cGVvZiAkanNjb21wLmdsb2JhbC5Qcm9taXNlUmVqZWN0aW9uRXZlbnQpIHx8ICEkanNjb21wLmdsb2JhbC5Qcm9taXNlIHx8IC0xID09PSAkanNjb21wLmdsb2JhbC5Qcm9taXNlLnRvU3RyaW5nKCkuaW5kZXhPZigiW25hdGl2ZSBjb2RlXSIpKSkKICAgICAgICAgIHJldHVybiBrOwogICAgICAgIG4ucHJvdG90eXBlLmFzeW5jRXhlY3V0ZSA9IGZ1bmN0aW9uKGYpIHsKICAgICAgICAgIGlmIChudWxsID09IHRoaXMuYmF0Y2hfKSB7CiAgICAgICAgICAgIHRoaXMuYmF0Y2hfID0gW107CiAgICAgICAgICAgIHZhciBxID0gdGhpczsKICAgICAgICAgICAgdGhpcy5hc3luY0V4ZWN1dGVGdW5jdGlvbihmdW5jdGlvbigpIHsKICAgICAgICAgICAgICBxLmV4ZWN1dGVCYXRjaF8oKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgICB0aGlzLmJhdGNoXy5wdXNoKGYpOwogICAgICAgIH07CiAgICAgICAgdmFyIHAgPSAkanNjb21wLmdsb2JhbC5zZXRUaW1lb3V0OwogICAgICAgIG4ucHJvdG90eXBlLmFzeW5jRXhlY3V0ZUZ1bmN0aW9uID0gZnVuY3Rpb24oZikgewogICAgICAgICAgcChmLCAwKTsKICAgICAgICB9OwogICAgICAgIG4ucHJvdG90eXBlLmV4ZWN1dGVCYXRjaF8gPSBmdW5jdGlvbigpIHsKICAgICAgICAgIGZvciAoOyB0aGlzLmJhdGNoXyAmJiB0aGlzLmJhdGNoXy5sZW5ndGg7ICkgewogICAgICAgICAgICB2YXIgZiA9IHRoaXMuYmF0Y2hfOwogICAgICAgICAgICB0aGlzLmJhdGNoXyA9IFtdOwogICAgICAgICAgICBmb3IgKHZhciBxID0gMDsgcSA8IGYubGVuZ3RoOyArK3EpIHsKICAgICAgICAgICAgICB2YXIgdjMgPSBmW3FdOwogICAgICAgICAgICAgIGZbcV0gPSBudWxsOwogICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICB2MygpOwogICAgICAgICAgICAgIH0gY2F0Y2ggKHopIHsKICAgICAgICAgICAgICAgIHRoaXMuYXN5bmNUaHJvd18oeik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICB0aGlzLmJhdGNoXyA9IG51bGw7CiAgICAgICAgfTsKICAgICAgICBuLnByb3RvdHlwZS5hc3luY1Rocm93XyA9IGZ1bmN0aW9uKGYpIHsKICAgICAgICAgIHRoaXMuYXN5bmNFeGVjdXRlRnVuY3Rpb24oZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHRocm93IGY7CiAgICAgICAgICB9KTsKICAgICAgICB9OwogICAgICAgIHZhciBoID0gZnVuY3Rpb24oZikgewogICAgICAgICAgdGhpcy5zdGF0ZV8gPSAwOwogICAgICAgICAgdGhpcy5yZXN1bHRfID0gdm9pZCAwOwogICAgICAgICAgdGhpcy5vblNldHRsZWRDYWxsYmFja3NfID0gW107CiAgICAgICAgICB0aGlzLmlzUmVqZWN0aW9uSGFuZGxlZF8gPSBmYWxzZTsKICAgICAgICAgIHZhciBxID0gdGhpcy5jcmVhdGVSZXNvbHZlQW5kUmVqZWN0XygpOwogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgZihxLnJlc29sdmUsIHEucmVqZWN0KTsKICAgICAgICAgIH0gY2F0Y2ggKHYzKSB7CiAgICAgICAgICAgIHEucmVqZWN0KHYzKTsKICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIGgucHJvdG90eXBlLmNyZWF0ZVJlc29sdmVBbmRSZWplY3RfID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICBmdW5jdGlvbiBmKHopIHsKICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKE8pIHsKICAgICAgICAgICAgICB2MyB8fCAodjMgPSB0cnVlLCB6LmNhbGwocSwgTykpOwogICAgICAgICAgICB9OwogICAgICAgICAgfQogICAgICAgICAgdmFyIHEgPSB0aGlzLCB2MyA9IGZhbHNlOwogICAgICAgICAgcmV0dXJuIHsgcmVzb2x2ZTogZih0aGlzLnJlc29sdmVUb18pLCByZWplY3Q6IGYodGhpcy5yZWplY3RfKSB9OwogICAgICAgIH07CiAgICAgICAgaC5wcm90b3R5cGUucmVzb2x2ZVRvXyA9IGZ1bmN0aW9uKGYpIHsKICAgICAgICAgIGlmIChmID09PSB0aGlzKQogICAgICAgICAgICB0aGlzLnJlamVjdF8obmV3IFR5cGVFcnJvcigiQSBQcm9taXNlIGNhbm5vdCByZXNvbHZlIHRvIGl0c2VsZiIpKTsKICAgICAgICAgIGVsc2UgaWYgKGYgaW5zdGFuY2VvZiBoKQogICAgICAgICAgICB0aGlzLnNldHRsZVNhbWVBc1Byb21pc2VfKGYpOwogICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIGE6CiAgICAgICAgICAgICAgc3dpdGNoICh0eXBlb2YgZikgewogICAgICAgICAgICAgICAgY2FzZSAib2JqZWN0IjoKICAgICAgICAgICAgICAgICAgdmFyIHEgPSBudWxsICE9IGY7CiAgICAgICAgICAgICAgICAgIGJyZWFrIGE7CiAgICAgICAgICAgICAgICBjYXNlICJmdW5jdGlvbiI6CiAgICAgICAgICAgICAgICAgIHEgPSB0cnVlOwogICAgICAgICAgICAgICAgICBicmVhayBhOwogICAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgICAgcSA9IGZhbHNlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgcSA/IHRoaXMucmVzb2x2ZVRvTm9uUHJvbWlzZU9ial8oZikgOiB0aGlzLmZ1bGZpbGxfKGYpOwogICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgaC5wcm90b3R5cGUucmVzb2x2ZVRvTm9uUHJvbWlzZU9ial8gPSBmdW5jdGlvbihmKSB7CiAgICAgICAgICB2YXIgcSA9IHZvaWQgMDsKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIHEgPSBmLnRoZW47CiAgICAgICAgICB9IGNhdGNoICh2MykgewogICAgICAgICAgICB0aGlzLnJlamVjdF8odjMpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CiAgICAgICAgICAiZnVuY3Rpb24iID09IHR5cGVvZiBxID8gdGhpcy5zZXR0bGVTYW1lQXNUaGVuYWJsZV8ocSwgZikgOiB0aGlzLmZ1bGZpbGxfKGYpOwogICAgICAgIH07CiAgICAgICAgaC5wcm90b3R5cGUucmVqZWN0XyA9IGZ1bmN0aW9uKGYpIHsKICAgICAgICAgIHRoaXMuc2V0dGxlXygyLCBmKTsKICAgICAgICB9OwogICAgICAgIGgucHJvdG90eXBlLmZ1bGZpbGxfID0gZnVuY3Rpb24oZikgewogICAgICAgICAgdGhpcy5zZXR0bGVfKDEsIGYpOwogICAgICAgIH07CiAgICAgICAgaC5wcm90b3R5cGUuc2V0dGxlXyA9IGZ1bmN0aW9uKGYsIHEpIHsKICAgICAgICAgIGlmICgwICE9IHRoaXMuc3RhdGVfKQogICAgICAgICAgICB0aHJvdyBFcnJvcigiQ2Fubm90IHNldHRsZSgiICsgZiArICIsICIgKyBxICsgIik6IFByb21pc2UgYWxyZWFkeSBzZXR0bGVkIGluIHN0YXRlIiArIHRoaXMuc3RhdGVfKTsKICAgICAgICAgIHRoaXMuc3RhdGVfID0gZjsKICAgICAgICAgIHRoaXMucmVzdWx0XyA9IHE7CiAgICAgICAgICAyID09PSB0aGlzLnN0YXRlXyAmJiB0aGlzLnNjaGVkdWxlVW5oYW5kbGVkUmVqZWN0aW9uQ2hlY2tfKCk7CiAgICAgICAgICB0aGlzLmV4ZWN1dGVPblNldHRsZWRDYWxsYmFja3NfKCk7CiAgICAgICAgfTsKICAgICAgICBoLnByb3RvdHlwZS5zY2hlZHVsZVVuaGFuZGxlZFJlamVjdGlvbkNoZWNrXyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgdmFyIGYgPSB0aGlzOwogICAgICAgICAgcChmdW5jdGlvbigpIHsKICAgICAgICAgICAgaWYgKGYubm90aWZ5VW5oYW5kbGVkUmVqZWN0aW9uXygpKSB7CiAgICAgICAgICAgICAgdmFyIHEgPSAkanNjb21wLmdsb2JhbC5jb25zb2xlOwogICAgICAgICAgICAgICJ1bmRlZmluZWQiICE9PSB0eXBlb2YgcSAmJiBxLmVycm9yKGYucmVzdWx0Xyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sIDEpOwogICAgICAgIH07CiAgICAgICAgaC5wcm90b3R5cGUubm90aWZ5VW5oYW5kbGVkUmVqZWN0aW9uXyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgaWYgKHRoaXMuaXNSZWplY3Rpb25IYW5kbGVkXykKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgdmFyIGYgPSAkanNjb21wLmdsb2JhbC5DdXN0b21FdmVudCwgcSA9ICRqc2NvbXAuZ2xvYmFsLkV2ZW50LCB2MyA9ICRqc2NvbXAuZ2xvYmFsLmRpc3BhdGNoRXZlbnQ7CiAgICAgICAgICBpZiAoInVuZGVmaW5lZCIgPT09IHR5cGVvZiB2MykKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAiZnVuY3Rpb24iID09PSB0eXBlb2YgZiA/IGYgPSBuZXcgZigidW5oYW5kbGVkcmVqZWN0aW9uIiwgeyBjYW5jZWxhYmxlOiB0cnVlIH0pIDogImZ1bmN0aW9uIiA9PT0gdHlwZW9mIHEgPyBmID0gbmV3IHEoInVuaGFuZGxlZHJlamVjdGlvbiIsIHsgY2FuY2VsYWJsZTogdHJ1ZSB9KSA6IChmID0gJGpzY29tcC5nbG9iYWwuZG9jdW1lbnQuY3JlYXRlRXZlbnQoIkN1c3RvbUV2ZW50IiksIGYuaW5pdEN1c3RvbUV2ZW50KCJ1bmhhbmRsZWRyZWplY3Rpb24iLCBmYWxzZSwgdHJ1ZSwgZikpOwogICAgICAgICAgZi5wcm9taXNlID0gdGhpczsKICAgICAgICAgIGYucmVhc29uID0gdGhpcy5yZXN1bHRfOwogICAgICAgICAgcmV0dXJuIHYzKGYpOwogICAgICAgIH07CiAgICAgICAgaC5wcm90b3R5cGUuZXhlY3V0ZU9uU2V0dGxlZENhbGxiYWNrc18gPSBmdW5jdGlvbigpIHsKICAgICAgICAgIGlmIChudWxsICE9IHRoaXMub25TZXR0bGVkQ2FsbGJhY2tzXykgewogICAgICAgICAgICBmb3IgKHZhciBmID0gMDsgZiA8IHRoaXMub25TZXR0bGVkQ2FsbGJhY2tzXy5sZW5ndGg7ICsrZikKICAgICAgICAgICAgICBBLmFzeW5jRXhlY3V0ZSh0aGlzLm9uU2V0dGxlZENhbGxiYWNrc19bZl0pOwogICAgICAgICAgICB0aGlzLm9uU2V0dGxlZENhbGxiYWNrc18gPSBudWxsOwogICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgdmFyIEEgPSBuZXcgbigpOwogICAgICAgIGgucHJvdG90eXBlLnNldHRsZVNhbWVBc1Byb21pc2VfID0gZnVuY3Rpb24oZikgewogICAgICAgICAgdmFyIHEgPSB0aGlzLmNyZWF0ZVJlc29sdmVBbmRSZWplY3RfKCk7CiAgICAgICAgICBmLmNhbGxXaGVuU2V0dGxlZF8ocS5yZXNvbHZlLCBxLnJlamVjdCk7CiAgICAgICAgfTsKICAgICAgICBoLnByb3RvdHlwZS5zZXR0bGVTYW1lQXNUaGVuYWJsZV8gPSBmdW5jdGlvbihmLCBxKSB7CiAgICAgICAgICB2YXIgdjMgPSB0aGlzLmNyZWF0ZVJlc29sdmVBbmRSZWplY3RfKCk7CiAgICAgICAgICB0cnkgewogICAgICAgICAgICBmLmNhbGwocSwgdjMucmVzb2x2ZSwgdjMucmVqZWN0KTsKICAgICAgICAgIH0gY2F0Y2ggKHopIHsKICAgICAgICAgICAgdjMucmVqZWN0KHopOwogICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgaC5wcm90b3R5cGUudGhlbiA9IGZ1bmN0aW9uKGYsIHEpIHsKICAgICAgICAgIGZ1bmN0aW9uIHYzKHQsIHgpIHsKICAgICAgICAgICAgcmV0dXJuICJmdW5jdGlvbiIgPT0gdHlwZW9mIHQgPyBmdW5jdGlvbihEKSB7CiAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHoodChEKSk7CiAgICAgICAgICAgICAgfSBjYXRjaCAoUikgewogICAgICAgICAgICAgICAgTyhSKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gOiB4OwogICAgICAgICAgfQogICAgICAgICAgdmFyIHosIE8sIGJhID0gbmV3IGgoZnVuY3Rpb24odCwgeCkgewogICAgICAgICAgICB6ID0gdDsKICAgICAgICAgICAgTyA9IHg7CiAgICAgICAgICB9KTsKICAgICAgICAgIHRoaXMuY2FsbFdoZW5TZXR0bGVkXyh2MyhmLCB6KSwgdjMocSwgTykpOwogICAgICAgICAgcmV0dXJuIGJhOwogICAgICAgIH07CiAgICAgICAgaC5wcm90b3R5cGUuY2F0Y2ggPSBmdW5jdGlvbihmKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy50aGVuKHZvaWQgMCwgZik7CiAgICAgICAgfTsKICAgICAgICBoLnByb3RvdHlwZS5jYWxsV2hlblNldHRsZWRfID0gZnVuY3Rpb24oZiwgcSkgewogICAgICAgICAgZnVuY3Rpb24gdjMoKSB7CiAgICAgICAgICAgIHN3aXRjaCAoei5zdGF0ZV8pIHsKICAgICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgICBmKHoucmVzdWx0Xyk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICBxKHoucmVzdWx0Xyk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoIlVuZXhwZWN0ZWQgc3RhdGU6ICIgKyB6LnN0YXRlXyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHZhciB6ID0gdGhpczsKICAgICAgICAgIG51bGwgPT0gdGhpcy5vblNldHRsZWRDYWxsYmFja3NfID8gQS5hc3luY0V4ZWN1dGUodjMpIDogdGhpcy5vblNldHRsZWRDYWxsYmFja3NfLnB1c2godjMpOwogICAgICAgICAgdGhpcy5pc1JlamVjdGlvbkhhbmRsZWRfID0gdHJ1ZTsKICAgICAgICB9OwogICAgICAgIGgucmVzb2x2ZSA9IGw7CiAgICAgICAgaC5yZWplY3QgPSBmdW5jdGlvbihmKSB7CiAgICAgICAgICByZXR1cm4gbmV3IGgoZnVuY3Rpb24ocSwgdjMpIHsKICAgICAgICAgICAgdjMoZik7CiAgICAgICAgICB9KTsKICAgICAgICB9OwogICAgICAgIGgucmFjZSA9IGZ1bmN0aW9uKGYpIHsKICAgICAgICAgIHJldHVybiBuZXcgaChmdW5jdGlvbihxLCB2MykgewogICAgICAgICAgICBmb3IgKHZhciB6ID0gJGpzY29tcC5tYWtlSXRlcmF0b3IoZiksIE8gPSB6Lm5leHQoKTsgIU8uZG9uZTsgTyA9IHoubmV4dCgpKQogICAgICAgICAgICAgIGwoTy52YWx1ZSkuY2FsbFdoZW5TZXR0bGVkXyhxLCB2Myk7CiAgICAgICAgICB9KTsKICAgICAgICB9OwogICAgICAgIGguYWxsID0gZnVuY3Rpb24oZikgewogICAgICAgICAgdmFyIHEgPSAkanNjb21wLm1ha2VJdGVyYXRvcihmKSwgdjMgPSBxLm5leHQoKTsKICAgICAgICAgIHJldHVybiB2My5kb25lID8gbChbXSkgOiBuZXcgaChmdW5jdGlvbih6LCBPKSB7CiAgICAgICAgICAgIGZ1bmN0aW9uIGJhKEQpIHsKICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oUikgewogICAgICAgICAgICAgICAgdFtEXSA9IFI7CiAgICAgICAgICAgICAgICB4LS07CiAgICAgICAgICAgICAgICAwID09IHggJiYgeih0KTsKICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciB0ID0gW10sIHggPSAwOwogICAgICAgICAgICBkbwogICAgICAgICAgICAgIHQucHVzaCh2b2lkIDApLCB4KyssIGwodjMudmFsdWUpLmNhbGxXaGVuU2V0dGxlZF8oYmEodC5sZW5ndGggLSAxKSwgTyksIHYzID0gcS5uZXh0KCk7CiAgICAgICAgICAgIHdoaWxlICghdjMuZG9uZSk7CiAgICAgICAgICB9KTsKICAgICAgICB9OwogICAgICAgIHJldHVybiBoOwogICAgICB9LCAiZXM2IiwgImVzMyIpOwogICAgICAkanNjb21wLm93bnMgPSBmdW5jdGlvbihrLCBuKSB7CiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChrLCBuKTsKICAgICAgfTsKICAgICAgJGpzY29tcC5hc3NpZ24gPSAkanNjb21wLlRSVVNUX0VTNl9QT0xZRklMTFMgJiYgImZ1bmN0aW9uIiA9PSB0eXBlb2YgT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbihrLCBuKSB7CiAgICAgICAgZm9yICh2YXIgbCA9IDE7IGwgPCBhcmd1bWVudHMubGVuZ3RoOyBsKyspIHsKICAgICAgICAgIHZhciBwID0gYXJndW1lbnRzW2xdOwogICAgICAgICAgaWYgKHApCiAgICAgICAgICAgIGZvciAodmFyIGggaW4gcCkKICAgICAgICAgICAgICAkanNjb21wLm93bnMocCwgaCkgJiYgKGtbaF0gPSBwW2hdKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGs7CiAgICAgIH07CiAgICAgICRqc2NvbXAucG9seWZpbGwoIk9iamVjdC5hc3NpZ24iLCBmdW5jdGlvbihrKSB7CiAgICAgICAgcmV0dXJuIGsgfHwgJGpzY29tcC5hc3NpZ247CiAgICAgIH0sICJlczYiLCAiZXMzIik7CiAgICAgICRqc2NvbXAuY2hlY2tTdHJpbmdBcmdzID0gZnVuY3Rpb24oaywgbiwgbCkgewogICAgICAgIGlmIChudWxsID09IGspCiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJUaGUgJ3RoaXMnIHZhbHVlIGZvciBTdHJpbmcucHJvdG90eXBlLiIgKyBsICsgIiBtdXN0IG5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZCIpOwogICAgICAgIGlmIChuIGluc3RhbmNlb2YgUmVnRXhwKQogICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiRmlyc3QgYXJndW1lbnQgdG8gU3RyaW5nLnByb3RvdHlwZS4iICsgbCArICIgbXVzdCBub3QgYmUgYSByZWd1bGFyIGV4cHJlc3Npb24iKTsKICAgICAgICByZXR1cm4gayArICIiOwogICAgICB9OwogICAgICAkanNjb21wLnBvbHlmaWxsKCJTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGgiLCBmdW5jdGlvbihrKSB7CiAgICAgICAgcmV0dXJuIGsgPyBrIDogZnVuY3Rpb24obiwgbCkgewogICAgICAgICAgdmFyIHAgPSAkanNjb21wLmNoZWNrU3RyaW5nQXJncyh0aGlzLCBuLCAic3RhcnRzV2l0aCIpOwogICAgICAgICAgbiArPSAiIjsKICAgICAgICAgIHZhciBoID0gcC5sZW5ndGgsIEEgPSBuLmxlbmd0aDsKICAgICAgICAgIGwgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihsIHwgMCwgcC5sZW5ndGgpKTsKICAgICAgICAgIGZvciAodmFyIGYgPSAwOyBmIDwgQSAmJiBsIDwgaDsgKQogICAgICAgICAgICBpZiAocFtsKytdICE9IG5bZisrXSkKICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICByZXR1cm4gZiA+PSBBOwogICAgICAgIH07CiAgICAgIH0sICJlczYiLCAiZXMzIik7CiAgICAgICRqc2NvbXAucG9seWZpbGwoIkFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluIiwgZnVuY3Rpb24oaykgewogICAgICAgIGZ1bmN0aW9uIG4obCkgewogICAgICAgICAgbCA9IE51bWJlcihsKTsKICAgICAgICAgIHJldHVybiBJbmZpbml0eSA9PT0gbCB8fCAtSW5maW5pdHkgPT09IGwgPyBsIDogbCB8IDA7CiAgICAgICAgfQogICAgICAgIHJldHVybiBrID8gayA6IGZ1bmN0aW9uKGwsIHAsIGgpIHsKICAgICAgICAgIHZhciBBID0gdGhpcy5sZW5ndGg7CiAgICAgICAgICBsID0gbihsKTsKICAgICAgICAgIHAgPSBuKHApOwogICAgICAgICAgaCA9IHZvaWQgMCA9PT0gaCA/IEEgOiBuKGgpOwogICAgICAgICAgbCA9IDAgPiBsID8gTWF0aC5tYXgoQSArIGwsIDApIDogTWF0aC5taW4obCwgQSk7CiAgICAgICAgICBwID0gMCA+IHAgPyBNYXRoLm1heChBICsgcCwgMCkgOiBNYXRoLm1pbihwLCBBKTsKICAgICAgICAgIGggPSAwID4gaCA/IE1hdGgubWF4KEEgKyBoLCAwKSA6IE1hdGgubWluKGgsIEEpOwogICAgICAgICAgaWYgKGwgPCBwKQogICAgICAgICAgICBmb3IgKDsgcCA8IGg7ICkKICAgICAgICAgICAgICBwIGluIHRoaXMgPyB0aGlzW2wrK10gPSB0aGlzW3ArK10gOiAoZGVsZXRlIHRoaXNbbCsrXSwgcCsrKTsKICAgICAgICAgIGVsc2UKICAgICAgICAgICAgZm9yIChoID0gTWF0aC5taW4oaCwgQSArIHAgLSBsKSwgbCArPSBoIC0gcDsgaCA+IHA7ICkKICAgICAgICAgICAgICAtLWggaW4gdGhpcyA/IHRoaXNbLS1sXSA9IHRoaXNbaF0gOiBkZWxldGUgdGhpc1stLWxdOwogICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfTsKICAgICAgfSwgImVzNiIsICJlczMiKTsKICAgICAgJGpzY29tcC50eXBlZEFycmF5Q29weVdpdGhpbiA9IGZ1bmN0aW9uKGspIHsKICAgICAgICByZXR1cm4gayA/IGsgOiBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbjsKICAgICAgfTsKICAgICAgJGpzY29tcC5wb2x5ZmlsbCgiSW50OEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluIiwgJGpzY29tcC50eXBlZEFycmF5Q29weVdpdGhpbiwgImVzNiIsICJlczUiKTsKICAgICAgJGpzY29tcC5wb2x5ZmlsbCgiVWludDhBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbiIsICRqc2NvbXAudHlwZWRBcnJheUNvcHlXaXRoaW4sICJlczYiLCAiZXM1Iik7CiAgICAgICRqc2NvbXAucG9seWZpbGwoIlVpbnQ4Q2xhbXBlZEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluIiwgJGpzY29tcC50eXBlZEFycmF5Q29weVdpdGhpbiwgImVzNiIsICJlczUiKTsKICAgICAgJGpzY29tcC5wb2x5ZmlsbCgiSW50MTZBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbiIsICRqc2NvbXAudHlwZWRBcnJheUNvcHlXaXRoaW4sICJlczYiLCAiZXM1Iik7CiAgICAgICRqc2NvbXAucG9seWZpbGwoIlVpbnQxNkFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluIiwgJGpzY29tcC50eXBlZEFycmF5Q29weVdpdGhpbiwgImVzNiIsICJlczUiKTsKICAgICAgJGpzY29tcC5wb2x5ZmlsbCgiSW50MzJBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbiIsICRqc2NvbXAudHlwZWRBcnJheUNvcHlXaXRoaW4sICJlczYiLCAiZXM1Iik7CiAgICAgICRqc2NvbXAucG9seWZpbGwoIlVpbnQzMkFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluIiwgJGpzY29tcC50eXBlZEFycmF5Q29weVdpdGhpbiwgImVzNiIsICJlczUiKTsKICAgICAgJGpzY29tcC5wb2x5ZmlsbCgiRmxvYXQzMkFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluIiwgJGpzY29tcC50eXBlZEFycmF5Q29weVdpdGhpbiwgImVzNiIsICJlczUiKTsKICAgICAgJGpzY29tcC5wb2x5ZmlsbCgiRmxvYXQ2NEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluIiwgJGpzY29tcC50eXBlZEFycmF5Q29weVdpdGhpbiwgImVzNiIsICJlczUiKTsKICAgICAgdmFyIERyYWNvRGVjb2Rlck1vZHVsZSA9IGZ1bmN0aW9uKCkgewogICAgICAgIHZhciBrID0gInVuZGVmaW5lZCIgIT09IHR5cGVvZiBkb2N1bWVudCAmJiBkb2N1bWVudC5jdXJyZW50U2NyaXB0ID8gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmMgOiB2b2lkIDA7CiAgICAgICAgInVuZGVmaW5lZCIgIT09IHR5cGVvZiBfX2ZpbGVuYW1lICYmIChrID0gayB8fCBfX2ZpbGVuYW1lKTsKICAgICAgICByZXR1cm4gZnVuY3Rpb24obikgewogICAgICAgICAgZnVuY3Rpb24gbChlKSB7CiAgICAgICAgICAgIHJldHVybiBhMy5sb2NhdGVGaWxlID8gYTMubG9jYXRlRmlsZShlLCBVKSA6IFUgKyBlOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gcChlLCBiLCBjKSB7CiAgICAgICAgICAgIHZhciBkID0gYiArIGM7CiAgICAgICAgICAgIGZvciAoYyA9IGI7IGVbY10gJiYgIShjID49IGQpOyApCiAgICAgICAgICAgICAgKytjOwogICAgICAgICAgICBpZiAoMTYgPCBjIC0gYiAmJiBlLmJ1ZmZlciAmJiB2YSkKICAgICAgICAgICAgICByZXR1cm4gdmEuZGVjb2RlKGUuc3ViYXJyYXkoYiwgYykpOwogICAgICAgICAgICBmb3IgKGQgPSAiIjsgYiA8IGM7ICkgewogICAgICAgICAgICAgIHZhciBnID0gZVtiKytdOwogICAgICAgICAgICAgIGlmIChnICYgMTI4KSB7CiAgICAgICAgICAgICAgICB2YXIgdTMgPSBlW2IrK10gJiA2MzsKICAgICAgICAgICAgICAgIGlmICgxOTIgPT0gKGcgJiAyMjQpKQogICAgICAgICAgICAgICAgICBkICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKGcgJiAzMSkgPDwgNiB8IHUzKTsKICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICB2YXIgWCA9IGVbYisrXSAmIDYzOwogICAgICAgICAgICAgICAgICBnID0gMjI0ID09IChnICYgMjQwKSA/IChnICYgMTUpIDw8IDEyIHwgdTMgPDwgNiB8IFggOiAoZyAmIDcpIDw8IDE4IHwgdTMgPDwgMTIgfCBYIDw8IDYgfCBlW2IrK10gJiA2MzsKICAgICAgICAgICAgICAgICAgNjU1MzYgPiBnID8gZCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGcpIDogKGcgLT0gNjU1MzYsIGQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSg1NTI5NiB8IGcgPj4gMTAsIDU2MzIwIHwgZyAmIDEwMjMpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9IGVsc2UKICAgICAgICAgICAgICAgIGQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShnKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gZDsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIGgoZSwgYikgewogICAgICAgICAgICByZXR1cm4gZSA/IHAoZWEsIGUsIGIpIDogIiI7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBBKCkgewogICAgICAgICAgICB2YXIgZSA9IGphLmJ1ZmZlcjsKICAgICAgICAgICAgYTMuSEVBUDggPSBZID0gbmV3IEludDhBcnJheShlKTsKICAgICAgICAgICAgYTMuSEVBUDE2ID0gbmV3IEludDE2QXJyYXkoZSk7CiAgICAgICAgICAgIGEzLkhFQVAzMiA9IGNhID0gbmV3IEludDMyQXJyYXkoZSk7CiAgICAgICAgICAgIGEzLkhFQVBVOCA9IGVhID0gbmV3IFVpbnQ4QXJyYXkoZSk7CiAgICAgICAgICAgIGEzLkhFQVBVMTYgPSBuZXcgVWludDE2QXJyYXkoZSk7CiAgICAgICAgICAgIGEzLkhFQVBVMzIgPSBWID0gbmV3IFVpbnQzMkFycmF5KGUpOwogICAgICAgICAgICBhMy5IRUFQRjMyID0gbmV3IEZsb2F0MzJBcnJheShlKTsKICAgICAgICAgICAgYTMuSEVBUEY2NCA9IG5ldyBGbG9hdDY0QXJyYXkoZSk7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBmKGUpIHsKICAgICAgICAgICAgaWYgKGEzLm9uQWJvcnQpCiAgICAgICAgICAgICAgYTMub25BYm9ydChlKTsKICAgICAgICAgICAgZSA9ICJBYm9ydGVkKCIgKyBlICsgIikiOwogICAgICAgICAgICBkYShlKTsKICAgICAgICAgICAgd2EgPSB0cnVlOwogICAgICAgICAgICBlID0gbmV3IFdlYkFzc2VtYmx5LlJ1bnRpbWVFcnJvcihlICsgIi4gQnVpbGQgd2l0aCAtc0FTU0VSVElPTlMgZm9yIG1vcmUgaW5mby4iKTsKICAgICAgICAgICAga2EoZSk7CiAgICAgICAgICAgIHRocm93IGU7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBxKGUpIHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICBpZiAoZSA9PSBQICYmIGZhKQogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGZhKTsKICAgICAgICAgICAgICBpZiAobWEpCiAgICAgICAgICAgICAgICByZXR1cm4gbWEoZSk7CiAgICAgICAgICAgICAgdGhyb3cgImJvdGggYXN5bmMgYW5kIHN5bmMgZmV0Y2hpbmcgb2YgdGhlIHdhc20gZmFpbGVkIjsKICAgICAgICAgICAgfSBjYXRjaCAoYikgewogICAgICAgICAgICAgIGYoYik7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIHYzKCkgewogICAgICAgICAgICBpZiAoIWZhICYmICh4YSB8fCBoYSkpIHsKICAgICAgICAgICAgICBpZiAoImZ1bmN0aW9uIiA9PSB0eXBlb2YgZmV0Y2ggJiYgIVAuc3RhcnRzV2l0aCgiZmlsZTovLyIpKQogICAgICAgICAgICAgICAgcmV0dXJuIGZldGNoKFAsIHsgY3JlZGVudGlhbHM6ICJzYW1lLW9yaWdpbiIgfSkudGhlbihmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICAgIGlmICghZS5vaykKICAgICAgICAgICAgICAgICAgICB0aHJvdyAiZmFpbGVkIHRvIGxvYWQgd2FzbSBiaW5hcnkgZmlsZSBhdCAnIiArIFAgKyAiJyI7CiAgICAgICAgICAgICAgICAgIHJldHVybiBlLmFycmF5QnVmZmVyKCk7CiAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIHEoUCk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBpZiAobmEpCiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oZSwgYikgewogICAgICAgICAgICAgICAgICBuYShQLCBmdW5jdGlvbihjKSB7CiAgICAgICAgICAgICAgICAgICAgZShuZXcgVWludDhBcnJheShjKSk7CiAgICAgICAgICAgICAgICAgIH0sIGIpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHEoUCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24geihlKSB7CiAgICAgICAgICAgIGZvciAoOyAwIDwgZS5sZW5ndGg7ICkKICAgICAgICAgICAgICBlLnNoaWZ0KCkoYTMpOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gTyhlKSB7CiAgICAgICAgICAgIHRoaXMuZXhjUHRyID0gZTsKICAgICAgICAgICAgdGhpcy5wdHIgPSBlIC0gMjQ7CiAgICAgICAgICAgIHRoaXMuc2V0X3R5cGUgPSBmdW5jdGlvbihiKSB7CiAgICAgICAgICAgICAgVlt0aGlzLnB0ciArIDQgPj4gMl0gPSBiOwogICAgICAgICAgICB9OwogICAgICAgICAgICB0aGlzLmdldF90eXBlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgcmV0dXJuIFZbdGhpcy5wdHIgKyA0ID4+IDJdOwogICAgICAgICAgICB9OwogICAgICAgICAgICB0aGlzLnNldF9kZXN0cnVjdG9yID0gZnVuY3Rpb24oYikgewogICAgICAgICAgICAgIFZbdGhpcy5wdHIgKyA4ID4+IDJdID0gYjsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgdGhpcy5nZXRfZGVzdHJ1Y3RvciA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgIHJldHVybiBWW3RoaXMucHRyICsgOCA+PiAyXTsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgdGhpcy5zZXRfcmVmY291bnQgPSBmdW5jdGlvbihiKSB7CiAgICAgICAgICAgICAgY2FbdGhpcy5wdHIgPj4gMl0gPSBiOwogICAgICAgICAgICB9OwogICAgICAgICAgICB0aGlzLnNldF9jYXVnaHQgPSBmdW5jdGlvbihiKSB7CiAgICAgICAgICAgICAgWVt0aGlzLnB0ciArIDEyID4+IDBdID0gYiA/IDEgOiAwOwogICAgICAgICAgICB9OwogICAgICAgICAgICB0aGlzLmdldF9jYXVnaHQgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICByZXR1cm4gMCAhPSBZW3RoaXMucHRyICsgMTIgPj4gMF07CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHRoaXMuc2V0X3JldGhyb3duID0gZnVuY3Rpb24oYikgewogICAgICAgICAgICAgIFlbdGhpcy5wdHIgKyAxMyA+PiAwXSA9IGIgPyAxIDogMDsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgdGhpcy5nZXRfcmV0aHJvd24gPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICByZXR1cm4gMCAhPSBZW3RoaXMucHRyICsgMTMgPj4gMF07CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHRoaXMuaW5pdCA9IGZ1bmN0aW9uKGIsIGMpIHsKICAgICAgICAgICAgICB0aGlzLnNldF9hZGp1c3RlZF9wdHIoMCk7CiAgICAgICAgICAgICAgdGhpcy5zZXRfdHlwZShiKTsKICAgICAgICAgICAgICB0aGlzLnNldF9kZXN0cnVjdG9yKGMpOwogICAgICAgICAgICAgIHRoaXMuc2V0X3JlZmNvdW50KDApOwogICAgICAgICAgICAgIHRoaXMuc2V0X2NhdWdodChmYWxzZSk7CiAgICAgICAgICAgICAgdGhpcy5zZXRfcmV0aHJvd24oZmFsc2UpOwogICAgICAgICAgICB9OwogICAgICAgICAgICB0aGlzLmFkZF9yZWYgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICBjYVt0aGlzLnB0ciA+PiAyXSArPSAxOwogICAgICAgICAgICB9OwogICAgICAgICAgICB0aGlzLnJlbGVhc2VfcmVmID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgdmFyIGIgPSBjYVt0aGlzLnB0ciA+PiAyXTsKICAgICAgICAgICAgICBjYVt0aGlzLnB0ciA+PiAyXSA9IGIgLSAxOwogICAgICAgICAgICAgIHJldHVybiAxID09PSBiOwogICAgICAgICAgICB9OwogICAgICAgICAgICB0aGlzLnNldF9hZGp1c3RlZF9wdHIgPSBmdW5jdGlvbihiKSB7CiAgICAgICAgICAgICAgVlt0aGlzLnB0ciArIDE2ID4+IDJdID0gYjsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgdGhpcy5nZXRfYWRqdXN0ZWRfcHRyID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgcmV0dXJuIFZbdGhpcy5wdHIgKyAxNiA+PiAyXTsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgdGhpcy5nZXRfZXhjZXB0aW9uX3B0ciA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgIGlmICh5YSh0aGlzLmdldF90eXBlKCkpKQogICAgICAgICAgICAgICAgcmV0dXJuIFZbdGhpcy5leGNQdHIgPj4gMl07CiAgICAgICAgICAgICAgdmFyIGIgPSB0aGlzLmdldF9hZGp1c3RlZF9wdHIoKTsKICAgICAgICAgICAgICByZXR1cm4gMCAhPT0gYiA/IGIgOiB0aGlzLmV4Y1B0cjsKICAgICAgICAgICAgfTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIGJhKCkgewogICAgICAgICAgICBmdW5jdGlvbiBlKCkgewogICAgICAgICAgICAgIGlmICghbGEgJiYgKGxhID0gdHJ1ZSwgYTMuY2FsbGVkUnVuID0gdHJ1ZSwgIXdhKSkgewogICAgICAgICAgICAgICAgemEgPSB0cnVlOwogICAgICAgICAgICAgICAgeihvYSk7CiAgICAgICAgICAgICAgICBBYShhMyk7CiAgICAgICAgICAgICAgICBpZiAoYTMub25SdW50aW1lSW5pdGlhbGl6ZWQpCiAgICAgICAgICAgICAgICAgIGEzLm9uUnVudGltZUluaXRpYWxpemVkKCk7CiAgICAgICAgICAgICAgICBpZiAoYTMucG9zdFJ1bikKICAgICAgICAgICAgICAgICAgZm9yICgiZnVuY3Rpb24iID09IHR5cGVvZiBhMy5wb3N0UnVuICYmIChhMy5wb3N0UnVuID0gW2EzLnBvc3RSdW5dKTsgYTMucG9zdFJ1bi5sZW5ndGg7ICkKICAgICAgICAgICAgICAgICAgICBCYS51bnNoaWZ0KGEzLnBvc3RSdW4uc2hpZnQoKSk7CiAgICAgICAgICAgICAgICB6KEJhKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCEoMCA8IGFhKSkgewogICAgICAgICAgICAgIGlmIChhMy5wcmVSdW4pCiAgICAgICAgICAgICAgICBmb3IgKCJmdW5jdGlvbiIgPT0gdHlwZW9mIGEzLnByZVJ1biAmJiAoYTMucHJlUnVuID0gW2EzLnByZVJ1bl0pOyBhMy5wcmVSdW4ubGVuZ3RoOyApCiAgICAgICAgICAgICAgICAgIENhLnVuc2hpZnQoYTMucHJlUnVuLnNoaWZ0KCkpOwogICAgICAgICAgICAgIHooQ2EpOwogICAgICAgICAgICAgIDAgPCBhYSB8fCAoYTMuc2V0U3RhdHVzID8gKGEzLnNldFN0YXR1cygiUnVubmluZy4uLiIpLCBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgYTMuc2V0U3RhdHVzKCIiKTsKICAgICAgICAgICAgICAgIH0sIDEpOwogICAgICAgICAgICAgICAgZSgpOwogICAgICAgICAgICAgIH0sIDEpKSA6IGUoKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIHQoKSB7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiB4KGUpIHsKICAgICAgICAgICAgcmV0dXJuIChlIHx8IHQpLl9fY2FjaGVfXzsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIEQoZSwgYikgewogICAgICAgICAgICB2YXIgYyA9IHgoYiksIGQgPSBjW2VdOwogICAgICAgICAgICBpZiAoZCkKICAgICAgICAgICAgICByZXR1cm4gZDsKICAgICAgICAgICAgZCA9IE9iamVjdC5jcmVhdGUoKGIgfHwgdCkucHJvdG90eXBlKTsKICAgICAgICAgICAgZC5wdHIgPSBlOwogICAgICAgICAgICByZXR1cm4gY1tlXSA9IGQ7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBSKGUpIHsKICAgICAgICAgICAgaWYgKCJzdHJpbmciID09PSB0eXBlb2YgZSkgewogICAgICAgICAgICAgIGZvciAodmFyIGIgPSAwLCBjID0gMDsgYyA8IGUubGVuZ3RoOyArK2MpIHsKICAgICAgICAgICAgICAgIHZhciBkID0gZS5jaGFyQ29kZUF0KGMpOwogICAgICAgICAgICAgICAgMTI3ID49IGQgPyBiKysgOiAyMDQ3ID49IGQgPyBiICs9IDIgOiA1NTI5NiA8PSBkICYmIDU3MzQzID49IGQgPyAoYiArPSA0LCArK2MpIDogYiArPSAzOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBiID0gQXJyYXkoYiArIDEpOwogICAgICAgICAgICAgIGMgPSAwOwogICAgICAgICAgICAgIGQgPSBiLmxlbmd0aDsKICAgICAgICAgICAgICBpZiAoMCA8IGQpIHsKICAgICAgICAgICAgICAgIGQgPSBjICsgZCAtIDE7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBnID0gMDsgZyA8IGUubGVuZ3RoOyArK2cpIHsKICAgICAgICAgICAgICAgICAgdmFyIHUzID0gZS5jaGFyQ29kZUF0KGcpOwogICAgICAgICAgICAgICAgICBpZiAoNTUyOTYgPD0gdTMgJiYgNTczNDMgPj0gdTMpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgWCA9IGUuY2hhckNvZGVBdCgrK2cpOwogICAgICAgICAgICAgICAgICAgIHUzID0gNjU1MzYgKyAoKHUzICYgMTAyMykgPDwgMTApIHwgWCAmIDEwMjM7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKDEyNyA+PSB1MykgewogICAgICAgICAgICAgICAgICAgIGlmIChjID49IGQpCiAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICBiW2MrK10gPSB1MzsKICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBpZiAoMjA0NyA+PSB1MykgewogICAgICAgICAgICAgICAgICAgICAgaWYgKGMgKyAxID49IGQpCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgYltjKytdID0gMTkyIHwgdTMgPj4gNjsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgaWYgKDY1NTM1ID49IHUzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjICsgMiA+PSBkKQogICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICBiW2MrK10gPSAyMjQgfCB1MyA+PiAxMjsKICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjICsgMyA+PSBkKQogICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICBiW2MrK10gPSAyNDAgfCB1MyA+PiAxODsKICAgICAgICAgICAgICAgICAgICAgICAgYltjKytdID0gMTI4IHwgdTMgPj4gMTIgJiA2MzsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIGJbYysrXSA9IDEyOCB8IHUzID4+IDYgJiA2MzsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgYltjKytdID0gMTI4IHwgdTMgJiA2MzsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgYltjXSA9IDA7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGUgPSByLmFsbG9jKGIsIFkpOwogICAgICAgICAgICAgIHIuY29weShiLCBZLCBlKTsKICAgICAgICAgICAgICByZXR1cm4gZTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gZTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIHBhKGUpIHsKICAgICAgICAgICAgaWYgKCJvYmplY3QiID09PSB0eXBlb2YgZSkgewogICAgICAgICAgICAgIHZhciBiID0gci5hbGxvYyhlLCBZKTsKICAgICAgICAgICAgICByLmNvcHkoZSwgWSwgYik7CiAgICAgICAgICAgICAgcmV0dXJuIGI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGU7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBaKCkgewogICAgICAgICAgICB0aHJvdyAiY2Fubm90IGNvbnN0cnVjdCBhIFZvaWRQdHIsIG5vIGNvbnN0cnVjdG9yIGluIElETCI7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBTKCkgewogICAgICAgICAgICB0aGlzLnB0ciA9IERhKCk7CiAgICAgICAgICAgIHgoUylbdGhpcy5wdHJdID0gdGhpczsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIFEoKSB7CiAgICAgICAgICAgIHRoaXMucHRyID0gRWEoKTsKICAgICAgICAgICAgeChRKVt0aGlzLnB0cl0gPSB0aGlzOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gVygpIHsKICAgICAgICAgICAgdGhpcy5wdHIgPSBGYSgpOwogICAgICAgICAgICB4KFcpW3RoaXMucHRyXSA9IHRoaXM7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiB3KCkgewogICAgICAgICAgICB0aGlzLnB0ciA9IEdhKCk7CiAgICAgICAgICAgIHgodylbdGhpcy5wdHJdID0gdGhpczsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIEMoKSB7CiAgICAgICAgICAgIHRoaXMucHRyID0gSGEoKTsKICAgICAgICAgICAgeChDKVt0aGlzLnB0cl0gPSB0aGlzOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gRigpIHsKICAgICAgICAgICAgdGhpcy5wdHIgPSBJYSgpOwogICAgICAgICAgICB4KEYpW3RoaXMucHRyXSA9IHRoaXM7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBHKCkgewogICAgICAgICAgICB0aGlzLnB0ciA9IEphKCk7CiAgICAgICAgICAgIHgoRylbdGhpcy5wdHJdID0gdGhpczsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIEUoKSB7CiAgICAgICAgICAgIHRoaXMucHRyID0gS2EoKTsKICAgICAgICAgICAgeChFKVt0aGlzLnB0cl0gPSB0aGlzOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gVCgpIHsKICAgICAgICAgICAgdGhpcy5wdHIgPSBMYSgpOwogICAgICAgICAgICB4KFQpW3RoaXMucHRyXSA9IHRoaXM7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBCKCkgewogICAgICAgICAgICB0aHJvdyAiY2Fubm90IGNvbnN0cnVjdCBhIFN0YXR1cywgbm8gY29uc3RydWN0b3IgaW4gSURMIjsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIEgoKSB7CiAgICAgICAgICAgIHRoaXMucHRyID0gTWEoKTsKICAgICAgICAgICAgeChIKVt0aGlzLnB0cl0gPSB0aGlzOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gSSgpIHsKICAgICAgICAgICAgdGhpcy5wdHIgPSBOYSgpOwogICAgICAgICAgICB4KEkpW3RoaXMucHRyXSA9IHRoaXM7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBKKCkgewogICAgICAgICAgICB0aGlzLnB0ciA9IE9hKCk7CiAgICAgICAgICAgIHgoSilbdGhpcy5wdHJdID0gdGhpczsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIEsoKSB7CiAgICAgICAgICAgIHRoaXMucHRyID0gUGEoKTsKICAgICAgICAgICAgeChLKVt0aGlzLnB0cl0gPSB0aGlzOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gTCgpIHsKICAgICAgICAgICAgdGhpcy5wdHIgPSBRYSgpOwogICAgICAgICAgICB4KEwpW3RoaXMucHRyXSA9IHRoaXM7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBNKCkgewogICAgICAgICAgICB0aGlzLnB0ciA9IFJhKCk7CiAgICAgICAgICAgIHgoTSlbdGhpcy5wdHJdID0gdGhpczsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIE4oKSB7CiAgICAgICAgICAgIHRoaXMucHRyID0gU2EoKTsKICAgICAgICAgICAgeChOKVt0aGlzLnB0cl0gPSB0aGlzOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24geSgpIHsKICAgICAgICAgICAgdGhpcy5wdHIgPSBUYSgpOwogICAgICAgICAgICB4KHkpW3RoaXMucHRyXSA9IHRoaXM7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBtKCkgewogICAgICAgICAgICB0aGlzLnB0ciA9IFVhKCk7CiAgICAgICAgICAgIHgobSlbdGhpcy5wdHJdID0gdGhpczsKICAgICAgICAgIH0KICAgICAgICAgIG4gPSB2b2lkIDAgPT09IG4gPyB7fSA6IG47CiAgICAgICAgICB2YXIgYTMgPSAidW5kZWZpbmVkIiAhPSB0eXBlb2YgbiA/IG4gOiB7fSwgQWEsIGthOwogICAgICAgICAgYTMucmVhZHkgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihlLCBiKSB7CiAgICAgICAgICAgIEFhID0gZTsKICAgICAgICAgICAga2EgPSBiOwogICAgICAgICAgfSk7CiAgICAgICAgICB2YXIgVmEgPSBmYWxzZSwgV2EgPSBmYWxzZTsKICAgICAgICAgIGEzLm9uUnVudGltZUluaXRpYWxpemVkID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIFZhID0gdHJ1ZTsKICAgICAgICAgICAgaWYgKFdhICYmICJmdW5jdGlvbiIgPT09IHR5cGVvZiBhMy5vbk1vZHVsZUxvYWRlZCkKICAgICAgICAgICAgICBhMy5vbk1vZHVsZUxvYWRlZChhMyk7CiAgICAgICAgICB9OwogICAgICAgICAgYTMub25Nb2R1bGVQYXJzZWQgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgV2EgPSB0cnVlOwogICAgICAgICAgICBpZiAoVmEgJiYgImZ1bmN0aW9uIiA9PT0gdHlwZW9mIGEzLm9uTW9kdWxlTG9hZGVkKQogICAgICAgICAgICAgIGEzLm9uTW9kdWxlTG9hZGVkKGEzKTsKICAgICAgICAgIH07CiAgICAgICAgICBhMy5pc1ZlcnNpb25TdXBwb3J0ZWQgPSBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgIGlmICgic3RyaW5nIiAhPT0gdHlwZW9mIGUpCiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICBlID0gZS5zcGxpdCgiLiIpOwogICAgICAgICAgICByZXR1cm4gMiA+IGUubGVuZ3RoIHx8IDMgPCBlLmxlbmd0aCA/IGZhbHNlIDogMSA9PSBlWzBdICYmIDAgPD0gZVsxXSAmJiA1ID49IGVbMV0gPyB0cnVlIDogMCAhPSBlWzBdIHx8IDEwIDwgZVsxXSA/IGZhbHNlIDogdHJ1ZTsKICAgICAgICAgIH07CiAgICAgICAgICB2YXIgWGEgPSBPYmplY3QuYXNzaWduKHt9LCBhMyksIHhhID0gIm9iamVjdCIgPT0gdHlwZW9mIHdpbmRvdywgaGEgPSAiZnVuY3Rpb24iID09IHR5cGVvZiBpbXBvcnRTY3JpcHRzLCBZYSA9ICJvYmplY3QiID09IHR5cGVvZiBwcm9jZXNzICYmICJvYmplY3QiID09IHR5cGVvZiBwcm9jZXNzLnZlcnNpb25zICYmICJzdHJpbmciID09IHR5cGVvZiBwcm9jZXNzLnZlcnNpb25zLm5vZGUsIFUgPSAiIjsKICAgICAgICAgIGlmIChZYSkgewogICAgICAgICAgICB2YXIgWmEgPSBfX3JlcXVpcmUoImZzIiksIHFhID0gX19yZXF1aXJlKCJwYXRoIik7CiAgICAgICAgICAgIFUgPSBoYSA/IHFhLmRpcm5hbWUoVSkgKyAiLyIgOiBfX2Rpcm5hbWUgKyAiLyI7CiAgICAgICAgICAgIHZhciAkYSA9IGZ1bmN0aW9uKGUsIGIpIHsKICAgICAgICAgICAgICBlID0gZS5zdGFydHNXaXRoKCJmaWxlOi8vIikgPyBuZXcgVVJMKGUpIDogcWEubm9ybWFsaXplKGUpOwogICAgICAgICAgICAgIHJldHVybiBaYS5yZWFkRmlsZVN5bmMoZSwgYiA/IHZvaWQgMCA6ICJ1dGY4Iik7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHZhciBtYSA9IGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgICBlID0gJGEoZSwgdHJ1ZSk7CiAgICAgICAgICAgICAgZS5idWZmZXIgfHwgKGUgPSBuZXcgVWludDhBcnJheShlKSk7CiAgICAgICAgICAgICAgcmV0dXJuIGU7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHZhciBuYSA9IGZ1bmN0aW9uKGUsIGIsIGMpIHsKICAgICAgICAgICAgICBlID0gZS5zdGFydHNXaXRoKCJmaWxlOi8vIikgPyBuZXcgVVJMKGUpIDogcWEubm9ybWFsaXplKGUpOwogICAgICAgICAgICAgIFphLnJlYWRGaWxlKGUsIGZ1bmN0aW9uKGQsIGcpIHsKICAgICAgICAgICAgICAgIGQgPyBjKGQpIDogYihnLmJ1ZmZlcik7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIDEgPCBwcm9jZXNzLmFyZ3YubGVuZ3RoICYmIHByb2Nlc3MuYXJndlsxXS5yZXBsYWNlKC9cXC9nLCAiLyIpOwogICAgICAgICAgICBwcm9jZXNzLmFyZ3Yuc2xpY2UoMik7CiAgICAgICAgICAgIGEzLmluc3BlY3QgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICByZXR1cm4gIltFbXNjcmlwdGVuIE1vZHVsZSBvYmplY3RdIjsKICAgICAgICAgICAgfTsKICAgICAgICAgIH0gZWxzZSBpZiAoeGEgfHwgaGEpCiAgICAgICAgICAgIGhhID8gVSA9IHNlbGYubG9jYXRpb24uaHJlZiA6ICJ1bmRlZmluZWQiICE9IHR5cGVvZiBkb2N1bWVudCAmJiBkb2N1bWVudC5jdXJyZW50U2NyaXB0ICYmIChVID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmMpLCBrICYmIChVID0gayksIFUgPSAwICE9PSBVLmluZGV4T2YoImJsb2I6IikgPyBVLnN1YnN0cigwLCBVLnJlcGxhY2UoL1s/I10uKi8sICIiKS5sYXN0SW5kZXhPZigiLyIpICsgMSkgOiAiIiwgJGEgPSBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgdmFyIGIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTsKICAgICAgICAgICAgICBiLm9wZW4oIkdFVCIsIGUsIGZhbHNlKTsKICAgICAgICAgICAgICBiLnNlbmQobnVsbCk7CiAgICAgICAgICAgICAgcmV0dXJuIGIucmVzcG9uc2VUZXh0OwogICAgICAgICAgICB9LCBoYSAmJiAobWEgPSBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgdmFyIGIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTsKICAgICAgICAgICAgICBiLm9wZW4oIkdFVCIsIGUsIGZhbHNlKTsKICAgICAgICAgICAgICBiLnJlc3BvbnNlVHlwZSA9ICJhcnJheWJ1ZmZlciI7CiAgICAgICAgICAgICAgYi5zZW5kKG51bGwpOwogICAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShiLnJlc3BvbnNlKTsKICAgICAgICAgICAgfSksIG5hID0gZnVuY3Rpb24oZSwgYiwgYykgewogICAgICAgICAgICAgIHZhciBkID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7CiAgICAgICAgICAgICAgZC5vcGVuKCJHRVQiLCBlLCB0cnVlKTsKICAgICAgICAgICAgICBkLnJlc3BvbnNlVHlwZSA9ICJhcnJheWJ1ZmZlciI7CiAgICAgICAgICAgICAgZC5vbmxvYWQgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIDIwMCA9PSBkLnN0YXR1cyB8fCAwID09IGQuc3RhdHVzICYmIGQucmVzcG9uc2UgPyBiKGQucmVzcG9uc2UpIDogYygpOwogICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgZC5vbmVycm9yID0gYzsKICAgICAgICAgICAgICBkLnNlbmQobnVsbCk7CiAgICAgICAgICAgIH07CiAgICAgICAgICB2YXIgdWQgPSBhMy5wcmludCB8fCBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpLCBkYSA9IGEzLnByaW50RXJyIHx8IGNvbnNvbGUud2Fybi5iaW5kKGNvbnNvbGUpOwogICAgICAgICAgT2JqZWN0LmFzc2lnbihhMywgWGEpOwogICAgICAgICAgWGEgPSBudWxsOwogICAgICAgICAgdmFyIGZhOwogICAgICAgICAgYTMud2FzbUJpbmFyeSAmJiAoZmEgPSBhMy53YXNtQmluYXJ5KTsKICAgICAgICAgICJvYmplY3QiICE9IHR5cGVvZiBXZWJBc3NlbWJseSAmJiBmKCJubyBuYXRpdmUgd2FzbSBzdXBwb3J0IGRldGVjdGVkIik7CiAgICAgICAgICB2YXIgamEsIHdhID0gZmFsc2UsIHZhID0gInVuZGVmaW5lZCIgIT0gdHlwZW9mIFRleHREZWNvZGVyID8gbmV3IFRleHREZWNvZGVyKCJ1dGY4IikgOiB2b2lkIDAsIFksIGVhLCBjYSwgViwgQ2EgPSBbXSwgb2EgPSBbXSwgQmEgPSBbXSwgemEgPSBmYWxzZSwgYWEgPSAwLCByYSA9IG51bGwsIGlhID0gbnVsbDsKICAgICAgICAgIHZhciBQID0gImRyYWNvX2RlY29kZXIud2FzbSI7CiAgICAgICAgICBQLnN0YXJ0c1dpdGgoImRhdGE6YXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtO2Jhc2U2NCwiKSB8fCAoUCA9IGwoUCkpOwogICAgICAgICAgdmFyIHZkID0gMCwgd2QgPSBbbnVsbCwgW10sIFtdXSwgeGQgPSB7IGI6IGZ1bmN0aW9uKGUsIGIsIGMpIHsKICAgICAgICAgICAgbmV3IE8oZSkuaW5pdChiLCBjKTsKICAgICAgICAgICAgdmQrKzsKICAgICAgICAgICAgdGhyb3cgZTsKICAgICAgICAgIH0sIGE6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBmKCIiKTsKICAgICAgICAgIH0sIGc6IGZ1bmN0aW9uKGUsIGIsIGMpIHsKICAgICAgICAgICAgZWEuY29weVdpdGhpbihlLCBiLCBiICsgYyk7CiAgICAgICAgICB9LCBlOiBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgIHZhciBiID0gZWEubGVuZ3RoOwogICAgICAgICAgICBlID4+Pj0gMDsKICAgICAgICAgICAgaWYgKDIxNDc0ODM2NDggPCBlKQogICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgZm9yICh2YXIgYyA9IDE7IDQgPj0gYzsgYyAqPSAyKSB7CiAgICAgICAgICAgICAgdmFyIGQgPSBiICogKDEgKyAwLjIgLyBjKTsKICAgICAgICAgICAgICBkID0gTWF0aC5taW4oZCwgZSArIDEwMDY2MzI5Nik7CiAgICAgICAgICAgICAgdmFyIGcgPSBNYXRoOwogICAgICAgICAgICAgIGQgPSBNYXRoLm1heChlLCBkKTsKICAgICAgICAgICAgICBnID0gZy5taW4uY2FsbChnLCAyMTQ3NDgzNjQ4LCBkICsgKDY1NTM2IC0gZCAlIDY1NTM2KSAlIDY1NTM2KTsKICAgICAgICAgICAgICBhOiB7CiAgICAgICAgICAgICAgICBkID0gamEuYnVmZmVyOwogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgamEuZ3JvdyhnIC0gZC5ieXRlTGVuZ3RoICsgNjU1MzUgPj4+IDE2KTsKICAgICAgICAgICAgICAgICAgQSgpOwogICAgICAgICAgICAgICAgICB2YXIgdTMgPSAxOwogICAgICAgICAgICAgICAgICBicmVhayBhOwogICAgICAgICAgICAgICAgfSBjYXRjaCAoWCkgewogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdTMgPSB2b2lkIDA7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmICh1MykKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIH0sIGY6IGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgcmV0dXJuIDUyOwogICAgICAgICAgfSwgZDogZnVuY3Rpb24oZSwgYiwgYywgZCwgZykgewogICAgICAgICAgICByZXR1cm4gNzA7CiAgICAgICAgICB9LCBjOiBmdW5jdGlvbihlLCBiLCBjLCBkKSB7CiAgICAgICAgICAgIGZvciAodmFyIGcgPSAwLCB1MyA9IDA7IHUzIDwgYzsgdTMrKykgewogICAgICAgICAgICAgIHZhciBYID0gVltiID4+IDJdLCBhYiA9IFZbYiArIDQgPj4gMl07CiAgICAgICAgICAgICAgYiArPSA4OwogICAgICAgICAgICAgIGZvciAodmFyIHNhID0gMDsgc2EgPCBhYjsgc2ErKykgewogICAgICAgICAgICAgICAgdmFyIHRhID0gZWFbWCArIHNhXSwgdWEgPSB3ZFtlXTsKICAgICAgICAgICAgICAgIDAgPT09IHRhIHx8IDEwID09PSB0YSA/ICgoMSA9PT0gZSA/IHVkIDogZGEpKHAodWEsIDApKSwgdWEubGVuZ3RoID0gMCkgOiB1YS5wdXNoKHRhKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZyArPSBhYjsKICAgICAgICAgICAgfQogICAgICAgICAgICBWW2QgPj4gMl0gPSBnOwogICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICAgIH0gfTsKICAgICAgICAgIChmdW5jdGlvbigpIHsKICAgICAgICAgICAgZnVuY3Rpb24gZShnLCB1MykgewogICAgICAgICAgICAgIGEzLmFzbSA9IGcuZXhwb3J0czsKICAgICAgICAgICAgICBqYSA9IGEzLmFzbS5oOwogICAgICAgICAgICAgIEEoKTsKICAgICAgICAgICAgICBvYS51bnNoaWZ0KGEzLmFzbS5pKTsKICAgICAgICAgICAgICBhYS0tOwogICAgICAgICAgICAgIGEzLm1vbml0b3JSdW5EZXBlbmRlbmNpZXMgJiYgYTMubW9uaXRvclJ1bkRlcGVuZGVuY2llcyhhYSk7CiAgICAgICAgICAgICAgMCA9PSBhYSAmJiAobnVsbCAhPT0gcmEgJiYgKGNsZWFySW50ZXJ2YWwocmEpLCByYSA9IG51bGwpLCBpYSAmJiAoZyA9IGlhLCBpYSA9IG51bGwsIGcoKSkpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIGIoZykgewogICAgICAgICAgICAgIGUoZy5pbnN0YW5jZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gYyhnKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHYzKCkudGhlbihmdW5jdGlvbih1MykgewogICAgICAgICAgICAgICAgcmV0dXJuIFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlKHUzLCBkKTsKICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKHUzKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdTM7CiAgICAgICAgICAgICAgfSkudGhlbihnLCBmdW5jdGlvbih1MykgewogICAgICAgICAgICAgICAgZGEoImZhaWxlZCB0byBhc3luY2hyb25vdXNseSBwcmVwYXJlIHdhc206ICIgKyB1Myk7CiAgICAgICAgICAgICAgICBmKHUzKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgZCA9IHsgYTogeGQgfTsKICAgICAgICAgICAgYWErKzsKICAgICAgICAgICAgYTMubW9uaXRvclJ1bkRlcGVuZGVuY2llcyAmJiBhMy5tb25pdG9yUnVuRGVwZW5kZW5jaWVzKGFhKTsKICAgICAgICAgICAgaWYgKGEzLmluc3RhbnRpYXRlV2FzbSkKICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgcmV0dXJuIGEzLmluc3RhbnRpYXRlV2FzbShkLCBlKTsKICAgICAgICAgICAgICB9IGNhdGNoIChnKSB7CiAgICAgICAgICAgICAgICBkYSgiTW9kdWxlLmluc3RhbnRpYXRlV2FzbSBjYWxsYmFjayBmYWlsZWQgd2l0aCBlcnJvcjogIiArIGcpLCBrYShnKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICByZXR1cm4gZmEgfHwgImZ1bmN0aW9uIiAhPSB0eXBlb2YgV2ViQXNzZW1ibHkuaW5zdGFudGlhdGVTdHJlYW1pbmcgfHwgUC5zdGFydHNXaXRoKCJkYXRhOmFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbTtiYXNlNjQsIikgfHwgUC5zdGFydHNXaXRoKCJmaWxlOi8vIikgfHwgWWEgfHwgImZ1bmN0aW9uIiAhPSB0eXBlb2YgZmV0Y2ggPyBjKGIpIDogZmV0Y2goUCwgeyBjcmVkZW50aWFsczogInNhbWUtb3JpZ2luIiB9KS50aGVuKGZ1bmN0aW9uKGcpIHsKICAgICAgICAgICAgICAgIHJldHVybiBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZVN0cmVhbWluZyhnLCBkKS50aGVuKGIsIGZ1bmN0aW9uKHUzKSB7CiAgICAgICAgICAgICAgICAgIGRhKCJ3YXNtIHN0cmVhbWluZyBjb21waWxlIGZhaWxlZDogIiArIHUzKTsKICAgICAgICAgICAgICAgICAgZGEoImZhbGxpbmcgYmFjayB0byBBcnJheUJ1ZmZlciBpbnN0YW50aWF0aW9uIik7CiAgICAgICAgICAgICAgICAgIHJldHVybiBjKGIpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pKCkuY2F0Y2goa2EpOwogICAgICAgICAgICByZXR1cm4ge307CiAgICAgICAgICB9KSgpOwogICAgICAgICAgdmFyIGJiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9Wb2lkUHRyX19fZGVzdHJveV9fXzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChiYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfVm9pZFB0cl9fX2Rlc3Ryb3lfX18wID0gYTMuYXNtLmspLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBEYSA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRGVjb2RlckJ1ZmZlcl9EZWNvZGVyQnVmZmVyXzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChEYSA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRGVjb2RlckJ1ZmZlcl9EZWNvZGVyQnVmZmVyXzAgPSBhMy5hc20ubCkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIGNiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyQnVmZmVyX0luaXRfMiA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKGNiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyQnVmZmVyX0luaXRfMiA9IGEzLmFzbS5tKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgZGIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJCdWZmZXJfX19kZXN0cm95X19fMCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKGRiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyQnVmZmVyX19fZGVzdHJveV9fXzAgPSBhMy5hc20ubikuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIEVhID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9BdHRyaWJ1dGVUcmFuc2Zvcm1EYXRhX0F0dHJpYnV0ZVRyYW5zZm9ybURhdGFfMCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKEVhID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9BdHRyaWJ1dGVUcmFuc2Zvcm1EYXRhX0F0dHJpYnV0ZVRyYW5zZm9ybURhdGFfMCA9IGEzLmFzbS5vKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgZWIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0F0dHJpYnV0ZVRyYW5zZm9ybURhdGFfdHJhbnNmb3JtX3R5cGVfMCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKGViID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9BdHRyaWJ1dGVUcmFuc2Zvcm1EYXRhX3RyYW5zZm9ybV90eXBlXzAgPSBhMy5hc20ucCkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIGZiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9BdHRyaWJ1dGVUcmFuc2Zvcm1EYXRhX19fZGVzdHJveV9fXzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChmYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfQXR0cmlidXRlVHJhbnNmb3JtRGF0YV9fX2Rlc3Ryb3lfX18wID0gYTMuYXNtLnEpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBGYSA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfR2VvbWV0cnlBdHRyaWJ1dGVfR2VvbWV0cnlBdHRyaWJ1dGVfMCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKEZhID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9HZW9tZXRyeUF0dHJpYnV0ZV9HZW9tZXRyeUF0dHJpYnV0ZV8wID0gYTMuYXNtLnIpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBnYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfR2VvbWV0cnlBdHRyaWJ1dGVfX19kZXN0cm95X19fMCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKGdiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9HZW9tZXRyeUF0dHJpYnV0ZV9fX2Rlc3Ryb3lfX18wID0gYTMuYXNtLnMpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBHYSA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfUG9pbnRBdHRyaWJ1dGVfUG9pbnRBdHRyaWJ1dGVfMCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKEdhID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9Qb2ludEF0dHJpYnV0ZV9Qb2ludEF0dHJpYnV0ZV8wID0gYTMuYXNtLnQpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBoYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfUG9pbnRBdHRyaWJ1dGVfc2l6ZV8wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoaGIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX1BvaW50QXR0cmlidXRlX3NpemVfMCA9IGEzLmFzbS51KS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgaWIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX1BvaW50QXR0cmlidXRlX0dldEF0dHJpYnV0ZVRyYW5zZm9ybURhdGFfMCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKGliID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9Qb2ludEF0dHJpYnV0ZV9HZXRBdHRyaWJ1dGVUcmFuc2Zvcm1EYXRhXzAgPSBhMy5hc20udikuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIGpiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9Qb2ludEF0dHJpYnV0ZV9hdHRyaWJ1dGVfdHlwZV8wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoamIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX1BvaW50QXR0cmlidXRlX2F0dHJpYnV0ZV90eXBlXzAgPSBhMy5hc20udykuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIGtiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9Qb2ludEF0dHJpYnV0ZV9kYXRhX3R5cGVfMCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKGtiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9Qb2ludEF0dHJpYnV0ZV9kYXRhX3R5cGVfMCA9IGEzLmFzbS54KS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgbGIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX1BvaW50QXR0cmlidXRlX251bV9jb21wb25lbnRzXzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChsYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfUG9pbnRBdHRyaWJ1dGVfbnVtX2NvbXBvbmVudHNfMCA9IGEzLmFzbS55KS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgbWIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX1BvaW50QXR0cmlidXRlX25vcm1hbGl6ZWRfMCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKG1iID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9Qb2ludEF0dHJpYnV0ZV9ub3JtYWxpemVkXzAgPSBhMy5hc20ueikuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIG5iID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9Qb2ludEF0dHJpYnV0ZV9ieXRlX3N0cmlkZV8wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAobmIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX1BvaW50QXR0cmlidXRlX2J5dGVfc3RyaWRlXzAgPSBhMy5hc20uQSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIG9iID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9Qb2ludEF0dHJpYnV0ZV9ieXRlX29mZnNldF8wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAob2IgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX1BvaW50QXR0cmlidXRlX2J5dGVfb2Zmc2V0XzAgPSBhMy5hc20uQikuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIHBiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9Qb2ludEF0dHJpYnV0ZV91bmlxdWVfaWRfMCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKHBiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9Qb2ludEF0dHJpYnV0ZV91bmlxdWVfaWRfMCA9IGEzLmFzbS5DKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgcWIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX1BvaW50QXR0cmlidXRlX19fZGVzdHJveV9fXzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChxYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfUG9pbnRBdHRyaWJ1dGVfX19kZXN0cm95X19fMCA9IGEzLmFzbS5EKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgSGEgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0F0dHJpYnV0ZVF1YW50aXphdGlvblRyYW5zZm9ybV9BdHRyaWJ1dGVRdWFudGl6YXRpb25UcmFuc2Zvcm1fMCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKEhhID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9BdHRyaWJ1dGVRdWFudGl6YXRpb25UcmFuc2Zvcm1fQXR0cmlidXRlUXVhbnRpemF0aW9uVHJhbnNmb3JtXzAgPSBhMy5hc20uRSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIHJiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9BdHRyaWJ1dGVRdWFudGl6YXRpb25UcmFuc2Zvcm1fSW5pdEZyb21BdHRyaWJ1dGVfMSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKHJiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9BdHRyaWJ1dGVRdWFudGl6YXRpb25UcmFuc2Zvcm1fSW5pdEZyb21BdHRyaWJ1dGVfMSA9IGEzLmFzbS5GKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgc2IgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0F0dHJpYnV0ZVF1YW50aXphdGlvblRyYW5zZm9ybV9xdWFudGl6YXRpb25fYml0c18wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoc2IgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0F0dHJpYnV0ZVF1YW50aXphdGlvblRyYW5zZm9ybV9xdWFudGl6YXRpb25fYml0c18wID0gYTMuYXNtLkcpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCB0YiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfQXR0cmlidXRlUXVhbnRpemF0aW9uVHJhbnNmb3JtX21pbl92YWx1ZV8xID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAodGIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0F0dHJpYnV0ZVF1YW50aXphdGlvblRyYW5zZm9ybV9taW5fdmFsdWVfMSA9IGEzLmFzbS5IKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgdWIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0F0dHJpYnV0ZVF1YW50aXphdGlvblRyYW5zZm9ybV9yYW5nZV8wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAodWIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0F0dHJpYnV0ZVF1YW50aXphdGlvblRyYW5zZm9ybV9yYW5nZV8wID0gYTMuYXNtLkkpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCB2YiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfQXR0cmlidXRlUXVhbnRpemF0aW9uVHJhbnNmb3JtX19fZGVzdHJveV9fXzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuICh2YiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfQXR0cmlidXRlUXVhbnRpemF0aW9uVHJhbnNmb3JtX19fZGVzdHJveV9fXzAgPSBhMy5hc20uSikuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIElhID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9BdHRyaWJ1dGVPY3RhaGVkcm9uVHJhbnNmb3JtX0F0dHJpYnV0ZU9jdGFoZWRyb25UcmFuc2Zvcm1fMCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKElhID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9BdHRyaWJ1dGVPY3RhaGVkcm9uVHJhbnNmb3JtX0F0dHJpYnV0ZU9jdGFoZWRyb25UcmFuc2Zvcm1fMCA9IGEzLmFzbS5LKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgd2IgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0F0dHJpYnV0ZU9jdGFoZWRyb25UcmFuc2Zvcm1fSW5pdEZyb21BdHRyaWJ1dGVfMSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKHdiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9BdHRyaWJ1dGVPY3RhaGVkcm9uVHJhbnNmb3JtX0luaXRGcm9tQXR0cmlidXRlXzEgPSBhMy5hc20uTCkuYXBwbHkoCiAgICAgICAgICAgICAgbnVsbCwKICAgICAgICAgICAgICBhcmd1bWVudHMKICAgICAgICAgICAgKTsKICAgICAgICAgIH0sIHhiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9BdHRyaWJ1dGVPY3RhaGVkcm9uVHJhbnNmb3JtX3F1YW50aXphdGlvbl9iaXRzXzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuICh4YiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfQXR0cmlidXRlT2N0YWhlZHJvblRyYW5zZm9ybV9xdWFudGl6YXRpb25fYml0c18wID0gYTMuYXNtLk0pLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCB5YiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfQXR0cmlidXRlT2N0YWhlZHJvblRyYW5zZm9ybV9fX2Rlc3Ryb3lfX18wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoeWIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0F0dHJpYnV0ZU9jdGFoZWRyb25UcmFuc2Zvcm1fX19kZXN0cm95X19fMCA9IGEzLmFzbS5OKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgSmEgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX1BvaW50Q2xvdWRfUG9pbnRDbG91ZF8wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoSmEgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX1BvaW50Q2xvdWRfUG9pbnRDbG91ZF8wID0gYTMuYXNtLk8pLmFwcGx5KAogICAgICAgICAgICAgIG51bGwsCiAgICAgICAgICAgICAgYXJndW1lbnRzCiAgICAgICAgICAgICk7CiAgICAgICAgICB9LCB6YiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfUG9pbnRDbG91ZF9udW1fYXR0cmlidXRlc18wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoemIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX1BvaW50Q2xvdWRfbnVtX2F0dHJpYnV0ZXNfMCA9IGEzLmFzbS5QKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgQWIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX1BvaW50Q2xvdWRfbnVtX3BvaW50c18wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoQWIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX1BvaW50Q2xvdWRfbnVtX3BvaW50c18wID0gYTMuYXNtLlEpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBCYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfUG9pbnRDbG91ZF9fX2Rlc3Ryb3lfX18wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoQmIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX1BvaW50Q2xvdWRfX19kZXN0cm95X19fMCA9IGEzLmFzbS5SKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgS2EgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX01lc2hfTWVzaF8wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoS2EgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX01lc2hfTWVzaF8wID0gYTMuYXNtLlMpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBDYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfTWVzaF9udW1fZmFjZXNfMCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKENiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9NZXNoX251bV9mYWNlc18wID0gYTMuYXNtLlQpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBEYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfTWVzaF9udW1fYXR0cmlidXRlc18wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoRGIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX01lc2hfbnVtX2F0dHJpYnV0ZXNfMCA9IGEzLmFzbS5VKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgRWIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX01lc2hfbnVtX3BvaW50c18wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoRWIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX01lc2hfbnVtX3BvaW50c18wID0gYTMuYXNtLlYpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBGYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfTWVzaF9fX2Rlc3Ryb3lfX18wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoRmIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX01lc2hfX19kZXN0cm95X19fMCA9IGEzLmFzbS5XKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgTGEgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX01ldGFkYXRhX01ldGFkYXRhXzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChMYSA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfTWV0YWRhdGFfTWV0YWRhdGFfMCA9IGEzLmFzbS5YKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgR2IgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX01ldGFkYXRhX19fZGVzdHJveV9fXzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChHYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfTWV0YWRhdGFfX19kZXN0cm95X19fMCA9IGEzLmFzbS5ZKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgSGIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX1N0YXR1c19jb2RlXzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChIYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfU3RhdHVzX2NvZGVfMCA9IGEzLmFzbS5aKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgSWIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX1N0YXR1c19va18wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoSWIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX1N0YXR1c19va18wID0gYTMuYXNtLl8pLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBKYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfU3RhdHVzX2Vycm9yX21zZ18wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoSmIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX1N0YXR1c19lcnJvcl9tc2dfMCA9IGEzLmFzbS4kKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgS2IgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX1N0YXR1c19fX2Rlc3Ryb3lfX18wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoS2IgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX1N0YXR1c19fX2Rlc3Ryb3lfX18wID0gYTMuYXNtLmFhKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgTWEgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RyYWNvRmxvYXQzMkFycmF5X0RyYWNvRmxvYXQzMkFycmF5XzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChNYSA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRHJhY29GbG9hdDMyQXJyYXlfRHJhY29GbG9hdDMyQXJyYXlfMCA9IGEzLmFzbS5iYSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIExiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EcmFjb0Zsb2F0MzJBcnJheV9HZXRWYWx1ZV8xID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoTGIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RyYWNvRmxvYXQzMkFycmF5X0dldFZhbHVlXzEgPSBhMy5hc20uY2EpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBNYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRHJhY29GbG9hdDMyQXJyYXlfc2l6ZV8wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoTWIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RyYWNvRmxvYXQzMkFycmF5X3NpemVfMCA9IGEzLmFzbS5kYSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIE5iID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EcmFjb0Zsb2F0MzJBcnJheV9fX2Rlc3Ryb3lfX18wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoTmIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RyYWNvRmxvYXQzMkFycmF5X19fZGVzdHJveV9fXzAgPSBhMy5hc20uZWEpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBOYSA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRHJhY29JbnQ4QXJyYXlfRHJhY29JbnQ4QXJyYXlfMCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKE5hID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EcmFjb0ludDhBcnJheV9EcmFjb0ludDhBcnJheV8wID0gYTMuYXNtLmZhKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgT2IgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RyYWNvSW50OEFycmF5X0dldFZhbHVlXzEgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChPYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRHJhY29JbnQ4QXJyYXlfR2V0VmFsdWVfMSA9IGEzLmFzbS5nYSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIFBiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EcmFjb0ludDhBcnJheV9zaXplXzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChQYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRHJhY29JbnQ4QXJyYXlfc2l6ZV8wID0gYTMuYXNtLmhhKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgUWIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RyYWNvSW50OEFycmF5X19fZGVzdHJveV9fXzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChRYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRHJhY29JbnQ4QXJyYXlfX19kZXN0cm95X19fMCA9IGEzLmFzbS5pYSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIE9hID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EcmFjb1VJbnQ4QXJyYXlfRHJhY29VSW50OEFycmF5XzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChPYSA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRHJhY29VSW50OEFycmF5X0RyYWNvVUludDhBcnJheV8wID0gYTMuYXNtLmphKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgUmIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RyYWNvVUludDhBcnJheV9HZXRWYWx1ZV8xID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoUmIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RyYWNvVUludDhBcnJheV9HZXRWYWx1ZV8xID0gYTMuYXNtLmthKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgU2IgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RyYWNvVUludDhBcnJheV9zaXplXzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChTYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRHJhY29VSW50OEFycmF5X3NpemVfMCA9IGEzLmFzbS5sYSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIFRiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EcmFjb1VJbnQ4QXJyYXlfX19kZXN0cm95X19fMCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKFRiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EcmFjb1VJbnQ4QXJyYXlfX19kZXN0cm95X19fMCA9IGEzLmFzbS5tYSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIFBhID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EcmFjb0ludDE2QXJyYXlfRHJhY29JbnQxNkFycmF5XzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChQYSA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRHJhY29JbnQxNkFycmF5X0RyYWNvSW50MTZBcnJheV8wID0gYTMuYXNtLm5hKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgVWIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RyYWNvSW50MTZBcnJheV9HZXRWYWx1ZV8xID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoVWIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RyYWNvSW50MTZBcnJheV9HZXRWYWx1ZV8xID0gYTMuYXNtLm9hKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgVmIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RyYWNvSW50MTZBcnJheV9zaXplXzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChWYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRHJhY29JbnQxNkFycmF5X3NpemVfMCA9IGEzLmFzbS5wYSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIFdiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EcmFjb0ludDE2QXJyYXlfX19kZXN0cm95X19fMCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKFdiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EcmFjb0ludDE2QXJyYXlfX19kZXN0cm95X19fMCA9IGEzLmFzbS5xYSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIFFhID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EcmFjb1VJbnQxNkFycmF5X0RyYWNvVUludDE2QXJyYXlfMCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKFFhID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EcmFjb1VJbnQxNkFycmF5X0RyYWNvVUludDE2QXJyYXlfMCA9IGEzLmFzbS5yYSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIFhiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EcmFjb1VJbnQxNkFycmF5X0dldFZhbHVlXzEgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChYYiA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRHJhY29VSW50MTZBcnJheV9HZXRWYWx1ZV8xID0gYTMuYXNtLnNhKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgWWIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RyYWNvVUludDE2QXJyYXlfc2l6ZV8wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoWWIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RyYWNvVUludDE2QXJyYXlfc2l6ZV8wID0gYTMuYXNtLnRhKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgWmIgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RyYWNvVUludDE2QXJyYXlfX19kZXN0cm95X19fMCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKFpiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EcmFjb1VJbnQxNkFycmF5X19fZGVzdHJveV9fXzAgPSBhMy5hc20udWEpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBSYSA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRHJhY29JbnQzMkFycmF5X0RyYWNvSW50MzJBcnJheV8wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoUmEgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RyYWNvSW50MzJBcnJheV9EcmFjb0ludDMyQXJyYXlfMCA9IGEzLmFzbS52YSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sICRiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EcmFjb0ludDMyQXJyYXlfR2V0VmFsdWVfMSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKCRiID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EcmFjb0ludDMyQXJyYXlfR2V0VmFsdWVfMSA9IGEzLmFzbS53YSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIGFjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EcmFjb0ludDMyQXJyYXlfc2l6ZV8wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoYWMgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RyYWNvSW50MzJBcnJheV9zaXplXzAgPSBhMy5hc20ueGEpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBiYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRHJhY29JbnQzMkFycmF5X19fZGVzdHJveV9fXzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChiYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRHJhY29JbnQzMkFycmF5X19fZGVzdHJveV9fXzAgPSBhMy5hc20ueWEpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBTYSA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRHJhY29VSW50MzJBcnJheV9EcmFjb1VJbnQzMkFycmF5XzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChTYSA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRHJhY29VSW50MzJBcnJheV9EcmFjb1VJbnQzMkFycmF5XzAgPSBhMy5hc20uemEpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBjYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRHJhY29VSW50MzJBcnJheV9HZXRWYWx1ZV8xID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoY2MgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RyYWNvVUludDMyQXJyYXlfR2V0VmFsdWVfMSA9IGEzLmFzbS5BYSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIGRjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EcmFjb1VJbnQzMkFycmF5X3NpemVfMCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKGRjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EcmFjb1VJbnQzMkFycmF5X3NpemVfMCA9IGEzLmFzbS5CYSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIGVjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EcmFjb1VJbnQzMkFycmF5X19fZGVzdHJveV9fXzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChlYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRHJhY29VSW50MzJBcnJheV9fX2Rlc3Ryb3lfX18wID0gYTMuYXNtLkNhKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgVGEgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX01ldGFkYXRhUXVlcmllcl9NZXRhZGF0YVF1ZXJpZXJfMCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKFRhID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9NZXRhZGF0YVF1ZXJpZXJfTWV0YWRhdGFRdWVyaWVyXzAgPSBhMy5hc20uRGEpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBmYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfTWV0YWRhdGFRdWVyaWVyX0hhc0VudHJ5XzIgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChmYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfTWV0YWRhdGFRdWVyaWVyX0hhc0VudHJ5XzIgPSBhMy5hc20uRWEpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBnYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfTWV0YWRhdGFRdWVyaWVyX0dldEludEVudHJ5XzIgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChnYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfTWV0YWRhdGFRdWVyaWVyX0dldEludEVudHJ5XzIgPSBhMy5hc20uRmEpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBoYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfTWV0YWRhdGFRdWVyaWVyX0dldEludEVudHJ5QXJyYXlfMyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKGhjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9NZXRhZGF0YVF1ZXJpZXJfR2V0SW50RW50cnlBcnJheV8zID0gYTMuYXNtLkdhKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgaWMgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX01ldGFkYXRhUXVlcmllcl9HZXREb3VibGVFbnRyeV8yID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoaWMgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX01ldGFkYXRhUXVlcmllcl9HZXREb3VibGVFbnRyeV8yID0gYTMuYXNtLkhhKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgamMgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX01ldGFkYXRhUXVlcmllcl9HZXRTdHJpbmdFbnRyeV8yID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoamMgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX01ldGFkYXRhUXVlcmllcl9HZXRTdHJpbmdFbnRyeV8yID0gYTMuYXNtLklhKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwga2MgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX01ldGFkYXRhUXVlcmllcl9OdW1FbnRyaWVzXzEgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChrYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfTWV0YWRhdGFRdWVyaWVyX051bUVudHJpZXNfMSA9IGEzLmFzbS5KYSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIGxjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9NZXRhZGF0YVF1ZXJpZXJfR2V0RW50cnlOYW1lXzIgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChsYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfTWV0YWRhdGFRdWVyaWVyX0dldEVudHJ5TmFtZV8yID0gYTMuYXNtLkthKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgbWMgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX01ldGFkYXRhUXVlcmllcl9fX2Rlc3Ryb3lfX18wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAobWMgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX01ldGFkYXRhUXVlcmllcl9fX2Rlc3Ryb3lfX18wID0gYTMuYXNtLkxhKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgVWEgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJfRGVjb2Rlcl8wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoVWEgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJfRGVjb2Rlcl8wID0gYTMuYXNtLk1hKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgbmMgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJfRGVjb2RlQXJyYXlUb1BvaW50Q2xvdWRfMyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKG5jID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyX0RlY29kZUFycmF5VG9Qb2ludENsb3VkXzMgPSBhMy5hc20uTmEpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBvYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRGVjb2Rlcl9EZWNvZGVBcnJheVRvTWVzaF8zID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAob2MgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJfRGVjb2RlQXJyYXlUb01lc2hfMyA9IGEzLmFzbS5PYSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIHBjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyX0dldEF0dHJpYnV0ZUlkXzIgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChwYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRGVjb2Rlcl9HZXRBdHRyaWJ1dGVJZF8yID0gYTMuYXNtLlBhKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgcWMgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJfR2V0QXR0cmlidXRlSWRCeU5hbWVfMiA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKHFjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyX0dldEF0dHJpYnV0ZUlkQnlOYW1lXzIgPSBhMy5hc20uUWEpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCByYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRGVjb2Rlcl9HZXRBdHRyaWJ1dGVJZEJ5TWV0YWRhdGFFbnRyeV8zID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAocmMgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJfR2V0QXR0cmlidXRlSWRCeU1ldGFkYXRhRW50cnlfMyA9IGEzLmFzbS5SYSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIHNjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyX0dldEF0dHJpYnV0ZV8yID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoc2MgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJfR2V0QXR0cmlidXRlXzIgPSBhMy5hc20uU2EpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCB0YyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRGVjb2Rlcl9HZXRBdHRyaWJ1dGVCeVVuaXF1ZUlkXzIgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuICh0YyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRGVjb2Rlcl9HZXRBdHRyaWJ1dGVCeVVuaXF1ZUlkXzIgPSBhMy5hc20uVGEpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCB1YyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRGVjb2Rlcl9HZXRNZXRhZGF0YV8xID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAodWMgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJfR2V0TWV0YWRhdGFfMSA9IGEzLmFzbS5VYSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIHZjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyX0dldEF0dHJpYnV0ZU1ldGFkYXRhXzIgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuICh2YyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRGVjb2Rlcl9HZXRBdHRyaWJ1dGVNZXRhZGF0YV8yID0gYTMuYXNtLlZhKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgd2MgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJfR2V0RmFjZUZyb21NZXNoXzMgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuICh3YyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRGVjb2Rlcl9HZXRGYWNlRnJvbU1lc2hfMyA9IGEzLmFzbS5XYSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIHhjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyX0dldFRyaWFuZ2xlU3RyaXBzRnJvbU1lc2hfMiA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKHhjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyX0dldFRyaWFuZ2xlU3RyaXBzRnJvbU1lc2hfMiA9IGEzLmFzbS5YYSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIHljID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyX0dldFRyaWFuZ2xlc1VJbnQxNkFycmF5XzMgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuICh5YyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRGVjb2Rlcl9HZXRUcmlhbmdsZXNVSW50MTZBcnJheV8zID0gYTMuYXNtLllhKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgemMgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJfR2V0VHJpYW5nbGVzVUludDMyQXJyYXlfMyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKHpjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyX0dldFRyaWFuZ2xlc1VJbnQzMkFycmF5XzMgPSBhMy5hc20uWmEpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBBYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRGVjb2Rlcl9HZXRBdHRyaWJ1dGVGbG9hdF8zID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoQWMgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJfR2V0QXR0cmlidXRlRmxvYXRfMyA9IGEzLmFzbS5fYSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIEJjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyX0dldEF0dHJpYnV0ZUZsb2F0Rm9yQWxsUG9pbnRzXzMgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChCYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRGVjb2Rlcl9HZXRBdHRyaWJ1dGVGbG9hdEZvckFsbFBvaW50c18zID0gYTMuYXNtLiRhKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgQ2MgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJfR2V0QXR0cmlidXRlSW50Rm9yQWxsUG9pbnRzXzMgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChDYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRGVjb2Rlcl9HZXRBdHRyaWJ1dGVJbnRGb3JBbGxQb2ludHNfMyA9IGEzLmFzbS5hYikuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIERjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyX0dldEF0dHJpYnV0ZUludDhGb3JBbGxQb2ludHNfMyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKERjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyX0dldEF0dHJpYnV0ZUludDhGb3JBbGxQb2ludHNfMyA9IGEzLmFzbS5iYikuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIEVjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyX0dldEF0dHJpYnV0ZVVJbnQ4Rm9yQWxsUG9pbnRzXzMgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChFYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRGVjb2Rlcl9HZXRBdHRyaWJ1dGVVSW50OEZvckFsbFBvaW50c18zID0gYTMuYXNtLmNiKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgRmMgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJfR2V0QXR0cmlidXRlSW50MTZGb3JBbGxQb2ludHNfMyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKEZjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyX0dldEF0dHJpYnV0ZUludDE2Rm9yQWxsUG9pbnRzXzMgPSBhMy5hc20uZGIpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBHYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRGVjb2Rlcl9HZXRBdHRyaWJ1dGVVSW50MTZGb3JBbGxQb2ludHNfMyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKEdjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyX0dldEF0dHJpYnV0ZVVJbnQxNkZvckFsbFBvaW50c18zID0gYTMuYXNtLmViKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgSGMgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJfR2V0QXR0cmlidXRlSW50MzJGb3JBbGxQb2ludHNfMyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKEhjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyX0dldEF0dHJpYnV0ZUludDMyRm9yQWxsUG9pbnRzXzMgPSBhMy5hc20uZmIpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBJYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRGVjb2Rlcl9HZXRBdHRyaWJ1dGVVSW50MzJGb3JBbGxQb2ludHNfMyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKEljID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyX0dldEF0dHJpYnV0ZVVJbnQzMkZvckFsbFBvaW50c18zID0gYTMuYXNtLmdiKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgSmMgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJfR2V0QXR0cmlidXRlRGF0YUFycmF5Rm9yQWxsUG9pbnRzXzUgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChKYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRGVjb2Rlcl9HZXRBdHRyaWJ1dGVEYXRhQXJyYXlGb3JBbGxQb2ludHNfNSA9IGEzLmFzbS5oYikuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIEtjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyX1NraXBBdHRyaWJ1dGVUcmFuc2Zvcm1fMSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKEtjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyX1NraXBBdHRyaWJ1dGVUcmFuc2Zvcm1fMSA9IGEzLmFzbS5pYikuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIExjID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyX0dldEVuY29kZWRHZW9tZXRyeVR5cGVfRGVwcmVjYXRlZF8xID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoTGMgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJfR2V0RW5jb2RlZEdlb21ldHJ5VHlwZV9EZXByZWNhdGVkXzEgPSBhMy5hc20uamIpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBNYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRGVjb2Rlcl9EZWNvZGVCdWZmZXJUb1BvaW50Q2xvdWRfMiA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKE1jID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyX0RlY29kZUJ1ZmZlclRvUG9pbnRDbG91ZF8yID0gYTMuYXNtLmtiKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgTmMgPSBhMy5fZW1zY3JpcHRlbl9iaW5kX0RlY29kZXJfRGVjb2RlQnVmZmVyVG9NZXNoXzIgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChOYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRGVjb2Rlcl9EZWNvZGVCdWZmZXJUb01lc2hfMiA9IGEzLmFzbS5sYikuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIE9jID0gYTMuX2Vtc2NyaXB0ZW5fYmluZF9EZWNvZGVyX19fZGVzdHJveV9fXzAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChPYyA9IGEzLl9lbXNjcmlwdGVuX2JpbmRfRGVjb2Rlcl9fX2Rlc3Ryb3lfX18wID0gYTMuYXNtLm1iKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgUGMgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX0F0dHJpYnV0ZVRyYW5zZm9ybVR5cGVfQVRUUklCVVRFX0lOVkFMSURfVFJBTlNGT1JNID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoUGMgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX0F0dHJpYnV0ZVRyYW5zZm9ybVR5cGVfQVRUUklCVVRFX0lOVkFMSURfVFJBTlNGT1JNID0gYTMuYXNtLm5iKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgUWMgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX0F0dHJpYnV0ZVRyYW5zZm9ybVR5cGVfQVRUUklCVVRFX05PX1RSQU5TRk9STSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKFFjID0gYTMuX2Vtc2NyaXB0ZW5fZW51bV9kcmFjb19BdHRyaWJ1dGVUcmFuc2Zvcm1UeXBlX0FUVFJJQlVURV9OT19UUkFOU0ZPUk0gPSBhMy5hc20ub2IpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBSYyA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fQXR0cmlidXRlVHJhbnNmb3JtVHlwZV9BVFRSSUJVVEVfUVVBTlRJWkFUSU9OX1RSQU5TRk9STSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKFJjID0gYTMuX2Vtc2NyaXB0ZW5fZW51bV9kcmFjb19BdHRyaWJ1dGVUcmFuc2Zvcm1UeXBlX0FUVFJJQlVURV9RVUFOVElaQVRJT05fVFJBTlNGT1JNID0gYTMuYXNtLnBiKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgU2MgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX0F0dHJpYnV0ZVRyYW5zZm9ybVR5cGVfQVRUUklCVVRFX09DVEFIRURST05fVFJBTlNGT1JNID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoU2MgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX0F0dHJpYnV0ZVRyYW5zZm9ybVR5cGVfQVRUUklCVVRFX09DVEFIRURST05fVFJBTlNGT1JNID0gYTMuYXNtLnFiKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgVGMgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX0dlb21ldHJ5QXR0cmlidXRlX1R5cGVfSU5WQUxJRCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKFRjID0gYTMuX2Vtc2NyaXB0ZW5fZW51bV9kcmFjb19HZW9tZXRyeUF0dHJpYnV0ZV9UeXBlX0lOVkFMSUQgPSBhMy5hc20ucmIpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBVYyA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fR2VvbWV0cnlBdHRyaWJ1dGVfVHlwZV9QT1NJVElPTiA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKFVjID0gYTMuX2Vtc2NyaXB0ZW5fZW51bV9kcmFjb19HZW9tZXRyeUF0dHJpYnV0ZV9UeXBlX1BPU0lUSU9OID0gYTMuYXNtLnNiKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgVmMgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX0dlb21ldHJ5QXR0cmlidXRlX1R5cGVfTk9STUFMID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoVmMgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX0dlb21ldHJ5QXR0cmlidXRlX1R5cGVfTk9STUFMID0gYTMuYXNtLnRiKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgV2MgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX0dlb21ldHJ5QXR0cmlidXRlX1R5cGVfQ09MT1IgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChXYyA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fR2VvbWV0cnlBdHRyaWJ1dGVfVHlwZV9DT0xPUiA9IGEzLmFzbS51YikuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIFhjID0gYTMuX2Vtc2NyaXB0ZW5fZW51bV9kcmFjb19HZW9tZXRyeUF0dHJpYnV0ZV9UeXBlX1RFWF9DT09SRCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKFhjID0gYTMuX2Vtc2NyaXB0ZW5fZW51bV9kcmFjb19HZW9tZXRyeUF0dHJpYnV0ZV9UeXBlX1RFWF9DT09SRCA9IGEzLmFzbS52YikuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIFljID0gYTMuX2Vtc2NyaXB0ZW5fZW51bV9kcmFjb19HZW9tZXRyeUF0dHJpYnV0ZV9UeXBlX0dFTkVSSUMgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChZYyA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fR2VvbWV0cnlBdHRyaWJ1dGVfVHlwZV9HRU5FUklDID0gYTMuYXNtLndiKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgWmMgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX0VuY29kZWRHZW9tZXRyeVR5cGVfSU5WQUxJRF9HRU9NRVRSWV9UWVBFID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoWmMgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX0VuY29kZWRHZW9tZXRyeVR5cGVfSU5WQUxJRF9HRU9NRVRSWV9UWVBFID0gYTMuYXNtLnhiKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgJGMgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX0VuY29kZWRHZW9tZXRyeVR5cGVfUE9JTlRfQ0xPVUQgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuICgkYyA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fRW5jb2RlZEdlb21ldHJ5VHlwZV9QT0lOVF9DTE9VRCA9IGEzLmFzbS55YikuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIGFkID0gYTMuX2Vtc2NyaXB0ZW5fZW51bV9kcmFjb19FbmNvZGVkR2VvbWV0cnlUeXBlX1RSSUFOR1VMQVJfTUVTSCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKGFkID0gYTMuX2Vtc2NyaXB0ZW5fZW51bV9kcmFjb19FbmNvZGVkR2VvbWV0cnlUeXBlX1RSSUFOR1VMQVJfTUVTSCA9IGEzLmFzbS56YikuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIGJkID0gYTMuX2Vtc2NyaXB0ZW5fZW51bV9kcmFjb19EYXRhVHlwZV9EVF9JTlZBTElEID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoYmQgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX0RhdGFUeXBlX0RUX0lOVkFMSUQgPSBhMy5hc20uQWIpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBjZCA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fRGF0YVR5cGVfRFRfSU5UOCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKGNkID0gYTMuX2Vtc2NyaXB0ZW5fZW51bV9kcmFjb19EYXRhVHlwZV9EVF9JTlQ4ID0gYTMuYXNtLkJiKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgZGQgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX0RhdGFUeXBlX0RUX1VJTlQ4ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoZGQgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX0RhdGFUeXBlX0RUX1VJTlQ4ID0gYTMuYXNtLkNiKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgZWQgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX0RhdGFUeXBlX0RUX0lOVDE2ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoZWQgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX0RhdGFUeXBlX0RUX0lOVDE2ID0gYTMuYXNtLkRiKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgZmQgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX0RhdGFUeXBlX0RUX1VJTlQxNiA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKGZkID0gYTMuX2Vtc2NyaXB0ZW5fZW51bV9kcmFjb19EYXRhVHlwZV9EVF9VSU5UMTYgPSBhMy5hc20uRWIpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBnZCA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fRGF0YVR5cGVfRFRfSU5UMzIgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChnZCA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fRGF0YVR5cGVfRFRfSU5UMzIgPSBhMy5hc20uRmIpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBoZCA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fRGF0YVR5cGVfRFRfVUlOVDMyID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoaGQgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX0RhdGFUeXBlX0RUX1VJTlQzMiA9IGEzLmFzbS5HYikuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIGlkID0gYTMuX2Vtc2NyaXB0ZW5fZW51bV9kcmFjb19EYXRhVHlwZV9EVF9JTlQ2NCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKGlkID0gYTMuX2Vtc2NyaXB0ZW5fZW51bV9kcmFjb19EYXRhVHlwZV9EVF9JTlQ2NCA9IGEzLmFzbS5IYikuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIGpkID0gYTMuX2Vtc2NyaXB0ZW5fZW51bV9kcmFjb19EYXRhVHlwZV9EVF9VSU5UNjQgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChqZCA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fRGF0YVR5cGVfRFRfVUlOVDY0ID0gYTMuYXNtLkliKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwga2QgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX0RhdGFUeXBlX0RUX0ZMT0FUMzIgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChrZCA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fRGF0YVR5cGVfRFRfRkxPQVQzMiA9IGEzLmFzbS5KYikuYXBwbHkoCiAgICAgICAgICAgICAgbnVsbCwKICAgICAgICAgICAgICBhcmd1bWVudHMKICAgICAgICAgICAgKTsKICAgICAgICAgIH0sIGxkID0gYTMuX2Vtc2NyaXB0ZW5fZW51bV9kcmFjb19EYXRhVHlwZV9EVF9GTE9BVDY0ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAobGQgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX0RhdGFUeXBlX0RUX0ZMT0FUNjQgPSBhMy5hc20uS2IpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBtZCA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fRGF0YVR5cGVfRFRfQk9PTCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKG1kID0gYTMuX2Vtc2NyaXB0ZW5fZW51bV9kcmFjb19EYXRhVHlwZV9EVF9CT09MID0gYTMuYXNtLkxiKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgbmQgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX0RhdGFUeXBlX0RUX1RZUEVTX0NPVU5UID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAobmQgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX0RhdGFUeXBlX0RUX1RZUEVTX0NPVU5UID0gYTMuYXNtLk1iKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgb2QgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX1N0YXR1c0NvZGVfT0sgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChvZCA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fU3RhdHVzQ29kZV9PSyA9IGEzLmFzbS5OYikuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIHBkID0gYTMuX2Vtc2NyaXB0ZW5fZW51bV9kcmFjb19TdGF0dXNDb2RlX0RSQUNPX0VSUk9SID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAocGQgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX1N0YXR1c0NvZGVfRFJBQ09fRVJST1IgPSBhMy5hc20uT2IpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9LCBxZCA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fU3RhdHVzQ29kZV9JT19FUlJPUiA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKHFkID0gYTMuX2Vtc2NyaXB0ZW5fZW51bV9kcmFjb19TdGF0dXNDb2RlX0lPX0VSUk9SID0gYTMuYXNtLlBiKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgcmQgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX1N0YXR1c0NvZGVfSU5WQUxJRF9QQVJBTUVURVIgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChyZCA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fU3RhdHVzQ29kZV9JTlZBTElEX1BBUkFNRVRFUiA9IGEzLmFzbS5RYikuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH0sIHNkID0gYTMuX2Vtc2NyaXB0ZW5fZW51bV9kcmFjb19TdGF0dXNDb2RlX1VOU1VQUE9SVEVEX1ZFUlNJT04gPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChzZCA9IGEzLl9lbXNjcmlwdGVuX2VudW1fZHJhY29fU3RhdHVzQ29kZV9VTlNVUFBPUlRFRF9WRVJTSU9OID0gYTMuYXNtLlJiKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfSwgdGQgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX1N0YXR1c0NvZGVfVU5LTk9XTl9WRVJTSU9OID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAodGQgPSBhMy5fZW1zY3JpcHRlbl9lbnVtX2RyYWNvX1N0YXR1c0NvZGVfVU5LTk9XTl9WRVJTSU9OID0gYTMuYXNtLlNiKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfTsKICAgICAgICAgIGEzLl9tYWxsb2MgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChhMy5fbWFsbG9jID0gYTMuYXNtLlRiKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfTsKICAgICAgICAgIGEzLl9mcmVlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoYTMuX2ZyZWUgPSBhMy5hc20uVWIpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9OwogICAgICAgICAgdmFyIHlhID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoeWEgPSBhMy5hc20uVmIpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9OwogICAgICAgICAgYTMuX19fc3RhcnRfZW1fanMgPSAxNTg1NjsKICAgICAgICAgIGEzLl9fX3N0b3BfZW1fanMgPSAxNTk1NDsKICAgICAgICAgIHZhciBsYTsKICAgICAgICAgIGlhID0gZnVuY3Rpb24gYigpIHsKICAgICAgICAgICAgbGEgfHwgYmEoKTsKICAgICAgICAgICAgbGEgfHwgKGlhID0gYik7CiAgICAgICAgICB9OwogICAgICAgICAgaWYgKGEzLnByZUluaXQpCiAgICAgICAgICAgIGZvciAoImZ1bmN0aW9uIiA9PSB0eXBlb2YgYTMucHJlSW5pdCAmJiAoYTMucHJlSW5pdCA9IFthMy5wcmVJbml0XSk7IDAgPCBhMy5wcmVJbml0Lmxlbmd0aDsgKQogICAgICAgICAgICAgIGEzLnByZUluaXQucG9wKCkoKTsKICAgICAgICAgIGJhKCk7CiAgICAgICAgICB0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUodC5wcm90b3R5cGUpOwogICAgICAgICAgdC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSB0OwogICAgICAgICAgdC5wcm90b3R5cGUuX19jbGFzc19fID0gdDsKICAgICAgICAgIHQuX19jYWNoZV9fID0ge307CiAgICAgICAgICBhMy5XcmFwcGVyT2JqZWN0ID0gdDsKICAgICAgICAgIGEzLmdldENhY2hlID0geDsKICAgICAgICAgIGEzLndyYXBQb2ludGVyID0gRDsKICAgICAgICAgIGEzLmNhc3RPYmplY3QgPSBmdW5jdGlvbihiLCBjKSB7CiAgICAgICAgICAgIHJldHVybiBEKGIucHRyLCBjKTsKICAgICAgICAgIH07CiAgICAgICAgICBhMy5OVUxMID0gRCgwKTsKICAgICAgICAgIGEzLmRlc3Ryb3kgPSBmdW5jdGlvbihiKSB7CiAgICAgICAgICAgIGlmICghYi5fX2Rlc3Ryb3lfXykKICAgICAgICAgICAgICB0aHJvdyAiRXJyb3I6IENhbm5vdCBkZXN0cm95IG9iamVjdC4gKERpZCB5b3UgY3JlYXRlIGl0IHlvdXJzZWxmPykiOwogICAgICAgICAgICBiLl9fZGVzdHJveV9fKCk7CiAgICAgICAgICAgIGRlbGV0ZSB4KGIuX19jbGFzc19fKVtiLnB0cl07CiAgICAgICAgICB9OwogICAgICAgICAgYTMuY29tcGFyZSA9IGZ1bmN0aW9uKGIsIGMpIHsKICAgICAgICAgICAgcmV0dXJuIGIucHRyID09PSBjLnB0cjsKICAgICAgICAgIH07CiAgICAgICAgICBhMy5nZXRQb2ludGVyID0gZnVuY3Rpb24oYikgewogICAgICAgICAgICByZXR1cm4gYi5wdHI7CiAgICAgICAgICB9OwogICAgICAgICAgYTMuZ2V0Q2xhc3MgPSBmdW5jdGlvbihiKSB7CiAgICAgICAgICAgIHJldHVybiBiLl9fY2xhc3NfXzsKICAgICAgICAgIH07CiAgICAgICAgICB2YXIgciA9IHsgYnVmZmVyOiAwLCBzaXplOiAwLCBwb3M6IDAsIHRlbXBzOiBbXSwgbmVlZGVkOiAwLCBwcmVwYXJlOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaWYgKHIubmVlZGVkKSB7CiAgICAgICAgICAgICAgZm9yICh2YXIgYiA9IDA7IGIgPCByLnRlbXBzLmxlbmd0aDsgYisrKQogICAgICAgICAgICAgICAgYTMuX2ZyZWUoci50ZW1wc1tiXSk7CiAgICAgICAgICAgICAgci50ZW1wcy5sZW5ndGggPSAwOwogICAgICAgICAgICAgIGEzLl9mcmVlKHIuYnVmZmVyKTsKICAgICAgICAgICAgICByLmJ1ZmZlciA9IDA7CiAgICAgICAgICAgICAgci5zaXplICs9IHIubmVlZGVkOwogICAgICAgICAgICAgIHIubmVlZGVkID0gMDsKICAgICAgICAgICAgfQogICAgICAgICAgICByLmJ1ZmZlciB8fCAoci5zaXplICs9IDEyOCwgci5idWZmZXIgPSBhMy5fbWFsbG9jKHIuc2l6ZSksIHIuYnVmZmVyIHx8IGYodm9pZCAwKSk7CiAgICAgICAgICAgIHIucG9zID0gMDsKICAgICAgICAgIH0sIGFsbG9jOiBmdW5jdGlvbihiLCBjKSB7CiAgICAgICAgICAgIHIuYnVmZmVyIHx8IGYodm9pZCAwKTsKICAgICAgICAgICAgYiA9IGIubGVuZ3RoICogYy5CWVRFU19QRVJfRUxFTUVOVDsKICAgICAgICAgICAgYiA9IGIgKyA3ICYgLTg7CiAgICAgICAgICAgIHIucG9zICsgYiA+PSByLnNpemUgPyAoMCA8IGIgfHwgZih2b2lkIDApLCByLm5lZWRlZCArPSBiLCBjID0gYTMuX21hbGxvYyhiKSwgci50ZW1wcy5wdXNoKGMpKSA6IChjID0gci5idWZmZXIgKyByLnBvcywgci5wb3MgKz0gYik7CiAgICAgICAgICAgIHJldHVybiBjOwogICAgICAgICAgfSwgY29weTogZnVuY3Rpb24oYiwgYywgZCkgewogICAgICAgICAgICBkID4+Pj0gMDsKICAgICAgICAgICAgc3dpdGNoIChjLkJZVEVTX1BFUl9FTEVNRU5UKSB7CiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgZCA+Pj49IDE7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICBkID4+Pj0gMjsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgIGQgPj4+PSAzOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvciAodmFyIGcgPSAwOyBnIDwgYi5sZW5ndGg7IGcrKykKICAgICAgICAgICAgICBjW2QgKyBnXSA9IGJbZ107CiAgICAgICAgICB9IH07CiAgICAgICAgICBaLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUodC5wcm90b3R5cGUpOwogICAgICAgICAgWi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBaOwogICAgICAgICAgWi5wcm90b3R5cGUuX19jbGFzc19fID0gWjsKICAgICAgICAgIFouX19jYWNoZV9fID0ge307CiAgICAgICAgICBhMy5Wb2lkUHRyID0gWjsKICAgICAgICAgIFoucHJvdG90eXBlLl9fZGVzdHJveV9fID0gWi5wcm90b3R5cGUuX19kZXN0cm95X18gPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgYmIodGhpcy5wdHIpOwogICAgICAgICAgfTsKICAgICAgICAgIFMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh0LnByb3RvdHlwZSk7CiAgICAgICAgICBTLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFM7CiAgICAgICAgICBTLnByb3RvdHlwZS5fX2NsYXNzX18gPSBTOwogICAgICAgICAgUy5fX2NhY2hlX18gPSB7fTsKICAgICAgICAgIGEzLkRlY29kZXJCdWZmZXIgPSBTOwogICAgICAgICAgUy5wcm90b3R5cGUuSW5pdCA9IFMucHJvdG90eXBlLkluaXQgPSBmdW5jdGlvbihiLCBjKSB7CiAgICAgICAgICAgIHZhciBkID0gdGhpcy5wdHI7CiAgICAgICAgICAgIHIucHJlcGFyZSgpOwogICAgICAgICAgICAib2JqZWN0IiA9PSB0eXBlb2YgYiAmJiAoYiA9IHBhKGIpKTsKICAgICAgICAgICAgYyAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGMgJiYgKGMgPSBjLnB0cik7CiAgICAgICAgICAgIGNiKGQsIGIsIGMpOwogICAgICAgICAgfTsKICAgICAgICAgIFMucHJvdG90eXBlLl9fZGVzdHJveV9fID0gUy5wcm90b3R5cGUuX19kZXN0cm95X18gPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgZGIodGhpcy5wdHIpOwogICAgICAgICAgfTsKICAgICAgICAgIFEucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh0LnByb3RvdHlwZSk7CiAgICAgICAgICBRLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFE7CiAgICAgICAgICBRLnByb3RvdHlwZS5fX2NsYXNzX18gPSBROwogICAgICAgICAgUS5fX2NhY2hlX18gPSB7fTsKICAgICAgICAgIGEzLkF0dHJpYnV0ZVRyYW5zZm9ybURhdGEgPSBROwogICAgICAgICAgUS5wcm90b3R5cGUudHJhbnNmb3JtX3R5cGUgPSBRLnByb3RvdHlwZS50cmFuc2Zvcm1fdHlwZSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gZWIodGhpcy5wdHIpOwogICAgICAgICAgfTsKICAgICAgICAgIFEucHJvdG90eXBlLl9fZGVzdHJveV9fID0gUS5wcm90b3R5cGUuX19kZXN0cm95X18gPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgZmIodGhpcy5wdHIpOwogICAgICAgICAgfTsKICAgICAgICAgIFcucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh0LnByb3RvdHlwZSk7CiAgICAgICAgICBXLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFc7CiAgICAgICAgICBXLnByb3RvdHlwZS5fX2NsYXNzX18gPSBXOwogICAgICAgICAgVy5fX2NhY2hlX18gPSB7fTsKICAgICAgICAgIGEzLkdlb21ldHJ5QXR0cmlidXRlID0gVzsKICAgICAgICAgIFcucHJvdG90eXBlLl9fZGVzdHJveV9fID0gVy5wcm90b3R5cGUuX19kZXN0cm95X18gPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgZ2IodGhpcy5wdHIpOwogICAgICAgICAgfTsKICAgICAgICAgIHcucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh0LnByb3RvdHlwZSk7CiAgICAgICAgICB3LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHc7CiAgICAgICAgICB3LnByb3RvdHlwZS5fX2NsYXNzX18gPSB3OwogICAgICAgICAgdy5fX2NhY2hlX18gPSB7fTsKICAgICAgICAgIGEzLlBvaW50QXR0cmlidXRlID0gdzsKICAgICAgICAgIHcucHJvdG90eXBlLnNpemUgPSB3LnByb3RvdHlwZS5zaXplID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBoYih0aGlzLnB0cik7CiAgICAgICAgICB9OwogICAgICAgICAgdy5wcm90b3R5cGUuR2V0QXR0cmlidXRlVHJhbnNmb3JtRGF0YSA9IHcucHJvdG90eXBlLkdldEF0dHJpYnV0ZVRyYW5zZm9ybURhdGEgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIEQoaWIodGhpcy5wdHIpLCBRKTsKICAgICAgICAgIH07CiAgICAgICAgICB3LnByb3RvdHlwZS5hdHRyaWJ1dGVfdHlwZSA9IHcucHJvdG90eXBlLmF0dHJpYnV0ZV90eXBlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBqYih0aGlzLnB0cik7CiAgICAgICAgICB9OwogICAgICAgICAgdy5wcm90b3R5cGUuZGF0YV90eXBlID0gdy5wcm90b3R5cGUuZGF0YV90eXBlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBrYih0aGlzLnB0cik7CiAgICAgICAgICB9OwogICAgICAgICAgdy5wcm90b3R5cGUubnVtX2NvbXBvbmVudHMgPSB3LnByb3RvdHlwZS5udW1fY29tcG9uZW50cyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gbGIodGhpcy5wdHIpOwogICAgICAgICAgfTsKICAgICAgICAgIHcucHJvdG90eXBlLm5vcm1hbGl6ZWQgPSB3LnByb3RvdHlwZS5ub3JtYWxpemVkID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAhIW1iKHRoaXMucHRyKTsKICAgICAgICAgIH07CiAgICAgICAgICB3LnByb3RvdHlwZS5ieXRlX3N0cmlkZSA9IHcucHJvdG90eXBlLmJ5dGVfc3RyaWRlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBuYih0aGlzLnB0cik7CiAgICAgICAgICB9OwogICAgICAgICAgdy5wcm90b3R5cGUuYnl0ZV9vZmZzZXQgPSB3LnByb3RvdHlwZS5ieXRlX29mZnNldCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gb2IodGhpcy5wdHIpOwogICAgICAgICAgfTsKICAgICAgICAgIHcucHJvdG90eXBlLnVuaXF1ZV9pZCA9IHcucHJvdG90eXBlLnVuaXF1ZV9pZCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gcGIodGhpcy5wdHIpOwogICAgICAgICAgfTsKICAgICAgICAgIHcucHJvdG90eXBlLl9fZGVzdHJveV9fID0gdy5wcm90b3R5cGUuX19kZXN0cm95X18gPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcWIodGhpcy5wdHIpOwogICAgICAgICAgfTsKICAgICAgICAgIEMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh0LnByb3RvdHlwZSk7CiAgICAgICAgICBDLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEM7CiAgICAgICAgICBDLnByb3RvdHlwZS5fX2NsYXNzX18gPSBDOwogICAgICAgICAgQy5fX2NhY2hlX18gPSB7fTsKICAgICAgICAgIGEzLkF0dHJpYnV0ZVF1YW50aXphdGlvblRyYW5zZm9ybSA9IEM7CiAgICAgICAgICBDLnByb3RvdHlwZS5Jbml0RnJvbUF0dHJpYnV0ZSA9IEMucHJvdG90eXBlLkluaXRGcm9tQXR0cmlidXRlID0gZnVuY3Rpb24oYikgewogICAgICAgICAgICB2YXIgYyA9IHRoaXMucHRyOwogICAgICAgICAgICBiICYmICJvYmplY3QiID09PSB0eXBlb2YgYiAmJiAoYiA9IGIucHRyKTsKICAgICAgICAgICAgcmV0dXJuICEhcmIoYywgYik7CiAgICAgICAgICB9OwogICAgICAgICAgQy5wcm90b3R5cGUucXVhbnRpemF0aW9uX2JpdHMgPSBDLnByb3RvdHlwZS5xdWFudGl6YXRpb25fYml0cyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gc2IodGhpcy5wdHIpOwogICAgICAgICAgfTsKICAgICAgICAgIEMucHJvdG90eXBlLm1pbl92YWx1ZSA9IEMucHJvdG90eXBlLm1pbl92YWx1ZSA9IGZ1bmN0aW9uKGIpIHsKICAgICAgICAgICAgdmFyIGMgPSB0aGlzLnB0cjsKICAgICAgICAgICAgYiAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGIgJiYgKGIgPSBiLnB0cik7CiAgICAgICAgICAgIHJldHVybiB0YihjLCBiKTsKICAgICAgICAgIH07CiAgICAgICAgICBDLnByb3RvdHlwZS5yYW5nZSA9IEMucHJvdG90eXBlLnJhbmdlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB1Yih0aGlzLnB0cik7CiAgICAgICAgICB9OwogICAgICAgICAgQy5wcm90b3R5cGUuX19kZXN0cm95X18gPSBDLnByb3RvdHlwZS5fX2Rlc3Ryb3lfXyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICB2Yih0aGlzLnB0cik7CiAgICAgICAgICB9OwogICAgICAgICAgRi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHQucHJvdG90eXBlKTsKICAgICAgICAgIEYucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRjsKICAgICAgICAgIEYucHJvdG90eXBlLl9fY2xhc3NfXyA9IEY7CiAgICAgICAgICBGLl9fY2FjaGVfXyA9IHt9OwogICAgICAgICAgYTMuQXR0cmlidXRlT2N0YWhlZHJvblRyYW5zZm9ybSA9IEY7CiAgICAgICAgICBGLnByb3RvdHlwZS5Jbml0RnJvbUF0dHJpYnV0ZSA9IEYucHJvdG90eXBlLkluaXRGcm9tQXR0cmlidXRlID0gZnVuY3Rpb24oYikgewogICAgICAgICAgICB2YXIgYyA9IHRoaXMucHRyOwogICAgICAgICAgICBiICYmICJvYmplY3QiID09PSB0eXBlb2YgYiAmJiAoYiA9IGIucHRyKTsKICAgICAgICAgICAgcmV0dXJuICEhd2IoYywgYik7CiAgICAgICAgICB9OwogICAgICAgICAgRi5wcm90b3R5cGUucXVhbnRpemF0aW9uX2JpdHMgPSBGLnByb3RvdHlwZS5xdWFudGl6YXRpb25fYml0cyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4geGIodGhpcy5wdHIpOwogICAgICAgICAgfTsKICAgICAgICAgIEYucHJvdG90eXBlLl9fZGVzdHJveV9fID0gRi5wcm90b3R5cGUuX19kZXN0cm95X18gPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgeWIodGhpcy5wdHIpOwogICAgICAgICAgfTsKICAgICAgICAgIEcucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh0LnByb3RvdHlwZSk7CiAgICAgICAgICBHLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEc7CiAgICAgICAgICBHLnByb3RvdHlwZS5fX2NsYXNzX18gPSBHOwogICAgICAgICAgRy5fX2NhY2hlX18gPSB7fTsKICAgICAgICAgIGEzLlBvaW50Q2xvdWQgPSBHOwogICAgICAgICAgRy5wcm90b3R5cGUubnVtX2F0dHJpYnV0ZXMgPSBHLnByb3RvdHlwZS5udW1fYXR0cmlidXRlcyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gemIodGhpcy5wdHIpOwogICAgICAgICAgfTsKICAgICAgICAgIEcucHJvdG90eXBlLm51bV9wb2ludHMgPSBHLnByb3RvdHlwZS5udW1fcG9pbnRzID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBBYih0aGlzLnB0cik7CiAgICAgICAgICB9OwogICAgICAgICAgRy5wcm90b3R5cGUuX19kZXN0cm95X18gPSBHLnByb3RvdHlwZS5fX2Rlc3Ryb3lfXyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBCYih0aGlzLnB0cik7CiAgICAgICAgICB9OwogICAgICAgICAgRS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHQucHJvdG90eXBlKTsKICAgICAgICAgIEUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRTsKICAgICAgICAgIEUucHJvdG90eXBlLl9fY2xhc3NfXyA9IEU7CiAgICAgICAgICBFLl9fY2FjaGVfXyA9IHt9OwogICAgICAgICAgYTMuTWVzaCA9IEU7CiAgICAgICAgICBFLnByb3RvdHlwZS5udW1fZmFjZXMgPSBFLnByb3RvdHlwZS5udW1fZmFjZXMgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIENiKHRoaXMucHRyKTsKICAgICAgICAgIH07CiAgICAgICAgICBFLnByb3RvdHlwZS5udW1fYXR0cmlidXRlcyA9IEUucHJvdG90eXBlLm51bV9hdHRyaWJ1dGVzID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBEYih0aGlzLnB0cik7CiAgICAgICAgICB9OwogICAgICAgICAgRS5wcm90b3R5cGUubnVtX3BvaW50cyA9IEUucHJvdG90eXBlLm51bV9wb2ludHMgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIEViKHRoaXMucHRyKTsKICAgICAgICAgIH07CiAgICAgICAgICBFLnByb3RvdHlwZS5fX2Rlc3Ryb3lfXyA9IEUucHJvdG90eXBlLl9fZGVzdHJveV9fID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIEZiKHRoaXMucHRyKTsKICAgICAgICAgIH07CiAgICAgICAgICBULnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUodC5wcm90b3R5cGUpOwogICAgICAgICAgVC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBUOwogICAgICAgICAgVC5wcm90b3R5cGUuX19jbGFzc19fID0gVDsKICAgICAgICAgIFQuX19jYWNoZV9fID0ge307CiAgICAgICAgICBhMy5NZXRhZGF0YSA9IFQ7CiAgICAgICAgICBULnByb3RvdHlwZS5fX2Rlc3Ryb3lfXyA9IFQucHJvdG90eXBlLl9fZGVzdHJveV9fID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIEdiKHRoaXMucHRyKTsKICAgICAgICAgIH07CiAgICAgICAgICBCLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUodC5wcm90b3R5cGUpOwogICAgICAgICAgQi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBCOwogICAgICAgICAgQi5wcm90b3R5cGUuX19jbGFzc19fID0gQjsKICAgICAgICAgIEIuX19jYWNoZV9fID0ge307CiAgICAgICAgICBhMy5TdGF0dXMgPSBCOwogICAgICAgICAgQi5wcm90b3R5cGUuY29kZSA9IEIucHJvdG90eXBlLmNvZGUgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIEhiKHRoaXMucHRyKTsKICAgICAgICAgIH07CiAgICAgICAgICBCLnByb3RvdHlwZS5vayA9IEIucHJvdG90eXBlLm9rID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAhIUliKHRoaXMucHRyKTsKICAgICAgICAgIH07CiAgICAgICAgICBCLnByb3RvdHlwZS5lcnJvcl9tc2cgPSBCLnByb3RvdHlwZS5lcnJvcl9tc2cgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIGgoSmIodGhpcy5wdHIpKTsKICAgICAgICAgIH07CiAgICAgICAgICBCLnByb3RvdHlwZS5fX2Rlc3Ryb3lfXyA9IEIucHJvdG90eXBlLl9fZGVzdHJveV9fID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIEtiKHRoaXMucHRyKTsKICAgICAgICAgIH07CiAgICAgICAgICBILnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUodC5wcm90b3R5cGUpOwogICAgICAgICAgSC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBIOwogICAgICAgICAgSC5wcm90b3R5cGUuX19jbGFzc19fID0gSDsKICAgICAgICAgIEguX19jYWNoZV9fID0ge307CiAgICAgICAgICBhMy5EcmFjb0Zsb2F0MzJBcnJheSA9IEg7CiAgICAgICAgICBILnByb3RvdHlwZS5HZXRWYWx1ZSA9IEgucHJvdG90eXBlLkdldFZhbHVlID0gZnVuY3Rpb24oYikgewogICAgICAgICAgICB2YXIgYyA9IHRoaXMucHRyOwogICAgICAgICAgICBiICYmICJvYmplY3QiID09PSB0eXBlb2YgYiAmJiAoYiA9IGIucHRyKTsKICAgICAgICAgICAgcmV0dXJuIExiKGMsIGIpOwogICAgICAgICAgfTsKICAgICAgICAgIEgucHJvdG90eXBlLnNpemUgPSBILnByb3RvdHlwZS5zaXplID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBNYih0aGlzLnB0cik7CiAgICAgICAgICB9OwogICAgICAgICAgSC5wcm90b3R5cGUuX19kZXN0cm95X18gPSBILnByb3RvdHlwZS5fX2Rlc3Ryb3lfXyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBOYih0aGlzLnB0cik7CiAgICAgICAgICB9OwogICAgICAgICAgSS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHQucHJvdG90eXBlKTsKICAgICAgICAgIEkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gSTsKICAgICAgICAgIEkucHJvdG90eXBlLl9fY2xhc3NfXyA9IEk7CiAgICAgICAgICBJLl9fY2FjaGVfXyA9IHt9OwogICAgICAgICAgYTMuRHJhY29JbnQ4QXJyYXkgPSBJOwogICAgICAgICAgSS5wcm90b3R5cGUuR2V0VmFsdWUgPSBJLnByb3RvdHlwZS5HZXRWYWx1ZSA9IGZ1bmN0aW9uKGIpIHsKICAgICAgICAgICAgdmFyIGMgPSB0aGlzLnB0cjsKICAgICAgICAgICAgYiAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGIgJiYgKGIgPSBiLnB0cik7CiAgICAgICAgICAgIHJldHVybiBPYihjLCBiKTsKICAgICAgICAgIH07CiAgICAgICAgICBJLnByb3RvdHlwZS5zaXplID0gSS5wcm90b3R5cGUuc2l6ZSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gUGIodGhpcy5wdHIpOwogICAgICAgICAgfTsKICAgICAgICAgIEkucHJvdG90eXBlLl9fZGVzdHJveV9fID0gSS5wcm90b3R5cGUuX19kZXN0cm95X18gPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgUWIodGhpcy5wdHIpOwogICAgICAgICAgfTsKICAgICAgICAgIEoucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh0LnByb3RvdHlwZSk7CiAgICAgICAgICBKLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEo7CiAgICAgICAgICBKLnByb3RvdHlwZS5fX2NsYXNzX18gPSBKOwogICAgICAgICAgSi5fX2NhY2hlX18gPSB7fTsKICAgICAgICAgIGEzLkRyYWNvVUludDhBcnJheSA9IEo7CiAgICAgICAgICBKLnByb3RvdHlwZS5HZXRWYWx1ZSA9IEoucHJvdG90eXBlLkdldFZhbHVlID0gZnVuY3Rpb24oYikgewogICAgICAgICAgICB2YXIgYyA9IHRoaXMucHRyOwogICAgICAgICAgICBiICYmICJvYmplY3QiID09PSB0eXBlb2YgYiAmJiAoYiA9IGIucHRyKTsKICAgICAgICAgICAgcmV0dXJuIFJiKGMsIGIpOwogICAgICAgICAgfTsKICAgICAgICAgIEoucHJvdG90eXBlLnNpemUgPSBKLnByb3RvdHlwZS5zaXplID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBTYih0aGlzLnB0cik7CiAgICAgICAgICB9OwogICAgICAgICAgSi5wcm90b3R5cGUuX19kZXN0cm95X18gPSBKLnByb3RvdHlwZS5fX2Rlc3Ryb3lfXyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBUYih0aGlzLnB0cik7CiAgICAgICAgICB9OwogICAgICAgICAgSy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHQucHJvdG90eXBlKTsKICAgICAgICAgIEsucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gSzsKICAgICAgICAgIEsucHJvdG90eXBlLl9fY2xhc3NfXyA9IEs7CiAgICAgICAgICBLLl9fY2FjaGVfXyA9IHt9OwogICAgICAgICAgYTMuRHJhY29JbnQxNkFycmF5ID0gSzsKICAgICAgICAgIEsucHJvdG90eXBlLkdldFZhbHVlID0gSy5wcm90b3R5cGUuR2V0VmFsdWUgPSBmdW5jdGlvbihiKSB7CiAgICAgICAgICAgIHZhciBjID0gdGhpcy5wdHI7CiAgICAgICAgICAgIGIgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBiICYmIChiID0gYi5wdHIpOwogICAgICAgICAgICByZXR1cm4gVWIoYywgYik7CiAgICAgICAgICB9OwogICAgICAgICAgSy5wcm90b3R5cGUuc2l6ZSA9IEsucHJvdG90eXBlLnNpemUgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIFZiKHRoaXMucHRyKTsKICAgICAgICAgIH07CiAgICAgICAgICBLLnByb3RvdHlwZS5fX2Rlc3Ryb3lfXyA9IEsucHJvdG90eXBlLl9fZGVzdHJveV9fID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIFdiKHRoaXMucHRyKTsKICAgICAgICAgIH07CiAgICAgICAgICBMLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUodC5wcm90b3R5cGUpOwogICAgICAgICAgTC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMOwogICAgICAgICAgTC5wcm90b3R5cGUuX19jbGFzc19fID0gTDsKICAgICAgICAgIEwuX19jYWNoZV9fID0ge307CiAgICAgICAgICBhMy5EcmFjb1VJbnQxNkFycmF5ID0gTDsKICAgICAgICAgIEwucHJvdG90eXBlLkdldFZhbHVlID0gTC5wcm90b3R5cGUuR2V0VmFsdWUgPSBmdW5jdGlvbihiKSB7CiAgICAgICAgICAgIHZhciBjID0gdGhpcy5wdHI7CiAgICAgICAgICAgIGIgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBiICYmIChiID0gYi5wdHIpOwogICAgICAgICAgICByZXR1cm4gWGIoYywgYik7CiAgICAgICAgICB9OwogICAgICAgICAgTC5wcm90b3R5cGUuc2l6ZSA9IEwucHJvdG90eXBlLnNpemUgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIFliKHRoaXMucHRyKTsKICAgICAgICAgIH07CiAgICAgICAgICBMLnByb3RvdHlwZS5fX2Rlc3Ryb3lfXyA9IEwucHJvdG90eXBlLl9fZGVzdHJveV9fID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIFpiKHRoaXMucHRyKTsKICAgICAgICAgIH07CiAgICAgICAgICBNLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUodC5wcm90b3R5cGUpOwogICAgICAgICAgTS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNOwogICAgICAgICAgTS5wcm90b3R5cGUuX19jbGFzc19fID0gTTsKICAgICAgICAgIE0uX19jYWNoZV9fID0ge307CiAgICAgICAgICBhMy5EcmFjb0ludDMyQXJyYXkgPSBNOwogICAgICAgICAgTS5wcm90b3R5cGUuR2V0VmFsdWUgPSBNLnByb3RvdHlwZS5HZXRWYWx1ZSA9IGZ1bmN0aW9uKGIpIHsKICAgICAgICAgICAgdmFyIGMgPSB0aGlzLnB0cjsKICAgICAgICAgICAgYiAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGIgJiYgKGIgPSBiLnB0cik7CiAgICAgICAgICAgIHJldHVybiAkYihjLCBiKTsKICAgICAgICAgIH07CiAgICAgICAgICBNLnByb3RvdHlwZS5zaXplID0gTS5wcm90b3R5cGUuc2l6ZSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gYWModGhpcy5wdHIpOwogICAgICAgICAgfTsKICAgICAgICAgIE0ucHJvdG90eXBlLl9fZGVzdHJveV9fID0gTS5wcm90b3R5cGUuX19kZXN0cm95X18gPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgYmModGhpcy5wdHIpOwogICAgICAgICAgfTsKICAgICAgICAgIE4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh0LnByb3RvdHlwZSk7CiAgICAgICAgICBOLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE47CiAgICAgICAgICBOLnByb3RvdHlwZS5fX2NsYXNzX18gPSBOOwogICAgICAgICAgTi5fX2NhY2hlX18gPSB7fTsKICAgICAgICAgIGEzLkRyYWNvVUludDMyQXJyYXkgPSBOOwogICAgICAgICAgTi5wcm90b3R5cGUuR2V0VmFsdWUgPSBOLnByb3RvdHlwZS5HZXRWYWx1ZSA9IGZ1bmN0aW9uKGIpIHsKICAgICAgICAgICAgdmFyIGMgPSB0aGlzLnB0cjsKICAgICAgICAgICAgYiAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGIgJiYgKGIgPSBiLnB0cik7CiAgICAgICAgICAgIHJldHVybiBjYyhjLCBiKTsKICAgICAgICAgIH07CiAgICAgICAgICBOLnByb3RvdHlwZS5zaXplID0gTi5wcm90b3R5cGUuc2l6ZSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gZGModGhpcy5wdHIpOwogICAgICAgICAgfTsKICAgICAgICAgIE4ucHJvdG90eXBlLl9fZGVzdHJveV9fID0gTi5wcm90b3R5cGUuX19kZXN0cm95X18gPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgZWModGhpcy5wdHIpOwogICAgICAgICAgfTsKICAgICAgICAgIHkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh0LnByb3RvdHlwZSk7CiAgICAgICAgICB5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHk7CiAgICAgICAgICB5LnByb3RvdHlwZS5fX2NsYXNzX18gPSB5OwogICAgICAgICAgeS5fX2NhY2hlX18gPSB7fTsKICAgICAgICAgIGEzLk1ldGFkYXRhUXVlcmllciA9IHk7CiAgICAgICAgICB5LnByb3RvdHlwZS5IYXNFbnRyeSA9IHkucHJvdG90eXBlLkhhc0VudHJ5ID0gZnVuY3Rpb24oYiwgYykgewogICAgICAgICAgICB2YXIgZCA9IHRoaXMucHRyOwogICAgICAgICAgICByLnByZXBhcmUoKTsKICAgICAgICAgICAgYiAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGIgJiYgKGIgPSBiLnB0cik7CiAgICAgICAgICAgIGMgPSBjICYmICJvYmplY3QiID09PSB0eXBlb2YgYyA/IGMucHRyIDogUihjKTsKICAgICAgICAgICAgcmV0dXJuICEhZmMoZCwgYiwgYyk7CiAgICAgICAgICB9OwogICAgICAgICAgeS5wcm90b3R5cGUuR2V0SW50RW50cnkgPSB5LnByb3RvdHlwZS5HZXRJbnRFbnRyeSA9IGZ1bmN0aW9uKGIsIGMpIHsKICAgICAgICAgICAgdmFyIGQgPSB0aGlzLnB0cjsKICAgICAgICAgICAgci5wcmVwYXJlKCk7CiAgICAgICAgICAgIGIgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBiICYmIChiID0gYi5wdHIpOwogICAgICAgICAgICBjID0gYyAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGMgPyBjLnB0ciA6IFIoYyk7CiAgICAgICAgICAgIHJldHVybiBnYyhkLCBiLCBjKTsKICAgICAgICAgIH07CiAgICAgICAgICB5LnByb3RvdHlwZS5HZXRJbnRFbnRyeUFycmF5ID0geS5wcm90b3R5cGUuR2V0SW50RW50cnlBcnJheSA9IGZ1bmN0aW9uKGIsIGMsIGQpIHsKICAgICAgICAgICAgdmFyIGcgPSB0aGlzLnB0cjsKICAgICAgICAgICAgci5wcmVwYXJlKCk7CiAgICAgICAgICAgIGIgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBiICYmIChiID0gYi5wdHIpOwogICAgICAgICAgICBjID0gYyAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGMgPyBjLnB0ciA6IFIoYyk7CiAgICAgICAgICAgIGQgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBkICYmIChkID0gZC5wdHIpOwogICAgICAgICAgICBoYyhnLCBiLCBjLCBkKTsKICAgICAgICAgIH07CiAgICAgICAgICB5LnByb3RvdHlwZS5HZXREb3VibGVFbnRyeSA9IHkucHJvdG90eXBlLkdldERvdWJsZUVudHJ5ID0gZnVuY3Rpb24oYiwgYykgewogICAgICAgICAgICB2YXIgZCA9IHRoaXMucHRyOwogICAgICAgICAgICByLnByZXBhcmUoKTsKICAgICAgICAgICAgYiAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGIgJiYgKGIgPSBiLnB0cik7CiAgICAgICAgICAgIGMgPSBjICYmICJvYmplY3QiID09PSB0eXBlb2YgYyA/IGMucHRyIDogUihjKTsKICAgICAgICAgICAgcmV0dXJuIGljKGQsIGIsIGMpOwogICAgICAgICAgfTsKICAgICAgICAgIHkucHJvdG90eXBlLkdldFN0cmluZ0VudHJ5ID0geS5wcm90b3R5cGUuR2V0U3RyaW5nRW50cnkgPSBmdW5jdGlvbihiLCBjKSB7CiAgICAgICAgICAgIHZhciBkID0gdGhpcy5wdHI7CiAgICAgICAgICAgIHIucHJlcGFyZSgpOwogICAgICAgICAgICBiICYmICJvYmplY3QiID09PSB0eXBlb2YgYiAmJiAoYiA9IGIucHRyKTsKICAgICAgICAgICAgYyA9IGMgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBjID8gYy5wdHIgOiBSKGMpOwogICAgICAgICAgICByZXR1cm4gaChqYyhkLCBiLCBjKSk7CiAgICAgICAgICB9OwogICAgICAgICAgeS5wcm90b3R5cGUuTnVtRW50cmllcyA9IHkucHJvdG90eXBlLk51bUVudHJpZXMgPSBmdW5jdGlvbihiKSB7CiAgICAgICAgICAgIHZhciBjID0gdGhpcy5wdHI7CiAgICAgICAgICAgIGIgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBiICYmIChiID0gYi5wdHIpOwogICAgICAgICAgICByZXR1cm4ga2MoYywgYik7CiAgICAgICAgICB9OwogICAgICAgICAgeS5wcm90b3R5cGUuR2V0RW50cnlOYW1lID0geS5wcm90b3R5cGUuR2V0RW50cnlOYW1lID0gZnVuY3Rpb24oYiwgYykgewogICAgICAgICAgICB2YXIgZCA9IHRoaXMucHRyOwogICAgICAgICAgICBiICYmICJvYmplY3QiID09PSB0eXBlb2YgYiAmJiAoYiA9IGIucHRyKTsKICAgICAgICAgICAgYyAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGMgJiYgKGMgPSBjLnB0cik7CiAgICAgICAgICAgIHJldHVybiBoKGxjKGQsIGIsIGMpKTsKICAgICAgICAgIH07CiAgICAgICAgICB5LnByb3RvdHlwZS5fX2Rlc3Ryb3lfXyA9IHkucHJvdG90eXBlLl9fZGVzdHJveV9fID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIG1jKHRoaXMucHRyKTsKICAgICAgICAgIH07CiAgICAgICAgICBtLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUodC5wcm90b3R5cGUpOwogICAgICAgICAgbS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBtOwogICAgICAgICAgbS5wcm90b3R5cGUuX19jbGFzc19fID0gbTsKICAgICAgICAgIG0uX19jYWNoZV9fID0ge307CiAgICAgICAgICBhMy5EZWNvZGVyID0gbTsKICAgICAgICAgIG0ucHJvdG90eXBlLkRlY29kZUFycmF5VG9Qb2ludENsb3VkID0gbS5wcm90b3R5cGUuRGVjb2RlQXJyYXlUb1BvaW50Q2xvdWQgPSBmdW5jdGlvbihiLCBjLCBkKSB7CiAgICAgICAgICAgIHZhciBnID0gdGhpcy5wdHI7CiAgICAgICAgICAgIHIucHJlcGFyZSgpOwogICAgICAgICAgICAib2JqZWN0IiA9PSB0eXBlb2YgYiAmJiAoYiA9IHBhKGIpKTsKICAgICAgICAgICAgYyAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGMgJiYgKGMgPSBjLnB0cik7CiAgICAgICAgICAgIGQgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBkICYmIChkID0gZC5wdHIpOwogICAgICAgICAgICByZXR1cm4gRChuYyhnLCBiLCBjLCBkKSwgQik7CiAgICAgICAgICB9OwogICAgICAgICAgbS5wcm90b3R5cGUuRGVjb2RlQXJyYXlUb01lc2ggPSBtLnByb3RvdHlwZS5EZWNvZGVBcnJheVRvTWVzaCA9IGZ1bmN0aW9uKGIsIGMsIGQpIHsKICAgICAgICAgICAgdmFyIGcgPSB0aGlzLnB0cjsKICAgICAgICAgICAgci5wcmVwYXJlKCk7CiAgICAgICAgICAgICJvYmplY3QiID09IHR5cGVvZiBiICYmIChiID0gcGEoYikpOwogICAgICAgICAgICBjICYmICJvYmplY3QiID09PSB0eXBlb2YgYyAmJiAoYyA9IGMucHRyKTsKICAgICAgICAgICAgZCAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGQgJiYgKGQgPSBkLnB0cik7CiAgICAgICAgICAgIHJldHVybiBEKG9jKGcsIGIsIGMsIGQpLCBCKTsKICAgICAgICAgIH07CiAgICAgICAgICBtLnByb3RvdHlwZS5HZXRBdHRyaWJ1dGVJZCA9IG0ucHJvdG90eXBlLkdldEF0dHJpYnV0ZUlkID0gZnVuY3Rpb24oYiwgYykgewogICAgICAgICAgICB2YXIgZCA9IHRoaXMucHRyOwogICAgICAgICAgICBiICYmICJvYmplY3QiID09PSB0eXBlb2YgYiAmJiAoYiA9IGIucHRyKTsKICAgICAgICAgICAgYyAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGMgJiYgKGMgPSBjLnB0cik7CiAgICAgICAgICAgIHJldHVybiBwYyhkLCBiLCBjKTsKICAgICAgICAgIH07CiAgICAgICAgICBtLnByb3RvdHlwZS5HZXRBdHRyaWJ1dGVJZEJ5TmFtZSA9IG0ucHJvdG90eXBlLkdldEF0dHJpYnV0ZUlkQnlOYW1lID0gZnVuY3Rpb24oYiwgYykgewogICAgICAgICAgICB2YXIgZCA9IHRoaXMucHRyOwogICAgICAgICAgICByLnByZXBhcmUoKTsKICAgICAgICAgICAgYiAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGIgJiYgKGIgPSBiLnB0cik7CiAgICAgICAgICAgIGMgPSBjICYmICJvYmplY3QiID09PSB0eXBlb2YgYyA/IGMucHRyIDogUihjKTsKICAgICAgICAgICAgcmV0dXJuIHFjKGQsIGIsIGMpOwogICAgICAgICAgfTsKICAgICAgICAgIG0ucHJvdG90eXBlLkdldEF0dHJpYnV0ZUlkQnlNZXRhZGF0YUVudHJ5ID0gbS5wcm90b3R5cGUuR2V0QXR0cmlidXRlSWRCeU1ldGFkYXRhRW50cnkgPSBmdW5jdGlvbihiLCBjLCBkKSB7CiAgICAgICAgICAgIHZhciBnID0gdGhpcy5wdHI7CiAgICAgICAgICAgIHIucHJlcGFyZSgpOwogICAgICAgICAgICBiICYmICJvYmplY3QiID09PSB0eXBlb2YgYiAmJiAoYiA9IGIucHRyKTsKICAgICAgICAgICAgYyA9IGMgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBjID8gYy5wdHIgOiBSKGMpOwogICAgICAgICAgICBkID0gZCAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGQgPyBkLnB0ciA6IFIoZCk7CiAgICAgICAgICAgIHJldHVybiByYyhnLCBiLCBjLCBkKTsKICAgICAgICAgIH07CiAgICAgICAgICBtLnByb3RvdHlwZS5HZXRBdHRyaWJ1dGUgPSBtLnByb3RvdHlwZS5HZXRBdHRyaWJ1dGUgPSBmdW5jdGlvbihiLCBjKSB7CiAgICAgICAgICAgIHZhciBkID0gdGhpcy5wdHI7CiAgICAgICAgICAgIGIgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBiICYmIChiID0gYi5wdHIpOwogICAgICAgICAgICBjICYmICJvYmplY3QiID09PSB0eXBlb2YgYyAmJiAoYyA9IGMucHRyKTsKICAgICAgICAgICAgcmV0dXJuIEQoc2MoZCwgYiwgYyksIHcpOwogICAgICAgICAgfTsKICAgICAgICAgIG0ucHJvdG90eXBlLkdldEF0dHJpYnV0ZUJ5VW5pcXVlSWQgPSBtLnByb3RvdHlwZS5HZXRBdHRyaWJ1dGVCeVVuaXF1ZUlkID0gZnVuY3Rpb24oYiwgYykgewogICAgICAgICAgICB2YXIgZCA9IHRoaXMucHRyOwogICAgICAgICAgICBiICYmICJvYmplY3QiID09PSB0eXBlb2YgYiAmJiAoYiA9IGIucHRyKTsKICAgICAgICAgICAgYyAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGMgJiYgKGMgPSBjLnB0cik7CiAgICAgICAgICAgIHJldHVybiBEKHRjKGQsIGIsIGMpLCB3KTsKICAgICAgICAgIH07CiAgICAgICAgICBtLnByb3RvdHlwZS5HZXRNZXRhZGF0YSA9IG0ucHJvdG90eXBlLkdldE1ldGFkYXRhID0gZnVuY3Rpb24oYikgewogICAgICAgICAgICB2YXIgYyA9IHRoaXMucHRyOwogICAgICAgICAgICBiICYmICJvYmplY3QiID09PSB0eXBlb2YgYiAmJiAoYiA9IGIucHRyKTsKICAgICAgICAgICAgcmV0dXJuIEQodWMoYywgYiksIFQpOwogICAgICAgICAgfTsKICAgICAgICAgIG0ucHJvdG90eXBlLkdldEF0dHJpYnV0ZU1ldGFkYXRhID0gbS5wcm90b3R5cGUuR2V0QXR0cmlidXRlTWV0YWRhdGEgPSBmdW5jdGlvbihiLCBjKSB7CiAgICAgICAgICAgIHZhciBkID0gdGhpcy5wdHI7CiAgICAgICAgICAgIGIgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBiICYmIChiID0gYi5wdHIpOwogICAgICAgICAgICBjICYmICJvYmplY3QiID09PSB0eXBlb2YgYyAmJiAoYyA9IGMucHRyKTsKICAgICAgICAgICAgcmV0dXJuIEQodmMoZCwgYiwgYyksIFQpOwogICAgICAgICAgfTsKICAgICAgICAgIG0ucHJvdG90eXBlLkdldEZhY2VGcm9tTWVzaCA9IG0ucHJvdG90eXBlLkdldEZhY2VGcm9tTWVzaCA9IGZ1bmN0aW9uKGIsIGMsIGQpIHsKICAgICAgICAgICAgdmFyIGcgPSB0aGlzLnB0cjsKICAgICAgICAgICAgYiAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGIgJiYgKGIgPSBiLnB0cik7CiAgICAgICAgICAgIGMgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBjICYmIChjID0gYy5wdHIpOwogICAgICAgICAgICBkICYmICJvYmplY3QiID09PSB0eXBlb2YgZCAmJiAoZCA9IGQucHRyKTsKICAgICAgICAgICAgcmV0dXJuICEhd2MoZywgYiwgYywgZCk7CiAgICAgICAgICB9OwogICAgICAgICAgbS5wcm90b3R5cGUuR2V0VHJpYW5nbGVTdHJpcHNGcm9tTWVzaCA9IG0ucHJvdG90eXBlLkdldFRyaWFuZ2xlU3RyaXBzRnJvbU1lc2ggPSBmdW5jdGlvbihiLCBjKSB7CiAgICAgICAgICAgIHZhciBkID0gdGhpcy5wdHI7CiAgICAgICAgICAgIGIgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBiICYmIChiID0gYi5wdHIpOwogICAgICAgICAgICBjICYmICJvYmplY3QiID09PSB0eXBlb2YgYyAmJiAoYyA9IGMucHRyKTsKICAgICAgICAgICAgcmV0dXJuIHhjKGQsIGIsIGMpOwogICAgICAgICAgfTsKICAgICAgICAgIG0ucHJvdG90eXBlLkdldFRyaWFuZ2xlc1VJbnQxNkFycmF5ID0gbS5wcm90b3R5cGUuR2V0VHJpYW5nbGVzVUludDE2QXJyYXkgPSBmdW5jdGlvbihiLCBjLCBkKSB7CiAgICAgICAgICAgIHZhciBnID0gdGhpcy5wdHI7CiAgICAgICAgICAgIGIgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBiICYmIChiID0gYi5wdHIpOwogICAgICAgICAgICBjICYmICJvYmplY3QiID09PSB0eXBlb2YgYyAmJiAoYyA9IGMucHRyKTsKICAgICAgICAgICAgZCAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGQgJiYgKGQgPSBkLnB0cik7CiAgICAgICAgICAgIHJldHVybiAhIXljKGcsIGIsIGMsIGQpOwogICAgICAgICAgfTsKICAgICAgICAgIG0ucHJvdG90eXBlLkdldFRyaWFuZ2xlc1VJbnQzMkFycmF5ID0gbS5wcm90b3R5cGUuR2V0VHJpYW5nbGVzVUludDMyQXJyYXkgPSBmdW5jdGlvbihiLCBjLCBkKSB7CiAgICAgICAgICAgIHZhciBnID0gdGhpcy5wdHI7CiAgICAgICAgICAgIGIgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBiICYmIChiID0gYi5wdHIpOwogICAgICAgICAgICBjICYmICJvYmplY3QiID09PSB0eXBlb2YgYyAmJiAoYyA9IGMucHRyKTsKICAgICAgICAgICAgZCAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGQgJiYgKGQgPSBkLnB0cik7CiAgICAgICAgICAgIHJldHVybiAhIXpjKGcsIGIsIGMsIGQpOwogICAgICAgICAgfTsKICAgICAgICAgIG0ucHJvdG90eXBlLkdldEF0dHJpYnV0ZUZsb2F0ID0gbS5wcm90b3R5cGUuR2V0QXR0cmlidXRlRmxvYXQgPSBmdW5jdGlvbihiLCBjLCBkKSB7CiAgICAgICAgICAgIHZhciBnID0gdGhpcy5wdHI7CiAgICAgICAgICAgIGIgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBiICYmIChiID0gYi5wdHIpOwogICAgICAgICAgICBjICYmICJvYmplY3QiID09PSB0eXBlb2YgYyAmJiAoYyA9IGMucHRyKTsKICAgICAgICAgICAgZCAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGQgJiYgKGQgPSBkLnB0cik7CiAgICAgICAgICAgIHJldHVybiAhIUFjKGcsIGIsIGMsIGQpOwogICAgICAgICAgfTsKICAgICAgICAgIG0ucHJvdG90eXBlLkdldEF0dHJpYnV0ZUZsb2F0Rm9yQWxsUG9pbnRzID0gbS5wcm90b3R5cGUuR2V0QXR0cmlidXRlRmxvYXRGb3JBbGxQb2ludHMgPSBmdW5jdGlvbihiLCBjLCBkKSB7CiAgICAgICAgICAgIHZhciBnID0gdGhpcy5wdHI7CiAgICAgICAgICAgIGIgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBiICYmIChiID0gYi5wdHIpOwogICAgICAgICAgICBjICYmICJvYmplY3QiID09PSB0eXBlb2YgYyAmJiAoYyA9IGMucHRyKTsKICAgICAgICAgICAgZCAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGQgJiYgKGQgPSBkLnB0cik7CiAgICAgICAgICAgIHJldHVybiAhIUJjKGcsIGIsIGMsIGQpOwogICAgICAgICAgfTsKICAgICAgICAgIG0ucHJvdG90eXBlLkdldEF0dHJpYnV0ZUludEZvckFsbFBvaW50cyA9IG0ucHJvdG90eXBlLkdldEF0dHJpYnV0ZUludEZvckFsbFBvaW50cyA9IGZ1bmN0aW9uKGIsIGMsIGQpIHsKICAgICAgICAgICAgdmFyIGcgPSB0aGlzLnB0cjsKICAgICAgICAgICAgYiAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGIgJiYgKGIgPSBiLnB0cik7CiAgICAgICAgICAgIGMgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBjICYmIChjID0gYy5wdHIpOwogICAgICAgICAgICBkICYmICJvYmplY3QiID09PSB0eXBlb2YgZCAmJiAoZCA9IGQucHRyKTsKICAgICAgICAgICAgcmV0dXJuICEhQ2MoZywgYiwgYywgZCk7CiAgICAgICAgICB9OwogICAgICAgICAgbS5wcm90b3R5cGUuR2V0QXR0cmlidXRlSW50OEZvckFsbFBvaW50cyA9IG0ucHJvdG90eXBlLkdldEF0dHJpYnV0ZUludDhGb3JBbGxQb2ludHMgPSBmdW5jdGlvbihiLCBjLCBkKSB7CiAgICAgICAgICAgIHZhciBnID0gdGhpcy5wdHI7CiAgICAgICAgICAgIGIgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBiICYmIChiID0gYi5wdHIpOwogICAgICAgICAgICBjICYmICJvYmplY3QiID09PSB0eXBlb2YgYyAmJiAoYyA9IGMucHRyKTsKICAgICAgICAgICAgZCAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGQgJiYgKGQgPSBkLnB0cik7CiAgICAgICAgICAgIHJldHVybiAhIURjKGcsIGIsIGMsIGQpOwogICAgICAgICAgfTsKICAgICAgICAgIG0ucHJvdG90eXBlLkdldEF0dHJpYnV0ZVVJbnQ4Rm9yQWxsUG9pbnRzID0gbS5wcm90b3R5cGUuR2V0QXR0cmlidXRlVUludDhGb3JBbGxQb2ludHMgPSBmdW5jdGlvbihiLCBjLCBkKSB7CiAgICAgICAgICAgIHZhciBnID0gdGhpcy5wdHI7CiAgICAgICAgICAgIGIgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBiICYmIChiID0gYi5wdHIpOwogICAgICAgICAgICBjICYmICJvYmplY3QiID09PSB0eXBlb2YgYyAmJiAoYyA9IGMucHRyKTsKICAgICAgICAgICAgZCAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGQgJiYgKGQgPSBkLnB0cik7CiAgICAgICAgICAgIHJldHVybiAhIUVjKGcsIGIsIGMsIGQpOwogICAgICAgICAgfTsKICAgICAgICAgIG0ucHJvdG90eXBlLkdldEF0dHJpYnV0ZUludDE2Rm9yQWxsUG9pbnRzID0gbS5wcm90b3R5cGUuR2V0QXR0cmlidXRlSW50MTZGb3JBbGxQb2ludHMgPSBmdW5jdGlvbihiLCBjLCBkKSB7CiAgICAgICAgICAgIHZhciBnID0gdGhpcy5wdHI7CiAgICAgICAgICAgIGIgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBiICYmIChiID0gYi5wdHIpOwogICAgICAgICAgICBjICYmICJvYmplY3QiID09PSB0eXBlb2YgYyAmJiAoYyA9IGMucHRyKTsKICAgICAgICAgICAgZCAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGQgJiYgKGQgPSBkLnB0cik7CiAgICAgICAgICAgIHJldHVybiAhIUZjKGcsIGIsIGMsIGQpOwogICAgICAgICAgfTsKICAgICAgICAgIG0ucHJvdG90eXBlLkdldEF0dHJpYnV0ZVVJbnQxNkZvckFsbFBvaW50cyA9IG0ucHJvdG90eXBlLkdldEF0dHJpYnV0ZVVJbnQxNkZvckFsbFBvaW50cyA9IGZ1bmN0aW9uKGIsIGMsIGQpIHsKICAgICAgICAgICAgdmFyIGcgPSB0aGlzLnB0cjsKICAgICAgICAgICAgYiAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGIgJiYgKGIgPSBiLnB0cik7CiAgICAgICAgICAgIGMgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBjICYmIChjID0gYy5wdHIpOwogICAgICAgICAgICBkICYmICJvYmplY3QiID09PSB0eXBlb2YgZCAmJiAoZCA9IGQucHRyKTsKICAgICAgICAgICAgcmV0dXJuICEhR2MoZywgYiwgYywgZCk7CiAgICAgICAgICB9OwogICAgICAgICAgbS5wcm90b3R5cGUuR2V0QXR0cmlidXRlSW50MzJGb3JBbGxQb2ludHMgPSBtLnByb3RvdHlwZS5HZXRBdHRyaWJ1dGVJbnQzMkZvckFsbFBvaW50cyA9IGZ1bmN0aW9uKGIsIGMsIGQpIHsKICAgICAgICAgICAgdmFyIGcgPSB0aGlzLnB0cjsKICAgICAgICAgICAgYiAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGIgJiYgKGIgPSBiLnB0cik7CiAgICAgICAgICAgIGMgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBjICYmIChjID0gYy5wdHIpOwogICAgICAgICAgICBkICYmICJvYmplY3QiID09PSB0eXBlb2YgZCAmJiAoZCA9IGQucHRyKTsKICAgICAgICAgICAgcmV0dXJuICEhSGMoZywgYiwgYywgZCk7CiAgICAgICAgICB9OwogICAgICAgICAgbS5wcm90b3R5cGUuR2V0QXR0cmlidXRlVUludDMyRm9yQWxsUG9pbnRzID0gbS5wcm90b3R5cGUuR2V0QXR0cmlidXRlVUludDMyRm9yQWxsUG9pbnRzID0gZnVuY3Rpb24oYiwgYywgZCkgewogICAgICAgICAgICB2YXIgZyA9IHRoaXMucHRyOwogICAgICAgICAgICBiICYmICJvYmplY3QiID09PSB0eXBlb2YgYiAmJiAoYiA9IGIucHRyKTsKICAgICAgICAgICAgYyAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGMgJiYgKGMgPSBjLnB0cik7CiAgICAgICAgICAgIGQgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBkICYmIChkID0gZC5wdHIpOwogICAgICAgICAgICByZXR1cm4gISFJYyhnLCBiLCBjLCBkKTsKICAgICAgICAgIH07CiAgICAgICAgICBtLnByb3RvdHlwZS5HZXRBdHRyaWJ1dGVEYXRhQXJyYXlGb3JBbGxQb2ludHMgPSBtLnByb3RvdHlwZS5HZXRBdHRyaWJ1dGVEYXRhQXJyYXlGb3JBbGxQb2ludHMgPSBmdW5jdGlvbihiLCBjLCBkLCBnLCB1MykgewogICAgICAgICAgICB2YXIgWCA9IHRoaXMucHRyOwogICAgICAgICAgICBiICYmICJvYmplY3QiID09PSB0eXBlb2YgYiAmJiAoYiA9IGIucHRyKTsKICAgICAgICAgICAgYyAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGMgJiYgKGMgPSBjLnB0cik7CiAgICAgICAgICAgIGQgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBkICYmIChkID0gZC5wdHIpOwogICAgICAgICAgICBnICYmICJvYmplY3QiID09PSB0eXBlb2YgZyAmJiAoZyA9IGcucHRyKTsKICAgICAgICAgICAgdTMgJiYgIm9iamVjdCIgPT09IHR5cGVvZiB1MyAmJiAodTMgPSB1My5wdHIpOwogICAgICAgICAgICByZXR1cm4gISFKYyhYLCBiLCBjLCBkLCBnLCB1Myk7CiAgICAgICAgICB9OwogICAgICAgICAgbS5wcm90b3R5cGUuU2tpcEF0dHJpYnV0ZVRyYW5zZm9ybSA9IG0ucHJvdG90eXBlLlNraXBBdHRyaWJ1dGVUcmFuc2Zvcm0gPSBmdW5jdGlvbihiKSB7CiAgICAgICAgICAgIHZhciBjID0gdGhpcy5wdHI7CiAgICAgICAgICAgIGIgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBiICYmIChiID0gYi5wdHIpOwogICAgICAgICAgICBLYyhjLCBiKTsKICAgICAgICAgIH07CiAgICAgICAgICBtLnByb3RvdHlwZS5HZXRFbmNvZGVkR2VvbWV0cnlUeXBlX0RlcHJlY2F0ZWQgPSBtLnByb3RvdHlwZS5HZXRFbmNvZGVkR2VvbWV0cnlUeXBlX0RlcHJlY2F0ZWQgPSBmdW5jdGlvbihiKSB7CiAgICAgICAgICAgIHZhciBjID0gdGhpcy5wdHI7CiAgICAgICAgICAgIGIgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBiICYmIChiID0gYi5wdHIpOwogICAgICAgICAgICByZXR1cm4gTGMoYywgYik7CiAgICAgICAgICB9OwogICAgICAgICAgbS5wcm90b3R5cGUuRGVjb2RlQnVmZmVyVG9Qb2ludENsb3VkID0gbS5wcm90b3R5cGUuRGVjb2RlQnVmZmVyVG9Qb2ludENsb3VkID0gZnVuY3Rpb24oYiwgYykgewogICAgICAgICAgICB2YXIgZCA9IHRoaXMucHRyOwogICAgICAgICAgICBiICYmICJvYmplY3QiID09PSB0eXBlb2YgYiAmJiAoYiA9IGIucHRyKTsKICAgICAgICAgICAgYyAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGMgJiYgKGMgPSBjLnB0cik7CiAgICAgICAgICAgIHJldHVybiBEKE1jKGQsIGIsIGMpLCBCKTsKICAgICAgICAgIH07CiAgICAgICAgICBtLnByb3RvdHlwZS5EZWNvZGVCdWZmZXJUb01lc2ggPSBtLnByb3RvdHlwZS5EZWNvZGVCdWZmZXJUb01lc2ggPSBmdW5jdGlvbihiLCBjKSB7CiAgICAgICAgICAgIHZhciBkID0gdGhpcy5wdHI7CiAgICAgICAgICAgIGIgJiYgIm9iamVjdCIgPT09IHR5cGVvZiBiICYmIChiID0gYi5wdHIpOwogICAgICAgICAgICBjICYmICJvYmplY3QiID09PSB0eXBlb2YgYyAmJiAoYyA9IGMucHRyKTsKICAgICAgICAgICAgcmV0dXJuIEQoTmMoZCwgYiwgYyksIEIpOwogICAgICAgICAgfTsKICAgICAgICAgIG0ucHJvdG90eXBlLl9fZGVzdHJveV9fID0gbS5wcm90b3R5cGUuX19kZXN0cm95X18gPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgT2ModGhpcy5wdHIpOwogICAgICAgICAgfTsKICAgICAgICAgIChmdW5jdGlvbigpIHsKICAgICAgICAgICAgZnVuY3Rpb24gYigpIHsKICAgICAgICAgICAgICBhMy5BVFRSSUJVVEVfSU5WQUxJRF9UUkFOU0ZPUk0gPSBQYygpOwogICAgICAgICAgICAgIGEzLkFUVFJJQlVURV9OT19UUkFOU0ZPUk0gPSBRYygpOwogICAgICAgICAgICAgIGEzLkFUVFJJQlVURV9RVUFOVElaQVRJT05fVFJBTlNGT1JNID0gUmMoKTsKICAgICAgICAgICAgICBhMy5BVFRSSUJVVEVfT0NUQUhFRFJPTl9UUkFOU0ZPUk0gPSBTYygpOwogICAgICAgICAgICAgIGEzLklOVkFMSUQgPSBUYygpOwogICAgICAgICAgICAgIGEzLlBPU0lUSU9OID0gVWMoKTsKICAgICAgICAgICAgICBhMy5OT1JNQUwgPSBWYygpOwogICAgICAgICAgICAgIGEzLkNPTE9SID0gV2MoKTsKICAgICAgICAgICAgICBhMy5URVhfQ09PUkQgPSBYYygpOwogICAgICAgICAgICAgIGEzLkdFTkVSSUMgPSBZYygpOwogICAgICAgICAgICAgIGEzLklOVkFMSURfR0VPTUVUUllfVFlQRSA9IFpjKCk7CiAgICAgICAgICAgICAgYTMuUE9JTlRfQ0xPVUQgPSAkYygpOwogICAgICAgICAgICAgIGEzLlRSSUFOR1VMQVJfTUVTSCA9IGFkKCk7CiAgICAgICAgICAgICAgYTMuRFRfSU5WQUxJRCA9IGJkKCk7CiAgICAgICAgICAgICAgYTMuRFRfSU5UOCA9IGNkKCk7CiAgICAgICAgICAgICAgYTMuRFRfVUlOVDggPSBkZCgpOwogICAgICAgICAgICAgIGEzLkRUX0lOVDE2ID0gZWQoKTsKICAgICAgICAgICAgICBhMy5EVF9VSU5UMTYgPSBmZCgpOwogICAgICAgICAgICAgIGEzLkRUX0lOVDMyID0gZ2QoKTsKICAgICAgICAgICAgICBhMy5EVF9VSU5UMzIgPSBoZCgpOwogICAgICAgICAgICAgIGEzLkRUX0lOVDY0ID0gaWQoKTsKICAgICAgICAgICAgICBhMy5EVF9VSU5UNjQgPSBqZCgpOwogICAgICAgICAgICAgIGEzLkRUX0ZMT0FUMzIgPSBrZCgpOwogICAgICAgICAgICAgIGEzLkRUX0ZMT0FUNjQgPSBsZCgpOwogICAgICAgICAgICAgIGEzLkRUX0JPT0wgPSBtZCgpOwogICAgICAgICAgICAgIGEzLkRUX1RZUEVTX0NPVU5UID0gbmQoKTsKICAgICAgICAgICAgICBhMy5PSyA9IG9kKCk7CiAgICAgICAgICAgICAgYTMuRFJBQ09fRVJST1IgPSBwZCgpOwogICAgICAgICAgICAgIGEzLklPX0VSUk9SID0gcWQoKTsKICAgICAgICAgICAgICBhMy5JTlZBTElEX1BBUkFNRVRFUiA9IHJkKCk7CiAgICAgICAgICAgICAgYTMuVU5TVVBQT1JURURfVkVSU0lPTiA9IHNkKCk7CiAgICAgICAgICAgICAgYTMuVU5LTk9XTl9WRVJTSU9OID0gdGQoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB6YSA/IGIoKSA6IG9hLnVuc2hpZnQoYik7CiAgICAgICAgICB9KSgpOwogICAgICAgICAgaWYgKCJmdW5jdGlvbiIgPT09IHR5cGVvZiBhMy5vbk1vZHVsZVBhcnNlZCkKICAgICAgICAgICAgYTMub25Nb2R1bGVQYXJzZWQoKTsKICAgICAgICAgIGEzLkRlY29kZXIucHJvdG90eXBlLkdldEVuY29kZWRHZW9tZXRyeVR5cGUgPSBmdW5jdGlvbihiKSB7CiAgICAgICAgICAgIGlmIChiLl9fY2xhc3NfXyAmJiBiLl9fY2xhc3NfXyA9PT0gYTMuRGVjb2RlckJ1ZmZlcikKICAgICAgICAgICAgICByZXR1cm4gYTMuRGVjb2Rlci5wcm90b3R5cGUuR2V0RW5jb2RlZEdlb21ldHJ5VHlwZV9EZXByZWNhdGVkKGIpOwogICAgICAgICAgICBpZiAoOCA+IGIuYnl0ZUxlbmd0aCkKICAgICAgICAgICAgICByZXR1cm4gYTMuSU5WQUxJRF9HRU9NRVRSWV9UWVBFOwogICAgICAgICAgICBzd2l0Y2ggKGJbN10pIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICByZXR1cm4gYTMuUE9JTlRfQ0xPVUQ7CiAgICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgICAgcmV0dXJuIGEzLlRSSUFOR1VMQVJfTUVTSDsKICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgcmV0dXJuIGEzLklOVkFMSURfR0VPTUVUUllfVFlQRTsKICAgICAgICAgICAgfQogICAgICAgICAgfTsKICAgICAgICAgIHJldHVybiBuLnJlYWR5OwogICAgICAgIH07CiAgICAgIH0oKTsKICAgICAgIm9iamVjdCIgPT09IHR5cGVvZiBleHBvcnRzMiAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIG1vZHVsZSA/IG1vZHVsZS5leHBvcnRzID0gRHJhY29EZWNvZGVyTW9kdWxlIDogImZ1bmN0aW9uIiA9PT0gdHlwZW9mIGRlZmluZSAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFtdLCBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gRHJhY29EZWNvZGVyTW9kdWxlOwogICAgICB9KSA6ICJvYmplY3QiID09PSB0eXBlb2YgZXhwb3J0czIgJiYgKGV4cG9ydHMyLkRyYWNvRGVjb2Rlck1vZHVsZSA9IERyYWNvRGVjb2Rlck1vZHVsZSk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9kZWNvZGVEcmFjby5qcwogIHZhciBkZWNvZGVEcmFjb19leHBvcnRzID0ge307CiAgX19leHBvcnQoZGVjb2RlRHJhY29fZXhwb3J0cywgewogICAgZGVmYXVsdDogKCkgPT4gZGVjb2RlRHJhY29fZGVmYXVsdAogIH0pOwogIGZ1bmN0aW9uIGRlY29kZUluZGV4QXJyYXkoZHJhY29HZW9tZXRyeSwgZHJhY29EZWNvZGVyKSB7CiAgICBjb25zdCBudW1Qb2ludHMgPSBkcmFjb0dlb21ldHJ5Lm51bV9wb2ludHMoKTsKICAgIGNvbnN0IG51bUZhY2VzID0gZHJhY29HZW9tZXRyeS5udW1fZmFjZXMoKTsKICAgIGNvbnN0IGZhY2VJbmRpY2VzID0gbmV3IGRyYWNvLkRyYWNvSW50MzJBcnJheSgpOwogICAgY29uc3QgbnVtSW5kaWNlcyA9IG51bUZhY2VzICogMzsKICAgIGNvbnN0IGluZGV4QXJyYXkgPSBJbmRleERhdGF0eXBlX2RlZmF1bHQuY3JlYXRlVHlwZWRBcnJheShudW1Qb2ludHMsIG51bUluZGljZXMpOwogICAgbGV0IG9mZnNldCA9IDA7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUZhY2VzOyArK2kpIHsKICAgICAgZHJhY29EZWNvZGVyLkdldEZhY2VGcm9tTWVzaChkcmFjb0dlb21ldHJ5LCBpLCBmYWNlSW5kaWNlcyk7CiAgICAgIGluZGV4QXJyYXlbb2Zmc2V0ICsgMF0gPSBmYWNlSW5kaWNlcy5HZXRWYWx1ZSgwKTsKICAgICAgaW5kZXhBcnJheVtvZmZzZXQgKyAxXSA9IGZhY2VJbmRpY2VzLkdldFZhbHVlKDEpOwogICAgICBpbmRleEFycmF5W29mZnNldCArIDJdID0gZmFjZUluZGljZXMuR2V0VmFsdWUoMik7CiAgICAgIG9mZnNldCArPSAzOwogICAgfQogICAgZHJhY28uZGVzdHJveShmYWNlSW5kaWNlcyk7CiAgICByZXR1cm4gewogICAgICB0eXBlZEFycmF5OiBpbmRleEFycmF5LAogICAgICBudW1iZXJPZkluZGljZXM6IG51bUluZGljZXMKICAgIH07CiAgfQogIGZ1bmN0aW9uIGRlY29kZVF1YW50aXplZERyYWNvVHlwZWRBcnJheShkcmFjb0dlb21ldHJ5LCBkcmFjb0RlY29kZXIsIGRyYWNvQXR0cmlidXRlLCBxdWFudGl6YXRpb24sIHZlcnRleEFycmF5TGVuZ3RoKSB7CiAgICBsZXQgdmVydGV4QXJyYXk7CiAgICBsZXQgYXR0cmlidXRlRGF0YTsKICAgIGlmIChxdWFudGl6YXRpb24ucXVhbnRpemF0aW9uQml0cyA8PSA4KSB7CiAgICAgIGF0dHJpYnV0ZURhdGEgPSBuZXcgZHJhY28uRHJhY29VSW50OEFycmF5KCk7CiAgICAgIHZlcnRleEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkodmVydGV4QXJyYXlMZW5ndGgpOwogICAgICBkcmFjb0RlY29kZXIuR2V0QXR0cmlidXRlVUludDhGb3JBbGxQb2ludHMoCiAgICAgICAgZHJhY29HZW9tZXRyeSwKICAgICAgICBkcmFjb0F0dHJpYnV0ZSwKICAgICAgICBhdHRyaWJ1dGVEYXRhCiAgICAgICk7CiAgICB9IGVsc2UgaWYgKHF1YW50aXphdGlvbi5xdWFudGl6YXRpb25CaXRzIDw9IDE2KSB7CiAgICAgIGF0dHJpYnV0ZURhdGEgPSBuZXcgZHJhY28uRHJhY29VSW50MTZBcnJheSgpOwogICAgICB2ZXJ0ZXhBcnJheSA9IG5ldyBVaW50MTZBcnJheSh2ZXJ0ZXhBcnJheUxlbmd0aCk7CiAgICAgIGRyYWNvRGVjb2Rlci5HZXRBdHRyaWJ1dGVVSW50MTZGb3JBbGxQb2ludHMoCiAgICAgICAgZHJhY29HZW9tZXRyeSwKICAgICAgICBkcmFjb0F0dHJpYnV0ZSwKICAgICAgICBhdHRyaWJ1dGVEYXRhCiAgICAgICk7CiAgICB9IGVsc2UgewogICAgICBhdHRyaWJ1dGVEYXRhID0gbmV3IGRyYWNvLkRyYWNvRmxvYXQzMkFycmF5KCk7CiAgICAgIHZlcnRleEFycmF5ID0gbmV3IEZsb2F0MzJBcnJheSh2ZXJ0ZXhBcnJheUxlbmd0aCk7CiAgICAgIGRyYWNvRGVjb2Rlci5HZXRBdHRyaWJ1dGVGbG9hdEZvckFsbFBvaW50cygKICAgICAgICBkcmFjb0dlb21ldHJ5LAogICAgICAgIGRyYWNvQXR0cmlidXRlLAogICAgICAgIGF0dHJpYnV0ZURhdGEKICAgICAgKTsKICAgIH0KICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmVydGV4QXJyYXlMZW5ndGg7ICsraSkgewogICAgICB2ZXJ0ZXhBcnJheVtpXSA9IGF0dHJpYnV0ZURhdGEuR2V0VmFsdWUoaSk7CiAgICB9CiAgICBkcmFjby5kZXN0cm95KGF0dHJpYnV0ZURhdGEpOwogICAgcmV0dXJuIHZlcnRleEFycmF5OwogIH0KICBmdW5jdGlvbiBkZWNvZGVEcmFjb1R5cGVkQXJyYXkoZHJhY29HZW9tZXRyeSwgZHJhY29EZWNvZGVyLCBkcmFjb0F0dHJpYnV0ZSwgdmVydGV4QXJyYXlMZW5ndGgpIHsKICAgIGxldCB2ZXJ0ZXhBcnJheTsKICAgIGxldCBhdHRyaWJ1dGVEYXRhOwogICAgc3dpdGNoIChkcmFjb0F0dHJpYnV0ZS5kYXRhX3R5cGUoKSkgewogICAgICBjYXNlIDE6CiAgICAgIGNhc2UgMTE6CiAgICAgICAgYXR0cmlidXRlRGF0YSA9IG5ldyBkcmFjby5EcmFjb0ludDhBcnJheSgpOwogICAgICAgIHZlcnRleEFycmF5ID0gbmV3IEludDhBcnJheSh2ZXJ0ZXhBcnJheUxlbmd0aCk7CiAgICAgICAgZHJhY29EZWNvZGVyLkdldEF0dHJpYnV0ZUludDhGb3JBbGxQb2ludHMoCiAgICAgICAgICBkcmFjb0dlb21ldHJ5LAogICAgICAgICAgZHJhY29BdHRyaWJ1dGUsCiAgICAgICAgICBhdHRyaWJ1dGVEYXRhCiAgICAgICAgKTsKICAgICAgICBicmVhazsKICAgICAgY2FzZSAyOgogICAgICAgIGF0dHJpYnV0ZURhdGEgPSBuZXcgZHJhY28uRHJhY29VSW50OEFycmF5KCk7CiAgICAgICAgdmVydGV4QXJyYXkgPSBuZXcgVWludDhBcnJheSh2ZXJ0ZXhBcnJheUxlbmd0aCk7CiAgICAgICAgZHJhY29EZWNvZGVyLkdldEF0dHJpYnV0ZVVJbnQ4Rm9yQWxsUG9pbnRzKAogICAgICAgICAgZHJhY29HZW9tZXRyeSwKICAgICAgICAgIGRyYWNvQXR0cmlidXRlLAogICAgICAgICAgYXR0cmlidXRlRGF0YQogICAgICAgICk7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgMzoKICAgICAgICBhdHRyaWJ1dGVEYXRhID0gbmV3IGRyYWNvLkRyYWNvSW50MTZBcnJheSgpOwogICAgICAgIHZlcnRleEFycmF5ID0gbmV3IEludDE2QXJyYXkodmVydGV4QXJyYXlMZW5ndGgpOwogICAgICAgIGRyYWNvRGVjb2Rlci5HZXRBdHRyaWJ1dGVJbnQxNkZvckFsbFBvaW50cygKICAgICAgICAgIGRyYWNvR2VvbWV0cnksCiAgICAgICAgICBkcmFjb0F0dHJpYnV0ZSwKICAgICAgICAgIGF0dHJpYnV0ZURhdGEKICAgICAgICApOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlIDQ6CiAgICAgICAgYXR0cmlidXRlRGF0YSA9IG5ldyBkcmFjby5EcmFjb1VJbnQxNkFycmF5KCk7CiAgICAgICAgdmVydGV4QXJyYXkgPSBuZXcgVWludDE2QXJyYXkodmVydGV4QXJyYXlMZW5ndGgpOwogICAgICAgIGRyYWNvRGVjb2Rlci5HZXRBdHRyaWJ1dGVVSW50MTZGb3JBbGxQb2ludHMoCiAgICAgICAgICBkcmFjb0dlb21ldHJ5LAogICAgICAgICAgZHJhY29BdHRyaWJ1dGUsCiAgICAgICAgICBhdHRyaWJ1dGVEYXRhCiAgICAgICAgKTsKICAgICAgICBicmVhazsKICAgICAgY2FzZSA1OgogICAgICBjYXNlIDc6CiAgICAgICAgYXR0cmlidXRlRGF0YSA9IG5ldyBkcmFjby5EcmFjb0ludDMyQXJyYXkoKTsKICAgICAgICB2ZXJ0ZXhBcnJheSA9IG5ldyBJbnQzMkFycmF5KHZlcnRleEFycmF5TGVuZ3RoKTsKICAgICAgICBkcmFjb0RlY29kZXIuR2V0QXR0cmlidXRlSW50MzJGb3JBbGxQb2ludHMoCiAgICAgICAgICBkcmFjb0dlb21ldHJ5LAogICAgICAgICAgZHJhY29BdHRyaWJ1dGUsCiAgICAgICAgICBhdHRyaWJ1dGVEYXRhCiAgICAgICAgKTsKICAgICAgICBicmVhazsKICAgICAgY2FzZSA2OgogICAgICBjYXNlIDg6CiAgICAgICAgYXR0cmlidXRlRGF0YSA9IG5ldyBkcmFjby5EcmFjb1VJbnQzMkFycmF5KCk7CiAgICAgICAgdmVydGV4QXJyYXkgPSBuZXcgVWludDMyQXJyYXkodmVydGV4QXJyYXlMZW5ndGgpOwogICAgICAgIGRyYWNvRGVjb2Rlci5HZXRBdHRyaWJ1dGVVSW50MzJGb3JBbGxQb2ludHMoCiAgICAgICAgICBkcmFjb0dlb21ldHJ5LAogICAgICAgICAgZHJhY29BdHRyaWJ1dGUsCiAgICAgICAgICBhdHRyaWJ1dGVEYXRhCiAgICAgICAgKTsKICAgICAgICBicmVhazsKICAgICAgY2FzZSA5OgogICAgICBjYXNlIDEwOgogICAgICAgIGF0dHJpYnV0ZURhdGEgPSBuZXcgZHJhY28uRHJhY29GbG9hdDMyQXJyYXkoKTsKICAgICAgICB2ZXJ0ZXhBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkodmVydGV4QXJyYXlMZW5ndGgpOwogICAgICAgIGRyYWNvRGVjb2Rlci5HZXRBdHRyaWJ1dGVGbG9hdEZvckFsbFBvaW50cygKICAgICAgICAgIGRyYWNvR2VvbWV0cnksCiAgICAgICAgICBkcmFjb0F0dHJpYnV0ZSwKICAgICAgICAgIGF0dHJpYnV0ZURhdGEKICAgICAgICApOwogICAgICAgIGJyZWFrOwogICAgfQogICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2ZXJ0ZXhBcnJheUxlbmd0aDsgKytpKSB7CiAgICAgIHZlcnRleEFycmF5W2ldID0gYXR0cmlidXRlRGF0YS5HZXRWYWx1ZShpKTsKICAgIH0KICAgIGRyYWNvLmRlc3Ryb3koYXR0cmlidXRlRGF0YSk7CiAgICByZXR1cm4gdmVydGV4QXJyYXk7CiAgfQogIGZ1bmN0aW9uIGRlY29kZUF0dHJpYnV0ZShkcmFjb0dlb21ldHJ5LCBkcmFjb0RlY29kZXIsIGRyYWNvQXR0cmlidXRlKSB7CiAgICBjb25zdCBudW1Qb2ludHMgPSBkcmFjb0dlb21ldHJ5Lm51bV9wb2ludHMoKTsKICAgIGNvbnN0IG51bUNvbXBvbmVudHMgPSBkcmFjb0F0dHJpYnV0ZS5udW1fY29tcG9uZW50cygpOwogICAgbGV0IHF1YW50aXphdGlvbjsKICAgIGxldCB0cmFuc2Zvcm0yID0gbmV3IGRyYWNvLkF0dHJpYnV0ZVF1YW50aXphdGlvblRyYW5zZm9ybSgpOwogICAgaWYgKHRyYW5zZm9ybTIuSW5pdEZyb21BdHRyaWJ1dGUoZHJhY29BdHRyaWJ1dGUpKSB7CiAgICAgIGNvbnN0IG1pblZhbHVlcyA9IG5ldyBBcnJheShudW1Db21wb25lbnRzKTsKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1Db21wb25lbnRzOyArK2kpIHsKICAgICAgICBtaW5WYWx1ZXNbaV0gPSB0cmFuc2Zvcm0yLm1pbl92YWx1ZShpKTsKICAgICAgfQogICAgICBxdWFudGl6YXRpb24gPSB7CiAgICAgICAgcXVhbnRpemF0aW9uQml0czogdHJhbnNmb3JtMi5xdWFudGl6YXRpb25fYml0cygpLAogICAgICAgIG1pblZhbHVlcywKICAgICAgICByYW5nZTogdHJhbnNmb3JtMi5yYW5nZSgpLAogICAgICAgIG9jdEVuY29kZWQ6IGZhbHNlCiAgICAgIH07CiAgICB9CiAgICBkcmFjby5kZXN0cm95KHRyYW5zZm9ybTIpOwogICAgdHJhbnNmb3JtMiA9IG5ldyBkcmFjby5BdHRyaWJ1dGVPY3RhaGVkcm9uVHJhbnNmb3JtKCk7CiAgICBpZiAodHJhbnNmb3JtMi5Jbml0RnJvbUF0dHJpYnV0ZShkcmFjb0F0dHJpYnV0ZSkpIHsKICAgICAgcXVhbnRpemF0aW9uID0gewogICAgICAgIHF1YW50aXphdGlvbkJpdHM6IHRyYW5zZm9ybTIucXVhbnRpemF0aW9uX2JpdHMoKSwKICAgICAgICBvY3RFbmNvZGVkOiB0cnVlCiAgICAgIH07CiAgICB9CiAgICBkcmFjby5kZXN0cm95KHRyYW5zZm9ybTIpOwogICAgY29uc3QgdmVydGV4QXJyYXlMZW5ndGggPSBudW1Qb2ludHMgKiBudW1Db21wb25lbnRzOwogICAgbGV0IHZlcnRleEFycmF5OwogICAgaWYgKGRlZmluZWRfZGVmYXVsdChxdWFudGl6YXRpb24pKSB7CiAgICAgIHZlcnRleEFycmF5ID0gZGVjb2RlUXVhbnRpemVkRHJhY29UeXBlZEFycmF5KAogICAgICAgIGRyYWNvR2VvbWV0cnksCiAgICAgICAgZHJhY29EZWNvZGVyLAogICAgICAgIGRyYWNvQXR0cmlidXRlLAogICAgICAgIHF1YW50aXphdGlvbiwKICAgICAgICB2ZXJ0ZXhBcnJheUxlbmd0aAogICAgICApOwogICAgfSBlbHNlIHsKICAgICAgdmVydGV4QXJyYXkgPSBkZWNvZGVEcmFjb1R5cGVkQXJyYXkoCiAgICAgICAgZHJhY29HZW9tZXRyeSwKICAgICAgICBkcmFjb0RlY29kZXIsCiAgICAgICAgZHJhY29BdHRyaWJ1dGUsCiAgICAgICAgdmVydGV4QXJyYXlMZW5ndGgKICAgICAgKTsKICAgIH0KICAgIGNvbnN0IGNvbXBvbmVudERhdGF0eXBlID0gQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5mcm9tVHlwZWRBcnJheSh2ZXJ0ZXhBcnJheSk7CiAgICByZXR1cm4gewogICAgICBhcnJheTogdmVydGV4QXJyYXksCiAgICAgIGRhdGE6IHsKICAgICAgICBjb21wb25lbnRzUGVyQXR0cmlidXRlOiBudW1Db21wb25lbnRzLAogICAgICAgIGNvbXBvbmVudERhdGF0eXBlLAogICAgICAgIGJ5dGVPZmZzZXQ6IGRyYWNvQXR0cmlidXRlLmJ5dGVfb2Zmc2V0KCksCiAgICAgICAgYnl0ZVN0cmlkZTogQ29tcG9uZW50RGF0YXR5cGVfZGVmYXVsdC5nZXRTaXplSW5CeXRlcyhjb21wb25lbnREYXRhdHlwZSkgKiBudW1Db21wb25lbnRzLAogICAgICAgIG5vcm1hbGl6ZWQ6IGRyYWNvQXR0cmlidXRlLm5vcm1hbGl6ZWQoKSwKICAgICAgICBxdWFudGl6YXRpb24KICAgICAgfQogICAgfTsKICB9CiAgZnVuY3Rpb24gZGVjb2RlUG9pbnRDbG91ZChwYXJhbWV0ZXJzKSB7CiAgICBjb25zdCBkcmFjb0RlY29kZXIgPSBuZXcgZHJhY28uRGVjb2RlcigpOwogICAgaWYgKHBhcmFtZXRlcnMuZGVxdWFudGl6ZUluU2hhZGVyKSB7CiAgICAgIGRyYWNvRGVjb2Rlci5Ta2lwQXR0cmlidXRlVHJhbnNmb3JtKGRyYWNvLlBPU0lUSU9OKTsKICAgICAgZHJhY29EZWNvZGVyLlNraXBBdHRyaWJ1dGVUcmFuc2Zvcm0oZHJhY28uTk9STUFMKTsKICAgIH0KICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBkcmFjby5EZWNvZGVyQnVmZmVyKCk7CiAgICBidWZmZXIuSW5pdChwYXJhbWV0ZXJzLmJ1ZmZlciwgcGFyYW1ldGVycy5idWZmZXIubGVuZ3RoKTsKICAgIGNvbnN0IGdlb21ldHJ5VHlwZSA9IGRyYWNvRGVjb2Rlci5HZXRFbmNvZGVkR2VvbWV0cnlUeXBlKGJ1ZmZlcik7CiAgICBpZiAoZ2VvbWV0cnlUeXBlICE9PSBkcmFjby5QT0lOVF9DTE9VRCkgewogICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yX2RlZmF1bHQoIkRyYWNvIGdlb21ldHJ5IHR5cGUgbXVzdCBiZSBQT0lOVF9DTE9VRC4iKTsKICAgIH0KICAgIGNvbnN0IGRyYWNvUG9pbnRDbG91ZCA9IG5ldyBkcmFjby5Qb2ludENsb3VkKCk7CiAgICBjb25zdCBkZWNvZGluZ1N0YXR1cyA9IGRyYWNvRGVjb2Rlci5EZWNvZGVCdWZmZXJUb1BvaW50Q2xvdWQoCiAgICAgIGJ1ZmZlciwKICAgICAgZHJhY29Qb2ludENsb3VkCiAgICApOwogICAgaWYgKCFkZWNvZGluZ1N0YXR1cy5vaygpIHx8IGRyYWNvUG9pbnRDbG91ZC5wdHIgPT09IDApIHsKICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcl9kZWZhdWx0KAogICAgICAgIGBFcnJvciBkZWNvZGluZyBkcmFjbyBwb2ludCBjbG91ZDogJHtkZWNvZGluZ1N0YXR1cy5lcnJvcl9tc2coKX1gCiAgICAgICk7CiAgICB9CiAgICBkcmFjby5kZXN0cm95KGJ1ZmZlcik7CiAgICBjb25zdCByZXN1bHQgPSB7fTsKICAgIGNvbnN0IHByb3BlcnRpZXMgPSBwYXJhbWV0ZXJzLnByb3BlcnRpZXM7CiAgICBmb3IgKGNvbnN0IHByb3BlcnR5TmFtZSBpbiBwcm9wZXJ0aWVzKSB7CiAgICAgIGlmIChwcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KHByb3BlcnR5TmFtZSkpIHsKICAgICAgICBsZXQgZHJhY29BdHRyaWJ1dGU7CiAgICAgICAgaWYgKHByb3BlcnR5TmFtZSA9PT0gIlBPU0lUSU9OIiB8fCBwcm9wZXJ0eU5hbWUgPT09ICJOT1JNQUwiKSB7CiAgICAgICAgICBjb25zdCBkcmFjb0F0dHJpYnV0ZUlkID0gZHJhY29EZWNvZGVyLkdldEF0dHJpYnV0ZUlkKAogICAgICAgICAgICBkcmFjb1BvaW50Q2xvdWQsCiAgICAgICAgICAgIGRyYWNvW3Byb3BlcnR5TmFtZV0KICAgICAgICAgICk7CiAgICAgICAgICBkcmFjb0F0dHJpYnV0ZSA9IGRyYWNvRGVjb2Rlci5HZXRBdHRyaWJ1dGUoCiAgICAgICAgICAgIGRyYWNvUG9pbnRDbG91ZCwKICAgICAgICAgICAgZHJhY29BdHRyaWJ1dGVJZAogICAgICAgICAgKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY29uc3QgYXR0cmlidXRlSWQgPSBwcm9wZXJ0aWVzW3Byb3BlcnR5TmFtZV07CiAgICAgICAgICBkcmFjb0F0dHJpYnV0ZSA9IGRyYWNvRGVjb2Rlci5HZXRBdHRyaWJ1dGVCeVVuaXF1ZUlkKAogICAgICAgICAgICBkcmFjb1BvaW50Q2xvdWQsCiAgICAgICAgICAgIGF0dHJpYnV0ZUlkCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICByZXN1bHRbcHJvcGVydHlOYW1lXSA9IGRlY29kZUF0dHJpYnV0ZSgKICAgICAgICAgIGRyYWNvUG9pbnRDbG91ZCwKICAgICAgICAgIGRyYWNvRGVjb2RlciwKICAgICAgICAgIGRyYWNvQXR0cmlidXRlCiAgICAgICAgKTsKICAgICAgfQogICAgfQogICAgZHJhY28uZGVzdHJveShkcmFjb1BvaW50Q2xvdWQpOwogICAgZHJhY28uZGVzdHJveShkcmFjb0RlY29kZXIpOwogICAgcmV0dXJuIHJlc3VsdDsKICB9CiAgZnVuY3Rpb24gZGVjb2RlUHJpbWl0aXZlKHBhcmFtZXRlcnMpIHsKICAgIGNvbnN0IGRyYWNvRGVjb2RlciA9IG5ldyBkcmFjby5EZWNvZGVyKCk7CiAgICBjb25zdCBhdHRyaWJ1dGVzVG9Ta2lwID0gWyJQT1NJVElPTiIsICJOT1JNQUwiLCAiQ09MT1IiLCAiVEVYX0NPT1JEIl07CiAgICBpZiAocGFyYW1ldGVycy5kZXF1YW50aXplSW5TaGFkZXIpIHsKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdHRyaWJ1dGVzVG9Ta2lwLmxlbmd0aDsgKytpKSB7CiAgICAgICAgZHJhY29EZWNvZGVyLlNraXBBdHRyaWJ1dGVUcmFuc2Zvcm0oZHJhY29bYXR0cmlidXRlc1RvU2tpcFtpXV0pOwogICAgICB9CiAgICB9CiAgICBjb25zdCBidWZmZXJWaWV3ID0gcGFyYW1ldGVycy5idWZmZXJWaWV3OwogICAgY29uc3QgYnVmZmVyID0gbmV3IGRyYWNvLkRlY29kZXJCdWZmZXIoKTsKICAgIGJ1ZmZlci5Jbml0KHBhcmFtZXRlcnMuYXJyYXksIGJ1ZmZlclZpZXcuYnl0ZUxlbmd0aCk7CiAgICBjb25zdCBnZW9tZXRyeVR5cGUgPSBkcmFjb0RlY29kZXIuR2V0RW5jb2RlZEdlb21ldHJ5VHlwZShidWZmZXIpOwogICAgaWYgKGdlb21ldHJ5VHlwZSAhPT0gZHJhY28uVFJJQU5HVUxBUl9NRVNIKSB7CiAgICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3JfZGVmYXVsdCgiVW5zdXBwb3J0ZWQgZHJhY28gbWVzaCBnZW9tZXRyeSB0eXBlLiIpOwogICAgfQogICAgY29uc3QgZHJhY29HZW9tZXRyeSA9IG5ldyBkcmFjby5NZXNoKCk7CiAgICBjb25zdCBkZWNvZGluZ1N0YXR1cyA9IGRyYWNvRGVjb2Rlci5EZWNvZGVCdWZmZXJUb01lc2goYnVmZmVyLCBkcmFjb0dlb21ldHJ5KTsKICAgIGlmICghZGVjb2RpbmdTdGF0dXMub2soKSB8fCBkcmFjb0dlb21ldHJ5LnB0ciA9PT0gMCkgewogICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yX2RlZmF1bHQoCiAgICAgICAgYEVycm9yIGRlY29kaW5nIGRyYWNvIG1lc2ggZ2VvbWV0cnk6ICR7ZGVjb2RpbmdTdGF0dXMuZXJyb3JfbXNnKCl9YAogICAgICApOwogICAgfQogICAgZHJhY28uZGVzdHJveShidWZmZXIpOwogICAgY29uc3QgYXR0cmlidXRlRGF0YSA9IHt9OwogICAgY29uc3QgY29tcHJlc3NlZEF0dHJpYnV0ZXMgPSBwYXJhbWV0ZXJzLmNvbXByZXNzZWRBdHRyaWJ1dGVzOwogICAgZm9yIChjb25zdCBhdHRyaWJ1dGVOYW1lIGluIGNvbXByZXNzZWRBdHRyaWJ1dGVzKSB7CiAgICAgIGlmIChjb21wcmVzc2VkQXR0cmlidXRlcy5oYXNPd25Qcm9wZXJ0eShhdHRyaWJ1dGVOYW1lKSkgewogICAgICAgIGNvbnN0IGNvbXByZXNzZWRBdHRyaWJ1dGUgPSBjb21wcmVzc2VkQXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXTsKICAgICAgICBjb25zdCBkcmFjb0F0dHJpYnV0ZSA9IGRyYWNvRGVjb2Rlci5HZXRBdHRyaWJ1dGVCeVVuaXF1ZUlkKAogICAgICAgICAgZHJhY29HZW9tZXRyeSwKICAgICAgICAgIGNvbXByZXNzZWRBdHRyaWJ1dGUKICAgICAgICApOwogICAgICAgIGF0dHJpYnV0ZURhdGFbYXR0cmlidXRlTmFtZV0gPSBkZWNvZGVBdHRyaWJ1dGUoCiAgICAgICAgICBkcmFjb0dlb21ldHJ5LAogICAgICAgICAgZHJhY29EZWNvZGVyLAogICAgICAgICAgZHJhY29BdHRyaWJ1dGUKICAgICAgICApOwogICAgICB9CiAgICB9CiAgICBjb25zdCByZXN1bHQgPSB7CiAgICAgIGluZGV4QXJyYXk6IGRlY29kZUluZGV4QXJyYXkoZHJhY29HZW9tZXRyeSwgZHJhY29EZWNvZGVyKSwKICAgICAgYXR0cmlidXRlRGF0YQogICAgfTsKICAgIGRyYWNvLmRlc3Ryb3koZHJhY29HZW9tZXRyeSk7CiAgICBkcmFjby5kZXN0cm95KGRyYWNvRGVjb2Rlcik7CiAgICByZXR1cm4gcmVzdWx0OwogIH0KICBhc3luYyBmdW5jdGlvbiBkZWNvZGUocGFyYW1ldGVycywgdHJhbnNmZXJhYmxlT2JqZWN0cykgewogICAgaWYgKGRlZmluZWRfZGVmYXVsdChwYXJhbWV0ZXJzLmJ1ZmZlclZpZXcpKSB7CiAgICAgIHJldHVybiBkZWNvZGVQcmltaXRpdmUocGFyYW1ldGVycyk7CiAgICB9CiAgICByZXR1cm4gZGVjb2RlUG9pbnRDbG91ZChwYXJhbWV0ZXJzKTsKICB9CiAgYXN5bmMgZnVuY3Rpb24gaW5pdFdvcmtlcihwYXJhbWV0ZXJzLCB0cmFuc2ZlcmFibGVPYmplY3RzKSB7CiAgICBjb25zdCB3YXNtQ29uZmlnID0gcGFyYW1ldGVycy53ZWJBc3NlbWJseUNvbmZpZzsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQod2FzbUNvbmZpZykgJiYgZGVmaW5lZF9kZWZhdWx0KHdhc21Db25maWcud2FzbUJpbmFyeUZpbGUpKSB7CiAgICAgIGRyYWNvID0gYXdhaXQgKDAsIGltcG9ydF9kcmFjb19kZWNvZGVyX25vZGVqcy5kZWZhdWx0KSh3YXNtQ29uZmlnKTsKICAgIH0gZWxzZSB7CiAgICAgIGRyYWNvID0gYXdhaXQgKDAsIGltcG9ydF9kcmFjb19kZWNvZGVyX25vZGVqcy5kZWZhdWx0KSgpOwogICAgfQogICAgcmV0dXJuIHRydWU7CiAgfQogIGFzeW5jIGZ1bmN0aW9uIGRlY29kZURyYWNvKHBhcmFtZXRlcnMsIHRyYW5zZmVyYWJsZU9iamVjdHMpIHsKICAgIGNvbnN0IHdhc21Db25maWcgPSBwYXJhbWV0ZXJzLndlYkFzc2VtYmx5Q29uZmlnOwogICAgaWYgKGRlZmluZWRfZGVmYXVsdCh3YXNtQ29uZmlnKSkgewogICAgICByZXR1cm4gaW5pdFdvcmtlcihwYXJhbWV0ZXJzLCB0cmFuc2ZlcmFibGVPYmplY3RzKTsKICAgIH0KICAgIHJldHVybiBkZWNvZGUocGFyYW1ldGVycywgdHJhbnNmZXJhYmxlT2JqZWN0cyk7CiAgfQogIHZhciBpbXBvcnRfZHJhY29fZGVjb2Rlcl9ub2RlanMsIGRyYWNvLCBkZWNvZGVEcmFjb19kZWZhdWx0OwogIHZhciBpbml0X2RlY29kZURyYWNvID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9kZWNvZGVEcmFjby5qcyIoKSB7CiAgICAgIGluaXRfQ29tcG9uZW50RGF0YXR5cGUoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfSW5kZXhEYXRhdHlwZSgpOwogICAgICBpbml0X1J1bnRpbWVFcnJvcigpOwogICAgICBpbml0X2NyZWF0ZVRhc2tQcm9jZXNzb3JXb3JrZXIoKTsKICAgICAgaW1wb3J0X2RyYWNvX2RlY29kZXJfbm9kZWpzID0gX190b0VTTShyZXF1aXJlX2RyYWNvX2RlY29kZXJfbm9kZWpzKCksIDEpOwogICAgICBkZWNvZGVEcmFjb19kZWZhdWx0ID0gY3JlYXRlVGFza1Byb2Nlc3Nvcldvcmtlcl9kZWZhdWx0KGRlY29kZURyYWNvKTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL2RlY29kZUdvb2dsZUVhcnRoRW50ZXJwcmlzZURhdGEuanMKICBmdW5jdGlvbiBkZWNvZGVHb29nbGVFYXJ0aEVudGVycHJpc2VEYXRhKGtleSwgZGF0YSkgewogICAgaWYgKGRlY29kZUdvb2dsZUVhcnRoRW50ZXJwcmlzZURhdGEucGFzc1Rocm91Z2hEYXRhRm9yVGVzdGluZykgewogICAgICByZXR1cm4gZGF0YTsKICAgIH0KICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgia2V5Iiwga2V5KTsKICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm9iamVjdCgiZGF0YSIsIGRhdGEpOwogICAgY29uc3Qga2V5TGVuZ3RoID0ga2V5LmJ5dGVMZW5ndGg7CiAgICBpZiAoa2V5TGVuZ3RoID09PSAwIHx8IGtleUxlbmd0aCAlIDQgIT09IDApIHsKICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcl9kZWZhdWx0KAogICAgICAgICJUaGUgbGVuZ3RoIG9mIGtleSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwIGFuZCBhIG11bHRpcGxlIG9mIDQuIgogICAgICApOwogICAgfQogICAgY29uc3QgZGF0YVZpZXcgPSBuZXcgRGF0YVZpZXcoZGF0YSk7CiAgICBjb25zdCBtYWdpYyA9IGRhdGFWaWV3LmdldFVpbnQzMigwLCB0cnVlKTsKICAgIGlmIChtYWdpYyA9PT0gY29tcHJlc3NlZE1hZ2ljIHx8IG1hZ2ljID09PSBjb21wcmVzc2VkTWFnaWNTd2FwKSB7CiAgICAgIHJldHVybiBkYXRhOwogICAgfQogICAgY29uc3Qga2V5VmlldyA9IG5ldyBEYXRhVmlldyhrZXkpOwogICAgbGV0IGRwID0gMDsKICAgIGNvbnN0IGRwZW5kID0gZGF0YS5ieXRlTGVuZ3RoOwogICAgY29uc3QgZHBlbmQ2NCA9IGRwZW5kIC0gZHBlbmQgJSA4OwogICAgY29uc3Qga3BlbmQgPSBrZXlMZW5ndGg7CiAgICBsZXQga3A7CiAgICBsZXQgb2ZmID0gODsKICAgIHdoaWxlIChkcCA8IGRwZW5kNjQpIHsKICAgICAgb2ZmID0gKG9mZiArIDgpICUgMjQ7CiAgICAgIGtwID0gb2ZmOwogICAgICB3aGlsZSAoZHAgPCBkcGVuZDY0ICYmIGtwIDwga3BlbmQpIHsKICAgICAgICBkYXRhVmlldy5zZXRVaW50MzIoCiAgICAgICAgICBkcCwKICAgICAgICAgIGRhdGFWaWV3LmdldFVpbnQzMihkcCwgdHJ1ZSkgXiBrZXlWaWV3LmdldFVpbnQzMihrcCwgdHJ1ZSksCiAgICAgICAgICB0cnVlCiAgICAgICAgKTsKICAgICAgICBkYXRhVmlldy5zZXRVaW50MzIoCiAgICAgICAgICBkcCArIDQsCiAgICAgICAgICBkYXRhVmlldy5nZXRVaW50MzIoZHAgKyA0LCB0cnVlKSBeIGtleVZpZXcuZ2V0VWludDMyKGtwICsgNCwgdHJ1ZSksCiAgICAgICAgICB0cnVlCiAgICAgICAgKTsKICAgICAgICBkcCArPSA4OwogICAgICAgIGtwICs9IDI0OwogICAgICB9CiAgICB9CiAgICBpZiAoZHAgPCBkcGVuZCkgewogICAgICBpZiAoa3AgPj0ga3BlbmQpIHsKICAgICAgICBvZmYgPSAob2ZmICsgOCkgJSAyNDsKICAgICAgICBrcCA9IG9mZjsKICAgICAgfQogICAgICB3aGlsZSAoZHAgPCBkcGVuZCkgewogICAgICAgIGRhdGFWaWV3LnNldFVpbnQ4KGRwLCBkYXRhVmlldy5nZXRVaW50OChkcCkgXiBrZXlWaWV3LmdldFVpbnQ4KGtwKSk7CiAgICAgICAgZHArKzsKICAgICAgICBrcCsrOwogICAgICB9CiAgICB9CiAgfQogIHZhciBjb21wcmVzc2VkTWFnaWMsIGNvbXByZXNzZWRNYWdpY1N3YXAsIGRlY29kZUdvb2dsZUVhcnRoRW50ZXJwcmlzZURhdGFfZGVmYXVsdDsKICB2YXIgaW5pdF9kZWNvZGVHb29nbGVFYXJ0aEVudGVycHJpc2VEYXRhID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9kZWNvZGVHb29nbGVFYXJ0aEVudGVycHJpc2VEYXRhLmpzIigpIHsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X1J1bnRpbWVFcnJvcigpOwogICAgICBjb21wcmVzc2VkTWFnaWMgPSAxOTUzMDI5ODA1OwogICAgICBjb21wcmVzc2VkTWFnaWNTd2FwID0gMjkxNzAzNDEwMDsKICAgICAgZGVjb2RlR29vZ2xlRWFydGhFbnRlcnByaXNlRGF0YS5wYXNzVGhyb3VnaERhdGFGb3JUZXN0aW5nID0gZmFsc2U7CiAgICAgIGRlY29kZUdvb2dsZUVhcnRoRW50ZXJwcmlzZURhdGFfZGVmYXVsdCA9IGRlY29kZUdvb2dsZUVhcnRoRW50ZXJwcmlzZURhdGE7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9pc0JpdFNldC5qcwogIGZ1bmN0aW9uIGlzQml0U2V0KGJpdHMsIG1hc2spIHsKICAgIHJldHVybiAoYml0cyAmIG1hc2spICE9PSAwOwogIH0KICB2YXIgaXNCaXRTZXRfZGVmYXVsdDsKICB2YXIgaW5pdF9pc0JpdFNldCA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvaXNCaXRTZXQuanMiKCkgewogICAgICBpc0JpdFNldF9kZWZhdWx0ID0gaXNCaXRTZXQ7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9Hb29nbGVFYXJ0aEVudGVycHJpc2VUaWxlSW5mb3JtYXRpb24uanMKICBmdW5jdGlvbiBHb29nbGVFYXJ0aEVudGVycHJpc2VUaWxlSW5mb3JtYXRpb24oYml0cywgY25vZGVWZXJzaW9uLCBpbWFnZXJ5VmVyc2lvbiwgdGVycmFpblZlcnNpb24sIGltYWdlcnlQcm92aWRlciwgdGVycmFpblByb3ZpZGVyKSB7CiAgICB0aGlzLl9iaXRzID0gYml0czsKICAgIHRoaXMuY25vZGVWZXJzaW9uID0gY25vZGVWZXJzaW9uOwogICAgdGhpcy5pbWFnZXJ5VmVyc2lvbiA9IGltYWdlcnlWZXJzaW9uOwogICAgdGhpcy50ZXJyYWluVmVyc2lvbiA9IHRlcnJhaW5WZXJzaW9uOwogICAgdGhpcy5pbWFnZXJ5UHJvdmlkZXIgPSBpbWFnZXJ5UHJvdmlkZXI7CiAgICB0aGlzLnRlcnJhaW5Qcm92aWRlciA9IHRlcnJhaW5Qcm92aWRlcjsKICAgIHRoaXMuYW5jZXN0b3JIYXNUZXJyYWluID0gZmFsc2U7CiAgICB0aGlzLnRlcnJhaW5TdGF0ZSA9IHZvaWQgMDsKICB9CiAgdmFyIGNoaWxkcmVuQml0bWFza3MsIGFueUNoaWxkQml0bWFzaywgY2FjaGVGbGFnQml0bWFzaywgaW1hZ2VCaXRtYXNrLCB0ZXJyYWluQml0bWFzaywgR29vZ2xlRWFydGhFbnRlcnByaXNlVGlsZUluZm9ybWF0aW9uX2RlZmF1bHQ7CiAgdmFyIGluaXRfR29vZ2xlRWFydGhFbnRlcnByaXNlVGlsZUluZm9ybWF0aW9uID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9Hb29nbGVFYXJ0aEVudGVycHJpc2VUaWxlSW5mb3JtYXRpb24uanMiKCkgewogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9pc0JpdFNldCgpOwogICAgICBjaGlsZHJlbkJpdG1hc2tzID0gWzEsIDIsIDQsIDhdOwogICAgICBhbnlDaGlsZEJpdG1hc2sgPSAxNTsKICAgICAgY2FjaGVGbGFnQml0bWFzayA9IDE2OwogICAgICBpbWFnZUJpdG1hc2sgPSA2NDsKICAgICAgdGVycmFpbkJpdG1hc2sgPSAxMjg7CiAgICAgIEdvb2dsZUVhcnRoRW50ZXJwcmlzZVRpbGVJbmZvcm1hdGlvbi5jbG9uZSA9IGZ1bmN0aW9uKGluZm8sIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBHb29nbGVFYXJ0aEVudGVycHJpc2VUaWxlSW5mb3JtYXRpb24oCiAgICAgICAgICAgIGluZm8uX2JpdHMsCiAgICAgICAgICAgIGluZm8uY25vZGVWZXJzaW9uLAogICAgICAgICAgICBpbmZvLmltYWdlcnlWZXJzaW9uLAogICAgICAgICAgICBpbmZvLnRlcnJhaW5WZXJzaW9uLAogICAgICAgICAgICBpbmZvLmltYWdlcnlQcm92aWRlciwKICAgICAgICAgICAgaW5mby50ZXJyYWluUHJvdmlkZXIKICAgICAgICAgICk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlc3VsdC5fYml0cyA9IGluZm8uX2JpdHM7CiAgICAgICAgICByZXN1bHQuY25vZGVWZXJzaW9uID0gaW5mby5jbm9kZVZlcnNpb247CiAgICAgICAgICByZXN1bHQuaW1hZ2VyeVZlcnNpb24gPSBpbmZvLmltYWdlcnlWZXJzaW9uOwogICAgICAgICAgcmVzdWx0LnRlcnJhaW5WZXJzaW9uID0gaW5mby50ZXJyYWluVmVyc2lvbjsKICAgICAgICAgIHJlc3VsdC5pbWFnZXJ5UHJvdmlkZXIgPSBpbmZvLmltYWdlcnlQcm92aWRlcjsKICAgICAgICAgIHJlc3VsdC50ZXJyYWluUHJvdmlkZXIgPSBpbmZvLnRlcnJhaW5Qcm92aWRlcjsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LmFuY2VzdG9ySGFzVGVycmFpbiA9IGluZm8uYW5jZXN0b3JIYXNUZXJyYWluOwogICAgICAgIHJlc3VsdC50ZXJyYWluU3RhdGUgPSBpbmZvLnRlcnJhaW5TdGF0ZTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBHb29nbGVFYXJ0aEVudGVycHJpc2VUaWxlSW5mb3JtYXRpb24ucHJvdG90eXBlLnNldFBhcmVudCA9IGZ1bmN0aW9uKHBhcmVudCkgewogICAgICAgIHRoaXMuYW5jZXN0b3JIYXNUZXJyYWluID0gcGFyZW50LmFuY2VzdG9ySGFzVGVycmFpbiB8fCB0aGlzLmhhc1RlcnJhaW4oKTsKICAgICAgfTsKICAgICAgR29vZ2xlRWFydGhFbnRlcnByaXNlVGlsZUluZm9ybWF0aW9uLnByb3RvdHlwZS5oYXNTdWJ0cmVlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIGlzQml0U2V0X2RlZmF1bHQodGhpcy5fYml0cywgY2FjaGVGbGFnQml0bWFzayk7CiAgICAgIH07CiAgICAgIEdvb2dsZUVhcnRoRW50ZXJwcmlzZVRpbGVJbmZvcm1hdGlvbi5wcm90b3R5cGUuaGFzSW1hZ2VyeSA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBpc0JpdFNldF9kZWZhdWx0KHRoaXMuX2JpdHMsIGltYWdlQml0bWFzayk7CiAgICAgIH07CiAgICAgIEdvb2dsZUVhcnRoRW50ZXJwcmlzZVRpbGVJbmZvcm1hdGlvbi5wcm90b3R5cGUuaGFzVGVycmFpbiA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBpc0JpdFNldF9kZWZhdWx0KHRoaXMuX2JpdHMsIHRlcnJhaW5CaXRtYXNrKTsKICAgICAgfTsKICAgICAgR29vZ2xlRWFydGhFbnRlcnByaXNlVGlsZUluZm9ybWF0aW9uLnByb3RvdHlwZS5oYXNDaGlsZHJlbiA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBpc0JpdFNldF9kZWZhdWx0KHRoaXMuX2JpdHMsIGFueUNoaWxkQml0bWFzayk7CiAgICAgIH07CiAgICAgIEdvb2dsZUVhcnRoRW50ZXJwcmlzZVRpbGVJbmZvcm1hdGlvbi5wcm90b3R5cGUuaGFzQ2hpbGQgPSBmdW5jdGlvbihpbmRleCkgewogICAgICAgIHJldHVybiBpc0JpdFNldF9kZWZhdWx0KHRoaXMuX2JpdHMsIGNoaWxkcmVuQml0bWFza3NbaW5kZXhdKTsKICAgICAgfTsKICAgICAgR29vZ2xlRWFydGhFbnRlcnByaXNlVGlsZUluZm9ybWF0aW9uLnByb3RvdHlwZS5nZXRDaGlsZEJpdG1hc2sgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gdGhpcy5fYml0cyAmIGFueUNoaWxkQml0bWFzazsKICAgICAgfTsKICAgICAgR29vZ2xlRWFydGhFbnRlcnByaXNlVGlsZUluZm9ybWF0aW9uX2RlZmF1bHQgPSBHb29nbGVFYXJ0aEVudGVycHJpc2VUaWxlSW5mb3JtYXRpb247CiAgICB9CiAgfSk7CgogIC8vIG5vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL2FkbGVyMzIuanMKICB2YXIgcmVxdWlyZV9hZGxlcjMyID0gX19jb21tb25KUyh7CiAgICAibm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvYWRsZXIzMi5qcyIoZXhwb3J0czIsIG1vZHVsZSkgewogICAgICAidXNlIHN0cmljdCI7CiAgICAgIHZhciBhZGxlcjMyID0gKGFkbGVyLCBidWYsIGxlbiwgcG9zKSA9PiB7CiAgICAgICAgbGV0IHMxID0gYWRsZXIgJiA2NTUzNSB8IDAsIHMyID0gYWRsZXIgPj4+IDE2ICYgNjU1MzUgfCAwLCBuID0gMDsKICAgICAgICB3aGlsZSAobGVuICE9PSAwKSB7CiAgICAgICAgICBuID0gbGVuID4gMmUzID8gMmUzIDogbGVuOwogICAgICAgICAgbGVuIC09IG47CiAgICAgICAgICBkbyB7CiAgICAgICAgICAgIHMxID0gczEgKyBidWZbcG9zKytdIHwgMDsKICAgICAgICAgICAgczIgPSBzMiArIHMxIHwgMDsKICAgICAgICAgIH0gd2hpbGUgKC0tbik7CiAgICAgICAgICBzMSAlPSA2NTUyMTsKICAgICAgICAgIHMyICU9IDY1NTIxOwogICAgICAgIH0KICAgICAgICByZXR1cm4gczEgfCBzMiA8PCAxNiB8IDA7CiAgICAgIH07CiAgICAgIG1vZHVsZS5leHBvcnRzID0gYWRsZXIzMjsKICAgIH0KICB9KTsKCiAgLy8gbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvY3JjMzIuanMKICB2YXIgcmVxdWlyZV9jcmMzMiA9IF9fY29tbW9uSlMoewogICAgIm5vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL2NyYzMyLmpzIihleHBvcnRzMiwgbW9kdWxlKSB7CiAgICAgICJ1c2Ugc3RyaWN0IjsKICAgICAgdmFyIG1ha2VUYWJsZSA9ICgpID0+IHsKICAgICAgICBsZXQgYywgdGFibGUgPSBbXTsKICAgICAgICBmb3IgKHZhciBuID0gMDsgbiA8IDI1NjsgbisrKSB7CiAgICAgICAgICBjID0gbjsKICAgICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgODsgaysrKSB7CiAgICAgICAgICAgIGMgPSBjICYgMSA/IDM5ODgyOTIzODQgXiBjID4+PiAxIDogYyA+Pj4gMTsKICAgICAgICAgIH0KICAgICAgICAgIHRhYmxlW25dID0gYzsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRhYmxlOwogICAgICB9OwogICAgICB2YXIgY3JjVGFibGUgPSBuZXcgVWludDMyQXJyYXkobWFrZVRhYmxlKCkpOwogICAgICB2YXIgY3JjMzIgPSAoY3JjLCBidWYsIGxlbiwgcG9zKSA9PiB7CiAgICAgICAgY29uc3QgdCA9IGNyY1RhYmxlOwogICAgICAgIGNvbnN0IGVuZCA9IHBvcyArIGxlbjsKICAgICAgICBjcmMgXj0gLTE7CiAgICAgICAgZm9yIChsZXQgaSA9IHBvczsgaSA8IGVuZDsgaSsrKSB7CiAgICAgICAgICBjcmMgPSBjcmMgPj4+IDggXiB0WyhjcmMgXiBidWZbaV0pICYgMjU1XTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGNyYyBeIC0xOwogICAgICB9OwogICAgICBtb2R1bGUuZXhwb3J0cyA9IGNyYzMyOwogICAgfQogIH0pOwoKICAvLyBub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9pbmZmYXN0LmpzCiAgdmFyIHJlcXVpcmVfaW5mZmFzdCA9IF9fY29tbW9uSlMoewogICAgIm5vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL2luZmZhc3QuanMiKGV4cG9ydHMyLCBtb2R1bGUpIHsKICAgICAgInVzZSBzdHJpY3QiOwogICAgICB2YXIgQkFEID0gMTYyMDk7CiAgICAgIHZhciBUWVBFID0gMTYxOTE7CiAgICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5mbGF0ZV9mYXN0KHN0cm0sIHN0YXJ0KSB7CiAgICAgICAgbGV0IF9pbjsKICAgICAgICBsZXQgbGFzdDsKICAgICAgICBsZXQgX291dDsKICAgICAgICBsZXQgYmVnOwogICAgICAgIGxldCBlbmQ7CiAgICAgICAgbGV0IGRtYXg7CiAgICAgICAgbGV0IHdzaXplOwogICAgICAgIGxldCB3aGF2ZTsKICAgICAgICBsZXQgd25leHQ7CiAgICAgICAgbGV0IHNfd2luZG93OwogICAgICAgIGxldCBob2xkOwogICAgICAgIGxldCBiaXRzOwogICAgICAgIGxldCBsY29kZTsKICAgICAgICBsZXQgZGNvZGU7CiAgICAgICAgbGV0IGxtYXNrOwogICAgICAgIGxldCBkbWFzazsKICAgICAgICBsZXQgaGVyZTsKICAgICAgICBsZXQgb3A7CiAgICAgICAgbGV0IGxlbjsKICAgICAgICBsZXQgZGlzdDsKICAgICAgICBsZXQgZnJvbTsKICAgICAgICBsZXQgZnJvbV9zb3VyY2U7CiAgICAgICAgbGV0IGlucHV0LCBvdXRwdXQ7CiAgICAgICAgY29uc3Qgc3RhdGUgPSBzdHJtLnN0YXRlOwogICAgICAgIF9pbiA9IHN0cm0ubmV4dF9pbjsKICAgICAgICBpbnB1dCA9IHN0cm0uaW5wdXQ7CiAgICAgICAgbGFzdCA9IF9pbiArIChzdHJtLmF2YWlsX2luIC0gNSk7CiAgICAgICAgX291dCA9IHN0cm0ubmV4dF9vdXQ7CiAgICAgICAgb3V0cHV0ID0gc3RybS5vdXRwdXQ7CiAgICAgICAgYmVnID0gX291dCAtIChzdGFydCAtIHN0cm0uYXZhaWxfb3V0KTsKICAgICAgICBlbmQgPSBfb3V0ICsgKHN0cm0uYXZhaWxfb3V0IC0gMjU3KTsKICAgICAgICBkbWF4ID0gc3RhdGUuZG1heDsKICAgICAgICB3c2l6ZSA9IHN0YXRlLndzaXplOwogICAgICAgIHdoYXZlID0gc3RhdGUud2hhdmU7CiAgICAgICAgd25leHQgPSBzdGF0ZS53bmV4dDsKICAgICAgICBzX3dpbmRvdyA9IHN0YXRlLndpbmRvdzsKICAgICAgICBob2xkID0gc3RhdGUuaG9sZDsKICAgICAgICBiaXRzID0gc3RhdGUuYml0czsKICAgICAgICBsY29kZSA9IHN0YXRlLmxlbmNvZGU7CiAgICAgICAgZGNvZGUgPSBzdGF0ZS5kaXN0Y29kZTsKICAgICAgICBsbWFzayA9ICgxIDw8IHN0YXRlLmxlbmJpdHMpIC0gMTsKICAgICAgICBkbWFzayA9ICgxIDw8IHN0YXRlLmRpc3RiaXRzKSAtIDE7CiAgICAgICAgdG9wOgogICAgICAgICAgZG8gewogICAgICAgICAgICBpZiAoYml0cyA8IDE1KSB7CiAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0czsKICAgICAgICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0czsKICAgICAgICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaGVyZSA9IGxjb2RlW2hvbGQgJiBsbWFza107CiAgICAgICAgICAgIGRvbGVuOgogICAgICAgICAgICAgIGZvciAoOyA7ICkgewogICAgICAgICAgICAgICAgb3AgPSBoZXJlID4+PiAyNDsKICAgICAgICAgICAgICAgIGhvbGQgPj4+PSBvcDsKICAgICAgICAgICAgICAgIGJpdHMgLT0gb3A7CiAgICAgICAgICAgICAgICBvcCA9IGhlcmUgPj4+IDE2ICYgMjU1OwogICAgICAgICAgICAgICAgaWYgKG9wID09PSAwKSB7CiAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gaGVyZSAmIDY1NTM1OwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvcCAmIDE2KSB7CiAgICAgICAgICAgICAgICAgIGxlbiA9IGhlcmUgJiA2NTUzNTsKICAgICAgICAgICAgICAgICAgb3AgJj0gMTU7CiAgICAgICAgICAgICAgICAgIGlmIChvcCkgewogICAgICAgICAgICAgICAgICAgIGlmIChiaXRzIDwgb3ApIHsKICAgICAgICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbX2luKytdIDw8IGJpdHM7CiAgICAgICAgICAgICAgICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGxlbiArPSBob2xkICYgKDEgPDwgb3ApIC0gMTsKICAgICAgICAgICAgICAgICAgICBob2xkID4+Pj0gb3A7CiAgICAgICAgICAgICAgICAgICAgYml0cyAtPSBvcDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoYml0cyA8IDE1KSB7CiAgICAgICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0czsKICAgICAgICAgICAgICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0czsKICAgICAgICAgICAgICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaGVyZSA9IGRjb2RlW2hvbGQgJiBkbWFza107CiAgICAgICAgICAgICAgICAgIGRvZGlzdDoKICAgICAgICAgICAgICAgICAgICBmb3IgKDsgOyApIHsKICAgICAgICAgICAgICAgICAgICAgIG9wID0gaGVyZSA+Pj4gMjQ7CiAgICAgICAgICAgICAgICAgICAgICBob2xkID4+Pj0gb3A7CiAgICAgICAgICAgICAgICAgICAgICBiaXRzIC09IG9wOwogICAgICAgICAgICAgICAgICAgICAgb3AgPSBoZXJlID4+PiAxNiAmIDI1NTsKICAgICAgICAgICAgICAgICAgICAgIGlmIChvcCAmIDE2KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3QgPSBoZXJlICYgNjU1MzU7CiAgICAgICAgICAgICAgICAgICAgICAgIG9wICY9IDE1OwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoYml0cyA8IG9wKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0czsKICAgICAgICAgICAgICAgICAgICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJpdHMgPCBvcCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0czsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJpdHMgKz0gODsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZGlzdCArPSBob2xkICYgKDEgPDwgb3ApIC0gMTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpc3QgPiBkbWF4KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RybS5tc2cgPSAiaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2siOwogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgdG9wOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGhvbGQgPj4+PSBvcDsKICAgICAgICAgICAgICAgICAgICAgICAgYml0cyAtPSBvcDsKICAgICAgICAgICAgICAgICAgICAgICAgb3AgPSBfb3V0IC0gYmVnOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlzdCA+IG9wKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgb3AgPSBkaXN0IC0gb3A7CiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wID4gd2hhdmUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5zYW5lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm0ubXNnID0gImludmFsaWQgZGlzdGFuY2UgdG9vIGZhciBiYWNrIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgdG9wOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tID0gMDsKICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tX3NvdXJjZSA9IHNfd2luZG93OwogICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3bmV4dCA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSArPSB3c2l6ZSAtIG9wOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wIDwgbGVuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlbiAtPSBvcDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gc193aW5kb3dbZnJvbSsrXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1vcCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gPSBfb3V0IC0gZGlzdDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbV9zb3VyY2UgPSBvdXRwdXQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh3bmV4dCA8IG9wKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tICs9IHdzaXplICsgd25leHQgLSBvcDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wIC09IHduZXh0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wIDwgbGVuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlbiAtPSBvcDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gc193aW5kb3dbZnJvbSsrXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1vcCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gPSAwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAod25leHQgPCBsZW4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcCA9IHduZXh0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlbiAtPSBvcDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IHNfd2luZG93W2Zyb20rK107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1vcCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSA9IF9vdXQgLSBkaXN0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb21fc291cmNlID0gb3V0cHV0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gKz0gd25leHQgLSBvcDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcCA8IGxlbikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZW4gLT0gb3A7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IHNfd2luZG93W2Zyb20rK107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tb3ApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tID0gX291dCAtIGRpc3Q7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb21fc291cmNlID0gb3V0cHV0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAobGVuID4gMikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBmcm9tX3NvdXJjZVtmcm9tKytdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBmcm9tX3NvdXJjZVtmcm9tKytdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBmcm9tX3NvdXJjZVtmcm9tKytdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVuIC09IDM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsZW4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gZnJvbV9zb3VyY2VbZnJvbSsrXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsZW4gPiAxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gZnJvbV9zb3VyY2VbZnJvbSsrXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSA9IF9vdXQgLSBkaXN0OwogICAgICAgICAgICAgICAgICAgICAgICAgIGRvIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gb3V0cHV0W2Zyb20rK107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IG91dHB1dFtmcm9tKytdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlbiAtPSAzOwogICAgICAgICAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKGxlbiA+IDIpOwogICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsZW4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gb3V0cHV0W2Zyb20rK107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGVuID4gMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IG91dHB1dFtmcm9tKytdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgob3AgJiA2NCkgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgaGVyZSA9IGRjb2RlWyhoZXJlICYgNjU1MzUpICsgKGhvbGQgJiAoMSA8PCBvcCkgLSAxKV07CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIGRvZGlzdDsKICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0cm0ubXNnID0gImludmFsaWQgZGlzdGFuY2UgY29kZSI7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIHRvcDsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoKG9wICYgNjQpID09PSAwKSB7CiAgICAgICAgICAgICAgICAgIGhlcmUgPSBsY29kZVsoaGVyZSAmIDY1NTM1KSArIChob2xkICYgKDEgPDwgb3ApIC0gMSldOwogICAgICAgICAgICAgICAgICBjb250aW51ZSBkb2xlbjsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob3AgJiAzMikgewogICAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gVFlQRTsKICAgICAgICAgICAgICAgICAgYnJlYWsgdG9wOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgc3RybS5tc2cgPSAiaW52YWxpZCBsaXRlcmFsL2xlbmd0aCBjb2RlIjsKICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDsKICAgICAgICAgICAgICAgICAgYnJlYWsgdG9wOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQogICAgICAgICAgfSB3aGlsZSAoX2luIDwgbGFzdCAmJiBfb3V0IDwgZW5kKTsKICAgICAgICBsZW4gPSBiaXRzID4+IDM7CiAgICAgICAgX2luIC09IGxlbjsKICAgICAgICBiaXRzIC09IGxlbiA8PCAzOwogICAgICAgIGhvbGQgJj0gKDEgPDwgYml0cykgLSAxOwogICAgICAgIHN0cm0ubmV4dF9pbiA9IF9pbjsKICAgICAgICBzdHJtLm5leHRfb3V0ID0gX291dDsKICAgICAgICBzdHJtLmF2YWlsX2luID0gX2luIDwgbGFzdCA/IDUgKyAobGFzdCAtIF9pbikgOiA1IC0gKF9pbiAtIGxhc3QpOwogICAgICAgIHN0cm0uYXZhaWxfb3V0ID0gX291dCA8IGVuZCA/IDI1NyArIChlbmQgLSBfb3V0KSA6IDI1NyAtIChfb3V0IC0gZW5kKTsKICAgICAgICBzdGF0ZS5ob2xkID0gaG9sZDsKICAgICAgICBzdGF0ZS5iaXRzID0gYml0czsKICAgICAgICByZXR1cm47CiAgICAgIH07CiAgICB9CiAgfSk7CgogIC8vIG5vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL2luZnRyZWVzLmpzCiAgdmFyIHJlcXVpcmVfaW5mdHJlZXMgPSBfX2NvbW1vbkpTKHsKICAgICJub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9pbmZ0cmVlcy5qcyIoZXhwb3J0czIsIG1vZHVsZSkgewogICAgICAidXNlIHN0cmljdCI7CiAgICAgIHZhciBNQVhCSVRTID0gMTU7CiAgICAgIHZhciBFTk9VR0hfTEVOUyA9IDg1MjsKICAgICAgdmFyIEVOT1VHSF9ESVNUUyA9IDU5MjsKICAgICAgdmFyIENPREVTID0gMDsKICAgICAgdmFyIExFTlMgPSAxOwogICAgICB2YXIgRElTVFMgPSAyOwogICAgICB2YXIgbGJhc2UgPSBuZXcgVWludDE2QXJyYXkoWwogICAgICAgIC8qIExlbmd0aCBjb2RlcyAyNTcuLjI4NSBiYXNlICovCiAgICAgICAgMywKICAgICAgICA0LAogICAgICAgIDUsCiAgICAgICAgNiwKICAgICAgICA3LAogICAgICAgIDgsCiAgICAgICAgOSwKICAgICAgICAxMCwKICAgICAgICAxMSwKICAgICAgICAxMywKICAgICAgICAxNSwKICAgICAgICAxNywKICAgICAgICAxOSwKICAgICAgICAyMywKICAgICAgICAyNywKICAgICAgICAzMSwKICAgICAgICAzNSwKICAgICAgICA0MywKICAgICAgICA1MSwKICAgICAgICA1OSwKICAgICAgICA2NywKICAgICAgICA4MywKICAgICAgICA5OSwKICAgICAgICAxMTUsCiAgICAgICAgMTMxLAogICAgICAgIDE2MywKICAgICAgICAxOTUsCiAgICAgICAgMjI3LAogICAgICAgIDI1OCwKICAgICAgICAwLAogICAgICAgIDAKICAgICAgXSk7CiAgICAgIHZhciBsZXh0ID0gbmV3IFVpbnQ4QXJyYXkoWwogICAgICAgIC8qIExlbmd0aCBjb2RlcyAyNTcuLjI4NSBleHRyYSAqLwogICAgICAgIDE2LAogICAgICAgIDE2LAogICAgICAgIDE2LAogICAgICAgIDE2LAogICAgICAgIDE2LAogICAgICAgIDE2LAogICAgICAgIDE2LAogICAgICAgIDE2LAogICAgICAgIDE3LAogICAgICAgIDE3LAogICAgICAgIDE3LAogICAgICAgIDE3LAogICAgICAgIDE4LAogICAgICAgIDE4LAogICAgICAgIDE4LAogICAgICAgIDE4LAogICAgICAgIDE5LAogICAgICAgIDE5LAogICAgICAgIDE5LAogICAgICAgIDE5LAogICAgICAgIDIwLAogICAgICAgIDIwLAogICAgICAgIDIwLAogICAgICAgIDIwLAogICAgICAgIDIxLAogICAgICAgIDIxLAogICAgICAgIDIxLAogICAgICAgIDIxLAogICAgICAgIDE2LAogICAgICAgIDcyLAogICAgICAgIDc4CiAgICAgIF0pOwogICAgICB2YXIgZGJhc2UgPSBuZXcgVWludDE2QXJyYXkoWwogICAgICAgIC8qIERpc3RhbmNlIGNvZGVzIDAuLjI5IGJhc2UgKi8KICAgICAgICAxLAogICAgICAgIDIsCiAgICAgICAgMywKICAgICAgICA0LAogICAgICAgIDUsCiAgICAgICAgNywKICAgICAgICA5LAogICAgICAgIDEzLAogICAgICAgIDE3LAogICAgICAgIDI1LAogICAgICAgIDMzLAogICAgICAgIDQ5LAogICAgICAgIDY1LAogICAgICAgIDk3LAogICAgICAgIDEyOSwKICAgICAgICAxOTMsCiAgICAgICAgMjU3LAogICAgICAgIDM4NSwKICAgICAgICA1MTMsCiAgICAgICAgNzY5LAogICAgICAgIDEwMjUsCiAgICAgICAgMTUzNywKICAgICAgICAyMDQ5LAogICAgICAgIDMwNzMsCiAgICAgICAgNDA5NywKICAgICAgICA2MTQ1LAogICAgICAgIDgxOTMsCiAgICAgICAgMTIyODksCiAgICAgICAgMTYzODUsCiAgICAgICAgMjQ1NzcsCiAgICAgICAgMCwKICAgICAgICAwCiAgICAgIF0pOwogICAgICB2YXIgZGV4dCA9IG5ldyBVaW50OEFycmF5KFsKICAgICAgICAvKiBEaXN0YW5jZSBjb2RlcyAwLi4yOSBleHRyYSAqLwogICAgICAgIDE2LAogICAgICAgIDE2LAogICAgICAgIDE2LAogICAgICAgIDE2LAogICAgICAgIDE3LAogICAgICAgIDE3LAogICAgICAgIDE4LAogICAgICAgIDE4LAogICAgICAgIDE5LAogICAgICAgIDE5LAogICAgICAgIDIwLAogICAgICAgIDIwLAogICAgICAgIDIxLAogICAgICAgIDIxLAogICAgICAgIDIyLAogICAgICAgIDIyLAogICAgICAgIDIzLAogICAgICAgIDIzLAogICAgICAgIDI0LAogICAgICAgIDI0LAogICAgICAgIDI1LAogICAgICAgIDI1LAogICAgICAgIDI2LAogICAgICAgIDI2LAogICAgICAgIDI3LAogICAgICAgIDI3LAogICAgICAgIDI4LAogICAgICAgIDI4LAogICAgICAgIDI5LAogICAgICAgIDI5LAogICAgICAgIDY0LAogICAgICAgIDY0CiAgICAgIF0pOwogICAgICB2YXIgaW5mbGF0ZV90YWJsZSA9ICh0eXBlLCBsZW5zLCBsZW5zX2luZGV4LCBjb2RlcywgdGFibGUsIHRhYmxlX2luZGV4LCB3b3JrLCBvcHRzKSA9PiB7CiAgICAgICAgY29uc3QgYml0cyA9IG9wdHMuYml0czsKICAgICAgICBsZXQgbGVuID0gMDsKICAgICAgICBsZXQgc3ltID0gMDsKICAgICAgICBsZXQgbWluMyA9IDAsIG1heDMgPSAwOwogICAgICAgIGxldCByb290ID0gMDsKICAgICAgICBsZXQgY3VyciA9IDA7CiAgICAgICAgbGV0IGRyb3AgPSAwOwogICAgICAgIGxldCBsZWZ0ID0gMDsKICAgICAgICBsZXQgdXNlZCA9IDA7CiAgICAgICAgbGV0IGh1ZmYgPSAwOwogICAgICAgIGxldCBpbmNyOwogICAgICAgIGxldCBmaWxsOwogICAgICAgIGxldCBsb3c7CiAgICAgICAgbGV0IG1hc2s7CiAgICAgICAgbGV0IG5leHQ7CiAgICAgICAgbGV0IGJhc2UgPSBudWxsOwogICAgICAgIGxldCBtYXRjaDsKICAgICAgICBjb25zdCBjb3VudCA9IG5ldyBVaW50MTZBcnJheShNQVhCSVRTICsgMSk7CiAgICAgICAgY29uc3Qgb2ZmcyA9IG5ldyBVaW50MTZBcnJheShNQVhCSVRTICsgMSk7CiAgICAgICAgbGV0IGV4dHJhID0gbnVsbDsKICAgICAgICBsZXQgaGVyZV9iaXRzLCBoZXJlX29wLCBoZXJlX3ZhbDsKICAgICAgICBmb3IgKGxlbiA9IDA7IGxlbiA8PSBNQVhCSVRTOyBsZW4rKykgewogICAgICAgICAgY291bnRbbGVuXSA9IDA7CiAgICAgICAgfQogICAgICAgIGZvciAoc3ltID0gMDsgc3ltIDwgY29kZXM7IHN5bSsrKSB7CiAgICAgICAgICBjb3VudFtsZW5zW2xlbnNfaW5kZXggKyBzeW1dXSsrOwogICAgICAgIH0KICAgICAgICByb290ID0gYml0czsKICAgICAgICBmb3IgKG1heDMgPSBNQVhCSVRTOyBtYXgzID49IDE7IG1heDMtLSkgewogICAgICAgICAgaWYgKGNvdW50W21heDNdICE9PSAwKSB7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAocm9vdCA+IG1heDMpIHsKICAgICAgICAgIHJvb3QgPSBtYXgzOwogICAgICAgIH0KICAgICAgICBpZiAobWF4MyA9PT0gMCkgewogICAgICAgICAgdGFibGVbdGFibGVfaW5kZXgrK10gPSAxIDw8IDI0IHwgNjQgPDwgMTYgfCAwOwogICAgICAgICAgdGFibGVbdGFibGVfaW5kZXgrK10gPSAxIDw8IDI0IHwgNjQgPDwgMTYgfCAwOwogICAgICAgICAgb3B0cy5iaXRzID0gMTsKICAgICAgICAgIHJldHVybiAwOwogICAgICAgIH0KICAgICAgICBmb3IgKG1pbjMgPSAxOyBtaW4zIDwgbWF4MzsgbWluMysrKSB7CiAgICAgICAgICBpZiAoY291bnRbbWluM10gIT09IDApIHsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChyb290IDwgbWluMykgewogICAgICAgICAgcm9vdCA9IG1pbjM7CiAgICAgICAgfQogICAgICAgIGxlZnQgPSAxOwogICAgICAgIGZvciAobGVuID0gMTsgbGVuIDw9IE1BWEJJVFM7IGxlbisrKSB7CiAgICAgICAgICBsZWZ0IDw8PSAxOwogICAgICAgICAgbGVmdCAtPSBjb3VudFtsZW5dOwogICAgICAgICAgaWYgKGxlZnQgPCAwKSB7CiAgICAgICAgICAgIHJldHVybiAtMTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKGxlZnQgPiAwICYmICh0eXBlID09PSBDT0RFUyB8fCBtYXgzICE9PSAxKSkgewogICAgICAgICAgcmV0dXJuIC0xOwogICAgICAgIH0KICAgICAgICBvZmZzWzFdID0gMDsKICAgICAgICBmb3IgKGxlbiA9IDE7IGxlbiA8IE1BWEJJVFM7IGxlbisrKSB7CiAgICAgICAgICBvZmZzW2xlbiArIDFdID0gb2Zmc1tsZW5dICsgY291bnRbbGVuXTsKICAgICAgICB9CiAgICAgICAgZm9yIChzeW0gPSAwOyBzeW0gPCBjb2Rlczsgc3ltKyspIHsKICAgICAgICAgIGlmIChsZW5zW2xlbnNfaW5kZXggKyBzeW1dICE9PSAwKSB7CiAgICAgICAgICAgIHdvcmtbb2Zmc1tsZW5zW2xlbnNfaW5kZXggKyBzeW1dXSsrXSA9IHN5bTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKHR5cGUgPT09IENPREVTKSB7CiAgICAgICAgICBiYXNlID0gZXh0cmEgPSB3b3JrOwogICAgICAgICAgbWF0Y2ggPSAyMDsKICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IExFTlMpIHsKICAgICAgICAgIGJhc2UgPSBsYmFzZTsKICAgICAgICAgIGV4dHJhID0gbGV4dDsKICAgICAgICAgIG1hdGNoID0gMjU3OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBiYXNlID0gZGJhc2U7CiAgICAgICAgICBleHRyYSA9IGRleHQ7CiAgICAgICAgICBtYXRjaCA9IDA7CiAgICAgICAgfQogICAgICAgIGh1ZmYgPSAwOwogICAgICAgIHN5bSA9IDA7CiAgICAgICAgbGVuID0gbWluMzsKICAgICAgICBuZXh0ID0gdGFibGVfaW5kZXg7CiAgICAgICAgY3VyciA9IHJvb3Q7CiAgICAgICAgZHJvcCA9IDA7CiAgICAgICAgbG93ID0gLTE7CiAgICAgICAgdXNlZCA9IDEgPDwgcm9vdDsKICAgICAgICBtYXNrID0gdXNlZCAtIDE7CiAgICAgICAgaWYgKHR5cGUgPT09IExFTlMgJiYgdXNlZCA+IEVOT1VHSF9MRU5TIHx8IHR5cGUgPT09IERJU1RTICYmIHVzZWQgPiBFTk9VR0hfRElTVFMpIHsKICAgICAgICAgIHJldHVybiAxOwogICAgICAgIH0KICAgICAgICBmb3IgKDsgOyApIHsKICAgICAgICAgIGhlcmVfYml0cyA9IGxlbiAtIGRyb3A7CiAgICAgICAgICBpZiAod29ya1tzeW1dICsgMSA8IG1hdGNoKSB7CiAgICAgICAgICAgIGhlcmVfb3AgPSAwOwogICAgICAgICAgICBoZXJlX3ZhbCA9IHdvcmtbc3ltXTsKICAgICAgICAgIH0gZWxzZSBpZiAod29ya1tzeW1dID49IG1hdGNoKSB7CiAgICAgICAgICAgIGhlcmVfb3AgPSBleHRyYVt3b3JrW3N5bV0gLSBtYXRjaF07CiAgICAgICAgICAgIGhlcmVfdmFsID0gYmFzZVt3b3JrW3N5bV0gLSBtYXRjaF07CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBoZXJlX29wID0gMzIgKyA2NDsKICAgICAgICAgICAgaGVyZV92YWwgPSAwOwogICAgICAgICAgfQogICAgICAgICAgaW5jciA9IDEgPDwgbGVuIC0gZHJvcDsKICAgICAgICAgIGZpbGwgPSAxIDw8IGN1cnI7CiAgICAgICAgICBtaW4zID0gZmlsbDsKICAgICAgICAgIGRvIHsKICAgICAgICAgICAgZmlsbCAtPSBpbmNyOwogICAgICAgICAgICB0YWJsZVtuZXh0ICsgKGh1ZmYgPj4gZHJvcCkgKyBmaWxsXSA9IGhlcmVfYml0cyA8PCAyNCB8IGhlcmVfb3AgPDwgMTYgfCBoZXJlX3ZhbCB8IDA7CiAgICAgICAgICB9IHdoaWxlIChmaWxsICE9PSAwKTsKICAgICAgICAgIGluY3IgPSAxIDw8IGxlbiAtIDE7CiAgICAgICAgICB3aGlsZSAoaHVmZiAmIGluY3IpIHsKICAgICAgICAgICAgaW5jciA+Pj0gMTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChpbmNyICE9PSAwKSB7CiAgICAgICAgICAgIGh1ZmYgJj0gaW5jciAtIDE7CiAgICAgICAgICAgIGh1ZmYgKz0gaW5jcjsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGh1ZmYgPSAwOwogICAgICAgICAgfQogICAgICAgICAgc3ltKys7CiAgICAgICAgICBpZiAoLS1jb3VudFtsZW5dID09PSAwKSB7CiAgICAgICAgICAgIGlmIChsZW4gPT09IG1heDMpIHsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICBsZW4gPSBsZW5zW2xlbnNfaW5kZXggKyB3b3JrW3N5bV1dOwogICAgICAgICAgfQogICAgICAgICAgaWYgKGxlbiA+IHJvb3QgJiYgKGh1ZmYgJiBtYXNrKSAhPT0gbG93KSB7CiAgICAgICAgICAgIGlmIChkcm9wID09PSAwKSB7CiAgICAgICAgICAgICAgZHJvcCA9IHJvb3Q7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgbmV4dCArPSBtaW4zOwogICAgICAgICAgICBjdXJyID0gbGVuIC0gZHJvcDsKICAgICAgICAgICAgbGVmdCA9IDEgPDwgY3VycjsKICAgICAgICAgICAgd2hpbGUgKGN1cnIgKyBkcm9wIDwgbWF4MykgewogICAgICAgICAgICAgIGxlZnQgLT0gY291bnRbY3VyciArIGRyb3BdOwogICAgICAgICAgICAgIGlmIChsZWZ0IDw9IDApIHsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBjdXJyKys7CiAgICAgICAgICAgICAgbGVmdCA8PD0gMTsKICAgICAgICAgICAgfQogICAgICAgICAgICB1c2VkICs9IDEgPDwgY3VycjsKICAgICAgICAgICAgaWYgKHR5cGUgPT09IExFTlMgJiYgdXNlZCA+IEVOT1VHSF9MRU5TIHx8IHR5cGUgPT09IERJU1RTICYmIHVzZWQgPiBFTk9VR0hfRElTVFMpIHsKICAgICAgICAgICAgICByZXR1cm4gMTsKICAgICAgICAgICAgfQogICAgICAgICAgICBsb3cgPSBodWZmICYgbWFzazsKICAgICAgICAgICAgdGFibGVbbG93XSA9IHJvb3QgPDwgMjQgfCBjdXJyIDw8IDE2IHwgbmV4dCAtIHRhYmxlX2luZGV4IHwgMDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKGh1ZmYgIT09IDApIHsKICAgICAgICAgIHRhYmxlW25leHQgKyBodWZmXSA9IGxlbiAtIGRyb3AgPDwgMjQgfCA2NCA8PCAxNiB8IDA7CiAgICAgICAgfQogICAgICAgIG9wdHMuYml0cyA9IHJvb3Q7CiAgICAgICAgcmV0dXJuIDA7CiAgICAgIH07CiAgICAgIG1vZHVsZS5leHBvcnRzID0gaW5mbGF0ZV90YWJsZTsKICAgIH0KICB9KTsKCiAgLy8gbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvY29uc3RhbnRzLmpzCiAgdmFyIHJlcXVpcmVfY29uc3RhbnRzID0gX19jb21tb25KUyh7CiAgICAibm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvY29uc3RhbnRzLmpzIihleHBvcnRzMiwgbW9kdWxlKSB7CiAgICAgICJ1c2Ugc3RyaWN0IjsKICAgICAgbW9kdWxlLmV4cG9ydHMgPSB7CiAgICAgICAgLyogQWxsb3dlZCBmbHVzaCB2YWx1ZXM7IHNlZSBkZWZsYXRlKCkgYW5kIGluZmxhdGUoKSBiZWxvdyBmb3IgZGV0YWlscyAqLwogICAgICAgIFpfTk9fRkxVU0g6IDAsCiAgICAgICAgWl9QQVJUSUFMX0ZMVVNIOiAxLAogICAgICAgIFpfU1lOQ19GTFVTSDogMiwKICAgICAgICBaX0ZVTExfRkxVU0g6IDMsCiAgICAgICAgWl9GSU5JU0g6IDQsCiAgICAgICAgWl9CTE9DSzogNSwKICAgICAgICBaX1RSRUVTOiA2LAogICAgICAgIC8qIFJldHVybiBjb2RlcyBmb3IgdGhlIGNvbXByZXNzaW9uL2RlY29tcHJlc3Npb24gZnVuY3Rpb25zLiBOZWdhdGl2ZSB2YWx1ZXMKICAgICAgICAqIGFyZSBlcnJvcnMsIHBvc2l0aXZlIHZhbHVlcyBhcmUgdXNlZCBmb3Igc3BlY2lhbCBidXQgbm9ybWFsIGV2ZW50cy4KICAgICAgICAqLwogICAgICAgIFpfT0s6IDAsCiAgICAgICAgWl9TVFJFQU1fRU5EOiAxLAogICAgICAgIFpfTkVFRF9ESUNUOiAyLAogICAgICAgIFpfRVJSTk86IC0xLAogICAgICAgIFpfU1RSRUFNX0VSUk9SOiAtMiwKICAgICAgICBaX0RBVEFfRVJST1I6IC0zLAogICAgICAgIFpfTUVNX0VSUk9SOiAtNCwKICAgICAgICBaX0JVRl9FUlJPUjogLTUsCiAgICAgICAgLy9aX1ZFUlNJT05fRVJST1I6IC02LAogICAgICAgIC8qIGNvbXByZXNzaW9uIGxldmVscyAqLwogICAgICAgIFpfTk9fQ09NUFJFU1NJT046IDAsCiAgICAgICAgWl9CRVNUX1NQRUVEOiAxLAogICAgICAgIFpfQkVTVF9DT01QUkVTU0lPTjogOSwKICAgICAgICBaX0RFRkFVTFRfQ09NUFJFU1NJT046IC0xLAogICAgICAgIFpfRklMVEVSRUQ6IDEsCiAgICAgICAgWl9IVUZGTUFOX09OTFk6IDIsCiAgICAgICAgWl9STEU6IDMsCiAgICAgICAgWl9GSVhFRDogNCwKICAgICAgICBaX0RFRkFVTFRfU1RSQVRFR1k6IDAsCiAgICAgICAgLyogUG9zc2libGUgdmFsdWVzIG9mIHRoZSBkYXRhX3R5cGUgZmllbGQgKHRob3VnaCBzZWUgaW5mbGF0ZSgpKSAqLwogICAgICAgIFpfQklOQVJZOiAwLAogICAgICAgIFpfVEVYVDogMSwKICAgICAgICAvL1pfQVNDSUk6ICAgICAgICAgICAgICAgIDEsIC8vID0gWl9URVhUIChkZXByZWNhdGVkKQogICAgICAgIFpfVU5LTk9XTjogMiwKICAgICAgICAvKiBUaGUgZGVmbGF0ZSBjb21wcmVzc2lvbiBtZXRob2QgKi8KICAgICAgICBaX0RFRkxBVEVEOiA4CiAgICAgICAgLy9aX05VTEw6ICAgICAgICAgICAgICAgICBudWxsIC8vIFVzZSAtMSBvciBudWxsIGlubGluZSwgZGVwZW5kaW5nIG9uIHZhciB0eXBlCiAgICAgIH07CiAgICB9CiAgfSk7CgogIC8vIG5vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL2luZmxhdGUuanMKICB2YXIgcmVxdWlyZV9pbmZsYXRlID0gX19jb21tb25KUyh7CiAgICAibm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvaW5mbGF0ZS5qcyIoZXhwb3J0czIsIG1vZHVsZSkgewogICAgICAidXNlIHN0cmljdCI7CiAgICAgIHZhciBhZGxlcjMyID0gcmVxdWlyZV9hZGxlcjMyKCk7CiAgICAgIHZhciBjcmMzMiA9IHJlcXVpcmVfY3JjMzIoKTsKICAgICAgdmFyIGluZmxhdGVfZmFzdCA9IHJlcXVpcmVfaW5mZmFzdCgpOwogICAgICB2YXIgaW5mbGF0ZV90YWJsZSA9IHJlcXVpcmVfaW5mdHJlZXMoKTsKICAgICAgdmFyIENPREVTID0gMDsKICAgICAgdmFyIExFTlMgPSAxOwogICAgICB2YXIgRElTVFMgPSAyOwogICAgICB2YXIgewogICAgICAgIFpfRklOSVNILAogICAgICAgIFpfQkxPQ0ssCiAgICAgICAgWl9UUkVFUywKICAgICAgICBaX09LLAogICAgICAgIFpfU1RSRUFNX0VORCwKICAgICAgICBaX05FRURfRElDVCwKICAgICAgICBaX1NUUkVBTV9FUlJPUiwKICAgICAgICBaX0RBVEFfRVJST1IsCiAgICAgICAgWl9NRU1fRVJST1IsCiAgICAgICAgWl9CVUZfRVJST1IsCiAgICAgICAgWl9ERUZMQVRFRAogICAgICB9ID0gcmVxdWlyZV9jb25zdGFudHMoKTsKICAgICAgdmFyIEhFQUQgPSAxNjE4MDsKICAgICAgdmFyIEZMQUdTID0gMTYxODE7CiAgICAgIHZhciBUSU1FID0gMTYxODI7CiAgICAgIHZhciBPUyA9IDE2MTgzOwogICAgICB2YXIgRVhMRU4gPSAxNjE4NDsKICAgICAgdmFyIEVYVFJBID0gMTYxODU7CiAgICAgIHZhciBOQU1FID0gMTYxODY7CiAgICAgIHZhciBDT01NRU5UID0gMTYxODc7CiAgICAgIHZhciBIQ1JDID0gMTYxODg7CiAgICAgIHZhciBESUNUSUQgPSAxNjE4OTsKICAgICAgdmFyIERJQ1QgPSAxNjE5MDsKICAgICAgdmFyIFRZUEUgPSAxNjE5MTsKICAgICAgdmFyIFRZUEVETyA9IDE2MTkyOwogICAgICB2YXIgU1RPUkVEID0gMTYxOTM7CiAgICAgIHZhciBDT1BZXyA9IDE2MTk0OwogICAgICB2YXIgQ09QWSA9IDE2MTk1OwogICAgICB2YXIgVEFCTEUgPSAxNjE5NjsKICAgICAgdmFyIExFTkxFTlMgPSAxNjE5NzsKICAgICAgdmFyIENPREVMRU5TID0gMTYxOTg7CiAgICAgIHZhciBMRU5fID0gMTYxOTk7CiAgICAgIHZhciBMRU4gPSAxNjIwMDsKICAgICAgdmFyIExFTkVYVCA9IDE2MjAxOwogICAgICB2YXIgRElTVCA9IDE2MjAyOwogICAgICB2YXIgRElTVEVYVCA9IDE2MjAzOwogICAgICB2YXIgTUFUQ0ggPSAxNjIwNDsKICAgICAgdmFyIExJVCA9IDE2MjA1OwogICAgICB2YXIgQ0hFQ0sgPSAxNjIwNjsKICAgICAgdmFyIExFTkdUSCA9IDE2MjA3OwogICAgICB2YXIgRE9ORSA9IDE2MjA4OwogICAgICB2YXIgQkFEID0gMTYyMDk7CiAgICAgIHZhciBNRU0gPSAxNjIxMDsKICAgICAgdmFyIFNZTkMgPSAxNjIxMTsKICAgICAgdmFyIEVOT1VHSF9MRU5TID0gODUyOwogICAgICB2YXIgRU5PVUdIX0RJU1RTID0gNTkyOwogICAgICB2YXIgTUFYX1dCSVRTID0gMTU7CiAgICAgIHZhciBERUZfV0JJVFMgPSBNQVhfV0JJVFM7CiAgICAgIHZhciB6c3dhcDMyID0gKHEpID0+IHsKICAgICAgICByZXR1cm4gKHEgPj4+IDI0ICYgMjU1KSArIChxID4+PiA4ICYgNjUyODApICsgKChxICYgNjUyODApIDw8IDgpICsgKChxICYgMjU1KSA8PCAyNCk7CiAgICAgIH07CiAgICAgIGZ1bmN0aW9uIEluZmxhdGVTdGF0ZSgpIHsKICAgICAgICB0aGlzLnN0cm0gPSBudWxsOwogICAgICAgIHRoaXMubW9kZSA9IDA7CiAgICAgICAgdGhpcy5sYXN0ID0gZmFsc2U7CiAgICAgICAgdGhpcy53cmFwID0gMDsKICAgICAgICB0aGlzLmhhdmVkaWN0ID0gZmFsc2U7CiAgICAgICAgdGhpcy5mbGFncyA9IDA7CiAgICAgICAgdGhpcy5kbWF4ID0gMDsKICAgICAgICB0aGlzLmNoZWNrID0gMDsKICAgICAgICB0aGlzLnRvdGFsID0gMDsKICAgICAgICB0aGlzLmhlYWQgPSBudWxsOwogICAgICAgIHRoaXMud2JpdHMgPSAwOwogICAgICAgIHRoaXMud3NpemUgPSAwOwogICAgICAgIHRoaXMud2hhdmUgPSAwOwogICAgICAgIHRoaXMud25leHQgPSAwOwogICAgICAgIHRoaXMud2luZG93ID0gbnVsbDsKICAgICAgICB0aGlzLmhvbGQgPSAwOwogICAgICAgIHRoaXMuYml0cyA9IDA7CiAgICAgICAgdGhpcy5sZW5ndGggPSAwOwogICAgICAgIHRoaXMub2Zmc2V0ID0gMDsKICAgICAgICB0aGlzLmV4dHJhID0gMDsKICAgICAgICB0aGlzLmxlbmNvZGUgPSBudWxsOwogICAgICAgIHRoaXMuZGlzdGNvZGUgPSBudWxsOwogICAgICAgIHRoaXMubGVuYml0cyA9IDA7CiAgICAgICAgdGhpcy5kaXN0Yml0cyA9IDA7CiAgICAgICAgdGhpcy5uY29kZSA9IDA7CiAgICAgICAgdGhpcy5ubGVuID0gMDsKICAgICAgICB0aGlzLm5kaXN0ID0gMDsKICAgICAgICB0aGlzLmhhdmUgPSAwOwogICAgICAgIHRoaXMubmV4dCA9IG51bGw7CiAgICAgICAgdGhpcy5sZW5zID0gbmV3IFVpbnQxNkFycmF5KDMyMCk7CiAgICAgICAgdGhpcy53b3JrID0gbmV3IFVpbnQxNkFycmF5KDI4OCk7CiAgICAgICAgdGhpcy5sZW5keW4gPSBudWxsOwogICAgICAgIHRoaXMuZGlzdGR5biA9IG51bGw7CiAgICAgICAgdGhpcy5zYW5lID0gMDsKICAgICAgICB0aGlzLmJhY2sgPSAwOwogICAgICAgIHRoaXMud2FzID0gMDsKICAgICAgfQogICAgICB2YXIgaW5mbGF0ZVN0YXRlQ2hlY2sgPSAoc3RybSkgPT4gewogICAgICAgIGlmICghc3RybSkgewogICAgICAgICAgcmV0dXJuIDE7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHN0YXRlID0gc3RybS5zdGF0ZTsKICAgICAgICBpZiAoIXN0YXRlIHx8IHN0YXRlLnN0cm0gIT09IHN0cm0gfHwgc3RhdGUubW9kZSA8IEhFQUQgfHwgc3RhdGUubW9kZSA+IFNZTkMpIHsKICAgICAgICAgIHJldHVybiAxOwogICAgICAgIH0KICAgICAgICByZXR1cm4gMDsKICAgICAgfTsKICAgICAgdmFyIGluZmxhdGVSZXNldEtlZXAgPSAoc3RybSkgPT4gewogICAgICAgIGlmIChpbmZsYXRlU3RhdGVDaGVjayhzdHJtKSkgewogICAgICAgICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOwogICAgICAgIH0KICAgICAgICBjb25zdCBzdGF0ZSA9IHN0cm0uc3RhdGU7CiAgICAgICAgc3RybS50b3RhbF9pbiA9IHN0cm0udG90YWxfb3V0ID0gc3RhdGUudG90YWwgPSAwOwogICAgICAgIHN0cm0ubXNnID0gIiI7CiAgICAgICAgaWYgKHN0YXRlLndyYXApIHsKICAgICAgICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS53cmFwICYgMTsKICAgICAgICB9CiAgICAgICAgc3RhdGUubW9kZSA9IEhFQUQ7CiAgICAgICAgc3RhdGUubGFzdCA9IDA7CiAgICAgICAgc3RhdGUuaGF2ZWRpY3QgPSAwOwogICAgICAgIHN0YXRlLmZsYWdzID0gLTE7CiAgICAgICAgc3RhdGUuZG1heCA9IDMyNzY4OwogICAgICAgIHN0YXRlLmhlYWQgPSBudWxsOwogICAgICAgIHN0YXRlLmhvbGQgPSAwOwogICAgICAgIHN0YXRlLmJpdHMgPSAwOwogICAgICAgIHN0YXRlLmxlbmNvZGUgPSBzdGF0ZS5sZW5keW4gPSBuZXcgSW50MzJBcnJheShFTk9VR0hfTEVOUyk7CiAgICAgICAgc3RhdGUuZGlzdGNvZGUgPSBzdGF0ZS5kaXN0ZHluID0gbmV3IEludDMyQXJyYXkoRU5PVUdIX0RJU1RTKTsKICAgICAgICBzdGF0ZS5zYW5lID0gMTsKICAgICAgICBzdGF0ZS5iYWNrID0gLTE7CiAgICAgICAgcmV0dXJuIFpfT0s7CiAgICAgIH07CiAgICAgIHZhciBpbmZsYXRlUmVzZXQgPSAoc3RybSkgPT4gewogICAgICAgIGlmIChpbmZsYXRlU3RhdGVDaGVjayhzdHJtKSkgewogICAgICAgICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOwogICAgICAgIH0KICAgICAgICBjb25zdCBzdGF0ZSA9IHN0cm0uc3RhdGU7CiAgICAgICAgc3RhdGUud3NpemUgPSAwOwogICAgICAgIHN0YXRlLndoYXZlID0gMDsKICAgICAgICBzdGF0ZS53bmV4dCA9IDA7CiAgICAgICAgcmV0dXJuIGluZmxhdGVSZXNldEtlZXAoc3RybSk7CiAgICAgIH07CiAgICAgIHZhciBpbmZsYXRlUmVzZXQyID0gKHN0cm0sIHdpbmRvd0JpdHMpID0+IHsKICAgICAgICBsZXQgd3JhcDsKICAgICAgICBpZiAoaW5mbGF0ZVN0YXRlQ2hlY2soc3RybSkpIHsKICAgICAgICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjsKICAgICAgICB9CiAgICAgICAgY29uc3Qgc3RhdGUgPSBzdHJtLnN0YXRlOwogICAgICAgIGlmICh3aW5kb3dCaXRzIDwgMCkgewogICAgICAgICAgd3JhcCA9IDA7CiAgICAgICAgICB3aW5kb3dCaXRzID0gLXdpbmRvd0JpdHM7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHdyYXAgPSAod2luZG93Qml0cyA+PiA0KSArIDU7CiAgICAgICAgICBpZiAod2luZG93Qml0cyA8IDQ4KSB7CiAgICAgICAgICAgIHdpbmRvd0JpdHMgJj0gMTU7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmICh3aW5kb3dCaXRzICYmICh3aW5kb3dCaXRzIDwgOCB8fCB3aW5kb3dCaXRzID4gMTUpKSB7CiAgICAgICAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7CiAgICAgICAgfQogICAgICAgIGlmIChzdGF0ZS53aW5kb3cgIT09IG51bGwgJiYgc3RhdGUud2JpdHMgIT09IHdpbmRvd0JpdHMpIHsKICAgICAgICAgIHN0YXRlLndpbmRvdyA9IG51bGw7CiAgICAgICAgfQogICAgICAgIHN0YXRlLndyYXAgPSB3cmFwOwogICAgICAgIHN0YXRlLndiaXRzID0gd2luZG93Qml0czsKICAgICAgICByZXR1cm4gaW5mbGF0ZVJlc2V0KHN0cm0pOwogICAgICB9OwogICAgICB2YXIgaW5mbGF0ZUluaXQyID0gKHN0cm0sIHdpbmRvd0JpdHMpID0+IHsKICAgICAgICBpZiAoIXN0cm0pIHsKICAgICAgICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjsKICAgICAgICB9CiAgICAgICAgY29uc3Qgc3RhdGUgPSBuZXcgSW5mbGF0ZVN0YXRlKCk7CiAgICAgICAgc3RybS5zdGF0ZSA9IHN0YXRlOwogICAgICAgIHN0YXRlLnN0cm0gPSBzdHJtOwogICAgICAgIHN0YXRlLndpbmRvdyA9IG51bGw7CiAgICAgICAgc3RhdGUubW9kZSA9IEhFQUQ7CiAgICAgICAgY29uc3QgcmV0ID0gaW5mbGF0ZVJlc2V0MihzdHJtLCB3aW5kb3dCaXRzKTsKICAgICAgICBpZiAocmV0ICE9PSBaX09LKSB7CiAgICAgICAgICBzdHJtLnN0YXRlID0gbnVsbDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJldDsKICAgICAgfTsKICAgICAgdmFyIGluZmxhdGVJbml0ID0gKHN0cm0pID0+IHsKICAgICAgICByZXR1cm4gaW5mbGF0ZUluaXQyKHN0cm0sIERFRl9XQklUUyk7CiAgICAgIH07CiAgICAgIHZhciB2aXJnaW4gPSB0cnVlOwogICAgICB2YXIgbGVuZml4OwogICAgICB2YXIgZGlzdGZpeDsKICAgICAgdmFyIGZpeGVkdGFibGVzID0gKHN0YXRlKSA9PiB7CiAgICAgICAgaWYgKHZpcmdpbikgewogICAgICAgICAgbGVuZml4ID0gbmV3IEludDMyQXJyYXkoNTEyKTsKICAgICAgICAgIGRpc3RmaXggPSBuZXcgSW50MzJBcnJheSgzMik7CiAgICAgICAgICBsZXQgc3ltID0gMDsKICAgICAgICAgIHdoaWxlIChzeW0gPCAxNDQpIHsKICAgICAgICAgICAgc3RhdGUubGVuc1tzeW0rK10gPSA4OwogICAgICAgICAgfQogICAgICAgICAgd2hpbGUgKHN5bSA8IDI1NikgewogICAgICAgICAgICBzdGF0ZS5sZW5zW3N5bSsrXSA9IDk7CiAgICAgICAgICB9CiAgICAgICAgICB3aGlsZSAoc3ltIDwgMjgwKSB7CiAgICAgICAgICAgIHN0YXRlLmxlbnNbc3ltKytdID0gNzsKICAgICAgICAgIH0KICAgICAgICAgIHdoaWxlIChzeW0gPCAyODgpIHsKICAgICAgICAgICAgc3RhdGUubGVuc1tzeW0rK10gPSA4OwogICAgICAgICAgfQogICAgICAgICAgaW5mbGF0ZV90YWJsZShMRU5TLCBzdGF0ZS5sZW5zLCAwLCAyODgsIGxlbmZpeCwgMCwgc3RhdGUud29yaywgeyBiaXRzOiA5IH0pOwogICAgICAgICAgc3ltID0gMDsKICAgICAgICAgIHdoaWxlIChzeW0gPCAzMikgewogICAgICAgICAgICBzdGF0ZS5sZW5zW3N5bSsrXSA9IDU7CiAgICAgICAgICB9CiAgICAgICAgICBpbmZsYXRlX3RhYmxlKERJU1RTLCBzdGF0ZS5sZW5zLCAwLCAzMiwgZGlzdGZpeCwgMCwgc3RhdGUud29yaywgeyBiaXRzOiA1IH0pOwogICAgICAgICAgdmlyZ2luID0gZmFsc2U7CiAgICAgICAgfQogICAgICAgIHN0YXRlLmxlbmNvZGUgPSBsZW5maXg7CiAgICAgICAgc3RhdGUubGVuYml0cyA9IDk7CiAgICAgICAgc3RhdGUuZGlzdGNvZGUgPSBkaXN0Zml4OwogICAgICAgIHN0YXRlLmRpc3RiaXRzID0gNTsKICAgICAgfTsKICAgICAgdmFyIHVwZGF0ZXdpbmRvdyA9IChzdHJtLCBzcmMsIGVuZCwgY29weSkgPT4gewogICAgICAgIGxldCBkaXN0OwogICAgICAgIGNvbnN0IHN0YXRlID0gc3RybS5zdGF0ZTsKICAgICAgICBpZiAoc3RhdGUud2luZG93ID09PSBudWxsKSB7CiAgICAgICAgICBzdGF0ZS53c2l6ZSA9IDEgPDwgc3RhdGUud2JpdHM7CiAgICAgICAgICBzdGF0ZS53bmV4dCA9IDA7CiAgICAgICAgICBzdGF0ZS53aGF2ZSA9IDA7CiAgICAgICAgICBzdGF0ZS53aW5kb3cgPSBuZXcgVWludDhBcnJheShzdGF0ZS53c2l6ZSk7CiAgICAgICAgfQogICAgICAgIGlmIChjb3B5ID49IHN0YXRlLndzaXplKSB7CiAgICAgICAgICBzdGF0ZS53aW5kb3cuc2V0KHNyYy5zdWJhcnJheShlbmQgLSBzdGF0ZS53c2l6ZSwgZW5kKSwgMCk7CiAgICAgICAgICBzdGF0ZS53bmV4dCA9IDA7CiAgICAgICAgICBzdGF0ZS53aGF2ZSA9IHN0YXRlLndzaXplOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBkaXN0ID0gc3RhdGUud3NpemUgLSBzdGF0ZS53bmV4dDsKICAgICAgICAgIGlmIChkaXN0ID4gY29weSkgewogICAgICAgICAgICBkaXN0ID0gY29weTsKICAgICAgICAgIH0KICAgICAgICAgIHN0YXRlLndpbmRvdy5zZXQoc3JjLnN1YmFycmF5KGVuZCAtIGNvcHksIGVuZCAtIGNvcHkgKyBkaXN0KSwgc3RhdGUud25leHQpOwogICAgICAgICAgY29weSAtPSBkaXN0OwogICAgICAgICAgaWYgKGNvcHkpIHsKICAgICAgICAgICAgc3RhdGUud2luZG93LnNldChzcmMuc3ViYXJyYXkoZW5kIC0gY29weSwgZW5kKSwgMCk7CiAgICAgICAgICAgIHN0YXRlLnduZXh0ID0gY29weTsKICAgICAgICAgICAgc3RhdGUud2hhdmUgPSBzdGF0ZS53c2l6ZTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHN0YXRlLnduZXh0ICs9IGRpc3Q7CiAgICAgICAgICAgIGlmIChzdGF0ZS53bmV4dCA9PT0gc3RhdGUud3NpemUpIHsKICAgICAgICAgICAgICBzdGF0ZS53bmV4dCA9IDA7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHN0YXRlLndoYXZlIDwgc3RhdGUud3NpemUpIHsKICAgICAgICAgICAgICBzdGF0ZS53aGF2ZSArPSBkaXN0OwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiAwOwogICAgICB9OwogICAgICB2YXIgaW5mbGF0ZSA9IChzdHJtLCBmbHVzaCkgPT4gewogICAgICAgIGxldCBzdGF0ZTsKICAgICAgICBsZXQgaW5wdXQsIG91dHB1dDsKICAgICAgICBsZXQgbmV4dDsKICAgICAgICBsZXQgcHV0OwogICAgICAgIGxldCBoYXZlLCBsZWZ0OwogICAgICAgIGxldCBob2xkOwogICAgICAgIGxldCBiaXRzOwogICAgICAgIGxldCBfaW4sIF9vdXQ7CiAgICAgICAgbGV0IGNvcHk7CiAgICAgICAgbGV0IGZyb207CiAgICAgICAgbGV0IGZyb21fc291cmNlOwogICAgICAgIGxldCBoZXJlID0gMDsKICAgICAgICBsZXQgaGVyZV9iaXRzLCBoZXJlX29wLCBoZXJlX3ZhbDsKICAgICAgICBsZXQgbGFzdF9iaXRzLCBsYXN0X29wLCBsYXN0X3ZhbDsKICAgICAgICBsZXQgbGVuOwogICAgICAgIGxldCByZXQ7CiAgICAgICAgY29uc3QgaGJ1ZiA9IG5ldyBVaW50OEFycmF5KDQpOwogICAgICAgIGxldCBvcHRzOwogICAgICAgIGxldCBuOwogICAgICAgIGNvbnN0IG9yZGVyID0gKAogICAgICAgICAgLyogcGVybXV0YXRpb24gb2YgY29kZSBsZW5ndGhzICovCiAgICAgICAgICBuZXcgVWludDhBcnJheShbMTYsIDE3LCAxOCwgMCwgOCwgNywgOSwgNiwgMTAsIDUsIDExLCA0LCAxMiwgMywgMTMsIDIsIDE0LCAxLCAxNV0pCiAgICAgICAgKTsKICAgICAgICBpZiAoaW5mbGF0ZVN0YXRlQ2hlY2soc3RybSkgfHwgIXN0cm0ub3V0cHV0IHx8ICFzdHJtLmlucHV0ICYmIHN0cm0uYXZhaWxfaW4gIT09IDApIHsKICAgICAgICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjsKICAgICAgICB9CiAgICAgICAgc3RhdGUgPSBzdHJtLnN0YXRlOwogICAgICAgIGlmIChzdGF0ZS5tb2RlID09PSBUWVBFKSB7CiAgICAgICAgICBzdGF0ZS5tb2RlID0gVFlQRURPOwogICAgICAgIH0KICAgICAgICBwdXQgPSBzdHJtLm5leHRfb3V0OwogICAgICAgIG91dHB1dCA9IHN0cm0ub3V0cHV0OwogICAgICAgIGxlZnQgPSBzdHJtLmF2YWlsX291dDsKICAgICAgICBuZXh0ID0gc3RybS5uZXh0X2luOwogICAgICAgIGlucHV0ID0gc3RybS5pbnB1dDsKICAgICAgICBoYXZlID0gc3RybS5hdmFpbF9pbjsKICAgICAgICBob2xkID0gc3RhdGUuaG9sZDsKICAgICAgICBiaXRzID0gc3RhdGUuYml0czsKICAgICAgICBfaW4gPSBoYXZlOwogICAgICAgIF9vdXQgPSBsZWZ0OwogICAgICAgIHJldCA9IFpfT0s7CiAgICAgICAgaW5mX2xlYXZlOgogICAgICAgICAgZm9yICg7IDsgKSB7CiAgICAgICAgICAgIHN3aXRjaCAoc3RhdGUubW9kZSkgewogICAgICAgICAgICAgIGNhc2UgSEVBRDoKICAgICAgICAgICAgICAgIGlmIChzdGF0ZS53cmFwID09PSAwKSB7CiAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBUWVBFRE87CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgd2hpbGUgKGJpdHMgPCAxNikgewogICAgICAgICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBoYXZlLS07CiAgICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzOwogICAgICAgICAgICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoc3RhdGUud3JhcCAmIDIgJiYgaG9sZCA9PT0gMzU2MTUpIHsKICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLndiaXRzID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGUud2JpdHMgPSAxNTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBzdGF0ZS5jaGVjayA9IDA7CiAgICAgICAgICAgICAgICAgIGhidWZbMF0gPSBob2xkICYgMjU1OwogICAgICAgICAgICAgICAgICBoYnVmWzFdID0gaG9sZCA+Pj4gOCAmIDI1NTsKICAgICAgICAgICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMihzdGF0ZS5jaGVjaywgaGJ1ZiwgMiwgMCk7CiAgICAgICAgICAgICAgICAgIGhvbGQgPSAwOwogICAgICAgICAgICAgICAgICBiaXRzID0gMDsKICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEZMQUdTOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7CiAgICAgICAgICAgICAgICAgIHN0YXRlLmhlYWQuZG9uZSA9IGZhbHNlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCEoc3RhdGUud3JhcCAmIDEpIHx8IC8qIGNoZWNrIGlmIHpsaWIgaGVhZGVyIGFsbG93ZWQgKi8KICAgICAgICAgICAgICAgICgoKGhvbGQgJiAyNTUpIDw8IDgpICsgKGhvbGQgPj4gOCkpICUgMzEpIHsKICAgICAgICAgICAgICAgICAgc3RybS5tc2cgPSAiaW5jb3JyZWN0IGhlYWRlciBjaGVjayI7CiAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKChob2xkICYgMTUpICE9PSBaX0RFRkxBVEVEKSB7CiAgICAgICAgICAgICAgICAgIHN0cm0ubXNnID0gInVua25vd24gY29tcHJlc3Npb24gbWV0aG9kIjsKICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBob2xkID4+Pj0gNDsKICAgICAgICAgICAgICAgIGJpdHMgLT0gNDsKICAgICAgICAgICAgICAgIGxlbiA9IChob2xkICYgMTUpICsgODsKICAgICAgICAgICAgICAgIGlmIChzdGF0ZS53Yml0cyA9PT0gMCkgewogICAgICAgICAgICAgICAgICBzdGF0ZS53Yml0cyA9IGxlbjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChsZW4gPiAxNSB8fCBsZW4gPiBzdGF0ZS53Yml0cykgewogICAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICJpbnZhbGlkIHdpbmRvdyBzaXplIjsKICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBzdGF0ZS5kbWF4ID0gMSA8PCBzdGF0ZS53Yml0czsKICAgICAgICAgICAgICAgIHN0YXRlLmZsYWdzID0gMDsKICAgICAgICAgICAgICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS5jaGVjayA9IDE7CiAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gaG9sZCAmIDUxMiA/IERJQ1RJRCA6IFRZUEU7CiAgICAgICAgICAgICAgICBob2xkID0gMDsKICAgICAgICAgICAgICAgIGJpdHMgPSAwOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgY2FzZSBGTEFHUzoKICAgICAgICAgICAgICAgIHdoaWxlIChiaXRzIDwgMTYpIHsKICAgICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaGF2ZS0tOwogICAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0czsKICAgICAgICAgICAgICAgICAgYml0cyArPSA4OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgc3RhdGUuZmxhZ3MgPSBob2xkOwogICAgICAgICAgICAgICAgaWYgKChzdGF0ZS5mbGFncyAmIDI1NSkgIT09IFpfREVGTEFURUQpIHsKICAgICAgICAgICAgICAgICAgc3RybS5tc2cgPSAidW5rbm93biBjb21wcmVzc2lvbiBtZXRob2QiOwogICAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDU3MzQ0KSB7CiAgICAgICAgICAgICAgICAgIHN0cm0ubXNnID0gInVua25vd24gaGVhZGVyIGZsYWdzIHNldCI7CiAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHN0YXRlLmhlYWQpIHsKICAgICAgICAgICAgICAgICAgc3RhdGUuaGVhZC50ZXh0ID0gaG9sZCA+PiA4ICYgMTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDUxMiAmJiBzdGF0ZS53cmFwICYgNCkgewogICAgICAgICAgICAgICAgICBoYnVmWzBdID0gaG9sZCAmIDI1NTsKICAgICAgICAgICAgICAgICAgaGJ1ZlsxXSA9IGhvbGQgPj4+IDggJiAyNTU7CiAgICAgICAgICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzIoc3RhdGUuY2hlY2ssIGhidWYsIDIsIDApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaG9sZCA9IDA7CiAgICAgICAgICAgICAgICBiaXRzID0gMDsKICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBUSU1FOwogICAgICAgICAgICAgIGNhc2UgVElNRToKICAgICAgICAgICAgICAgIHdoaWxlIChiaXRzIDwgMzIpIHsKICAgICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaGF2ZS0tOwogICAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0czsKICAgICAgICAgICAgICAgICAgYml0cyArPSA4OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHN0YXRlLmhlYWQpIHsKICAgICAgICAgICAgICAgICAgc3RhdGUuaGVhZC50aW1lID0gaG9sZDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDUxMiAmJiBzdGF0ZS53cmFwICYgNCkgewogICAgICAgICAgICAgICAgICBoYnVmWzBdID0gaG9sZCAmIDI1NTsKICAgICAgICAgICAgICAgICAgaGJ1ZlsxXSA9IGhvbGQgPj4+IDggJiAyNTU7CiAgICAgICAgICAgICAgICAgIGhidWZbMl0gPSBob2xkID4+PiAxNiAmIDI1NTsKICAgICAgICAgICAgICAgICAgaGJ1ZlszXSA9IGhvbGQgPj4+IDI0ICYgMjU1OwogICAgICAgICAgICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyKHN0YXRlLmNoZWNrLCBoYnVmLCA0LCAwKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGhvbGQgPSAwOwogICAgICAgICAgICAgICAgYml0cyA9IDA7CiAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gT1M7CiAgICAgICAgICAgICAgY2FzZSBPUzoKICAgICAgICAgICAgICAgIHdoaWxlIChiaXRzIDwgMTYpIHsKICAgICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaGF2ZS0tOwogICAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0czsKICAgICAgICAgICAgICAgICAgYml0cyArPSA4OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHN0YXRlLmhlYWQpIHsKICAgICAgICAgICAgICAgICAgc3RhdGUuaGVhZC54ZmxhZ3MgPSBob2xkICYgMjU1OwogICAgICAgICAgICAgICAgICBzdGF0ZS5oZWFkLm9zID0gaG9sZCA+PiA4OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgNTEyICYmIHN0YXRlLndyYXAgJiA0KSB7CiAgICAgICAgICAgICAgICAgIGhidWZbMF0gPSBob2xkICYgMjU1OwogICAgICAgICAgICAgICAgICBoYnVmWzFdID0gaG9sZCA+Pj4gOCAmIDI1NTsKICAgICAgICAgICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMihzdGF0ZS5jaGVjaywgaGJ1ZiwgMiwgMCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBob2xkID0gMDsKICAgICAgICAgICAgICAgIGJpdHMgPSAwOwogICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEVYTEVOOwogICAgICAgICAgICAgIGNhc2UgRVhMRU46CiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAxMDI0KSB7CiAgICAgICAgICAgICAgICAgIHdoaWxlIChiaXRzIDwgMTYpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBoYXZlLS07CiAgICAgICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7CiAgICAgICAgICAgICAgICAgICAgYml0cyArPSA4OwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIHN0YXRlLmxlbmd0aCA9IGhvbGQ7CiAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGUuaGVhZC5leHRyYV9sZW4gPSBob2xkOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDUxMiAmJiBzdGF0ZS53cmFwICYgNCkgewogICAgICAgICAgICAgICAgICAgIGhidWZbMF0gPSBob2xkICYgMjU1OwogICAgICAgICAgICAgICAgICAgIGhidWZbMV0gPSBob2xkID4+PiA4ICYgMjU1OwogICAgICAgICAgICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzIoc3RhdGUuY2hlY2ssIGhidWYsIDIsIDApOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGhvbGQgPSAwOwogICAgICAgICAgICAgICAgICBiaXRzID0gMDsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdGUuaGVhZCkgewogICAgICAgICAgICAgICAgICBzdGF0ZS5oZWFkLmV4dHJhID0gbnVsbDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBFWFRSQTsKICAgICAgICAgICAgICBjYXNlIEVYVFJBOgogICAgICAgICAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMTAyNCkgewogICAgICAgICAgICAgICAgICBjb3B5ID0gc3RhdGUubGVuZ3RoOwogICAgICAgICAgICAgICAgICBpZiAoY29weSA+IGhhdmUpIHsKICAgICAgICAgICAgICAgICAgICBjb3B5ID0gaGF2ZTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoY29weSkgewogICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7CiAgICAgICAgICAgICAgICAgICAgICBsZW4gPSBzdGF0ZS5oZWFkLmV4dHJhX2xlbiAtIHN0YXRlLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgICAgIGlmICghc3RhdGUuaGVhZC5leHRyYSkgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5oZWFkLmV4dHJhID0gbmV3IFVpbnQ4QXJyYXkoc3RhdGUuaGVhZC5leHRyYV9sZW4pOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgc3RhdGUuaGVhZC5leHRyYS5zZXQoCiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LnN1YmFycmF5KAogICAgICAgICAgICAgICAgICAgICAgICAgIG5leHQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXh0cmEgZmllbGQgaXMgbGltaXRlZCB0byA2NTUzNiBieXRlcwogICAgICAgICAgICAgICAgICAgICAgICAgIC8vIC0gbm8gbmVlZCBmb3IgYWRkaXRpb25hbCBzaXplIGNoZWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCArIGNvcHkKICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgLypsZW4gKyBjb3B5ID4gc3RhdGUuaGVhZC5leHRyYV9tYXggLSBsZW4gPyBzdGF0ZS5oZWFkLmV4dHJhX21heCA6IGNvcHksKi8KICAgICAgICAgICAgICAgICAgICAgICAgbGVuCiAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiA1MTIgJiYgc3RhdGUud3JhcCAmIDQpIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzIoc3RhdGUuY2hlY2ssIGlucHV0LCBjb3B5LCBuZXh0KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaGF2ZSAtPSBjb3B5OwogICAgICAgICAgICAgICAgICAgIG5leHQgKz0gY29weTsKICAgICAgICAgICAgICAgICAgICBzdGF0ZS5sZW5ndGggLT0gY29weTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoc3RhdGUubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBzdGF0ZS5sZW5ndGggPSAwOwogICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IE5BTUU7CiAgICAgICAgICAgICAgY2FzZSBOQU1FOgogICAgICAgICAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMjA0OCkgewogICAgICAgICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBjb3B5ID0gMDsKICAgICAgICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgICAgICAgIGxlbiA9IGlucHV0W25leHQgKyBjb3B5KytdOwogICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5oZWFkICYmIGxlbiAmJiBzdGF0ZS5sZW5ndGggPCA2NTUzNikgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGUuaGVhZC5uYW1lICs9IFN0cmluZy5mcm9tQ2hhckNvZGUobGVuKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKGxlbiAmJiBjb3B5IDwgaGF2ZSk7CiAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDUxMiAmJiBzdGF0ZS53cmFwICYgNCkgewogICAgICAgICAgICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzIoc3RhdGUuY2hlY2ssIGlucHV0LCBjb3B5LCBuZXh0KTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBoYXZlIC09IGNvcHk7CiAgICAgICAgICAgICAgICAgIG5leHQgKz0gY29weTsKICAgICAgICAgICAgICAgICAgaWYgKGxlbikgewogICAgICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0ZS5oZWFkKSB7CiAgICAgICAgICAgICAgICAgIHN0YXRlLmhlYWQubmFtZSA9IG51bGw7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBzdGF0ZS5sZW5ndGggPSAwOwogICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IENPTU1FTlQ7CiAgICAgICAgICAgICAgY2FzZSBDT01NRU5UOgogICAgICAgICAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgNDA5NikgewogICAgICAgICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBjb3B5ID0gMDsKICAgICAgICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgICAgICAgIGxlbiA9IGlucHV0W25leHQgKyBjb3B5KytdOwogICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5oZWFkICYmIGxlbiAmJiBzdGF0ZS5sZW5ndGggPCA2NTUzNikgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGUuaGVhZC5jb21tZW50ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUobGVuKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKGxlbiAmJiBjb3B5IDwgaGF2ZSk7CiAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDUxMiAmJiBzdGF0ZS53cmFwICYgNCkgewogICAgICAgICAgICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzIoc3RhdGUuY2hlY2ssIGlucHV0LCBjb3B5LCBuZXh0KTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBoYXZlIC09IGNvcHk7CiAgICAgICAgICAgICAgICAgIG5leHQgKz0gY29weTsKICAgICAgICAgICAgICAgICAgaWYgKGxlbikgewogICAgICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0ZS5oZWFkKSB7CiAgICAgICAgICAgICAgICAgIHN0YXRlLmhlYWQuY29tbWVudCA9IG51bGw7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gSENSQzsKICAgICAgICAgICAgICBjYXNlIEhDUkM6CiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiA1MTIpIHsKICAgICAgICAgICAgICAgICAgd2hpbGUgKGJpdHMgPCAxNikgewogICAgICAgICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGhhdmUtLTsKICAgICAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0czsKICAgICAgICAgICAgICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLndyYXAgJiA0ICYmIGhvbGQgIT09IChzdGF0ZS5jaGVjayAmIDY1NTM1KSkgewogICAgICAgICAgICAgICAgICAgIHN0cm0ubXNnID0gImhlYWRlciBjcmMgbWlzbWF0Y2giOwogICAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaG9sZCA9IDA7CiAgICAgICAgICAgICAgICAgIGJpdHMgPSAwOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHN0YXRlLmhlYWQpIHsKICAgICAgICAgICAgICAgICAgc3RhdGUuaGVhZC5oY3JjID0gc3RhdGUuZmxhZ3MgPj4gOSAmIDE7CiAgICAgICAgICAgICAgICAgIHN0YXRlLmhlYWQuZG9uZSA9IHRydWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBzdHJtLmFkbGVyID0gc3RhdGUuY2hlY2sgPSAwOwogICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IFRZUEU7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICBjYXNlIERJQ1RJRDoKICAgICAgICAgICAgICAgIHdoaWxlIChiaXRzIDwgMzIpIHsKICAgICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaGF2ZS0tOwogICAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0czsKICAgICAgICAgICAgICAgICAgYml0cyArPSA4OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID0genN3YXAzMihob2xkKTsKICAgICAgICAgICAgICAgIGhvbGQgPSAwOwogICAgICAgICAgICAgICAgYml0cyA9IDA7CiAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gRElDVDsKICAgICAgICAgICAgICBjYXNlIERJQ1Q6CiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuaGF2ZWRpY3QgPT09IDApIHsKICAgICAgICAgICAgICAgICAgc3RybS5uZXh0X291dCA9IHB1dDsKICAgICAgICAgICAgICAgICAgc3RybS5hdmFpbF9vdXQgPSBsZWZ0OwogICAgICAgICAgICAgICAgICBzdHJtLm5leHRfaW4gPSBuZXh0OwogICAgICAgICAgICAgICAgICBzdHJtLmF2YWlsX2luID0gaGF2ZTsKICAgICAgICAgICAgICAgICAgc3RhdGUuaG9sZCA9IGhvbGQ7CiAgICAgICAgICAgICAgICAgIHN0YXRlLmJpdHMgPSBiaXRzOwogICAgICAgICAgICAgICAgICByZXR1cm4gWl9ORUVEX0RJQ1Q7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBzdHJtLmFkbGVyID0gc3RhdGUuY2hlY2sgPSAxOwogICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IFRZUEU7CiAgICAgICAgICAgICAgY2FzZSBUWVBFOgogICAgICAgICAgICAgICAgaWYgKGZsdXNoID09PSBaX0JMT0NLIHx8IGZsdXNoID09PSBaX1RSRUVTKSB7CiAgICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBjYXNlIFRZUEVETzoKICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5sYXN0KSB7CiAgICAgICAgICAgICAgICAgIGhvbGQgPj4+PSBiaXRzICYgNzsKICAgICAgICAgICAgICAgICAgYml0cyAtPSBiaXRzICYgNzsKICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IENIRUNLOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHdoaWxlIChiaXRzIDwgMykgewogICAgICAgICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBoYXZlLS07CiAgICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzOwogICAgICAgICAgICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBzdGF0ZS5sYXN0ID0gaG9sZCAmIDE7CiAgICAgICAgICAgICAgICBob2xkID4+Pj0gMTsKICAgICAgICAgICAgICAgIGJpdHMgLT0gMTsKICAgICAgICAgICAgICAgIHN3aXRjaCAoaG9sZCAmIDMpIHsKICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBTVE9SRUQ7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICAgICAgICBmaXhlZHRhYmxlcyhzdGF0ZSk7CiAgICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IExFTl87CiAgICAgICAgICAgICAgICAgICAgaWYgKGZsdXNoID09PSBaX1RSRUVTKSB7CiAgICAgICAgICAgICAgICAgICAgICBob2xkID4+Pj0gMjsKICAgICAgICAgICAgICAgICAgICAgIGJpdHMgLT0gMjsKICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gVEFCTEU7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICJpbnZhbGlkIGJsb2NrIHR5cGUiOwogICAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBob2xkID4+Pj0gMjsKICAgICAgICAgICAgICAgIGJpdHMgLT0gMjsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIGNhc2UgU1RPUkVEOgogICAgICAgICAgICAgICAgaG9sZCA+Pj49IGJpdHMgJiA3OwogICAgICAgICAgICAgICAgYml0cyAtPSBiaXRzICYgNzsKICAgICAgICAgICAgICAgIHdoaWxlIChiaXRzIDwgMzIpIHsKICAgICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaGF2ZS0tOwogICAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0czsKICAgICAgICAgICAgICAgICAgYml0cyArPSA4OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKChob2xkICYgNjU1MzUpICE9PSAoaG9sZCA+Pj4gMTYgXiA2NTUzNSkpIHsKICAgICAgICAgICAgICAgICAgc3RybS5tc2cgPSAiaW52YWxpZCBzdG9yZWQgYmxvY2sgbGVuZ3RocyI7CiAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgc3RhdGUubGVuZ3RoID0gaG9sZCAmIDY1NTM1OwogICAgICAgICAgICAgICAgaG9sZCA9IDA7CiAgICAgICAgICAgICAgICBiaXRzID0gMDsKICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBDT1BZXzsKICAgICAgICAgICAgICAgIGlmIChmbHVzaCA9PT0gWl9UUkVFUykgewogICAgICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgY2FzZSBDT1BZXzoKICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBDT1BZOwogICAgICAgICAgICAgIGNhc2UgQ09QWToKICAgICAgICAgICAgICAgIGNvcHkgPSBzdGF0ZS5sZW5ndGg7CiAgICAgICAgICAgICAgICBpZiAoY29weSkgewogICAgICAgICAgICAgICAgICBpZiAoY29weSA+IGhhdmUpIHsKICAgICAgICAgICAgICAgICAgICBjb3B5ID0gaGF2ZTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoY29weSA+IGxlZnQpIHsKICAgICAgICAgICAgICAgICAgICBjb3B5ID0gbGVmdDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoY29weSA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBvdXRwdXQuc2V0KGlucHV0LnN1YmFycmF5KG5leHQsIG5leHQgKyBjb3B5KSwgcHV0KTsKICAgICAgICAgICAgICAgICAgaGF2ZSAtPSBjb3B5OwogICAgICAgICAgICAgICAgICBuZXh0ICs9IGNvcHk7CiAgICAgICAgICAgICAgICAgIGxlZnQgLT0gY29weTsKICAgICAgICAgICAgICAgICAgcHV0ICs9IGNvcHk7CiAgICAgICAgICAgICAgICAgIHN0YXRlLmxlbmd0aCAtPSBjb3B5OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBUWVBFOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgY2FzZSBUQUJMRToKICAgICAgICAgICAgICAgIHdoaWxlIChiaXRzIDwgMTQpIHsKICAgICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaGF2ZS0tOwogICAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0czsKICAgICAgICAgICAgICAgICAgYml0cyArPSA4OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgc3RhdGUubmxlbiA9IChob2xkICYgMzEpICsgMjU3OwogICAgICAgICAgICAgICAgaG9sZCA+Pj49IDU7CiAgICAgICAgICAgICAgICBiaXRzIC09IDU7CiAgICAgICAgICAgICAgICBzdGF0ZS5uZGlzdCA9IChob2xkICYgMzEpICsgMTsKICAgICAgICAgICAgICAgIGhvbGQgPj4+PSA1OwogICAgICAgICAgICAgICAgYml0cyAtPSA1OwogICAgICAgICAgICAgICAgc3RhdGUubmNvZGUgPSAoaG9sZCAmIDE1KSArIDQ7CiAgICAgICAgICAgICAgICBob2xkID4+Pj0gNDsKICAgICAgICAgICAgICAgIGJpdHMgLT0gNDsKICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5ubGVuID4gMjg2IHx8IHN0YXRlLm5kaXN0ID4gMzApIHsKICAgICAgICAgICAgICAgICAgc3RybS5tc2cgPSAidG9vIG1hbnkgbGVuZ3RoIG9yIGRpc3RhbmNlIHN5bWJvbHMiOwogICAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHN0YXRlLmhhdmUgPSAwOwogICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IExFTkxFTlM7CiAgICAgICAgICAgICAgY2FzZSBMRU5MRU5TOgogICAgICAgICAgICAgICAgd2hpbGUgKHN0YXRlLmhhdmUgPCBzdGF0ZS5uY29kZSkgewogICAgICAgICAgICAgICAgICB3aGlsZSAoYml0cyA8IDMpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBoYXZlLS07CiAgICAgICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7CiAgICAgICAgICAgICAgICAgICAgYml0cyArPSA4OwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIHN0YXRlLmxlbnNbb3JkZXJbc3RhdGUuaGF2ZSsrXV0gPSBob2xkICYgNzsKICAgICAgICAgICAgICAgICAgaG9sZCA+Pj49IDM7CiAgICAgICAgICAgICAgICAgIGJpdHMgLT0gMzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHdoaWxlIChzdGF0ZS5oYXZlIDwgMTkpIHsKICAgICAgICAgICAgICAgICAgc3RhdGUubGVuc1tvcmRlcltzdGF0ZS5oYXZlKytdXSA9IDA7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBzdGF0ZS5sZW5jb2RlID0gc3RhdGUubGVuZHluOwogICAgICAgICAgICAgICAgc3RhdGUubGVuYml0cyA9IDc7CiAgICAgICAgICAgICAgICBvcHRzID0geyBiaXRzOiBzdGF0ZS5sZW5iaXRzIH07CiAgICAgICAgICAgICAgICByZXQgPSBpbmZsYXRlX3RhYmxlKENPREVTLCBzdGF0ZS5sZW5zLCAwLCAxOSwgc3RhdGUubGVuY29kZSwgMCwgc3RhdGUud29yaywgb3B0cyk7CiAgICAgICAgICAgICAgICBzdGF0ZS5sZW5iaXRzID0gb3B0cy5iaXRzOwogICAgICAgICAgICAgICAgaWYgKHJldCkgewogICAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICJpbnZhbGlkIGNvZGUgbGVuZ3RocyBzZXQiOwogICAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHN0YXRlLmhhdmUgPSAwOwogICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IENPREVMRU5TOwogICAgICAgICAgICAgIGNhc2UgQ09ERUxFTlM6CiAgICAgICAgICAgICAgICB3aGlsZSAoc3RhdGUuaGF2ZSA8IHN0YXRlLm5sZW4gKyBzdGF0ZS5uZGlzdCkgewogICAgICAgICAgICAgICAgICBmb3IgKDsgOyApIHsKICAgICAgICAgICAgICAgICAgICBoZXJlID0gc3RhdGUubGVuY29kZVtob2xkICYgKDEgPDwgc3RhdGUubGVuYml0cykgLSAxXTsKICAgICAgICAgICAgICAgICAgICBoZXJlX2JpdHMgPSBoZXJlID4+PiAyNDsKICAgICAgICAgICAgICAgICAgICBoZXJlX29wID0gaGVyZSA+Pj4gMTYgJiAyNTU7CiAgICAgICAgICAgICAgICAgICAgaGVyZV92YWwgPSBoZXJlICYgNjU1MzU7CiAgICAgICAgICAgICAgICAgICAgaWYgKGhlcmVfYml0cyA8PSBiaXRzKSB7CiAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaGF2ZS0tOwogICAgICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzOwogICAgICAgICAgICAgICAgICAgIGJpdHMgKz0gODsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoaGVyZV92YWwgPCAxNikgewogICAgICAgICAgICAgICAgICAgIGhvbGQgPj4+PSBoZXJlX2JpdHM7CiAgICAgICAgICAgICAgICAgICAgYml0cyAtPSBoZXJlX2JpdHM7CiAgICAgICAgICAgICAgICAgICAgc3RhdGUubGVuc1tzdGF0ZS5oYXZlKytdID0gaGVyZV92YWw7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGhlcmVfdmFsID09PSAxNikgewogICAgICAgICAgICAgICAgICAgICAgbiA9IGhlcmVfYml0cyArIDI7CiAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoYml0cyA8IG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgaGF2ZS0tOwogICAgICAgICAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0czsKICAgICAgICAgICAgICAgICAgICAgICAgYml0cyArPSA4OwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgaG9sZCA+Pj49IGhlcmVfYml0czsKICAgICAgICAgICAgICAgICAgICAgIGJpdHMgLT0gaGVyZV9iaXRzOwogICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLmhhdmUgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RybS5tc2cgPSAiaW52YWxpZCBiaXQgbGVuZ3RoIHJlcGVhdCI7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgbGVuID0gc3RhdGUubGVuc1tzdGF0ZS5oYXZlIC0gMV07CiAgICAgICAgICAgICAgICAgICAgICBjb3B5ID0gMyArIChob2xkICYgMyk7CiAgICAgICAgICAgICAgICAgICAgICBob2xkID4+Pj0gMjsKICAgICAgICAgICAgICAgICAgICAgIGJpdHMgLT0gMjsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGhlcmVfdmFsID09PSAxNykgewogICAgICAgICAgICAgICAgICAgICAgbiA9IGhlcmVfYml0cyArIDM7CiAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoYml0cyA8IG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgaGF2ZS0tOwogICAgICAgICAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0czsKICAgICAgICAgICAgICAgICAgICAgICAgYml0cyArPSA4OwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgaG9sZCA+Pj49IGhlcmVfYml0czsKICAgICAgICAgICAgICAgICAgICAgIGJpdHMgLT0gaGVyZV9iaXRzOwogICAgICAgICAgICAgICAgICAgICAgbGVuID0gMDsKICAgICAgICAgICAgICAgICAgICAgIGNvcHkgPSAzICsgKGhvbGQgJiA3KTsKICAgICAgICAgICAgICAgICAgICAgIGhvbGQgPj4+PSAzOwogICAgICAgICAgICAgICAgICAgICAgYml0cyAtPSAzOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICBuID0gaGVyZV9iaXRzICsgNzsKICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChiaXRzIDwgbikgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBoYXZlLS07CiAgICAgICAgICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzOwogICAgICAgICAgICAgICAgICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBob2xkID4+Pj0gaGVyZV9iaXRzOwogICAgICAgICAgICAgICAgICAgICAgYml0cyAtPSBoZXJlX2JpdHM7CiAgICAgICAgICAgICAgICAgICAgICBsZW4gPSAwOwogICAgICAgICAgICAgICAgICAgICAgY29weSA9IDExICsgKGhvbGQgJiAxMjcpOwogICAgICAgICAgICAgICAgICAgICAgaG9sZCA+Pj49IDc7CiAgICAgICAgICAgICAgICAgICAgICBiaXRzIC09IDc7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5oYXZlICsgY29weSA+IHN0YXRlLm5sZW4gKyBzdGF0ZS5uZGlzdCkgewogICAgICAgICAgICAgICAgICAgICAgc3RybS5tc2cgPSAiaW52YWxpZCBiaXQgbGVuZ3RoIHJlcGVhdCI7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEOwogICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHdoaWxlIChjb3B5LS0pIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmxlbnNbc3RhdGUuaGF2ZSsrXSA9IGxlbjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5tb2RlID09PSBCQUQpIHsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoc3RhdGUubGVuc1syNTZdID09PSAwKSB7CiAgICAgICAgICAgICAgICAgIHN0cm0ubXNnID0gImludmFsaWQgY29kZSAtLSBtaXNzaW5nIGVuZC1vZi1ibG9jayI7CiAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgc3RhdGUubGVuYml0cyA9IDk7CiAgICAgICAgICAgICAgICBvcHRzID0geyBiaXRzOiBzdGF0ZS5sZW5iaXRzIH07CiAgICAgICAgICAgICAgICByZXQgPSBpbmZsYXRlX3RhYmxlKExFTlMsIHN0YXRlLmxlbnMsIDAsIHN0YXRlLm5sZW4sIHN0YXRlLmxlbmNvZGUsIDAsIHN0YXRlLndvcmssIG9wdHMpOwogICAgICAgICAgICAgICAgc3RhdGUubGVuYml0cyA9IG9wdHMuYml0czsKICAgICAgICAgICAgICAgIGlmIChyZXQpIHsKICAgICAgICAgICAgICAgICAgc3RybS5tc2cgPSAiaW52YWxpZCBsaXRlcmFsL2xlbmd0aHMgc2V0IjsKICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBzdGF0ZS5kaXN0Yml0cyA9IDY7CiAgICAgICAgICAgICAgICBzdGF0ZS5kaXN0Y29kZSA9IHN0YXRlLmRpc3RkeW47CiAgICAgICAgICAgICAgICBvcHRzID0geyBiaXRzOiBzdGF0ZS5kaXN0Yml0cyB9OwogICAgICAgICAgICAgICAgcmV0ID0gaW5mbGF0ZV90YWJsZShESVNUUywgc3RhdGUubGVucywgc3RhdGUubmxlbiwgc3RhdGUubmRpc3QsIHN0YXRlLmRpc3Rjb2RlLCAwLCBzdGF0ZS53b3JrLCBvcHRzKTsKICAgICAgICAgICAgICAgIHN0YXRlLmRpc3RiaXRzID0gb3B0cy5iaXRzOwogICAgICAgICAgICAgICAgaWYgKHJldCkgewogICAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICJpbnZhbGlkIGRpc3RhbmNlcyBzZXQiOwogICAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBMRU5fOwogICAgICAgICAgICAgICAgaWYgKGZsdXNoID09PSBaX1RSRUVTKSB7CiAgICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBjYXNlIExFTl86CiAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gTEVOOwogICAgICAgICAgICAgIGNhc2UgTEVOOgogICAgICAgICAgICAgICAgaWYgKGhhdmUgPj0gNiAmJiBsZWZ0ID49IDI1OCkgewogICAgICAgICAgICAgICAgICBzdHJtLm5leHRfb3V0ID0gcHV0OwogICAgICAgICAgICAgICAgICBzdHJtLmF2YWlsX291dCA9IGxlZnQ7CiAgICAgICAgICAgICAgICAgIHN0cm0ubmV4dF9pbiA9IG5leHQ7CiAgICAgICAgICAgICAgICAgIHN0cm0uYXZhaWxfaW4gPSBoYXZlOwogICAgICAgICAgICAgICAgICBzdGF0ZS5ob2xkID0gaG9sZDsKICAgICAgICAgICAgICAgICAgc3RhdGUuYml0cyA9IGJpdHM7CiAgICAgICAgICAgICAgICAgIGluZmxhdGVfZmFzdChzdHJtLCBfb3V0KTsKICAgICAgICAgICAgICAgICAgcHV0ID0gc3RybS5uZXh0X291dDsKICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gc3RybS5vdXRwdXQ7CiAgICAgICAgICAgICAgICAgIGxlZnQgPSBzdHJtLmF2YWlsX291dDsKICAgICAgICAgICAgICAgICAgbmV4dCA9IHN0cm0ubmV4dF9pbjsKICAgICAgICAgICAgICAgICAgaW5wdXQgPSBzdHJtLmlucHV0OwogICAgICAgICAgICAgICAgICBoYXZlID0gc3RybS5hdmFpbF9pbjsKICAgICAgICAgICAgICAgICAgaG9sZCA9IHN0YXRlLmhvbGQ7CiAgICAgICAgICAgICAgICAgIGJpdHMgPSBzdGF0ZS5iaXRzOwogICAgICAgICAgICAgICAgICBpZiAoc3RhdGUubW9kZSA9PT0gVFlQRSkgewogICAgICAgICAgICAgICAgICAgIHN0YXRlLmJhY2sgPSAtMTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHN0YXRlLmJhY2sgPSAwOwogICAgICAgICAgICAgICAgZm9yICg7IDsgKSB7CiAgICAgICAgICAgICAgICAgIGhlcmUgPSBzdGF0ZS5sZW5jb2RlW2hvbGQgJiAoMSA8PCBzdGF0ZS5sZW5iaXRzKSAtIDFdOwogICAgICAgICAgICAgICAgICBoZXJlX2JpdHMgPSBoZXJlID4+PiAyNDsKICAgICAgICAgICAgICAgICAgaGVyZV9vcCA9IGhlcmUgPj4+IDE2ICYgMjU1OwogICAgICAgICAgICAgICAgICBoZXJlX3ZhbCA9IGhlcmUgJiA2NTUzNTsKICAgICAgICAgICAgICAgICAgaWYgKGhlcmVfYml0cyA8PSBiaXRzKSB7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaGF2ZS0tOwogICAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0czsKICAgICAgICAgICAgICAgICAgYml0cyArPSA4OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKGhlcmVfb3AgJiYgKGhlcmVfb3AgJiAyNDApID09PSAwKSB7CiAgICAgICAgICAgICAgICAgIGxhc3RfYml0cyA9IGhlcmVfYml0czsKICAgICAgICAgICAgICAgICAgbGFzdF9vcCA9IGhlcmVfb3A7CiAgICAgICAgICAgICAgICAgIGxhc3RfdmFsID0gaGVyZV92YWw7CiAgICAgICAgICAgICAgICAgIGZvciAoOyA7ICkgewogICAgICAgICAgICAgICAgICAgIGhlcmUgPSBzdGF0ZS5sZW5jb2RlW2xhc3RfdmFsICsgKChob2xkICYgKDEgPDwgbGFzdF9iaXRzICsgbGFzdF9vcCkgLSAxKSA+PiBsYXN0X2JpdHMpXTsKICAgICAgICAgICAgICAgICAgICBoZXJlX2JpdHMgPSBoZXJlID4+PiAyNDsKICAgICAgICAgICAgICAgICAgICBoZXJlX29wID0gaGVyZSA+Pj4gMTYgJiAyNTU7CiAgICAgICAgICAgICAgICAgICAgaGVyZV92YWwgPSBoZXJlICYgNjU1MzU7CiAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3RfYml0cyArIGhlcmVfYml0cyA8PSBiaXRzKSB7CiAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaGF2ZS0tOwogICAgICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzOwogICAgICAgICAgICAgICAgICAgIGJpdHMgKz0gODsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBob2xkID4+Pj0gbGFzdF9iaXRzOwogICAgICAgICAgICAgICAgICBiaXRzIC09IGxhc3RfYml0czsKICAgICAgICAgICAgICAgICAgc3RhdGUuYmFjayArPSBsYXN0X2JpdHM7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBob2xkID4+Pj0gaGVyZV9iaXRzOwogICAgICAgICAgICAgICAgYml0cyAtPSBoZXJlX2JpdHM7CiAgICAgICAgICAgICAgICBzdGF0ZS5iYWNrICs9IGhlcmVfYml0czsKICAgICAgICAgICAgICAgIHN0YXRlLmxlbmd0aCA9IGhlcmVfdmFsOwogICAgICAgICAgICAgICAgaWYgKGhlcmVfb3AgPT09IDApIHsKICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IExJVDsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoaGVyZV9vcCAmIDMyKSB7CiAgICAgICAgICAgICAgICAgIHN0YXRlLmJhY2sgPSAtMTsKICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IFRZUEU7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKGhlcmVfb3AgJiA2NCkgewogICAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICJpbnZhbGlkIGxpdGVyYWwvbGVuZ3RoIGNvZGUiOwogICAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHN0YXRlLmV4dHJhID0gaGVyZV9vcCAmIDE1OwogICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IExFTkVYVDsKICAgICAgICAgICAgICBjYXNlIExFTkVYVDoKICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5leHRyYSkgewogICAgICAgICAgICAgICAgICBuID0gc3RhdGUuZXh0cmE7CiAgICAgICAgICAgICAgICAgIHdoaWxlIChiaXRzIDwgbikgewogICAgICAgICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGhhdmUtLTsKICAgICAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0czsKICAgICAgICAgICAgICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgc3RhdGUubGVuZ3RoICs9IGhvbGQgJiAoMSA8PCBzdGF0ZS5leHRyYSkgLSAxOwogICAgICAgICAgICAgICAgICBob2xkID4+Pj0gc3RhdGUuZXh0cmE7CiAgICAgICAgICAgICAgICAgIGJpdHMgLT0gc3RhdGUuZXh0cmE7CiAgICAgICAgICAgICAgICAgIHN0YXRlLmJhY2sgKz0gc3RhdGUuZXh0cmE7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBzdGF0ZS53YXMgPSBzdGF0ZS5sZW5ndGg7CiAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gRElTVDsKICAgICAgICAgICAgICBjYXNlIERJU1Q6CiAgICAgICAgICAgICAgICBmb3IgKDsgOyApIHsKICAgICAgICAgICAgICAgICAgaGVyZSA9IHN0YXRlLmRpc3Rjb2RlW2hvbGQgJiAoMSA8PCBzdGF0ZS5kaXN0Yml0cykgLSAxXTsKICAgICAgICAgICAgICAgICAgaGVyZV9iaXRzID0gaGVyZSA+Pj4gMjQ7CiAgICAgICAgICAgICAgICAgIGhlcmVfb3AgPSBoZXJlID4+PiAxNiAmIDI1NTsKICAgICAgICAgICAgICAgICAgaGVyZV92YWwgPSBoZXJlICYgNjU1MzU7CiAgICAgICAgICAgICAgICAgIGlmIChoZXJlX2JpdHMgPD0gYml0cykgewogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGhhdmUtLTsKICAgICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7CiAgICAgICAgICAgICAgICAgIGJpdHMgKz0gODsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICgoaGVyZV9vcCAmIDI0MCkgPT09IDApIHsKICAgICAgICAgICAgICAgICAgbGFzdF9iaXRzID0gaGVyZV9iaXRzOwogICAgICAgICAgICAgICAgICBsYXN0X29wID0gaGVyZV9vcDsKICAgICAgICAgICAgICAgICAgbGFzdF92YWwgPSBoZXJlX3ZhbDsKICAgICAgICAgICAgICAgICAgZm9yICg7IDsgKSB7CiAgICAgICAgICAgICAgICAgICAgaGVyZSA9IHN0YXRlLmRpc3Rjb2RlW2xhc3RfdmFsICsgKChob2xkICYgKDEgPDwgbGFzdF9iaXRzICsgbGFzdF9vcCkgLSAxKSA+PiBsYXN0X2JpdHMpXTsKICAgICAgICAgICAgICAgICAgICBoZXJlX2JpdHMgPSBoZXJlID4+PiAyNDsKICAgICAgICAgICAgICAgICAgICBoZXJlX29wID0gaGVyZSA+Pj4gMTYgJiAyNTU7CiAgICAgICAgICAgICAgICAgICAgaGVyZV92YWwgPSBoZXJlICYgNjU1MzU7CiAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3RfYml0cyArIGhlcmVfYml0cyA8PSBiaXRzKSB7CiAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaGF2ZS0tOwogICAgICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzOwogICAgICAgICAgICAgICAgICAgIGJpdHMgKz0gODsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBob2xkID4+Pj0gbGFzdF9iaXRzOwogICAgICAgICAgICAgICAgICBiaXRzIC09IGxhc3RfYml0czsKICAgICAgICAgICAgICAgICAgc3RhdGUuYmFjayArPSBsYXN0X2JpdHM7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBob2xkID4+Pj0gaGVyZV9iaXRzOwogICAgICAgICAgICAgICAgYml0cyAtPSBoZXJlX2JpdHM7CiAgICAgICAgICAgICAgICBzdGF0ZS5iYWNrICs9IGhlcmVfYml0czsKICAgICAgICAgICAgICAgIGlmIChoZXJlX29wICYgNjQpIHsKICAgICAgICAgICAgICAgICAgc3RybS5tc2cgPSAiaW52YWxpZCBkaXN0YW5jZSBjb2RlIjsKICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBzdGF0ZS5vZmZzZXQgPSBoZXJlX3ZhbDsKICAgICAgICAgICAgICAgIHN0YXRlLmV4dHJhID0gaGVyZV9vcCAmIDE1OwogICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IERJU1RFWFQ7CiAgICAgICAgICAgICAgY2FzZSBESVNURVhUOgogICAgICAgICAgICAgICAgaWYgKHN0YXRlLmV4dHJhKSB7CiAgICAgICAgICAgICAgICAgIG4gPSBzdGF0ZS5leHRyYTsKICAgICAgICAgICAgICAgICAgd2hpbGUgKGJpdHMgPCBuKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaGF2ZS0tOwogICAgICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzOwogICAgICAgICAgICAgICAgICAgIGJpdHMgKz0gODsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBzdGF0ZS5vZmZzZXQgKz0gaG9sZCAmICgxIDw8IHN0YXRlLmV4dHJhKSAtIDE7CiAgICAgICAgICAgICAgICAgIGhvbGQgPj4+PSBzdGF0ZS5leHRyYTsKICAgICAgICAgICAgICAgICAgYml0cyAtPSBzdGF0ZS5leHRyYTsKICAgICAgICAgICAgICAgICAgc3RhdGUuYmFjayArPSBzdGF0ZS5leHRyYTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5vZmZzZXQgPiBzdGF0ZS5kbWF4KSB7CiAgICAgICAgICAgICAgICAgIHN0cm0ubXNnID0gImludmFsaWQgZGlzdGFuY2UgdG9vIGZhciBiYWNrIjsKICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gTUFUQ0g7CiAgICAgICAgICAgICAgY2FzZSBNQVRDSDoKICAgICAgICAgICAgICAgIGlmIChsZWZ0ID09PSAwKSB7CiAgICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNvcHkgPSBfb3V0IC0gbGVmdDsKICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5vZmZzZXQgPiBjb3B5KSB7CiAgICAgICAgICAgICAgICAgIGNvcHkgPSBzdGF0ZS5vZmZzZXQgLSBjb3B5OwogICAgICAgICAgICAgICAgICBpZiAoY29weSA+IHN0YXRlLndoYXZlKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLnNhbmUpIHsKICAgICAgICAgICAgICAgICAgICAgIHN0cm0ubXNnID0gImludmFsaWQgZGlzdGFuY2UgdG9vIGZhciBiYWNrIjsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7CiAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKGNvcHkgPiBzdGF0ZS53bmV4dCkgewogICAgICAgICAgICAgICAgICAgIGNvcHkgLT0gc3RhdGUud25leHQ7CiAgICAgICAgICAgICAgICAgICAgZnJvbSA9IHN0YXRlLndzaXplIC0gY29weTsKICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBmcm9tID0gc3RhdGUud25leHQgLSBjb3B5OwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChjb3B5ID4gc3RhdGUubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgY29weSA9IHN0YXRlLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBmcm9tX3NvdXJjZSA9IHN0YXRlLndpbmRvdzsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIGZyb21fc291cmNlID0gb3V0cHV0OwogICAgICAgICAgICAgICAgICBmcm9tID0gcHV0IC0gc3RhdGUub2Zmc2V0OwogICAgICAgICAgICAgICAgICBjb3B5ID0gc3RhdGUubGVuZ3RoOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKGNvcHkgPiBsZWZ0KSB7CiAgICAgICAgICAgICAgICAgIGNvcHkgPSBsZWZ0OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgbGVmdCAtPSBjb3B5OwogICAgICAgICAgICAgICAgc3RhdGUubGVuZ3RoIC09IGNvcHk7CiAgICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICAgIG91dHB1dFtwdXQrK10gPSBmcm9tX3NvdXJjZVtmcm9tKytdOwogICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1jb3B5KTsKICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IExFTjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIGNhc2UgTElUOgogICAgICAgICAgICAgICAgaWYgKGxlZnQgPT09IDApIHsKICAgICAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgb3V0cHV0W3B1dCsrXSA9IHN0YXRlLmxlbmd0aDsKICAgICAgICAgICAgICAgIGxlZnQtLTsKICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBMRU47CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICBjYXNlIENIRUNLOgogICAgICAgICAgICAgICAgaWYgKHN0YXRlLndyYXApIHsKICAgICAgICAgICAgICAgICAgd2hpbGUgKGJpdHMgPCAzMikgewogICAgICAgICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGhhdmUtLTsKICAgICAgICAgICAgICAgICAgICBob2xkIHw9IGlucHV0W25leHQrK10gPDwgYml0czsKICAgICAgICAgICAgICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgX291dCAtPSBsZWZ0OwogICAgICAgICAgICAgICAgICBzdHJtLnRvdGFsX291dCArPSBfb3V0OwogICAgICAgICAgICAgICAgICBzdGF0ZS50b3RhbCArPSBfb3V0OwogICAgICAgICAgICAgICAgICBpZiAoc3RhdGUud3JhcCAmIDQgJiYgX291dCkgewogICAgICAgICAgICAgICAgICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS5jaGVjayA9IC8qVVBEQVRFX0NIRUNLKHN0YXRlLmNoZWNrLCBwdXQgLSBfb3V0LCBfb3V0KTsqLwogICAgICAgICAgICAgICAgICAgIHN0YXRlLmZsYWdzID8gY3JjMzIoc3RhdGUuY2hlY2ssIG91dHB1dCwgX291dCwgcHV0IC0gX291dCkgOiBhZGxlcjMyKHN0YXRlLmNoZWNrLCBvdXRwdXQsIF9vdXQsIHB1dCAtIF9vdXQpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF9vdXQgPSBsZWZ0OwogICAgICAgICAgICAgICAgICBpZiAoc3RhdGUud3JhcCAmIDQgJiYgKHN0YXRlLmZsYWdzID8gaG9sZCA6IHpzd2FwMzIoaG9sZCkpICE9PSBzdGF0ZS5jaGVjaykgewogICAgICAgICAgICAgICAgICAgIHN0cm0ubXNnID0gImluY29ycmVjdCBkYXRhIGNoZWNrIjsKICAgICAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGhvbGQgPSAwOwogICAgICAgICAgICAgICAgICBiaXRzID0gMDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBMRU5HVEg7CiAgICAgICAgICAgICAgY2FzZSBMRU5HVEg6CiAgICAgICAgICAgICAgICBpZiAoc3RhdGUud3JhcCAmJiBzdGF0ZS5mbGFncykgewogICAgICAgICAgICAgICAgICB3aGlsZSAoYml0cyA8IDMyKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaGF2ZS0tOwogICAgICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzOwogICAgICAgICAgICAgICAgICAgIGJpdHMgKz0gODsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoc3RhdGUud3JhcCAmIDQgJiYgaG9sZCAhPT0gKHN0YXRlLnRvdGFsICYgNDI5NDk2NzI5NSkpIHsKICAgICAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICJpbmNvcnJlY3QgbGVuZ3RoIGNoZWNrIjsKICAgICAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGhvbGQgPSAwOwogICAgICAgICAgICAgICAgICBiaXRzID0gMDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBET05FOwogICAgICAgICAgICAgIGNhc2UgRE9ORToKICAgICAgICAgICAgICAgIHJldCA9IFpfU1RSRUFNX0VORDsKICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICBjYXNlIEJBRDoKICAgICAgICAgICAgICAgIHJldCA9IFpfREFUQV9FUlJPUjsKICAgICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgICBjYXNlIE1FTToKICAgICAgICAgICAgICAgIHJldHVybiBaX01FTV9FUlJPUjsKICAgICAgICAgICAgICBjYXNlIFNZTkM6CiAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIHN0cm0ubmV4dF9vdXQgPSBwdXQ7CiAgICAgICAgc3RybS5hdmFpbF9vdXQgPSBsZWZ0OwogICAgICAgIHN0cm0ubmV4dF9pbiA9IG5leHQ7CiAgICAgICAgc3RybS5hdmFpbF9pbiA9IGhhdmU7CiAgICAgICAgc3RhdGUuaG9sZCA9IGhvbGQ7CiAgICAgICAgc3RhdGUuYml0cyA9IGJpdHM7CiAgICAgICAgaWYgKHN0YXRlLndzaXplIHx8IF9vdXQgIT09IHN0cm0uYXZhaWxfb3V0ICYmIHN0YXRlLm1vZGUgPCBCQUQgJiYgKHN0YXRlLm1vZGUgPCBDSEVDSyB8fCBmbHVzaCAhPT0gWl9GSU5JU0gpKSB7CiAgICAgICAgICBpZiAodXBkYXRld2luZG93KHN0cm0sIHN0cm0ub3V0cHV0LCBzdHJtLm5leHRfb3V0LCBfb3V0IC0gc3RybS5hdmFpbF9vdXQpKSB7CiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBNRU07CiAgICAgICAgICAgIHJldHVybiBaX01FTV9FUlJPUjsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgX2luIC09IHN0cm0uYXZhaWxfaW47CiAgICAgICAgX291dCAtPSBzdHJtLmF2YWlsX291dDsKICAgICAgICBzdHJtLnRvdGFsX2luICs9IF9pbjsKICAgICAgICBzdHJtLnRvdGFsX291dCArPSBfb3V0OwogICAgICAgIHN0YXRlLnRvdGFsICs9IF9vdXQ7CiAgICAgICAgaWYgKHN0YXRlLndyYXAgJiA0ICYmIF9vdXQpIHsKICAgICAgICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS5jaGVjayA9IC8qVVBEQVRFX0NIRUNLKHN0YXRlLmNoZWNrLCBzdHJtLm5leHRfb3V0IC0gX291dCwgX291dCk7Ki8KICAgICAgICAgIHN0YXRlLmZsYWdzID8gY3JjMzIoc3RhdGUuY2hlY2ssIG91dHB1dCwgX291dCwgc3RybS5uZXh0X291dCAtIF9vdXQpIDogYWRsZXIzMihzdGF0ZS5jaGVjaywgb3V0cHV0LCBfb3V0LCBzdHJtLm5leHRfb3V0IC0gX291dCk7CiAgICAgICAgfQogICAgICAgIHN0cm0uZGF0YV90eXBlID0gc3RhdGUuYml0cyArIChzdGF0ZS5sYXN0ID8gNjQgOiAwKSArIChzdGF0ZS5tb2RlID09PSBUWVBFID8gMTI4IDogMCkgKyAoc3RhdGUubW9kZSA9PT0gTEVOXyB8fCBzdGF0ZS5tb2RlID09PSBDT1BZXyA/IDI1NiA6IDApOwogICAgICAgIGlmICgoX2luID09PSAwICYmIF9vdXQgPT09IDAgfHwgZmx1c2ggPT09IFpfRklOSVNIKSAmJiByZXQgPT09IFpfT0spIHsKICAgICAgICAgIHJldCA9IFpfQlVGX0VSUk9SOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmV0OwogICAgICB9OwogICAgICB2YXIgaW5mbGF0ZUVuZCA9IChzdHJtKSA9PiB7CiAgICAgICAgaWYgKGluZmxhdGVTdGF0ZUNoZWNrKHN0cm0pKSB7CiAgICAgICAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7CiAgICAgICAgfQogICAgICAgIGxldCBzdGF0ZSA9IHN0cm0uc3RhdGU7CiAgICAgICAgaWYgKHN0YXRlLndpbmRvdykgewogICAgICAgICAgc3RhdGUud2luZG93ID0gbnVsbDsKICAgICAgICB9CiAgICAgICAgc3RybS5zdGF0ZSA9IG51bGw7CiAgICAgICAgcmV0dXJuIFpfT0s7CiAgICAgIH07CiAgICAgIHZhciBpbmZsYXRlR2V0SGVhZGVyID0gKHN0cm0sIGhlYWQpID0+IHsKICAgICAgICBpZiAoaW5mbGF0ZVN0YXRlQ2hlY2soc3RybSkpIHsKICAgICAgICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjsKICAgICAgICB9CiAgICAgICAgY29uc3Qgc3RhdGUgPSBzdHJtLnN0YXRlOwogICAgICAgIGlmICgoc3RhdGUud3JhcCAmIDIpID09PSAwKSB7CiAgICAgICAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7CiAgICAgICAgfQogICAgICAgIHN0YXRlLmhlYWQgPSBoZWFkOwogICAgICAgIGhlYWQuZG9uZSA9IGZhbHNlOwogICAgICAgIHJldHVybiBaX09LOwogICAgICB9OwogICAgICB2YXIgaW5mbGF0ZVNldERpY3Rpb25hcnkgPSAoc3RybSwgZGljdGlvbmFyeSkgPT4gewogICAgICAgIGNvbnN0IGRpY3RMZW5ndGggPSBkaWN0aW9uYXJ5Lmxlbmd0aDsKICAgICAgICBsZXQgc3RhdGU7CiAgICAgICAgbGV0IGRpY3RpZDsKICAgICAgICBsZXQgcmV0OwogICAgICAgIGlmIChpbmZsYXRlU3RhdGVDaGVjayhzdHJtKSkgewogICAgICAgICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOwogICAgICAgIH0KICAgICAgICBzdGF0ZSA9IHN0cm0uc3RhdGU7CiAgICAgICAgaWYgKHN0YXRlLndyYXAgIT09IDAgJiYgc3RhdGUubW9kZSAhPT0gRElDVCkgewogICAgICAgICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOwogICAgICAgIH0KICAgICAgICBpZiAoc3RhdGUubW9kZSA9PT0gRElDVCkgewogICAgICAgICAgZGljdGlkID0gMTsKICAgICAgICAgIGRpY3RpZCA9IGFkbGVyMzIoZGljdGlkLCBkaWN0aW9uYXJ5LCBkaWN0TGVuZ3RoLCAwKTsKICAgICAgICAgIGlmIChkaWN0aWQgIT09IHN0YXRlLmNoZWNrKSB7CiAgICAgICAgICAgIHJldHVybiBaX0RBVEFfRVJST1I7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldCA9IHVwZGF0ZXdpbmRvdyhzdHJtLCBkaWN0aW9uYXJ5LCBkaWN0TGVuZ3RoLCBkaWN0TGVuZ3RoKTsKICAgICAgICBpZiAocmV0KSB7CiAgICAgICAgICBzdGF0ZS5tb2RlID0gTUVNOwogICAgICAgICAgcmV0dXJuIFpfTUVNX0VSUk9SOwogICAgICAgIH0KICAgICAgICBzdGF0ZS5oYXZlZGljdCA9IDE7CiAgICAgICAgcmV0dXJuIFpfT0s7CiAgICAgIH07CiAgICAgIG1vZHVsZS5leHBvcnRzLmluZmxhdGVSZXNldCA9IGluZmxhdGVSZXNldDsKICAgICAgbW9kdWxlLmV4cG9ydHMuaW5mbGF0ZVJlc2V0MiA9IGluZmxhdGVSZXNldDI7CiAgICAgIG1vZHVsZS5leHBvcnRzLmluZmxhdGVSZXNldEtlZXAgPSBpbmZsYXRlUmVzZXRLZWVwOwogICAgICBtb2R1bGUuZXhwb3J0cy5pbmZsYXRlSW5pdCA9IGluZmxhdGVJbml0OwogICAgICBtb2R1bGUuZXhwb3J0cy5pbmZsYXRlSW5pdDIgPSBpbmZsYXRlSW5pdDI7CiAgICAgIG1vZHVsZS5leHBvcnRzLmluZmxhdGUgPSBpbmZsYXRlOwogICAgICBtb2R1bGUuZXhwb3J0cy5pbmZsYXRlRW5kID0gaW5mbGF0ZUVuZDsKICAgICAgbW9kdWxlLmV4cG9ydHMuaW5mbGF0ZUdldEhlYWRlciA9IGluZmxhdGVHZXRIZWFkZXI7CiAgICAgIG1vZHVsZS5leHBvcnRzLmluZmxhdGVTZXREaWN0aW9uYXJ5ID0gaW5mbGF0ZVNldERpY3Rpb25hcnk7CiAgICAgIG1vZHVsZS5leHBvcnRzLmluZmxhdGVJbmZvID0gInBha28gaW5mbGF0ZSAoZnJvbSBOb2RlY2EgcHJvamVjdCkiOwogICAgfQogIH0pOwoKICAvLyBub2RlX21vZHVsZXMvcGFrby9saWIvdXRpbHMvY29tbW9uLmpzCiAgdmFyIHJlcXVpcmVfY29tbW9uID0gX19jb21tb25KUyh7CiAgICAibm9kZV9tb2R1bGVzL3Bha28vbGliL3V0aWxzL2NvbW1vbi5qcyIoZXhwb3J0czIsIG1vZHVsZSkgewogICAgICAidXNlIHN0cmljdCI7CiAgICAgIHZhciBfaGFzID0gKG9iaiwga2V5KSA9PiB7CiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSk7CiAgICAgIH07CiAgICAgIG1vZHVsZS5leHBvcnRzLmFzc2lnbiA9IGZ1bmN0aW9uKG9iaikgewogICAgICAgIGNvbnN0IHNvdXJjZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpOwogICAgICAgIHdoaWxlIChzb3VyY2VzLmxlbmd0aCkgewogICAgICAgICAgY29uc3Qgc291cmNlID0gc291cmNlcy5zaGlmdCgpOwogICAgICAgICAgaWYgKCFzb3VyY2UpIHsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodHlwZW9mIHNvdXJjZSAhPT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzb3VyY2UgKyAibXVzdCBiZSBub24tb2JqZWN0Iik7CiAgICAgICAgICB9CiAgICAgICAgICBmb3IgKGNvbnN0IHAgaW4gc291cmNlKSB7CiAgICAgICAgICAgIGlmIChfaGFzKHNvdXJjZSwgcCkpIHsKICAgICAgICAgICAgICBvYmpbcF0gPSBzb3VyY2VbcF07CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIG9iajsKICAgICAgfTsKICAgICAgbW9kdWxlLmV4cG9ydHMuZmxhdHRlbkNodW5rcyA9IChjaHVua3MpID0+IHsKICAgICAgICBsZXQgbGVuID0gMDsKICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IGNodW5rcy5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgICAgIGxlbiArPSBjaHVua3NbaV0ubGVuZ3RoOwogICAgICAgIH0KICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgVWludDhBcnJheShsZW4pOwogICAgICAgIGZvciAobGV0IGkgPSAwLCBwb3MgPSAwLCBsID0gY2h1bmtzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgICAgbGV0IGNodW5rID0gY2h1bmtzW2ldOwogICAgICAgICAgcmVzdWx0LnNldChjaHVuaywgcG9zKTsKICAgICAgICAgIHBvcyArPSBjaHVuay5sZW5ndGg7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICB9CiAgfSk7CgogIC8vIG5vZGVfbW9kdWxlcy9wYWtvL2xpYi91dGlscy9zdHJpbmdzLmpzCiAgdmFyIHJlcXVpcmVfc3RyaW5ncyA9IF9fY29tbW9uSlMoewogICAgIm5vZGVfbW9kdWxlcy9wYWtvL2xpYi91dGlscy9zdHJpbmdzLmpzIihleHBvcnRzMiwgbW9kdWxlKSB7CiAgICAgICJ1c2Ugc3RyaWN0IjsKICAgICAgdmFyIFNUUl9BUFBMWV9VSUFfT0sgPSB0cnVlOwogICAgICB0cnkgewogICAgICAgIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgbmV3IFVpbnQ4QXJyYXkoMSkpOwogICAgICB9IGNhdGNoIChfXykgewogICAgICAgIFNUUl9BUFBMWV9VSUFfT0sgPSBmYWxzZTsKICAgICAgfQogICAgICB2YXIgX3V0ZjhsZW4gPSBuZXcgVWludDhBcnJheSgyNTYpOwogICAgICBmb3IgKGxldCBxID0gMDsgcSA8IDI1NjsgcSsrKSB7CiAgICAgICAgX3V0ZjhsZW5bcV0gPSBxID49IDI1MiA/IDYgOiBxID49IDI0OCA/IDUgOiBxID49IDI0MCA/IDQgOiBxID49IDIyNCA/IDMgOiBxID49IDE5MiA/IDIgOiAxOwogICAgICB9CiAgICAgIF91dGY4bGVuWzI1NF0gPSBfdXRmOGxlblsyNTRdID0gMTsKICAgICAgbW9kdWxlLmV4cG9ydHMuc3RyaW5nMmJ1ZiA9IChzdHIpID0+IHsKICAgICAgICBpZiAodHlwZW9mIFRleHRFbmNvZGVyID09PSAiZnVuY3Rpb24iICYmIFRleHRFbmNvZGVyLnByb3RvdHlwZS5lbmNvZGUpIHsKICAgICAgICAgIHJldHVybiBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoc3RyKTsKICAgICAgICB9CiAgICAgICAgbGV0IGJ1ZiwgYywgYzIsIG1fcG9zLCBpLCBzdHJfbGVuID0gc3RyLmxlbmd0aCwgYnVmX2xlbiA9IDA7CiAgICAgICAgZm9yIChtX3BvcyA9IDA7IG1fcG9zIDwgc3RyX2xlbjsgbV9wb3MrKykgewogICAgICAgICAgYyA9IHN0ci5jaGFyQ29kZUF0KG1fcG9zKTsKICAgICAgICAgIGlmICgoYyAmIDY0NTEyKSA9PT0gNTUyOTYgJiYgbV9wb3MgKyAxIDwgc3RyX2xlbikgewogICAgICAgICAgICBjMiA9IHN0ci5jaGFyQ29kZUF0KG1fcG9zICsgMSk7CiAgICAgICAgICAgIGlmICgoYzIgJiA2NDUxMikgPT09IDU2MzIwKSB7CiAgICAgICAgICAgICAgYyA9IDY1NTM2ICsgKGMgLSA1NTI5NiA8PCAxMCkgKyAoYzIgLSA1NjMyMCk7CiAgICAgICAgICAgICAgbV9wb3MrKzsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgYnVmX2xlbiArPSBjIDwgMTI4ID8gMSA6IGMgPCAyMDQ4ID8gMiA6IGMgPCA2NTUzNiA/IDMgOiA0OwogICAgICAgIH0KICAgICAgICBidWYgPSBuZXcgVWludDhBcnJheShidWZfbGVuKTsKICAgICAgICBmb3IgKGkgPSAwLCBtX3BvcyA9IDA7IGkgPCBidWZfbGVuOyBtX3BvcysrKSB7CiAgICAgICAgICBjID0gc3RyLmNoYXJDb2RlQXQobV9wb3MpOwogICAgICAgICAgaWYgKChjICYgNjQ1MTIpID09PSA1NTI5NiAmJiBtX3BvcyArIDEgPCBzdHJfbGVuKSB7CiAgICAgICAgICAgIGMyID0gc3RyLmNoYXJDb2RlQXQobV9wb3MgKyAxKTsKICAgICAgICAgICAgaWYgKChjMiAmIDY0NTEyKSA9PT0gNTYzMjApIHsKICAgICAgICAgICAgICBjID0gNjU1MzYgKyAoYyAtIDU1Mjk2IDw8IDEwKSArIChjMiAtIDU2MzIwKTsKICAgICAgICAgICAgICBtX3BvcysrOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoYyA8IDEyOCkgewogICAgICAgICAgICBidWZbaSsrXSA9IGM7CiAgICAgICAgICB9IGVsc2UgaWYgKGMgPCAyMDQ4KSB7CiAgICAgICAgICAgIGJ1ZltpKytdID0gMTkyIHwgYyA+Pj4gNjsKICAgICAgICAgICAgYnVmW2krK10gPSAxMjggfCBjICYgNjM7CiAgICAgICAgICB9IGVsc2UgaWYgKGMgPCA2NTUzNikgewogICAgICAgICAgICBidWZbaSsrXSA9IDIyNCB8IGMgPj4+IDEyOwogICAgICAgICAgICBidWZbaSsrXSA9IDEyOCB8IGMgPj4+IDYgJiA2MzsKICAgICAgICAgICAgYnVmW2krK10gPSAxMjggfCBjICYgNjM7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBidWZbaSsrXSA9IDI0MCB8IGMgPj4+IDE4OwogICAgICAgICAgICBidWZbaSsrXSA9IDEyOCB8IGMgPj4+IDEyICYgNjM7CiAgICAgICAgICAgIGJ1ZltpKytdID0gMTI4IHwgYyA+Pj4gNiAmIDYzOwogICAgICAgICAgICBidWZbaSsrXSA9IDEyOCB8IGMgJiA2MzsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGJ1ZjsKICAgICAgfTsKICAgICAgdmFyIGJ1ZjJiaW5zdHJpbmcgPSAoYnVmLCBsZW4pID0+IHsKICAgICAgICBpZiAobGVuIDwgNjU1MzQpIHsKICAgICAgICAgIGlmIChidWYuc3ViYXJyYXkgJiYgU1RSX0FQUExZX1VJQV9PSykgewogICAgICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBidWYubGVuZ3RoID09PSBsZW4gPyBidWYgOiBidWYuc3ViYXJyYXkoMCwgbGVuKSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGxldCByZXN1bHQgPSAiIjsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7CiAgICAgICAgICByZXN1bHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICBtb2R1bGUuZXhwb3J0cy5idWYyc3RyaW5nID0gKGJ1ZiwgbWF4MykgPT4gewogICAgICAgIGNvbnN0IGxlbiA9IG1heDMgfHwgYnVmLmxlbmd0aDsKICAgICAgICBpZiAodHlwZW9mIFRleHREZWNvZGVyID09PSAiZnVuY3Rpb24iICYmIFRleHREZWNvZGVyLnByb3RvdHlwZS5kZWNvZGUpIHsKICAgICAgICAgIHJldHVybiBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUoYnVmLnN1YmFycmF5KDAsIG1heDMpKTsKICAgICAgICB9CiAgICAgICAgbGV0IGksIG91dDsKICAgICAgICBjb25zdCB1dGYxNmJ1ZiA9IG5ldyBBcnJheShsZW4gKiAyKTsKICAgICAgICBmb3IgKG91dCA9IDAsIGkgPSAwOyBpIDwgbGVuOyApIHsKICAgICAgICAgIGxldCBjID0gYnVmW2krK107CiAgICAgICAgICBpZiAoYyA8IDEyOCkgewogICAgICAgICAgICB1dGYxNmJ1ZltvdXQrK10gPSBjOwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICAgIGxldCBjX2xlbiA9IF91dGY4bGVuW2NdOwogICAgICAgICAgaWYgKGNfbGVuID4gNCkgewogICAgICAgICAgICB1dGYxNmJ1ZltvdXQrK10gPSA2NTUzMzsKICAgICAgICAgICAgaSArPSBjX2xlbiAtIDE7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgICAgYyAmPSBjX2xlbiA9PT0gMiA/IDMxIDogY19sZW4gPT09IDMgPyAxNSA6IDc7CiAgICAgICAgICB3aGlsZSAoY19sZW4gPiAxICYmIGkgPCBsZW4pIHsKICAgICAgICAgICAgYyA9IGMgPDwgNiB8IGJ1ZltpKytdICYgNjM7CiAgICAgICAgICAgIGNfbGVuLS07CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoY19sZW4gPiAxKSB7CiAgICAgICAgICAgIHV0ZjE2YnVmW291dCsrXSA9IDY1NTMzOwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChjIDwgNjU1MzYpIHsKICAgICAgICAgICAgdXRmMTZidWZbb3V0KytdID0gYzsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGMgLT0gNjU1MzY7CiAgICAgICAgICAgIHV0ZjE2YnVmW291dCsrXSA9IDU1Mjk2IHwgYyA+PiAxMCAmIDEwMjM7CiAgICAgICAgICAgIHV0ZjE2YnVmW291dCsrXSA9IDU2MzIwIHwgYyAmIDEwMjM7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBidWYyYmluc3RyaW5nKHV0ZjE2YnVmLCBvdXQpOwogICAgICB9OwogICAgICBtb2R1bGUuZXhwb3J0cy51dGY4Ym9yZGVyID0gKGJ1ZiwgbWF4MykgPT4gewogICAgICAgIG1heDMgPSBtYXgzIHx8IGJ1Zi5sZW5ndGg7CiAgICAgICAgaWYgKG1heDMgPiBidWYubGVuZ3RoKSB7CiAgICAgICAgICBtYXgzID0gYnVmLmxlbmd0aDsKICAgICAgICB9CiAgICAgICAgbGV0IHBvcyA9IG1heDMgLSAxOwogICAgICAgIHdoaWxlIChwb3MgPj0gMCAmJiAoYnVmW3Bvc10gJiAxOTIpID09PSAxMjgpIHsKICAgICAgICAgIHBvcy0tOwogICAgICAgIH0KICAgICAgICBpZiAocG9zIDwgMCkgewogICAgICAgICAgcmV0dXJuIG1heDM7CiAgICAgICAgfQogICAgICAgIGlmIChwb3MgPT09IDApIHsKICAgICAgICAgIHJldHVybiBtYXgzOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcG9zICsgX3V0ZjhsZW5bYnVmW3Bvc11dID4gbWF4MyA/IHBvcyA6IG1heDM7CiAgICAgIH07CiAgICB9CiAgfSk7CgogIC8vIG5vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL21lc3NhZ2VzLmpzCiAgdmFyIHJlcXVpcmVfbWVzc2FnZXMgPSBfX2NvbW1vbkpTKHsKICAgICJub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9tZXNzYWdlcy5qcyIoZXhwb3J0czIsIG1vZHVsZSkgewogICAgICAidXNlIHN0cmljdCI7CiAgICAgIG1vZHVsZS5leHBvcnRzID0gewogICAgICAgIDI6ICJuZWVkIGRpY3Rpb25hcnkiLAogICAgICAgIC8qIFpfTkVFRF9ESUNUICAgICAgIDIgICovCiAgICAgICAgMTogInN0cmVhbSBlbmQiLAogICAgICAgIC8qIFpfU1RSRUFNX0VORCAgICAgIDEgICovCiAgICAgICAgMDogIiIsCiAgICAgICAgLyogWl9PSyAgICAgICAgICAgICAgMCAgKi8KICAgICAgICAiLTEiOiAiZmlsZSBlcnJvciIsCiAgICAgICAgLyogWl9FUlJOTyAgICAgICAgICgtMSkgKi8KICAgICAgICAiLTIiOiAic3RyZWFtIGVycm9yIiwKICAgICAgICAvKiBaX1NUUkVBTV9FUlJPUiAgKC0yKSAqLwogICAgICAgICItMyI6ICJkYXRhIGVycm9yIiwKICAgICAgICAvKiBaX0RBVEFfRVJST1IgICAgKC0zKSAqLwogICAgICAgICItNCI6ICJpbnN1ZmZpY2llbnQgbWVtb3J5IiwKICAgICAgICAvKiBaX01FTV9FUlJPUiAgICAgKC00KSAqLwogICAgICAgICItNSI6ICJidWZmZXIgZXJyb3IiLAogICAgICAgIC8qIFpfQlVGX0VSUk9SICAgICAoLTUpICovCiAgICAgICAgIi02IjogImluY29tcGF0aWJsZSB2ZXJzaW9uIgogICAgICAgIC8qIFpfVkVSU0lPTl9FUlJPUiAoLTYpICovCiAgICAgIH07CiAgICB9CiAgfSk7CgogIC8vIG5vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL3pzdHJlYW0uanMKICB2YXIgcmVxdWlyZV96c3RyZWFtID0gX19jb21tb25KUyh7CiAgICAibm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvenN0cmVhbS5qcyIoZXhwb3J0czIsIG1vZHVsZSkgewogICAgICAidXNlIHN0cmljdCI7CiAgICAgIGZ1bmN0aW9uIFpTdHJlYW0oKSB7CiAgICAgICAgdGhpcy5pbnB1dCA9IG51bGw7CiAgICAgICAgdGhpcy5uZXh0X2luID0gMDsKICAgICAgICB0aGlzLmF2YWlsX2luID0gMDsKICAgICAgICB0aGlzLnRvdGFsX2luID0gMDsKICAgICAgICB0aGlzLm91dHB1dCA9IG51bGw7CiAgICAgICAgdGhpcy5uZXh0X291dCA9IDA7CiAgICAgICAgdGhpcy5hdmFpbF9vdXQgPSAwOwogICAgICAgIHRoaXMudG90YWxfb3V0ID0gMDsKICAgICAgICB0aGlzLm1zZyA9ICIiOwogICAgICAgIHRoaXMuc3RhdGUgPSBudWxsOwogICAgICAgIHRoaXMuZGF0YV90eXBlID0gMjsKICAgICAgICB0aGlzLmFkbGVyID0gMDsKICAgICAgfQogICAgICBtb2R1bGUuZXhwb3J0cyA9IFpTdHJlYW07CiAgICB9CiAgfSk7CgogIC8vIG5vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL2d6aGVhZGVyLmpzCiAgdmFyIHJlcXVpcmVfZ3poZWFkZXIgPSBfX2NvbW1vbkpTKHsKICAgICJub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9nemhlYWRlci5qcyIoZXhwb3J0czIsIG1vZHVsZSkgewogICAgICAidXNlIHN0cmljdCI7CiAgICAgIGZ1bmN0aW9uIEdaaGVhZGVyKCkgewogICAgICAgIHRoaXMudGV4dCA9IDA7CiAgICAgICAgdGhpcy50aW1lID0gMDsKICAgICAgICB0aGlzLnhmbGFncyA9IDA7CiAgICAgICAgdGhpcy5vcyA9IDA7CiAgICAgICAgdGhpcy5leHRyYSA9IG51bGw7CiAgICAgICAgdGhpcy5leHRyYV9sZW4gPSAwOwogICAgICAgIHRoaXMubmFtZSA9ICIiOwogICAgICAgIHRoaXMuY29tbWVudCA9ICIiOwogICAgICAgIHRoaXMuaGNyYyA9IDA7CiAgICAgICAgdGhpcy5kb25lID0gZmFsc2U7CiAgICAgIH0KICAgICAgbW9kdWxlLmV4cG9ydHMgPSBHWmhlYWRlcjsKICAgIH0KICB9KTsKCiAgLy8gbm9kZV9tb2R1bGVzL3Bha28vbGliL2luZmxhdGUuanMKICB2YXIgcmVxdWlyZV9pbmZsYXRlMiA9IF9fY29tbW9uSlMoewogICAgIm5vZGVfbW9kdWxlcy9wYWtvL2xpYi9pbmZsYXRlLmpzIihleHBvcnRzMiwgbW9kdWxlKSB7CiAgICAgICJ1c2Ugc3RyaWN0IjsKICAgICAgdmFyIHpsaWJfaW5mbGF0ZSA9IHJlcXVpcmVfaW5mbGF0ZSgpOwogICAgICB2YXIgdXRpbHMgPSByZXF1aXJlX2NvbW1vbigpOwogICAgICB2YXIgc3RyaW5ncyA9IHJlcXVpcmVfc3RyaW5ncygpOwogICAgICB2YXIgbXNnID0gcmVxdWlyZV9tZXNzYWdlcygpOwogICAgICB2YXIgWlN0cmVhbSA9IHJlcXVpcmVfenN0cmVhbSgpOwogICAgICB2YXIgR1poZWFkZXIgPSByZXF1aXJlX2d6aGVhZGVyKCk7CiAgICAgIHZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7CiAgICAgIHZhciB7CiAgICAgICAgWl9OT19GTFVTSCwKICAgICAgICBaX0ZJTklTSCwKICAgICAgICBaX09LLAogICAgICAgIFpfU1RSRUFNX0VORCwKICAgICAgICBaX05FRURfRElDVCwKICAgICAgICBaX1NUUkVBTV9FUlJPUiwKICAgICAgICBaX0RBVEFfRVJST1IsCiAgICAgICAgWl9NRU1fRVJST1IKICAgICAgfSA9IHJlcXVpcmVfY29uc3RhbnRzKCk7CiAgICAgIGZ1bmN0aW9uIEluZmxhdGUob3B0aW9ucykgewogICAgICAgIHRoaXMub3B0aW9ucyA9IHV0aWxzLmFzc2lnbih7CiAgICAgICAgICBjaHVua1NpemU6IDEwMjQgKiA2NCwKICAgICAgICAgIHdpbmRvd0JpdHM6IDE1LAogICAgICAgICAgdG86ICIiCiAgICAgICAgfSwgb3B0aW9ucyB8fCB7fSk7CiAgICAgICAgY29uc3Qgb3B0ID0gdGhpcy5vcHRpb25zOwogICAgICAgIGlmIChvcHQucmF3ICYmIG9wdC53aW5kb3dCaXRzID49IDAgJiYgb3B0LndpbmRvd0JpdHMgPCAxNikgewogICAgICAgICAgb3B0LndpbmRvd0JpdHMgPSAtb3B0LndpbmRvd0JpdHM7CiAgICAgICAgICBpZiAob3B0LndpbmRvd0JpdHMgPT09IDApIHsKICAgICAgICAgICAgb3B0LndpbmRvd0JpdHMgPSAtMTU7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChvcHQud2luZG93Qml0cyA+PSAwICYmIG9wdC53aW5kb3dCaXRzIDwgMTYgJiYgIShvcHRpb25zICYmIG9wdGlvbnMud2luZG93Qml0cykpIHsKICAgICAgICAgIG9wdC53aW5kb3dCaXRzICs9IDMyOwogICAgICAgIH0KICAgICAgICBpZiAob3B0LndpbmRvd0JpdHMgPiAxNSAmJiBvcHQud2luZG93Qml0cyA8IDQ4KSB7CiAgICAgICAgICBpZiAoKG9wdC53aW5kb3dCaXRzICYgMTUpID09PSAwKSB7CiAgICAgICAgICAgIG9wdC53aW5kb3dCaXRzIHw9IDE1OwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB0aGlzLmVyciA9IDA7CiAgICAgICAgdGhpcy5tc2cgPSAiIjsKICAgICAgICB0aGlzLmVuZGVkID0gZmFsc2U7CiAgICAgICAgdGhpcy5jaHVua3MgPSBbXTsKICAgICAgICB0aGlzLnN0cm0gPSBuZXcgWlN0cmVhbSgpOwogICAgICAgIHRoaXMuc3RybS5hdmFpbF9vdXQgPSAwOwogICAgICAgIGxldCBzdGF0dXMgPSB6bGliX2luZmxhdGUuaW5mbGF0ZUluaXQyKAogICAgICAgICAgdGhpcy5zdHJtLAogICAgICAgICAgb3B0LndpbmRvd0JpdHMKICAgICAgICApOwogICAgICAgIGlmIChzdGF0dXMgIT09IFpfT0spIHsKICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtc2dbc3RhdHVzXSk7CiAgICAgICAgfQogICAgICAgIHRoaXMuaGVhZGVyID0gbmV3IEdaaGVhZGVyKCk7CiAgICAgICAgemxpYl9pbmZsYXRlLmluZmxhdGVHZXRIZWFkZXIodGhpcy5zdHJtLCB0aGlzLmhlYWRlcik7CiAgICAgICAgaWYgKG9wdC5kaWN0aW9uYXJ5KSB7CiAgICAgICAgICBpZiAodHlwZW9mIG9wdC5kaWN0aW9uYXJ5ID09PSAic3RyaW5nIikgewogICAgICAgICAgICBvcHQuZGljdGlvbmFyeSA9IHN0cmluZ3Muc3RyaW5nMmJ1ZihvcHQuZGljdGlvbmFyeSk7CiAgICAgICAgICB9IGVsc2UgaWYgKHRvU3RyaW5nLmNhbGwob3B0LmRpY3Rpb25hcnkpID09PSAiW29iamVjdCBBcnJheUJ1ZmZlcl0iKSB7CiAgICAgICAgICAgIG9wdC5kaWN0aW9uYXJ5ID0gbmV3IFVpbnQ4QXJyYXkob3B0LmRpY3Rpb25hcnkpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKG9wdC5yYXcpIHsKICAgICAgICAgICAgc3RhdHVzID0gemxpYl9pbmZsYXRlLmluZmxhdGVTZXREaWN0aW9uYXJ5KHRoaXMuc3RybSwgb3B0LmRpY3Rpb25hcnkpOwogICAgICAgICAgICBpZiAoc3RhdHVzICE9PSBaX09LKSB7CiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZ1tzdGF0dXNdKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICBJbmZsYXRlLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24oZGF0YSwgZmx1c2hfbW9kZSkgewogICAgICAgIGNvbnN0IHN0cm0gPSB0aGlzLnN0cm07CiAgICAgICAgY29uc3QgY2h1bmtTaXplID0gdGhpcy5vcHRpb25zLmNodW5rU2l6ZTsKICAgICAgICBjb25zdCBkaWN0aW9uYXJ5ID0gdGhpcy5vcHRpb25zLmRpY3Rpb25hcnk7CiAgICAgICAgbGV0IHN0YXR1cywgX2ZsdXNoX21vZGUsIGxhc3RfYXZhaWxfb3V0OwogICAgICAgIGlmICh0aGlzLmVuZGVkKQogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIGlmIChmbHVzaF9tb2RlID09PSB+fmZsdXNoX21vZGUpCiAgICAgICAgICBfZmx1c2hfbW9kZSA9IGZsdXNoX21vZGU7CiAgICAgICAgZWxzZQogICAgICAgICAgX2ZsdXNoX21vZGUgPSBmbHVzaF9tb2RlID09PSB0cnVlID8gWl9GSU5JU0ggOiBaX05PX0ZMVVNIOwogICAgICAgIGlmICh0b1N0cmluZy5jYWxsKGRhdGEpID09PSAiW29iamVjdCBBcnJheUJ1ZmZlcl0iKSB7CiAgICAgICAgICBzdHJtLmlucHV0ID0gbmV3IFVpbnQ4QXJyYXkoZGF0YSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHN0cm0uaW5wdXQgPSBkYXRhOwogICAgICAgIH0KICAgICAgICBzdHJtLm5leHRfaW4gPSAwOwogICAgICAgIHN0cm0uYXZhaWxfaW4gPSBzdHJtLmlucHV0Lmxlbmd0aDsKICAgICAgICBmb3IgKDsgOyApIHsKICAgICAgICAgIGlmIChzdHJtLmF2YWlsX291dCA9PT0gMCkgewogICAgICAgICAgICBzdHJtLm91dHB1dCA9IG5ldyBVaW50OEFycmF5KGNodW5rU2l6ZSk7CiAgICAgICAgICAgIHN0cm0ubmV4dF9vdXQgPSAwOwogICAgICAgICAgICBzdHJtLmF2YWlsX291dCA9IGNodW5rU2l6ZTsKICAgICAgICAgIH0KICAgICAgICAgIHN0YXR1cyA9IHpsaWJfaW5mbGF0ZS5pbmZsYXRlKHN0cm0sIF9mbHVzaF9tb2RlKTsKICAgICAgICAgIGlmIChzdGF0dXMgPT09IFpfTkVFRF9ESUNUICYmIGRpY3Rpb25hcnkpIHsKICAgICAgICAgICAgc3RhdHVzID0gemxpYl9pbmZsYXRlLmluZmxhdGVTZXREaWN0aW9uYXJ5KHN0cm0sIGRpY3Rpb25hcnkpOwogICAgICAgICAgICBpZiAoc3RhdHVzID09PSBaX09LKSB7CiAgICAgICAgICAgICAgc3RhdHVzID0gemxpYl9pbmZsYXRlLmluZmxhdGUoc3RybSwgX2ZsdXNoX21vZGUpOwogICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gWl9EQVRBX0VSUk9SKSB7CiAgICAgICAgICAgICAgc3RhdHVzID0gWl9ORUVEX0RJQ1Q7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHdoaWxlIChzdHJtLmF2YWlsX2luID4gMCAmJiBzdGF0dXMgPT09IFpfU1RSRUFNX0VORCAmJiBzdHJtLnN0YXRlLndyYXAgPiAwICYmIGRhdGFbc3RybS5uZXh0X2luXSAhPT0gMCkgewogICAgICAgICAgICB6bGliX2luZmxhdGUuaW5mbGF0ZVJlc2V0KHN0cm0pOwogICAgICAgICAgICBzdGF0dXMgPSB6bGliX2luZmxhdGUuaW5mbGF0ZShzdHJtLCBfZmx1c2hfbW9kZSk7CiAgICAgICAgICB9CiAgICAgICAgICBzd2l0Y2ggKHN0YXR1cykgewogICAgICAgICAgICBjYXNlIFpfU1RSRUFNX0VSUk9SOgogICAgICAgICAgICBjYXNlIFpfREFUQV9FUlJPUjoKICAgICAgICAgICAgY2FzZSBaX05FRURfRElDVDoKICAgICAgICAgICAgY2FzZSBaX01FTV9FUlJPUjoKICAgICAgICAgICAgICB0aGlzLm9uRW5kKHN0YXR1cyk7CiAgICAgICAgICAgICAgdGhpcy5lbmRlZCA9IHRydWU7CiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgfQogICAgICAgICAgbGFzdF9hdmFpbF9vdXQgPSBzdHJtLmF2YWlsX291dDsKICAgICAgICAgIGlmIChzdHJtLm5leHRfb3V0KSB7CiAgICAgICAgICAgIGlmIChzdHJtLmF2YWlsX291dCA9PT0gMCB8fCBzdGF0dXMgPT09IFpfU1RSRUFNX0VORCkgewogICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMudG8gPT09ICJzdHJpbmciKSB7CiAgICAgICAgICAgICAgICBsZXQgbmV4dF9vdXRfdXRmOCA9IHN0cmluZ3MudXRmOGJvcmRlcihzdHJtLm91dHB1dCwgc3RybS5uZXh0X291dCk7CiAgICAgICAgICAgICAgICBsZXQgdGFpbCA9IHN0cm0ubmV4dF9vdXQgLSBuZXh0X291dF91dGY4OwogICAgICAgICAgICAgICAgbGV0IHV0ZjhzdHIgPSBzdHJpbmdzLmJ1ZjJzdHJpbmcoc3RybS5vdXRwdXQsIG5leHRfb3V0X3V0ZjgpOwogICAgICAgICAgICAgICAgc3RybS5uZXh0X291dCA9IHRhaWw7CiAgICAgICAgICAgICAgICBzdHJtLmF2YWlsX291dCA9IGNodW5rU2l6ZSAtIHRhaWw7CiAgICAgICAgICAgICAgICBpZiAodGFpbCkKICAgICAgICAgICAgICAgICAgc3RybS5vdXRwdXQuc2V0KHN0cm0ub3V0cHV0LnN1YmFycmF5KG5leHRfb3V0X3V0ZjgsIG5leHRfb3V0X3V0ZjggKyB0YWlsKSwgMCk7CiAgICAgICAgICAgICAgICB0aGlzLm9uRGF0YSh1dGY4c3RyKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdGhpcy5vbkRhdGEoc3RybS5vdXRwdXQubGVuZ3RoID09PSBzdHJtLm5leHRfb3V0ID8gc3RybS5vdXRwdXQgOiBzdHJtLm91dHB1dC5zdWJhcnJheSgwLCBzdHJtLm5leHRfb3V0KSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoc3RhdHVzID09PSBaX09LICYmIGxhc3RfYXZhaWxfb3V0ID09PSAwKQogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIGlmIChzdGF0dXMgPT09IFpfU1RSRUFNX0VORCkgewogICAgICAgICAgICBzdGF0dXMgPSB6bGliX2luZmxhdGUuaW5mbGF0ZUVuZCh0aGlzLnN0cm0pOwogICAgICAgICAgICB0aGlzLm9uRW5kKHN0YXR1cyk7CiAgICAgICAgICAgIHRoaXMuZW5kZWQgPSB0cnVlOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChzdHJtLmF2YWlsX2luID09PSAwKQogICAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH07CiAgICAgIEluZmxhdGUucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uKGNodW5rKSB7CiAgICAgICAgdGhpcy5jaHVua3MucHVzaChjaHVuayk7CiAgICAgIH07CiAgICAgIEluZmxhdGUucHJvdG90eXBlLm9uRW5kID0gZnVuY3Rpb24oc3RhdHVzKSB7CiAgICAgICAgaWYgKHN0YXR1cyA9PT0gWl9PSykgewogICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy50byA9PT0gInN0cmluZyIpIHsKICAgICAgICAgICAgdGhpcy5yZXN1bHQgPSB0aGlzLmNodW5rcy5qb2luKCIiKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXMucmVzdWx0ID0gdXRpbHMuZmxhdHRlbkNodW5rcyh0aGlzLmNodW5rcyk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHRoaXMuY2h1bmtzID0gW107CiAgICAgICAgdGhpcy5lcnIgPSBzdGF0dXM7CiAgICAgICAgdGhpcy5tc2cgPSB0aGlzLnN0cm0ubXNnOwogICAgICB9OwogICAgICBmdW5jdGlvbiBpbmZsYXRlKGlucHV0LCBvcHRpb25zKSB7CiAgICAgICAgY29uc3QgaW5mbGF0b3IgPSBuZXcgSW5mbGF0ZShvcHRpb25zKTsKICAgICAgICBpbmZsYXRvci5wdXNoKGlucHV0KTsKICAgICAgICBpZiAoaW5mbGF0b3IuZXJyKQogICAgICAgICAgdGhyb3cgaW5mbGF0b3IubXNnIHx8IG1zZ1tpbmZsYXRvci5lcnJdOwogICAgICAgIHJldHVybiBpbmZsYXRvci5yZXN1bHQ7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gaW5mbGF0ZVJhdyhpbnB1dCwgb3B0aW9ucykgewogICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwogICAgICAgIG9wdGlvbnMucmF3ID0gdHJ1ZTsKICAgICAgICByZXR1cm4gaW5mbGF0ZShpbnB1dCwgb3B0aW9ucyk7CiAgICAgIH0KICAgICAgbW9kdWxlLmV4cG9ydHMuSW5mbGF0ZSA9IEluZmxhdGU7CiAgICAgIG1vZHVsZS5leHBvcnRzLmluZmxhdGUgPSBpbmZsYXRlOwogICAgICBtb2R1bGUuZXhwb3J0cy5pbmZsYXRlUmF3ID0gaW5mbGF0ZVJhdzsKICAgICAgbW9kdWxlLmV4cG9ydHMudW5nemlwID0gaW5mbGF0ZTsKICAgICAgbW9kdWxlLmV4cG9ydHMuY29uc3RhbnRzID0gcmVxdWlyZV9jb25zdGFudHMoKTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2RlY29kZUdvb2dsZUVhcnRoRW50ZXJwcmlzZVBhY2tldC5qcwogIHZhciBkZWNvZGVHb29nbGVFYXJ0aEVudGVycHJpc2VQYWNrZXRfZXhwb3J0cyA9IHt9OwogIF9fZXhwb3J0KGRlY29kZUdvb2dsZUVhcnRoRW50ZXJwcmlzZVBhY2tldF9leHBvcnRzLCB7CiAgICBkZWZhdWx0OiAoKSA9PiBkZWNvZGVHb29nbGVFYXJ0aEVudGVycHJpc2VQYWNrZXRfZGVmYXVsdAogIH0pOwogIGZ1bmN0aW9uIGRlY29kZUdvb2dsZUVhcnRoRW50ZXJwcmlzZVBhY2tldChwYXJhbWV0ZXJzLCB0cmFuc2ZlcmFibGVPYmplY3RzKSB7CiAgICBjb25zdCB0eXBlID0gVHlwZXMuZnJvbVN0cmluZyhwYXJhbWV0ZXJzLnR5cGUpOwogICAgbGV0IGJ1ZmZlciA9IHBhcmFtZXRlcnMuYnVmZmVyOwogICAgZGVjb2RlR29vZ2xlRWFydGhFbnRlcnByaXNlRGF0YV9kZWZhdWx0KHBhcmFtZXRlcnMua2V5LCBidWZmZXIpOwogICAgY29uc3QgdW5jb21wcmVzc2VkVGVycmFpbiA9IHVuY29tcHJlc3NQYWNrZXQoYnVmZmVyKTsKICAgIGJ1ZmZlciA9IHVuY29tcHJlc3NlZFRlcnJhaW4uYnVmZmVyOwogICAgY29uc3QgbGVuZ3RoID0gdW5jb21wcmVzc2VkVGVycmFpbi5sZW5ndGg7CiAgICBzd2l0Y2ggKHR5cGUpIHsKICAgICAgY2FzZSBUeXBlcy5NRVRBREFUQToKICAgICAgICByZXR1cm4gcHJvY2Vzc01ldGFkYXRhKGJ1ZmZlciwgbGVuZ3RoLCBwYXJhbWV0ZXJzLnF1YWRLZXkpOwogICAgICBjYXNlIFR5cGVzLlRFUlJBSU46CiAgICAgICAgcmV0dXJuIHByb2Nlc3NUZXJyYWluKGJ1ZmZlciwgbGVuZ3RoLCB0cmFuc2ZlcmFibGVPYmplY3RzKTsKICAgICAgY2FzZSBUeXBlcy5EQlJPT1Q6CiAgICAgICAgdHJhbnNmZXJhYmxlT2JqZWN0cy5wdXNoKGJ1ZmZlcik7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIGJ1ZmZlcgogICAgICAgIH07CiAgICB9CiAgfQogIGZ1bmN0aW9uIHByb2Nlc3NNZXRhZGF0YShidWZmZXIsIHRvdGFsU2l6ZSwgcXVhZEtleSkgewogICAgY29uc3QgZHYgPSBuZXcgRGF0YVZpZXcoYnVmZmVyKTsKICAgIGxldCBvZmZzZXQgPSAwOwogICAgY29uc3QgbWFnaWMgPSBkdi5nZXRVaW50MzIob2Zmc2V0LCB0cnVlKTsKICAgIG9mZnNldCArPSBzaXplT2ZVaW50MzIyOwogICAgaWYgKG1hZ2ljICE9PSBxdE1hZ2ljKSB7CiAgICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3JfZGVmYXVsdCgiSW52YWxpZCBtYWdpYyIpOwogICAgfQogICAgY29uc3QgZGF0YVR5cGVJZCA9IGR2LmdldFVpbnQzMihvZmZzZXQsIHRydWUpOwogICAgb2Zmc2V0ICs9IHNpemVPZlVpbnQzMjI7CiAgICBpZiAoZGF0YVR5cGVJZCAhPT0gMSkgewogICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yX2RlZmF1bHQoIkludmFsaWQgZGF0YSB0eXBlLiBNdXN0IGJlIDEgZm9yIFF1YWRUcmVlUGFja2V0Iik7CiAgICB9CiAgICBjb25zdCBxdWFkVmVyc2lvbiA9IGR2LmdldFVpbnQzMihvZmZzZXQsIHRydWUpOwogICAgb2Zmc2V0ICs9IHNpemVPZlVpbnQzMjI7CiAgICBpZiAocXVhZFZlcnNpb24gIT09IDIpIHsKICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcl9kZWZhdWx0KAogICAgICAgICJJbnZhbGlkIFF1YWRUcmVlUGFja2V0IHZlcnNpb24uIE9ubHkgdmVyc2lvbiAyIGlzIHN1cHBvcnRlZC4iCiAgICAgICk7CiAgICB9CiAgICBjb25zdCBudW1JbnN0YW5jZXMgPSBkdi5nZXRJbnQzMihvZmZzZXQsIHRydWUpOwogICAgb2Zmc2V0ICs9IHNpemVPZkludDMyMjsKICAgIGNvbnN0IGRhdGFJbnN0YW5jZVNpemUgPSBkdi5nZXRJbnQzMihvZmZzZXQsIHRydWUpOwogICAgb2Zmc2V0ICs9IHNpemVPZkludDMyMjsKICAgIGlmIChkYXRhSW5zdGFuY2VTaXplICE9PSAzMikgewogICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yX2RlZmF1bHQoIkludmFsaWQgaW5zdGFuY2Ugc2l6ZS4iKTsKICAgIH0KICAgIGNvbnN0IGRhdGFCdWZmZXJPZmZzZXQgPSBkdi5nZXRJbnQzMihvZmZzZXQsIHRydWUpOwogICAgb2Zmc2V0ICs9IHNpemVPZkludDMyMjsKICAgIGNvbnN0IGRhdGFCdWZmZXJTaXplID0gZHYuZ2V0SW50MzIob2Zmc2V0LCB0cnVlKTsKICAgIG9mZnNldCArPSBzaXplT2ZJbnQzMjI7CiAgICBjb25zdCBtZXRhQnVmZmVyU2l6ZSA9IGR2LmdldEludDMyKG9mZnNldCwgdHJ1ZSk7CiAgICBvZmZzZXQgKz0gc2l6ZU9mSW50MzIyOwogICAgaWYgKGRhdGFCdWZmZXJPZmZzZXQgIT09IG51bUluc3RhbmNlcyAqIGRhdGFJbnN0YW5jZVNpemUgKyBvZmZzZXQpIHsKICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcl9kZWZhdWx0KCJJbnZhbGlkIGRhdGFCdWZmZXJPZmZzZXQiKTsKICAgIH0KICAgIGlmIChkYXRhQnVmZmVyT2Zmc2V0ICsgZGF0YUJ1ZmZlclNpemUgKyBtZXRhQnVmZmVyU2l6ZSAhPT0gdG90YWxTaXplKSB7CiAgICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3JfZGVmYXVsdCgiSW52YWxpZCBwYWNrZXQgb2Zmc2V0cyIpOwogICAgfQogICAgY29uc3QgaW5zdGFuY2VzID0gW107CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUluc3RhbmNlczsgKytpKSB7CiAgICAgIGNvbnN0IGJpdGZpZWxkID0gZHYuZ2V0VWludDgob2Zmc2V0KTsKICAgICAgKytvZmZzZXQ7CiAgICAgICsrb2Zmc2V0OwogICAgICBjb25zdCBjbm9kZVZlcnNpb24gPSBkdi5nZXRVaW50MTYob2Zmc2V0LCB0cnVlKTsKICAgICAgb2Zmc2V0ICs9IHNpemVPZlVpbnQxNjI7CiAgICAgIGNvbnN0IGltYWdlVmVyc2lvbiA9IGR2LmdldFVpbnQxNihvZmZzZXQsIHRydWUpOwogICAgICBvZmZzZXQgKz0gc2l6ZU9mVWludDE2MjsKICAgICAgY29uc3QgdGVycmFpblZlcnNpb24gPSBkdi5nZXRVaW50MTYob2Zmc2V0LCB0cnVlKTsKICAgICAgb2Zmc2V0ICs9IHNpemVPZlVpbnQxNjI7CiAgICAgIG9mZnNldCArPSBzaXplT2ZVaW50MTYyOwogICAgICBvZmZzZXQgKz0gc2l6ZU9mVWludDE2MjsKICAgICAgb2Zmc2V0ICs9IHNpemVPZkludDMyMjsKICAgICAgb2Zmc2V0ICs9IHNpemVPZkludDMyMjsKICAgICAgb2Zmc2V0ICs9IDg7CiAgICAgIGNvbnN0IGltYWdlUHJvdmlkZXIgPSBkdi5nZXRVaW50OChvZmZzZXQrKyk7CiAgICAgIGNvbnN0IHRlcnJhaW5Qcm92aWRlciA9IGR2LmdldFVpbnQ4KG9mZnNldCsrKTsKICAgICAgb2Zmc2V0ICs9IHNpemVPZlVpbnQxNjI7CiAgICAgIGluc3RhbmNlcy5wdXNoKAogICAgICAgIG5ldyBHb29nbGVFYXJ0aEVudGVycHJpc2VUaWxlSW5mb3JtYXRpb25fZGVmYXVsdCgKICAgICAgICAgIGJpdGZpZWxkLAogICAgICAgICAgY25vZGVWZXJzaW9uLAogICAgICAgICAgaW1hZ2VWZXJzaW9uLAogICAgICAgICAgdGVycmFpblZlcnNpb24sCiAgICAgICAgICBpbWFnZVByb3ZpZGVyLAogICAgICAgICAgdGVycmFpblByb3ZpZGVyCiAgICAgICAgKQogICAgICApOwogICAgfQogICAgY29uc3QgdGlsZUluZm8gPSBbXTsKICAgIGxldCBpbmRleCA9IDA7CiAgICBmdW5jdGlvbiBwb3B1bGF0ZVRpbGVzKHBhcmVudEtleSwgcGFyZW50LCBsZXZlbDIpIHsKICAgICAgbGV0IGlzTGVhZiA9IGZhbHNlOwogICAgICBpZiAobGV2ZWwyID09PSA0KSB7CiAgICAgICAgaWYgKHBhcmVudC5oYXNTdWJ0cmVlKCkpIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgaXNMZWFmID0gdHJ1ZTsKICAgICAgfQogICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7ICsraSkgewogICAgICAgIGNvbnN0IGNoaWxkS2V5ID0gcGFyZW50S2V5ICsgaS50b1N0cmluZygpOwogICAgICAgIGlmIChpc0xlYWYpIHsKICAgICAgICAgIHRpbGVJbmZvW2NoaWxkS2V5XSA9IG51bGw7CiAgICAgICAgfSBlbHNlIGlmIChsZXZlbDIgPCA0KSB7CiAgICAgICAgICBpZiAoIXBhcmVudC5oYXNDaGlsZChpKSkgewogICAgICAgICAgICB0aWxlSW5mb1tjaGlsZEtleV0gPSBudWxsOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYgKGluZGV4ID09PSBudW1JbnN0YW5jZXMpIHsKICAgICAgICAgICAgICBjb25zb2xlLmxvZygiSW5jb3JyZWN0IG51bWJlciBvZiBpbnN0YW5jZXMiKTsKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBpbnN0YW5jZXNbaW5kZXgrK107CiAgICAgICAgICAgIHRpbGVJbmZvW2NoaWxkS2V5XSA9IGluc3RhbmNlOwogICAgICAgICAgICBwb3B1bGF0ZVRpbGVzKGNoaWxkS2V5LCBpbnN0YW5jZSwgbGV2ZWwyICsgMSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBsZXQgbGV2ZWwgPSAwOwogICAgY29uc3Qgcm9vdCA9IGluc3RhbmNlc1tpbmRleCsrXTsKICAgIGlmIChxdWFkS2V5ID09PSAiIikgewogICAgICArK2xldmVsOwogICAgfSBlbHNlIHsKICAgICAgdGlsZUluZm9bcXVhZEtleV0gPSByb290OwogICAgfQogICAgcG9wdWxhdGVUaWxlcyhxdWFkS2V5LCByb290LCBsZXZlbCk7CiAgICByZXR1cm4gdGlsZUluZm87CiAgfQogIGZ1bmN0aW9uIHByb2Nlc3NUZXJyYWluKGJ1ZmZlciwgdG90YWxTaXplLCB0cmFuc2ZlcmFibGVPYmplY3RzKSB7CiAgICBjb25zdCBkdiA9IG5ldyBEYXRhVmlldyhidWZmZXIpOwogICAgY29uc3QgYWR2YW5jZU1lc2ggPSBmdW5jdGlvbihwb3MpIHsKICAgICAgZm9yIChsZXQgc3ViID0gMDsgc3ViIDwgbnVtU3ViTWVzaGVzUGVyTWVzaDsgKytzdWIpIHsKICAgICAgICBjb25zdCBzaXplID0gZHYuZ2V0VWludDMyKHBvcywgdHJ1ZSk7CiAgICAgICAgcG9zICs9IHNpemVPZlVpbnQzMjI7CiAgICAgICAgcG9zICs9IHNpemU7CiAgICAgICAgaWYgKHBvcyA+IHRvdGFsU2l6ZSkgewogICAgICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcl9kZWZhdWx0KCJNYWxmb3JtZWQgdGVycmFpbiBwYWNrZXQgZm91bmQuIik7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBwb3M7CiAgICB9OwogICAgbGV0IG9mZnNldCA9IDA7CiAgICBjb25zdCB0ZXJyYWluTWVzaGVzID0gW107CiAgICB3aGlsZSAodGVycmFpbk1lc2hlcy5sZW5ndGggPCBudW1NZXNoZXNQZXJQYWNrZXQpIHsKICAgICAgY29uc3Qgc3RhcnQgPSBvZmZzZXQ7CiAgICAgIG9mZnNldCA9IGFkdmFuY2VNZXNoKG9mZnNldCk7CiAgICAgIGNvbnN0IG1lc2ggPSBidWZmZXIuc2xpY2Uoc3RhcnQsIG9mZnNldCk7CiAgICAgIHRyYW5zZmVyYWJsZU9iamVjdHMucHVzaChtZXNoKTsKICAgICAgdGVycmFpbk1lc2hlcy5wdXNoKG1lc2gpOwogICAgfQogICAgcmV0dXJuIHRlcnJhaW5NZXNoZXM7CiAgfQogIGZ1bmN0aW9uIHVuY29tcHJlc3NQYWNrZXQoZGF0YSkgewogICAgY29uc3QgZHYgPSBuZXcgRGF0YVZpZXcoZGF0YSk7CiAgICBsZXQgb2Zmc2V0ID0gMDsKICAgIGNvbnN0IG1hZ2ljID0gZHYuZ2V0VWludDMyKG9mZnNldCwgdHJ1ZSk7CiAgICBvZmZzZXQgKz0gc2l6ZU9mVWludDMyMjsKICAgIGlmIChtYWdpYyAhPT0gY29tcHJlc3NlZE1hZ2ljMiAmJiBtYWdpYyAhPT0gY29tcHJlc3NlZE1hZ2ljU3dhcDIpIHsKICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcl9kZWZhdWx0KCJJbnZhbGlkIG1hZ2ljIik7CiAgICB9CiAgICBjb25zdCBzaXplID0gZHYuZ2V0VWludDMyKG9mZnNldCwgbWFnaWMgPT09IGNvbXByZXNzZWRNYWdpYzIpOwogICAgb2Zmc2V0ICs9IHNpemVPZlVpbnQzMjI7CiAgICBjb25zdCBjb21wcmVzc2VkUGFja2V0ID0gbmV3IFVpbnQ4QXJyYXkoZGF0YSwgb2Zmc2V0KTsKICAgIGNvbnN0IHVuY29tcHJlc3NlZFBhY2tldCA9IGltcG9ydF9pbmZsYXRlLmRlZmF1bHQuaW5mbGF0ZShjb21wcmVzc2VkUGFja2V0KTsKICAgIGlmICh1bmNvbXByZXNzZWRQYWNrZXQubGVuZ3RoICE9PSBzaXplKSB7CiAgICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3JfZGVmYXVsdCgiU2l6ZSBvZiBwYWNrZXQgZG9lc24ndCBtYXRjaCBoZWFkZXIiKTsKICAgIH0KICAgIHJldHVybiB1bmNvbXByZXNzZWRQYWNrZXQ7CiAgfQogIHZhciBpbXBvcnRfaW5mbGF0ZSwgc2l6ZU9mVWludDE2Miwgc2l6ZU9mSW50MzIyLCBzaXplT2ZVaW50MzIyLCBUeXBlcywgcXRNYWdpYywgbnVtTWVzaGVzUGVyUGFja2V0LCBudW1TdWJNZXNoZXNQZXJNZXNoLCBjb21wcmVzc2VkTWFnaWMyLCBjb21wcmVzc2VkTWFnaWNTd2FwMiwgZGVjb2RlR29vZ2xlRWFydGhFbnRlcnByaXNlUGFja2V0X2RlZmF1bHQ7CiAgdmFyIGluaXRfZGVjb2RlR29vZ2xlRWFydGhFbnRlcnByaXNlUGFja2V0ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9kZWNvZGVHb29nbGVFYXJ0aEVudGVycHJpc2VQYWNrZXQuanMiKCkgewogICAgICBpbml0X2RlY29kZUdvb2dsZUVhcnRoRW50ZXJwcmlzZURhdGEoKTsKICAgICAgaW5pdF9Hb29nbGVFYXJ0aEVudGVycHJpc2VUaWxlSW5mb3JtYXRpb24oKTsKICAgICAgaW5pdF9SdW50aW1lRXJyb3IoKTsKICAgICAgaW1wb3J0X2luZmxhdGUgPSBfX3RvRVNNKHJlcXVpcmVfaW5mbGF0ZTIoKSwgMSk7CiAgICAgIGluaXRfY3JlYXRlVGFza1Byb2Nlc3NvcldvcmtlcigpOwogICAgICBzaXplT2ZVaW50MTYyID0gVWludDE2QXJyYXkuQllURVNfUEVSX0VMRU1FTlQ7CiAgICAgIHNpemVPZkludDMyMiA9IEludDMyQXJyYXkuQllURVNfUEVSX0VMRU1FTlQ7CiAgICAgIHNpemVPZlVpbnQzMjIgPSBVaW50MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVDsKICAgICAgVHlwZXMgPSB7CiAgICAgICAgTUVUQURBVEE6IDAsCiAgICAgICAgVEVSUkFJTjogMSwKICAgICAgICBEQlJPT1Q6IDIKICAgICAgfTsKICAgICAgVHlwZXMuZnJvbVN0cmluZyA9IGZ1bmN0aW9uKHMpIHsKICAgICAgICBpZiAocyA9PT0gIk1ldGFkYXRhIikgewogICAgICAgICAgcmV0dXJuIFR5cGVzLk1FVEFEQVRBOwogICAgICAgIH0gZWxzZSBpZiAocyA9PT0gIlRlcnJhaW4iKSB7CiAgICAgICAgICByZXR1cm4gVHlwZXMuVEVSUkFJTjsKICAgICAgICB9IGVsc2UgaWYgKHMgPT09ICJEYlJvb3QiKSB7CiAgICAgICAgICByZXR1cm4gVHlwZXMuREJST09UOwogICAgICAgIH0KICAgICAgfTsKICAgICAgcXRNYWdpYyA9IDMyMzAxOwogICAgICBudW1NZXNoZXNQZXJQYWNrZXQgPSA1OwogICAgICBudW1TdWJNZXNoZXNQZXJNZXNoID0gNDsKICAgICAgY29tcHJlc3NlZE1hZ2ljMiA9IDE5NTMwMjk4MDU7CiAgICAgIGNvbXByZXNzZWRNYWdpY1N3YXAyID0gMjkxNzAzNDEwMDsKICAgICAgZGVjb2RlR29vZ2xlRWFydGhFbnRlcnByaXNlUGFja2V0X2RlZmF1bHQgPSBjcmVhdGVUYXNrUHJvY2Vzc29yV29ya2VyX2RlZmF1bHQoZGVjb2RlR29vZ2xlRWFydGhFbnRlcnByaXNlUGFja2V0KTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Db3JlL3NyZ2JUb0xpbmVhci5qcwogIGZ1bmN0aW9uIHNyZ2JUb0xpbmVhcih2YWx1ZSkgewogICAgQ2hlY2tfZGVmYXVsdC5kZWZpbmVkKCJ2YWx1ZSIsIHZhbHVlKTsKICAgIGlmICh2YWx1ZSA8PSAwLjA0MDQ1KSB7CiAgICAgIHJldHVybiB2YWx1ZSAqIDAuMDc3Mzk5MzgwODA0OTUzNTc7CiAgICB9CiAgICByZXR1cm4gTWF0aC5wb3coCiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb3NzLW9mLXByZWNpc2lvbgogICAgICAodmFsdWUgKyAwLjA1NSkgKiAwLjk0Nzg2NzI5ODU3ODE5OTEsCiAgICAgIDIuNAogICAgKTsKICB9CiAgdmFyIHNyZ2JUb0xpbmVhcl9kZWZhdWx0OwogIHZhciBpbml0X3NyZ2JUb0xpbmVhciA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvc3JnYlRvTGluZWFyLmpzIigpIHsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBzcmdiVG9MaW5lYXJfZGVmYXVsdCA9IHNyZ2JUb0xpbmVhcjsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2RlY29kZUkzUy5qcwogIHZhciBkZWNvZGVJM1NfZXhwb3J0cyA9IHt9OwogIF9fZXhwb3J0KGRlY29kZUkzU19leHBvcnRzLCB7CiAgICBkZWZhdWx0OiAoKSA9PiBkZWNvZGVJM1NfZGVmYXVsdAogIH0pOwogIGZ1bmN0aW9uIGJpbGluZWFySW50ZXJwb2xhdGUodHgsIHR5LCBoMDAsIGgxMCwgaDAxLCBoMTEpIHsKICAgIGNvbnN0IGEzID0gaDAwICogKDEgLSB0eCkgKyBoMTAgKiB0eDsKICAgIGNvbnN0IGIgPSBoMDEgKiAoMSAtIHR4KSArIGgxMSAqIHR4OwogICAgcmV0dXJuIGEzICogKDEgLSB0eSkgKyBiICogdHk7CiAgfQogIGZ1bmN0aW9uIHNhbXBsZU1hcCh1MywgdjMsIHdpZHRoLCBkYXRhKSB7CiAgICBjb25zdCBhZGRyZXNzID0gdTMgKyB2MyAqIHdpZHRoOwogICAgcmV0dXJuIGRhdGFbYWRkcmVzc107CiAgfQogIGZ1bmN0aW9uIHNhbXBsZUdlb2lkKHNhbXBsZVgsIHNhbXBsZVksIGdlb2lkRGF0YSkgewogICAgY29uc3QgZXh0ZW50ID0gZ2VvaWREYXRhLm5hdGl2ZUV4dGVudDsKICAgIGxldCB4ID0gKHNhbXBsZVggLSBleHRlbnQud2VzdCkgLyAoZXh0ZW50LmVhc3QgLSBleHRlbnQud2VzdCkgKiAoZ2VvaWREYXRhLndpZHRoIC0gMSk7CiAgICBsZXQgeSA9IChzYW1wbGVZIC0gZXh0ZW50LnNvdXRoKSAvIChleHRlbnQubm9ydGggLSBleHRlbnQuc291dGgpICogKGdlb2lkRGF0YS5oZWlnaHQgLSAxKTsKICAgIGNvbnN0IHhpID0gTWF0aC5mbG9vcih4KTsKICAgIGxldCB5aSA9IE1hdGguZmxvb3IoeSk7CiAgICB4IC09IHhpOwogICAgeSAtPSB5aTsKICAgIGNvbnN0IHhOZXh0ID0geGkgPCBnZW9pZERhdGEud2lkdGggPyB4aSArIDEgOiB4aTsKICAgIGxldCB5TmV4dCA9IHlpIDwgZ2VvaWREYXRhLmhlaWdodCA/IHlpICsgMSA6IHlpOwogICAgeWkgPSBnZW9pZERhdGEuaGVpZ2h0IC0gMSAtIHlpOwogICAgeU5leHQgPSBnZW9pZERhdGEuaGVpZ2h0IC0gMSAtIHlOZXh0OwogICAgY29uc3QgaDAwID0gc2FtcGxlTWFwKHhpLCB5aSwgZ2VvaWREYXRhLndpZHRoLCBnZW9pZERhdGEuYnVmZmVyKTsKICAgIGNvbnN0IGgxMCA9IHNhbXBsZU1hcCh4TmV4dCwgeWksIGdlb2lkRGF0YS53aWR0aCwgZ2VvaWREYXRhLmJ1ZmZlcik7CiAgICBjb25zdCBoMDEgPSBzYW1wbGVNYXAoeGksIHlOZXh0LCBnZW9pZERhdGEud2lkdGgsIGdlb2lkRGF0YS5idWZmZXIpOwogICAgY29uc3QgaDExID0gc2FtcGxlTWFwKHhOZXh0LCB5TmV4dCwgZ2VvaWREYXRhLndpZHRoLCBnZW9pZERhdGEuYnVmZmVyKTsKICAgIGxldCBmaW5hbEhlaWdodCA9IGJpbGluZWFySW50ZXJwb2xhdGUoeCwgeSwgaDAwLCBoMTAsIGgwMSwgaDExKTsKICAgIGZpbmFsSGVpZ2h0ID0gZmluYWxIZWlnaHQgKiBnZW9pZERhdGEuc2NhbGUgKyBnZW9pZERhdGEub2Zmc2V0OwogICAgcmV0dXJuIGZpbmFsSGVpZ2h0OwogIH0KICBmdW5jdGlvbiBzYW1wbGVHZW9pZEZyb21MaXN0KGxvbiwgbGF0LCBnZW9pZERhdGFMaXN0KSB7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdlb2lkRGF0YUxpc3QubGVuZ3RoOyBpKyspIHsKICAgICAgY29uc3QgbG9jYWxFeHRlbnQgPSBnZW9pZERhdGFMaXN0W2ldLm5hdGl2ZUV4dGVudDsKICAgICAgbGV0IGxvY2FsUHQgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGlmIChnZW9pZERhdGFMaXN0W2ldLnByb2plY3Rpb25UeXBlID09PSAiV2ViTWVyY2F0b3IiKSB7CiAgICAgICAgY29uc3QgcmFkaWkgPSBnZW9pZERhdGFMaXN0W2ldLnByb2plY3Rpb24uX2VsbGlwc29pZC5fcmFkaWk7CiAgICAgICAgY29uc3Qgd2ViTWVyY2F0b3JQcm9qID0gbmV3IFdlYk1lcmNhdG9yUHJvamVjdGlvbl9kZWZhdWx0KAogICAgICAgICAgbmV3IEVsbGlwc29pZF9kZWZhdWx0KHJhZGlpLngsIHJhZGlpLnksIHJhZGlpLnopCiAgICAgICAgKTsKICAgICAgICBsb2NhbFB0ID0gd2ViTWVyY2F0b3JQcm9qLnByb2plY3QobmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KGxvbiwgbGF0LCAwKSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgbG9jYWxQdC54ID0gbG9uOwogICAgICAgIGxvY2FsUHQueSA9IGxhdDsKICAgICAgfQogICAgICBpZiAobG9jYWxQdC54ID4gbG9jYWxFeHRlbnQud2VzdCAmJiBsb2NhbFB0LnggPCBsb2NhbEV4dGVudC5lYXN0ICYmIGxvY2FsUHQueSA+IGxvY2FsRXh0ZW50LnNvdXRoICYmIGxvY2FsUHQueSA8IGxvY2FsRXh0ZW50Lm5vcnRoKSB7CiAgICAgICAgcmV0dXJuIHNhbXBsZUdlb2lkKGxvY2FsUHQueCwgbG9jYWxQdC55LCBnZW9pZERhdGFMaXN0W2ldKTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIDA7CiAgfQogIGZ1bmN0aW9uIG9ydGhvbWV0cmljVG9FbGxpcHNvaWRhbCh2ZXJ0ZXhDb3VudCwgcG9zaXRpb24sIHNjYWxlX3gsIHNjYWxlX3ksIGNlbnRlciwgZ2VvaWREYXRhTGlzdCwgZmFzdCkgewogICAgaWYgKGZhc3QpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgY29uc3QgY2VudGVySGVpZ2h0ID0gc2FtcGxlR2VvaWRGcm9tTGlzdCgKICAgICAgY2VudGVyLmxvbmdpdHVkZSwKICAgICAgY2VudGVyLmxhdGl0dWRlLAogICAgICBnZW9pZERhdGFMaXN0CiAgICApOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2ZXJ0ZXhDb3VudDsgKytpKSB7CiAgICAgIGNvbnN0IGhlaWdodCA9IHNhbXBsZUdlb2lkRnJvbUxpc3QoCiAgICAgICAgY2VudGVyLmxvbmdpdHVkZSArIE1hdGhfZGVmYXVsdC50b1JhZGlhbnMoc2NhbGVfeCAqIHBvc2l0aW9uW2kgKiAzXSksCiAgICAgICAgY2VudGVyLmxhdGl0dWRlICsgTWF0aF9kZWZhdWx0LnRvUmFkaWFucyhzY2FsZV95ICogcG9zaXRpb25baSAqIDMgKyAxXSksCiAgICAgICAgZ2VvaWREYXRhTGlzdAogICAgICApOwogICAgICBwb3NpdGlvbltpICogMyArIDJdICs9IGhlaWdodCAtIGNlbnRlckhlaWdodDsKICAgIH0KICB9CiAgZnVuY3Rpb24gdHJhbnNmb3JtVG9Mb2NhbCh2ZXJ0ZXhDb3VudCwgcG9zaXRpb25zLCBub3JtYWxzLCBjYXJ0b2dyYXBoaWNDZW50ZXIsIGNhcnRlc2lhbkNlbnRlciwgcGFyZW50Um90YXRpb24sIGVsbGlwc29pZFJhZGlpU3F1YXJlLCBzY2FsZV94LCBzY2FsZV95KSB7CiAgICBpZiAodmVydGV4Q291bnQgPT09IDAgfHwgIWRlZmluZWRfZGVmYXVsdChwb3NpdGlvbnMpIHx8IHBvc2l0aW9ucy5sZW5ndGggPT09IDApIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgY29uc3QgZWxsaXBzb2lkID0gbmV3IEVsbGlwc29pZF9kZWZhdWx0KAogICAgICBNYXRoLnNxcnQoZWxsaXBzb2lkUmFkaWlTcXVhcmUueCksCiAgICAgIE1hdGguc3FydChlbGxpcHNvaWRSYWRpaVNxdWFyZS55KSwKICAgICAgTWF0aC5zcXJ0KGVsbGlwc29pZFJhZGlpU3F1YXJlLnopCiAgICApOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2ZXJ0ZXhDb3VudDsgKytpKSB7CiAgICAgIGNvbnN0IGluZGV4T2Zmc2V0ID0gaSAqIDM7CiAgICAgIGNvbnN0IGluZGV4T2Zmc2V0MSA9IGluZGV4T2Zmc2V0ICsgMTsKICAgICAgY29uc3QgaW5kZXhPZmZzZXQyID0gaW5kZXhPZmZzZXQgKyAyOwogICAgICBjb25zdCBjYXJ0b2dyYXBoaWMyID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIGNhcnRvZ3JhcGhpYzIubG9uZ2l0dWRlID0gY2FydG9ncmFwaGljQ2VudGVyLmxvbmdpdHVkZSArIE1hdGhfZGVmYXVsdC50b1JhZGlhbnMoc2NhbGVfeCAqIHBvc2l0aW9uc1tpbmRleE9mZnNldF0pOwogICAgICBjYXJ0b2dyYXBoaWMyLmxhdGl0dWRlID0gY2FydG9ncmFwaGljQ2VudGVyLmxhdGl0dWRlICsgTWF0aF9kZWZhdWx0LnRvUmFkaWFucyhzY2FsZV95ICogcG9zaXRpb25zW2luZGV4T2Zmc2V0MV0pOwogICAgICBjYXJ0b2dyYXBoaWMyLmhlaWdodCA9IGNhcnRvZ3JhcGhpY0NlbnRlci5oZWlnaHQgKyBwb3NpdGlvbnNbaW5kZXhPZmZzZXQyXTsKICAgICAgY29uc3QgcG9zaXRpb24gPSB7fTsKICAgICAgZWxsaXBzb2lkLmNhcnRvZ3JhcGhpY1RvQ2FydGVzaWFuKGNhcnRvZ3JhcGhpYzIsIHBvc2l0aW9uKTsKICAgICAgcG9zaXRpb24ueCAtPSBjYXJ0ZXNpYW5DZW50ZXIueDsKICAgICAgcG9zaXRpb24ueSAtPSBjYXJ0ZXNpYW5DZW50ZXIueTsKICAgICAgcG9zaXRpb24ueiAtPSBjYXJ0ZXNpYW5DZW50ZXIuejsKICAgICAgY29uc3Qgcm90YXRlZFBvc2l0aW9uID0ge307CiAgICAgIE1hdHJpeDNfZGVmYXVsdC5tdWx0aXBseUJ5VmVjdG9yKHBhcmVudFJvdGF0aW9uLCBwb3NpdGlvbiwgcm90YXRlZFBvc2l0aW9uKTsKICAgICAgcG9zaXRpb25zW2luZGV4T2Zmc2V0XSA9IHJvdGF0ZWRQb3NpdGlvbi54OwogICAgICBwb3NpdGlvbnNbaW5kZXhPZmZzZXQxXSA9IHJvdGF0ZWRQb3NpdGlvbi55OwogICAgICBwb3NpdGlvbnNbaW5kZXhPZmZzZXQyXSA9IHJvdGF0ZWRQb3NpdGlvbi56OwogICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG5vcm1hbHMpKSB7CiAgICAgICAgY29uc3Qgbm9ybWFsMiA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoCiAgICAgICAgICBub3JtYWxzW2luZGV4T2Zmc2V0XSwKICAgICAgICAgIG5vcm1hbHNbaW5kZXhPZmZzZXQxXSwKICAgICAgICAgIG5vcm1hbHNbaW5kZXhPZmZzZXQyXQogICAgICAgICk7CiAgICAgICAgY29uc3Qgcm90YXRlZE5vcm1hbCA9IHt9OwogICAgICAgIE1hdHJpeDNfZGVmYXVsdC5tdWx0aXBseUJ5VmVjdG9yKHBhcmVudFJvdGF0aW9uLCBub3JtYWwyLCByb3RhdGVkTm9ybWFsKTsKICAgICAgICBub3JtYWxzW2luZGV4T2Zmc2V0XSA9IHJvdGF0ZWROb3JtYWwueDsKICAgICAgICBub3JtYWxzW2luZGV4T2Zmc2V0MV0gPSByb3RhdGVkTm9ybWFsLnk7CiAgICAgICAgbm9ybWFsc1tpbmRleE9mZnNldDJdID0gcm90YXRlZE5vcm1hbC56OwogICAgICB9CiAgICB9CiAgfQogIGZ1bmN0aW9uIGNyb3BVVnModmVydGV4Q291bnQsIHV2MHMsIHV2UmVnaW9ucykgewogICAgZm9yIChsZXQgdmVydGV4SW5kZXggPSAwOyB2ZXJ0ZXhJbmRleCA8IHZlcnRleENvdW50OyArK3ZlcnRleEluZGV4KSB7CiAgICAgIGNvbnN0IG1pblUgPSB1dlJlZ2lvbnNbdmVydGV4SW5kZXggKiA0XSAvIDY1NTM1OwogICAgICBjb25zdCBtaW5WID0gdXZSZWdpb25zW3ZlcnRleEluZGV4ICogNCArIDFdIC8gNjU1MzU7CiAgICAgIGNvbnN0IHNjYWxlVSA9ICh1dlJlZ2lvbnNbdmVydGV4SW5kZXggKiA0ICsgMl0gLSB1dlJlZ2lvbnNbdmVydGV4SW5kZXggKiA0XSkgLyA2NTUzNTsKICAgICAgY29uc3Qgc2NhbGVWID0gKHV2UmVnaW9uc1t2ZXJ0ZXhJbmRleCAqIDQgKyAzXSAtIHV2UmVnaW9uc1t2ZXJ0ZXhJbmRleCAqIDQgKyAxXSkgLyA2NTUzNTsKICAgICAgdXYwc1t2ZXJ0ZXhJbmRleCAqIDJdICo9IHNjYWxlVTsKICAgICAgdXYwc1t2ZXJ0ZXhJbmRleCAqIDJdICs9IG1pblU7CiAgICAgIHV2MHNbdmVydGV4SW5kZXggKiAyICsgMV0gKj0gc2NhbGVWOwogICAgICB1djBzW3ZlcnRleEluZGV4ICogMiArIDFdICs9IG1pblY7CiAgICB9CiAgfQogIGZ1bmN0aW9uIGdlbmVyYXRlSW5kZXhBcnJheSh2ZXJ0ZXhDb3VudCwgaW5kaWNlcywgY29sb3JzLCBzcGxpdEdlb21ldHJ5QnlDb2xvclRyYW5zcGFyZW5jeSkgewogICAgY29uc3QgaW5kZXhBcnJheSA9IG5ldyBVaW50MzJBcnJheSh2ZXJ0ZXhDb3VudCk7CiAgICBjb25zdCB2ZXJ0ZXhJbmRleEZuID0gZGVmaW5lZF9kZWZhdWx0KGluZGljZXMpID8gKHZlcnRleEluZGV4KSA9PiBpbmRpY2VzW3ZlcnRleEluZGV4XSA6ICh2ZXJ0ZXhJbmRleCkgPT4gdmVydGV4SW5kZXg7CiAgICBsZXQgdHJhbnNwYXJlbnRWZXJ0ZXhPZmZzZXQgPSAwOwogICAgaWYgKHNwbGl0R2VvbWV0cnlCeUNvbG9yVHJhbnNwYXJlbmN5ICYmIGRlZmluZWRfZGVmYXVsdChjb2xvcnMpKSB7CiAgICAgIGNvbnN0IGlzVmVydGV4VHJhbnNwYXJlbnRGbiA9ICh2ZXJ0ZXhJbmRleCkgPT4gY29sb3JzW3ZlcnRleEluZGV4Rm4odmVydGV4SW5kZXgpICogNCArIDNdIDwgMjU1OwogICAgICBmb3IgKGxldCB2ZXJ0ZXhJbmRleCA9IDA7IHZlcnRleEluZGV4IDwgdmVydGV4Q291bnQ7IHZlcnRleEluZGV4ICs9IDMpIHsKICAgICAgICBpZiAoIWlzVmVydGV4VHJhbnNwYXJlbnRGbih2ZXJ0ZXhJbmRleCkgJiYgIWlzVmVydGV4VHJhbnNwYXJlbnRGbih2ZXJ0ZXhJbmRleCArIDEpICYmICFpc1ZlcnRleFRyYW5zcGFyZW50Rm4odmVydGV4SW5kZXggKyAyKSkgewogICAgICAgICAgaW5kZXhBcnJheVt0cmFuc3BhcmVudFZlcnRleE9mZnNldCsrXSA9IHZlcnRleEluZGV4Rm4odmVydGV4SW5kZXgpOwogICAgICAgICAgaW5kZXhBcnJheVt0cmFuc3BhcmVudFZlcnRleE9mZnNldCsrXSA9IHZlcnRleEluZGV4Rm4odmVydGV4SW5kZXggKyAxKTsKICAgICAgICAgIGluZGV4QXJyYXlbdHJhbnNwYXJlbnRWZXJ0ZXhPZmZzZXQrK10gPSB2ZXJ0ZXhJbmRleEZuKHZlcnRleEluZGV4ICsgMik7CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmICh0cmFuc3BhcmVudFZlcnRleE9mZnNldCA+IDApIHsKICAgICAgICBsZXQgb2Zmc2V0ID0gdHJhbnNwYXJlbnRWZXJ0ZXhPZmZzZXQ7CiAgICAgICAgZm9yIChsZXQgdmVydGV4SW5kZXggPSAwOyB2ZXJ0ZXhJbmRleCA8IHZlcnRleENvdW50OyB2ZXJ0ZXhJbmRleCArPSAzKSB7CiAgICAgICAgICBpZiAoaXNWZXJ0ZXhUcmFuc3BhcmVudEZuKHZlcnRleEluZGV4KSB8fCBpc1ZlcnRleFRyYW5zcGFyZW50Rm4odmVydGV4SW5kZXggKyAxKSB8fCBpc1ZlcnRleFRyYW5zcGFyZW50Rm4odmVydGV4SW5kZXggKyAyKSkgewogICAgICAgICAgICBpbmRleEFycmF5W29mZnNldCsrXSA9IHZlcnRleEluZGV4Rm4odmVydGV4SW5kZXgpOwogICAgICAgICAgICBpbmRleEFycmF5W29mZnNldCsrXSA9IHZlcnRleEluZGV4Rm4odmVydGV4SW5kZXggKyAxKTsKICAgICAgICAgICAgaW5kZXhBcnJheVtvZmZzZXQrK10gPSB2ZXJ0ZXhJbmRleEZuKHZlcnRleEluZGV4ICsgMik7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIGZvciAobGV0IHZlcnRleEluZGV4ID0gMDsgdmVydGV4SW5kZXggPCB2ZXJ0ZXhDb3VudDsgKyt2ZXJ0ZXhJbmRleCkgewogICAgICAgICAgaW5kZXhBcnJheVt2ZXJ0ZXhJbmRleF0gPSB2ZXJ0ZXhJbmRleEZuKHZlcnRleEluZGV4KTsKICAgICAgICB9CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIHRyYW5zcGFyZW50VmVydGV4T2Zmc2V0ID0gdmVydGV4Q291bnQ7CiAgICAgIGZvciAobGV0IHZlcnRleEluZGV4ID0gMDsgdmVydGV4SW5kZXggPCB2ZXJ0ZXhDb3VudDsgKyt2ZXJ0ZXhJbmRleCkgewogICAgICAgIGluZGV4QXJyYXlbdmVydGV4SW5kZXhdID0gdmVydGV4SW5kZXhGbih2ZXJ0ZXhJbmRleCk7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiB7CiAgICAgIGluZGV4QXJyYXksCiAgICAgIHRyYW5zcGFyZW50VmVydGV4T2Zmc2V0CiAgICB9OwogIH0KICBmdW5jdGlvbiBnZXRGZWF0dXJlSGFzaChzeW1ib2xvZ3lEYXRhLCBvdXRsaW5lc0hhc2gsIGZlYXR1cmVJbmRleCkgewogICAgY29uc3QgZmVhdHVyZUhhc2ggPSBvdXRsaW5lc0hhc2hbZmVhdHVyZUluZGV4XTsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoZmVhdHVyZUhhc2gpKSB7CiAgICAgIHJldHVybiBmZWF0dXJlSGFzaDsKICAgIH0KICAgIGNvbnN0IG5ld0ZlYXR1cmVIYXNoID0gb3V0bGluZXNIYXNoW2ZlYXR1cmVJbmRleF0gPSB7CiAgICAgIHBvc2l0aW9uczoge30sCiAgICAgIGluZGljZXM6IHt9LAogICAgICBlZGdlczoge30KICAgIH07CiAgICBjb25zdCBmZWF0dXJlU3ltYm9sb2d5ID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoCiAgICAgIHN5bWJvbG9neURhdGFbZmVhdHVyZUluZGV4XSwKICAgICAgc3ltYm9sb2d5RGF0YS5kZWZhdWx0CiAgICApOwogICAgbmV3RmVhdHVyZUhhc2guaGFzT3V0bGluZSA9IGRlZmluZWRfZGVmYXVsdChmZWF0dXJlU3ltYm9sb2d5Py5lZGdlcyk7CiAgICByZXR1cm4gbmV3RmVhdHVyZUhhc2g7CiAgfQogIGZ1bmN0aW9uIGFkZFZlcnRleFRvSGFzaChpbmRleEhhc2gsIHBvc2l0aW9uSGFzaCwgdmVydGV4SW5kZXgsIHBvc2l0aW9ucykgewogICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoaW5kZXhIYXNoW3ZlcnRleEluZGV4XSkpIHsKICAgICAgY29uc3Qgc3RhcnRQb3NpdGlvbkluZGV4ID0gdmVydGV4SW5kZXggKiAzOwogICAgICBsZXQgY29vcmRpbmF0ZUhhc2ggPSBwb3NpdGlvbkhhc2g7CiAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCAzOyBpbmRleCsrKSB7CiAgICAgICAgY29uc3QgY29vcmRpbmF0ZSA9IHBvc2l0aW9uc1tzdGFydFBvc2l0aW9uSW5kZXggKyBpbmRleF07CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoY29vcmRpbmF0ZUhhc2hbY29vcmRpbmF0ZV0pKSB7CiAgICAgICAgICBjb29yZGluYXRlSGFzaFtjb29yZGluYXRlXSA9IHt9OwogICAgICAgIH0KICAgICAgICBjb29yZGluYXRlSGFzaCA9IGNvb3JkaW5hdGVIYXNoW2Nvb3JkaW5hdGVdOwogICAgICB9CiAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGNvb3JkaW5hdGVIYXNoLmluZGV4KSkgewogICAgICAgIGNvb3JkaW5hdGVIYXNoLmluZGV4ID0gdmVydGV4SW5kZXg7CiAgICAgIH0KICAgICAgaW5kZXhIYXNoW3ZlcnRleEluZGV4XSA9IGNvb3JkaW5hdGVIYXNoLmluZGV4OwogICAgfQogIH0KICBmdW5jdGlvbiBhZGRFZGdlVG9IYXNoKGVkZ2VIYXNoLCB2ZXJ0ZXhBSW5kZXgsIHZlcnRleEJJbmRleCwgdmVydGV4QUluZGV4VW5pcXVlLCB2ZXJ0ZXhCSW5kZXhVbmlxdWUsIG5vcm1hbEluZGV4KSB7CiAgICBsZXQgc3RhcnRWZXJ0ZXhJbmRleDsKICAgIGxldCBlbmRWZXJ0ZXhJbmRleDsKICAgIGlmICh2ZXJ0ZXhBSW5kZXhVbmlxdWUgPCB2ZXJ0ZXhCSW5kZXhVbmlxdWUpIHsKICAgICAgc3RhcnRWZXJ0ZXhJbmRleCA9IHZlcnRleEFJbmRleFVuaXF1ZTsKICAgICAgZW5kVmVydGV4SW5kZXggPSB2ZXJ0ZXhCSW5kZXhVbmlxdWU7CiAgICB9IGVsc2UgewogICAgICBzdGFydFZlcnRleEluZGV4ID0gdmVydGV4QkluZGV4VW5pcXVlOwogICAgICBlbmRWZXJ0ZXhJbmRleCA9IHZlcnRleEFJbmRleFVuaXF1ZTsKICAgIH0KICAgIGxldCBlZGdlU3RhcnQgPSBlZGdlSGFzaFtzdGFydFZlcnRleEluZGV4XTsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGVkZ2VTdGFydCkpIHsKICAgICAgZWRnZVN0YXJ0ID0gZWRnZUhhc2hbc3RhcnRWZXJ0ZXhJbmRleF0gPSB7fTsKICAgIH0KICAgIGxldCBlZGdlRW5kID0gZWRnZVN0YXJ0W2VuZFZlcnRleEluZGV4XTsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KGVkZ2VFbmQpKSB7CiAgICAgIGVkZ2VFbmQgPSBlZGdlU3RhcnRbZW5kVmVydGV4SW5kZXhdID0gewogICAgICAgIG5vcm1hbHNJbmRleDogW10sCiAgICAgICAgb3V0bGluZXM6IFtdCiAgICAgIH07CiAgICB9CiAgICBlZGdlRW5kLm5vcm1hbHNJbmRleC5wdXNoKG5vcm1hbEluZGV4KTsKICAgIGlmIChlZGdlRW5kLm91dGxpbmVzLmxlbmd0aCA9PT0gMCB8fCB2ZXJ0ZXhBSW5kZXggIT09IHZlcnRleEFJbmRleFVuaXF1ZSB8fCB2ZXJ0ZXhCSW5kZXggIT09IHZlcnRleEJJbmRleFVuaXF1ZSkgewogICAgICBlZGdlRW5kLm91dGxpbmVzLnB1c2godmVydGV4QUluZGV4LCB2ZXJ0ZXhCSW5kZXgpOwogICAgfQogIH0KICBmdW5jdGlvbiBnZW5lcmF0ZU91dGxpbmVzSGFzaChzeW1ib2xvZ3lEYXRhLCBmZWF0dXJlSW5kZXhBcnJheSwgaW5kZXhBcnJheSwgcG9zaXRpb25zKSB7CiAgICBjb25zdCBvdXRsaW5lc0hhc2ggPSBbXTsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5kZXhBcnJheS5sZW5ndGg7IGkgKz0gMykgewogICAgICBjb25zdCBmZWF0dXJlSW5kZXggPSBkZWZpbmVkX2RlZmF1bHQoZmVhdHVyZUluZGV4QXJyYXkpID8gZmVhdHVyZUluZGV4QXJyYXlbaW5kZXhBcnJheVtpXV0gOiAiZGVmYXVsdCI7CiAgICAgIGNvbnN0IGZlYXR1cmVIYXNoID0gZ2V0RmVhdHVyZUhhc2goCiAgICAgICAgc3ltYm9sb2d5RGF0YSwKICAgICAgICBvdXRsaW5lc0hhc2gsCiAgICAgICAgZmVhdHVyZUluZGV4CiAgICAgICk7CiAgICAgIGlmICghZmVhdHVyZUhhc2guaGFzT3V0bGluZSkgewogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGNvbnN0IGluZGV4SGFzaCA9IGZlYXR1cmVIYXNoLmluZGljZXM7CiAgICAgIGNvbnN0IHBvc2l0aW9uSGFzaCA9IGZlYXR1cmVIYXNoLnBvc2l0aW9uczsKICAgICAgZm9yIChsZXQgdmVydGV4ID0gMDsgdmVydGV4IDwgMzsgdmVydGV4KyspIHsKICAgICAgICBjb25zdCB2ZXJ0ZXhJbmRleCA9IGluZGV4QXJyYXlbaSArIHZlcnRleF07CiAgICAgICAgYWRkVmVydGV4VG9IYXNoKGluZGV4SGFzaCwgcG9zaXRpb25IYXNoLCB2ZXJ0ZXhJbmRleCwgcG9zaXRpb25zKTsKICAgICAgfQogICAgICBjb25zdCBlZGdlSGFzaCA9IGZlYXR1cmVIYXNoLmVkZ2VzOwogICAgICBmb3IgKGxldCB2ZXJ0ZXggPSAwOyB2ZXJ0ZXggPCAzOyB2ZXJ0ZXgrKykgewogICAgICAgIGNvbnN0IHZlcnRleEluZGV4ID0gaW5kZXhBcnJheVtpICsgdmVydGV4XTsKICAgICAgICBjb25zdCBuZXh0VmVydGV4SW5kZXggPSBpbmRleEFycmF5W2kgKyAodmVydGV4ICsgMSkgJSAzXTsKICAgICAgICBjb25zdCB1bmlxdWVWZXJ0ZXhJbmRleCA9IGluZGV4SGFzaFt2ZXJ0ZXhJbmRleF07CiAgICAgICAgY29uc3QgdW5pcXVlTmV4dFZlcnRleEluZGV4ID0gaW5kZXhIYXNoW25leHRWZXJ0ZXhJbmRleF07CiAgICAgICAgYWRkRWRnZVRvSGFzaCgKICAgICAgICAgIGVkZ2VIYXNoLAogICAgICAgICAgdmVydGV4SW5kZXgsCiAgICAgICAgICBuZXh0VmVydGV4SW5kZXgsCiAgICAgICAgICB1bmlxdWVWZXJ0ZXhJbmRleCwKICAgICAgICAgIHVuaXF1ZU5leHRWZXJ0ZXhJbmRleCwKICAgICAgICAgIGkKICAgICAgICApOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gb3V0bGluZXNIYXNoOwogIH0KICBmdW5jdGlvbiBjYWxjdWxhdGVGYWNlTm9ybWFsKG5vcm1hbHMsIHZlcnRleEFJbmRleCwgaW5kZXhBcnJheSwgcG9zaXRpb25zKSB7CiAgICBjb25zdCBwb3NpdGlvbkFJbmRleCA9IGluZGV4QXJyYXlbdmVydGV4QUluZGV4XSAqIDM7CiAgICBjb25zdCBwb3NpdGlvbkJJbmRleCA9IGluZGV4QXJyYXlbdmVydGV4QUluZGV4ICsgMV0gKiAzOwogICAgY29uc3QgcG9zaXRpb25DSW5kZXggPSBpbmRleEFycmF5W3ZlcnRleEFJbmRleCArIDJdICogMzsKICAgIENhcnRlc2lhbjNfZGVmYXVsdC5mcm9tQXJyYXkocG9zaXRpb25zLCBwb3NpdGlvbkFJbmRleCwgY2FsY3VsYXRlRmFjZU5vcm1hbEEpOwogICAgQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShwb3NpdGlvbnMsIHBvc2l0aW9uQkluZGV4LCBjYWxjdWxhdGVGYWNlTm9ybWFsQik7CiAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuZnJvbUFycmF5KHBvc2l0aW9ucywgcG9zaXRpb25DSW5kZXgsIGNhbGN1bGF0ZUZhY2VOb3JtYWxDKTsKICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdCgKICAgICAgY2FsY3VsYXRlRmFjZU5vcm1hbEIsCiAgICAgIGNhbGN1bGF0ZUZhY2VOb3JtYWxBLAogICAgICBjYWxjdWxhdGVGYWNlTm9ybWFsQgogICAgKTsKICAgIENhcnRlc2lhbjNfZGVmYXVsdC5zdWJ0cmFjdCgKICAgICAgY2FsY3VsYXRlRmFjZU5vcm1hbEMsCiAgICAgIGNhbGN1bGF0ZUZhY2VOb3JtYWxBLAogICAgICBjYWxjdWxhdGVGYWNlTm9ybWFsQwogICAgKTsKICAgIENhcnRlc2lhbjNfZGVmYXVsdC5jcm9zcygKICAgICAgY2FsY3VsYXRlRmFjZU5vcm1hbEIsCiAgICAgIGNhbGN1bGF0ZUZhY2VOb3JtYWxDLAogICAgICBjYWxjdWxhdGVGYWNlTm9ybWFsQQogICAgKTsKICAgIGNvbnN0IG1hZ25pdHVkZSA9IENhcnRlc2lhbjNfZGVmYXVsdC5tYWduaXR1ZGUoY2FsY3VsYXRlRmFjZU5vcm1hbEEpOwogICAgaWYgKG1hZ25pdHVkZSAhPT0gMCkgewogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuZGl2aWRlQnlTY2FsYXIoCiAgICAgICAgY2FsY3VsYXRlRmFjZU5vcm1hbEEsCiAgICAgICAgbWFnbml0dWRlLAogICAgICAgIGNhbGN1bGF0ZUZhY2VOb3JtYWxBCiAgICAgICk7CiAgICB9CiAgICBjb25zdCBub3JtYWxBSW5kZXggPSB2ZXJ0ZXhBSW5kZXggKiAzOwogICAgY29uc3Qgbm9ybWFsQkluZGV4ID0gKHZlcnRleEFJbmRleCArIDEpICogMzsKICAgIGNvbnN0IG5vcm1hbENJbmRleCA9ICh2ZXJ0ZXhBSW5kZXggKyAyKSAqIDM7CiAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQucGFjayhjYWxjdWxhdGVGYWNlTm9ybWFsQSwgbm9ybWFscywgbm9ybWFsQUluZGV4KTsKICAgIENhcnRlc2lhbjNfZGVmYXVsdC5wYWNrKGNhbGN1bGF0ZUZhY2VOb3JtYWxBLCBub3JtYWxzLCBub3JtYWxCSW5kZXgpOwogICAgQ2FydGVzaWFuM19kZWZhdWx0LnBhY2soY2FsY3VsYXRlRmFjZU5vcm1hbEEsIG5vcm1hbHMsIG5vcm1hbENJbmRleCk7CiAgfQogIGZ1bmN0aW9uIGlzRWRnZVNtb290aChub3JtYWxzLCBub3JtYWxBSW5kZXgsIG5vcm1hbEJJbmRleCkgewogICAgQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShub3JtYWxzLCBub3JtYWxBSW5kZXgsIGlzRWRnZVNtb290aEEpOwogICAgQ2FydGVzaWFuM19kZWZhdWx0LmZyb21BcnJheShub3JtYWxzLCBub3JtYWxCSW5kZXgsIGlzRWRnZVNtb290aEIpOwogICAgY29uc3QgY29zaW5lID0gQ2FydGVzaWFuM19kZWZhdWx0LmRvdChpc0VkZ2VTbW9vdGhBLCBpc0VkZ2VTbW9vdGhCKTsKICAgIGNvbnN0IHNpbmUgPSBDYXJ0ZXNpYW4zX2RlZmF1bHQubWFnbml0dWRlKAogICAgICBDYXJ0ZXNpYW4zX2RlZmF1bHQuY3Jvc3MoaXNFZGdlU21vb3RoQSwgaXNFZGdlU21vb3RoQiwgaXNFZGdlU21vb3RoQSkKICAgICk7CiAgICByZXR1cm4gTWF0aC5hdGFuMihzaW5lLCBjb3NpbmUpIDwgMC4yNTsKICB9CiAgZnVuY3Rpb24gYWRkT3V0bGluZXNGb3JFZGdlKG91dGxpbmVzLCBlZGdlRGF0YSwgaW5kZXhBcnJheSwgcG9zaXRpb25zLCBub3JtYWxzKSB7CiAgICBpZiAoZWRnZURhdGEubm9ybWFsc0luZGV4Lmxlbmd0aCA+IDEpIHsKICAgICAgY29uc3Qgbm9ybWFsc0J5SW5kZXggPSBwb3NpdGlvbnMubGVuZ3RoID09PSBub3JtYWxzLmxlbmd0aDsKICAgICAgZm9yIChsZXQgaW5kZXhBID0gMDsgaW5kZXhBIDwgZWRnZURhdGEubm9ybWFsc0luZGV4Lmxlbmd0aDsgaW5kZXhBKyspIHsKICAgICAgICBjb25zdCB2ZXJ0ZXhBSW5kZXggPSBlZGdlRGF0YS5ub3JtYWxzSW5kZXhbaW5kZXhBXTsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChub3JtYWxzW3ZlcnRleEFJbmRleCAqIDNdKSkgewogICAgICAgICAgY2FsY3VsYXRlRmFjZU5vcm1hbChub3JtYWxzLCB2ZXJ0ZXhBSW5kZXgsIGluZGV4QXJyYXksIHBvc2l0aW9ucyk7CiAgICAgICAgfQogICAgICAgIGlmIChpbmRleEEgPT09IDApIHsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KICAgICAgICBmb3IgKGxldCBpbmRleEIgPSAwOyBpbmRleEIgPCBpbmRleEE7IGluZGV4QisrKSB7CiAgICAgICAgICBjb25zdCB2ZXJ0ZXhCSW5kZXggPSBlZGdlRGF0YS5ub3JtYWxzSW5kZXhbaW5kZXhCXTsKICAgICAgICAgIGNvbnN0IG5vcm1hbEFJbmRleCA9IG5vcm1hbHNCeUluZGV4ID8gaW5kZXhBcnJheVt2ZXJ0ZXhBSW5kZXhdICogMyA6IHZlcnRleEFJbmRleCAqIDM7CiAgICAgICAgICBjb25zdCBub3JtYWxCSW5kZXggPSBub3JtYWxzQnlJbmRleCA/IGluZGV4QXJyYXlbdmVydGV4QkluZGV4XSAqIDMgOiB2ZXJ0ZXhCSW5kZXggKiAzOwogICAgICAgICAgaWYgKGlzRWRnZVNtb290aChub3JtYWxzLCBub3JtYWxBSW5kZXgsIG5vcm1hbEJJbmRleCkpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQogICAgb3V0bGluZXMucHVzaCguLi5lZGdlRGF0YS5vdXRsaW5lcyk7CiAgfQogIGZ1bmN0aW9uIGFkZE91dGxpbmVzRm9yRmVhdHVyZShvdXRsaW5lcywgZWRnZUhhc2gsIGluZGV4QXJyYXksIHBvc2l0aW9ucywgbm9ybWFscykgewogICAgY29uc3QgZWRnZVN0YXJ0S2V5cyA9IE9iamVjdC5rZXlzKGVkZ2VIYXNoKTsKICAgIGZvciAobGV0IHN0YXJ0SW5kZXggPSAwOyBzdGFydEluZGV4IDwgZWRnZVN0YXJ0S2V5cy5sZW5ndGg7IHN0YXJ0SW5kZXgrKykgewogICAgICBjb25zdCBlZGdlRW5kcyA9IGVkZ2VIYXNoW2VkZ2VTdGFydEtleXNbc3RhcnRJbmRleF1dOwogICAgICBjb25zdCBlZGdlRW5kS2V5cyA9IE9iamVjdC5rZXlzKGVkZ2VFbmRzKTsKICAgICAgZm9yIChsZXQgZW5kSW5kZXggPSAwOyBlbmRJbmRleCA8IGVkZ2VFbmRLZXlzLmxlbmd0aDsgZW5kSW5kZXgrKykgewogICAgICAgIGNvbnN0IGVkZ2VEYXRhID0gZWRnZUVuZHNbZWRnZUVuZEtleXNbZW5kSW5kZXhdXTsKICAgICAgICBhZGRPdXRsaW5lc0ZvckVkZ2Uob3V0bGluZXMsIGVkZ2VEYXRhLCBpbmRleEFycmF5LCBwb3NpdGlvbnMsIG5vcm1hbHMpOwogICAgICB9CiAgICB9CiAgfQogIGZ1bmN0aW9uIGdlbmVyYXRlT3V0bGluZXNGcm9tSGFzaChvdXRsaW5lc0hhc2gsIGluZGV4QXJyYXksIHBvc2l0aW9ucywgbm9ybWFscykgewogICAgY29uc3Qgb3V0bGluZXMgPSBbXTsKICAgIGNvbnN0IGZlYXR1cmVzID0gT2JqZWN0LmtleXMob3V0bGluZXNIYXNoKTsKICAgIGZvciAobGV0IGZlYXR1cmVJbmRleCA9IDA7IGZlYXR1cmVJbmRleCA8IGZlYXR1cmVzLmxlbmd0aDsgZmVhdHVyZUluZGV4KyspIHsKICAgICAgY29uc3QgZWRnZUhhc2ggPSBvdXRsaW5lc0hhc2hbZmVhdHVyZXNbZmVhdHVyZUluZGV4XV0uZWRnZXM7CiAgICAgIGFkZE91dGxpbmVzRm9yRmVhdHVyZShvdXRsaW5lcywgZWRnZUhhc2gsIGluZGV4QXJyYXksIHBvc2l0aW9ucywgbm9ybWFscyk7CiAgICB9CiAgICByZXR1cm4gb3V0bGluZXM7CiAgfQogIGZ1bmN0aW9uIGdlbmVyYXRlT3V0bGluZXNJbmRleEFycmF5KHN5bWJvbG9neURhdGEsIGZlYXR1cmVJbmRleEFycmF5LCBpbmRleEFycmF5LCBwb3NpdGlvbnMsIG5vcm1hbHMpIHsKICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHN5bWJvbG9neURhdGEpIHx8IE9iamVjdC5rZXlzKHN5bWJvbG9neURhdGEpLmxlbmd0aCA9PT0gMCkgewogICAgICByZXR1cm4gdm9pZCAwOwogICAgfQogICAgY29uc3Qgb3V0bGluZXNIYXNoID0gZ2VuZXJhdGVPdXRsaW5lc0hhc2goCiAgICAgIHN5bWJvbG9neURhdGEsCiAgICAgIGZlYXR1cmVJbmRleEFycmF5LAogICAgICBpbmRleEFycmF5LAogICAgICBwb3NpdGlvbnMKICAgICk7CiAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChub3JtYWxzKSB8fCBpbmRleEFycmF5Lmxlbmd0aCAqIDMgIT09IG5vcm1hbHMubGVuZ3RoKSB7CiAgICAgIG5vcm1hbHMgPSBbXTsKICAgIH0KICAgIGNvbnN0IG91dGxpbmVzID0gZ2VuZXJhdGVPdXRsaW5lc0Zyb21IYXNoKAogICAgICBvdXRsaW5lc0hhc2gsCiAgICAgIGluZGV4QXJyYXksCiAgICAgIHBvc2l0aW9ucywKICAgICAgbm9ybWFscwogICAgKTsKICAgIGNvbnN0IG91dGxpbmVzSW5kZXhBcnJheSA9IG91dGxpbmVzLmxlbmd0aCA+IDAgPyBuZXcgVWludDMyQXJyYXkob3V0bGluZXMpIDogdm9pZCAwOwogICAgcmV0dXJuIG91dGxpbmVzSW5kZXhBcnJheTsKICB9CiAgZnVuY3Rpb24gY29udmVydENvbG9yc0FycmF5KGNvbG9ycykgewogICAgY29uc3QgY29sb3JzQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KGNvbG9ycy5sZW5ndGgpOwogICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGNvbG9ycy5sZW5ndGg7IGluZGV4ICs9IDQpIHsKICAgICAgY29sb3JzQXJyYXlbaW5kZXhdID0gc3JnYlRvTGluZWFyX2RlZmF1bHQoQ29sb3JfZGVmYXVsdC5ieXRlVG9GbG9hdChjb2xvcnNbaW5kZXhdKSk7CiAgICAgIGNvbG9yc0FycmF5W2luZGV4ICsgMV0gPSBzcmdiVG9MaW5lYXJfZGVmYXVsdChDb2xvcl9kZWZhdWx0LmJ5dGVUb0Zsb2F0KGNvbG9yc1tpbmRleCArIDFdKSk7CiAgICAgIGNvbG9yc0FycmF5W2luZGV4ICsgMl0gPSBzcmdiVG9MaW5lYXJfZGVmYXVsdChDb2xvcl9kZWZhdWx0LmJ5dGVUb0Zsb2F0KGNvbG9yc1tpbmRleCArIDJdKSk7CiAgICAgIGNvbG9yc0FycmF5W2luZGV4ICsgM10gPSBDb2xvcl9kZWZhdWx0LmJ5dGVUb0Zsb2F0KGNvbG9yc1tpbmRleCArIDNdKTsKICAgIH0KICAgIHJldHVybiBjb2xvcnNBcnJheTsKICB9CiAgZnVuY3Rpb24gZ2VuZXJhdGVOb3JtYWxzKHZlcnRleENvdW50LCBpbmRpY2VzLCBwb3NpdGlvbnMsIG5vcm1hbHMsIHV2MHMsIGNvbG9ycywgZmVhdHVyZUluZGV4KSB7CiAgICBjb25zdCByZXN1bHQgPSB7CiAgICAgIG5vcm1hbHM6IHZvaWQgMCwKICAgICAgcG9zaXRpb25zOiB2b2lkIDAsCiAgICAgIHV2MHM6IHZvaWQgMCwKICAgICAgY29sb3JzOiB2b2lkIDAsCiAgICAgIGZlYXR1cmVJbmRleDogdm9pZCAwLAogICAgICB2ZXJ0ZXhDb3VudDogdm9pZCAwCiAgICB9OwogICAgaWYgKHZlcnRleENvdW50ID09PSAwIHx8ICFkZWZpbmVkX2RlZmF1bHQocG9zaXRpb25zKSB8fCBwb3NpdGlvbnMubGVuZ3RoID09PSAwIHx8IGRlZmluZWRfZGVmYXVsdChub3JtYWxzKSkgewogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQogICAgaWYgKGRlZmluZWRfZGVmYXVsdChpbmRpY2VzKSkgewogICAgICByZXN1bHQudmVydGV4Q291bnQgPSBpbmRpY2VzLmxlbmd0aDsKICAgICAgcmVzdWx0LnBvc2l0aW9ucyA9IG5ldyBGbG9hdDMyQXJyYXkoaW5kaWNlcy5sZW5ndGggKiAzKTsKICAgICAgcmVzdWx0LnV2MHMgPSBkZWZpbmVkX2RlZmF1bHQodXYwcykgPyBuZXcgRmxvYXQzMkFycmF5KGluZGljZXMubGVuZ3RoICogMikgOiB2b2lkIDA7CiAgICAgIHJlc3VsdC5jb2xvcnMgPSBkZWZpbmVkX2RlZmF1bHQoY29sb3JzKSA/IG5ldyBVaW50OEFycmF5KGluZGljZXMubGVuZ3RoICogNCkgOiB2b2lkIDA7CiAgICAgIHJlc3VsdC5mZWF0dXJlSW5kZXggPSBkZWZpbmVkX2RlZmF1bHQoZmVhdHVyZUluZGV4KSA/IG5ldyBBcnJheShpbmRpY2VzLmxlbmd0aCkgOiB2b2lkIDA7CiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5kaWNlcy5sZW5ndGg7IGkrKykgewogICAgICAgIGNvbnN0IGluZGV4ID0gaW5kaWNlc1tpXTsKICAgICAgICByZXN1bHQucG9zaXRpb25zW2kgKiAzXSA9IHBvc2l0aW9uc1tpbmRleCAqIDNdOwogICAgICAgIHJlc3VsdC5wb3NpdGlvbnNbaSAqIDMgKyAxXSA9IHBvc2l0aW9uc1tpbmRleCAqIDMgKyAxXTsKICAgICAgICByZXN1bHQucG9zaXRpb25zW2kgKiAzICsgMl0gPSBwb3NpdGlvbnNbaW5kZXggKiAzICsgMl07CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChyZXN1bHQudXYwcykpIHsKICAgICAgICAgIHJlc3VsdC51djBzW2kgKiAyXSA9IHV2MHNbaW5kZXggKiAyXTsKICAgICAgICAgIHJlc3VsdC51djBzW2kgKiAyICsgMV0gPSB1djBzW2luZGV4ICogMiArIDFdOwogICAgICAgIH0KICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHJlc3VsdC5jb2xvcnMpKSB7CiAgICAgICAgICByZXN1bHQuY29sb3JzW2kgKiA0XSA9IGNvbG9yc1tpbmRleCAqIDRdOwogICAgICAgICAgcmVzdWx0LmNvbG9yc1tpICogNCArIDFdID0gY29sb3JzW2luZGV4ICogNCArIDFdOwogICAgICAgICAgcmVzdWx0LmNvbG9yc1tpICogNCArIDJdID0gY29sb3JzW2luZGV4ICogNCArIDJdOwogICAgICAgICAgcmVzdWx0LmNvbG9yc1tpICogNCArIDNdID0gY29sb3JzW2luZGV4ICogNCArIDNdOwogICAgICAgIH0KICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHJlc3VsdC5mZWF0dXJlSW5kZXgpKSB7CiAgICAgICAgICByZXN1bHQuZmVhdHVyZUluZGV4W2ldID0gZmVhdHVyZUluZGV4W2luZGV4XTsKICAgICAgICB9CiAgICAgIH0KICAgICAgdmVydGV4Q291bnQgPSBpbmRpY2VzLmxlbmd0aDsKICAgICAgcG9zaXRpb25zID0gcmVzdWx0LnBvc2l0aW9uczsKICAgIH0KICAgIGluZGljZXMgPSBuZXcgQXJyYXkodmVydGV4Q291bnQpOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2ZXJ0ZXhDb3VudDsgaSsrKSB7CiAgICAgIGluZGljZXNbaV0gPSBpOwogICAgfQogICAgcmVzdWx0Lm5vcm1hbHMgPSBuZXcgRmxvYXQzMkFycmF5KGluZGljZXMubGVuZ3RoICogMyk7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGluZGljZXMubGVuZ3RoOyBpICs9IDMpIHsKICAgICAgY2FsY3VsYXRlRmFjZU5vcm1hbChyZXN1bHQubm9ybWFscywgaSwgaW5kaWNlcywgcG9zaXRpb25zKTsKICAgIH0KICAgIHJldHVybiByZXN1bHQ7CiAgfQogIGZ1bmN0aW9uIGdlbmVyYXRlR2x0ZkJ1ZmZlcih2ZXJ0ZXhDb3VudCwgaW5kaWNlcywgcG9zaXRpb25zLCBub3JtYWxzLCB1djBzLCBjb2xvcnMsIGZlYXR1cmVJbmRleCwgcGFyYW1ldGVycykgewogICAgaWYgKHZlcnRleENvdW50ID09PSAwIHx8ICFkZWZpbmVkX2RlZmF1bHQocG9zaXRpb25zKSB8fCBwb3NpdGlvbnMubGVuZ3RoID09PSAwKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgYnVmZmVyczogW10sCiAgICAgICAgYnVmZmVyVmlld3M6IFtdLAogICAgICAgIGFjY2Vzc29yczogW10sCiAgICAgICAgbWVzaGVzOiBbXSwKICAgICAgICBub2RlczogW10sCiAgICAgICAgbm9kZXNJblNjZW5lOiBbXQogICAgICB9OwogICAgfQogICAgY29uc3QgYnVmZmVycyA9IFtdOwogICAgY29uc3QgYnVmZmVyVmlld3MgPSBbXTsKICAgIGNvbnN0IGFjY2Vzc29ycyA9IFtdOwogICAgY29uc3QgbWVzaGVzID0gW107CiAgICBjb25zdCBub2RlcyA9IFtdOwogICAgY29uc3Qgbm9kZXNJblNjZW5lID0gW107CiAgICBjb25zdCByb290RXh0ZW5zaW9ucyA9IHt9OwogICAgY29uc3QgZXh0ZW5zaW9uc1VzZWQgPSBbXTsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoaW5kaWNlcykpIHsKICAgICAgdmVydGV4Q291bnQgPSBpbmRpY2VzLmxlbmd0aDsKICAgIH0KICAgIGNvbnN0IHsgaW5kZXhBcnJheSwgdHJhbnNwYXJlbnRWZXJ0ZXhPZmZzZXQgfSA9IGdlbmVyYXRlSW5kZXhBcnJheSgKICAgICAgdmVydGV4Q291bnQsCiAgICAgIGluZGljZXMsCiAgICAgIGNvbG9ycywKICAgICAgcGFyYW1ldGVycy5zcGxpdEdlb21ldHJ5QnlDb2xvclRyYW5zcGFyZW5jeQogICAgKTsKICAgIGNvbnN0IGluZGljZXNCbG9iID0gbmV3IEJsb2IoW2luZGV4QXJyYXldLCB7IHR5cGU6ICJhcHBsaWNhdGlvbi9iaW5hcnkiIH0pOwogICAgY29uc3QgaW5kaWNlc1VSTCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoaW5kaWNlc0Jsb2IpOwogICAgY29uc3QgZW5kSW5kZXggPSB2ZXJ0ZXhDb3VudDsKICAgIGNvbnN0IGZlYXR1cmVJbmRleEFycmF5ID0gcGFyYW1ldGVycy5lbmFibGVGZWF0dXJlcyAmJiBkZWZpbmVkX2RlZmF1bHQoZmVhdHVyZUluZGV4KSA/IG5ldyBGbG9hdDMyQXJyYXkoZmVhdHVyZUluZGV4Lmxlbmd0aCkgOiB2b2lkIDA7CiAgICBsZXQgZmVhdHVyZUNvdW50ID0gMDsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoZmVhdHVyZUluZGV4QXJyYXkpKSB7CiAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBmZWF0dXJlSW5kZXgubGVuZ3RoOyArK2luZGV4KSB7CiAgICAgICAgZmVhdHVyZUluZGV4QXJyYXlbaW5kZXhdID0gZmVhdHVyZUluZGV4W2luZGV4XTsKICAgICAgICBjb25zdCBjb3VudEJ5SW5kZXggPSBmZWF0dXJlSW5kZXhbaW5kZXhdICsgMTsKICAgICAgICBpZiAoZmVhdHVyZUNvdW50IDwgY291bnRCeUluZGV4KSB7CiAgICAgICAgICBmZWF0dXJlQ291bnQgPSBjb3VudEJ5SW5kZXg7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBsZXQgb3V0bGluZXNJbmRpY2VzVVJMOwogICAgY29uc3Qgb3V0bGluZXNJbmRleEFycmF5ID0gZ2VuZXJhdGVPdXRsaW5lc0luZGV4QXJyYXkoCiAgICAgIHBhcmFtZXRlcnMuc3ltYm9sb2d5RGF0YSwKICAgICAgZmVhdHVyZUluZGV4LAogICAgICBpbmRleEFycmF5LAogICAgICBwb3NpdGlvbnMsCiAgICAgIG5vcm1hbHMKICAgICk7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG91dGxpbmVzSW5kZXhBcnJheSkpIHsKICAgICAgY29uc3Qgb3V0bGluZXNJbmRpY2VzQmxvYiA9IG5ldyBCbG9iKFtvdXRsaW5lc0luZGV4QXJyYXldLCB7CiAgICAgICAgdHlwZTogImFwcGxpY2F0aW9uL2JpbmFyeSIKICAgICAgfSk7CiAgICAgIG91dGxpbmVzSW5kaWNlc1VSTCA9IFVSTC5jcmVhdGVPYmplY3RVUkwob3V0bGluZXNJbmRpY2VzQmxvYik7CiAgICB9CiAgICBjb25zdCBtZXNoUG9zaXRpb25zID0gcG9zaXRpb25zLnN1YmFycmF5KDAsIGVuZEluZGV4ICogMyk7CiAgICBjb25zdCBwb3NpdGlvbnNCbG9iID0gbmV3IEJsb2IoW21lc2hQb3NpdGlvbnNdLCB7CiAgICAgIHR5cGU6ICJhcHBsaWNhdGlvbi9iaW5hcnkiCiAgICB9KTsKICAgIGNvbnN0IHBvc2l0aW9uc1VSTCA9IFVSTC5jcmVhdGVPYmplY3RVUkwocG9zaXRpb25zQmxvYik7CiAgICBsZXQgbWluWCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTsKICAgIGxldCBtYXhYID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZOwogICAgbGV0IG1pblkgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7CiAgICBsZXQgbWF4WSA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTsKICAgIGxldCBtaW5aID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOwogICAgbGV0IG1heFogPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1lc2hQb3NpdGlvbnMubGVuZ3RoIC8gMzsgaSsrKSB7CiAgICAgIG1pblggPSBNYXRoLm1pbihtaW5YLCBtZXNoUG9zaXRpb25zW2kgKiAzICsgMF0pOwogICAgICBtYXhYID0gTWF0aC5tYXgobWF4WCwgbWVzaFBvc2l0aW9uc1tpICogMyArIDBdKTsKICAgICAgbWluWSA9IE1hdGgubWluKG1pblksIG1lc2hQb3NpdGlvbnNbaSAqIDMgKyAxXSk7CiAgICAgIG1heFkgPSBNYXRoLm1heChtYXhZLCBtZXNoUG9zaXRpb25zW2kgKiAzICsgMV0pOwogICAgICBtaW5aID0gTWF0aC5taW4obWluWiwgbWVzaFBvc2l0aW9uc1tpICogMyArIDJdKTsKICAgICAgbWF4WiA9IE1hdGgubWF4KG1heFosIG1lc2hQb3NpdGlvbnNbaSAqIDMgKyAyXSk7CiAgICB9CiAgICBjb25zdCBtZXNoTm9ybWFscyA9IG5vcm1hbHMgPyBub3JtYWxzLnN1YmFycmF5KDAsIGVuZEluZGV4ICogMykgOiB2b2lkIDA7CiAgICBsZXQgbm9ybWFsc1VSTDsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQobWVzaE5vcm1hbHMpKSB7CiAgICAgIGNvbnN0IG5vcm1hbHNCbG9iID0gbmV3IEJsb2IoW21lc2hOb3JtYWxzXSwgewogICAgICAgIHR5cGU6ICJhcHBsaWNhdGlvbi9iaW5hcnkiCiAgICAgIH0pOwogICAgICBub3JtYWxzVVJMID0gVVJMLmNyZWF0ZU9iamVjdFVSTChub3JtYWxzQmxvYik7CiAgICB9CiAgICBjb25zdCBtZXNoVXYwcyA9IHV2MHMgPyB1djBzLnN1YmFycmF5KDAsIGVuZEluZGV4ICogMikgOiB2b2lkIDA7CiAgICBsZXQgdXYwVVJMOwogICAgaWYgKGRlZmluZWRfZGVmYXVsdChtZXNoVXYwcykpIHsKICAgICAgY29uc3QgdXYwQmxvYiA9IG5ldyBCbG9iKFttZXNoVXYwc10sIHsgdHlwZTogImFwcGxpY2F0aW9uL2JpbmFyeSIgfSk7CiAgICAgIHV2MFVSTCA9IFVSTC5jcmVhdGVPYmplY3RVUkwodXYwQmxvYik7CiAgICB9CiAgICBjb25zdCBtZXNoQ29sb3JzSW5CeXRlcyA9IGRlZmluZWRfZGVmYXVsdChjb2xvcnMpID8gY29udmVydENvbG9yc0FycmF5KGNvbG9ycy5zdWJhcnJheSgwLCBlbmRJbmRleCAqIDQpKSA6IHZvaWQgMDsKICAgIGxldCBjb2xvcnNVUkw7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG1lc2hDb2xvcnNJbkJ5dGVzKSkgewogICAgICBjb25zdCBjb2xvcnNCbG9iID0gbmV3IEJsb2IoW21lc2hDb2xvcnNJbkJ5dGVzXSwgewogICAgICAgIHR5cGU6ICJhcHBsaWNhdGlvbi9iaW5hcnkiCiAgICAgIH0pOwogICAgICBjb2xvcnNVUkwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGNvbG9yc0Jsb2IpOwogICAgfQogICAgY29uc3QgbWVzaEZlYXR1cmVJZDAgPSBkZWZpbmVkX2RlZmF1bHQoZmVhdHVyZUluZGV4QXJyYXkpID8gZmVhdHVyZUluZGV4QXJyYXkuc3ViYXJyYXkoMCwgZW5kSW5kZXgpIDogdm9pZCAwOwogICAgbGV0IGZlYXR1cmVJZDBVUkw7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KG1lc2hGZWF0dXJlSWQwKSkgewogICAgICBjb25zdCBmZWF0dXJlSWQwQmxvYiA9IG5ldyBCbG9iKFttZXNoRmVhdHVyZUlkMF0sIHsKICAgICAgICB0eXBlOiAiYXBwbGljYXRpb24vYmluYXJ5IgogICAgICB9KTsKICAgICAgZmVhdHVyZUlkMFVSTCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoZmVhdHVyZUlkMEJsb2IpOwogICAgfQogICAgY29uc3QgbWVzaFByb3BlcnR5VGFibGUwID0gZGVmaW5lZF9kZWZhdWx0KGZlYXR1cmVJbmRleEFycmF5KSA/IG5ldyBGbG9hdDMyQXJyYXkoZmVhdHVyZUNvdW50KSA6IHZvaWQgMDsKICAgIGxldCBwcm9wZXJ0eVRhYmxlMFVSTDsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQobWVzaFByb3BlcnR5VGFibGUwKSkgewogICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbWVzaFByb3BlcnR5VGFibGUwLmxlbmd0aDsgKytpbmRleCkgewogICAgICAgIG1lc2hQcm9wZXJ0eVRhYmxlMFtpbmRleF0gPSBpbmRleDsKICAgICAgfQogICAgICBjb25zdCBwcm9wZXJ0eVRhYmxlMEJsb2IgPSBuZXcgQmxvYihbbWVzaFByb3BlcnR5VGFibGUwXSwgewogICAgICAgIHR5cGU6ICJhcHBsaWNhdGlvbi9iaW5hcnkiCiAgICAgIH0pOwogICAgICBwcm9wZXJ0eVRhYmxlMFVSTCA9IFVSTC5jcmVhdGVPYmplY3RVUkwocHJvcGVydHlUYWJsZTBCbG9iKTsKICAgIH0KICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSB7fTsKICAgIGNvbnN0IGV4dGVuc2lvbnMgPSB7fTsKICAgIGF0dHJpYnV0ZXMuUE9TSVRJT04gPSBhY2Nlc3NvcnMubGVuZ3RoOwogICAgYnVmZmVycy5wdXNoKHsKICAgICAgdXJpOiBwb3NpdGlvbnNVUkwsCiAgICAgIGJ5dGVMZW5ndGg6IG1lc2hQb3NpdGlvbnMuYnl0ZUxlbmd0aAogICAgfSk7CiAgICBidWZmZXJWaWV3cy5wdXNoKHsKICAgICAgYnVmZmVyOiBidWZmZXJzLmxlbmd0aCAtIDEsCiAgICAgIGJ5dGVPZmZzZXQ6IDAsCiAgICAgIGJ5dGVMZW5ndGg6IG1lc2hQb3NpdGlvbnMuYnl0ZUxlbmd0aCwKICAgICAgdGFyZ2V0OiAzNDk2MgogICAgfSk7CiAgICBhY2Nlc3NvcnMucHVzaCh7CiAgICAgIGJ1ZmZlclZpZXc6IGJ1ZmZlclZpZXdzLmxlbmd0aCAtIDEsCiAgICAgIGJ5dGVPZmZzZXQ6IDAsCiAgICAgIGNvbXBvbmVudFR5cGU6IDUxMjYsCiAgICAgIGNvdW50OiBtZXNoUG9zaXRpb25zLmxlbmd0aCAvIDMsCiAgICAgIHR5cGU6ICJWRUMzIiwKICAgICAgbWF4OiBbbWluWCwgbWluWSwgbWluWl0sCiAgICAgIG1pbjogW21heFgsIG1heFksIG1heFpdCiAgICB9KTsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQobm9ybWFsc1VSTCkpIHsKICAgICAgYXR0cmlidXRlcy5OT1JNQUwgPSBhY2Nlc3NvcnMubGVuZ3RoOwogICAgICBidWZmZXJzLnB1c2goewogICAgICAgIHVyaTogbm9ybWFsc1VSTCwKICAgICAgICBieXRlTGVuZ3RoOiBtZXNoTm9ybWFscy5ieXRlTGVuZ3RoCiAgICAgIH0pOwogICAgICBidWZmZXJWaWV3cy5wdXNoKHsKICAgICAgICBidWZmZXI6IGJ1ZmZlcnMubGVuZ3RoIC0gMSwKICAgICAgICBieXRlT2Zmc2V0OiAwLAogICAgICAgIGJ5dGVMZW5ndGg6IG1lc2hOb3JtYWxzLmJ5dGVMZW5ndGgsCiAgICAgICAgdGFyZ2V0OiAzNDk2MgogICAgICB9KTsKICAgICAgYWNjZXNzb3JzLnB1c2goewogICAgICAgIGJ1ZmZlclZpZXc6IGJ1ZmZlclZpZXdzLmxlbmd0aCAtIDEsCiAgICAgICAgYnl0ZU9mZnNldDogMCwKICAgICAgICBjb21wb25lbnRUeXBlOiA1MTI2LAogICAgICAgIGNvdW50OiBtZXNoTm9ybWFscy5sZW5ndGggLyAzLAogICAgICAgIHR5cGU6ICJWRUMzIgogICAgICB9KTsKICAgIH0KICAgIGlmIChkZWZpbmVkX2RlZmF1bHQodXYwVVJMKSkgewogICAgICBhdHRyaWJ1dGVzLlRFWENPT1JEXzAgPSBhY2Nlc3NvcnMubGVuZ3RoOwogICAgICBidWZmZXJzLnB1c2goewogICAgICAgIHVyaTogdXYwVVJMLAogICAgICAgIGJ5dGVMZW5ndGg6IG1lc2hVdjBzLmJ5dGVMZW5ndGgKICAgICAgfSk7CiAgICAgIGJ1ZmZlclZpZXdzLnB1c2goewogICAgICAgIGJ1ZmZlcjogYnVmZmVycy5sZW5ndGggLSAxLAogICAgICAgIGJ5dGVPZmZzZXQ6IDAsCiAgICAgICAgYnl0ZUxlbmd0aDogbWVzaFV2MHMuYnl0ZUxlbmd0aCwKICAgICAgICB0YXJnZXQ6IDM0OTYyCiAgICAgIH0pOwogICAgICBhY2Nlc3NvcnMucHVzaCh7CiAgICAgICAgYnVmZmVyVmlldzogYnVmZmVyVmlld3MubGVuZ3RoIC0gMSwKICAgICAgICBieXRlT2Zmc2V0OiAwLAogICAgICAgIGNvbXBvbmVudFR5cGU6IDUxMjYsCiAgICAgICAgY291bnQ6IG1lc2hVdjBzLmxlbmd0aCAvIDIsCiAgICAgICAgdHlwZTogIlZFQzIiCiAgICAgIH0pOwogICAgfQogICAgaWYgKGRlZmluZWRfZGVmYXVsdChjb2xvcnNVUkwpKSB7CiAgICAgIGF0dHJpYnV0ZXMuQ09MT1JfMCA9IGFjY2Vzc29ycy5sZW5ndGg7CiAgICAgIGJ1ZmZlcnMucHVzaCh7CiAgICAgICAgdXJpOiBjb2xvcnNVUkwsCiAgICAgICAgYnl0ZUxlbmd0aDogbWVzaENvbG9yc0luQnl0ZXMuYnl0ZUxlbmd0aAogICAgICB9KTsKICAgICAgYnVmZmVyVmlld3MucHVzaCh7CiAgICAgICAgYnVmZmVyOiBidWZmZXJzLmxlbmd0aCAtIDEsCiAgICAgICAgYnl0ZU9mZnNldDogMCwKICAgICAgICBieXRlTGVuZ3RoOiBtZXNoQ29sb3JzSW5CeXRlcy5ieXRlTGVuZ3RoLAogICAgICAgIHRhcmdldDogMzQ5NjIKICAgICAgfSk7CiAgICAgIGFjY2Vzc29ycy5wdXNoKHsKICAgICAgICBidWZmZXJWaWV3OiBidWZmZXJWaWV3cy5sZW5ndGggLSAxLAogICAgICAgIGJ5dGVPZmZzZXQ6IDAsCiAgICAgICAgY29tcG9uZW50VHlwZTogNTEyNiwKICAgICAgICBjb3VudDogbWVzaENvbG9yc0luQnl0ZXMubGVuZ3RoIC8gNCwKICAgICAgICB0eXBlOiAiVkVDNCIKICAgICAgfSk7CiAgICB9CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGZlYXR1cmVJZDBVUkwpKSB7CiAgICAgIGF0dHJpYnV0ZXMuX0ZFQVRVUkVfSURfMCA9IGFjY2Vzc29ycy5sZW5ndGg7CiAgICAgIGJ1ZmZlcnMucHVzaCh7CiAgICAgICAgdXJpOiBmZWF0dXJlSWQwVVJMLAogICAgICAgIGJ5dGVMZW5ndGg6IG1lc2hGZWF0dXJlSWQwLmJ5dGVMZW5ndGgKICAgICAgfSk7CiAgICAgIGJ1ZmZlclZpZXdzLnB1c2goewogICAgICAgIGJ1ZmZlcjogYnVmZmVycy5sZW5ndGggLSAxLAogICAgICAgIGJ5dGVPZmZzZXQ6IDAsCiAgICAgICAgYnl0ZUxlbmd0aDogbWVzaEZlYXR1cmVJZDAuYnl0ZUxlbmd0aCwKICAgICAgICB0YXJnZXQ6IDM0OTYzCiAgICAgIH0pOwogICAgICBhY2Nlc3NvcnMucHVzaCh7CiAgICAgICAgYnVmZmVyVmlldzogYnVmZmVyVmlld3MubGVuZ3RoIC0gMSwKICAgICAgICBieXRlT2Zmc2V0OiAwLAogICAgICAgIGNvbXBvbmVudFR5cGU6IDUxMjYsCiAgICAgICAgY291bnQ6IG1lc2hGZWF0dXJlSWQwLmxlbmd0aCwKICAgICAgICB0eXBlOiAiU0NBTEFSIgogICAgICB9KTsKICAgICAgZXh0ZW5zaW9ucy5FWFRfbWVzaF9mZWF0dXJlcyA9IHsKICAgICAgICBmZWF0dXJlSWRzOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJpYnV0ZTogMCwKICAgICAgICAgICAgcHJvcGVydHlUYWJsZTogMCwKICAgICAgICAgICAgZmVhdHVyZUNvdW50CiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9OwogICAgICBleHRlbnNpb25zVXNlZC5wdXNoKCJFWFRfbWVzaF9mZWF0dXJlcyIpOwogICAgfQogICAgaWYgKGRlZmluZWRfZGVmYXVsdChwcm9wZXJ0eVRhYmxlMFVSTCkpIHsKICAgICAgYnVmZmVycy5wdXNoKHsKICAgICAgICB1cmk6IHByb3BlcnR5VGFibGUwVVJMLAogICAgICAgIGJ5dGVMZW5ndGg6IG1lc2hQcm9wZXJ0eVRhYmxlMC5ieXRlTGVuZ3RoCiAgICAgIH0pOwogICAgICBidWZmZXJWaWV3cy5wdXNoKHsKICAgICAgICBidWZmZXI6IGJ1ZmZlcnMubGVuZ3RoIC0gMSwKICAgICAgICBieXRlT2Zmc2V0OiAwLAogICAgICAgIGJ5dGVMZW5ndGg6IG1lc2hQcm9wZXJ0eVRhYmxlMC5ieXRlTGVuZ3RoLAogICAgICAgIHRhcmdldDogMzQ5NjMKICAgICAgfSk7CiAgICAgIHJvb3RFeHRlbnNpb25zLkVYVF9zdHJ1Y3R1cmFsX21ldGFkYXRhID0gewogICAgICAgIHNjaGVtYTogewogICAgICAgICAgaWQ6ICJpM3MtbWV0YWRhdGEtc2NoZW1hLTAwMSIsCiAgICAgICAgICBuYW1lOiAiSTNTIG1ldGFkYXRhIHNjaGVtYSAwMDEiLAogICAgICAgICAgZGVzY3JpcHRpb246ICJUaGUgc2NoZW1hIGZvciBJM1MgbWV0YWRhdGEiLAogICAgICAgICAgdmVyc2lvbjogIjEuMCIsCiAgICAgICAgICBjbGFzc2VzOiB7CiAgICAgICAgICAgIGZlYXR1cmU6IHsKICAgICAgICAgICAgICBuYW1lOiAiZmVhdHVyZSIsCiAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICJGZWF0dXJlIG1ldGFkYXRhIiwKICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiB7CiAgICAgICAgICAgICAgICBpbmRleDogewogICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogIlRoZSBmZWF0dXJlIGluZGV4IiwKICAgICAgICAgICAgICAgICAgdHlwZTogIlNDQUxBUiIsCiAgICAgICAgICAgICAgICAgIGNvbXBvbmVudFR5cGU6ICJGTE9BVDMyIiwKICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHByb3BlcnR5VGFibGVzOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgIG5hbWU6ICJmZWF0dXJlLWluZGljZXMtbWFwcGluZyIsCiAgICAgICAgICAgIGNsYXNzOiAiZmVhdHVyZSIsCiAgICAgICAgICAgIGNvdW50OiBmZWF0dXJlQ291bnQsCiAgICAgICAgICAgIHByb3BlcnRpZXM6IHsKICAgICAgICAgICAgICBpbmRleDogewogICAgICAgICAgICAgICAgdmFsdWVzOiBidWZmZXJWaWV3cy5sZW5ndGggLSAxCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9OwogICAgICBleHRlbnNpb25zVXNlZC5wdXNoKCJFWFRfc3RydWN0dXJhbF9tZXRhZGF0YSIpOwogICAgfQogICAgaWYgKGRlZmluZWRfZGVmYXVsdChvdXRsaW5lc0luZGljZXNVUkwpKSB7CiAgICAgIGJ1ZmZlcnMucHVzaCh7CiAgICAgICAgdXJpOiBvdXRsaW5lc0luZGljZXNVUkwsCiAgICAgICAgYnl0ZUxlbmd0aDogb3V0bGluZXNJbmRleEFycmF5LmJ5dGVMZW5ndGgKICAgICAgfSk7CiAgICAgIGJ1ZmZlclZpZXdzLnB1c2goewogICAgICAgIGJ1ZmZlcjogYnVmZmVycy5sZW5ndGggLSAxLAogICAgICAgIGJ5dGVPZmZzZXQ6IDAsCiAgICAgICAgYnl0ZUxlbmd0aDogb3V0bGluZXNJbmRleEFycmF5LmJ5dGVMZW5ndGgsCiAgICAgICAgdGFyZ2V0OiAzNDk2MwogICAgICB9KTsKICAgICAgYWNjZXNzb3JzLnB1c2goewogICAgICAgIGJ1ZmZlclZpZXc6IGJ1ZmZlclZpZXdzLmxlbmd0aCAtIDEsCiAgICAgICAgYnl0ZU9mZnNldDogMCwKICAgICAgICBjb21wb25lbnRUeXBlOiA1MTI1LAogICAgICAgIGNvdW50OiBvdXRsaW5lc0luZGV4QXJyYXkubGVuZ3RoLAogICAgICAgIHR5cGU6ICJTQ0FMQVIiCiAgICAgIH0pOwogICAgICBleHRlbnNpb25zLkNFU0lVTV9wcmltaXRpdmVfb3V0bGluZSA9IHsKICAgICAgICBpbmRpY2VzOiBhY2Nlc3NvcnMubGVuZ3RoIC0gMQogICAgICB9OwogICAgICBleHRlbnNpb25zVXNlZC5wdXNoKCJDRVNJVU1fcHJpbWl0aXZlX291dGxpbmUiKTsKICAgIH0KICAgIGJ1ZmZlcnMucHVzaCh7CiAgICAgIHVyaTogaW5kaWNlc1VSTCwKICAgICAgYnl0ZUxlbmd0aDogaW5kZXhBcnJheS5ieXRlTGVuZ3RoCiAgICB9KTsKICAgIGJ1ZmZlclZpZXdzLnB1c2goewogICAgICBidWZmZXI6IGJ1ZmZlcnMubGVuZ3RoIC0gMSwKICAgICAgYnl0ZU9mZnNldDogMCwKICAgICAgYnl0ZUxlbmd0aDogaW5kZXhBcnJheS5ieXRlTGVuZ3RoLAogICAgICB0YXJnZXQ6IDM0OTYzCiAgICB9KTsKICAgIGNvbnN0IG1lc2hQcmltaXRpdmVzID0gW107CiAgICBpZiAodHJhbnNwYXJlbnRWZXJ0ZXhPZmZzZXQgPiAwKSB7CiAgICAgIGFjY2Vzc29ycy5wdXNoKHsKICAgICAgICBidWZmZXJWaWV3OiBidWZmZXJWaWV3cy5sZW5ndGggLSAxLAogICAgICAgIGJ5dGVPZmZzZXQ6IDAsCiAgICAgICAgY29tcG9uZW50VHlwZTogNTEyNSwKICAgICAgICBjb3VudDogdHJhbnNwYXJlbnRWZXJ0ZXhPZmZzZXQsCiAgICAgICAgdHlwZTogIlNDQUxBUiIKICAgICAgfSk7CiAgICAgIG1lc2hQcmltaXRpdmVzLnB1c2goewogICAgICAgIGF0dHJpYnV0ZXMsCiAgICAgICAgaW5kaWNlczogYWNjZXNzb3JzLmxlbmd0aCAtIDEsCiAgICAgICAgbWF0ZXJpYWw6IG1lc2hQcmltaXRpdmVzLmxlbmd0aCwKICAgICAgICBleHRlbnNpb25zCiAgICAgIH0pOwogICAgfQogICAgaWYgKHRyYW5zcGFyZW50VmVydGV4T2Zmc2V0IDwgdmVydGV4Q291bnQpIHsKICAgICAgYWNjZXNzb3JzLnB1c2goewogICAgICAgIGJ1ZmZlclZpZXc6IGJ1ZmZlclZpZXdzLmxlbmd0aCAtIDEsCiAgICAgICAgYnl0ZU9mZnNldDogNCAqIHRyYW5zcGFyZW50VmVydGV4T2Zmc2V0LAogICAgICAgIC8vIHNraXAgNCBieXRlcyBmb3IgZWFjaCBvcGFxdWUgdmVydGV4CiAgICAgICAgY29tcG9uZW50VHlwZTogNTEyNSwKICAgICAgICBjb3VudDogdmVydGV4Q291bnQgLSB0cmFuc3BhcmVudFZlcnRleE9mZnNldCwKICAgICAgICB0eXBlOiAiU0NBTEFSIgogICAgICB9KTsKICAgICAgbWVzaFByaW1pdGl2ZXMucHVzaCh7CiAgICAgICAgYXR0cmlidXRlcywKICAgICAgICBpbmRpY2VzOiBhY2Nlc3NvcnMubGVuZ3RoIC0gMSwKICAgICAgICBtYXRlcmlhbDogbWVzaFByaW1pdGl2ZXMubGVuZ3RoLAogICAgICAgIGV4dGVuc2lvbnMsCiAgICAgICAgZXh0cmE6IHsKICAgICAgICAgIGlzVHJhbnNwYXJlbnQ6IHRydWUKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogICAgbWVzaGVzLnB1c2goewogICAgICBwcmltaXRpdmVzOiBtZXNoUHJpbWl0aXZlcwogICAgfSk7CiAgICBub2Rlc0luU2NlbmUucHVzaCgwKTsKICAgIG5vZGVzLnB1c2goeyBtZXNoOiAwIH0pOwogICAgcmV0dXJuIHsKICAgICAgYnVmZmVycywKICAgICAgYnVmZmVyVmlld3MsCiAgICAgIGFjY2Vzc29ycywKICAgICAgbWVzaGVzLAogICAgICBub2RlcywKICAgICAgbm9kZXNJblNjZW5lLAogICAgICByb290RXh0ZW5zaW9ucywKICAgICAgZXh0ZW5zaW9uc1VzZWQKICAgIH07CiAgfQogIGZ1bmN0aW9uIGRlY29kZTIoZGF0YSwgc2NoZW1hLCBidWZmZXJJbmZvLCBmZWF0dXJlRGF0YSkgewogICAgY29uc3QgbWFnaWNOdW1iZXIgPSBuZXcgVWludDhBcnJheShkYXRhLCAwLCA1KTsKICAgIGlmIChtYWdpY051bWJlclswXSA9PT0gIkQiLmNoYXJDb2RlQXQoKSAmJiBtYWdpY051bWJlclsxXSA9PT0gIlIiLmNoYXJDb2RlQXQoKSAmJiBtYWdpY051bWJlclsyXSA9PT0gIkEiLmNoYXJDb2RlQXQoKSAmJiBtYWdpY051bWJlclszXSA9PT0gIkMiLmNoYXJDb2RlQXQoKSAmJiBtYWdpY051bWJlcls0XSA9PT0gIk8iLmNoYXJDb2RlQXQoKSkgewogICAgICByZXR1cm4gZGVjb2RlRHJhY29FbmNvZGVkR2VvbWV0cnkoZGF0YSwgYnVmZmVySW5mbyk7CiAgICB9CiAgICByZXR1cm4gZGVjb2RlQmluYXJ5R2VvbWV0cnkoZGF0YSwgc2NoZW1hLCBidWZmZXJJbmZvLCBmZWF0dXJlRGF0YSk7CiAgfQogIGZ1bmN0aW9uIGRlY29kZURyYWNvRW5jb2RlZEdlb21ldHJ5KGRhdGEpIHsKICAgIGNvbnN0IGRyYWNvRGVjb2Rlck1vZHVsZSA9IGRyYWNvMjsKICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBkcmFjb0RlY29kZXJNb2R1bGUuRGVjb2RlckJ1ZmZlcigpOwogICAgY29uc3QgYnl0ZUFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoZGF0YSk7CiAgICBidWZmZXIuSW5pdChieXRlQXJyYXksIGJ5dGVBcnJheS5sZW5ndGgpOwogICAgY29uc3QgZHJhY29EZWNvZGVyID0gbmV3IGRyYWNvRGVjb2Rlck1vZHVsZS5EZWNvZGVyKCk7CiAgICBjb25zdCBnZW9tZXRyeVR5cGUgPSBkcmFjb0RlY29kZXIuR2V0RW5jb2RlZEdlb21ldHJ5VHlwZShidWZmZXIpOwogICAgY29uc3QgbWV0YWRhdGFRdWVyaWVyID0gbmV3IGRyYWNvRGVjb2Rlck1vZHVsZS5NZXRhZGF0YVF1ZXJpZXIoKTsKICAgIGxldCBkcmFjb0dlb21ldHJ5OwogICAgbGV0IHN0YXR1czsKICAgIGlmIChnZW9tZXRyeVR5cGUgPT09IGRyYWNvRGVjb2Rlck1vZHVsZS5UUklBTkdVTEFSX01FU0gpIHsKICAgICAgZHJhY29HZW9tZXRyeSA9IG5ldyBkcmFjb0RlY29kZXJNb2R1bGUuTWVzaCgpOwogICAgICBzdGF0dXMgPSBkcmFjb0RlY29kZXIuRGVjb2RlQnVmZmVyVG9NZXNoKGJ1ZmZlciwgZHJhY29HZW9tZXRyeSk7CiAgICB9CiAgICBjb25zdCBkZWNvZGVkR2VvbWV0cnkgPSB7CiAgICAgIHZlcnRleENvdW50OiBbMF0sCiAgICAgIGZlYXR1cmVDb3VudDogMAogICAgfTsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoc3RhdHVzKSAmJiBzdGF0dXMub2soKSAmJiBkcmFjb0dlb21ldHJ5LnB0ciAhPT0gMCkgewogICAgICBjb25zdCBmYWNlQ291bnQgPSBkcmFjb0dlb21ldHJ5Lm51bV9mYWNlcygpOwogICAgICBjb25zdCBhdHRyaWJ1dGVzQ291bnQgPSBkcmFjb0dlb21ldHJ5Lm51bV9hdHRyaWJ1dGVzKCk7CiAgICAgIGNvbnN0IHZlcnRleENvdW50ID0gZHJhY29HZW9tZXRyeS5udW1fcG9pbnRzKCk7CiAgICAgIGRlY29kZWRHZW9tZXRyeS5pbmRpY2VzID0gbmV3IFVpbnQzMkFycmF5KGZhY2VDb3VudCAqIDMpOwogICAgICBjb25zdCBmYWNlczIgPSBkZWNvZGVkR2VvbWV0cnkuaW5kaWNlczsKICAgICAgZGVjb2RlZEdlb21ldHJ5LnZlcnRleENvdW50WzBdID0gdmVydGV4Q291bnQ7CiAgICAgIGRlY29kZWRHZW9tZXRyeS5zY2FsZV94ID0gMTsKICAgICAgZGVjb2RlZEdlb21ldHJ5LnNjYWxlX3kgPSAxOwogICAgICBjb25zdCBmYWNlID0gbmV3IGRyYWNvRGVjb2Rlck1vZHVsZS5EcmFjb0ludDMyQXJyYXkoMyk7CiAgICAgIGZvciAobGV0IGZhY2VJbmRleCA9IDA7IGZhY2VJbmRleCA8IGZhY2VDb3VudDsgKytmYWNlSW5kZXgpIHsKICAgICAgICBkcmFjb0RlY29kZXIuR2V0RmFjZUZyb21NZXNoKGRyYWNvR2VvbWV0cnksIGZhY2VJbmRleCwgZmFjZSk7CiAgICAgICAgZmFjZXMyW2ZhY2VJbmRleCAqIDNdID0gZmFjZS5HZXRWYWx1ZSgwKTsKICAgICAgICBmYWNlczJbZmFjZUluZGV4ICogMyArIDFdID0gZmFjZS5HZXRWYWx1ZSgxKTsKICAgICAgICBmYWNlczJbZmFjZUluZGV4ICogMyArIDJdID0gZmFjZS5HZXRWYWx1ZSgyKTsKICAgICAgfQogICAgICBkcmFjb0RlY29kZXJNb2R1bGUuZGVzdHJveShmYWNlKTsKICAgICAgZm9yIChsZXQgYXR0ckluZGV4ID0gMDsgYXR0ckluZGV4IDwgYXR0cmlidXRlc0NvdW50OyArK2F0dHJJbmRleCkgewogICAgICAgIGNvbnN0IGRyYWNvQXR0cmlidXRlID0gZHJhY29EZWNvZGVyLkdldEF0dHJpYnV0ZSgKICAgICAgICAgIGRyYWNvR2VvbWV0cnksCiAgICAgICAgICBhdHRySW5kZXgKICAgICAgICApOwogICAgICAgIGNvbnN0IGF0dHJpYnV0ZURhdGEgPSBkZWNvZGVEcmFjb0F0dHJpYnV0ZSgKICAgICAgICAgIGRyYWNvRGVjb2Rlck1vZHVsZSwKICAgICAgICAgIGRyYWNvRGVjb2RlciwKICAgICAgICAgIGRyYWNvR2VvbWV0cnksCiAgICAgICAgICBkcmFjb0F0dHJpYnV0ZSwKICAgICAgICAgIHZlcnRleENvdW50CiAgICAgICAgKTsKICAgICAgICBjb25zdCBkcmFjb0F0dHJpYnV0ZVR5cGUgPSBkcmFjb0F0dHJpYnV0ZS5hdHRyaWJ1dGVfdHlwZSgpOwogICAgICAgIGxldCBhdHRyaWJ1dGVpM3NOYW1lID0gInVua25vd24iOwogICAgICAgIGlmIChkcmFjb0F0dHJpYnV0ZVR5cGUgPT09IGRyYWNvRGVjb2Rlck1vZHVsZS5QT1NJVElPTikgewogICAgICAgICAgYXR0cmlidXRlaTNzTmFtZSA9ICJwb3NpdGlvbnMiOwogICAgICAgIH0gZWxzZSBpZiAoZHJhY29BdHRyaWJ1dGVUeXBlID09PSBkcmFjb0RlY29kZXJNb2R1bGUuTk9STUFMKSB7CiAgICAgICAgICBhdHRyaWJ1dGVpM3NOYW1lID0gIm5vcm1hbHMiOwogICAgICAgIH0gZWxzZSBpZiAoZHJhY29BdHRyaWJ1dGVUeXBlID09PSBkcmFjb0RlY29kZXJNb2R1bGUuQ09MT1IpIHsKICAgICAgICAgIGF0dHJpYnV0ZWkzc05hbWUgPSAiY29sb3JzIjsKICAgICAgICB9IGVsc2UgaWYgKGRyYWNvQXR0cmlidXRlVHlwZSA9PT0gZHJhY29EZWNvZGVyTW9kdWxlLlRFWF9DT09SRCkgewogICAgICAgICAgYXR0cmlidXRlaTNzTmFtZSA9ICJ1djBzIjsKICAgICAgICB9CiAgICAgICAgY29uc3QgbWV0YWRhdGEgPSBkcmFjb0RlY29kZXIuR2V0QXR0cmlidXRlTWV0YWRhdGEoCiAgICAgICAgICBkcmFjb0dlb21ldHJ5LAogICAgICAgICAgYXR0ckluZGV4CiAgICAgICAgKTsKICAgICAgICBpZiAobWV0YWRhdGEucHRyICE9PSAwKSB7CiAgICAgICAgICBjb25zdCBudW1FbnRyaWVzID0gbWV0YWRhdGFRdWVyaWVyLk51bUVudHJpZXMobWV0YWRhdGEpOwogICAgICAgICAgZm9yIChsZXQgZW50cnkgPSAwOyBlbnRyeSA8IG51bUVudHJpZXM7ICsrZW50cnkpIHsKICAgICAgICAgICAgY29uc3QgZW50cnlOYW1lID0gbWV0YWRhdGFRdWVyaWVyLkdldEVudHJ5TmFtZShtZXRhZGF0YSwgZW50cnkpOwogICAgICAgICAgICBpZiAoZW50cnlOYW1lID09PSAiaTNzLXNjYWxlX3giKSB7CiAgICAgICAgICAgICAgZGVjb2RlZEdlb21ldHJ5LnNjYWxlX3ggPSBtZXRhZGF0YVF1ZXJpZXIuR2V0RG91YmxlRW50cnkoCiAgICAgICAgICAgICAgICBtZXRhZGF0YSwKICAgICAgICAgICAgICAgICJpM3Mtc2NhbGVfeCIKICAgICAgICAgICAgICApOwogICAgICAgICAgICB9IGVsc2UgaWYgKGVudHJ5TmFtZSA9PT0gImkzcy1zY2FsZV95IikgewogICAgICAgICAgICAgIGRlY29kZWRHZW9tZXRyeS5zY2FsZV95ID0gbWV0YWRhdGFRdWVyaWVyLkdldERvdWJsZUVudHJ5KAogICAgICAgICAgICAgICAgbWV0YWRhdGEsCiAgICAgICAgICAgICAgICAiaTNzLXNjYWxlX3kiCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChlbnRyeU5hbWUgPT09ICJpM3MtYXR0cmlidXRlLXR5cGUiKSB7CiAgICAgICAgICAgICAgYXR0cmlidXRlaTNzTmFtZSA9IG1ldGFkYXRhUXVlcmllci5HZXRTdHJpbmdFbnRyeSgKICAgICAgICAgICAgICAgIG1ldGFkYXRhLAogICAgICAgICAgICAgICAgImkzcy1hdHRyaWJ1dGUtdHlwZSIKICAgICAgICAgICAgICApOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoZGVjb2RlZEdlb21ldHJ5W2F0dHJpYnV0ZWkzc05hbWVdKSkgewogICAgICAgICAgY29uc29sZS5sb2coIkF0dHJpYnV0ZSBhbHJlYWR5IGV4aXN0cyIsIGF0dHJpYnV0ZWkzc05hbWUpOwogICAgICAgIH0KICAgICAgICBkZWNvZGVkR2VvbWV0cnlbYXR0cmlidXRlaTNzTmFtZV0gPSBhdHRyaWJ1dGVEYXRhOwogICAgICAgIGlmIChhdHRyaWJ1dGVpM3NOYW1lID09PSAiZmVhdHVyZS1pbmRleCIpIHsKICAgICAgICAgIGRlY29kZWRHZW9tZXRyeS5mZWF0dXJlQ291bnQrKzsKICAgICAgICB9CiAgICAgIH0KICAgICAgZHJhY29EZWNvZGVyTW9kdWxlLmRlc3Ryb3koZHJhY29HZW9tZXRyeSk7CiAgICB9CiAgICBkcmFjb0RlY29kZXJNb2R1bGUuZGVzdHJveShtZXRhZGF0YVF1ZXJpZXIpOwogICAgZHJhY29EZWNvZGVyTW9kdWxlLmRlc3Ryb3koZHJhY29EZWNvZGVyKTsKICAgIHJldHVybiBkZWNvZGVkR2VvbWV0cnk7CiAgfQogIGZ1bmN0aW9uIGRlY29kZURyYWNvQXR0cmlidXRlKGRyYWNvRGVjb2Rlck1vZHVsZSwgZHJhY29EZWNvZGVyLCBkcmFjb0dlb21ldHJ5LCBkcmFjb0F0dHJpYnV0ZSwgdmVydGV4Q291bnQpIHsKICAgIGNvbnN0IGJ1ZmZlclNpemUgPSBkcmFjb0F0dHJpYnV0ZS5udW1fY29tcG9uZW50cygpICogdmVydGV4Q291bnQ7CiAgICBsZXQgZHJhY29BdHRyaWJ1dGVEYXRhOwogICAgY29uc3QgaGFuZGxlcnMgPSBbCiAgICAgIGZ1bmN0aW9uKCkgewogICAgICB9LAogICAgICAvLyBEVF9JTlZBTElEIC0gMAogICAgICBmdW5jdGlvbigpIHsKICAgICAgICBkcmFjb0F0dHJpYnV0ZURhdGEgPSBuZXcgZHJhY29EZWNvZGVyTW9kdWxlLkRyYWNvSW50OEFycmF5KGJ1ZmZlclNpemUpOwogICAgICAgIGNvbnN0IHN1Y2Nlc3MgPSBkcmFjb0RlY29kZXIuR2V0QXR0cmlidXRlSW50OEZvckFsbFBvaW50cygKICAgICAgICAgIGRyYWNvR2VvbWV0cnksCiAgICAgICAgICBkcmFjb0F0dHJpYnV0ZSwKICAgICAgICAgIGRyYWNvQXR0cmlidXRlRGF0YQogICAgICAgICk7CiAgICAgICAgaWYgKCFzdWNjZXNzKSB7CiAgICAgICAgICBjb25zb2xlLmVycm9yKCJCYWQgc3RyZWFtIik7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGF0dHJpYnV0ZURhdGEyID0gbmV3IEludDhBcnJheShidWZmZXJTaXplKTsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1ZmZlclNpemU7ICsraSkgewogICAgICAgICAgYXR0cmlidXRlRGF0YTJbaV0gPSBkcmFjb0F0dHJpYnV0ZURhdGEuR2V0VmFsdWUoaSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBhdHRyaWJ1dGVEYXRhMjsKICAgICAgfSwKICAgICAgZnVuY3Rpb24oKSB7CiAgICAgICAgZHJhY29BdHRyaWJ1dGVEYXRhID0gbmV3IGRyYWNvRGVjb2Rlck1vZHVsZS5EcmFjb0ludDhBcnJheShidWZmZXJTaXplKTsKICAgICAgICBjb25zdCBzdWNjZXNzID0gZHJhY29EZWNvZGVyLkdldEF0dHJpYnV0ZVVJbnQ4Rm9yQWxsUG9pbnRzKAogICAgICAgICAgZHJhY29HZW9tZXRyeSwKICAgICAgICAgIGRyYWNvQXR0cmlidXRlLAogICAgICAgICAgZHJhY29BdHRyaWJ1dGVEYXRhCiAgICAgICAgKTsKICAgICAgICBpZiAoIXN1Y2Nlc3MpIHsKICAgICAgICAgIGNvbnNvbGUuZXJyb3IoIkJhZCBzdHJlYW0iKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgYXR0cmlidXRlRGF0YTIgPSBuZXcgVWludDhBcnJheShidWZmZXJTaXplKTsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1ZmZlclNpemU7ICsraSkgewogICAgICAgICAgYXR0cmlidXRlRGF0YTJbaV0gPSBkcmFjb0F0dHJpYnV0ZURhdGEuR2V0VmFsdWUoaSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBhdHRyaWJ1dGVEYXRhMjsKICAgICAgfSwKICAgICAgZnVuY3Rpb24oKSB7CiAgICAgICAgZHJhY29BdHRyaWJ1dGVEYXRhID0gbmV3IGRyYWNvRGVjb2Rlck1vZHVsZS5EcmFjb0ludDE2QXJyYXkoYnVmZmVyU2l6ZSk7CiAgICAgICAgY29uc3Qgc3VjY2VzcyA9IGRyYWNvRGVjb2Rlci5HZXRBdHRyaWJ1dGVJbnQxNkZvckFsbFBvaW50cygKICAgICAgICAgIGRyYWNvR2VvbWV0cnksCiAgICAgICAgICBkcmFjb0F0dHJpYnV0ZSwKICAgICAgICAgIGRyYWNvQXR0cmlidXRlRGF0YQogICAgICAgICk7CiAgICAgICAgaWYgKCFzdWNjZXNzKSB7CiAgICAgICAgICBjb25zb2xlLmVycm9yKCJCYWQgc3RyZWFtIik7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGF0dHJpYnV0ZURhdGEyID0gbmV3IEludDE2QXJyYXkoYnVmZmVyU2l6ZSk7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWZmZXJTaXplOyArK2kpIHsKICAgICAgICAgIGF0dHJpYnV0ZURhdGEyW2ldID0gZHJhY29BdHRyaWJ1dGVEYXRhLkdldFZhbHVlKGkpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gYXR0cmlidXRlRGF0YTI7CiAgICAgIH0sCiAgICAgIGZ1bmN0aW9uKCkgewogICAgICAgIGRyYWNvQXR0cmlidXRlRGF0YSA9IG5ldyBkcmFjb0RlY29kZXJNb2R1bGUuRHJhY29JbnQxNkFycmF5KGJ1ZmZlclNpemUpOwogICAgICAgIGNvbnN0IHN1Y2Nlc3MgPSBkcmFjb0RlY29kZXIuR2V0QXR0cmlidXRlVUludDE2Rm9yQWxsUG9pbnRzKAogICAgICAgICAgZHJhY29HZW9tZXRyeSwKICAgICAgICAgIGRyYWNvQXR0cmlidXRlLAogICAgICAgICAgZHJhY29BdHRyaWJ1dGVEYXRhCiAgICAgICAgKTsKICAgICAgICBpZiAoIXN1Y2Nlc3MpIHsKICAgICAgICAgIGNvbnNvbGUuZXJyb3IoIkJhZCBzdHJlYW0iKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgYXR0cmlidXRlRGF0YTIgPSBuZXcgVWludDE2QXJyYXkoYnVmZmVyU2l6ZSk7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWZmZXJTaXplOyArK2kpIHsKICAgICAgICAgIGF0dHJpYnV0ZURhdGEyW2ldID0gZHJhY29BdHRyaWJ1dGVEYXRhLkdldFZhbHVlKGkpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gYXR0cmlidXRlRGF0YTI7CiAgICAgIH0sCiAgICAgIGZ1bmN0aW9uKCkgewogICAgICAgIGRyYWNvQXR0cmlidXRlRGF0YSA9IG5ldyBkcmFjb0RlY29kZXJNb2R1bGUuRHJhY29JbnQzMkFycmF5KGJ1ZmZlclNpemUpOwogICAgICAgIGNvbnN0IHN1Y2Nlc3MgPSBkcmFjb0RlY29kZXIuR2V0QXR0cmlidXRlSW50MzJGb3JBbGxQb2ludHMoCiAgICAgICAgICBkcmFjb0dlb21ldHJ5LAogICAgICAgICAgZHJhY29BdHRyaWJ1dGUsCiAgICAgICAgICBkcmFjb0F0dHJpYnV0ZURhdGEKICAgICAgICApOwogICAgICAgIGlmICghc3VjY2VzcykgewogICAgICAgICAgY29uc29sZS5lcnJvcigiQmFkIHN0cmVhbSIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBhdHRyaWJ1dGVEYXRhMiA9IG5ldyBJbnQzMkFycmF5KGJ1ZmZlclNpemUpOwogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnVmZmVyU2l6ZTsgKytpKSB7CiAgICAgICAgICBhdHRyaWJ1dGVEYXRhMltpXSA9IGRyYWNvQXR0cmlidXRlRGF0YS5HZXRWYWx1ZShpKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGF0dHJpYnV0ZURhdGEyOwogICAgICB9LAogICAgICBmdW5jdGlvbigpIHsKICAgICAgICBkcmFjb0F0dHJpYnV0ZURhdGEgPSBuZXcgZHJhY29EZWNvZGVyTW9kdWxlLkRyYWNvSW50MzJBcnJheShidWZmZXJTaXplKTsKICAgICAgICBjb25zdCBzdWNjZXNzID0gZHJhY29EZWNvZGVyLkdldEF0dHJpYnV0ZVVJbnQzMkZvckFsbFBvaW50cygKICAgICAgICAgIGRyYWNvR2VvbWV0cnksCiAgICAgICAgICBkcmFjb0F0dHJpYnV0ZSwKICAgICAgICAgIGRyYWNvQXR0cmlidXRlRGF0YQogICAgICAgICk7CiAgICAgICAgaWYgKCFzdWNjZXNzKSB7CiAgICAgICAgICBjb25zb2xlLmVycm9yKCJCYWQgc3RyZWFtIik7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGF0dHJpYnV0ZURhdGEyID0gbmV3IFVpbnQzMkFycmF5KGJ1ZmZlclNpemUpOwogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnVmZmVyU2l6ZTsgKytpKSB7CiAgICAgICAgICBhdHRyaWJ1dGVEYXRhMltpXSA9IGRyYWNvQXR0cmlidXRlRGF0YS5HZXRWYWx1ZShpKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGF0dHJpYnV0ZURhdGEyOwogICAgICB9LAogICAgICBmdW5jdGlvbigpIHsKICAgICAgfSwKICAgICAgZnVuY3Rpb24oKSB7CiAgICAgIH0sCiAgICAgIGZ1bmN0aW9uKCkgewogICAgICAgIGRyYWNvQXR0cmlidXRlRGF0YSA9IG5ldyBkcmFjb0RlY29kZXJNb2R1bGUuRHJhY29GbG9hdDMyQXJyYXkoYnVmZmVyU2l6ZSk7CiAgICAgICAgY29uc3Qgc3VjY2VzcyA9IGRyYWNvRGVjb2Rlci5HZXRBdHRyaWJ1dGVGbG9hdEZvckFsbFBvaW50cygKICAgICAgICAgIGRyYWNvR2VvbWV0cnksCiAgICAgICAgICBkcmFjb0F0dHJpYnV0ZSwKICAgICAgICAgIGRyYWNvQXR0cmlidXRlRGF0YQogICAgICAgICk7CiAgICAgICAgaWYgKCFzdWNjZXNzKSB7CiAgICAgICAgICBjb25zb2xlLmVycm9yKCJCYWQgc3RyZWFtIik7CiAgICAgICAgfQogICAgICAgIGNvbnN0IGF0dHJpYnV0ZURhdGEyID0gbmV3IEZsb2F0MzJBcnJheShidWZmZXJTaXplKTsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1ZmZlclNpemU7ICsraSkgewogICAgICAgICAgYXR0cmlidXRlRGF0YTJbaV0gPSBkcmFjb0F0dHJpYnV0ZURhdGEuR2V0VmFsdWUoaSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBhdHRyaWJ1dGVEYXRhMjsKICAgICAgfSwKICAgICAgZnVuY3Rpb24oKSB7CiAgICAgIH0sCiAgICAgIGZ1bmN0aW9uKCkgewogICAgICAgIGRyYWNvQXR0cmlidXRlRGF0YSA9IG5ldyBkcmFjb0RlY29kZXJNb2R1bGUuRHJhY29VSW50OEFycmF5KGJ1ZmZlclNpemUpOwogICAgICAgIGNvbnN0IHN1Y2Nlc3MgPSBkcmFjb0RlY29kZXIuR2V0QXR0cmlidXRlVUludDhGb3JBbGxQb2ludHMoCiAgICAgICAgICBkcmFjb0dlb21ldHJ5LAogICAgICAgICAgZHJhY29BdHRyaWJ1dGUsCiAgICAgICAgICBkcmFjb0F0dHJpYnV0ZURhdGEKICAgICAgICApOwogICAgICAgIGlmICghc3VjY2VzcykgewogICAgICAgICAgY29uc29sZS5lcnJvcigiQmFkIHN0cmVhbSIpOwogICAgICAgIH0KICAgICAgICBjb25zdCBhdHRyaWJ1dGVEYXRhMiA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlclNpemUpOwogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnVmZmVyU2l6ZTsgKytpKSB7CiAgICAgICAgICBhdHRyaWJ1dGVEYXRhMltpXSA9IGRyYWNvQXR0cmlidXRlRGF0YS5HZXRWYWx1ZShpKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGF0dHJpYnV0ZURhdGEyOwogICAgICB9CiAgICBdOwogICAgY29uc3QgYXR0cmlidXRlRGF0YSA9IGhhbmRsZXJzW2RyYWNvQXR0cmlidXRlLmRhdGFfdHlwZSgpXSgpOwogICAgaWYgKGRlZmluZWRfZGVmYXVsdChkcmFjb0F0dHJpYnV0ZURhdGEpKSB7CiAgICAgIGRyYWNvRGVjb2Rlck1vZHVsZS5kZXN0cm95KGRyYWNvQXR0cmlidXRlRGF0YSk7CiAgICB9CiAgICByZXR1cm4gYXR0cmlidXRlRGF0YTsKICB9CiAgZnVuY3Rpb24gZGVjb2RlQmluYXJ5R2VvbWV0cnkoZGF0YSwgc2NoZW1hLCBidWZmZXJJbmZvLCBmZWF0dXJlRGF0YSkgewogICAgY29uc3QgZGVjb2RlZEdlb21ldHJ5ID0gewogICAgICB2ZXJ0ZXhDb3VudDogMAogICAgfTsKICAgIGNvbnN0IGRhdGFWaWV3ID0gbmV3IERhdGFWaWV3KGRhdGEpOwogICAgdHJ5IHsKICAgICAgbGV0IG9mZnNldCA9IDA7CiAgICAgIGRlY29kZWRHZW9tZXRyeS52ZXJ0ZXhDb3VudCA9IGRhdGFWaWV3LmdldFVpbnQzMihvZmZzZXQsIDEpOwogICAgICBvZmZzZXQgKz0gNDsKICAgICAgZGVjb2RlZEdlb21ldHJ5LmZlYXR1cmVDb3VudCA9IGRhdGFWaWV3LmdldFVpbnQzMihvZmZzZXQsIDEpOwogICAgICBvZmZzZXQgKz0gNDsKICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChidWZmZXJJbmZvKSkgewogICAgICAgIGZvciAobGV0IGF0dHJJbmRleCA9IDA7IGF0dHJJbmRleCA8IGJ1ZmZlckluZm8uYXR0cmlidXRlcy5sZW5ndGg7IGF0dHJJbmRleCsrKSB7CiAgICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGJpbmFyeUF0dHJpYnV0ZURlY29kZXJzW2J1ZmZlckluZm8uYXR0cmlidXRlc1thdHRySW5kZXhdXSkpIHsKICAgICAgICAgICAgb2Zmc2V0ID0gYmluYXJ5QXR0cmlidXRlRGVjb2RlcnNbYnVmZmVySW5mby5hdHRyaWJ1dGVzW2F0dHJJbmRleF1dKAogICAgICAgICAgICAgIGRlY29kZWRHZW9tZXRyeSwKICAgICAgICAgICAgICBkYXRhLAogICAgICAgICAgICAgIG9mZnNldAogICAgICAgICAgICApOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY29uc29sZS5lcnJvcigKICAgICAgICAgICAgICAiVW5rbm93biBkZWNvZGVyIGZvciIsCiAgICAgICAgICAgICAgYnVmZmVySW5mby5hdHRyaWJ1dGVzW2F0dHJJbmRleF0KICAgICAgICAgICAgKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgbGV0IG9yZGVyaW5nID0gc2NoZW1hLm9yZGVyaW5nOwogICAgICAgIGxldCBmZWF0dXJlQXR0cmlidXRlT3JkZXIgPSBzY2hlbWEuZmVhdHVyZUF0dHJpYnV0ZU9yZGVyOwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoZmVhdHVyZURhdGEpICYmIGRlZmluZWRfZGVmYXVsdChmZWF0dXJlRGF0YS5nZW9tZXRyeURhdGEpICYmIGRlZmluZWRfZGVmYXVsdChmZWF0dXJlRGF0YS5nZW9tZXRyeURhdGFbMF0pICYmIGRlZmluZWRfZGVmYXVsdChmZWF0dXJlRGF0YS5nZW9tZXRyeURhdGFbMF0ucGFyYW1zKSkgewogICAgICAgICAgb3JkZXJpbmcgPSBPYmplY3Qua2V5cygKICAgICAgICAgICAgZmVhdHVyZURhdGEuZ2VvbWV0cnlEYXRhWzBdLnBhcmFtcy52ZXJ0ZXhBdHRyaWJ1dGVzCiAgICAgICAgICApOwogICAgICAgICAgZmVhdHVyZUF0dHJpYnV0ZU9yZGVyID0gT2JqZWN0LmtleXMoCiAgICAgICAgICAgIGZlYXR1cmVEYXRhLmdlb21ldHJ5RGF0YVswXS5wYXJhbXMuZmVhdHVyZUF0dHJpYnV0ZXMKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3JkZXJpbmcubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIGNvbnN0IGRlY29kZXIgPSBiaW5hcnlBdHRyaWJ1dGVEZWNvZGVyc1tvcmRlcmluZ1tpXV07CiAgICAgICAgICBvZmZzZXQgPSBkZWNvZGVyKGRlY29kZWRHZW9tZXRyeSwgZGF0YSwgb2Zmc2V0KTsKICAgICAgICB9CiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBmZWF0dXJlQXR0cmlidXRlT3JkZXIubGVuZ3RoOyBqKyspIHsKICAgICAgICAgIGNvbnN0IGN1ckRlY29kZXIgPSBiaW5hcnlBdHRyaWJ1dGVEZWNvZGVyc1tmZWF0dXJlQXR0cmlidXRlT3JkZXJbal1dOwogICAgICAgICAgb2Zmc2V0ID0gY3VyRGVjb2RlcihkZWNvZGVkR2VvbWV0cnksIGRhdGEsIG9mZnNldCk7CiAgICAgICAgfQogICAgICB9CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIGNvbnNvbGUuZXJyb3IoZSk7CiAgICB9CiAgICBkZWNvZGVkR2VvbWV0cnkuc2NhbGVfeCA9IDE7CiAgICBkZWNvZGVkR2VvbWV0cnkuc2NhbGVfeSA9IDE7CiAgICByZXR1cm4gZGVjb2RlZEdlb21ldHJ5OwogIH0KICBmdW5jdGlvbiBkZWNvZGVBbmRDcmVhdGVHbHRmKHBhcmFtZXRlcnMpIHsKICAgIGNvbnN0IGdlb21ldHJ5RGF0YSA9IGRlY29kZTIoCiAgICAgIHBhcmFtZXRlcnMuYmluYXJ5RGF0YSwKICAgICAgcGFyYW1ldGVycy5zY2hlbWEsCiAgICAgIHBhcmFtZXRlcnMuYnVmZmVySW5mbywKICAgICAgcGFyYW1ldGVycy5mZWF0dXJlRGF0YQogICAgKTsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQocGFyYW1ldGVycy5nZW9pZERhdGFMaXN0KSAmJiBwYXJhbWV0ZXJzLmdlb2lkRGF0YUxpc3QubGVuZ3RoID4gMCkgewogICAgICBvcnRob21ldHJpY1RvRWxsaXBzb2lkYWwoCiAgICAgICAgZ2VvbWV0cnlEYXRhLnZlcnRleENvdW50LAogICAgICAgIGdlb21ldHJ5RGF0YS5wb3NpdGlvbnMsCiAgICAgICAgZ2VvbWV0cnlEYXRhLnNjYWxlX3gsCiAgICAgICAgZ2VvbWV0cnlEYXRhLnNjYWxlX3ksCiAgICAgICAgcGFyYW1ldGVycy5jYXJ0b2dyYXBoaWNDZW50ZXIsCiAgICAgICAgcGFyYW1ldGVycy5nZW9pZERhdGFMaXN0LAogICAgICAgIGZhbHNlCiAgICAgICk7CiAgICB9CiAgICB0cmFuc2Zvcm1Ub0xvY2FsKAogICAgICBnZW9tZXRyeURhdGEudmVydGV4Q291bnQsCiAgICAgIGdlb21ldHJ5RGF0YS5wb3NpdGlvbnMsCiAgICAgIGdlb21ldHJ5RGF0YS5ub3JtYWxzLAogICAgICBwYXJhbWV0ZXJzLmNhcnRvZ3JhcGhpY0NlbnRlciwKICAgICAgcGFyYW1ldGVycy5jYXJ0ZXNpYW5DZW50ZXIsCiAgICAgIHBhcmFtZXRlcnMucGFyZW50Um90YXRpb24sCiAgICAgIHBhcmFtZXRlcnMuZWxsaXBzb2lkUmFkaWlTcXVhcmUsCiAgICAgIGdlb21ldHJ5RGF0YS5zY2FsZV94LAogICAgICBnZW9tZXRyeURhdGEuc2NhbGVfeQogICAgKTsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQoZ2VvbWV0cnlEYXRhLnV2MHMpICYmIGRlZmluZWRfZGVmYXVsdChnZW9tZXRyeURhdGFbInV2LXJlZ2lvbiJdKSkgewogICAgICBjcm9wVVZzKAogICAgICAgIGdlb21ldHJ5RGF0YS52ZXJ0ZXhDb3VudCwKICAgICAgICBnZW9tZXRyeURhdGEudXYwcywKICAgICAgICBnZW9tZXRyeURhdGFbInV2LXJlZ2lvbiJdCiAgICAgICk7CiAgICB9CiAgICBsZXQgZmVhdHVyZUluZGV4OwogICAgaWYgKGRlZmluZWRfZGVmYXVsdChnZW9tZXRyeURhdGFbImZlYXR1cmUtaW5kZXgiXSkpIHsKICAgICAgZmVhdHVyZUluZGV4ID0gZ2VvbWV0cnlEYXRhWyJmZWF0dXJlLWluZGV4Il07CiAgICB9IGVsc2UgaWYgKGRlZmluZWRfZGVmYXVsdChnZW9tZXRyeURhdGFbImZhY2VSYW5nZSJdKSkgewogICAgICBmZWF0dXJlSW5kZXggPSBuZXcgQXJyYXkoZ2VvbWV0cnlEYXRhLnZlcnRleENvdW50KTsKICAgICAgZm9yIChsZXQgcmFuZ2UgPSAwOyByYW5nZSA8IGdlb21ldHJ5RGF0YVsiZmFjZVJhbmdlIl0ubGVuZ3RoIC0gMTsgcmFuZ2UgKz0gMikgewogICAgICAgIGNvbnN0IGN1ckluZGV4ID0gcmFuZ2UgLyAyOwogICAgICAgIGNvbnN0IHJhbmdlU3RhcnQgPSBnZW9tZXRyeURhdGFbImZhY2VSYW5nZSJdW3JhbmdlXTsKICAgICAgICBjb25zdCByYW5nZUVuZCA9IGdlb21ldHJ5RGF0YVsiZmFjZVJhbmdlIl1bcmFuZ2UgKyAxXTsKICAgICAgICBmb3IgKGxldCBpID0gcmFuZ2VTdGFydDsgaSA8PSByYW5nZUVuZDsgaSsrKSB7CiAgICAgICAgICBmZWF0dXJlSW5kZXhbaSAqIDNdID0gY3VySW5kZXg7CiAgICAgICAgICBmZWF0dXJlSW5kZXhbaSAqIDMgKyAxXSA9IGN1ckluZGV4OwogICAgICAgICAgZmVhdHVyZUluZGV4W2kgKiAzICsgMl0gPSBjdXJJbmRleDsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIGlmIChwYXJhbWV0ZXJzLmNhbGN1bGF0ZU5vcm1hbHMpIHsKICAgICAgY29uc3QgZGF0YSA9IGdlbmVyYXRlTm9ybWFscygKICAgICAgICBnZW9tZXRyeURhdGEudmVydGV4Q291bnQsCiAgICAgICAgZ2VvbWV0cnlEYXRhLmluZGljZXMsCiAgICAgICAgZ2VvbWV0cnlEYXRhLnBvc2l0aW9ucywKICAgICAgICBnZW9tZXRyeURhdGEubm9ybWFscywKICAgICAgICBnZW9tZXRyeURhdGEudXYwcywKICAgICAgICBnZW9tZXRyeURhdGEuY29sb3JzLAogICAgICAgIGZlYXR1cmVJbmRleAogICAgICApOwogICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGRhdGEubm9ybWFscykpIHsKICAgICAgICBnZW9tZXRyeURhdGEubm9ybWFscyA9IGRhdGEubm9ybWFsczsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KGRhdGEudmVydGV4Q291bnQpKSB7CiAgICAgICAgICBnZW9tZXRyeURhdGEudmVydGV4Q291bnQgPSBkYXRhLnZlcnRleENvdW50OwogICAgICAgICAgZ2VvbWV0cnlEYXRhLmluZGljZXMgPSBkYXRhLmluZGljZXM7CiAgICAgICAgICBnZW9tZXRyeURhdGEucG9zaXRpb25zID0gZGF0YS5wb3NpdGlvbnM7CiAgICAgICAgICBnZW9tZXRyeURhdGEudXYwcyA9IGRhdGEudXYwczsKICAgICAgICAgIGdlb21ldHJ5RGF0YS5jb2xvcnMgPSBkYXRhLmNvbG9yczsKICAgICAgICAgIGZlYXR1cmVJbmRleCA9IGRhdGEuZmVhdHVyZUluZGV4OwogICAgICAgIH0KICAgICAgfQogICAgfQogICAgY29uc3QgbWVzaERhdGEgPSBnZW5lcmF0ZUdsdGZCdWZmZXIoCiAgICAgIGdlb21ldHJ5RGF0YS52ZXJ0ZXhDb3VudCwKICAgICAgZ2VvbWV0cnlEYXRhLmluZGljZXMsCiAgICAgIGdlb21ldHJ5RGF0YS5wb3NpdGlvbnMsCiAgICAgIGdlb21ldHJ5RGF0YS5ub3JtYWxzLAogICAgICBnZW9tZXRyeURhdGEudXYwcywKICAgICAgZ2VvbWV0cnlEYXRhLmNvbG9ycywKICAgICAgZmVhdHVyZUluZGV4LAogICAgICBwYXJhbWV0ZXJzCiAgICApOwogICAgY29uc3QgY3VzdG9tQXR0cmlidXRlcyA9IHsKICAgICAgcG9zaXRpb25zOiBnZW9tZXRyeURhdGEucG9zaXRpb25zLAogICAgICBpbmRpY2VzOiBnZW9tZXRyeURhdGEuaW5kaWNlcywKICAgICAgZmVhdHVyZUluZGV4LAogICAgICBzb3VyY2VVUkw6IHBhcmFtZXRlcnMudXJsLAogICAgICBjYXJ0ZXNpYW5DZW50ZXI6IHBhcmFtZXRlcnMuY2FydGVzaWFuQ2VudGVyLAogICAgICBwYXJlbnRSb3RhdGlvbjogcGFyYW1ldGVycy5wYXJlbnRSb3RhdGlvbgogICAgfTsKICAgIG1lc2hEYXRhLl9jdXN0b21BdHRyaWJ1dGVzID0gY3VzdG9tQXR0cmlidXRlczsKICAgIGNvbnN0IHJlc3VsdHMgPSB7CiAgICAgIG1lc2hEYXRhCiAgICB9OwogICAgcmV0dXJuIHJlc3VsdHM7CiAgfQogIGFzeW5jIGZ1bmN0aW9uIGluaXRXb3JrZXIyKHBhcmFtZXRlcnMsIHRyYW5zZmVyYWJsZU9iamVjdHMpIHsKICAgIGNvbnN0IHdhc21Db25maWcgPSBwYXJhbWV0ZXJzLndlYkFzc2VtYmx5Q29uZmlnOwogICAgaWYgKGRlZmluZWRfZGVmYXVsdCh3YXNtQ29uZmlnKSAmJiBkZWZpbmVkX2RlZmF1bHQod2FzbUNvbmZpZy53YXNtQmluYXJ5RmlsZSkpIHsKICAgICAgZHJhY28yID0gYXdhaXQgKDAsIGltcG9ydF9kcmFjb19kZWNvZGVyX25vZGVqczIuZGVmYXVsdCkod2FzbUNvbmZpZyk7CiAgICB9IGVsc2UgewogICAgICBkcmFjbzIgPSBhd2FpdCAoMCwgaW1wb3J0X2RyYWNvX2RlY29kZXJfbm9kZWpzMi5kZWZhdWx0KSgpOwogICAgfQogICAgcmV0dXJuIHRydWU7CiAgfQogIGZ1bmN0aW9uIGRlY29kZUkzUyhwYXJhbWV0ZXJzLCB0cmFuc2ZlcmFibGVPYmplY3RzKSB7CiAgICBjb25zdCB3YXNtQ29uZmlnID0gcGFyYW1ldGVycy53ZWJBc3NlbWJseUNvbmZpZzsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQod2FzbUNvbmZpZykpIHsKICAgICAgcmV0dXJuIGluaXRXb3JrZXIyKHBhcmFtZXRlcnMsIHRyYW5zZmVyYWJsZU9iamVjdHMpOwogICAgfQogICAgcmV0dXJuIGRlY29kZUFuZENyZWF0ZUdsdGYocGFyYW1ldGVycywgdHJhbnNmZXJhYmxlT2JqZWN0cyk7CiAgfQogIHZhciBpbXBvcnRfZHJhY29fZGVjb2Rlcl9ub2RlanMyLCBkcmFjbzIsIGNhbGN1bGF0ZUZhY2VOb3JtYWxBLCBjYWxjdWxhdGVGYWNlTm9ybWFsQiwgY2FsY3VsYXRlRmFjZU5vcm1hbEMsIGlzRWRnZVNtb290aEEsIGlzRWRnZVNtb290aEIsIGJpbmFyeUF0dHJpYnV0ZURlY29kZXJzLCBkZWNvZGVJM1NfZGVmYXVsdDsKICB2YXIgaW5pdF9kZWNvZGVJM1MgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2RlY29kZUkzUy5qcyIoKSB7CiAgICAgIGluaXRfY3JlYXRlVGFza1Byb2Nlc3NvcldvcmtlcigpOwogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9XZWJNZXJjYXRvclByb2plY3Rpb24oKTsKICAgICAgaW5pdF9FbGxpcHNvaWQoKTsKICAgICAgaW5pdF9DYXJ0b2dyYXBoaWMoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ29sb3IoKTsKICAgICAgaW5pdF9NYXRyaXgzKCk7CiAgICAgIGluaXRfTWF0aCgpOwogICAgICBpbXBvcnRfZHJhY29fZGVjb2Rlcl9ub2RlanMyID0gX190b0VTTShyZXF1aXJlX2RyYWNvX2RlY29kZXJfbm9kZWpzKCksIDEpOwogICAgICBpbml0X3NyZ2JUb0xpbmVhcigpOwogICAgICBjYWxjdWxhdGVGYWNlTm9ybWFsQSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgY2FsY3VsYXRlRmFjZU5vcm1hbEIgPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIGNhbGN1bGF0ZUZhY2VOb3JtYWxDID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBpc0VkZ2VTbW9vdGhBID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBpc0VkZ2VTbW9vdGhCID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBiaW5hcnlBdHRyaWJ1dGVEZWNvZGVycyA9IHsKICAgICAgICBwb3NpdGlvbjogZnVuY3Rpb24oZGVjb2RlZEdlb21ldHJ5LCBkYXRhLCBvZmZzZXQpIHsKICAgICAgICAgIGNvbnN0IGNvdW50ID0gZGVjb2RlZEdlb21ldHJ5LnZlcnRleENvdW50ICogMzsKICAgICAgICAgIGRlY29kZWRHZW9tZXRyeS5wb3NpdGlvbnMgPSBuZXcgRmxvYXQzMkFycmF5KGRhdGEsIG9mZnNldCwgY291bnQpOwogICAgICAgICAgb2Zmc2V0ICs9IGNvdW50ICogNDsKICAgICAgICAgIHJldHVybiBvZmZzZXQ7CiAgICAgICAgfSwKICAgICAgICBub3JtYWw6IGZ1bmN0aW9uKGRlY29kZWRHZW9tZXRyeSwgZGF0YSwgb2Zmc2V0KSB7CiAgICAgICAgICBjb25zdCBjb3VudCA9IGRlY29kZWRHZW9tZXRyeS52ZXJ0ZXhDb3VudCAqIDM7CiAgICAgICAgICBkZWNvZGVkR2VvbWV0cnkubm9ybWFscyA9IG5ldyBGbG9hdDMyQXJyYXkoZGF0YSwgb2Zmc2V0LCBjb3VudCk7CiAgICAgICAgICBvZmZzZXQgKz0gY291bnQgKiA0OwogICAgICAgICAgcmV0dXJuIG9mZnNldDsKICAgICAgICB9LAogICAgICAgIHV2MDogZnVuY3Rpb24oZGVjb2RlZEdlb21ldHJ5LCBkYXRhLCBvZmZzZXQpIHsKICAgICAgICAgIGNvbnN0IGNvdW50ID0gZGVjb2RlZEdlb21ldHJ5LnZlcnRleENvdW50ICogMjsKICAgICAgICAgIGRlY29kZWRHZW9tZXRyeS51djBzID0gbmV3IEZsb2F0MzJBcnJheShkYXRhLCBvZmZzZXQsIGNvdW50KTsKICAgICAgICAgIG9mZnNldCArPSBjb3VudCAqIDQ7CiAgICAgICAgICByZXR1cm4gb2Zmc2V0OwogICAgICAgIH0sCiAgICAgICAgY29sb3I6IGZ1bmN0aW9uKGRlY29kZWRHZW9tZXRyeSwgZGF0YSwgb2Zmc2V0KSB7CiAgICAgICAgICBjb25zdCBjb3VudCA9IGRlY29kZWRHZW9tZXRyeS52ZXJ0ZXhDb3VudCAqIDQ7CiAgICAgICAgICBkZWNvZGVkR2VvbWV0cnkuY29sb3JzID0gbmV3IFVpbnQ4QXJyYXkoZGF0YSwgb2Zmc2V0LCBjb3VudCk7CiAgICAgICAgICBvZmZzZXQgKz0gY291bnQ7CiAgICAgICAgICByZXR1cm4gb2Zmc2V0OwogICAgICAgIH0sCiAgICAgICAgZmVhdHVyZUlkOiBmdW5jdGlvbihkZWNvZGVkR2VvbWV0cnksIGRhdGEsIG9mZnNldCkgewogICAgICAgICAgY29uc3QgY291bnQgPSBkZWNvZGVkR2VvbWV0cnkuZmVhdHVyZUNvdW50OwogICAgICAgICAgb2Zmc2V0ICs9IGNvdW50ICogODsKICAgICAgICAgIHJldHVybiBvZmZzZXQ7CiAgICAgICAgfSwKICAgICAgICBpZDogZnVuY3Rpb24oZGVjb2RlZEdlb21ldHJ5LCBkYXRhLCBvZmZzZXQpIHsKICAgICAgICAgIGNvbnN0IGNvdW50ID0gZGVjb2RlZEdlb21ldHJ5LmZlYXR1cmVDb3VudDsKICAgICAgICAgIG9mZnNldCArPSBjb3VudCAqIDg7CiAgICAgICAgICByZXR1cm4gb2Zmc2V0OwogICAgICAgIH0sCiAgICAgICAgZmFjZVJhbmdlOiBmdW5jdGlvbihkZWNvZGVkR2VvbWV0cnksIGRhdGEsIG9mZnNldCkgewogICAgICAgICAgY29uc3QgY291bnQgPSBkZWNvZGVkR2VvbWV0cnkuZmVhdHVyZUNvdW50ICogMjsKICAgICAgICAgIGRlY29kZWRHZW9tZXRyeS5mYWNlUmFuZ2UgPSBuZXcgVWludDMyQXJyYXkoZGF0YSwgb2Zmc2V0LCBjb3VudCk7CiAgICAgICAgICBvZmZzZXQgKz0gY291bnQgKiA0OwogICAgICAgICAgcmV0dXJuIG9mZnNldDsKICAgICAgICB9LAogICAgICAgIHV2UmVnaW9uOiBmdW5jdGlvbihkZWNvZGVkR2VvbWV0cnksIGRhdGEsIG9mZnNldCkgewogICAgICAgICAgY29uc3QgY291bnQgPSBkZWNvZGVkR2VvbWV0cnkudmVydGV4Q291bnQgKiA0OwogICAgICAgICAgZGVjb2RlZEdlb21ldHJ5WyJ1di1yZWdpb24iXSA9IG5ldyBVaW50MTZBcnJheShkYXRhLCBvZmZzZXQsIGNvdW50KTsKICAgICAgICAgIG9mZnNldCArPSBjb3VudCAqIDI7CiAgICAgICAgICByZXR1cm4gb2Zmc2V0OwogICAgICAgIH0sCiAgICAgICAgcmVnaW9uOiBmdW5jdGlvbihkZWNvZGVkR2VvbWV0cnksIGRhdGEsIG9mZnNldCkgewogICAgICAgICAgY29uc3QgY291bnQgPSBkZWNvZGVkR2VvbWV0cnkudmVydGV4Q291bnQgKiA0OwogICAgICAgICAgZGVjb2RlZEdlb21ldHJ5WyJ1di1yZWdpb24iXSA9IG5ldyBVaW50MTZBcnJheShkYXRhLCBvZmZzZXQsIGNvdW50KTsKICAgICAgICAgIG9mZnNldCArPSBjb3VudCAqIDI7CiAgICAgICAgICByZXR1cm4gb2Zmc2V0OwogICAgICAgIH0KICAgICAgfTsKICAgICAgZGVjb2RlSTNTX2RlZmF1bHQgPSBjcmVhdGVUYXNrUHJvY2Vzc29yV29ya2VyX2RlZmF1bHQoZGVjb2RlSTNTKTsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9SZW5kZXJlci9QaXhlbERhdGF0eXBlLmpzCiAgdmFyIFBpeGVsRGF0YXR5cGUsIFBpeGVsRGF0YXR5cGVfZGVmYXVsdDsKICB2YXIgaW5pdF9QaXhlbERhdGF0eXBlID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvUmVuZGVyZXIvUGl4ZWxEYXRhdHlwZS5qcyIoKSB7CiAgICAgIGluaXRfV2ViR0xDb25zdGFudHMoKTsKICAgICAgUGl4ZWxEYXRhdHlwZSA9IHsKICAgICAgICBVTlNJR05FRF9CWVRFOiBXZWJHTENvbnN0YW50c19kZWZhdWx0LlVOU0lHTkVEX0JZVEUsCiAgICAgICAgVU5TSUdORURfU0hPUlQ6IFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuVU5TSUdORURfU0hPUlQsCiAgICAgICAgVU5TSUdORURfSU5UOiBXZWJHTENvbnN0YW50c19kZWZhdWx0LlVOU0lHTkVEX0lOVCwKICAgICAgICBGTE9BVDogV2ViR0xDb25zdGFudHNfZGVmYXVsdC5GTE9BVCwKICAgICAgICBIQUxGX0ZMT0FUOiBXZWJHTENvbnN0YW50c19kZWZhdWx0LkhBTEZfRkxPQVRfT0VTLAogICAgICAgIFVOU0lHTkVEX0lOVF8yNF84OiBXZWJHTENvbnN0YW50c19kZWZhdWx0LlVOU0lHTkVEX0lOVF8yNF84LAogICAgICAgIFVOU0lHTkVEX1NIT1JUXzRfNF80XzQ6IFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuVU5TSUdORURfU0hPUlRfNF80XzRfNCwKICAgICAgICBVTlNJR05FRF9TSE9SVF81XzVfNV8xOiBXZWJHTENvbnN0YW50c19kZWZhdWx0LlVOU0lHTkVEX1NIT1JUXzVfNV81XzEsCiAgICAgICAgVU5TSUdORURfU0hPUlRfNV82XzU6IFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuVU5TSUdORURfU0hPUlRfNV82XzUKICAgICAgfTsKICAgICAgUGl4ZWxEYXRhdHlwZS50b1dlYkdMQ29uc3RhbnQgPSBmdW5jdGlvbihwaXhlbERhdGF0eXBlLCBjb250ZXh0KSB7CiAgICAgICAgc3dpdGNoIChwaXhlbERhdGF0eXBlKSB7CiAgICAgICAgICBjYXNlIFBpeGVsRGF0YXR5cGUuVU5TSUdORURfQllURToKICAgICAgICAgICAgcmV0dXJuIFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuVU5TSUdORURfQllURTsKICAgICAgICAgIGNhc2UgUGl4ZWxEYXRhdHlwZS5VTlNJR05FRF9TSE9SVDoKICAgICAgICAgICAgcmV0dXJuIFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuVU5TSUdORURfU0hPUlQ7CiAgICAgICAgICBjYXNlIFBpeGVsRGF0YXR5cGUuVU5TSUdORURfSU5UOgogICAgICAgICAgICByZXR1cm4gV2ViR0xDb25zdGFudHNfZGVmYXVsdC5VTlNJR05FRF9JTlQ7CiAgICAgICAgICBjYXNlIFBpeGVsRGF0YXR5cGUuRkxPQVQ6CiAgICAgICAgICAgIHJldHVybiBXZWJHTENvbnN0YW50c19kZWZhdWx0LkZMT0FUOwogICAgICAgICAgY2FzZSBQaXhlbERhdGF0eXBlLkhBTEZfRkxPQVQ6CiAgICAgICAgICAgIHJldHVybiBjb250ZXh0LndlYmdsMiA/IFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuSEFMRl9GTE9BVCA6IFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuSEFMRl9GTE9BVF9PRVM7CiAgICAgICAgICBjYXNlIFBpeGVsRGF0YXR5cGUuVU5TSUdORURfSU5UXzI0Xzg6CiAgICAgICAgICAgIHJldHVybiBXZWJHTENvbnN0YW50c19kZWZhdWx0LlVOU0lHTkVEX0lOVF8yNF84OwogICAgICAgICAgY2FzZSBQaXhlbERhdGF0eXBlLlVOU0lHTkVEX1NIT1JUXzRfNF80XzQ6CiAgICAgICAgICAgIHJldHVybiBXZWJHTENvbnN0YW50c19kZWZhdWx0LlVOU0lHTkVEX1NIT1JUXzRfNF80XzQ7CiAgICAgICAgICBjYXNlIFBpeGVsRGF0YXR5cGUuVU5TSUdORURfU0hPUlRfNV81XzVfMToKICAgICAgICAgICAgcmV0dXJuIFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuVU5TSUdORURfU0hPUlRfNV81XzVfMTsKICAgICAgICAgIGNhc2UgUGl4ZWxEYXRhdHlwZS5VTlNJR05FRF9TSE9SVF81XzZfNToKICAgICAgICAgICAgcmV0dXJuIFBpeGVsRGF0YXR5cGUuVU5TSUdORURfU0hPUlRfNV82XzU7CiAgICAgICAgfQogICAgICB9OwogICAgICBQaXhlbERhdGF0eXBlLmlzUGFja2VkID0gZnVuY3Rpb24ocGl4ZWxEYXRhdHlwZSkgewogICAgICAgIHJldHVybiBwaXhlbERhdGF0eXBlID09PSBQaXhlbERhdGF0eXBlLlVOU0lHTkVEX0lOVF8yNF84IHx8IHBpeGVsRGF0YXR5cGUgPT09IFBpeGVsRGF0YXR5cGUuVU5TSUdORURfU0hPUlRfNF80XzRfNCB8fCBwaXhlbERhdGF0eXBlID09PSBQaXhlbERhdGF0eXBlLlVOU0lHTkVEX1NIT1JUXzVfNV81XzEgfHwgcGl4ZWxEYXRhdHlwZSA9PT0gUGl4ZWxEYXRhdHlwZS5VTlNJR05FRF9TSE9SVF81XzZfNTsKICAgICAgfTsKICAgICAgUGl4ZWxEYXRhdHlwZS5zaXplSW5CeXRlcyA9IGZ1bmN0aW9uKHBpeGVsRGF0YXR5cGUpIHsKICAgICAgICBzd2l0Y2ggKHBpeGVsRGF0YXR5cGUpIHsKICAgICAgICAgIGNhc2UgUGl4ZWxEYXRhdHlwZS5VTlNJR05FRF9CWVRFOgogICAgICAgICAgICByZXR1cm4gMTsKICAgICAgICAgIGNhc2UgUGl4ZWxEYXRhdHlwZS5VTlNJR05FRF9TSE9SVDoKICAgICAgICAgIGNhc2UgUGl4ZWxEYXRhdHlwZS5VTlNJR05FRF9TSE9SVF80XzRfNF80OgogICAgICAgICAgY2FzZSBQaXhlbERhdGF0eXBlLlVOU0lHTkVEX1NIT1JUXzVfNV81XzE6CiAgICAgICAgICBjYXNlIFBpeGVsRGF0YXR5cGUuVU5TSUdORURfU0hPUlRfNV82XzU6CiAgICAgICAgICBjYXNlIFBpeGVsRGF0YXR5cGUuSEFMRl9GTE9BVDoKICAgICAgICAgICAgcmV0dXJuIDI7CiAgICAgICAgICBjYXNlIFBpeGVsRGF0YXR5cGUuVU5TSUdORURfSU5UOgogICAgICAgICAgY2FzZSBQaXhlbERhdGF0eXBlLkZMT0FUOgogICAgICAgICAgY2FzZSBQaXhlbERhdGF0eXBlLlVOU0lHTkVEX0lOVF8yNF84OgogICAgICAgICAgICByZXR1cm4gNDsKICAgICAgICB9CiAgICAgIH07CiAgICAgIFBpeGVsRGF0YXR5cGUudmFsaWRhdGUgPSBmdW5jdGlvbihwaXhlbERhdGF0eXBlKSB7CiAgICAgICAgcmV0dXJuIHBpeGVsRGF0YXR5cGUgPT09IFBpeGVsRGF0YXR5cGUuVU5TSUdORURfQllURSB8fCBwaXhlbERhdGF0eXBlID09PSBQaXhlbERhdGF0eXBlLlVOU0lHTkVEX1NIT1JUIHx8IHBpeGVsRGF0YXR5cGUgPT09IFBpeGVsRGF0YXR5cGUuVU5TSUdORURfSU5UIHx8IHBpeGVsRGF0YXR5cGUgPT09IFBpeGVsRGF0YXR5cGUuRkxPQVQgfHwgcGl4ZWxEYXRhdHlwZSA9PT0gUGl4ZWxEYXRhdHlwZS5IQUxGX0ZMT0FUIHx8IHBpeGVsRGF0YXR5cGUgPT09IFBpeGVsRGF0YXR5cGUuVU5TSUdORURfSU5UXzI0XzggfHwgcGl4ZWxEYXRhdHlwZSA9PT0gUGl4ZWxEYXRhdHlwZS5VTlNJR05FRF9TSE9SVF80XzRfNF80IHx8IHBpeGVsRGF0YXR5cGUgPT09IFBpeGVsRGF0YXR5cGUuVU5TSUdORURfU0hPUlRfNV81XzVfMSB8fCBwaXhlbERhdGF0eXBlID09PSBQaXhlbERhdGF0eXBlLlVOU0lHTkVEX1NIT1JUXzVfNl81OwogICAgICB9OwogICAgICBQaXhlbERhdGF0eXBlLmdldFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uKHBpeGVsRGF0YXR5cGUpIHsKICAgICAgICBjb25zdCBzaXplSW5CeXRlcyA9IFBpeGVsRGF0YXR5cGUuc2l6ZUluQnl0ZXMocGl4ZWxEYXRhdHlwZSk7CiAgICAgICAgaWYgKHNpemVJbkJ5dGVzID09PSBVaW50OEFycmF5LkJZVEVTX1BFUl9FTEVNRU5UKSB7CiAgICAgICAgICByZXR1cm4gVWludDhBcnJheTsKICAgICAgICB9IGVsc2UgaWYgKHNpemVJbkJ5dGVzID09PSBVaW50MTZBcnJheS5CWVRFU19QRVJfRUxFTUVOVCkgewogICAgICAgICAgcmV0dXJuIFVpbnQxNkFycmF5OwogICAgICAgIH0gZWxzZSBpZiAoc2l6ZUluQnl0ZXMgPT09IEZsb2F0MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVCAmJiBwaXhlbERhdGF0eXBlID09PSBQaXhlbERhdGF0eXBlLkZMT0FUKSB7CiAgICAgICAgICByZXR1cm4gRmxvYXQzMkFycmF5OwogICAgICAgIH0KICAgICAgICByZXR1cm4gVWludDMyQXJyYXk7CiAgICAgIH07CiAgICAgIFBpeGVsRGF0YXR5cGVfZGVmYXVsdCA9IE9iamVjdC5mcmVlemUoUGl4ZWxEYXRhdHlwZSk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9QaXhlbEZvcm1hdC5qcwogIHZhciBQaXhlbEZvcm1hdCwgUGl4ZWxGb3JtYXRfZGVmYXVsdDsKICB2YXIgaW5pdF9QaXhlbEZvcm1hdCA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvUGl4ZWxGb3JtYXQuanMiKCkgewogICAgICBpbml0X1BpeGVsRGF0YXR5cGUoKTsKICAgICAgaW5pdF9XZWJHTENvbnN0YW50cygpOwogICAgICBQaXhlbEZvcm1hdCA9IHsKICAgICAgICAvKioKICAgICAgICAgKiBBIHBpeGVsIGZvcm1hdCBjb250YWluaW5nIGEgZGVwdGggdmFsdWUuCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIERFUFRIX0NPTVBPTkVOVDogV2ViR0xDb25zdGFudHNfZGVmYXVsdC5ERVBUSF9DT01QT05FTlQsCiAgICAgICAgLyoqCiAgICAgICAgICogQSBwaXhlbCBmb3JtYXQgY29udGFpbmluZyBhIGRlcHRoIGFuZCBzdGVuY2lsIHZhbHVlLCBtb3N0IG9mdGVuIHVzZWQgd2l0aCB7QGxpbmsgUGl4ZWxEYXRhdHlwZS5VTlNJR05FRF9JTlRfMjRfOH0uCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIERFUFRIX1NURU5DSUw6IFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuREVQVEhfU1RFTkNJTCwKICAgICAgICAvKioKICAgICAgICAgKiBBIHBpeGVsIGZvcm1hdCBjb250YWluaW5nIGFuIGFscGhhIGNoYW5uZWwuCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIEFMUEhBOiBXZWJHTENvbnN0YW50c19kZWZhdWx0LkFMUEhBLAogICAgICAgIC8qKgogICAgICAgICAqIEEgcGl4ZWwgZm9ybWF0IGNvbnRhaW5pbmcgYSByZWQgY2hhbm5lbAogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBSRUQ6IFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuUkVELAogICAgICAgIC8qKgogICAgICAgICAqIEEgcGl4ZWwgZm9ybWF0IGNvbnRhaW5pbmcgcmVkIGFuZCBncmVlbiBjaGFubmVscy4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgUkc6IFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuUkcsCiAgICAgICAgLyoqCiAgICAgICAgICogQSBwaXhlbCBmb3JtYXQgY29udGFpbmluZyByZWQsIGdyZWVuLCBhbmQgYmx1ZSBjaGFubmVscy4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgUkdCOiBXZWJHTENvbnN0YW50c19kZWZhdWx0LlJHQiwKICAgICAgICAvKioKICAgICAgICAgKiBBIHBpeGVsIGZvcm1hdCBjb250YWluaW5nIHJlZCwgZ3JlZW4sIGJsdWUsIGFuZCBhbHBoYSBjaGFubmVscy4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgUkdCQTogV2ViR0xDb25zdGFudHNfZGVmYXVsdC5SR0JBLAogICAgICAgIC8qKgogICAgICAgICAqIEEgcGl4ZWwgZm9ybWF0IGNvbnRhaW5pbmcgYSBsdW1pbmFuY2UgKGludGVuc2l0eSkgY2hhbm5lbC4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgTFVNSU5BTkNFOiBXZWJHTENvbnN0YW50c19kZWZhdWx0LkxVTUlOQU5DRSwKICAgICAgICAvKioKICAgICAgICAgKiBBIHBpeGVsIGZvcm1hdCBjb250YWluaW5nIGx1bWluYW5jZSAoaW50ZW5zaXR5KSBhbmQgYWxwaGEgY2hhbm5lbHMuCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIExVTUlOQU5DRV9BTFBIQTogV2ViR0xDb25zdGFudHNfZGVmYXVsdC5MVU1JTkFOQ0VfQUxQSEEsCiAgICAgICAgLyoqCiAgICAgICAgICogQSBwaXhlbCBmb3JtYXQgY29udGFpbmluZyByZWQsIGdyZWVuLCBhbmQgYmx1ZSBjaGFubmVscyB0aGF0IGlzIERYVDEgY29tcHJlc3NlZC4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgUkdCX0RYVDE6IFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuQ09NUFJFU1NFRF9SR0JfUzNUQ19EWFQxX0VYVCwKICAgICAgICAvKioKICAgICAgICAgKiBBIHBpeGVsIGZvcm1hdCBjb250YWluaW5nIHJlZCwgZ3JlZW4sIGJsdWUsIGFuZCBhbHBoYSBjaGFubmVscyB0aGF0IGlzIERYVDEgY29tcHJlc3NlZC4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgUkdCQV9EWFQxOiBXZWJHTENvbnN0YW50c19kZWZhdWx0LkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDFfRVhULAogICAgICAgIC8qKgogICAgICAgICAqIEEgcGl4ZWwgZm9ybWF0IGNvbnRhaW5pbmcgcmVkLCBncmVlbiwgYmx1ZSwgYW5kIGFscGhhIGNoYW5uZWxzIHRoYXQgaXMgRFhUMyBjb21wcmVzc2VkLgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBSR0JBX0RYVDM6IFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUM19FWFQsCiAgICAgICAgLyoqCiAgICAgICAgICogQSBwaXhlbCBmb3JtYXQgY29udGFpbmluZyByZWQsIGdyZWVuLCBibHVlLCBhbmQgYWxwaGEgY2hhbm5lbHMgdGhhdCBpcyBEWFQ1IGNvbXByZXNzZWQuCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIFJHQkFfRFhUNTogV2ViR0xDb25zdGFudHNfZGVmYXVsdC5DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQ1X0VYVCwKICAgICAgICAvKioKICAgICAgICAgKiBBIHBpeGVsIGZvcm1hdCBjb250YWluaW5nIHJlZCwgZ3JlZW4sIGFuZCBibHVlIGNoYW5uZWxzIHRoYXQgaXMgUFZSIDRicHAgY29tcHJlc3NlZC4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgUkdCX1BWUlRDXzRCUFBWMTogV2ViR0xDb25zdGFudHNfZGVmYXVsdC5DT01QUkVTU0VEX1JHQl9QVlJUQ180QlBQVjFfSU1HLAogICAgICAgIC8qKgogICAgICAgICAqIEEgcGl4ZWwgZm9ybWF0IGNvbnRhaW5pbmcgcmVkLCBncmVlbiwgYW5kIGJsdWUgY2hhbm5lbHMgdGhhdCBpcyBQVlIgMmJwcCBjb21wcmVzc2VkLgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBSR0JfUFZSVENfMkJQUFYxOiBXZWJHTENvbnN0YW50c19kZWZhdWx0LkNPTVBSRVNTRURfUkdCX1BWUlRDXzJCUFBWMV9JTUcsCiAgICAgICAgLyoqCiAgICAgICAgICogQSBwaXhlbCBmb3JtYXQgY29udGFpbmluZyByZWQsIGdyZWVuLCBibHVlLCBhbmQgYWxwaGEgY2hhbm5lbHMgdGhhdCBpcyBQVlIgNGJwcCBjb21wcmVzc2VkLgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBSR0JBX1BWUlRDXzRCUFBWMTogV2ViR0xDb25zdGFudHNfZGVmYXVsdC5DT01QUkVTU0VEX1JHQkFfUFZSVENfNEJQUFYxX0lNRywKICAgICAgICAvKioKICAgICAgICAgKiBBIHBpeGVsIGZvcm1hdCBjb250YWluaW5nIHJlZCwgZ3JlZW4sIGJsdWUsIGFuZCBhbHBoYSBjaGFubmVscyB0aGF0IGlzIFBWUiAyYnBwIGNvbXByZXNzZWQuCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIFJHQkFfUFZSVENfMkJQUFYxOiBXZWJHTENvbnN0YW50c19kZWZhdWx0LkNPTVBSRVNTRURfUkdCQV9QVlJUQ18yQlBQVjFfSU1HLAogICAgICAgIC8qKgogICAgICAgICAqIEEgcGl4ZWwgZm9ybWF0IGNvbnRhaW5pbmcgcmVkLCBncmVlbiwgYmx1ZSwgYW5kIGFscGhhIGNoYW5uZWxzIHRoYXQgaXMgQVNUQyBjb21wcmVzc2VkLgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBSR0JBX0FTVEM6IFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuQ09NUFJFU1NFRF9SR0JBX0FTVENfNHg0X1dFQkdMLAogICAgICAgIC8qKgogICAgICAgICAqIEEgcGl4ZWwgZm9ybWF0IGNvbnRhaW5pbmcgcmVkLCBncmVlbiwgYW5kIGJsdWUgY2hhbm5lbHMgdGhhdCBpcyBFVEMxIGNvbXByZXNzZWQuCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIFJHQl9FVEMxOiBXZWJHTENvbnN0YW50c19kZWZhdWx0LkNPTVBSRVNTRURfUkdCX0VUQzFfV0VCR0wsCiAgICAgICAgLyoqCiAgICAgICAgICogQSBwaXhlbCBmb3JtYXQgY29udGFpbmluZyByZWQsIGdyZWVuLCBhbmQgYmx1ZSBjaGFubmVscyB0aGF0IGlzIEVUQzIgY29tcHJlc3NlZC4KICAgICAgICAgKgogICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICogQGNvbnN0YW50CiAgICAgICAgICovCiAgICAgICAgUkdCOF9FVEMyOiBXZWJHTENvbnN0YW50c19kZWZhdWx0LkNPTVBSRVNTRURfUkdCOF9FVEMyLAogICAgICAgIC8qKgogICAgICAgICAqIEEgcGl4ZWwgZm9ybWF0IGNvbnRhaW5pbmcgcmVkLCBncmVlbiwgYmx1ZSwgYW5kIGFscGhhIGNoYW5uZWxzIHRoYXQgaXMgRVRDMiBjb21wcmVzc2VkLgogICAgICAgICAqCiAgICAgICAgICogQHR5cGUge251bWJlcn0KICAgICAgICAgKiBAY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBSR0JBOF9FVEMyX0VBQzogV2ViR0xDb25zdGFudHNfZGVmYXVsdC5DT01QUkVTU0VEX1JHQkE4X0VUQzJfRUFDLAogICAgICAgIC8qKgogICAgICAgICAqIEEgcGl4ZWwgZm9ybWF0IGNvbnRhaW5pbmcgcmVkLCBncmVlbiwgYmx1ZSwgYW5kIGFscGhhIGNoYW5uZWxzIHRoYXQgaXMgQkM3IGNvbXByZXNzZWQuCiAgICAgICAgICoKICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAqIEBjb25zdGFudAogICAgICAgICAqLwogICAgICAgIFJHQkFfQkM3OiBXZWJHTENvbnN0YW50c19kZWZhdWx0LkNPTVBSRVNTRURfUkdCQV9CUFRDX1VOT1JNCiAgICAgIH07CiAgICAgIFBpeGVsRm9ybWF0LmNvbXBvbmVudHNMZW5ndGggPSBmdW5jdGlvbihwaXhlbEZvcm1hdCkgewogICAgICAgIHN3aXRjaCAocGl4ZWxGb3JtYXQpIHsKICAgICAgICAgIGNhc2UgUGl4ZWxGb3JtYXQuUkdCOgogICAgICAgICAgICByZXR1cm4gMzsKICAgICAgICAgIGNhc2UgUGl4ZWxGb3JtYXQuUkdCQToKICAgICAgICAgICAgcmV0dXJuIDQ7CiAgICAgICAgICBjYXNlIFBpeGVsRm9ybWF0LkxVTUlOQU5DRV9BTFBIQToKICAgICAgICAgIGNhc2UgUGl4ZWxGb3JtYXQuUkc6CiAgICAgICAgICAgIHJldHVybiAyOwogICAgICAgICAgY2FzZSBQaXhlbEZvcm1hdC5BTFBIQToKICAgICAgICAgIGNhc2UgUGl4ZWxGb3JtYXQuUkVEOgogICAgICAgICAgY2FzZSBQaXhlbEZvcm1hdC5MVU1JTkFOQ0U6CiAgICAgICAgICAgIHJldHVybiAxOwogICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgcmV0dXJuIDE7CiAgICAgICAgfQogICAgICB9OwogICAgICBQaXhlbEZvcm1hdC52YWxpZGF0ZSA9IGZ1bmN0aW9uKHBpeGVsRm9ybWF0KSB7CiAgICAgICAgcmV0dXJuIHBpeGVsRm9ybWF0ID09PSBQaXhlbEZvcm1hdC5ERVBUSF9DT01QT05FTlQgfHwgcGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LkRFUFRIX1NURU5DSUwgfHwgcGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LkFMUEhBIHx8IHBpeGVsRm9ybWF0ID09PSBQaXhlbEZvcm1hdC5SRUQgfHwgcGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LlJHIHx8IHBpeGVsRm9ybWF0ID09PSBQaXhlbEZvcm1hdC5SR0IgfHwgcGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LlJHQkEgfHwgcGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LkxVTUlOQU5DRSB8fCBwaXhlbEZvcm1hdCA9PT0gUGl4ZWxGb3JtYXQuTFVNSU5BTkNFX0FMUEhBIHx8IHBpeGVsRm9ybWF0ID09PSBQaXhlbEZvcm1hdC5SR0JfRFhUMSB8fCBwaXhlbEZvcm1hdCA9PT0gUGl4ZWxGb3JtYXQuUkdCQV9EWFQxIHx8IHBpeGVsRm9ybWF0ID09PSBQaXhlbEZvcm1hdC5SR0JBX0RYVDMgfHwgcGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LlJHQkFfRFhUNSB8fCBwaXhlbEZvcm1hdCA9PT0gUGl4ZWxGb3JtYXQuUkdCX1BWUlRDXzRCUFBWMSB8fCBwaXhlbEZvcm1hdCA9PT0gUGl4ZWxGb3JtYXQuUkdCX1BWUlRDXzJCUFBWMSB8fCBwaXhlbEZvcm1hdCA9PT0gUGl4ZWxGb3JtYXQuUkdCQV9QVlJUQ180QlBQVjEgfHwgcGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LlJHQkFfUFZSVENfMkJQUFYxIHx8IHBpeGVsRm9ybWF0ID09PSBQaXhlbEZvcm1hdC5SR0JBX0FTVEMgfHwgcGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LlJHQl9FVEMxIHx8IHBpeGVsRm9ybWF0ID09PSBQaXhlbEZvcm1hdC5SR0I4X0VUQzIgfHwgcGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LlJHQkE4X0VUQzJfRUFDIHx8IHBpeGVsRm9ybWF0ID09PSBQaXhlbEZvcm1hdC5SR0JBX0JDNzsKICAgICAgfTsKICAgICAgUGl4ZWxGb3JtYXQuaXNDb2xvckZvcm1hdCA9IGZ1bmN0aW9uKHBpeGVsRm9ybWF0KSB7CiAgICAgICAgcmV0dXJuIHBpeGVsRm9ybWF0ID09PSBQaXhlbEZvcm1hdC5SRUQgfHwgcGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LkFMUEhBIHx8IHBpeGVsRm9ybWF0ID09PSBQaXhlbEZvcm1hdC5SR0IgfHwgcGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LlJHQkEgfHwgcGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LkxVTUlOQU5DRSB8fCBwaXhlbEZvcm1hdCA9PT0gUGl4ZWxGb3JtYXQuTFVNSU5BTkNFX0FMUEhBOwogICAgICB9OwogICAgICBQaXhlbEZvcm1hdC5pc0RlcHRoRm9ybWF0ID0gZnVuY3Rpb24ocGl4ZWxGb3JtYXQpIHsKICAgICAgICByZXR1cm4gcGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LkRFUFRIX0NPTVBPTkVOVCB8fCBwaXhlbEZvcm1hdCA9PT0gUGl4ZWxGb3JtYXQuREVQVEhfU1RFTkNJTDsKICAgICAgfTsKICAgICAgUGl4ZWxGb3JtYXQuaXNDb21wcmVzc2VkRm9ybWF0ID0gZnVuY3Rpb24ocGl4ZWxGb3JtYXQpIHsKICAgICAgICByZXR1cm4gcGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LlJHQl9EWFQxIHx8IHBpeGVsRm9ybWF0ID09PSBQaXhlbEZvcm1hdC5SR0JBX0RYVDEgfHwgcGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LlJHQkFfRFhUMyB8fCBwaXhlbEZvcm1hdCA9PT0gUGl4ZWxGb3JtYXQuUkdCQV9EWFQ1IHx8IHBpeGVsRm9ybWF0ID09PSBQaXhlbEZvcm1hdC5SR0JfUFZSVENfNEJQUFYxIHx8IHBpeGVsRm9ybWF0ID09PSBQaXhlbEZvcm1hdC5SR0JfUFZSVENfMkJQUFYxIHx8IHBpeGVsRm9ybWF0ID09PSBQaXhlbEZvcm1hdC5SR0JBX1BWUlRDXzRCUFBWMSB8fCBwaXhlbEZvcm1hdCA9PT0gUGl4ZWxGb3JtYXQuUkdCQV9QVlJUQ18yQlBQVjEgfHwgcGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LlJHQkFfQVNUQyB8fCBwaXhlbEZvcm1hdCA9PT0gUGl4ZWxGb3JtYXQuUkdCX0VUQzEgfHwgcGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LlJHQjhfRVRDMiB8fCBwaXhlbEZvcm1hdCA9PT0gUGl4ZWxGb3JtYXQuUkdCQThfRVRDMl9FQUMgfHwgcGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LlJHQkFfQkM3OwogICAgICB9OwogICAgICBQaXhlbEZvcm1hdC5pc0RYVEZvcm1hdCA9IGZ1bmN0aW9uKHBpeGVsRm9ybWF0KSB7CiAgICAgICAgcmV0dXJuIHBpeGVsRm9ybWF0ID09PSBQaXhlbEZvcm1hdC5SR0JfRFhUMSB8fCBwaXhlbEZvcm1hdCA9PT0gUGl4ZWxGb3JtYXQuUkdCQV9EWFQxIHx8IHBpeGVsRm9ybWF0ID09PSBQaXhlbEZvcm1hdC5SR0JBX0RYVDMgfHwgcGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LlJHQkFfRFhUNTsKICAgICAgfTsKICAgICAgUGl4ZWxGb3JtYXQuaXNQVlJUQ0Zvcm1hdCA9IGZ1bmN0aW9uKHBpeGVsRm9ybWF0KSB7CiAgICAgICAgcmV0dXJuIHBpeGVsRm9ybWF0ID09PSBQaXhlbEZvcm1hdC5SR0JfUFZSVENfNEJQUFYxIHx8IHBpeGVsRm9ybWF0ID09PSBQaXhlbEZvcm1hdC5SR0JfUFZSVENfMkJQUFYxIHx8IHBpeGVsRm9ybWF0ID09PSBQaXhlbEZvcm1hdC5SR0JBX1BWUlRDXzRCUFBWMSB8fCBwaXhlbEZvcm1hdCA9PT0gUGl4ZWxGb3JtYXQuUkdCQV9QVlJUQ18yQlBQVjE7CiAgICAgIH07CiAgICAgIFBpeGVsRm9ybWF0LmlzQVNUQ0Zvcm1hdCA9IGZ1bmN0aW9uKHBpeGVsRm9ybWF0KSB7CiAgICAgICAgcmV0dXJuIHBpeGVsRm9ybWF0ID09PSBQaXhlbEZvcm1hdC5SR0JBX0FTVEM7CiAgICAgIH07CiAgICAgIFBpeGVsRm9ybWF0LmlzRVRDMUZvcm1hdCA9IGZ1bmN0aW9uKHBpeGVsRm9ybWF0KSB7CiAgICAgICAgcmV0dXJuIHBpeGVsRm9ybWF0ID09PSBQaXhlbEZvcm1hdC5SR0JfRVRDMTsKICAgICAgfTsKICAgICAgUGl4ZWxGb3JtYXQuaXNFVEMyRm9ybWF0ID0gZnVuY3Rpb24ocGl4ZWxGb3JtYXQpIHsKICAgICAgICByZXR1cm4gcGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LlJHQjhfRVRDMiB8fCBwaXhlbEZvcm1hdCA9PT0gUGl4ZWxGb3JtYXQuUkdCQThfRVRDMl9FQUM7CiAgICAgIH07CiAgICAgIFBpeGVsRm9ybWF0LmlzQkM3Rm9ybWF0ID0gZnVuY3Rpb24ocGl4ZWxGb3JtYXQpIHsKICAgICAgICByZXR1cm4gcGl4ZWxGb3JtYXQgPT09IFBpeGVsRm9ybWF0LlJHQkFfQkM3OwogICAgICB9OwogICAgICBQaXhlbEZvcm1hdC5jb21wcmVzc2VkVGV4dHVyZVNpemVJbkJ5dGVzID0gZnVuY3Rpb24ocGl4ZWxGb3JtYXQsIHdpZHRoLCBoZWlnaHQpIHsKICAgICAgICBzd2l0Y2ggKHBpeGVsRm9ybWF0KSB7CiAgICAgICAgICBjYXNlIFBpeGVsRm9ybWF0LlJHQl9EWFQxOgogICAgICAgICAgY2FzZSBQaXhlbEZvcm1hdC5SR0JBX0RYVDE6CiAgICAgICAgICBjYXNlIFBpeGVsRm9ybWF0LlJHQl9FVEMxOgogICAgICAgICAgY2FzZSBQaXhlbEZvcm1hdC5SR0I4X0VUQzI6CiAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKCh3aWR0aCArIDMpIC8gNCkgKiBNYXRoLmZsb29yKChoZWlnaHQgKyAzKSAvIDQpICogODsKICAgICAgICAgIGNhc2UgUGl4ZWxGb3JtYXQuUkdCQV9EWFQzOgogICAgICAgICAgY2FzZSBQaXhlbEZvcm1hdC5SR0JBX0RYVDU6CiAgICAgICAgICBjYXNlIFBpeGVsRm9ybWF0LlJHQkFfQVNUQzoKICAgICAgICAgIGNhc2UgUGl4ZWxGb3JtYXQuUkdCQThfRVRDMl9FQUM6CiAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKCh3aWR0aCArIDMpIC8gNCkgKiBNYXRoLmZsb29yKChoZWlnaHQgKyAzKSAvIDQpICogMTY7CiAgICAgICAgICBjYXNlIFBpeGVsRm9ybWF0LlJHQl9QVlJUQ180QlBQVjE6CiAgICAgICAgICBjYXNlIFBpeGVsRm9ybWF0LlJHQkFfUFZSVENfNEJQUFYxOgogICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcigoTWF0aC5tYXgod2lkdGgsIDgpICogTWF0aC5tYXgoaGVpZ2h0LCA4KSAqIDQgKyA3KSAvIDgpOwogICAgICAgICAgY2FzZSBQaXhlbEZvcm1hdC5SR0JfUFZSVENfMkJQUFYxOgogICAgICAgICAgY2FzZSBQaXhlbEZvcm1hdC5SR0JBX1BWUlRDXzJCUFBWMToKICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoCiAgICAgICAgICAgICAgKE1hdGgubWF4KHdpZHRoLCAxNikgKiBNYXRoLm1heChoZWlnaHQsIDgpICogMiArIDcpIC8gOAogICAgICAgICAgICApOwogICAgICAgICAgY2FzZSBQaXhlbEZvcm1hdC5SR0JBX0JDNzoKICAgICAgICAgICAgcmV0dXJuIE1hdGguY2VpbCh3aWR0aCAvIDQpICogTWF0aC5jZWlsKGhlaWdodCAvIDQpICogMTY7CiAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICB9CiAgICAgIH07CiAgICAgIFBpeGVsRm9ybWF0LnRleHR1cmVTaXplSW5CeXRlcyA9IGZ1bmN0aW9uKHBpeGVsRm9ybWF0LCBwaXhlbERhdGF0eXBlLCB3aWR0aCwgaGVpZ2h0KSB7CiAgICAgICAgbGV0IGNvbXBvbmVudHNMZW5ndGggPSBQaXhlbEZvcm1hdC5jb21wb25lbnRzTGVuZ3RoKHBpeGVsRm9ybWF0KTsKICAgICAgICBpZiAoUGl4ZWxEYXRhdHlwZV9kZWZhdWx0LmlzUGFja2VkKHBpeGVsRGF0YXR5cGUpKSB7CiAgICAgICAgICBjb21wb25lbnRzTGVuZ3RoID0gMTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGNvbXBvbmVudHNMZW5ndGggKiBQaXhlbERhdGF0eXBlX2RlZmF1bHQuc2l6ZUluQnl0ZXMocGl4ZWxEYXRhdHlwZSkgKiB3aWR0aCAqIGhlaWdodDsKICAgICAgfTsKICAgICAgUGl4ZWxGb3JtYXQuYWxpZ25tZW50SW5CeXRlcyA9IGZ1bmN0aW9uKHBpeGVsRm9ybWF0LCBwaXhlbERhdGF0eXBlLCB3aWR0aCkgewogICAgICAgIGNvbnN0IG1vZCA9IFBpeGVsRm9ybWF0LnRleHR1cmVTaXplSW5CeXRlcyhwaXhlbEZvcm1hdCwgcGl4ZWxEYXRhdHlwZSwgd2lkdGgsIDEpICUgNDsKICAgICAgICByZXR1cm4gbW9kID09PSAwID8gNCA6IG1vZCA9PT0gMiA/IDIgOiAxOwogICAgICB9OwogICAgICBQaXhlbEZvcm1hdC5jcmVhdGVUeXBlZEFycmF5ID0gZnVuY3Rpb24ocGl4ZWxGb3JtYXQsIHBpeGVsRGF0YXR5cGUsIHdpZHRoLCBoZWlnaHQpIHsKICAgICAgICBjb25zdCBjb25zdHJ1Y3RvciA9IFBpeGVsRGF0YXR5cGVfZGVmYXVsdC5nZXRUeXBlZEFycmF5Q29uc3RydWN0b3IocGl4ZWxEYXRhdHlwZSk7CiAgICAgICAgY29uc3Qgc2l6ZSA9IFBpeGVsRm9ybWF0LmNvbXBvbmVudHNMZW5ndGgocGl4ZWxGb3JtYXQpICogd2lkdGggKiBoZWlnaHQ7CiAgICAgICAgcmV0dXJuIG5ldyBjb25zdHJ1Y3RvcihzaXplKTsKICAgICAgfTsKICAgICAgUGl4ZWxGb3JtYXQuZmxpcFkgPSBmdW5jdGlvbihidWZmZXJWaWV3LCBwaXhlbEZvcm1hdCwgcGl4ZWxEYXRhdHlwZSwgd2lkdGgsIGhlaWdodCkgewogICAgICAgIGlmIChoZWlnaHQgPT09IDEpIHsKICAgICAgICAgIHJldHVybiBidWZmZXJWaWV3OwogICAgICAgIH0KICAgICAgICBjb25zdCBmbGlwcGVkID0gUGl4ZWxGb3JtYXQuY3JlYXRlVHlwZWRBcnJheSgKICAgICAgICAgIHBpeGVsRm9ybWF0LAogICAgICAgICAgcGl4ZWxEYXRhdHlwZSwKICAgICAgICAgIHdpZHRoLAogICAgICAgICAgaGVpZ2h0CiAgICAgICAgKTsKICAgICAgICBjb25zdCBudW1iZXJPZkNvbXBvbmVudHMgPSBQaXhlbEZvcm1hdC5jb21wb25lbnRzTGVuZ3RoKHBpeGVsRm9ybWF0KTsKICAgICAgICBjb25zdCB0ZXh0dXJlV2lkdGggPSB3aWR0aCAqIG51bWJlck9mQ29tcG9uZW50czsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhlaWdodDsgKytpKSB7CiAgICAgICAgICBjb25zdCByb3cgPSBpICogd2lkdGggKiBudW1iZXJPZkNvbXBvbmVudHM7CiAgICAgICAgICBjb25zdCBmbGlwcGVkUm93ID0gKGhlaWdodCAtIGkgLSAxKSAqIHdpZHRoICogbnVtYmVyT2ZDb21wb25lbnRzOwogICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0ZXh0dXJlV2lkdGg7ICsraikgewogICAgICAgICAgICBmbGlwcGVkW2ZsaXBwZWRSb3cgKyBqXSA9IGJ1ZmZlclZpZXdbcm93ICsgal07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBmbGlwcGVkOwogICAgICB9OwogICAgICBQaXhlbEZvcm1hdC50b0ludGVybmFsRm9ybWF0ID0gZnVuY3Rpb24ocGl4ZWxGb3JtYXQsIHBpeGVsRGF0YXR5cGUsIGNvbnRleHQpIHsKICAgICAgICBpZiAoIWNvbnRleHQud2ViZ2wyKSB7CiAgICAgICAgICByZXR1cm4gcGl4ZWxGb3JtYXQ7CiAgICAgICAgfQogICAgICAgIGlmIChwaXhlbEZvcm1hdCA9PT0gUGl4ZWxGb3JtYXQuREVQVEhfU1RFTkNJTCkgewogICAgICAgICAgcmV0dXJuIFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuREVQVEgyNF9TVEVOQ0lMODsKICAgICAgICB9CiAgICAgICAgaWYgKHBpeGVsRm9ybWF0ID09PSBQaXhlbEZvcm1hdC5ERVBUSF9DT01QT05FTlQpIHsKICAgICAgICAgIGlmIChwaXhlbERhdGF0eXBlID09PSBQaXhlbERhdGF0eXBlX2RlZmF1bHQuVU5TSUdORURfU0hPUlQpIHsKICAgICAgICAgICAgcmV0dXJuIFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuREVQVEhfQ09NUE9ORU5UMTY7CiAgICAgICAgICB9IGVsc2UgaWYgKHBpeGVsRGF0YXR5cGUgPT09IFBpeGVsRGF0YXR5cGVfZGVmYXVsdC5VTlNJR05FRF9JTlQpIHsKICAgICAgICAgICAgcmV0dXJuIFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuREVQVEhfQ09NUE9ORU5UMjQ7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChwaXhlbERhdGF0eXBlID09PSBQaXhlbERhdGF0eXBlX2RlZmF1bHQuRkxPQVQpIHsKICAgICAgICAgIHN3aXRjaCAocGl4ZWxGb3JtYXQpIHsKICAgICAgICAgICAgY2FzZSBQaXhlbEZvcm1hdC5SR0JBOgogICAgICAgICAgICAgIHJldHVybiBXZWJHTENvbnN0YW50c19kZWZhdWx0LlJHQkEzMkY7CiAgICAgICAgICAgIGNhc2UgUGl4ZWxGb3JtYXQuUkdCOgogICAgICAgICAgICAgIHJldHVybiBXZWJHTENvbnN0YW50c19kZWZhdWx0LlJHQjMyRjsKICAgICAgICAgICAgY2FzZSBQaXhlbEZvcm1hdC5SRzoKICAgICAgICAgICAgICByZXR1cm4gV2ViR0xDb25zdGFudHNfZGVmYXVsdC5SRzMyRjsKICAgICAgICAgICAgY2FzZSBQaXhlbEZvcm1hdC5SRUQ6CiAgICAgICAgICAgICAgcmV0dXJuIFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuUjMyRjsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKHBpeGVsRGF0YXR5cGUgPT09IFBpeGVsRGF0YXR5cGVfZGVmYXVsdC5IQUxGX0ZMT0FUKSB7CiAgICAgICAgICBzd2l0Y2ggKHBpeGVsRm9ybWF0KSB7CiAgICAgICAgICAgIGNhc2UgUGl4ZWxGb3JtYXQuUkdCQToKICAgICAgICAgICAgICByZXR1cm4gV2ViR0xDb25zdGFudHNfZGVmYXVsdC5SR0JBMTZGOwogICAgICAgICAgICBjYXNlIFBpeGVsRm9ybWF0LlJHQjoKICAgICAgICAgICAgICByZXR1cm4gV2ViR0xDb25zdGFudHNfZGVmYXVsdC5SR0IxNkY7CiAgICAgICAgICAgIGNhc2UgUGl4ZWxGb3JtYXQuUkc6CiAgICAgICAgICAgICAgcmV0dXJuIFdlYkdMQ29uc3RhbnRzX2RlZmF1bHQuUkcxNkY7CiAgICAgICAgICAgIGNhc2UgUGl4ZWxGb3JtYXQuUkVEOgogICAgICAgICAgICAgIHJldHVybiBXZWJHTENvbnN0YW50c19kZWZhdWx0LlIxNkY7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBwaXhlbEZvcm1hdDsKICAgICAgfTsKICAgICAgUGl4ZWxGb3JtYXRfZGVmYXVsdCA9IE9iamVjdC5mcmVlemUoUGl4ZWxGb3JtYXQpOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvVnVsa2FuQ29uc3RhbnRzLmpzCiAgdmFyIFZ1bGthbkNvbnN0YW50cywgVnVsa2FuQ29uc3RhbnRzX2RlZmF1bHQ7CiAgdmFyIGluaXRfVnVsa2FuQ29uc3RhbnRzID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9WdWxrYW5Db25zdGFudHMuanMiKCkgewogICAgICBWdWxrYW5Db25zdGFudHMgPSB7CiAgICAgICAgVktfRk9STUFUX1VOREVGSU5FRDogMCwKICAgICAgICBWS19GT1JNQVRfUjRHNF9VTk9STV9QQUNLODogMSwKICAgICAgICBWS19GT1JNQVRfUjRHNEI0QTRfVU5PUk1fUEFDSzE2OiAyLAogICAgICAgIFZLX0ZPUk1BVF9CNEc0UjRBNF9VTk9STV9QQUNLMTY6IDMsCiAgICAgICAgVktfRk9STUFUX1I1RzZCNV9VTk9STV9QQUNLMTY6IDQsCiAgICAgICAgVktfRk9STUFUX0I1RzZSNV9VTk9STV9QQUNLMTY6IDUsCiAgICAgICAgVktfRk9STUFUX1I1RzVCNUExX1VOT1JNX1BBQ0sxNjogNiwKICAgICAgICBWS19GT1JNQVRfQjVHNVI1QTFfVU5PUk1fUEFDSzE2OiA3LAogICAgICAgIFZLX0ZPUk1BVF9BMVI1RzVCNV9VTk9STV9QQUNLMTY6IDgsCiAgICAgICAgVktfRk9STUFUX1I4X1VOT1JNOiA5LAogICAgICAgIFZLX0ZPUk1BVF9SOF9TTk9STTogMTAsCiAgICAgICAgVktfRk9STUFUX1I4X1VTQ0FMRUQ6IDExLAogICAgICAgIFZLX0ZPUk1BVF9SOF9TU0NBTEVEOiAxMiwKICAgICAgICBWS19GT1JNQVRfUjhfVUlOVDogMTMsCiAgICAgICAgVktfRk9STUFUX1I4X1NJTlQ6IDE0LAogICAgICAgIFZLX0ZPUk1BVF9SOF9TUkdCOiAxNSwKICAgICAgICBWS19GT1JNQVRfUjhHOF9VTk9STTogMTYsCiAgICAgICAgVktfRk9STUFUX1I4RzhfU05PUk06IDE3LAogICAgICAgIFZLX0ZPUk1BVF9SOEc4X1VTQ0FMRUQ6IDE4LAogICAgICAgIFZLX0ZPUk1BVF9SOEc4X1NTQ0FMRUQ6IDE5LAogICAgICAgIFZLX0ZPUk1BVF9SOEc4X1VJTlQ6IDIwLAogICAgICAgIFZLX0ZPUk1BVF9SOEc4X1NJTlQ6IDIxLAogICAgICAgIFZLX0ZPUk1BVF9SOEc4X1NSR0I6IDIyLAogICAgICAgIFZLX0ZPUk1BVF9SOEc4QjhfVU5PUk06IDIzLAogICAgICAgIFZLX0ZPUk1BVF9SOEc4QjhfU05PUk06IDI0LAogICAgICAgIFZLX0ZPUk1BVF9SOEc4QjhfVVNDQUxFRDogMjUsCiAgICAgICAgVktfRk9STUFUX1I4RzhCOF9TU0NBTEVEOiAyNiwKICAgICAgICBWS19GT1JNQVRfUjhHOEI4X1VJTlQ6IDI3LAogICAgICAgIFZLX0ZPUk1BVF9SOEc4QjhfU0lOVDogMjgsCiAgICAgICAgVktfRk9STUFUX1I4RzhCOF9TUkdCOiAyOSwKICAgICAgICBWS19GT1JNQVRfQjhHOFI4X1VOT1JNOiAzMCwKICAgICAgICBWS19GT1JNQVRfQjhHOFI4X1NOT1JNOiAzMSwKICAgICAgICBWS19GT1JNQVRfQjhHOFI4X1VTQ0FMRUQ6IDMyLAogICAgICAgIFZLX0ZPUk1BVF9COEc4UjhfU1NDQUxFRDogMzMsCiAgICAgICAgVktfRk9STUFUX0I4RzhSOF9VSU5UOiAzNCwKICAgICAgICBWS19GT1JNQVRfQjhHOFI4X1NJTlQ6IDM1LAogICAgICAgIFZLX0ZPUk1BVF9COEc4UjhfU1JHQjogMzYsCiAgICAgICAgVktfRk9STUFUX1I4RzhCOEE4X1VOT1JNOiAzNywKICAgICAgICBWS19GT1JNQVRfUjhHOEI4QThfU05PUk06IDM4LAogICAgICAgIFZLX0ZPUk1BVF9SOEc4QjhBOF9VU0NBTEVEOiAzOSwKICAgICAgICBWS19GT1JNQVRfUjhHOEI4QThfU1NDQUxFRDogNDAsCiAgICAgICAgVktfRk9STUFUX1I4RzhCOEE4X1VJTlQ6IDQxLAogICAgICAgIFZLX0ZPUk1BVF9SOEc4QjhBOF9TSU5UOiA0MiwKICAgICAgICBWS19GT1JNQVRfUjhHOEI4QThfU1JHQjogNDMsCiAgICAgICAgVktfRk9STUFUX0I4RzhSOEE4X1VOT1JNOiA0NCwKICAgICAgICBWS19GT1JNQVRfQjhHOFI4QThfU05PUk06IDQ1LAogICAgICAgIFZLX0ZPUk1BVF9COEc4UjhBOF9VU0NBTEVEOiA0NiwKICAgICAgICBWS19GT1JNQVRfQjhHOFI4QThfU1NDQUxFRDogNDcsCiAgICAgICAgVktfRk9STUFUX0I4RzhSOEE4X1VJTlQ6IDQ4LAogICAgICAgIFZLX0ZPUk1BVF9COEc4UjhBOF9TSU5UOiA0OSwKICAgICAgICBWS19GT1JNQVRfQjhHOFI4QThfU1JHQjogNTAsCiAgICAgICAgVktfRk9STUFUX0E4QjhHOFI4X1VOT1JNX1BBQ0szMjogNTEsCiAgICAgICAgVktfRk9STUFUX0E4QjhHOFI4X1NOT1JNX1BBQ0szMjogNTIsCiAgICAgICAgVktfRk9STUFUX0E4QjhHOFI4X1VTQ0FMRURfUEFDSzMyOiA1MywKICAgICAgICBWS19GT1JNQVRfQThCOEc4UjhfU1NDQUxFRF9QQUNLMzI6IDU0LAogICAgICAgIFZLX0ZPUk1BVF9BOEI4RzhSOF9VSU5UX1BBQ0szMjogNTUsCiAgICAgICAgVktfRk9STUFUX0E4QjhHOFI4X1NJTlRfUEFDSzMyOiA1NiwKICAgICAgICBWS19GT1JNQVRfQThCOEc4UjhfU1JHQl9QQUNLMzI6IDU3LAogICAgICAgIFZLX0ZPUk1BVF9BMlIxMEcxMEIxMF9VTk9STV9QQUNLMzI6IDU4LAogICAgICAgIFZLX0ZPUk1BVF9BMlIxMEcxMEIxMF9TTk9STV9QQUNLMzI6IDU5LAogICAgICAgIFZLX0ZPUk1BVF9BMlIxMEcxMEIxMF9VU0NBTEVEX1BBQ0szMjogNjAsCiAgICAgICAgVktfRk9STUFUX0EyUjEwRzEwQjEwX1NTQ0FMRURfUEFDSzMyOiA2MSwKICAgICAgICBWS19GT1JNQVRfQTJSMTBHMTBCMTBfVUlOVF9QQUNLMzI6IDYyLAogICAgICAgIFZLX0ZPUk1BVF9BMlIxMEcxMEIxMF9TSU5UX1BBQ0szMjogNjMsCiAgICAgICAgVktfRk9STUFUX0EyQjEwRzEwUjEwX1VOT1JNX1BBQ0szMjogNjQsCiAgICAgICAgVktfRk9STUFUX0EyQjEwRzEwUjEwX1NOT1JNX1BBQ0szMjogNjUsCiAgICAgICAgVktfRk9STUFUX0EyQjEwRzEwUjEwX1VTQ0FMRURfUEFDSzMyOiA2NiwKICAgICAgICBWS19GT1JNQVRfQTJCMTBHMTBSMTBfU1NDQUxFRF9QQUNLMzI6IDY3LAogICAgICAgIFZLX0ZPUk1BVF9BMkIxMEcxMFIxMF9VSU5UX1BBQ0szMjogNjgsCiAgICAgICAgVktfRk9STUFUX0EyQjEwRzEwUjEwX1NJTlRfUEFDSzMyOiA2OSwKICAgICAgICBWS19GT1JNQVRfUjE2X1VOT1JNOiA3MCwKICAgICAgICBWS19GT1JNQVRfUjE2X1NOT1JNOiA3MSwKICAgICAgICBWS19GT1JNQVRfUjE2X1VTQ0FMRUQ6IDcyLAogICAgICAgIFZLX0ZPUk1BVF9SMTZfU1NDQUxFRDogNzMsCiAgICAgICAgVktfRk9STUFUX1IxNl9VSU5UOiA3NCwKICAgICAgICBWS19GT1JNQVRfUjE2X1NJTlQ6IDc1LAogICAgICAgIFZLX0ZPUk1BVF9SMTZfU0ZMT0FUOiA3NiwKICAgICAgICBWS19GT1JNQVRfUjE2RzE2X1VOT1JNOiA3NywKICAgICAgICBWS19GT1JNQVRfUjE2RzE2X1NOT1JNOiA3OCwKICAgICAgICBWS19GT1JNQVRfUjE2RzE2X1VTQ0FMRUQ6IDc5LAogICAgICAgIFZLX0ZPUk1BVF9SMTZHMTZfU1NDQUxFRDogODAsCiAgICAgICAgVktfRk9STUFUX1IxNkcxNl9VSU5UOiA4MSwKICAgICAgICBWS19GT1JNQVRfUjE2RzE2X1NJTlQ6IDgyLAogICAgICAgIFZLX0ZPUk1BVF9SMTZHMTZfU0ZMT0FUOiA4MywKICAgICAgICBWS19GT1JNQVRfUjE2RzE2QjE2X1VOT1JNOiA4NCwKICAgICAgICBWS19GT1JNQVRfUjE2RzE2QjE2X1NOT1JNOiA4NSwKICAgICAgICBWS19GT1JNQVRfUjE2RzE2QjE2X1VTQ0FMRUQ6IDg2LAogICAgICAgIFZLX0ZPUk1BVF9SMTZHMTZCMTZfU1NDQUxFRDogODcsCiAgICAgICAgVktfRk9STUFUX1IxNkcxNkIxNl9VSU5UOiA4OCwKICAgICAgICBWS19GT1JNQVRfUjE2RzE2QjE2X1NJTlQ6IDg5LAogICAgICAgIFZLX0ZPUk1BVF9SMTZHMTZCMTZfU0ZMT0FUOiA5MCwKICAgICAgICBWS19GT1JNQVRfUjE2RzE2QjE2QTE2X1VOT1JNOiA5MSwKICAgICAgICBWS19GT1JNQVRfUjE2RzE2QjE2QTE2X1NOT1JNOiA5MiwKICAgICAgICBWS19GT1JNQVRfUjE2RzE2QjE2QTE2X1VTQ0FMRUQ6IDkzLAogICAgICAgIFZLX0ZPUk1BVF9SMTZHMTZCMTZBMTZfU1NDQUxFRDogOTQsCiAgICAgICAgVktfRk9STUFUX1IxNkcxNkIxNkExNl9VSU5UOiA5NSwKICAgICAgICBWS19GT1JNQVRfUjE2RzE2QjE2QTE2X1NJTlQ6IDk2LAogICAgICAgIFZLX0ZPUk1BVF9SMTZHMTZCMTZBMTZfU0ZMT0FUOiA5NywKICAgICAgICBWS19GT1JNQVRfUjMyX1VJTlQ6IDk4LAogICAgICAgIFZLX0ZPUk1BVF9SMzJfU0lOVDogOTksCiAgICAgICAgVktfRk9STUFUX1IzMl9TRkxPQVQ6IDEwMCwKICAgICAgICBWS19GT1JNQVRfUjMyRzMyX1VJTlQ6IDEwMSwKICAgICAgICBWS19GT1JNQVRfUjMyRzMyX1NJTlQ6IDEwMiwKICAgICAgICBWS19GT1JNQVRfUjMyRzMyX1NGTE9BVDogMTAzLAogICAgICAgIFZLX0ZPUk1BVF9SMzJHMzJCMzJfVUlOVDogMTA0LAogICAgICAgIFZLX0ZPUk1BVF9SMzJHMzJCMzJfU0lOVDogMTA1LAogICAgICAgIFZLX0ZPUk1BVF9SMzJHMzJCMzJfU0ZMT0FUOiAxMDYsCiAgICAgICAgVktfRk9STUFUX1IzMkczMkIzMkEzMl9VSU5UOiAxMDcsCiAgICAgICAgVktfRk9STUFUX1IzMkczMkIzMkEzMl9TSU5UOiAxMDgsCiAgICAgICAgVktfRk9STUFUX1IzMkczMkIzMkEzMl9TRkxPQVQ6IDEwOSwKICAgICAgICBWS19GT1JNQVRfUjY0X1VJTlQ6IDExMCwKICAgICAgICBWS19GT1JNQVRfUjY0X1NJTlQ6IDExMSwKICAgICAgICBWS19GT1JNQVRfUjY0X1NGTE9BVDogMTEyLAogICAgICAgIFZLX0ZPUk1BVF9SNjRHNjRfVUlOVDogMTEzLAogICAgICAgIFZLX0ZPUk1BVF9SNjRHNjRfU0lOVDogMTE0LAogICAgICAgIFZLX0ZPUk1BVF9SNjRHNjRfU0ZMT0FUOiAxMTUsCiAgICAgICAgVktfRk9STUFUX1I2NEc2NEI2NF9VSU5UOiAxMTYsCiAgICAgICAgVktfRk9STUFUX1I2NEc2NEI2NF9TSU5UOiAxMTcsCiAgICAgICAgVktfRk9STUFUX1I2NEc2NEI2NF9TRkxPQVQ6IDExOCwKICAgICAgICBWS19GT1JNQVRfUjY0RzY0QjY0QTY0X1VJTlQ6IDExOSwKICAgICAgICBWS19GT1JNQVRfUjY0RzY0QjY0QTY0X1NJTlQ6IDEyMCwKICAgICAgICBWS19GT1JNQVRfUjY0RzY0QjY0QTY0X1NGTE9BVDogMTIxLAogICAgICAgIFZLX0ZPUk1BVF9CMTBHMTFSMTFfVUZMT0FUX1BBQ0szMjogMTIyLAogICAgICAgIFZLX0ZPUk1BVF9FNUI5RzlSOV9VRkxPQVRfUEFDSzMyOiAxMjMsCiAgICAgICAgVktfRk9STUFUX0QxNl9VTk9STTogMTI0LAogICAgICAgIFZLX0ZPUk1BVF9YOF9EMjRfVU5PUk1fUEFDSzMyOiAxMjUsCiAgICAgICAgVktfRk9STUFUX0QzMl9TRkxPQVQ6IDEyNiwKICAgICAgICBWS19GT1JNQVRfUzhfVUlOVDogMTI3LAogICAgICAgIFZLX0ZPUk1BVF9EMTZfVU5PUk1fUzhfVUlOVDogMTI4LAogICAgICAgIFZLX0ZPUk1BVF9EMjRfVU5PUk1fUzhfVUlOVDogMTI5LAogICAgICAgIFZLX0ZPUk1BVF9EMzJfU0ZMT0FUX1M4X1VJTlQ6IDEzMCwKICAgICAgICBWS19GT1JNQVRfQkMxX1JHQl9VTk9STV9CTE9DSzogMTMxLAogICAgICAgIFZLX0ZPUk1BVF9CQzFfUkdCX1NSR0JfQkxPQ0s6IDEzMiwKICAgICAgICBWS19GT1JNQVRfQkMxX1JHQkFfVU5PUk1fQkxPQ0s6IDEzMywKICAgICAgICBWS19GT1JNQVRfQkMxX1JHQkFfU1JHQl9CTE9DSzogMTM0LAogICAgICAgIFZLX0ZPUk1BVF9CQzJfVU5PUk1fQkxPQ0s6IDEzNSwKICAgICAgICBWS19GT1JNQVRfQkMyX1NSR0JfQkxPQ0s6IDEzNiwKICAgICAgICBWS19GT1JNQVRfQkMzX1VOT1JNX0JMT0NLOiAxMzcsCiAgICAgICAgVktfRk9STUFUX0JDM19TUkdCX0JMT0NLOiAxMzgsCiAgICAgICAgVktfRk9STUFUX0JDNF9VTk9STV9CTE9DSzogMTM5LAogICAgICAgIFZLX0ZPUk1BVF9CQzRfU05PUk1fQkxPQ0s6IDE0MCwKICAgICAgICBWS19GT1JNQVRfQkM1X1VOT1JNX0JMT0NLOiAxNDEsCiAgICAgICAgVktfRk9STUFUX0JDNV9TTk9STV9CTE9DSzogMTQyLAogICAgICAgIFZLX0ZPUk1BVF9CQzZIX1VGTE9BVF9CTE9DSzogMTQzLAogICAgICAgIFZLX0ZPUk1BVF9CQzZIX1NGTE9BVF9CTE9DSzogMTQ0LAogICAgICAgIFZLX0ZPUk1BVF9CQzdfVU5PUk1fQkxPQ0s6IDE0NSwKICAgICAgICBWS19GT1JNQVRfQkM3X1NSR0JfQkxPQ0s6IDE0NiwKICAgICAgICBWS19GT1JNQVRfRVRDMl9SOEc4QjhfVU5PUk1fQkxPQ0s6IDE0NywKICAgICAgICBWS19GT1JNQVRfRVRDMl9SOEc4QjhfU1JHQl9CTE9DSzogMTQ4LAogICAgICAgIFZLX0ZPUk1BVF9FVEMyX1I4RzhCOEExX1VOT1JNX0JMT0NLOiAxNDksCiAgICAgICAgVktfRk9STUFUX0VUQzJfUjhHOEI4QTFfU1JHQl9CTE9DSzogMTUwLAogICAgICAgIFZLX0ZPUk1BVF9FVEMyX1I4RzhCOEE4X1VOT1JNX0JMT0NLOiAxNTEsCiAgICAgICAgVktfRk9STUFUX0VUQzJfUjhHOEI4QThfU1JHQl9CTE9DSzogMTUyLAogICAgICAgIFZLX0ZPUk1BVF9FQUNfUjExX1VOT1JNX0JMT0NLOiAxNTMsCiAgICAgICAgVktfRk9STUFUX0VBQ19SMTFfU05PUk1fQkxPQ0s6IDE1NCwKICAgICAgICBWS19GT1JNQVRfRUFDX1IxMUcxMV9VTk9STV9CTE9DSzogMTU1LAogICAgICAgIFZLX0ZPUk1BVF9FQUNfUjExRzExX1NOT1JNX0JMT0NLOiAxNTYsCiAgICAgICAgVktfRk9STUFUX0FTVENfNHg0X1VOT1JNX0JMT0NLOiAxNTcsCiAgICAgICAgVktfRk9STUFUX0FTVENfNHg0X1NSR0JfQkxPQ0s6IDE1OCwKICAgICAgICBWS19GT1JNQVRfQVNUQ181eDRfVU5PUk1fQkxPQ0s6IDE1OSwKICAgICAgICBWS19GT1JNQVRfQVNUQ181eDRfU1JHQl9CTE9DSzogMTYwLAogICAgICAgIFZLX0ZPUk1BVF9BU1RDXzV4NV9VTk9STV9CTE9DSzogMTYxLAogICAgICAgIFZLX0ZPUk1BVF9BU1RDXzV4NV9TUkdCX0JMT0NLOiAxNjIsCiAgICAgICAgVktfRk9STUFUX0FTVENfNng1X1VOT1JNX0JMT0NLOiAxNjMsCiAgICAgICAgVktfRk9STUFUX0FTVENfNng1X1NSR0JfQkxPQ0s6IDE2NCwKICAgICAgICBWS19GT1JNQVRfQVNUQ182eDZfVU5PUk1fQkxPQ0s6IDE2NSwKICAgICAgICBWS19GT1JNQVRfQVNUQ182eDZfU1JHQl9CTE9DSzogMTY2LAogICAgICAgIFZLX0ZPUk1BVF9BU1RDXzh4NV9VTk9STV9CTE9DSzogMTY3LAogICAgICAgIFZLX0ZPUk1BVF9BU1RDXzh4NV9TUkdCX0JMT0NLOiAxNjgsCiAgICAgICAgVktfRk9STUFUX0FTVENfOHg2X1VOT1JNX0JMT0NLOiAxNjksCiAgICAgICAgVktfRk9STUFUX0FTVENfOHg2X1NSR0JfQkxPQ0s6IDE3MCwKICAgICAgICBWS19GT1JNQVRfQVNUQ184eDhfVU5PUk1fQkxPQ0s6IDE3MSwKICAgICAgICBWS19GT1JNQVRfQVNUQ184eDhfU1JHQl9CTE9DSzogMTcyLAogICAgICAgIFZLX0ZPUk1BVF9BU1RDXzEweDVfVU5PUk1fQkxPQ0s6IDE3MywKICAgICAgICBWS19GT1JNQVRfQVNUQ18xMHg1X1NSR0JfQkxPQ0s6IDE3NCwKICAgICAgICBWS19GT1JNQVRfQVNUQ18xMHg2X1VOT1JNX0JMT0NLOiAxNzUsCiAgICAgICAgVktfRk9STUFUX0FTVENfMTB4Nl9TUkdCX0JMT0NLOiAxNzYsCiAgICAgICAgVktfRk9STUFUX0FTVENfMTB4OF9VTk9STV9CTE9DSzogMTc3LAogICAgICAgIFZLX0ZPUk1BVF9BU1RDXzEweDhfU1JHQl9CTE9DSzogMTc4LAogICAgICAgIFZLX0ZPUk1BVF9BU1RDXzEweDEwX1VOT1JNX0JMT0NLOiAxNzksCiAgICAgICAgVktfRk9STUFUX0FTVENfMTB4MTBfU1JHQl9CTE9DSzogMTgwLAogICAgICAgIFZLX0ZPUk1BVF9BU1RDXzEyeDEwX1VOT1JNX0JMT0NLOiAxODEsCiAgICAgICAgVktfRk9STUFUX0FTVENfMTJ4MTBfU1JHQl9CTE9DSzogMTgyLAogICAgICAgIFZLX0ZPUk1BVF9BU1RDXzEyeDEyX1VOT1JNX0JMT0NLOiAxODMsCiAgICAgICAgVktfRk9STUFUX0FTVENfMTJ4MTJfU1JHQl9CTE9DSzogMTg0LAogICAgICAgIFZLX0ZPUk1BVF9HOEI4RzhSOF80MjJfVU5PUk06IDEwMDAxNTZlMywKICAgICAgICBWS19GT1JNQVRfQjhHOFI4RzhfNDIyX1VOT1JNOiAxMDAwMTU2MDAxLAogICAgICAgIFZLX0ZPUk1BVF9HOF9COF9SOF8zUExBTkVfNDIwX1VOT1JNOiAxMDAwMTU2MDAyLAogICAgICAgIFZLX0ZPUk1BVF9HOF9COFI4XzJQTEFORV80MjBfVU5PUk06IDEwMDAxNTYwMDMsCiAgICAgICAgVktfRk9STUFUX0c4X0I4X1I4XzNQTEFORV80MjJfVU5PUk06IDEwMDAxNTYwMDQsCiAgICAgICAgVktfRk9STUFUX0c4X0I4UjhfMlBMQU5FXzQyMl9VTk9STTogMTAwMDE1NjAwNSwKICAgICAgICBWS19GT1JNQVRfRzhfQjhfUjhfM1BMQU5FXzQ0NF9VTk9STTogMTAwMDE1NjAwNiwKICAgICAgICBWS19GT1JNQVRfUjEwWDZfVU5PUk1fUEFDSzE2OiAxMDAwMTU2MDA3LAogICAgICAgIFZLX0ZPUk1BVF9SMTBYNkcxMFg2X1VOT1JNXzJQQUNLMTY6IDEwMDAxNTYwMDgsCiAgICAgICAgVktfRk9STUFUX1IxMFg2RzEwWDZCMTBYNkExMFg2X1VOT1JNXzRQQUNLMTY6IDEwMDAxNTYwMDksCiAgICAgICAgVktfRk9STUFUX0cxMFg2QjEwWDZHMTBYNlIxMFg2XzQyMl9VTk9STV80UEFDSzE2OiAxMDAwMTU2MDEwLAogICAgICAgIFZLX0ZPUk1BVF9CMTBYNkcxMFg2UjEwWDZHMTBYNl80MjJfVU5PUk1fNFBBQ0sxNjogMTAwMDE1NjAxMSwKICAgICAgICBWS19GT1JNQVRfRzEwWDZfQjEwWDZfUjEwWDZfM1BMQU5FXzQyMF9VTk9STV8zUEFDSzE2OiAxMDAwMTU2MDEyLAogICAgICAgIFZLX0ZPUk1BVF9HMTBYNl9CMTBYNlIxMFg2XzJQTEFORV80MjBfVU5PUk1fM1BBQ0sxNjogMTAwMDE1NjAxMywKICAgICAgICBWS19GT1JNQVRfRzEwWDZfQjEwWDZfUjEwWDZfM1BMQU5FXzQyMl9VTk9STV8zUEFDSzE2OiAxMDAwMTU2MDE0LAogICAgICAgIFZLX0ZPUk1BVF9HMTBYNl9CMTBYNlIxMFg2XzJQTEFORV80MjJfVU5PUk1fM1BBQ0sxNjogMTAwMDE1NjAxNSwKICAgICAgICBWS19GT1JNQVRfRzEwWDZfQjEwWDZfUjEwWDZfM1BMQU5FXzQ0NF9VTk9STV8zUEFDSzE2OiAxMDAwMTU2MDE2LAogICAgICAgIFZLX0ZPUk1BVF9SMTJYNF9VTk9STV9QQUNLMTY6IDEwMDAxNTYwMTcsCiAgICAgICAgVktfRk9STUFUX1IxMlg0RzEyWDRfVU5PUk1fMlBBQ0sxNjogMTAwMDE1NjAxOCwKICAgICAgICBWS19GT1JNQVRfUjEyWDRHMTJYNEIxMlg0QTEyWDRfVU5PUk1fNFBBQ0sxNjogMTAwMDE1NjAxOSwKICAgICAgICBWS19GT1JNQVRfRzEyWDRCMTJYNEcxMlg0UjEyWDRfNDIyX1VOT1JNXzRQQUNLMTY6IDEwMDAxNTYwMjAsCiAgICAgICAgVktfRk9STUFUX0IxMlg0RzEyWDRSMTJYNEcxMlg0XzQyMl9VTk9STV80UEFDSzE2OiAxMDAwMTU2MDIxLAogICAgICAgIFZLX0ZPUk1BVF9HMTJYNF9CMTJYNF9SMTJYNF8zUExBTkVfNDIwX1VOT1JNXzNQQUNLMTY6IDEwMDAxNTYwMjIsCiAgICAgICAgVktfRk9STUFUX0cxMlg0X0IxMlg0UjEyWDRfMlBMQU5FXzQyMF9VTk9STV8zUEFDSzE2OiAxMDAwMTU2MDIzLAogICAgICAgIFZLX0ZPUk1BVF9HMTJYNF9CMTJYNF9SMTJYNF8zUExBTkVfNDIyX1VOT1JNXzNQQUNLMTY6IDEwMDAxNTYwMjQsCiAgICAgICAgVktfRk9STUFUX0cxMlg0X0IxMlg0UjEyWDRfMlBMQU5FXzQyMl9VTk9STV8zUEFDSzE2OiAxMDAwMTU2MDI1LAogICAgICAgIFZLX0ZPUk1BVF9HMTJYNF9CMTJYNF9SMTJYNF8zUExBTkVfNDQ0X1VOT1JNXzNQQUNLMTY6IDEwMDAxNTYwMjYsCiAgICAgICAgVktfRk9STUFUX0cxNkIxNkcxNlIxNl80MjJfVU5PUk06IDEwMDAxNTYwMjcsCiAgICAgICAgVktfRk9STUFUX0IxNkcxNlIxNkcxNl80MjJfVU5PUk06IDEwMDAxNTYwMjgsCiAgICAgICAgVktfRk9STUFUX0cxNl9CMTZfUjE2XzNQTEFORV80MjBfVU5PUk06IDEwMDAxNTYwMjksCiAgICAgICAgVktfRk9STUFUX0cxNl9CMTZSMTZfMlBMQU5FXzQyMF9VTk9STTogMTAwMDE1NjAzMCwKICAgICAgICBWS19GT1JNQVRfRzE2X0IxNl9SMTZfM1BMQU5FXzQyMl9VTk9STTogMTAwMDE1NjAzMSwKICAgICAgICBWS19GT1JNQVRfRzE2X0IxNlIxNl8yUExBTkVfNDIyX1VOT1JNOiAxMDAwMTU2MDMyLAogICAgICAgIFZLX0ZPUk1BVF9HMTZfQjE2X1IxNl8zUExBTkVfNDQ0X1VOT1JNOiAxMDAwMTU2MDMzLAogICAgICAgIFZLX0ZPUk1BVF9QVlJUQzFfMkJQUF9VTk9STV9CTE9DS19JTUc6IDEwMDAwNTRlMywKICAgICAgICBWS19GT1JNQVRfUFZSVEMxXzRCUFBfVU5PUk1fQkxPQ0tfSU1HOiAxMDAwMDU0MDAxLAogICAgICAgIFZLX0ZPUk1BVF9QVlJUQzJfMkJQUF9VTk9STV9CTE9DS19JTUc6IDEwMDAwNTQwMDIsCiAgICAgICAgVktfRk9STUFUX1BWUlRDMl80QlBQX1VOT1JNX0JMT0NLX0lNRzogMTAwMDA1NDAwMywKICAgICAgICBWS19GT1JNQVRfUFZSVEMxXzJCUFBfU1JHQl9CTE9DS19JTUc6IDEwMDAwNTQwMDQsCiAgICAgICAgVktfRk9STUFUX1BWUlRDMV80QlBQX1NSR0JfQkxPQ0tfSU1HOiAxMDAwMDU0MDA1LAogICAgICAgIFZLX0ZPUk1BVF9QVlJUQzJfMkJQUF9TUkdCX0JMT0NLX0lNRzogMTAwMDA1NDAwNiwKICAgICAgICBWS19GT1JNQVRfUFZSVEMyXzRCUFBfU1JHQl9CTE9DS19JTUc6IDEwMDAwNTQwMDcsCiAgICAgICAgVktfRk9STUFUX0FTVENfNHg0X1NGTE9BVF9CTE9DS19FWFQ6IDEwMDAwNjZlMywKICAgICAgICBWS19GT1JNQVRfQVNUQ181eDRfU0ZMT0FUX0JMT0NLX0VYVDogMTAwMDA2NjAwMSwKICAgICAgICBWS19GT1JNQVRfQVNUQ181eDVfU0ZMT0FUX0JMT0NLX0VYVDogMTAwMDA2NjAwMiwKICAgICAgICBWS19GT1JNQVRfQVNUQ182eDVfU0ZMT0FUX0JMT0NLX0VYVDogMTAwMDA2NjAwMywKICAgICAgICBWS19GT1JNQVRfQVNUQ182eDZfU0ZMT0FUX0JMT0NLX0VYVDogMTAwMDA2NjAwNCwKICAgICAgICBWS19GT1JNQVRfQVNUQ184eDVfU0ZMT0FUX0JMT0NLX0VYVDogMTAwMDA2NjAwNSwKICAgICAgICBWS19GT1JNQVRfQVNUQ184eDZfU0ZMT0FUX0JMT0NLX0VYVDogMTAwMDA2NjAwNiwKICAgICAgICBWS19GT1JNQVRfQVNUQ184eDhfU0ZMT0FUX0JMT0NLX0VYVDogMTAwMDA2NjAwNywKICAgICAgICBWS19GT1JNQVRfQVNUQ18xMHg1X1NGTE9BVF9CTE9DS19FWFQ6IDEwMDAwNjYwMDgsCiAgICAgICAgVktfRk9STUFUX0FTVENfMTB4Nl9TRkxPQVRfQkxPQ0tfRVhUOiAxMDAwMDY2MDA5LAogICAgICAgIFZLX0ZPUk1BVF9BU1RDXzEweDhfU0ZMT0FUX0JMT0NLX0VYVDogMTAwMDA2NjAxMCwKICAgICAgICBWS19GT1JNQVRfQVNUQ18xMHgxMF9TRkxPQVRfQkxPQ0tfRVhUOiAxMDAwMDY2MDExLAogICAgICAgIFZLX0ZPUk1BVF9BU1RDXzEyeDEwX1NGTE9BVF9CTE9DS19FWFQ6IDEwMDAwNjYwMTIsCiAgICAgICAgVktfRk9STUFUX0FTVENfMTJ4MTJfU0ZMT0FUX0JMT0NLX0VYVDogMTAwMDA2NjAxMywKICAgICAgICBWS19GT1JNQVRfRzhCOEc4UjhfNDIyX1VOT1JNX0tIUjogMTAwMDE1NmUzLAogICAgICAgIFZLX0ZPUk1BVF9COEc4UjhHOF80MjJfVU5PUk1fS0hSOiAxMDAwMTU2MDAxLAogICAgICAgIFZLX0ZPUk1BVF9HOF9COF9SOF8zUExBTkVfNDIwX1VOT1JNX0tIUjogMTAwMDE1NjAwMiwKICAgICAgICBWS19GT1JNQVRfRzhfQjhSOF8yUExBTkVfNDIwX1VOT1JNX0tIUjogMTAwMDE1NjAwMywKICAgICAgICBWS19GT1JNQVRfRzhfQjhfUjhfM1BMQU5FXzQyMl9VTk9STV9LSFI6IDEwMDAxNTYwMDQsCiAgICAgICAgVktfRk9STUFUX0c4X0I4UjhfMlBMQU5FXzQyMl9VTk9STV9LSFI6IDEwMDAxNTYwMDUsCiAgICAgICAgVktfRk9STUFUX0c4X0I4X1I4XzNQTEFORV80NDRfVU5PUk1fS0hSOiAxMDAwMTU2MDA2LAogICAgICAgIFZLX0ZPUk1BVF9SMTBYNl9VTk9STV9QQUNLMTZfS0hSOiAxMDAwMTU2MDA3LAogICAgICAgIFZLX0ZPUk1BVF9SMTBYNkcxMFg2X1VOT1JNXzJQQUNLMTZfS0hSOiAxMDAwMTU2MDA4LAogICAgICAgIFZLX0ZPUk1BVF9SMTBYNkcxMFg2QjEwWDZBMTBYNl9VTk9STV80UEFDSzE2X0tIUjogMTAwMDE1NjAwOSwKICAgICAgICBWS19GT1JNQVRfRzEwWDZCMTBYNkcxMFg2UjEwWDZfNDIyX1VOT1JNXzRQQUNLMTZfS0hSOiAxMDAwMTU2MDEwLAogICAgICAgIFZLX0ZPUk1BVF9CMTBYNkcxMFg2UjEwWDZHMTBYNl80MjJfVU5PUk1fNFBBQ0sxNl9LSFI6IDEwMDAxNTYwMTEsCiAgICAgICAgVktfRk9STUFUX0cxMFg2X0IxMFg2X1IxMFg2XzNQTEFORV80MjBfVU5PUk1fM1BBQ0sxNl9LSFI6IDEwMDAxNTYwMTIsCiAgICAgICAgVktfRk9STUFUX0cxMFg2X0IxMFg2UjEwWDZfMlBMQU5FXzQyMF9VTk9STV8zUEFDSzE2X0tIUjogMTAwMDE1NjAxMywKICAgICAgICBWS19GT1JNQVRfRzEwWDZfQjEwWDZfUjEwWDZfM1BMQU5FXzQyMl9VTk9STV8zUEFDSzE2X0tIUjogMTAwMDE1NjAxNCwKICAgICAgICBWS19GT1JNQVRfRzEwWDZfQjEwWDZSMTBYNl8yUExBTkVfNDIyX1VOT1JNXzNQQUNLMTZfS0hSOiAxMDAwMTU2MDE1LAogICAgICAgIFZLX0ZPUk1BVF9HMTBYNl9CMTBYNl9SMTBYNl8zUExBTkVfNDQ0X1VOT1JNXzNQQUNLMTZfS0hSOiAxMDAwMTU2MDE2LAogICAgICAgIFZLX0ZPUk1BVF9SMTJYNF9VTk9STV9QQUNLMTZfS0hSOiAxMDAwMTU2MDE3LAogICAgICAgIFZLX0ZPUk1BVF9SMTJYNEcxMlg0X1VOT1JNXzJQQUNLMTZfS0hSOiAxMDAwMTU2MDE4LAogICAgICAgIFZLX0ZPUk1BVF9SMTJYNEcxMlg0QjEyWDRBMTJYNF9VTk9STV80UEFDSzE2X0tIUjogMTAwMDE1NjAxOSwKICAgICAgICBWS19GT1JNQVRfRzEyWDRCMTJYNEcxMlg0UjEyWDRfNDIyX1VOT1JNXzRQQUNLMTZfS0hSOiAxMDAwMTU2MDIwLAogICAgICAgIFZLX0ZPUk1BVF9CMTJYNEcxMlg0UjEyWDRHMTJYNF80MjJfVU5PUk1fNFBBQ0sxNl9LSFI6IDEwMDAxNTYwMjEsCiAgICAgICAgVktfRk9STUFUX0cxMlg0X0IxMlg0X1IxMlg0XzNQTEFORV80MjBfVU5PUk1fM1BBQ0sxNl9LSFI6IDEwMDAxNTYwMjIsCiAgICAgICAgVktfRk9STUFUX0cxMlg0X0IxMlg0UjEyWDRfMlBMQU5FXzQyMF9VTk9STV8zUEFDSzE2X0tIUjogMTAwMDE1NjAyMywKICAgICAgICBWS19GT1JNQVRfRzEyWDRfQjEyWDRfUjEyWDRfM1BMQU5FXzQyMl9VTk9STV8zUEFDSzE2X0tIUjogMTAwMDE1NjAyNCwKICAgICAgICBWS19GT1JNQVRfRzEyWDRfQjEyWDRSMTJYNF8yUExBTkVfNDIyX1VOT1JNXzNQQUNLMTZfS0hSOiAxMDAwMTU2MDI1LAogICAgICAgIFZLX0ZPUk1BVF9HMTJYNF9CMTJYNF9SMTJYNF8zUExBTkVfNDQ0X1VOT1JNXzNQQUNLMTZfS0hSOiAxMDAwMTU2MDI2LAogICAgICAgIFZLX0ZPUk1BVF9HMTZCMTZHMTZSMTZfNDIyX1VOT1JNX0tIUjogMTAwMDE1NjAyNywKICAgICAgICBWS19GT1JNQVRfQjE2RzE2UjE2RzE2XzQyMl9VTk9STV9LSFI6IDEwMDAxNTYwMjgsCiAgICAgICAgVktfRk9STUFUX0cxNl9CMTZfUjE2XzNQTEFORV80MjBfVU5PUk1fS0hSOiAxMDAwMTU2MDI5LAogICAgICAgIFZLX0ZPUk1BVF9HMTZfQjE2UjE2XzJQTEFORV80MjBfVU5PUk1fS0hSOiAxMDAwMTU2MDMwLAogICAgICAgIFZLX0ZPUk1BVF9HMTZfQjE2X1IxNl8zUExBTkVfNDIyX1VOT1JNX0tIUjogMTAwMDE1NjAzMSwKICAgICAgICBWS19GT1JNQVRfRzE2X0IxNlIxNl8yUExBTkVfNDIyX1VOT1JNX0tIUjogMTAwMDE1NjAzMiwKICAgICAgICBWS19GT1JNQVRfRzE2X0IxNl9SMTZfM1BMQU5FXzQ0NF9VTk9STV9LSFI6IDEwMDAxNTYwMzMKICAgICAgfTsKICAgICAgVnVsa2FuQ29uc3RhbnRzX2RlZmF1bHQgPSBPYmplY3QuZnJlZXplKFZ1bGthbkNvbnN0YW50cyk7CiAgICB9CiAgfSk7CgogIC8vIG5vZGVfbW9kdWxlcy9rdHgtcGFyc2UvZGlzdC9rdHgtcGFyc2UubW9kZXJuLmpzCiAgZnVuY3Rpb24gZGVjb2RlVGV4dChidWZmZXIpIHsKICAgIGlmICh0eXBlb2YgVGV4dERlY29kZXIgIT09ICJ1bmRlZmluZWQiKSB7CiAgICAgIHJldHVybiBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUoYnVmZmVyKTsKICAgIH0KICAgIHJldHVybiBCdWZmZXIuZnJvbShidWZmZXIpLnRvU3RyaW5nKCJ1dGY4Iik7CiAgfQogIGZ1bmN0aW9uIHJlYWQyKGRhdGEpIHsKICAgIGNvbnN0IGlkID0gbmV3IFVpbnQ4QXJyYXkoZGF0YS5idWZmZXIsIGRhdGEuYnl0ZU9mZnNldCwgS1RYMl9JRC5sZW5ndGgpOwogICAgaWYgKGlkWzBdICE9PSBLVFgyX0lEWzBdIHx8IC8vICfCtCcKICAgIGlkWzFdICE9PSBLVFgyX0lEWzFdIHx8IC8vICdLJwogICAgaWRbMl0gIT09IEtUWDJfSURbMl0gfHwgLy8gJ1QnCiAgICBpZFszXSAhPT0gS1RYMl9JRFszXSB8fCAvLyAnWCcKICAgIGlkWzRdICE9PSBLVFgyX0lEWzRdIHx8IC8vICcgJwogICAgaWRbNV0gIT09IEtUWDJfSURbNV0gfHwgLy8gJzInCiAgICBpZFs2XSAhPT0gS1RYMl9JRFs2XSB8fCAvLyAnMCcKICAgIGlkWzddICE9PSBLVFgyX0lEWzddIHx8IC8vICfCqicKICAgIGlkWzhdICE9PSBLVFgyX0lEWzhdIHx8IC8vICdccicKICAgIGlkWzldICE9PSBLVFgyX0lEWzldIHx8IC8vICdcbicKICAgIGlkWzEwXSAhPT0gS1RYMl9JRFsxMF0gfHwgLy8gJ1x4MUEnCiAgICBpZFsxMV0gIT09IEtUWDJfSURbMTFdKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcigiTWlzc2luZyBLVFggMi4wIGlkZW50aWZpZXIuIik7CiAgICB9CiAgICBjb25zdCBjb250YWluZXIgPSBuZXcgS1RYMkNvbnRhaW5lcigpOwogICAgY29uc3QgaGVhZGVyQnl0ZUxlbmd0aCA9IDE3ICogVWludDMyQXJyYXkuQllURVNfUEVSX0VMRU1FTlQ7CiAgICBjb25zdCBoZWFkZXJSZWFkZXIgPSBuZXcgQnVmZmVyUmVhZGVyKGRhdGEsIEtUWDJfSUQubGVuZ3RoLCBoZWFkZXJCeXRlTGVuZ3RoLCB0cnVlKTsKICAgIGNvbnRhaW5lci52a0Zvcm1hdCA9IGhlYWRlclJlYWRlci5fbmV4dFVpbnQzMigpOwogICAgY29udGFpbmVyLnR5cGVTaXplID0gaGVhZGVyUmVhZGVyLl9uZXh0VWludDMyKCk7CiAgICBjb250YWluZXIucGl4ZWxXaWR0aCA9IGhlYWRlclJlYWRlci5fbmV4dFVpbnQzMigpOwogICAgY29udGFpbmVyLnBpeGVsSGVpZ2h0ID0gaGVhZGVyUmVhZGVyLl9uZXh0VWludDMyKCk7CiAgICBjb250YWluZXIucGl4ZWxEZXB0aCA9IGhlYWRlclJlYWRlci5fbmV4dFVpbnQzMigpOwogICAgY29udGFpbmVyLmxheWVyQ291bnQgPSBoZWFkZXJSZWFkZXIuX25leHRVaW50MzIoKTsKICAgIGNvbnRhaW5lci5mYWNlQ291bnQgPSBoZWFkZXJSZWFkZXIuX25leHRVaW50MzIoKTsKICAgIGNvbnN0IGxldmVsQ291bnQgPSBoZWFkZXJSZWFkZXIuX25leHRVaW50MzIoKTsKICAgIGNvbnRhaW5lci5zdXBlcmNvbXByZXNzaW9uU2NoZW1lID0gaGVhZGVyUmVhZGVyLl9uZXh0VWludDMyKCk7CiAgICBjb25zdCBkZmRCeXRlT2Zmc2V0ID0gaGVhZGVyUmVhZGVyLl9uZXh0VWludDMyKCk7CiAgICBjb25zdCBkZmRCeXRlTGVuZ3RoID0gaGVhZGVyUmVhZGVyLl9uZXh0VWludDMyKCk7CiAgICBjb25zdCBrdmRCeXRlT2Zmc2V0ID0gaGVhZGVyUmVhZGVyLl9uZXh0VWludDMyKCk7CiAgICBjb25zdCBrdmRCeXRlTGVuZ3RoID0gaGVhZGVyUmVhZGVyLl9uZXh0VWludDMyKCk7CiAgICBjb25zdCBzZ2RCeXRlT2Zmc2V0ID0gaGVhZGVyUmVhZGVyLl9uZXh0VWludDY0KCk7CiAgICBjb25zdCBzZ2RCeXRlTGVuZ3RoID0gaGVhZGVyUmVhZGVyLl9uZXh0VWludDY0KCk7CiAgICBjb25zdCBsZXZlbEJ5dGVMZW5ndGggPSBsZXZlbENvdW50ICogMyAqIDg7CiAgICBjb25zdCBsZXZlbFJlYWRlciA9IG5ldyBCdWZmZXJSZWFkZXIoZGF0YSwgS1RYMl9JRC5sZW5ndGggKyBoZWFkZXJCeXRlTGVuZ3RoLCBsZXZlbEJ5dGVMZW5ndGgsIHRydWUpOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZXZlbENvdW50OyBpKyspIHsKICAgICAgY29udGFpbmVyLmxldmVscy5wdXNoKHsKICAgICAgICBsZXZlbERhdGE6IG5ldyBVaW50OEFycmF5KGRhdGEuYnVmZmVyLCBkYXRhLmJ5dGVPZmZzZXQgKyBsZXZlbFJlYWRlci5fbmV4dFVpbnQ2NCgpLCBsZXZlbFJlYWRlci5fbmV4dFVpbnQ2NCgpKSwKICAgICAgICB1bmNvbXByZXNzZWRCeXRlTGVuZ3RoOiBsZXZlbFJlYWRlci5fbmV4dFVpbnQ2NCgpCiAgICAgIH0pOwogICAgfQogICAgY29uc3QgZGZkUmVhZGVyID0gbmV3IEJ1ZmZlclJlYWRlcihkYXRhLCBkZmRCeXRlT2Zmc2V0LCBkZmRCeXRlTGVuZ3RoLCB0cnVlKTsKICAgIGNvbnN0IGRmZCA9IHsKICAgICAgdmVuZG9ySWQ6IGRmZFJlYWRlci5fc2tpcCgKICAgICAgICA0CiAgICAgICAgLyogdG90YWxTaXplICovCiAgICAgICkuX25leHRVaW50MTYoKSwKICAgICAgZGVzY3JpcHRvclR5cGU6IGRmZFJlYWRlci5fbmV4dFVpbnQxNigpLAogICAgICB2ZXJzaW9uTnVtYmVyOiBkZmRSZWFkZXIuX25leHRVaW50MTYoKSwKICAgICAgZGVzY3JpcHRvckJsb2NrU2l6ZTogZGZkUmVhZGVyLl9uZXh0VWludDE2KCksCiAgICAgIGNvbG9yTW9kZWw6IGRmZFJlYWRlci5fbmV4dFVpbnQ4KCksCiAgICAgIGNvbG9yUHJpbWFyaWVzOiBkZmRSZWFkZXIuX25leHRVaW50OCgpLAogICAgICB0cmFuc2ZlckZ1bmN0aW9uOiBkZmRSZWFkZXIuX25leHRVaW50OCgpLAogICAgICBmbGFnczogZGZkUmVhZGVyLl9uZXh0VWludDgoKSwKICAgICAgdGV4ZWxCbG9ja0RpbWVuc2lvbjogW2RmZFJlYWRlci5fbmV4dFVpbnQ4KCksIGRmZFJlYWRlci5fbmV4dFVpbnQ4KCksIGRmZFJlYWRlci5fbmV4dFVpbnQ4KCksIGRmZFJlYWRlci5fbmV4dFVpbnQ4KCldLAogICAgICBieXRlc1BsYW5lOiBbZGZkUmVhZGVyLl9uZXh0VWludDgoKSwgZGZkUmVhZGVyLl9uZXh0VWludDgoKSwgZGZkUmVhZGVyLl9uZXh0VWludDgoKSwgZGZkUmVhZGVyLl9uZXh0VWludDgoKSwgZGZkUmVhZGVyLl9uZXh0VWludDgoKSwgZGZkUmVhZGVyLl9uZXh0VWludDgoKSwgZGZkUmVhZGVyLl9uZXh0VWludDgoKSwgZGZkUmVhZGVyLl9uZXh0VWludDgoKV0sCiAgICAgIHNhbXBsZXM6IFtdCiAgICB9OwogICAgY29uc3Qgc2FtcGxlU3RhcnQgPSA2OwogICAgY29uc3Qgc2FtcGxlV29yZHMgPSA0OwogICAgY29uc3QgbnVtU2FtcGxlcyA9IChkZmQuZGVzY3JpcHRvckJsb2NrU2l6ZSAvIDQgLSBzYW1wbGVTdGFydCkgLyBzYW1wbGVXb3JkczsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtU2FtcGxlczsgaSsrKSB7CiAgICAgIGNvbnN0IHNhbXBsZSA9IHsKICAgICAgICBiaXRPZmZzZXQ6IGRmZFJlYWRlci5fbmV4dFVpbnQxNigpLAogICAgICAgIGJpdExlbmd0aDogZGZkUmVhZGVyLl9uZXh0VWludDgoKSwKICAgICAgICBjaGFubmVsVHlwZTogZGZkUmVhZGVyLl9uZXh0VWludDgoKSwKICAgICAgICBzYW1wbGVQb3NpdGlvbjogW2RmZFJlYWRlci5fbmV4dFVpbnQ4KCksIGRmZFJlYWRlci5fbmV4dFVpbnQ4KCksIGRmZFJlYWRlci5fbmV4dFVpbnQ4KCksIGRmZFJlYWRlci5fbmV4dFVpbnQ4KCldLAogICAgICAgIHNhbXBsZUxvd2VyOiAtSW5maW5pdHksCiAgICAgICAgc2FtcGxlVXBwZXI6IEluZmluaXR5CiAgICAgIH07CiAgICAgIGlmIChzYW1wbGUuY2hhbm5lbFR5cGUgJiBLSFJfREZfU0FNUExFX0RBVEFUWVBFX1NJR05FRCkgewogICAgICAgIHNhbXBsZS5zYW1wbGVMb3dlciA9IGRmZFJlYWRlci5fbmV4dEludDMyKCk7CiAgICAgICAgc2FtcGxlLnNhbXBsZVVwcGVyID0gZGZkUmVhZGVyLl9uZXh0SW50MzIoKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBzYW1wbGUuc2FtcGxlTG93ZXIgPSBkZmRSZWFkZXIuX25leHRVaW50MzIoKTsKICAgICAgICBzYW1wbGUuc2FtcGxlVXBwZXIgPSBkZmRSZWFkZXIuX25leHRVaW50MzIoKTsKICAgICAgfQogICAgICBkZmQuc2FtcGxlc1tpXSA9IHNhbXBsZTsKICAgIH0KICAgIGNvbnRhaW5lci5kYXRhRm9ybWF0RGVzY3JpcHRvci5sZW5ndGggPSAwOwogICAgY29udGFpbmVyLmRhdGFGb3JtYXREZXNjcmlwdG9yLnB1c2goZGZkKTsKICAgIGNvbnN0IGt2ZFJlYWRlciA9IG5ldyBCdWZmZXJSZWFkZXIoZGF0YSwga3ZkQnl0ZU9mZnNldCwga3ZkQnl0ZUxlbmd0aCwgdHJ1ZSk7CiAgICB3aGlsZSAoa3ZkUmVhZGVyLl9vZmZzZXQgPCBrdmRCeXRlTGVuZ3RoKSB7CiAgICAgIGNvbnN0IGtleVZhbHVlQnl0ZUxlbmd0aCA9IGt2ZFJlYWRlci5fbmV4dFVpbnQzMigpOwogICAgICBjb25zdCBrZXlEYXRhID0ga3ZkUmVhZGVyLl9zY2FuKGtleVZhbHVlQnl0ZUxlbmd0aCk7CiAgICAgIGNvbnN0IGtleSA9IGRlY29kZVRleHQoa2V5RGF0YSk7CiAgICAgIGNvbnRhaW5lci5rZXlWYWx1ZVtrZXldID0ga3ZkUmVhZGVyLl9uZXh0VWludDhBcnJheShrZXlWYWx1ZUJ5dGVMZW5ndGggLSBrZXlEYXRhLmJ5dGVMZW5ndGggLSAxKTsKICAgICAgaWYgKGtleS5tYXRjaCgvXmt0eC9pKSkgewogICAgICAgIGNvbnN0IHRleHQgPSBkZWNvZGVUZXh0KGNvbnRhaW5lci5rZXlWYWx1ZVtrZXldKTsKICAgICAgICBjb250YWluZXIua2V5VmFsdWVba2V5XSA9IHRleHQuc3Vic3RyaW5nKDAsIHRleHQubGFzdEluZGV4T2YoIlwwIikpOwogICAgICB9CiAgICAgIGNvbnN0IGt2UGFkZGluZyA9IGtleVZhbHVlQnl0ZUxlbmd0aCAlIDQgPyA0IC0ga2V5VmFsdWVCeXRlTGVuZ3RoICUgNCA6IDA7CiAgICAgIGt2ZFJlYWRlci5fc2tpcChrdlBhZGRpbmcpOwogICAgfQogICAgaWYgKHNnZEJ5dGVMZW5ndGggPD0gMCkKICAgICAgcmV0dXJuIGNvbnRhaW5lcjsKICAgIGNvbnN0IHNnZFJlYWRlciA9IG5ldyBCdWZmZXJSZWFkZXIoZGF0YSwgc2dkQnl0ZU9mZnNldCwgc2dkQnl0ZUxlbmd0aCwgdHJ1ZSk7CiAgICBjb25zdCBlbmRwb2ludENvdW50ID0gc2dkUmVhZGVyLl9uZXh0VWludDE2KCk7CiAgICBjb25zdCBzZWxlY3RvckNvdW50ID0gc2dkUmVhZGVyLl9uZXh0VWludDE2KCk7CiAgICBjb25zdCBlbmRwb2ludHNCeXRlTGVuZ3RoID0gc2dkUmVhZGVyLl9uZXh0VWludDMyKCk7CiAgICBjb25zdCBzZWxlY3RvcnNCeXRlTGVuZ3RoID0gc2dkUmVhZGVyLl9uZXh0VWludDMyKCk7CiAgICBjb25zdCB0YWJsZXNCeXRlTGVuZ3RoID0gc2dkUmVhZGVyLl9uZXh0VWludDMyKCk7CiAgICBjb25zdCBleHRlbmRlZEJ5dGVMZW5ndGggPSBzZ2RSZWFkZXIuX25leHRVaW50MzIoKTsKICAgIGNvbnN0IGltYWdlRGVzY3MgPSBbXTsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGV2ZWxDb3VudDsgaSsrKSB7CiAgICAgIGltYWdlRGVzY3MucHVzaCh7CiAgICAgICAgaW1hZ2VGbGFnczogc2dkUmVhZGVyLl9uZXh0VWludDMyKCksCiAgICAgICAgcmdiU2xpY2VCeXRlT2Zmc2V0OiBzZ2RSZWFkZXIuX25leHRVaW50MzIoKSwKICAgICAgICByZ2JTbGljZUJ5dGVMZW5ndGg6IHNnZFJlYWRlci5fbmV4dFVpbnQzMigpLAogICAgICAgIGFscGhhU2xpY2VCeXRlT2Zmc2V0OiBzZ2RSZWFkZXIuX25leHRVaW50MzIoKSwKICAgICAgICBhbHBoYVNsaWNlQnl0ZUxlbmd0aDogc2dkUmVhZGVyLl9uZXh0VWludDMyKCkKICAgICAgfSk7CiAgICB9CiAgICBjb25zdCBlbmRwb2ludHNCeXRlT2Zmc2V0ID0gc2dkQnl0ZU9mZnNldCArIHNnZFJlYWRlci5fb2Zmc2V0OwogICAgY29uc3Qgc2VsZWN0b3JzQnl0ZU9mZnNldCA9IGVuZHBvaW50c0J5dGVPZmZzZXQgKyBlbmRwb2ludHNCeXRlTGVuZ3RoOwogICAgY29uc3QgdGFibGVzQnl0ZU9mZnNldCA9IHNlbGVjdG9yc0J5dGVPZmZzZXQgKyBzZWxlY3RvcnNCeXRlTGVuZ3RoOwogICAgY29uc3QgZXh0ZW5kZWRCeXRlT2Zmc2V0ID0gdGFibGVzQnl0ZU9mZnNldCArIHRhYmxlc0J5dGVMZW5ndGg7CiAgICBjb25zdCBlbmRwb2ludHNEYXRhID0gbmV3IFVpbnQ4QXJyYXkoZGF0YS5idWZmZXIsIGRhdGEuYnl0ZU9mZnNldCArIGVuZHBvaW50c0J5dGVPZmZzZXQsIGVuZHBvaW50c0J5dGVMZW5ndGgpOwogICAgY29uc3Qgc2VsZWN0b3JzRGF0YSA9IG5ldyBVaW50OEFycmF5KGRhdGEuYnVmZmVyLCBkYXRhLmJ5dGVPZmZzZXQgKyBzZWxlY3RvcnNCeXRlT2Zmc2V0LCBzZWxlY3RvcnNCeXRlTGVuZ3RoKTsKICAgIGNvbnN0IHRhYmxlc0RhdGEgPSBuZXcgVWludDhBcnJheShkYXRhLmJ1ZmZlciwgZGF0YS5ieXRlT2Zmc2V0ICsgdGFibGVzQnl0ZU9mZnNldCwgdGFibGVzQnl0ZUxlbmd0aCk7CiAgICBjb25zdCBleHRlbmRlZERhdGEgPSBuZXcgVWludDhBcnJheShkYXRhLmJ1ZmZlciwgZGF0YS5ieXRlT2Zmc2V0ICsgZXh0ZW5kZWRCeXRlT2Zmc2V0LCBleHRlbmRlZEJ5dGVMZW5ndGgpOwogICAgY29udGFpbmVyLmdsb2JhbERhdGEgPSB7CiAgICAgIGVuZHBvaW50Q291bnQsCiAgICAgIHNlbGVjdG9yQ291bnQsCiAgICAgIGltYWdlRGVzY3MsCiAgICAgIGVuZHBvaW50c0RhdGEsCiAgICAgIHNlbGVjdG9yc0RhdGEsCiAgICAgIHRhYmxlc0RhdGEsCiAgICAgIGV4dGVuZGVkRGF0YQogICAgfTsKICAgIHJldHVybiBjb250YWluZXI7CiAgfQogIHZhciBLSFJfU1VQRVJDT01QUkVTU0lPTl9OT05FLCBLSFJfREZfS0hSX0RFU0NSSVBUT1JUWVBFX0JBU0lDRk9STUFULCBLSFJfREZfVkVORE9SSURfS0hST05PUywgS0hSX0RGX1ZFUlNJT04sIEtIUl9ERl9NT0RFTF9VTlNQRUNJRklFRCwgS0hSX0RGX0ZMQUdfQUxQSEFfU1RSQUlHSFQsIEtIUl9ERl9UUkFOU0ZFUl9TUkdCLCBLSFJfREZfUFJJTUFSSUVTX0JUNzA5LCBLSFJfREZfU0FNUExFX0RBVEFUWVBFX1NJR05FRCwgVktfRk9STUFUX1VOREVGSU5FRCwgS1RYMkNvbnRhaW5lciwgQnVmZmVyUmVhZGVyLCBOVUwsIEtUWDJfSUQ7CiAgdmFyIGluaXRfa3R4X3BhcnNlX21vZGVybiA9IF9fZXNtKHsKICAgICJub2RlX21vZHVsZXMva3R4LXBhcnNlL2Rpc3Qva3R4LXBhcnNlLm1vZGVybi5qcyIoKSB7CiAgICAgIEtIUl9TVVBFUkNPTVBSRVNTSU9OX05PTkUgPSAwOwogICAgICBLSFJfREZfS0hSX0RFU0NSSVBUT1JUWVBFX0JBU0lDRk9STUFUID0gMDsKICAgICAgS0hSX0RGX1ZFTkRPUklEX0tIUk9OT1MgPSAwOwogICAgICBLSFJfREZfVkVSU0lPTiA9IDI7CiAgICAgIEtIUl9ERl9NT0RFTF9VTlNQRUNJRklFRCA9IDA7CiAgICAgIEtIUl9ERl9GTEFHX0FMUEhBX1NUUkFJR0hUID0gMDsKICAgICAgS0hSX0RGX1RSQU5TRkVSX1NSR0IgPSAyOwogICAgICBLSFJfREZfUFJJTUFSSUVTX0JUNzA5ID0gMTsKICAgICAgS0hSX0RGX1NBTVBMRV9EQVRBVFlQRV9TSUdORUQgPSA2NDsKICAgICAgVktfRk9STUFUX1VOREVGSU5FRCA9IDA7CiAgICAgIEtUWDJDb250YWluZXIgPSBjbGFzcyB7CiAgICAgICAgY29uc3RydWN0b3IoKSB7CiAgICAgICAgICB0aGlzLnZrRm9ybWF0ID0gVktfRk9STUFUX1VOREVGSU5FRDsKICAgICAgICAgIHRoaXMudHlwZVNpemUgPSAxOwogICAgICAgICAgdGhpcy5waXhlbFdpZHRoID0gMDsKICAgICAgICAgIHRoaXMucGl4ZWxIZWlnaHQgPSAwOwogICAgICAgICAgdGhpcy5waXhlbERlcHRoID0gMDsKICAgICAgICAgIHRoaXMubGF5ZXJDb3VudCA9IDA7CiAgICAgICAgICB0aGlzLmZhY2VDb3VudCA9IDE7CiAgICAgICAgICB0aGlzLnN1cGVyY29tcHJlc3Npb25TY2hlbWUgPSBLSFJfU1VQRVJDT01QUkVTU0lPTl9OT05FOwogICAgICAgICAgdGhpcy5sZXZlbHMgPSBbXTsKICAgICAgICAgIHRoaXMuZGF0YUZvcm1hdERlc2NyaXB0b3IgPSBbewogICAgICAgICAgICB2ZW5kb3JJZDogS0hSX0RGX1ZFTkRPUklEX0tIUk9OT1MsCiAgICAgICAgICAgIGRlc2NyaXB0b3JUeXBlOiBLSFJfREZfS0hSX0RFU0NSSVBUT1JUWVBFX0JBU0lDRk9STUFULAogICAgICAgICAgICBkZXNjcmlwdG9yQmxvY2tTaXplOiAwLAogICAgICAgICAgICB2ZXJzaW9uTnVtYmVyOiBLSFJfREZfVkVSU0lPTiwKICAgICAgICAgICAgY29sb3JNb2RlbDogS0hSX0RGX01PREVMX1VOU1BFQ0lGSUVELAogICAgICAgICAgICBjb2xvclByaW1hcmllczogS0hSX0RGX1BSSU1BUklFU19CVDcwOSwKICAgICAgICAgICAgdHJhbnNmZXJGdW5jdGlvbjogS0hSX0RGX1RSQU5TRkVSX1NSR0IsCiAgICAgICAgICAgIGZsYWdzOiBLSFJfREZfRkxBR19BTFBIQV9TVFJBSUdIVCwKICAgICAgICAgICAgdGV4ZWxCbG9ja0RpbWVuc2lvbjogWzAsIDAsIDAsIDBdLAogICAgICAgICAgICBieXRlc1BsYW5lOiBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF0sCiAgICAgICAgICAgIHNhbXBsZXM6IFtdCiAgICAgICAgICB9XTsKICAgICAgICAgIHRoaXMua2V5VmFsdWUgPSB7fTsKICAgICAgICAgIHRoaXMuZ2xvYmFsRGF0YSA9IG51bGw7CiAgICAgICAgfQogICAgICB9OwogICAgICBCdWZmZXJSZWFkZXIgPSBjbGFzcyB7CiAgICAgICAgY29uc3RydWN0b3IoZGF0YSwgYnl0ZU9mZnNldCwgYnl0ZUxlbmd0aCwgbGl0dGxlRW5kaWFuMikgewogICAgICAgICAgdGhpcy5fZGF0YVZpZXcgPSB2b2lkIDA7CiAgICAgICAgICB0aGlzLl9saXR0bGVFbmRpYW4gPSB2b2lkIDA7CiAgICAgICAgICB0aGlzLl9vZmZzZXQgPSB2b2lkIDA7CiAgICAgICAgICB0aGlzLl9kYXRhVmlldyA9IG5ldyBEYXRhVmlldyhkYXRhLmJ1ZmZlciwgZGF0YS5ieXRlT2Zmc2V0ICsgYnl0ZU9mZnNldCwgYnl0ZUxlbmd0aCk7CiAgICAgICAgICB0aGlzLl9saXR0bGVFbmRpYW4gPSBsaXR0bGVFbmRpYW4yOwogICAgICAgICAgdGhpcy5fb2Zmc2V0ID0gMDsKICAgICAgICB9CiAgICAgICAgX25leHRVaW50OCgpIHsKICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5fZGF0YVZpZXcuZ2V0VWludDgodGhpcy5fb2Zmc2V0KTsKICAgICAgICAgIHRoaXMuX29mZnNldCArPSAxOwogICAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICAgIH0KICAgICAgICBfbmV4dFVpbnQxNigpIHsKICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5fZGF0YVZpZXcuZ2V0VWludDE2KHRoaXMuX29mZnNldCwgdGhpcy5fbGl0dGxlRW5kaWFuKTsKICAgICAgICAgIHRoaXMuX29mZnNldCArPSAyOwogICAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICAgIH0KICAgICAgICBfbmV4dFVpbnQzMigpIHsKICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5fZGF0YVZpZXcuZ2V0VWludDMyKHRoaXMuX29mZnNldCwgdGhpcy5fbGl0dGxlRW5kaWFuKTsKICAgICAgICAgIHRoaXMuX29mZnNldCArPSA0OwogICAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICAgIH0KICAgICAgICBfbmV4dFVpbnQ2NCgpIHsKICAgICAgICAgIGNvbnN0IGxlZnQgPSB0aGlzLl9kYXRhVmlldy5nZXRVaW50MzIodGhpcy5fb2Zmc2V0LCB0aGlzLl9saXR0bGVFbmRpYW4pOwogICAgICAgICAgY29uc3QgcmlnaHQgPSB0aGlzLl9kYXRhVmlldy5nZXRVaW50MzIodGhpcy5fb2Zmc2V0ICsgNCwgdGhpcy5fbGl0dGxlRW5kaWFuKTsKICAgICAgICAgIGNvbnN0IHZhbHVlID0gbGVmdCArIDIgKiogMzIgKiByaWdodDsKICAgICAgICAgIHRoaXMuX29mZnNldCArPSA4OwogICAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICAgIH0KICAgICAgICBfbmV4dEludDMyKCkgewogICAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLl9kYXRhVmlldy5nZXRJbnQzMih0aGlzLl9vZmZzZXQsIHRoaXMuX2xpdHRsZUVuZGlhbik7CiAgICAgICAgICB0aGlzLl9vZmZzZXQgKz0gNDsKICAgICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgICB9CiAgICAgICAgX25leHRVaW50OEFycmF5KGxlbikgewogICAgICAgICAgY29uc3QgdmFsdWUgPSBuZXcgVWludDhBcnJheSh0aGlzLl9kYXRhVmlldy5idWZmZXIsIHRoaXMuX2RhdGFWaWV3LmJ5dGVPZmZzZXQgKyB0aGlzLl9vZmZzZXQsIGxlbik7CiAgICAgICAgICB0aGlzLl9vZmZzZXQgKz0gbGVuOwogICAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICAgIH0KICAgICAgICBfc2tpcChieXRlcykgewogICAgICAgICAgdGhpcy5fb2Zmc2V0ICs9IGJ5dGVzOwogICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfQogICAgICAgIF9zY2FuKG1heEJ5dGVMZW5ndGgsIHRlcm0gPSAwKSB7CiAgICAgICAgICBjb25zdCBieXRlT2Zmc2V0ID0gdGhpcy5fb2Zmc2V0OwogICAgICAgICAgbGV0IGJ5dGVMZW5ndGggPSAwOwogICAgICAgICAgd2hpbGUgKHRoaXMuX2RhdGFWaWV3LmdldFVpbnQ4KHRoaXMuX29mZnNldCkgIT09IHRlcm0gJiYgYnl0ZUxlbmd0aCA8IG1heEJ5dGVMZW5ndGgpIHsKICAgICAgICAgICAgYnl0ZUxlbmd0aCsrOwogICAgICAgICAgICB0aGlzLl9vZmZzZXQrKzsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChieXRlTGVuZ3RoIDwgbWF4Qnl0ZUxlbmd0aCkKICAgICAgICAgICAgdGhpcy5fb2Zmc2V0Kys7CiAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkodGhpcy5fZGF0YVZpZXcuYnVmZmVyLCB0aGlzLl9kYXRhVmlldy5ieXRlT2Zmc2V0ICsgYnl0ZU9mZnNldCwgYnl0ZUxlbmd0aCk7CiAgICAgICAgfQogICAgICB9OwogICAgICBOVUwgPSBuZXcgVWludDhBcnJheShbMF0pOwogICAgICBLVFgyX0lEID0gWwogICAgICAgIC8vICfCtCcsICdLJywgJ1QnLCAnWCcsICcyJywgJzAnLCAnwqonLCAnXHInLCAnXG4nLCAnXHgxQScsICdcbicKICAgICAgICAxNzEsCiAgICAgICAgNzUsCiAgICAgICAgODQsCiAgICAgICAgODgsCiAgICAgICAgMzIsCiAgICAgICAgNTAsCiAgICAgICAgNDgsCiAgICAgICAgMTg3LAogICAgICAgIDEzLAogICAgICAgIDEwLAogICAgICAgIDI2LAogICAgICAgIDEwCiAgICAgIF07CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvVGhpcmRQYXJ0eS9Xb3JrZXJzL2Jhc2lzX3RyYW5zY29kZXIuanMKICB2YXIgcmVxdWlyZV9iYXNpc190cmFuc2NvZGVyID0gX19jb21tb25KUyh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9UaGlyZFBhcnR5L1dvcmtlcnMvYmFzaXNfdHJhbnNjb2Rlci5qcyIoZXhwb3J0czIsIG1vZHVsZSkgewogICAgICB2YXIgQkFTSVMgPSBmdW5jdGlvbigpIHsKICAgICAgICB2YXIgX3NjcmlwdERpciA9IHR5cGVvZiBkb2N1bWVudCAhPT0gInVuZGVmaW5lZCIgJiYgZG9jdW1lbnQuY3VycmVudFNjcmlwdCA/IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjIDogdm9pZCAwOwogICAgICAgIGlmICh0eXBlb2YgX19maWxlbmFtZSAhPT0gInVuZGVmaW5lZCIpCiAgICAgICAgICBfc2NyaXB0RGlyID0gX3NjcmlwdERpciB8fCBfX2ZpbGVuYW1lOwogICAgICAgIHJldHVybiBmdW5jdGlvbihCQVNJUzIpIHsKICAgICAgICAgIEJBU0lTMiA9IEJBU0lTMiB8fCB7fTsKICAgICAgICAgIHZhciBNb2R1bGUgPSB0eXBlb2YgQkFTSVMyICE9PSAidW5kZWZpbmVkIiA/IEJBU0lTMiA6IHt9OwogICAgICAgICAgdmFyIHJlYWR5UHJvbWlzZVJlc29sdmUsIHJlYWR5UHJvbWlzZVJlamVjdDsKICAgICAgICAgIE1vZHVsZVsicmVhZHkiXSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgICAgICByZWFkeVByb21pc2VSZXNvbHZlID0gcmVzb2x2ZTsKICAgICAgICAgICAgcmVhZHlQcm9taXNlUmVqZWN0ID0gcmVqZWN0OwogICAgICAgICAgfSk7CiAgICAgICAgICB2YXIgbW9kdWxlT3ZlcnJpZGVzID0ge307CiAgICAgICAgICB2YXIga2V5OwogICAgICAgICAgZm9yIChrZXkgaW4gTW9kdWxlKSB7CiAgICAgICAgICAgIGlmIChNb2R1bGUuaGFzT3duUHJvcGVydHkoa2V5KSkgewogICAgICAgICAgICAgIG1vZHVsZU92ZXJyaWRlc1trZXldID0gTW9kdWxlW2tleV07CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHZhciBhcmd1bWVudHNfID0gW107CiAgICAgICAgICB2YXIgdGhpc1Byb2dyYW0gPSAiLi90aGlzLnByb2dyYW0iOwogICAgICAgICAgdmFyIHF1aXRfID0gZnVuY3Rpb24oc3RhdHVzLCB0b1Rocm93KSB7CiAgICAgICAgICAgIHRocm93IHRvVGhyb3c7CiAgICAgICAgICB9OwogICAgICAgICAgdmFyIEVOVklST05NRU5UX0lTX1dFQiA9IGZhbHNlOwogICAgICAgICAgdmFyIEVOVklST05NRU5UX0lTX1dPUktFUiA9IGZhbHNlOwogICAgICAgICAgdmFyIEVOVklST05NRU5UX0lTX05PREUgPSBmYWxzZTsKICAgICAgICAgIHZhciBFTlZJUk9OTUVOVF9JU19TSEVMTCA9IGZhbHNlOwogICAgICAgICAgRU5WSVJPTk1FTlRfSVNfV0VCID0gdHlwZW9mIHdpbmRvdyA9PT0gIm9iamVjdCI7CiAgICAgICAgICBFTlZJUk9OTUVOVF9JU19XT1JLRVIgPSB0eXBlb2YgaW1wb3J0U2NyaXB0cyA9PT0gImZ1bmN0aW9uIjsKICAgICAgICAgIEVOVklST05NRU5UX0lTX05PREUgPSB0eXBlb2YgcHJvY2VzcyA9PT0gIm9iamVjdCIgJiYgdHlwZW9mIHByb2Nlc3MudmVyc2lvbnMgPT09ICJvYmplY3QiICYmIHR5cGVvZiBwcm9jZXNzLnZlcnNpb25zLm5vZGUgPT09ICJzdHJpbmciOwogICAgICAgICAgRU5WSVJPTk1FTlRfSVNfU0hFTEwgPSAhRU5WSVJPTk1FTlRfSVNfV0VCICYmICFFTlZJUk9OTUVOVF9JU19OT0RFICYmICFFTlZJUk9OTUVOVF9JU19XT1JLRVI7CiAgICAgICAgICB2YXIgc2NyaXB0RGlyZWN0b3J5ID0gIiI7CiAgICAgICAgICBmdW5jdGlvbiBsb2NhdGVGaWxlKHBhdGgpIHsKICAgICAgICAgICAgaWYgKE1vZHVsZVsibG9jYXRlRmlsZSJdKSB7CiAgICAgICAgICAgICAgcmV0dXJuIE1vZHVsZVsibG9jYXRlRmlsZSJdKHBhdGgsIHNjcmlwdERpcmVjdG9yeSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHNjcmlwdERpcmVjdG9yeSArIHBhdGg7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgcmVhZF8sIHJlYWRBc3luYywgcmVhZEJpbmFyeSwgc2V0V2luZG93VGl0bGU7CiAgICAgICAgICB2YXIgbm9kZUZTOwogICAgICAgICAgdmFyIG5vZGVQYXRoOwogICAgICAgICAgaWYgKEVOVklST05NRU5UX0lTX05PREUpIHsKICAgICAgICAgICAgaWYgKEVOVklST05NRU5UX0lTX1dPUktFUikgewogICAgICAgICAgICAgIHNjcmlwdERpcmVjdG9yeSA9IF9fcmVxdWlyZSgicGF0aCIpLmRpcm5hbWUoc2NyaXB0RGlyZWN0b3J5KSArICIvIjsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBzY3JpcHREaXJlY3RvcnkgPSBfX2Rpcm5hbWUgKyAiLyI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmVhZF8gPSBmdW5jdGlvbiBzaGVsbF9yZWFkKGZpbGVuYW1lLCBiaW5hcnkpIHsKICAgICAgICAgICAgICBpZiAoIW5vZGVGUykKICAgICAgICAgICAgICAgIG5vZGVGUyA9IF9fcmVxdWlyZSgiZnMiKTsKICAgICAgICAgICAgICBpZiAoIW5vZGVQYXRoKQogICAgICAgICAgICAgICAgbm9kZVBhdGggPSBfX3JlcXVpcmUoInBhdGgiKTsKICAgICAgICAgICAgICBmaWxlbmFtZSA9IG5vZGVQYXRoWyJub3JtYWxpemUiXShmaWxlbmFtZSk7CiAgICAgICAgICAgICAgcmV0dXJuIG5vZGVGU1sicmVhZEZpbGVTeW5jIl0oZmlsZW5hbWUsIGJpbmFyeSA/IG51bGwgOiAidXRmOCIpOwogICAgICAgICAgICB9OwogICAgICAgICAgICByZWFkQmluYXJ5ID0gZnVuY3Rpb24gcmVhZEJpbmFyeTIoZmlsZW5hbWUpIHsKICAgICAgICAgICAgICB2YXIgcmV0ID0gcmVhZF8oZmlsZW5hbWUsIHRydWUpOwogICAgICAgICAgICAgIGlmICghcmV0LmJ1ZmZlcikgewogICAgICAgICAgICAgICAgcmV0ID0gbmV3IFVpbnQ4QXJyYXkocmV0KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgYXNzZXJ0KHJldC5idWZmZXIpOwogICAgICAgICAgICAgIHJldHVybiByZXQ7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGlmIChwcm9jZXNzWyJhcmd2Il0ubGVuZ3RoID4gMSkgewogICAgICAgICAgICAgIHRoaXNQcm9ncmFtID0gcHJvY2Vzc1siYXJndiJdWzFdLnJlcGxhY2UoL1xcL2csICIvIik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYXJndW1lbnRzXyA9IHByb2Nlc3NbImFyZ3YiXS5zbGljZSgyKTsKICAgICAgICAgICAgcHJvY2Vzc1sib24iXSgidW5jYXVnaHRFeGNlcHRpb24iLCBmdW5jdGlvbihleCkgewogICAgICAgICAgICAgIGlmICghKGV4IGluc3RhbmNlb2YgRXhpdFN0YXR1cykpIHsKICAgICAgICAgICAgICAgIHRocm93IGV4OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHByb2Nlc3NbIm9uIl0oInVuaGFuZGxlZFJlamVjdGlvbiIsIGFib3J0KTsKICAgICAgICAgICAgcXVpdF8gPSBmdW5jdGlvbihzdGF0dXMpIHsKICAgICAgICAgICAgICBwcm9jZXNzWyJleGl0Il0oc3RhdHVzKTsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgTW9kdWxlWyJpbnNwZWN0Il0gPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICByZXR1cm4gIltFbXNjcmlwdGVuIE1vZHVsZSBvYmplY3RdIjsKICAgICAgICAgICAgfTsKICAgICAgICAgIH0gZWxzZSBpZiAoRU5WSVJPTk1FTlRfSVNfU0hFTEwpIHsKICAgICAgICAgICAgaWYgKHR5cGVvZiByZWFkICE9ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICAgICAgcmVhZF8gPSBmdW5jdGlvbiBzaGVsbF9yZWFkKGYpIHsKICAgICAgICAgICAgICAgIHJldHVybiByZWFkKGYpOwogICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmVhZEJpbmFyeSA9IGZ1bmN0aW9uIHJlYWRCaW5hcnkyKGYpIHsKICAgICAgICAgICAgICB2YXIgZGF0YTsKICAgICAgICAgICAgICBpZiAodHlwZW9mIHJlYWRidWZmZXIgPT09ICJmdW5jdGlvbiIpIHsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShyZWFkYnVmZmVyKGYpKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZGF0YSA9IHJlYWQoZiwgImJpbmFyeSIpOwogICAgICAgICAgICAgIGFzc2VydCh0eXBlb2YgZGF0YSA9PT0gIm9iamVjdCIpOwogICAgICAgICAgICAgIHJldHVybiBkYXRhOwogICAgICAgICAgICB9OwogICAgICAgICAgICBpZiAodHlwZW9mIHNjcmlwdEFyZ3MgIT0gInVuZGVmaW5lZCIpIHsKICAgICAgICAgICAgICBhcmd1bWVudHNfID0gc2NyaXB0QXJnczsKICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYXJndW1lbnRzICE9ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICAgICAgYXJndW1lbnRzXyA9IGFyZ3VtZW50czsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodHlwZW9mIHF1aXQgPT09ICJmdW5jdGlvbiIpIHsKICAgICAgICAgICAgICBxdWl0XyA9IGZ1bmN0aW9uKHN0YXR1cykgewogICAgICAgICAgICAgICAgcXVpdChzdGF0dXMpOwogICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHR5cGVvZiBwcmludCAhPT0gInVuZGVmaW5lZCIpIHsKICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgPT09ICJ1bmRlZmluZWQiKQogICAgICAgICAgICAgICAgY29uc29sZSA9IHt9OwogICAgICAgICAgICAgIGNvbnNvbGUubG9nID0gcHJpbnQ7CiAgICAgICAgICAgICAgY29uc29sZS53YXJuID0gY29uc29sZS5lcnJvciA9IHR5cGVvZiBwcmludEVyciAhPT0gInVuZGVmaW5lZCIgPyBwcmludEVyciA6IHByaW50OwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgaWYgKEVOVklST05NRU5UX0lTX1dFQiB8fCBFTlZJUk9OTUVOVF9JU19XT1JLRVIpIHsKICAgICAgICAgICAgaWYgKEVOVklST05NRU5UX0lTX1dPUktFUikgewogICAgICAgICAgICAgIHNjcmlwdERpcmVjdG9yeSA9IHNlbGYubG9jYXRpb24uaHJlZjsKICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICJ1bmRlZmluZWQiICYmIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpIHsKICAgICAgICAgICAgICBzY3JpcHREaXJlY3RvcnkgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYzsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoX3NjcmlwdERpcikgewogICAgICAgICAgICAgIHNjcmlwdERpcmVjdG9yeSA9IF9zY3JpcHREaXI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHNjcmlwdERpcmVjdG9yeS5pbmRleE9mKCJibG9iOiIpICE9PSAwKSB7CiAgICAgICAgICAgICAgc2NyaXB0RGlyZWN0b3J5ID0gc2NyaXB0RGlyZWN0b3J5LnN1YnN0cigwLCBzY3JpcHREaXJlY3RvcnkubGFzdEluZGV4T2YoIi8iKSArIDEpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHNjcmlwdERpcmVjdG9yeSA9ICIiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHsKICAgICAgICAgICAgICByZWFkXyA9IGZ1bmN0aW9uKHVybCkgewogICAgICAgICAgICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpOwogICAgICAgICAgICAgICAgeGhyLm9wZW4oIkdFVCIsIHVybCwgZmFsc2UpOwogICAgICAgICAgICAgICAgeGhyLnNlbmQobnVsbCk7CiAgICAgICAgICAgICAgICByZXR1cm4geGhyLnJlc3BvbnNlVGV4dDsKICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIGlmIChFTlZJUk9OTUVOVF9JU19XT1JLRVIpIHsKICAgICAgICAgICAgICAgIHJlYWRCaW5hcnkgPSBmdW5jdGlvbih1cmwpIHsKICAgICAgICAgICAgICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpOwogICAgICAgICAgICAgICAgICB4aHIub3BlbigiR0VUIiwgdXJsLCBmYWxzZSk7CiAgICAgICAgICAgICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAiYXJyYXlidWZmZXIiOwogICAgICAgICAgICAgICAgICB4aHIuc2VuZChudWxsKTsKICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHhoci5yZXNwb25zZSk7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZWFkQXN5bmMgPSBmdW5jdGlvbih1cmwsIG9ubG9hZCwgb25lcnJvcikgewogICAgICAgICAgICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpOwogICAgICAgICAgICAgICAgeGhyLm9wZW4oIkdFVCIsIHVybCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gImFycmF5YnVmZmVyIjsKICAgICAgICAgICAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgPT0gMjAwIHx8IHhoci5zdGF0dXMgPT0gMCAmJiB4aHIucmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgICBvbmxvYWQoeGhyLnJlc3BvbnNlKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgb25lcnJvcigpOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHhoci5vbmVycm9yID0gb25lcnJvcjsKICAgICAgICAgICAgICAgIHhoci5zZW5kKG51bGwpOwogICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgc2V0V2luZG93VGl0bGUgPSBmdW5jdGlvbih0aXRsZSkgewogICAgICAgICAgICAgIGRvY3VtZW50LnRpdGxlID0gdGl0bGU7CiAgICAgICAgICAgIH07CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgfQogICAgICAgICAgdmFyIG91dCA9IE1vZHVsZVsicHJpbnQiXSB8fCBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpOwogICAgICAgICAgdmFyIGVyciA9IE1vZHVsZVsicHJpbnRFcnIiXSB8fCBjb25zb2xlLndhcm4uYmluZChjb25zb2xlKTsKICAgICAgICAgIGZvciAoa2V5IGluIG1vZHVsZU92ZXJyaWRlcykgewogICAgICAgICAgICBpZiAobW9kdWxlT3ZlcnJpZGVzLmhhc093blByb3BlcnR5KGtleSkpIHsKICAgICAgICAgICAgICBNb2R1bGVba2V5XSA9IG1vZHVsZU92ZXJyaWRlc1trZXldOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBtb2R1bGVPdmVycmlkZXMgPSBudWxsOwogICAgICAgICAgaWYgKE1vZHVsZVsiYXJndW1lbnRzIl0pCiAgICAgICAgICAgIGFyZ3VtZW50c18gPSBNb2R1bGVbImFyZ3VtZW50cyJdOwogICAgICAgICAgaWYgKE1vZHVsZVsidGhpc1Byb2dyYW0iXSkKICAgICAgICAgICAgdGhpc1Byb2dyYW0gPSBNb2R1bGVbInRoaXNQcm9ncmFtIl07CiAgICAgICAgICBpZiAoTW9kdWxlWyJxdWl0Il0pCiAgICAgICAgICAgIHF1aXRfID0gTW9kdWxlWyJxdWl0Il07CiAgICAgICAgICB2YXIgdGVtcFJldDAgPSAwOwogICAgICAgICAgdmFyIHNldFRlbXBSZXQwID0gZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICAgICAgdGVtcFJldDAgPSB2YWx1ZTsKICAgICAgICAgIH07CiAgICAgICAgICB2YXIgd2FzbUJpbmFyeTsKICAgICAgICAgIGlmIChNb2R1bGVbIndhc21CaW5hcnkiXSkKICAgICAgICAgICAgd2FzbUJpbmFyeSA9IE1vZHVsZVsid2FzbUJpbmFyeSJdOwogICAgICAgICAgdmFyIG5vRXhpdFJ1bnRpbWUgPSBNb2R1bGVbIm5vRXhpdFJ1bnRpbWUiXSB8fCB0cnVlOwogICAgICAgICAgaWYgKHR5cGVvZiBXZWJBc3NlbWJseSAhPT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgYWJvcnQoIm5vIG5hdGl2ZSB3YXNtIHN1cHBvcnQgZGV0ZWN0ZWQiKTsKICAgICAgICAgIH0KICAgICAgICAgIHZhciB3YXNtTWVtb3J5OwogICAgICAgICAgdmFyIEFCT1JUID0gZmFsc2U7CiAgICAgICAgICB2YXIgRVhJVFNUQVRVUzsKICAgICAgICAgIGZ1bmN0aW9uIGFzc2VydChjb25kaXRpb24sIHRleHQpIHsKICAgICAgICAgICAgaWYgKCFjb25kaXRpb24pIHsKICAgICAgICAgICAgICBhYm9ydCgiQXNzZXJ0aW9uIGZhaWxlZDogIiArIHRleHQpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgVVRGOERlY29kZXIgPSB0eXBlb2YgVGV4dERlY29kZXIgIT09ICJ1bmRlZmluZWQiID8gbmV3IFRleHREZWNvZGVyKCJ1dGY4IikgOiB2b2lkIDA7CiAgICAgICAgICBmdW5jdGlvbiBVVEY4QXJyYXlUb1N0cmluZyhoZWFwLCBpZHgsIG1heEJ5dGVzVG9SZWFkKSB7CiAgICAgICAgICAgIHZhciBlbmRJZHggPSBpZHggKyBtYXhCeXRlc1RvUmVhZDsKICAgICAgICAgICAgdmFyIGVuZFB0ciA9IGlkeDsKICAgICAgICAgICAgd2hpbGUgKGhlYXBbZW5kUHRyXSAmJiAhKGVuZFB0ciA+PSBlbmRJZHgpKQogICAgICAgICAgICAgICsrZW5kUHRyOwogICAgICAgICAgICBpZiAoZW5kUHRyIC0gaWR4ID4gMTYgJiYgaGVhcC5zdWJhcnJheSAmJiBVVEY4RGVjb2RlcikgewogICAgICAgICAgICAgIHJldHVybiBVVEY4RGVjb2Rlci5kZWNvZGUoaGVhcC5zdWJhcnJheShpZHgsIGVuZFB0cikpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHZhciBzdHIgPSAiIjsKICAgICAgICAgICAgICB3aGlsZSAoaWR4IDwgZW5kUHRyKSB7CiAgICAgICAgICAgICAgICB2YXIgdTAgPSBoZWFwW2lkeCsrXTsKICAgICAgICAgICAgICAgIGlmICghKHUwICYgMTI4KSkgewogICAgICAgICAgICAgICAgICBzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSh1MCk7CiAgICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIHUxMiA9IGhlYXBbaWR4KytdICYgNjM7CiAgICAgICAgICAgICAgICBpZiAoKHUwICYgMjI0KSA9PSAxOTIpIHsKICAgICAgICAgICAgICAgICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKHUwICYgMzEpIDw8IDYgfCB1MTIpOwogICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciB1MjIgPSBoZWFwW2lkeCsrXSAmIDYzOwogICAgICAgICAgICAgICAgaWYgKCh1MCAmIDI0MCkgPT0gMjI0KSB7CiAgICAgICAgICAgICAgICAgIHUwID0gKHUwICYgMTUpIDw8IDEyIHwgdTEyIDw8IDYgfCB1MjI7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICB1MCA9ICh1MCAmIDcpIDw8IDE4IHwgdTEyIDw8IDEyIHwgdTIyIDw8IDYgfCBoZWFwW2lkeCsrXSAmIDYzOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHUwIDwgNjU1MzYpIHsKICAgICAgICAgICAgICAgICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUodTApOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgdmFyIGNoID0gdTAgLSA2NTUzNjsKICAgICAgICAgICAgICAgICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoNTUyOTYgfCBjaCA+PiAxMCwgNTYzMjAgfCBjaCAmIDEwMjMpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gc3RyOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gVVRGOFRvU3RyaW5nKHB0ciwgbWF4Qnl0ZXNUb1JlYWQpIHsKICAgICAgICAgICAgcmV0dXJuIHB0ciA/IFVURjhBcnJheVRvU3RyaW5nKEhFQVBVOCwgcHRyLCBtYXhCeXRlc1RvUmVhZCkgOiAiIjsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIHN0cmluZ1RvVVRGOEFycmF5KHN0ciwgaGVhcCwgb3V0SWR4LCBtYXhCeXRlc1RvV3JpdGUpIHsKICAgICAgICAgICAgaWYgKCEobWF4Qnl0ZXNUb1dyaXRlID4gMCkpCiAgICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgICAgIHZhciBzdGFydElkeCA9IG91dElkeDsKICAgICAgICAgICAgdmFyIGVuZElkeCA9IG91dElkeCArIG1heEJ5dGVzVG9Xcml0ZSAtIDE7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgICAgdmFyIHUzID0gc3RyLmNoYXJDb2RlQXQoaSk7CiAgICAgICAgICAgICAgaWYgKHUzID49IDU1Mjk2ICYmIHUzIDw9IDU3MzQzKSB7CiAgICAgICAgICAgICAgICB2YXIgdTEyID0gc3RyLmNoYXJDb2RlQXQoKytpKTsKICAgICAgICAgICAgICAgIHUzID0gNjU1MzYgKyAoKHUzICYgMTAyMykgPDwgMTApIHwgdTEyICYgMTAyMzsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKHUzIDw9IDEyNykgewogICAgICAgICAgICAgICAgaWYgKG91dElkeCA+PSBlbmRJZHgpCiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgaGVhcFtvdXRJZHgrK10gPSB1MzsKICAgICAgICAgICAgICB9IGVsc2UgaWYgKHUzIDw9IDIwNDcpIHsKICAgICAgICAgICAgICAgIGlmIChvdXRJZHggKyAxID49IGVuZElkeCkKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBoZWFwW291dElkeCsrXSA9IDE5MiB8IHUzID4+IDY7CiAgICAgICAgICAgICAgICBoZWFwW291dElkeCsrXSA9IDEyOCB8IHUzICYgNjM7CiAgICAgICAgICAgICAgfSBlbHNlIGlmICh1MyA8PSA2NTUzNSkgewogICAgICAgICAgICAgICAgaWYgKG91dElkeCArIDIgPj0gZW5kSWR4KQogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGhlYXBbb3V0SWR4KytdID0gMjI0IHwgdTMgPj4gMTI7CiAgICAgICAgICAgICAgICBoZWFwW291dElkeCsrXSA9IDEyOCB8IHUzID4+IDYgJiA2MzsKICAgICAgICAgICAgICAgIGhlYXBbb3V0SWR4KytdID0gMTI4IHwgdTMgJiA2MzsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaWYgKG91dElkeCArIDMgPj0gZW5kSWR4KQogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGhlYXBbb3V0SWR4KytdID0gMjQwIHwgdTMgPj4gMTg7CiAgICAgICAgICAgICAgICBoZWFwW291dElkeCsrXSA9IDEyOCB8IHUzID4+IDEyICYgNjM7CiAgICAgICAgICAgICAgICBoZWFwW291dElkeCsrXSA9IDEyOCB8IHUzID4+IDYgJiA2MzsKICAgICAgICAgICAgICAgIGhlYXBbb3V0SWR4KytdID0gMTI4IHwgdTMgJiA2MzsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaGVhcFtvdXRJZHhdID0gMDsKICAgICAgICAgICAgcmV0dXJuIG91dElkeCAtIHN0YXJ0SWR4OwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gc3RyaW5nVG9VVEY4KHN0ciwgb3V0UHRyLCBtYXhCeXRlc1RvV3JpdGUpIHsKICAgICAgICAgICAgcmV0dXJuIHN0cmluZ1RvVVRGOEFycmF5KHN0ciwgSEVBUFU4LCBvdXRQdHIsIG1heEJ5dGVzVG9Xcml0ZSk7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBsZW5ndGhCeXRlc1VURjgoc3RyKSB7CiAgICAgICAgICAgIHZhciBsZW4gPSAwOwogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkgewogICAgICAgICAgICAgIHZhciB1MyA9IHN0ci5jaGFyQ29kZUF0KGkpOwogICAgICAgICAgICAgIGlmICh1MyA+PSA1NTI5NiAmJiB1MyA8PSA1NzM0MykKICAgICAgICAgICAgICAgIHUzID0gNjU1MzYgKyAoKHUzICYgMTAyMykgPDwgMTApIHwgc3RyLmNoYXJDb2RlQXQoKytpKSAmIDEwMjM7CiAgICAgICAgICAgICAgaWYgKHUzIDw9IDEyNykKICAgICAgICAgICAgICAgICsrbGVuOwogICAgICAgICAgICAgIGVsc2UgaWYgKHUzIDw9IDIwNDcpCiAgICAgICAgICAgICAgICBsZW4gKz0gMjsKICAgICAgICAgICAgICBlbHNlIGlmICh1MyA8PSA2NTUzNSkKICAgICAgICAgICAgICAgIGxlbiArPSAzOwogICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIGxlbiArPSA0OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBsZW47CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgVVRGMTZEZWNvZGVyID0gdHlwZW9mIFRleHREZWNvZGVyICE9PSAidW5kZWZpbmVkIiA/IG5ldyBUZXh0RGVjb2RlcigidXRmLTE2bGUiKSA6IHZvaWQgMDsKICAgICAgICAgIGZ1bmN0aW9uIFVURjE2VG9TdHJpbmcocHRyLCBtYXhCeXRlc1RvUmVhZCkgewogICAgICAgICAgICB2YXIgZW5kUHRyID0gcHRyOwogICAgICAgICAgICB2YXIgaWR4ID0gZW5kUHRyID4+IDE7CiAgICAgICAgICAgIHZhciBtYXhJZHggPSBpZHggKyBtYXhCeXRlc1RvUmVhZCAvIDI7CiAgICAgICAgICAgIHdoaWxlICghKGlkeCA+PSBtYXhJZHgpICYmIEhFQVBVMTZbaWR4XSkKICAgICAgICAgICAgICArK2lkeDsKICAgICAgICAgICAgZW5kUHRyID0gaWR4IDw8IDE7CiAgICAgICAgICAgIGlmIChlbmRQdHIgLSBwdHIgPiAzMiAmJiBVVEYxNkRlY29kZXIpIHsKICAgICAgICAgICAgICByZXR1cm4gVVRGMTZEZWNvZGVyLmRlY29kZShIRUFQVTguc3ViYXJyYXkocHRyLCBlbmRQdHIpKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICB2YXIgc3RyID0gIiI7CiAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7ICEoaSA+PSBtYXhCeXRlc1RvUmVhZCAvIDIpOyArK2kpIHsKICAgICAgICAgICAgICAgIHZhciBjb2RlVW5pdCA9IEhFQVAxNltwdHIgKyBpICogMiA+PiAxXTsKICAgICAgICAgICAgICAgIGlmIChjb2RlVW5pdCA9PSAwKQogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIHN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGVVbml0KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuIHN0cjsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gc3RyaW5nVG9VVEYxNihzdHIsIG91dFB0ciwgbWF4Qnl0ZXNUb1dyaXRlKSB7CiAgICAgICAgICAgIGlmIChtYXhCeXRlc1RvV3JpdGUgPT09IHZvaWQgMCkgewogICAgICAgICAgICAgIG1heEJ5dGVzVG9Xcml0ZSA9IDIxNDc0ODM2NDc7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKG1heEJ5dGVzVG9Xcml0ZSA8IDIpCiAgICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgICAgIG1heEJ5dGVzVG9Xcml0ZSAtPSAyOwogICAgICAgICAgICB2YXIgc3RhcnRQdHIgPSBvdXRQdHI7CiAgICAgICAgICAgIHZhciBudW1DaGFyc1RvV3JpdGUgPSBtYXhCeXRlc1RvV3JpdGUgPCBzdHIubGVuZ3RoICogMiA/IG1heEJ5dGVzVG9Xcml0ZSAvIDIgOiBzdHIubGVuZ3RoOwogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bUNoYXJzVG9Xcml0ZTsgKytpKSB7CiAgICAgICAgICAgICAgdmFyIGNvZGVVbml0ID0gc3RyLmNoYXJDb2RlQXQoaSk7CiAgICAgICAgICAgICAgSEVBUDE2W291dFB0ciA+PiAxXSA9IGNvZGVVbml0OwogICAgICAgICAgICAgIG91dFB0ciArPSAyOwogICAgICAgICAgICB9CiAgICAgICAgICAgIEhFQVAxNltvdXRQdHIgPj4gMV0gPSAwOwogICAgICAgICAgICByZXR1cm4gb3V0UHRyIC0gc3RhcnRQdHI7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBsZW5ndGhCeXRlc1VURjE2KHN0cikgewogICAgICAgICAgICByZXR1cm4gc3RyLmxlbmd0aCAqIDI7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBVVEYzMlRvU3RyaW5nKHB0ciwgbWF4Qnl0ZXNUb1JlYWQpIHsKICAgICAgICAgICAgdmFyIGkgPSAwOwogICAgICAgICAgICB2YXIgc3RyID0gIiI7CiAgICAgICAgICAgIHdoaWxlICghKGkgPj0gbWF4Qnl0ZXNUb1JlYWQgLyA0KSkgewogICAgICAgICAgICAgIHZhciB1dGYzMiA9IEhFQVAzMltwdHIgKyBpICogNCA+PiAyXTsKICAgICAgICAgICAgICBpZiAodXRmMzIgPT0gMCkKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICsraTsKICAgICAgICAgICAgICBpZiAodXRmMzIgPj0gNjU1MzYpIHsKICAgICAgICAgICAgICAgIHZhciBjaCA9IHV0ZjMyIC0gNjU1MzY7CiAgICAgICAgICAgICAgICBzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSg1NTI5NiB8IGNoID4+IDEwLCA1NjMyMCB8IGNoICYgMTAyMyk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHV0ZjMyKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHN0cjsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIHN0cmluZ1RvVVRGMzIoc3RyLCBvdXRQdHIsIG1heEJ5dGVzVG9Xcml0ZSkgewogICAgICAgICAgICBpZiAobWF4Qnl0ZXNUb1dyaXRlID09PSB2b2lkIDApIHsKICAgICAgICAgICAgICBtYXhCeXRlc1RvV3JpdGUgPSAyMTQ3NDgzNjQ3OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChtYXhCeXRlc1RvV3JpdGUgPCA0KQogICAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgICAgICB2YXIgc3RhcnRQdHIgPSBvdXRQdHI7CiAgICAgICAgICAgIHZhciBlbmRQdHIgPSBzdGFydFB0ciArIG1heEJ5dGVzVG9Xcml0ZSAtIDQ7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgICAgdmFyIGNvZGVVbml0ID0gc3RyLmNoYXJDb2RlQXQoaSk7CiAgICAgICAgICAgICAgaWYgKGNvZGVVbml0ID49IDU1Mjk2ICYmIGNvZGVVbml0IDw9IDU3MzQzKSB7CiAgICAgICAgICAgICAgICB2YXIgdHJhaWxTdXJyb2dhdGUgPSBzdHIuY2hhckNvZGVBdCgrK2kpOwogICAgICAgICAgICAgICAgY29kZVVuaXQgPSA2NTUzNiArICgoY29kZVVuaXQgJiAxMDIzKSA8PCAxMCkgfCB0cmFpbFN1cnJvZ2F0ZSAmIDEwMjM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIEhFQVAzMltvdXRQdHIgPj4gMl0gPSBjb2RlVW5pdDsKICAgICAgICAgICAgICBvdXRQdHIgKz0gNDsKICAgICAgICAgICAgICBpZiAob3V0UHRyICsgNCA+IGVuZFB0cikKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIEhFQVAzMltvdXRQdHIgPj4gMl0gPSAwOwogICAgICAgICAgICByZXR1cm4gb3V0UHRyIC0gc3RhcnRQdHI7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBsZW5ndGhCeXRlc1VURjMyKHN0cikgewogICAgICAgICAgICB2YXIgbGVuID0gMDsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgICB2YXIgY29kZVVuaXQgPSBzdHIuY2hhckNvZGVBdChpKTsKICAgICAgICAgICAgICBpZiAoY29kZVVuaXQgPj0gNTUyOTYgJiYgY29kZVVuaXQgPD0gNTczNDMpCiAgICAgICAgICAgICAgICArK2k7CiAgICAgICAgICAgICAgbGVuICs9IDQ7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGxlbjsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIGFsaWduVXAoeCwgbXVsdGlwbGUpIHsKICAgICAgICAgICAgaWYgKHggJSBtdWx0aXBsZSA+IDApIHsKICAgICAgICAgICAgICB4ICs9IG11bHRpcGxlIC0geCAlIG11bHRpcGxlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB4OwogICAgICAgICAgfQogICAgICAgICAgdmFyIGJ1ZmZlciwgSEVBUDgsIEhFQVBVOCwgSEVBUDE2LCBIRUFQVTE2LCBIRUFQMzIsIEhFQVBVMzIsIEhFQVBGMzIsIEhFQVBGNjQ7CiAgICAgICAgICBmdW5jdGlvbiB1cGRhdGVHbG9iYWxCdWZmZXJBbmRWaWV3cyhidWYpIHsKICAgICAgICAgICAgYnVmZmVyID0gYnVmOwogICAgICAgICAgICBNb2R1bGVbIkhFQVA4Il0gPSBIRUFQOCA9IG5ldyBJbnQ4QXJyYXkoYnVmKTsKICAgICAgICAgICAgTW9kdWxlWyJIRUFQMTYiXSA9IEhFQVAxNiA9IG5ldyBJbnQxNkFycmF5KGJ1Zik7CiAgICAgICAgICAgIE1vZHVsZVsiSEVBUDMyIl0gPSBIRUFQMzIgPSBuZXcgSW50MzJBcnJheShidWYpOwogICAgICAgICAgICBNb2R1bGVbIkhFQVBVOCJdID0gSEVBUFU4ID0gbmV3IFVpbnQ4QXJyYXkoYnVmKTsKICAgICAgICAgICAgTW9kdWxlWyJIRUFQVTE2Il0gPSBIRUFQVTE2ID0gbmV3IFVpbnQxNkFycmF5KGJ1Zik7CiAgICAgICAgICAgIE1vZHVsZVsiSEVBUFUzMiJdID0gSEVBUFUzMiA9IG5ldyBVaW50MzJBcnJheShidWYpOwogICAgICAgICAgICBNb2R1bGVbIkhFQVBGMzIiXSA9IEhFQVBGMzIgPSBuZXcgRmxvYXQzMkFycmF5KGJ1Zik7CiAgICAgICAgICAgIE1vZHVsZVsiSEVBUEY2NCJdID0gSEVBUEY2NCA9IG5ldyBGbG9hdDY0QXJyYXkoYnVmKTsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBJTklUSUFMX01FTU9SWSA9IE1vZHVsZVsiSU5JVElBTF9NRU1PUlkiXSB8fCAxNjc3NzIxNjsKICAgICAgICAgIHZhciB3YXNtVGFibGU7CiAgICAgICAgICB2YXIgX19BVFBSRVJVTl9fID0gW107CiAgICAgICAgICB2YXIgX19BVElOSVRfXyA9IFtdOwogICAgICAgICAgdmFyIF9fQVRNQUlOX18gPSBbXTsKICAgICAgICAgIHZhciBfX0FUUE9TVFJVTl9fID0gW107CiAgICAgICAgICB2YXIgcnVudGltZUluaXRpYWxpemVkID0gZmFsc2U7CiAgICAgICAgICBmdW5jdGlvbiBwcmVSdW4oKSB7CiAgICAgICAgICAgIGlmIChNb2R1bGVbInByZVJ1biJdKSB7CiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBNb2R1bGVbInByZVJ1biJdID09ICJmdW5jdGlvbiIpCiAgICAgICAgICAgICAgICBNb2R1bGVbInByZVJ1biJdID0gW01vZHVsZVsicHJlUnVuIl1dOwogICAgICAgICAgICAgIHdoaWxlIChNb2R1bGVbInByZVJ1biJdLmxlbmd0aCkgewogICAgICAgICAgICAgICAgYWRkT25QcmVSdW4oTW9kdWxlWyJwcmVSdW4iXS5zaGlmdCgpKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2FsbFJ1bnRpbWVDYWxsYmFja3MoX19BVFBSRVJVTl9fKTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIGluaXRSdW50aW1lKCkgewogICAgICAgICAgICBydW50aW1lSW5pdGlhbGl6ZWQgPSB0cnVlOwogICAgICAgICAgICBjYWxsUnVudGltZUNhbGxiYWNrcyhfX0FUSU5JVF9fKTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIHByZU1haW4oKSB7CiAgICAgICAgICAgIGNhbGxSdW50aW1lQ2FsbGJhY2tzKF9fQVRNQUlOX18pOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gcG9zdFJ1bigpIHsKICAgICAgICAgICAgaWYgKE1vZHVsZVsicG9zdFJ1biJdKSB7CiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBNb2R1bGVbInBvc3RSdW4iXSA9PSAiZnVuY3Rpb24iKQogICAgICAgICAgICAgICAgTW9kdWxlWyJwb3N0UnVuIl0gPSBbTW9kdWxlWyJwb3N0UnVuIl1dOwogICAgICAgICAgICAgIHdoaWxlIChNb2R1bGVbInBvc3RSdW4iXS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgIGFkZE9uUG9zdFJ1bihNb2R1bGVbInBvc3RSdW4iXS5zaGlmdCgpKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2FsbFJ1bnRpbWVDYWxsYmFja3MoX19BVFBPU1RSVU5fXyk7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBhZGRPblByZVJ1bihjYikgewogICAgICAgICAgICBfX0FUUFJFUlVOX18udW5zaGlmdChjYik7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBhZGRPbkluaXQoY2IpIHsKICAgICAgICAgICAgX19BVElOSVRfXy51bnNoaWZ0KGNiKTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIGFkZE9uUG9zdFJ1bihjYikgewogICAgICAgICAgICBfX0FUUE9TVFJVTl9fLnVuc2hpZnQoY2IpOwogICAgICAgICAgfQogICAgICAgICAgdmFyIHJ1bkRlcGVuZGVuY2llcyA9IDA7CiAgICAgICAgICB2YXIgcnVuRGVwZW5kZW5jeVdhdGNoZXIgPSBudWxsOwogICAgICAgICAgdmFyIGRlcGVuZGVuY2llc0Z1bGZpbGxlZCA9IG51bGw7CiAgICAgICAgICBmdW5jdGlvbiBhZGRSdW5EZXBlbmRlbmN5KGlkKSB7CiAgICAgICAgICAgIHJ1bkRlcGVuZGVuY2llcysrOwogICAgICAgICAgICBpZiAoTW9kdWxlWyJtb25pdG9yUnVuRGVwZW5kZW5jaWVzIl0pIHsKICAgICAgICAgICAgICBNb2R1bGVbIm1vbml0b3JSdW5EZXBlbmRlbmNpZXMiXShydW5EZXBlbmRlbmNpZXMpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiByZW1vdmVSdW5EZXBlbmRlbmN5KGlkKSB7CiAgICAgICAgICAgIHJ1bkRlcGVuZGVuY2llcy0tOwogICAgICAgICAgICBpZiAoTW9kdWxlWyJtb25pdG9yUnVuRGVwZW5kZW5jaWVzIl0pIHsKICAgICAgICAgICAgICBNb2R1bGVbIm1vbml0b3JSdW5EZXBlbmRlbmNpZXMiXShydW5EZXBlbmRlbmNpZXMpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChydW5EZXBlbmRlbmNpZXMgPT0gMCkgewogICAgICAgICAgICAgIGlmIChydW5EZXBlbmRlbmN5V2F0Y2hlciAhPT0gbnVsbCkgewogICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChydW5EZXBlbmRlbmN5V2F0Y2hlcik7CiAgICAgICAgICAgICAgICBydW5EZXBlbmRlbmN5V2F0Y2hlciA9IG51bGw7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmIChkZXBlbmRlbmNpZXNGdWxmaWxsZWQpIHsKICAgICAgICAgICAgICAgIHZhciBjYWxsYmFjayA9IGRlcGVuZGVuY2llc0Z1bGZpbGxlZDsKICAgICAgICAgICAgICAgIGRlcGVuZGVuY2llc0Z1bGZpbGxlZCA9IG51bGw7CiAgICAgICAgICAgICAgICBjYWxsYmFjaygpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgTW9kdWxlWyJwcmVsb2FkZWRJbWFnZXMiXSA9IHt9OwogICAgICAgICAgTW9kdWxlWyJwcmVsb2FkZWRBdWRpb3MiXSA9IHt9OwogICAgICAgICAgZnVuY3Rpb24gYWJvcnQod2hhdCkgewogICAgICAgICAgICBpZiAoTW9kdWxlWyJvbkFib3J0Il0pIHsKICAgICAgICAgICAgICBNb2R1bGVbIm9uQWJvcnQiXSh3aGF0KTsKICAgICAgICAgICAgfQogICAgICAgICAgICB3aGF0ICs9ICIiOwogICAgICAgICAgICBlcnIod2hhdCk7CiAgICAgICAgICAgIEFCT1JUID0gdHJ1ZTsKICAgICAgICAgICAgRVhJVFNUQVRVUyA9IDE7CiAgICAgICAgICAgIHdoYXQgPSAiYWJvcnQoIiArIHdoYXQgKyAiKS4gQnVpbGQgd2l0aCAtcyBBU1NFUlRJT05TPTEgZm9yIG1vcmUgaW5mby4iOwogICAgICAgICAgICB2YXIgZSA9IG5ldyBXZWJBc3NlbWJseS5SdW50aW1lRXJyb3Iod2hhdCk7CiAgICAgICAgICAgIHJlYWR5UHJvbWlzZVJlamVjdChlKTsKICAgICAgICAgICAgdGhyb3cgZTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIGhhc1ByZWZpeChzdHIsIHByZWZpeCkgewogICAgICAgICAgICByZXR1cm4gU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoID8gc3RyLnN0YXJ0c1dpdGgocHJlZml4KSA6IHN0ci5pbmRleE9mKHByZWZpeCkgPT09IDA7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgZGF0YVVSSVByZWZpeCA9ICJkYXRhOmFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbTtiYXNlNjQsIjsKICAgICAgICAgIGZ1bmN0aW9uIGlzRGF0YVVSSShmaWxlbmFtZSkgewogICAgICAgICAgICByZXR1cm4gaGFzUHJlZml4KGZpbGVuYW1lLCBkYXRhVVJJUHJlZml4KTsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBmaWxlVVJJUHJlZml4ID0gImZpbGU6Ly8iOwogICAgICAgICAgZnVuY3Rpb24gaXNGaWxlVVJJKGZpbGVuYW1lKSB7CiAgICAgICAgICAgIHJldHVybiBoYXNQcmVmaXgoZmlsZW5hbWUsIGZpbGVVUklQcmVmaXgpOwogICAgICAgICAgfQogICAgICAgICAgdmFyIHdhc21CaW5hcnlGaWxlID0gImJhc2lzX3RyYW5zY29kZXIud2FzbSI7CiAgICAgICAgICBpZiAoIWlzRGF0YVVSSSh3YXNtQmluYXJ5RmlsZSkpIHsKICAgICAgICAgICAgd2FzbUJpbmFyeUZpbGUgPSBsb2NhdGVGaWxlKHdhc21CaW5hcnlGaWxlKTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIGdldEJpbmFyeShmaWxlKSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgaWYgKGZpbGUgPT0gd2FzbUJpbmFyeUZpbGUgJiYgd2FzbUJpbmFyeSkgewogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHdhc21CaW5hcnkpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAocmVhZEJpbmFyeSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHJlYWRCaW5hcnkoZmlsZSk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRocm93ICJib3RoIGFzeW5jIGFuZCBzeW5jIGZldGNoaW5nIG9mIHRoZSB3YXNtIGZhaWxlZCI7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGNhdGNoIChlcnIyKSB7CiAgICAgICAgICAgICAgYWJvcnQoZXJyMik7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIGdldEJpbmFyeVByb21pc2UoKSB7CiAgICAgICAgICAgIGlmICghd2FzbUJpbmFyeSAmJiAoRU5WSVJPTk1FTlRfSVNfV0VCIHx8IEVOVklST05NRU5UX0lTX1dPUktFUikpIHsKICAgICAgICAgICAgICBpZiAodHlwZW9mIGZldGNoID09PSAiZnVuY3Rpb24iICYmICFpc0ZpbGVVUkkod2FzbUJpbmFyeUZpbGUpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmV0Y2god2FzbUJpbmFyeUZpbGUsIHsgY3JlZGVudGlhbHM6ICJzYW1lLW9yaWdpbiIgfSkudGhlbihmdW5jdGlvbihyZXNwb25zZSkgewogICAgICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlWyJvayJdKSB7CiAgICAgICAgICAgICAgICAgICAgdGhyb3cgImZhaWxlZCB0byBsb2FkIHdhc20gYmluYXJ5IGZpbGUgYXQgJyIgKyB3YXNtQmluYXJ5RmlsZSArICInIjsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2VbImFycmF5QnVmZmVyIl0oKTsKICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0QmluYXJ5KHdhc21CaW5hcnlGaWxlKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpZiAocmVhZEFzeW5jKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICAgICAgICAgICAgICByZWFkQXN5bmMod2FzbUJpbmFyeUZpbGUsIGZ1bmN0aW9uKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG5ldyBVaW50OEFycmF5KHJlc3BvbnNlKSk7CiAgICAgICAgICAgICAgICAgICAgfSwgcmVqZWN0KTsKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgIHJldHVybiBnZXRCaW5hcnkod2FzbUJpbmFyeUZpbGUpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVdhc20oKSB7CiAgICAgICAgICAgIHZhciBpbmZvID0geyAiYSI6IGFzbUxpYnJhcnlBcmcgfTsKICAgICAgICAgICAgZnVuY3Rpb24gcmVjZWl2ZUluc3RhbmNlKGluc3RhbmNlLCBtb2R1bGUyKSB7CiAgICAgICAgICAgICAgdmFyIGV4cG9ydHM0ID0gaW5zdGFuY2UuZXhwb3J0czsKICAgICAgICAgICAgICBNb2R1bGVbImFzbSJdID0gZXhwb3J0czQ7CiAgICAgICAgICAgICAgd2FzbU1lbW9yeSA9IE1vZHVsZVsiYXNtIl1bIksiXTsKICAgICAgICAgICAgICB1cGRhdGVHbG9iYWxCdWZmZXJBbmRWaWV3cyh3YXNtTWVtb3J5LmJ1ZmZlcik7CiAgICAgICAgICAgICAgd2FzbVRhYmxlID0gTW9kdWxlWyJhc20iXVsiTyJdOwogICAgICAgICAgICAgIGFkZE9uSW5pdChNb2R1bGVbImFzbSJdWyJMIl0pOwogICAgICAgICAgICAgIHJlbW92ZVJ1bkRlcGVuZGVuY3koIndhc20taW5zdGFudGlhdGUiKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBhZGRSdW5EZXBlbmRlbmN5KCJ3YXNtLWluc3RhbnRpYXRlIik7CiAgICAgICAgICAgIGZ1bmN0aW9uIHJlY2VpdmVJbnN0YW50aWF0ZWRTb3VyY2Uob3V0cHV0KSB7CiAgICAgICAgICAgICAgcmVjZWl2ZUluc3RhbmNlKG91dHB1dFsiaW5zdGFuY2UiXSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gaW5zdGFudGlhdGVBcnJheUJ1ZmZlcihyZWNlaXZlcikgewogICAgICAgICAgICAgIHJldHVybiBnZXRCaW5hcnlQcm9taXNlKCkudGhlbihmdW5jdGlvbihiaW5hcnkpIHsKICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZShiaW5hcnksIGluZm8pOwogICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICAgICAgICB9KS50aGVuKHJlY2VpdmVyLCBmdW5jdGlvbihyZWFzb24pIHsKICAgICAgICAgICAgICAgIGVycigiZmFpbGVkIHRvIGFzeW5jaHJvbm91c2x5IHByZXBhcmUgd2FzbTogIiArIHJlYXNvbik7CiAgICAgICAgICAgICAgICBhYm9ydChyZWFzb24pOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIGluc3RhbnRpYXRlQXN5bmMoKSB7CiAgICAgICAgICAgICAgaWYgKCF3YXNtQmluYXJ5ICYmIHR5cGVvZiBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZVN0cmVhbWluZyA9PT0gImZ1bmN0aW9uIiAmJiAhaXNEYXRhVVJJKHdhc21CaW5hcnlGaWxlKSAmJiAhaXNGaWxlVVJJKHdhc21CaW5hcnlGaWxlKSAmJiB0eXBlb2YgZmV0Y2ggPT09ICJmdW5jdGlvbiIpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmZXRjaCh3YXNtQmluYXJ5RmlsZSwgeyBjcmVkZW50aWFsczogInNhbWUtb3JpZ2luIiB9KS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZVN0cmVhbWluZyhyZXNwb25zZSwgaW5mbyk7CiAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQudGhlbihyZWNlaXZlSW5zdGFudGlhdGVkU291cmNlLCBmdW5jdGlvbihyZWFzb24pIHsKICAgICAgICAgICAgICAgICAgICBlcnIoIndhc20gc3RyZWFtaW5nIGNvbXBpbGUgZmFpbGVkOiAiICsgcmVhc29uKTsKICAgICAgICAgICAgICAgICAgICBlcnIoImZhbGxpbmcgYmFjayB0byBBcnJheUJ1ZmZlciBpbnN0YW50aWF0aW9uIik7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluc3RhbnRpYXRlQXJyYXlCdWZmZXIocmVjZWl2ZUluc3RhbnRpYXRlZFNvdXJjZSk7CiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiBpbnN0YW50aWF0ZUFycmF5QnVmZmVyKHJlY2VpdmVJbnN0YW50aWF0ZWRTb3VyY2UpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoTW9kdWxlWyJpbnN0YW50aWF0ZVdhc20iXSkgewogICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICB2YXIgZXhwb3J0czMgPSBNb2R1bGVbImluc3RhbnRpYXRlV2FzbSJdKGluZm8sIHJlY2VpdmVJbnN0YW5jZSk7CiAgICAgICAgICAgICAgICByZXR1cm4gZXhwb3J0czM7CiAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgZXJyKCJNb2R1bGUuaW5zdGFudGlhdGVXYXNtIGNhbGxiYWNrIGZhaWxlZCB3aXRoIGVycm9yOiAiICsgZSk7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGluc3RhbnRpYXRlQXN5bmMoKS5jYXRjaChyZWFkeVByb21pc2VSZWplY3QpOwogICAgICAgICAgICByZXR1cm4ge307CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBjYWxsUnVudGltZUNhbGxiYWNrcyhjYWxsYmFja3MpIHsKICAgICAgICAgICAgd2hpbGUgKGNhbGxiYWNrcy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gY2FsbGJhY2tzLnNoaWZ0KCk7CiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgICAgICAgICBjYWxsYmFjayhNb2R1bGUpOwogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHZhciBmdW5jID0gY2FsbGJhY2suZnVuYzsKICAgICAgICAgICAgICBpZiAodHlwZW9mIGZ1bmMgPT09ICJudW1iZXIiKSB7CiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2suYXJnID09PSB2b2lkIDApIHsKICAgICAgICAgICAgICAgICAgd2FzbVRhYmxlLmdldChmdW5jKSgpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgd2FzbVRhYmxlLmdldChmdW5jKShjYWxsYmFjay5hcmcpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBmdW5jKGNhbGxiYWNrLmFyZyA9PT0gdm9pZCAwID8gbnVsbCA6IGNhbGxiYWNrLmFyZyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgc3RydWN0UmVnaXN0cmF0aW9ucyA9IHt9OwogICAgICAgICAgZnVuY3Rpb24gcnVuRGVzdHJ1Y3RvcnMoZGVzdHJ1Y3RvcnMpIHsKICAgICAgICAgICAgd2hpbGUgKGRlc3RydWN0b3JzLmxlbmd0aCkgewogICAgICAgICAgICAgIHZhciBwdHIgPSBkZXN0cnVjdG9ycy5wb3AoKTsKICAgICAgICAgICAgICB2YXIgZGVsID0gZGVzdHJ1Y3RvcnMucG9wKCk7CiAgICAgICAgICAgICAgZGVsKHB0cik7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIHNpbXBsZVJlYWRWYWx1ZUZyb21Qb2ludGVyKHBvaW50ZXIpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXNbImZyb21XaXJlVHlwZSJdKEhFQVBVMzJbcG9pbnRlciA+PiAyXSk7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgYXdhaXRpbmdEZXBlbmRlbmNpZXMgPSB7fTsKICAgICAgICAgIHZhciByZWdpc3RlcmVkVHlwZXMgPSB7fTsKICAgICAgICAgIHZhciB0eXBlRGVwZW5kZW5jaWVzID0ge307CiAgICAgICAgICB2YXIgY2hhcl8wID0gNDg7CiAgICAgICAgICB2YXIgY2hhcl85ID0gNTc7CiAgICAgICAgICBmdW5jdGlvbiBtYWtlTGVnYWxGdW5jdGlvbk5hbWUobmFtZSkgewogICAgICAgICAgICBpZiAodm9pZCAwID09PSBuYW1lKSB7CiAgICAgICAgICAgICAgcmV0dXJuICJfdW5rbm93biI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvW15hLXpBLVowLTlfXS9nLCAiJCIpOwogICAgICAgICAgICB2YXIgZiA9IG5hbWUuY2hhckNvZGVBdCgwKTsKICAgICAgICAgICAgaWYgKGYgPj0gY2hhcl8wICYmIGYgPD0gY2hhcl85KSB7CiAgICAgICAgICAgICAgcmV0dXJuICJfIiArIG5hbWU7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgcmV0dXJuIG5hbWU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZU5hbWVkRnVuY3Rpb24obmFtZSwgYm9keSkgewogICAgICAgICAgICBuYW1lID0gbWFrZUxlZ2FsRnVuY3Rpb25OYW1lKG5hbWUpOwogICAgICAgICAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKCJib2R5IiwgInJldHVybiBmdW5jdGlvbiAiICsgbmFtZSArICcoKSB7XG4gICAgInVzZSBzdHJpY3QiOyAgICByZXR1cm4gYm9keS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbicpKGJvZHkpOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gZXh0ZW5kRXJyb3IoYmFzZUVycm9yVHlwZSwgZXJyb3JOYW1lKSB7CiAgICAgICAgICAgIHZhciBlcnJvckNsYXNzID0gY3JlYXRlTmFtZWRGdW5jdGlvbihlcnJvck5hbWUsIGZ1bmN0aW9uKG1lc3NhZ2UpIHsKICAgICAgICAgICAgICB0aGlzLm5hbWUgPSBlcnJvck5hbWU7CiAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTsKICAgICAgICAgICAgICB2YXIgc3RhY2sgPSBuZXcgRXJyb3IobWVzc2FnZSkuc3RhY2s7CiAgICAgICAgICAgICAgaWYgKHN0YWNrICE9PSB2b2lkIDApIHsKICAgICAgICAgICAgICAgIHRoaXMuc3RhY2sgPSB0aGlzLnRvU3RyaW5nKCkgKyAiXG4iICsgc3RhY2sucmVwbGFjZSgvXkVycm9yKDpbXlxuXSopP1xuLywgIiIpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGVycm9yQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShiYXNlRXJyb3JUeXBlLnByb3RvdHlwZSk7CiAgICAgICAgICAgIGVycm9yQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gZXJyb3JDbGFzczsKICAgICAgICAgICAgZXJyb3JDbGFzcy5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICBpZiAodGhpcy5tZXNzYWdlID09PSB2b2lkIDApIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm5hbWU7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm5hbWUgKyAiOiAiICsgdGhpcy5tZXNzYWdlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKICAgICAgICAgICAgcmV0dXJuIGVycm9yQ2xhc3M7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgSW50ZXJuYWxFcnJvciA9IHZvaWQgMDsKICAgICAgICAgIGZ1bmN0aW9uIHRocm93SW50ZXJuYWxFcnJvcihtZXNzYWdlKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBJbnRlcm5hbEVycm9yKG1lc3NhZ2UpOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gd2hlbkRlcGVuZGVudFR5cGVzQXJlUmVzb2x2ZWQobXlUeXBlcywgZGVwZW5kZW50VHlwZXMsIGdldFR5cGVDb252ZXJ0ZXJzKSB7CiAgICAgICAgICAgIG15VHlwZXMuZm9yRWFjaChmdW5jdGlvbih0eXBlKSB7CiAgICAgICAgICAgICAgdHlwZURlcGVuZGVuY2llc1t0eXBlXSA9IGRlcGVuZGVudFR5cGVzOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgZnVuY3Rpb24gb25Db21wbGV0ZSh0eXBlQ29udmVydGVyczIpIHsKICAgICAgICAgICAgICB2YXIgbXlUeXBlQ29udmVydGVycyA9IGdldFR5cGVDb252ZXJ0ZXJzKHR5cGVDb252ZXJ0ZXJzMik7CiAgICAgICAgICAgICAgaWYgKG15VHlwZUNvbnZlcnRlcnMubGVuZ3RoICE9PSBteVR5cGVzLmxlbmd0aCkgewogICAgICAgICAgICAgICAgdGhyb3dJbnRlcm5hbEVycm9yKCJNaXNtYXRjaGVkIHR5cGUgY29udmVydGVyIGNvdW50Iik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXlUeXBlcy5sZW5ndGg7ICsraSkgewogICAgICAgICAgICAgICAgcmVnaXN0ZXJUeXBlKG15VHlwZXNbaV0sIG15VHlwZUNvbnZlcnRlcnNbaV0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgdHlwZUNvbnZlcnRlcnMgPSBuZXcgQXJyYXkoZGVwZW5kZW50VHlwZXMubGVuZ3RoKTsKICAgICAgICAgICAgdmFyIHVucmVnaXN0ZXJlZFR5cGVzID0gW107CiAgICAgICAgICAgIHZhciByZWdpc3RlcmVkID0gMDsKICAgICAgICAgICAgZGVwZW5kZW50VHlwZXMuZm9yRWFjaChmdW5jdGlvbihkdCwgaSkgewogICAgICAgICAgICAgIGlmIChyZWdpc3RlcmVkVHlwZXMuaGFzT3duUHJvcGVydHkoZHQpKSB7CiAgICAgICAgICAgICAgICB0eXBlQ29udmVydGVyc1tpXSA9IHJlZ2lzdGVyZWRUeXBlc1tkdF07CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHVucmVnaXN0ZXJlZFR5cGVzLnB1c2goZHQpOwogICAgICAgICAgICAgICAgaWYgKCFhd2FpdGluZ0RlcGVuZGVuY2llcy5oYXNPd25Qcm9wZXJ0eShkdCkpIHsKICAgICAgICAgICAgICAgICAgYXdhaXRpbmdEZXBlbmRlbmNpZXNbZHRdID0gW107CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBhd2FpdGluZ0RlcGVuZGVuY2llc1tkdF0ucHVzaChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgdHlwZUNvbnZlcnRlcnNbaV0gPSByZWdpc3RlcmVkVHlwZXNbZHRdOwogICAgICAgICAgICAgICAgICArK3JlZ2lzdGVyZWQ7CiAgICAgICAgICAgICAgICAgIGlmIChyZWdpc3RlcmVkID09PSB1bnJlZ2lzdGVyZWRUeXBlcy5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBvbkNvbXBsZXRlKHR5cGVDb252ZXJ0ZXJzKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgaWYgKDAgPT09IHVucmVnaXN0ZXJlZFR5cGVzLmxlbmd0aCkgewogICAgICAgICAgICAgIG9uQ29tcGxldGUodHlwZUNvbnZlcnRlcnMpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBfX2VtYmluZF9maW5hbGl6ZV92YWx1ZV9vYmplY3Qoc3RydWN0VHlwZSkgewogICAgICAgICAgICB2YXIgcmVnID0gc3RydWN0UmVnaXN0cmF0aW9uc1tzdHJ1Y3RUeXBlXTsKICAgICAgICAgICAgZGVsZXRlIHN0cnVjdFJlZ2lzdHJhdGlvbnNbc3RydWN0VHlwZV07CiAgICAgICAgICAgIHZhciByYXdDb25zdHJ1Y3RvciA9IHJlZy5yYXdDb25zdHJ1Y3RvcjsKICAgICAgICAgICAgdmFyIHJhd0Rlc3RydWN0b3IgPSByZWcucmF3RGVzdHJ1Y3RvcjsKICAgICAgICAgICAgdmFyIGZpZWxkUmVjb3JkcyA9IHJlZy5maWVsZHM7CiAgICAgICAgICAgIHZhciBmaWVsZFR5cGVzID0gZmllbGRSZWNvcmRzLm1hcChmdW5jdGlvbihmaWVsZCkgewogICAgICAgICAgICAgIHJldHVybiBmaWVsZC5nZXR0ZXJSZXR1cm5UeXBlOwogICAgICAgICAgICB9KS5jb25jYXQoZmllbGRSZWNvcmRzLm1hcChmdW5jdGlvbihmaWVsZCkgewogICAgICAgICAgICAgIHJldHVybiBmaWVsZC5zZXR0ZXJBcmd1bWVudFR5cGU7CiAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgd2hlbkRlcGVuZGVudFR5cGVzQXJlUmVzb2x2ZWQoW3N0cnVjdFR5cGVdLCBmaWVsZFR5cGVzLCBmdW5jdGlvbihmaWVsZFR5cGVzMikgewogICAgICAgICAgICAgIHZhciBmaWVsZHMgPSB7fTsKICAgICAgICAgICAgICBmaWVsZFJlY29yZHMuZm9yRWFjaChmdW5jdGlvbihmaWVsZCwgaSkgewogICAgICAgICAgICAgICAgdmFyIGZpZWxkTmFtZSA9IGZpZWxkLmZpZWxkTmFtZTsKICAgICAgICAgICAgICAgIHZhciBnZXR0ZXJSZXR1cm5UeXBlID0gZmllbGRUeXBlczJbaV07CiAgICAgICAgICAgICAgICB2YXIgZ2V0dGVyID0gZmllbGQuZ2V0dGVyOwogICAgICAgICAgICAgICAgdmFyIGdldHRlckNvbnRleHQgPSBmaWVsZC5nZXR0ZXJDb250ZXh0OwogICAgICAgICAgICAgICAgdmFyIHNldHRlckFyZ3VtZW50VHlwZSA9IGZpZWxkVHlwZXMyW2kgKyBmaWVsZFJlY29yZHMubGVuZ3RoXTsKICAgICAgICAgICAgICAgIHZhciBzZXR0ZXIgPSBmaWVsZC5zZXR0ZXI7CiAgICAgICAgICAgICAgICB2YXIgc2V0dGVyQ29udGV4dCA9IGZpZWxkLnNldHRlckNvbnRleHQ7CiAgICAgICAgICAgICAgICBmaWVsZHNbZmllbGROYW1lXSA9IHsgcmVhZDogZnVuY3Rpb24ocHRyKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBnZXR0ZXJSZXR1cm5UeXBlWyJmcm9tV2lyZVR5cGUiXShnZXR0ZXIoZ2V0dGVyQ29udGV4dCwgcHRyKSk7CiAgICAgICAgICAgICAgICB9LCB3cml0ZTogZnVuY3Rpb24ocHRyLCBvKSB7CiAgICAgICAgICAgICAgICAgIHZhciBkZXN0cnVjdG9ycyA9IFtdOwogICAgICAgICAgICAgICAgICBzZXR0ZXIoc2V0dGVyQ29udGV4dCwgcHRyLCBzZXR0ZXJBcmd1bWVudFR5cGVbInRvV2lyZVR5cGUiXShkZXN0cnVjdG9ycywgbykpOwogICAgICAgICAgICAgICAgICBydW5EZXN0cnVjdG9ycyhkZXN0cnVjdG9ycyk7CiAgICAgICAgICAgICAgICB9IH07CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgcmV0dXJuIFt7IG5hbWU6IHJlZy5uYW1lLCAiZnJvbVdpcmVUeXBlIjogZnVuY3Rpb24ocHRyKSB7CiAgICAgICAgICAgICAgICB2YXIgcnYgPSB7fTsKICAgICAgICAgICAgICAgIGZvciAodmFyIGkgaW4gZmllbGRzKSB7CiAgICAgICAgICAgICAgICAgIHJ2W2ldID0gZmllbGRzW2ldLnJlYWQocHRyKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJhd0Rlc3RydWN0b3IocHRyKTsKICAgICAgICAgICAgICAgIHJldHVybiBydjsKICAgICAgICAgICAgICB9LCAidG9XaXJlVHlwZSI6IGZ1bmN0aW9uKGRlc3RydWN0b3JzLCBvKSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBmaWVsZE5hbWUgaW4gZmllbGRzKSB7CiAgICAgICAgICAgICAgICAgIGlmICghKGZpZWxkTmFtZSBpbiBvKSkgewogICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ01pc3NpbmcgZmllbGQ6ICAiJyArIGZpZWxkTmFtZSArICciJyk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciBwdHIgPSByYXdDb25zdHJ1Y3RvcigpOwogICAgICAgICAgICAgICAgZm9yIChmaWVsZE5hbWUgaW4gZmllbGRzKSB7CiAgICAgICAgICAgICAgICAgIGZpZWxkc1tmaWVsZE5hbWVdLndyaXRlKHB0ciwgb1tmaWVsZE5hbWVdKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChkZXN0cnVjdG9ycyAhPT0gbnVsbCkgewogICAgICAgICAgICAgICAgICBkZXN0cnVjdG9ycy5wdXNoKHJhd0Rlc3RydWN0b3IsIHB0cik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gcHRyOwogICAgICAgICAgICAgIH0sICJhcmdQYWNrQWR2YW5jZSI6IDgsICJyZWFkVmFsdWVGcm9tUG9pbnRlciI6IHNpbXBsZVJlYWRWYWx1ZUZyb21Qb2ludGVyLCBkZXN0cnVjdG9yRnVuY3Rpb246IHJhd0Rlc3RydWN0b3IgfV07CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gZ2V0U2hpZnRGcm9tU2l6ZShzaXplKSB7CiAgICAgICAgICAgIHN3aXRjaCAoc2l6ZSkgewogICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIHJldHVybiAxOwogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICAgIHJldHVybiAyOwogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgIHJldHVybiAzOwogICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJVbmtub3duIHR5cGUgc2l6ZTogIiArIHNpemUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBlbWJpbmRfaW5pdF9jaGFyQ29kZXMoKSB7CiAgICAgICAgICAgIHZhciBjb2RlcyA9IG5ldyBBcnJheSgyNTYpOwogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgKytpKSB7CiAgICAgICAgICAgICAgY29kZXNbaV0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVtYmluZF9jaGFyQ29kZXMgPSBjb2RlczsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBlbWJpbmRfY2hhckNvZGVzID0gdm9pZCAwOwogICAgICAgICAgZnVuY3Rpb24gcmVhZExhdGluMVN0cmluZyhwdHIpIHsKICAgICAgICAgICAgdmFyIHJldCA9ICIiOwogICAgICAgICAgICB2YXIgYyA9IHB0cjsKICAgICAgICAgICAgd2hpbGUgKEhFQVBVOFtjXSkgewogICAgICAgICAgICAgIHJldCArPSBlbWJpbmRfY2hhckNvZGVzW0hFQVBVOFtjKytdXTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gcmV0OwogICAgICAgICAgfQogICAgICAgICAgdmFyIEJpbmRpbmdFcnJvciA9IHZvaWQgMDsKICAgICAgICAgIGZ1bmN0aW9uIHRocm93QmluZGluZ0Vycm9yKG1lc3NhZ2UpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEJpbmRpbmdFcnJvcihtZXNzYWdlKTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIHJlZ2lzdGVyVHlwZShyYXdUeXBlLCByZWdpc3RlcmVkSW5zdGFuY2UsIG9wdGlvbnMpIHsKICAgICAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CiAgICAgICAgICAgIGlmICghKCJhcmdQYWNrQWR2YW5jZSIgaW4gcmVnaXN0ZXJlZEluc3RhbmNlKSkgewogICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoInJlZ2lzdGVyVHlwZSByZWdpc3RlcmVkSW5zdGFuY2UgcmVxdWlyZXMgYXJnUGFja0FkdmFuY2UiKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgbmFtZSA9IHJlZ2lzdGVyZWRJbnN0YW5jZS5uYW1lOwogICAgICAgICAgICBpZiAoIXJhd1R5cGUpIHsKICAgICAgICAgICAgICB0aHJvd0JpbmRpbmdFcnJvcigndHlwZSAiJyArIG5hbWUgKyAnIiBtdXN0IGhhdmUgYSBwb3NpdGl2ZSBpbnRlZ2VyIHR5cGVpZCBwb2ludGVyJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHJlZ2lzdGVyZWRUeXBlcy5oYXNPd25Qcm9wZXJ0eShyYXdUeXBlKSkgewogICAgICAgICAgICAgIGlmIChvcHRpb25zLmlnbm9yZUR1cGxpY2F0ZVJlZ2lzdHJhdGlvbnMpIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdGhyb3dCaW5kaW5nRXJyb3IoIkNhbm5vdCByZWdpc3RlciB0eXBlICciICsgbmFtZSArICInIHR3aWNlIik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJlZ2lzdGVyZWRUeXBlc1tyYXdUeXBlXSA9IHJlZ2lzdGVyZWRJbnN0YW5jZTsKICAgICAgICAgICAgZGVsZXRlIHR5cGVEZXBlbmRlbmNpZXNbcmF3VHlwZV07CiAgICAgICAgICAgIGlmIChhd2FpdGluZ0RlcGVuZGVuY2llcy5oYXNPd25Qcm9wZXJ0eShyYXdUeXBlKSkgewogICAgICAgICAgICAgIHZhciBjYWxsYmFja3MgPSBhd2FpdGluZ0RlcGVuZGVuY2llc1tyYXdUeXBlXTsKICAgICAgICAgICAgICBkZWxldGUgYXdhaXRpbmdEZXBlbmRlbmNpZXNbcmF3VHlwZV07CiAgICAgICAgICAgICAgY2FsbGJhY2tzLmZvckVhY2goZnVuY3Rpb24oY2IpIHsKICAgICAgICAgICAgICAgIGNiKCk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX2Jvb2wocmF3VHlwZSwgbmFtZSwgc2l6ZSwgdHJ1ZVZhbHVlLCBmYWxzZVZhbHVlKSB7CiAgICAgICAgICAgIHZhciBzaGlmdCA9IGdldFNoaWZ0RnJvbVNpemUoc2l6ZSk7CiAgICAgICAgICAgIG5hbWUgPSByZWFkTGF0aW4xU3RyaW5nKG5hbWUpOwogICAgICAgICAgICByZWdpc3RlclR5cGUocmF3VHlwZSwgeyBuYW1lLCAiZnJvbVdpcmVUeXBlIjogZnVuY3Rpb24od3QpIHsKICAgICAgICAgICAgICByZXR1cm4gISF3dDsKICAgICAgICAgICAgfSwgInRvV2lyZVR5cGUiOiBmdW5jdGlvbihkZXN0cnVjdG9ycywgbykgewogICAgICAgICAgICAgIHJldHVybiBvID8gdHJ1ZVZhbHVlIDogZmFsc2VWYWx1ZTsKICAgICAgICAgICAgfSwgImFyZ1BhY2tBZHZhbmNlIjogOCwgInJlYWRWYWx1ZUZyb21Qb2ludGVyIjogZnVuY3Rpb24ocG9pbnRlcikgewogICAgICAgICAgICAgIHZhciBoZWFwOwogICAgICAgICAgICAgIGlmIChzaXplID09PSAxKSB7CiAgICAgICAgICAgICAgICBoZWFwID0gSEVBUDg7CiAgICAgICAgICAgICAgfSBlbHNlIGlmIChzaXplID09PSAyKSB7CiAgICAgICAgICAgICAgICBoZWFwID0gSEVBUDE2OwogICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2l6ZSA9PT0gNCkgewogICAgICAgICAgICAgICAgaGVhcCA9IEhFQVAzMjsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiVW5rbm93biBib29sZWFuIHR5cGUgc2l6ZTogIiArIG5hbWUpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gdGhpc1siZnJvbVdpcmVUeXBlIl0oaGVhcFtwb2ludGVyID4+IHNoaWZ0XSk7CiAgICAgICAgICAgIH0sIGRlc3RydWN0b3JGdW5jdGlvbjogbnVsbCB9KTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIENsYXNzSGFuZGxlX2lzQWxpYXNPZihvdGhlcikgewogICAgICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgQ2xhc3NIYW5kbGUpKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICghKG90aGVyIGluc3RhbmNlb2YgQ2xhc3NIYW5kbGUpKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBsZWZ0Q2xhc3MgPSB0aGlzLiQkLnB0clR5cGUucmVnaXN0ZXJlZENsYXNzOwogICAgICAgICAgICB2YXIgbGVmdCA9IHRoaXMuJCQucHRyOwogICAgICAgICAgICB2YXIgcmlnaHRDbGFzcyA9IG90aGVyLiQkLnB0clR5cGUucmVnaXN0ZXJlZENsYXNzOwogICAgICAgICAgICB2YXIgcmlnaHQgPSBvdGhlci4kJC5wdHI7CiAgICAgICAgICAgIHdoaWxlIChsZWZ0Q2xhc3MuYmFzZUNsYXNzKSB7CiAgICAgICAgICAgICAgbGVmdCA9IGxlZnRDbGFzcy51cGNhc3QobGVmdCk7CiAgICAgICAgICAgICAgbGVmdENsYXNzID0gbGVmdENsYXNzLmJhc2VDbGFzczsKICAgICAgICAgICAgfQogICAgICAgICAgICB3aGlsZSAocmlnaHRDbGFzcy5iYXNlQ2xhc3MpIHsKICAgICAgICAgICAgICByaWdodCA9IHJpZ2h0Q2xhc3MudXBjYXN0KHJpZ2h0KTsKICAgICAgICAgICAgICByaWdodENsYXNzID0gcmlnaHRDbGFzcy5iYXNlQ2xhc3M7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGxlZnRDbGFzcyA9PT0gcmlnaHRDbGFzcyAmJiBsZWZ0ID09PSByaWdodDsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIHNoYWxsb3dDb3B5SW50ZXJuYWxQb2ludGVyKG8pIHsKICAgICAgICAgICAgcmV0dXJuIHsgY291bnQ6IG8uY291bnQsIGRlbGV0ZVNjaGVkdWxlZDogby5kZWxldGVTY2hlZHVsZWQsIHByZXNlcnZlUG9pbnRlck9uRGVsZXRlOiBvLnByZXNlcnZlUG9pbnRlck9uRGVsZXRlLCBwdHI6IG8ucHRyLCBwdHJUeXBlOiBvLnB0clR5cGUsIHNtYXJ0UHRyOiBvLnNtYXJ0UHRyLCBzbWFydFB0clR5cGU6IG8uc21hcnRQdHJUeXBlIH07CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiB0aHJvd0luc3RhbmNlQWxyZWFkeURlbGV0ZWQob2JqKSB7CiAgICAgICAgICAgIGZ1bmN0aW9uIGdldEluc3RhbmNlVHlwZU5hbWUoaGFuZGxlKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZS4kJC5wdHJUeXBlLnJlZ2lzdGVyZWRDbGFzcy5uYW1lOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRocm93QmluZGluZ0Vycm9yKGdldEluc3RhbmNlVHlwZU5hbWUob2JqKSArICIgaW5zdGFuY2UgYWxyZWFkeSBkZWxldGVkIik7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgZmluYWxpemF0aW9uR3JvdXAgPSBmYWxzZTsKICAgICAgICAgIGZ1bmN0aW9uIGRldGFjaEZpbmFsaXplcihoYW5kbGUpIHsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIHJ1bkRlc3RydWN0b3IoJCQpIHsKICAgICAgICAgICAgaWYgKCQkLnNtYXJ0UHRyKSB7CiAgICAgICAgICAgICAgJCQuc21hcnRQdHJUeXBlLnJhd0Rlc3RydWN0b3IoJCQuc21hcnRQdHIpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICQkLnB0clR5cGUucmVnaXN0ZXJlZENsYXNzLnJhd0Rlc3RydWN0b3IoJCQucHRyKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gcmVsZWFzZUNsYXNzSGFuZGxlKCQkKSB7CiAgICAgICAgICAgICQkLmNvdW50LnZhbHVlIC09IDE7CiAgICAgICAgICAgIHZhciB0b0RlbGV0ZSA9IDAgPT09ICQkLmNvdW50LnZhbHVlOwogICAgICAgICAgICBpZiAodG9EZWxldGUpIHsKICAgICAgICAgICAgICBydW5EZXN0cnVjdG9yKCQkKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gYXR0YWNoRmluYWxpemVyKGhhbmRsZSkgewogICAgICAgICAgICBpZiAoInVuZGVmaW5lZCIgPT09IHR5cGVvZiBGaW5hbGl6YXRpb25Hcm91cCkgewogICAgICAgICAgICAgIGF0dGFjaEZpbmFsaXplciA9IGZ1bmN0aW9uKGhhbmRsZTIpIHsKICAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGUyOwogICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmaW5hbGl6YXRpb25Hcm91cCA9IG5ldyBGaW5hbGl6YXRpb25Hcm91cChmdW5jdGlvbihpdGVyKSB7CiAgICAgICAgICAgICAgZm9yICh2YXIgcmVzdWx0ID0gaXRlci5uZXh0KCk7ICFyZXN1bHQuZG9uZTsgcmVzdWx0ID0gaXRlci5uZXh0KCkpIHsKICAgICAgICAgICAgICAgIHZhciAkJCA9IHJlc3VsdC52YWx1ZTsKICAgICAgICAgICAgICAgIGlmICghJCQucHRyKSB7CiAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybigib2JqZWN0IGFscmVhZHkgZGVsZXRlZDogIiArICQkLnB0cik7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICByZWxlYXNlQ2xhc3NIYW5kbGUoJCQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGF0dGFjaEZpbmFsaXplciA9IGZ1bmN0aW9uKGhhbmRsZTIpIHsKICAgICAgICAgICAgICBmaW5hbGl6YXRpb25Hcm91cC5yZWdpc3RlcihoYW5kbGUyLCBoYW5kbGUyLiQkLCBoYW5kbGUyLiQkKTsKICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlMjsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgZGV0YWNoRmluYWxpemVyID0gZnVuY3Rpb24oaGFuZGxlMikgewogICAgICAgICAgICAgIGZpbmFsaXphdGlvbkdyb3VwLnVucmVnaXN0ZXIoaGFuZGxlMi4kJCk7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHJldHVybiBhdHRhY2hGaW5hbGl6ZXIoaGFuZGxlKTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIENsYXNzSGFuZGxlX2Nsb25lKCkgewogICAgICAgICAgICBpZiAoIXRoaXMuJCQucHRyKSB7CiAgICAgICAgICAgICAgdGhyb3dJbnN0YW5jZUFscmVhZHlEZWxldGVkKHRoaXMpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh0aGlzLiQkLnByZXNlcnZlUG9pbnRlck9uRGVsZXRlKSB7CiAgICAgICAgICAgICAgdGhpcy4kJC5jb3VudC52YWx1ZSArPSAxOwogICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHZhciBjbG9uZTIgPSBhdHRhY2hGaW5hbGl6ZXIoT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcyksIHsgJCQ6IHsgdmFsdWU6IHNoYWxsb3dDb3B5SW50ZXJuYWxQb2ludGVyKHRoaXMuJCQpIH0gfSkpOwogICAgICAgICAgICAgIGNsb25lMi4kJC5jb3VudC52YWx1ZSArPSAxOwogICAgICAgICAgICAgIGNsb25lMi4kJC5kZWxldGVTY2hlZHVsZWQgPSBmYWxzZTsKICAgICAgICAgICAgICByZXR1cm4gY2xvbmUyOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBDbGFzc0hhbmRsZV9kZWxldGUoKSB7CiAgICAgICAgICAgIGlmICghdGhpcy4kJC5wdHIpIHsKICAgICAgICAgICAgICB0aHJvd0luc3RhbmNlQWxyZWFkeURlbGV0ZWQodGhpcyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHRoaXMuJCQuZGVsZXRlU2NoZWR1bGVkICYmICF0aGlzLiQkLnByZXNlcnZlUG9pbnRlck9uRGVsZXRlKSB7CiAgICAgICAgICAgICAgdGhyb3dCaW5kaW5nRXJyb3IoIk9iamVjdCBhbHJlYWR5IHNjaGVkdWxlZCBmb3IgZGVsZXRpb24iKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBkZXRhY2hGaW5hbGl6ZXIodGhpcyk7CiAgICAgICAgICAgIHJlbGVhc2VDbGFzc0hhbmRsZSh0aGlzLiQkKTsKICAgICAgICAgICAgaWYgKCF0aGlzLiQkLnByZXNlcnZlUG9pbnRlck9uRGVsZXRlKSB7CiAgICAgICAgICAgICAgdGhpcy4kJC5zbWFydFB0ciA9IHZvaWQgMDsKICAgICAgICAgICAgICB0aGlzLiQkLnB0ciA9IHZvaWQgMDsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gQ2xhc3NIYW5kbGVfaXNEZWxldGVkKCkgewogICAgICAgICAgICByZXR1cm4gIXRoaXMuJCQucHRyOwogICAgICAgICAgfQogICAgICAgICAgdmFyIGRlbGF5RnVuY3Rpb24gPSB2b2lkIDA7CiAgICAgICAgICB2YXIgZGVsZXRpb25RdWV1ZSA9IFtdOwogICAgICAgICAgZnVuY3Rpb24gZmx1c2hQZW5kaW5nRGVsZXRlcygpIHsKICAgICAgICAgICAgd2hpbGUgKGRlbGV0aW9uUXVldWUubGVuZ3RoKSB7CiAgICAgICAgICAgICAgdmFyIG9iaiA9IGRlbGV0aW9uUXVldWUucG9wKCk7CiAgICAgICAgICAgICAgb2JqLiQkLmRlbGV0ZVNjaGVkdWxlZCA9IGZhbHNlOwogICAgICAgICAgICAgIG9ialsiZGVsZXRlIl0oKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gQ2xhc3NIYW5kbGVfZGVsZXRlTGF0ZXIoKSB7CiAgICAgICAgICAgIGlmICghdGhpcy4kJC5wdHIpIHsKICAgICAgICAgICAgICB0aHJvd0luc3RhbmNlQWxyZWFkeURlbGV0ZWQodGhpcyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHRoaXMuJCQuZGVsZXRlU2NoZWR1bGVkICYmICF0aGlzLiQkLnByZXNlcnZlUG9pbnRlck9uRGVsZXRlKSB7CiAgICAgICAgICAgICAgdGhyb3dCaW5kaW5nRXJyb3IoIk9iamVjdCBhbHJlYWR5IHNjaGVkdWxlZCBmb3IgZGVsZXRpb24iKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBkZWxldGlvblF1ZXVlLnB1c2godGhpcyk7CiAgICAgICAgICAgIGlmIChkZWxldGlvblF1ZXVlLmxlbmd0aCA9PT0gMSAmJiBkZWxheUZ1bmN0aW9uKSB7CiAgICAgICAgICAgICAgZGVsYXlGdW5jdGlvbihmbHVzaFBlbmRpbmdEZWxldGVzKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLiQkLmRlbGV0ZVNjaGVkdWxlZCA9IHRydWU7CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gaW5pdF9DbGFzc0hhbmRsZSgpIHsKICAgICAgICAgICAgQ2xhc3NIYW5kbGUucHJvdG90eXBlWyJpc0FsaWFzT2YiXSA9IENsYXNzSGFuZGxlX2lzQWxpYXNPZjsKICAgICAgICAgICAgQ2xhc3NIYW5kbGUucHJvdG90eXBlWyJjbG9uZSJdID0gQ2xhc3NIYW5kbGVfY2xvbmU7CiAgICAgICAgICAgIENsYXNzSGFuZGxlLnByb3RvdHlwZVsiZGVsZXRlIl0gPSBDbGFzc0hhbmRsZV9kZWxldGU7CiAgICAgICAgICAgIENsYXNzSGFuZGxlLnByb3RvdHlwZVsiaXNEZWxldGVkIl0gPSBDbGFzc0hhbmRsZV9pc0RlbGV0ZWQ7CiAgICAgICAgICAgIENsYXNzSGFuZGxlLnByb3RvdHlwZVsiZGVsZXRlTGF0ZXIiXSA9IENsYXNzSGFuZGxlX2RlbGV0ZUxhdGVyOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gQ2xhc3NIYW5kbGUoKSB7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgcmVnaXN0ZXJlZFBvaW50ZXJzID0ge307CiAgICAgICAgICBmdW5jdGlvbiBlbnN1cmVPdmVybG9hZFRhYmxlKHByb3RvLCBtZXRob2ROYW1lLCBodW1hbk5hbWUpIHsKICAgICAgICAgICAgaWYgKHZvaWQgMCA9PT0gcHJvdG9bbWV0aG9kTmFtZV0ub3ZlcmxvYWRUYWJsZSkgewogICAgICAgICAgICAgIHZhciBwcmV2RnVuYyA9IHByb3RvW21ldGhvZE5hbWVdOwogICAgICAgICAgICAgIHByb3RvW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBpZiAoIXByb3RvW21ldGhvZE5hbWVdLm92ZXJsb2FkVGFibGUuaGFzT3duUHJvcGVydHkoYXJndW1lbnRzLmxlbmd0aCkpIHsKICAgICAgICAgICAgICAgICAgdGhyb3dCaW5kaW5nRXJyb3IoIkZ1bmN0aW9uICciICsgaHVtYW5OYW1lICsgIicgY2FsbGVkIHdpdGggYW4gaW52YWxpZCBudW1iZXIgb2YgYXJndW1lbnRzICgiICsgYXJndW1lbnRzLmxlbmd0aCArICIpIC0gZXhwZWN0cyBvbmUgb2YgKCIgKyBwcm90b1ttZXRob2ROYW1lXS5vdmVybG9hZFRhYmxlICsgIikhIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gcHJvdG9bbWV0aG9kTmFtZV0ub3ZlcmxvYWRUYWJsZVthcmd1bWVudHMubGVuZ3RoXS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgcHJvdG9bbWV0aG9kTmFtZV0ub3ZlcmxvYWRUYWJsZSA9IFtdOwogICAgICAgICAgICAgIHByb3RvW21ldGhvZE5hbWVdLm92ZXJsb2FkVGFibGVbcHJldkZ1bmMuYXJnQ291bnRdID0gcHJldkZ1bmM7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIGV4cG9zZVB1YmxpY1N5bWJvbChuYW1lLCB2YWx1ZSwgbnVtQXJndW1lbnRzKSB7CiAgICAgICAgICAgIGlmIChNb2R1bGUuaGFzT3duUHJvcGVydHkobmFtZSkpIHsKICAgICAgICAgICAgICBpZiAodm9pZCAwID09PSBudW1Bcmd1bWVudHMgfHwgdm9pZCAwICE9PSBNb2R1bGVbbmFtZV0ub3ZlcmxvYWRUYWJsZSAmJiB2b2lkIDAgIT09IE1vZHVsZVtuYW1lXS5vdmVybG9hZFRhYmxlW251bUFyZ3VtZW50c10pIHsKICAgICAgICAgICAgICAgIHRocm93QmluZGluZ0Vycm9yKCJDYW5ub3QgcmVnaXN0ZXIgcHVibGljIG5hbWUgJyIgKyBuYW1lICsgIicgdHdpY2UiKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZW5zdXJlT3ZlcmxvYWRUYWJsZShNb2R1bGUsIG5hbWUsIG5hbWUpOwogICAgICAgICAgICAgIGlmIChNb2R1bGUuaGFzT3duUHJvcGVydHkobnVtQXJndW1lbnRzKSkgewogICAgICAgICAgICAgICAgdGhyb3dCaW5kaW5nRXJyb3IoIkNhbm5vdCByZWdpc3RlciBtdWx0aXBsZSBvdmVybG9hZHMgb2YgYSBmdW5jdGlvbiB3aXRoIHRoZSBzYW1lIG51bWJlciBvZiBhcmd1bWVudHMgKCIgKyBudW1Bcmd1bWVudHMgKyAiKSEiKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgTW9kdWxlW25hbWVdLm92ZXJsb2FkVGFibGVbbnVtQXJndW1lbnRzXSA9IHZhbHVlOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIE1vZHVsZVtuYW1lXSA9IHZhbHVlOwogICAgICAgICAgICAgIGlmICh2b2lkIDAgIT09IG51bUFyZ3VtZW50cykgewogICAgICAgICAgICAgICAgTW9kdWxlW25hbWVdLm51bUFyZ3VtZW50cyA9IG51bUFyZ3VtZW50czsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIFJlZ2lzdGVyZWRDbGFzcyhuYW1lLCBjb25zdHJ1Y3RvciwgaW5zdGFuY2VQcm90b3R5cGUsIHJhd0Rlc3RydWN0b3IsIGJhc2VDbGFzcywgZ2V0QWN0dWFsVHlwZSwgdXBjYXN0LCBkb3duY2FzdCkgewogICAgICAgICAgICB0aGlzLm5hbWUgPSBuYW1lOwogICAgICAgICAgICB0aGlzLmNvbnN0cnVjdG9yID0gY29uc3RydWN0b3I7CiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2VQcm90b3R5cGUgPSBpbnN0YW5jZVByb3RvdHlwZTsKICAgICAgICAgICAgdGhpcy5yYXdEZXN0cnVjdG9yID0gcmF3RGVzdHJ1Y3RvcjsKICAgICAgICAgICAgdGhpcy5iYXNlQ2xhc3MgPSBiYXNlQ2xhc3M7CiAgICAgICAgICAgIHRoaXMuZ2V0QWN0dWFsVHlwZSA9IGdldEFjdHVhbFR5cGU7CiAgICAgICAgICAgIHRoaXMudXBjYXN0ID0gdXBjYXN0OwogICAgICAgICAgICB0aGlzLmRvd25jYXN0ID0gZG93bmNhc3Q7CiAgICAgICAgICAgIHRoaXMucHVyZVZpcnR1YWxGdW5jdGlvbnMgPSBbXTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIHVwY2FzdFBvaW50ZXIocHRyLCBwdHJDbGFzcywgZGVzaXJlZENsYXNzKSB7CiAgICAgICAgICAgIHdoaWxlIChwdHJDbGFzcyAhPT0gZGVzaXJlZENsYXNzKSB7CiAgICAgICAgICAgICAgaWYgKCFwdHJDbGFzcy51cGNhc3QpIHsKICAgICAgICAgICAgICAgIHRocm93QmluZGluZ0Vycm9yKCJFeHBlY3RlZCBudWxsIG9yIGluc3RhbmNlIG9mICIgKyBkZXNpcmVkQ2xhc3MubmFtZSArICIsIGdvdCBhbiBpbnN0YW5jZSBvZiAiICsgcHRyQ2xhc3MubmFtZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHB0ciA9IHB0ckNsYXNzLnVwY2FzdChwdHIpOwogICAgICAgICAgICAgIHB0ckNsYXNzID0gcHRyQ2xhc3MuYmFzZUNsYXNzOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBwdHI7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBjb25zdE5vU21hcnRQdHJSYXdQb2ludGVyVG9XaXJlVHlwZShkZXN0cnVjdG9ycywgaGFuZGxlKSB7CiAgICAgICAgICAgIGlmIChoYW5kbGUgPT09IG51bGwpIHsKICAgICAgICAgICAgICBpZiAodGhpcy5pc1JlZmVyZW5jZSkgewogICAgICAgICAgICAgICAgdGhyb3dCaW5kaW5nRXJyb3IoIm51bGwgaXMgbm90IGEgdmFsaWQgIiArIHRoaXMubmFtZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICghaGFuZGxlLiQkKSB7CiAgICAgICAgICAgICAgdGhyb3dCaW5kaW5nRXJyb3IoJ0Nhbm5vdCBwYXNzICInICsgX2VtYmluZF9yZXByKGhhbmRsZSkgKyAnIiBhcyBhICcgKyB0aGlzLm5hbWUpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICghaGFuZGxlLiQkLnB0cikgewogICAgICAgICAgICAgIHRocm93QmluZGluZ0Vycm9yKCJDYW5ub3QgcGFzcyBkZWxldGVkIG9iamVjdCBhcyBhIHBvaW50ZXIgb2YgdHlwZSAiICsgdGhpcy5uYW1lKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgaGFuZGxlQ2xhc3MgPSBoYW5kbGUuJCQucHRyVHlwZS5yZWdpc3RlcmVkQ2xhc3M7CiAgICAgICAgICAgIHZhciBwdHIgPSB1cGNhc3RQb2ludGVyKGhhbmRsZS4kJC5wdHIsIGhhbmRsZUNsYXNzLCB0aGlzLnJlZ2lzdGVyZWRDbGFzcyk7CiAgICAgICAgICAgIHJldHVybiBwdHI7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBnZW5lcmljUG9pbnRlclRvV2lyZVR5cGUoZGVzdHJ1Y3RvcnMsIGhhbmRsZSkgewogICAgICAgICAgICB2YXIgcHRyOwogICAgICAgICAgICBpZiAoaGFuZGxlID09PSBudWxsKSB7CiAgICAgICAgICAgICAgaWYgKHRoaXMuaXNSZWZlcmVuY2UpIHsKICAgICAgICAgICAgICAgIHRocm93QmluZGluZ0Vycm9yKCJudWxsIGlzIG5vdCBhIHZhbGlkICIgKyB0aGlzLm5hbWUpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAodGhpcy5pc1NtYXJ0UG9pbnRlcikgewogICAgICAgICAgICAgICAgcHRyID0gdGhpcy5yYXdDb25zdHJ1Y3RvcigpOwogICAgICAgICAgICAgICAgaWYgKGRlc3RydWN0b3JzICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgICAgIGRlc3RydWN0b3JzLnB1c2godGhpcy5yYXdEZXN0cnVjdG9yLCBwdHIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHB0cjsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICghaGFuZGxlLiQkKSB7CiAgICAgICAgICAgICAgdGhyb3dCaW5kaW5nRXJyb3IoJ0Nhbm5vdCBwYXNzICInICsgX2VtYmluZF9yZXByKGhhbmRsZSkgKyAnIiBhcyBhICcgKyB0aGlzLm5hbWUpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICghaGFuZGxlLiQkLnB0cikgewogICAgICAgICAgICAgIHRocm93QmluZGluZ0Vycm9yKCJDYW5ub3QgcGFzcyBkZWxldGVkIG9iamVjdCBhcyBhIHBvaW50ZXIgb2YgdHlwZSAiICsgdGhpcy5uYW1lKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIXRoaXMuaXNDb25zdCAmJiBoYW5kbGUuJCQucHRyVHlwZS5pc0NvbnN0KSB7CiAgICAgICAgICAgICAgdGhyb3dCaW5kaW5nRXJyb3IoIkNhbm5vdCBjb252ZXJ0IGFyZ3VtZW50IG9mIHR5cGUgIiArIChoYW5kbGUuJCQuc21hcnRQdHJUeXBlID8gaGFuZGxlLiQkLnNtYXJ0UHRyVHlwZS5uYW1lIDogaGFuZGxlLiQkLnB0clR5cGUubmFtZSkgKyAiIHRvIHBhcmFtZXRlciB0eXBlICIgKyB0aGlzLm5hbWUpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBoYW5kbGVDbGFzcyA9IGhhbmRsZS4kJC5wdHJUeXBlLnJlZ2lzdGVyZWRDbGFzczsKICAgICAgICAgICAgcHRyID0gdXBjYXN0UG9pbnRlcihoYW5kbGUuJCQucHRyLCBoYW5kbGVDbGFzcywgdGhpcy5yZWdpc3RlcmVkQ2xhc3MpOwogICAgICAgICAgICBpZiAodGhpcy5pc1NtYXJ0UG9pbnRlcikgewogICAgICAgICAgICAgIGlmICh2b2lkIDAgPT09IGhhbmRsZS4kJC5zbWFydFB0cikgewogICAgICAgICAgICAgICAgdGhyb3dCaW5kaW5nRXJyb3IoIlBhc3NpbmcgcmF3IHBvaW50ZXIgdG8gc21hcnQgcG9pbnRlciBpcyBpbGxlZ2FsIik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5zaGFyaW5nUG9saWN5KSB7CiAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgIGlmIChoYW5kbGUuJCQuc21hcnRQdHJUeXBlID09PSB0aGlzKSB7CiAgICAgICAgICAgICAgICAgICAgcHRyID0gaGFuZGxlLiQkLnNtYXJ0UHRyOwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHRocm93QmluZGluZ0Vycm9yKCJDYW5ub3QgY29udmVydCBhcmd1bWVudCBvZiB0eXBlICIgKyAoaGFuZGxlLiQkLnNtYXJ0UHRyVHlwZSA/IGhhbmRsZS4kJC5zbWFydFB0clR5cGUubmFtZSA6IGhhbmRsZS4kJC5wdHJUeXBlLm5hbWUpICsgIiB0byBwYXJhbWV0ZXIgdHlwZSAiICsgdGhpcy5uYW1lKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICAgICAgcHRyID0gaGFuZGxlLiQkLnNtYXJ0UHRyOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgICAgaWYgKGhhbmRsZS4kJC5zbWFydFB0clR5cGUgPT09IHRoaXMpIHsKICAgICAgICAgICAgICAgICAgICBwdHIgPSBoYW5kbGUuJCQuc21hcnRQdHI7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGNsb25lZEhhbmRsZSA9IGhhbmRsZVsiY2xvbmUiXSgpOwogICAgICAgICAgICAgICAgICAgIHB0ciA9IHRoaXMucmF3U2hhcmUocHRyLCBfX2VtdmFsX3JlZ2lzdGVyKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgY2xvbmVkSGFuZGxlWyJkZWxldGUiXSgpOwogICAgICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICAgICAgICBpZiAoZGVzdHJ1Y3RvcnMgIT09IG51bGwpIHsKICAgICAgICAgICAgICAgICAgICAgIGRlc3RydWN0b3JzLnB1c2godGhpcy5yYXdEZXN0cnVjdG9yLCBwdHIpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAgIHRocm93QmluZGluZ0Vycm9yKCJVbnN1cHBvcnRpbmcgc2hhcmluZyBwb2xpY3kiKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHB0cjsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIG5vbkNvbnN0Tm9TbWFydFB0clJhd1BvaW50ZXJUb1dpcmVUeXBlKGRlc3RydWN0b3JzLCBoYW5kbGUpIHsKICAgICAgICAgICAgaWYgKGhhbmRsZSA9PT0gbnVsbCkgewogICAgICAgICAgICAgIGlmICh0aGlzLmlzUmVmZXJlbmNlKSB7CiAgICAgICAgICAgICAgICB0aHJvd0JpbmRpbmdFcnJvcigibnVsbCBpcyBub3QgYSB2YWxpZCAiICsgdGhpcy5uYW1lKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCFoYW5kbGUuJCQpIHsKICAgICAgICAgICAgICB0aHJvd0JpbmRpbmdFcnJvcignQ2Fubm90IHBhc3MgIicgKyBfZW1iaW5kX3JlcHIoaGFuZGxlKSArICciIGFzIGEgJyArIHRoaXMubmFtZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCFoYW5kbGUuJCQucHRyKSB7CiAgICAgICAgICAgICAgdGhyb3dCaW5kaW5nRXJyb3IoIkNhbm5vdCBwYXNzIGRlbGV0ZWQgb2JqZWN0IGFzIGEgcG9pbnRlciBvZiB0eXBlICIgKyB0aGlzLm5hbWUpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChoYW5kbGUuJCQucHRyVHlwZS5pc0NvbnN0KSB7CiAgICAgICAgICAgICAgdGhyb3dCaW5kaW5nRXJyb3IoIkNhbm5vdCBjb252ZXJ0IGFyZ3VtZW50IG9mIHR5cGUgIiArIGhhbmRsZS4kJC5wdHJUeXBlLm5hbWUgKyAiIHRvIHBhcmFtZXRlciB0eXBlICIgKyB0aGlzLm5hbWUpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBoYW5kbGVDbGFzcyA9IGhhbmRsZS4kJC5wdHJUeXBlLnJlZ2lzdGVyZWRDbGFzczsKICAgICAgICAgICAgdmFyIHB0ciA9IHVwY2FzdFBvaW50ZXIoaGFuZGxlLiQkLnB0ciwgaGFuZGxlQ2xhc3MsIHRoaXMucmVnaXN0ZXJlZENsYXNzKTsKICAgICAgICAgICAgcmV0dXJuIHB0cjsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIFJlZ2lzdGVyZWRQb2ludGVyX2dldFBvaW50ZWUocHRyKSB7CiAgICAgICAgICAgIGlmICh0aGlzLnJhd0dldFBvaW50ZWUpIHsKICAgICAgICAgICAgICBwdHIgPSB0aGlzLnJhd0dldFBvaW50ZWUocHRyKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gcHRyOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gUmVnaXN0ZXJlZFBvaW50ZXJfZGVzdHJ1Y3RvcihwdHIpIHsKICAgICAgICAgICAgaWYgKHRoaXMucmF3RGVzdHJ1Y3RvcikgewogICAgICAgICAgICAgIHRoaXMucmF3RGVzdHJ1Y3RvcihwdHIpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBSZWdpc3RlcmVkUG9pbnRlcl9kZWxldGVPYmplY3QoaGFuZGxlKSB7CiAgICAgICAgICAgIGlmIChoYW5kbGUgIT09IG51bGwpIHsKICAgICAgICAgICAgICBoYW5kbGVbImRlbGV0ZSJdKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIGRvd25jYXN0UG9pbnRlcihwdHIsIHB0ckNsYXNzLCBkZXNpcmVkQ2xhc3MpIHsKICAgICAgICAgICAgaWYgKHB0ckNsYXNzID09PSBkZXNpcmVkQ2xhc3MpIHsKICAgICAgICAgICAgICByZXR1cm4gcHRyOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh2b2lkIDAgPT09IGRlc2lyZWRDbGFzcy5iYXNlQ2xhc3MpIHsKICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgcnYgPSBkb3duY2FzdFBvaW50ZXIocHRyLCBwdHJDbGFzcywgZGVzaXJlZENsYXNzLmJhc2VDbGFzcyk7CiAgICAgICAgICAgIGlmIChydiA9PT0gbnVsbCkgewogICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBkZXNpcmVkQ2xhc3MuZG93bmNhc3QocnYpOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gZ2V0SW5oZXJpdGVkSW5zdGFuY2VDb3VudCgpIHsKICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHJlZ2lzdGVyZWRJbnN0YW5jZXMpLmxlbmd0aDsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIGdldExpdmVJbmhlcml0ZWRJbnN0YW5jZXMoKSB7CiAgICAgICAgICAgIHZhciBydiA9IFtdOwogICAgICAgICAgICBmb3IgKHZhciBrIGluIHJlZ2lzdGVyZWRJbnN0YW5jZXMpIHsKICAgICAgICAgICAgICBpZiAocmVnaXN0ZXJlZEluc3RhbmNlcy5oYXNPd25Qcm9wZXJ0eShrKSkgewogICAgICAgICAgICAgICAgcnYucHVzaChyZWdpc3RlcmVkSW5zdGFuY2VzW2tdKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHJ2OwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gc2V0RGVsYXlGdW5jdGlvbihmbikgewogICAgICAgICAgICBkZWxheUZ1bmN0aW9uID0gZm47CiAgICAgICAgICAgIGlmIChkZWxldGlvblF1ZXVlLmxlbmd0aCAmJiBkZWxheUZ1bmN0aW9uKSB7CiAgICAgICAgICAgICAgZGVsYXlGdW5jdGlvbihmbHVzaFBlbmRpbmdEZWxldGVzKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gaW5pdF9lbWJpbmQoKSB7CiAgICAgICAgICAgIE1vZHVsZVsiZ2V0SW5oZXJpdGVkSW5zdGFuY2VDb3VudCJdID0gZ2V0SW5oZXJpdGVkSW5zdGFuY2VDb3VudDsKICAgICAgICAgICAgTW9kdWxlWyJnZXRMaXZlSW5oZXJpdGVkSW5zdGFuY2VzIl0gPSBnZXRMaXZlSW5oZXJpdGVkSW5zdGFuY2VzOwogICAgICAgICAgICBNb2R1bGVbImZsdXNoUGVuZGluZ0RlbGV0ZXMiXSA9IGZsdXNoUGVuZGluZ0RlbGV0ZXM7CiAgICAgICAgICAgIE1vZHVsZVsic2V0RGVsYXlGdW5jdGlvbiJdID0gc2V0RGVsYXlGdW5jdGlvbjsKICAgICAgICAgIH0KICAgICAgICAgIHZhciByZWdpc3RlcmVkSW5zdGFuY2VzID0ge307CiAgICAgICAgICBmdW5jdGlvbiBnZXRCYXNlc3RQb2ludGVyKGNsYXNzXywgcHRyKSB7CiAgICAgICAgICAgIGlmIChwdHIgPT09IHZvaWQgMCkgewogICAgICAgICAgICAgIHRocm93QmluZGluZ0Vycm9yKCJwdHIgc2hvdWxkIG5vdCBiZSB1bmRlZmluZWQiKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB3aGlsZSAoY2xhc3NfLmJhc2VDbGFzcykgewogICAgICAgICAgICAgIHB0ciA9IGNsYXNzXy51cGNhc3QocHRyKTsKICAgICAgICAgICAgICBjbGFzc18gPSBjbGFzc18uYmFzZUNsYXNzOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBwdHI7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBnZXRJbmhlcml0ZWRJbnN0YW5jZShjbGFzc18sIHB0cikgewogICAgICAgICAgICBwdHIgPSBnZXRCYXNlc3RQb2ludGVyKGNsYXNzXywgcHRyKTsKICAgICAgICAgICAgcmV0dXJuIHJlZ2lzdGVyZWRJbnN0YW5jZXNbcHRyXTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIG1ha2VDbGFzc0hhbmRsZShwcm90b3R5cGUsIHJlY29yZCkgewogICAgICAgICAgICBpZiAoIXJlY29yZC5wdHJUeXBlIHx8ICFyZWNvcmQucHRyKSB7CiAgICAgICAgICAgICAgdGhyb3dJbnRlcm5hbEVycm9yKCJtYWtlQ2xhc3NIYW5kbGUgcmVxdWlyZXMgcHRyIGFuZCBwdHJUeXBlIik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGhhc1NtYXJ0UHRyVHlwZSA9ICEhcmVjb3JkLnNtYXJ0UHRyVHlwZTsKICAgICAgICAgICAgdmFyIGhhc1NtYXJ0UHRyID0gISFyZWNvcmQuc21hcnRQdHI7CiAgICAgICAgICAgIGlmIChoYXNTbWFydFB0clR5cGUgIT09IGhhc1NtYXJ0UHRyKSB7CiAgICAgICAgICAgICAgdGhyb3dJbnRlcm5hbEVycm9yKCJCb3RoIHNtYXJ0UHRyVHlwZSBhbmQgc21hcnRQdHIgbXVzdCBiZSBzcGVjaWZpZWQiKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZWNvcmQuY291bnQgPSB7IHZhbHVlOiAxIH07CiAgICAgICAgICAgIHJldHVybiBhdHRhY2hGaW5hbGl6ZXIoT2JqZWN0LmNyZWF0ZShwcm90b3R5cGUsIHsgJCQ6IHsgdmFsdWU6IHJlY29yZCB9IH0pKTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIFJlZ2lzdGVyZWRQb2ludGVyX2Zyb21XaXJlVHlwZShwdHIpIHsKICAgICAgICAgICAgdmFyIHJhd1BvaW50ZXIgPSB0aGlzLmdldFBvaW50ZWUocHRyKTsKICAgICAgICAgICAgaWYgKCFyYXdQb2ludGVyKSB7CiAgICAgICAgICAgICAgdGhpcy5kZXN0cnVjdG9yKHB0cik7CiAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIHJlZ2lzdGVyZWRJbnN0YW5jZSA9IGdldEluaGVyaXRlZEluc3RhbmNlKHRoaXMucmVnaXN0ZXJlZENsYXNzLCByYXdQb2ludGVyKTsKICAgICAgICAgICAgaWYgKHZvaWQgMCAhPT0gcmVnaXN0ZXJlZEluc3RhbmNlKSB7CiAgICAgICAgICAgICAgaWYgKDAgPT09IHJlZ2lzdGVyZWRJbnN0YW5jZS4kJC5jb3VudC52YWx1ZSkgewogICAgICAgICAgICAgICAgcmVnaXN0ZXJlZEluc3RhbmNlLiQkLnB0ciA9IHJhd1BvaW50ZXI7CiAgICAgICAgICAgICAgICByZWdpc3RlcmVkSW5zdGFuY2UuJCQuc21hcnRQdHIgPSBwdHI7CiAgICAgICAgICAgICAgICByZXR1cm4gcmVnaXN0ZXJlZEluc3RhbmNlWyJjbG9uZSJdKCk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHZhciBydiA9IHJlZ2lzdGVyZWRJbnN0YW5jZVsiY2xvbmUiXSgpOwogICAgICAgICAgICAgICAgdGhpcy5kZXN0cnVjdG9yKHB0cik7CiAgICAgICAgICAgICAgICByZXR1cm4gcnY7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIG1ha2VEZWZhdWx0SGFuZGxlKCkgewogICAgICAgICAgICAgIGlmICh0aGlzLmlzU21hcnRQb2ludGVyKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbWFrZUNsYXNzSGFuZGxlKHRoaXMucmVnaXN0ZXJlZENsYXNzLmluc3RhbmNlUHJvdG90eXBlLCB7IHB0clR5cGU6IHRoaXMucG9pbnRlZVR5cGUsIHB0cjogcmF3UG9pbnRlciwgc21hcnRQdHJUeXBlOiB0aGlzLCBzbWFydFB0cjogcHRyIH0pOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbWFrZUNsYXNzSGFuZGxlKHRoaXMucmVnaXN0ZXJlZENsYXNzLmluc3RhbmNlUHJvdG90eXBlLCB7IHB0clR5cGU6IHRoaXMsIHB0ciB9KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGFjdHVhbFR5cGUgPSB0aGlzLnJlZ2lzdGVyZWRDbGFzcy5nZXRBY3R1YWxUeXBlKHJhd1BvaW50ZXIpOwogICAgICAgICAgICB2YXIgcmVnaXN0ZXJlZFBvaW50ZXJSZWNvcmQgPSByZWdpc3RlcmVkUG9pbnRlcnNbYWN0dWFsVHlwZV07CiAgICAgICAgICAgIGlmICghcmVnaXN0ZXJlZFBvaW50ZXJSZWNvcmQpIHsKICAgICAgICAgICAgICByZXR1cm4gbWFrZURlZmF1bHRIYW5kbGUuY2FsbCh0aGlzKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgdG9UeXBlOwogICAgICAgICAgICBpZiAodGhpcy5pc0NvbnN0KSB7CiAgICAgICAgICAgICAgdG9UeXBlID0gcmVnaXN0ZXJlZFBvaW50ZXJSZWNvcmQuY29uc3RQb2ludGVyVHlwZTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICB0b1R5cGUgPSByZWdpc3RlcmVkUG9pbnRlclJlY29yZC5wb2ludGVyVHlwZTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgZHAgPSBkb3duY2FzdFBvaW50ZXIocmF3UG9pbnRlciwgdGhpcy5yZWdpc3RlcmVkQ2xhc3MsIHRvVHlwZS5yZWdpc3RlcmVkQ2xhc3MpOwogICAgICAgICAgICBpZiAoZHAgPT09IG51bGwpIHsKICAgICAgICAgICAgICByZXR1cm4gbWFrZURlZmF1bHRIYW5kbGUuY2FsbCh0aGlzKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodGhpcy5pc1NtYXJ0UG9pbnRlcikgewogICAgICAgICAgICAgIHJldHVybiBtYWtlQ2xhc3NIYW5kbGUodG9UeXBlLnJlZ2lzdGVyZWRDbGFzcy5pbnN0YW5jZVByb3RvdHlwZSwgeyBwdHJUeXBlOiB0b1R5cGUsIHB0cjogZHAsIHNtYXJ0UHRyVHlwZTogdGhpcywgc21hcnRQdHI6IHB0ciB9KTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICByZXR1cm4gbWFrZUNsYXNzSGFuZGxlKHRvVHlwZS5yZWdpc3RlcmVkQ2xhc3MuaW5zdGFuY2VQcm90b3R5cGUsIHsgcHRyVHlwZTogdG9UeXBlLCBwdHI6IGRwIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBpbml0X1JlZ2lzdGVyZWRQb2ludGVyKCkgewogICAgICAgICAgICBSZWdpc3RlcmVkUG9pbnRlci5wcm90b3R5cGUuZ2V0UG9pbnRlZSA9IFJlZ2lzdGVyZWRQb2ludGVyX2dldFBvaW50ZWU7CiAgICAgICAgICAgIFJlZ2lzdGVyZWRQb2ludGVyLnByb3RvdHlwZS5kZXN0cnVjdG9yID0gUmVnaXN0ZXJlZFBvaW50ZXJfZGVzdHJ1Y3RvcjsKICAgICAgICAgICAgUmVnaXN0ZXJlZFBvaW50ZXIucHJvdG90eXBlWyJhcmdQYWNrQWR2YW5jZSJdID0gODsKICAgICAgICAgICAgUmVnaXN0ZXJlZFBvaW50ZXIucHJvdG90eXBlWyJyZWFkVmFsdWVGcm9tUG9pbnRlciJdID0gc2ltcGxlUmVhZFZhbHVlRnJvbVBvaW50ZXI7CiAgICAgICAgICAgIFJlZ2lzdGVyZWRQb2ludGVyLnByb3RvdHlwZVsiZGVsZXRlT2JqZWN0Il0gPSBSZWdpc3RlcmVkUG9pbnRlcl9kZWxldGVPYmplY3Q7CiAgICAgICAgICAgIFJlZ2lzdGVyZWRQb2ludGVyLnByb3RvdHlwZVsiZnJvbVdpcmVUeXBlIl0gPSBSZWdpc3RlcmVkUG9pbnRlcl9mcm9tV2lyZVR5cGU7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBSZWdpc3RlcmVkUG9pbnRlcihuYW1lLCByZWdpc3RlcmVkQ2xhc3MsIGlzUmVmZXJlbmNlLCBpc0NvbnN0LCBpc1NtYXJ0UG9pbnRlciwgcG9pbnRlZVR5cGUsIHNoYXJpbmdQb2xpY3ksIHJhd0dldFBvaW50ZWUsIHJhd0NvbnN0cnVjdG9yLCByYXdTaGFyZSwgcmF3RGVzdHJ1Y3RvcikgewogICAgICAgICAgICB0aGlzLm5hbWUgPSBuYW1lOwogICAgICAgICAgICB0aGlzLnJlZ2lzdGVyZWRDbGFzcyA9IHJlZ2lzdGVyZWRDbGFzczsKICAgICAgICAgICAgdGhpcy5pc1JlZmVyZW5jZSA9IGlzUmVmZXJlbmNlOwogICAgICAgICAgICB0aGlzLmlzQ29uc3QgPSBpc0NvbnN0OwogICAgICAgICAgICB0aGlzLmlzU21hcnRQb2ludGVyID0gaXNTbWFydFBvaW50ZXI7CiAgICAgICAgICAgIHRoaXMucG9pbnRlZVR5cGUgPSBwb2ludGVlVHlwZTsKICAgICAgICAgICAgdGhpcy5zaGFyaW5nUG9saWN5ID0gc2hhcmluZ1BvbGljeTsKICAgICAgICAgICAgdGhpcy5yYXdHZXRQb2ludGVlID0gcmF3R2V0UG9pbnRlZTsKICAgICAgICAgICAgdGhpcy5yYXdDb25zdHJ1Y3RvciA9IHJhd0NvbnN0cnVjdG9yOwogICAgICAgICAgICB0aGlzLnJhd1NoYXJlID0gcmF3U2hhcmU7CiAgICAgICAgICAgIHRoaXMucmF3RGVzdHJ1Y3RvciA9IHJhd0Rlc3RydWN0b3I7CiAgICAgICAgICAgIGlmICghaXNTbWFydFBvaW50ZXIgJiYgcmVnaXN0ZXJlZENsYXNzLmJhc2VDbGFzcyA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgICAgaWYgKGlzQ29uc3QpIHsKICAgICAgICAgICAgICAgIHRoaXNbInRvV2lyZVR5cGUiXSA9IGNvbnN0Tm9TbWFydFB0clJhd1BvaW50ZXJUb1dpcmVUeXBlOwogICAgICAgICAgICAgICAgdGhpcy5kZXN0cnVjdG9yRnVuY3Rpb24gPSBudWxsOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aGlzWyJ0b1dpcmVUeXBlIl0gPSBub25Db25zdE5vU21hcnRQdHJSYXdQb2ludGVyVG9XaXJlVHlwZTsKICAgICAgICAgICAgICAgIHRoaXMuZGVzdHJ1Y3RvckZ1bmN0aW9uID0gbnVsbDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgdGhpc1sidG9XaXJlVHlwZSJdID0gZ2VuZXJpY1BvaW50ZXJUb1dpcmVUeXBlOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiByZXBsYWNlUHVibGljU3ltYm9sKG5hbWUsIHZhbHVlLCBudW1Bcmd1bWVudHMpIHsKICAgICAgICAgICAgaWYgKCFNb2R1bGUuaGFzT3duUHJvcGVydHkobmFtZSkpIHsKICAgICAgICAgICAgICB0aHJvd0ludGVybmFsRXJyb3IoIlJlcGxhY2luZyBub25leGlzdGFudCBwdWJsaWMgc3ltYm9sIik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHZvaWQgMCAhPT0gTW9kdWxlW25hbWVdLm92ZXJsb2FkVGFibGUgJiYgdm9pZCAwICE9PSBudW1Bcmd1bWVudHMpIHsKICAgICAgICAgICAgICBNb2R1bGVbbmFtZV0ub3ZlcmxvYWRUYWJsZVtudW1Bcmd1bWVudHNdID0gdmFsdWU7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgTW9kdWxlW25hbWVdID0gdmFsdWU7CiAgICAgICAgICAgICAgTW9kdWxlW25hbWVdLmFyZ0NvdW50ID0gbnVtQXJndW1lbnRzOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBkeW5DYWxsTGVnYWN5KHNpZywgcHRyLCBhcmdzKSB7CiAgICAgICAgICAgIHZhciBmID0gTW9kdWxlWyJkeW5DYWxsXyIgKyBzaWddOwogICAgICAgICAgICByZXR1cm4gYXJncyAmJiBhcmdzLmxlbmd0aCA/IGYuYXBwbHkobnVsbCwgW3B0cl0uY29uY2F0KGFyZ3MpKSA6IGYuY2FsbChudWxsLCBwdHIpOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gZHluQ2FsbChzaWcsIHB0ciwgYXJncykgewogICAgICAgICAgICBpZiAoc2lnLmluZGV4T2YoImoiKSAhPSAtMSkgewogICAgICAgICAgICAgIHJldHVybiBkeW5DYWxsTGVnYWN5KHNpZywgcHRyLCBhcmdzKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gd2FzbVRhYmxlLmdldChwdHIpLmFwcGx5KG51bGwsIGFyZ3MpOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gZ2V0RHluQ2FsbGVyKHNpZywgcHRyKSB7CiAgICAgICAgICAgIHZhciBhcmdDYWNoZSA9IFtdOwogICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgYXJnQ2FjaGUubGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsKICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgYXJnQ2FjaGVbaV0gPSBhcmd1bWVudHNbaV07CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiBkeW5DYWxsKHNpZywgcHRyLCBhcmdDYWNoZSk7CiAgICAgICAgICAgIH07CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBlbWJpbmRfX3JlcXVpcmVGdW5jdGlvbihzaWduYXR1cmUsIHJhd0Z1bmN0aW9uKSB7CiAgICAgICAgICAgIHNpZ25hdHVyZSA9IHJlYWRMYXRpbjFTdHJpbmcoc2lnbmF0dXJlKTsKICAgICAgICAgICAgZnVuY3Rpb24gbWFrZUR5bkNhbGxlcigpIHsKICAgICAgICAgICAgICBpZiAoc2lnbmF0dXJlLmluZGV4T2YoImoiKSAhPSAtMSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGdldER5bkNhbGxlcihzaWduYXR1cmUsIHJhd0Z1bmN0aW9uKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuIHdhc21UYWJsZS5nZXQocmF3RnVuY3Rpb24pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBmcCA9IG1ha2VEeW5DYWxsZXIoKTsKICAgICAgICAgICAgaWYgKHR5cGVvZiBmcCAhPT0gImZ1bmN0aW9uIikgewogICAgICAgICAgICAgIHRocm93QmluZGluZ0Vycm9yKCJ1bmtub3duIGZ1bmN0aW9uIHBvaW50ZXIgd2l0aCBzaWduYXR1cmUgIiArIHNpZ25hdHVyZSArICI6ICIgKyByYXdGdW5jdGlvbik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGZwOwogICAgICAgICAgfQogICAgICAgICAgdmFyIFVuYm91bmRUeXBlRXJyb3IgPSB2b2lkIDA7CiAgICAgICAgICBmdW5jdGlvbiBnZXRUeXBlTmFtZSh0eXBlKSB7CiAgICAgICAgICAgIHZhciBwdHIgPSBfX19nZXRUeXBlTmFtZSh0eXBlKTsKICAgICAgICAgICAgdmFyIHJ2ID0gcmVhZExhdGluMVN0cmluZyhwdHIpOwogICAgICAgICAgICBfZnJlZShwdHIpOwogICAgICAgICAgICByZXR1cm4gcnY7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiB0aHJvd1VuYm91bmRUeXBlRXJyb3IobWVzc2FnZSwgdHlwZXMpIHsKICAgICAgICAgICAgdmFyIHVuYm91bmRUeXBlcyA9IFtdOwogICAgICAgICAgICB2YXIgc2VlbiA9IHt9OwogICAgICAgICAgICBmdW5jdGlvbiB2aXNpdCh0eXBlKSB7CiAgICAgICAgICAgICAgaWYgKHNlZW5bdHlwZV0pIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKHJlZ2lzdGVyZWRUeXBlc1t0eXBlXSkgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAodHlwZURlcGVuZGVuY2llc1t0eXBlXSkgewogICAgICAgICAgICAgICAgdHlwZURlcGVuZGVuY2llc1t0eXBlXS5mb3JFYWNoKHZpc2l0KTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdW5ib3VuZFR5cGVzLnB1c2godHlwZSk7CiAgICAgICAgICAgICAgc2Vlblt0eXBlXSA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdHlwZXMuZm9yRWFjaCh2aXNpdCk7CiAgICAgICAgICAgIHRocm93IG5ldyBVbmJvdW5kVHlwZUVycm9yKG1lc3NhZ2UgKyAiOiAiICsgdW5ib3VuZFR5cGVzLm1hcChnZXRUeXBlTmFtZSkuam9pbihbIiwgIl0pKTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX2NsYXNzKHJhd1R5cGUsIHJhd1BvaW50ZXJUeXBlLCByYXdDb25zdFBvaW50ZXJUeXBlLCBiYXNlQ2xhc3NSYXdUeXBlLCBnZXRBY3R1YWxUeXBlU2lnbmF0dXJlLCBnZXRBY3R1YWxUeXBlLCB1cGNhc3RTaWduYXR1cmUsIHVwY2FzdCwgZG93bmNhc3RTaWduYXR1cmUsIGRvd25jYXN0LCBuYW1lLCBkZXN0cnVjdG9yU2lnbmF0dXJlLCByYXdEZXN0cnVjdG9yKSB7CiAgICAgICAgICAgIG5hbWUgPSByZWFkTGF0aW4xU3RyaW5nKG5hbWUpOwogICAgICAgICAgICBnZXRBY3R1YWxUeXBlID0gZW1iaW5kX19yZXF1aXJlRnVuY3Rpb24oZ2V0QWN0dWFsVHlwZVNpZ25hdHVyZSwgZ2V0QWN0dWFsVHlwZSk7CiAgICAgICAgICAgIGlmICh1cGNhc3QpIHsKICAgICAgICAgICAgICB1cGNhc3QgPSBlbWJpbmRfX3JlcXVpcmVGdW5jdGlvbih1cGNhc3RTaWduYXR1cmUsIHVwY2FzdCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGRvd25jYXN0KSB7CiAgICAgICAgICAgICAgZG93bmNhc3QgPSBlbWJpbmRfX3JlcXVpcmVGdW5jdGlvbihkb3duY2FzdFNpZ25hdHVyZSwgZG93bmNhc3QpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJhd0Rlc3RydWN0b3IgPSBlbWJpbmRfX3JlcXVpcmVGdW5jdGlvbihkZXN0cnVjdG9yU2lnbmF0dXJlLCByYXdEZXN0cnVjdG9yKTsKICAgICAgICAgICAgdmFyIGxlZ2FsRnVuY3Rpb25OYW1lID0gbWFrZUxlZ2FsRnVuY3Rpb25OYW1lKG5hbWUpOwogICAgICAgICAgICBleHBvc2VQdWJsaWNTeW1ib2wobGVnYWxGdW5jdGlvbk5hbWUsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgIHRocm93VW5ib3VuZFR5cGVFcnJvcigiQ2Fubm90IGNvbnN0cnVjdCAiICsgbmFtZSArICIgZHVlIHRvIHVuYm91bmQgdHlwZXMiLCBbYmFzZUNsYXNzUmF3VHlwZV0pOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgd2hlbkRlcGVuZGVudFR5cGVzQXJlUmVzb2x2ZWQoW3Jhd1R5cGUsIHJhd1BvaW50ZXJUeXBlLCByYXdDb25zdFBvaW50ZXJUeXBlXSwgYmFzZUNsYXNzUmF3VHlwZSA/IFtiYXNlQ2xhc3NSYXdUeXBlXSA6IFtdLCBmdW5jdGlvbihiYXNlKSB7CiAgICAgICAgICAgICAgYmFzZSA9IGJhc2VbMF07CiAgICAgICAgICAgICAgdmFyIGJhc2VDbGFzczsKICAgICAgICAgICAgICB2YXIgYmFzZVByb3RvdHlwZTsKICAgICAgICAgICAgICBpZiAoYmFzZUNsYXNzUmF3VHlwZSkgewogICAgICAgICAgICAgICAgYmFzZUNsYXNzID0gYmFzZS5yZWdpc3RlcmVkQ2xhc3M7CiAgICAgICAgICAgICAgICBiYXNlUHJvdG90eXBlID0gYmFzZUNsYXNzLmluc3RhbmNlUHJvdG90eXBlOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBiYXNlUHJvdG90eXBlID0gQ2xhc3NIYW5kbGUucHJvdG90eXBlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB2YXIgY29uc3RydWN0b3IgPSBjcmVhdGVOYW1lZEZ1bmN0aW9uKGxlZ2FsRnVuY3Rpb25OYW1lLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGlmIChPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykgIT09IGluc3RhbmNlUHJvdG90eXBlKSB7CiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBCaW5kaW5nRXJyb3IoIlVzZSAnbmV3JyB0byBjb25zdHJ1Y3QgIiArIG5hbWUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHZvaWQgMCA9PT0gcmVnaXN0ZXJlZENsYXNzLmNvbnN0cnVjdG9yX2JvZHkpIHsKICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEJpbmRpbmdFcnJvcihuYW1lICsgIiBoYXMgbm8gYWNjZXNzaWJsZSBjb25zdHJ1Y3RvciIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIGJvZHkgPSByZWdpc3RlcmVkQ2xhc3MuY29uc3RydWN0b3JfYm9keVthcmd1bWVudHMubGVuZ3RoXTsKICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgPT09IGJvZHkpIHsKICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEJpbmRpbmdFcnJvcigiVHJpZWQgdG8gaW52b2tlIGN0b3Igb2YgIiArIG5hbWUgKyAiIHdpdGggaW52YWxpZCBudW1iZXIgb2YgcGFyYW1ldGVycyAoIiArIGFyZ3VtZW50cy5sZW5ndGggKyAiKSAtIGV4cGVjdGVkICgiICsgT2JqZWN0LmtleXMocmVnaXN0ZXJlZENsYXNzLmNvbnN0cnVjdG9yX2JvZHkpLnRvU3RyaW5nKCkgKyAiKSBwYXJhbWV0ZXJzIGluc3RlYWQhIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gYm9keS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIHZhciBpbnN0YW5jZVByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoYmFzZVByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogY29uc3RydWN0b3IgfSB9KTsKICAgICAgICAgICAgICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBpbnN0YW5jZVByb3RvdHlwZTsKICAgICAgICAgICAgICB2YXIgcmVnaXN0ZXJlZENsYXNzID0gbmV3IFJlZ2lzdGVyZWRDbGFzcyhuYW1lLCBjb25zdHJ1Y3RvciwgaW5zdGFuY2VQcm90b3R5cGUsIHJhd0Rlc3RydWN0b3IsIGJhc2VDbGFzcywgZ2V0QWN0dWFsVHlwZSwgdXBjYXN0LCBkb3duY2FzdCk7CiAgICAgICAgICAgICAgdmFyIHJlZmVyZW5jZUNvbnZlcnRlciA9IG5ldyBSZWdpc3RlcmVkUG9pbnRlcihuYW1lLCByZWdpc3RlcmVkQ2xhc3MsIHRydWUsIGZhbHNlLCBmYWxzZSk7CiAgICAgICAgICAgICAgdmFyIHBvaW50ZXJDb252ZXJ0ZXIgPSBuZXcgUmVnaXN0ZXJlZFBvaW50ZXIobmFtZSArICIqIiwgcmVnaXN0ZXJlZENsYXNzLCBmYWxzZSwgZmFsc2UsIGZhbHNlKTsKICAgICAgICAgICAgICB2YXIgY29uc3RQb2ludGVyQ29udmVydGVyID0gbmV3IFJlZ2lzdGVyZWRQb2ludGVyKG5hbWUgKyAiIGNvbnN0KiIsIHJlZ2lzdGVyZWRDbGFzcywgZmFsc2UsIHRydWUsIGZhbHNlKTsKICAgICAgICAgICAgICByZWdpc3RlcmVkUG9pbnRlcnNbcmF3VHlwZV0gPSB7IHBvaW50ZXJUeXBlOiBwb2ludGVyQ29udmVydGVyLCBjb25zdFBvaW50ZXJUeXBlOiBjb25zdFBvaW50ZXJDb252ZXJ0ZXIgfTsKICAgICAgICAgICAgICByZXBsYWNlUHVibGljU3ltYm9sKGxlZ2FsRnVuY3Rpb25OYW1lLCBjb25zdHJ1Y3Rvcik7CiAgICAgICAgICAgICAgcmV0dXJuIFtyZWZlcmVuY2VDb252ZXJ0ZXIsIHBvaW50ZXJDb252ZXJ0ZXIsIGNvbnN0UG9pbnRlckNvbnZlcnRlcl07CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gaGVhcDMyVmVjdG9yVG9BcnJheShjb3VudCwgZmlyc3RFbGVtZW50KSB7CiAgICAgICAgICAgIHZhciBhcnJheSA9IFtdOwogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspIHsKICAgICAgICAgICAgICBhcnJheS5wdXNoKEhFQVAzMlsoZmlyc3RFbGVtZW50ID4+IDIpICsgaV0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBhcnJheTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX2NsYXNzX2NvbnN0cnVjdG9yKHJhd0NsYXNzVHlwZSwgYXJnQ291bnQsIHJhd0FyZ1R5cGVzQWRkciwgaW52b2tlclNpZ25hdHVyZSwgaW52b2tlciwgcmF3Q29uc3RydWN0b3IpIHsKICAgICAgICAgICAgYXNzZXJ0KGFyZ0NvdW50ID4gMCk7CiAgICAgICAgICAgIHZhciByYXdBcmdUeXBlcyA9IGhlYXAzMlZlY3RvclRvQXJyYXkoYXJnQ291bnQsIHJhd0FyZ1R5cGVzQWRkcik7CiAgICAgICAgICAgIGludm9rZXIgPSBlbWJpbmRfX3JlcXVpcmVGdW5jdGlvbihpbnZva2VyU2lnbmF0dXJlLCBpbnZva2VyKTsKICAgICAgICAgICAgdmFyIGFyZ3MgPSBbcmF3Q29uc3RydWN0b3JdOwogICAgICAgICAgICB2YXIgZGVzdHJ1Y3RvcnMgPSBbXTsKICAgICAgICAgICAgd2hlbkRlcGVuZGVudFR5cGVzQXJlUmVzb2x2ZWQoW10sIFtyYXdDbGFzc1R5cGVdLCBmdW5jdGlvbihjbGFzc1R5cGUpIHsKICAgICAgICAgICAgICBjbGFzc1R5cGUgPSBjbGFzc1R5cGVbMF07CiAgICAgICAgICAgICAgdmFyIGh1bWFuTmFtZSA9ICJjb25zdHJ1Y3RvciAiICsgY2xhc3NUeXBlLm5hbWU7CiAgICAgICAgICAgICAgaWYgKHZvaWQgMCA9PT0gY2xhc3NUeXBlLnJlZ2lzdGVyZWRDbGFzcy5jb25zdHJ1Y3Rvcl9ib2R5KSB7CiAgICAgICAgICAgICAgICBjbGFzc1R5cGUucmVnaXN0ZXJlZENsYXNzLmNvbnN0cnVjdG9yX2JvZHkgPSBbXTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKHZvaWQgMCAhPT0gY2xhc3NUeXBlLnJlZ2lzdGVyZWRDbGFzcy5jb25zdHJ1Y3Rvcl9ib2R5W2FyZ0NvdW50IC0gMV0pIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBCaW5kaW5nRXJyb3IoIkNhbm5vdCByZWdpc3RlciBtdWx0aXBsZSBjb25zdHJ1Y3RvcnMgd2l0aCBpZGVudGljYWwgbnVtYmVyIG9mIHBhcmFtZXRlcnMgKCIgKyAoYXJnQ291bnQgLSAxKSArICIpIGZvciBjbGFzcyAnIiArIGNsYXNzVHlwZS5uYW1lICsgIichIE92ZXJsb2FkIHJlc29sdXRpb24gaXMgY3VycmVudGx5IG9ubHkgcGVyZm9ybWVkIHVzaW5nIHRoZSBwYXJhbWV0ZXIgY291bnQsIG5vdCBhY3R1YWwgdHlwZSBpbmZvISIpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBjbGFzc1R5cGUucmVnaXN0ZXJlZENsYXNzLmNvbnN0cnVjdG9yX2JvZHlbYXJnQ291bnQgLSAxXSA9IGZ1bmN0aW9uIHVuYm91bmRUeXBlSGFuZGxlcigpIHsKICAgICAgICAgICAgICAgIHRocm93VW5ib3VuZFR5cGVFcnJvcigiQ2Fubm90IGNvbnN0cnVjdCAiICsgY2xhc3NUeXBlLm5hbWUgKyAiIGR1ZSB0byB1bmJvdW5kIHR5cGVzIiwgcmF3QXJnVHlwZXMpOwogICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgd2hlbkRlcGVuZGVudFR5cGVzQXJlUmVzb2x2ZWQoW10sIHJhd0FyZ1R5cGVzLCBmdW5jdGlvbihhcmdUeXBlcykgewogICAgICAgICAgICAgICAgY2xhc3NUeXBlLnJlZ2lzdGVyZWRDbGFzcy5jb25zdHJ1Y3Rvcl9ib2R5W2FyZ0NvdW50IC0gMV0gPSBmdW5jdGlvbiBjb25zdHJ1Y3Rvcl9ib2R5KCkgewogICAgICAgICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCAhPT0gYXJnQ291bnQgLSAxKSB7CiAgICAgICAgICAgICAgICAgICAgdGhyb3dCaW5kaW5nRXJyb3IoaHVtYW5OYW1lICsgIiBjYWxsZWQgd2l0aCAiICsgYXJndW1lbnRzLmxlbmd0aCArICIgYXJndW1lbnRzLCBleHBlY3RlZCAiICsgKGFyZ0NvdW50IC0gMSkpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGRlc3RydWN0b3JzLmxlbmd0aCA9IDA7CiAgICAgICAgICAgICAgICAgIGFyZ3MubGVuZ3RoID0gYXJnQ291bnQ7CiAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJnQ291bnQ7ICsraSkgewogICAgICAgICAgICAgICAgICAgIGFyZ3NbaV0gPSBhcmdUeXBlc1tpXVsidG9XaXJlVHlwZSJdKGRlc3RydWN0b3JzLCBhcmd1bWVudHNbaSAtIDFdKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB2YXIgcHRyID0gaW52b2tlci5hcHBseShudWxsLCBhcmdzKTsKICAgICAgICAgICAgICAgICAgcnVuRGVzdHJ1Y3RvcnMoZGVzdHJ1Y3RvcnMpOwogICAgICAgICAgICAgICAgICByZXR1cm4gYXJnVHlwZXNbMF1bImZyb21XaXJlVHlwZSJdKHB0cik7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgcmV0dXJuIFtdOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIHJldHVybiBbXTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBuZXdfKGNvbnN0cnVjdG9yLCBhcmd1bWVudExpc3QpIHsKICAgICAgICAgICAgaWYgKCEoY29uc3RydWN0b3IgaW5zdGFuY2VvZiBGdW5jdGlvbikpIHsKICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJuZXdfIGNhbGxlZCB3aXRoIGNvbnN0cnVjdG9yIHR5cGUgIiArIHR5cGVvZiBjb25zdHJ1Y3RvciArICIgd2hpY2ggaXMgbm90IGEgZnVuY3Rpb24iKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgZHVtbXkgPSBjcmVhdGVOYW1lZEZ1bmN0aW9uKGNvbnN0cnVjdG9yLm5hbWUgfHwgInVua25vd25GdW5jdGlvbk5hbWUiLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGR1bW15LnByb3RvdHlwZSA9IGNvbnN0cnVjdG9yLnByb3RvdHlwZTsKICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyBkdW1teSgpOwogICAgICAgICAgICB2YXIgciA9IGNvbnN0cnVjdG9yLmFwcGx5KG9iaiwgYXJndW1lbnRMaXN0KTsKICAgICAgICAgICAgcmV0dXJuIHIgaW5zdGFuY2VvZiBPYmplY3QgPyByIDogb2JqOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gY3JhZnRJbnZva2VyRnVuY3Rpb24oaHVtYW5OYW1lLCBhcmdUeXBlcywgY2xhc3NUeXBlLCBjcHBJbnZva2VyRnVuYywgY3BwVGFyZ2V0RnVuYykgewogICAgICAgICAgICB2YXIgYXJnQ291bnQgPSBhcmdUeXBlcy5sZW5ndGg7CiAgICAgICAgICAgIGlmIChhcmdDb3VudCA8IDIpIHsKICAgICAgICAgICAgICB0aHJvd0JpbmRpbmdFcnJvcigiYXJnVHlwZXMgYXJyYXkgc2l6ZSBtaXNtYXRjaCEgTXVzdCBhdCBsZWFzdCBnZXQgcmV0dXJuIHZhbHVlIGFuZCAndGhpcycgdHlwZXMhIik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGlzQ2xhc3NNZXRob2RGdW5jID0gYXJnVHlwZXNbMV0gIT09IG51bGwgJiYgY2xhc3NUeXBlICE9PSBudWxsOwogICAgICAgICAgICB2YXIgbmVlZHNEZXN0cnVjdG9yU3RhY2sgPSBmYWxzZTsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmdUeXBlcy5sZW5ndGg7ICsraSkgewogICAgICAgICAgICAgIGlmIChhcmdUeXBlc1tpXSAhPT0gbnVsbCAmJiBhcmdUeXBlc1tpXS5kZXN0cnVjdG9yRnVuY3Rpb24gPT09IHZvaWQgMCkgewogICAgICAgICAgICAgICAgbmVlZHNEZXN0cnVjdG9yU3RhY2sgPSB0cnVlOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciByZXR1cm5zID0gYXJnVHlwZXNbMF0ubmFtZSAhPT0gInZvaWQiOwogICAgICAgICAgICB2YXIgYXJnc0xpc3QgPSAiIjsKICAgICAgICAgICAgdmFyIGFyZ3NMaXN0V2lyZWQgPSAiIjsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdDb3VudCAtIDI7ICsraSkgewogICAgICAgICAgICAgIGFyZ3NMaXN0ICs9IChpICE9PSAwID8gIiwgIiA6ICIiKSArICJhcmciICsgaTsKICAgICAgICAgICAgICBhcmdzTGlzdFdpcmVkICs9IChpICE9PSAwID8gIiwgIiA6ICIiKSArICJhcmciICsgaSArICJXaXJlZCI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGludm9rZXJGbkJvZHkgPSAicmV0dXJuIGZ1bmN0aW9uICIgKyBtYWtlTGVnYWxGdW5jdGlvbk5hbWUoaHVtYW5OYW1lKSArICIoIiArIGFyZ3NMaXN0ICsgIikge1xuaWYgKGFyZ3VtZW50cy5sZW5ndGggIT09ICIgKyAoYXJnQ291bnQgLSAyKSArICIpIHtcbnRocm93QmluZGluZ0Vycm9yKCdmdW5jdGlvbiAiICsgaHVtYW5OYW1lICsgIiBjYWxsZWQgd2l0aCAnICsgYXJndW1lbnRzLmxlbmd0aCArICcgYXJndW1lbnRzLCBleHBlY3RlZCAiICsgKGFyZ0NvdW50IC0gMikgKyAiIGFyZ3MhJyk7XG59XG4iOwogICAgICAgICAgICBpZiAobmVlZHNEZXN0cnVjdG9yU3RhY2spIHsKICAgICAgICAgICAgICBpbnZva2VyRm5Cb2R5ICs9ICJ2YXIgZGVzdHJ1Y3RvcnMgPSBbXTtcbiI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGR0b3JTdGFjayA9IG5lZWRzRGVzdHJ1Y3RvclN0YWNrID8gImRlc3RydWN0b3JzIiA6ICJudWxsIjsKICAgICAgICAgICAgdmFyIGFyZ3MxID0gWyJ0aHJvd0JpbmRpbmdFcnJvciIsICJpbnZva2VyIiwgImZuIiwgInJ1bkRlc3RydWN0b3JzIiwgInJldFR5cGUiLCAiY2xhc3NQYXJhbSJdOwogICAgICAgICAgICB2YXIgYXJnczIgPSBbdGhyb3dCaW5kaW5nRXJyb3IsIGNwcEludm9rZXJGdW5jLCBjcHBUYXJnZXRGdW5jLCBydW5EZXN0cnVjdG9ycywgYXJnVHlwZXNbMF0sIGFyZ1R5cGVzWzFdXTsKICAgICAgICAgICAgaWYgKGlzQ2xhc3NNZXRob2RGdW5jKSB7CiAgICAgICAgICAgICAgaW52b2tlckZuQm9keSArPSAidmFyIHRoaXNXaXJlZCA9IGNsYXNzUGFyYW0udG9XaXJlVHlwZSgiICsgZHRvclN0YWNrICsgIiwgdGhpcyk7XG4iOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJnQ291bnQgLSAyOyArK2kpIHsKICAgICAgICAgICAgICBpbnZva2VyRm5Cb2R5ICs9ICJ2YXIgYXJnIiArIGkgKyAiV2lyZWQgPSBhcmdUeXBlIiArIGkgKyAiLnRvV2lyZVR5cGUoIiArIGR0b3JTdGFjayArICIsIGFyZyIgKyBpICsgIik7IC8vICIgKyBhcmdUeXBlc1tpICsgMl0ubmFtZSArICJcbiI7CiAgICAgICAgICAgICAgYXJnczEucHVzaCgiYXJnVHlwZSIgKyBpKTsKICAgICAgICAgICAgICBhcmdzMi5wdXNoKGFyZ1R5cGVzW2kgKyAyXSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGlzQ2xhc3NNZXRob2RGdW5jKSB7CiAgICAgICAgICAgICAgYXJnc0xpc3RXaXJlZCA9ICJ0aGlzV2lyZWQiICsgKGFyZ3NMaXN0V2lyZWQubGVuZ3RoID4gMCA/ICIsICIgOiAiIikgKyBhcmdzTGlzdFdpcmVkOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGludm9rZXJGbkJvZHkgKz0gKHJldHVybnMgPyAidmFyIHJ2ID0gIiA6ICIiKSArICJpbnZva2VyKGZuIiArIChhcmdzTGlzdFdpcmVkLmxlbmd0aCA+IDAgPyAiLCAiIDogIiIpICsgYXJnc0xpc3RXaXJlZCArICIpO1xuIjsKICAgICAgICAgICAgaWYgKG5lZWRzRGVzdHJ1Y3RvclN0YWNrKSB7CiAgICAgICAgICAgICAgaW52b2tlckZuQm9keSArPSAicnVuRGVzdHJ1Y3RvcnMoZGVzdHJ1Y3RvcnMpO1xuIjsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBmb3IgKHZhciBpID0gaXNDbGFzc01ldGhvZEZ1bmMgPyAxIDogMjsgaSA8IGFyZ1R5cGVzLmxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgICAgICB2YXIgcGFyYW1OYW1lID0gaSA9PT0gMSA/ICJ0aGlzV2lyZWQiIDogImFyZyIgKyAoaSAtIDIpICsgIldpcmVkIjsKICAgICAgICAgICAgICAgIGlmIChhcmdUeXBlc1tpXS5kZXN0cnVjdG9yRnVuY3Rpb24gIT09IG51bGwpIHsKICAgICAgICAgICAgICAgICAgaW52b2tlckZuQm9keSArPSBwYXJhbU5hbWUgKyAiX2R0b3IoIiArIHBhcmFtTmFtZSArICIpOyAvLyAiICsgYXJnVHlwZXNbaV0ubmFtZSArICJcbiI7CiAgICAgICAgICAgICAgICAgIGFyZ3MxLnB1c2gocGFyYW1OYW1lICsgIl9kdG9yIik7CiAgICAgICAgICAgICAgICAgIGFyZ3MyLnB1c2goYXJnVHlwZXNbaV0uZGVzdHJ1Y3RvckZ1bmN0aW9uKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHJldHVybnMpIHsKICAgICAgICAgICAgICBpbnZva2VyRm5Cb2R5ICs9ICJ2YXIgcmV0ID0gcmV0VHlwZS5mcm9tV2lyZVR5cGUocnYpO1xucmV0dXJuIHJldDtcbiI7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaW52b2tlckZuQm9keSArPSAifVxuIjsKICAgICAgICAgICAgYXJnczEucHVzaChpbnZva2VyRm5Cb2R5KTsKICAgICAgICAgICAgdmFyIGludm9rZXJGdW5jdGlvbiA9IG5ld18oRnVuY3Rpb24sIGFyZ3MxKS5hcHBseShudWxsLCBhcmdzMik7CiAgICAgICAgICAgIHJldHVybiBpbnZva2VyRnVuY3Rpb247CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBfX2VtYmluZF9yZWdpc3Rlcl9jbGFzc19mdW5jdGlvbihyYXdDbGFzc1R5cGUsIG1ldGhvZE5hbWUsIGFyZ0NvdW50LCByYXdBcmdUeXBlc0FkZHIsIGludm9rZXJTaWduYXR1cmUsIHJhd0ludm9rZXIsIGNvbnRleHQsIGlzUHVyZVZpcnR1YWwpIHsKICAgICAgICAgICAgdmFyIHJhd0FyZ1R5cGVzID0gaGVhcDMyVmVjdG9yVG9BcnJheShhcmdDb3VudCwgcmF3QXJnVHlwZXNBZGRyKTsKICAgICAgICAgICAgbWV0aG9kTmFtZSA9IHJlYWRMYXRpbjFTdHJpbmcobWV0aG9kTmFtZSk7CiAgICAgICAgICAgIHJhd0ludm9rZXIgPSBlbWJpbmRfX3JlcXVpcmVGdW5jdGlvbihpbnZva2VyU2lnbmF0dXJlLCByYXdJbnZva2VyKTsKICAgICAgICAgICAgd2hlbkRlcGVuZGVudFR5cGVzQXJlUmVzb2x2ZWQoW10sIFtyYXdDbGFzc1R5cGVdLCBmdW5jdGlvbihjbGFzc1R5cGUpIHsKICAgICAgICAgICAgICBjbGFzc1R5cGUgPSBjbGFzc1R5cGVbMF07CiAgICAgICAgICAgICAgdmFyIGh1bWFuTmFtZSA9IGNsYXNzVHlwZS5uYW1lICsgIi4iICsgbWV0aG9kTmFtZTsKICAgICAgICAgICAgICBpZiAoaXNQdXJlVmlydHVhbCkgewogICAgICAgICAgICAgICAgY2xhc3NUeXBlLnJlZ2lzdGVyZWRDbGFzcy5wdXJlVmlydHVhbEZ1bmN0aW9ucy5wdXNoKG1ldGhvZE5hbWUpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBmdW5jdGlvbiB1bmJvdW5kVHlwZXNIYW5kbGVyKCkgewogICAgICAgICAgICAgICAgdGhyb3dVbmJvdW5kVHlwZUVycm9yKCJDYW5ub3QgY2FsbCAiICsgaHVtYW5OYW1lICsgIiBkdWUgdG8gdW5ib3VuZCB0eXBlcyIsIHJhd0FyZ1R5cGVzKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdmFyIHByb3RvID0gY2xhc3NUeXBlLnJlZ2lzdGVyZWRDbGFzcy5pbnN0YW5jZVByb3RvdHlwZTsKICAgICAgICAgICAgICB2YXIgbWV0aG9kID0gcHJvdG9bbWV0aG9kTmFtZV07CiAgICAgICAgICAgICAgaWYgKHZvaWQgMCA9PT0gbWV0aG9kIHx8IHZvaWQgMCA9PT0gbWV0aG9kLm92ZXJsb2FkVGFibGUgJiYgbWV0aG9kLmNsYXNzTmFtZSAhPT0gY2xhc3NUeXBlLm5hbWUgJiYgbWV0aG9kLmFyZ0NvdW50ID09PSBhcmdDb3VudCAtIDIpIHsKICAgICAgICAgICAgICAgIHVuYm91bmRUeXBlc0hhbmRsZXIuYXJnQ291bnQgPSBhcmdDb3VudCAtIDI7CiAgICAgICAgICAgICAgICB1bmJvdW5kVHlwZXNIYW5kbGVyLmNsYXNzTmFtZSA9IGNsYXNzVHlwZS5uYW1lOwogICAgICAgICAgICAgICAgcHJvdG9bbWV0aG9kTmFtZV0gPSB1bmJvdW5kVHlwZXNIYW5kbGVyOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBlbnN1cmVPdmVybG9hZFRhYmxlKHByb3RvLCBtZXRob2ROYW1lLCBodW1hbk5hbWUpOwogICAgICAgICAgICAgICAgcHJvdG9bbWV0aG9kTmFtZV0ub3ZlcmxvYWRUYWJsZVthcmdDb3VudCAtIDJdID0gdW5ib3VuZFR5cGVzSGFuZGxlcjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgd2hlbkRlcGVuZGVudFR5cGVzQXJlUmVzb2x2ZWQoW10sIHJhd0FyZ1R5cGVzLCBmdW5jdGlvbihhcmdUeXBlcykgewogICAgICAgICAgICAgICAgdmFyIG1lbWJlckZ1bmN0aW9uID0gY3JhZnRJbnZva2VyRnVuY3Rpb24oaHVtYW5OYW1lLCBhcmdUeXBlcywgY2xhc3NUeXBlLCByYXdJbnZva2VyLCBjb250ZXh0KTsKICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgPT09IHByb3RvW21ldGhvZE5hbWVdLm92ZXJsb2FkVGFibGUpIHsKICAgICAgICAgICAgICAgICAgbWVtYmVyRnVuY3Rpb24uYXJnQ291bnQgPSBhcmdDb3VudCAtIDI7CiAgICAgICAgICAgICAgICAgIHByb3RvW21ldGhvZE5hbWVdID0gbWVtYmVyRnVuY3Rpb247CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICBwcm90b1ttZXRob2ROYW1lXS5vdmVybG9hZFRhYmxlW2FyZ0NvdW50IC0gMl0gPSBtZW1iZXJGdW5jdGlvbjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBbXTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICByZXR1cm4gW107CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfY29uc3RhbnQobmFtZSwgdHlwZSwgdmFsdWUpIHsKICAgICAgICAgICAgbmFtZSA9IHJlYWRMYXRpbjFTdHJpbmcobmFtZSk7CiAgICAgICAgICAgIHdoZW5EZXBlbmRlbnRUeXBlc0FyZVJlc29sdmVkKFtdLCBbdHlwZV0sIGZ1bmN0aW9uKHR5cGUyKSB7CiAgICAgICAgICAgICAgdHlwZTIgPSB0eXBlMlswXTsKICAgICAgICAgICAgICBNb2R1bGVbbmFtZV0gPSB0eXBlMlsiZnJvbVdpcmVUeXBlIl0odmFsdWUpOwogICAgICAgICAgICAgIHJldHVybiBbXTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgZW12YWxfZnJlZV9saXN0ID0gW107CiAgICAgICAgICB2YXIgZW12YWxfaGFuZGxlX2FycmF5ID0gW3t9LCB7IHZhbHVlOiB2b2lkIDAgfSwgeyB2YWx1ZTogbnVsbCB9LCB7IHZhbHVlOiB0cnVlIH0sIHsgdmFsdWU6IGZhbHNlIH1dOwogICAgICAgICAgZnVuY3Rpb24gX19lbXZhbF9kZWNyZWYoaGFuZGxlKSB7CiAgICAgICAgICAgIGlmIChoYW5kbGUgPiA0ICYmIDAgPT09IC0tZW12YWxfaGFuZGxlX2FycmF5W2hhbmRsZV0ucmVmY291bnQpIHsKICAgICAgICAgICAgICBlbXZhbF9oYW5kbGVfYXJyYXlbaGFuZGxlXSA9IHZvaWQgMDsKICAgICAgICAgICAgICBlbXZhbF9mcmVlX2xpc3QucHVzaChoYW5kbGUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBjb3VudF9lbXZhbF9oYW5kbGVzKCkgewogICAgICAgICAgICB2YXIgY291bnQgPSAwOwogICAgICAgICAgICBmb3IgKHZhciBpID0gNTsgaSA8IGVtdmFsX2hhbmRsZV9hcnJheS5sZW5ndGg7ICsraSkgewogICAgICAgICAgICAgIGlmIChlbXZhbF9oYW5kbGVfYXJyYXlbaV0gIT09IHZvaWQgMCkgewogICAgICAgICAgICAgICAgKytjb3VudDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGNvdW50OwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gZ2V0X2ZpcnN0X2VtdmFsKCkgewogICAgICAgICAgICBmb3IgKHZhciBpID0gNTsgaSA8IGVtdmFsX2hhbmRsZV9hcnJheS5sZW5ndGg7ICsraSkgewogICAgICAgICAgICAgIGlmIChlbXZhbF9oYW5kbGVfYXJyYXlbaV0gIT09IHZvaWQgMCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGVtdmFsX2hhbmRsZV9hcnJheVtpXTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBpbml0X2VtdmFsKCkgewogICAgICAgICAgICBNb2R1bGVbImNvdW50X2VtdmFsX2hhbmRsZXMiXSA9IGNvdW50X2VtdmFsX2hhbmRsZXM7CiAgICAgICAgICAgIE1vZHVsZVsiZ2V0X2ZpcnN0X2VtdmFsIl0gPSBnZXRfZmlyc3RfZW12YWw7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBfX2VtdmFsX3JlZ2lzdGVyKHZhbHVlKSB7CiAgICAgICAgICAgIHN3aXRjaCAodmFsdWUpIHsKICAgICAgICAgICAgICBjYXNlIHZvaWQgMDogewogICAgICAgICAgICAgICAgcmV0dXJuIDE7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGNhc2UgbnVsbDogewogICAgICAgICAgICAgICAgcmV0dXJuIDI7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGNhc2UgdHJ1ZTogewogICAgICAgICAgICAgICAgcmV0dXJuIDM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGNhc2UgZmFsc2U6IHsKICAgICAgICAgICAgICAgIHJldHVybiA0OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBkZWZhdWx0OiB7CiAgICAgICAgICAgICAgICB2YXIgaGFuZGxlID0gZW12YWxfZnJlZV9saXN0Lmxlbmd0aCA/IGVtdmFsX2ZyZWVfbGlzdC5wb3AoKSA6IGVtdmFsX2hhbmRsZV9hcnJheS5sZW5ndGg7CiAgICAgICAgICAgICAgICBlbXZhbF9oYW5kbGVfYXJyYXlbaGFuZGxlXSA9IHsgcmVmY291bnQ6IDEsIHZhbHVlIH07CiAgICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfZW12YWwocmF3VHlwZSwgbmFtZSkgewogICAgICAgICAgICBuYW1lID0gcmVhZExhdGluMVN0cmluZyhuYW1lKTsKICAgICAgICAgICAgcmVnaXN0ZXJUeXBlKHJhd1R5cGUsIHsgbmFtZSwgImZyb21XaXJlVHlwZSI6IGZ1bmN0aW9uKGhhbmRsZSkgewogICAgICAgICAgICAgIHZhciBydiA9IGVtdmFsX2hhbmRsZV9hcnJheVtoYW5kbGVdLnZhbHVlOwogICAgICAgICAgICAgIF9fZW12YWxfZGVjcmVmKGhhbmRsZSk7CiAgICAgICAgICAgICAgcmV0dXJuIHJ2OwogICAgICAgICAgICB9LCAidG9XaXJlVHlwZSI6IGZ1bmN0aW9uKGRlc3RydWN0b3JzLCB2YWx1ZSkgewogICAgICAgICAgICAgIHJldHVybiBfX2VtdmFsX3JlZ2lzdGVyKHZhbHVlKTsKICAgICAgICAgICAgfSwgImFyZ1BhY2tBZHZhbmNlIjogOCwgInJlYWRWYWx1ZUZyb21Qb2ludGVyIjogc2ltcGxlUmVhZFZhbHVlRnJvbVBvaW50ZXIsIGRlc3RydWN0b3JGdW5jdGlvbjogbnVsbCB9KTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIGVudW1SZWFkVmFsdWVGcm9tUG9pbnRlcihuYW1lLCBzaGlmdCwgc2lnbmVkKSB7CiAgICAgICAgICAgIHN3aXRjaCAoc2hpZnQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24ocG9pbnRlcikgewogICAgICAgICAgICAgICAgICB2YXIgaGVhcCA9IHNpZ25lZCA/IEhFQVA4IDogSEVBUFU4OwogICAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1siZnJvbVdpcmVUeXBlIl0oaGVhcFtwb2ludGVyXSk7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihwb2ludGVyKSB7CiAgICAgICAgICAgICAgICAgIHZhciBoZWFwID0gc2lnbmVkID8gSEVBUDE2IDogSEVBUFUxNjsKICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbImZyb21XaXJlVHlwZSJdKGhlYXBbcG9pbnRlciA+PiAxXSk7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihwb2ludGVyKSB7CiAgICAgICAgICAgICAgICAgIHZhciBoZWFwID0gc2lnbmVkID8gSEVBUDMyIDogSEVBUFUzMjsKICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbImZyb21XaXJlVHlwZSJdKGhlYXBbcG9pbnRlciA+PiAyXSk7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJVbmtub3duIGludGVnZXIgdHlwZTogIiArIG5hbWUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBfX2VtYmluZF9yZWdpc3Rlcl9lbnVtKHJhd1R5cGUsIG5hbWUsIHNpemUsIGlzU2lnbmVkKSB7CiAgICAgICAgICAgIHZhciBzaGlmdCA9IGdldFNoaWZ0RnJvbVNpemUoc2l6ZSk7CiAgICAgICAgICAgIG5hbWUgPSByZWFkTGF0aW4xU3RyaW5nKG5hbWUpOwogICAgICAgICAgICBmdW5jdGlvbiBjdG9yKCkgewogICAgICAgICAgICB9CiAgICAgICAgICAgIGN0b3IudmFsdWVzID0ge307CiAgICAgICAgICAgIHJlZ2lzdGVyVHlwZShyYXdUeXBlLCB7IG5hbWUsIGNvbnN0cnVjdG9yOiBjdG9yLCAiZnJvbVdpcmVUeXBlIjogZnVuY3Rpb24oYykgewogICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnZhbHVlc1tjXTsKICAgICAgICAgICAgfSwgInRvV2lyZVR5cGUiOiBmdW5jdGlvbihkZXN0cnVjdG9ycywgYykgewogICAgICAgICAgICAgIHJldHVybiBjLnZhbHVlOwogICAgICAgICAgICB9LCAiYXJnUGFja0FkdmFuY2UiOiA4LCAicmVhZFZhbHVlRnJvbVBvaW50ZXIiOiBlbnVtUmVhZFZhbHVlRnJvbVBvaW50ZXIobmFtZSwgc2hpZnQsIGlzU2lnbmVkKSwgZGVzdHJ1Y3RvckZ1bmN0aW9uOiBudWxsIH0pOwogICAgICAgICAgICBleHBvc2VQdWJsaWNTeW1ib2wobmFtZSwgY3Rvcik7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiByZXF1aXJlUmVnaXN0ZXJlZFR5cGUocmF3VHlwZSwgaHVtYW5OYW1lKSB7CiAgICAgICAgICAgIHZhciBpbXBsID0gcmVnaXN0ZXJlZFR5cGVzW3Jhd1R5cGVdOwogICAgICAgICAgICBpZiAodm9pZCAwID09PSBpbXBsKSB7CiAgICAgICAgICAgICAgdGhyb3dCaW5kaW5nRXJyb3IoaHVtYW5OYW1lICsgIiBoYXMgdW5rbm93biB0eXBlICIgKyBnZXRUeXBlTmFtZShyYXdUeXBlKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGltcGw7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBfX2VtYmluZF9yZWdpc3Rlcl9lbnVtX3ZhbHVlKHJhd0VudW1UeXBlLCBuYW1lLCBlbnVtVmFsdWUpIHsKICAgICAgICAgICAgdmFyIGVudW1UeXBlID0gcmVxdWlyZVJlZ2lzdGVyZWRUeXBlKHJhd0VudW1UeXBlLCAiZW51bSIpOwogICAgICAgICAgICBuYW1lID0gcmVhZExhdGluMVN0cmluZyhuYW1lKTsKICAgICAgICAgICAgdmFyIEVudW0gPSBlbnVtVHlwZS5jb25zdHJ1Y3RvcjsKICAgICAgICAgICAgdmFyIFZhbHVlID0gT2JqZWN0LmNyZWF0ZShlbnVtVHlwZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHsgdmFsdWU6IHsgdmFsdWU6IGVudW1WYWx1ZSB9LCBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogY3JlYXRlTmFtZWRGdW5jdGlvbihlbnVtVHlwZS5uYW1lICsgIl8iICsgbmFtZSwgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIH0pIH0gfSk7CiAgICAgICAgICAgIEVudW0udmFsdWVzW2VudW1WYWx1ZV0gPSBWYWx1ZTsKICAgICAgICAgICAgRW51bVtuYW1lXSA9IFZhbHVlOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gX2VtYmluZF9yZXByKHYzKSB7CiAgICAgICAgICAgIGlmICh2MyA9PT0gbnVsbCkgewogICAgICAgICAgICAgIHJldHVybiAibnVsbCI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIHQgPSB0eXBlb2YgdjM7CiAgICAgICAgICAgIGlmICh0ID09PSAib2JqZWN0IiB8fCB0ID09PSAiYXJyYXkiIHx8IHQgPT09ICJmdW5jdGlvbiIpIHsKICAgICAgICAgICAgICByZXR1cm4gdjMudG9TdHJpbmcoKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICByZXR1cm4gIiIgKyB2MzsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gZmxvYXRSZWFkVmFsdWVGcm9tUG9pbnRlcihuYW1lLCBzaGlmdCkgewogICAgICAgICAgICBzd2l0Y2ggKHNoaWZ0KSB7CiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHBvaW50ZXIpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbImZyb21XaXJlVHlwZSJdKEhFQVBGMzJbcG9pbnRlciA+PiAyXSk7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihwb2ludGVyKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzWyJmcm9tV2lyZVR5cGUiXShIRUFQRjY0W3BvaW50ZXIgPj4gM10pOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiVW5rbm93biBmbG9hdCB0eXBlOiAiICsgbmFtZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX2Zsb2F0KHJhd1R5cGUsIG5hbWUsIHNpemUpIHsKICAgICAgICAgICAgdmFyIHNoaWZ0ID0gZ2V0U2hpZnRGcm9tU2l6ZShzaXplKTsKICAgICAgICAgICAgbmFtZSA9IHJlYWRMYXRpbjFTdHJpbmcobmFtZSk7CiAgICAgICAgICAgIHJlZ2lzdGVyVHlwZShyYXdUeXBlLCB7IG5hbWUsICJmcm9tV2lyZVR5cGUiOiBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgICAgICAgfSwgInRvV2lyZVR5cGUiOiBmdW5jdGlvbihkZXN0cnVjdG9ycywgdmFsdWUpIHsKICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAibnVtYmVyIiAmJiB0eXBlb2YgdmFsdWUgIT09ICJib29sZWFuIikgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgIicgKyBfZW1iaW5kX3JlcHIodmFsdWUpICsgJyIgdG8gJyArIHRoaXMubmFtZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgICAgICAgfSwgImFyZ1BhY2tBZHZhbmNlIjogOCwgInJlYWRWYWx1ZUZyb21Qb2ludGVyIjogZmxvYXRSZWFkVmFsdWVGcm9tUG9pbnRlcihuYW1lLCBzaGlmdCksIGRlc3RydWN0b3JGdW5jdGlvbjogbnVsbCB9KTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX2Z1bmN0aW9uKG5hbWUsIGFyZ0NvdW50LCByYXdBcmdUeXBlc0FkZHIsIHNpZ25hdHVyZSwgcmF3SW52b2tlciwgZm4pIHsKICAgICAgICAgICAgdmFyIGFyZ1R5cGVzID0gaGVhcDMyVmVjdG9yVG9BcnJheShhcmdDb3VudCwgcmF3QXJnVHlwZXNBZGRyKTsKICAgICAgICAgICAgbmFtZSA9IHJlYWRMYXRpbjFTdHJpbmcobmFtZSk7CiAgICAgICAgICAgIHJhd0ludm9rZXIgPSBlbWJpbmRfX3JlcXVpcmVGdW5jdGlvbihzaWduYXR1cmUsIHJhd0ludm9rZXIpOwogICAgICAgICAgICBleHBvc2VQdWJsaWNTeW1ib2wobmFtZSwgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgdGhyb3dVbmJvdW5kVHlwZUVycm9yKCJDYW5ub3QgY2FsbCAiICsgbmFtZSArICIgZHVlIHRvIHVuYm91bmQgdHlwZXMiLCBhcmdUeXBlcyk7CiAgICAgICAgICAgIH0sIGFyZ0NvdW50IC0gMSk7CiAgICAgICAgICAgIHdoZW5EZXBlbmRlbnRUeXBlc0FyZVJlc29sdmVkKFtdLCBhcmdUeXBlcywgZnVuY3Rpb24oYXJnVHlwZXMyKSB7CiAgICAgICAgICAgICAgdmFyIGludm9rZXJBcmdzQXJyYXkgPSBbYXJnVHlwZXMyWzBdLCBudWxsXS5jb25jYXQoYXJnVHlwZXMyLnNsaWNlKDEpKTsKICAgICAgICAgICAgICByZXBsYWNlUHVibGljU3ltYm9sKG5hbWUsIGNyYWZ0SW52b2tlckZ1bmN0aW9uKG5hbWUsIGludm9rZXJBcmdzQXJyYXksIG51bGwsIHJhd0ludm9rZXIsIGZuKSwgYXJnQ291bnQgLSAxKTsKICAgICAgICAgICAgICByZXR1cm4gW107CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gaW50ZWdlclJlYWRWYWx1ZUZyb21Qb2ludGVyKG5hbWUsIHNoaWZ0LCBzaWduZWQpIHsKICAgICAgICAgICAgc3dpdGNoIChzaGlmdCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHJldHVybiBzaWduZWQgPyBmdW5jdGlvbiByZWFkUzhGcm9tUG9pbnRlcihwb2ludGVyKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBIRUFQOFtwb2ludGVyXTsKICAgICAgICAgICAgICAgIH0gOiBmdW5jdGlvbiByZWFkVThGcm9tUG9pbnRlcihwb2ludGVyKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBIRUFQVThbcG9pbnRlcl07CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICAgIHJldHVybiBzaWduZWQgPyBmdW5jdGlvbiByZWFkUzE2RnJvbVBvaW50ZXIocG9pbnRlcikgewogICAgICAgICAgICAgICAgICByZXR1cm4gSEVBUDE2W3BvaW50ZXIgPj4gMV07CiAgICAgICAgICAgICAgICB9IDogZnVuY3Rpb24gcmVhZFUxNkZyb21Qb2ludGVyKHBvaW50ZXIpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIEhFQVBVMTZbcG9pbnRlciA+PiAxXTsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgcmV0dXJuIHNpZ25lZCA/IGZ1bmN0aW9uIHJlYWRTMzJGcm9tUG9pbnRlcihwb2ludGVyKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBIRUFQMzJbcG9pbnRlciA+PiAyXTsKICAgICAgICAgICAgICAgIH0gOiBmdW5jdGlvbiByZWFkVTMyRnJvbVBvaW50ZXIocG9pbnRlcikgewogICAgICAgICAgICAgICAgICByZXR1cm4gSEVBUFUzMltwb2ludGVyID4+IDJdOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiVW5rbm93biBpbnRlZ2VyIHR5cGU6ICIgKyBuYW1lKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfaW50ZWdlcihwcmltaXRpdmVUeXBlLCBuYW1lLCBzaXplLCBtaW5SYW5nZSwgbWF4UmFuZ2UpIHsKICAgICAgICAgICAgbmFtZSA9IHJlYWRMYXRpbjFTdHJpbmcobmFtZSk7CiAgICAgICAgICAgIGlmIChtYXhSYW5nZSA9PT0gLTEpIHsKICAgICAgICAgICAgICBtYXhSYW5nZSA9IDQyOTQ5NjcyOTU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIHNoaWZ0ID0gZ2V0U2hpZnRGcm9tU2l6ZShzaXplKTsKICAgICAgICAgICAgdmFyIGZyb21XaXJlVHlwZSA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICAgICAgICB9OwogICAgICAgICAgICBpZiAobWluUmFuZ2UgPT09IDApIHsKICAgICAgICAgICAgICB2YXIgYml0c2hpZnQgPSAzMiAtIDggKiBzaXplOwogICAgICAgICAgICAgIGZyb21XaXJlVHlwZSA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgPDwgYml0c2hpZnQgPj4+IGJpdHNoaWZ0OwogICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGlzVW5zaWduZWRUeXBlID0gbmFtZS5pbmRleE9mKCJ1bnNpZ25lZCIpICE9IC0xOwogICAgICAgICAgICByZWdpc3RlclR5cGUocHJpbWl0aXZlVHlwZSwgeyBuYW1lLCAiZnJvbVdpcmVUeXBlIjogZnJvbVdpcmVUeXBlLCAidG9XaXJlVHlwZSI6IGZ1bmN0aW9uKGRlc3RydWN0b3JzLCB2YWx1ZSkgewogICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICJudW1iZXIiICYmIHR5cGVvZiB2YWx1ZSAhPT0gImJvb2xlYW4iKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCAiJyArIF9lbWJpbmRfcmVwcih2YWx1ZSkgKyAnIiB0byAnICsgdGhpcy5uYW1lKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKHZhbHVlIDwgbWluUmFuZ2UgfHwgdmFsdWUgPiBtYXhSYW5nZSkgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUGFzc2luZyBhIG51bWJlciAiJyArIF9lbWJpbmRfcmVwcih2YWx1ZSkgKyAnIiBmcm9tIEpTIHNpZGUgdG8gQy9DKysgc2lkZSB0byBhbiBhcmd1bWVudCBvZiB0eXBlICInICsgbmFtZSArICciLCB3aGljaCBpcyBvdXRzaWRlIHRoZSB2YWxpZCByYW5nZSBbJyArIG1pblJhbmdlICsgIiwgIiArIG1heFJhbmdlICsgIl0hIik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiBpc1Vuc2lnbmVkVHlwZSA/IHZhbHVlID4+PiAwIDogdmFsdWUgfCAwOwogICAgICAgICAgICB9LCAiYXJnUGFja0FkdmFuY2UiOiA4LCAicmVhZFZhbHVlRnJvbVBvaW50ZXIiOiBpbnRlZ2VyUmVhZFZhbHVlRnJvbVBvaW50ZXIobmFtZSwgc2hpZnQsIG1pblJhbmdlICE9PSAwKSwgZGVzdHJ1Y3RvckZ1bmN0aW9uOiBudWxsIH0pOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfbWVtb3J5X3ZpZXcocmF3VHlwZSwgZGF0YVR5cGVJbmRleCwgbmFtZSkgewogICAgICAgICAgICB2YXIgdHlwZU1hcHBpbmcgPSBbSW50OEFycmF5LCBVaW50OEFycmF5LCBJbnQxNkFycmF5LCBVaW50MTZBcnJheSwgSW50MzJBcnJheSwgVWludDMyQXJyYXksIEZsb2F0MzJBcnJheSwgRmxvYXQ2NEFycmF5XTsKICAgICAgICAgICAgdmFyIFRBID0gdHlwZU1hcHBpbmdbZGF0YVR5cGVJbmRleF07CiAgICAgICAgICAgIGZ1bmN0aW9uIGRlY29kZU1lbW9yeVZpZXcoaGFuZGxlKSB7CiAgICAgICAgICAgICAgaGFuZGxlID0gaGFuZGxlID4+IDI7CiAgICAgICAgICAgICAgdmFyIGhlYXAgPSBIRUFQVTMyOwogICAgICAgICAgICAgIHZhciBzaXplID0gaGVhcFtoYW5kbGVdOwogICAgICAgICAgICAgIHZhciBkYXRhID0gaGVhcFtoYW5kbGUgKyAxXTsKICAgICAgICAgICAgICByZXR1cm4gbmV3IFRBKGJ1ZmZlciwgZGF0YSwgc2l6ZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgbmFtZSA9IHJlYWRMYXRpbjFTdHJpbmcobmFtZSk7CiAgICAgICAgICAgIHJlZ2lzdGVyVHlwZShyYXdUeXBlLCB7IG5hbWUsICJmcm9tV2lyZVR5cGUiOiBkZWNvZGVNZW1vcnlWaWV3LCAiYXJnUGFja0FkdmFuY2UiOiA4LCAicmVhZFZhbHVlRnJvbVBvaW50ZXIiOiBkZWNvZGVNZW1vcnlWaWV3IH0sIHsgaWdub3JlRHVwbGljYXRlUmVnaXN0cmF0aW9uczogdHJ1ZSB9KTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX3N0ZF9zdHJpbmcocmF3VHlwZSwgbmFtZSkgewogICAgICAgICAgICBuYW1lID0gcmVhZExhdGluMVN0cmluZyhuYW1lKTsKICAgICAgICAgICAgdmFyIHN0ZFN0cmluZ0lzVVRGOCA9IG5hbWUgPT09ICJzdGQ6OnN0cmluZyI7CiAgICAgICAgICAgIHJlZ2lzdGVyVHlwZShyYXdUeXBlLCB7IG5hbWUsICJmcm9tV2lyZVR5cGUiOiBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgICAgICAgIHZhciBsZW5ndGggPSBIRUFQVTMyW3ZhbHVlID4+IDJdOwogICAgICAgICAgICAgIHZhciBzdHI7CiAgICAgICAgICAgICAgaWYgKHN0ZFN0cmluZ0lzVVRGOCkgewogICAgICAgICAgICAgICAgdmFyIGRlY29kZVN0YXJ0UHRyID0gdmFsdWUgKyA0OwogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gbGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRCeXRlUHRyID0gdmFsdWUgKyA0ICsgaTsKICAgICAgICAgICAgICAgICAgaWYgKGkgPT0gbGVuZ3RoIHx8IEhFQVBVOFtjdXJyZW50Qnl0ZVB0cl0gPT0gMCkgewogICAgICAgICAgICAgICAgICAgIHZhciBtYXhSZWFkID0gY3VycmVudEJ5dGVQdHIgLSBkZWNvZGVTdGFydFB0cjsKICAgICAgICAgICAgICAgICAgICB2YXIgc3RyaW5nU2VnbWVudCA9IFVURjhUb1N0cmluZyhkZWNvZGVTdGFydFB0ciwgbWF4UmVhZCk7CiAgICAgICAgICAgICAgICAgICAgaWYgKHN0ciA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgICAgICAgICAgICBzdHIgPSBzdHJpbmdTZWdtZW50OwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgwKTsKICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSBzdHJpbmdTZWdtZW50OwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBkZWNvZGVTdGFydFB0ciA9IGN1cnJlbnRCeXRlUHRyICsgMTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB2YXIgYTMgPSBuZXcgQXJyYXkobGVuZ3RoKTsKICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgICAgICAgYTNbaV0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKEhFQVBVOFt2YWx1ZSArIDQgKyBpXSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBzdHIgPSBhMy5qb2luKCIiKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgX2ZyZWUodmFsdWUpOwogICAgICAgICAgICAgIHJldHVybiBzdHI7CiAgICAgICAgICAgIH0sICJ0b1dpcmVUeXBlIjogZnVuY3Rpb24oZGVzdHJ1Y3RvcnMsIHZhbHVlKSB7CiAgICAgICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHsKICAgICAgICAgICAgICAgIHZhbHVlID0gbmV3IFVpbnQ4QXJyYXkodmFsdWUpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB2YXIgZ2V0TGVuZ3RoOwogICAgICAgICAgICAgIHZhciB2YWx1ZUlzT2ZUeXBlU3RyaW5nID0gdHlwZW9mIHZhbHVlID09PSAic3RyaW5nIjsKICAgICAgICAgICAgICBpZiAoISh2YWx1ZUlzT2ZUeXBlU3RyaW5nIHx8IHZhbHVlIGluc3RhbmNlb2YgVWludDhBcnJheSB8fCB2YWx1ZSBpbnN0YW5jZW9mIFVpbnQ4Q2xhbXBlZEFycmF5IHx8IHZhbHVlIGluc3RhbmNlb2YgSW50OEFycmF5KSkgewogICAgICAgICAgICAgICAgdGhyb3dCaW5kaW5nRXJyb3IoIkNhbm5vdCBwYXNzIG5vbi1zdHJpbmcgdG8gc3RkOjpzdHJpbmciKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKHN0ZFN0cmluZ0lzVVRGOCAmJiB2YWx1ZUlzT2ZUeXBlU3RyaW5nKSB7CiAgICAgICAgICAgICAgICBnZXRMZW5ndGggPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIGxlbmd0aEJ5dGVzVVRGOCh2YWx1ZSk7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBnZXRMZW5ndGggPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLmxlbmd0aDsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHZhciBsZW5ndGggPSBnZXRMZW5ndGgoKTsKICAgICAgICAgICAgICB2YXIgcHRyID0gX21hbGxvYyg0ICsgbGVuZ3RoICsgMSk7CiAgICAgICAgICAgICAgSEVBUFUzMltwdHIgPj4gMl0gPSBsZW5ndGg7CiAgICAgICAgICAgICAgaWYgKHN0ZFN0cmluZ0lzVVRGOCAmJiB2YWx1ZUlzT2ZUeXBlU3RyaW5nKSB7CiAgICAgICAgICAgICAgICBzdHJpbmdUb1VURjgodmFsdWUsIHB0ciArIDQsIGxlbmd0aCArIDEpOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpZiAodmFsdWVJc09mVHlwZVN0cmluZykgewogICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGNoYXJDb2RlID0gdmFsdWUuY2hhckNvZGVBdChpKTsKICAgICAgICAgICAgICAgICAgICBpZiAoY2hhckNvZGUgPiAyNTUpIHsKICAgICAgICAgICAgICAgICAgICAgIF9mcmVlKHB0cik7CiAgICAgICAgICAgICAgICAgICAgICB0aHJvd0JpbmRpbmdFcnJvcigiU3RyaW5nIGhhcyBVVEYtMTYgY29kZSB1bml0cyB0aGF0IGRvIG5vdCBmaXQgaW4gOCBiaXRzIik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIEhFQVBVOFtwdHIgKyA0ICsgaV0gPSBjaGFyQ29kZTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgICAgICAgICAgICAgICAgIEhFQVBVOFtwdHIgKyA0ICsgaV0gPSB2YWx1ZVtpXTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAoZGVzdHJ1Y3RvcnMgIT09IG51bGwpIHsKICAgICAgICAgICAgICAgIGRlc3RydWN0b3JzLnB1c2goX2ZyZWUsIHB0cik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiBwdHI7CiAgICAgICAgICAgIH0sICJhcmdQYWNrQWR2YW5jZSI6IDgsICJyZWFkVmFsdWVGcm9tUG9pbnRlciI6IHNpbXBsZVJlYWRWYWx1ZUZyb21Qb2ludGVyLCBkZXN0cnVjdG9yRnVuY3Rpb246IGZ1bmN0aW9uKHB0cikgewogICAgICAgICAgICAgIF9mcmVlKHB0cik7CiAgICAgICAgICAgIH0gfSk7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBfX2VtYmluZF9yZWdpc3Rlcl9zdGRfd3N0cmluZyhyYXdUeXBlLCBjaGFyU2l6ZSwgbmFtZSkgewogICAgICAgICAgICBuYW1lID0gcmVhZExhdGluMVN0cmluZyhuYW1lKTsKICAgICAgICAgICAgdmFyIGRlY29kZVN0cmluZywgZW5jb2RlU3RyaW5nLCBnZXRIZWFwLCBsZW5ndGhCeXRlc1VURiwgc2hpZnQ7CiAgICAgICAgICAgIGlmIChjaGFyU2l6ZSA9PT0gMikgewogICAgICAgICAgICAgIGRlY29kZVN0cmluZyA9IFVURjE2VG9TdHJpbmc7CiAgICAgICAgICAgICAgZW5jb2RlU3RyaW5nID0gc3RyaW5nVG9VVEYxNjsKICAgICAgICAgICAgICBsZW5ndGhCeXRlc1VURiA9IGxlbmd0aEJ5dGVzVVRGMTY7CiAgICAgICAgICAgICAgZ2V0SGVhcCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIEhFQVBVMTY7CiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICBzaGlmdCA9IDE7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hhclNpemUgPT09IDQpIHsKICAgICAgICAgICAgICBkZWNvZGVTdHJpbmcgPSBVVEYzMlRvU3RyaW5nOwogICAgICAgICAgICAgIGVuY29kZVN0cmluZyA9IHN0cmluZ1RvVVRGMzI7CiAgICAgICAgICAgICAgbGVuZ3RoQnl0ZXNVVEYgPSBsZW5ndGhCeXRlc1VURjMyOwogICAgICAgICAgICAgIGdldEhlYXAgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHJldHVybiBIRUFQVTMyOwogICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgc2hpZnQgPSAyOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJlZ2lzdGVyVHlwZShyYXdUeXBlLCB7IG5hbWUsICJmcm9tV2lyZVR5cGUiOiBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgICAgICAgIHZhciBsZW5ndGggPSBIRUFQVTMyW3ZhbHVlID4+IDJdOwogICAgICAgICAgICAgIHZhciBIRUFQID0gZ2V0SGVhcCgpOwogICAgICAgICAgICAgIHZhciBzdHI7CiAgICAgICAgICAgICAgdmFyIGRlY29kZVN0YXJ0UHRyID0gdmFsdWUgKyA0OwogICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IGxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgICAgICB2YXIgY3VycmVudEJ5dGVQdHIgPSB2YWx1ZSArIDQgKyBpICogY2hhclNpemU7CiAgICAgICAgICAgICAgICBpZiAoaSA9PSBsZW5ndGggfHwgSEVBUFtjdXJyZW50Qnl0ZVB0ciA+PiBzaGlmdF0gPT0gMCkgewogICAgICAgICAgICAgICAgICB2YXIgbWF4UmVhZEJ5dGVzID0gY3VycmVudEJ5dGVQdHIgLSBkZWNvZGVTdGFydFB0cjsKICAgICAgICAgICAgICAgICAgdmFyIHN0cmluZ1NlZ21lbnQgPSBkZWNvZGVTdHJpbmcoZGVjb2RlU3RhcnRQdHIsIG1heFJlYWRCeXRlcyk7CiAgICAgICAgICAgICAgICAgIGlmIChzdHIgPT09IHZvaWQgMCkgewogICAgICAgICAgICAgICAgICAgIHN0ciA9IHN0cmluZ1NlZ21lbnQ7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMCk7CiAgICAgICAgICAgICAgICAgICAgc3RyICs9IHN0cmluZ1NlZ21lbnQ7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgZGVjb2RlU3RhcnRQdHIgPSBjdXJyZW50Qnl0ZVB0ciArIGNoYXJTaXplOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBfZnJlZSh2YWx1ZSk7CiAgICAgICAgICAgICAgcmV0dXJuIHN0cjsKICAgICAgICAgICAgfSwgInRvV2lyZVR5cGUiOiBmdW5jdGlvbihkZXN0cnVjdG9ycywgdmFsdWUpIHsKICAgICAgICAgICAgICBpZiAoISh0eXBlb2YgdmFsdWUgPT09ICJzdHJpbmciKSkgewogICAgICAgICAgICAgICAgdGhyb3dCaW5kaW5nRXJyb3IoIkNhbm5vdCBwYXNzIG5vbi1zdHJpbmcgdG8gQysrIHN0cmluZyB0eXBlICIgKyBuYW1lKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdmFyIGxlbmd0aCA9IGxlbmd0aEJ5dGVzVVRGKHZhbHVlKTsKICAgICAgICAgICAgICB2YXIgcHRyID0gX21hbGxvYyg0ICsgbGVuZ3RoICsgY2hhclNpemUpOwogICAgICAgICAgICAgIEhFQVBVMzJbcHRyID4+IDJdID0gbGVuZ3RoID4+IHNoaWZ0OwogICAgICAgICAgICAgIGVuY29kZVN0cmluZyh2YWx1ZSwgcHRyICsgNCwgbGVuZ3RoICsgY2hhclNpemUpOwogICAgICAgICAgICAgIGlmIChkZXN0cnVjdG9ycyAhPT0gbnVsbCkgewogICAgICAgICAgICAgICAgZGVzdHJ1Y3RvcnMucHVzaChfZnJlZSwgcHRyKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuIHB0cjsKICAgICAgICAgICAgfSwgImFyZ1BhY2tBZHZhbmNlIjogOCwgInJlYWRWYWx1ZUZyb21Qb2ludGVyIjogc2ltcGxlUmVhZFZhbHVlRnJvbVBvaW50ZXIsIGRlc3RydWN0b3JGdW5jdGlvbjogZnVuY3Rpb24ocHRyKSB7CiAgICAgICAgICAgICAgX2ZyZWUocHRyKTsKICAgICAgICAgICAgfSB9KTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX3ZhbHVlX29iamVjdChyYXdUeXBlLCBuYW1lLCBjb25zdHJ1Y3RvclNpZ25hdHVyZSwgcmF3Q29uc3RydWN0b3IsIGRlc3RydWN0b3JTaWduYXR1cmUsIHJhd0Rlc3RydWN0b3IpIHsKICAgICAgICAgICAgc3RydWN0UmVnaXN0cmF0aW9uc1tyYXdUeXBlXSA9IHsgbmFtZTogcmVhZExhdGluMVN0cmluZyhuYW1lKSwgcmF3Q29uc3RydWN0b3I6IGVtYmluZF9fcmVxdWlyZUZ1bmN0aW9uKGNvbnN0cnVjdG9yU2lnbmF0dXJlLCByYXdDb25zdHJ1Y3RvciksIHJhd0Rlc3RydWN0b3I6IGVtYmluZF9fcmVxdWlyZUZ1bmN0aW9uKGRlc3RydWN0b3JTaWduYXR1cmUsIHJhd0Rlc3RydWN0b3IpLCBmaWVsZHM6IFtdIH07CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBfX2VtYmluZF9yZWdpc3Rlcl92YWx1ZV9vYmplY3RfZmllbGQoc3RydWN0VHlwZSwgZmllbGROYW1lLCBnZXR0ZXJSZXR1cm5UeXBlLCBnZXR0ZXJTaWduYXR1cmUsIGdldHRlciwgZ2V0dGVyQ29udGV4dCwgc2V0dGVyQXJndW1lbnRUeXBlLCBzZXR0ZXJTaWduYXR1cmUsIHNldHRlciwgc2V0dGVyQ29udGV4dCkgewogICAgICAgICAgICBzdHJ1Y3RSZWdpc3RyYXRpb25zW3N0cnVjdFR5cGVdLmZpZWxkcy5wdXNoKHsgZmllbGROYW1lOiByZWFkTGF0aW4xU3RyaW5nKGZpZWxkTmFtZSksIGdldHRlclJldHVyblR5cGUsIGdldHRlcjogZW1iaW5kX19yZXF1aXJlRnVuY3Rpb24oZ2V0dGVyU2lnbmF0dXJlLCBnZXR0ZXIpLCBnZXR0ZXJDb250ZXh0LCBzZXR0ZXJBcmd1bWVudFR5cGUsIHNldHRlcjogZW1iaW5kX19yZXF1aXJlRnVuY3Rpb24oc2V0dGVyU2lnbmF0dXJlLCBzZXR0ZXIpLCBzZXR0ZXJDb250ZXh0IH0pOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfdm9pZChyYXdUeXBlLCBuYW1lKSB7CiAgICAgICAgICAgIG5hbWUgPSByZWFkTGF0aW4xU3RyaW5nKG5hbWUpOwogICAgICAgICAgICByZWdpc3RlclR5cGUocmF3VHlwZSwgeyBpc1ZvaWQ6IHRydWUsIG5hbWUsICJhcmdQYWNrQWR2YW5jZSI6IDAsICJmcm9tV2lyZVR5cGUiOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICByZXR1cm4gdm9pZCAwOwogICAgICAgICAgICB9LCAidG9XaXJlVHlwZSI6IGZ1bmN0aW9uKGRlc3RydWN0b3JzLCBvKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgMDsKICAgICAgICAgICAgfSB9KTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIHJlcXVpcmVIYW5kbGUoaGFuZGxlKSB7CiAgICAgICAgICAgIGlmICghaGFuZGxlKSB7CiAgICAgICAgICAgICAgdGhyb3dCaW5kaW5nRXJyb3IoIkNhbm5vdCB1c2UgZGVsZXRlZCB2YWwuIGhhbmRsZSA9ICIgKyBoYW5kbGUpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBlbXZhbF9oYW5kbGVfYXJyYXlbaGFuZGxlXS52YWx1ZTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIF9fZW12YWxfYXMoaGFuZGxlLCByZXR1cm5UeXBlLCBkZXN0cnVjdG9yc1JlZikgewogICAgICAgICAgICBoYW5kbGUgPSByZXF1aXJlSGFuZGxlKGhhbmRsZSk7CiAgICAgICAgICAgIHJldHVyblR5cGUgPSByZXF1aXJlUmVnaXN0ZXJlZFR5cGUocmV0dXJuVHlwZSwgImVtdmFsOjphcyIpOwogICAgICAgICAgICB2YXIgZGVzdHJ1Y3RvcnMgPSBbXTsKICAgICAgICAgICAgdmFyIHJkID0gX19lbXZhbF9yZWdpc3RlcihkZXN0cnVjdG9ycyk7CiAgICAgICAgICAgIEhFQVAzMltkZXN0cnVjdG9yc1JlZiA+PiAyXSA9IHJkOwogICAgICAgICAgICByZXR1cm4gcmV0dXJuVHlwZVsidG9XaXJlVHlwZSJdKGRlc3RydWN0b3JzLCBoYW5kbGUpOwogICAgICAgICAgfQogICAgICAgICAgdmFyIGVtdmFsX3N5bWJvbHMgPSB7fTsKICAgICAgICAgIGZ1bmN0aW9uIGdldFN0cmluZ09yU3ltYm9sKGFkZHJlc3MpIHsKICAgICAgICAgICAgdmFyIHN5bWJvbCA9IGVtdmFsX3N5bWJvbHNbYWRkcmVzc107CiAgICAgICAgICAgIGlmIChzeW1ib2wgPT09IHZvaWQgMCkgewogICAgICAgICAgICAgIHJldHVybiByZWFkTGF0aW4xU3RyaW5nKGFkZHJlc3MpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHJldHVybiBzeW1ib2w7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHZhciBlbXZhbF9tZXRob2RDYWxsZXJzID0gW107CiAgICAgICAgICBmdW5jdGlvbiBfX2VtdmFsX2NhbGxfdm9pZF9tZXRob2QoY2FsbGVyLCBoYW5kbGUsIG1ldGhvZE5hbWUsIGFyZ3MpIHsKICAgICAgICAgICAgY2FsbGVyID0gZW12YWxfbWV0aG9kQ2FsbGVyc1tjYWxsZXJdOwogICAgICAgICAgICBoYW5kbGUgPSByZXF1aXJlSGFuZGxlKGhhbmRsZSk7CiAgICAgICAgICAgIG1ldGhvZE5hbWUgPSBnZXRTdHJpbmdPclN5bWJvbChtZXRob2ROYW1lKTsKICAgICAgICAgICAgY2FsbGVyKGhhbmRsZSwgbWV0aG9kTmFtZSwgbnVsbCwgYXJncyk7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBlbXZhbF9nZXRfZ2xvYmFsKCkgewogICAgICAgICAgICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGdsb2JhbFRoaXM7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgIHJldHVybiBGdW5jdGlvbjsKICAgICAgICAgICAgfSgpKCJyZXR1cm4gdGhpcyIpKCk7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBfX2VtdmFsX2dldF9nbG9iYWwobmFtZSkgewogICAgICAgICAgICBpZiAobmFtZSA9PT0gMCkgewogICAgICAgICAgICAgIHJldHVybiBfX2VtdmFsX3JlZ2lzdGVyKGVtdmFsX2dldF9nbG9iYWwoKSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgbmFtZSA9IGdldFN0cmluZ09yU3ltYm9sKG5hbWUpOwogICAgICAgICAgICAgIHJldHVybiBfX2VtdmFsX3JlZ2lzdGVyKGVtdmFsX2dldF9nbG9iYWwoKVtuYW1lXSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIF9fZW12YWxfYWRkTWV0aG9kQ2FsbGVyKGNhbGxlcikgewogICAgICAgICAgICB2YXIgaWQgPSBlbXZhbF9tZXRob2RDYWxsZXJzLmxlbmd0aDsKICAgICAgICAgICAgZW12YWxfbWV0aG9kQ2FsbGVycy5wdXNoKGNhbGxlcik7CiAgICAgICAgICAgIHJldHVybiBpZDsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIF9fZW12YWxfbG9va3VwVHlwZXMoYXJnQ291bnQsIGFyZ1R5cGVzKSB7CiAgICAgICAgICAgIHZhciBhMyA9IG5ldyBBcnJheShhcmdDb3VudCk7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJnQ291bnQ7ICsraSkgewogICAgICAgICAgICAgIGEzW2ldID0gcmVxdWlyZVJlZ2lzdGVyZWRUeXBlKEhFQVAzMlsoYXJnVHlwZXMgPj4gMikgKyBpXSwgInBhcmFtZXRlciAiICsgaSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGEzOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gX19lbXZhbF9nZXRfbWV0aG9kX2NhbGxlcihhcmdDb3VudCwgYXJnVHlwZXMpIHsKICAgICAgICAgICAgdmFyIHR5cGVzID0gX19lbXZhbF9sb29rdXBUeXBlcyhhcmdDb3VudCwgYXJnVHlwZXMpOwogICAgICAgICAgICB2YXIgcmV0VHlwZSA9IHR5cGVzWzBdOwogICAgICAgICAgICB2YXIgc2lnbmF0dXJlTmFtZSA9IHJldFR5cGUubmFtZSArICJfJCIgKyB0eXBlcy5zbGljZSgxKS5tYXAoZnVuY3Rpb24odCkgewogICAgICAgICAgICAgIHJldHVybiB0Lm5hbWU7CiAgICAgICAgICAgIH0pLmpvaW4oIl8iKSArICIkIjsKICAgICAgICAgICAgdmFyIHBhcmFtcyA9IFsicmV0VHlwZSJdOwogICAgICAgICAgICB2YXIgYXJncyA9IFtyZXRUeXBlXTsKICAgICAgICAgICAgdmFyIGFyZ3NMaXN0ID0gIiI7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJnQ291bnQgLSAxOyArK2kpIHsKICAgICAgICAgICAgICBhcmdzTGlzdCArPSAoaSAhPT0gMCA/ICIsICIgOiAiIikgKyAiYXJnIiArIGk7CiAgICAgICAgICAgICAgcGFyYW1zLnB1c2goImFyZ1R5cGUiICsgaSk7CiAgICAgICAgICAgICAgYXJncy5wdXNoKHR5cGVzWzEgKyBpXSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGZ1bmN0aW9uTmFtZSA9IG1ha2VMZWdhbEZ1bmN0aW9uTmFtZSgibWV0aG9kQ2FsbGVyXyIgKyBzaWduYXR1cmVOYW1lKTsKICAgICAgICAgICAgdmFyIGZ1bmN0aW9uQm9keSA9ICJyZXR1cm4gZnVuY3Rpb24gIiArIGZ1bmN0aW9uTmFtZSArICIoaGFuZGxlLCBuYW1lLCBkZXN0cnVjdG9ycywgYXJncykge1xuIjsKICAgICAgICAgICAgdmFyIG9mZnNldCA9IDA7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJnQ291bnQgLSAxOyArK2kpIHsKICAgICAgICAgICAgICBmdW5jdGlvbkJvZHkgKz0gIiAgICB2YXIgYXJnIiArIGkgKyAiID0gYXJnVHlwZSIgKyBpICsgIi5yZWFkVmFsdWVGcm9tUG9pbnRlcihhcmdzIiArIChvZmZzZXQgPyAiKyIgKyBvZmZzZXQgOiAiIikgKyAiKTtcbiI7CiAgICAgICAgICAgICAgb2Zmc2V0ICs9IHR5cGVzW2kgKyAxXVsiYXJnUGFja0FkdmFuY2UiXTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbkJvZHkgKz0gIiAgICB2YXIgcnYgPSBoYW5kbGVbbmFtZV0oIiArIGFyZ3NMaXN0ICsgIik7XG4iOwogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ0NvdW50IC0gMTsgKytpKSB7CiAgICAgICAgICAgICAgaWYgKHR5cGVzW2kgKyAxXVsiZGVsZXRlT2JqZWN0Il0pIHsKICAgICAgICAgICAgICAgIGZ1bmN0aW9uQm9keSArPSAiICAgIGFyZ1R5cGUiICsgaSArICIuZGVsZXRlT2JqZWN0KGFyZyIgKyBpICsgIik7XG4iOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIXJldFR5cGUuaXNWb2lkKSB7CiAgICAgICAgICAgICAgZnVuY3Rpb25Cb2R5ICs9ICIgICAgcmV0dXJuIHJldFR5cGUudG9XaXJlVHlwZShkZXN0cnVjdG9ycywgcnYpO1xuIjsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbkJvZHkgKz0gIn07XG4iOwogICAgICAgICAgICBwYXJhbXMucHVzaChmdW5jdGlvbkJvZHkpOwogICAgICAgICAgICB2YXIgaW52b2tlckZ1bmN0aW9uID0gbmV3XyhGdW5jdGlvbiwgcGFyYW1zKS5hcHBseShudWxsLCBhcmdzKTsKICAgICAgICAgICAgcmV0dXJuIF9fZW12YWxfYWRkTWV0aG9kQ2FsbGVyKGludm9rZXJGdW5jdGlvbik7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBfX2VtdmFsX2dldF9tb2R1bGVfcHJvcGVydHkobmFtZSkgewogICAgICAgICAgICBuYW1lID0gZ2V0U3RyaW5nT3JTeW1ib2wobmFtZSk7CiAgICAgICAgICAgIHJldHVybiBfX2VtdmFsX3JlZ2lzdGVyKE1vZHVsZVtuYW1lXSk7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBfX2VtdmFsX2dldF9wcm9wZXJ0eShoYW5kbGUsIGtleTIpIHsKICAgICAgICAgICAgaGFuZGxlID0gcmVxdWlyZUhhbmRsZShoYW5kbGUpOwogICAgICAgICAgICBrZXkyID0gcmVxdWlyZUhhbmRsZShrZXkyKTsKICAgICAgICAgICAgcmV0dXJuIF9fZW12YWxfcmVnaXN0ZXIoaGFuZGxlW2tleTJdKTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIF9fZW12YWxfaW5jcmVmKGhhbmRsZSkgewogICAgICAgICAgICBpZiAoaGFuZGxlID4gNCkgewogICAgICAgICAgICAgIGVtdmFsX2hhbmRsZV9hcnJheVtoYW5kbGVdLnJlZmNvdW50ICs9IDE7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIGNyYWZ0RW12YWxBbGxvY2F0b3IoYXJnQ291bnQpIHsKICAgICAgICAgICAgdmFyIGFyZ3NMaXN0ID0gIiI7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJnQ291bnQ7ICsraSkgewogICAgICAgICAgICAgIGFyZ3NMaXN0ICs9IChpICE9PSAwID8gIiwgIiA6ICIiKSArICJhcmciICsgaTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgZnVuY3Rpb25Cb2R5ID0gInJldHVybiBmdW5jdGlvbiBlbXZhbF9hbGxvY2F0b3JfIiArIGFyZ0NvdW50ICsgIihjb25zdHJ1Y3RvciwgYXJnVHlwZXMsIGFyZ3MpIHtcbiI7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJnQ291bnQ7ICsraSkgewogICAgICAgICAgICAgIGZ1bmN0aW9uQm9keSArPSAidmFyIGFyZ1R5cGUiICsgaSArICIgPSByZXF1aXJlUmVnaXN0ZXJlZFR5cGUoTW9kdWxlWydIRUFQMzInXVsoYXJnVHlwZXMgPj4+IDIpICsgIiArIGkgKyAnXSwgInBhcmFtZXRlciAnICsgaSArICciKTtcbnZhciBhcmcnICsgaSArICIgPSBhcmdUeXBlIiArIGkgKyAiLnJlYWRWYWx1ZUZyb21Qb2ludGVyKGFyZ3MpO1xuYXJncyArPSBhcmdUeXBlIiArIGkgKyAiWydhcmdQYWNrQWR2YW5jZSddO1xuIjsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbkJvZHkgKz0gInZhciBvYmogPSBuZXcgY29uc3RydWN0b3IoIiArIGFyZ3NMaXN0ICsgIik7XG5yZXR1cm4gX19lbXZhbF9yZWdpc3RlcihvYmopO1xufVxuIjsKICAgICAgICAgICAgcmV0dXJuIG5ldyBGdW5jdGlvbigicmVxdWlyZVJlZ2lzdGVyZWRUeXBlIiwgIk1vZHVsZSIsICJfX2VtdmFsX3JlZ2lzdGVyIiwgZnVuY3Rpb25Cb2R5KShyZXF1aXJlUmVnaXN0ZXJlZFR5cGUsIE1vZHVsZSwgX19lbXZhbF9yZWdpc3Rlcik7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgZW12YWxfbmV3ZXJzID0ge307CiAgICAgICAgICBmdW5jdGlvbiBfX2VtdmFsX25ldyhoYW5kbGUsIGFyZ0NvdW50LCBhcmdUeXBlcywgYXJncykgewogICAgICAgICAgICBoYW5kbGUgPSByZXF1aXJlSGFuZGxlKGhhbmRsZSk7CiAgICAgICAgICAgIHZhciBuZXdlciA9IGVtdmFsX25ld2Vyc1thcmdDb3VudF07CiAgICAgICAgICAgIGlmICghbmV3ZXIpIHsKICAgICAgICAgICAgICBuZXdlciA9IGNyYWZ0RW12YWxBbGxvY2F0b3IoYXJnQ291bnQpOwogICAgICAgICAgICAgIGVtdmFsX25ld2Vyc1thcmdDb3VudF0gPSBuZXdlcjsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gbmV3ZXIoaGFuZGxlLCBhcmdUeXBlcywgYXJncyk7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBfX2VtdmFsX25ld19jc3RyaW5nKHYzKSB7CiAgICAgICAgICAgIHJldHVybiBfX2VtdmFsX3JlZ2lzdGVyKGdldFN0cmluZ09yU3ltYm9sKHYzKSk7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBfX2VtdmFsX3J1bl9kZXN0cnVjdG9ycyhoYW5kbGUpIHsKICAgICAgICAgICAgdmFyIGRlc3RydWN0b3JzID0gZW12YWxfaGFuZGxlX2FycmF5W2hhbmRsZV0udmFsdWU7CiAgICAgICAgICAgIHJ1bkRlc3RydWN0b3JzKGRlc3RydWN0b3JzKTsKICAgICAgICAgICAgX19lbXZhbF9kZWNyZWYoaGFuZGxlKTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIF9hYm9ydCgpIHsKICAgICAgICAgICAgYWJvcnQoKTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIF9lbXNjcmlwdGVuX21lbWNweV9iaWcoZGVzdCwgc3JjLCBudW0pIHsKICAgICAgICAgICAgSEVBUFU4LmNvcHlXaXRoaW4oZGVzdCwgc3JjLCBzcmMgKyBudW0pOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gZW1zY3JpcHRlbl9yZWFsbG9jX2J1ZmZlcihzaXplKSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgd2FzbU1lbW9yeS5ncm93KHNpemUgLSBidWZmZXIuYnl0ZUxlbmd0aCArIDY1NTM1ID4+PiAxNik7CiAgICAgICAgICAgICAgdXBkYXRlR2xvYmFsQnVmZmVyQW5kVmlld3Mod2FzbU1lbW9yeS5idWZmZXIpOwogICAgICAgICAgICAgIHJldHVybiAxOwogICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIF9lbXNjcmlwdGVuX3Jlc2l6ZV9oZWFwKHJlcXVlc3RlZFNpemUpIHsKICAgICAgICAgICAgdmFyIG9sZFNpemUgPSBIRUFQVTgubGVuZ3RoOwogICAgICAgICAgICByZXF1ZXN0ZWRTaXplID0gcmVxdWVzdGVkU2l6ZSA+Pj4gMDsKICAgICAgICAgICAgdmFyIG1heEhlYXBTaXplID0gMjE0NzQ4MzY0ODsKICAgICAgICAgICAgaWYgKHJlcXVlc3RlZFNpemUgPiBtYXhIZWFwU2l6ZSkgewogICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmb3IgKHZhciBjdXREb3duID0gMTsgY3V0RG93biA8PSA0OyBjdXREb3duICo9IDIpIHsKICAgICAgICAgICAgICB2YXIgb3Zlckdyb3duSGVhcFNpemUgPSBvbGRTaXplICogKDEgKyAwLjIgLyBjdXREb3duKTsKICAgICAgICAgICAgICBvdmVyR3Jvd25IZWFwU2l6ZSA9IE1hdGgubWluKG92ZXJHcm93bkhlYXBTaXplLCByZXF1ZXN0ZWRTaXplICsgMTAwNjYzMjk2KTsKICAgICAgICAgICAgICB2YXIgbmV3U2l6ZSA9IE1hdGgubWluKG1heEhlYXBTaXplLCBhbGlnblVwKE1hdGgubWF4KHJlcXVlc3RlZFNpemUsIG92ZXJHcm93bkhlYXBTaXplKSwgNjU1MzYpKTsKICAgICAgICAgICAgICB2YXIgcmVwbGFjZW1lbnQgPSBlbXNjcmlwdGVuX3JlYWxsb2NfYnVmZmVyKG5ld1NpemUpOwogICAgICAgICAgICAgIGlmIChyZXBsYWNlbWVudCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBTWVNDQUxMUyA9IHsgbWFwcGluZ3M6IHt9LCBidWZmZXJzOiBbbnVsbCwgW10sIFtdXSwgcHJpbnRDaGFyOiBmdW5jdGlvbihzdHJlYW0sIGN1cnIpIHsKICAgICAgICAgICAgdmFyIGJ1ZmZlcjIgPSBTWVNDQUxMUy5idWZmZXJzW3N0cmVhbV07CiAgICAgICAgICAgIGlmIChjdXJyID09PSAwIHx8IGN1cnIgPT09IDEwKSB7CiAgICAgICAgICAgICAgKHN0cmVhbSA9PT0gMSA/IG91dCA6IGVycikoVVRGOEFycmF5VG9TdHJpbmcoYnVmZmVyMiwgMCkpOwogICAgICAgICAgICAgIGJ1ZmZlcjIubGVuZ3RoID0gMDsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBidWZmZXIyLnB1c2goY3Vycik7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sIHZhcmFyZ3M6IHZvaWQgMCwgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgU1lTQ0FMTFMudmFyYXJncyArPSA0OwogICAgICAgICAgICB2YXIgcmV0ID0gSEVBUDMyW1NZU0NBTExTLnZhcmFyZ3MgLSA0ID4+IDJdOwogICAgICAgICAgICByZXR1cm4gcmV0OwogICAgICAgICAgfSwgZ2V0U3RyOiBmdW5jdGlvbihwdHIpIHsKICAgICAgICAgICAgdmFyIHJldCA9IFVURjhUb1N0cmluZyhwdHIpOwogICAgICAgICAgICByZXR1cm4gcmV0OwogICAgICAgICAgfSwgZ2V0NjQ6IGZ1bmN0aW9uKGxvdywgaGlnaCkgewogICAgICAgICAgICByZXR1cm4gbG93OwogICAgICAgICAgfSB9OwogICAgICAgICAgZnVuY3Rpb24gX2ZkX2Nsb3NlKGZkKSB7CiAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gX2ZkX3NlZWsoZmQsIG9mZnNldF9sb3csIG9mZnNldF9oaWdoLCB3aGVuY2UsIG5ld09mZnNldCkgewogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gX2ZkX3dyaXRlKGZkLCBpb3YsIGlvdmNudCwgcG51bSkgewogICAgICAgICAgICB2YXIgbnVtID0gMDsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpb3ZjbnQ7IGkrKykgewogICAgICAgICAgICAgIHZhciBwdHIgPSBIRUFQMzJbaW92ICsgaSAqIDggPj4gMl07CiAgICAgICAgICAgICAgdmFyIGxlbiA9IEhFQVAzMltpb3YgKyAoaSAqIDggKyA0KSA+PiAyXTsKICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGxlbjsgaisrKSB7CiAgICAgICAgICAgICAgICBTWVNDQUxMUy5wcmludENoYXIoZmQsIEhFQVBVOFtwdHIgKyBqXSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIG51bSArPSBsZW47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgSEVBUDMyW3BudW0gPj4gMl0gPSBudW07CiAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gX3NldFRlbXBSZXQwKCRpKSB7CiAgICAgICAgICAgIHNldFRlbXBSZXQwKCRpIHwgMCk7CiAgICAgICAgICB9CiAgICAgICAgICBJbnRlcm5hbEVycm9yID0gTW9kdWxlWyJJbnRlcm5hbEVycm9yIl0gPSBleHRlbmRFcnJvcihFcnJvciwgIkludGVybmFsRXJyb3IiKTsKICAgICAgICAgIGVtYmluZF9pbml0X2NoYXJDb2RlcygpOwogICAgICAgICAgQmluZGluZ0Vycm9yID0gTW9kdWxlWyJCaW5kaW5nRXJyb3IiXSA9IGV4dGVuZEVycm9yKEVycm9yLCAiQmluZGluZ0Vycm9yIik7CiAgICAgICAgICBpbml0X0NsYXNzSGFuZGxlKCk7CiAgICAgICAgICBpbml0X1JlZ2lzdGVyZWRQb2ludGVyKCk7CiAgICAgICAgICBpbml0X2VtYmluZCgpOwogICAgICAgICAgVW5ib3VuZFR5cGVFcnJvciA9IE1vZHVsZVsiVW5ib3VuZFR5cGVFcnJvciJdID0gZXh0ZW5kRXJyb3IoRXJyb3IsICJVbmJvdW5kVHlwZUVycm9yIik7CiAgICAgICAgICBpbml0X2VtdmFsKCk7CiAgICAgICAgICB2YXIgYXNtTGlicmFyeUFyZyA9IHsgInQiOiBfX2VtYmluZF9maW5hbGl6ZV92YWx1ZV9vYmplY3QsICJJIjogX19lbWJpbmRfcmVnaXN0ZXJfYm9vbCwgIngiOiBfX2VtYmluZF9yZWdpc3Rlcl9jbGFzcywgInciOiBfX2VtYmluZF9yZWdpc3Rlcl9jbGFzc19jb25zdHJ1Y3RvciwgImQiOiBfX2VtYmluZF9yZWdpc3Rlcl9jbGFzc19mdW5jdGlvbiwgImsiOiBfX2VtYmluZF9yZWdpc3Rlcl9jb25zdGFudCwgIkgiOiBfX2VtYmluZF9yZWdpc3Rlcl9lbXZhbCwgIm4iOiBfX2VtYmluZF9yZWdpc3Rlcl9lbnVtLCAiYSI6IF9fZW1iaW5kX3JlZ2lzdGVyX2VudW1fdmFsdWUsICJBIjogX19lbWJpbmRfcmVnaXN0ZXJfZmxvYXQsICJpIjogX19lbWJpbmRfcmVnaXN0ZXJfZnVuY3Rpb24sICJqIjogX19lbWJpbmRfcmVnaXN0ZXJfaW50ZWdlciwgImgiOiBfX2VtYmluZF9yZWdpc3Rlcl9tZW1vcnlfdmlldywgIkIiOiBfX2VtYmluZF9yZWdpc3Rlcl9zdGRfc3RyaW5nLCAidiI6IF9fZW1iaW5kX3JlZ2lzdGVyX3N0ZF93c3RyaW5nLCAidSI6IF9fZW1iaW5kX3JlZ2lzdGVyX3ZhbHVlX29iamVjdCwgImMiOiBfX2VtYmluZF9yZWdpc3Rlcl92YWx1ZV9vYmplY3RfZmllbGQsICJKIjogX19lbWJpbmRfcmVnaXN0ZXJfdm9pZCwgIm0iOiBfX2VtdmFsX2FzLCAicyI6IF9fZW12YWxfY2FsbF92b2lkX21ldGhvZCwgImIiOiBfX2VtdmFsX2RlY3JlZiwgInkiOiBfX2VtdmFsX2dldF9nbG9iYWwsICJwIjogX19lbXZhbF9nZXRfbWV0aG9kX2NhbGxlciwgInIiOiBfX2VtdmFsX2dldF9tb2R1bGVfcHJvcGVydHksICJlIjogX19lbXZhbF9nZXRfcHJvcGVydHksICJnIjogX19lbXZhbF9pbmNyZWYsICJxIjogX19lbXZhbF9uZXcsICJmIjogX19lbXZhbF9uZXdfY3N0cmluZywgImwiOiBfX2VtdmFsX3J1bl9kZXN0cnVjdG9ycywgIm8iOiBfYWJvcnQsICJFIjogX2Vtc2NyaXB0ZW5fbWVtY3B5X2JpZywgIkYiOiBfZW1zY3JpcHRlbl9yZXNpemVfaGVhcCwgIkciOiBfZmRfY2xvc2UsICJDIjogX2ZkX3NlZWssICJ6IjogX2ZkX3dyaXRlLCAiRCI6IF9zZXRUZW1wUmV0MCB9OwogICAgICAgICAgdmFyIGFzbSA9IGNyZWF0ZVdhc20oKTsKICAgICAgICAgIHZhciBfX193YXNtX2NhbGxfY3RvcnMgPSBNb2R1bGVbIl9fX3dhc21fY2FsbF9jdG9ycyJdID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoX19fd2FzbV9jYWxsX2N0b3JzID0gTW9kdWxlWyJfX193YXNtX2NhbGxfY3RvcnMiXSA9IE1vZHVsZVsiYXNtIl1bIkwiXSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICAgIH07CiAgICAgICAgICB2YXIgX21hbGxvYyA9IE1vZHVsZVsiX21hbGxvYyJdID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAoX21hbGxvYyA9IE1vZHVsZVsiX21hbGxvYyJdID0gTW9kdWxlWyJhc20iXVsiTSJdKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfTsKICAgICAgICAgIHZhciBfZnJlZSA9IE1vZHVsZVsiX2ZyZWUiXSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKF9mcmVlID0gTW9kdWxlWyJfZnJlZSJdID0gTW9kdWxlWyJhc20iXVsiTiJdKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfTsKICAgICAgICAgIHZhciBfX19nZXRUeXBlTmFtZSA9IE1vZHVsZVsiX19fZ2V0VHlwZU5hbWUiXSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gKF9fX2dldFR5cGVOYW1lID0gTW9kdWxlWyJfX19nZXRUeXBlTmFtZSJdID0gTW9kdWxlWyJhc20iXVsiUCJdKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfTsKICAgICAgICAgIHZhciBfX19lbWJpbmRfcmVnaXN0ZXJfbmF0aXZlX2FuZF9idWlsdGluX3R5cGVzID0gTW9kdWxlWyJfX19lbWJpbmRfcmVnaXN0ZXJfbmF0aXZlX2FuZF9idWlsdGluX3R5cGVzIl0gPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChfX19lbWJpbmRfcmVnaXN0ZXJfbmF0aXZlX2FuZF9idWlsdGluX3R5cGVzID0gTW9kdWxlWyJfX19lbWJpbmRfcmVnaXN0ZXJfbmF0aXZlX2FuZF9idWlsdGluX3R5cGVzIl0gPSBNb2R1bGVbImFzbSJdWyJRIl0pLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9OwogICAgICAgICAgdmFyIGR5bkNhbGxfamlqaSA9IE1vZHVsZVsiZHluQ2FsbF9qaWppIl0gPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIChkeW5DYWxsX2ppamkgPSBNb2R1bGVbImR5bkNhbGxfamlqaSJdID0gTW9kdWxlWyJhc20iXVsiUiJdKS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfTsKICAgICAgICAgIHZhciBjYWxsZWRSdW47CiAgICAgICAgICBmdW5jdGlvbiBFeGl0U3RhdHVzKHN0YXR1cykgewogICAgICAgICAgICB0aGlzLm5hbWUgPSAiRXhpdFN0YXR1cyI7CiAgICAgICAgICAgIHRoaXMubWVzc2FnZSA9ICJQcm9ncmFtIHRlcm1pbmF0ZWQgd2l0aCBleGl0KCIgKyBzdGF0dXMgKyAiKSI7CiAgICAgICAgICAgIHRoaXMuc3RhdHVzID0gc3RhdHVzOwogICAgICAgICAgfQogICAgICAgICAgZGVwZW5kZW5jaWVzRnVsZmlsbGVkID0gZnVuY3Rpb24gcnVuQ2FsbGVyKCkgewogICAgICAgICAgICBpZiAoIWNhbGxlZFJ1bikKICAgICAgICAgICAgICBydW4oKTsKICAgICAgICAgICAgaWYgKCFjYWxsZWRSdW4pCiAgICAgICAgICAgICAgZGVwZW5kZW5jaWVzRnVsZmlsbGVkID0gcnVuQ2FsbGVyOwogICAgICAgICAgfTsKICAgICAgICAgIGZ1bmN0aW9uIHJ1bihhcmdzKSB7CiAgICAgICAgICAgIGFyZ3MgPSBhcmdzIHx8IGFyZ3VtZW50c187CiAgICAgICAgICAgIGlmIChydW5EZXBlbmRlbmNpZXMgPiAwKSB7CiAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHByZVJ1bigpOwogICAgICAgICAgICBpZiAocnVuRGVwZW5kZW5jaWVzID4gMCkgewogICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBkb1J1bigpIHsKICAgICAgICAgICAgICBpZiAoY2FsbGVkUnVuKQogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgIGNhbGxlZFJ1biA9IHRydWU7CiAgICAgICAgICAgICAgTW9kdWxlWyJjYWxsZWRSdW4iXSA9IHRydWU7CiAgICAgICAgICAgICAgaWYgKEFCT1JUKQogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgIGluaXRSdW50aW1lKCk7CiAgICAgICAgICAgICAgcHJlTWFpbigpOwogICAgICAgICAgICAgIHJlYWR5UHJvbWlzZVJlc29sdmUoTW9kdWxlKTsKICAgICAgICAgICAgICBpZiAoTW9kdWxlWyJvblJ1bnRpbWVJbml0aWFsaXplZCJdKQogICAgICAgICAgICAgICAgTW9kdWxlWyJvblJ1bnRpbWVJbml0aWFsaXplZCJdKCk7CiAgICAgICAgICAgICAgcG9zdFJ1bigpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChNb2R1bGVbInNldFN0YXR1cyJdKSB7CiAgICAgICAgICAgICAgTW9kdWxlWyJzZXRTdGF0dXMiXSgiUnVubmluZy4uLiIpOwogICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICBNb2R1bGVbInNldFN0YXR1cyJdKCIiKTsKICAgICAgICAgICAgICAgIH0sIDEpOwogICAgICAgICAgICAgICAgZG9SdW4oKTsKICAgICAgICAgICAgICB9LCAxKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBkb1J1bigpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBNb2R1bGVbInJ1biJdID0gcnVuOwogICAgICAgICAgaWYgKE1vZHVsZVsicHJlSW5pdCJdKSB7CiAgICAgICAgICAgIGlmICh0eXBlb2YgTW9kdWxlWyJwcmVJbml0Il0gPT0gImZ1bmN0aW9uIikKICAgICAgICAgICAgICBNb2R1bGVbInByZUluaXQiXSA9IFtNb2R1bGVbInByZUluaXQiXV07CiAgICAgICAgICAgIHdoaWxlIChNb2R1bGVbInByZUluaXQiXS5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgTW9kdWxlWyJwcmVJbml0Il0ucG9wKCkoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcnVuKCk7CiAgICAgICAgICByZXR1cm4gQkFTSVMyLnJlYWR5OwogICAgICAgIH07CiAgICAgIH0oKTsKICAgICAgaWYgKHR5cGVvZiBleHBvcnRzMiA9PT0gIm9iamVjdCIgJiYgdHlwZW9mIG1vZHVsZSA9PT0gIm9iamVjdCIpCiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBCQVNJUzsKICAgICAgZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gImZ1bmN0aW9uIiAmJiBkZWZpbmVbImFtZCJdKQogICAgICAgIGRlZmluZShbXSwgZnVuY3Rpb24oKSB7CiAgICAgICAgICByZXR1cm4gQkFTSVM7CiAgICAgICAgfSk7CiAgICAgIGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzMiA9PT0gIm9iamVjdCIpCiAgICAgICAgZXhwb3J0czJbIkJBU0lTIl0gPSBCQVNJUzsKICAgIH0KICB9KTsKCiAgLy8gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL3RyYW5zY29kZUtUWDIuanMKICB2YXIgdHJhbnNjb2RlS1RYMl9leHBvcnRzID0ge307CiAgX19leHBvcnQodHJhbnNjb2RlS1RYMl9leHBvcnRzLCB7CiAgICBkZWZhdWx0OiAoKSA9PiB0cmFuc2NvZGVLVFgyX2RlZmF1bHQKICB9KTsKICBmdW5jdGlvbiB0cmFuc2NvZGUocGFyYW1ldGVycywgdHJhbnNmZXJhYmxlT2JqZWN0cykgewogICAgQ2hlY2tfZGVmYXVsdC50eXBlT2Yub2JqZWN0KCJ0cmFuc2NvZGVyTW9kdWxlIiwgdHJhbnNjb2Rlck1vZHVsZSk7CiAgICBjb25zdCBkYXRhID0gcGFyYW1ldGVycy5rdHgyQnVmZmVyOwogICAgY29uc3Qgc3VwcG9ydGVkVGFyZ2V0Rm9ybWF0cyA9IHBhcmFtZXRlcnMuc3VwcG9ydGVkVGFyZ2V0Rm9ybWF0czsKICAgIGxldCBoZWFkZXI7CiAgICB0cnkgewogICAgICBoZWFkZXIgPSByZWFkMihkYXRhKTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcl9kZWZhdWx0KCJJbnZhbGlkIEtUWDIgZmlsZS4iKTsKICAgIH0KICAgIGlmIChoZWFkZXIubGF5ZXJDb3VudCAhPT0gMCkgewogICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yX2RlZmF1bHQoIktUWDIgdGV4dHVyZSBhcnJheXMgYXJlIG5vdCBzdXBwb3J0ZWQuIik7CiAgICB9CiAgICBpZiAoaGVhZGVyLnBpeGVsRGVwdGggIT09IDApIHsKICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcl9kZWZhdWx0KCJLVFgyIDNEIHRleHR1cmVzIGFyZSB1bnN1cHBvcnRlZC4iKTsKICAgIH0KICAgIGNvbnN0IGRmZCA9IGhlYWRlci5kYXRhRm9ybWF0RGVzY3JpcHRvclswXTsKICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBBcnJheShoZWFkZXIubGV2ZWxDb3VudCk7CiAgICBpZiAoaGVhZGVyLnZrRm9ybWF0ID09PSAwICYmIChkZmQuY29sb3JNb2RlbCA9PT0gY29sb3JNb2RlbEVUQzFTIHx8IGRmZC5jb2xvck1vZGVsID09PSBjb2xvck1vZGVsVUFTVEMpKSB7CiAgICAgIHRyYW5zY29kZUNvbXByZXNzZWQoCiAgICAgICAgZGF0YSwKICAgICAgICBoZWFkZXIsCiAgICAgICAgc3VwcG9ydGVkVGFyZ2V0Rm9ybWF0cywKICAgICAgICB0cmFuc2NvZGVyTW9kdWxlLAogICAgICAgIHRyYW5zZmVyYWJsZU9iamVjdHMsCiAgICAgICAgcmVzdWx0CiAgICAgICk7CiAgICB9IGVsc2UgewogICAgICB0cmFuc2ZlcmFibGVPYmplY3RzLnB1c2goZGF0YS5idWZmZXIpOwogICAgICBwYXJzZVVuY29tcHJlc3NlZChoZWFkZXIsIHJlc3VsdCk7CiAgICB9CiAgICByZXR1cm4gcmVzdWx0OwogIH0KICBmdW5jdGlvbiBwYXJzZVVuY29tcHJlc3NlZChoZWFkZXIsIHJlc3VsdCkgewogICAgY29uc3QgaW50ZXJuYWxGb3JtYXQgPSBoZWFkZXIudmtGb3JtYXQgPT09IFZ1bGthbkNvbnN0YW50c19kZWZhdWx0LlZLX0ZPUk1BVF9SOEc4QjhfU1JHQiA/IFBpeGVsRm9ybWF0X2RlZmF1bHQuUkdCIDogUGl4ZWxGb3JtYXRfZGVmYXVsdC5SR0JBOwogICAgbGV0IGRhdGF0eXBlOwogICAgaWYgKGhlYWRlci52a0Zvcm1hdCA9PT0gVnVsa2FuQ29uc3RhbnRzX2RlZmF1bHQuVktfRk9STUFUX1I4RzhCOEE4X1VOT1JNKSB7CiAgICAgIGRhdGF0eXBlID0gUGl4ZWxEYXRhdHlwZV9kZWZhdWx0LlVOU0lHTkVEX0JZVEU7CiAgICB9IGVsc2UgaWYgKGhlYWRlci52a0Zvcm1hdCA9PT0gVnVsa2FuQ29uc3RhbnRzX2RlZmF1bHQuVktfRk9STUFUX1IxNkcxNkIxNkExNl9TRkxPQVQpIHsKICAgICAgZGF0YXR5cGUgPSBQaXhlbERhdGF0eXBlX2RlZmF1bHQuSEFMRl9GTE9BVDsKICAgIH0gZWxzZSBpZiAoaGVhZGVyLnZrRm9ybWF0ID09PSBWdWxrYW5Db25zdGFudHNfZGVmYXVsdC5WS19GT1JNQVRfUjMyRzMyQjMyQTMyX1NGTE9BVCkgewogICAgICBkYXRhdHlwZSA9IFBpeGVsRGF0YXR5cGVfZGVmYXVsdC5GTE9BVDsKICAgIH0KICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaGVhZGVyLmxldmVscy5sZW5ndGg7ICsraSkgewogICAgICBjb25zdCBsZXZlbCA9IHt9OwogICAgICByZXN1bHRbaV0gPSBsZXZlbDsKICAgICAgY29uc3QgbGV2ZWxCdWZmZXIgPSBoZWFkZXIubGV2ZWxzW2ldLmxldmVsRGF0YTsKICAgICAgY29uc3Qgd2lkdGggPSBoZWFkZXIucGl4ZWxXaWR0aCA+PiBpOwogICAgICBjb25zdCBoZWlnaHQgPSBoZWFkZXIucGl4ZWxIZWlnaHQgPj4gaTsKICAgICAgY29uc3QgZmFjZUxlbmd0aCA9IHdpZHRoICogaGVpZ2h0ICogUGl4ZWxGb3JtYXRfZGVmYXVsdC5jb21wb25lbnRzTGVuZ3RoKGludGVybmFsRm9ybWF0KTsKICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBoZWFkZXIuZmFjZUNvdW50OyArK2opIHsKICAgICAgICBjb25zdCBmYWNlQnl0ZU9mZnNldCA9IGxldmVsQnVmZmVyLmJ5dGVPZmZzZXQgKyBmYWNlTGVuZ3RoICogaGVhZGVyLnR5cGVTaXplICogajsKICAgICAgICBsZXQgZmFjZVZpZXc7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoZGF0YXR5cGUpIHx8IFBpeGVsRGF0YXR5cGVfZGVmYXVsdC5zaXplSW5CeXRlcyhkYXRhdHlwZSkgPT09IDEpIHsKICAgICAgICAgIGZhY2VWaWV3ID0gbmV3IFVpbnQ4QXJyYXkoCiAgICAgICAgICAgIGxldmVsQnVmZmVyLmJ1ZmZlciwKICAgICAgICAgICAgZmFjZUJ5dGVPZmZzZXQsCiAgICAgICAgICAgIGZhY2VMZW5ndGgKICAgICAgICAgICk7CiAgICAgICAgfSBlbHNlIGlmIChQaXhlbERhdGF0eXBlX2RlZmF1bHQuc2l6ZUluQnl0ZXMoZGF0YXR5cGUpID09PSAyKSB7CiAgICAgICAgICBmYWNlVmlldyA9IG5ldyBVaW50MTZBcnJheSgKICAgICAgICAgICAgbGV2ZWxCdWZmZXIuYnVmZmVyLAogICAgICAgICAgICBmYWNlQnl0ZU9mZnNldCwKICAgICAgICAgICAgZmFjZUxlbmd0aAogICAgICAgICAgKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZmFjZVZpZXcgPSBuZXcgRmxvYXQzMkFycmF5KAogICAgICAgICAgICBsZXZlbEJ1ZmZlci5idWZmZXIsCiAgICAgICAgICAgIGZhY2VCeXRlT2Zmc2V0LAogICAgICAgICAgICBmYWNlTGVuZ3RoCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBsZXZlbFtmYWNlT3JkZXJbal1dID0gewogICAgICAgICAgaW50ZXJuYWxGb3JtYXQsCiAgICAgICAgICBkYXRhdHlwZSwKICAgICAgICAgIHdpZHRoLAogICAgICAgICAgaGVpZ2h0LAogICAgICAgICAgbGV2ZWxCdWZmZXI6IGZhY2VWaWV3CiAgICAgICAgfTsKICAgICAgfQogICAgfQogIH0KICBmdW5jdGlvbiB0cmFuc2NvZGVDb21wcmVzc2VkKGRhdGEsIGhlYWRlciwgc3VwcG9ydGVkVGFyZ2V0Rm9ybWF0cywgdHJhbnNjb2Rlck1vZHVsZTIsIHRyYW5zZmVyYWJsZU9iamVjdHMsIHJlc3VsdCkgewogICAgY29uc3Qga3R4MkZpbGUgPSBuZXcgdHJhbnNjb2Rlck1vZHVsZTIuS1RYMkZpbGUoZGF0YSk7CiAgICBsZXQgd2lkdGggPSBrdHgyRmlsZS5nZXRXaWR0aCgpOwogICAgbGV0IGhlaWdodCA9IGt0eDJGaWxlLmdldEhlaWdodCgpOwogICAgY29uc3QgbGV2ZWxzID0ga3R4MkZpbGUuZ2V0TGV2ZWxzKCk7CiAgICBjb25zdCBoYXNBbHBoYSA9IGt0eDJGaWxlLmdldEhhc0FscGhhKCk7CiAgICBpZiAoISh3aWR0aCA+IDApIHx8ICEoaGVpZ2h0ID4gMCkgfHwgIShsZXZlbHMgPiAwKSkgewogICAgICBrdHgyRmlsZS5jbG9zZSgpOwogICAgICBrdHgyRmlsZS5kZWxldGUoKTsKICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcl9kZWZhdWx0KCJJbnZhbGlkIEtUWDIgZmlsZSIpOwogICAgfQogICAgbGV0IGludGVybmFsRm9ybWF0LCB0cmFuc2NvZGVyRm9ybWF0OwogICAgY29uc3QgZGZkID0gaGVhZGVyLmRhdGFGb3JtYXREZXNjcmlwdG9yWzBdOwogICAgY29uc3QgQmFzaXNGb3JtYXQgPSB0cmFuc2NvZGVyTW9kdWxlMi50cmFuc2NvZGVyX3RleHR1cmVfZm9ybWF0OwogICAgaWYgKGRmZC5jb2xvck1vZGVsID09PSBjb2xvck1vZGVsRVRDMVMpIHsKICAgICAgaWYgKHN1cHBvcnRlZFRhcmdldEZvcm1hdHMuZXRjKSB7CiAgICAgICAgaW50ZXJuYWxGb3JtYXQgPSBoYXNBbHBoYSA/IFBpeGVsRm9ybWF0X2RlZmF1bHQuUkdCQThfRVRDMl9FQUMgOiBQaXhlbEZvcm1hdF9kZWZhdWx0LlJHQjhfRVRDMjsKICAgICAgICB0cmFuc2NvZGVyRm9ybWF0ID0gaGFzQWxwaGEgPyBCYXNpc0Zvcm1hdC5jVEZFVEMyX1JHQkEgOiBCYXNpc0Zvcm1hdC5jVEZFVEMxX1JHQjsKICAgICAgfSBlbHNlIGlmIChzdXBwb3J0ZWRUYXJnZXRGb3JtYXRzLmV0YzEgJiYgIWhhc0FscGhhKSB7CiAgICAgICAgaW50ZXJuYWxGb3JtYXQgPSBQaXhlbEZvcm1hdF9kZWZhdWx0LlJHQl9FVEMxOwogICAgICAgIHRyYW5zY29kZXJGb3JtYXQgPSBCYXNpc0Zvcm1hdC5jVEZFVEMxX1JHQjsKICAgICAgfSBlbHNlIGlmIChzdXBwb3J0ZWRUYXJnZXRGb3JtYXRzLnMzdGMpIHsKICAgICAgICBpbnRlcm5hbEZvcm1hdCA9IGhhc0FscGhhID8gUGl4ZWxGb3JtYXRfZGVmYXVsdC5SR0JBX0RYVDUgOiBQaXhlbEZvcm1hdF9kZWZhdWx0LlJHQl9EWFQxOwogICAgICAgIHRyYW5zY29kZXJGb3JtYXQgPSBoYXNBbHBoYSA/IEJhc2lzRm9ybWF0LmNURkJDM19SR0JBIDogQmFzaXNGb3JtYXQuY1RGQkMxX1JHQjsKICAgICAgfSBlbHNlIGlmIChzdXBwb3J0ZWRUYXJnZXRGb3JtYXRzLnB2cnRjKSB7CiAgICAgICAgaW50ZXJuYWxGb3JtYXQgPSBoYXNBbHBoYSA/IFBpeGVsRm9ybWF0X2RlZmF1bHQuUkdCQV9QVlJUQ180QlBQVjEgOiBQaXhlbEZvcm1hdF9kZWZhdWx0LlJHQl9QVlJUQ180QlBQVjE7CiAgICAgICAgdHJhbnNjb2RlckZvcm1hdCA9IGhhc0FscGhhID8gQmFzaXNGb3JtYXQuY1RGUFZSVEMxXzRfUkdCQSA6IEJhc2lzRm9ybWF0LmNURlBWUlRDMV80X1JHQjsKICAgICAgfSBlbHNlIGlmIChzdXBwb3J0ZWRUYXJnZXRGb3JtYXRzLmFzdGMpIHsKICAgICAgICBpbnRlcm5hbEZvcm1hdCA9IFBpeGVsRm9ybWF0X2RlZmF1bHQuUkdCQV9BU1RDOwogICAgICAgIHRyYW5zY29kZXJGb3JtYXQgPSBCYXNpc0Zvcm1hdC5jVEZBU1RDXzR4NF9SR0JBOwogICAgICB9IGVsc2UgaWYgKHN1cHBvcnRlZFRhcmdldEZvcm1hdHMuYmM3KSB7CiAgICAgICAgaW50ZXJuYWxGb3JtYXQgPSBQaXhlbEZvcm1hdF9kZWZhdWx0LlJHQkFfQkM3OwogICAgICAgIHRyYW5zY29kZXJGb3JtYXQgPSBCYXNpc0Zvcm1hdC5jVEZCQzdfUkdCQTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yX2RlZmF1bHQoCiAgICAgICAgICAiTm8gdHJhbnNjb2RpbmcgZm9ybWF0IHRhcmdldCBhdmFpbGFibGUgZm9yIEVUQzFTIGNvbXByZXNzZWQga3R4Mi4iCiAgICAgICAgKTsKICAgICAgfQogICAgfSBlbHNlIGlmIChkZmQuY29sb3JNb2RlbCA9PT0gY29sb3JNb2RlbFVBU1RDKSB7CiAgICAgIGlmIChzdXBwb3J0ZWRUYXJnZXRGb3JtYXRzLmFzdGMpIHsKICAgICAgICBpbnRlcm5hbEZvcm1hdCA9IFBpeGVsRm9ybWF0X2RlZmF1bHQuUkdCQV9BU1RDOwogICAgICAgIHRyYW5zY29kZXJGb3JtYXQgPSBCYXNpc0Zvcm1hdC5jVEZBU1RDXzR4NF9SR0JBOwogICAgICB9IGVsc2UgaWYgKHN1cHBvcnRlZFRhcmdldEZvcm1hdHMuYmM3KSB7CiAgICAgICAgaW50ZXJuYWxGb3JtYXQgPSBQaXhlbEZvcm1hdF9kZWZhdWx0LlJHQkFfQkM3OwogICAgICAgIHRyYW5zY29kZXJGb3JtYXQgPSBCYXNpc0Zvcm1hdC5jVEZCQzdfUkdCQTsKICAgICAgfSBlbHNlIGlmIChzdXBwb3J0ZWRUYXJnZXRGb3JtYXRzLnMzdGMpIHsKICAgICAgICBpbnRlcm5hbEZvcm1hdCA9IGhhc0FscGhhID8gUGl4ZWxGb3JtYXRfZGVmYXVsdC5SR0JBX0RYVDUgOiBQaXhlbEZvcm1hdF9kZWZhdWx0LlJHQl9EWFQxOwogICAgICAgIHRyYW5zY29kZXJGb3JtYXQgPSBoYXNBbHBoYSA/IEJhc2lzRm9ybWF0LmNURkJDM19SR0JBIDogQmFzaXNGb3JtYXQuY1RGQkMxX1JHQjsKICAgICAgfSBlbHNlIGlmIChzdXBwb3J0ZWRUYXJnZXRGb3JtYXRzLmV0YykgewogICAgICAgIGludGVybmFsRm9ybWF0ID0gaGFzQWxwaGEgPyBQaXhlbEZvcm1hdF9kZWZhdWx0LlJHQkE4X0VUQzJfRUFDIDogUGl4ZWxGb3JtYXRfZGVmYXVsdC5SR0I4X0VUQzI7CiAgICAgICAgdHJhbnNjb2RlckZvcm1hdCA9IGhhc0FscGhhID8gQmFzaXNGb3JtYXQuY1RGRVRDMl9SR0JBIDogQmFzaXNGb3JtYXQuY1RGRVRDMV9SR0I7CiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydGVkVGFyZ2V0Rm9ybWF0cy5ldGMxICYmICFoYXNBbHBoYSkgewogICAgICAgIGludGVybmFsRm9ybWF0ID0gUGl4ZWxGb3JtYXRfZGVmYXVsdC5SR0JfRVRDMTsKICAgICAgICB0cmFuc2NvZGVyRm9ybWF0ID0gQmFzaXNGb3JtYXQuY1RGRVRDMV9SR0I7CiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydGVkVGFyZ2V0Rm9ybWF0cy5wdnJ0YykgewogICAgICAgIGludGVybmFsRm9ybWF0ID0gaGFzQWxwaGEgPyBQaXhlbEZvcm1hdF9kZWZhdWx0LlJHQkFfUFZSVENfNEJQUFYxIDogUGl4ZWxGb3JtYXRfZGVmYXVsdC5SR0JfUFZSVENfNEJQUFYxOwogICAgICAgIHRyYW5zY29kZXJGb3JtYXQgPSBoYXNBbHBoYSA/IEJhc2lzRm9ybWF0LmNURlBWUlRDMV80X1JHQkEgOiBCYXNpc0Zvcm1hdC5jVEZQVlJUQzFfNF9SR0I7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcl9kZWZhdWx0KAogICAgICAgICAgIk5vIHRyYW5zY29kaW5nIGZvcm1hdCB0YXJnZXQgYXZhaWxhYmxlIGZvciBVQVNUQyBjb21wcmVzc2VkIGt0eDIuIgogICAgICAgICk7CiAgICAgIH0KICAgIH0KICAgIGlmICgha3R4MkZpbGUuc3RhcnRUcmFuc2NvZGluZygpKSB7CiAgICAgIGt0eDJGaWxlLmNsb3NlKCk7CiAgICAgIGt0eDJGaWxlLmRlbGV0ZSgpOwogICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yX2RlZmF1bHQoInN0YXJ0VHJhbnNjb2RpbmcoKSBmYWlsZWQiKTsKICAgIH0KICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaGVhZGVyLmxldmVscy5sZW5ndGg7ICsraSkgewogICAgICBjb25zdCBsZXZlbCA9IHt9OwogICAgICByZXN1bHRbaV0gPSBsZXZlbDsKICAgICAgd2lkdGggPSBoZWFkZXIucGl4ZWxXaWR0aCA+PiBpOwogICAgICBoZWlnaHQgPSBoZWFkZXIucGl4ZWxIZWlnaHQgPj4gaTsKICAgICAgY29uc3QgZHN0U2l6ZSA9IGt0eDJGaWxlLmdldEltYWdlVHJhbnNjb2RlZFNpemVJbkJ5dGVzKAogICAgICAgIGksCiAgICAgICAgLy8gbGV2ZWwgaW5kZXgKICAgICAgICAwLAogICAgICAgIC8vIGxheWVyIGluZGV4CiAgICAgICAgMCwKICAgICAgICAvLyBmYWNlIGluZGV4CiAgICAgICAgdHJhbnNjb2RlckZvcm1hdC52YWx1ZQogICAgICApOwogICAgICBjb25zdCBkc3QgPSBuZXcgVWludDhBcnJheShkc3RTaXplKTsKICAgICAgY29uc3QgdHJhbnNjb2RlZCA9IGt0eDJGaWxlLnRyYW5zY29kZUltYWdlKAogICAgICAgIGRzdCwKICAgICAgICBpLAogICAgICAgIC8vIGxldmVsIGluZGV4CiAgICAgICAgMCwKICAgICAgICAvLyBsYXllciBpbmRleAogICAgICAgIDAsCiAgICAgICAgLy8gZmFjZSBpbmRleAogICAgICAgIHRyYW5zY29kZXJGb3JtYXQudmFsdWUsCiAgICAgICAgMCwKICAgICAgICAvLyBnZXRfYWxwaGFfZm9yX29wYXF1ZV9mb3JtYXRzCiAgICAgICAgLTEsCiAgICAgICAgLy8gY2hhbm5lbDAKICAgICAgICAtMQogICAgICAgIC8vIGNoYW5uZWwxCiAgICAgICk7CiAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHRyYW5zY29kZWQpKSB7CiAgICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcl9kZWZhdWx0KCJ0cmFuc2NvZGVJbWFnZSgpIGZhaWxlZC4iKTsKICAgICAgfQogICAgICB0cmFuc2ZlcmFibGVPYmplY3RzLnB1c2goZHN0LmJ1ZmZlcik7CiAgICAgIGxldmVsW2ZhY2VPcmRlclswXV0gPSB7CiAgICAgICAgaW50ZXJuYWxGb3JtYXQsCiAgICAgICAgd2lkdGgsCiAgICAgICAgaGVpZ2h0LAogICAgICAgIGxldmVsQnVmZmVyOiBkc3QKICAgICAgfTsKICAgIH0KICAgIGt0eDJGaWxlLmNsb3NlKCk7CiAgICBrdHgyRmlsZS5kZWxldGUoKTsKICAgIHJldHVybiByZXN1bHQ7CiAgfQogIGFzeW5jIGZ1bmN0aW9uIGluaXRXb3JrZXIzKHBhcmFtZXRlcnMsIHRyYW5zZmVyYWJsZU9iamVjdHMpIHsKICAgIGNvbnN0IHdhc21Db25maWcgPSBwYXJhbWV0ZXJzLndlYkFzc2VtYmx5Q29uZmlnOwogICAgY29uc3QgYmFzaXNUcmFuc2NvZGVyID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQoaW1wb3J0X2Jhc2lzX3RyYW5zY29kZXIuZGVmYXVsdCwgc2VsZi5CQVNJUyk7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHdhc21Db25maWcud2FzbUJpbmFyeUZpbGUpKSB7CiAgICAgIHRyYW5zY29kZXJNb2R1bGUgPSBhd2FpdCBiYXNpc1RyYW5zY29kZXIod2FzbUNvbmZpZyk7CiAgICB9IGVsc2UgewogICAgICB0cmFuc2NvZGVyTW9kdWxlID0gYXdhaXQgYmFzaXNUcmFuc2NvZGVyKCk7CiAgICB9CiAgICB0cmFuc2NvZGVyTW9kdWxlLmluaXRpYWxpemVCYXNpcygpOwogICAgcmV0dXJuIHRydWU7CiAgfQogIGZ1bmN0aW9uIHRyYW5zY29kZUtUWDIocGFyYW1ldGVycywgdHJhbnNmZXJhYmxlT2JqZWN0cykgewogICAgY29uc3Qgd2FzbUNvbmZpZyA9IHBhcmFtZXRlcnMud2ViQXNzZW1ibHlDb25maWc7CiAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHdhc21Db25maWcpKSB7CiAgICAgIHJldHVybiBpbml0V29ya2VyMyhwYXJhbWV0ZXJzLCB0cmFuc2ZlcmFibGVPYmplY3RzKTsKICAgIH0KICAgIHJldHVybiB0cmFuc2NvZGUocGFyYW1ldGVycywgdHJhbnNmZXJhYmxlT2JqZWN0cyk7CiAgfQogIHZhciBpbXBvcnRfYmFzaXNfdHJhbnNjb2RlciwgZmFjZU9yZGVyLCBjb2xvck1vZGVsRVRDMVMsIGNvbG9yTW9kZWxVQVNUQywgdHJhbnNjb2Rlck1vZHVsZSwgdHJhbnNjb2RlS1RYMl9kZWZhdWx0OwogIHZhciBpbml0X3RyYW5zY29kZUtUWDIgPSBfX2VzbSh7CiAgICAicGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL3RyYW5zY29kZUtUWDIuanMiKCkgewogICAgICBpbml0X2RlZmF1bHRWYWx1ZSgpOwogICAgICBpbml0X2RlZmluZWQoKTsKICAgICAgaW5pdF9DaGVjaygpOwogICAgICBpbml0X1BpeGVsRm9ybWF0KCk7CiAgICAgIGluaXRfUnVudGltZUVycm9yKCk7CiAgICAgIGluaXRfVnVsa2FuQ29uc3RhbnRzKCk7CiAgICAgIGluaXRfUGl4ZWxEYXRhdHlwZSgpOwogICAgICBpbml0X2NyZWF0ZVRhc2tQcm9jZXNzb3JXb3JrZXIoKTsKICAgICAgaW5pdF9rdHhfcGFyc2VfbW9kZXJuKCk7CiAgICAgIGltcG9ydF9iYXNpc190cmFuc2NvZGVyID0gX190b0VTTShyZXF1aXJlX2Jhc2lzX3RyYW5zY29kZXIoKSwgMSk7CiAgICAgIGZhY2VPcmRlciA9IFsKICAgICAgICAicG9zaXRpdmVYIiwKICAgICAgICAibmVnYXRpdmVYIiwKICAgICAgICAicG9zaXRpdmVZIiwKICAgICAgICAibmVnYXRpdmVZIiwKICAgICAgICAicG9zaXRpdmVaIiwKICAgICAgICAibmVnYXRpdmVaIgogICAgICBdOwogICAgICBjb2xvck1vZGVsRVRDMVMgPSAxNjM7CiAgICAgIGNvbG9yTW9kZWxVQVNUQyA9IDE2NjsKICAgICAgdHJhbnNjb2RlS1RYMl9kZWZhdWx0ID0gY3JlYXRlVGFza1Byb2Nlc3Nvcldvcmtlcl9kZWZhdWx0KHRyYW5zY29kZUtUWDIpOwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvdHJhbnNmZXJUeXBlZEFycmF5VGVzdC5qcwogIHZhciB0cmFuc2ZlclR5cGVkQXJyYXlUZXN0X2V4cG9ydHMgPSB7fTsKICB2YXIgaW5pdF90cmFuc2ZlclR5cGVkQXJyYXlUZXN0ID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy90cmFuc2ZlclR5cGVkQXJyYXlUZXN0LmpzIigpIHsKICAgICAgc2VsZi5vbm1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkgewogICAgICAgIGNvbnN0IGFycmF5ID0gZXZlbnQuZGF0YS5hcnJheTsKICAgICAgICBjb25zdCBwb3N0TWVzc2FnZTIgPSBzZWxmLndlYmtpdFBvc3RNZXNzYWdlIHx8IHNlbGYucG9zdE1lc3NhZ2U7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIHBvc3RNZXNzYWdlMigKICAgICAgICAgICAgewogICAgICAgICAgICAgIGFycmF5CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFthcnJheS5idWZmZXJdCiAgICAgICAgICApOwogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgIHBvc3RNZXNzYWdlMih7fSk7CiAgICAgICAgfQogICAgICB9OwogICAgfQogIH0pOwoKICAvLyBwYWNrYWdlcy9lbmdpbmUvU291cmNlL0NvcmUvSW50ZXJzZWN0aW9uczJELmpzCiAgdmFyIEludGVyc2VjdGlvbnMyRCwgSW50ZXJzZWN0aW9uczJEX2RlZmF1bHQ7CiAgdmFyIGluaXRfSW50ZXJzZWN0aW9uczJEID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvQ29yZS9JbnRlcnNlY3Rpb25zMkQuanMiKCkgewogICAgICBpbml0X0NhcnRlc2lhbjIoKTsKICAgICAgaW5pdF9DYXJ0ZXNpYW4zKCk7CiAgICAgIGluaXRfQ2hlY2soKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRGV2ZWxvcGVyRXJyb3IoKTsKICAgICAgSW50ZXJzZWN0aW9uczJEID0ge307CiAgICAgIEludGVyc2VjdGlvbnMyRC5jbGlwVHJpYW5nbGVBdEF4aXNBbGlnbmVkVGhyZXNob2xkID0gZnVuY3Rpb24odGhyZXNob2xkLCBrZWVwQWJvdmUsIHUwLCB1MTIsIHUyMiwgcmVzdWx0KSB7CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQodGhyZXNob2xkKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInRocmVzaG9sZCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoa2VlcEFib3ZlKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoImtlZXBBYm92ZSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQodTApKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgidTAgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHUxMikpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJ1MSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQodTIyKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInUyIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBbXTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVzdWx0Lmxlbmd0aCA9IDA7CiAgICAgICAgfQogICAgICAgIGxldCB1MEJlaGluZDsKICAgICAgICBsZXQgdTFCZWhpbmQ7CiAgICAgICAgbGV0IHUyQmVoaW5kOwogICAgICAgIGlmIChrZWVwQWJvdmUpIHsKICAgICAgICAgIHUwQmVoaW5kID0gdTAgPCB0aHJlc2hvbGQ7CiAgICAgICAgICB1MUJlaGluZCA9IHUxMiA8IHRocmVzaG9sZDsKICAgICAgICAgIHUyQmVoaW5kID0gdTIyIDwgdGhyZXNob2xkOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB1MEJlaGluZCA9IHUwID4gdGhyZXNob2xkOwogICAgICAgICAgdTFCZWhpbmQgPSB1MTIgPiB0aHJlc2hvbGQ7CiAgICAgICAgICB1MkJlaGluZCA9IHUyMiA+IHRocmVzaG9sZDsKICAgICAgICB9CiAgICAgICAgY29uc3QgbnVtQmVoaW5kID0gdTBCZWhpbmQgKyB1MUJlaGluZCArIHUyQmVoaW5kOwogICAgICAgIGxldCB1MDFSYXRpbzsKICAgICAgICBsZXQgdTAyUmF0aW87CiAgICAgICAgbGV0IHUxMlJhdGlvOwogICAgICAgIGxldCB1MTBSYXRpbzsKICAgICAgICBsZXQgdTIwUmF0aW87CiAgICAgICAgbGV0IHUyMVJhdGlvOwogICAgICAgIGlmIChudW1CZWhpbmQgPT09IDEpIHsKICAgICAgICAgIGlmICh1MEJlaGluZCkgewogICAgICAgICAgICB1MDFSYXRpbyA9ICh0aHJlc2hvbGQgLSB1MCkgLyAodTEyIC0gdTApOwogICAgICAgICAgICB1MDJSYXRpbyA9ICh0aHJlc2hvbGQgLSB1MCkgLyAodTIyIC0gdTApOwogICAgICAgICAgICByZXN1bHQucHVzaCgxKTsKICAgICAgICAgICAgcmVzdWx0LnB1c2goMik7CiAgICAgICAgICAgIGlmICh1MDJSYXRpbyAhPT0gMSkgewogICAgICAgICAgICAgIHJlc3VsdC5wdXNoKC0xKTsKICAgICAgICAgICAgICByZXN1bHQucHVzaCgwKTsKICAgICAgICAgICAgICByZXN1bHQucHVzaCgyKTsKICAgICAgICAgICAgICByZXN1bHQucHVzaCh1MDJSYXRpbyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHUwMVJhdGlvICE9PSAxKSB7CiAgICAgICAgICAgICAgcmVzdWx0LnB1c2goLTEpOwogICAgICAgICAgICAgIHJlc3VsdC5wdXNoKDApOwogICAgICAgICAgICAgIHJlc3VsdC5wdXNoKDEpOwogICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHUwMVJhdGlvKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIGlmICh1MUJlaGluZCkgewogICAgICAgICAgICB1MTJSYXRpbyA9ICh0aHJlc2hvbGQgLSB1MTIpIC8gKHUyMiAtIHUxMik7CiAgICAgICAgICAgIHUxMFJhdGlvID0gKHRocmVzaG9sZCAtIHUxMikgLyAodTAgLSB1MTIpOwogICAgICAgICAgICByZXN1bHQucHVzaCgyKTsKICAgICAgICAgICAgcmVzdWx0LnB1c2goMCk7CiAgICAgICAgICAgIGlmICh1MTBSYXRpbyAhPT0gMSkgewogICAgICAgICAgICAgIHJlc3VsdC5wdXNoKC0xKTsKICAgICAgICAgICAgICByZXN1bHQucHVzaCgxKTsKICAgICAgICAgICAgICByZXN1bHQucHVzaCgwKTsKICAgICAgICAgICAgICByZXN1bHQucHVzaCh1MTBSYXRpbyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHUxMlJhdGlvICE9PSAxKSB7CiAgICAgICAgICAgICAgcmVzdWx0LnB1c2goLTEpOwogICAgICAgICAgICAgIHJlc3VsdC5wdXNoKDEpOwogICAgICAgICAgICAgIHJlc3VsdC5wdXNoKDIpOwogICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHUxMlJhdGlvKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIGlmICh1MkJlaGluZCkgewogICAgICAgICAgICB1MjBSYXRpbyA9ICh0aHJlc2hvbGQgLSB1MjIpIC8gKHUwIC0gdTIyKTsKICAgICAgICAgICAgdTIxUmF0aW8gPSAodGhyZXNob2xkIC0gdTIyKSAvICh1MTIgLSB1MjIpOwogICAgICAgICAgICByZXN1bHQucHVzaCgwKTsKICAgICAgICAgICAgcmVzdWx0LnB1c2goMSk7CiAgICAgICAgICAgIGlmICh1MjFSYXRpbyAhPT0gMSkgewogICAgICAgICAgICAgIHJlc3VsdC5wdXNoKC0xKTsKICAgICAgICAgICAgICByZXN1bHQucHVzaCgyKTsKICAgICAgICAgICAgICByZXN1bHQucHVzaCgxKTsKICAgICAgICAgICAgICByZXN1bHQucHVzaCh1MjFSYXRpbyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHUyMFJhdGlvICE9PSAxKSB7CiAgICAgICAgICAgICAgcmVzdWx0LnB1c2goLTEpOwogICAgICAgICAgICAgIHJlc3VsdC5wdXNoKDIpOwogICAgICAgICAgICAgIHJlc3VsdC5wdXNoKDApOwogICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHUyMFJhdGlvKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAobnVtQmVoaW5kID09PSAyKSB7CiAgICAgICAgICBpZiAoIXUwQmVoaW5kICYmIHUwICE9PSB0aHJlc2hvbGQpIHsKICAgICAgICAgICAgdTEwUmF0aW8gPSAodGhyZXNob2xkIC0gdTEyKSAvICh1MCAtIHUxMik7CiAgICAgICAgICAgIHUyMFJhdGlvID0gKHRocmVzaG9sZCAtIHUyMikgLyAodTAgLSB1MjIpOwogICAgICAgICAgICByZXN1bHQucHVzaCgwKTsKICAgICAgICAgICAgcmVzdWx0LnB1c2goLTEpOwogICAgICAgICAgICByZXN1bHQucHVzaCgxKTsKICAgICAgICAgICAgcmVzdWx0LnB1c2goMCk7CiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHUxMFJhdGlvKTsKICAgICAgICAgICAgcmVzdWx0LnB1c2goLTEpOwogICAgICAgICAgICByZXN1bHQucHVzaCgyKTsKICAgICAgICAgICAgcmVzdWx0LnB1c2goMCk7CiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHUyMFJhdGlvKTsKICAgICAgICAgIH0gZWxzZSBpZiAoIXUxQmVoaW5kICYmIHUxMiAhPT0gdGhyZXNob2xkKSB7CiAgICAgICAgICAgIHUyMVJhdGlvID0gKHRocmVzaG9sZCAtIHUyMikgLyAodTEyIC0gdTIyKTsKICAgICAgICAgICAgdTAxUmF0aW8gPSAodGhyZXNob2xkIC0gdTApIC8gKHUxMiAtIHUwKTsKICAgICAgICAgICAgcmVzdWx0LnB1c2goMSk7CiAgICAgICAgICAgIHJlc3VsdC5wdXNoKC0xKTsKICAgICAgICAgICAgcmVzdWx0LnB1c2goMik7CiAgICAgICAgICAgIHJlc3VsdC5wdXNoKDEpOwogICAgICAgICAgICByZXN1bHQucHVzaCh1MjFSYXRpbyk7CiAgICAgICAgICAgIHJlc3VsdC5wdXNoKC0xKTsKICAgICAgICAgICAgcmVzdWx0LnB1c2goMCk7CiAgICAgICAgICAgIHJlc3VsdC5wdXNoKDEpOwogICAgICAgICAgICByZXN1bHQucHVzaCh1MDFSYXRpbyk7CiAgICAgICAgICB9IGVsc2UgaWYgKCF1MkJlaGluZCAmJiB1MjIgIT09IHRocmVzaG9sZCkgewogICAgICAgICAgICB1MDJSYXRpbyA9ICh0aHJlc2hvbGQgLSB1MCkgLyAodTIyIC0gdTApOwogICAgICAgICAgICB1MTJSYXRpbyA9ICh0aHJlc2hvbGQgLSB1MTIpIC8gKHUyMiAtIHUxMik7CiAgICAgICAgICAgIHJlc3VsdC5wdXNoKDIpOwogICAgICAgICAgICByZXN1bHQucHVzaCgtMSk7CiAgICAgICAgICAgIHJlc3VsdC5wdXNoKDApOwogICAgICAgICAgICByZXN1bHQucHVzaCgyKTsKICAgICAgICAgICAgcmVzdWx0LnB1c2godTAyUmF0aW8pOwogICAgICAgICAgICByZXN1bHQucHVzaCgtMSk7CiAgICAgICAgICAgIHJlc3VsdC5wdXNoKDEpOwogICAgICAgICAgICByZXN1bHQucHVzaCgyKTsKICAgICAgICAgICAgcmVzdWx0LnB1c2godTEyUmF0aW8pOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAobnVtQmVoaW5kICE9PSAzKSB7CiAgICAgICAgICByZXN1bHQucHVzaCgwKTsKICAgICAgICAgIHJlc3VsdC5wdXNoKDEpOwogICAgICAgICAgcmVzdWx0LnB1c2goMik7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIEludGVyc2VjdGlvbnMyRC5jb21wdXRlQmFyeWNlbnRyaWNDb29yZGluYXRlcyA9IGZ1bmN0aW9uKHgsIHksIHgxLCB5MSwgeDIsIHkyLCB4MywgeTMsIHJlc3VsdCkgewogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHgpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgieCBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoeSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJ5IGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdCh4MSkpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJ4MSBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoeTEpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgieTEgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHgyKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoIngyIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdCh5MikpIHsKICAgICAgICAgIHRocm93IG5ldyBEZXZlbG9wZXJFcnJvcl9kZWZhdWx0KCJ5MiBpcyByZXF1aXJlZC4iKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFkZWZpbmVkX2RlZmF1bHQoeDMpKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRGV2ZWxvcGVyRXJyb3JfZGVmYXVsdCgieDMgaXMgcmVxdWlyZWQuIik7CiAgICAgICAgfQogICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHkzKSkgewogICAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoInkzIGlzIHJlcXVpcmVkLiIpOwogICAgICAgIH0KICAgICAgICBjb25zdCB4MW14MyA9IHgxIC0geDM7CiAgICAgICAgY29uc3QgeDNteDIgPSB4MyAtIHgyOwogICAgICAgIGNvbnN0IHkybXkzID0geTIgLSB5MzsKICAgICAgICBjb25zdCB5MW15MyA9IHkxIC0geTM7CiAgICAgICAgY29uc3QgaW52ZXJzZURldGVybWluYW50ID0gMSAvICh5Mm15MyAqIHgxbXgzICsgeDNteDIgKiB5MW15Myk7CiAgICAgICAgY29uc3QgeW15MyA9IHkgLSB5MzsKICAgICAgICBjb25zdCB4bXgzID0geCAtIHgzOwogICAgICAgIGNvbnN0IGwxID0gKHkybXkzICogeG14MyArIHgzbXgyICogeW15MykgKiBpbnZlcnNlRGV0ZXJtaW5hbnQ7CiAgICAgICAgY29uc3QgbDIgPSAoLXkxbXkzICogeG14MyArIHgxbXgzICogeW15MykgKiBpbnZlcnNlRGV0ZXJtaW5hbnQ7CiAgICAgICAgY29uc3QgbDMgPSAxIC0gbDEgLSBsMjsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgIHJlc3VsdC54ID0gbDE7CiAgICAgICAgICByZXN1bHQueSA9IGwyOwogICAgICAgICAgcmVzdWx0LnogPSBsMzsKICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfQogICAgICAgIHJldHVybiBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KGwxLCBsMiwgbDMpOwogICAgICB9OwogICAgICBJbnRlcnNlY3Rpb25zMkQuY29tcHV0ZUxpbmVTZWdtZW50TGluZVNlZ21lbnRJbnRlcnNlY3Rpb24gPSBmdW5jdGlvbih4MDAsIHkwMCwgeDAxLCB5MDEsIHgxMCwgeTEwLCB4MTEsIHkxMSwgcmVzdWx0KSB7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJ4MDAiLCB4MDApOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigieTAwIiwgeTAwKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoIngwMSIsIHgwMSk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJ5MDEiLCB5MDEpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigieDEwIiwgeDEwKTsKICAgICAgICBDaGVja19kZWZhdWx0LnR5cGVPZi5udW1iZXIoInkxMCIsIHkxMCk7CiAgICAgICAgQ2hlY2tfZGVmYXVsdC50eXBlT2YubnVtYmVyKCJ4MTEiLCB4MTEpOwogICAgICAgIENoZWNrX2RlZmF1bHQudHlwZU9mLm51bWJlcigieTExIiwgeTExKTsKICAgICAgICBjb25zdCBudW1lcmF0b3IxQSA9ICh4MTEgLSB4MTApICogKHkwMCAtIHkxMCkgLSAoeTExIC0geTEwKSAqICh4MDAgLSB4MTApOwogICAgICAgIGNvbnN0IG51bWVyYXRvcjFCID0gKHgwMSAtIHgwMCkgKiAoeTAwIC0geTEwKSAtICh5MDEgLSB5MDApICogKHgwMCAtIHgxMCk7CiAgICAgICAgY29uc3QgZGVub21pbmF0b3IxID0gKHkxMSAtIHkxMCkgKiAoeDAxIC0geDAwKSAtICh4MTEgLSB4MTApICogKHkwMSAtIHkwMCk7CiAgICAgICAgaWYgKGRlbm9taW5hdG9yMSA9PT0gMCkgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBjb25zdCB1YTEgPSBudW1lcmF0b3IxQSAvIGRlbm9taW5hdG9yMTsKICAgICAgICBjb25zdCB1YjEgPSBudW1lcmF0b3IxQiAvIGRlbm9taW5hdG9yMTsKICAgICAgICBpZiAodWExID49IDAgJiYgdWExIDw9IDEgJiYgdWIxID49IDAgJiYgdWIxIDw9IDEpIHsKICAgICAgICAgIGlmICghZGVmaW5lZF9kZWZhdWx0KHJlc3VsdCkpIHsKICAgICAgICAgICAgcmVzdWx0ID0gbmV3IENhcnRlc2lhbjJfZGVmYXVsdCgpOwogICAgICAgICAgfQogICAgICAgICAgcmVzdWx0LnggPSB4MDAgKyB1YTEgKiAoeDAxIC0geDAwKTsKICAgICAgICAgIHJlc3VsdC55ID0geTAwICsgdWExICogKHkwMSAtIHkwMCk7CiAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0KICAgICAgfTsKICAgICAgSW50ZXJzZWN0aW9uczJEX2RlZmF1bHQgPSBJbnRlcnNlY3Rpb25zMkQ7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy91cHNhbXBsZVF1YW50aXplZFRlcnJhaW5NZXNoLmpzCiAgdmFyIHVwc2FtcGxlUXVhbnRpemVkVGVycmFpbk1lc2hfZXhwb3J0cyA9IHt9OwogIF9fZXhwb3J0KHVwc2FtcGxlUXVhbnRpemVkVGVycmFpbk1lc2hfZXhwb3J0cywgewogICAgZGVmYXVsdDogKCkgPT4gdXBzYW1wbGVRdWFudGl6ZWRUZXJyYWluTWVzaF9kZWZhdWx0CiAgfSk7CiAgZnVuY3Rpb24gdXBzYW1wbGVRdWFudGl6ZWRUZXJyYWluTWVzaChwYXJhbWV0ZXJzLCB0cmFuc2ZlcmFibGVPYmplY3RzKSB7CiAgICBjb25zdCBpc0Vhc3RDaGlsZCA9IHBhcmFtZXRlcnMuaXNFYXN0Q2hpbGQ7CiAgICBjb25zdCBpc05vcnRoQ2hpbGQgPSBwYXJhbWV0ZXJzLmlzTm9ydGhDaGlsZDsKICAgIGNvbnN0IG1pblUgPSBpc0Vhc3RDaGlsZCA/IGhhbGZNYXhTaG9ydCA6IDA7CiAgICBjb25zdCBtYXhVID0gaXNFYXN0Q2hpbGQgPyBtYXhTaG9ydDUgOiBoYWxmTWF4U2hvcnQ7CiAgICBjb25zdCBtaW5WID0gaXNOb3J0aENoaWxkID8gaGFsZk1heFNob3J0IDogMDsKICAgIGNvbnN0IG1heFYgPSBpc05vcnRoQ2hpbGQgPyBtYXhTaG9ydDUgOiBoYWxmTWF4U2hvcnQ7CiAgICBjb25zdCB1QnVmZmVyID0gdVNjcmF0Y2g7CiAgICBjb25zdCB2QnVmZmVyID0gdlNjcmF0Y2g7CiAgICBjb25zdCBoZWlnaHRCdWZmZXIgPSBoZWlnaHRTY3JhdGNoOwogICAgY29uc3Qgbm9ybWFsQnVmZmVyID0gbm9ybWFsc1NjcmF0Y2g7CiAgICB1QnVmZmVyLmxlbmd0aCA9IDA7CiAgICB2QnVmZmVyLmxlbmd0aCA9IDA7CiAgICBoZWlnaHRCdWZmZXIubGVuZ3RoID0gMDsKICAgIG5vcm1hbEJ1ZmZlci5sZW5ndGggPSAwOwogICAgY29uc3QgaW5kaWNlcyA9IGluZGljZXNTY3JhdGNoOwogICAgaW5kaWNlcy5sZW5ndGggPSAwOwogICAgY29uc3QgdmVydGV4TWFwID0ge307CiAgICBjb25zdCBwYXJlbnRWZXJ0aWNlcyA9IHBhcmFtZXRlcnMudmVydGljZXM7CiAgICBsZXQgcGFyZW50SW5kaWNlcyA9IHBhcmFtZXRlcnMuaW5kaWNlczsKICAgIHBhcmVudEluZGljZXMgPSBwYXJlbnRJbmRpY2VzLnN1YmFycmF5KDAsIHBhcmFtZXRlcnMuaW5kZXhDb3VudFdpdGhvdXRTa2lydHMpOwogICAgY29uc3QgZW5jb2RpbmcgPSBUZXJyYWluRW5jb2RpbmdfZGVmYXVsdC5jbG9uZShwYXJhbWV0ZXJzLmVuY29kaW5nKTsKICAgIGNvbnN0IGhhc1ZlcnRleE5vcm1hbHMgPSBlbmNvZGluZy5oYXNWZXJ0ZXhOb3JtYWxzOwogICAgbGV0IHZlcnRleENvdW50ID0gMDsKICAgIGNvbnN0IHF1YW50aXplZFZlcnRleENvdW50ID0gcGFyYW1ldGVycy52ZXJ0ZXhDb3VudFdpdGhvdXRTa2lydHM7CiAgICBjb25zdCBwYXJlbnRNaW5pbXVtSGVpZ2h0ID0gcGFyYW1ldGVycy5taW5pbXVtSGVpZ2h0OwogICAgY29uc3QgcGFyZW50TWF4aW11bUhlaWdodCA9IHBhcmFtZXRlcnMubWF4aW11bUhlaWdodDsKICAgIGNvbnN0IHBhcmVudFVCdWZmZXIgPSBuZXcgQXJyYXkocXVhbnRpemVkVmVydGV4Q291bnQpOwogICAgY29uc3QgcGFyZW50VkJ1ZmZlciA9IG5ldyBBcnJheShxdWFudGl6ZWRWZXJ0ZXhDb3VudCk7CiAgICBjb25zdCBwYXJlbnRIZWlnaHRCdWZmZXIgPSBuZXcgQXJyYXkocXVhbnRpemVkVmVydGV4Q291bnQpOwogICAgY29uc3QgcGFyZW50Tm9ybWFsQnVmZmVyID0gaGFzVmVydGV4Tm9ybWFscyA/IG5ldyBBcnJheShxdWFudGl6ZWRWZXJ0ZXhDb3VudCAqIDIpIDogdm9pZCAwOwogICAgY29uc3QgdGhyZXNob2xkID0gMjA7CiAgICBsZXQgaGVpZ2h0OwogICAgbGV0IGksIG47CiAgICBsZXQgdTMsIHYzOwogICAgZm9yIChpID0gMCwgbiA9IDA7IGkgPCBxdWFudGl6ZWRWZXJ0ZXhDb3VudDsgKytpLCBuICs9IDIpIHsKICAgICAgY29uc3QgdGV4Q29vcmRzID0gZW5jb2RpbmcuZGVjb2RlVGV4dHVyZUNvb3JkaW5hdGVzKAogICAgICAgIHBhcmVudFZlcnRpY2VzLAogICAgICAgIGksCiAgICAgICAgZGVjb2RlVGV4Q29vcmRzU2NyYXRjaAogICAgICApOwogICAgICBoZWlnaHQgPSBlbmNvZGluZy5kZWNvZGVIZWlnaHQocGFyZW50VmVydGljZXMsIGkpOwogICAgICB1MyA9IE1hdGhfZGVmYXVsdC5jbGFtcCh0ZXhDb29yZHMueCAqIG1heFNob3J0NSB8IDAsIDAsIG1heFNob3J0NSk7CiAgICAgIHYzID0gTWF0aF9kZWZhdWx0LmNsYW1wKHRleENvb3Jkcy55ICogbWF4U2hvcnQ1IHwgMCwgMCwgbWF4U2hvcnQ1KTsKICAgICAgcGFyZW50SGVpZ2h0QnVmZmVyW2ldID0gTWF0aF9kZWZhdWx0LmNsYW1wKAogICAgICAgIChoZWlnaHQgLSBwYXJlbnRNaW5pbXVtSGVpZ2h0KSAvIChwYXJlbnRNYXhpbXVtSGVpZ2h0IC0gcGFyZW50TWluaW11bUhlaWdodCkgKiBtYXhTaG9ydDUgfCAwLAogICAgICAgIDAsCiAgICAgICAgbWF4U2hvcnQ1CiAgICAgICk7CiAgICAgIGlmICh1MyA8IHRocmVzaG9sZCkgewogICAgICAgIHUzID0gMDsKICAgICAgfQogICAgICBpZiAodjMgPCB0aHJlc2hvbGQpIHsKICAgICAgICB2MyA9IDA7CiAgICAgIH0KICAgICAgaWYgKG1heFNob3J0NSAtIHUzIDwgdGhyZXNob2xkKSB7CiAgICAgICAgdTMgPSBtYXhTaG9ydDU7CiAgICAgIH0KICAgICAgaWYgKG1heFNob3J0NSAtIHYzIDwgdGhyZXNob2xkKSB7CiAgICAgICAgdjMgPSBtYXhTaG9ydDU7CiAgICAgIH0KICAgICAgcGFyZW50VUJ1ZmZlcltpXSA9IHUzOwogICAgICBwYXJlbnRWQnVmZmVyW2ldID0gdjM7CiAgICAgIGlmIChoYXNWZXJ0ZXhOb3JtYWxzKSB7CiAgICAgICAgY29uc3QgZW5jb2RlZE5vcm1hbCA9IGVuY29kaW5nLmdldE9jdEVuY29kZWROb3JtYWwoCiAgICAgICAgICBwYXJlbnRWZXJ0aWNlcywKICAgICAgICAgIGksCiAgICAgICAgICBvY3RFbmNvZGVkTm9ybWFsU2NyYXRjaAogICAgICAgICk7CiAgICAgICAgcGFyZW50Tm9ybWFsQnVmZmVyW25dID0gZW5jb2RlZE5vcm1hbC54OwogICAgICAgIHBhcmVudE5vcm1hbEJ1ZmZlcltuICsgMV0gPSBlbmNvZGVkTm9ybWFsLnk7CiAgICAgIH0KICAgICAgaWYgKChpc0Vhc3RDaGlsZCAmJiB1MyA+PSBoYWxmTWF4U2hvcnQgfHwgIWlzRWFzdENoaWxkICYmIHUzIDw9IGhhbGZNYXhTaG9ydCkgJiYgKGlzTm9ydGhDaGlsZCAmJiB2MyA+PSBoYWxmTWF4U2hvcnQgfHwgIWlzTm9ydGhDaGlsZCAmJiB2MyA8PSBoYWxmTWF4U2hvcnQpKSB7CiAgICAgICAgdmVydGV4TWFwW2ldID0gdmVydGV4Q291bnQ7CiAgICAgICAgdUJ1ZmZlci5wdXNoKHUzKTsKICAgICAgICB2QnVmZmVyLnB1c2godjMpOwogICAgICAgIGhlaWdodEJ1ZmZlci5wdXNoKHBhcmVudEhlaWdodEJ1ZmZlcltpXSk7CiAgICAgICAgaWYgKGhhc1ZlcnRleE5vcm1hbHMpIHsKICAgICAgICAgIG5vcm1hbEJ1ZmZlci5wdXNoKHBhcmVudE5vcm1hbEJ1ZmZlcltuXSk7CiAgICAgICAgICBub3JtYWxCdWZmZXIucHVzaChwYXJlbnROb3JtYWxCdWZmZXJbbiArIDFdKTsKICAgICAgICB9CiAgICAgICAgKyt2ZXJ0ZXhDb3VudDsKICAgICAgfQogICAgfQogICAgY29uc3QgdHJpYW5nbGVWZXJ0aWNlcyA9IFtdOwogICAgdHJpYW5nbGVWZXJ0aWNlcy5wdXNoKG5ldyBWZXJ0ZXgoKSk7CiAgICB0cmlhbmdsZVZlcnRpY2VzLnB1c2gobmV3IFZlcnRleCgpKTsKICAgIHRyaWFuZ2xlVmVydGljZXMucHVzaChuZXcgVmVydGV4KCkpOwogICAgY29uc3QgY2xpcHBlZFRyaWFuZ2xlVmVydGljZXMgPSBbXTsKICAgIGNsaXBwZWRUcmlhbmdsZVZlcnRpY2VzLnB1c2gobmV3IFZlcnRleCgpKTsKICAgIGNsaXBwZWRUcmlhbmdsZVZlcnRpY2VzLnB1c2gobmV3IFZlcnRleCgpKTsKICAgIGNsaXBwZWRUcmlhbmdsZVZlcnRpY2VzLnB1c2gobmV3IFZlcnRleCgpKTsKICAgIGxldCBjbGlwcGVkSW5kZXg7CiAgICBsZXQgY2xpcHBlZDI7CiAgICBmb3IgKGkgPSAwOyBpIDwgcGFyZW50SW5kaWNlcy5sZW5ndGg7IGkgKz0gMykgewogICAgICBjb25zdCBpMCA9IHBhcmVudEluZGljZXNbaV07CiAgICAgIGNvbnN0IGkxID0gcGFyZW50SW5kaWNlc1tpICsgMV07CiAgICAgIGNvbnN0IGkyID0gcGFyZW50SW5kaWNlc1tpICsgMl07CiAgICAgIGNvbnN0IHUwID0gcGFyZW50VUJ1ZmZlcltpMF07CiAgICAgIGNvbnN0IHUxMiA9IHBhcmVudFVCdWZmZXJbaTFdOwogICAgICBjb25zdCB1MjIgPSBwYXJlbnRVQnVmZmVyW2kyXTsKICAgICAgdHJpYW5nbGVWZXJ0aWNlc1swXS5pbml0aWFsaXplSW5kZXhlZCgKICAgICAgICBwYXJlbnRVQnVmZmVyLAogICAgICAgIHBhcmVudFZCdWZmZXIsCiAgICAgICAgcGFyZW50SGVpZ2h0QnVmZmVyLAogICAgICAgIHBhcmVudE5vcm1hbEJ1ZmZlciwKICAgICAgICBpMAogICAgICApOwogICAgICB0cmlhbmdsZVZlcnRpY2VzWzFdLmluaXRpYWxpemVJbmRleGVkKAogICAgICAgIHBhcmVudFVCdWZmZXIsCiAgICAgICAgcGFyZW50VkJ1ZmZlciwKICAgICAgICBwYXJlbnRIZWlnaHRCdWZmZXIsCiAgICAgICAgcGFyZW50Tm9ybWFsQnVmZmVyLAogICAgICAgIGkxCiAgICAgICk7CiAgICAgIHRyaWFuZ2xlVmVydGljZXNbMl0uaW5pdGlhbGl6ZUluZGV4ZWQoCiAgICAgICAgcGFyZW50VUJ1ZmZlciwKICAgICAgICBwYXJlbnRWQnVmZmVyLAogICAgICAgIHBhcmVudEhlaWdodEJ1ZmZlciwKICAgICAgICBwYXJlbnROb3JtYWxCdWZmZXIsCiAgICAgICAgaTIKICAgICAgKTsKICAgICAgY29uc3QgY2xpcHBlZCA9IEludGVyc2VjdGlvbnMyRF9kZWZhdWx0LmNsaXBUcmlhbmdsZUF0QXhpc0FsaWduZWRUaHJlc2hvbGQoCiAgICAgICAgaGFsZk1heFNob3J0LAogICAgICAgIGlzRWFzdENoaWxkLAogICAgICAgIHUwLAogICAgICAgIHUxMiwKICAgICAgICB1MjIsCiAgICAgICAgY2xpcFNjcmF0Y2gKICAgICAgKTsKICAgICAgY2xpcHBlZEluZGV4ID0gMDsKICAgICAgaWYgKGNsaXBwZWRJbmRleCA+PSBjbGlwcGVkLmxlbmd0aCkgewogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGNsaXBwZWRJbmRleCA9IGNsaXBwZWRUcmlhbmdsZVZlcnRpY2VzWzBdLmluaXRpYWxpemVGcm9tQ2xpcFJlc3VsdCgKICAgICAgICBjbGlwcGVkLAogICAgICAgIGNsaXBwZWRJbmRleCwKICAgICAgICB0cmlhbmdsZVZlcnRpY2VzCiAgICAgICk7CiAgICAgIGlmIChjbGlwcGVkSW5kZXggPj0gY2xpcHBlZC5sZW5ndGgpIHsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBjbGlwcGVkSW5kZXggPSBjbGlwcGVkVHJpYW5nbGVWZXJ0aWNlc1sxXS5pbml0aWFsaXplRnJvbUNsaXBSZXN1bHQoCiAgICAgICAgY2xpcHBlZCwKICAgICAgICBjbGlwcGVkSW5kZXgsCiAgICAgICAgdHJpYW5nbGVWZXJ0aWNlcwogICAgICApOwogICAgICBpZiAoY2xpcHBlZEluZGV4ID49IGNsaXBwZWQubGVuZ3RoKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgY2xpcHBlZEluZGV4ID0gY2xpcHBlZFRyaWFuZ2xlVmVydGljZXNbMl0uaW5pdGlhbGl6ZUZyb21DbGlwUmVzdWx0KAogICAgICAgIGNsaXBwZWQsCiAgICAgICAgY2xpcHBlZEluZGV4LAogICAgICAgIHRyaWFuZ2xlVmVydGljZXMKICAgICAgKTsKICAgICAgY2xpcHBlZDIgPSBJbnRlcnNlY3Rpb25zMkRfZGVmYXVsdC5jbGlwVHJpYW5nbGVBdEF4aXNBbGlnbmVkVGhyZXNob2xkKAogICAgICAgIGhhbGZNYXhTaG9ydCwKICAgICAgICBpc05vcnRoQ2hpbGQsCiAgICAgICAgY2xpcHBlZFRyaWFuZ2xlVmVydGljZXNbMF0uZ2V0VigpLAogICAgICAgIGNsaXBwZWRUcmlhbmdsZVZlcnRpY2VzWzFdLmdldFYoKSwKICAgICAgICBjbGlwcGVkVHJpYW5nbGVWZXJ0aWNlc1syXS5nZXRWKCksCiAgICAgICAgY2xpcFNjcmF0Y2gyCiAgICAgICk7CiAgICAgIGFkZENsaXBwZWRQb2x5Z29uKAogICAgICAgIHVCdWZmZXIsCiAgICAgICAgdkJ1ZmZlciwKICAgICAgICBoZWlnaHRCdWZmZXIsCiAgICAgICAgbm9ybWFsQnVmZmVyLAogICAgICAgIGluZGljZXMsCiAgICAgICAgdmVydGV4TWFwLAogICAgICAgIGNsaXBwZWQyLAogICAgICAgIGNsaXBwZWRUcmlhbmdsZVZlcnRpY2VzLAogICAgICAgIGhhc1ZlcnRleE5vcm1hbHMKICAgICAgKTsKICAgICAgaWYgKGNsaXBwZWRJbmRleCA8IGNsaXBwZWQubGVuZ3RoKSB7CiAgICAgICAgY2xpcHBlZFRyaWFuZ2xlVmVydGljZXNbMl0uY2xvbmUoY2xpcHBlZFRyaWFuZ2xlVmVydGljZXNbMV0pOwogICAgICAgIGNsaXBwZWRUcmlhbmdsZVZlcnRpY2VzWzJdLmluaXRpYWxpemVGcm9tQ2xpcFJlc3VsdCgKICAgICAgICAgIGNsaXBwZWQsCiAgICAgICAgICBjbGlwcGVkSW5kZXgsCiAgICAgICAgICB0cmlhbmdsZVZlcnRpY2VzCiAgICAgICAgKTsKICAgICAgICBjbGlwcGVkMiA9IEludGVyc2VjdGlvbnMyRF9kZWZhdWx0LmNsaXBUcmlhbmdsZUF0QXhpc0FsaWduZWRUaHJlc2hvbGQoCiAgICAgICAgICBoYWxmTWF4U2hvcnQsCiAgICAgICAgICBpc05vcnRoQ2hpbGQsCiAgICAgICAgICBjbGlwcGVkVHJpYW5nbGVWZXJ0aWNlc1swXS5nZXRWKCksCiAgICAgICAgICBjbGlwcGVkVHJpYW5nbGVWZXJ0aWNlc1sxXS5nZXRWKCksCiAgICAgICAgICBjbGlwcGVkVHJpYW5nbGVWZXJ0aWNlc1syXS5nZXRWKCksCiAgICAgICAgICBjbGlwU2NyYXRjaDIKICAgICAgICApOwogICAgICAgIGFkZENsaXBwZWRQb2x5Z29uKAogICAgICAgICAgdUJ1ZmZlciwKICAgICAgICAgIHZCdWZmZXIsCiAgICAgICAgICBoZWlnaHRCdWZmZXIsCiAgICAgICAgICBub3JtYWxCdWZmZXIsCiAgICAgICAgICBpbmRpY2VzLAogICAgICAgICAgdmVydGV4TWFwLAogICAgICAgICAgY2xpcHBlZDIsCiAgICAgICAgICBjbGlwcGVkVHJpYW5nbGVWZXJ0aWNlcywKICAgICAgICAgIGhhc1ZlcnRleE5vcm1hbHMKICAgICAgICApOwogICAgICB9CiAgICB9CiAgICBjb25zdCB1T2Zmc2V0ID0gaXNFYXN0Q2hpbGQgPyAtbWF4U2hvcnQ1IDogMDsKICAgIGNvbnN0IHZPZmZzZXQgPSBpc05vcnRoQ2hpbGQgPyAtbWF4U2hvcnQ1IDogMDsKICAgIGNvbnN0IHdlc3RJbmRpY2VzID0gW107CiAgICBjb25zdCBzb3V0aEluZGljZXMgPSBbXTsKICAgIGNvbnN0IGVhc3RJbmRpY2VzID0gW107CiAgICBjb25zdCBub3J0aEluZGljZXMgPSBbXTsKICAgIGxldCBtaW5pbXVtSGVpZ2h0ID0gTnVtYmVyLk1BWF9WQUxVRTsKICAgIGxldCBtYXhpbXVtSGVpZ2h0ID0gLW1pbmltdW1IZWlnaHQ7CiAgICBjb25zdCBjYXJ0ZXNpYW5WZXJ0aWNlcyA9IHZlcnRpY2VzU2NyYXRjaDsKICAgIGNhcnRlc2lhblZlcnRpY2VzLmxlbmd0aCA9IDA7CiAgICBjb25zdCBlbGxpcHNvaWQgPSBFbGxpcHNvaWRfZGVmYXVsdC5jbG9uZShwYXJhbWV0ZXJzLmVsbGlwc29pZCk7CiAgICBjb25zdCByZWN0YW5nbGUgPSBSZWN0YW5nbGVfZGVmYXVsdC5jbG9uZShwYXJhbWV0ZXJzLmNoaWxkUmVjdGFuZ2xlKTsKICAgIGNvbnN0IG5vcnRoID0gcmVjdGFuZ2xlLm5vcnRoOwogICAgY29uc3Qgc291dGggPSByZWN0YW5nbGUuc291dGg7CiAgICBsZXQgZWFzdCA9IHJlY3RhbmdsZS5lYXN0OwogICAgY29uc3Qgd2VzdCA9IHJlY3RhbmdsZS53ZXN0OwogICAgaWYgKGVhc3QgPCB3ZXN0KSB7CiAgICAgIGVhc3QgKz0gTWF0aF9kZWZhdWx0LlRXT19QSTsKICAgIH0KICAgIGZvciAoaSA9IDA7IGkgPCB1QnVmZmVyLmxlbmd0aDsgKytpKSB7CiAgICAgIHUzID0gTWF0aC5yb3VuZCh1QnVmZmVyW2ldKTsKICAgICAgaWYgKHUzIDw9IG1pblUpIHsKICAgICAgICB3ZXN0SW5kaWNlcy5wdXNoKGkpOwogICAgICAgIHUzID0gMDsKICAgICAgfSBlbHNlIGlmICh1MyA+PSBtYXhVKSB7CiAgICAgICAgZWFzdEluZGljZXMucHVzaChpKTsKICAgICAgICB1MyA9IG1heFNob3J0NTsKICAgICAgfSBlbHNlIHsKICAgICAgICB1MyA9IHUzICogMiArIHVPZmZzZXQ7CiAgICAgIH0KICAgICAgdUJ1ZmZlcltpXSA9IHUzOwogICAgICB2MyA9IE1hdGgucm91bmQodkJ1ZmZlcltpXSk7CiAgICAgIGlmICh2MyA8PSBtaW5WKSB7CiAgICAgICAgc291dGhJbmRpY2VzLnB1c2goaSk7CiAgICAgICAgdjMgPSAwOwogICAgICB9IGVsc2UgaWYgKHYzID49IG1heFYpIHsKICAgICAgICBub3J0aEluZGljZXMucHVzaChpKTsKICAgICAgICB2MyA9IG1heFNob3J0NTsKICAgICAgfSBlbHNlIHsKICAgICAgICB2MyA9IHYzICogMiArIHZPZmZzZXQ7CiAgICAgIH0KICAgICAgdkJ1ZmZlcltpXSA9IHYzOwogICAgICBoZWlnaHQgPSBNYXRoX2RlZmF1bHQubGVycCgKICAgICAgICBwYXJlbnRNaW5pbXVtSGVpZ2h0LAogICAgICAgIHBhcmVudE1heGltdW1IZWlnaHQsCiAgICAgICAgaGVpZ2h0QnVmZmVyW2ldIC8gbWF4U2hvcnQ1CiAgICAgICk7CiAgICAgIGlmIChoZWlnaHQgPCBtaW5pbXVtSGVpZ2h0KSB7CiAgICAgICAgbWluaW11bUhlaWdodCA9IGhlaWdodDsKICAgICAgfQogICAgICBpZiAoaGVpZ2h0ID4gbWF4aW11bUhlaWdodCkgewogICAgICAgIG1heGltdW1IZWlnaHQgPSBoZWlnaHQ7CiAgICAgIH0KICAgICAgaGVpZ2h0QnVmZmVyW2ldID0gaGVpZ2h0OwogICAgICBjYXJ0b2dyYXBoaWNTY3JhdGNoMi5sb25naXR1ZGUgPSBNYXRoX2RlZmF1bHQubGVycCh3ZXN0LCBlYXN0LCB1MyAvIG1heFNob3J0NSk7CiAgICAgIGNhcnRvZ3JhcGhpY1NjcmF0Y2gyLmxhdGl0dWRlID0gTWF0aF9kZWZhdWx0LmxlcnAoc291dGgsIG5vcnRoLCB2MyAvIG1heFNob3J0NSk7CiAgICAgIGNhcnRvZ3JhcGhpY1NjcmF0Y2gyLmhlaWdodCA9IGhlaWdodDsKICAgICAgZWxsaXBzb2lkLmNhcnRvZ3JhcGhpY1RvQ2FydGVzaWFuKGNhcnRvZ3JhcGhpY1NjcmF0Y2gyLCBjYXJ0ZXNpYW4zU2NyYXRjaDkpOwogICAgICBjYXJ0ZXNpYW5WZXJ0aWNlcy5wdXNoKGNhcnRlc2lhbjNTY3JhdGNoOS54KTsKICAgICAgY2FydGVzaWFuVmVydGljZXMucHVzaChjYXJ0ZXNpYW4zU2NyYXRjaDkueSk7CiAgICAgIGNhcnRlc2lhblZlcnRpY2VzLnB1c2goY2FydGVzaWFuM1NjcmF0Y2g5LnopOwogICAgfQogICAgY29uc3QgYm91bmRpbmdTcGhlcmUgPSBCb3VuZGluZ1NwaGVyZV9kZWZhdWx0LmZyb21WZXJ0aWNlcygKICAgICAgY2FydGVzaWFuVmVydGljZXMsCiAgICAgIENhcnRlc2lhbjNfZGVmYXVsdC5aRVJPLAogICAgICAzLAogICAgICBib3VuZGluZ1NwaGVyZVNjcmF0Y2gKICAgICk7CiAgICBjb25zdCBvcmllbnRlZEJvdW5kaW5nQm94ID0gT3JpZW50ZWRCb3VuZGluZ0JveF9kZWZhdWx0LmZyb21SZWN0YW5nbGUoCiAgICAgIHJlY3RhbmdsZSwKICAgICAgbWluaW11bUhlaWdodCwKICAgICAgbWF4aW11bUhlaWdodCwKICAgICAgZWxsaXBzb2lkLAogICAgICBvcmllbnRlZEJvdW5kaW5nQm94U2NyYXRjaAogICAgKTsKICAgIGNvbnN0IG9jY2x1ZGVyID0gbmV3IEVsbGlwc29pZGFsT2NjbHVkZXJfZGVmYXVsdChlbGxpcHNvaWQpOwogICAgY29uc3QgaG9yaXpvbk9jY2x1c2lvblBvaW50ID0gb2NjbHVkZXIuY29tcHV0ZUhvcml6b25DdWxsaW5nUG9pbnRGcm9tVmVydGljZXNQb3NzaWJseVVuZGVyRWxsaXBzb2lkKAogICAgICBib3VuZGluZ1NwaGVyZS5jZW50ZXIsCiAgICAgIGNhcnRlc2lhblZlcnRpY2VzLAogICAgICAzLAogICAgICBib3VuZGluZ1NwaGVyZS5jZW50ZXIsCiAgICAgIG1pbmltdW1IZWlnaHQsCiAgICAgIGhvcml6b25PY2NsdXNpb25Qb2ludFNjcmF0Y2gKICAgICk7CiAgICBjb25zdCBoZWlnaHRSYW5nZSA9IG1heGltdW1IZWlnaHQgLSBtaW5pbXVtSGVpZ2h0OwogICAgY29uc3QgdmVydGljZXMgPSBuZXcgVWludDE2QXJyYXkoCiAgICAgIHVCdWZmZXIubGVuZ3RoICsgdkJ1ZmZlci5sZW5ndGggKyBoZWlnaHRCdWZmZXIubGVuZ3RoCiAgICApOwogICAgZm9yIChpID0gMDsgaSA8IHVCdWZmZXIubGVuZ3RoOyArK2kpIHsKICAgICAgdmVydGljZXNbaV0gPSB1QnVmZmVyW2ldOwogICAgfQogICAgbGV0IHN0YXJ0ID0gdUJ1ZmZlci5sZW5ndGg7CiAgICBmb3IgKGkgPSAwOyBpIDwgdkJ1ZmZlci5sZW5ndGg7ICsraSkgewogICAgICB2ZXJ0aWNlc1tzdGFydCArIGldID0gdkJ1ZmZlcltpXTsKICAgIH0KICAgIHN0YXJ0ICs9IHZCdWZmZXIubGVuZ3RoOwogICAgZm9yIChpID0gMDsgaSA8IGhlaWdodEJ1ZmZlci5sZW5ndGg7ICsraSkgewogICAgICB2ZXJ0aWNlc1tzdGFydCArIGldID0gbWF4U2hvcnQ1ICogKGhlaWdodEJ1ZmZlcltpXSAtIG1pbmltdW1IZWlnaHQpIC8gaGVpZ2h0UmFuZ2U7CiAgICB9CiAgICBjb25zdCBpbmRpY2VzVHlwZWRBcnJheSA9IEluZGV4RGF0YXR5cGVfZGVmYXVsdC5jcmVhdGVUeXBlZEFycmF5KAogICAgICB1QnVmZmVyLmxlbmd0aCwKICAgICAgaW5kaWNlcwogICAgKTsKICAgIGxldCBlbmNvZGVkTm9ybWFsczsKICAgIGlmIChoYXNWZXJ0ZXhOb3JtYWxzKSB7CiAgICAgIGNvbnN0IG5vcm1hbEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkobm9ybWFsQnVmZmVyKTsKICAgICAgdHJhbnNmZXJhYmxlT2JqZWN0cy5wdXNoKAogICAgICAgIHZlcnRpY2VzLmJ1ZmZlciwKICAgICAgICBpbmRpY2VzVHlwZWRBcnJheS5idWZmZXIsCiAgICAgICAgbm9ybWFsQXJyYXkuYnVmZmVyCiAgICAgICk7CiAgICAgIGVuY29kZWROb3JtYWxzID0gbm9ybWFsQXJyYXkuYnVmZmVyOwogICAgfSBlbHNlIHsKICAgICAgdHJhbnNmZXJhYmxlT2JqZWN0cy5wdXNoKHZlcnRpY2VzLmJ1ZmZlciwgaW5kaWNlc1R5cGVkQXJyYXkuYnVmZmVyKTsKICAgIH0KICAgIHJldHVybiB7CiAgICAgIHZlcnRpY2VzOiB2ZXJ0aWNlcy5idWZmZXIsCiAgICAgIGVuY29kZWROb3JtYWxzLAogICAgICBpbmRpY2VzOiBpbmRpY2VzVHlwZWRBcnJheS5idWZmZXIsCiAgICAgIG1pbmltdW1IZWlnaHQsCiAgICAgIG1heGltdW1IZWlnaHQsCiAgICAgIHdlc3RJbmRpY2VzLAogICAgICBzb3V0aEluZGljZXMsCiAgICAgIGVhc3RJbmRpY2VzLAogICAgICBub3J0aEluZGljZXMsCiAgICAgIGJvdW5kaW5nU3BoZXJlLAogICAgICBvcmllbnRlZEJvdW5kaW5nQm94LAogICAgICBob3Jpem9uT2NjbHVzaW9uUG9pbnQKICAgIH07CiAgfQogIGZ1bmN0aW9uIFZlcnRleCgpIHsKICAgIHRoaXMudmVydGV4QnVmZmVyID0gdm9pZCAwOwogICAgdGhpcy5pbmRleCA9IHZvaWQgMDsKICAgIHRoaXMuZmlyc3QgPSB2b2lkIDA7CiAgICB0aGlzLnNlY29uZCA9IHZvaWQgMDsKICAgIHRoaXMucmF0aW8gPSB2b2lkIDA7CiAgfQogIGZ1bmN0aW9uIGxlcnBPY3RFbmNvZGVkTm9ybWFsKHZlcnRleCwgcmVzdWx0KSB7CiAgICArK2RlcHRoOwogICAgbGV0IGZpcnN0ID0gY2FydGVzaWFuU2NyYXRjaDFbZGVwdGhdOwogICAgbGV0IHNlY29uZCA9IGNhcnRlc2lhblNjcmF0Y2gyW2RlcHRoXTsKICAgIGZpcnN0ID0gQXR0cmlidXRlQ29tcHJlc3Npb25fZGVmYXVsdC5vY3REZWNvZGUoCiAgICAgIHZlcnRleC5maXJzdC5nZXROb3JtYWxYKCksCiAgICAgIHZlcnRleC5maXJzdC5nZXROb3JtYWxZKCksCiAgICAgIGZpcnN0CiAgICApOwogICAgc2Vjb25kID0gQXR0cmlidXRlQ29tcHJlc3Npb25fZGVmYXVsdC5vY3REZWNvZGUoCiAgICAgIHZlcnRleC5zZWNvbmQuZ2V0Tm9ybWFsWCgpLAogICAgICB2ZXJ0ZXguc2Vjb25kLmdldE5vcm1hbFkoKSwKICAgICAgc2Vjb25kCiAgICApOwogICAgY2FydGVzaWFuM1NjcmF0Y2g5ID0gQ2FydGVzaWFuM19kZWZhdWx0LmxlcnAoCiAgICAgIGZpcnN0LAogICAgICBzZWNvbmQsCiAgICAgIHZlcnRleC5yYXRpbywKICAgICAgY2FydGVzaWFuM1NjcmF0Y2g5CiAgICApOwogICAgQ2FydGVzaWFuM19kZWZhdWx0Lm5vcm1hbGl6ZShjYXJ0ZXNpYW4zU2NyYXRjaDksIGNhcnRlc2lhbjNTY3JhdGNoOSk7CiAgICBBdHRyaWJ1dGVDb21wcmVzc2lvbl9kZWZhdWx0Lm9jdEVuY29kZShjYXJ0ZXNpYW4zU2NyYXRjaDksIHJlc3VsdCk7CiAgICAtLWRlcHRoOwogICAgcmV0dXJuIHJlc3VsdDsKICB9CiAgZnVuY3Rpb24gYWRkQ2xpcHBlZFBvbHlnb24odUJ1ZmZlciwgdkJ1ZmZlciwgaGVpZ2h0QnVmZmVyLCBub3JtYWxCdWZmZXIsIGluZGljZXMsIHZlcnRleE1hcCwgY2xpcHBlZCwgdHJpYW5nbGVWZXJ0aWNlcywgaGFzVmVydGV4Tm9ybWFscykgewogICAgaWYgKGNsaXBwZWQubGVuZ3RoID09PSAwKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGxldCBudW1WZXJ0aWNlcyA9IDA7CiAgICBsZXQgY2xpcHBlZEluZGV4ID0gMDsKICAgIHdoaWxlIChjbGlwcGVkSW5kZXggPCBjbGlwcGVkLmxlbmd0aCkgewogICAgICBjbGlwcGVkSW5kZXggPSBwb2x5Z29uVmVydGljZXNbbnVtVmVydGljZXMrK10uaW5pdGlhbGl6ZUZyb21DbGlwUmVzdWx0KAogICAgICAgIGNsaXBwZWQsCiAgICAgICAgY2xpcHBlZEluZGV4LAogICAgICAgIHRyaWFuZ2xlVmVydGljZXMKICAgICAgKTsKICAgIH0KICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtVmVydGljZXM7ICsraSkgewogICAgICBjb25zdCBwb2x5Z29uVmVydGV4ID0gcG9seWdvblZlcnRpY2VzW2ldOwogICAgICBpZiAoIXBvbHlnb25WZXJ0ZXguaXNJbmRleGVkKCkpIHsKICAgICAgICBjb25zdCBrZXkgPSBwb2x5Z29uVmVydGV4LmdldEtleSgpOwogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQodmVydGV4TWFwW2tleV0pKSB7CiAgICAgICAgICBwb2x5Z29uVmVydGV4Lm5ld0luZGV4ID0gdmVydGV4TWFwW2tleV07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNvbnN0IG5ld0luZGV4ID0gdUJ1ZmZlci5sZW5ndGg7CiAgICAgICAgICB1QnVmZmVyLnB1c2gocG9seWdvblZlcnRleC5nZXRVKCkpOwogICAgICAgICAgdkJ1ZmZlci5wdXNoKHBvbHlnb25WZXJ0ZXguZ2V0VigpKTsKICAgICAgICAgIGhlaWdodEJ1ZmZlci5wdXNoKHBvbHlnb25WZXJ0ZXguZ2V0SCgpKTsKICAgICAgICAgIGlmIChoYXNWZXJ0ZXhOb3JtYWxzKSB7CiAgICAgICAgICAgIG5vcm1hbEJ1ZmZlci5wdXNoKHBvbHlnb25WZXJ0ZXguZ2V0Tm9ybWFsWCgpKTsKICAgICAgICAgICAgbm9ybWFsQnVmZmVyLnB1c2gocG9seWdvblZlcnRleC5nZXROb3JtYWxZKCkpOwogICAgICAgICAgfQogICAgICAgICAgcG9seWdvblZlcnRleC5uZXdJbmRleCA9IG5ld0luZGV4OwogICAgICAgICAgdmVydGV4TWFwW2tleV0gPSBuZXdJbmRleDsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcG9seWdvblZlcnRleC5uZXdJbmRleCA9IHZlcnRleE1hcFtwb2x5Z29uVmVydGV4LmluZGV4XTsKICAgICAgICBwb2x5Z29uVmVydGV4LnVCdWZmZXIgPSB1QnVmZmVyOwogICAgICAgIHBvbHlnb25WZXJ0ZXgudkJ1ZmZlciA9IHZCdWZmZXI7CiAgICAgICAgcG9seWdvblZlcnRleC5oZWlnaHRCdWZmZXIgPSBoZWlnaHRCdWZmZXI7CiAgICAgICAgaWYgKGhhc1ZlcnRleE5vcm1hbHMpIHsKICAgICAgICAgIHBvbHlnb25WZXJ0ZXgubm9ybWFsQnVmZmVyID0gbm9ybWFsQnVmZmVyOwogICAgICAgIH0KICAgICAgfQogICAgfQogICAgaWYgKG51bVZlcnRpY2VzID09PSAzKSB7CiAgICAgIGluZGljZXMucHVzaChwb2x5Z29uVmVydGljZXNbMF0ubmV3SW5kZXgpOwogICAgICBpbmRpY2VzLnB1c2gocG9seWdvblZlcnRpY2VzWzFdLm5ld0luZGV4KTsKICAgICAgaW5kaWNlcy5wdXNoKHBvbHlnb25WZXJ0aWNlc1syXS5uZXdJbmRleCk7CiAgICB9IGVsc2UgaWYgKG51bVZlcnRpY2VzID09PSA0KSB7CiAgICAgIGluZGljZXMucHVzaChwb2x5Z29uVmVydGljZXNbMF0ubmV3SW5kZXgpOwogICAgICBpbmRpY2VzLnB1c2gocG9seWdvblZlcnRpY2VzWzFdLm5ld0luZGV4KTsKICAgICAgaW5kaWNlcy5wdXNoKHBvbHlnb25WZXJ0aWNlc1syXS5uZXdJbmRleCk7CiAgICAgIGluZGljZXMucHVzaChwb2x5Z29uVmVydGljZXNbMF0ubmV3SW5kZXgpOwogICAgICBpbmRpY2VzLnB1c2gocG9seWdvblZlcnRpY2VzWzJdLm5ld0luZGV4KTsKICAgICAgaW5kaWNlcy5wdXNoKHBvbHlnb25WZXJ0aWNlc1szXS5uZXdJbmRleCk7CiAgICB9CiAgfQogIHZhciBtYXhTaG9ydDUsIGhhbGZNYXhTaG9ydCwgY2xpcFNjcmF0Y2gsIGNsaXBTY3JhdGNoMiwgdmVydGljZXNTY3JhdGNoLCBjYXJ0b2dyYXBoaWNTY3JhdGNoMiwgY2FydGVzaWFuM1NjcmF0Y2g5LCB1U2NyYXRjaCwgdlNjcmF0Y2gsIGhlaWdodFNjcmF0Y2gsIGluZGljZXNTY3JhdGNoLCBub3JtYWxzU2NyYXRjaCwgaG9yaXpvbk9jY2x1c2lvblBvaW50U2NyYXRjaCwgYm91bmRpbmdTcGhlcmVTY3JhdGNoLCBvcmllbnRlZEJvdW5kaW5nQm94U2NyYXRjaCwgZGVjb2RlVGV4Q29vcmRzU2NyYXRjaCwgb2N0RW5jb2RlZE5vcm1hbFNjcmF0Y2gsIGVuY29kZWRTY3JhdGNoLCBkZXB0aCwgY2FydGVzaWFuU2NyYXRjaDEsIGNhcnRlc2lhblNjcmF0Y2gyLCBwb2x5Z29uVmVydGljZXMsIHVwc2FtcGxlUXVhbnRpemVkVGVycmFpbk1lc2hfZGVmYXVsdDsKICB2YXIgaW5pdF91cHNhbXBsZVF1YW50aXplZFRlcnJhaW5NZXNoID0gX19lc20oewogICAgInBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy91cHNhbXBsZVF1YW50aXplZFRlcnJhaW5NZXNoLmpzIigpIHsKICAgICAgaW5pdF9BdHRyaWJ1dGVDb21wcmVzc2lvbigpOwogICAgICBpbml0X0JvdW5kaW5nU3BoZXJlKCk7CiAgICAgIGluaXRfQ2FydGVzaWFuMigpOwogICAgICBpbml0X0NhcnRlc2lhbjMoKTsKICAgICAgaW5pdF9DYXJ0b2dyYXBoaWMoKTsKICAgICAgaW5pdF9kZWZpbmVkKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkKCk7CiAgICAgIGluaXRfRWxsaXBzb2lkYWxPY2NsdWRlcigpOwogICAgICBpbml0X0luZGV4RGF0YXR5cGUoKTsKICAgICAgaW5pdF9JbnRlcnNlY3Rpb25zMkQoKTsKICAgICAgaW5pdF9NYXRoKCk7CiAgICAgIGluaXRfT3JpZW50ZWRCb3VuZGluZ0JveCgpOwogICAgICBpbml0X1JlY3RhbmdsZSgpOwogICAgICBpbml0X1RlcnJhaW5FbmNvZGluZygpOwogICAgICBpbml0X2NyZWF0ZVRhc2tQcm9jZXNzb3JXb3JrZXIoKTsKICAgICAgbWF4U2hvcnQ1ID0gMzI3Njc7CiAgICAgIGhhbGZNYXhTaG9ydCA9IG1heFNob3J0NSAvIDIgfCAwOwogICAgICBjbGlwU2NyYXRjaCA9IFtdOwogICAgICBjbGlwU2NyYXRjaDIgPSBbXTsKICAgICAgdmVydGljZXNTY3JhdGNoID0gW107CiAgICAgIGNhcnRvZ3JhcGhpY1NjcmF0Y2gyID0gbmV3IENhcnRvZ3JhcGhpY19kZWZhdWx0KCk7CiAgICAgIGNhcnRlc2lhbjNTY3JhdGNoOSA9IG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKTsKICAgICAgdVNjcmF0Y2ggPSBbXTsKICAgICAgdlNjcmF0Y2ggPSBbXTsKICAgICAgaGVpZ2h0U2NyYXRjaCA9IFtdOwogICAgICBpbmRpY2VzU2NyYXRjaCA9IFtdOwogICAgICBub3JtYWxzU2NyYXRjaCA9IFtdOwogICAgICBob3Jpem9uT2NjbHVzaW9uUG9pbnRTY3JhdGNoID0gbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpOwogICAgICBib3VuZGluZ1NwaGVyZVNjcmF0Y2ggPSBuZXcgQm91bmRpbmdTcGhlcmVfZGVmYXVsdCgpOwogICAgICBvcmllbnRlZEJvdW5kaW5nQm94U2NyYXRjaCA9IG5ldyBPcmllbnRlZEJvdW5kaW5nQm94X2RlZmF1bHQoKTsKICAgICAgZGVjb2RlVGV4Q29vcmRzU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4yX2RlZmF1bHQoKTsKICAgICAgb2N0RW5jb2RlZE5vcm1hbFNjcmF0Y2ggPSBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCk7CiAgICAgIFZlcnRleC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbihyZXN1bHQpIHsKICAgICAgICBpZiAoIWRlZmluZWRfZGVmYXVsdChyZXN1bHQpKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgVmVydGV4KCk7CiAgICAgICAgfQogICAgICAgIHJlc3VsdC51QnVmZmVyID0gdGhpcy51QnVmZmVyOwogICAgICAgIHJlc3VsdC52QnVmZmVyID0gdGhpcy52QnVmZmVyOwogICAgICAgIHJlc3VsdC5oZWlnaHRCdWZmZXIgPSB0aGlzLmhlaWdodEJ1ZmZlcjsKICAgICAgICByZXN1bHQubm9ybWFsQnVmZmVyID0gdGhpcy5ub3JtYWxCdWZmZXI7CiAgICAgICAgcmVzdWx0LmluZGV4ID0gdGhpcy5pbmRleDsKICAgICAgICByZXN1bHQuZmlyc3QgPSB0aGlzLmZpcnN0OwogICAgICAgIHJlc3VsdC5zZWNvbmQgPSB0aGlzLnNlY29uZDsKICAgICAgICByZXN1bHQucmF0aW8gPSB0aGlzLnJhdGlvOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICAgIFZlcnRleC5wcm90b3R5cGUuaW5pdGlhbGl6ZUluZGV4ZWQgPSBmdW5jdGlvbih1QnVmZmVyLCB2QnVmZmVyLCBoZWlnaHRCdWZmZXIsIG5vcm1hbEJ1ZmZlciwgaW5kZXgpIHsKICAgICAgICB0aGlzLnVCdWZmZXIgPSB1QnVmZmVyOwogICAgICAgIHRoaXMudkJ1ZmZlciA9IHZCdWZmZXI7CiAgICAgICAgdGhpcy5oZWlnaHRCdWZmZXIgPSBoZWlnaHRCdWZmZXI7CiAgICAgICAgdGhpcy5ub3JtYWxCdWZmZXIgPSBub3JtYWxCdWZmZXI7CiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4OwogICAgICAgIHRoaXMuZmlyc3QgPSB2b2lkIDA7CiAgICAgICAgdGhpcy5zZWNvbmQgPSB2b2lkIDA7CiAgICAgICAgdGhpcy5yYXRpbyA9IHZvaWQgMDsKICAgICAgfTsKICAgICAgVmVydGV4LnByb3RvdHlwZS5pbml0aWFsaXplRnJvbUNsaXBSZXN1bHQgPSBmdW5jdGlvbihjbGlwUmVzdWx0LCBpbmRleCwgdmVydGljZXMpIHsKICAgICAgICBsZXQgbmV4dEluZGV4ID0gaW5kZXggKyAxOwogICAgICAgIGlmIChjbGlwUmVzdWx0W2luZGV4XSAhPT0gLTEpIHsKICAgICAgICAgIHZlcnRpY2VzW2NsaXBSZXN1bHRbaW5kZXhdXS5jbG9uZSh0aGlzKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy52ZXJ0ZXhCdWZmZXIgPSB2b2lkIDA7CiAgICAgICAgICB0aGlzLmluZGV4ID0gdm9pZCAwOwogICAgICAgICAgdGhpcy5maXJzdCA9IHZlcnRpY2VzW2NsaXBSZXN1bHRbbmV4dEluZGV4XV07CiAgICAgICAgICArK25leHRJbmRleDsKICAgICAgICAgIHRoaXMuc2Vjb25kID0gdmVydGljZXNbY2xpcFJlc3VsdFtuZXh0SW5kZXhdXTsKICAgICAgICAgICsrbmV4dEluZGV4OwogICAgICAgICAgdGhpcy5yYXRpbyA9IGNsaXBSZXN1bHRbbmV4dEluZGV4XTsKICAgICAgICAgICsrbmV4dEluZGV4OwogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV4dEluZGV4OwogICAgICB9OwogICAgICBWZXJ0ZXgucHJvdG90eXBlLmdldEtleSA9IGZ1bmN0aW9uKCkgewogICAgICAgIGlmICh0aGlzLmlzSW5kZXhlZCgpKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy5pbmRleDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHsKICAgICAgICAgIGZpcnN0OiB0aGlzLmZpcnN0LmdldEtleSgpLAogICAgICAgICAgc2Vjb25kOiB0aGlzLnNlY29uZC5nZXRLZXkoKSwKICAgICAgICAgIHJhdGlvOiB0aGlzLnJhdGlvCiAgICAgICAgfSk7CiAgICAgIH07CiAgICAgIFZlcnRleC5wcm90b3R5cGUuaXNJbmRleGVkID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIGRlZmluZWRfZGVmYXVsdCh0aGlzLmluZGV4KTsKICAgICAgfTsKICAgICAgVmVydGV4LnByb3RvdHlwZS5nZXRIID0gZnVuY3Rpb24oKSB7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdCh0aGlzLmluZGV4KSkgewogICAgICAgICAgcmV0dXJuIHRoaXMuaGVpZ2h0QnVmZmVyW3RoaXMuaW5kZXhdOwogICAgICAgIH0KICAgICAgICByZXR1cm4gTWF0aF9kZWZhdWx0LmxlcnAodGhpcy5maXJzdC5nZXRIKCksIHRoaXMuc2Vjb25kLmdldEgoKSwgdGhpcy5yYXRpbyk7CiAgICAgIH07CiAgICAgIFZlcnRleC5wcm90b3R5cGUuZ2V0VSA9IGZ1bmN0aW9uKCkgewogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQodGhpcy5pbmRleCkpIHsKICAgICAgICAgIHJldHVybiB0aGlzLnVCdWZmZXJbdGhpcy5pbmRleF07CiAgICAgICAgfQogICAgICAgIHJldHVybiBNYXRoX2RlZmF1bHQubGVycCh0aGlzLmZpcnN0LmdldFUoKSwgdGhpcy5zZWNvbmQuZ2V0VSgpLCB0aGlzLnJhdGlvKTsKICAgICAgfTsKICAgICAgVmVydGV4LnByb3RvdHlwZS5nZXRWID0gZnVuY3Rpb24oKSB7CiAgICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdCh0aGlzLmluZGV4KSkgewogICAgICAgICAgcmV0dXJuIHRoaXMudkJ1ZmZlclt0aGlzLmluZGV4XTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIE1hdGhfZGVmYXVsdC5sZXJwKHRoaXMuZmlyc3QuZ2V0VigpLCB0aGlzLnNlY29uZC5nZXRWKCksIHRoaXMucmF0aW8pOwogICAgICB9OwogICAgICBlbmNvZGVkU2NyYXRjaCA9IG5ldyBDYXJ0ZXNpYW4yX2RlZmF1bHQoKTsKICAgICAgZGVwdGggPSAtMTsKICAgICAgY2FydGVzaWFuU2NyYXRjaDEgPSBbbmV3IENhcnRlc2lhbjNfZGVmYXVsdCgpLCBuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCldOwogICAgICBjYXJ0ZXNpYW5TY3JhdGNoMiA9IFtuZXcgQ2FydGVzaWFuM19kZWZhdWx0KCksIG5ldyBDYXJ0ZXNpYW4zX2RlZmF1bHQoKV07CiAgICAgIFZlcnRleC5wcm90b3R5cGUuZ2V0Tm9ybWFsWCA9IGZ1bmN0aW9uKCkgewogICAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQodGhpcy5pbmRleCkpIHsKICAgICAgICAgIHJldHVybiB0aGlzLm5vcm1hbEJ1ZmZlclt0aGlzLmluZGV4ICogMl07CiAgICAgICAgfQogICAgICAgIGVuY29kZWRTY3JhdGNoID0gbGVycE9jdEVuY29kZWROb3JtYWwodGhpcywgZW5jb2RlZFNjcmF0Y2gpOwogICAgICAgIHJldHVybiBlbmNvZGVkU2NyYXRjaC54OwogICAgICB9OwogICAgICBWZXJ0ZXgucHJvdG90eXBlLmdldE5vcm1hbFkgPSBmdW5jdGlvbigpIHsKICAgICAgICBpZiAoZGVmaW5lZF9kZWZhdWx0KHRoaXMuaW5kZXgpKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy5ub3JtYWxCdWZmZXJbdGhpcy5pbmRleCAqIDIgKyAxXTsKICAgICAgICB9CiAgICAgICAgZW5jb2RlZFNjcmF0Y2ggPSBsZXJwT2N0RW5jb2RlZE5vcm1hbCh0aGlzLCBlbmNvZGVkU2NyYXRjaCk7CiAgICAgICAgcmV0dXJuIGVuY29kZWRTY3JhdGNoLnk7CiAgICAgIH07CiAgICAgIHBvbHlnb25WZXJ0aWNlcyA9IFtdOwogICAgICBwb2x5Z29uVmVydGljZXMucHVzaChuZXcgVmVydGV4KCkpOwogICAgICBwb2x5Z29uVmVydGljZXMucHVzaChuZXcgVmVydGV4KCkpOwogICAgICBwb2x5Z29uVmVydGljZXMucHVzaChuZXcgVmVydGV4KCkpOwogICAgICBwb2x5Z29uVmVydGljZXMucHVzaChuZXcgVmVydGV4KCkpOwogICAgICB1cHNhbXBsZVF1YW50aXplZFRlcnJhaW5NZXNoX2RlZmF1bHQgPSBjcmVhdGVUYXNrUHJvY2Vzc29yV29ya2VyX2RlZmF1bHQodXBzYW1wbGVRdWFudGl6ZWRUZXJyYWluTWVzaCk7CiAgICB9CiAgfSk7CgogIC8vIGltcG9ydCgiLi8qKi8qLmpzIikgaW4gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZUdlb21ldHJ5LmpzCiAgdmFyIGdsb2JJbXBvcnRfanM7CiAgdmFyIGluaXRfID0gX19lc20oewogICAgJ2ltcG9ydCgiLi8qKi8qLmpzIikgaW4gcGFja2FnZXMvZW5naW5lL1NvdXJjZS9Xb3JrZXJzL2NyZWF0ZUdlb21ldHJ5LmpzJygpIHsKICAgICAgZ2xvYkltcG9ydF9qcyA9IF9fZ2xvYih7CiAgICAgICAgIi4vY29tYmluZUdlb21ldHJ5LmpzIjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiAoaW5pdF9jb21iaW5lR2VvbWV0cnkoKSwgY29tYmluZUdlb21ldHJ5X2V4cG9ydHMpKSwKICAgICAgICAiLi9jcmVhdGVCb3hHZW9tZXRyeS5qcyI6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gKGluaXRfY3JlYXRlQm94R2VvbWV0cnkoKSwgY3JlYXRlQm94R2VvbWV0cnlfZXhwb3J0cykpLAogICAgICAgICIuL2NyZWF0ZUJveE91dGxpbmVHZW9tZXRyeS5qcyI6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gKGluaXRfY3JlYXRlQm94T3V0bGluZUdlb21ldHJ5KCksIGNyZWF0ZUJveE91dGxpbmVHZW9tZXRyeV9leHBvcnRzKSksCiAgICAgICAgIi4vY3JlYXRlQ2lyY2xlR2VvbWV0cnkuanMiOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IChpbml0X2NyZWF0ZUNpcmNsZUdlb21ldHJ5KCksIGNyZWF0ZUNpcmNsZUdlb21ldHJ5X2V4cG9ydHMpKSwKICAgICAgICAiLi9jcmVhdGVDaXJjbGVPdXRsaW5lR2VvbWV0cnkuanMiOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IChpbml0X2NyZWF0ZUNpcmNsZU91dGxpbmVHZW9tZXRyeSgpLCBjcmVhdGVDaXJjbGVPdXRsaW5lR2VvbWV0cnlfZXhwb3J0cykpLAogICAgICAgICIuL2NyZWF0ZUNvcGxhbmFyUG9seWdvbkdlb21ldHJ5LmpzIjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiAoaW5pdF9jcmVhdGVDb3BsYW5hclBvbHlnb25HZW9tZXRyeSgpLCBjcmVhdGVDb3BsYW5hclBvbHlnb25HZW9tZXRyeV9leHBvcnRzKSksCiAgICAgICAgIi4vY3JlYXRlQ29wbGFuYXJQb2x5Z29uT3V0bGluZUdlb21ldHJ5LmpzIjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiAoaW5pdF9jcmVhdGVDb3BsYW5hclBvbHlnb25PdXRsaW5lR2VvbWV0cnkoKSwgY3JlYXRlQ29wbGFuYXJQb2x5Z29uT3V0bGluZUdlb21ldHJ5X2V4cG9ydHMpKSwKICAgICAgICAiLi9jcmVhdGVDb3JyaWRvckdlb21ldHJ5LmpzIjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiAoaW5pdF9jcmVhdGVDb3JyaWRvckdlb21ldHJ5KCksIGNyZWF0ZUNvcnJpZG9yR2VvbWV0cnlfZXhwb3J0cykpLAogICAgICAgICIuL2NyZWF0ZUNvcnJpZG9yT3V0bGluZUdlb21ldHJ5LmpzIjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiAoaW5pdF9jcmVhdGVDb3JyaWRvck91dGxpbmVHZW9tZXRyeSgpLCBjcmVhdGVDb3JyaWRvck91dGxpbmVHZW9tZXRyeV9leHBvcnRzKSksCiAgICAgICAgIi4vY3JlYXRlQ3lsaW5kZXJHZW9tZXRyeS5qcyI6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gKGluaXRfY3JlYXRlQ3lsaW5kZXJHZW9tZXRyeSgpLCBjcmVhdGVDeWxpbmRlckdlb21ldHJ5X2V4cG9ydHMpKSwKICAgICAgICAiLi9jcmVhdGVDeWxpbmRlck91dGxpbmVHZW9tZXRyeS5qcyI6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gKGluaXRfY3JlYXRlQ3lsaW5kZXJPdXRsaW5lR2VvbWV0cnkoKSwgY3JlYXRlQ3lsaW5kZXJPdXRsaW5lR2VvbWV0cnlfZXhwb3J0cykpLAogICAgICAgICIuL2NyZWF0ZUVsbGlwc2VHZW9tZXRyeS5qcyI6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gKGluaXRfY3JlYXRlRWxsaXBzZUdlb21ldHJ5KCksIGNyZWF0ZUVsbGlwc2VHZW9tZXRyeV9leHBvcnRzKSksCiAgICAgICAgIi4vY3JlYXRlRWxsaXBzZU91dGxpbmVHZW9tZXRyeS5qcyI6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gKGluaXRfY3JlYXRlRWxsaXBzZU91dGxpbmVHZW9tZXRyeSgpLCBjcmVhdGVFbGxpcHNlT3V0bGluZUdlb21ldHJ5X2V4cG9ydHMpKSwKICAgICAgICAiLi9jcmVhdGVFbGxpcHNvaWRHZW9tZXRyeS5qcyI6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gKGluaXRfY3JlYXRlRWxsaXBzb2lkR2VvbWV0cnkoKSwgY3JlYXRlRWxsaXBzb2lkR2VvbWV0cnlfZXhwb3J0cykpLAogICAgICAgICIuL2NyZWF0ZUVsbGlwc29pZE91dGxpbmVHZW9tZXRyeS5qcyI6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gKGluaXRfY3JlYXRlRWxsaXBzb2lkT3V0bGluZUdlb21ldHJ5KCksIGNyZWF0ZUVsbGlwc29pZE91dGxpbmVHZW9tZXRyeV9leHBvcnRzKSksCiAgICAgICAgIi4vY3JlYXRlRnJ1c3R1bUdlb21ldHJ5LmpzIjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiAoaW5pdF9jcmVhdGVGcnVzdHVtR2VvbWV0cnkoKSwgY3JlYXRlRnJ1c3R1bUdlb21ldHJ5X2V4cG9ydHMpKSwKICAgICAgICAiLi9jcmVhdGVGcnVzdHVtT3V0bGluZUdlb21ldHJ5LmpzIjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiAoaW5pdF9jcmVhdGVGcnVzdHVtT3V0bGluZUdlb21ldHJ5KCksIGNyZWF0ZUZydXN0dW1PdXRsaW5lR2VvbWV0cnlfZXhwb3J0cykpLAogICAgICAgICIuL2NyZWF0ZUdlb21ldHJ5LmpzIjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiAoaW5pdF9jcmVhdGVHZW9tZXRyeSgpLCBjcmVhdGVHZW9tZXRyeV9leHBvcnRzKSksCiAgICAgICAgIi4vY3JlYXRlR3JvdW5kUG9seWxpbmVHZW9tZXRyeS5qcyI6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gKGluaXRfY3JlYXRlR3JvdW5kUG9seWxpbmVHZW9tZXRyeSgpLCBjcmVhdGVHcm91bmRQb2x5bGluZUdlb21ldHJ5X2V4cG9ydHMpKSwKICAgICAgICAiLi9jcmVhdGVQbGFuZUdlb21ldHJ5LmpzIjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiAoaW5pdF9jcmVhdGVQbGFuZUdlb21ldHJ5KCksIGNyZWF0ZVBsYW5lR2VvbWV0cnlfZXhwb3J0cykpLAogICAgICAgICIuL2NyZWF0ZVBsYW5lT3V0bGluZUdlb21ldHJ5LmpzIjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiAoaW5pdF9jcmVhdGVQbGFuZU91dGxpbmVHZW9tZXRyeSgpLCBjcmVhdGVQbGFuZU91dGxpbmVHZW9tZXRyeV9leHBvcnRzKSksCiAgICAgICAgIi4vY3JlYXRlUG9seWdvbkdlb21ldHJ5LmpzIjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiAoaW5pdF9jcmVhdGVQb2x5Z29uR2VvbWV0cnkoKSwgY3JlYXRlUG9seWdvbkdlb21ldHJ5X2V4cG9ydHMpKSwKICAgICAgICAiLi9jcmVhdGVQb2x5Z29uT3V0bGluZUdlb21ldHJ5LmpzIjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiAoaW5pdF9jcmVhdGVQb2x5Z29uT3V0bGluZUdlb21ldHJ5KCksIGNyZWF0ZVBvbHlnb25PdXRsaW5lR2VvbWV0cnlfZXhwb3J0cykpLAogICAgICAgICIuL2NyZWF0ZVBvbHlsaW5lR2VvbWV0cnkuanMiOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IChpbml0X2NyZWF0ZVBvbHlsaW5lR2VvbWV0cnkoKSwgY3JlYXRlUG9seWxpbmVHZW9tZXRyeV9leHBvcnRzKSksCiAgICAgICAgIi4vY3JlYXRlUG9seWxpbmVWb2x1bWVHZW9tZXRyeS5qcyI6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gKGluaXRfY3JlYXRlUG9seWxpbmVWb2x1bWVHZW9tZXRyeSgpLCBjcmVhdGVQb2x5bGluZVZvbHVtZUdlb21ldHJ5X2V4cG9ydHMpKSwKICAgICAgICAiLi9jcmVhdGVQb2x5bGluZVZvbHVtZU91dGxpbmVHZW9tZXRyeS5qcyI6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gKGluaXRfY3JlYXRlUG9seWxpbmVWb2x1bWVPdXRsaW5lR2VvbWV0cnkoKSwgY3JlYXRlUG9seWxpbmVWb2x1bWVPdXRsaW5lR2VvbWV0cnlfZXhwb3J0cykpLAogICAgICAgICIuL2NyZWF0ZVJlY3RhbmdsZUdlb21ldHJ5LmpzIjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiAoaW5pdF9jcmVhdGVSZWN0YW5nbGVHZW9tZXRyeSgpLCBjcmVhdGVSZWN0YW5nbGVHZW9tZXRyeV9leHBvcnRzKSksCiAgICAgICAgIi4vY3JlYXRlUmVjdGFuZ2xlT3V0bGluZUdlb21ldHJ5LmpzIjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiAoaW5pdF9jcmVhdGVSZWN0YW5nbGVPdXRsaW5lR2VvbWV0cnkoKSwgY3JlYXRlUmVjdGFuZ2xlT3V0bGluZUdlb21ldHJ5X2V4cG9ydHMpKSwKICAgICAgICAiLi9jcmVhdGVTaW1wbGVQb2x5bGluZUdlb21ldHJ5LmpzIjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiAoaW5pdF9jcmVhdGVTaW1wbGVQb2x5bGluZUdlb21ldHJ5KCksIGNyZWF0ZVNpbXBsZVBvbHlsaW5lR2VvbWV0cnlfZXhwb3J0cykpLAogICAgICAgICIuL2NyZWF0ZVNwaGVyZUdlb21ldHJ5LmpzIjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiAoaW5pdF9jcmVhdGVTcGhlcmVHZW9tZXRyeSgpLCBjcmVhdGVTcGhlcmVHZW9tZXRyeV9leHBvcnRzKSksCiAgICAgICAgIi4vY3JlYXRlU3BoZXJlT3V0bGluZUdlb21ldHJ5LmpzIjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiAoaW5pdF9jcmVhdGVTcGhlcmVPdXRsaW5lR2VvbWV0cnkoKSwgY3JlYXRlU3BoZXJlT3V0bGluZUdlb21ldHJ5X2V4cG9ydHMpKSwKICAgICAgICAiLi9jcmVhdGVUYXNrUHJvY2Vzc29yV29ya2VyLmpzIjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiAoaW5pdF9jcmVhdGVUYXNrUHJvY2Vzc29yV29ya2VyKCksIGNyZWF0ZVRhc2tQcm9jZXNzb3JXb3JrZXJfZXhwb3J0cykpLAogICAgICAgICIuL2NyZWF0ZVZlY3RvclRpbGVDbGFtcGVkUG9seWxpbmVzLmpzIjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiAoaW5pdF9jcmVhdGVWZWN0b3JUaWxlQ2xhbXBlZFBvbHlsaW5lcygpLCBjcmVhdGVWZWN0b3JUaWxlQ2xhbXBlZFBvbHlsaW5lc19leHBvcnRzKSksCiAgICAgICAgIi4vY3JlYXRlVmVjdG9yVGlsZUdlb21ldHJpZXMuanMiOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IChpbml0X2NyZWF0ZVZlY3RvclRpbGVHZW9tZXRyaWVzKCksIGNyZWF0ZVZlY3RvclRpbGVHZW9tZXRyaWVzX2V4cG9ydHMpKSwKICAgICAgICAiLi9jcmVhdGVWZWN0b3JUaWxlUG9pbnRzLmpzIjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiAoaW5pdF9jcmVhdGVWZWN0b3JUaWxlUG9pbnRzKCksIGNyZWF0ZVZlY3RvclRpbGVQb2ludHNfZXhwb3J0cykpLAogICAgICAgICIuL2NyZWF0ZVZlY3RvclRpbGVQb2x5Z29ucy5qcyI6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gKGluaXRfY3JlYXRlVmVjdG9yVGlsZVBvbHlnb25zKCksIGNyZWF0ZVZlY3RvclRpbGVQb2x5Z29uc19leHBvcnRzKSksCiAgICAgICAgIi4vY3JlYXRlVmVjdG9yVGlsZVBvbHlsaW5lcy5qcyI6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gKGluaXRfY3JlYXRlVmVjdG9yVGlsZVBvbHlsaW5lcygpLCBjcmVhdGVWZWN0b3JUaWxlUG9seWxpbmVzX2V4cG9ydHMpKSwKICAgICAgICAiLi9jcmVhdGVWZXJ0aWNlc0Zyb21Hb29nbGVFYXJ0aEVudGVycHJpc2VCdWZmZXIuanMiOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IChpbml0X2NyZWF0ZVZlcnRpY2VzRnJvbUdvb2dsZUVhcnRoRW50ZXJwcmlzZUJ1ZmZlcigpLCBjcmVhdGVWZXJ0aWNlc0Zyb21Hb29nbGVFYXJ0aEVudGVycHJpc2VCdWZmZXJfZXhwb3J0cykpLAogICAgICAgICIuL2NyZWF0ZVZlcnRpY2VzRnJvbUhlaWdodG1hcC5qcyI6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gKGluaXRfY3JlYXRlVmVydGljZXNGcm9tSGVpZ2h0bWFwKCksIGNyZWF0ZVZlcnRpY2VzRnJvbUhlaWdodG1hcF9leHBvcnRzKSksCiAgICAgICAgIi4vY3JlYXRlVmVydGljZXNGcm9tUXVhbnRpemVkVGVycmFpbk1lc2guanMiOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IChpbml0X2NyZWF0ZVZlcnRpY2VzRnJvbVF1YW50aXplZFRlcnJhaW5NZXNoKCksIGNyZWF0ZVZlcnRpY2VzRnJvbVF1YW50aXplZFRlcnJhaW5NZXNoX2V4cG9ydHMpKSwKICAgICAgICAiLi9jcmVhdGVXYWxsR2VvbWV0cnkuanMiOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IChpbml0X2NyZWF0ZVdhbGxHZW9tZXRyeSgpLCBjcmVhdGVXYWxsR2VvbWV0cnlfZXhwb3J0cykpLAogICAgICAgICIuL2NyZWF0ZVdhbGxPdXRsaW5lR2VvbWV0cnkuanMiOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IChpbml0X2NyZWF0ZVdhbGxPdXRsaW5lR2VvbWV0cnkoKSwgY3JlYXRlV2FsbE91dGxpbmVHZW9tZXRyeV9leHBvcnRzKSksCiAgICAgICAgIi4vZGVjb2RlRHJhY28uanMiOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IChpbml0X2RlY29kZURyYWNvKCksIGRlY29kZURyYWNvX2V4cG9ydHMpKSwKICAgICAgICAiLi9kZWNvZGVHb29nbGVFYXJ0aEVudGVycHJpc2VQYWNrZXQuanMiOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IChpbml0X2RlY29kZUdvb2dsZUVhcnRoRW50ZXJwcmlzZVBhY2tldCgpLCBkZWNvZGVHb29nbGVFYXJ0aEVudGVycHJpc2VQYWNrZXRfZXhwb3J0cykpLAogICAgICAgICIuL2RlY29kZUkzUy5qcyI6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gKGluaXRfZGVjb2RlSTNTKCksIGRlY29kZUkzU19leHBvcnRzKSksCiAgICAgICAgIi4vdHJhbnNjb2RlS1RYMi5qcyI6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gKGluaXRfdHJhbnNjb2RlS1RYMigpLCB0cmFuc2NvZGVLVFgyX2V4cG9ydHMpKSwKICAgICAgICAiLi90cmFuc2ZlclR5cGVkQXJyYXlUZXN0LmpzIjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiAoaW5pdF90cmFuc2ZlclR5cGVkQXJyYXlUZXN0KCksIHRyYW5zZmVyVHlwZWRBcnJheVRlc3RfZXhwb3J0cykpLAogICAgICAgICIuL3Vwc2FtcGxlUXVhbnRpemVkVGVycmFpbk1lc2guanMiOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IChpbml0X3Vwc2FtcGxlUXVhbnRpemVkVGVycmFpbk1lc2goKSwgdXBzYW1wbGVRdWFudGl6ZWRUZXJyYWluTWVzaF9leHBvcnRzKSkKICAgICAgfSk7CiAgICB9CiAgfSk7CgogIC8vIHBhY2thZ2VzL2VuZ2luZS9Tb3VyY2UvV29ya2Vycy9jcmVhdGVHZW9tZXRyeS5qcwogIHZhciBjcmVhdGVHZW9tZXRyeV9leHBvcnRzID0ge307CiAgX19leHBvcnQoY3JlYXRlR2VvbWV0cnlfZXhwb3J0cywgewogICAgZGVmYXVsdDogKCkgPT4gY3JlYXRlR2VvbWV0cnlfZGVmYXVsdAogIH0pOwogIGFzeW5jIGZ1bmN0aW9uIGdldE1vZHVsZShtb2R1bGVOYW1lLCBtb2R1bGVQYXRoKSB7CiAgICBsZXQgbW9kdWxlID0gZGVmYXVsdFZhbHVlX2RlZmF1bHQobW9kdWxlQ2FjaGVbbW9kdWxlUGF0aF0sIG1vZHVsZUNhY2hlW21vZHVsZU5hbWVdKTsKICAgIGlmIChkZWZpbmVkX2RlZmF1bHQobW9kdWxlKSkgewogICAgICByZXR1cm4gbW9kdWxlOwogICAgfQogICAgaWYgKGRlZmluZWRfZGVmYXVsdChtb2R1bGVQYXRoKSkgewogICAgICBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICJvYmplY3QiKSB7CiAgICAgICAgbW9kdWxlID0gX19yZXF1aXJlKG1vZHVsZVBhdGgpOwogICAgICB9IGVsc2UgewogICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGltcG9ydChtb2R1bGVQYXRoKTsKICAgICAgICBtb2R1bGUgPSByZXN1bHQuZGVmYXVsdDsKICAgICAgfQogICAgICBtb2R1bGVDYWNoZVttb2R1bGVQYXRoXSA9IG1vZHVsZTsKICAgICAgcmV0dXJuIG1vZHVsZTsKICAgIH0KICAgIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gIm9iamVjdCIpIHsKICAgICAgbW9kdWxlID0gX19yZXF1aXJlKGBXb3JrZXJzLyR7bW9kdWxlTmFtZX1gKTsKICAgIH0gZWxzZSB7CiAgICAgIGNvbnN0IHJlc3VsdCA9IGRlZmluZWRfZGVmYXVsdChtb2R1bGVQYXRoKSA/IGF3YWl0IGltcG9ydChtb2R1bGVQYXRoKSA6IGF3YWl0IGdsb2JJbXBvcnRfanMoYC4vJHttb2R1bGVOYW1lfS5qc2ApOwogICAgICBtb2R1bGUgPSByZXN1bHQuZGVmYXVsdDsKICAgIH0KICAgIG1vZHVsZUNhY2hlW21vZHVsZU5hbWVdID0gbW9kdWxlOwogICAgcmV0dXJuIG1vZHVsZTsKICB9CiAgYXN5bmMgZnVuY3Rpb24gY3JlYXRlR2VvbWV0cnkocGFyYW1ldGVycywgdHJhbnNmZXJhYmxlT2JqZWN0cykgewogICAgY29uc3Qgc3ViVGFza3MgPSBwYXJhbWV0ZXJzLnN1YlRhc2tzOwogICAgY29uc3QgbGVuZ3RoID0gc3ViVGFza3MubGVuZ3RoOwogICAgY29uc3QgcmVzdWx0c09yUHJvbWlzZXMgPSBuZXcgQXJyYXkobGVuZ3RoKTsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgY29uc3QgdGFzayA9IHN1YlRhc2tzW2ldOwogICAgICBjb25zdCBnZW9tZXRyeSA9IHRhc2suZ2VvbWV0cnk7CiAgICAgIGNvbnN0IG1vZHVsZU5hbWUgPSB0YXNrLm1vZHVsZU5hbWU7CiAgICAgIGNvbnN0IG1vZHVsZVBhdGggPSB0YXNrLm1vZHVsZVBhdGg7CiAgICAgIGlmIChkZWZpbmVkX2RlZmF1bHQobW9kdWxlTmFtZSkgJiYgZGVmaW5lZF9kZWZhdWx0KG1vZHVsZVBhdGgpKSB7CiAgICAgICAgdGhyb3cgbmV3IERldmVsb3BlckVycm9yX2RlZmF1bHQoIk11c3Qgb25seSBzZXQgbW9kdWxlTmFtZSBvciBtb2R1bGVQYXRoIik7CiAgICAgIH0KICAgICAgaWYgKGRlZmluZWRfZGVmYXVsdChtb2R1bGVOYW1lKSB8fCBkZWZpbmVkX2RlZmF1bHQobW9kdWxlUGF0aCkpIHsKICAgICAgICByZXN1bHRzT3JQcm9taXNlc1tpXSA9IGdldE1vZHVsZShtb2R1bGVOYW1lLCBtb2R1bGVQYXRoKS50aGVuKAogICAgICAgICAgKGNyZWF0ZUZ1bmN0aW9uKSA9PiBjcmVhdGVGdW5jdGlvbihnZW9tZXRyeSwgdGFzay5vZmZzZXQpCiAgICAgICAgKTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXN1bHRzT3JQcm9taXNlc1tpXSA9IGdlb21ldHJ5OwogICAgICB9CiAgICB9CiAgICByZXR1cm4gUHJvbWlzZS5hbGwocmVzdWx0c09yUHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24ocmVzdWx0cykgewogICAgICByZXR1cm4gUHJpbWl0aXZlUGlwZWxpbmVfZGVmYXVsdC5wYWNrQ3JlYXRlR2VvbWV0cnlSZXN1bHRzKAogICAgICAgIHJlc3VsdHMsCiAgICAgICAgdHJhbnNmZXJhYmxlT2JqZWN0cwogICAgICApOwogICAgfSk7CiAgfQogIHZhciBtb2R1bGVDYWNoZSwgY3JlYXRlR2VvbWV0cnlfZGVmYXVsdDsKICB2YXIgaW5pdF9jcmVhdGVHZW9tZXRyeSA9IF9fZXNtKHsKICAgICJwYWNrYWdlcy9lbmdpbmUvU291cmNlL1dvcmtlcnMvY3JlYXRlR2VvbWV0cnkuanMiKCkgewogICAgICBpbml0X0RldmVsb3BlckVycm9yKCk7CiAgICAgIGluaXRfZGVmYXVsdFZhbHVlKCk7CiAgICAgIGluaXRfZGVmaW5lZCgpOwogICAgICBpbml0X1ByaW1pdGl2ZVBpcGVsaW5lKCk7CiAgICAgIGluaXRfY3JlYXRlVGFza1Byb2Nlc3NvcldvcmtlcigpOwogICAgICBpbml0XygpOwogICAgICBtb2R1bGVDYWNoZSA9IHt9OwogICAgICBjcmVhdGVHZW9tZXRyeV9kZWZhdWx0ID0gY3JlYXRlVGFza1Byb2Nlc3Nvcldvcmtlcl9kZWZhdWx0KGNyZWF0ZUdlb21ldHJ5KTsKICAgIH0KICB9KTsKCiAgLy8gPHN0ZGluPgogIHZhciBzdGRpbl9leHBvcnRzID0ge307CiAgX19leHBvcnQoc3RkaW5fZXhwb3J0cywgewogICAgY29tYmluZUdlb21ldHJ5OiAoKSA9PiBjb21iaW5lR2VvbWV0cnkyLAogICAgY3JlYXRlQm94R2VvbWV0cnk6ICgpID0+IGNyZWF0ZUJveEdlb21ldHJ5MiwKICAgIGNyZWF0ZUJveE91dGxpbmVHZW9tZXRyeTogKCkgPT4gY3JlYXRlQm94T3V0bGluZUdlb21ldHJ5MiwKICAgIGNyZWF0ZUNpcmNsZUdlb21ldHJ5OiAoKSA9PiBjcmVhdGVDaXJjbGVHZW9tZXRyeTIsCiAgICBjcmVhdGVDaXJjbGVPdXRsaW5lR2VvbWV0cnk6ICgpID0+IGNyZWF0ZUNpcmNsZU91dGxpbmVHZW9tZXRyeTIsCiAgICBjcmVhdGVDb3BsYW5hclBvbHlnb25HZW9tZXRyeTogKCkgPT4gY3JlYXRlQ29wbGFuYXJQb2x5Z29uR2VvbWV0cnkyLAogICAgY3JlYXRlQ29wbGFuYXJQb2x5Z29uT3V0bGluZUdlb21ldHJ5OiAoKSA9PiBjcmVhdGVDb3BsYW5hclBvbHlnb25PdXRsaW5lR2VvbWV0cnkyLAogICAgY3JlYXRlQ29ycmlkb3JHZW9tZXRyeTogKCkgPT4gY3JlYXRlQ29ycmlkb3JHZW9tZXRyeTIsCiAgICBjcmVhdGVDb3JyaWRvck91dGxpbmVHZW9tZXRyeTogKCkgPT4gY3JlYXRlQ29ycmlkb3JPdXRsaW5lR2VvbWV0cnkyLAogICAgY3JlYXRlQ3lsaW5kZXJHZW9tZXRyeTogKCkgPT4gY3JlYXRlQ3lsaW5kZXJHZW9tZXRyeTIsCiAgICBjcmVhdGVDeWxpbmRlck91dGxpbmVHZW9tZXRyeTogKCkgPT4gY3JlYXRlQ3lsaW5kZXJPdXRsaW5lR2VvbWV0cnkyLAogICAgY3JlYXRlRWxsaXBzZUdlb21ldHJ5OiAoKSA9PiBjcmVhdGVFbGxpcHNlR2VvbWV0cnkyLAogICAgY3JlYXRlRWxsaXBzZU91dGxpbmVHZW9tZXRyeTogKCkgPT4gY3JlYXRlRWxsaXBzZU91dGxpbmVHZW9tZXRyeTIsCiAgICBjcmVhdGVFbGxpcHNvaWRHZW9tZXRyeTogKCkgPT4gY3JlYXRlRWxsaXBzb2lkR2VvbWV0cnkyLAogICAgY3JlYXRlRWxsaXBzb2lkT3V0bGluZUdlb21ldHJ5OiAoKSA9PiBjcmVhdGVFbGxpcHNvaWRPdXRsaW5lR2VvbWV0cnkyLAogICAgY3JlYXRlRnJ1c3R1bUdlb21ldHJ5OiAoKSA9PiBjcmVhdGVGcnVzdHVtR2VvbWV0cnkyLAogICAgY3JlYXRlRnJ1c3R1bU91dGxpbmVHZW9tZXRyeTogKCkgPT4gY3JlYXRlRnJ1c3R1bU91dGxpbmVHZW9tZXRyeTIsCiAgICBjcmVhdGVHZW9tZXRyeTogKCkgPT4gY3JlYXRlR2VvbWV0cnkyLAogICAgY3JlYXRlR3JvdW5kUG9seWxpbmVHZW9tZXRyeTogKCkgPT4gY3JlYXRlR3JvdW5kUG9seWxpbmVHZW9tZXRyeTIsCiAgICBjcmVhdGVQbGFuZUdlb21ldHJ5OiAoKSA9PiBjcmVhdGVQbGFuZUdlb21ldHJ5MiwKICAgIGNyZWF0ZVBsYW5lT3V0bGluZUdlb21ldHJ5OiAoKSA9PiBjcmVhdGVQbGFuZU91dGxpbmVHZW9tZXRyeTIsCiAgICBjcmVhdGVQb2x5Z29uR2VvbWV0cnk6ICgpID0+IGNyZWF0ZVBvbHlnb25HZW9tZXRyeTIsCiAgICBjcmVhdGVQb2x5Z29uT3V0bGluZUdlb21ldHJ5OiAoKSA9PiBjcmVhdGVQb2x5Z29uT3V0bGluZUdlb21ldHJ5MiwKICAgIGNyZWF0ZVBvbHlsaW5lR2VvbWV0cnk6ICgpID0+IGNyZWF0ZVBvbHlsaW5lR2VvbWV0cnkyLAogICAgY3JlYXRlUG9seWxpbmVWb2x1bWVHZW9tZXRyeTogKCkgPT4gY3JlYXRlUG9seWxpbmVWb2x1bWVHZW9tZXRyeTIsCiAgICBjcmVhdGVQb2x5bGluZVZvbHVtZU91dGxpbmVHZW9tZXRyeTogKCkgPT4gY3JlYXRlUG9seWxpbmVWb2x1bWVPdXRsaW5lR2VvbWV0cnkyLAogICAgY3JlYXRlUmVjdGFuZ2xlR2VvbWV0cnk6ICgpID0+IGNyZWF0ZVJlY3RhbmdsZUdlb21ldHJ5MiwKICAgIGNyZWF0ZVJlY3RhbmdsZU91dGxpbmVHZW9tZXRyeTogKCkgPT4gY3JlYXRlUmVjdGFuZ2xlT3V0bGluZUdlb21ldHJ5MiwKICAgIGNyZWF0ZVNpbXBsZVBvbHlsaW5lR2VvbWV0cnk6ICgpID0+IGNyZWF0ZVNpbXBsZVBvbHlsaW5lR2VvbWV0cnkyLAogICAgY3JlYXRlU3BoZXJlR2VvbWV0cnk6ICgpID0+IGNyZWF0ZVNwaGVyZUdlb21ldHJ5MiwKICAgIGNyZWF0ZVNwaGVyZU91dGxpbmVHZW9tZXRyeTogKCkgPT4gY3JlYXRlU3BoZXJlT3V0bGluZUdlb21ldHJ5MiwKICAgIGNyZWF0ZVRhc2tQcm9jZXNzb3JXb3JrZXI6ICgpID0+IGNyZWF0ZVRhc2tQcm9jZXNzb3JXb3JrZXIyLAogICAgY3JlYXRlVmVjdG9yVGlsZUNsYW1wZWRQb2x5bGluZXM6ICgpID0+IGNyZWF0ZVZlY3RvclRpbGVDbGFtcGVkUG9seWxpbmVzMiwKICAgIGNyZWF0ZVZlY3RvclRpbGVHZW9tZXRyaWVzOiAoKSA9PiBjcmVhdGVWZWN0b3JUaWxlR2VvbWV0cmllczIsCiAgICBjcmVhdGVWZWN0b3JUaWxlUG9pbnRzOiAoKSA9PiBjcmVhdGVWZWN0b3JUaWxlUG9pbnRzMiwKICAgIGNyZWF0ZVZlY3RvclRpbGVQb2x5Z29uczogKCkgPT4gY3JlYXRlVmVjdG9yVGlsZVBvbHlnb25zMiwKICAgIGNyZWF0ZVZlY3RvclRpbGVQb2x5bGluZXM6ICgpID0+IGNyZWF0ZVZlY3RvclRpbGVQb2x5bGluZXMyLAogICAgY3JlYXRlVmVydGljZXNGcm9tR29vZ2xlRWFydGhFbnRlcnByaXNlQnVmZmVyOiAoKSA9PiBjcmVhdGVWZXJ0aWNlc0Zyb21Hb29nbGVFYXJ0aEVudGVycHJpc2VCdWZmZXIyLAogICAgY3JlYXRlVmVydGljZXNGcm9tSGVpZ2h0bWFwOiAoKSA9PiBjcmVhdGVWZXJ0aWNlc0Zyb21IZWlnaHRtYXAyLAogICAgY3JlYXRlVmVydGljZXNGcm9tUXVhbnRpemVkVGVycmFpbk1lc2g6ICgpID0+IGNyZWF0ZVZlcnRpY2VzRnJvbVF1YW50aXplZFRlcnJhaW5NZXNoMiwKICAgIGNyZWF0ZVdhbGxHZW9tZXRyeTogKCkgPT4gY3JlYXRlV2FsbEdlb21ldHJ5MiwKICAgIGNyZWF0ZVdhbGxPdXRsaW5lR2VvbWV0cnk6ICgpID0+IGNyZWF0ZVdhbGxPdXRsaW5lR2VvbWV0cnkyLAogICAgZGVjb2RlRHJhY286ICgpID0+IGRlY29kZURyYWNvMiwKICAgIGRlY29kZUdvb2dsZUVhcnRoRW50ZXJwcmlzZVBhY2tldDogKCkgPT4gZGVjb2RlR29vZ2xlRWFydGhFbnRlcnByaXNlUGFja2V0MiwKICAgIGRlY29kZUkzUzogKCkgPT4gZGVjb2RlSTNTMiwKICAgIHRyYW5zY29kZUtUWDI6ICgpID0+IHRyYW5zY29kZUtUWDIyLAogICAgdHJhbnNmZXJUeXBlZEFycmF5VGVzdDogKCkgPT4gdHJhbnNmZXJUeXBlZEFycmF5VGVzdCwKICAgIHVwc2FtcGxlUXVhbnRpemVkVGVycmFpbk1lc2g6ICgpID0+IHVwc2FtcGxlUXVhbnRpemVkVGVycmFpbk1lc2gyCiAgfSk7CiAgdmFyIGNvbWJpbmVHZW9tZXRyeTIgPSAoKSA9PiB7CiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IGluaXRfY29tYmluZUdlb21ldHJ5KCkpOwogIH07CiAgdmFyIGNyZWF0ZUJveEdlb21ldHJ5MiA9ICgpID0+IHsKICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gaW5pdF9jcmVhdGVCb3hHZW9tZXRyeSgpKTsKICB9OwogIHZhciBjcmVhdGVCb3hPdXRsaW5lR2VvbWV0cnkyID0gKCkgPT4gewogICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBpbml0X2NyZWF0ZUJveE91dGxpbmVHZW9tZXRyeSgpKTsKICB9OwogIHZhciBjcmVhdGVDaXJjbGVHZW9tZXRyeTIgPSAoKSA9PiB7CiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IGluaXRfY3JlYXRlQ2lyY2xlR2VvbWV0cnkoKSk7CiAgfTsKICB2YXIgY3JlYXRlQ2lyY2xlT3V0bGluZUdlb21ldHJ5MiA9ICgpID0+IHsKICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gaW5pdF9jcmVhdGVDaXJjbGVPdXRsaW5lR2VvbWV0cnkoKSk7CiAgfTsKICB2YXIgY3JlYXRlQ29wbGFuYXJQb2x5Z29uR2VvbWV0cnkyID0gKCkgPT4gewogICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBpbml0X2NyZWF0ZUNvcGxhbmFyUG9seWdvbkdlb21ldHJ5KCkpOwogIH07CiAgdmFyIGNyZWF0ZUNvcGxhbmFyUG9seWdvbk91dGxpbmVHZW9tZXRyeTIgPSAoKSA9PiB7CiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IGluaXRfY3JlYXRlQ29wbGFuYXJQb2x5Z29uT3V0bGluZUdlb21ldHJ5KCkpOwogIH07CiAgdmFyIGNyZWF0ZUNvcnJpZG9yR2VvbWV0cnkyID0gKCkgPT4gewogICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBpbml0X2NyZWF0ZUNvcnJpZG9yR2VvbWV0cnkoKSk7CiAgfTsKICB2YXIgY3JlYXRlQ29ycmlkb3JPdXRsaW5lR2VvbWV0cnkyID0gKCkgPT4gewogICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBpbml0X2NyZWF0ZUNvcnJpZG9yT3V0bGluZUdlb21ldHJ5KCkpOwogIH07CiAgdmFyIGNyZWF0ZUN5bGluZGVyR2VvbWV0cnkyID0gKCkgPT4gewogICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBpbml0X2NyZWF0ZUN5bGluZGVyR2VvbWV0cnkoKSk7CiAgfTsKICB2YXIgY3JlYXRlQ3lsaW5kZXJPdXRsaW5lR2VvbWV0cnkyID0gKCkgPT4gewogICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBpbml0X2NyZWF0ZUN5bGluZGVyT3V0bGluZUdlb21ldHJ5KCkpOwogIH07CiAgdmFyIGNyZWF0ZUVsbGlwc2VHZW9tZXRyeTIgPSAoKSA9PiB7CiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IGluaXRfY3JlYXRlRWxsaXBzZUdlb21ldHJ5KCkpOwogIH07CiAgdmFyIGNyZWF0ZUVsbGlwc2VPdXRsaW5lR2VvbWV0cnkyID0gKCkgPT4gewogICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBpbml0X2NyZWF0ZUVsbGlwc2VPdXRsaW5lR2VvbWV0cnkoKSk7CiAgfTsKICB2YXIgY3JlYXRlRWxsaXBzb2lkR2VvbWV0cnkyID0gKCkgPT4gewogICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBpbml0X2NyZWF0ZUVsbGlwc29pZEdlb21ldHJ5KCkpOwogIH07CiAgdmFyIGNyZWF0ZUVsbGlwc29pZE91dGxpbmVHZW9tZXRyeTIgPSAoKSA9PiB7CiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IGluaXRfY3JlYXRlRWxsaXBzb2lkT3V0bGluZUdlb21ldHJ5KCkpOwogIH07CiAgdmFyIGNyZWF0ZUZydXN0dW1HZW9tZXRyeTIgPSAoKSA9PiB7CiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IGluaXRfY3JlYXRlRnJ1c3R1bUdlb21ldHJ5KCkpOwogIH07CiAgdmFyIGNyZWF0ZUZydXN0dW1PdXRsaW5lR2VvbWV0cnkyID0gKCkgPT4gewogICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBpbml0X2NyZWF0ZUZydXN0dW1PdXRsaW5lR2VvbWV0cnkoKSk7CiAgfTsKICB2YXIgY3JlYXRlR2VvbWV0cnkyID0gKCkgPT4gewogICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBpbml0X2NyZWF0ZUdlb21ldHJ5KCkpOwogIH07CiAgdmFyIGNyZWF0ZUdyb3VuZFBvbHlsaW5lR2VvbWV0cnkyID0gKCkgPT4gewogICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBpbml0X2NyZWF0ZUdyb3VuZFBvbHlsaW5lR2VvbWV0cnkoKSk7CiAgfTsKICB2YXIgY3JlYXRlUGxhbmVHZW9tZXRyeTIgPSAoKSA9PiB7CiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IGluaXRfY3JlYXRlUGxhbmVHZW9tZXRyeSgpKTsKICB9OwogIHZhciBjcmVhdGVQbGFuZU91dGxpbmVHZW9tZXRyeTIgPSAoKSA9PiB7CiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IGluaXRfY3JlYXRlUGxhbmVPdXRsaW5lR2VvbWV0cnkoKSk7CiAgfTsKICB2YXIgY3JlYXRlUG9seWdvbkdlb21ldHJ5MiA9ICgpID0+IHsKICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gaW5pdF9jcmVhdGVQb2x5Z29uR2VvbWV0cnkoKSk7CiAgfTsKICB2YXIgY3JlYXRlUG9seWdvbk91dGxpbmVHZW9tZXRyeTIgPSAoKSA9PiB7CiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IGluaXRfY3JlYXRlUG9seWdvbk91dGxpbmVHZW9tZXRyeSgpKTsKICB9OwogIHZhciBjcmVhdGVQb2x5bGluZUdlb21ldHJ5MiA9ICgpID0+IHsKICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gaW5pdF9jcmVhdGVQb2x5bGluZUdlb21ldHJ5KCkpOwogIH07CiAgdmFyIGNyZWF0ZVBvbHlsaW5lVm9sdW1lR2VvbWV0cnkyID0gKCkgPT4gewogICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBpbml0X2NyZWF0ZVBvbHlsaW5lVm9sdW1lR2VvbWV0cnkoKSk7CiAgfTsKICB2YXIgY3JlYXRlUG9seWxpbmVWb2x1bWVPdXRsaW5lR2VvbWV0cnkyID0gKCkgPT4gewogICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBpbml0X2NyZWF0ZVBvbHlsaW5lVm9sdW1lT3V0bGluZUdlb21ldHJ5KCkpOwogIH07CiAgdmFyIGNyZWF0ZVJlY3RhbmdsZUdlb21ldHJ5MiA9ICgpID0+IHsKICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gaW5pdF9jcmVhdGVSZWN0YW5nbGVHZW9tZXRyeSgpKTsKICB9OwogIHZhciBjcmVhdGVSZWN0YW5nbGVPdXRsaW5lR2VvbWV0cnkyID0gKCkgPT4gewogICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBpbml0X2NyZWF0ZVJlY3RhbmdsZU91dGxpbmVHZW9tZXRyeSgpKTsKICB9OwogIHZhciBjcmVhdGVTaW1wbGVQb2x5bGluZUdlb21ldHJ5MiA9ICgpID0+IHsKICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gaW5pdF9jcmVhdGVTaW1wbGVQb2x5bGluZUdlb21ldHJ5KCkpOwogIH07CiAgdmFyIGNyZWF0ZVNwaGVyZUdlb21ldHJ5MiA9ICgpID0+IHsKICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gaW5pdF9jcmVhdGVTcGhlcmVHZW9tZXRyeSgpKTsKICB9OwogIHZhciBjcmVhdGVTcGhlcmVPdXRsaW5lR2VvbWV0cnkyID0gKCkgPT4gewogICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBpbml0X2NyZWF0ZVNwaGVyZU91dGxpbmVHZW9tZXRyeSgpKTsKICB9OwogIHZhciBjcmVhdGVUYXNrUHJvY2Vzc29yV29ya2VyMiA9ICgpID0+IHsKICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gaW5pdF9jcmVhdGVUYXNrUHJvY2Vzc29yV29ya2VyKCkpOwogIH07CiAgdmFyIGNyZWF0ZVZlY3RvclRpbGVDbGFtcGVkUG9seWxpbmVzMiA9ICgpID0+IHsKICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gaW5pdF9jcmVhdGVWZWN0b3JUaWxlQ2xhbXBlZFBvbHlsaW5lcygpKTsKICB9OwogIHZhciBjcmVhdGVWZWN0b3JUaWxlR2VvbWV0cmllczIgPSAoKSA9PiB7CiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IGluaXRfY3JlYXRlVmVjdG9yVGlsZUdlb21ldHJpZXMoKSk7CiAgfTsKICB2YXIgY3JlYXRlVmVjdG9yVGlsZVBvaW50czIgPSAoKSA9PiB7CiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IGluaXRfY3JlYXRlVmVjdG9yVGlsZVBvaW50cygpKTsKICB9OwogIHZhciBjcmVhdGVWZWN0b3JUaWxlUG9seWdvbnMyID0gKCkgPT4gewogICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBpbml0X2NyZWF0ZVZlY3RvclRpbGVQb2x5Z29ucygpKTsKICB9OwogIHZhciBjcmVhdGVWZWN0b3JUaWxlUG9seWxpbmVzMiA9ICgpID0+IHsKICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gaW5pdF9jcmVhdGVWZWN0b3JUaWxlUG9seWxpbmVzKCkpOwogIH07CiAgdmFyIGNyZWF0ZVZlcnRpY2VzRnJvbUdvb2dsZUVhcnRoRW50ZXJwcmlzZUJ1ZmZlcjIgPSAoKSA9PiB7CiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IGluaXRfY3JlYXRlVmVydGljZXNGcm9tR29vZ2xlRWFydGhFbnRlcnByaXNlQnVmZmVyKCkpOwogIH07CiAgdmFyIGNyZWF0ZVZlcnRpY2VzRnJvbUhlaWdodG1hcDIgPSAoKSA9PiB7CiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IGluaXRfY3JlYXRlVmVydGljZXNGcm9tSGVpZ2h0bWFwKCkpOwogIH07CiAgdmFyIGNyZWF0ZVZlcnRpY2VzRnJvbVF1YW50aXplZFRlcnJhaW5NZXNoMiA9ICgpID0+IHsKICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gaW5pdF9jcmVhdGVWZXJ0aWNlc0Zyb21RdWFudGl6ZWRUZXJyYWluTWVzaCgpKTsKICB9OwogIHZhciBjcmVhdGVXYWxsR2VvbWV0cnkyID0gKCkgPT4gewogICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBpbml0X2NyZWF0ZVdhbGxHZW9tZXRyeSgpKTsKICB9OwogIHZhciBjcmVhdGVXYWxsT3V0bGluZUdlb21ldHJ5MiA9ICgpID0+IHsKICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gaW5pdF9jcmVhdGVXYWxsT3V0bGluZUdlb21ldHJ5KCkpOwogIH07CiAgdmFyIGRlY29kZURyYWNvMiA9ICgpID0+IHsKICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gaW5pdF9kZWNvZGVEcmFjbygpKTsKICB9OwogIHZhciBkZWNvZGVHb29nbGVFYXJ0aEVudGVycHJpc2VQYWNrZXQyID0gKCkgPT4gewogICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBpbml0X2RlY29kZUdvb2dsZUVhcnRoRW50ZXJwcmlzZVBhY2tldCgpKTsKICB9OwogIHZhciBkZWNvZGVJM1MyID0gKCkgPT4gewogICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBpbml0X2RlY29kZUkzUygpKTsKICB9OwogIHZhciB0cmFuc2NvZGVLVFgyMiA9ICgpID0+IHsKICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gaW5pdF90cmFuc2NvZGVLVFgyKCkpOwogIH07CiAgdmFyIHRyYW5zZmVyVHlwZWRBcnJheVRlc3QgPSAoKSA9PiB7CiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IGluaXRfdHJhbnNmZXJUeXBlZEFycmF5VGVzdCgpKTsKICB9OwogIHZhciB1cHNhbXBsZVF1YW50aXplZFRlcnJhaW5NZXNoMiA9ICgpID0+IHsKICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gaW5pdF91cHNhbXBsZVF1YW50aXplZFRlcnJhaW5NZXNoKCkpOwogIH07CiAgcmV0dXJuIF9fdG9Db21tb25KUyhzdGRpbl9leHBvcnRzKTsKfSkoKTsK");