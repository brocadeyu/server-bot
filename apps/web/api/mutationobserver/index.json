{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"MutationObserver","mdn_url":"/en-US/docs/Web/API/MutationObserver","locale":"en-US","native":"English (US)","browserCompat":["api.MutationObserver"],"baseline":{"baseline":"high","baseline_high_date":"2018-01-29","baseline_low_date":"2015-07-29","support":{"chrome":"26","chrome_android":"26","edge":"12","firefox":"14","firefox_android":"14","safari":"7","safari_ios":"7"}},"sidebarHTML":"<ol><li class=\"section\"><em><a href=\"/en-US/docs/Web/API/MutationObserver\" aria-current=\"page\"><code>MutationObserver</code></a></em></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/API/MutationObserver/MutationObserver\"><code>MutationObserver()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Instance methods</summary><ol><li><a href=\"/en-US/docs/Web/API/MutationObserver/disconnect\"><code>disconnect()</code></a></li><li><a href=\"/en-US/docs/Web/API/MutationObserver/observe\"><code>observe()</code></a></li><li><a href=\"/en-US/docs/Web/API/MutationObserver/takeRecords\"><code>takeRecords()</code></a></li></ol></details></li></ol>","sidebarMacro":"APIRef","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <strong><code>MutationObserver</code></strong> interface provides the ability to watch for changes being made to the <a href=\"/en-US/docs/Web/API/Document_Object_Model\">DOM</a> tree. It is designed as a replacement for the older <a href=\"/en-US/docs/Web/API/MutationEvent\">Mutation Events</a> feature, which was part of the DOM3 Events specification.</p>"}},{"type":"prose","value":{"id":"constructor","title":"Constructor","isH3":false,"content":"<dl>\n  <dt id=\"mutationobserver\"><a href=\"/en-US/docs/Web/API/MutationObserver/MutationObserver\" title=\"MutationObserver()\"><code>MutationObserver()</code></a></dt>\n  <dd>\n    <p>Creates and returns a new <code>MutationObserver</code> which will invoke a specified callback function when DOM changes occur.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"instance_methods","title":"Instance methods","isH3":false,"content":"<dl>\n  <dt id=\"disconnect\"><a href=\"/en-US/docs/Web/API/MutationObserver/disconnect\" title=\"disconnect()\"><code>disconnect()</code></a></dt>\n  <dd>\n    <p>Stops the <code>MutationObserver</code> instance from receiving further notifications until and unless <a href=\"/en-US/docs/Web/API/MutationObserver/observe\" title=\"observe()\"><code>observe()</code></a> is called again.</p>\n  </dd>\n  <dt id=\"observe\"><a href=\"/en-US/docs/Web/API/MutationObserver/observe\" title=\"observe()\"><code>observe()</code></a></dt>\n  <dd>\n    <p>Configures the <code>MutationObserver</code> to begin receiving notifications through its callback function when DOM changes matching the given options occur.</p>\n  </dd>\n  <dt id=\"takerecords\"><a href=\"/en-US/docs/Web/API/MutationObserver/takeRecords\" title=\"takeRecords()\"><code>takeRecords()</code></a></dt>\n  <dd>\n    <p>Removes all pending notifications from the <code>MutationObserver</code>'s notification queue and returns them in a new <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> of <a href=\"/en-US/docs/Web/API/MutationRecord\"><code>MutationRecord</code></a> objects.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"mutation_observer_customize_resize_event_listener_demo","title":"Mutation Observer &amp; customize resize event listener &amp; demo","isH3":false,"content":"<p><a href=\"https://codepen.io/milofultz/pen/LYjPXPw\" class=\"external\" target=\"_blank\">https://codepen.io/milofultz/pen/LYjPXPw</a></p>"}},{"type":"prose","value":{"id":"example","title":"Example","isH3":false,"content":"<p>The following example was adapted from <a href=\"https://hacks.mozilla.org/2012/05/dom-mutationobserver-reacting-to-dom-changes-without-killing-browser-performance/\" class=\"external\" target=\"_blank\">this blog post</a>.</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>// Select the node that will be observed for mutations\nconst targetNode = document.getElementById(\"some-id\");\n\n// Options for the observer (which mutations to observe)\nconst config = { attributes: true, childList: true, subtree: true };\n\n// Callback function to execute when mutations are observed\nconst callback = (mutationList, observer) =&gt; {\n  for (const mutation of mutationList) {\n    if (mutation.type === \"childList\") {\n      console.log(\"A child node has been added or removed.\");\n    } else if (mutation.type === \"attributes\") {\n      console.log(`The ${mutation.attributeName} attribute was modified.`);\n    }\n  }\n};\n\n// Create an observer instance linked to the callback function\nconst observer = new MutationObserver(callback);\n\n// Start observing the target node for configured mutations\nobserver.observe(targetNode, config);\n\n// Later, you can stop observing\nobserver.disconnect();\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://dom.spec.whatwg.org/#interface-mutationobserver","title":"DOM Standard"}],"query":"api.MutationObserver"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.MutationObserver"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/PerformanceObserver\"><code>PerformanceObserver</code></a></li>\n  <li><a href=\"/en-US/docs/Web/API/ResizeObserver\"><code>ResizeObserver</code></a></li>\n  <li><a href=\"/en-US/docs/Web/API/IntersectionObserver\"><code>IntersectionObserver</code></a></li>\n  <li><a href=\"https://developer.chrome.com/blog/detect-dom-changes-with-mutation-observers/\" class=\"external\" target=\"_blank\">A brief overview</a></li>\n  <li><a href=\"https://hacks.mozilla.org/2012/05/dom-mutationobserver-reacting-to-dom-changes-without-killing-browser-performance/\" class=\"external\" target=\"_blank\">A more in-depth discussion</a></li>\n  <li><a href=\"https://www.youtube.com/watch?v=eRZ4pO0gVWw\" class=\"external\" target=\"_blank\">A screencast by Chromium developer Rafael Weinstein</a></li>\n</ul>"}}],"toc":[{"text":"Constructor","id":"constructor"},{"text":"Instance methods","id":"instance_methods"},{"text":"Mutation Observer &amp; customize resize event listener &amp; demo","id":"mutation_observer_customize_resize_event_listener_demo"},{"text":"Example","id":"example"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The MutationObserver interface provides the ability to watch for changes being made to the DOM tree. It is designed as a replacement for the older Mutation Events feature, which was part of the DOM3 Events specification.","popularity":0.0905,"modified":"2020-10-15T21:04:26.448Z","other_translations":[],"pageType":"web-api-interface","source":{"folder":"en-us/web/api/mutationobserver","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/api/mutationobserver/index.md","last_commit_url":"https://github.com/mdn/content/commit/null","filename":"index.md"},"short_title":"MutationObserver","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/MutationObserver","title":"MutationObserver"}],"pageTitle":"MutationObserver - Web APIs | MDN","noIndexing":false},"url":"/en-US/docs/Web/API/MutationObserver"}