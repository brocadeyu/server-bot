{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"CSS Font Loading API","mdn_url":"/en-US/docs/Web/API/CSS_Font_Loading_API","locale":"en-US","native":"English (US)","browserCompat":["api.FontFace"],"baseline":{"baseline":"high","baseline_high_date":"2022-07-15","baseline_low_date":"2020-01-15","support":{"chrome":"35","chrome_android":"35","edge":"79","firefox":"41","firefox_android":"41","safari":"10","safari_ios":"10"}},"sidebarHTML":"<ol><li class=\"section\"><em><a href=\"/en-US/docs/Web/API/CSS_Font_Loading_API\" aria-current=\"page\">CSS Font Loading API</a></em></li><li class=\"toggle\"><details open=\"\"><summary>Interfaces</summary><ol><li><a href=\"/en-US/docs/Web/API/FontFace\"><code>FontFace</code></a></li><li><a href=\"/en-US/docs/Web/API/FontFaceSet\"><code>FontFaceSet</code></a></li><li><a href=\"/en-US/docs/Web/API/FontFaceSetLoadEvent\"><code>FontFaceSetLoadEvent</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/API/Document/fonts\"><code>Document.fonts</code></a></li><li><a href=\"/en-US/docs/Web/API/WorkerGlobalScope/fonts\"><code>WorkerGlobalScope.fonts</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Events</summary><ol><li><a href=\"/en-US/docs/Web/API/FontFaceSet/loading_event\"><code>FontFaceSet</code>: <code>loading</code></a></li><li><a href=\"/en-US/docs/Web/API/FontFaceSet/loadingdone_event\"><code>FontFaceSet</code>: <code>loadingdone</code></a></li><li><a href=\"/en-US/docs/Web/API/FontFaceSet/loadingerror_event\"><code>FontFaceSet</code>: <code>loadingerror</code></a></li></ol></details></li></ol>","sidebarMacro":"DefaultAPISidebar","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard note\">\n  <p><strong>Note:</strong> This feature is available in <a href=\"/en-US/docs/Web/API/Web_Workers_API\">Web Workers</a>.</p>\n</div>\n<p>The <strong>CSS Font Loading API</strong> provides events and interfaces for dynamically loading font resources.</p>"}},{"type":"prose","value":{"id":"concepts_and_usage","title":"Concepts and usage","isH3":false,"content":"<p>\n  CSS stylesheets allow authors to use custom fonts; specifying fonts to download using the <a href=\"/en-US/docs/Web/CSS/@font-face\"><code>@font-face</code></a> rule, and applying them to elements with the <a href=\"/en-US/docs/Web/CSS/font-family\"><code>font-family</code></a> property.\n  The point at which a font is downloaded is controlled by the user agent.\n  Most agents only fetch and load fonts when they are first needed, which can result in a perceptible delay.\n</p>\n<p>\n  The CSS Font Loading API overcomes this problem by letting authors control and track when a font face is fetched and loaded, and when it is added to the font face set owned by the document or worker.\n  Adding a font face to the document or worker font face set allows the user agent to fetch and load the associated font resource automatically if needed.\n  A font face can be loaded either before or after it is added to a font face set, but it <em>must</em> be added to the set before it can be used for drawing.\n</p>\n<p>\n  Font faces are defined in <a href=\"/en-US/docs/Web/API/FontFace\"><code>FontFace</code></a> objects, which specify a binary or URL font source and other properties of font in much the same way as the CSS <a href=\"/en-US/docs/Web/CSS/@font-face\"><code>@font-face</code></a> rule.\n  <code>FontFace</code> objects are added to the document or worker <a href=\"/en-US/docs/Web/API/FontFaceSet\"><code>FontFaceSet</code></a> using <a href=\"/en-US/docs/Web/API/Document/fonts\"><code>Document.fonts</code></a> and <a href=\"/en-US/docs/Web/API/WorkerGlobalScope/fonts\"><code>WorkerGlobalScope.fonts</code></a>, respectively.\n  Authors can trigger download of fonts using either <code>FontFace</code> or <code>FontFaceSet</code>, and monitor loading completion.\n  <code>FontFaceSet</code> can additionally be used to determine when all fonts required by a page have loaded and the document layout is complete.\n</p>\n<p>\n  The <a href=\"/en-US/docs/Web/API/FontFace/status\"><code>FontFace.status</code></a> property indicates the font face loading status: <code>unloaded</code>, <code>loading</code>, <code>loaded</code> or <code>failed</code>.\n  This status is initially <code>unloaded</code>.\n  It is set to <code>loading</code> when the file is being downloaded or the font data is being processed, and to <code>failed</code> if the font definition is invalid or the font data cannot be loaded.\n  The status is set to <code>loaded</code> when the font face data has been successfully fetched (if needed) and loaded.\n</p>"}},{"type":"prose","value":{"id":"defining_a_font_face","title":"Defining a font face","isH3":true,"content":"<p>\n  Font faces are created using the <a href=\"/en-US/docs/Web/API/FontFace/FontFace\"><code>FontFace</code> constructor</a>, which takes as parameters: the font family, the font source, and optional descriptors.\n  The format and grammar of these arguments is the same as the equivalent <a href=\"/en-US/docs/Web/CSS/@font-face\"><code>@font-face</code></a> definition.\n</p>\n<p>\n  The font source can either be binary data in an <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or a font resource at a URL.\n  A typical font face definition using a URL source might be as shown below.\n  Note that the <code>url()</code> function is required for URL font sources.\n</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>const font = new FontFace(\"my-font\", \"url(my-font.woff)\", {\n  style: \"italic\",\n  weight: \"400\",\n  stretch: \"condensed\",\n});\n</code></pre></div>\n<div class=\"notecard note\">\n  <p>\n    <strong>Note:</strong> As with <code>@font-face</code>, some descriptors represent the expected data in the font data and are used for font matching, while others actually set/define properties of the generated font face.\n    For example, setting the <code>style</code> to \"italic\" indicates that the file contains italic fonts; it is up to the author to specify a file for which this is true.\n  </p>\n</div>\n<p>\n  Font faces with a <em>binary source</em> are automatically loaded if the font definition is valid and the font data can be loaded — <a href=\"/en-US/docs/Web/API/FontFace/status\"><code>FontFace.status</code></a> is set to <code>loaded</code> on success and <code>failed</code> otherwise.\n  Font faces with a URL source are validated but not automatically loaded — <a href=\"/en-US/docs/Web/API/FontFace/status\"><code>FontFace.status</code></a> is set <code>unloaded</code> if the font face definition is valid and <code>failed</code> otherwise.\n</p>"}},{"type":"prose","value":{"id":"adding_a_font_to_a_document_or_worker","title":"Adding a font to a document or worker","isH3":true,"content":"<p>Font faces are usually added to the document or worker <a href=\"/en-US/docs/Web/API/FontFaceSet\"><code>FontFaceSet</code></a> to allow the user agent to automatically load the font when needed, and <em>must</em> be added in order for the font to be used for rendering text.</p>\n<p>The code below shows a font face being added to the document.</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>// Define a FontFace\nconst font = new FontFace(\"my-font\", \"url(my-font.woff)\", {\n  style: \"italic\",\n  weight: \"400\",\n  stretch: \"condensed\",\n});\n\n// Add to the document.fonts (FontFaceSet)\ndocument.fonts.add(font);\n</code></pre></div>"}},{"type":"prose","value":{"id":"loading_a_font","title":"Loading a font","isH3":true,"content":"<p>\n  A font face can be loaded manually by calling <a href=\"/en-US/docs/Web/API/FontFace/load\"><code>FontFace.load()</code></a>, or by calling <a href=\"/en-US/docs/Web/API/FontFaceSet/load\"><code>FontFaceSet.load()</code></a> if the font face has been added to the <code>FontFaceSet</code>.\n  Note that attempting to load an already-loaded font has no effect.\n</p>\n<p>The code below shows how to define a font face, add it to the document fonts, and then initiate a font load.</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>// Define a FontFace\nconst font = new FontFace(\"my-font\", \"url(my-font.woff)\");\n\n// Add to the document.fonts (FontFaceSet)\ndocument.fonts.add(font);\n\n// Load the font\nfont.load();\n\n// Wait until the fonts are all loaded\ndocument.fonts.ready.then(() =&gt; {\n  // Use the font to render text (for example, in a canvas)\n});\n</code></pre></div>\n<p>\n  Note that the <code>font.load()</code> returns a promise, so we could have handled the completion of font loading by chaining <code>then</code> afterwards.\n  Using <a href=\"/en-US/docs/Web/API/FontFaceSet/ready\"><code>document.fonts.ready</code></a> can be better in some circumstances, as it is only called when all fonts in the document have been resolved and layout is complete.\n</p>"}},{"type":"prose","value":{"id":"interfaces","title":"Interfaces","isH3":false,"content":"<dl>\n  <dt id=\"fontface\"><a href=\"/en-US/docs/Web/API/FontFace\"><code>FontFace</code></a></dt>\n  <dd>\n    <p>Represents a single usable font face.</p>\n  </dd>\n  <dt id=\"fontfaceset\"><a href=\"/en-US/docs/Web/API/FontFaceSet\"><code>FontFaceSet</code></a></dt>\n  <dd>\n    <p>An interface loading font faces and checking their download statuses.</p>\n  </dd>\n  <dt id=\"fontfacesetloadevent\"><a href=\"/en-US/docs/Web/API/FontFaceSetLoadEvent\"><code>FontFaceSetLoadEvent</code></a></dt>\n  <dd>\n    <p>Fired whenever a <a href=\"/en-US/docs/Web/API/FontFaceSet\"><code>FontFaceSet</code></a> loads.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":""}},{"type":"prose","value":{"id":"basic_font_loading","title":"Basic font loading","isH3":true,"content":"<p>\n  This is a very simple example that shows a font being loaded from Google Fonts and used to draw text to a canvas.\n  The example also logs the <code>status</code> immediately after creation and after loading.\n</p>\n<h4 id=\"html\">HTML</h4>\n<p>This code defines a canvas for drawing to and a textarea for logging.</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">html</span></div><pre class=\"brush: html notranslate\"><code>&lt;canvas id=\"js-canvas\"&gt;&lt;/canvas&gt;\n&lt;textarea id=\"log\" rows=\"3\" cols=\"100\"&gt;&lt;/textarea&gt;\n</code></pre></div>\n<h4 id=\"javascript\">JavaScript</h4>\n<p>First we get the element to which we will log, and the canvas that will be used to render text in the downloaded font.</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>const log = document.getElementById(\"log\");\n\nconst canvas = document.getElementById(\"js-canvas\");\ncanvas.width = 650;\ncanvas.height = 75;\n</code></pre></div>\n<p>\n  Next we define a <code>FontFace</code> that has a URL source that is a Google Font and add it to <code>document.fonts</code>.\n  We then log the font status, which should be <code>unloaded</code>.\n</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>const bitterFontFace = new FontFace(\n  \"FontFamily Bitter\",\n  \"url(https://fonts.gstatic.com/s/bitter/v7/HEpP8tJXlWaYHimsnXgfCOvvDin1pK8aKteLpeZ5c0A.woff2)\",\n);\ndocument.fonts.add(bitterFontFace);\nlog.textContent += `Bitter font: ${bitterFontFace.status}\\n`; // &gt; Bitter font: unloaded\n</code></pre></div>\n<p>\n  Then we call the <a href=\"/en-US/docs/Web/API/FontFace/load\"><code>FontFace.load()</code></a> method to load the font face, and wait on the returned promise.\n  Once the promise resolves we log the loaded status (which should be <code>loaded</code>) and draw text in the loaded font to the canvas.\n</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>bitterFontFace.load().then(\n  () =&gt; {\n    log.textContent += `Bitter font: ${bitterFontFace.status}\\n`; // &gt; Bitter font: loaded\n\n    const ctx = canvas.getContext(\"2d\");\n    ctx.font = '36px \"FontFamily Bitter\"';\n    ctx.fillText(\"Bitter font loaded\", 20, 50);\n  },\n  (err) =&gt; {\n    console.error(err);\n  },\n);\n</code></pre></div>\n<p>Note that we could also have waited on the promise returned by the <a href=\"/en-US/docs/Web/API/FontFace/loaded\"><code>FontFace.loaded</code></a> property, or on <a href=\"/en-US/docs/Web/API/FontFaceSet/ready\"><code>FontFaceSet.ready</code></a>.</p>\n<h4 id=\"result\">Result</h4>\n<p>\n  The result is shown below.\n  It should show the name of the font drawn on the canvas in the downloaded font, and a log showing the load status before and after loading.\n</p><div class=\"code-example\"><div class=\"example-header\"></div><iframe class=\"sample-code-frame\" title=\"Basic font loading sample\" id=\"frame_basic_font_loading\" width=\"700\" height=\"180\" src=\"about:blank\" data-live-path=\"/en-US/docs/Web/API/CSS_Font_Loading_API\" data-live-id=\"basic_font_loading\" sandbox=\"allow-same-origin allow-scripts\" loading=\"lazy\"></iframe></div>"}},{"type":"prose","value":{"id":"font_loading_with_events","title":"Font loading with events","isH3":true,"content":"<p>\n  This example is similar to the previous one, except that it uses <a href=\"/en-US/docs/Web/API/FontFaceSet/load\"><code>FontFaceSet.load()</code></a> to load the font.\n  It also demonstrates how to listen for font loading events.\n</p>\n<h4 id=\"html_2\">HTML</h4>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">html</span></div><pre class=\"brush: html notranslate\"><code>&lt;canvas id=\"js-canvas\"&gt;&lt;/canvas&gt;\n&lt;textarea id=\"log\" rows=\"25\" cols=\"100\"&gt;&lt;/textarea&gt;\n</code></pre></div>\n<h4 id=\"javascript_2\">JavaScript</h4>\n<p>The code below defines a canvas context for drawing text, defines a font face, and adds it to the document font face set.</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>const log = document.getElementById(\"log\");\n\nconst canvas = document.getElementById(\"js-canvas\");\ncanvas.width = 650;\ncanvas.height = 75;\nconst ctx = canvas.getContext(\"2d\");\n\nconst oxygenFontFace = new FontFace(\n  \"FontFamily Oxygen\",\n  \"url(https://fonts.gstatic.com/s/oxygen/v5/qBSyz106i5ud7wkBU-FrPevvDin1pK8aKteLpeZ5c0A.woff2)\",\n);\ndocument.fonts.add(oxygenFontFace);\nlog.textContent += `Oxygen status: ${oxygenFontFace.status}\\n`;\n</code></pre></div>\n<p>\n  Next we use <code>load()</code> on the font face set to load the font, specifying which of the fonts to load.\n  The method returns a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>.\n  If the promise is resolved we use the font to draw some text.\n  If it is rejected the error is logged.\n</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>document.fonts.load(\"36px FontFamily Oxygen\").then(\n  (fonts) =&gt; {\n    log.textContent += `Bitter font: ${fonts}\\n`; // &gt; Oxygen font: loaded\n    log.textContent += `Bitter font: ${oxygenFontFace.status}\\n`; // &gt; Oxygen font: loaded\n    ctx.font = '36px \"FontFamily Oxygen\"';\n    ctx.fillText(\"Oxygen font loaded\", 20, 50);\n  },\n  (err) =&gt; {\n    console.error(err);\n  },\n);\n</code></pre></div>\n<p>\n  Instead of waiting on a promise we might instead use events to track the font loading operation.\n  The code below listens for the <code>loading</code> and <code>loadingerror</code> events and logs the number of font faces for each case.\n  In the <code>loadingdone</code> event listener we additionally iterate through the font faces and log the family names.\n</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>document.fonts.addEventListener(\"loading\", (event) =&gt; {\n  log.textContent += `loading_event: ${event.fontfaces.length}\\n`;\n});\ndocument.fonts.addEventListener(\"loadingerror\", (event) =&gt; {\n  log.textContent += `loadingerror_event: ${event.fontfaces.length}\\n`;\n});\ndocument.fonts.addEventListener(\"loadingdone\", (event) =&gt; {\n  log.textContent += `loadingdone_event: ${event.fontfaces.length}\\n`;\n  event.fontfaces.forEach((value) =&gt; {\n    log.textContent += `  fontface: ${value.family}\\n`;\n  });\n});\n</code></pre></div>\n<p>\n  The last bit of code demonstrates how you can monitor the completion of font loading using the promise returned by <a href=\"/en-US/docs/Web/API/FontFaceSet/ready\"><code>FontFaceSet.ready</code></a>.\n  Unlike the other mechanisms this returns when all fonts defined in the document have been downloaded and layout is complete.\n</p>\n<p>When the promise resolves we iterate the values in the document's font faces.</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>document.fonts.ready.then(function () {\n  log.textContent += `\\nFontFaces in document: ${document.fonts.size}.\\n`;\n\n  for (const fontFace of document.fonts.values()) {\n    log.textContent += \"FontFace:\\n\";\n    for (const property in fontFace) {\n      log.textContent += `  ${property}: ${fontFace[property]}\\n`;\n    }\n  }\n});\n</code></pre></div>\n<h4 id=\"result_2\">Result</h4>\n<p>\n  The output below shows the text drawn in \"Oxygen\" font.\n  This also shows logging from the events and when the promise returned by <code>document.fonts.ready</code> resolves.\n</p><div class=\"code-example\"><div class=\"example-header\"></div><iframe class=\"sample-code-frame\" title=\"Font loading with events sample\" id=\"frame_font_loading_with_events\" width=\"700\" height=\"520\" src=\"about:blank\" data-live-path=\"/en-US/docs/Web/API/CSS_Font_Loading_API\" data-live-id=\"font_loading_with_events\" sandbox=\"allow-same-origin allow-scripts\" loading=\"lazy\"></iframe></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://drafts.csswg.org/css-font-loading/#fontface-interface","title":"CSS Font Loading Module Level 3"}],"query":"api.FontFace"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.FontFace"}}],"toc":[{"text":"Concepts and usage","id":"concepts_and_usage"},{"text":"Interfaces","id":"interfaces"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"}],"summary":"The CSS Font Loading API provides events and interfaces for dynamically loading font resources.","popularity":0.0066,"modified":"2020-12-13T22:13:07.232Z","other_translations":[],"pageType":"web-api-overview","source":{"folder":"en-us/web/api/css_font_loading_api","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/api/css_font_loading_api/index.md","last_commit_url":"https://github.com/mdn/content/commit/null","filename":"index.md"},"short_title":"CSS Font Loading API","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/CSS_Font_Loading_API","title":"CSS Font Loading API"}],"pageTitle":"CSS Font Loading API - Web APIs | MDN","noIndexing":false},"url":"/en-US/docs/Web/API/CSS_Font_Loading_API"}