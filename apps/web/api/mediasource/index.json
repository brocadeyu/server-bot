{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{"macros":[{"id":"macro0","fixable":false,"suggestion":null,"explanation":"/en-US/docs/Web/API/MediaSource/sourceclose_event does not exist","name":"MacroBrokenLinkError","error":{},"errorStack":"Error: /en-US/docs/Web/API/MediaSource/sourceclose_event does not exist\n    at Object.recordNonFatalError (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/render.js:90:23)\n    at Object.smartLink (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/api/web.js:130:29)\n    at eval (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/DOMxRef.ejs\":60:18)\n    at DOMxRef (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:703:17)\n    at /Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:260:40\n    at new Promise (<anonymous>)\n    at tryHandleCache (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:258:14)\n    at exports.renderFile (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:491:10)\n    at Templates.render (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/templates.js:94:40)\n    at render (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/render.js:192:56)","offset":7,"line":80,"column":7,"macroName":"domxref","sourceContext":"  | <h2>Events</h2>\n  | <dl>\n> |   <dt>{{domxref(\"MediaSource.sourceclose_event\", \"sourceclose\")}}</dt>\n          ^\n  |   <dd>\n  |     <p>Fired when the <code>MediaSource</code> instance is not attached to a media element anymore.</p>","fatal":false,"macroSource":"{{domxref(\"MediaSource.sourceclose_event\", \"sourceclose\")}}","filepath":"/Users/yjb/Project/content/files/en-us/web/api/mediasource/index.md"},{"id":"macro1","fixable":false,"suggestion":null,"explanation":"/en-US/docs/Web/API/MediaSource/sourceended_event does not exist","name":"MacroBrokenLinkError","error":{},"errorStack":"Error: /en-US/docs/Web/API/MediaSource/sourceended_event does not exist\n    at Object.recordNonFatalError (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/render.js:90:23)\n    at Object.smartLink (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/api/web.js:130:29)\n    at eval (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/DOMxRef.ejs\":60:18)\n    at DOMxRef (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:703:17)\n    at /Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:260:40\n    at new Promise (<anonymous>)\n    at tryHandleCache (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:258:14)\n    at exports.renderFile (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:491:10)\n    at Templates.render (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/templates.js:94:40)\n    at render (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/render.js:192:56)","offset":7,"line":84,"column":7,"macroName":"domxref","sourceContext":"  |     <p>Fired when the <code>MediaSource</code> instance is not attached to a media element anymore.</p>\n  |   </dd>\n> |   <dt>{{domxref(\"MediaSource.sourceended_event\", \"sourceended\")}}</dt>\n          ^\n  |   <dd>\n  |     <p>Fired when the <code>MediaSource</code> instance is still attached to a media element, but {{domxref(\"MediaSource.endOfStream\", \"endOfStream()\")}} has been called.</p>","fatal":false,"macroSource":"{{domxref(\"MediaSource.sourceended_event\", \"sourceended\")}}","filepath":"/Users/yjb/Project/content/files/en-us/web/api/mediasource/index.md"},{"id":"macro2","fixable":false,"suggestion":null,"explanation":"/en-US/docs/Web/API/MediaSource/sourceopen_event does not exist","name":"MacroBrokenLinkError","error":{},"errorStack":"Error: /en-US/docs/Web/API/MediaSource/sourceopen_event does not exist\n    at Object.recordNonFatalError (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/render.js:90:23)\n    at Object.smartLink (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/api/web.js:130:29)\n    at eval (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/DOMxRef.ejs\":60:18)\n    at DOMxRef (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:703:17)\n    at /Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:260:40\n    at new Promise (<anonymous>)\n    at tryHandleCache (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:258:14)\n    at exports.renderFile (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:491:10)\n    at Templates.render (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/templates.js:94:40)\n    at render (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/render.js:192:56)","offset":7,"line":88,"column":7,"macroName":"domxref","sourceContext":"  |     <p>Fired when the <code>MediaSource</code> instance is still attached to a media element, but {{domxref(\"MediaSource.endOfStream\", \"endOfStream()\")}} has been called.</p>\n  |   </dd>\n> |   <dt>{{domxref(\"MediaSource.sourceopen_event\", \"sourceopen\")}}</dt>\n          ^\n  |   <dd>\n  |     <p>Fired when the <code>MediaSource</code> instance has been opened by a media element and is ready for data to be appended to the {{domxref(\"SourceBuffer\")}} objects in {{domxref(\"MediaSource.sourceBuffers\", \"sourceBuffers\")}}.</p>","fatal":false,"macroSource":"{{domxref(\"MediaSource.sourceopen_event\", \"sourceopen\")}}","filepath":"/Users/yjb/Project/content/files/en-us/web/api/mediasource/index.md"}]},"title":"MediaSource","mdn_url":"/en-US/docs/Web/API/MediaSource","locale":"en-US","native":"English (US)","browserCompat":["api.MediaSource"],"baseline":{"baseline":false,"support":{"chrome":"31","chrome_android":"31","edge":"12","firefox":"42","firefox_android":"42","safari":"8"}},"sidebarHTML":"<ol><li class=\"section\"><a href=\"/en-US/docs/Web/API/Media_Source_Extensions_API\">Media Source Extensions API</a><abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></li><li class=\"section\"><em><a href=\"/en-US/docs/Web/API/MediaSource\" aria-current=\"page\"><code>MediaSource</code></a></em></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaSource/MediaSource\"><code>MediaSource()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Static properties</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaSource/canConstructInDedicatedWorker_static\"><code>canConstructInDedicatedWorker</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Instance properties</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaSource/activeSourceBuffers\"><code>activeSourceBuffers</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaSource/duration\"><code>duration</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaSource/handle\"><code>handle</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaSource/readyState\"><code>readyState</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaSource/sourceBuffers\"><code>sourceBuffers</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Static methods</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaSource/isTypeSupported_static\"><code>isTypeSupported()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Instance methods</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaSource/addSourceBuffer\"><code>addSourceBuffer()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaSource/clearLiveSeekableRange\"><code>clearLiveSeekableRange()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaSource/endOfStream\"><code>endOfStream()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaSource/removeSourceBuffer\"><code>removeSourceBuffer()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaSource/setLiveSeekableRange\"><code>setLiveSeekableRange()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Inheritance</summary><ol><li><a href=\"/en-US/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Media Source Extensions</summary><ol><li><a href=\"/en-US/docs/Web/API/AudioTrack/sourceBuffer\"><code>AudioTrack.sourceBuffer</code></a></li><li><a href=\"/en-US/docs/Web/API/HTMLMediaElement/buffered\"><code>HTMLMediaElement.buffered</code></a></li><li><a href=\"/en-US/docs/Web/API/HTMLMediaElement/seekable\"><code>HTMLMediaElement.seekable</code></a></li><li><a href=\"/en-US/docs/Web/API/HTMLMediaElement/srcObject\"><code>HTMLMediaElement.srcObject</code></a></li><li><a href=\"/en-US/docs/Web/API/HTMLVideoElement/getVideoPlaybackQuality\"><code>HTMLVideoElement.getVideoPlaybackQuality()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaSourceHandle\"><code>MediaSourceHandle</code></a></li><li><a href=\"/en-US/docs/Web/API/SourceBuffer\"><code>SourceBuffer</code></a></li><li><a href=\"/en-US/docs/Web/API/SourceBufferList\"><code>SourceBufferList</code></a></li><li><a href=\"/en-US/docs/Web/API/TextTrack/sourceBuffer\"><code>TextTrack.sourceBuffer</code></a></li><li><a href=\"/en-US/docs/Web/API/VideoPlaybackQuality\"><code>VideoPlaybackQuality</code></a></li><li><a href=\"/en-US/docs/Web/API/VideoTrack/sourceBuffer\"><code>VideoTrack.sourceBuffer</code></a></li></ol></details></li></ol>","sidebarMacro":"APIRef","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard note\">\n  <p><strong>Note:</strong> This feature is available in <a href=\"/en-US/docs/Web/API/DedicatedWorkerGlobalScope\">Dedicated Web Workers</a>.</p>\n</div>\n<p>The <strong><code>MediaSource</code></strong> interface of the <a href=\"/en-US/docs/Web/API/Media_Source_Extensions_API\" title=\"Media Source Extensions API\">Media Source Extensions API</a> represents a source of media data for an <a href=\"/en-US/docs/Web/API/HTMLMediaElement\"><code>HTMLMediaElement</code></a> object. A <code>MediaSource</code> object can be attached to a <a href=\"/en-US/docs/Web/API/HTMLMediaElement\"><code>HTMLMediaElement</code></a> to be played in the user agent.</p><svg viewBox=\"-1 -1 650 42\" preserveAspectRatio=\"xMinYMin meet\">\n  <a style=\"text-decoration: none;\" href=\"/en-US/docs/Web/API/EventTarget\">\n    <rect x=\"0\" y=\"0\" width=\"88\" height=\"25\" fill=\"#fff\" stroke=\"#D4DDE4\" stroke-width=\"2px\"></rect>\n    <text x=\"44\" y=\"16\" font-size=\"10px\" fill=\"#4D4E53\" text-anchor=\"middle\">\n      EventTarget\n    </text>\n  </a>\n  <line x1=\"88\" y1=\"14\" x2=\"118\" y2=\"14\" stroke=\"#D4DDE4\"></line>\n  <polyline points=\"88,14 98,9 98,19 88,14\" stroke=\"#D4DDE4\" fill=\"#fff\"></polyline>\n  <a style=\"text-decoration: none;\" href=\"/en-US/docs/Web/API/MediaSource\" aria-current=\"page\">\n    <rect x=\"118\" y=\"0\" width=\"88\" height=\"25\" fill=\"#F4F7F8\" stroke=\"#D4DDE4\" stroke-width=\"2px\"></rect>\n    <text x=\"162\" y=\"16\" font-size=\"10px\" fill=\"#4D4E53\" text-anchor=\"middle\">\n      MediaSource\n    </text>\n  </a></svg>"}},{"type":"prose","value":{"id":"constructor","title":"Constructor","isH3":false,"content":"<dl>\n  <dt id=\"mediasource\"><a href=\"/en-US/docs/Web/API/MediaSource/MediaSource\" title=\"MediaSource()\"><code>MediaSource()</code></a></dt>\n  <dd>\n    <p>Constructs and returns a new <code>MediaSource</code> object with no associated source buffers.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"instance_properties","title":"Instance properties","isH3":false,"content":"<dl>\n  <dt id=\"mediasource.activesourcebuffers\"><a href=\"/en-US/docs/Web/API/MediaSource/activeSourceBuffers\"><code>MediaSource.activeSourceBuffers</code></a> <span class=\"badge inline readonly\" title=\"This value may not be changed.\">Read only </span></dt>\n  <dd>\n    <p>Returns a <a href=\"/en-US/docs/Web/API/SourceBufferList\"><code>SourceBufferList</code></a> object containing a subset of the <a href=\"/en-US/docs/Web/API/SourceBuffer\"><code>SourceBuffer</code></a> objects contained within <a href=\"/en-US/docs/Web/API/MediaSource/sourceBuffers\"><code>MediaSource.sourceBuffers</code></a> — the list of objects providing the selected video track, enabled audio tracks, and shown/hidden text tracks.</p>\n  </dd>\n  <dt id=\"mediasource.duration\"><a href=\"/en-US/docs/Web/API/MediaSource/duration\"><code>MediaSource.duration</code></a></dt>\n  <dd>\n    <p>Gets and sets the duration of the current media being presented.</p>\n  </dd>\n  <dt id=\"mediasource.handle\"><a href=\"/en-US/docs/Web/API/MediaSource/handle\"><code>MediaSource.handle</code></a> <span class=\"badge inline readonly\" title=\"This value may not be changed.\">Read only </span></dt>\n  <dd>\n    <p>Inside a dedicated worker, returns a <a href=\"/en-US/docs/Web/API/MediaSourceHandle\"><code>MediaSourceHandle</code></a> object, a proxy for the <code>MediaSource</code> that can be transferred from the worker back to the main thread and attached to a media element via its <a href=\"/en-US/docs/Web/API/HTMLMediaElement/srcObject\"><code>HTMLMediaElement.srcObject</code></a> property.</p>\n  </dd>\n  <dt id=\"mediasource.readystate\"><a href=\"/en-US/docs/Web/API/MediaSource/readyState\"><code>MediaSource.readyState</code></a> <span class=\"badge inline readonly\" title=\"This value may not be changed.\">Read only </span></dt>\n  <dd>\n    <p>Returns an enum representing the state of the current <code>MediaSource</code>, whether it is not currently attached to a media element (<code>closed</code>), attached and ready to receive <a href=\"/en-US/docs/Web/API/SourceBuffer\"><code>SourceBuffer</code></a> objects (<code>open</code>), or attached but the stream has been ended via <a href=\"/en-US/docs/Web/API/MediaSource/endOfStream\"><code>MediaSource.endOfStream()</code></a> (<code>ended</code>.)</p>\n  </dd>\n  <dt id=\"mediasource.sourcebuffers\"><a href=\"/en-US/docs/Web/API/MediaSource/sourceBuffers\"><code>MediaSource.sourceBuffers</code></a> <span class=\"badge inline readonly\" title=\"This value may not be changed.\">Read only </span></dt>\n  <dd>\n    <p>Returns a <a href=\"/en-US/docs/Web/API/SourceBufferList\"><code>SourceBufferList</code></a> object containing the list of <a href=\"/en-US/docs/Web/API/SourceBuffer\"><code>SourceBuffer</code></a> objects associated with this <code>MediaSource</code>.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"static_properties","title":"Static properties","isH3":false,"content":"<dl>\n  <dt id=\"mediasource.canconstructindedicatedworker\"><a href=\"/en-US/docs/Web/API/MediaSource/canConstructInDedicatedWorker_static\" title=\"MediaSource.canConstructInDedicatedWorker\"><code>MediaSource.canConstructInDedicatedWorker</code></a> <span class=\"badge inline readonly\" title=\"This value may not be changed.\">Read only </span></dt>\n  <dd>\n    <p>A boolean; returns <code>true</code> if <code>MediaSource</code> worker support is implemented, providing a low-latency feature detection mechanism.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"instance_methods","title":"Instance methods","isH3":false,"content":"<p><em>Inherits methods from its parent interface, <a href=\"/en-US/docs/Web/API/EventTarget\"><code>EventTarget</code></a>.</em></p>\n<dl>\n  <dt id=\"mediasource.addsourcebuffer\"><a href=\"/en-US/docs/Web/API/MediaSource/addSourceBuffer\"><code>MediaSource.addSourceBuffer()</code></a></dt>\n  <dd>\n    <p>Creates a new <a href=\"/en-US/docs/Web/API/SourceBuffer\"><code>SourceBuffer</code></a> of the given MIME type and adds it to the <a href=\"/en-US/docs/Web/API/MediaSource/sourceBuffers\"><code>MediaSource.sourceBuffers</code></a> list.</p>\n  </dd>\n  <dt id=\"mediasource.clearliveseekablerange\"><a href=\"/en-US/docs/Web/API/MediaSource/clearLiveSeekableRange\"><code>MediaSource.clearLiveSeekableRange()</code></a></dt>\n  <dd>\n    <p>Clears a seekable range previously set with a call to <code>setLiveSeekableRange()</code>.</p>\n  </dd>\n  <dt id=\"mediasource.endofstream\"><a href=\"/en-US/docs/Web/API/MediaSource/endOfStream\"><code>MediaSource.endOfStream()</code></a></dt>\n  <dd>\n    <p>Signals the end of the stream.</p>\n  </dd>\n  <dt id=\"mediasource.removesourcebuffer\"><a href=\"/en-US/docs/Web/API/MediaSource/removeSourceBuffer\"><code>MediaSource.removeSourceBuffer()</code></a></dt>\n  <dd>\n    <p>Removes the given <a href=\"/en-US/docs/Web/API/SourceBuffer\"><code>SourceBuffer</code></a> from the <a href=\"/en-US/docs/Web/API/MediaSource/sourceBuffers\"><code>MediaSource.sourceBuffers</code></a> list.</p>\n  </dd>\n  <dt id=\"mediasource.setliveseekablerange\"><a href=\"/en-US/docs/Web/API/MediaSource/setLiveSeekableRange\"><code>MediaSource.setLiveSeekableRange()</code></a></dt>\n  <dd>\n    <p>Sets the range that the user can seek to in the media element.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"static_methods","title":"Static methods","isH3":false,"content":"<dl>\n  <dt id=\"mediasource.istypesupported\"><a href=\"/en-US/docs/Web/API/MediaSource/isTypeSupported_static\" title=\"MediaSource.isTypeSupported()\"><code>MediaSource.isTypeSupported()</code></a></dt>\n  <dd>\n    <p>Returns a boolean value indicating if the given MIME type is supported by the current user agent — this is, if it can successfully create <a href=\"/en-US/docs/Web/API/SourceBuffer\"><code>SourceBuffer</code></a> objects for that MIME type.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"events","title":"Events","isH3":false,"content":"<dl>\n  <dt id=\"sourceclose\"><a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\" data-flaw-src=\"{{domxref(&quot;MediaSource.sourceclose_event&quot;, &quot;sourceclose&quot;)}}\"><code>sourceclose</code></a></dt>\n  <dd>\n    <p>Fired when the <code>MediaSource</code> instance is not attached to a media element anymore.</p>\n  </dd>\n  <dt id=\"sourceended\"><a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\" data-flaw-src=\"{{domxref(&quot;MediaSource.sourceended_event&quot;, &quot;sourceended&quot;)}}\"><code>sourceended</code></a></dt>\n  <dd>\n    <p>Fired when the <code>MediaSource</code> instance is still attached to a media element, but <a href=\"/en-US/docs/Web/API/MediaSource/endOfStream\" title=\"endOfStream()\"><code>endOfStream()</code></a> has been called.</p>\n  </dd>\n  <dt id=\"sourceopen\"><a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\" data-flaw-src=\"{{domxref(&quot;MediaSource.sourceopen_event&quot;, &quot;sourceopen&quot;)}}\"><code>sourceopen</code></a></dt>\n  <dd>\n    <p>Fired when the <code>MediaSource</code> instance has been opened by a media element and is ready for data to be appended to the <a href=\"/en-US/docs/Web/API/SourceBuffer\"><code>SourceBuffer</code></a> objects in <a href=\"/en-US/docs/Web/API/MediaSource/sourceBuffers\" title=\"sourceBuffers\"><code>sourceBuffers</code></a>.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":""}},{"type":"prose","value":{"id":"complete_basic_example","title":"Complete basic example","isH3":true,"content":"<p>The following simple example loads a video with <a href=\"/en-US/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a>, playing it as soon as it can. This example was written by Nick Desaulniers and can be <a href=\"https://nickdesaulniers.github.io/netfix/demo/bufferAll.html\" class=\"external\" target=\"_blank\">viewed live here</a> (you can also <a href=\"https://github.com/nickdesaulniers/netfix/blob/gh-pages/demo/bufferAll.html\" class=\"external\" target=\"_blank\">download the source</a> for further investigation). The function <code>getMediaSource()</code>, which is not defined here, returns a <code>MediaSource</code>.</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>const video = document.querySelector(\"video\");\n\nconst assetURL = \"frag_bunny.mp4\";\n// Need to be specific for Blink regarding codecs\n// ./mp4info frag_bunny.mp4 | grep Codec\nconst mimeCodec = 'video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"';\nlet mediaSource;\n\nif (\"MediaSource\" in window &amp;&amp; MediaSource.isTypeSupported(mimeCodec)) {\n  mediaSource = getMediaSource();\n  console.log(mediaSource.readyState); // closed\n  video.src = URL.createObjectURL(mediaSource);\n  mediaSource.addEventListener(\"sourceopen\", sourceOpen);\n} else {\n  console.error(\"Unsupported MIME type or codec: \", mimeCodec);\n}\n\nfunction sourceOpen() {\n  console.log(this.readyState); // open\n  const sourceBuffer = mediaSource.addSourceBuffer(mimeCodec);\n  fetchAB(assetURL, (buf) =&gt; {\n    sourceBuffer.addEventListener(\"updateend\", () =&gt; {\n      mediaSource.endOfStream();\n      video.play();\n      console.log(mediaSource.readyState); // ended\n    });\n    sourceBuffer.appendBuffer(buf);\n  });\n}\n\nfunction fetchAB(url, cb) {\n  console.log(url);\n  const xhr = new XMLHttpRequest();\n  xhr.open(\"get\", url);\n  xhr.responseType = \"arraybuffer\";\n  xhr.onload = () =&gt; {\n    cb(xhr.response);\n  };\n  xhr.send();\n}\n</code></pre></div>"}},{"type":"prose","value":{"id":"constructing_a_mediasource_in_a_dedicated_worker_and_passing_it_to_the_main_thread","title":"Constructing a <code>MediaSource</code> in a dedicated worker and passing it to the main thread","isH3":true,"content":"<p>The <a href=\"/en-US/docs/Web/API/MediaSource/handle\" title=\"handle\"><code>handle</code></a> property can be accessed inside a dedicated worker and the resulting <a href=\"/en-US/docs/Web/API/MediaSourceHandle\"><code>MediaSourceHandle</code></a> object is then transferred over to the thread that created the worker (in this case the main thread) via a <a href=\"/en-US/docs/Web/API/DedicatedWorkerGlobalScope/postMessage\" title=\"postMessage()\"><code>postMessage()</code></a> call:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>// Inside dedicated worker\nlet mediaSource = new MediaSource();\nlet handle = mediaSource.handle;\n// Transfer the handle to the context that created the worker\npostMessage({ arg: handle }, [handle]);\n\nmediaSource.addEventListener(\"sourceopen\", () =&gt; {\n  // Await sourceopen on MediaSource before creating SourceBuffers\n  // and populating them with fetched media — MediaSource won't\n  // accept creation of SourceBuffers until it is attached to the\n  // HTMLMediaElement and its readyState is \"open\"\n});\n</code></pre></div>\n<p>Over in the main thread, we receive the handle via a <a href=\"/en-US/docs/Web/API/Worker/message_event\" title=\"message\"><code>message</code></a> event handler, attach it to a <a href=\"/en-US/docs/Web/HTML/Element/video\"><code>&lt;video&gt;</code></a> via its <a href=\"/en-US/docs/Web/API/HTMLMediaElement/srcObject\"><code>HTMLMediaElement.srcObject</code></a> property, and <a href=\"/en-US/docs/Web/API/HTMLMediaElement/play\" title=\"play\"><code>play</code></a> the video:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>worker.addEventListener(\"message\", (msg) =&gt; {\n  let mediaSourceHandle = msg.data.arg;\n  video.srcObject = mediaSourceHandle;\n  video.play();\n});\n</code></pre></div>\n<div class=\"notecard note\">\n  <p><strong>Note:</strong> <a href=\"/en-US/docs/Web/API/MediaSourceHandle\"><code>MediaSourceHandle</code></a>s cannot be successfully transferred into or via a shared worker or service worker.</p>\n</div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/media-source/#mediasource","title":"Media Source Extensions™"}],"query":"api.MediaSource"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.MediaSource"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/SourceBuffer\"><code>SourceBuffer</code></a></li>\n  <li><a href=\"/en-US/docs/Web/API/SourceBufferList\"><code>SourceBufferList</code></a></li>\n</ul>"}}],"toc":[{"text":"Constructor","id":"constructor"},{"text":"Instance properties","id":"instance_properties"},{"text":"Static properties","id":"static_properties"},{"text":"Instance methods","id":"instance_methods"},{"text":"Static methods","id":"static_methods"},{"text":"Events","id":"events"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The MediaSource interface of the Media Source Extensions API represents a source of media data for an HTMLMediaElement object. A MediaSource object can be attached to a HTMLMediaElement to be played in the user agent.","popularity":0.0115,"modified":"2020-10-15T21:24:31.806Z","other_translations":[],"pageType":"web-api-interface","source":{"folder":"en-us/web/api/mediasource","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/api/mediasource/index.md","last_commit_url":"https://github.com/mdn/content/commit/null","filename":"index.md"},"short_title":"MediaSource","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/MediaSource","title":"MediaSource"}],"pageTitle":"MediaSource - Web APIs | MDN","noIndexing":false},"url":"/en-US/docs/Web/API/MediaSource"}