{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"MediaRecorder","mdn_url":"/en-US/docs/Web/API/MediaRecorder","locale":"en-US","native":"English (US)","browserCompat":["api.MediaRecorder"],"sidebarHTML":"<ol><li class=\"section\"><a href=\"/en-US/docs/Web/API/MediaStream_Recording_API\">MediaStream Recording API</a></li><li class=\"section\"><em><a href=\"/en-US/docs/Web/API/MediaRecorder\" aria-current=\"page\"><code>MediaRecorder</code></a></em></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaRecorder/MediaRecorder\"><code>MediaRecorder()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Instance properties</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaRecorder/audioBitrateMode\"><code>audioBitrateMode</code></a><abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/audioBitsPerSecond\"><code>audioBitsPerSecond</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/mimeType\"><code>mimeType</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/state\"><code>state</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/stream\"><code>stream</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/videoBitsPerSecond\"><code>videoBitsPerSecond</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Static methods</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaRecorder/isTypeSupported_static\"><code>isTypeSupported()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Instance methods</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaRecorder/pause\"><code>pause()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/requestData\"><code>requestData()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/resume\"><code>resume()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/start\"><code>start()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/stop\"><code>stop()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Events</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaRecorder/dataavailable_event\"><code>dataavailable</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/error_event\"><code>error</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/pause_event\"><code>pause</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/resume_event\"><code>resume</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/start_event\"><code>start</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorder/stop_event\"><code>stop</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Inheritance</summary><ol><li><a href=\"/en-US/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for MediaStream Recording</summary><ol><li><a href=\"/en-US/docs/Web/API/BlobEvent\"><code>BlobEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaRecorderErrorEvent\"><code>MediaRecorderErrorEvent</code></a><abbr class=\"icon icon-nonstandard\" title=\"Non-standard. Check cross-browser support before using.\">\n    <span class=\"visually-hidden\">Non-standard</span>\n</abbr><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li></ol></details></li></ol>","sidebarMacro":"APIRef","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <strong><code>MediaRecorder</code></strong> interface of the <a href=\"/en-US/docs/Web/API/MediaStream_Recording_API\">MediaStream Recording API</a> provides functionality to easily record media. It is created using the <a href=\"/en-US/docs/Web/API/MediaRecorder/MediaRecorder\" title=\"MediaRecorder()\"><code>MediaRecorder()</code></a> constructor.</p><svg viewBox=\"-1 -1 650 42\" preserveAspectRatio=\"xMinYMin meet\">\n  <a style=\"text-decoration: none;\" href=\"/en-US/docs/Web/API/EventTarget\">\n    <rect x=\"0\" y=\"0\" width=\"88\" height=\"25\" fill=\"#fff\" stroke=\"#D4DDE4\" stroke-width=\"2px\"></rect>\n    <text x=\"44\" y=\"16\" font-size=\"10px\" fill=\"#4D4E53\" text-anchor=\"middle\">\n      EventTarget\n    </text>\n  </a>\n  <line x1=\"88\" y1=\"14\" x2=\"118\" y2=\"14\" stroke=\"#D4DDE4\"></line>\n  <polyline points=\"88,14 98,9 98,19 88,14\" stroke=\"#D4DDE4\" fill=\"#fff\"></polyline>\n  <a style=\"text-decoration: none;\" href=\"/en-US/docs/Web/API/MediaRecorder\" aria-current=\"page\">\n    <rect x=\"118\" y=\"0\" width=\"104\" height=\"25\" fill=\"#F4F7F8\" stroke=\"#D4DDE4\" stroke-width=\"2px\"></rect>\n    <text x=\"170\" y=\"16\" font-size=\"10px\" fill=\"#4D4E53\" text-anchor=\"middle\">\n      MediaRecorder\n    </text>\n  </a></svg>"}},{"type":"prose","value":{"id":"constructor","title":"Constructor","isH3":false,"content":"<dl>\n  <dt id=\"mediarecorder\"><a href=\"/en-US/docs/Web/API/MediaRecorder/MediaRecorder\" title=\"MediaRecorder()\"><code>MediaRecorder()</code></a></dt>\n  <dd>\n    <p>Creates a new <code>MediaRecorder</code> object, given a <a href=\"/en-US/docs/Web/API/MediaStream\"><code>MediaStream</code></a> to record. Options are available to do things like set the container's MIME type (such as <code>\"video/webm\"</code> or <code>\"video/mp4\"</code>) and the bit rates of the audio and video tracks or a single overall bit rate.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"instance_properties","title":"Instance properties","isH3":false,"content":"<dl>\n  <dt id=\"mediarecorder.mimetype\"><a href=\"/en-US/docs/Web/API/MediaRecorder/mimeType\"><code>MediaRecorder.mimeType</code></a> <span class=\"badge inline readonly\" title=\"This value may not be changed.\">Read only </span></dt>\n  <dd>\n    <p>Returns the MIME type that was selected as the recording container for the <code>MediaRecorder</code> object when it was created.</p>\n  </dd>\n  <dt id=\"mediarecorder.state\"><a href=\"/en-US/docs/Web/API/MediaRecorder/state\"><code>MediaRecorder.state</code></a> <span class=\"badge inline readonly\" title=\"This value may not be changed.\">Read only </span></dt>\n  <dd>\n    <p>Returns the current state of the <code>MediaRecorder</code> object (<code>inactive</code>, <code>recording</code>, or <code>paused</code>.)</p>\n  </dd>\n  <dt id=\"mediarecorder.stream\"><a href=\"/en-US/docs/Web/API/MediaRecorder/stream\"><code>MediaRecorder.stream</code></a> <span class=\"badge inline readonly\" title=\"This value may not be changed.\">Read only </span></dt>\n  <dd>\n    <p>Returns the stream that was passed into the constructor when the <code>MediaRecorder</code> was created.</p>\n  </dd>\n  <dt id=\"mediarecorder.videobitspersecond\"><a href=\"/en-US/docs/Web/API/MediaRecorder/videoBitsPerSecond\"><code>MediaRecorder.videoBitsPerSecond</code></a> <span class=\"badge inline readonly\" title=\"This value may not be changed.\">Read only </span></dt>\n  <dd>\n    <p>Returns the video encoding bit rate in use. This may differ from the bit rate specified in the constructor (if it was provided).</p>\n  </dd>\n  <dt id=\"mediarecorder.audiobitspersecond\"><a href=\"/en-US/docs/Web/API/MediaRecorder/audioBitsPerSecond\"><code>MediaRecorder.audioBitsPerSecond</code></a> <span class=\"badge inline readonly\" title=\"This value may not be changed.\">Read only </span></dt>\n  <dd>\n    <p>Returns the audio encoding bit rate in use. This may differ from the bit rate specified in the constructor (if it was provided).</p>\n  </dd>\n  <dt id=\"mediarecorder.audiobitratemode\"><a href=\"/en-US/docs/Web/API/MediaRecorder/audioBitrateMode\"><code>MediaRecorder.audioBitrateMode</code></a> <span class=\"badge inline readonly\" title=\"This value may not be changed.\">Read only </span> <abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></dt>\n  <dd>\n    <p>Returns the bitrate mode used to encode audio tracks.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"static_methods","title":"Static methods","isH3":false,"content":"<dl>\n  <dt id=\"mediarecorder.istypesupported\"><a href=\"/en-US/docs/Web/API/MediaRecorder/isTypeSupported_static\" title=\"MediaRecorder.isTypeSupported()\"><code>MediaRecorder.isTypeSupported()</code></a></dt>\n  <dd>\n    <p>A static method which returns a <code>true</code> or <code>false</code> value indicating if the given MIME media type is supported by the current user agent.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"instance_methods","title":"Instance methods","isH3":false,"content":"<dl>\n  <dt id=\"mediarecorder.pause\"><a href=\"/en-US/docs/Web/API/MediaRecorder/pause\"><code>MediaRecorder.pause()</code></a></dt>\n  <dd>\n    <p>Pauses the recording of media.</p>\n  </dd>\n  <dt id=\"mediarecorder.requestdata\"><a href=\"/en-US/docs/Web/API/MediaRecorder/requestData\"><code>MediaRecorder.requestData()</code></a></dt>\n  <dd>\n    <p>Requests a <a href=\"/en-US/docs/Web/API/Blob\"><code>Blob</code></a> containing the saved data received thus far (or since the last time <code>requestData()</code> was called. After calling this method, recording continues, but in a new <code>Blob</code>.</p>\n  </dd>\n  <dt id=\"mediarecorder.resume\"><a href=\"/en-US/docs/Web/API/MediaRecorder/resume\"><code>MediaRecorder.resume()</code></a></dt>\n  <dd>\n    <p>Resumes recording of media after having been paused.</p>\n  </dd>\n  <dt id=\"mediarecorder.start\"><a href=\"/en-US/docs/Web/API/MediaRecorder/start\"><code>MediaRecorder.start()</code></a></dt>\n  <dd>\n    <p>Begins recording media; this method can optionally be passed a <code>timeslice</code> argument with a value in milliseconds. If this is specified, the media will be captured in separate chunks of that duration, rather than the default behavior of recording the media in a single large chunk.</p>\n  </dd>\n  <dt id=\"mediarecorder.stop\"><a href=\"/en-US/docs/Web/API/MediaRecorder/stop\"><code>MediaRecorder.stop()</code></a></dt>\n  <dd>\n    <p>Stops recording, at which point a <a href=\"/en-US/docs/Web/API/MediaRecorder/dataavailable_event\" title=\"dataavailable\"><code>dataavailable</code></a> event containing the final <code>Blob</code> of saved data is fired. No more recording occurs.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"events","title":"Events","isH3":false,"content":"<p>Listen to these events using <code>addEventListener()</code> or by assigning an event listener to the <code>oneventname</code> property of this interface.</p>\n<dl>\n  <dt id=\"dataavailable\"><a href=\"/en-US/docs/Web/API/MediaRecorder/dataavailable_event\" title=\"dataavailable\"><code>dataavailable</code></a></dt>\n  <dd>\n    <p>Fires periodically each time <code>timeslice</code> milliseconds of media have been recorded (or when the entire media has been recorded, if <code>timeslice</code> wasn't specified). The event, of type <a href=\"/en-US/docs/Web/API/BlobEvent\"><code>BlobEvent</code></a>, contains the recorded media in its <a href=\"/en-US/docs/Web/API/BlobEvent/data\" title=\"data\"><code>data</code></a> property.</p>\n  </dd>\n  <dt id=\"error\"><a href=\"/en-US/docs/Web/API/MediaRecorder/error_event\" title=\"error\"><code>error</code></a></dt>\n  <dd>\n    <p>Fired when there are fatal errors that stop recording. The received event is based on the <a href=\"/en-US/docs/Web/API/MediaRecorderErrorEvent\"><code>MediaRecorderErrorEvent</code></a> interface, whose <a href=\"/en-US/docs/Web/API/MediaRecorderErrorEvent/error\" title=\"error\"><code>error</code></a> property contains a <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a> that describes the actual error that occurred.</p>\n  </dd>\n  <dt id=\"pause\"><a href=\"/en-US/docs/Web/API/MediaRecorder/pause_event\" title=\"pause\"><code>pause</code></a></dt>\n  <dd>\n    <p>Fired when media recording is paused.</p>\n  </dd>\n  <dt id=\"resume\"><a href=\"/en-US/docs/Web/API/MediaRecorder/resume_event\" title=\"resume\"><code>resume</code></a></dt>\n  <dd>\n    <p>Fired when media recording resumes after being paused.</p>\n  </dd>\n  <dt id=\"start\"><a href=\"/en-US/docs/Web/API/MediaRecorder/start_event\" title=\"start\"><code>start</code></a></dt>\n  <dd>\n    <p>Fired when media recording starts.</p>\n  </dd>\n  <dt id=\"stop\"><a href=\"/en-US/docs/Web/API/MediaRecorder/stop_event\" title=\"stop\"><code>stop</code></a></dt>\n  <dd>\n    <p>Fired when media recording ends, either when the <a href=\"/en-US/docs/Web/API/MediaStream\"><code>MediaStream</code></a> ends, or after the <a href=\"/en-US/docs/Web/API/MediaRecorder/stop\"><code>MediaRecorder.stop()</code></a> method is called.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"example","title":"Example","isH3":false,"content":"<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>if (navigator.mediaDevices) {\n  console.log(\"getUserMedia supported.\");\n\n  const constraints = { audio: true };\n  let chunks = [];\n\n  navigator.mediaDevices\n    .getUserMedia(constraints)\n    .then((stream) =&gt; {\n      const mediaRecorder = new MediaRecorder(stream);\n\n      record.onclick = () =&gt; {\n        mediaRecorder.start();\n        console.log(mediaRecorder.state);\n        console.log(\"recorder started\");\n        record.style.background = \"red\";\n        record.style.color = \"black\";\n      };\n\n      stop.onclick = () =&gt; {\n        mediaRecorder.stop();\n        console.log(mediaRecorder.state);\n        console.log(\"recorder stopped\");\n        record.style.background = \"\";\n        record.style.color = \"\";\n      };\n\n      mediaRecorder.onstop = (e) =&gt; {\n        console.log(\"data available after MediaRecorder.stop() called.\");\n\n        const clipName = prompt(\"Enter a name for your sound clip\");\n\n        const clipContainer = document.createElement(\"article\");\n        const clipLabel = document.createElement(\"p\");\n        const audio = document.createElement(\"audio\");\n        const deleteButton = document.createElement(\"button\");\n        const mainContainer = document.querySelector(\"body\");\n\n        clipContainer.classList.add(\"clip\");\n        audio.setAttribute(\"controls\", \"\");\n        deleteButton.textContent = \"Delete\";\n        clipLabel.textContent = clipName;\n\n        clipContainer.appendChild(audio);\n        clipContainer.appendChild(clipLabel);\n        clipContainer.appendChild(deleteButton);\n        mainContainer.appendChild(clipContainer);\n\n        audio.controls = true;\n        const blob = new Blob(chunks, { type: \"audio/ogg; codecs=opus\" });\n        chunks = [];\n        const audioURL = URL.createObjectURL(blob);\n        audio.src = audioURL;\n        console.log(\"recorder stopped\");\n\n        deleteButton.onclick = (e) =&gt; {\n          const evtTgt = e.target;\n          evtTgt.parentNode.parentNode.removeChild(evtTgt.parentNode);\n        };\n      };\n\n      mediaRecorder.ondataavailable = (e) =&gt; {\n        chunks.push(e.data);\n      };\n    })\n    .catch((err) =&gt; {\n      console.error(`The following error occurred: ${err}`);\n    });\n}\n</code></pre></div>\n<div class=\"notecard note\">\n  <p><strong>Note:</strong> This code sample is inspired by the Web Dictaphone demo. Some lines have been omitted for brevity; <a href=\"https://github.com/mdn/dom-examples/tree/main/media/web-dictaphone\" class=\"external\" target=\"_blank\">refer to the source</a> for the complete code.</p>\n</div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/mediacapture-record/#mediarecorder-api","title":"MediaStream Recording"}],"query":"api.MediaRecorder"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.MediaRecorder"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/MediaStream_Recording_API/Using_the_MediaStream_Recording_API\">Using the MediaStream Recording API</a></li>\n  <li><a href=\"https://mdn.github.io/dom-examples/media/web-dictaphone/\" class=\"external\" target=\"_blank\">Web Dictaphone</a>: MediaRecorder + getUserMedia + Web Audio API visualization demo, by <a href=\"https://github.com/chrisdavidmills\" class=\"external\" target=\"_blank\">Chris Mills</a> (<a href=\"https://github.com/mdn/dom-examples/tree/main/media/web-dictaphone\" class=\"external\" target=\"_blank\">source on GitHub</a>.)</li>\n  <li><a href=\"/en-US/docs/Web/API/MediaStream_Recording_API/Recording_a_media_element\">Recording a media element</a></li>\n  <li><a href=\"https://simpl.info/mediarecorder/\" class=\"external\" target=\"_blank\">simpl.info MediaStream Recording demo</a>, by <a href=\"https://github.com/samdutton\" class=\"external\" target=\"_blank\">Sam Dutton</a>.</li>\n  <li><a href=\"/en-US/docs/Web/API/MediaDevices/getUserMedia\"><code>MediaDevices.getUserMedia()</code></a></li>\n  <li><a href=\"https://github.com/chrisjohndigital/OpenLang\" class=\"external\" target=\"_blank\">OpenLang</a>: HTML video language lab web application using MediaDevices and the MediaStream Recording API for video recording (<a href=\"https://github.com/chrisjohndigital/OpenLang\" class=\"external\" target=\"_blank\">source on GitHub</a>)</li>\n</ul>"}}],"toc":[{"text":"Constructor","id":"constructor"},{"text":"Instance properties","id":"instance_properties"},{"text":"Static methods","id":"static_methods"},{"text":"Instance methods","id":"instance_methods"},{"text":"Events","id":"events"},{"text":"Example","id":"example"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The MediaRecorder interface of the MediaStream Recording API provides functionality to easily record media. It is created using the MediaRecorder() constructor.","popularity":0.0272,"modified":"2020-10-15T21:27:42.456Z","other_translations":[],"pageType":"web-api-interface","source":{"folder":"en-us/web/api/mediarecorder","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/api/mediarecorder/index.md","last_commit_url":"https://github.com/mdn/content/commit/null","filename":"index.md"},"short_title":"MediaRecorder","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/MediaRecorder","title":"MediaRecorder"}],"pageTitle":"MediaRecorder - Web APIs | MDN","noIndexing":false},"url":"/en-US/docs/Web/API/MediaRecorder"}