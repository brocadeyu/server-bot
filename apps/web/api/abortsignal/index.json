{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"AbortSignal","mdn_url":"/en-US/docs/Web/API/AbortSignal","locale":"en-US","native":"English (US)","browserCompat":["api.AbortSignal"],"baseline":{"baseline":"high","baseline_high_date":"2021-09-25","baseline_low_date":"2019-03-25","support":{"chrome":"66","chrome_android":"66","edge":"16","firefox":"57","firefox_android":"57","safari":"12.1","safari_ios":"12.2"}},"sidebarHTML":"<ol><li class=\"section\"><a href=\"/en-US/docs/Web/API/Document_Object_Model\">Document Object Model</a></li><li class=\"section\"><em><a href=\"/en-US/docs/Web/API/AbortSignal\" aria-current=\"page\"><code>AbortSignal</code></a></em></li><li class=\"toggle\"><details open=\"\"><summary>Instance properties</summary><ol><li><a href=\"/en-US/docs/Web/API/AbortSignal/aborted\"><code>aborted</code></a></li><li><a href=\"/en-US/docs/Web/API/AbortSignal/reason\"><code>reason</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Static methods</summary><ol><li><a href=\"/en-US/docs/Web/API/AbortSignal/abort_static\"><code>abort()</code></a></li><li><a href=\"/en-US/docs/Web/API/AbortSignal/any_static\"><code>any()</code></a></li><li><a href=\"/en-US/docs/Web/API/AbortSignal/timeout_static\"><code>timeout()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Instance methods</summary><ol><li><a href=\"/en-US/docs/Web/API/AbortSignal/throwIfAborted\"><code>throwIfAborted()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Events</summary><ol><li><a href=\"/en-US/docs/Web/API/AbortSignal/abort_event\"><code>abort</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Inheritance</summary><ol><li><a href=\"/en-US/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for DOM</summary><ol><li><a href=\"/en-US/docs/Web/API/AbortController\"><code>AbortController</code></a></li><li><a href=\"/en-US/docs/Web/API/AbstractRange\"><code>AbstractRange</code></a></li><li><a href=\"/en-US/docs/Web/API/Attr\"><code>Attr</code></a></li><li><a href=\"/en-US/docs/Web/API/CDATASection\"><code>CDATASection</code></a></li><li><a href=\"/en-US/docs/Web/API/CharacterData\"><code>CharacterData</code></a></li><li><a href=\"/en-US/docs/Web/API/Comment\"><code>Comment</code></a></li><li><a href=\"/en-US/docs/Web/API/CustomEvent\"><code>CustomEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/DOMError\"><code>DOMError</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></li><li><a href=\"/en-US/docs/Web/API/DOMImplementation\"><code>DOMImplementation</code></a></li><li><a href=\"/en-US/docs/Web/API/DOMParser\"><code>DOMParser</code></a></li><li><a href=\"/en-US/docs/Web/API/DOMPoint\"><code>DOMPoint</code></a></li><li><a href=\"/en-US/docs/Web/API/DOMPointReadOnly\"><code>DOMPointReadOnly</code></a></li><li><a href=\"/en-US/docs/Web/API/DOMRect\"><code>DOMRect</code></a></li><li><a href=\"/en-US/docs/Web/API/DOMTokenList\"><code>DOMTokenList</code></a></li><li><a href=\"/en-US/docs/Web/API/Document\"><code>Document</code></a></li><li><a href=\"/en-US/docs/Web/API/DocumentFragment\"><code>DocumentFragment</code></a></li><li><a href=\"/en-US/docs/Web/API/DocumentType\"><code>DocumentType</code></a></li><li><a href=\"/en-US/docs/Web/API/Element\"><code>Element</code></a></li><li><a href=\"/en-US/docs/Web/API/Event\"><code>Event</code></a></li><li><a href=\"/en-US/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li><li><a href=\"/en-US/docs/Web/API/HTMLCollection\"><code>HTMLCollection</code></a></li><li><a href=\"/en-US/docs/Web/API/MutationObserver\"><code>MutationObserver</code></a></li><li><a href=\"/en-US/docs/Web/API/MutationRecord\"><code>MutationRecord</code></a></li><li><a href=\"/en-US/docs/Web/API/NamedNodeMap\"><code>NamedNodeMap</code></a></li><li><a href=\"/en-US/docs/Web/API/Node\"><code>Node</code></a></li><li><a href=\"/en-US/docs/Web/API/NodeIterator\"><code>NodeIterator</code></a></li><li><a href=\"/en-US/docs/Web/API/NodeList\"><code>NodeList</code></a></li><li><a href=\"/en-US/docs/Web/API/ProcessingInstruction\"><code>ProcessingInstruction</code></a></li><li><a href=\"/en-US/docs/Web/API/Range\"><code>Range</code></a></li><li><a href=\"/en-US/docs/Web/API/StaticRange\"><code>StaticRange</code></a></li><li><a href=\"/en-US/docs/Web/API/Text\"><code>Text</code></a></li><li><a href=\"/en-US/docs/Web/API/TextDecoder\"><code>TextDecoder</code></a></li><li><a href=\"/en-US/docs/Web/API/TextEncoder\"><code>TextEncoder</code></a></li><li><a href=\"/en-US/docs/Web/API/TimeRanges\"><code>TimeRanges</code></a></li><li><a href=\"/en-US/docs/Web/API/TreeWalker\"><code>TreeWalker</code></a></li><li><a href=\"/en-US/docs/Web/API/XMLDocument\"><code>XMLDocument</code></a></li></ol></details></li></ol>","sidebarMacro":"APIRef","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard note\">\n  <p><strong>Note:</strong> This feature is available in <a href=\"/en-US/docs/Web/API/Web_Workers_API\">Web Workers</a>.</p>\n</div>\n<p>The <strong><code>AbortSignal</code></strong> interface represents a signal object that allows you to communicate with an asynchronous operation (such as a fetch request) and abort it if required via an <a href=\"/en-US/docs/Web/API/AbortController\"><code>AbortController</code></a> object.</p><svg viewBox=\"-1 -1 650 42\" preserveAspectRatio=\"xMinYMin meet\">\n  <a style=\"text-decoration: none;\" href=\"/en-US/docs/Web/API/EventTarget\">\n    <rect x=\"0\" y=\"0\" width=\"88\" height=\"25\" fill=\"#fff\" stroke=\"#D4DDE4\" stroke-width=\"2px\"></rect>\n    <text x=\"44\" y=\"16\" font-size=\"10px\" fill=\"#4D4E53\" text-anchor=\"middle\">\n      EventTarget\n    </text>\n  </a>\n  <line x1=\"88\" y1=\"14\" x2=\"118\" y2=\"14\" stroke=\"#D4DDE4\"></line>\n  <polyline points=\"88,14 98,9 98,19 88,14\" stroke=\"#D4DDE4\" fill=\"#fff\"></polyline>\n  <a style=\"text-decoration: none;\" href=\"/en-US/docs/Web/API/AbortSignal\" aria-current=\"page\">\n    <rect x=\"118\" y=\"0\" width=\"88\" height=\"25\" fill=\"#F4F7F8\" stroke=\"#D4DDE4\" stroke-width=\"2px\"></rect>\n    <text x=\"162\" y=\"16\" font-size=\"10px\" fill=\"#4D4E53\" text-anchor=\"middle\">\n      AbortSignal\n    </text>\n  </a></svg>"}},{"type":"prose","value":{"id":"instance_properties","title":"Instance properties","isH3":false,"content":"<p><em>Also inherits properties from its parent interface, <a href=\"/en-US/docs/Web/API/EventTarget\"><code>EventTarget</code></a>.</em></p>\n<dl>\n  <dt id=\"abortsignal.aborted\"><a href=\"/en-US/docs/Web/API/AbortSignal/aborted\"><code>AbortSignal.aborted</code></a> <span class=\"badge inline readonly\" title=\"This value may not be changed.\">Read only </span></dt>\n  <dd>\n    <p>A <a href=\"/en-US/docs/Glossary/Boolean\">Boolean</a> that indicates whether the request(s) the signal is communicating with is/are aborted (<code>true</code>) or not (<code>false</code>).</p>\n  </dd>\n  <dt id=\"abortsignal.reason\"><a href=\"/en-US/docs/Web/API/AbortSignal/reason\"><code>AbortSignal.reason</code></a> <span class=\"badge inline readonly\" title=\"This value may not be changed.\">Read only </span></dt>\n  <dd>\n    <p>A JavaScript value providing the abort reason, once the signal has aborted.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"static_methods","title":"Static methods","isH3":false,"content":"<p><em>Also inherits methods from its parent interface, <a href=\"/en-US/docs/Web/API/EventTarget\"><code>EventTarget</code></a>.</em></p>\n<dl>\n  <dt id=\"abortsignal.abort\"><a href=\"/en-US/docs/Web/API/AbortSignal/abort_static\" title=\"AbortSignal.abort()\"><code>AbortSignal.abort()</code></a></dt>\n  <dd>\n    <p>Returns an <code>AbortSignal</code> instance that is already set as aborted.</p>\n  </dd>\n  <dt id=\"abortsignal.any\"><a href=\"/en-US/docs/Web/API/AbortSignal/any_static\" title=\"AbortSignal.any()\"><code>AbortSignal.any()</code></a></dt>\n  <dd>\n    <p>Returns an <code>AbortSignal</code> that aborts when any of the given abort signals abort.</p>\n  </dd>\n  <dt id=\"abortsignal.timeout\"><a href=\"/en-US/docs/Web/API/AbortSignal/timeout_static\" title=\"AbortSignal.timeout()\"><code>AbortSignal.timeout()</code></a></dt>\n  <dd>\n    <p>Returns an <code>AbortSignal</code> instance that will automatically abort after a specified time.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"instance_methods","title":"Instance methods","isH3":false,"content":"<p><em>Also inherits methods from its parent interface, <a href=\"/en-US/docs/Web/API/EventTarget\"><code>EventTarget</code></a>.</em></p>\n<dl>\n  <dt id=\"abortsignal.throwifaborted\"><a href=\"/en-US/docs/Web/API/AbortSignal/throwIfAborted\"><code>AbortSignal.throwIfAborted()</code></a></dt>\n  <dd>\n    <p>Throws the signal's abort <a href=\"/en-US/docs/Web/API/AbortSignal/reason\" title=\"reason\"><code>reason</code></a> if the signal has been aborted; otherwise it does nothing.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"events","title":"Events","isH3":false,"content":"<p><em>Also inherits events from its parent interface, <a href=\"/en-US/docs/Web/API/EventTarget\"><code>EventTarget</code></a>.</em></p>\n<p>Listen to this event using <a href=\"/en-US/docs/Web/API/EventTarget/addEventListener\" title=\"addEventListener()\"><code>addEventListener()</code></a> or by assigning an event listener to the <code>oneventname</code> property of this interface.</p>\n<dl>\n  <dt id=\"abort\"><a href=\"/en-US/docs/Web/API/AbortSignal/abort_event\" title=\"abort\"><code>abort</code></a></dt>\n  <dd>\n    <p>\n      Invoked when the asynchronous operations the signal is communicating with is/are aborted.\n      Also available via the <code>onabort</code> property.\n    </p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":""}},{"type":"prose","value":{"id":"aborting_a_fetch_operation_using_an_explicit_signal","title":"Aborting a fetch operation using an explicit signal","isH3":true,"content":"<p>The following snippet shows how we might use a signal to abort downloading a video using the <a href=\"/en-US/docs/Web/API/Fetch_API\">Fetch API</a>.</p>\n<p>We first create an abort controller using the <a href=\"/en-US/docs/Web/API/AbortController/AbortController\" title=\"AbortController()\"><code>AbortController()</code></a> constructor, then grab a reference to its associated <code>AbortSignal</code> object using the <a href=\"/en-US/docs/Web/API/AbortController/signal\"><code>AbortController.signal</code></a> property.</p>\n<p>\n  When the <a href=\"/en-US/docs/Web/API/Window/fetch\">fetch request</a> is initiated, we pass in the <code>AbortSignal</code> as an option inside the request's options object (the <code>{signal}</code> below). This associates the signal and controller with the fetch request, and allows us to abort it by calling <a href=\"/en-US/docs/Web/API/AbortController/abort\"><code>AbortController.abort()</code></a>.\n  Below you can see that the fetch operation is aborted in the second event listener, which triggered when the abort button (<code>abortBtn</code>) is clicked.\n</p>\n<p>When <code>abort()</code> is called, the <code>fetch()</code> promise rejects with a <code>DOMException</code> named <code>AbortError</code>.</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>let controller;\nconst url = \"video.mp4\";\n\nconst downloadBtn = document.querySelector(\".download\");\nconst abortBtn = document.querySelector(\".abort\");\n\ndownloadBtn.addEventListener(\"click\", fetchVideo);\n\nabortBtn.addEventListener(\"click\", () =&gt; {\n  if (controller) {\n    controller.abort();\n    console.log(\"Download aborted\");\n  }\n});\n\nasync function fetchVideo() {\n  controller = new AbortController();\n  const signal = controller.signal;\n\n  try {\n    const response = await fetch(url, { signal });\n    console.log(\"Download complete\", response);\n    // process response further\n  } catch (err) {\n    console.error(`Download error: ${err.message}`);\n  }\n}\n</code></pre></div>\n<p>If the request is aborted after the <code>fetch()</code> call has been fulfilled but before the response body has been read, then attempting to read the response body will reject with an <code>AbortError</code> exception.</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>async function get() {\n  const controller = new AbortController();\n  const request = new Request(\"https://example.org/get\", {\n    signal: controller.signal,\n  });\n\n  const response = await fetch(request);\n  controller.abort();\n  // The next line will throw `AbortError`\n  const text = await response.text();\n  console.log(text);\n}\n</code></pre></div>\n<p>You can find a <a href=\"https://github.com/mdn/dom-examples/tree/main/abort-api\" class=\"external\" target=\"_blank\">full working example on GitHub</a>; you can also see it <a href=\"https://mdn.github.io/dom-examples/abort-api/\" class=\"external\" target=\"_blank\">running live</a>.</p>"}},{"type":"prose","value":{"id":"aborting_a_fetch_operation_with_a_timeout","title":"Aborting a fetch operation with a timeout","isH3":true,"content":"<p>\n  If you need to abort the operation on timeout then you can use the static <a href=\"/en-US/docs/Web/API/AbortSignal/timeout_static\" title=\"AbortSignal.timeout()\"><code>AbortSignal.timeout()</code></a> method.\n  This returns an <code>AbortSignal</code> that will automatically timeout after a certain number of milliseconds.\n</p>\n<p>\n  The code snippet below shows how you would either succeed in downloading a file, or handle a timeout error after 5 seconds.\n  Note that when there is a timeout the <code>fetch()</code> promise rejects with a <code>TimeoutError</code> <code>DOMException</code>.\n  This allows code to differentiate between timeouts (for which user notification is probably required), and user aborts.\n</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>const url = \"video.mp4\";\n\ntry {\n  const res = await fetch(url, { signal: AbortSignal.timeout(5000) });\n  const result = await res.blob();\n  // …\n} catch (err) {\n  if (err.name === \"TimeoutError\") {\n    console.error(\"Timeout: It took more than 5 seconds to get the result!\");\n  } else if (err.name === \"AbortError\") {\n    console.error(\n      \"Fetch aborted by user action (browser stop button, closing tab, etc.\",\n    );\n  } else {\n    // A network error, or some other problem.\n    console.error(`Error: type: ${err.name}, message: ${err.message}`);\n  }\n}\n</code></pre></div>"}},{"type":"prose","value":{"id":"aborting_a_fetch_with_timeout_or_explicit_abort","title":"Aborting a fetch with timeout or explicit abort","isH3":true,"content":"<p>If you want to abort from multiple signals, you can use <a href=\"/en-US/docs/Web/API/AbortSignal/any_static\" title=\"AbortSignal.any()\"><code>AbortSignal.any()</code></a> to combine them into a single signal. The following example shows this using <a href=\"/en-US/docs/Web/API/Window/fetch\" title=\"fetch\"><code>fetch</code></a>:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>try {\n  const controller = new AbortController();\n  const timeoutSignal = AbortSignal.timeout(5000);\n  const res = await fetch(url, {\n    // This will abort the fetch when either signal is aborted\n    signal: AbortSignal.any([controller.signal, timeoutSignal]),\n  });\n  const body = await res.json();\n} catch (e) {\n  if (e.name === \"AbortError\") {\n    // Notify the user of abort.\n  } else if (e.name === \"TimeoutError\") {\n    // Notify the user of timeout\n  } else {\n    // A network error, or some other problem.\n    console.log(`Type: ${e.name}, Message: ${e.message}`);\n  }\n}\n</code></pre></div>\n<div class=\"notecard note\">\n  <p><strong>Note:</strong> Unlike when using <a href=\"/en-US/docs/Web/API/AbortSignal/timeout_static\" title=\"AbortSignal.timeout()\"><code>AbortSignal.timeout()</code></a>, there is no way to tell whether the final abort was caused by a timeout.</p>\n</div>"}},{"type":"prose","value":{"id":"implementing_an_abortable_api","title":"Implementing an abortable API","isH3":true,"content":"<p>An API that needs to support aborting can accept an <code>AbortSignal</code> object, and use its state to trigger abort signal handling when needed.</p>\n<p>\n  A <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>-based API should respond to the abort signal by rejecting any unsettled promise with the <code>AbortSignal</code> abort <a href=\"/en-US/docs/Web/API/AbortSignal/reason\" title=\"reason\"><code>reason</code></a>.\n  For example, consider the following <code>myCoolPromiseAPI</code>, which takes a signal and returns a promise.\n  The promise is rejected immediately if the signal is already aborted, or if the abort event is detected.\n  Otherwise it completes normally and then resolves the promise.\n</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>function myCoolPromiseAPI(/* …, */ { signal }) {\n  return new Promise((resolve, reject) =&gt; {\n    // If the signal is already aborted, immediately throw in order to reject the promise.\n    if (signal.aborted) {\n      reject(signal.reason);\n    }\n\n    // Perform the main purpose of the API\n    // Call resolve(result) when done.\n\n    // Watch for 'abort' signals\n    signal.addEventListener(\"abort\", () =&gt; {\n      // Stop the main operation\n      // Reject the promise with the abort reason.\n      reject(signal.reason);\n    });\n  });\n}\n</code></pre></div>\n<p>\n  The API might then be used as shown.\n  Note that <a href=\"/en-US/docs/Web/API/AbortController/abort\"><code>AbortController.abort()</code></a> is called to abort the operation.\n</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>const controller = new AbortController();\nconst signal = controller.signal;\n\nstartSpinner();\n\nmyCoolPromiseAPI({ /* …, */ signal })\n  .then((result) =&gt; {})\n  .catch((err) =&gt; {\n    if (err.name === \"AbortError\") return;\n    showUserErrorMessage();\n  })\n  .then(() =&gt; stopSpinner());\n\ncontroller.abort();\n</code></pre></div>\n<p>\n  APIs that do not return promises might react in a similar manner.\n  In some cases it may make sense to absorb the signal.\n</p>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://dom.spec.whatwg.org/#interface-AbortSignal","title":"DOM Standard"}],"query":"api.AbortSignal"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.AbortSignal"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/Fetch_API\">Fetch API</a></li>\n  <li><a href=\"https://developer.chrome.com/blog/abortable-fetch/\" class=\"external\" target=\"_blank\">Abortable Fetch</a> by Jake Archibald</li>\n</ul>"}}],"toc":[{"text":"Instance properties","id":"instance_properties"},{"text":"Static methods","id":"static_methods"},{"text":"Instance methods","id":"instance_methods"},{"text":"Events","id":"events"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The AbortSignal interface represents a signal object that allows you to communicate with an asynchronous operation (such as a fetch request) and abort it if required via an AbortController object.","popularity":0.0226,"modified":"2020-10-29T06:24:14.404Z","other_translations":[],"pageType":"web-api-interface","source":{"folder":"en-us/web/api/abortsignal","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/api/abortsignal/index.md","last_commit_url":"https://github.com/mdn/content/commit/null","filename":"index.md"},"short_title":"AbortSignal","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/AbortSignal","title":"AbortSignal"}],"pageTitle":"AbortSignal - Web APIs | MDN","noIndexing":false},"url":"/en-US/docs/Web/API/AbortSignal"}