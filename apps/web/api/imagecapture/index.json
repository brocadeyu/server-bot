{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"ImageCapture","mdn_url":"/en-US/docs/Web/API/ImageCapture","locale":"en-US","native":"English (US)","browserCompat":["api.ImageCapture"],"sidebarHTML":"<ol><li class=\"section\"><a href=\"/en-US/docs/Web/API/MediaStream_Image_Capture_API\">MediaStream Image Capture API</a><abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></li><li class=\"section\"><em><a href=\"/en-US/docs/Web/API/ImageCapture\" aria-current=\"page\"><code>ImageCapture</code></a><abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></em></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/API/ImageCapture/ImageCapture\"><code>ImageCapture()</code></a><abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Instance properties</summary><ol><li><a href=\"/en-US/docs/Web/API/ImageCapture/track\"><code>track</code></a><abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Instance methods</summary><ol><li><a href=\"/en-US/docs/Web/API/ImageCapture/getPhotoCapabilities\"><code>getPhotoCapabilities()</code></a><abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/API/ImageCapture/getPhotoSettings\"><code>getPhotoSettings()</code></a><abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/API/ImageCapture/grabFrame\"><code>grabFrame()</code></a><abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/API/ImageCapture/takePhoto\"><code>takePhoto()</code></a><abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></li></ol></details></li></ol>","sidebarMacro":"APIRef","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard experimental\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"/en-US/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</p></div>\n<p>The <strong><code>ImageCapture</code></strong> interface of the <a href=\"/en-US/docs/Web/API/MediaStream_Image_Capture_API\">MediaStream Image Capture API</a> provides methods to enable the capture of images or photos from a camera or other photographic device. It provides an interface for capturing images from a photographic device referenced through a valid <a href=\"/en-US/docs/Web/API/MediaStreamTrack\"><code>MediaStreamTrack</code></a>.</p>"}},{"type":"prose","value":{"id":"constructor","title":"Constructor","isH3":false,"content":"<dl>\n  <dt id=\"imagecapture\"><a href=\"/en-US/docs/Web/API/ImageCapture/ImageCapture\" title=\"ImageCapture()\"><code>ImageCapture()</code></a> <abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></dt>\n  <dd>\n    <p>Creates a new <code>ImageCapture</code> object which can be used to capture still frames (photos) from a given <a href=\"/en-US/docs/Web/API/MediaStreamTrack\"><code>MediaStreamTrack</code></a> which represents a video stream.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"instance_properties","title":"Instance properties","isH3":false,"content":"<dl>\n  <dt id=\"imagecapture.track\"><a href=\"/en-US/docs/Web/API/ImageCapture/track\"><code>ImageCapture.track</code></a> <span class=\"badge inline readonly\" title=\"This value may not be changed.\">Read only </span> <abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></dt>\n  <dd>\n    <p>Returns a reference to the <a href=\"/en-US/docs/Web/API/MediaStreamTrack\"><code>MediaStreamTrack</code></a> passed to the constructor.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"instance_methods","title":"Instance methods","isH3":false,"content":"<dl>\n  <dt id=\"imagecapture.takephoto\"><a href=\"/en-US/docs/Web/API/ImageCapture/takePhoto\"><code>ImageCapture.takePhoto()</code></a> <abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></dt>\n  <dd>\n    <p>Takes a single exposure using the video capture device sourcing a <a href=\"/en-US/docs/Web/API/MediaStreamTrack\"><code>MediaStreamTrack</code></a> and returns a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> that resolves with a <a href=\"/en-US/docs/Web/API/Blob\"><code>Blob</code></a> containing the data.</p>\n  </dd>\n  <dt id=\"imagecapture.getphotocapabilities\"><a href=\"/en-US/docs/Web/API/ImageCapture/getPhotoCapabilities\"><code>ImageCapture.getPhotoCapabilities()</code></a> <abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></dt>\n  <dd>\n    <p>Returns a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> that resolves with an object containing the ranges of available configuration options.</p>\n  </dd>\n  <dt id=\"imagecapture.getphotosettings\"><a href=\"/en-US/docs/Web/API/ImageCapture/getPhotoSettings\"><code>ImageCapture.getPhotoSettings()</code></a> <abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></dt>\n  <dd>\n    <p>Returns a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> that resolves with an object containing the current photo configuration settings.</p>\n  </dd>\n  <dt id=\"imagecapture.grabframe\"><a href=\"/en-US/docs/Web/API/ImageCapture/grabFrame\"><code>ImageCapture.grabFrame()</code></a> <abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></dt>\n  <dd>\n    <p>Takes a snapshot of the live video in a <a href=\"/en-US/docs/Web/API/MediaStreamTrack\"><code>MediaStreamTrack</code></a>, returning an <a href=\"/en-US/docs/Web/API/ImageBitmap\"><code>ImageBitmap</code></a>, if successful.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"example","title":"Example","isH3":false,"content":"<p>The following code is taken from <a href=\"https://googlechrome.github.io/samples/image-capture/grab-frame-take-photo.html\" class=\"external\" target=\"_blank\">Chrome's Grab Frame - Take Photo Sample</a>. Since <code>ImageCapture</code> requires some place to capture an image from, the example below starts with a device's media device (in other words a camera).</p>\n<p>This example shows, roughly, a <a href=\"/en-US/docs/Web/API/MediaStreamTrack\"><code>MediaStreamTrack</code></a> extracted from a device's <a href=\"/en-US/docs/Web/API/MediaStream\"><code>MediaStream</code></a>. The track is then used to create an <code>ImageCapture</code> object so that <code>takePhoto()</code> and <code>grabFrame()</code> can be called. Finally, it shows how to apply the results of these calls to a canvas object.</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>let imageCapture;\n\nfunction onGetUserMediaButtonClick() {\n  navigator.mediaDevices\n    .getUserMedia({ video: true })\n    .then((mediaStream) =&gt; {\n      document.querySelector(\"video\").srcObject = mediaStream;\n\n      const track = mediaStream.getVideoTracks()[0];\n      imageCapture = new ImageCapture(track);\n    })\n    .catch((error) =&gt; console.error(error));\n}\n\nfunction onGrabFrameButtonClick() {\n  imageCapture\n    .grabFrame()\n    .then((imageBitmap) =&gt; {\n      const canvas = document.querySelector(\"#grabFrameCanvas\");\n      drawCanvas(canvas, imageBitmap);\n    })\n    .catch((error) =&gt; console.error(error));\n}\n\nfunction onTakePhotoButtonClick() {\n  imageCapture\n    .takePhoto()\n    .then((blob) =&gt; createImageBitmap(blob))\n    .then((imageBitmap) =&gt; {\n      const canvas = document.querySelector(\"#takePhotoCanvas\");\n      drawCanvas(canvas, imageBitmap);\n    })\n    .catch((error) =&gt; console.error(error));\n}\n\n/* Utils */\n\nfunction drawCanvas(canvas, img) {\n  canvas.width = getComputedStyle(canvas).width.split(\"px\")[0];\n  canvas.height = getComputedStyle(canvas).height.split(\"px\")[0];\n  let ratio = Math.min(canvas.width / img.width, canvas.height / img.height);\n  let x = (canvas.width - img.width * ratio) / 2;\n  let y = (canvas.height - img.height * ratio) / 2;\n  canvas.getContext(\"2d\").clearRect(0, 0, canvas.width, canvas.height);\n  canvas\n    .getContext(\"2d\")\n    .drawImage(\n      img,\n      0,\n      0,\n      img.width,\n      img.height,\n      x,\n      y,\n      img.width * ratio,\n      img.height * ratio,\n    );\n}\n\ndocument.querySelector(\"video\").addEventListener(\"play\", () =&gt; {\n  document.querySelector(\"#grabFrameButton\").disabled = false;\n  document.querySelector(\"#takePhotoButton\").disabled = false;\n});\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/mediacapture-image/#imagecaptureapi","title":"MediaStream Image Capture"}],"query":"api.ImageCapture"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.ImageCapture"}}],"toc":[{"text":"Constructor","id":"constructor"},{"text":"Instance properties","id":"instance_properties"},{"text":"Instance methods","id":"instance_methods"},{"text":"Example","id":"example"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"}],"summary":"The ImageCapture interface of the MediaStream Image Capture API provides methods to enable the capture of images or photos from a camera or other photographic device. It provides an interface for capturing images from a photographic device referenced through a valid MediaStreamTrack.","popularity":0.005,"modified":"2020-10-15T21:57:12.715Z","other_translations":[],"pageType":"web-api-interface","source":{"folder":"en-us/web/api/imagecapture","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/api/imagecapture/index.md","last_commit_url":"https://github.com/mdn/content/commit/null","filename":"index.md"},"short_title":"ImageCapture","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/ImageCapture","title":"ImageCapture"}],"pageTitle":"ImageCapture - Web APIs | MDN","noIndexing":false},"url":"/en-US/docs/Web/API/ImageCapture"}