{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"MediaSession","mdn_url":"/en-US/docs/Web/API/MediaSession","locale":"en-US","native":"English (US)","browserCompat":["api.MediaSession"],"baseline":{"baseline":false,"support":{"chrome":"73","chrome_android":"57","edge":"79","firefox":"82","safari":"15","safari_ios":"15"}},"sidebarHTML":"<ol><li class=\"section\"><a href=\"/en-US/docs/Web/API/Media_Session_API\">Media Session API</a></li><li class=\"section\"><em><a href=\"/en-US/docs/Web/API/MediaSession\" aria-current=\"page\"><code>MediaSession</code></a></em></li><li class=\"toggle\"><details open=\"\"><summary>Instance properties</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaSession/metadata\"><code>metadata</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaSession/playbackState\"><code>playbackState</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Instance methods</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaSession/setActionHandler\"><code>setActionHandler()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaSession/setCameraActive\"><code>setCameraActive()</code></a><abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/API/MediaSession/setMicrophoneActive\"><code>setMicrophoneActive()</code></a><abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/API/MediaSession/setPositionState\"><code>setPositionState()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Media Session API</summary><ol><li><a href=\"/en-US/docs/Web/API/ChapterInformation\"><code>ChapterInformation</code></a><abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/API/MediaMetadata\"><code>MediaMetadata</code></a></li><li><a href=\"/en-US/docs/Web/API/Navigator/mediaSession\"><code>Navigator.mediaSession</code></a></li></ol></details></li></ol>","sidebarMacro":"APIRef","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <strong><code>MediaSession</code></strong> interface of the <a href=\"/en-US/docs/Web/API/Media_Session_API\">Media Session API</a> allows a web page to provide custom behaviors for standard media playback interactions, and to report metadata that can be sent by the user agent to the device or operating system for presentation in standardized user interface elements.</p>\n<p>For example, a smartphone might have a standard panel in its lock screen that provides controls for media playback and information display. A browser on the device can use <code>MediaSession</code> to make browser playback controllable from that standard/global user interface.</p>"}},{"type":"prose","value":{"id":"instance_properties","title":"Instance properties","isH3":false,"content":"<dl>\n  <dt id=\"metadata\"><a href=\"/en-US/docs/Web/API/MediaSession/metadata\" title=\"metadata\"><code>metadata</code></a></dt>\n  <dd>\n    <p>Returns an instance of <a href=\"/en-US/docs/Web/API/MediaMetadata\"><code>MediaMetadata</code></a>, which contains rich media metadata for display in a platform UI.</p>\n  </dd>\n  <dt id=\"playbackstate\"><a href=\"/en-US/docs/Web/API/MediaSession/playbackState\" title=\"playbackState\"><code>playbackState</code></a></dt>\n  <dd>\n    <p>Indicates whether the current media session is playing. Valid values are <code>none</code>, <code>paused</code>, or <code>playing</code>.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"instance_methods","title":"Instance methods","isH3":false,"content":"<dl>\n  <dt id=\"setactionhandler\"><a href=\"/en-US/docs/Web/API/MediaSession/setActionHandler\" title=\"setActionHandler()\"><code>setActionHandler()</code></a></dt>\n  <dd>\n    <p>Sets an action handler for a media session action, such as play or pause.</p>\n  </dd>\n  <dt id=\"setcameraactive\"><a href=\"/en-US/docs/Web/API/MediaSession/setCameraActive\" title=\"setCameraActive()\"><code>setCameraActive()</code></a> <abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></dt>\n  <dd>\n    <p>Indicates to the user agent whether the user's camera is considered to be active.</p>\n  </dd>\n  <dt id=\"setmicrophoneactive\"><a href=\"/en-US/docs/Web/API/MediaSession/setMicrophoneActive\" title=\"setMicrophoneActive()\"><code>setMicrophoneActive()</code></a> <abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></dt>\n  <dd>\n    <p>Indicates to the user agent whether the user's microphone is considered to be currently muted.</p>\n  </dd>\n  <dt id=\"setpositionstate\"><a href=\"/en-US/docs/Web/API/MediaSession/setPositionState\" title=\"setPositionState()\"><code>setPositionState()</code></a></dt>\n  <dd>\n    <p>Sets the current playback position and speed of the media currently being presented.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":""}},{"type":"prose","value":{"id":"setting_up_action_handlers_for_a_music_player","title":"Setting up action handlers for a music player","isH3":true,"content":"<p>The following example creates a new media session and assigns action handlers to it:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>if (\"mediaSession\" in navigator) {\n  navigator.mediaSession.metadata = new MediaMetadata({\n    title: \"Unforgettable\",\n    artist: \"Nat King Cole\",\n    album: \"The Ultimate Collection (Remastered)\",\n    artwork: [\n      {\n        src: \"https://dummyimage.com/96x96\",\n        sizes: \"96x96\",\n        type: \"image/png\",\n      },\n      {\n        src: \"https://dummyimage.com/128x128\",\n        sizes: \"128x128\",\n        type: \"image/png\",\n      },\n      {\n        src: \"https://dummyimage.com/192x192\",\n        sizes: \"192x192\",\n        type: \"image/png\",\n      },\n      {\n        src: \"https://dummyimage.com/256x256\",\n        sizes: \"256x256\",\n        type: \"image/png\",\n      },\n      {\n        src: \"https://dummyimage.com/384x384\",\n        sizes: \"384x384\",\n        type: \"image/png\",\n      },\n      {\n        src: \"https://dummyimage.com/512x512\",\n        sizes: \"512x512\",\n        type: \"image/png\",\n      },\n    ],\n  });\n\n  navigator.mediaSession.setActionHandler(\"play\", () =&gt; {\n    /* Code excerpted. */\n  });\n  navigator.mediaSession.setActionHandler(\"pause\", () =&gt; {\n    /* Code excerpted. */\n  });\n  navigator.mediaSession.setActionHandler(\"stop\", () =&gt; {\n    /* Code excerpted. */\n  });\n  navigator.mediaSession.setActionHandler(\"seekbackward\", () =&gt; {\n    /* Code excerpted. */\n  });\n  navigator.mediaSession.setActionHandler(\"seekforward\", () =&gt; {\n    /* Code excerpted. */\n  });\n  navigator.mediaSession.setActionHandler(\"seekto\", () =&gt; {\n    /* Code excerpted. */\n  });\n  navigator.mediaSession.setActionHandler(\"previoustrack\", () =&gt; {\n    /* Code excerpted. */\n  });\n  navigator.mediaSession.setActionHandler(\"nexttrack\", () =&gt; {\n    /* Code excerpted. */\n  });\n  navigator.mediaSession.setActionHandler(\"skipad\", () =&gt; {\n    /* Code excerpted. */\n  });\n  navigator.mediaSession.setActionHandler(\"togglecamera\", () =&gt; {\n    /* Code excerpted. */\n  });\n  navigator.mediaSession.setActionHandler(\"togglemicrophone\", () =&gt; {\n    /* Code excerpted. */\n  });\n  navigator.mediaSession.setActionHandler(\"hangup\", () =&gt; {\n    /* Code excerpted. */\n  });\n}\n</code></pre></div>\n<p>The following example sets up two functions for playing and pausing, then uses them as callbacks with the relevant action handlers.</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>const actionHandlers = [\n  // play\n  [\n    \"play\",\n    async () =&gt; {\n      // play our audio\n      await audioEl.play();\n      // set playback state\n      navigator.mediaSession.playbackState = \"playing\";\n      // update our status element\n      updateStatus(allMeta[index], \"Action: play  |  Track is playing…\");\n    },\n  ],\n  [\n    \"pause\",\n    () =&gt; {\n      // pause out audio\n      audioEl.pause();\n      // set playback state\n      navigator.mediaSession.playbackState = \"paused\";\n      // update our status element\n      updateStatus(allMeta[index], \"Action: pause  |  Track has been paused…\");\n    },\n  ],\n];\n\nfor (const [action, handler] of actionHandlers) {\n  try {\n    navigator.mediaSession.setActionHandler(action, handler);\n  } catch (error) {\n    console.log(`The media session action \"${action}\" is not supported yet.`);\n  }\n}\n</code></pre></div>"}},{"type":"prose","value":{"id":"using_action_handlers_to_control_a_slide_presentation","title":"Using action handlers to control a slide presentation","isH3":true,"content":"<p>The <code>\"previousslide\"</code> and <code>\"nextslide\"</code> action handlers can be used to handle moving forward and backward through a slide presentation, for example when the user puts their presentation into a <a href=\"/en-US/docs/Web/API/Picture-in-Picture_API\" title=\"Picture-in-Picture\">Picture-in-Picture</a> window, and presses the browser-supplied controls for navigating through slides.</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>try {\n  navigator.mediaSession.setActionHandler(\"previousslide\", () =&gt; {\n    log('&gt; User clicked \"Previous Slide\" icon.');\n    if (slideNumber &gt; 1) slideNumber--;\n    updateSlide();\n  });\n} catch (error) {\n  log('Warning! The \"previousslide\" media session action is not supported.');\n}\n\ntry {\n  navigator.mediaSession.setActionHandler(\"nextslide\", () =&gt; {\n    log('&gt; User clicked \"Next Slide\" icon.');\n    slideNumber++;\n    updateSlide();\n  });\n} catch (error) {\n  log('Warning! The \"nextslide\" media session action is not supported.');\n}\n</code></pre></div>\n<p>See <a href=\"https://googlechrome.github.io/samples/media-session/slides.html\" class=\"external\" target=\"_blank\">Presenting Slides / Media Session Sample</a> for a working example.</p>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/mediasession/#the-mediasession-interface","title":"Media Session"}],"query":"api.MediaSession"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.MediaSession"}}],"toc":[{"text":"Instance properties","id":"instance_properties"},{"text":"Instance methods","id":"instance_methods"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"}],"summary":"The MediaSession interface of the Media Session API allows a web page to provide custom behaviors for standard media playback interactions, and to report metadata that can be sent by the user agent to the device or operating system for presentation in standardized user interface elements.","popularity":0.0019,"modified":"2020-10-20T07:27:07.938Z","other_translations":[],"pageType":"web-api-interface","source":{"folder":"en-us/web/api/mediasession","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/api/mediasession/index.md","last_commit_url":"https://github.com/mdn/content/commit/null","filename":"index.md"},"short_title":"MediaSession","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/MediaSession","title":"MediaSession"}],"pageTitle":"MediaSession - Web APIs | MDN","noIndexing":false},"url":"/en-US/docs/Web/API/MediaSession"}