{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"MessagePort","mdn_url":"/en-US/docs/Web/API/MessagePort","locale":"en-US","native":"English (US)","browserCompat":["api.MessagePort"],"baseline":{"baseline":"high","baseline_high_date":"2018-03-22","baseline_low_date":"2015-09-22","support":{"chrome":"4","chrome_android":"18","edge":"12","firefox":"41","firefox_android":"41","safari":"5","safari_ios":"4.2"}},"sidebarHTML":"<ol><li class=\"section\"><a href=\"/en-US/docs/Web/API/Channel_Messaging_API\">Channel Messaging API</a></li><li class=\"section\"><em><a href=\"/en-US/docs/Web/API/MessagePort\" aria-current=\"page\"><code>MessagePort</code></a></em></li><li class=\"toggle\"><details open=\"\"><summary>Instance methods</summary><ol><li><a href=\"/en-US/docs/Web/API/MessagePort/close\"><code>close()</code></a></li><li><a href=\"/en-US/docs/Web/API/MessagePort/postMessage\"><code>postMessage()</code></a></li><li><a href=\"/en-US/docs/Web/API/MessagePort/start\"><code>start()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Events</summary><ol><li><a href=\"/en-US/docs/Web/API/MessagePort/message_event\"><code>message</code></a></li><li><a href=\"/en-US/docs/Web/API/MessagePort/messageerror_event\"><code>messageerror</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Inheritance</summary><ol><li><a href=\"/en-US/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Channel Messaging API</summary><ol><li><a href=\"/en-US/docs/Web/API/MessageChannel\"><code>MessageChannel</code></a></li></ol></details></li></ol>","sidebarMacro":"APIRef","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard note\">\n  <p><strong>Note:</strong> This feature is available in <a href=\"/en-US/docs/Web/API/Web_Workers_API\">Web Workers</a>.</p>\n</div>\n<p>The <strong><code>MessagePort</code></strong> interface of the <a href=\"/en-US/docs/Web/API/Channel_Messaging_API\">Channel Messaging API</a> represents one of the two ports of a <a href=\"/en-US/docs/Web/API/MessageChannel\"><code>MessageChannel</code></a>, allowing messages to be sent from one port and listening out for them arriving at the other.</p>\n<p><code>MessagePort</code> is a <a href=\"/en-US/docs/Web/API/Web_Workers_API/Transferable_objects\">transferable object</a>.</p><svg viewBox=\"-1 -1 650 42\" preserveAspectRatio=\"xMinYMin meet\">\n  <a style=\"text-decoration: none;\" href=\"/en-US/docs/Web/API/EventTarget\">\n    <rect x=\"0\" y=\"0\" width=\"88\" height=\"25\" fill=\"#fff\" stroke=\"#D4DDE4\" stroke-width=\"2px\"></rect>\n    <text x=\"44\" y=\"16\" font-size=\"10px\" fill=\"#4D4E53\" text-anchor=\"middle\">\n      EventTarget\n    </text>\n  </a>\n  <line x1=\"88\" y1=\"14\" x2=\"118\" y2=\"14\" stroke=\"#D4DDE4\"></line>\n  <polyline points=\"88,14 98,9 98,19 88,14\" stroke=\"#D4DDE4\" fill=\"#fff\"></polyline>\n  <a style=\"text-decoration: none;\" href=\"/en-US/docs/Web/API/MessagePort\" aria-current=\"page\">\n    <rect x=\"118\" y=\"0\" width=\"88\" height=\"25\" fill=\"#F4F7F8\" stroke=\"#D4DDE4\" stroke-width=\"2px\"></rect>\n    <text x=\"162\" y=\"16\" font-size=\"10px\" fill=\"#4D4E53\" text-anchor=\"middle\">\n      MessagePort\n    </text>\n  </a></svg>"}},{"type":"prose","value":{"id":"instance_methods","title":"Instance methods","isH3":false,"content":"<p><em>Inherits methods from its parent, <a href=\"/en-US/docs/Web/API/EventTarget\"><code>EventTarget</code></a></em>.</p>\n<dl>\n  <dt id=\"postmessage\"><a href=\"/en-US/docs/Web/API/MessagePort/postMessage\" title=\"postMessage()\"><code>postMessage()</code></a></dt>\n  <dd>\n    <p>Sends a message from the port, and optionally, transfers ownership of objects to other browsing contexts.</p>\n  </dd>\n  <dt id=\"start\"><a href=\"/en-US/docs/Web/API/MessagePort/start\" title=\"start()\"><code>start()</code></a></dt>\n  <dd>\n    <p>Starts the sending of messages queued on the port (only needed when using <a href=\"/en-US/docs/Web/API/EventTarget/addEventListener\"><code>EventTarget.addEventListener</code></a>; it is implied when using <a href=\"/en-US/docs/Web/API/MessagePort/message_event\" title=\"onmessage\"><code>onmessage</code></a>).</p>\n  </dd>\n  <dt id=\"close\"><a href=\"/en-US/docs/Web/API/MessagePort/close\" title=\"close()\"><code>close()</code></a></dt>\n  <dd>\n    <p>Disconnects the port, so it is no longer active.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"events","title":"Events","isH3":false,"content":"<p><em>Inherits events from its parent, <a href=\"/en-US/docs/Web/API/EventTarget\"><code>EventTarget</code></a></em>.</p>\n<dl>\n  <dt id=\"message\"><a href=\"/en-US/docs/Web/API/MessagePort/message_event\" title=\"message\"><code>message</code></a></dt>\n  <dd>\n    <p>Fired when a <code>MessagePort</code> object receives a message.</p>\n  </dd>\n  <dt id=\"messageerror\"><a href=\"/en-US/docs/Web/API/MessagePort/messageerror_event\" title=\"messageerror\"><code>messageerror</code></a></dt>\n  <dd>\n    <p>Fired when a <code>MessagePort</code> object receives a message that can't be deserialized.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"example","title":"Example","isH3":false,"content":"<p>In the following example, you can see a new channel being created using the <a href=\"/en-US/docs/Web/API/MessageChannel/MessageChannel\" title=\"MessageChannel()\"><code>MessageChannel()</code></a> constructor.</p>\n<p>When the IFrame has loaded, we register an <a href=\"/en-US/docs/Web/API/MessagePort/message_event\" title=\"onmessage\"><code>onmessage</code></a> handler for <a href=\"/en-US/docs/Web/API/MessageChannel/port1\"><code>MessageChannel.port1</code></a> and transfer <a href=\"/en-US/docs/Web/API/MessageChannel/port2\"><code>MessageChannel.port2</code></a> to the IFrame using the <a href=\"/en-US/docs/Web/API/Window/postMessage\"><code>window.postMessage</code></a> method along with a message.</p>\n<p>When a message is received back from the IFrame, the <code>onMessage</code> function outputs the message to a paragraph.</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>const channel = new MessageChannel();\nconst output = document.querySelector(\".output\");\nconst iframe = document.querySelector(\"iframe\");\n\n// Wait for the iframe to load\niframe.addEventListener(\"load\", onLoad);\n\nfunction onLoad() {\n  // Listen for messages on port1\n  channel.port1.onmessage = onMessage;\n\n  // Transfer port2 to the iframe\n  iframe.contentWindow.postMessage(\"Hello from the main page!\", \"*\", [\n    channel.port2,\n  ]);\n}\n\n// Handle messages received on port1\nfunction onMessage(e) {\n  output.innerHTML = e.data;\n}\n</code></pre></div>\n<p>For a full working example, see our <a href=\"https://github.com/mdn/dom-examples/tree/main/channel-messaging-basic\" class=\"external\" target=\"_blank\">channel messaging basic demo</a> on GitHub (<a href=\"https://mdn.github.io/dom-examples/channel-messaging-basic/\" class=\"external\" target=\"_blank\">run it live too</a>).</p>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://html.spec.whatwg.org/multipage/web-messaging.html#message-ports","title":"HTML Standard"}],"query":"api.MessagePort"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.MessagePort"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/Channel_Messaging_API/Using_channel_messaging\">Using channel messaging</a></li>\n</ul>"}}],"toc":[{"text":"Instance methods","id":"instance_methods"},{"text":"Events","id":"events"},{"text":"Example","id":"example"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The MessagePort interface of the Channel Messaging API represents one of the two ports of a MessageChannel, allowing messages to be sent from one port and listening out for them arriving at the other.","popularity":0.0082,"modified":"2020-10-15T21:32:30.878Z","other_translations":[],"pageType":"web-api-interface","source":{"folder":"en-us/web/api/messageport","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/api/messageport/index.md","last_commit_url":"https://github.com/mdn/content/commit/null","filename":"index.md"},"short_title":"MessagePort","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/MessagePort","title":"MessagePort"}],"pageTitle":"MessagePort - Web APIs | MDN","noIndexing":false},"url":"/en-US/docs/Web/API/MessagePort"}