{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"MediaKeyStatusMap","mdn_url":"/en-US/docs/Web/API/MediaKeyStatusMap","locale":"en-US","native":"English (US)","browserCompat":["api.MediaKeyStatusMap"],"sidebarHTML":"<ol><li class=\"section\"><a href=\"/en-US/docs/Web/API/Encrypted_Media_Extensions_API\">Encrypted Media Extensions API</a></li><li class=\"section\"><em><a href=\"/en-US/docs/Web/API/MediaKeyStatusMap\" aria-current=\"page\"><code>MediaKeyStatusMap</code></a></em></li><li class=\"toggle\"><details open=\"\"><summary>Instance properties</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaKeyStatusMap/size\"><code>size</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Instance methods</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaKeyStatusMap/entries\"><code>entries()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaKeyStatusMap/forEach\"><code>forEach()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaKeyStatusMap/get\"><code>get()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaKeyStatusMap/has\"><code>has()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaKeyStatusMap/keys\"><code>keys()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaKeyStatusMap/values\"><code>values()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Encrypted Media Extensions</summary><ol><li><a href=\"/en-US/docs/Web/API/HTMLMediaElement/mediaKeys\"><code>HTMLMediaElement.mediaKeys</code></a></li><li><a href=\"/en-US/docs/Web/API/HTMLMediaElement/setMediaKeys\"><code>HTMLMediaElement.setMediaKeys()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaEncryptedEvent\"><code>MediaEncryptedEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaKeyMessageEvent\"><code>MediaKeyMessageEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaKeySession\"><code>MediaKeySession</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaKeySystemAccess\"><code>MediaKeySystemAccess</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaKeys\"><code>MediaKeys</code></a></li><li><a href=\"/en-US/docs/Web/API/Navigator/requestMediaKeySystemAccess\"><code>Navigator.requestMediaKeySystemAccess()</code></a></li></ol></details></li></ol>","sidebarMacro":"APIRef","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard secure\"><p><strong>Secure context:</strong> This feature is available only in <a href=\"/en-US/docs/Web/Security/Secure_Contexts\">secure contexts</a> (HTTPS), in some or all <a href=\"#browser_compatibility\">supporting browsers</a>.</p></div>\n<p>The <strong><code>MediaKeyStatusMap</code></strong> interface of the <a href=\"/en-US/docs/Web/API/Encrypted_Media_Extensions_API\">Encrypted Media Extensions API</a> is a read-only map of media key statuses by key IDs.</p>"}},{"type":"prose","value":{"id":"instance_properties","title":"Instance properties","isH3":false,"content":"<dl>\n  <dt id=\"mediakeystatusmap.size\"><a href=\"/en-US/docs/Web/API/MediaKeyStatusMap/size\"><code>MediaKeyStatusMap.size</code></a> <span class=\"badge inline readonly\" title=\"This value may not be changed.\">Read only </span></dt>\n  <dd>\n    <p>Returns the number of key/value pairs in the status map.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"instance_methods","title":"Instance methods","isH3":false,"content":"<dl>\n  <dt id=\"mediakeystatusmap.entries\"><a href=\"/en-US/docs/Web/API/MediaKeyStatusMap/entries\"><code>MediaKeyStatusMap.entries()</code></a> <span class=\"badge inline readonly\" title=\"This value may not be changed.\">Read only </span></dt>\n  <dd>\n    <p>Returns a new <code>Iterator</code> object containing an array of <code>[key, value]</code> for each element in the status map, in insertion order.</p>\n  </dd>\n  <dt id=\"mediakeystatusmap.foreach\"><a href=\"/en-US/docs/Web/API/MediaKeyStatusMap/forEach\"><code>MediaKeyStatusMap.forEach()</code></a> <span class=\"badge inline readonly\" title=\"This value may not be changed.\">Read only </span></dt>\n  <dd>\n    <p>Calls <code>callback</code> once for each key-value pair in the status map, in insertion order. If <code>argument</code> is present it will be passed to the callback.</p>\n  </dd>\n  <dt id=\"mediakeystatusmap.get\"><a href=\"/en-US/docs/Web/API/MediaKeyStatusMap/get\"><code>MediaKeyStatusMap.get()</code></a> <span class=\"badge inline readonly\" title=\"This value may not be changed.\">Read only </span></dt>\n  <dd>\n    <p>Returns the value associated with the given key, or <code>undefined</code> if there is none.</p>\n  </dd>\n  <dt id=\"mediakeystatusmap.has\"><a href=\"/en-US/docs/Web/API/MediaKeyStatusMap/has\"><code>MediaKeyStatusMap.has()</code></a> <span class=\"badge inline readonly\" title=\"This value may not be changed.\">Read only </span></dt>\n  <dd>\n    <p>Returns a boolean asserting whether a value has been associated with the given key.</p>\n  </dd>\n  <dt id=\"mediakeystatusmap.keys\"><a href=\"/en-US/docs/Web/API/MediaKeyStatusMap/keys\"><code>MediaKeyStatusMap.keys()</code></a> <span class=\"badge inline readonly\" title=\"This value may not be changed.\">Read only </span></dt>\n  <dd>\n    <p>Returns a new <code>Iterator</code> object containing keys for each element in the status map, in insertion order.</p>\n  </dd>\n  <dt id=\"mediakeystatusmap.values\"><a href=\"/en-US/docs/Web/API/MediaKeyStatusMap/values\"><code>MediaKeyStatusMap.values()</code></a> <span class=\"badge inline readonly\" title=\"This value may not be changed.\">Read only </span></dt>\n  <dd>\n    <p>Returns a new <code>Iterator</code> object containing values for each element in the status map, in insertion order.</p>\n  </dd>\n  <dt id=\"mediakeystatusmapsymbol.iterator\"><a href=\"#mediakeystatusmapsymbol.iterator\"><code>MediaKeyStatusMap[Symbol.iterator]()</code></a> <span class=\"badge inline readonly\" title=\"This value may not be changed.\">Read only </span></dt>\n  <dd>\n    <p>Returns a new <code>Iterator</code> object containing an array of <code>[key, value]</code> for each element in the status map, in insertion order.</p>\n  </dd>\n</dl>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/encrypted-media/#mediakeystatusmap-interface","title":"Encrypted Media Extensions"}],"query":"api.MediaKeyStatusMap"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.MediaKeyStatusMap"}}],"toc":[{"text":"Instance properties","id":"instance_properties"},{"text":"Instance methods","id":"instance_methods"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"}],"summary":"The MediaKeyStatusMap interface of the Encrypted Media Extensions API is a read-only map of media key statuses by key IDs.","popularity":0,"modified":"2020-10-15T21:33:47.809Z","other_translations":[],"pageType":"web-api-interface","source":{"folder":"en-us/web/api/mediakeystatusmap","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/api/mediakeystatusmap/index.md","last_commit_url":"https://github.com/mdn/content/commit/null","filename":"index.md"},"short_title":"MediaKeyStatusMap","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/MediaKeyStatusMap","title":"MediaKeyStatusMap"}],"pageTitle":"MediaKeyStatusMap - Web APIs | MDN","noIndexing":false},"url":"/en-US/docs/Web/API/MediaKeyStatusMap"}