{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"OVR_multiview2 extension","mdn_url":"/en-US/docs/Web/API/OVR_multiview2","locale":"en-US","native":"English (US)","browserCompat":["api.OVR_multiview2"],"baseline":{"baseline":false,"support":{"chrome_android":"93"}},"sidebarHTML":"<ol><li class=\"section\"><a href=\"/en-US/docs/Web/API/WebGL_API\">WebGL API</a></li><li class=\"section\"><em><a href=\"/en-US/docs/Web/API/OVR_multiview2\" aria-current=\"page\"><code>OVR_multiview2</code></a></em></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for WebGL</summary><ol><li><a href=\"/en-US/docs/Web/API/ANGLE_instanced_arrays\"><code>ANGLE_instanced_arrays</code></a></li><li><a href=\"/en-US/docs/Web/API/EXT_blend_minmax\"><code>EXT_blend_minmax</code></a></li><li><a href=\"/en-US/docs/Web/API/EXT_color_buffer_half_float\"><code>EXT_color_buffer_half_float</code></a></li><li><a href=\"/en-US/docs/Web/API/EXT_disjoint_timer_query\"><code>EXT_disjoint_timer_query</code></a></li><li><a href=\"/en-US/docs/Web/API/EXT_frag_depth\"><code>EXT_frag_depth</code></a></li><li><a href=\"/en-US/docs/Web/API/EXT_sRGB\"><code>EXT_sRGB</code></a></li><li><a href=\"/en-US/docs/Web/API/EXT_shader_texture_lod\"><code>EXT_shader_texture_lod</code></a></li><li><a href=\"/en-US/docs/Web/API/EXT_texture_filter_anisotropic\"><code>EXT_texture_filter_anisotropic</code></a></li><li><a href=\"/en-US/docs/Web/API/OES_draw_buffers_indexed\"><code>OES_draw_buffers_indexed</code></a></li><li><a href=\"/en-US/docs/Web/API/OES_element_index_uint\"><code>OES_element_index_uint</code></a></li><li><a href=\"/en-US/docs/Web/API/OES_standard_derivatives\"><code>OES_standard_derivatives</code></a></li><li><a href=\"/en-US/docs/Web/API/OES_texture_float\"><code>OES_texture_float</code></a></li><li><a href=\"/en-US/docs/Web/API/OES_texture_float_linear\"><code>OES_texture_float_linear</code></a></li><li><a href=\"/en-US/docs/Web/API/OES_texture_half_float\"><code>OES_texture_half_float</code></a></li><li><a href=\"/en-US/docs/Web/API/OES_texture_half_float_linear\"><code>OES_texture_half_float_linear</code></a></li><li><a href=\"/en-US/docs/Web/API/OES_vertex_array_object\"><code>OES_vertex_array_object</code></a></li><li><a href=\"/en-US/docs/Web/API/WEBGL_color_buffer_float\"><code>WEBGL_color_buffer_float</code></a></li><li><a href=\"/en-US/docs/Web/API/WEBGL_compressed_texture_etc1\"><code>WEBGL_compressed_texture_etc1</code></a></li><li><a href=\"/en-US/docs/Web/API/WEBGL_compressed_texture_pvrtc\"><code>WEBGL_compressed_texture_pvrtc</code></a></li><li><a href=\"/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc\"><code>WEBGL_compressed_texture_s3tc</code></a></li><li><a href=\"/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc_srgb\"><code>WEBGL_compressed_texture_s3tc_srgb</code></a></li><li><a href=\"/en-US/docs/Web/API/WEBGL_debug_renderer_info\"><code>WEBGL_debug_renderer_info</code></a></li><li><a href=\"/en-US/docs/Web/API/WEBGL_debug_shaders\"><code>WEBGL_debug_shaders</code></a></li><li><a href=\"/en-US/docs/Web/API/WEBGL_depth_texture\"><code>WEBGL_depth_texture</code></a></li><li><a href=\"/en-US/docs/Web/API/WEBGL_draw_buffers\"><code>WEBGL_draw_buffers</code></a></li><li><a href=\"/en-US/docs/Web/API/WEBGL_lose_context\"><code>WEBGL_lose_context</code></a></li><li><a href=\"/en-US/docs/Web/API/WebGL2RenderingContext\"><code>WebGL2RenderingContext</code></a></li><li><a href=\"/en-US/docs/Web/API/WebGLActiveInfo\"><code>WebGLActiveInfo</code></a></li><li><a href=\"/en-US/docs/Web/API/WebGLBuffer\"><code>WebGLBuffer</code></a></li><li><a href=\"/en-US/docs/Web/API/WebGLContextEvent\"><code>WebGLContextEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/WebGLFramebuffer\"><code>WebGLFramebuffer</code></a></li><li><a href=\"/en-US/docs/Web/API/WebGLObject\"><code>WebGLObject</code></a><abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/API/WebGLProgram\"><code>WebGLProgram</code></a></li><li><a href=\"/en-US/docs/Web/API/WebGLQuery\"><code>WebGLQuery</code></a></li><li><a href=\"/en-US/docs/Web/API/WebGLRenderbuffer\"><code>WebGLRenderbuffer</code></a></li><li><a href=\"/en-US/docs/Web/API/WebGLRenderingContext\"><code>WebGLRenderingContext</code></a></li><li><a href=\"/en-US/docs/Web/API/WebGLSampler\"><code>WebGLSampler</code></a></li><li><a href=\"/en-US/docs/Web/API/WebGLShader\"><code>WebGLShader</code></a></li><li><a href=\"/en-US/docs/Web/API/WebGLShaderPrecisionFormat\"><code>WebGLShaderPrecisionFormat</code></a></li><li><a href=\"/en-US/docs/Web/API/WebGLSync\"><code>WebGLSync</code></a></li><li><a href=\"/en-US/docs/Web/API/WebGLTexture\"><code>WebGLTexture</code></a></li><li><a href=\"/en-US/docs/Web/API/WebGLTransformFeedback\"><code>WebGLTransformFeedback</code></a></li><li><a href=\"/en-US/docs/Web/API/WebGLUniformLocation\"><code>WebGLUniformLocation</code></a></li><li><a href=\"/en-US/docs/Web/API/WebGLVertexArrayObject\"><code>WebGLVertexArrayObject</code></a></li></ol></details></li></ol>","sidebarMacro":"APIRef","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <code>OVR_multiview2</code> extension is part of the <a href=\"/en-US/docs/Web/API/WebGL_API\">WebGL API</a> and adds support for rendering into multiple views simultaneously. This especially useful for virtual reality (VR) and WebXR.</p>\n<p>For more information, see also:</p>\n<ul>\n  <li><a href=\"https://error.ghost.org/\" class=\"external\" target=\"_blank\">Multiview on WebXR</a></li>\n  <li><a href=\"https://doc.babylonjs.com/features/featuresDeepDive/cameras/multiViewsPart1\" class=\"external\" target=\"_blank\">Multiview in babylon.js</a></li>\n  <li><a href=\"https://community.arm.com/arm-community-blogs/b/graphics-gaming-and-vr-blog/posts/optimizing-virtual-reality-understanding-multiview\" class=\"external\" target=\"_blank\">Optimizing Virtual Reality: Understanding Multiview</a></li>\n  <li><a href=\"https://developers.meta.com/horizon/documentation/web/web-multiview/\" class=\"external\" target=\"_blank\">Multiview WebGL Rendering for Meta Quest</a></li>\n</ul>\n<p>WebGL extensions are available using the <a href=\"/en-US/docs/Web/API/WebGLRenderingContext/getExtension\"><code>WebGLRenderingContext.getExtension()</code></a> method. For more information, see also <a href=\"/en-US/docs/Web/API/WebGL_API/Using_Extensions\">Using Extensions</a> in the <a href=\"/en-US/docs/Web/API/WebGL_API/Tutorial\">WebGL tutorial</a>.</p>\n<div class=\"notecard note\">\n  <p><strong>Note:</strong> Support depends on the system's graphics driver (Windows+ANGLE and Android are supported; Windows+GL, Mac, Linux are not supported).</p>\n  <p>This extension is only available to <a href=\"/en-US/docs/Web/API/WebGL2RenderingContext\" title=\"WebGL 2\">WebGL 2</a> contexts as it needs GLSL 3.00 and texture arrays.</p>\n  <p>Currently, there is no way to use multiview to render to a multisampled backbuffer, so you should create contexts with <code>antialias: false</code>. However, the Oculus browser (6+) also supports multisampling using the <a href=\"https://developers.meta.com/horizon/documentation/web/web-multiview/#using-oculus_multiview-in-webgl-20\" class=\"external\" target=\"_blank\"><code>OCULUS_multiview</code></a> extension. See also <a href=\"https://github.com/KhronosGroup/WebGL/issues/2912\" class=\"external\" target=\"_blank\">this WebGL issue</a>.</p>\n</div>"}},{"type":"prose","value":{"id":"constants","title":"Constants","isH3":false,"content":"<p>This extension exposes 4 constants that can be used in <a href=\"/en-US/docs/Web/API/WebGLRenderingContext/getParameter\"><code>getParameter()</code></a> or <a href=\"/en-US/docs/Web/API/WebGLRenderingContext/getFramebufferAttachmentParameter\"><code>getFramebufferAttachmentParameter()</code></a>.</p>\n<dl>\n  <dt id=\"framebuffer_attachment_texture_num_views_ovr\"><a href=\"#framebuffer_attachment_texture_num_views_ovr\"><code>FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR</code></a></dt>\n  <dd>\n    <p>Number of views of the framebuffer object attachment.</p>\n  </dd>\n  <dt id=\"framebuffer_attachment_texture_base_view_index_ovr\"><a href=\"#framebuffer_attachment_texture_base_view_index_ovr\"><code>FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR</code></a></dt>\n  <dd>\n    <p>Base view index of the framebuffer object attachment.</p>\n  </dd>\n  <dt id=\"max_views_ovr\"><a href=\"#max_views_ovr\"><code>MAX_VIEWS_OVR</code></a></dt>\n  <dd>\n    <p>The maximum number of views. Most VR headsets have two views, but there are prototypes of headset with ultra-wide FOV using 4 views which is currently the maximum number of views supported by multiview.</p>\n  </dd>\n  <dt id=\"framebuffer_incomplete_view_targets_ovr\"><a href=\"#framebuffer_incomplete_view_targets_ovr\"><code>FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR</code></a></dt>\n  <dd>\n    <p>If baseViewIndex is not the same for all framebuffer attachment points where the value of <code>FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE</code> is not <code>NONE</code>, the framebuffer is considered incomplete. Calling <a href=\"/en-US/docs/Web/API/WebGLRenderingContext/checkFramebufferStatus\"><code>checkFramebufferStatus</code></a> for a framebuffer in this state returns <code>FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR</code>.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"instance_methods","title":"Instance methods","isH3":false,"content":"<dl>\n  <dt id=\"framebuffertexturemultiviewovr\"><a href=\"/en-US/docs/Web/API/OVR_multiview2/framebufferTextureMultiviewOVR\"><code>framebufferTextureMultiviewOVR()</code></a></dt>\n  <dd>\n    <p>Simultaneously renders to multiple elements of a 2D texture array.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<p>This example is taken from the <a href=\"https://registry.khronos.org/webgl/extensions/OVR_multiview2/\" class=\"external\" target=\"_blank\">specification</a>.</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>const gl = document\n  .createElement(\"canvas\")\n  .getContext(\"webgl2\", { antialias: false });\nconst ext = gl.getExtension(\"OVR_multiview2\");\nconst fb = gl.createFramebuffer();\ngl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fb);\n\nconst colorTex = gl.createTexture();\ngl.bindTexture(gl.TEXTURE_2D_ARRAY, colorTex);\ngl.texStorage3D(gl.TEXTURE_2D_ARRAY, 1, gl.RGBA8, 512, 512, 2);\next.framebufferTextureMultiviewOVR(\n  gl.DRAW_FRAMEBUFFER,\n  gl.COLOR_ATTACHMENT0,\n  colorTex,\n  0,\n  0,\n  2,\n);\n\nconst depthStencilTex = gl.createTexture();\ngl.bindTexture(gl.TEXTURE_2D_ARRAY, depthStencilTex);\ngl.texStorage3D(gl.TEXTURE_2D_ARRAY, 1, gl.DEPTH32F_STENCIL8, 512, 512, 2);\n\next.framebufferTextureMultiviewOVR(\n  gl.DRAW_FRAMEBUFFER,\n  gl.DEPTH_STENCIL_ATTACHMENT,\n  depthStencilTex,\n  0,\n  0,\n  2,\n);\ngl.drawElements(/* … */); // draw will be broadcasted to the layers of colorTex and depthStencilTex.\n</code></pre></div>\n<p>Shader code</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">cpp</span></div><pre class=\"brush: cpp notranslate\"><code>#version 300 es\n#extension GL_OVR_multiview2 : require\nprecision mediump float;\nlayout (num_views = 2) in;\nin vec4 inPos;\nuniform mat4 u_viewMatrices[2];\nvoid main() {\n  gl_Position = u_viewMatrices[gl_ViewID_OVR] * inPos;\n}\n</code></pre></div>\n<p>Also, see this <a href=\"https://threejs.org/examples/?q=mult#webgl_multiple_views\" class=\"external\" target=\"_blank\">three.js</a> demo for a live multiview example.</p>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://registry.khronos.org/webgl/extensions/OVR_multiview2/","title":"WebGL OVR_multiview2 Extension Specification"}],"query":"api.OVR_multiview2"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.OVR_multiview2"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/WebGLRenderingContext/getExtension\"><code>WebGLRenderingContext.getExtension()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/API/WebGLRenderingContext/getParameter\"><code>WebGLRenderingContext.getParameter()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/API/WebXR_Device_API\">WebXR</a></li>\n</ul>"}}],"toc":[{"text":"Constants","id":"constants"},{"text":"Instance methods","id":"instance_methods"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The OVR_multiview2 extension is part of the WebGL API and adds support for rendering into multiple views simultaneously. This especially useful for virtual reality (VR) and WebXR.","popularity":0,"modified":"2020-10-15T22:25:02.057Z","other_translations":[],"pageType":"webgl-extension","source":{"folder":"en-us/web/api/ovr_multiview2","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/api/ovr_multiview2/index.md","last_commit_url":"https://github.com/mdn/content/commit/null","filename":"index.md"},"short_title":"OVR_multiview2","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/OVR_multiview2","title":"OVR_multiview2"}],"pageTitle":"OVR_multiview2 extension - Web APIs | MDN","noIndexing":false},"url":"/en-US/docs/Web/API/OVR_multiview2"}