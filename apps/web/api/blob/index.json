{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Blob","mdn_url":"/en-US/docs/Web/API/Blob","locale":"en-US","native":"English (US)","browserCompat":["api.Blob"],"sidebarHTML":"<ol><li class=\"section\"><a href=\"/en-US/docs/Web/API/File_API\">File API</a></li><li class=\"section\"><em><a href=\"/en-US/docs/Web/API/Blob\" aria-current=\"page\"><code>Blob</code></a></em></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/API/Blob/Blob\"><code>Blob()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Instance properties</summary><ol><li><a href=\"/en-US/docs/Web/API/Blob/size\"><code>size</code></a></li><li><a href=\"/en-US/docs/Web/API/Blob/type\"><code>type</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Instance methods</summary><ol><li><a href=\"/en-US/docs/Web/API/Blob/arrayBuffer\"><code>arrayBuffer()</code></a></li><li><a href=\"/en-US/docs/Web/API/Blob/bytes\"><code>bytes()</code></a></li><li><a href=\"/en-US/docs/Web/API/Blob/slice\"><code>slice()</code></a></li><li><a href=\"/en-US/docs/Web/API/Blob/stream\"><code>stream()</code></a></li><li><a href=\"/en-US/docs/Web/API/Blob/text\"><code>text()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for File API</summary><ol><li><a href=\"/en-US/docs/Web/API/File\"><code>File</code></a></li><li><a href=\"/en-US/docs/Web/API/FileList\"><code>FileList</code></a></li><li><a href=\"/en-US/docs/Web/API/FileReader\"><code>FileReader</code></a></li><li><a href=\"/en-US/docs/Web/API/FileReaderSync\"><code>FileReaderSync</code></a></li><li><a href=\"/en-US/docs/Web/API/URL/createObjectURL_static\"><code>URL.createObjectURL_static</code></a></li><li><a href=\"/en-US/docs/Web/API/URL/revokeObjectURL_static\"><code>URL.revokeObjectURL_static</code></a></li></ol></details></li></ol>","sidebarMacro":"APIRef","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard note\">\n  <p><strong>Note:</strong> This feature is available in <a href=\"/en-US/docs/Web/API/Web_Workers_API\">Web Workers</a>.</p>\n</div>\n<p>The <strong><code>Blob</code></strong> interface represents a blob, which is a file-like object of immutable, raw data; they can be read as text or binary data, or converted into a <a href=\"/en-US/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a> so its methods can be used for processing the data.</p>\n<p>Blobs can represent data that isn't necessarily in a JavaScript-native format. The <a href=\"/en-US/docs/Web/API/File\"><code>File</code></a> interface is based on <code>Blob</code>, inheriting blob functionality and expanding it to support files on the user's system.</p>"}},{"type":"prose","value":{"id":"using_blobs","title":"Using blobs","isH3":false,"content":"<p>To construct a <code>Blob</code> from other non-blob objects and data, use the <a href=\"/en-US/docs/Web/API/Blob/Blob\" title=\"Blob()\"><code>Blob()</code></a> constructor. To create a blob that contains a subset of another blob's data, use the <a href=\"/en-US/docs/Web/API/Blob/slice\" title=\"slice()\"><code>slice()</code></a> method. To obtain a <code>Blob</code> object for a file on the user's file system, see the <a href=\"/en-US/docs/Web/API/File\"><code>File</code></a> documentation.</p>\n<p>The APIs accepting <code>Blob</code> objects are also listed in the <a href=\"/en-US/docs/Web/API/File\"><code>File</code></a> documentation.</p>"}},{"type":"prose","value":{"id":"constructor","title":"Constructor","isH3":false,"content":"<dl>\n  <dt id=\"blob\"><a href=\"/en-US/docs/Web/API/Blob/Blob\" title=\"Blob()\"><code>Blob()</code></a></dt>\n  <dd>\n    <p>Returns a newly created <code>Blob</code> object which contains a concatenation of all of the data in the array passed into the constructor.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"instance_properties","title":"Instance properties","isH3":false,"content":"<dl>\n  <dt id=\"blob.size\"><a href=\"/en-US/docs/Web/API/Blob/size\"><code>Blob.size</code></a> <span class=\"badge inline readonly\" title=\"This value may not be changed.\">Read only </span></dt>\n  <dd>\n    <p>The size, in bytes, of the data contained in the <code>Blob</code> object.</p>\n  </dd>\n  <dt id=\"blob.type\"><a href=\"/en-US/docs/Web/API/Blob/type\"><code>Blob.type</code></a> <span class=\"badge inline readonly\" title=\"This value may not be changed.\">Read only </span></dt>\n  <dd>\n    <p>A string indicating the MIME type of the data contained in the <code>Blob</code>. If the type is unknown, this string is empty.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"instance_methods","title":"Instance methods","isH3":false,"content":"<dl>\n  <dt id=\"blob.arraybuffer\"><a href=\"/en-US/docs/Web/API/Blob/arrayBuffer\"><code>Blob.arrayBuffer()</code></a></dt>\n  <dd>\n    <p>Returns a promise that resolves with an <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> containing the entire contents of the <code>Blob</code> as binary data.</p>\n  </dd>\n  <dt id=\"blob.bytes\"><a href=\"/en-US/docs/Web/API/Blob/bytes\"><code>Blob.bytes()</code></a></dt>\n  <dd>\n    <p>Returns a promise that resolves with an <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a> containing the contents of the <code>Blob</code>.</p>\n  </dd>\n  <dt id=\"blob.slice\"><a href=\"/en-US/docs/Web/API/Blob/slice\"><code>Blob.slice()</code></a></dt>\n  <dd>\n    <p>Returns a new <code>Blob</code> object containing the data in the specified range of bytes of the blob on which it's called.</p>\n  </dd>\n  <dt id=\"blob.stream\"><a href=\"/en-US/docs/Web/API/Blob/stream\"><code>Blob.stream()</code></a></dt>\n  <dd>\n    <p>Returns a <a href=\"/en-US/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a> that can be used to read the contents of the <code>Blob</code>.</p>\n  </dd>\n  <dt id=\"blob.text\"><a href=\"/en-US/docs/Web/API/Blob/text\"><code>Blob.text()</code></a></dt>\n  <dd>\n    <p>Returns a promise that resolves with a string containing the entire contents of the <code>Blob</code> interpreted as UTF-8 text.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":""}},{"type":"prose","value":{"id":"creating_a_blob","title":"Creating a blob","isH3":true,"content":"<p>The <a href=\"/en-US/docs/Web/API/Blob/Blob\" title=\"Blob()\"><code>Blob()</code></a> constructor can create blobs from other objects. For example, to construct a blob from a JSON string:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>const obj = { hello: \"world\" };\nconst blob = new Blob([JSON.stringify(obj, null, 2)], {\n  type: \"application/json\",\n});\n</code></pre></div>"}},{"type":"prose","value":{"id":"creating_a_url_representing_the_contents_of_a_typed_array","title":"Creating a URL representing the contents of a typed array","isH3":true,"content":"<p>The following code creates a JavaScript <a href=\"/en-US/docs/Web/JavaScript/Guide/Typed_arrays\">typed array</a> and creates a new <code>Blob</code> containing the typed array's data. It then calls <a href=\"/en-US/docs/Web/API/URL/createObjectURL_static\" title=\"URL.createObjectURL()\"><code>URL.createObjectURL()</code></a> to convert the blob into a <a href=\"/en-US/docs/Glossary/URL\">URL</a>.</p>\n<h4 id=\"html\">HTML</h4>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">html</span></div><pre class=\"brush: html notranslate\"><code>&lt;p&gt;\n  This example creates a typed array containing the ASCII codes for the space\n  character through the letter Z, then converts it to an object URL. A link to\n  open that object URL is created. Click the link to see the decoded object URL.\n&lt;/p&gt;\n</code></pre></div>\n<h4 id=\"javascript\">JavaScript</h4>\n<p>The main piece of this code for example purposes is the <code>typedArrayToURL()</code> function, which creates a <code>Blob</code> from the given typed array and returns an object URL for it. Having converted the data into an object URL, it can be used in a number of ways, including as the value of the <a href=\"/en-US/docs/Web/HTML/Element/img\"><code>&lt;img&gt;</code></a> element's <a href=\"/en-US/docs/Web/HTML/Element/img#src\"><code>src</code></a> attribute (assuming the data contains an image, of course).</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>function showViewLiveResultButton() {\n  if (window.self !== window.top) {\n    // Ensure that if our document is in a frame, we get the user\n    // to first open it in its own tab or window. Otherwise, this\n    // example won't work.\n    const p = document.querySelector(\"p\");\n    p.textContent = \"\";\n    const button = document.createElement(\"button\");\n    button.textContent = \"View live result of the example code above\";\n    p.append(button);\n    button.addEventListener(\"click\", () =&gt; window.open(location.href));\n    return true;\n  }\n  return false;\n}\n\nif (!showViewLiveResultButton()) {\n  function typedArrayToURL(typedArray, mimeType) {\n    return URL.createObjectURL(\n      new Blob([typedArray.buffer], { type: mimeType }),\n    );\n  }\n  const bytes = new Uint8Array(59);\n\n  for (let i = 0; i &lt; 59; i++) {\n    bytes[i] = 32 + i;\n  }\n\n  const url = typedArrayToURL(bytes, \"text/plain\");\n\n  const link = document.createElement(\"a\");\n  link.href = url;\n  link.innerText = \"Open the array URL\";\n\n  document.body.appendChild(link);\n}\n</code></pre></div>\n<h4 id=\"result\">Result</h4><div class=\"code-example\"><div class=\"example-header\"></div><iframe class=\"sample-code-frame\" title=\"Creating a URL representing the contents of a typed array sample\" id=\"frame_creating_a_url_representing_the_contents_of_a_typed_array\" width=\"600\" height=\"200\" src=\"about:blank\" data-live-path=\"/en-US/docs/Web/API/Blob\" data-live-id=\"creating_a_url_representing_the_contents_of_a_typed_array\" sandbox=\"allow-same-origin allow-scripts\" loading=\"lazy\"></iframe></div>"}},{"type":"prose","value":{"id":"extracting_data_from_a_blob","title":"Extracting data from a blob","isH3":true,"content":"<p>One way to read content from a <code>Blob</code> is to use a <a href=\"/en-US/docs/Web/API/FileReader\"><code>FileReader</code></a>. The following code reads the content of a <code>Blob</code> as a typed array:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>const reader = new FileReader();\nreader.addEventListener(\"loadend\", () =&gt; {\n  // reader.result contains the contents of blob as a typed array\n});\nreader.readAsArrayBuffer(blob);\n</code></pre></div>\n<p>Another way to read content from a <code>Blob</code> is to use a <a href=\"/en-US/docs/Web/API/Response\"><code>Response</code></a>. The following code reads the content of a <code>Blob</code> as text:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>const text = await new Response(blob).text();\n</code></pre></div>\n<p>Or by using <a href=\"/en-US/docs/Web/API/Blob/text\"><code>Blob.text()</code></a>:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>const text = await blob.text();\n</code></pre></div>\n<p>By using other methods of <code>FileReader</code>, it is possible to read the contents of a Blob as a string or a data URL.</p>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/FileAPI/#blob-section","title":"File API"}],"query":"api.Blob"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.Blob"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/FileReader\"><code>FileReader</code></a></li>\n  <li><a href=\"/en-US/docs/Web/API/File\"><code>File</code></a></li>\n  <li><a href=\"/en-US/docs/Web/API/URL/createObjectURL_static\" title=\"URL.createObjectURL()\"><code>URL.createObjectURL()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/API/File_API/Using_files_from_web_applications\">Using files from web applications</a></li>\n</ul>"}}],"toc":[{"text":"Using blobs","id":"using_blobs"},{"text":"Constructor","id":"constructor"},{"text":"Instance properties","id":"instance_properties"},{"text":"Instance methods","id":"instance_methods"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The Blob interface represents a blob, which is a file-like object of immutable, raw data; they can be read as text or binary data, or converted into a ReadableStream so its methods can be used for processing the data.","popularity":0.0996,"modified":"2020-10-15T21:04:42.013Z","other_translations":[],"pageType":"web-api-interface","source":{"folder":"en-us/web/api/blob","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/api/blob/index.md","last_commit_url":"https://github.com/mdn/content/commit/null","filename":"index.md"},"short_title":"Blob","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/Blob","title":"Blob"}],"pageTitle":"Blob - Web APIs | MDN","noIndexing":false},"url":"/en-US/docs/Web/API/Blob"}