{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"console","mdn_url":"/en-US/docs/Web/API/console","locale":"en-US","native":"English (US)","browserCompat":["api.console"],"baseline":{"baseline":"high","baseline_high_date":"2018-01-29","baseline_low_date":"2015-07-29","support":{"chrome":"1","chrome_android":"18","edge":"12","firefox":"4","firefox_android":"4","safari":"3","safari_ios":"1"}},"sidebarHTML":"<ol><li class=\"section\"><a href=\"/en-US/docs/Web/API/Console_API\">Console API</a></li><li class=\"section\"><em><a href=\"/en-US/docs/Web/API/console\" aria-current=\"page\"><code>Console</code></a></em></li><li class=\"toggle\"><details open=\"\"><summary>Instance methods</summary><ol><li><a href=\"/en-US/docs/Web/API/console/assert_static\"><code>assert()</code></a></li><li><a href=\"/en-US/docs/Web/API/console/clear_static\"><code>clear()</code></a></li><li><a href=\"/en-US/docs/Web/API/console/count_static\"><code>count()</code></a></li><li><a href=\"/en-US/docs/Web/API/console/countReset_static\"><code>countReset()</code></a></li><li><a href=\"/en-US/docs/Web/API/console/debug_static\"><code>debug()</code></a></li><li><a href=\"/en-US/docs/Web/API/console/dir_static\"><code>dir()</code></a></li><li><a href=\"/en-US/docs/Web/API/console/dirxml_static\"><code>dirxml()</code></a></li><li><a href=\"/en-US/docs/Web/API/console/error_static\"><code>error()</code></a></li><li><a href=\"/en-US/docs/Web/API/console/group_static\"><code>group()</code></a></li><li><a href=\"/en-US/docs/Web/API/console/groupCollapsed_static\"><code>groupCollapsed()</code></a></li><li><a href=\"/en-US/docs/Web/API/console/groupEnd_static\"><code>groupEnd()</code></a></li><li><a href=\"/en-US/docs/Web/API/console/info_static\"><code>info()</code></a></li><li><a href=\"/en-US/docs/Web/API/console/log_static\"><code>log()</code></a></li><li><a href=\"/en-US/docs/Web/API/console/profile_static\"><code>profile()</code></a><abbr class=\"icon icon-nonstandard\" title=\"Non-standard. Check cross-browser support before using.\">\n    <span class=\"visually-hidden\">Non-standard</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/API/console/profileEnd_static\"><code>profileEnd()</code></a><abbr class=\"icon icon-nonstandard\" title=\"Non-standard. Check cross-browser support before using.\">\n    <span class=\"visually-hidden\">Non-standard</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/API/console/table_static\"><code>table()</code></a></li><li><a href=\"/en-US/docs/Web/API/console/time_static\"><code>time()</code></a></li><li><a href=\"/en-US/docs/Web/API/console/timeEnd_static\"><code>timeEnd()</code></a></li><li><a href=\"/en-US/docs/Web/API/console/timeLog_static\"><code>timeLog()</code></a></li><li><a href=\"/en-US/docs/Web/API/console/timeStamp_static\"><code>timeStamp()</code></a><abbr class=\"icon icon-nonstandard\" title=\"Non-standard. Check cross-browser support before using.\">\n    <span class=\"visually-hidden\">Non-standard</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/API/console/trace_static\"><code>trace()</code></a></li><li><a href=\"/en-US/docs/Web/API/console/warn_static\"><code>warn()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Console API</summary><ol><li><a href=\"/en-US/docs/Web/API/Window/console\"><code>Window.console</code></a></li></ol></details></li></ol>","sidebarMacro":"APIRef","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard note\">\n  <p><strong>Note:</strong> This feature is available in <a href=\"/en-US/docs/Web/API/Web_Workers_API\">Web Workers</a>.</p>\n</div>\n<p>The <strong><code>console</code></strong> object provides access to the debugging console (e.g., the <a href=\"https://firefox-source-docs.mozilla.org/devtools-user/web_console/index.html\" class=\"external\" target=\"_blank\">Web console</a> in Firefox).</p>\n<p>Implementations of the console API may differ between runtimes. In particular, some console methods may work differently or not work at all in some online editors and IDEs. To see the behavior described in this documentation, try the methods in your browser's developer tools, although even here, there are some differences between browsers.</p>\n<p>The <code>console</code> object can be accessed from any global object. <a href=\"/en-US/docs/Web/API/Window\"><code>Window</code></a> on browsing scopes and <a href=\"/en-US/docs/Web/API/WorkerGlobalScope\"><code>WorkerGlobalScope</code></a> as specific variants in workers via the property console. It's exposed as <a href=\"/en-US/docs/Web/API/Window/console\"><code>Window.console</code></a>, and can be referenced as <code>console</code>. For example:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>console.log(\"Failed to open the specified link\");\n</code></pre></div>"}},{"type":"prose","value":{"id":"instance_methods","title":"Instance methods","isH3":false,"content":"<dl>\n  <dt id=\"console.assert\"><a href=\"/en-US/docs/Web/API/console/assert_static\" title=\"console.assert()\"><code>console.assert()</code></a></dt>\n  <dd>\n    <p>Log an error message to console if the first argument is <code>false</code>.</p>\n  </dd>\n  <dt id=\"console.clear\"><a href=\"/en-US/docs/Web/API/console/clear_static\" title=\"console.clear()\"><code>console.clear()</code></a></dt>\n  <dd>\n    <p>Clear the console.</p>\n  </dd>\n  <dt id=\"console.count\"><a href=\"/en-US/docs/Web/API/console/count_static\" title=\"console.count()\"><code>console.count()</code></a></dt>\n  <dd>\n    <p>Log the number of times this line has been called with the given label.</p>\n  </dd>\n  <dt id=\"console.countreset\"><a href=\"/en-US/docs/Web/API/console/countReset_static\" title=\"console.countReset()\"><code>console.countReset()</code></a></dt>\n  <dd>\n    <p>Resets the value of the counter with the given label.</p>\n  </dd>\n  <dt id=\"console.debug\"><a href=\"/en-US/docs/Web/API/console/debug_static\" title=\"console.debug()\"><code>console.debug()</code></a></dt>\n  <dd>\n    <p>Outputs a message to the console with the debug log level.</p>\n  </dd>\n  <dt id=\"console.dir\"><a href=\"/en-US/docs/Web/API/console/dir_static\" title=\"console.dir()\"><code>console.dir()</code></a></dt>\n  <dd>\n    <p>Displays an interactive listing of the properties of a specified JavaScript object. This listing lets you use disclosure triangles to examine the contents of child objects.</p>\n  </dd>\n  <dt id=\"console.dirxml\"><a href=\"/en-US/docs/Web/API/console/dirxml_static\" title=\"console.dirxml()\"><code>console.dirxml()</code></a></dt>\n  <dd>\n    <p>Displays an XML/HTML Element representation of the specified object if possible or the JavaScript Object view if it is not possible.</p>\n  </dd>\n  <dt id=\"console.error\"><a href=\"/en-US/docs/Web/API/console/error_static\" title=\"console.error()\"><code>console.error()</code></a></dt>\n  <dd>\n    <p>Outputs a message to the console with the error log level.</p>\n  </dd>\n  <dt id=\"console.exception\"><a href=\"#console.exception\"><code>console.exception()</code></a> <abbr class=\"icon icon-nonstandard\" title=\"Non-standard. Check cross-browser support before using.\">\n    <span class=\"visually-hidden\">Non-standard</span>\n</abbr> <abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></dt>\n  <dd>\n    <p>An alias for <code>console.error()</code>.</p>\n  </dd>\n  <dt id=\"console.group\"><a href=\"/en-US/docs/Web/API/console/group_static\" title=\"console.group()\"><code>console.group()</code></a></dt>\n  <dd>\n    <p>Creates a new inline <a href=\"#using_groups_in_the_console\">group</a>, indenting all following output by another level. To move back out a level, call <code>console.groupEnd()</code>.</p>\n  </dd>\n  <dt id=\"console.groupcollapsed\"><a href=\"/en-US/docs/Web/API/console/groupCollapsed_static\" title=\"console.groupCollapsed()\"><code>console.groupCollapsed()</code></a></dt>\n  <dd>\n    <p>Creates a new inline <a href=\"#using_groups_in_the_console\">group</a>, indenting all following output by another level. However, unlike <code>console.group()</code> this starts with the inline group collapsed requiring the use of a disclosure button to expand it. To move back out a level, call <code>console.groupEnd()</code>.</p>\n  </dd>\n  <dt id=\"console.groupend\"><a href=\"/en-US/docs/Web/API/console/groupEnd_static\" title=\"console.groupEnd()\"><code>console.groupEnd()</code></a></dt>\n  <dd>\n    <p>Exits the current inline <a href=\"#using_groups_in_the_console\">group</a>.</p>\n  </dd>\n  <dt id=\"console.info\"><a href=\"/en-US/docs/Web/API/console/info_static\" title=\"console.info()\"><code>console.info()</code></a></dt>\n  <dd>\n    <p>Outputs a message to the console with the info log level.</p>\n  </dd>\n  <dt id=\"console.log\"><a href=\"/en-US/docs/Web/API/console/log_static\" title=\"console.log()\"><code>console.log()</code></a></dt>\n  <dd>\n    <p>Outputs a message to the console.</p>\n  </dd>\n  <dt id=\"console.profile\"><a href=\"/en-US/docs/Web/API/console/profile_static\" title=\"console.profile()\"><code>console.profile()</code></a> <abbr class=\"icon icon-nonstandard\" title=\"Non-standard. Check cross-browser support before using.\">\n    <span class=\"visually-hidden\">Non-standard</span>\n</abbr></dt>\n  <dd>\n    <p>Starts the browser's built-in profiler (for example, the <a href=\"https://firefox-source-docs.mozilla.org/devtools-user/performance/index.html\" class=\"external\" target=\"_blank\">Firefox performance tool</a>). You can specify an optional name for the profile.</p>\n  </dd>\n  <dt id=\"console.profileend\"><a href=\"/en-US/docs/Web/API/console/profileEnd_static\" title=\"console.profileEnd()\"><code>console.profileEnd()</code></a> <abbr class=\"icon icon-nonstandard\" title=\"Non-standard. Check cross-browser support before using.\">\n    <span class=\"visually-hidden\">Non-standard</span>\n</abbr></dt>\n  <dd>\n    <p>Stops the profiler. You can see the resulting profile in the browser's performance tool (for example, the <a href=\"https://firefox-source-docs.mozilla.org/devtools-user/performance/index.html\" class=\"external\" target=\"_blank\">Firefox performance tool</a>).</p>\n  </dd>\n  <dt id=\"console.table\"><a href=\"/en-US/docs/Web/API/console/table_static\" title=\"console.table()\"><code>console.table()</code></a></dt>\n  <dd>\n    <p>Displays tabular data as a table.</p>\n  </dd>\n  <dt id=\"console.time\"><a href=\"/en-US/docs/Web/API/console/time_static\" title=\"console.time()\"><code>console.time()</code></a></dt>\n  <dd>\n    <p>Starts a <a href=\"#timers\">timer</a> with a name specified as an input parameter. Up to 10,000 simultaneous timers can run on a given page.</p>\n  </dd>\n  <dt id=\"console.timeend\"><a href=\"/en-US/docs/Web/API/console/timeEnd_static\" title=\"console.timeEnd()\"><code>console.timeEnd()</code></a></dt>\n  <dd>\n    <p>Stops the specified <a href=\"#timers\">timer</a> and logs the elapsed time in milliseconds since it started.</p>\n  </dd>\n  <dt id=\"console.timelog\"><a href=\"/en-US/docs/Web/API/console/timeLog_static\" title=\"console.timeLog()\"><code>console.timeLog()</code></a></dt>\n  <dd>\n    <p>Logs the value of the specified <a href=\"#timers\">timer</a> to the console.</p>\n  </dd>\n  <dt id=\"console.timestamp\"><a href=\"/en-US/docs/Web/API/console/timeStamp_static\" title=\"console.timeStamp()\"><code>console.timeStamp()</code></a> <abbr class=\"icon icon-nonstandard\" title=\"Non-standard. Check cross-browser support before using.\">\n    <span class=\"visually-hidden\">Non-standard</span>\n</abbr></dt>\n  <dd>\n    <p>Adds a marker to the browser performance tool's timeline (<a href=\"https://developer.chrome.com/docs/devtools/performance/reference\" class=\"external\" target=\"_blank\">Chrome</a> or <a href=\"https://profiler.firefox.com/docs/#/./guide-ui-tour-timeline\" class=\"external\" target=\"_blank\">Firefox</a>).</p>\n  </dd>\n  <dt id=\"console.trace\"><a href=\"/en-US/docs/Web/API/console/trace_static\" title=\"console.trace()\"><code>console.trace()</code></a></dt>\n  <dd>\n    <p>Outputs a <a href=\"#stack_traces\">stack trace</a>.</p>\n  </dd>\n  <dt id=\"console.warn\"><a href=\"/en-US/docs/Web/API/console/warn_static\" title=\"console.warn()\"><code>console.warn()</code></a></dt>\n  <dd>\n    <p>Outputs a message to the console with the warning log level.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":""}},{"type":"prose","value":{"id":"outputting_text_to_the_console","title":"Outputting text to the console","isH3":true,"content":"<p>The console's most frequently used feature is logging text and other data. There are several categories of output you can generate using the <a href=\"/en-US/docs/Web/API/console/log_static\" title=\"console.log()\"><code>console.log()</code></a>, <a href=\"/en-US/docs/Web/API/console/info_static\" title=\"console.info()\"><code>console.info()</code></a>, <a href=\"/en-US/docs/Web/API/console/warn_static\" title=\"console.warn()\"><code>console.warn()</code></a>, <a href=\"/en-US/docs/Web/API/console/error_static\" title=\"console.error()\"><code>console.error()</code></a>, or <a href=\"/en-US/docs/Web/API/console/debug_static\" title=\"console.debug()\"><code>console.debug()</code></a> methods. Each of these results in output styled differently in the log, and you can use the filtering controls provided by your browser to view only the kinds of output that interest you.</p>\n<p>There are two ways to use each of the output methods:</p>\n<ul>\n  <li>Pass in a variable number of arguments whose string representations get concatenated into one string, then output to the console.</li>\n  <li>Pass in a string containing zero or more substitution strings followed by a variable number of arguments to replace them.</li>\n</ul>\n<h4 id=\"outputting_a_single_object\">Outputting a single object</h4>\n<p>The simplest way to use the logging methods is to output a single object:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>const someObject = { str: \"Some text\", id: 5 };\nconsole.log(someObject);\n</code></pre></div>\n<p>The output looks something like this:</p>\n<pre class=\"brush: plain notranslate\">{str:\"Some text\", id:5}\n</pre>\n<p>The browser will display as much information about the object as it can and wishes to. For example, private state of the object may be displayed too. Certain types of objects, such as DOM elements or functions, may also be displayed in a special way.</p>\n<h4 id=\"snapshotting_objects\">Snapshotting objects</h4>\n<p>Information about an object is lazily retrieved. This means that the log message shows the content of an object at the time when it's first viewed, not when it was logged. For example:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>const obj = {};\nconsole.log(obj);\nobj.prop = 123;\n</code></pre></div>\n<p>This will output <code>{}</code>. However, if you expand the object's details, you will see <code>prop: 123</code>.</p>\n<p>If you are going to mutate your object and you want to prevent the logged information from being updated, you can <a href=\"/en-US/docs/Glossary/Deep_copy\">deep-clone</a> the object before logging it. A common way is to <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify()</code></a> and then <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\"><code>JSON.parse()</code></a> it:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>console.log(JSON.parse(JSON.stringify(obj)));\n</code></pre></div>\n<p>There are other alternatives that work in browsers, such as <a href=\"/en-US/docs/Web/API/Window/structuredClone\" title=\"structuredClone()\"><code>structuredClone()</code></a>, which are more effective at cloning different types of objects.</p>\n<h4 id=\"outputting_multiple_objects\">Outputting multiple objects</h4>\n<p>You can also output multiple objects by listing them when calling the logging method, like this:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>const car = \"Dodge Charger\";\nconst someObject = { str: \"Some text\", id: 5 };\nconsole.info(\"My first car was a\", car, \". The object is:\", someObject);\n</code></pre></div>\n<p>The output will look like this:</p>\n<pre class=\"brush: plain notranslate\">My first car was a Dodge Charger. The object is: {str:\"Some text\", id:5}\n</pre>\n<h4 id=\"using_string_substitutions\">Using string substitutions</h4>\n<p>The first parameter to the logging methods can be a string containing zero or more substitution strings. Each substitution string is replaced by the corresponding argument value.</p>\n<dl>\n  <dt id=\"o\"><a href=\"#o\"><code>%o</code></a></dt>\n  <dd>\n    <p>Outputs a JavaScript object in the \"optimally useful formatting\" style, for example DOM elements may be displayed the same way as they would appear in the element inspector.</p>\n  </dd>\n  <dt id=\"o_2\"><a href=\"#o_2\"><code>%O</code></a></dt>\n  <dd>\n    <p>Outputs a JavaScript object in the \"generic JavaScript object formatting\" style, usually in the form of an expandable tree. This is similar to <a href=\"/en-US/docs/Web/API/console/dir_static\" title=\"console.dir()\"><code>console.dir()</code></a>.</p>\n  </dd>\n  <dt id=\"d\"><a href=\"#d\"><code>%d</code></a> or <code>%i</code></dt>\n  <dd>\n    <p>Outputs an integer.</p>\n  </dd>\n  <dt id=\"s\"><a href=\"#s\"><code>%s</code></a></dt>\n  <dd>\n    <p>Outputs a string.</p>\n  </dd>\n  <dt id=\"f\"><a href=\"#f\"><code>%f</code></a></dt>\n  <dd>\n    <p>Outputs a floating-point value.</p>\n  </dd>\n  <dt id=\"c\"><a href=\"#c\"><code>%c</code></a></dt>\n  <dd>\n    <p>Applies CSS style rules to all following text. See <a href=\"#styling_console_output\">Styling console output</a>.</p>\n  </dd>\n</dl>\n<p>Some browsers may implement additional format specifiers. For example, Safari and Firefox support the C-style precision formatting <code>%.&lt;precision&gt;f</code>. For example <code>console.log(\"Foo %.2f\", 1.1)</code> will output the number to 2 decimal places: <code>Foo 1.10</code>, while <code>console.log(\"Foo %.2d\", 1.1)</code> will output the number as two significant figures with a leading 0: <code>Foo 01</code>.</p>\n<p>Each of these pulls the next argument after the format string off the parameter list. For example:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>for (let i = 0; i &lt; 5; i++) {\n  console.log(\"Hello, %s. You've called me %d times.\", \"Bob\", i + 1);\n}\n</code></pre></div>\n<p>The output looks like this:</p>\n<pre class=\"brush: plain notranslate\">Hello, Bob. You've called me 1 times.\nHello, Bob. You've called me 2 times.\nHello, Bob. You've called me 3 times.\nHello, Bob. You've called me 4 times.\nHello, Bob. You've called me 5 times.\n</pre>\n<h4 id=\"styling_console_output\">Styling console output</h4>\n<p>You can use the <code>%c</code> directive to apply a CSS style to console output:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>console.log(\n  \"This is %cMy stylish message\",\n  \"color: yellow; font-style: italic; background-color: blue;padding: 2px\",\n);\n</code></pre></div>\n<p>The text before the directive will not be affected, but the text after the directive will be styled using the CSS declarations in the parameter.</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/console/css-styling.png\" alt=\"Styled Text in Firefox console\" width=\"198\" height=\"29\" loading=\"lazy\">\n</p>\n<p>You may use <code>%c</code> multiple times:</p><!-- cSpell:ignore corange cred -->\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>console.log(\n  \"Multiple styles: %cred %corange\",\n  \"color: red\",\n  \"color: orange\",\n  \"Additional unformatted message\",\n);\n</code></pre></div>\n<p>The properties usable along with the <code>%c</code> syntax are as follows (at least, in Firefox — they may differ in other browsers):</p>\n<ul>\n  <li><a href=\"/en-US/docs/Web/CSS/background\"><code>background</code></a> and its longhand equivalents</li>\n  <li><a href=\"/en-US/docs/Web/CSS/border\"><code>border</code></a> and its longhand equivalents</li>\n  <li><a href=\"/en-US/docs/Web/CSS/border-radius\"><code>border-radius</code></a></li>\n  <li><a href=\"/en-US/docs/Web/CSS/box-decoration-break\"><code>box-decoration-break</code></a></li>\n  <li><a href=\"/en-US/docs/Web/CSS/box-shadow\"><code>box-shadow</code></a></li>\n  <li><a href=\"/en-US/docs/Web/CSS/clear\"><code>clear</code></a> and <a href=\"/en-US/docs/Web/CSS/float\"><code>float</code></a></li>\n  <li><a href=\"/en-US/docs/Web/CSS/color\"><code>color</code></a></li>\n  <li><a href=\"/en-US/docs/Web/CSS/cursor\"><code>cursor</code></a></li>\n  <li><a href=\"/en-US/docs/Web/CSS/display\"><code>display</code></a></li>\n  <li><a href=\"/en-US/docs/Web/CSS/font\"><code>font</code></a> and its longhand equivalents</li>\n  <li><a href=\"/en-US/docs/Web/CSS/line-height\"><code>line-height</code></a></li>\n  <li><a href=\"/en-US/docs/Web/CSS/margin\"><code>margin</code></a></li>\n  <li><a href=\"/en-US/docs/Web/CSS/outline\"><code>outline</code></a> and its longhand equivalents</li>\n  <li><a href=\"/en-US/docs/Web/CSS/padding\"><code>padding</code></a></li>\n  <li><code>text-*</code> properties such as <a href=\"/en-US/docs/Web/CSS/text-transform\"><code>text-transform</code></a></li>\n  <li><a href=\"/en-US/docs/Web/CSS/white-space\"><code>white-space</code></a></li>\n  <li><a href=\"/en-US/docs/Web/CSS/word-spacing\"><code>word-spacing</code></a> and <a href=\"/en-US/docs/Web/CSS/word-break\"><code>word-break</code></a></li>\n  <li><a href=\"/en-US/docs/Web/CSS/writing-mode\"><code>writing-mode</code></a></li>\n</ul>\n<div class=\"notecard note\">\n  <p><strong>Note:</strong> Each console message behaves like an inline element by default. If you want properties such as <code>padding</code>, <code>margin</code>, and so on to have any effect, you can set the <code>display</code> property to <code>display: inline-block</code>.</p>\n</div>\n<div class=\"notecard note\">\n  <p><strong>Note:</strong> In order to support both light and dark color schemes, <a href=\"/en-US/docs/Web/CSS/color_value/light-dark\"><code>light-dark()</code></a> can be used when specifying colors; for example: <code>color: light-dark(#D00000, #FF4040);</code></p>\n</div>"}},{"type":"prose","value":{"id":"using_groups_in_the_console","title":"Using groups in the console","isH3":true,"content":"<p>You can use nested groups to help organize your output by visually combining related material. To create a new nested block, call <code>console.group()</code>. The <code>console.groupCollapsed()</code> method is similar but creates the new block collapsed, requiring the use of a disclosure button to open it for reading.</p>\n<p>To exit the current group, call <code>console.groupEnd()</code>. For example, given this code:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>console.log(\"This is the outer level\");\nconsole.group(\"First group\");\nconsole.log(\"In the first group\");\nconsole.group(\"Second group\");\nconsole.log(\"In the second group\");\nconsole.warn(\"Still in the second group\");\nconsole.groupEnd();\nconsole.log(\"Back to the first group\");\nconsole.groupEnd();\nconsole.debug(\"Back to the outer level\");\n</code></pre></div>\n<p>The output looks like this:</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/console/console_groups_demo.png\" alt=\"Demo of nested groups in Firefox console\" width=\"236\" height=\"169\" loading=\"lazy\">\n</p>"}},{"type":"prose","value":{"id":"timers","title":"Timers","isH3":true,"content":"<p>You can start a timer to calculate the duration of a specific operation. To start one, call the <code>console.time()</code> method, giving it a name as the only parameter. To stop the timer, and to get the elapsed time in milliseconds, just call the <code>console.timeEnd()</code> method, again passing the timer's name as the parameter. Up to 10,000 timers can run simultaneously on a given page.</p>\n<p>For example, given this code:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>console.time(\"answer time\");\nalert(\"Click to continue\");\nconsole.timeLog(\"answer time\");\nalert(\"Do a bunch of other stuff…\");\nconsole.timeEnd(\"answer time\");\n</code></pre></div>\n<p>Will log the time needed by the user to dismiss the alert box, log the time to the console, wait for the user to dismiss the second alert, and then log the ending time to the console:</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/console/console-timelog.png\" alt=\"Time log in Firefox console\" width=\"318\" height=\"102\" loading=\"lazy\">\n</p>\n<p>Notice that the timer's name is displayed both when the timer is started and when it's stopped.</p>"}},{"type":"prose","value":{"id":"stack_traces","title":"Stack traces","isH3":true,"content":"<p>The console object also supports outputting a stack trace; this will show you the call path taken to reach the point at which you call <a href=\"/en-US/docs/Web/API/console/trace_static\" title=\"console.trace()\"><code>console.trace()</code></a>. Given code like this:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>function foo() {\n  function bar() {\n    console.trace();\n  }\n  bar();\n}\n\nfoo();\n</code></pre></div>\n<p>The output in the console looks something like this:</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/console/api-trace2.png\" alt=\"Stack trace in Firefox console\" width=\"499\" height=\"123\" loading=\"lazy\">\n</p>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://console.spec.whatwg.org/#console-namespace","title":"Console Standard"}],"query":"api.console"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.console"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"https://firefox-source-docs.mozilla.org/devtools-user/index.html\" class=\"external\" target=\"_blank\">Firefox Developer Tools</a></li>\n  <li><a href=\"https://firefox-source-docs.mozilla.org/devtools-user/web_console/index.html\" class=\"external\" target=\"_blank\">Web console</a> — how the Web console in Firefox handles console API calls</li>\n  <li><a href=\"https://firefox-source-docs.mozilla.org/devtools-user/about_colon_debugging/index.html\" class=\"external\" target=\"_blank\">about:debugging</a> — how to see console output when the debugging target is a mobile device</li>\n  <li><a href=\"https://developer.chrome.com/docs/devtools/console/api/\" class=\"external\" target=\"_blank\">Google Chrome DevTools</a></li>\n  <li><a href=\"https://learn.microsoft.com/en-us/archive/microsoft-edge/legacy/developer/\" class=\"external\" target=\"_blank\">Microsoft Edge DevTools</a></li>\n  <li><a href=\"https://developer.apple.com/library/archive/documentation/AppleApplications/Conceptual/Safari_Developer_Guide/Console/Console.html\" class=\"external\" target=\"_blank\">Safari Web Inspector</a></li>\n</ul>"}}],"toc":[{"text":"Instance methods","id":"instance_methods"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The console object provides access to the debugging console (e.g., the Web console in Firefox).","popularity":0.0413,"modified":"2020-10-15T21:05:51.622Z","other_translations":[],"pageType":"web-api-interface","source":{"folder":"en-us/web/api/console","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/api/console/index.md","last_commit_url":"https://github.com/mdn/content/commit/null","filename":"index.md"},"short_title":"console","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/console","title":"console"}],"pageTitle":"console - Web APIs | MDN","noIndexing":false},"url":"/en-US/docs/Web/API/console"}