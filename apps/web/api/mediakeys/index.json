{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"MediaKeys","mdn_url":"/en-US/docs/Web/API/MediaKeys","locale":"en-US","native":"English (US)","browserCompat":["api.MediaKeys"],"sidebarHTML":"<ol><li class=\"section\"><a href=\"/en-US/docs/Web/API/Encrypted_Media_Extensions_API\">Encrypted Media Extensions API</a></li><li class=\"section\"><em><a href=\"/en-US/docs/Web/API/MediaKeys\" aria-current=\"page\"><code>MediaKeys</code></a></em></li><li class=\"toggle\"><details open=\"\"><summary>Instance methods</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaKeys/createSession\"><code>createSession()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaKeys/getStatusForPolicy\"><code>getStatusForPolicy()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaKeys/setServerCertificate\"><code>setServerCertificate()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Encrypted Media Extensions</summary><ol><li><a href=\"/en-US/docs/Web/API/HTMLMediaElement/mediaKeys\"><code>HTMLMediaElement.mediaKeys</code></a></li><li><a href=\"/en-US/docs/Web/API/HTMLMediaElement/setMediaKeys\"><code>HTMLMediaElement.setMediaKeys()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaEncryptedEvent\"><code>MediaEncryptedEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaKeyMessageEvent\"><code>MediaKeyMessageEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaKeySession\"><code>MediaKeySession</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaKeyStatusMap\"><code>MediaKeyStatusMap</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaKeySystemAccess\"><code>MediaKeySystemAccess</code></a></li><li><a href=\"/en-US/docs/Web/API/Navigator/requestMediaKeySystemAccess\"><code>Navigator.requestMediaKeySystemAccess()</code></a></li></ol></details></li></ol>","sidebarMacro":"APIRef","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard secure\"><p><strong>Secure context:</strong> This feature is available only in <a href=\"/en-US/docs/Web/Security/Secure_Contexts\">secure contexts</a> (HTTPS), in some or all <a href=\"#browser_compatibility\">supporting browsers</a>.</p></div>\n<p>The <strong><code>MediaKeys</code></strong> interface of <a href=\"/en-US/docs/Web/API/Encrypted_Media_Extensions_API\">Encrypted Media Extensions API</a> represents a set of keys that an associated <a href=\"/en-US/docs/Web/API/HTMLMediaElement\"><code>HTMLMediaElement</code></a> can use for decryption of media data during playback.</p>"}},{"type":"prose","value":{"id":"instance_properties","title":"Instance properties","isH3":false,"content":"<p>None.</p>"}},{"type":"prose","value":{"id":"instance_methods","title":"Instance methods","isH3":false,"content":"<dl>\n  <dt id=\"mediakeys.createsession\"><a href=\"/en-US/docs/Web/API/MediaKeys/createSession\"><code>MediaKeys.createSession()</code></a></dt>\n  <dd>\n    <p>Returns a new <a href=\"/en-US/docs/Web/API/MediaKeySession\"><code>MediaKeySession</code></a> object, which represents a context for message exchange with a content decryption module (CDM).</p>\n  </dd>\n  <dt id=\"mediakeys.getstatusforpolicy\"><a href=\"/en-US/docs/Web/API/MediaKeys/getStatusForPolicy\"><code>MediaKeys.getStatusForPolicy()</code></a></dt>\n  <dd>\n    <p>Returns a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> that resolves to a status string indicating whether the CDM would allow the presentation of encrypted media data using the keys, based on specified policy requirements.</p>\n  </dd>\n  <dt id=\"mediakeys.setservercertificate\"><a href=\"/en-US/docs/Web/API/MediaKeys/setServerCertificate\"><code>MediaKeys.setServerCertificate()</code></a></dt>\n  <dd>\n    <p>Returns a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> to a server certificate to be used to encrypt messages to the license server.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":""}},{"type":"prose","value":{"id":"check_if_keys_are_usable_with_hdcp_restriction","title":"Check if keys are usable with HDCP restriction","isH3":true,"content":"<p>\n  This example shows how <code>getStatusForPolicy()</code> can be used to check if keys can decrypt a particular video format in a setup that has a minimum HDCP version of <code>2.2</code>.\n  For more information, see the <a href=\"/en-US/docs/Web/API/MediaKeys/getStatusForPolicy\">MediaKeys: getStatusForPolicy() method</a> documentation.\n</p>\n<h4 id=\"html\">HTML</h4>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">html</span></div><pre class=\"brush: html notranslate\"><code>&lt;pre id=\"log\"&gt;&lt;/pre&gt;\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: css hidden notranslate\"><code>#log {\n  height: 100px;\n  overflow: scroll;\n  padding: 0.5rem;\n  border: 1px solid black;\n}\n</code></pre></div>\n<h4 id=\"javascript\">JavaScript</h4>\n<div class=\"code-example\"><pre class=\"brush: js hidden notranslate\"><code>const logElement = document.querySelector(\"#log\");\nfunction log(text) {\n  logElement.innerText = `${logElement.innerText}${text}\\n`;\n  logElement.scrollTop = logElement.scrollHeight;\n}\n</code></pre></div>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>const config = [\n  {\n    videoCapabilities: [\n      {\n        contentType: 'video/mp4; codecs=\"avc1.640028\"',\n        encryptionScheme: \"cenc\",\n        robustness: \"SW_SECURE_DECODE\", // Widevine L3\n      },\n    ],\n  },\n];\n\ngetMediaStatus(config);\n\nasync function getMediaStatus(config) {\n  try {\n    const mediaKeySystemAccess = await navigator.requestMediaKeySystemAccess(\n      \"com.widevine.alpha\",\n      config,\n    );\n    const mediaKeys = await mediaKeySystemAccess.createMediaKeys();\n    const mediaStatus = await mediaKeys.getStatusForPolicy({\n      minHdcpVersion: \"2.2\",\n    });\n    log(mediaStatus);\n\n    // Get the content or fallback to an alternative if the\n    // keys are not usable\n    if (mediaStatus === \"usable\") {\n      console.log(\"HDCP 2.2 can be enforced.\");\n      // Fetch the high resolution protected content\n    } else {\n      log(\"HDCP 2.2 cannot be enforced\");\n      // Fallback other content, get license, etc.\n    }\n  } catch (error) {\n    log(error);\n  }\n}\n</code></pre></div>\n<h4 id=\"results\">Results</h4><div class=\"code-example\"><div class=\"example-header\"></div><iframe class=\"sample-code-frame\" title=\"Check if keys are usable with HDCP restriction sample\" id=\"frame_check_if_keys_are_usable_with_hdcp_restriction\" src=\"about:blank\" data-live-path=\"/en-US/docs/Web/API/MediaKeys\" data-live-id=\"check_if_keys_are_usable_with_hdcp_restriction\" sandbox=\"allow-same-origin allow-scripts\" loading=\"lazy\"></iframe></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/encrypted-media/#mediakeys-interface","title":"Encrypted Media Extensions"}],"query":"api.MediaKeys"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.MediaKeys"}}],"toc":[{"text":"Instance properties","id":"instance_properties"},{"text":"Instance methods","id":"instance_methods"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"}],"summary":"The MediaKeys interface of Encrypted Media Extensions API represents a set of keys that an associated HTMLMediaElement can use for decryption of media data during playback.","popularity":0.0022,"modified":"2020-10-15T21:33:46.038Z","other_translations":[],"pageType":"web-api-interface","source":{"folder":"en-us/web/api/mediakeys","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/api/mediakeys/index.md","last_commit_url":"https://github.com/mdn/content/commit/null","filename":"index.md"},"short_title":"MediaKeys","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/MediaKeys","title":"MediaKeys"}],"pageTitle":"MediaKeys - Web APIs | MDN","noIndexing":false},"url":"/en-US/docs/Web/API/MediaKeys"}