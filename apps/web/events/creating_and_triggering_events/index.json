{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Creating and triggering events","mdn_url":"/en-US/docs/Web/Events/Creating_and_triggering_events","locale":"en-US","native":"English (US)","sidebarHTML":"\n  <ol>\n    <li><a href=\"/en-US/docs/Learn_web_development/Core/Scripting/Events\">Introduction to events</a></li>\n    <li><a href=\"/en-US/docs/Web/Events/Event_handlers\">Event handlers (overview)</a></li>\n    <li><a href=\"/en-US/docs/Web/Events\">Event reference</a></li>\n  </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>This article demonstrates how to create and dispatch DOM events. Such events are commonly called <strong>synthetic events</strong>, as opposed to the events fired by the browser itself.</p>"}},{"type":"prose","value":{"id":"creating_custom_events","title":"Creating custom events","isH3":false,"content":"<p>Events can be created with the <a href=\"/en-US/docs/Web/API/Event\"><code>Event</code></a> constructor as follows:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>const event = new Event(\"build\");\n\n// Listen for the event.\nelem.addEventListener(\n  \"build\",\n  (e) =&gt; {\n    /* … */\n  },\n  false,\n);\n\n// Dispatch the event.\nelem.dispatchEvent(event);\n</code></pre></div>\n<p>The above code example uses the <a href=\"/en-US/docs/Web/API/EventTarget/dispatchEvent\">EventTarget.dispatchEvent()</a> method.</p>\n<p>This constructor is supported in most modern browsers. For a more verbose approach, see <a href=\"#the_old-fashioned_way\">the old-fashioned way</a> below.</p>"}},{"type":"prose","value":{"id":"adding_custom_data_–_customevent","title":"Adding custom data – CustomEvent()","isH3":true,"content":"<p>\n  To add more data to the event object, the <a href=\"/en-US/docs/Web/API/CustomEvent\">CustomEvent</a> interface exists and the <strong>detail</strong> property can be used to pass custom data.\n  For example, the event could be created as follows:\n</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>const event = new CustomEvent(\"build\", { detail: elem.dataset.time });\n</code></pre></div>\n<p>This will then allow you to access the additional data in the event listener:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>function eventHandler(e) {\n  console.log(`The time is: ${e.detail}`);\n}\n</code></pre></div>"}},{"type":"prose","value":{"id":"the_old-fashioned_way","title":"The old-fashioned way","isH3":true,"content":"<p>The older approach to creating events uses APIs inspired by Java. The following shows an example with <a href=\"/en-US/docs/Web/API/Document/createEvent\"><code>document.createEvent()</code></a>:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>// Create the event.\nconst event = document.createEvent(\"Event\");\n\n// Define that the event name is 'build'.\nevent.initEvent(\"build\");\n\n// Listen for the event.\nelem.addEventListener(\n  \"build\",\n  (e) =&gt; {\n    // e.target matches elem\n  },\n  false,\n);\n\n// target can be any Element or other EventTarget.\nelem.dispatchEvent(event);\n</code></pre></div>"}},{"type":"prose","value":{"id":"event_bubbling","title":"Event bubbling","isH3":true,"content":"<p>It is often desirable to trigger an event from a child element, and have an ancestor catch it; optionally, with data:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">html</span></div><pre class=\"brush: html notranslate\"><code>&lt;form&gt;\n  &lt;textarea&gt;&lt;/textarea&gt;\n&lt;/form&gt;\n</code></pre></div>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>const form = document.querySelector(\"form\");\nconst textarea = document.querySelector(\"textarea\");\n\n// Create a new event, allow bubbling, and provide any data you want to pass to the \"detail\" property\nconst eventAwesome = new CustomEvent(\"awesome\", {\n  bubbles: true,\n  detail: { text: () =&gt; textarea.value },\n});\n\n// The form element listens for the custom \"awesome\" event and then consoles the output of the passed text() method\nform.addEventListener(\"awesome\", (e) =&gt; console.log(e.detail.text()));\n\n// As the user types, the textarea inside the form dispatches/triggers the event to fire, and uses itself as the starting point\ntextarea.addEventListener(\"input\", (e) =&gt; e.target.dispatchEvent(eventAwesome));\n</code></pre></div>"}},{"type":"prose","value":{"id":"creating_and_dispatching_events_dynamically","title":"Creating and dispatching events dynamically","isH3":true,"content":"<p>Elements can listen for events that haven't been created yet:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">html</span></div><pre class=\"brush: html notranslate\"><code>&lt;form&gt;\n  &lt;textarea&gt;&lt;/textarea&gt;\n&lt;/form&gt;\n</code></pre></div>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>const form = document.querySelector(\"form\");\nconst textarea = document.querySelector(\"textarea\");\n\nform.addEventListener(\"awesome\", (e) =&gt; console.log(e.detail.text()));\n\ntextarea.addEventListener(\"input\", function () {\n  // Create and dispatch/trigger an event on the fly\n  // Note: Optionally, we've also leveraged the \"function expression\" (instead of the \"arrow function expression\") so \"this\" will represent the element\n  this.dispatchEvent(\n    new CustomEvent(\"awesome\", {\n      bubbles: true,\n      detail: { text: () =&gt; textarea.value },\n    }),\n  );\n});\n</code></pre></div>"}},{"type":"prose","value":{"id":"triggering_built-in_events","title":"Triggering built-in events","isH3":false,"content":"<p>This example demonstrates simulating a click (that is programmatically generating a click event) on a checkbox using DOM methods. <a href=\"https://mdn.dev/archives/media/samples/domref/dispatchEvent.html\" class=\"external\" target=\"_blank\">View the example in action.</a></p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>function simulateClick() {\n  const event = new MouseEvent(\"click\", {\n    view: window,\n    bubbles: true,\n    cancelable: true,\n  });\n  const cb = document.getElementById(\"checkbox\");\n  const cancelled = !cb.dispatchEvent(event);\n\n  if (cancelled) {\n    // A handler called preventDefault.\n    alert(\"cancelled\");\n  } else {\n    // None of the handlers called preventDefault.\n    alert(\"not cancelled\");\n  }\n}\n</code></pre></div>"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/CustomEvent/CustomEvent\">CustomEvent()</a></li>\n  <li><a href=\"/en-US/docs/Web/API/Document/createEvent\"><code>document.createEvent()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/API/Event/initEvent\"><code>Event.initEvent()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/API/EventTarget/dispatchEvent\"><code>EventTarget.dispatchEvent()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/API/EventTarget/addEventListener\"><code>EventTarget.addEventListener()</code></a></li>\n</ul>"}}],"toc":[{"text":"Creating custom events","id":"creating_custom_events"},{"text":"Triggering built-in events","id":"triggering_built-in_events"},{"text":"See also","id":"see_also"}],"summary":"This article demonstrates how to create and dispatch DOM events. Such events are commonly called synthetic events, as opposed to the events fired by the browser itself.","popularity":0.0703,"modified":"2020-06-30T17:30:47.991Z","other_translations":[],"pageType":"guide","source":{"folder":"en-us/web/events/creating_and_triggering_events","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/events/creating_and_triggering_events/index.md","last_commit_url":"https://github.com/mdn/content/commit/null","filename":"index.md"},"short_title":"Creating and triggering events","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/Events","title":"Event reference"},{"uri":"/en-US/docs/Web/Events/Creating_and_triggering_events","title":"Creating and triggering events"}],"pageTitle":"Creating and triggering events - Event reference | MDN","noIndexing":false},"url":"/en-US/docs/Web/Events/Creating_and_triggering_events"}