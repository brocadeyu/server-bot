{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Parsing and serializing XML","mdn_url":"/en-US/docs/Web/XML/Parsing_and_serializing_XML","locale":"en-US","native":"English (US)","sidebarHTML":"\n<ol><li><em><a href=\"/en-US/docs/Web/XML/Parsing_and_serializing_XML\" aria-current=\"page\">Parsing and serializing XML</a></em></li><li><a href=\"/en-US/docs/Web/XML/XML_introduction\">XML introduction</a></li></ol>\n","sidebarMacro":"QuickLinksWithSubpages","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>At times, you may need to parse <a href=\"/en-US/docs/Glossary/XML\">XML</a> content and convert it into a <a href=\"/en-US/docs/Glossary/DOM\">DOM</a> tree, or, conversely, serialize an existing DOM tree into XML. In this article, we'll look at the objects provided by the web platform to make the common tasks of serializing and parsing XML easy.</p>\n<dl>\n  <dt id=\"xmlserializer\"><a href=\"/en-US/docs/Web/API/XMLSerializer\"><code>XMLSerializer</code></a></dt>\n  <dd>\n    <p>Serializes DOM trees, converting them into strings containing XML.</p>\n  </dd>\n  <dt id=\"domparser\"><a href=\"/en-US/docs/Web/API/DOMParser\"><code>DOMParser</code></a></dt>\n  <dd>\n    <p>Constructs a DOM tree by parsing a string containing XML, returning a <a href=\"/en-US/docs/Web/API/XMLDocument\"><code>XMLDocument</code></a> or <a href=\"/en-US/docs/Web/API/Document\"><code>Document</code></a> as appropriate based on the input data.</p>\n  </dd>\n  <dt id=\"fetch\"><a href=\"/en-US/docs/Web/API/Window/fetch\" title=\"fetch()\"><code>fetch()</code></a></dt>\n  <dd>\n    <p>Loads content from a URL. XML content is returned as a text string which you can parse using <code>DOMParser</code>.</p>\n  </dd>\n  <dt id=\"xmlhttprequest\"><a href=\"/en-US/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a></dt>\n  <dd>\n    <p>The precursor to <code>fetch()</code>. Unlike the <code>fetch()</code> API, <code>XMLHttpRequest</code> can return a resource as a <code>Document</code>, via its <a href=\"/en-US/docs/Web/API/XMLHttpRequest/responseXML\" title=\"responseXML\"><code>responseXML</code></a> property.</p>\n  </dd>\n  <dt id=\"xpath\"><a href=\"/en-US/docs/Web/XPath\">XPath</a></dt>\n  <dd>\n    <p>A technology for creating strings that contain addresses for specific portions of an XML document, and locating XML nodes based on those addresses.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"creating_an_xml_document","title":"Creating an XML document","isH3":false,"content":"<p>Using one of the following approaches to create an XML document (which is an instance of <a href=\"/en-US/docs/Web/API/Document\"><code>Document</code></a>).</p>"}},{"type":"prose","value":{"id":"parsing_strings_into_dom_trees","title":"Parsing strings into DOM trees","isH3":true,"content":"<p>This example converts an XML fragment in a string into a DOM tree using a <a href=\"/en-US/docs/Web/API/DOMParser\"><code>DOMParser</code></a>:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>const xmlStr = '&lt;q id=\"a\"&gt;&lt;span id=\"b\"&gt;hey!&lt;/span&gt;&lt;/q&gt;';\nconst parser = new DOMParser();\nconst doc = parser.parseFromString(xmlStr, \"application/xml\");\n// print the name of the root element or error message\nconst errorNode = doc.querySelector(\"parsererror\");\nif (errorNode) {\n  console.log(\"error while parsing\");\n} else {\n  console.log(doc.documentElement.nodeName);\n}\n</code></pre></div>"}},{"type":"prose","value":{"id":"parsing_url-addressable_resources_into_dom_trees","title":"Parsing URL-addressable resources into DOM trees","isH3":true,"content":"<h4 id=\"using_fetch\">Using fetch</h4>\n<p>Here is sample code that reads and parses a URL-addressable XML file into a DOM tree:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>fetch(\"example.xml\")\n  .then((response) =&gt; response.text())\n  .then((text) =&gt; {\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(text, \"text/xml\");\n    console.log(doc.documentElement.nodeName);\n  });\n</code></pre></div>\n<p>This code fetches the resource as a text string, then uses <a href=\"/en-US/docs/Web/API/DOMParser/parseFromString\"><code>DOMParser.parseFromString()</code></a> to construct an <a href=\"/en-US/docs/Web/API/XMLDocument\"><code>XMLDocument</code></a>.</p>\n<p>If the document is <a href=\"/en-US/docs/Glossary/HTML\">HTML</a>, the code shown above will return a <a href=\"/en-US/docs/Web/API/Document\"><code>Document</code></a>. If the document is XML, the resulting object is actually an <code>XMLDocument</code>. The two types are essentially the same; the difference is largely historical, although differentiating has some practical benefits as well.</p>\n<div class=\"notecard note\">\n  <p><strong>Note:</strong> There is in fact an <a href=\"/en-US/docs/Web/API/HTMLDocument\"><code>HTMLDocument</code></a> interface as well, but it is not necessarily an independent type. In some browsers it is, while in others it is an alias for the <code>Document</code> interface.</p>\n</div>"}},{"type":"prose","value":{"id":"serializing_an_xml_document","title":"Serializing an XML document","isH3":false,"content":"<p>Given a <a href=\"/en-US/docs/Web/API/Document\"><code>Document</code></a>, you can serialize the document's DOM tree back into XML using the <a href=\"/en-US/docs/Web/API/XMLSerializer/serializeToString\"><code>XMLSerializer.serializeToString()</code></a> method.</p>\n<p>Use the following approaches to serialize the contents of the XML document you created in the previous section.</p>"}},{"type":"prose","value":{"id":"serializing_dom_trees_to_strings","title":"Serializing DOM trees to strings","isH3":true,"content":"<p>First, create a DOM tree as described in <a href=\"/en-US/docs/Web/API/Document_Object_Model/Using_the_Document_Object_Model\">Using the Document Object Model</a>. Alternatively, use a DOM tree obtained from <a href=\"/en-US/docs/Web/API/Window/fetch\" title=\"fetch()\"><code>fetch()</code></a>.</p>\n<p>To serialize the DOM tree <code>doc</code> into XML text, call <a href=\"/en-US/docs/Web/API/XMLSerializer/serializeToString\"><code>XMLSerializer.serializeToString()</code></a>:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>const serializer = new XMLSerializer();\nconst xmlStr = serializer.serializeToString(doc);\n</code></pre></div>"}},{"type":"prose","value":{"id":"serializing_html_documents","title":"Serializing HTML documents","isH3":true,"content":"<p>If the DOM you have is an HTML document, you can serialize using <code>serializeToString()</code>, but there is a simpler option: just use the <a href=\"/en-US/docs/Web/API/Element/innerHTML\"><code>Element.innerHTML</code></a> property (if you want just the descendants of the specified node) or the <a href=\"/en-US/docs/Web/API/Element/outerHTML\"><code>Element.outerHTML</code></a> property if you want the node and all its descendants.</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>const docInnerHtml = document.documentElement.innerHTML;\n</code></pre></div>\n<p>As a result, <code>docInnerHtml</code> is a string containing the HTML of the contents of the document; that is, the <a href=\"/en-US/docs/Web/HTML/Element/body\"><code>&lt;body&gt;</code></a> element's contents.</p>\n<p>You can get HTML corresponding to the <code>&lt;body&gt;</code> <em>and</em> its descendants with this code:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>const docOuterHtml = document.documentElement.outerHTML;\n</code></pre></div>"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/XPath\">XPath</a></li>\n  <li><a href=\"/en-US/docs/Web/API/Window/fetch\" title=\"fetch()\"><code>fetch()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a></li>\n  <li><a href=\"/en-US/docs/Web/API/Document\"><code>Document</code></a>, <a href=\"/en-US/docs/Web/API/XMLDocument\"><code>XMLDocument</code></a>, and <a href=\"/en-US/docs/Web/API/HTMLDocument\"><code>HTMLDocument</code></a></li>\n</ul>"}}],"toc":[{"text":"Creating an XML document","id":"creating_an_xml_document"},{"text":"Serializing an XML document","id":"serializing_an_xml_document"},{"text":"See also","id":"see_also"}],"summary":"At times, you may need to parse XML content and convert it into a DOM tree, or, conversely, serialize an existing DOM tree into XML. In this article, we'll look at the objects provided by the web platform to make the common tasks of serializing and parsing XML easy.","popularity":0.0121,"modified":"2020-09-09T05:19:22.895Z","other_translations":[],"pageType":"guide","source":{"folder":"en-us/web/xml/parsing_and_serializing_xml","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/xml/parsing_and_serializing_xml/index.md","last_commit_url":"https://github.com/mdn/content/commit/null","filename":"index.md"},"short_title":"Parsing and serializing XML","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/XML","title":"XML: Extensible Markup Language"},{"uri":"/en-US/docs/Web/XML/Parsing_and_serializing_XML","title":"Parsing and serializing XML"}],"pageTitle":"Parsing and serializing XML - XML: Extensible Markup Language | MDN","noIndexing":false},"url":"/en-US/docs/Web/XML/Parsing_and_serializing_XML"}