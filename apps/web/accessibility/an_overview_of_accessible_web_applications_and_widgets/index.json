{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{"macros":[{"id":"macro0","fixable":false,"suggestion":null,"explanation":"Wrong xref macro used (consider changing which macro you use). Error processing path /en-US/docs/Learn/Accessibility/","name":"MacroWrongXRefError","error":{},"errorStack":"Error: Wrong xref macro used (consider changing which macro you use). Error processing path /en-US/docs/Learn/Accessibility/\n    at Object.recordNonFatalError (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/render.js:90:23)\n    at Object.smartLink (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/api/web.js:95:37)\n    at renderSubsection (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/AccessibilitySidebar.ejs\":119:24)\n    at renderSection (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/AccessibilitySidebar.ejs\":142:21)\n    at async renderSidebar (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/AccessibilitySidebar.ejs\":152:15)\n    at async eval (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/AccessibilitySidebar.ejs\":160:16)","offset":6,"line":7,"column":1,"macroName":"AccessibilitySidebar","sourceContext":"> | {{AccessibilitySidebar}}\n    ^\n  | <p>Most JavaScript libraries offer a library of client-side widgets that mimic the behavior of familiar desktop interfaces. Sliders, menu bars, file list views, and more can be built with a combination of JavaScript, CSS, and HTML. Since the HTML4 specification doesn't provide built-in tags that semantically describe these kinds of widgets, developers typically resort to using generic elements such as {{HTMLElement('div')}} and {{HTMLElement('span')}}. While this results in a widget that looks like its desktop counterpart, there usually isn't enough semantic information in the markup to be usable by an assistive technology.</p>\n  | <h2>The problem</h2>","fatal":false,"macroSource":"{{AccessibilitySidebar}}","filepath":"/Users/yjb/Project/content/files/en-us/web/accessibility/an_overview_of_accessible_web_applications_and_widgets/index.md"},{"id":"macro1","fixable":false,"suggestion":null,"explanation":"Wrong xref macro used (consider changing which macro you use). Error processing path /en-US/docs/Learn/Accessibility/What_is_accessibility","name":"MacroWrongXRefError","error":{},"errorStack":"Error: Wrong xref macro used (consider changing which macro you use). Error processing path /en-US/docs/Learn/Accessibility/What_is_accessibility\n    at Object.recordNonFatalError (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/render.js:90:23)\n    at Object.smartLink (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/api/web.js:95:37)\n    at renderSubsection (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/AccessibilitySidebar.ejs\":119:24)\n    at renderSection (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/AccessibilitySidebar.ejs\":142:21)\n    at async renderSidebar (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/AccessibilitySidebar.ejs\":152:15)\n    at async eval (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/AccessibilitySidebar.ejs\":160:16)","offset":6,"line":7,"column":1,"macroName":"AccessibilitySidebar","sourceContext":"> | {{AccessibilitySidebar}}\n    ^\n  | <p>Most JavaScript libraries offer a library of client-side widgets that mimic the behavior of familiar desktop interfaces. Sliders, menu bars, file list views, and more can be built with a combination of JavaScript, CSS, and HTML. Since the HTML4 specification doesn't provide built-in tags that semantically describe these kinds of widgets, developers typically resort to using generic elements such as {{HTMLElement('div')}} and {{HTMLElement('span')}}. While this results in a widget that looks like its desktop counterpart, there usually isn't enough semantic information in the markup to be usable by an assistive technology.</p>\n  | <h2>The problem</h2>","fatal":false,"macroSource":"{{AccessibilitySidebar}}","filepath":"/Users/yjb/Project/content/files/en-us/web/accessibility/an_overview_of_accessible_web_applications_and_widgets/index.md"},{"id":"macro2","fixable":false,"suggestion":null,"explanation":"Wrong xref macro used (consider changing which macro you use). Error processing path /en-US/docs/Learn/Accessibility/HTML","name":"MacroWrongXRefError","error":{},"errorStack":"Error: Wrong xref macro used (consider changing which macro you use). Error processing path /en-US/docs/Learn/Accessibility/HTML\n    at Object.recordNonFatalError (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/render.js:90:23)\n    at Object.smartLink (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/api/web.js:95:37)\n    at renderSubsection (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/AccessibilitySidebar.ejs\":119:24)\n    at renderSection (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/AccessibilitySidebar.ejs\":142:21)\n    at async renderSidebar (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/AccessibilitySidebar.ejs\":152:15)\n    at async eval (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/AccessibilitySidebar.ejs\":160:16)","offset":6,"line":7,"column":1,"macroName":"AccessibilitySidebar","sourceContext":"> | {{AccessibilitySidebar}}\n    ^\n  | <p>Most JavaScript libraries offer a library of client-side widgets that mimic the behavior of familiar desktop interfaces. Sliders, menu bars, file list views, and more can be built with a combination of JavaScript, CSS, and HTML. Since the HTML4 specification doesn't provide built-in tags that semantically describe these kinds of widgets, developers typically resort to using generic elements such as {{HTMLElement('div')}} and {{HTMLElement('span')}}. While this results in a widget that looks like its desktop counterpart, there usually isn't enough semantic information in the markup to be usable by an assistive technology.</p>\n  | <h2>The problem</h2>","fatal":false,"macroSource":"{{AccessibilitySidebar}}","filepath":"/Users/yjb/Project/content/files/en-us/web/accessibility/an_overview_of_accessible_web_applications_and_widgets/index.md"},{"id":"macro3","fixable":false,"suggestion":null,"explanation":"Wrong xref macro used (consider changing which macro you use). Error processing path /en-US/docs/Learn/Accessibility/CSS_and_JavaScript","name":"MacroWrongXRefError","error":{},"errorStack":"Error: Wrong xref macro used (consider changing which macro you use). Error processing path /en-US/docs/Learn/Accessibility/CSS_and_JavaScript\n    at Object.recordNonFatalError (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/render.js:90:23)\n    at Object.smartLink (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/api/web.js:95:37)\n    at renderSubsection (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/AccessibilitySidebar.ejs\":119:24)\n    at renderSection (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/AccessibilitySidebar.ejs\":142:21)\n    at async renderSidebar (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/AccessibilitySidebar.ejs\":152:15)\n    at async eval (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/AccessibilitySidebar.ejs\":160:16)","offset":6,"line":7,"column":1,"macroName":"AccessibilitySidebar","sourceContext":"> | {{AccessibilitySidebar}}\n    ^\n  | <p>Most JavaScript libraries offer a library of client-side widgets that mimic the behavior of familiar desktop interfaces. Sliders, menu bars, file list views, and more can be built with a combination of JavaScript, CSS, and HTML. Since the HTML4 specification doesn't provide built-in tags that semantically describe these kinds of widgets, developers typically resort to using generic elements such as {{HTMLElement('div')}} and {{HTMLElement('span')}}. While this results in a widget that looks like its desktop counterpart, there usually isn't enough semantic information in the markup to be usable by an assistive technology.</p>\n  | <h2>The problem</h2>","fatal":false,"macroSource":"{{AccessibilitySidebar}}","filepath":"/Users/yjb/Project/content/files/en-us/web/accessibility/an_overview_of_accessible_web_applications_and_widgets/index.md"},{"id":"macro4","fixable":false,"suggestion":null,"explanation":"Wrong xref macro used (consider changing which macro you use). Error processing path /en-US/docs/Learn/Accessibility/WAI-ARIA_basics","name":"MacroWrongXRefError","error":{},"errorStack":"Error: Wrong xref macro used (consider changing which macro you use). Error processing path /en-US/docs/Learn/Accessibility/WAI-ARIA_basics\n    at Object.recordNonFatalError (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/render.js:90:23)\n    at Object.smartLink (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/api/web.js:95:37)\n    at renderSubsection (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/AccessibilitySidebar.ejs\":119:24)\n    at renderSection (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/AccessibilitySidebar.ejs\":142:21)\n    at async renderSidebar (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/AccessibilitySidebar.ejs\":152:15)\n    at async eval (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/AccessibilitySidebar.ejs\":160:16)","offset":6,"line":7,"column":1,"macroName":"AccessibilitySidebar","sourceContext":"> | {{AccessibilitySidebar}}\n    ^\n  | <p>Most JavaScript libraries offer a library of client-side widgets that mimic the behavior of familiar desktop interfaces. Sliders, menu bars, file list views, and more can be built with a combination of JavaScript, CSS, and HTML. Since the HTML4 specification doesn't provide built-in tags that semantically describe these kinds of widgets, developers typically resort to using generic elements such as {{HTMLElement('div')}} and {{HTMLElement('span')}}. While this results in a widget that looks like its desktop counterpart, there usually isn't enough semantic information in the markup to be usable by an assistive technology.</p>\n  | <h2>The problem</h2>","fatal":false,"macroSource":"{{AccessibilitySidebar}}","filepath":"/Users/yjb/Project/content/files/en-us/web/accessibility/an_overview_of_accessible_web_applications_and_widgets/index.md"},{"id":"macro5","fixable":false,"suggestion":null,"explanation":"Wrong xref macro used (consider changing which macro you use). Error processing path /en-US/docs/Learn/Accessibility/Multimedia","name":"MacroWrongXRefError","error":{},"errorStack":"Error: Wrong xref macro used (consider changing which macro you use). Error processing path /en-US/docs/Learn/Accessibility/Multimedia\n    at Object.recordNonFatalError (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/render.js:90:23)\n    at Object.smartLink (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/api/web.js:95:37)\n    at renderSubsection (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/AccessibilitySidebar.ejs\":119:24)\n    at renderSection (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/AccessibilitySidebar.ejs\":142:21)\n    at async renderSidebar (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/AccessibilitySidebar.ejs\":152:15)\n    at async eval (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/AccessibilitySidebar.ejs\":160:16)","offset":6,"line":7,"column":1,"macroName":"AccessibilitySidebar","sourceContext":"> | {{AccessibilitySidebar}}\n    ^\n  | <p>Most JavaScript libraries offer a library of client-side widgets that mimic the behavior of familiar desktop interfaces. Sliders, menu bars, file list views, and more can be built with a combination of JavaScript, CSS, and HTML. Since the HTML4 specification doesn't provide built-in tags that semantically describe these kinds of widgets, developers typically resort to using generic elements such as {{HTMLElement('div')}} and {{HTMLElement('span')}}. While this results in a widget that looks like its desktop counterpart, there usually isn't enough semantic information in the markup to be usable by an assistive technology.</p>\n  | <h2>The problem</h2>","fatal":false,"macroSource":"{{AccessibilitySidebar}}","filepath":"/Users/yjb/Project/content/files/en-us/web/accessibility/an_overview_of_accessible_web_applications_and_widgets/index.md"},{"id":"macro6","fixable":false,"suggestion":null,"explanation":"Wrong xref macro used (consider changing which macro you use). Error processing path /en-US/docs/Learn/Accessibility/Mobile","name":"MacroWrongXRefError","error":{},"errorStack":"Error: Wrong xref macro used (consider changing which macro you use). Error processing path /en-US/docs/Learn/Accessibility/Mobile\n    at Object.recordNonFatalError (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/render.js:90:23)\n    at Object.smartLink (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/api/web.js:95:37)\n    at renderSubsection (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/AccessibilitySidebar.ejs\":119:24)\n    at renderSection (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/AccessibilitySidebar.ejs\":142:21)\n    at async renderSidebar (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/AccessibilitySidebar.ejs\":152:15)\n    at async eval (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/AccessibilitySidebar.ejs\":160:16)","offset":6,"line":7,"column":1,"macroName":"AccessibilitySidebar","sourceContext":"> | {{AccessibilitySidebar}}\n    ^\n  | <p>Most JavaScript libraries offer a library of client-side widgets that mimic the behavior of familiar desktop interfaces. Sliders, menu bars, file list views, and more can be built with a combination of JavaScript, CSS, and HTML. Since the HTML4 specification doesn't provide built-in tags that semantically describe these kinds of widgets, developers typically resort to using generic elements such as {{HTMLElement('div')}} and {{HTMLElement('span')}}. While this results in a widget that looks like its desktop counterpart, there usually isn't enough semantic information in the markup to be usable by an assistive technology.</p>\n  | <h2>The problem</h2>","fatal":false,"macroSource":"{{AccessibilitySidebar}}","filepath":"/Users/yjb/Project/content/files/en-us/web/accessibility/an_overview_of_accessible_web_applications_and_widgets/index.md"},{"id":"macro7","fixable":false,"suggestion":null,"explanation":"Wrong xref macro used (consider changing which macro you use). Error processing path /en-US/docs/Learn/Accessibility/Accessibility_troubleshooting","name":"MacroWrongXRefError","error":{},"errorStack":"Error: Wrong xref macro used (consider changing which macro you use). Error processing path /en-US/docs/Learn/Accessibility/Accessibility_troubleshooting\n    at Object.recordNonFatalError (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/render.js:90:23)\n    at Object.smartLink (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/api/web.js:95:37)\n    at renderSubsection (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/AccessibilitySidebar.ejs\":119:24)\n    at renderSection (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/AccessibilitySidebar.ejs\":142:21)\n    at async renderSidebar (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/AccessibilitySidebar.ejs\":152:15)\n    at async eval (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/AccessibilitySidebar.ejs\":160:16)","offset":6,"line":7,"column":1,"macroName":"AccessibilitySidebar","sourceContext":"> | {{AccessibilitySidebar}}\n    ^\n  | <p>Most JavaScript libraries offer a library of client-side widgets that mimic the behavior of familiar desktop interfaces. Sliders, menu bars, file list views, and more can be built with a combination of JavaScript, CSS, and HTML. Since the HTML4 specification doesn't provide built-in tags that semantically describe these kinds of widgets, developers typically resort to using generic elements such as {{HTMLElement('div')}} and {{HTMLElement('span')}}. While this results in a widget that looks like its desktop counterpart, there usually isn't enough semantic information in the markup to be usable by an assistive technology.</p>\n  | <h2>The problem</h2>","fatal":false,"macroSource":"{{AccessibilitySidebar}}","filepath":"/Users/yjb/Project/content/files/en-us/web/accessibility/an_overview_of_accessible_web_applications_and_widgets/index.md"}]},"title":"An overview of accessible web applications and widgets","mdn_url":"/en-US/docs/Web/Accessibility/An_overview_of_accessible_web_applications_and_widgets","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li class=\"section\"><a href=\"/en-US/docs/Web/Accessibility\">Accessibility</a></li><li><details open=\"\"><summary>Guides</summary><ol><li><a href=\"/en-US/docs/Web/Accessibility/Information_for_Web_authors\">Accessibility information for web authors</a></li><li><a href=\"/en-US/docs/Web/Accessibility/Accessibility:_What_users_can_to_to_browse_safely\">Accessibility: What users can do to browse more safely</a></li><li><em><a href=\"/en-US/docs/Web/Accessibility/An_overview_of_accessible_web_applications_and_widgets\" aria-current=\"page\">An overview of accessible web applications and widgets</a></em></li><li><a href=\"/en-US/docs/Web/Accessibility/Keyboard-navigable_JavaScript_widgets\">Keyboard-navigable JavaScript widgets</a></li><li><a href=\"/en-US/docs/Web/Accessibility/Mobile_accessibility_checklist\">Mobile accessibility checklist</a></li><li><a href=\"/en-US/docs/Web/Accessibility/Understanding_WCAG\">Understanding the Web Content Accessibility Guidelines</a></li><li><a href=\"/en-US/docs/Web/Accessibility/Cognitive_accessibility\">Cognitive accessibility</a></li><li><a href=\"/en-US/docs/Web/Accessibility/Accessibility_and_Spacial_Patterns\">Accessibility and Spacial Patterns</a></li><li><a href=\"/en-US/docs/Web/Accessibility/Understanding_Colors_and_Luminance\">Web Accessibility: Understanding Colors and Luminance</a></li><li><a href=\"/en-US/docs/Web/Accessibility/Seizure_disorders\">Web accessibility for seizures and physical reactions</a></li></ol></details></li><li><details><summary>Learn accessibility</summary><ol><li><a href=\"/en-US/docs/Learn_web_development/Core/Accessibility\" data-flaw-src=\"{{AccessibilitySidebar}}\">Accessibility</a></li><li><a href=\"/en-US/docs/Learn_web_development/Core/Accessibility/What_is_accessibility\" data-flaw-src=\"{{AccessibilitySidebar}}\">What is accessibility?</a></li><li><a href=\"/en-US/docs/Learn_web_development/Core/Accessibility/HTML\" data-flaw-src=\"{{AccessibilitySidebar}}\">HTML: A good basis for accessibility</a></li><li><a href=\"/en-US/docs/Learn_web_development/Core/Accessibility/CSS_and_JavaScript\" data-flaw-src=\"{{AccessibilitySidebar}}\">CSS and JavaScript accessibility best practices</a></li><li><a href=\"/en-US/docs/Learn_web_development/Core/Accessibility/WAI-ARIA_basics\" data-flaw-src=\"{{AccessibilitySidebar}}\">WAI-ARIA basics</a></li><li><a href=\"/en-US/docs/Learn_web_development/Core/Accessibility/Multimedia\" data-flaw-src=\"{{AccessibilitySidebar}}\">Accessible multimedia</a></li><li><a href=\"/en-US/docs/Learn_web_development/Core/Accessibility/Mobile\" data-flaw-src=\"{{AccessibilitySidebar}}\">Mobile accessibility</a></li><li><a href=\"/en-US/docs/Learn_web_development/Core/Accessibility/Accessibility_troubleshooting\" data-flaw-src=\"{{AccessibilitySidebar}}\">Challenge: Accessibility troubleshooting</a></li></ol></details></li><li><details><summary>WCAG</summary><ol><ol><li><a href=\"/en-US/docs/Web/Accessibility/Understanding_WCAG\">Overview</a></li><li><a href=\"/en-US/docs/Web/Accessibility/Understanding_WCAG/Keyboard\">Keyboard</a></li><li><a href=\"/en-US/docs/Web/Accessibility/Understanding_WCAG/Operable\">Operable</a></li><li><a href=\"/en-US/docs/Web/Accessibility/Understanding_WCAG/Perceivable\">Perceivable</a></li><li><a href=\"/en-US/docs/Web/Accessibility/Understanding_WCAG/Robust\">Robust</a></li><li><a href=\"/en-US/docs/Web/Accessibility/Understanding_WCAG/Text_labels_and_names\">Text labels and names</a></li><li><a href=\"/en-US/docs/Web/Accessibility/Understanding_WCAG/Understandable\">Understandable</a></li></ol></ol></details></li><li class=\"section\"><a href=\"/en-US/docs/Web/Accessibility/ARIA\">ARIA</a></li><li><details><summary>ARIA guides</summary><ol><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/ARIA_Guides\">ARIA guides</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions\">ARIA live regions</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/ARIA_Screen_Reader_Implementors_Guide\">ARIA Screen Reader Implementors Guide</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques\">Using ARIA: Roles, states, and properties</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Multipart_labels\">Multipart labels: Using ARIA for labels with embedded fields inside them</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/How_to_file_ARIA-related_bugs\">How to file ARIA-related bugs</a></li></ol></details></li><li><details><summary>ARIA states and properties</summary><ol><ol><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes\">Overview</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-activedescendant\">aria-activedescendant</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-atomic\">aria-atomic</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-autocomplete\">aria-autocomplete</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-braillelabel\">aria-braillelabel</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-brailleroledescription\">aria-brailleroledescription</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-busy\">aria-busy</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-checked\">aria-checked</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-colcount\">aria-colcount</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-colindex\">aria-colindex</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-colindextext\">aria-colindextext</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-colspan\">aria-colspan</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-controls\">aria-controls</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-current\">aria-current</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby\">aria-describedby</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-description\">aria-description</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-details\">aria-details</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-disabled\">aria-disabled</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-dropeffect\">aria-dropeffect</a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-errormessage\">aria-errormessage</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-expanded\">aria-expanded</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-flowto\">aria-flowto</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-grabbed\">aria-grabbed</a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-haspopup\">aria-haspopup</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-hidden\">aria-hidden</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-invalid\">aria-invalid</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-keyshortcuts\">aria-keyshortcuts</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-label\">aria-label</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby\">aria-labelledby</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-level\">aria-level</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-live\">aria-live</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-modal\">aria-modal</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-multiline\">aria-multiline</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-multiselectable\">aria-multiselectable</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-orientation\">aria-orientation</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-owns\">aria-owns</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-placeholder\">aria-placeholder</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-posinset\">aria-posinset</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-pressed\">aria-pressed</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-readonly\">aria-readonly</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-relevant\">aria-relevant</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-required\">aria-required</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-roledescription\">aria-roledescription</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-rowcount\">aria-rowcount</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-rowindex\">aria-rowindex</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-rowindextext\">aria-rowindextext</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-rowspan\">aria-rowspan</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-selected\">aria-selected</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-setsize\">aria-setsize</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-sort\">aria-sort</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-valuemax\">aria-valuemax</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-valuemin\">aria-valuemin</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-valuenow\">aria-valuenow</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-valuetext\">aria-valuetext</a></li></ol></ol></details></li><li><details><summary>ARIA roles</summary><ol><ol><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles\">Overview</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/alert_role\">ARIA: alert role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/alertdialog_role\">ARIA: alertdialog role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/application_role\">ARIA: application role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/article_role\">ARIA: article role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/banner_role\">ARIA: banner role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/button_role\">ARIA: button role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/cell_role\">ARIA: cell role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/checkbox_role\">ARIA: checkbox role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/columnheader_role\">ARIA: columnheader role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/combobox_role\">ARIA: combobox role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/command_role\">ARIA: command role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/comment_role\">ARIA: comment role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/complementary_role\">ARIA: complementary role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/composite_role\">ARIA: composite role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/contentinfo_role\">ARIA: contentinfo role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/definition_role\">ARIA: definition role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/dialog_role\">ARIA: dialog role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/directory_role\">ARIA: directory role</a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/document_role\">ARIA: document role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/structural_roles\">ARIA: document structural roles</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/feed_role\">ARIA: feed role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/figure_role\">ARIA: figure role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/form_role\">ARIA: form role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/generic_role\">ARIA: generic role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/grid_role\">ARIA: grid role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/gridcell_role\">ARIA: gridcell role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/group_role\">ARIA: group role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/heading_role\">ARIA: heading role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/img_role\">ARIA: img role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/input_role\">ARIA: input role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/landmark_role\">ARIA: landmark role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/link_role\">ARIA: link role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/list_role\">ARIA: list role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/listbox_role\">ARIA: listbox role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/listitem_role\">ARIA: listitem role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/log_role\">ARIA: log role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/main_role\">ARIA: main role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/mark_role\">ARIA: mark role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/marquee_role\">ARIA: marquee role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/math_role\">ARIA: math role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/menu_role\">ARIA: menu role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/menubar_role\">ARIA: menubar role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/menuitem_role\">ARIA: menuitem role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/menuitemcheckbox_role\">ARIA: menuitemcheckbox role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/menuitemradio_role\">ARIA: menuitemradio role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/meter_role\">ARIA: meter role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/navigation_role\">ARIA: navigation role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/none_role\">ARIA: none role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/note_role\">ARIA: note role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/option_role\">ARIA: option role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/presentation_role\">ARIA: presentation role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/progressbar_role\">ARIA: progressbar role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/radio_role\">ARIA: radio role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/radiogroup_role\">ARIA: radiogroup role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/range_role\">ARIA: range role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/region_role\">ARIA: region role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/roletype_role\">ARIA: roletype role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/row_role\">ARIA: row role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/rowgroup_role\">ARIA: rowgroup role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/rowheader_role\">ARIA: rowheader role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/scrollbar_role\">ARIA: scrollbar role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/search_role\">ARIA: search role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/searchbox_role\">ARIA: searchbox role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/section_role\">ARIA: section role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/sectionhead_role\">ARIA: sectionhead role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/select_role\">ARIA: select role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/separator_role\">ARIA: separator role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/slider_role\">ARIA: slider role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/spinbutton_role\">ARIA: spinbutton role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/status_role\">ARIA: status role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/structure_role\">ARIA: structure role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/suggestion_role\">ARIA: suggestion role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/switch_role\">ARIA: switch role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/tab_role\">ARIA: tab role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/table_role\">ARIA: table role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/tablist_role\">ARIA: tablist role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/tabpanel_role\">ARIA: tabpanel role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/term_role\">ARIA: term role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/textbox_role\">ARIA: textbox role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/timer_role\">ARIA: timer role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/toolbar_role\">ARIA: toolbar role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/tooltip_role\">ARIA: tooltip role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/tree_role\">ARIA: tree role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/treegrid_role\">ARIA: treegrid role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/treeitem_role\">ARIA: treeitem role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/widget_role\">ARIA: widget role</a></li><li><a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/window_role\">ARIA: window role</a></li></ol></ol></details></li></ol>","sidebarMacro":"AccessibilitySidebar","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Most JavaScript libraries offer a library of client-side widgets that mimic the behavior of familiar desktop interfaces. Sliders, menu bars, file list views, and more can be built with a combination of JavaScript, CSS, and HTML. Since the HTML4 specification doesn't provide built-in tags that semantically describe these kinds of widgets, developers typically resort to using generic elements such as <a href=\"/en-US/docs/Web/HTML/Element/div\"><code>&lt;div&gt;</code></a> and <a href=\"/en-US/docs/Web/HTML/Element/span\"><code>&lt;span&gt;</code></a>. While this results in a widget that looks like its desktop counterpart, there usually isn't enough semantic information in the markup to be usable by an assistive technology.</p>"}},{"type":"prose","value":{"id":"the_problem","title":"The problem","isH3":false,"content":"<p>Dynamic content on a web page can be particularly problematic for users who, for whatever reason, are unable to view the screen. Stock tickers, live twitter feed updates, progress indicators, and similar content modify the DOM in ways that an assistive technology (AT) may not be aware of. That's where <a href=\"/en-US/docs/Web/Accessibility/ARIA\">ARIA</a> comes in.</p>\n<p><em>Example 1: Markup for a tabs widget built without ARIA labeling. There's no information in the markup to describe the widget's form and function.</em></p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">html</span></div><pre class=\"brush: html notranslate\"><code>&lt;!-- This is a tabs widget. How would you know, looking only at the markup? --&gt;\n&lt;ol&gt;\n  &lt;li id=\"ch1Tab\"&gt;\n    &lt;a href=\"#ch1Panel\"&gt;Chapter 1&lt;/a&gt;\n  &lt;/li&gt;\n  &lt;li id=\"ch2Tab\"&gt;\n    &lt;a href=\"#ch2Panel\"&gt;Chapter 2&lt;/a&gt;\n  &lt;/li&gt;\n  &lt;li id=\"quizTab\"&gt;\n    &lt;a href=\"#quizPanel\"&gt;Quiz&lt;/a&gt;\n  &lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;div&gt;\n  &lt;div id=\"ch1Panel\"&gt;Chapter 1 content goes here&lt;/div&gt;\n  &lt;div id=\"ch2Panel\"&gt;Chapter 2 content goes here&lt;/div&gt;\n  &lt;div id=\"quizPanel\"&gt;Quiz content goes here&lt;/div&gt;\n&lt;/div&gt;\n</code></pre></div>\n<p><em>Example 2: How the tabs widget might be styled visually. Users might recognize it visually, but there are no machine-readable semantics for an assistive technology.</em>\n  <img src=\"/en-US/docs/Web/Accessibility/An_overview_of_accessible_web_applications_and_widgets/tabs_widget.png\" alt=\"Screenshot of the tabs widget\" width=\"857\" height=\"457\" loading=\"lazy\">\n</p>"}},{"type":"prose","value":{"id":"aria","title":"ARIA","isH3":false,"content":"<p><strong>ARIA</strong> enables developers to describe their widgets in more detail by adding special attributes to the markup. Designed to fill the gap between standard HTML tags and the desktop-style controls found in dynamic web applications, ARIA provides roles and states that describe the behavior of most familiar UI widgets.</p>\n<div class=\"notecard warning\">\n  <p><strong>Warning:</strong> Many of these were later added when browsers didn't fully support modern HTML features. <strong>Developers should always prefer using the correct semantic HTML element over using ARIA</strong>.</p>\n</div>\n<p>The ARIA specification is split up into three different types of attributes: roles, states, and properties. Roles describe widgets that aren't otherwise available in HTML 4, such as sliders, menu bars, tabs, and dialogs. Properties describe characteristics of these widgets, such as if they are draggable, have a required element, or have a popup associated with them. States describe the current interaction state of an element, informing the assistive technology if it is busy, disabled, selected, or hidden.</p>\n<p>ARIA attributes are interpreted automatically by the browser and translated to the operating system's native accessibility APIs. So an element with role=\"slider\" will be controlled in the same way as a native slider is controlled on the operating system.</p>\n<p>This provides a much more consistent user experience than was possible in the previous generation of web applications, since assistive technology users can apply all of their knowledge of how desktop applications work when they are using web-based applications.</p>\n<p><em>Example 3: Markup for the tabs widget with ARIA attributes added.</em></p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">html</span></div><pre class=\"brush: html notranslate\"><code>&lt;!-- Now *these* are Tabs! --&gt;\n&lt;!-- We've added role attributes to describe the tab list and each tab. --&gt;\n&lt;ol role=\"tablist\"&gt;\n  &lt;li id=\"ch1Tab\" role=\"tab\"&gt;\n    &lt;a href=\"#ch1Panel\"&gt;Chapter 1&lt;/a&gt;\n  &lt;/li&gt;\n  &lt;li id=\"ch2Tab\" role=\"tab\"&gt;\n    &lt;a href=\"#ch2Panel\"&gt;Chapter 2&lt;/a&gt;\n  &lt;/li&gt;\n  &lt;li id=\"quizTab\" role=\"tab\"&gt;\n    &lt;a href=\"#quizPanel\"&gt;Quiz&lt;/a&gt;\n  &lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;div&gt;\n  &lt;!-- Notice the role and aria-labelledby attributes we've added to describe these panels. --&gt;\n  &lt;div id=\"ch1Panel\" role=\"tabpanel\" aria-labelledby=\"ch1Tab\"&gt;\n    Chapter 1 content goes here\n  &lt;/div&gt;\n  &lt;div id=\"ch2Panel\" role=\"tabpanel\" aria-labelledby=\"ch2Tab\"&gt;\n    Chapter 2 content goes here\n  &lt;/div&gt;\n  &lt;div id=\"quizPanel\" role=\"tabpanel\" aria-labelledby=\"quizTab\"&gt;\n    Quiz content goes here\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre></div>\n<p>ARIA is <a href=\"https://caniuse.com/#feat=wai-aria\" class=\"external\" target=\"_blank\">well supported</a> by all major browsers and many assistive technologies.</p>"}},{"type":"prose","value":{"id":"presentational_changes","title":"Presentational changes","isH3":true,"content":"<p>Dynamic presentational changes include using CSS to change the appearance of content (such as a red border around invalid data, or changing the background color of a checked checkbox), as well as showing or hiding content.</p>\n<h4 id=\"state_changes\">State changes</h4>\n<p>ARIA provides attributes for declaring the current state of a UI widget. Examples include (but are certainly not limited to):</p>\n<dl>\n  <dt id=\"aria-checked\"><a href=\"#aria-checked\"><code>aria-checked</code></a></dt>\n  <dd>\n    <p>Indicates the state of a checkbox or radio button.</p>\n  </dd>\n  <dt id=\"aria-disabled\"><a href=\"#aria-disabled\"><code>aria-disabled</code></a></dt>\n  <dd>\n    <p>Indicates that an element is visible but not editable or otherwise operable.</p>\n  </dd>\n  <dt id=\"aria-grabbed\"><a href=\"#aria-grabbed\"><code>aria-grabbed</code></a></dt>\n  <dd>\n    <p>Indicates the 'grabbed' state of an object in a drag-and-drop operation.</p>\n  </dd>\n</dl>\n<p>(For a full list of ARIA states, consult the <a href=\"https://www.w3.org/TR/wai-aria-1.1/#introstates\" class=\"external\" target=\"_blank\">ARIA list of states and properties</a>.)</p>\n<p>Developers should use ARIA states to indicate the state of UI widget elements and use CSS attribute selectors to alter the visual appearance based on the state changes (rather than using script to change a class name on the element).</p>\n<h4 id=\"visibility_changes\">Visibility changes</h4>\n<p>When content visibility is changed (i.e., an element is hidden or shown), developers should change the <strong><code>aria-hidden</code></strong> property value. The techniques described above should be used to declare CSS to visually hide an element using <code>display:none</code>.</p>\n<p>Here is an example of a tooltip that uses <strong><code>aria-hidden</code></strong> to control the visibility of the tooltip. The example shows a simple web form with tooltips containing instructions associated with the entry fields.</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">html</span></div><pre class=\"brush: html notranslate\"><code>&lt;div class=\"text\"&gt;\n  &lt;label id=\"tp1-label\" for=\"first\"&gt;First Name:&lt;/label&gt;\n  &lt;input\n    type=\"text\"\n    id=\"first\"\n    name=\"first\"\n    size=\"20\"\n    aria-labelledby=\"tp1-label\"\n    aria-describedby=\"tp1\"\n    aria-required=\"false\" /&gt;\n  &lt;div id=\"tp1\" class=\"tooltip\" role=\"tooltip\" aria-hidden=\"true\"&gt;\n    Your first name is optional\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre></div>\n<p>The CSS for this markup is shown in the following code. Note that there is no custom classname used, only the status of the <strong><code>aria-hidden</code></strong> attribute.</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">css</span></div><pre class=\"brush: css notranslate\"><code>div.tooltip[aria-hidden=\"true\"] {\n  display: none;\n}\n</code></pre></div>\n<p>The JavaScript to update the <strong><code>aria-hidden</code></strong> property has the form shown in the following code. Note that the script only updates the <strong><code>aria-hidden</code></strong> attribute; it does not need to also add or remove a custom classname.</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>function showTip(el) {\n  el.setAttribute(\"aria-hidden\", \"false\");\n}\n</code></pre></div>"}},{"type":"prose","value":{"id":"role_changes","title":"Role changes","isH3":true,"content":"<p>ARIA allows developers to declare a semantic role for an element that otherwise offers incorrect or no semantics. The <strong><code>role</code></strong> of an element should not change. Instead, remove the original element and replace it with an element with the new <strong><code>role</code></strong>.</p>\n<p>For example, consider an \"inline edit\" widget: a component that allows users to edit a piece of text in place, without switching contexts. This component has a \"view\" mode, in which the text is not editable, but is activatable, and an \"edit\" mode, in which the text can be edited. A developer might be tempted to implement the \"view\" mode using a read-only text <a href=\"/en-US/docs/Web/HTML/Element/input\"><code>&lt;input&gt;</code></a> element and setting its ARIA <strong><code>role</code></strong> to <code>button</code>, then switching to \"edit\" mode by making the element writable and removing the <strong><code>role</code></strong> attribute in \"edit\" mode (since <a href=\"/en-US/docs/Web/HTML/Element/input\"><code>&lt;input&gt;</code></a> elements have their own role semantics).</p>\n<p>Do not do this. Instead, implement the \"view\" mode using a different element altogether, such as a <a href=\"/en-US/docs/Web/HTML/Element/div\"><code>&lt;div&gt;</code></a> or <a href=\"/en-US/docs/Web/HTML/Element/span\"><code>&lt;span&gt;</code></a> with a <strong><code>role</code></strong> of <code>button</code>, and the \"edit\" mode using a text <a href=\"/en-US/docs/Web/HTML/Element/input\"><code>&lt;input&gt;</code></a> element.</p>"}},{"type":"prose","value":{"id":"asynchronous_content_changes","title":"Asynchronous content changes","isH3":true,"content":"<div class=\"notecard note\">\n  <p><strong>Note:</strong> Under construction. See also <a href=\"/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions\">Live Regions</a></p>\n</div>"}},{"type":"prose","value":{"id":"keyboard_navigation","title":"Keyboard navigation","isH3":false,"content":"<p>Often times developers overlook support for the keyboard when they create custom widgets. To be accessible to a variety of users, all features of a web application or widget should also be controllable with the keyboard, without requiring a mouse. In practice, this usually involves following the conventions supported by similar widgets on the desktop, taking full advantage of the Tab, Enter, Spacebar, and arrow keys.</p>\n<p>Traditionally, keyboard navigation on the web has been limited to the Tab key. A user presses Tab to focus each link, button, or form on the page in a linear order, using Shift-Tab to navigate backwards. It's a one-dimensional form of navigation—forward and back, one element at a time. On fairly dense pages, a keyboard-only user often has to press the Tab key dozens of times before accessing the needed section. Implementing desktop-style keyboard conventions on the web has the potential to significantly speed up navigation for many users.</p>\n<p>Here's a summary of how keyboard navigation should work in an ARIA-enabled web application:</p>\n<ul>\n  <li>The Tab key should provide focus to the widget as a whole. For example, tabbing to a menu bar <strong>should NOT</strong> put focus on the menu's first element.</li>\n  <li>The arrow keys should allow for selection or navigation within the widget. For example, using the left and right arrow keys should move focus to the previous and next menu items.</li>\n  <li>When the widget is not inside a form, both the Enter and Spacebar keys should select or activate the control.</li>\n  <li>Within a form, the Spacebar key should select or activate the control, while the Enter key should submit the form's default action.</li>\n  <li>If in doubt, mimic the standard desktop behavior of the control you are creating.</li>\n</ul>\n<p>So, for the Tabs widget example above, the user should be able to navigate into and out of the widget's container (the <a href=\"/en-US/docs/Web/HTML/Element/ol\"><code>&lt;ol&gt;</code></a> in our markup) using the Tab and Shift-Tab keys. Once keyboard focus is inside the container, the arrow keys should allow the user to navigate between each tab (the <a href=\"/en-US/docs/Web/HTML/Element/li\"><code>&lt;li&gt;</code></a> elements). From here, conventions vary from platform to platform. On Windows, the next tab should automatically be activated when the user presses the arrow keys. On macOS, the user can press either Enter or the Spacebar to activate the next tab. An in-depth tutorial for creating <a href=\"/en-US/docs/Web/Accessibility/Keyboard-navigable_JavaScript_widgets\">Keyboard-navigable JavaScript widgets</a> describes how to implement this behavior with JavaScript.</p>"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/Accessibility/ARIA\">ARIA</a></li>\n  <li><a href=\"/en-US/docs/Web/Accessibility/Keyboard-navigable_JavaScript_widgets\">Writing Keyboard-navigable JavaScript widgets</a></li>\n  <li><a href=\"https://www.w3.org/TR/wai-aria-1.1/\" class=\"external\" target=\"_blank\">WAI-ARIA Specification</a></li>\n  <li><a href=\"https://www.w3.org/WAI/ARIA/apg/\" class=\"external\" target=\"_blank\">WAI-ARIA Authoring Practices</a></li>\n</ul>"}}],"toc":[{"text":"The problem","id":"the_problem"},{"text":"ARIA","id":"aria"},{"text":"Keyboard navigation","id":"keyboard_navigation"},{"text":"See also","id":"see_also"}],"summary":"Most JavaScript libraries offer a library of client-side widgets that mimic the behavior of familiar desktop interfaces. Sliders, menu bars, file list views, and more can be built with a combination of JavaScript, CSS, and HTML. Since the HTML4 specification doesn't provide built-in tags that semantically describe these kinds of widgets, developers typically resort to using generic elements such as <div> and <span>. While this results in a widget that looks like its desktop counterpart, there usually isn't enough semantic information in the markup to be usable by an assistive technology.","popularity":0.0016,"modified":"2019-06-19T20:00:17.673Z","other_translations":[],"pageType":"guide","source":{"folder":"en-us/web/accessibility/an_overview_of_accessible_web_applications_and_widgets","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/accessibility/an_overview_of_accessible_web_applications_and_widgets/index.md","last_commit_url":"https://github.com/mdn/content/commit/null","filename":"index.md"},"short_title":"An overview of accessible web applications and widgets","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/Accessibility","title":"Accessibility"},{"uri":"/en-US/docs/Web/Accessibility/An_overview_of_accessible_web_applications_and_widgets","title":"An overview of accessible web applications and widgets"}],"pageTitle":"An overview of accessible web applications and widgets - Accessibility | MDN","noIndexing":false},"url":"/en-US/docs/Web/Accessibility/An_overview_of_accessible_web_applications_and_widgets"}