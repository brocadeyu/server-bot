{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{"macros":[{"id":"macro0","fixable":false,"suggestion":null,"explanation":"Wrong xref macro used (consider changing which macro you use). Error processing path /en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics","name":"MacroWrongXRefError","error":{},"errorStack":"Error: Wrong xref macro used (consider changing which macro you use). Error processing path /en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics\n    at Object.recordNonFatalError (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/render.js:90:23)\n    at Object.smartLink (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/api/web.js:95:37)\n    at eval (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/JsSidebar.ejs\":479:20)\n    at JsSidebar (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:703:17)\n    at /Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:260:40\n    at new Promise (<anonymous>)\n    at tryHandleCache (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:258:14)\n    at exports.renderFile (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:491:10)\n    at Templates.render (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/templates.js:94:40)\n    at render (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/render.js:192:56)","offset":6,"line":7,"column":1,"macroName":"jsSidebar","sourceContext":"> | {{jsSidebar(\"Intermediate\")}}\n    ^\n  | <p>A <strong>closure</strong> is the combination of a function bundled together (enclosed) with references to its surrounding state (the <strong>lexical environment</strong>). In other words, a closure gives a function access to its outer scope. In JavaScript, closures are created every time a function is created, at function creation time.</p>\n  | <h2>Lexical scoping</h2>","fatal":false,"macroSource":"{{jsSidebar(\"Intermediate\")}}","filepath":"/Users/yjb/Project/content/files/en-us/web/javascript/closures/index.md"},{"id":"macro1","fixable":false,"suggestion":null,"explanation":"Wrong xref macro used (consider changing which macro you use). Error processing path /en-US/docs/Learn/JavaScript/First_steps","name":"MacroWrongXRefError","error":{},"errorStack":"Error: Wrong xref macro used (consider changing which macro you use). Error processing path /en-US/docs/Learn/JavaScript/First_steps\n    at Object.recordNonFatalError (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/render.js:90:23)\n    at Object.smartLink (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/api/web.js:95:37)\n    at eval (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/JsSidebar.ejs\":482:20)\n    at JsSidebar (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:703:17)\n    at /Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:260:40\n    at new Promise (<anonymous>)\n    at tryHandleCache (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:258:14)\n    at exports.renderFile (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:491:10)\n    at Templates.render (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/templates.js:94:40)\n    at render (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/render.js:192:56)","offset":6,"line":7,"column":1,"macroName":"jsSidebar","sourceContext":"> | {{jsSidebar(\"Intermediate\")}}\n    ^\n  | <p>A <strong>closure</strong> is the combination of a function bundled together (enclosed) with references to its surrounding state (the <strong>lexical environment</strong>). In other words, a closure gives a function access to its outer scope. In JavaScript, closures are created every time a function is created, at function creation time.</p>\n  | <h2>Lexical scoping</h2>","fatal":false,"macroSource":"{{jsSidebar(\"Intermediate\")}}","filepath":"/Users/yjb/Project/content/files/en-us/web/javascript/closures/index.md"},{"id":"macro2","fixable":false,"suggestion":null,"explanation":"Wrong xref macro used (consider changing which macro you use). Error processing path /en-US/docs/Learn/JavaScript/Building_blocks","name":"MacroWrongXRefError","error":{},"errorStack":"Error: Wrong xref macro used (consider changing which macro you use). Error processing path /en-US/docs/Learn/JavaScript/Building_blocks\n    at Object.recordNonFatalError (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/render.js:90:23)\n    at Object.smartLink (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/api/web.js:95:37)\n    at eval (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/JsSidebar.ejs\":485:20)\n    at JsSidebar (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:703:17)\n    at /Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:260:40\n    at new Promise (<anonymous>)\n    at tryHandleCache (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:258:14)\n    at exports.renderFile (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:491:10)\n    at Templates.render (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/templates.js:94:40)\n    at render (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/render.js:192:56)","offset":6,"line":7,"column":1,"macroName":"jsSidebar","sourceContext":"> | {{jsSidebar(\"Intermediate\")}}\n    ^\n  | <p>A <strong>closure</strong> is the combination of a function bundled together (enclosed) with references to its surrounding state (the <strong>lexical environment</strong>). In other words, a closure gives a function access to its outer scope. In JavaScript, closures are created every time a function is created, at function creation time.</p>\n  | <h2>Lexical scoping</h2>","fatal":false,"macroSource":"{{jsSidebar(\"Intermediate\")}}","filepath":"/Users/yjb/Project/content/files/en-us/web/javascript/closures/index.md"},{"id":"macro3","fixable":false,"suggestion":null,"explanation":"Wrong xref macro used (consider changing which macro you use). Error processing path /en-US/docs/Learn/JavaScript/Objects","name":"MacroWrongXRefError","error":{},"errorStack":"Error: Wrong xref macro used (consider changing which macro you use). Error processing path /en-US/docs/Learn/JavaScript/Objects\n    at Object.recordNonFatalError (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/render.js:90:23)\n    at Object.smartLink (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/api/web.js:95:37)\n    at eval (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/JsSidebar.ejs\":488:20)\n    at JsSidebar (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:703:17)\n    at /Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:260:40\n    at new Promise (<anonymous>)\n    at tryHandleCache (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:258:14)\n    at exports.renderFile (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:491:10)\n    at Templates.render (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/templates.js:94:40)\n    at render (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/render.js:192:56)","offset":6,"line":7,"column":1,"macroName":"jsSidebar","sourceContext":"> | {{jsSidebar(\"Intermediate\")}}\n    ^\n  | <p>A <strong>closure</strong> is the combination of a function bundled together (enclosed) with references to its surrounding state (the <strong>lexical environment</strong>). In other words, a closure gives a function access to its outer scope. In JavaScript, closures are created every time a function is created, at function creation time.</p>\n  | <h2>Lexical scoping</h2>","fatal":false,"macroSource":"{{jsSidebar(\"Intermediate\")}}","filepath":"/Users/yjb/Project/content/files/en-us/web/javascript/closures/index.md"},{"id":"macro4","fixable":false,"suggestion":null,"explanation":"Wrong xref macro used (consider changing which macro you use). Error processing path /en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks","name":"MacroWrongXRefError","error":{},"errorStack":"Error: Wrong xref macro used (consider changing which macro you use). Error processing path /en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks\n    at Object.recordNonFatalError (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/render.js:90:23)\n    at Object.smartLink (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/api/web.js:95:37)\n    at eval (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/JsSidebar.ejs\":557:20)\n    at JsSidebar (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:703:17)\n    at /Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:260:40\n    at new Promise (<anonymous>)\n    at tryHandleCache (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:258:14)\n    at exports.renderFile (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:491:10)\n    at Templates.render (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/templates.js:94:40)\n    at render (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/render.js:192:56)","offset":6,"line":7,"column":1,"macroName":"jsSidebar","sourceContext":"> | {{jsSidebar(\"Intermediate\")}}\n    ^\n  | <p>A <strong>closure</strong> is the combination of a function bundled together (enclosed) with references to its surrounding state (the <strong>lexical environment</strong>). In other words, a closure gives a function access to its outer scope. In JavaScript, closures are created every time a function is created, at function creation time.</p>\n  | <h2>Lexical scoping</h2>","fatal":false,"macroSource":"{{jsSidebar(\"Intermediate\")}}","filepath":"/Users/yjb/Project/content/files/en-us/web/javascript/closures/index.md"},{"id":"macro5","fixable":false,"suggestion":null,"explanation":"Wrong xref macro used (consider changing which macro you use). Error processing path /en-US/docs/Learn/JavaScript/Client-side_web_APIs","name":"MacroWrongXRefError","error":{},"errorStack":"Error: Wrong xref macro used (consider changing which macro you use). Error processing path /en-US/docs/Learn/JavaScript/Client-side_web_APIs\n    at Object.recordNonFatalError (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/render.js:90:23)\n    at Object.smartLink (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/api/web.js:95:37)\n    at eval (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/JsSidebar.ejs\":560:20)\n    at JsSidebar (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:703:17)\n    at /Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:260:40\n    at new Promise (<anonymous>)\n    at tryHandleCache (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:258:14)\n    at exports.renderFile (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:491:10)\n    at Templates.render (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/templates.js:94:40)\n    at render (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/render.js:192:56)","offset":6,"line":7,"column":1,"macroName":"jsSidebar","sourceContext":"> | {{jsSidebar(\"Intermediate\")}}\n    ^\n  | <p>A <strong>closure</strong> is the combination of a function bundled together (enclosed) with references to its surrounding state (the <strong>lexical environment</strong>). In other words, a closure gives a function access to its outer scope. In JavaScript, closures are created every time a function is created, at function creation time.</p>\n  | <h2>Lexical scoping</h2>","fatal":false,"macroSource":"{{jsSidebar(\"Intermediate\")}}","filepath":"/Users/yjb/Project/content/files/en-us/web/javascript/closures/index.md"}]},"title":"Closures","mdn_url":"/en-US/docs/Web/JavaScript/Closures","locale":"en-US","native":"English (US)","sidebarHTML":"\n <ol>\n  <li class=\"section\"><a href=\"/en-US/docs/Web/JavaScript\">JavaScript</a></li>\n  <li class=\"section\">Tutorials</li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Complete beginners</summary>\n      <ol>\n        <li><a href=\"/en-US/docs/Learn_web_development/Getting_started/Your_first_website/Adding_interactivity\" data-flaw-src=\"{{jsSidebar(&quot;Intermediate&quot;)}}\">JavaScript basics</a></li>\n        <li><a href=\"/en-US/docs/Learn_web_development/Core/Scripting\" data-flaw-src=\"{{jsSidebar(&quot;Intermediate&quot;)}}\">JavaScript first steps</a></li>\n        <li><a href=\"/en-US/docs/Learn_web_development/Core/Scripting\" data-flaw-src=\"{{jsSidebar(&quot;Intermediate&quot;)}}\">JavaScript building blocks</a></li>\n        <li><a href=\"/en-US/docs/Learn_web_development/Extensions/Advanced_JavaScript_objects\" data-flaw-src=\"{{jsSidebar(&quot;Intermediate&quot;)}}\">Introducing JavaScript objects</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>JavaScript Guide</summary>\n      <ol>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Introduction\">Introduction</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Grammar_and_types\">Grammar and types</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">Control flow and error handling</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration\">Loops and iteration</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Functions\">Functions</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators\">Expressions and operators</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Numbers_and_dates\">Numbers and dates</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Text_formatting\">Text formatting</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Regular_expressions\">Regular expressions</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Indexed_collections\">Indexed collections</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Keyed_collections\">Keyed collections</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Working_with_objects\">Working with objects</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Using_classes\">Using classes</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Using_promises\">Using promises</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Typed_arrays\">JavaScript typed arrays</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators\">Iterators and generators</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Meta_programming\">Meta programming</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Modules\">JavaScript modules</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Intermediate</summary>\n      <ol>\n        <li><a href=\"/en-US/docs/Learn_web_development/Core/Frameworks_libraries\" data-flaw-src=\"{{jsSidebar(&quot;Intermediate&quot;)}}\">Client-side JavaScript frameworks</a></li>\n        <li><a href=\"/en-US/docs/Learn_web_development/Extensions/Client-side_APIs\" data-flaw-src=\"{{jsSidebar(&quot;Intermediate&quot;)}}\">Client-side web APIs</a></li>\n        <li><a href=\"/en-US/docs/Web/JavaScript/Language_overview\">Language overview</a></li>\n        <li><a href=\"/en-US/docs/Web/JavaScript/Data_structures\">JavaScript data structures</a></li>\n        <li><a href=\"/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness\">Equality comparisons and sameness</a></li>\n        <li><a href=\"/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">Enumerability and ownership of properties</a></li>\n        <li><em><a href=\"/en-US/docs/Web/JavaScript/Closures\" aria-current=\"page\">Closures</a></em></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Advanced</summary>\n      <ol>\n        <li><a href=\"/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">Inheritance and the prototype chain</a></li>\n        <li><a href=\"/en-US/docs/Web/JavaScript/Memory_management\">Memory Management</a></li>\n        <li><a href=\"/en-US/docs/Web/JavaScript/Event_loop\">Concurrency model and Event Loop</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"section\"><a href=\"/en-US/docs/Web/JavaScript/Reference\">References</a></li>\n  <li class=\"toggle\">\n    <details>\n       <summary>Built-in objects</summary>\n        <ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects\">Overview</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\">AggregateError</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\">AsyncFunction</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator\">AsyncGenerator</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction\">AsyncGeneratorFunction</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncIterator\">AsyncIterator</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics\">Atomics</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInt</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array\">BigInt64Array</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array\">BigUint64Array</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\">DataView</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\">decodeURI()</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\">decodeURIComponent()</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI()</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent()</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\">Error</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/escape\">escape()</a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval\">eval()</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError\">EvalError</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\">FinalizationRegistry</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float16Array\">Float16Array</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\">Float32Array</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\">Float64Array</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator\">Generator</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\">GeneratorFunction</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis\">globalThis</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity\">Infinity</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array\">Int16Array</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\">Int32Array</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array\">Int8Array</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError\">InternalError</a><abbr class=\"icon icon-nonstandard\" title=\"Non-standard. Check cross-browser support before using.\">\n    <span class=\"visually-hidden\">Non-standard</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl\">Intl</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite\">isFinite()</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN\">isNaN()</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator\">Iterator</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON\">JSON</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\">Math</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN\">NaN</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\">parseFloat()</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">parseInt()</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\">RangeError</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\">ReferenceError</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">Reflect</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">RegExp</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\">SharedArrayBuffer</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\">String</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\">SyntaxError</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">TypedArray</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\">TypeError</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array\">Uint16Array</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\">Uint32Array</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\">Uint8Array</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\">Uint8ClampedArray</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\">undefined</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/unescape\">unescape()</a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError\">URIError</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\">WeakMap</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef\">WeakRef</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\">WeakSet</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Expressions &amp; operators</summary>\n      <ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators\">Overview</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Addition\">Addition (+)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Addition_assignment\">Addition assignment (+=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Assignment\">Assignment (=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/async_function\">async function expression</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/async_function*\">async function* expression</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/await\">await</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_AND\">Bitwise AND (&amp;)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment\">Bitwise AND assignment (&amp;=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT\">Bitwise NOT (~)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\">Bitwise OR (|)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment\">Bitwise OR assignment (|=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR\">Bitwise XOR (^)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment\">Bitwise XOR assignment (^=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/class\">class expression</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Comma_operator\">Comma operator (,)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_operator\">Conditional (ternary) operator</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Decrement\">Decrement (--)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/delete\">delete</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">Destructuring assignment</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Division\">Division (/)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Division_assignment\">Division assignment (/=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Equality\">Equality (==)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation\">Exponentiation (**)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment\">Exponentiation assignment (**=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/function\">function expression</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/function*\">function* expression</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than\">Greater than (&gt;)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal\">Greater than or equal (&gt;=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Grouping\">Grouping operator ( )</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/import.meta\">import.meta</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/import\">import()</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/in\">in</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Increment\">Increment (++)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Inequality\">Inequality (!=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/instanceof\">instanceof</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift\">Left shift (&lt;&lt;)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment\">Left shift assignment (&lt;&lt;=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Less_than\">Less than (&lt;)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal\">Less than or equal (&lt;=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND\">Logical AND (&amp;&amp;)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment\">Logical AND assignment (&amp;&amp;=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT\">Logical NOT (!)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR\">Logical OR (||)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment\">Logical OR assignment (||=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Multiplication\">Multiplication (*)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment\">Multiplication assignment (*=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/new\">new</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/new.target\">new.target</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/null\">null</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_assignment\">Nullish coalescing assignment (??=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing\">Nullish coalescing operator (??)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer\">Object initializer</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence\">Operator precedence</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">Optional chaining (?.)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors\">Property accessors</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Remainder\">Remainder (%)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Remainder_assignment\">Remainder assignment (%=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift\">Right shift (&gt;&gt;)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment\">Right shift assignment (&gt;&gt;=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">Spread syntax (...)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality\">Strict equality (===)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Strict_inequality\">Strict inequality (!==)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Subtraction\">Subtraction (-)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment\">Subtraction assignment (-=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/super\">super</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/this\">this</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/typeof\">typeof</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Unary_negation\">Unary negation (-)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Unary_plus\">Unary plus (+)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\">Unsigned right shift (&gt;&gt;&gt;)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment\">Unsigned right shift assignment (&gt;&gt;&gt;=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/void\">void operator</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/yield\">yield</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/yield*\">yield*</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Statements &amp; declarations</summary>\n      <ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements\">Overview</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/async_function*\">async function*</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/block\">Block statement</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/break\">break</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/class\">class</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/const\">const</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/continue\">continue</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/debugger\">debugger</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/do...while\">do...while</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/Empty\">Empty statement</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/export\">export</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/Expression_statement\">Expression statement</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/for\">for</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of\">for await...of</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/for...in\">for...in</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/for...of\">for...of</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/function\">function</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/function*\">function*</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/if...else\">if...else</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/import\">import</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/label\">Labeled statement</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/let\">let</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/return\">return</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/switch\">switch</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/throw\">throw</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/try...catch\">try...catch</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/var\">var</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/while\">while</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/with\">with</a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Functions</summary>\n      <ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Functions\">Overview</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow function expressions</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters\">Default parameters</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Functions/get\">get</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions\">Method definitions</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters\">Rest parameters</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Functions/set\">set</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Functions/arguments\">The arguments object</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Classes</summary>\n      <ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Classes\">Overview</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Classes/constructor\">constructor</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Classes/extends\">extends</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties\">Private properties</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields\">Public class fields</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Classes/static\">static</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Classes/Static_initialization_blocks\">Static initialization blocks</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Regular expressions</summary>\n      <ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions\">Overview</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Backreference\">Backreference: \\1, \\2</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Capturing_group\">Capturing group: (...)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape\">Character class escape: \\d, \\D, \\w, \\W, \\s, \\S</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class\">Character class: [...], [^...]</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_escape\">Character escape: \\n, \\u{...}</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Disjunction\">Disjunction: |</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Input_boundary_assertion\">Input boundary assertion: ^, $</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Literal_character\">Literal character: a, b</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookahead_assertion\">Lookahead assertion: (?=...), (?!...)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookbehind_assertion\">Lookbehind assertion: (?&lt;=...), (?&lt;!...)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Modifier\">Modifier: (?ims-ims:...)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_backreference\">Named backreference: \\k&lt;name&gt;</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group\">Named capturing group: (?&lt;name&gt;...)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Non-capturing_group\">Non-capturing group: (?:...)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Quantifier\">Quantifier: *, +, ?, {n}, {n,}, {n,m}</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Unicode_character_class_escape\">Unicode character class escape: \\p{...}, \\P{...}</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Wildcard\">Wildcard: .</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Word_boundary_assertion\">Word boundary assertion: \\b, \\B</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Errors</summary>\n      <ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors\">Overview</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Promise_any_all_rejected\">AggregateError: No Promise in Promise.any was resolved</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Property_access_denied\">Error: Permission denied to access property \"x\"</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Too_much_recursion\">InternalError: too much recursion</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_valid_code_point\">RangeError: argument is not a valid code point</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/BigInt_division_by_zero\">RangeError: BigInt division by zero</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/BigInt_negative_exponent\">RangeError: BigInt negative exponent</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Form_must_be_one_of\">RangeError: form must be one of 'NFC', 'NFD', 'NFKC', or 'NFKD'</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_array_length\">RangeError: invalid array length</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_date\">RangeError: invalid date</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Precision_range\">RangeError: precision is out of range</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Bad_radix\">RangeError: radix must be an integer</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large\">RangeError: repeat count must be less than infinity</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count\">RangeError: repeat count must be non-negative</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Cant_be_converted_to_BigInt_because_it_isnt_an_integer\">RangeError: x can't be converted to BigInt because it isn't an integer</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Not_defined\">ReferenceError: \"x\" is not defined</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Undeclared_var\">ReferenceError: assignment to undeclared variable \"x\"</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init\">ReferenceError: can't access lexical declaration 'X' before initialization</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage\">ReferenceError: deprecated caller or arguments usage</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Super_not_called\">ReferenceError: must call super constructor before using 'this' in derived class constructor</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Super_called_twice\">ReferenceError: super() called twice in derived class constructor</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Bad_strict_arguments_eval\">SyntaxError: 'arguments'/'eval' can't be defined or assigned to in strict mode code</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_octal_literal\">SyntaxError: \"0\"-prefixed octal literals are deprecated</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Strict_non_simple_params\">SyntaxError: \"use strict\" not allowed in function with non-simple parameters</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Reserved_identifier\">SyntaxError: \"x\" is a reserved identifier</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Regex_backslash_at_end_of_pattern\">SyntaxError: \\ at end of pattern</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_for-of_initializer\">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Delete_in_strict_mode\">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Arguments_not_allowed\">SyntaxError: arguments is not valid in fields</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Bad_await\">SyntaxError: await is only valid in async functions, async generators and modules</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/await_yield_in_parameter\">SyntaxError: await/yield expression can't be used in parameter</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Cant_use_nullish_coalescing_unparenthesized\">SyntaxError: cannot use `??` unparenthesized within `||` and `&amp;&amp;` expressions</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Regex_character_class_escape_in_class_range\">SyntaxError: character class escape cannot be used in class range in regular expression</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Bad_continue\">SyntaxError: continue must be inside loop</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Regex_duplicate_capture_group_name\">SyntaxError: duplicate capture group name in regular expression</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Duplicate_parameter\">SyntaxError: duplicate formal argument x</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_for-in_initializer\">SyntaxError: for-in loop head declarations may not have initializers</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Unnamed_function_statement\">SyntaxError: function statement requires a name</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Function_label\">SyntaxError: functions cannot be labelled</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Either_be_both_static_or_non-static\">SyntaxError: getter and setter for private name #x should either be both static or non-static</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Getter_no_arguments\">SyntaxError: getter functions must have no arguments</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Identifier_after_number\">SyntaxError: identifier starts immediately after numeric literal</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Illegal_character\">SyntaxError: illegal character</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/import_decl_module_top_level\">SyntaxError: import declarations may only appear at top level of a module</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Regex_incomplete_quantifier\">SyntaxError: incomplete quantifier in regular expression</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_assignment_left-hand_side\">SyntaxError: invalid assignment left-hand side</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_BigInt_syntax\">SyntaxError: invalid BigInt syntax</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Regex_invalid_capture_group_name\">SyntaxError: invalid capture group name in regular expression</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Regex_invalid_char_in_class\">SyntaxError: invalid character in class in regular expression</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Regex_invalid_class_set_operation\">SyntaxError: invalid class set operation in regular expression</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Regex_invalid_decimal_escape\">SyntaxError: invalid decimal escape in regular expression</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Regex_invalid_identity_escape\">SyntaxError: invalid identity escape in regular expression</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Regex_invalid_named_capture_reference\">SyntaxError: invalid named capture reference in regular expression</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Regex_invalid_property_name\">SyntaxError: invalid property name in regular expression</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Regex_invalid_range_in_character_class\">SyntaxError: invalid range in character class</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Regex_invalid_group\">SyntaxError: invalid regexp group</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Bad_regexp_flag\">SyntaxError: invalid regular expression flag \"x\"</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Regex_invalid_unicode_escape\">SyntaxError: invalid unicode escape in regular expression</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse\">SyntaxError: JSON.parse: bad parsing</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Label_not_found\">SyntaxError: label not found</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Missing_colon_after_property_id\">SyntaxError: missing : after property id</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list\">SyntaxError: missing ) after argument list</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_condition\">SyntaxError: missing ) after condition</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Missing_bracket_after_list\">SyntaxError: missing ] after element list</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_function_body\">SyntaxError: missing } after function body</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_property_list\">SyntaxError: missing } after property list</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const\">SyntaxError: missing = in const declaration</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Missing_formal_parameter\">SyntaxError: missing formal parameter</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Missing_name_after_dot_operator\">SyntaxError: missing name after . operator</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/No_variable_name\">SyntaxError: missing variable name</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Regex_negated_char_class_with_strings\">SyntaxError: negated character class with strings in regular expression</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Bad_new_optional\">SyntaxError: new keyword cannot be used with an optional chain</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Regex_nothing_to_repeat\">SyntaxError: nothing to repeat</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Regex_numbers_out_of_order_in_quantifier\">SyntaxError: numbers out of order in {} quantifier.</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_octal_escape_sequence\">SyntaxError: octal escape sequences can't be used in untagged template literals or in strict mode code</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Parameter_after_rest_parameter\">SyntaxError: parameter after rest parameter</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Cant_delete_private_fields\">SyntaxError: private fields can't be deleted</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Duplicate_proto\">SyntaxError: property name __proto__ appears more than once in object literal</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Regex_raw_bracket\">SyntaxError: raw bracket is not allowed in regular expression with unicode flag</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter\">SyntaxError: redeclaration of formal parameter \"x\"</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Undeclared_private_field_or_method\">SyntaxError: reference to undeclared private field or method #x</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Rest_with_default\">SyntaxError: rest parameter may not have a default</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Bad_return\">SyntaxError: return not in function</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Setter_one_argument\">SyntaxError: setter functions must have one argument</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/String_literal_EOL\">SyntaxError: string literal contains an unescaped line break</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Bad_super_call\">SyntaxError: super() is only valid in derived class constructors</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Bad_optional_template\">SyntaxError: tagged template cannot be used with optional chain</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Hash_outside_class\">SyntaxError: Unexpected '#' used outside of class body</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Unexpected_token\">SyntaxError: Unexpected token</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Bad_break\">SyntaxError: unlabeled break must be inside loop or switch</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Unparenthesized_unary_expr_lhs_exponentiation\">SyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Bad_super_prop\">SyntaxError: use of super property/member accesses only valid within methods or eval code within methods</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_source_map_pragma\">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/is_not_iterable\">TypeError: 'x' is not iterable</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Unexpected_type\">TypeError: \"x\" is (not) \"y\"</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_constructor\">TypeError: \"x\" is not a constructor</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_function\">TypeError: \"x\" is not a function</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/No_non-null_object\">TypeError: \"x\" is not a non-null object</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Read-only\">TypeError: \"x\" is read-only</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/BigInt_not_serializable\">TypeError: BigInt value can't be serialized in JSON</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Builtin_ctor_no_new\">TypeError: calling a builtin X constructor without new is forbidden</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Get_set_missing_private\">TypeError: can't access/set private field or method: object is not the right class</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Cant_assign_to_property\">TypeError: can't assign to property \"x\" on \"y\": not an object</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Cant_convert_BigInt_to_number\">TypeError: can't convert BigInt to number</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Cant_convert_x_to_BigInt\">TypeError: can't convert x to BigInt</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Cant_define_property_object_not_extensible\">TypeError: can't define property \"x\": \"obj\" is not extensible</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Non_configurable_array_element\">TypeError: can't delete non-configurable array element</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Cant_redefine_property\">TypeError: can't redefine non-configurable property \"x\"</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Cant_set_prototype\">TypeError: can't set prototype of this object</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Cyclic_prototype\">TypeError: can't set prototype: it would cause a prototype chain cycle</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/in_operator_no_object\">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Class_ctor_no_new\">TypeError: class constructors must be invoked with 'new'</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value\">TypeError: cyclic object value</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_derived_return\">TypeError: derived class constructor returned invalid value x</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Private_setter_only\">TypeError: getting private setter-only property</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Private_double_initialization\">TypeError: Initializing an object twice is an error with private fields/methods</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/invalid_right_hand_side_instanceof_operand\">TypeError: invalid 'instanceof' operand 'x'</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Array_sort_argument\">TypeError: invalid Array.prototype.sort argument</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment\">TypeError: invalid assignment to const \"x\"</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Constructor_cant_be_used_directly\">TypeError: Iterator/AsyncIterator constructor can't be used directly</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Requires_global_RegExp\">TypeError: matchAll/replaceAll must be called with a global RegExp</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/More_arguments_needed\">TypeError: More arguments needed</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/No_properties\">TypeError: null/undefined has no properties</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Cant_delete\">TypeError: property \"x\" is non-configurable and can't be deleted</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Reduce_of_empty_array_with_no_initial_value\">TypeError: Reduce of empty array with no initial value</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Getter_only\">TypeError: setting getter-only property \"x\"</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Key_not_weakly_held\">TypeError: WeakSet key/WeakMap value 'x' must be an object or an unregistered symbol</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Called_on_incompatible_type\">TypeError: X.prototype.y called on incompatible type</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Malformed_URI\">URIError: malformed URI sequence</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Already_has_pragma\">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Stmt_after_return\">Warning: unreachable code after return statement</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Misc</summary>\n      <ol>\n        <li><a href=\"/en-US/docs/Web/JavaScript/JavaScript_technologies_overview\">JavaScript technologies overview</a></li>\n        <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Lexical_grammar\">Lexical grammar</a></li>\n        <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\">Iteration protocols</a></li>\n        <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Strict_mode\">Strict mode</a></li>\n        <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Template_literals\">Template literals</a></li>\n        <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Trailing_commas\">Trailing commas</a></li>\n        <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\">Deprecated features</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","sidebarMacro":"JsSidebar","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>A <strong>closure</strong> is the combination of a function bundled together (enclosed) with references to its surrounding state (the <strong>lexical environment</strong>). In other words, a closure gives a function access to its outer scope. In JavaScript, closures are created every time a function is created, at function creation time.</p>"}},{"type":"prose","value":{"id":"lexical_scoping","title":"Lexical scoping","isH3":false,"content":"<p>Consider the following example code:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>function init() {\n  var name = \"Mozilla\"; // name is a local variable created by init\n  function displayName() {\n    // displayName() is the inner function, that forms a closure\n    console.log(name); // use variable declared in the parent function\n  }\n  displayName();\n}\ninit();\n</code></pre></div>\n<p><code>init()</code> creates a local variable called <code>name</code> and a function called <code>displayName()</code>. The <code>displayName()</code> function is an inner function that is defined inside <code>init()</code> and is available only within the body of the <code>init()</code> function. Note that the <code>displayName()</code> function has no local variables of its own. However, since inner functions have access to the variables of outer scopes, <code>displayName()</code> can access the variable <code>name</code> declared in the parent function, <code>init()</code>.</p>\n<p>Run the code using <a href=\"https://jsfiddle.net/3dxck52m/\" class=\"external\" target=\"_blank\">this JSFiddle link</a> and notice that the <code>console.log()</code> statement within the <code>displayName()</code> function successfully displays the value of the <code>name</code> variable, which is declared in its parent function. This is an example of <em>lexical scoping</em>, which describes how a parser resolves variable names when functions are nested. The word <em>lexical</em> refers to the fact that lexical scoping uses the location where a variable is declared within the source code to determine where that variable is available. Nested functions have access to variables declared in their outer scope.</p>"}},{"type":"prose","value":{"id":"scoping_with_let_and_const","title":"Scoping with let and const","isH3":true,"content":"<p>Traditionally (before ES6), JavaScript variables only had two kinds of scopes: <em>function scope</em> and <em>global scope</em>. Variables declared with <code>var</code> are either function-scoped or global-scoped, depending on whether they are declared within a function or outside a function. This can be tricky, because blocks with curly braces do not create scopes:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>if (Math.random() &gt; 0.5) {\n  var x = 1;\n} else {\n  var x = 2;\n}\nconsole.log(x);\n</code></pre></div>\n<p>For people from other languages (e.g. C, Java) where blocks create scopes, the above code should throw an error on the <code>console.log</code> line, because we are outside the scope of <code>x</code> in either block. However, because blocks don't create scopes for <code>var</code>, the <code>var</code> statements here actually create a global variable. There is also <a href=\"#creating_closures_in_loops_a_common_mistake\">a practical example</a> introduced below that illustrates how this can cause actual bugs when combined with closures.</p>\n<p>In ES6, JavaScript introduced the <code>let</code> and <code>const</code> declarations, which, among other things like <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/let#temporal_dead_zone_tdz\">temporal dead zones</a>, allow you to create block-scoped variables.</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>if (Math.random() &gt; 0.5) {\n  const x = 1;\n} else {\n  const x = 2;\n}\nconsole.log(x); // ReferenceError: x is not defined\n</code></pre></div>\n<p>In essence, blocks are finally treated as scopes in ES6, but only if you declare variables with <code>let</code> or <code>const</code>. In addition, ES6 introduced <a href=\"/en-US/docs/Web/JavaScript/Guide/Modules\">modules</a>, which introduced another kind of scope. Closures are able to capture variables in all these scopes, which we will introduce later.</p>"}},{"type":"prose","value":{"id":"closure","title":"Closure","isH3":false,"content":"<p>Consider the following code example:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>function makeFunc() {\n  const name = \"Mozilla\";\n  function displayName() {\n    console.log(name);\n  }\n  return displayName;\n}\n\nconst myFunc = makeFunc();\nmyFunc();\n</code></pre></div>\n<p>Running this code has exactly the same effect as the previous example of the <code>init()</code> function above. What's different (and interesting) is that the <code>displayName()</code> inner function is returned from the outer function <em>before being executed</em>.</p>\n<p>At first glance, it might seem unintuitive that this code still works. In some programming languages, the local variables within a function exist for just the duration of that function's execution. Once <code>makeFunc()</code> finishes executing, you might expect that the <code>name</code> variable would no longer be accessible. However, because the code still works as expected, this is obviously not the case in JavaScript.</p>\n<p>The reason is that functions in JavaScript form closures. A <em>closure</em> is the combination of a function and the lexical environment within which that function was declared. This environment consists of any variables that were in-scope at the time the closure was created. In this case, <code>myFunc</code> is a reference to the instance of the function <code>displayName</code> that is created when <code>makeFunc</code> is run. The instance of <code>displayName</code> maintains a reference to its lexical environment, within which the variable <code>name</code> exists. For this reason, when <code>myFunc</code> is invoked, the variable <code>name</code> remains available for use, and \"Mozilla\" is passed to <code>console.log</code>.</p>\n<p>Here's a slightly more interesting example—a <code>makeAdder</code> function:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>function makeAdder(x) {\n  return function (y) {\n    return x + y;\n  };\n}\n\nconst add5 = makeAdder(5);\nconst add10 = makeAdder(10);\n\nconsole.log(add5(2)); // 7\nconsole.log(add10(2)); // 12\n</code></pre></div>\n<p>In this example, we have defined a function <code>makeAdder(x)</code>, that takes a single argument <code>x</code>, and returns a new function. The function it returns takes a single argument <code>y</code>, and returns the sum of <code>x</code> and <code>y</code>.</p>\n<p>In essence, <code>makeAdder</code> is a function factory. It creates functions that can add a specific value to their argument. In the above example, the function factory creates two new functions—one that adds five to its argument, and one that adds 10.</p>\n<p><code>add5</code> and <code>add10</code> both form closures. They share the same function body definition, but store different lexical environments. In <code>add5</code>'s lexical environment, <code>x</code> is 5, while in the lexical environment for <code>add10</code>, <code>x</code> is 10.</p>"}},{"type":"prose","value":{"id":"practical_closures","title":"Practical closures","isH3":false,"content":"<p>Closures are useful because they let you associate data (the lexical environment) with a function that operates on that data. This has obvious parallels to object-oriented programming, where objects allow you to associate data (the object's properties) with one or more methods.</p>\n<p>Consequently, you can use a closure anywhere that you might normally use an object with only a single method.</p>\n<p>Situations where you might want to do this are particularly common on the web. Much of the code written in front-end JavaScript is event-based. You define some behavior, and then attach it to an event that is triggered by the user (such as a click or a keypress). The code is attached as a callback (a single function that is executed in response to the event).</p>\n<p>For instance, suppose we want to add buttons to a page to adjust the text size. One way of doing this is to specify the font-size of the <code>body</code> element (in pixels), and then set the size of the other elements on the page (such as headers) using the relative <code>em</code> unit:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">css</span></div><pre class=\"brush: css notranslate\"><code>body {\n  font-family: Helvetica, Arial, sans-serif;\n  font-size: 12px;\n}\n\nh1 {\n  font-size: 1.5em;\n}\n\nh2 {\n  font-size: 1.2em;\n}\n</code></pre></div>\n<p>Such interactive text size buttons can change the <code>font-size</code> property of the <code>body</code> element, and the adjustments are picked up by other elements on the page thanks to the relative units.</p>\n<p>Here's the JavaScript:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>function makeSizer(size) {\n  return function () {\n    document.body.style.fontSize = `${size}px`;\n  };\n}\n\nconst size12 = makeSizer(12);\nconst size14 = makeSizer(14);\nconst size16 = makeSizer(16);\n</code></pre></div>\n<p><code>size12</code>, <code>size14</code>, and <code>size16</code> are now functions that resize the body text to 12, 14, and 16 pixels, respectively. You can attach them to buttons as demonstrated in the following code example.</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>document.getElementById(\"size-12\").onclick = size12;\ndocument.getElementById(\"size-14\").onclick = size14;\ndocument.getElementById(\"size-16\").onclick = size16;\n</code></pre></div>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">html</span></div><pre class=\"brush: html notranslate\"><code>&lt;button id=\"size-12\"&gt;12&lt;/button&gt;\n&lt;button id=\"size-14\"&gt;14&lt;/button&gt;\n&lt;button id=\"size-16\"&gt;16&lt;/button&gt;\n</code></pre></div>\n<p>Run the code using <a href=\"https://jsfiddle.net/hotae160/\" class=\"external\" target=\"_blank\">JSFiddle</a>.</p>"}},{"type":"prose","value":{"id":"emulating_private_methods_with_closures","title":"Emulating private methods with closures","isH3":false,"content":"<p>Languages such as Java allow you to declare methods as private, meaning that they can be called only by other methods in the same class.</p>\n<p>JavaScript, prior to <a href=\"/en-US/docs/Web/JavaScript/Reference/Classes\">classes</a>, didn't have a native way of declaring <a href=\"/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties#private_methods\">private methods</a>, but it was possible to emulate private methods using closures. Private methods aren't just useful for restricting access to code. They also provide a powerful way of managing your global namespace.</p>\n<p>The following code illustrates how to use closures to define public functions that can access private functions and variables. Note that these closures follow the <a href=\"https://www.google.com/search?q=javascript+module+pattern\" class=\"external\" target=\"_blank\">Module Design Pattern</a>.</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>const counter = (function () {\n  let privateCounter = 0;\n  function changeBy(val) {\n    privateCounter += val;\n  }\n\n  return {\n    increment() {\n      changeBy(1);\n    },\n\n    decrement() {\n      changeBy(-1);\n    },\n\n    value() {\n      return privateCounter;\n    },\n  };\n})();\n\nconsole.log(counter.value()); // 0.\n\ncounter.increment();\ncounter.increment();\nconsole.log(counter.value()); // 2.\n\ncounter.decrement();\nconsole.log(counter.value()); // 1.\n</code></pre></div>\n<p>In previous examples, each closure had its own lexical environment. Here though, there is a single lexical environment that is shared by the three functions: <code>counter.increment</code>, <code>counter.decrement</code>, and <code>counter.value</code>.</p>\n<p>The shared lexical environment is created in the body of an anonymous function, <em>which is executed as soon as it has been defined</em> (also known as an <a href=\"/en-US/docs/Glossary/IIFE\">IIFE</a>). The lexical environment contains two private items: a variable called <code>privateCounter</code>, and a function called <code>changeBy</code>. You can't access either of these private members from outside the anonymous function. Instead, you indirectly access them using the three public functions that are returned from the anonymous wrapper.</p>\n<p>Those three public functions form closures that share the same lexical environment. Thanks to JavaScript's lexical scoping, they each have access to the <code>privateCounter</code> variable and the <code>changeBy</code> function.</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>const makeCounter = function () {\n  let privateCounter = 0;\n  function changeBy(val) {\n    privateCounter += val;\n  }\n  return {\n    increment() {\n      changeBy(1);\n    },\n\n    decrement() {\n      changeBy(-1);\n    },\n\n    value() {\n      return privateCounter;\n    },\n  };\n};\n\nconst counter1 = makeCounter();\nconst counter2 = makeCounter();\n\nconsole.log(counter1.value()); // 0.\n\ncounter1.increment();\ncounter1.increment();\nconsole.log(counter1.value()); // 2.\n\ncounter1.decrement();\nconsole.log(counter1.value()); // 1.\nconsole.log(counter2.value()); // 0.\n</code></pre></div>\n<p>Notice how the two counters maintain their independence from one another. Each closure references a different version of the <code>privateCounter</code> variable through its own closure. Each time one of the counters is called, its lexical environment changes by changing the value of this variable. Changes to the variable value in one closure don't affect the value in the other closure.</p>\n<div class=\"notecard note\">\n  <p><strong>Note:</strong> Using closures in this way provides benefits that are normally associated with object-oriented programming. In particular, <em>data hiding</em> and <em>encapsulation</em>.</p>\n</div>"}},{"type":"prose","value":{"id":"closure_scope_chain","title":"Closure scope chain","isH3":false,"content":"<p>A nested function's access to the outer function's scope includes the enclosing scope of the outer function—effectively creating a chain of function scopes. To demonstrate, consider the following example code.</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>// global scope\nconst e = 10;\nfunction sum(a) {\n  return function (b) {\n    return function (c) {\n      // outer functions scope\n      return function (d) {\n        // local scope\n        return a + b + c + d + e;\n      };\n    };\n  };\n}\n\nconsole.log(sum(1)(2)(3)(4)); // 20\n</code></pre></div>\n<p>You can also write without anonymous functions:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>// global scope\nconst e = 10;\nfunction sum(a) {\n  return function sum2(b) {\n    return function sum3(c) {\n      // outer functions scope\n      return function sum4(d) {\n        // local scope\n        return a + b + c + d + e;\n      };\n    };\n  };\n}\n\nconst sum2 = sum(1);\nconst sum3 = sum2(2);\nconst sum4 = sum3(3);\nconst result = sum4(4);\nconsole.log(result); // 20\n</code></pre></div>\n<p>In the example above, there's a series of nested functions, all of which have access to the outer functions' scope. In this context, we can say that closures have access to <em>all</em> outer scopes.</p>\n<p>Closures can capture variables in block scopes and module scopes as well. For example, the following creates a closure over the block-scoped variable <code>y</code>:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>function outer() {\n  let getY;\n  {\n    const y = 6;\n    getY = () =&gt; y;\n  }\n  console.log(typeof y); // undefined\n  console.log(getY()); // 6\n}\n\nouter();\n</code></pre></div>\n<p>Closures over modules can be more interesting.</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>// myModule.js\nlet x = 5;\nexport const getX = () =&gt; x;\nexport const setX = (val) =&gt; {\n  x = val;\n};\n</code></pre></div>\n<p>Here, the module exports a pair of getter-setter functions, which close over the module-scoped variable <code>x</code>. Even when <code>x</code> is not directly accessible from other modules, it can be read and written with the functions.</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>import { getX, setX } from \"./myModule.js\";\n\nconsole.log(getX()); // 5\nsetX(6);\nconsole.log(getX()); // 6\n</code></pre></div>\n<p>Closures can close over imported values as well, which are regarded as <em>live <a href=\"/en-US/docs/Glossary/Binding\">bindings</a></em>, because when the original value changes, the imported one changes accordingly.</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>// myModule.js\nexport let x = 1;\nexport const setX = (val) =&gt; {\n  x = val;\n};\n</code></pre></div>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>// closureCreator.js\nimport { x } from \"./myModule.js\";\n\nexport const getX = () =&gt; x; // Close over an imported live binding\n</code></pre></div>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>import { getX } from \"./closureCreator.js\";\nimport { setX } from \"./myModule.js\";\n\nconsole.log(getX()); // 1\nsetX(2);\nconsole.log(getX()); // 2\n</code></pre></div>"}},{"type":"prose","value":{"id":"creating_closures_in_loops_a_common_mistake","title":"Creating closures in loops: A common mistake","isH3":false,"content":"<p>Prior to the introduction of the <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/let\"><code>let</code></a> keyword, a common problem with closures occurred when you created them inside a loop. To demonstrate, consider the following example code.</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">html</span></div><pre class=\"brush: html notranslate\"><code>&lt;p id=\"help\"&gt;Helpful notes will appear here&lt;/p&gt;\n&lt;p&gt;Email: &lt;input type=\"text\" id=\"email\" name=\"email\" /&gt;&lt;/p&gt;\n&lt;p&gt;Name: &lt;input type=\"text\" id=\"name\" name=\"name\" /&gt;&lt;/p&gt;\n&lt;p&gt;Age: &lt;input type=\"text\" id=\"age\" name=\"age\" /&gt;&lt;/p&gt;\n</code></pre></div>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>function showHelp(help) {\n  document.getElementById(\"help\").textContent = help;\n}\n\nfunction setupHelp() {\n  var helpText = [\n    { id: \"email\", help: \"Your email address\" },\n    { id: \"name\", help: \"Your full name\" },\n    { id: \"age\", help: \"Your age (you must be over 16)\" },\n  ];\n\n  for (var i = 0; i &lt; helpText.length; i++) {\n    // Culprit is the use of `var` on this line\n    var item = helpText[i];\n    document.getElementById(item.id).onfocus = function () {\n      showHelp(item.help);\n    };\n  }\n}\n\nsetupHelp();\n</code></pre></div>\n<p>Try running the code in <a href=\"https://jsfiddle.net/v7gjv/8164/\" class=\"external\" target=\"_blank\">JSFiddle</a>.</p>\n<p>The <code>helpText</code> array defines three helpful hints, each associated with the ID of an input field in the document. The loop cycles through these definitions, hooking up an <code>onfocus</code> event to each one that shows the associated help method.</p>\n<p>If you try this code out, you'll see that it doesn't work as expected. No matter what field you focus on, the message about your age will be displayed.</p>\n<p>The reason for this is that the functions assigned to <code>onfocus</code> form closures; they consist of the function definition and the captured environment from the <code>setupHelp</code> function's scope. Three closures have been created by the loop, but each one shares the same single lexical environment, which has a variable with changing values (<code>item</code>). This is because the variable <code>item</code> is declared with <code>var</code> and thus has function scope due to hoisting. The value of <code>item.help</code> is determined when the <code>onfocus</code> callbacks are executed. Because the loop has already run its course by that time, the <code>item</code> variable object (shared by all three closures) has been left pointing to the last entry in the <code>helpText</code> list.</p>\n<p>One solution in this case is to use more closures: in particular, to use a function factory as described earlier:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>function showHelp(help) {\n  document.getElementById(\"help\").textContent = help;\n}\n\nfunction makeHelpCallback(help) {\n  return function () {\n    showHelp(help);\n  };\n}\n\nfunction setupHelp() {\n  var helpText = [\n    { id: \"email\", help: \"Your email address\" },\n    { id: \"name\", help: \"Your full name\" },\n    { id: \"age\", help: \"Your age (you must be over 16)\" },\n  ];\n\n  for (var i = 0; i &lt; helpText.length; i++) {\n    var item = helpText[i];\n    document.getElementById(item.id).onfocus = makeHelpCallback(item.help);\n  }\n}\n\nsetupHelp();\n</code></pre></div>\n<p>Run the code using <a href=\"https://jsfiddle.net/v7gjv/9573/\" class=\"external\" target=\"_blank\">this JSFiddle link</a>.</p>\n<p>This works as expected. Rather than the callbacks all sharing a single lexical environment, the <code>makeHelpCallback</code> function creates <em>a new lexical environment</em> for each callback, in which <code>help</code> refers to the corresponding string from the <code>helpText</code> array.</p>\n<p>One other way to write the above using anonymous closures is:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>function showHelp(help) {\n  document.getElementById(\"help\").textContent = help;\n}\n\nfunction setupHelp() {\n  var helpText = [\n    { id: \"email\", help: \"Your email address\" },\n    { id: \"name\", help: \"Your full name\" },\n    { id: \"age\", help: \"Your age (you must be over 16)\" },\n  ];\n\n  for (var i = 0; i &lt; helpText.length; i++) {\n    (function () {\n      var item = helpText[i];\n      document.getElementById(item.id).onfocus = function () {\n        showHelp(item.help);\n      };\n    })(); // Immediate event listener attachment with the current value of item (preserved until iteration).\n  }\n}\n\nsetupHelp();\n</code></pre></div>\n<p>If you don't want to use more closures, you can use the <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/let\"><code>let</code></a> or <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/const\"><code>const</code></a> keyword:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>function showHelp(help) {\n  document.getElementById(\"help\").textContent = help;\n}\n\nfunction setupHelp() {\n  const helpText = [\n    { id: \"email\", help: \"Your email address\" },\n    { id: \"name\", help: \"Your full name\" },\n    { id: \"age\", help: \"Your age (you must be over 16)\" },\n  ];\n\n  for (let i = 0; i &lt; helpText.length; i++) {\n    const item = helpText[i];\n    document.getElementById(item.id).onfocus = () =&gt; {\n      showHelp(item.help);\n    };\n  }\n}\n\nsetupHelp();\n</code></pre></div>\n<p>This example uses <code>const</code> instead of <code>var</code>, so every closure binds the block-scoped variable, meaning that no additional closures are required.</p>\n<p>Another alternative could be to use <code>forEach()</code> to iterate over the <code>helpText</code> array and attach a listener to each <a href=\"/en-US/docs/Web/HTML/Element/input\"><code>&lt;input&gt;</code></a>, as shown:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>function showHelp(help) {\n  document.getElementById(\"help\").textContent = help;\n}\n\nfunction setupHelp() {\n  var helpText = [\n    { id: \"email\", help: \"Your email address\" },\n    { id: \"name\", help: \"Your full name\" },\n    { id: \"age\", help: \"Your age (you must be over 16)\" },\n  ];\n\n  helpText.forEach(function (text) {\n    document.getElementById(text.id).onfocus = function () {\n      showHelp(text.help);\n    };\n  });\n}\n\nsetupHelp();\n</code></pre></div>"}},{"type":"prose","value":{"id":"performance_considerations","title":"Performance considerations","isH3":false,"content":"<p>As mentioned previously, each function instance manages its own scope and closure. Therefore, it is unwise to unnecessarily create functions within other functions if closures are not needed for a particular task, as it will negatively affect script performance both in terms of processing speed and memory consumption.</p>\n<p>For instance, when creating a new object/class, methods should normally be associated to the object's prototype rather than defined into the object constructor. The reason is that whenever the constructor is called, the methods would get reassigned (that is, for every object creation).</p>\n<p>Consider the following case:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>function MyObject(name, message) {\n  this.name = name.toString();\n  this.message = message.toString();\n  this.getName = function () {\n    return this.name;\n  };\n\n  this.getMessage = function () {\n    return this.message;\n  };\n}\n</code></pre></div>\n<p>Because the previous code does not take advantage of the benefits of using closures in this particular instance, we could instead rewrite it to avoid using closures as follows:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>function MyObject(name, message) {\n  this.name = name.toString();\n  this.message = message.toString();\n}\nMyObject.prototype = {\n  getName() {\n    return this.name;\n  },\n  getMessage() {\n    return this.message;\n  },\n};\n</code></pre></div>\n<p>However, redefining the prototype is not recommended. The following example instead appends to the existing prototype:</p>\n<div class=\"code-example\"><div class=\"example-header\"><span class=\"language-name\">js</span></div><pre class=\"brush: js notranslate\"><code>function MyObject(name, message) {\n  this.name = name.toString();\n  this.message = message.toString();\n}\nMyObject.prototype.getName = function () {\n  return this.name;\n};\nMyObject.prototype.getMessage = function () {\n  return this.message;\n};\n</code></pre></div>\n<p>In the two previous examples, the inherited prototype can be shared by all objects and the method definitions need not occur at every object creation. See <a href=\"/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">Inheritance and the prototype chain</a> for more.</p>"}}],"toc":[{"text":"Lexical scoping","id":"lexical_scoping"},{"text":"Closure","id":"closure"},{"text":"Practical closures","id":"practical_closures"},{"text":"Emulating private methods with closures","id":"emulating_private_methods_with_closures"},{"text":"Closure scope chain","id":"closure_scope_chain"},{"text":"Creating closures in loops: A common mistake","id":"creating_closures_in_loops_a_common_mistake"},{"text":"Performance considerations","id":"performance_considerations"}],"summary":"A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment). In other words, a closure gives a function access to its outer scope. In JavaScript, closures are created every time a function is created, at function creation time.","popularity":0.1209,"modified":"2020-12-11T05:04:54.583Z","other_translations":[],"pageType":"guide","source":{"folder":"en-us/web/javascript/closures","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/javascript/closures/index.md","last_commit_url":"https://github.com/mdn/content/commit/null","filename":"index.md"},"short_title":"Closures","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/en-US/docs/Web/JavaScript/Closures","title":"Closures"}],"pageTitle":"Closures - JavaScript | MDN","noIndexing":false},"url":"/en-US/docs/Web/JavaScript/Closures"}