{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{"macros":[{"id":"macro0","fixable":false,"suggestion":null,"explanation":"Wrong xref macro used (consider changing which macro you use). Error processing path /en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics","name":"MacroWrongXRefError","error":{},"errorStack":"Error: Wrong xref macro used (consider changing which macro you use). Error processing path /en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics\n    at Object.recordNonFatalError (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/render.js:90:23)\n    at Object.smartLink (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/api/web.js:95:37)\n    at eval (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/JsSidebar.ejs\":479:20)\n    at JsSidebar (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:703:17)\n    at /Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:260:40\n    at new Promise (<anonymous>)\n    at tryHandleCache (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:258:14)\n    at exports.renderFile (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:491:10)\n    at Templates.render (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/templates.js:94:40)\n    at render (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/render.js:192:56)","offset":6,"line":7,"column":1,"macroName":"jsSidebar","sourceContext":"> | {{jsSidebar(\"Advanced\")}}\n    ^\n  | <p>In programming, <em>inheritance</em> refers to passing down characteristics from a parent to a child so that a new piece of code can reuse and build upon the features of an existing one. JavaScript implements inheritance by using <a href=\"/en-US/docs/Web/JavaScript/Data_structures#objects\">objects</a>. Each object has an internal link to another object called its <em>prototype</em>. That prototype object has a prototype of its own, and so on until an object is reached with <code>null</code> as its prototype. By definition, <code>null</code> has no prototype and acts as the final link in this <strong>prototype chain</strong>. It is possible to mutate any member of the prototype chain or even swap out the prototype at runtime, so concepts like <a href=\"https://en.wikipedia.org/wiki/Static_dispatch\">static dispatching</a> do not exist in JavaScript.</p>\n  | <p>JavaScript is a bit confusing for developers experienced in class-based languages (like Java or C++), as it is <a href=\"/en-US/docs/Web/JavaScript/Data_structures#dynamic_and_weak_typing\">dynamic</a> and does not have static types. While this confusion is often considered to be one of JavaScript's weaknesses, the prototypal inheritance model itself is, in fact, more powerful than the classic model. It is, for example, fairly trivial to build a classic model on top of a prototypal model — which is how <a href=\"/en-US/docs/Web/JavaScript/Reference/Classes\">classes</a> are implemented.</p>","fatal":false,"macroSource":"{{jsSidebar(\"Advanced\")}}","filepath":"/Users/yjb/Project/content/files/en-us/web/javascript/inheritance_and_the_prototype_chain/index.md"},{"id":"macro1","fixable":false,"suggestion":null,"explanation":"Wrong xref macro used (consider changing which macro you use). Error processing path /en-US/docs/Learn/JavaScript/First_steps","name":"MacroWrongXRefError","error":{},"errorStack":"Error: Wrong xref macro used (consider changing which macro you use). Error processing path /en-US/docs/Learn/JavaScript/First_steps\n    at Object.recordNonFatalError (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/render.js:90:23)\n    at Object.smartLink (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/api/web.js:95:37)\n    at eval (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/JsSidebar.ejs\":482:20)\n    at JsSidebar (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:703:17)\n    at /Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:260:40\n    at new Promise (<anonymous>)\n    at tryHandleCache (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:258:14)\n    at exports.renderFile (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:491:10)\n    at Templates.render (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/templates.js:94:40)\n    at render (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/render.js:192:56)","offset":6,"line":7,"column":1,"macroName":"jsSidebar","sourceContext":"> | {{jsSidebar(\"Advanced\")}}\n    ^\n  | <p>In programming, <em>inheritance</em> refers to passing down characteristics from a parent to a child so that a new piece of code can reuse and build upon the features of an existing one. JavaScript implements inheritance by using <a href=\"/en-US/docs/Web/JavaScript/Data_structures#objects\">objects</a>. Each object has an internal link to another object called its <em>prototype</em>. That prototype object has a prototype of its own, and so on until an object is reached with <code>null</code> as its prototype. By definition, <code>null</code> has no prototype and acts as the final link in this <strong>prototype chain</strong>. It is possible to mutate any member of the prototype chain or even swap out the prototype at runtime, so concepts like <a href=\"https://en.wikipedia.org/wiki/Static_dispatch\">static dispatching</a> do not exist in JavaScript.</p>\n  | <p>JavaScript is a bit confusing for developers experienced in class-based languages (like Java or C++), as it is <a href=\"/en-US/docs/Web/JavaScript/Data_structures#dynamic_and_weak_typing\">dynamic</a> and does not have static types. While this confusion is often considered to be one of JavaScript's weaknesses, the prototypal inheritance model itself is, in fact, more powerful than the classic model. It is, for example, fairly trivial to build a classic model on top of a prototypal model — which is how <a href=\"/en-US/docs/Web/JavaScript/Reference/Classes\">classes</a> are implemented.</p>","fatal":false,"macroSource":"{{jsSidebar(\"Advanced\")}}","filepath":"/Users/yjb/Project/content/files/en-us/web/javascript/inheritance_and_the_prototype_chain/index.md"},{"id":"macro2","fixable":false,"suggestion":null,"explanation":"Wrong xref macro used (consider changing which macro you use). Error processing path /en-US/docs/Learn/JavaScript/Building_blocks","name":"MacroWrongXRefError","error":{},"errorStack":"Error: Wrong xref macro used (consider changing which macro you use). Error processing path /en-US/docs/Learn/JavaScript/Building_blocks\n    at Object.recordNonFatalError (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/render.js:90:23)\n    at Object.smartLink (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/api/web.js:95:37)\n    at eval (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/JsSidebar.ejs\":485:20)\n    at JsSidebar (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:703:17)\n    at /Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:260:40\n    at new Promise (<anonymous>)\n    at tryHandleCache (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:258:14)\n    at exports.renderFile (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:491:10)\n    at Templates.render (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/templates.js:94:40)\n    at render (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/render.js:192:56)","offset":6,"line":7,"column":1,"macroName":"jsSidebar","sourceContext":"> | {{jsSidebar(\"Advanced\")}}\n    ^\n  | <p>In programming, <em>inheritance</em> refers to passing down characteristics from a parent to a child so that a new piece of code can reuse and build upon the features of an existing one. JavaScript implements inheritance by using <a href=\"/en-US/docs/Web/JavaScript/Data_structures#objects\">objects</a>. Each object has an internal link to another object called its <em>prototype</em>. That prototype object has a prototype of its own, and so on until an object is reached with <code>null</code> as its prototype. By definition, <code>null</code> has no prototype and acts as the final link in this <strong>prototype chain</strong>. It is possible to mutate any member of the prototype chain or even swap out the prototype at runtime, so concepts like <a href=\"https://en.wikipedia.org/wiki/Static_dispatch\">static dispatching</a> do not exist in JavaScript.</p>\n  | <p>JavaScript is a bit confusing for developers experienced in class-based languages (like Java or C++), as it is <a href=\"/en-US/docs/Web/JavaScript/Data_structures#dynamic_and_weak_typing\">dynamic</a> and does not have static types. While this confusion is often considered to be one of JavaScript's weaknesses, the prototypal inheritance model itself is, in fact, more powerful than the classic model. It is, for example, fairly trivial to build a classic model on top of a prototypal model — which is how <a href=\"/en-US/docs/Web/JavaScript/Reference/Classes\">classes</a> are implemented.</p>","fatal":false,"macroSource":"{{jsSidebar(\"Advanced\")}}","filepath":"/Users/yjb/Project/content/files/en-us/web/javascript/inheritance_and_the_prototype_chain/index.md"},{"id":"macro3","fixable":false,"suggestion":null,"explanation":"Wrong xref macro used (consider changing which macro you use). Error processing path /en-US/docs/Learn/JavaScript/Objects","name":"MacroWrongXRefError","error":{},"errorStack":"Error: Wrong xref macro used (consider changing which macro you use). Error processing path /en-US/docs/Learn/JavaScript/Objects\n    at Object.recordNonFatalError (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/render.js:90:23)\n    at Object.smartLink (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/api/web.js:95:37)\n    at eval (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/JsSidebar.ejs\":488:20)\n    at JsSidebar (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:703:17)\n    at /Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:260:40\n    at new Promise (<anonymous>)\n    at tryHandleCache (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:258:14)\n    at exports.renderFile (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:491:10)\n    at Templates.render (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/templates.js:94:40)\n    at render (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/render.js:192:56)","offset":6,"line":7,"column":1,"macroName":"jsSidebar","sourceContext":"> | {{jsSidebar(\"Advanced\")}}\n    ^\n  | <p>In programming, <em>inheritance</em> refers to passing down characteristics from a parent to a child so that a new piece of code can reuse and build upon the features of an existing one. JavaScript implements inheritance by using <a href=\"/en-US/docs/Web/JavaScript/Data_structures#objects\">objects</a>. Each object has an internal link to another object called its <em>prototype</em>. That prototype object has a prototype of its own, and so on until an object is reached with <code>null</code> as its prototype. By definition, <code>null</code> has no prototype and acts as the final link in this <strong>prototype chain</strong>. It is possible to mutate any member of the prototype chain or even swap out the prototype at runtime, so concepts like <a href=\"https://en.wikipedia.org/wiki/Static_dispatch\">static dispatching</a> do not exist in JavaScript.</p>\n  | <p>JavaScript is a bit confusing for developers experienced in class-based languages (like Java or C++), as it is <a href=\"/en-US/docs/Web/JavaScript/Data_structures#dynamic_and_weak_typing\">dynamic</a> and does not have static types. While this confusion is often considered to be one of JavaScript's weaknesses, the prototypal inheritance model itself is, in fact, more powerful than the classic model. It is, for example, fairly trivial to build a classic model on top of a prototypal model — which is how <a href=\"/en-US/docs/Web/JavaScript/Reference/Classes\">classes</a> are implemented.</p>","fatal":false,"macroSource":"{{jsSidebar(\"Advanced\")}}","filepath":"/Users/yjb/Project/content/files/en-us/web/javascript/inheritance_and_the_prototype_chain/index.md"},{"id":"macro4","fixable":false,"suggestion":null,"explanation":"Wrong xref macro used (consider changing which macro you use). Error processing path /en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks","name":"MacroWrongXRefError","error":{},"errorStack":"Error: Wrong xref macro used (consider changing which macro you use). Error processing path /en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks\n    at Object.recordNonFatalError (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/render.js:90:23)\n    at Object.smartLink (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/api/web.js:95:37)\n    at eval (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/JsSidebar.ejs\":557:20)\n    at JsSidebar (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:703:17)\n    at /Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:260:40\n    at new Promise (<anonymous>)\n    at tryHandleCache (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:258:14)\n    at exports.renderFile (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:491:10)\n    at Templates.render (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/templates.js:94:40)\n    at render (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/render.js:192:56)","offset":6,"line":7,"column":1,"macroName":"jsSidebar","sourceContext":"> | {{jsSidebar(\"Advanced\")}}\n    ^\n  | <p>In programming, <em>inheritance</em> refers to passing down characteristics from a parent to a child so that a new piece of code can reuse and build upon the features of an existing one. JavaScript implements inheritance by using <a href=\"/en-US/docs/Web/JavaScript/Data_structures#objects\">objects</a>. Each object has an internal link to another object called its <em>prototype</em>. That prototype object has a prototype of its own, and so on until an object is reached with <code>null</code> as its prototype. By definition, <code>null</code> has no prototype and acts as the final link in this <strong>prototype chain</strong>. It is possible to mutate any member of the prototype chain or even swap out the prototype at runtime, so concepts like <a href=\"https://en.wikipedia.org/wiki/Static_dispatch\">static dispatching</a> do not exist in JavaScript.</p>\n  | <p>JavaScript is a bit confusing for developers experienced in class-based languages (like Java or C++), as it is <a href=\"/en-US/docs/Web/JavaScript/Data_structures#dynamic_and_weak_typing\">dynamic</a> and does not have static types. While this confusion is often considered to be one of JavaScript's weaknesses, the prototypal inheritance model itself is, in fact, more powerful than the classic model. It is, for example, fairly trivial to build a classic model on top of a prototypal model — which is how <a href=\"/en-US/docs/Web/JavaScript/Reference/Classes\">classes</a> are implemented.</p>","fatal":false,"macroSource":"{{jsSidebar(\"Advanced\")}}","filepath":"/Users/yjb/Project/content/files/en-us/web/javascript/inheritance_and_the_prototype_chain/index.md"},{"id":"macro5","fixable":false,"suggestion":null,"explanation":"Wrong xref macro used (consider changing which macro you use). Error processing path /en-US/docs/Learn/JavaScript/Client-side_web_APIs","name":"MacroWrongXRefError","error":{},"errorStack":"Error: Wrong xref macro used (consider changing which macro you use). Error processing path /en-US/docs/Learn/JavaScript/Client-side_web_APIs\n    at Object.recordNonFatalError (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/render.js:90:23)\n    at Object.smartLink (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/api/web.js:95:37)\n    at eval (\"/Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/macros/JsSidebar.ejs\":560:20)\n    at JsSidebar (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:703:17)\n    at /Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:260:40\n    at new Promise (<anonymous>)\n    at tryHandleCache (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:258:14)\n    at exports.renderFile (/Users/yjb/Project/content/node_modules/ejs/lib/ejs.js:491:10)\n    at Templates.render (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/templates.js:94:40)\n    at render (file:///Users/yjb/Project/content/node_modules/@mdn/yari/kumascript/src/render.js:192:56)","offset":6,"line":7,"column":1,"macroName":"jsSidebar","sourceContext":"> | {{jsSidebar(\"Advanced\")}}\n    ^\n  | <p>In programming, <em>inheritance</em> refers to passing down characteristics from a parent to a child so that a new piece of code can reuse and build upon the features of an existing one. JavaScript implements inheritance by using <a href=\"/en-US/docs/Web/JavaScript/Data_structures#objects\">objects</a>. Each object has an internal link to another object called its <em>prototype</em>. That prototype object has a prototype of its own, and so on until an object is reached with <code>null</code> as its prototype. By definition, <code>null</code> has no prototype and acts as the final link in this <strong>prototype chain</strong>. It is possible to mutate any member of the prototype chain or even swap out the prototype at runtime, so concepts like <a href=\"https://en.wikipedia.org/wiki/Static_dispatch\">static dispatching</a> do not exist in JavaScript.</p>\n  | <p>JavaScript is a bit confusing for developers experienced in class-based languages (like Java or C++), as it is <a href=\"/en-US/docs/Web/JavaScript/Data_structures#dynamic_and_weak_typing\">dynamic</a> and does not have static types. While this confusion is often considered to be one of JavaScript's weaknesses, the prototypal inheritance model itself is, in fact, more powerful than the classic model. It is, for example, fairly trivial to build a classic model on top of a prototypal model — which is how <a href=\"/en-US/docs/Web/JavaScript/Reference/Classes\">classes</a> are implemented.</p>","fatal":false,"macroSource":"{{jsSidebar(\"Advanced\")}}","filepath":"/Users/yjb/Project/content/files/en-us/web/javascript/inheritance_and_the_prototype_chain/index.md"}]},"title":"Inheritance and the prototype chain","mdn_url":"/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain","locale":"en-US","native":"English (US)","summary":"In programming, inheritance refers to passing down characteristics from a parent to a child so that a new piece of code can reuse and build upon the features of an existing one. JavaScript implements inheritance by using objects. Each object has an internal link to another object called its prototype. That prototype object has a prototype of its own, and so on until an object is reached with null as its prototype. By definition, null has no prototype and acts as the final link in this prototype chain. It is possible to mutate any member of the prototype chain or even swap out the prototype at runtime, so concepts like static dispatching do not exist in JavaScript.","popularity":0.0597,"modified":"2020-10-19T22:27:25.681Z","other_translations":[],"pageType":"guide","source":{"folder":"en-us/web/javascript/inheritance_and_the_prototype_chain","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/javascript/inheritance_and_the_prototype_chain/index.md","last_commit_url":"https://github.com/mdn/content/commit/null","filename":"index.md"},"short_title":"Inheritance and the prototype chain","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain","title":"Inheritance and the prototype chain"}],"pageTitle":"Inheritance and the prototype chain - JavaScript | MDN","noIndexing":false,"hash":"973ff9bcf9beb9a0b72c10520ea8b6ccb139d802b1cd013ed4397d055e1c021e"}