{"pageProps":{"toc":"[]","content":"[[\"$r\",\"MaxWidth\",\"last\",{\"children\":[[\"$r\",\"p\",null,{\"children\":\"The unknown-prop warning will fire if you attempt to render a DOM element with a prop that is not recognized by React as a legal DOM attribute/property. You should ensure that your DOM elements do not have spurious props floating around.\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"There are a couple of likely reasons this warning could be appearing:\"}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Are you using \",[\"$r\",\"code\",null,{\"children\":\"{...props}\"}],\" or \",[\"$r\",\"code\",null,{\"children\":\"cloneElement(element, props)\"}],\"? When copying props to a child component, you should ensure that you are not accidentally forwarding props that were intended only for the parent component. See common fixes for this problem below.\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"You are using a non-standard DOM attribute on a native DOM node, perhaps to represent custom data. If you are trying to attach custom data to a standard DOM element, consider using a custom data attribute as described \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Using_data_attributes\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"on MDN\"}],\".\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"React does not yet recognize the attribute you specified. This will likely be fixed in a future version of React. React will allow you to pass it without a warning if you write the attribute name lowercase.\"}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"You are using a React component without an upper case, for example \",[\"$r\",\"code\",null,{\"children\":\"<myButton />\"}],\". React interprets it as a DOM tag because React JSX transform uses the upper vs. lower case convention to distinguish between user-defined components and DOM tags. For your own React components, use PascalCase. For example, write \",[\"$r\",\"code\",null,{\"children\":\"<MyButton />\"}],\" instead of \",[\"$r\",\"code\",null,{\"children\":\"<myButton />\"}],\".\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"If you get this warning because you pass props like \",[\"$r\",\"code\",null,{\"children\":\"{...props}\"}],\", your parent component needs to “consume” any prop that is intended for the parent component and not intended for the child component. Example:\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"Bad:\"}],\" Unexpected \",[\"$r\",\"code\",null,{\"children\":\"layout\"}],\" prop is forwarded to the \",[\"$r\",\"code\",null,{\"children\":\"div\"}],\" tag.\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function MyDiv(props) {\\n  if (props.layout === 'horizontal') {\\n    // BAD! Because you know for sure \\\"layout\\\" is not a prop that <div> understands.\\n    return <div {...props} style={getHorizontalStyle()} />\\n  } else {\\n    // BAD! Because you know for sure \\\"layout\\\" is not a prop that <div> understands.\\n    return <div {...props} style={getVerticalStyle()} />\\n  }\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"Good:\"}],\" The spread syntax can be used to pull variables off props, and put the remaining props into a variable.\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function MyDiv(props) {\\n  const { layout, ...rest } = props\\n  if (layout === 'horizontal') {\\n    return <div {...rest} style={getHorizontalStyle()} />\\n  } else {\\n    return <div {...rest} style={getVerticalStyle()} />\\n  }\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"Good:\"}],\" You can also assign the props to a new object and delete the keys that you’re using from the new object. Be sure not to delete the props from the original \",[\"$r\",\"code\",null,{\"children\":\"this.props\"}],\" object, since that object should be considered immutable.\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function MyDiv(props) {\\n  const divProps = Object.assign({}, props);\\n  delete divProps.layout;\\n\\n  if (props.layout === 'horizontal') {\\n    return <div {...divProps} style={getHorizontalStyle()} />\\n  } else {\\n    return <div {...divProps} style={getVerticalStyle()} />\\n  }\\n}\\n\"}]}]]}]]","meta":{"title":"Unknown Prop Warning"},"languages":null},"__N_SSG":true}