{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"Overview\",\"depth\":2},{\"url\":\"#combining-a-reducer-with-context\",\"depth\":2,\"text\":\"Combining a reducer with context \"},{\"url\":\"#step-1-create-the-context\",\"depth\":3,\"text\":\"Step 1: Create the context \"},{\"url\":\"#step-2-put-state-and-dispatch-into-context\",\"depth\":3,\"text\":\"Step 2: Put state and dispatch into context \"},{\"url\":\"#step-3-use-context-anywhere-in-the-tree\",\"depth\":3,\"text\":\"Step 3: Use context anywhere in the tree \"},{\"url\":\"#moving-all-wiring-into-a-single-file\",\"depth\":2,\"text\":\"Moving all wiring into a single file \"},{\"url\":\"#recap\",\"depth\":2,\"text\":\"Recap\"}]","content":"[[\"$r\",\"MaxWidth\",\"8\",{\"children\":[[\"$r\",\"Intro\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":\"Reducers let you consolidate a component’s state update logic. Context lets you pass information deep down to other components. You can combine reducers and context together to manage state of a complex screen.\"}]}],\"\\n\",[\"$r\",\"YouWillLearn\",null,{\"children\":[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"How to combine a reducer with context\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"How to avoid passing state and dispatch through props\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"How to keep context and state logic in a separate file\"}],\"\\n\"]}]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"combining-a-reducer-with-context\",\"children\":\"Combining a reducer with context \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"In this example from \",[\"$r\",\"a\",null,{\"href\":\"/learn/extracting-state-logic-into-a-reducer\",\"children\":\"the introduction to reducers\"}],\", the state is managed by a reducer. The reducer function contains all of the state update logic and is declared at the bottom of this file:\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useReducer } from 'react';\\nimport AddTask from './AddTask.js';\\nimport TaskList from './TaskList.js';\\n\\nexport default function TaskApp() {\\n  const [tasks, dispatch] = useReducer(\\n    tasksReducer,\\n    initialTasks\\n  );\\n\\n  function handleAddTask(text) {\\n    dispatch({\\n      type: 'added',\\n      id: nextId++,\\n      text: text,\\n    });\\n  }\\n\\n  function handleChangeTask(task) {\\n    dispatch({\\n      type: 'changed',\\n      task: task\\n    });\\n  }\\n\\n  function handleDeleteTask(taskId) {\\n    dispatch({\\n      type: 'deleted',\\n      id: taskId\\n    });\\n  }\\n\\n  return (\\n    <>\\n      <h1>Day off in Kyoto</h1>\\n      <AddTask\\n        onAddTask={handleAddTask}\\n      />\\n      <TaskList\\n        tasks={tasks}\\n        onChangeTask={handleChangeTask}\\n        onDeleteTask={handleDeleteTask}\\n      />\\n    </>\\n  );\\n}\\n\\nfunction tasksReducer(tasks, action) {\\n  switch (action.type) {\\n    case 'added': {\\n      return [...tasks, {\\n        id: action.id,\\n        text: action.text,\\n        done: false\\n      }];\\n    }\\n    case 'changed': {\\n      return tasks.map(t => {\\n        if (t.id === action.task.id) {\\n          return action.task;\\n        } else {\\n          return t;\\n        }\\n      });\\n    }\\n    case 'deleted': {\\n      return tasks.filter(t => t.id !== action.id);\\n    }\\n    default: {\\n      throw Error('Unknown action: ' + action.type);\\n    }\\n  }\\n}\\n\\nlet nextId = 3;\\nconst initialTasks = [\\n  { id: 0, text: 'Philosopher’s Path', done: true },\\n  { id: 1, text: 'Visit the temple', done: false },\\n  { id: 2, text: 'Drink matcha', done: false }\\n];\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/AddTask.js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function AddTask({ onAddTask }) {\\n  const [text, setText] = useState('');\\n  return (\\n    <>\\n      <input\\n        placeholder=\\\"Add task\\\"\\n        value={text}\\n        onChange={e => setText(e.target.value)}\\n      />\\n      <button onClick={() => {\\n        setText('');\\n        onAddTask(text);\\n      }}>Add</button>\\n    </>\\n  )\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TaskList.js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function TaskList({\\n  tasks,\\n  onChangeTask,\\n  onDeleteTask\\n}) {\\n  return (\\n    <ul>\\n      {tasks.map(task => (\\n        <li key={task.id}>\\n          <Task\\n            task={task}\\n            onChange={onChangeTask}\\n            onDelete={onDeleteTask}\\n          />\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\\nfunction Task({ task, onChange, onDelete }) {\\n  const [isEditing, setIsEditing] = useState(false);\\n  let taskContent;\\n  if (isEditing) {\\n    taskContent = (\\n      <>\\n        <input\\n          value={task.text}\\n          onChange={e => {\\n            onChange({\\n              ...task,\\n              text: e.target.value\\n            });\\n          }} />\\n        <button onClick={() => setIsEditing(false)}>\\n          Save\\n        </button>\\n      </>\\n    );\\n  } else {\\n    taskContent = (\\n      <>\\n        {task.text}\\n        <button onClick={() => setIsEditing(true)}>\\n          Edit\\n        </button>\\n      </>\\n    );\\n  }\\n  return (\\n    <label>\\n      <input\\n        type=\\\"checkbox\\\"\\n        checked={task.done}\\n        onChange={e => {\\n          onChange({\\n            ...task,\\n            done: e.target.checked\\n          });\\n        }}\\n      />\\n      {taskContent}\\n      <button onClick={() => onDelete(task.id)}>\\n        Delete\\n      </button>\\n    </label>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin: 5px; }\\nli { list-style-type: none; }\\nul, li { margin: 0; padding: 0; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"40\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"A reducer helps keep the event handlers short and concise. However, as your app grows, you might run into another difficulty. \",[\"$r\",\"strong\",null,{\"children\":[\"Currently, the \",[\"$r\",\"code\",null,{\"children\":\"tasks\"}],\" state and the \",[\"$r\",\"code\",null,{\"children\":\"dispatch\"}],\" function are only available in the top-level \",[\"$r\",\"code\",null,{\"children\":\"TaskApp\"}],\" component.\"]}],\" To let other components read the list of tasks or change it, you have to explicitly \",[\"$r\",\"a\",null,{\"href\":\"/learn/passing-props-to-a-component\",\"children\":\"pass down\"}],\" the current state and the event handlers that change it as props.\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"For example, \",[\"$r\",\"code\",null,{\"children\":\"TaskApp\"}],\" passes a list of tasks and the event handlers to \",[\"$r\",\"code\",null,{\"children\":\"TaskList\"}],\":\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"<TaskList\\n  tasks={tasks}\\n  onChangeTask={handleChangeTask}\\n  onDeleteTask={handleDeleteTask}\\n/>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"And \",[\"$r\",\"code\",null,{\"children\":\"TaskList\"}],\" passes the event handlers to \",[\"$r\",\"code\",null,{\"children\":\"Task\"}],\":\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"<Task\\n  task={task}\\n  onChange={onChangeTask}\\n  onDelete={onDeleteTask}\\n/>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"In a small example like this, this works well, but if you have tens or hundreds of components in the middle, passing down all state and functions can be quite frustrating!\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"This is why, as an alternative to passing them through props, you might want to put both the \",[\"$r\",\"code\",null,{\"children\":\"tasks\"}],\" state and the \",[\"$r\",\"code\",null,{\"children\":\"dispatch\"}],\" function \",[\"$r\",\"a\",null,{\"href\":\"/learn/passing-data-deeply-with-context\",\"children\":\"into context.\"}],\" \",[\"$r\",\"strong\",null,{\"children\":[\"This way, any component below \",[\"$r\",\"code\",null,{\"children\":\"TaskApp\"}],\" in the tree can read the tasks and dispatch actions without the repetitive “prop drilling”.\"]}]]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"Here is how you can combine a reducer with context:\"}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"Create\"}],\" the context.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"Put\"}],\" state and dispatch into context.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"Use\"}],\" context anywhere in the tree.\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"step-1-create-the-context\",\"children\":\"Step 1: Create the context \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"The \",[\"$r\",\"code\",null,{\"children\":\"useReducer\"}],\" Hook returns the current \",[\"$r\",\"code\",null,{\"children\":\"tasks\"}],\" and the \",[\"$r\",\"code\",null,{\"children\":\"dispatch\"}],\" function that lets you update them:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"To pass them down the tree, you will \",[\"$r\",\"a\",null,{\"href\":\"/learn/passing-data-deeply-with-context#step-2-use-the-context\",\"children\":\"create\"}],\" two separate contexts:\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"TasksContext\"}],\" provides the current list of tasks.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"TasksDispatchContext\"}],\" provides the function that lets components dispatch actions.\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"Export them from a separate file so that you can later import them from other files:\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useReducer } from 'react';\\nimport AddTask from './AddTask.js';\\nimport TaskList from './TaskList.js';\\n\\nexport default function TaskApp() {\\n  const [tasks, dispatch] = useReducer(\\n    tasksReducer,\\n    initialTasks\\n  );\\n\\n  function handleAddTask(text) {\\n    dispatch({\\n      type: 'added',\\n      id: nextId++,\\n      text: text,\\n    });\\n  }\\n\\n  function handleChangeTask(task) {\\n    dispatch({\\n      type: 'changed',\\n      task: task\\n    });\\n  }\\n\\n  function handleDeleteTask(taskId) {\\n    dispatch({\\n      type: 'deleted',\\n      id: taskId\\n    });\\n  }\\n\\n  return (\\n    <>\\n      <h1>Day off in Kyoto</h1>\\n      <AddTask\\n        onAddTask={handleAddTask}\\n      />\\n      <TaskList\\n        tasks={tasks}\\n        onChangeTask={handleChangeTask}\\n        onDeleteTask={handleDeleteTask}\\n      />\\n    </>\\n  );\\n}\\n\\nfunction tasksReducer(tasks, action) {\\n  switch (action.type) {\\n    case 'added': {\\n      return [...tasks, {\\n        id: action.id,\\n        text: action.text,\\n        done: false\\n      }];\\n    }\\n    case 'changed': {\\n      return tasks.map(t => {\\n        if (t.id === action.task.id) {\\n          return action.task;\\n        } else {\\n          return t;\\n        }\\n      });\\n    }\\n    case 'deleted': {\\n      return tasks.filter(t => t.id !== action.id);\\n    }\\n    default: {\\n      throw Error('Unknown action: ' + action.type);\\n    }\\n  }\\n}\\n\\nlet nextId = 3;\\nconst initialTasks = [\\n  { id: 0, text: 'Philosopher’s Path', done: true },\\n  { id: 1, text: 'Visit the temple', done: false },\\n  { id: 2, text: 'Drink matcha', done: false }\\n];\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TasksContext.js active\",\"children\":\"import { createContext } from 'react';\\n\\nexport const TasksContext = createContext(null);\\nexport const TasksDispatchContext = createContext(null);\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/AddTask.js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function AddTask({ onAddTask }) {\\n  const [text, setText] = useState('');\\n  return (\\n    <>\\n      <input\\n        placeholder=\\\"Add task\\\"\\n        value={text}\\n        onChange={e => setText(e.target.value)}\\n      />\\n      <button onClick={() => {\\n        setText('');\\n        onAddTask(text);\\n      }}>Add</button>\\n    </>\\n  )\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TaskList.js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function TaskList({\\n  tasks,\\n  onChangeTask,\\n  onDeleteTask\\n}) {\\n  return (\\n    <ul>\\n      {tasks.map(task => (\\n        <li key={task.id}>\\n          <Task\\n            task={task}\\n            onChange={onChangeTask}\\n            onDelete={onDeleteTask}\\n          />\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\\nfunction Task({ task, onChange, onDelete }) {\\n  const [isEditing, setIsEditing] = useState(false);\\n  let taskContent;\\n  if (isEditing) {\\n    taskContent = (\\n      <>\\n        <input\\n          value={task.text}\\n          onChange={e => {\\n            onChange({\\n              ...task,\\n              text: e.target.value\\n            });\\n          }} />\\n        <button onClick={() => setIsEditing(false)}>\\n          Save\\n        </button>\\n      </>\\n    );\\n  } else {\\n    taskContent = (\\n      <>\\n        {task.text}\\n        <button onClick={() => setIsEditing(true)}>\\n          Edit\\n        </button>\\n      </>\\n    );\\n  }\\n  return (\\n    <label>\\n      <input\\n        type=\\\"checkbox\\\"\\n        checked={task.done}\\n        onChange={e => {\\n          onChange({\\n            ...task,\\n            done: e.target.checked\\n          });\\n        }}\\n      />\\n      {taskContent}\\n      <button onClick={() => onDelete(task.id)}>\\n        Delete\\n      </button>\\n    </label>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin: 5px; }\\nli { list-style-type: none; }\\nul, li { margin: 0; padding: 0; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"52\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Here, you’re passing \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\" as the default value to both contexts. The actual values will be provided by the \",[\"$r\",\"code\",null,{\"children\":\"TaskApp\"}],\" component.\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"step-2-put-state-and-dispatch-into-context\",\"children\":\"Step 2: Put state and dispatch into context \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Now you can import both contexts in your \",[\"$r\",\"code\",null,{\"children\":\"TaskApp\"}],\" component. Take the \",[\"$r\",\"code\",null,{\"children\":\"tasks\"}],\" and \",[\"$r\",\"code\",null,{\"children\":\"dispatch\"}],\" returned by \",[\"$r\",\"code\",null,{\"children\":\"useReducer()\"}],\" and \",[\"$r\",\"a\",null,{\"href\":\"/learn/passing-data-deeply-with-context#step-3-provide-the-context\",\"children\":\"provide them\"}],\" to the entire tree below:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4,7-8}\",\"children\":\"import { TasksContext, TasksDispatchContext } from './TasksContext.js';\\n\\nexport default function TaskApp() {\\n  const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);\\n  // ...\\n  return (\\n    <TasksContext.Provider value={tasks}>\\n      <TasksDispatchContext.Provider value={dispatch}>\\n        ...\\n      </TasksDispatchContext.Provider>\\n    </TasksContext.Provider>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"For now, you pass the information both via props and in context:\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useReducer } from 'react';\\nimport AddTask from './AddTask.js';\\nimport TaskList from './TaskList.js';\\nimport { TasksContext, TasksDispatchContext } from './TasksContext.js';\\n\\nexport default function TaskApp() {\\n  const [tasks, dispatch] = useReducer(\\n    tasksReducer,\\n    initialTasks\\n  );\\n\\n  function handleAddTask(text) {\\n    dispatch({\\n      type: 'added',\\n      id: nextId++,\\n      text: text,\\n    });\\n  }\\n\\n  function handleChangeTask(task) {\\n    dispatch({\\n      type: 'changed',\\n      task: task\\n    });\\n  }\\n\\n  function handleDeleteTask(taskId) {\\n    dispatch({\\n      type: 'deleted',\\n      id: taskId\\n    });\\n  }\\n\\n  return (\\n    <TasksContext.Provider value={tasks}>\\n      <TasksDispatchContext.Provider value={dispatch}>\\n        <h1>Day off in Kyoto</h1>\\n        <AddTask\\n          onAddTask={handleAddTask}\\n        />\\n        <TaskList\\n          tasks={tasks}\\n          onChangeTask={handleChangeTask}\\n          onDeleteTask={handleDeleteTask}\\n        />\\n      </TasksDispatchContext.Provider>\\n    </TasksContext.Provider>\\n  );\\n}\\n\\nfunction tasksReducer(tasks, action) {\\n  switch (action.type) {\\n    case 'added': {\\n      return [...tasks, {\\n        id: action.id,\\n        text: action.text,\\n        done: false\\n      }];\\n    }\\n    case 'changed': {\\n      return tasks.map(t => {\\n        if (t.id === action.task.id) {\\n          return action.task;\\n        } else {\\n          return t;\\n        }\\n      });\\n    }\\n    case 'deleted': {\\n      return tasks.filter(t => t.id !== action.id);\\n    }\\n    default: {\\n      throw Error('Unknown action: ' + action.type);\\n    }\\n  }\\n}\\n\\nlet nextId = 3;\\nconst initialTasks = [\\n  { id: 0, text: 'Philosopher’s Path', done: true },\\n  { id: 1, text: 'Visit the temple', done: false },\\n  { id: 2, text: 'Drink matcha', done: false }\\n];\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TasksContext.js\",\"children\":\"import { createContext } from 'react';\\n\\nexport const TasksContext = createContext(null);\\nexport const TasksDispatchContext = createContext(null);\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/AddTask.js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function AddTask({ onAddTask }) {\\n  const [text, setText] = useState('');\\n  return (\\n    <>\\n      <input\\n        placeholder=\\\"Add task\\\"\\n        value={text}\\n        onChange={e => setText(e.target.value)}\\n      />\\n      <button onClick={() => {\\n        setText('');\\n        onAddTask(text);\\n      }}>Add</button>\\n    </>\\n  )\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TaskList.js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function TaskList({\\n  tasks,\\n  onChangeTask,\\n  onDeleteTask\\n}) {\\n  return (\\n    <ul>\\n      {tasks.map(task => (\\n        <li key={task.id}>\\n          <Task\\n            task={task}\\n            onChange={onChangeTask}\\n            onDelete={onDeleteTask}\\n          />\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\\nfunction Task({ task, onChange, onDelete }) {\\n  const [isEditing, setIsEditing] = useState(false);\\n  let taskContent;\\n  if (isEditing) {\\n    taskContent = (\\n      <>\\n        <input\\n          value={task.text}\\n          onChange={e => {\\n            onChange({\\n              ...task,\\n              text: e.target.value\\n            });\\n          }} />\\n        <button onClick={() => setIsEditing(false)}>\\n          Save\\n        </button>\\n      </>\\n    );\\n  } else {\\n    taskContent = (\\n      <>\\n        {task.text}\\n        <button onClick={() => setIsEditing(true)}>\\n          Edit\\n        </button>\\n      </>\\n    );\\n  }\\n  return (\\n    <label>\\n      <input\\n        type=\\\"checkbox\\\"\\n        checked={task.done}\\n        onChange={e => {\\n          onChange({\\n            ...task,\\n            done: e.target.checked\\n          });\\n        }}\\n      />\\n      {taskContent}\\n      <button onClick={() => onDelete(task.id)}>\\n        Delete\\n      </button>\\n    </label>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin: 5px; }\\nli { list-style-type: none; }\\nul, li { margin: 0; padding: 0; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"72\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"In the next step, you will remove prop passing.\"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"step-3-use-context-anywhere-in-the-tree\",\"children\":\"Step 3: Use context anywhere in the tree \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"Now you don’t need to pass the list of tasks or the event handlers down the tree:\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4-5}\",\"children\":\"<TasksContext.Provider value={tasks}>\\n  <TasksDispatchContext.Provider value={dispatch}>\\n    <h1>Day off in Kyoto</h1>\\n    <AddTask />\\n    <TaskList />\\n  </TasksDispatchContext.Provider>\\n</TasksContext.Provider>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Instead, any component that needs the task list can read it from the \",[\"$r\",\"code\",null,{\"children\":\"TaskContext\"}],\":\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2}\",\"children\":\"export default function TaskList() {\\n  const tasks = useContext(TasksContext);\\n  // ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"To update the task list, any component can read the \",[\"$r\",\"code\",null,{\"children\":\"dispatch\"}],\" function from context and call it:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3,9-13}\",\"children\":\"export default function AddTask() {\\n  const [text, setText] = useState('');\\n  const dispatch = useContext(TasksDispatchContext);\\n  // ...\\n  return (\\n    // ...\\n    <button onClick={() => {\\n      setText('');\\n      dispatch({\\n        type: 'added',\\n        id: nextId++,\\n        text: text,\\n      });\\n    }}>Add</button>\\n    // ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":[\"The \",[\"$r\",\"code\",null,{\"children\":\"TaskApp\"}],\" component does not pass any event handlers down, and the \",[\"$r\",\"code\",null,{\"children\":\"TaskList\"}],\" does not pass any event handlers to the \",[\"$r\",\"code\",null,{\"children\":\"Task\"}],\" component either.\"]}],\" Each component reads the context that it needs:\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useReducer } from 'react';\\nimport AddTask from './AddTask.js';\\nimport TaskList from './TaskList.js';\\nimport { TasksContext, TasksDispatchContext } from './TasksContext.js';\\n\\nexport default function TaskApp() {\\n  const [tasks, dispatch] = useReducer(\\n    tasksReducer,\\n    initialTasks\\n  );\\n\\n  return (\\n    <TasksContext.Provider value={tasks}>\\n      <TasksDispatchContext.Provider value={dispatch}>\\n        <h1>Day off in Kyoto</h1>\\n        <AddTask />\\n        <TaskList />\\n      </TasksDispatchContext.Provider>\\n    </TasksContext.Provider>\\n  );\\n}\\n\\nfunction tasksReducer(tasks, action) {\\n  switch (action.type) {\\n    case 'added': {\\n      return [...tasks, {\\n        id: action.id,\\n        text: action.text,\\n        done: false\\n      }];\\n    }\\n    case 'changed': {\\n      return tasks.map(t => {\\n        if (t.id === action.task.id) {\\n          return action.task;\\n        } else {\\n          return t;\\n        }\\n      });\\n    }\\n    case 'deleted': {\\n      return tasks.filter(t => t.id !== action.id);\\n    }\\n    default: {\\n      throw Error('Unknown action: ' + action.type);\\n    }\\n  }\\n}\\n\\nconst initialTasks = [\\n  { id: 0, text: 'Philosopher’s Path', done: true },\\n  { id: 1, text: 'Visit the temple', done: false },\\n  { id: 2, text: 'Drink matcha', done: false }\\n];\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TasksContext.js\",\"children\":\"import { createContext } from 'react';\\n\\nexport const TasksContext = createContext(null);\\nexport const TasksDispatchContext = createContext(null);\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/AddTask.js\",\"children\":\"import { useState, useContext } from 'react';\\nimport { TasksDispatchContext } from './TasksContext.js';\\n\\nexport default function AddTask() {\\n  const [text, setText] = useState('');\\n  const dispatch = useContext(TasksDispatchContext);\\n  return (\\n    <>\\n      <input\\n        placeholder=\\\"Add task\\\"\\n        value={text}\\n        onChange={e => setText(e.target.value)}\\n      />\\n      <button onClick={() => {\\n        setText('');\\n        dispatch({\\n          type: 'added',\\n          id: nextId++,\\n          text: text,\\n        }); \\n      }}>Add</button>\\n    </>\\n  );\\n}\\n\\nlet nextId = 3;\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TaskList.js active\",\"children\":\"import { useState, useContext } from 'react';\\nimport { TasksContext, TasksDispatchContext } from './TasksContext.js';\\n\\nexport default function TaskList() {\\n  const tasks = useContext(TasksContext);\\n  return (\\n    <ul>\\n      {tasks.map(task => (\\n        <li key={task.id}>\\n          <Task task={task} />\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\\nfunction Task({ task }) {\\n  const [isEditing, setIsEditing] = useState(false);\\n  const dispatch = useContext(TasksDispatchContext);\\n  let taskContent;\\n  if (isEditing) {\\n    taskContent = (\\n      <>\\n        <input\\n          value={task.text}\\n          onChange={e => {\\n            dispatch({\\n              type: 'changed',\\n              task: {\\n                ...task,\\n                text: e.target.value\\n              }\\n            });\\n          }} />\\n        <button onClick={() => setIsEditing(false)}>\\n          Save\\n        </button>\\n      </>\\n    );\\n  } else {\\n    taskContent = (\\n      <>\\n        {task.text}\\n        <button onClick={() => setIsEditing(true)}>\\n          Edit\\n        </button>\\n      </>\\n    );\\n  }\\n  return (\\n    <label>\\n      <input\\n        type=\\\"checkbox\\\"\\n        checked={task.done}\\n        onChange={e => {\\n          dispatch({\\n            type: 'changed',\\n            task: {\\n              ...task,\\n              done: e.target.checked\\n            }\\n          });\\n        }}\\n      />\\n      {taskContent}\\n      <button onClick={() => {\\n        dispatch({\\n          type: 'deleted',\\n          id: task.id\\n        });\\n      }}>\\n        Delete\\n      </button>\\n    </label>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin: 5px; }\\nli { list-style-type: none; }\\nul, li { margin: 0; padding: 0; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"90\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":[\"The state still “lives” in the top-level \",[\"$r\",\"code\",null,{\"children\":\"TaskApp\"}],\" component, managed with \",[\"$r\",\"code\",null,{\"children\":\"useReducer\"}],\".\"]}],\" But its \",[\"$r\",\"code\",null,{\"children\":\"tasks\"}],\" and \",[\"$r\",\"code\",null,{\"children\":\"dispatch\"}],\" are now available to every component below in the tree by importing and using these contexts.\"]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"moving-all-wiring-into-a-single-file\",\"children\":\"Moving all wiring into a single file \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"You don’t have to do this, but you could further declutter the components by moving both reducer and context into a single file. Currently, \",[\"$r\",\"code\",null,{\"children\":\"TasksContext.js\"}],\" contains only two context declarations:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { createContext } from 'react';\\n\\nexport const TasksContext = createContext(null);\\nexport const TasksDispatchContext = createContext(null);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"This file is about to get crowded! You’ll move the reducer into that same file. Then you’ll declare a new \",[\"$r\",\"code\",null,{\"children\":\"TasksProvider\"}],\" component in the same file. This component will tie all the pieces together:\"]}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"It will manage the state with a reducer.\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"It will provide both contexts to components below.\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"It will \",[\"$r\",\"a\",null,{\"href\":\"/learn/passing-props-to-a-component#passing-jsx-as-children\",\"children\":[\"take \",[\"$r\",\"code\",null,{\"children\":\"children\"}],\" as a prop\"]}],\" so you can pass JSX to it.\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export function TasksProvider({ children }) {\\n  const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);\\n\\n  return (\\n    <TasksContext.Provider value={tasks}>\\n      <TasksDispatchContext.Provider value={dispatch}>\\n        {children}\\n      </TasksDispatchContext.Provider>\\n    </TasksContext.Provider>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"$r\",\"strong\",null,{\"children\":[\"This removes all the complexity and wiring from your \",[\"$r\",\"code\",null,{\"children\":\"TaskApp\"}],\" component:\"]}]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import AddTask from './AddTask.js';\\nimport TaskList from './TaskList.js';\\nimport { TasksProvider } from './TasksContext.js';\\n\\nexport default function TaskApp() {\\n  return (\\n    <TasksProvider>\\n      <h1>Day off in Kyoto</h1>\\n      <AddTask />\\n      <TaskList />\\n    </TasksProvider>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TasksContext.js\",\"children\":\"import { createContext, useReducer } from 'react';\\n\\nexport const TasksContext = createContext(null);\\nexport const TasksDispatchContext = createContext(null);\\n\\nexport function TasksProvider({ children }) {\\n  const [tasks, dispatch] = useReducer(\\n    tasksReducer,\\n    initialTasks\\n  );\\n\\n  return (\\n    <TasksContext.Provider value={tasks}>\\n      <TasksDispatchContext.Provider value={dispatch}>\\n        {children}\\n      </TasksDispatchContext.Provider>\\n    </TasksContext.Provider>\\n  );\\n}\\n\\nfunction tasksReducer(tasks, action) {\\n  switch (action.type) {\\n    case 'added': {\\n      return [...tasks, {\\n        id: action.id,\\n        text: action.text,\\n        done: false\\n      }];\\n    }\\n    case 'changed': {\\n      return tasks.map(t => {\\n        if (t.id === action.task.id) {\\n          return action.task;\\n        } else {\\n          return t;\\n        }\\n      });\\n    }\\n    case 'deleted': {\\n      return tasks.filter(t => t.id !== action.id);\\n    }\\n    default: {\\n      throw Error('Unknown action: ' + action.type);\\n    }\\n  }\\n}\\n\\nconst initialTasks = [\\n  { id: 0, text: 'Philosopher’s Path', done: true },\\n  { id: 1, text: 'Visit the temple', done: false },\\n  { id: 2, text: 'Drink matcha', done: false }\\n];\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/AddTask.js\",\"children\":\"import { useState, useContext } from 'react';\\nimport { TasksDispatchContext } from './TasksContext.js';\\n\\nexport default function AddTask() {\\n  const [text, setText] = useState('');\\n  const dispatch = useContext(TasksDispatchContext);\\n  return (\\n    <>\\n      <input\\n        placeholder=\\\"Add task\\\"\\n        value={text}\\n        onChange={e => setText(e.target.value)}\\n      />\\n      <button onClick={() => {\\n        setText('');\\n        dispatch({\\n          type: 'added',\\n          id: nextId++,\\n          text: text,\\n        }); \\n      }}>Add</button>\\n    </>\\n  );\\n}\\n\\nlet nextId = 3;\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TaskList.js\",\"children\":\"import { useState, useContext } from 'react';\\nimport { TasksContext, TasksDispatchContext } from './TasksContext.js';\\n\\nexport default function TaskList() {\\n  const tasks = useContext(TasksContext);\\n  return (\\n    <ul>\\n      {tasks.map(task => (\\n        <li key={task.id}>\\n          <Task task={task} />\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\\nfunction Task({ task }) {\\n  const [isEditing, setIsEditing] = useState(false);\\n  const dispatch = useContext(TasksDispatchContext);\\n  let taskContent;\\n  if (isEditing) {\\n    taskContent = (\\n      <>\\n        <input\\n          value={task.text}\\n          onChange={e => {\\n            dispatch({\\n              type: 'changed',\\n              task: {\\n                ...task,\\n                text: e.target.value\\n              }\\n            });\\n          }} />\\n        <button onClick={() => setIsEditing(false)}>\\n          Save\\n        </button>\\n      </>\\n    );\\n  } else {\\n    taskContent = (\\n      <>\\n        {task.text}\\n        <button onClick={() => setIsEditing(true)}>\\n          Edit\\n        </button>\\n      </>\\n    );\\n  }\\n  return (\\n    <label>\\n      <input\\n        type=\\\"checkbox\\\"\\n        checked={task.done}\\n        onChange={e => {\\n          dispatch({\\n            type: 'changed',\\n            task: {\\n              ...task,\\n              done: e.target.checked\\n            }\\n          });\\n        }}\\n      />\\n      {taskContent}\\n      <button onClick={() => {\\n        dispatch({\\n          type: 'deleted',\\n          id: task.id\\n        });\\n      }}>\\n        Delete\\n      </button>\\n    </label>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin: 5px; }\\nli { list-style-type: none; }\\nul, li { margin: 0; padding: 0; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"102\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"You can also export functions that \",[\"$r\",\"em\",null,{\"children\":\"use\"}],\" the context from \",[\"$r\",\"code\",null,{\"children\":\"TasksContext.js\"}],\":\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export function useTasks() {\\n  return useContext(TasksContext);\\n}\\n\\nexport function useTasksDispatch() {\\n  return useContext(TasksDispatchContext);\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"When a component needs to read context, it can do it through these functions:\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const tasks = useTasks();\\nconst dispatch = useTasksDispatch();\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"This doesn’t change the behavior in any way, but it lets you later split these contexts further or add some logic to these functions. \",[\"$r\",\"strong\",null,{\"children\":[\"Now all of the context and reducer wiring is in \",[\"$r\",\"code\",null,{\"children\":\"TasksContext.js\"}],\". This keeps the components clean and uncluttered, focused on what they display rather than where they get the data:\"]}]]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import AddTask from './AddTask.js';\\nimport TaskList from './TaskList.js';\\nimport { TasksProvider } from './TasksContext.js';\\n\\nexport default function TaskApp() {\\n  return (\\n    <TasksProvider>\\n      <h1>Day off in Kyoto</h1>\\n      <AddTask />\\n      <TaskList />\\n    </TasksProvider>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TasksContext.js\",\"children\":\"import { createContext, useContext, useReducer } from 'react';\\n\\nconst TasksContext = createContext(null);\\n\\nconst TasksDispatchContext = createContext(null);\\n\\nexport function TasksProvider({ children }) {\\n  const [tasks, dispatch] = useReducer(\\n    tasksReducer,\\n    initialTasks\\n  );\\n\\n  return (\\n    <TasksContext.Provider value={tasks}>\\n      <TasksDispatchContext.Provider value={dispatch}>\\n        {children}\\n      </TasksDispatchContext.Provider>\\n    </TasksContext.Provider>\\n  );\\n}\\n\\nexport function useTasks() {\\n  return useContext(TasksContext);\\n}\\n\\nexport function useTasksDispatch() {\\n  return useContext(TasksDispatchContext);\\n}\\n\\nfunction tasksReducer(tasks, action) {\\n  switch (action.type) {\\n    case 'added': {\\n      return [...tasks, {\\n        id: action.id,\\n        text: action.text,\\n        done: false\\n      }];\\n    }\\n    case 'changed': {\\n      return tasks.map(t => {\\n        if (t.id === action.task.id) {\\n          return action.task;\\n        } else {\\n          return t;\\n        }\\n      });\\n    }\\n    case 'deleted': {\\n      return tasks.filter(t => t.id !== action.id);\\n    }\\n    default: {\\n      throw Error('Unknown action: ' + action.type);\\n    }\\n  }\\n}\\n\\nconst initialTasks = [\\n  { id: 0, text: 'Philosopher’s Path', done: true },\\n  { id: 1, text: 'Visit the temple', done: false },\\n  { id: 2, text: 'Drink matcha', done: false }\\n];\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/AddTask.js\",\"children\":\"import { useState } from 'react';\\nimport { useTasksDispatch } from './TasksContext.js';\\n\\nexport default function AddTask() {\\n  const [text, setText] = useState('');\\n  const dispatch = useTasksDispatch();\\n  return (\\n    <>\\n      <input\\n        placeholder=\\\"Add task\\\"\\n        value={text}\\n        onChange={e => setText(e.target.value)}\\n      />\\n      <button onClick={() => {\\n        setText('');\\n        dispatch({\\n          type: 'added',\\n          id: nextId++,\\n          text: text,\\n        }); \\n      }}>Add</button>\\n    </>\\n  );\\n}\\n\\nlet nextId = 3;\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TaskList.js active\",\"children\":\"import { useState } from 'react';\\nimport { useTasks, useTasksDispatch } from './TasksContext.js';\\n\\nexport default function TaskList() {\\n  const tasks = useTasks();\\n  return (\\n    <ul>\\n      {tasks.map(task => (\\n        <li key={task.id}>\\n          <Task task={task} />\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\\nfunction Task({ task }) {\\n  const [isEditing, setIsEditing] = useState(false);\\n  const dispatch = useTasksDispatch();\\n  let taskContent;\\n  if (isEditing) {\\n    taskContent = (\\n      <>\\n        <input\\n          value={task.text}\\n          onChange={e => {\\n            dispatch({\\n              type: 'changed',\\n              task: {\\n                ...task,\\n                text: e.target.value\\n              }\\n            });\\n          }} />\\n        <button onClick={() => setIsEditing(false)}>\\n          Save\\n        </button>\\n      </>\\n    );\\n  } else {\\n    taskContent = (\\n      <>\\n        {task.text}\\n        <button onClick={() => setIsEditing(true)}>\\n          Edit\\n        </button>\\n      </>\\n    );\\n  }\\n  return (\\n    <label>\\n      <input\\n        type=\\\"checkbox\\\"\\n        checked={task.done}\\n        onChange={e => {\\n          dispatch({\\n            type: 'changed',\\n            task: {\\n              ...task,\\n              done: e.target.checked\\n            }\\n          });\\n        }}\\n      />\\n      {taskContent}\\n      <button onClick={() => {\\n        dispatch({\\n          type: 'deleted',\\n          id: task.id\\n        });\\n      }}>\\n        Delete\\n      </button>\\n    </label>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin: 5px; }\\nli { list-style-type: none; }\\nul, li { margin: 0; padding: 0; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"last\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"You can think of \",[\"$r\",\"code\",null,{\"children\":\"TasksProvider\"}],\" as a part of the screen that knows how to deal with tasks, \",[\"$r\",\"code\",null,{\"children\":\"useTasks\"}],\" as a way to read them, and \",[\"$r\",\"code\",null,{\"children\":\"useTasksDispatch\"}],\" as a way to update them from any component below in the tree.\"]}],\"\\n\",[\"$r\",\"Note\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"Functions like \",[\"$r\",\"code\",null,{\"children\":\"useTasks\"}],\" and \",[\"$r\",\"code\",null,{\"children\":\"useTasksDispatch\"}],\" are called \",[\"$r\",\"em\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"/learn/reusing-logic-with-custom-hooks\",\"children\":\"Custom Hooks.\"}]}],\" Your function is considered a custom Hook if its name starts with \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\". This lets you use other Hooks, like \",[\"$r\",\"code\",null,{\"children\":\"useContext\"}],\", inside it.\"]}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"As your app grows, you may have many context-reducer pairs like this. This is a powerful way to scale your app and \",[\"$r\",\"a\",null,{\"href\":\"/learn/sharing-state-between-components\",\"children\":\"lift state up\"}],\" without too much work whenever you want to access the data deep in the tree.\"]}],\"\\n\",[\"$r\",\"Recap\",null,{\"children\":[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"You can combine reducer with context to let any component read and update state above it.\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"To provide state and the dispatch function to components below:\",\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"Create two contexts (for state and for dispatch functions).\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"Provide both contexts from the component that uses the reducer.\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"Use either context from components that need to read them.\"}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"You can further declutter the components by moving all wiring into one file.\",\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"You can export a component like \",[\"$r\",\"code\",null,{\"children\":\"TasksProvider\"}],\" that provides context.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"You can also export custom Hooks like \",[\"$r\",\"code\",null,{\"children\":\"useTasks\"}],\" and \",[\"$r\",\"code\",null,{\"children\":\"useTasksDispatch\"}],\" to read it.\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"You can have many context-reducer pairs like this in your app.\"}],\"\\n\"]}]}]]}]]","meta":{"title":"Scaling Up with Reducer and Context"},"languages":null},"__N_SSG":true}