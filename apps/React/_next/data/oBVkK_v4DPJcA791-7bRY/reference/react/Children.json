{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"Overview\",\"depth\":2},{\"url\":\"#reference\",\"depth\":2,\"text\":\"Reference \"},{\"url\":\"#children-count\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"Children.count(children)\"}],\" \"]},{\"url\":\"#children-foreach\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"Children.forEach(children, fn, thisArg?)\"}],\" \"]},{\"url\":\"#children-map\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"Children.map(children, fn, thisArg?)\"}],\" \"]},{\"url\":\"#children-only\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"Children.only(children)\"}],\" \"]},{\"url\":\"#children-toarray\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"Children.toArray(children)\"}],\" \"]},{\"url\":\"#usage\",\"depth\":2,\"text\":\"Usage \"},{\"url\":\"#transforming-children\",\"depth\":3,\"text\":\"Transforming children \"},{\"url\":\"#running-some-code-for-each-child\",\"depth\":3,\"text\":\"Running some code for each child \"},{\"url\":\"#counting-children\",\"depth\":3,\"text\":\"Counting children \"},{\"url\":\"#converting-children-to-an-array\",\"depth\":3,\"text\":\"Converting children to an array \"},{\"url\":\"#alternatives\",\"depth\":2,\"text\":\"Alternatives \"},{\"url\":\"#exposing-multiple-components\",\"depth\":3,\"text\":\"Exposing multiple components \"},{\"url\":\"#accepting-an-array-of-objects-as-a-prop\",\"depth\":3,\"text\":\"Accepting an array of objects as a prop \"},{\"url\":\"#calling-a-render-prop-to-customize-rendering\",\"depth\":3,\"text\":\"Calling a render prop to customize rendering \"},{\"url\":\"#troubleshooting\",\"depth\":2,\"text\":\"Troubleshooting \"},{\"url\":\"#i-pass-a-custom-component-but-the-children-methods-dont-show-its-render-result\",\"depth\":3,\"text\":[\"I pass a custom component, but the \",[\"$r\",\"code\",null,{\"children\":\"Children\"}],\" methods don’t show its render result \"]}]","content":"[[\"$r\",\"MaxWidth\",\"138\",{\"children\":[[\"$r\",\"Pitfall\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"Using \",[\"$r\",\"code\",null,{\"children\":\"Children\"}],\" is uncommon and can lead to fragile code. \",[\"$r\",\"a\",null,{\"href\":\"#alternatives\",\"children\":\"See common alternatives.\"}]]}]}],\"\\n\",[\"$r\",\"Intro\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"Children\"}],\" lets you manipulate and transform the JSX you received as the \",[\"$r\",\"a\",null,{\"href\":\"/learn/passing-props-to-a-component#passing-jsx-as-children\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"children\"}],\" prop.\"]}]]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const mappedChildren = Children.map(children, child =>\\n  <div className=\\\"Row\\\">\\n    {child}\\n  </div>\\n);\\n\\n\"}]}]]}],\"\\n\",[\"$r\",\"InlineToc\",null,{}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"reference\",\"children\":\"Reference \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"children-count\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"Children.count(children)\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Call \",[\"$r\",\"code\",null,{\"children\":\"Children.count(children)\"}],\" to count the number of children in the \",[\"$r\",\"code\",null,{\"children\":\"children\"}],\" data structure.\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/RowList.js active\",\"children\":\"import { Children } from 'react';\\n\\nfunction RowList({ children }) {\\n  return (\\n    <>\\n      <h1>Total rows: {Children.count(children)}</h1>\\n      ...\\n    </>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"#counting-children\",\"children\":\"See more examples below.\"}]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"children-count-parameters\",\"children\":\"Parameters \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"children\"}],\": The value of the \",[\"$r\",\"a\",null,{\"href\":\"/learn/passing-props-to-a-component#passing-jsx-as-children\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"children\"}],\" prop\"]}],\" received by your component.\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"children-count-returns\",\"children\":\"Returns \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"The number of nodes inside these \",[\"$r\",\"code\",null,{\"children\":\"children\"}],\".\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"children-count-caveats\",\"children\":\"Caveats \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"Empty nodes (\",[\"$r\",\"code\",null,{\"children\":\"null\"}],\", \",[\"$r\",\"code\",null,{\"children\":\"undefined\"}],\", and Booleans), strings, numbers, and \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/createElement\",\"children\":\"React elements\"}],\" count as individual nodes. Arrays don’t count as individual nodes, but their children do. \",[\"$r\",\"strong\",null,{\"children\":\"The traversal does not go deeper than React elements:\"}],\" they don’t get rendered, and their children aren’t traversed. \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Fragment\",\"children\":\"Fragments\"}],\" don’t get traversed.\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"children-foreach\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"Children.forEach(children, fn, thisArg?)\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Call \",[\"$r\",\"code\",null,{\"children\":\"Children.forEach(children, fn, thisArg?)\"}],\" to run some code for each child in the \",[\"$r\",\"code\",null,{\"children\":\"children\"}],\" data structure.\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/RowList.js active\",\"children\":\"import { Children } from 'react';\\n\\nfunction SeparatorList({ children }) {\\n  const result = [];\\n  Children.forEach(children, (child, index) => {\\n    result.push(child);\\n    result.push(<hr key={index} />);\\n  });\\n  // ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"#running-some-code-for-each-child\",\"children\":\"See more examples below.\"}]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"children-foreach-parameters\",\"children\":\"Parameters \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"children\"}],\": The value of the \",[\"$r\",\"a\",null,{\"href\":\"/learn/passing-props-to-a-component#passing-jsx-as-children\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"children\"}],\" prop\"]}],\" received by your component.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"fn\"}],\": The function you want to run for each child, similar to the \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"array \",[\"$r\",\"code\",null,{\"children\":\"forEach\"}],\" method\"]}],\" callback. It will be called with the child as the first argument and its index as the second argument. The index starts at \",[\"$r\",\"code\",null,{\"children\":\"0\"}],\" and increments on each call.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"optional\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"thisArg\"}],\": The \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"this\"}],\" value\"]}],\" with which the \",[\"$r\",\"code\",null,{\"children\":\"fn\"}],\" function should be called. If omitted, it’s \",[\"$r\",\"code\",null,{\"children\":\"undefined\"}],\".\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"children-foreach-returns\",\"children\":\"Returns \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"Children.forEach\"}],\" returns \",[\"$r\",\"code\",null,{\"children\":\"undefined\"}],\".\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"children-foreach-caveats\",\"children\":\"Caveats \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"Empty nodes (\",[\"$r\",\"code\",null,{\"children\":\"null\"}],\", \",[\"$r\",\"code\",null,{\"children\":\"undefined\"}],\", and Booleans), strings, numbers, and \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/createElement\",\"children\":\"React elements\"}],\" count as individual nodes. Arrays don’t count as individual nodes, but their children do. \",[\"$r\",\"strong\",null,{\"children\":\"The traversal does not go deeper than React elements:\"}],\" they don’t get rendered, and their children aren’t traversed. \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Fragment\",\"children\":\"Fragments\"}],\" don’t get traversed.\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"children-map\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"Children.map(children, fn, thisArg?)\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Call \",[\"$r\",\"code\",null,{\"children\":\"Children.map(children, fn, thisArg?)\"}],\" to map or transform each child in the \",[\"$r\",\"code\",null,{\"children\":\"children\"}],\" data structure.\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/RowList.js active\",\"children\":\"import { Children } from 'react';\\n\\nfunction RowList({ children }) {\\n  return (\\n    <div className=\\\"RowList\\\">\\n      {Children.map(children, child =>\\n        <div className=\\\"Row\\\">\\n          {child}\\n        </div>\\n      )}\\n    </div>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"#transforming-children\",\"children\":\"See more examples below.\"}]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"children-map-parameters\",\"children\":\"Parameters \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"children\"}],\": The value of the \",[\"$r\",\"a\",null,{\"href\":\"/learn/passing-props-to-a-component#passing-jsx-as-children\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"children\"}],\" prop\"]}],\" received by your component.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"fn\"}],\": The mapping function, similar to the \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"array \",[\"$r\",\"code\",null,{\"children\":\"map\"}],\" method\"]}],\" callback. It will be called with the child as the first argument and its index as the second argument. The index starts at \",[\"$r\",\"code\",null,{\"children\":\"0\"}],\" and increments on each call. You need to return a React node from this function. This may be an empty node (\",[\"$r\",\"code\",null,{\"children\":\"null\"}],\", \",[\"$r\",\"code\",null,{\"children\":\"undefined\"}],\", or a Boolean), a string, a number, a React element, or an array of other React nodes.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"optional\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"thisArg\"}],\": The \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"this\"}],\" value\"]}],\" with which the \",[\"$r\",\"code\",null,{\"children\":\"fn\"}],\" function should be called. If omitted, it’s \",[\"$r\",\"code\",null,{\"children\":\"undefined\"}],\".\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"children-map-returns\",\"children\":\"Returns \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"If \",[\"$r\",\"code\",null,{\"children\":\"children\"}],\" is \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\" or \",[\"$r\",\"code\",null,{\"children\":\"undefined\"}],\", returns the same value.\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Otherwise, returns a flat array consisting of the nodes you’ve returned from the \",[\"$r\",\"code\",null,{\"children\":\"fn\"}],\" function. The returned array will contain all nodes you returned except for \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\" and \",[\"$r\",\"code\",null,{\"children\":\"undefined\"}],\".\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"children-map-caveats\",\"children\":\"Caveats \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Empty nodes (\",[\"$r\",\"code\",null,{\"children\":\"null\"}],\", \",[\"$r\",\"code\",null,{\"children\":\"undefined\"}],\", and Booleans), strings, numbers, and \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/createElement\",\"children\":\"React elements\"}],\" count as individual nodes. Arrays don’t count as individual nodes, but their children do. \",[\"$r\",\"strong\",null,{\"children\":\"The traversal does not go deeper than React elements:\"}],\" they don’t get rendered, and their children aren’t traversed. \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Fragment\",\"children\":\"Fragments\"}],\" don’t get traversed.\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"If you return an element or an array of elements with keys from \",[\"$r\",\"code\",null,{\"children\":\"fn\"}],\", \",[\"$r\",\"strong\",null,{\"children\":[\"the returned elements’ keys will be automatically combined with the key of the corresponding original item from \",[\"$r\",\"code\",null,{\"children\":\"children\"}],\".\"]}],\" When you return multiple elements from \",[\"$r\",\"code\",null,{\"children\":\"fn\"}],\" in an array, their keys only need to be unique locally amongst each other.\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"children-only\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"Children.only(children)\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Call \",[\"$r\",\"code\",null,{\"children\":\"Children.only(children)\"}],\" to assert that \",[\"$r\",\"code\",null,{\"children\":\"children\"}],\" represent a single React element.\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function Box({ children }) {\\n  const element = Children.only(children);\\n  // ...\\n\"}]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"children-only-parameters\",\"children\":\"Parameters \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"children\"}],\": The value of the \",[\"$r\",\"a\",null,{\"href\":\"/learn/passing-props-to-a-component#passing-jsx-as-children\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"children\"}],\" prop\"]}],\" received by your component.\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"children-only-returns\",\"children\":\"Returns \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"If \",[\"$r\",\"code\",null,{\"children\":\"children\"}],\" \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/isValidElement\",\"children\":\"is a valid element,\"}],\" returns that element.\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"Otherwise, throws an error.\"}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"children-only-caveats\",\"children\":\"Caveats \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"This method always \",[\"$r\",\"strong\",null,{\"children\":[\"throws if you pass an array (such as the return value of \",[\"$r\",\"code\",null,{\"children\":\"Children.map\"}],\") as \",[\"$r\",\"code\",null,{\"children\":\"children\"}],\".\"]}],\" In other words, it enforces that \",[\"$r\",\"code\",null,{\"children\":\"children\"}],\" is a single React element, not that it’s an array with a single element.\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"children-toarray\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"Children.toArray(children)\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Call \",[\"$r\",\"code\",null,{\"children\":\"Children.toArray(children)\"}],\" to create an array out of the \",[\"$r\",\"code\",null,{\"children\":\"children\"}],\" data structure.\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/ReversedList.js active\",\"children\":\"import { Children } from 'react';\\n\\nexport default function ReversedList({ children }) {\\n  const result = Children.toArray(children);\\n  result.reverse();\\n  // ...\\n\"}]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"children-toarray-parameters\",\"children\":\"Parameters \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"children\"}],\": The value of the \",[\"$r\",\"a\",null,{\"href\":\"/learn/passing-props-to-a-component#passing-jsx-as-children\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"children\"}],\" prop\"]}],\" received by your component.\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"children-toarray-returns\",\"children\":\"Returns \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Returns a flat array of elements in \",[\"$r\",\"code\",null,{\"children\":\"children\"}],\".\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"children-toarray-caveats\",\"children\":\"Caveats \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"Empty nodes (\",[\"$r\",\"code\",null,{\"children\":\"null\"}],\", \",[\"$r\",\"code\",null,{\"children\":\"undefined\"}],\", and Booleans) will be omitted in the returned array. \",[\"$r\",\"strong\",null,{\"children\":\"The returned elements’ keys will be calculated from the original elements’ keys and their level of nesting and position.\"}],\" This ensures that flattening the array does not introduce changes in behavior.\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"usage\",\"children\":\"Usage \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"transforming-children\",\"children\":\"Transforming children \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"To transform the children JSX that your component \",[\"$r\",\"a\",null,{\"href\":\"/learn/passing-props-to-a-component#passing-jsx-as-children\",\"children\":[\"receives as the \",[\"$r\",\"code\",null,{\"children\":\"children\"}],\" prop,\"]}],\" call \",[\"$r\",\"code\",null,{\"children\":\"Children.map\"}],\":\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{6,10}\",\"children\":\"import { Children } from 'react';\\n\\nfunction RowList({ children }) {\\n  return (\\n    <div className=\\\"RowList\\\">\\n      {Children.map(children, child =>\\n        <div className=\\\"Row\\\">\\n          {child}\\n        </div>\\n      )}\\n    </div>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"In the example above, the \",[\"$r\",\"code\",null,{\"children\":\"RowList\"}],\" wraps every child it receives into a \",[\"$r\",\"code\",null,{\"children\":\"<div className=\\\"Row\\\">\"}],\" container. For example, let’s say the parent component passes three \",[\"$r\",\"code\",null,{\"children\":\"<p>\"}],\" tags as the \",[\"$r\",\"code\",null,{\"children\":\"children\"}],\" prop to \",[\"$r\",\"code\",null,{\"children\":\"RowList\"}],\":\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"<RowList>\\n  <p>This is the first item.</p>\\n  <p>This is the second item.</p>\\n  <p>This is the third item.</p>\\n</RowList>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Then, with the \",[\"$r\",\"code\",null,{\"children\":\"RowList\"}],\" implementation above, the final rendered result will look like this:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"<div className=\\\"RowList\\\">\\n  <div className=\\\"Row\\\">\\n    <p>This is the first item.</p>\\n  </div>\\n  <div className=\\\"Row\\\">\\n    <p>This is the second item.</p>\\n  </div>\\n  <div className=\\\"Row\\\">\\n    <p>This is the third item.</p>\\n  </div>\\n</div>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"Children.map\"}],\" is similar to \",[\"$r\",\"a\",null,{\"href\":\"/learn/rendering-lists\",\"children\":[\"to transforming arrays with \",[\"$r\",\"code\",null,{\"children\":\"map()\"}],\".\"]}],\" The difference is that the \",[\"$r\",\"code\",null,{\"children\":\"children\"}],\" data structure is considered \",[\"$r\",\"em\",null,{\"children\":\"opaque.\"}],\" This means that even if it’s sometimes an array, you should not assume it’s an array or any other particular data type. This is why you should use \",[\"$r\",\"code\",null,{\"children\":\"Children.map\"}],\" if you need to transform it.\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import RowList from './RowList.js';\\n\\nexport default function App() {\\n  return (\\n    <RowList>\\n      <p>This is the first item.</p>\\n      <p>This is the second item.</p>\\n      <p>This is the third item.</p>\\n    </RowList>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/RowList.js active\",\"children\":\"import { Children } from 'react';\\n\\nexport default function RowList({ children }) {\\n  return (\\n    <div className=\\\"RowList\\\">\\n      {Children.map(children, child =>\\n        <div className=\\\"Row\\\">\\n          {child}\\n        </div>\\n      )}\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".RowList {\\n  display: flex;\\n  flex-direction: column;\\n  border: 2px solid grey;\\n  padding: 5px;\\n}\\n\\n.Row {\\n  border: 2px dashed black;\\n  padding: 5px;\\n  margin: 5px;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"150\",{\"children\":[\"\\n\",[\"$r\",\"DeepDive\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"why-is-the-children-prop-not-always-an-array\",\"children\":\"Why is the children prop not always an array? \"}],[\"$r\",\"p\",null,{\"children\":[\"In React, the \",[\"$r\",\"code\",null,{\"children\":\"children\"}],\" prop is considered an \",[\"$r\",\"em\",null,{\"children\":\"opaque\"}],\" data structure. This means that you shouldn’t rely on how it is structured. To transform, filter, or count children, you should use the \",[\"$r\",\"code\",null,{\"children\":\"Children\"}],\" methods.\"]}],[\"$r\",\"p\",null,{\"children\":[\"In practice, the \",[\"$r\",\"code\",null,{\"children\":\"children\"}],\" data structure is often represented as an array internally. However, if there is only a single child, then React won’t create an extra array since this would lead to unnecessary memory overhead. As long as you use the \",[\"$r\",\"code\",null,{\"children\":\"Children\"}],\" methods instead of directly introspecting the \",[\"$r\",\"code\",null,{\"children\":\"children\"}],\" prop, your code will not break even if React changes how the data structure is actually implemented.\"]}],[\"$r\",\"p\",null,{\"children\":[\"Even when \",[\"$r\",\"code\",null,{\"children\":\"children\"}],\" is an array, \",[\"$r\",\"code\",null,{\"children\":\"Children.map\"}],\" has useful special behavior. For example, \",[\"$r\",\"code\",null,{\"children\":\"Children.map\"}],\" combines the \",[\"$r\",\"a\",null,{\"href\":\"/learn/rendering-lists#keeping-list-items-in-order-with-key\",\"children\":\"keys\"}],\" on the returned elements with the keys on the \",[\"$r\",\"code\",null,{\"children\":\"children\"}],\" you’ve passed to it. This ensures the original JSX children don’t “lose” keys even if they get wrapped like in the example above.\"]}]]}],\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[\"The \",[\"$r\",\"code\",null,{\"children\":\"children\"}],\" data structure \",[\"$r\",\"strong\",null,{\"children\":\"does not include rendered output\"}],\" of the components you pass as JSX. In the example below, the \",[\"$r\",\"code\",null,{\"children\":\"children\"}],\" received by the \",[\"$r\",\"code\",null,{\"children\":\"RowList\"}],\" only contains two items rather than three:\"]}],[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"$r\",\"code\",null,{\"children\":\"<p>This is the first item.</p>\"}]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"$r\",\"code\",null,{\"children\":\"<MoreRows />\"}]}],\"\\n\"]}],[\"$r\",\"p\",null,{\"children\":\"This is why only two row wrappers are generated in this example:\"}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import RowList from './RowList.js';\\n\\nexport default function App() {\\n  return (\\n    <RowList>\\n      <p>This is the first item.</p>\\n      <MoreRows />\\n    </RowList>\\n  );\\n}\\n\\nfunction MoreRows() {\\n  return (\\n    <>\\n      <p>This is the second item.</p>\\n      <p>This is the third item.</p>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/RowList.js\",\"children\":\"import { Children } from 'react';\\n\\nexport default function RowList({ children }) {\\n  return (\\n    <div className=\\\"RowList\\\">\\n      {Children.map(children, child =>\\n        <div className=\\\"Row\\\">\\n          {child}\\n        </div>\\n      )}\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".RowList {\\n  display: flex;\\n  flex-direction: column;\\n  border: 2px solid grey;\\n  padding: 5px;\\n}\\n\\n.Row {\\n  border: 2px dashed black;\\n  padding: 5px;\\n  margin: 5px;\\n}\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"There is no way to get the rendered output of an inner component\"}],\" like \",[\"$r\",\"code\",null,{\"children\":\"<MoreRows />\"}],\" when manipulating \",[\"$r\",\"code\",null,{\"children\":\"children\"}],\". This is why \",[\"$r\",\"a\",null,{\"href\":\"#alternatives\",\"children\":\"it’s usually better to use one of the alternative solutions.\"}]]}]]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"running-some-code-for-each-child\",\"children\":\"Running some code for each child \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Call \",[\"$r\",\"code\",null,{\"children\":\"Children.forEach\"}],\" to iterate over each child in the \",[\"$r\",\"code\",null,{\"children\":\"children\"}],\" data structure. It does not return any value and is similar to the \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"array \",[\"$r\",\"code\",null,{\"children\":\"forEach\"}],\" method.\"]}],\" You can use it to run custom logic like constructing your own array.\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import SeparatorList from './SeparatorList.js';\\n\\nexport default function App() {\\n  return (\\n    <SeparatorList>\\n      <p>This is the first item.</p>\\n      <p>This is the second item.</p>\\n      <p>This is the third item.</p>\\n    </SeparatorList>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/SeparatorList.js active\",\"children\":\"import { Children } from 'react';\\n\\nexport default function SeparatorList({ children }) {\\n  const result = [];\\n  Children.forEach(children, (child, index) => {\\n    result.push(child);\\n    result.push(<hr key={index} />);\\n  });\\n  result.pop(); // Remove the last separator\\n  return result;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"160\",{\"children\":[\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"As mentioned earlier, there is no way to get the rendered output of an inner component when manipulating \",[\"$r\",\"code\",null,{\"children\":\"children\"}],\". This is why \",[\"$r\",\"a\",null,{\"href\":\"#alternatives\",\"children\":\"it’s usually better to use one of the alternative solutions.\"}]]}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"counting-children\",\"children\":\"Counting children \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Call \",[\"$r\",\"code\",null,{\"children\":\"Children.count(children)\"}],\" to calculate the number of children.\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import RowList from './RowList.js';\\n\\nexport default function App() {\\n  return (\\n    <RowList>\\n      <p>This is the first item.</p>\\n      <p>This is the second item.</p>\\n      <p>This is the third item.</p>\\n    </RowList>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/RowList.js active\",\"children\":\"import { Children } from 'react';\\n\\nexport default function RowList({ children }) {\\n  return (\\n    <div className=\\\"RowList\\\">\\n      <h1 className=\\\"RowListHeader\\\">\\n        Total rows: {Children.count(children)}\\n      </h1>\\n      {Children.map(children, child =>\\n        <div className=\\\"Row\\\">\\n          {child}\\n        </div>\\n      )}\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".RowList {\\n  display: flex;\\n  flex-direction: column;\\n  border: 2px solid grey;\\n  padding: 5px;\\n}\\n\\n.RowListHeader {\\n  padding-top: 5px;\\n  font-size: 25px;\\n  font-weight: bold;\\n  text-align: center;\\n}\\n\\n.Row {\\n  border: 2px dashed black;\\n  padding: 5px;\\n  margin: 5px;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"170\",{\"children\":[\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"As mentioned earlier, there is no way to get the rendered output of an inner component when manipulating \",[\"$r\",\"code\",null,{\"children\":\"children\"}],\". This is why \",[\"$r\",\"a\",null,{\"href\":\"#alternatives\",\"children\":\"it’s usually better to use one of the alternative solutions.\"}]]}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"converting-children-to-an-array\",\"children\":\"Converting children to an array \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Call \",[\"$r\",\"code\",null,{\"children\":\"Children.toArray(children)\"}],\" to turn the \",[\"$r\",\"code\",null,{\"children\":\"children\"}],\" data structure into a regular JavaScript array. This lets you manipulate the array with built-in array methods like \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"filter\"}]}],\", \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"sort\"}]}],\", or \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"reverse\"}],\".\"]}]]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import ReversedList from './ReversedList.js';\\n\\nexport default function App() {\\n  return (\\n    <ReversedList>\\n      <p>This is the first item.</p>\\n      <p>This is the second item.</p>\\n      <p>This is the third item.</p>\\n    </ReversedList>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/ReversedList.js active\",\"children\":\"import { Children } from 'react';\\n\\nexport default function ReversedList({ children }) {\\n  const result = Children.toArray(children);\\n  result.reverse();\\n  return result;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"186\",{\"children\":[\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"As mentioned earlier, there is no way to get the rendered output of an inner component when manipulating \",[\"$r\",\"code\",null,{\"children\":\"children\"}],\". This is why \",[\"$r\",\"a\",null,{\"href\":\"#alternatives\",\"children\":\"it’s usually better to use one of the alternative solutions.\"}]]}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"alternatives\",\"children\":\"Alternatives \"}],\"\\n\",[\"$r\",\"Note\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[\"This section describes alternatives to the \",[\"$r\",\"code\",null,{\"children\":\"Children\"}],\" API (with capital \",[\"$r\",\"code\",null,{\"children\":\"C\"}],\") that’s imported like this:\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { Children } from 'react';\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"Don’t confuse it with \",[\"$r\",\"a\",null,{\"href\":\"/learn/passing-props-to-a-component#passing-jsx-as-children\",\"children\":[\"using the \",[\"$r\",\"code\",null,{\"children\":\"children\"}],\" prop\"]}],\" (lowercase \",[\"$r\",\"code\",null,{\"children\":\"c\"}],\"), which is good and encouraged.\"]}]]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"exposing-multiple-components\",\"children\":\"Exposing multiple components \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Manipulating children with the \",[\"$r\",\"code\",null,{\"children\":\"Children\"}],\" methods often leads to fragile code. When you pass children to a component in JSX, you don’t usually expect the component to manipulate or transform the individual children.\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"When you can, try to avoid using the \",[\"$r\",\"code\",null,{\"children\":\"Children\"}],\" methods. For example, if you want every child of \",[\"$r\",\"code\",null,{\"children\":\"RowList\"}],\" to be wrapped in \",[\"$r\",\"code\",null,{\"children\":\"<div className=\\\"Row\\\">\"}],\", export a \",[\"$r\",\"code\",null,{\"children\":\"Row\"}],\" component, and manually wrap every row into it like this:\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { RowList, Row } from './RowList.js';\\n\\nexport default function App() {\\n  return (\\n    <RowList>\\n      <Row>\\n        <p>This is the first item.</p>\\n      </Row>\\n      <Row>\\n        <p>This is the second item.</p>\\n      </Row>\\n      <Row>\\n        <p>This is the third item.</p>\\n      </Row>\\n    </RowList>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/RowList.js\",\"children\":\"export function RowList({ children }) {\\n  return (\\n    <div className=\\\"RowList\\\">\\n      {children}\\n    </div>\\n  );\\n}\\n\\nexport function Row({ children }) {\\n  return (\\n    <div className=\\\"Row\\\">\\n      {children}\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".RowList {\\n  display: flex;\\n  flex-direction: column;\\n  border: 2px solid grey;\\n  padding: 5px;\\n}\\n\\n.Row {\\n  border: 2px dashed black;\\n  padding: 5px;\\n  margin: 5px;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"190\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Unlike using \",[\"$r\",\"code\",null,{\"children\":\"Children.map\"}],\", this approach does not wrap every child automatically. \",[\"$r\",\"strong\",null,{\"children\":[\"However, this approach has a significant benefit compared to the \",[\"$r\",\"a\",null,{\"href\":\"#transforming-children\",\"children\":[\"earlier example with \",[\"$r\",\"code\",null,{\"children\":\"Children.map\"}]]}],\" because it works even if you keep extracting more components.\"]}],\" For example, it still works if you extract your own \",[\"$r\",\"code\",null,{\"children\":\"MoreRows\"}],\" component:\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { RowList, Row } from './RowList.js';\\n\\nexport default function App() {\\n  return (\\n    <RowList>\\n      <Row>\\n        <p>This is the first item.</p>\\n      </Row>\\n      <MoreRows />\\n    </RowList>\\n  );\\n}\\n\\nfunction MoreRows() {\\n  return (\\n    <>\\n      <Row>\\n        <p>This is the second item.</p>\\n      </Row>\\n      <Row>\\n        <p>This is the third item.</p>\\n      </Row>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/RowList.js\",\"children\":\"export function RowList({ children }) {\\n  return (\\n    <div className=\\\"RowList\\\">\\n      {children}\\n    </div>\\n  );\\n}\\n\\nexport function Row({ children }) {\\n  return (\\n    <div className=\\\"Row\\\">\\n      {children}\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".RowList {\\n  display: flex;\\n  flex-direction: column;\\n  border: 2px solid grey;\\n  padding: 5px;\\n}\\n\\n.Row {\\n  border: 2px dashed black;\\n  padding: 5px;\\n  margin: 5px;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"200\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"This wouldn’t work with \",[\"$r\",\"code\",null,{\"children\":\"Children.map\"}],\" because it would “see” \",[\"$r\",\"code\",null,{\"children\":\"<MoreRows />\"}],\" as a single child (and a single row).\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"accepting-an-array-of-objects-as-a-prop\",\"children\":\"Accepting an array of objects as a prop \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"You can also explicitly pass an array as a prop. For example, this \",[\"$r\",\"code\",null,{\"children\":\"RowList\"}],\" accepts a \",[\"$r\",\"code\",null,{\"children\":\"rows\"}],\" array as a prop:\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { RowList, Row } from './RowList.js';\\n\\nexport default function App() {\\n  return (\\n    <RowList rows={[\\n      { id: 'first', content: <p>This is the first item.</p> },\\n      { id: 'second', content: <p>This is the second item.</p> },\\n      { id: 'third', content: <p>This is the third item.</p> }\\n    ]} />\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/RowList.js\",\"children\":\"export function RowList({ rows }) {\\n  return (\\n    <div className=\\\"RowList\\\">\\n      {rows.map(row => (\\n        <div className=\\\"Row\\\" key={row.id}>\\n          {row.content}\\n        </div>\\n      ))}\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".RowList {\\n  display: flex;\\n  flex-direction: column;\\n  border: 2px solid grey;\\n  padding: 5px;\\n}\\n\\n.Row {\\n  border: 2px dashed black;\\n  padding: 5px;\\n  margin: 5px;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"206\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Since \",[\"$r\",\"code\",null,{\"children\":\"rows\"}],\" is a regular JavaScript array, the \",[\"$r\",\"code\",null,{\"children\":\"RowList\"}],\" component can use built-in array methods like \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"map\"}]}],\" on it.\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"This pattern is especially useful when you want to be able to pass more information as structured data together with children. In the below example, the \",[\"$r\",\"code\",null,{\"children\":\"TabSwitcher\"}],\" component receives an array of objects as the \",[\"$r\",\"code\",null,{\"children\":\"tabs\"}],\" prop:\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import TabSwitcher from './TabSwitcher.js';\\n\\nexport default function App() {\\n  return (\\n    <TabSwitcher tabs={[\\n      {\\n        id: 'first',\\n        header: 'First',\\n        content: <p>This is the first item.</p>\\n      },\\n      {\\n        id: 'second',\\n        header: 'Second',\\n        content: <p>This is the second item.</p>\\n      },\\n      {\\n        id: 'third',\\n        header: 'Third',\\n        content: <p>This is the third item.</p>\\n      }\\n    ]} />\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TabSwitcher.js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function TabSwitcher({ tabs }) {\\n  const [selectedId, setSelectedId] = useState(tabs[0].id);\\n  const selectedTab = tabs.find(tab => tab.id === selectedId);\\n  return (\\n    <>\\n      {tabs.map(tab => (\\n        <button\\n          key={tab.id}\\n          onClick={() => setSelectedId(tab.id)}\\n        >\\n          {tab.header}\\n        </button>\\n      ))}\\n      <hr />\\n      <div key={selectedId}>\\n        <h3>{selectedTab.header}</h3>\\n        {selectedTab.content}\\n      </div>\\n    </>\\n  );\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"216\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Unlike passing the children as JSX, this approach lets you associate some extra data like \",[\"$r\",\"code\",null,{\"children\":\"header\"}],\" with each item. Because you are working with the \",[\"$r\",\"code\",null,{\"children\":\"tabs\"}],\" directly, and it is an array, you do not need the \",[\"$r\",\"code\",null,{\"children\":\"Children\"}],\" methods.\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"calling-a-render-prop-to-customize-rendering\",\"children\":\"Calling a render prop to customize rendering \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Instead of producing JSX for every single item, you can also pass a function that returns JSX, and call that function when necessary. In this example, the \",[\"$r\",\"code\",null,{\"children\":\"App\"}],\" component passes a \",[\"$r\",\"code\",null,{\"children\":\"renderContent\"}],\" function to the \",[\"$r\",\"code\",null,{\"children\":\"TabSwitcher\"}],\" component. The \",[\"$r\",\"code\",null,{\"children\":\"TabSwitcher\"}],\" component calls \",[\"$r\",\"code\",null,{\"children\":\"renderContent\"}],\" only for the selected tab:\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import TabSwitcher from './TabSwitcher.js';\\n\\nexport default function App() {\\n  return (\\n    <TabSwitcher\\n      tabIds={['first', 'second', 'third']}\\n      getHeader={tabId => {\\n        return tabId[0].toUpperCase() + tabId.slice(1);\\n      }}\\n      renderContent={tabId => {\\n        return <p>This is the {tabId} item.</p>;\\n      }}\\n    />\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TabSwitcher.js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function TabSwitcher({ tabIds, getHeader, renderContent }) {\\n  const [selectedId, setSelectedId] = useState(tabIds[0]);\\n  return (\\n    <>\\n      {tabIds.map((tabId) => (\\n        <button\\n          key={tabId}\\n          onClick={() => setSelectedId(tabId)}\\n        >\\n          {getHeader(tabId)}\\n        </button>\\n      ))}\\n      <hr />\\n      <div key={selectedId}>\\n        <h3>{getHeader(selectedId)}</h3>\\n        {renderContent(selectedId)}\\n      </div>\\n    </>\\n  );\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"222\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"A prop like \",[\"$r\",\"code\",null,{\"children\":\"renderContent\"}],\" is called a \",[\"$r\",\"em\",null,{\"children\":\"render prop\"}],\" because it is a prop that specifies how to render a piece of the user interface. However, there is nothing special about it: it is a regular prop which happens to be a function.\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Render props are functions, so you can pass information to them. For example, this \",[\"$r\",\"code\",null,{\"children\":\"RowList\"}],\" component passes the \",[\"$r\",\"code\",null,{\"children\":\"id\"}],\" and the \",[\"$r\",\"code\",null,{\"children\":\"index\"}],\" of each row to the \",[\"$r\",\"code\",null,{\"children\":\"renderRow\"}],\" render prop, which uses \",[\"$r\",\"code\",null,{\"children\":\"index\"}],\" to highlight even rows:\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { RowList, Row } from './RowList.js';\\n\\nexport default function App() {\\n  return (\\n    <RowList\\n      rowIds={['first', 'second', 'third']}\\n      renderRow={(id, index) => {\\n        return (\\n          <Row isHighlighted={index % 2 === 0}>\\n            <p>This is the {id} item.</p>\\n          </Row> \\n        );\\n      }}\\n    />\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/RowList.js\",\"children\":\"import { Fragment } from 'react';\\n\\nexport function RowList({ rowIds, renderRow }) {\\n  return (\\n    <div className=\\\"RowList\\\">\\n      <h1 className=\\\"RowListHeader\\\">\\n        Total rows: {rowIds.length}\\n      </h1>\\n      {rowIds.map((rowId, index) =>\\n        <Fragment key={rowId}>\\n          {renderRow(rowId, index)}\\n        </Fragment>\\n      )}\\n    </div>\\n  );\\n}\\n\\nexport function Row({ children, isHighlighted }) {\\n  return (\\n    <div className={[\\n      'Row',\\n      isHighlighted ? 'RowHighlighted' : ''\\n    ].join(' ')}>\\n      {children}\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".RowList {\\n  display: flex;\\n  flex-direction: column;\\n  border: 2px solid grey;\\n  padding: 5px;\\n}\\n\\n.RowListHeader {\\n  padding-top: 5px;\\n  font-size: 25px;\\n  font-weight: bold;\\n  text-align: center;\\n}\\n\\n.Row {\\n  border: 2px dashed black;\\n  padding: 5px;\\n  margin: 5px;\\n}\\n\\n.RowHighlighted {\\n  background: #ffa;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"last\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"This is another example of how parent and child components can cooperate without manipulating the children.\"}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"troubleshooting\",\"children\":\"Troubleshooting \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"i-pass-a-custom-component-but-the-children-methods-dont-show-its-render-result\",\"children\":[\"I pass a custom component, but the \",[\"$r\",\"code\",null,{\"children\":\"Children\"}],\" methods don’t show its render result \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Suppose you pass two children to \",[\"$r\",\"code\",null,{\"children\":\"RowList\"}],\" like this:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"<RowList>\\n  <p>First item</p>\\n  <MoreRows />\\n</RowList>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"If you do \",[\"$r\",\"code\",null,{\"children\":\"Children.count(children)\"}],\" inside \",[\"$r\",\"code\",null,{\"children\":\"RowList\"}],\", you will get \",[\"$r\",\"code\",null,{\"children\":\"2\"}],\". Even if \",[\"$r\",\"code\",null,{\"children\":\"MoreRows\"}],\" renders 10 different items, or if it returns \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\", \",[\"$r\",\"code\",null,{\"children\":\"Children.count(children)\"}],\" will still be \",[\"$r\",\"code\",null,{\"children\":\"2\"}],\". From the \",[\"$r\",\"code\",null,{\"children\":\"RowList\"}],\"’s perspective, it only “sees” the JSX it has received. It does not “see” the internals of the \",[\"$r\",\"code\",null,{\"children\":\"MoreRows\"}],\" component.\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"The limitation makes it hard to extract a component. This is why \",[\"$r\",\"a\",null,{\"href\":\"#alternatives\",\"children\":\"alternatives\"}],\" are preferred to using \",[\"$r\",\"code\",null,{\"children\":\"Children\"}],\".\"]}]]}]]","meta":{"title":"Children"},"languages":null},"__N_SSG":true}