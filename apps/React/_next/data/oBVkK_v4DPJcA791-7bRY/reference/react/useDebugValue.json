{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"Overview\",\"depth\":2},{\"url\":\"#reference\",\"depth\":2,\"text\":\"Reference \"},{\"url\":\"#usedebugvalue\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"useDebugValue(value, format?)\"}],\" \"]},{\"url\":\"#usage\",\"depth\":2,\"text\":\"Usage \"},{\"url\":\"#adding-a-label-to-a-custom-hook\",\"depth\":3,\"text\":\"Adding a label to a custom Hook \"},{\"url\":\"#deferring-formatting-of-a-debug-value\",\"depth\":3,\"text\":\"Deferring formatting of a debug value \"}]","content":"[[\"$r\",\"MaxWidth\",\"38\",{\"children\":[[\"$r\",\"Intro\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useDebugValue\"}],\" is a React Hook that lets you add a label to a custom Hook in \",[\"$r\",\"a\",null,{\"href\":\"/learn/react-developer-tools\",\"children\":\"React DevTools.\"}]]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"useDebugValue(value, format?)\\n\"}]}]]}],\"\\n\",[\"$r\",\"InlineToc\",null,{}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"reference\",\"children\":\"Reference \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"usedebugvalue\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"useDebugValue(value, format?)\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Call \",[\"$r\",\"code\",null,{\"children\":\"useDebugValue\"}],\" at the top level of your \",[\"$r\",\"a\",null,{\"href\":\"/learn/reusing-logic-with-custom-hooks\",\"children\":\"custom Hook\"}],\" to display a readable debug value:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useDebugValue } from 'react';\\n\\nfunction useOnlineStatus() {\\n  // ...\\n  useDebugValue(isOnline ? 'Online' : 'Offline');\\n  // ...\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"#usage\",\"children\":\"See more examples below.\"}]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"parameters\",\"children\":\"Parameters \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"value\"}],\": The value you want to display in React DevTools. It can have any type.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"optional\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"format\"}],\": A formatting function. When the component is inspected, React DevTools will call the formatting function with the \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" as the argument, and then display the returned formatted value (which may have any type). If you don’t specify the formatting function, the original \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" itself will be displayed.\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"returns\",\"children\":\"Returns \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useDebugValue\"}],\" does not return anything.\"]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"usage\",\"children\":\"Usage \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"adding-a-label-to-a-custom-hook\",\"children\":\"Adding a label to a custom Hook \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Call \",[\"$r\",\"code\",null,{\"children\":\"useDebugValue\"}],\" at the top level of your \",[\"$r\",\"a\",null,{\"href\":\"/learn/reusing-logic-with-custom-hooks\",\"children\":\"custom Hook\"}],\" to display a readable \",[\"$r\",\"CodeStep\",null,{\"step\":1,\"children\":\"debug value\"}],\" for \",[\"$r\",\"a\",null,{\"href\":\"/learn/react-developer-tools\",\"children\":\"React DevTools.\"}]]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[1, 5, \\\"isOnline ? 'Online' : 'Offline'\\\"]]\",\"children\":\"import { useDebugValue } from 'react';\\n\\nfunction useOnlineStatus() {\\n  // ...\\n  useDebugValue(isOnline ? 'Online' : 'Offline');\\n  // ...\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"This gives components calling \",[\"$r\",\"code\",null,{\"children\":\"useOnlineStatus\"}],\" a label like \",[\"$r\",\"code\",null,{\"children\":\"OnlineStatus: \\\"Online\\\"\"}],\" when you inspect them:\"]}],\"\\n\",[\"$r\",\"img\",null,{\"src\":\"/images/docs/react-devtools-usedebugvalue.png\",\"alt\":\"A screenshot of React DevTools showing the debug value\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Without the \",[\"$r\",\"code\",null,{\"children\":\"useDebugValue\"}],\" call, only the underlying data (in this example, \",[\"$r\",\"code\",null,{\"children\":\"true\"}],\") would be displayed.\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useOnlineStatus } from './useOnlineStatus.js';\\n\\nfunction StatusBar() {\\n  const isOnline = useOnlineStatus();\\n  return <h1>{isOnline ? '✅ Online' : '❌ Disconnected'}</h1>;\\n}\\n\\nexport default function App() {\\n  return <StatusBar />;\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/useOnlineStatus.js active\",\"children\":\"import { useSyncExternalStore, useDebugValue } from 'react';\\n\\nexport function useOnlineStatus() {\\n  const isOnline = useSyncExternalStore(subscribe, () => navigator.onLine, () => true);\\n  useDebugValue(isOnline ? 'Online' : 'Offline');\\n  return isOnline;\\n}\\n\\nfunction subscribe(callback) {\\n  window.addEventListener('online', callback);\\n  window.addEventListener('offline', callback);\\n  return () => {\\n    window.removeEventListener('online', callback);\\n    window.removeEventListener('offline', callback);\\n  };\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"last\",{\"children\":[\"\\n\",[\"$r\",\"Note\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":\"Don’t add debug values to every custom Hook. It’s most valuable for custom Hooks that are part of shared libraries and that have a complex internal data structure that’s difficult to inspect.\"}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"deferring-formatting-of-a-debug-value\",\"children\":\"Deferring formatting of a debug value \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"You can also pass a formatting function as the second argument to \",[\"$r\",\"code\",null,{\"children\":\"useDebugValue\"}],\":\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[1, 1, \\\"date\\\", 18], [2, 1, \\\"date.toDateString()\\\"]]\",\"children\":\"useDebugValue(date, date => date.toDateString());\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Your formatting function will receive the \",[\"$r\",\"CodeStep\",null,{\"step\":1,\"children\":\"debug value\"}],\" as a parameter and should return a \",[\"$r\",\"CodeStep\",null,{\"step\":2,\"children\":\"formatted display value\"}],\". When your component is inspected, React DevTools will call this function and display its result.\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"This lets you avoid running potentially expensive formatting logic unless the component is actually inspected. For example, if \",[\"$r\",\"code\",null,{\"children\":\"date\"}],\" is a Date value, this avoids calling \",[\"$r\",\"code\",null,{\"children\":\"toDateString()\"}],\" on it for every render.\"]}]]}]]","meta":{"title":"useDebugValue"},"languages":null},"__N_SSG":true}