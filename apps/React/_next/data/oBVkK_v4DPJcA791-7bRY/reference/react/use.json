{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"Overview\",\"depth\":2},{\"url\":\"#reference\",\"depth\":2,\"text\":\"Reference \"},{\"url\":\"#use\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"use(resource)\"}],\" \"]},{\"url\":\"#usage\",\"depth\":2,\"text\":\"Usage \"},{\"url\":\"#reading-context-with-use\",\"depth\":3,\"text\":[\"Reading context with \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\" \"]},{\"url\":\"#streaming-data-from-server-to-client\",\"depth\":3,\"text\":\"Streaming data from the server to the client \"},{\"url\":\"#dealing-with-rejected-promises\",\"depth\":3,\"text\":\"Dealing with rejected Promises \"},{\"url\":\"#troubleshooting\",\"depth\":2,\"text\":\"Troubleshooting \"},{\"url\":\"#suspense-exception-error\",\"depth\":3,\"text\":\"“Suspense Exception: This is not a real error!” \"}]","content":"[[\"$r\",\"MaxWidth\",\"58\",{\"children\":[[\"$r\",\"Intro\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"use\"}],\" is a React API that lets you read the value of a resource like a \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Promise\"}],\" or \",[\"$r\",\"a\",null,{\"href\":\"/learn/passing-data-deeply-with-context\",\"children\":\"context\"}],\".\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const value = use(resource);\\n\"}]}]]}],\"\\n\",[\"$r\",\"InlineToc\",null,{}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"reference\",\"children\":\"Reference \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"use\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"use(resource)\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Call \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\" in your component to read the value of a resource like a \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Promise\"}],\" or \",[\"$r\",\"a\",null,{\"href\":\"/learn/passing-data-deeply-with-context\",\"children\":\"context\"}],\".\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-jsx\",\"children\":\"import { use } from 'react';\\n\\nfunction MessageComponent({ messagePromise }) {\\n  const message = use(messagePromise);\\n  const theme = use(ThemeContext);\\n  // ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Unlike React Hooks, \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\" can be called within loops and conditional statements like \",[\"$r\",\"code\",null,{\"children\":\"if\"}],\". Like React Hooks, the function that calls \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\" must be a Component or Hook.\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"When called with a Promise, the \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\" API integrates with \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Suspense\",\"children\":[\"$r\",\"code\",null,{\"children\":\"Suspense\"}]}],\" and \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Component#catching-rendering-errors-with-an-error-boundary\",\"children\":\"error boundaries\"}],\". The component calling \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\" \",[\"$r\",\"em\",null,{\"children\":\"suspends\"}],\" while the Promise passed to \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\" is pending. If the component that calls \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\" is wrapped in a Suspense boundary, the fallback will be displayed.  Once the Promise is resolved, the Suspense fallback is replaced by the rendered components using the data returned by the \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\" API. If the Promise passed to \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\" is rejected, the fallback of the nearest Error Boundary will be displayed.\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"#usage\",\"children\":\"See more examples below.\"}]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"parameters\",\"children\":\"Parameters \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"resource\"}],\": this is the source of the data you want to read a value from. A resource can be a \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Promise\"}],\" or a \",[\"$r\",\"a\",null,{\"href\":\"/learn/passing-data-deeply-with-context\",\"children\":\"context\"}],\".\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"returns\",\"children\":\"Returns \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"The \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\" API returns the value that was read from the resource like the resolved value of a \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Promise\"}],\" or \",[\"$r\",\"a\",null,{\"href\":\"/learn/passing-data-deeply-with-context\",\"children\":\"context\"}],\".\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"caveats\",\"children\":\"Caveats \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"The \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\" API must be called inside a Component or a Hook.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"When fetching data in a \",[\"$r\",\"a\",null,{\"href\":\"/reference/rsc/server-components\",\"children\":\"Server Component\"}],\", prefer \",[\"$r\",\"code\",null,{\"children\":\"async\"}],\" and \",[\"$r\",\"code\",null,{\"children\":\"await\"}],\" over \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\". \",[\"$r\",\"code\",null,{\"children\":\"async\"}],\" and \",[\"$r\",\"code\",null,{\"children\":\"await\"}],\" pick up rendering from the point where \",[\"$r\",\"code\",null,{\"children\":\"await\"}],\" was invoked, whereas \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\" re-renders the component after the data is resolved.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"Prefer creating Promises in \",[\"$r\",\"a\",null,{\"href\":\"/reference/rsc/server-components\",\"children\":\"Server Components\"}],\" and passing them to \",[\"$r\",\"a\",null,{\"href\":\"/reference/rsc/use-client\",\"children\":\"Client Components\"}],\" over creating Promises in Client Components. Promises created in Client Components are recreated on every render. Promises passed from a Server Component to a Client Component are stable across re-renders. \",[\"$r\",\"a\",null,{\"href\":\"#streaming-data-from-server-to-client\",\"children\":\"See this example\"}],\".\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"usage\",\"children\":\"Usage \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"reading-context-with-use\",\"children\":[\"Reading context with \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"When a \",[\"$r\",\"a\",null,{\"href\":\"/learn/passing-data-deeply-with-context\",\"children\":\"context\"}],\" is passed to \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\", it works similarly to \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useContext\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useContext\"}]}],\". While \",[\"$r\",\"code\",null,{\"children\":\"useContext\"}],\" must be called at the top level of your component, \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\" can be called inside conditionals like \",[\"$r\",\"code\",null,{\"children\":\"if\"}],\" and loops like \",[\"$r\",\"code\",null,{\"children\":\"for\"}],\". \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\" is preferred over \",[\"$r\",\"code\",null,{\"children\":\"useContext\"}],\" because it is more flexible.\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[2, 4, \\\"theme\\\"], [1, 4, \\\"ThemeContext\\\"]]\",\"children\":\"import { use } from 'react';\\n\\nfunction Button() {\\n  const theme = use(ThemeContext);\\n  // ... \\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"use\"}],\" returns the \",[\"$r\",\"CodeStep\",null,{\"step\":2,\"children\":\"context value\"}],\" for the \",[\"$r\",\"CodeStep\",null,{\"step\":1,\"children\":\"context\"}],\" you passed. To determine the context value, React searches the component tree and finds \",[\"$r\",\"strong\",null,{\"children\":\"the closest context provider above\"}],\" for that particular context.\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"To pass context to a \",[\"$r\",\"code\",null,{\"children\":\"Button\"}],\", wrap it or one of its parent components into the corresponding context provider.\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[1, 3, \\\"ThemeContext\\\"], [2, 3, \\\"\\\\\\\"dark\\\\\\\"\\\"], [1, 5, \\\"ThemeContext\\\"]]\",\"children\":\"function MyPage() {\\n  return (\\n    <ThemeContext.Provider value=\\\"dark\\\">\\n      <Form />\\n    </ThemeContext.Provider>\\n  );\\n}\\n\\nfunction Form() {\\n  // ... renders buttons inside ...\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"It doesn’t matter how many layers of components there are between the provider and the \",[\"$r\",\"code\",null,{\"children\":\"Button\"}],\". When a \",[\"$r\",\"code\",null,{\"children\":\"Button\"}],\" \",[\"$r\",\"em\",null,{\"children\":\"anywhere\"}],\" inside of \",[\"$r\",\"code\",null,{\"children\":\"Form\"}],\" calls \",[\"$r\",\"code\",null,{\"children\":\"use(ThemeContext)\"}],\", it will receive \",[\"$r\",\"code\",null,{\"children\":\"\\\"dark\\\"\"}],\" as the value.\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Unlike \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useContext\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useContext\"}]}],\", \",[\"$r\",\"CodeStep\",null,{\"step\":2,\"children\":[\"$r\",\"code\",null,{\"children\":\"use\"}]}],\" can be called in conditionals and loops like \",[\"$r\",\"CodeStep\",null,{\"step\":1,\"children\":[\"$r\",\"code\",null,{\"children\":\"if\"}]}],\".\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[1, 2, \\\"if\\\"], [2, 3, \\\"use\\\"]]\",\"children\":\"function HorizontalRule({ show }) {\\n  if (show) {\\n    const theme = use(ThemeContext);\\n    return <hr className={theme} />;\\n  }\\n  return false;\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"CodeStep\",null,{\"step\":2,\"children\":[\"$r\",\"code\",null,{\"children\":\"use\"}]}],\" is called from inside a \",[\"$r\",\"CodeStep\",null,{\"step\":1,\"children\":[\"$r\",\"code\",null,{\"children\":\"if\"}]}],\" statement, allowing you to conditionally read values from a Context.\"]}],\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"Like \",[\"$r\",\"code\",null,{\"children\":\"useContext\"}],\", \",[\"$r\",\"code\",null,{\"children\":\"use(context)\"}],\" always looks for the closest context provider \",[\"$r\",\"em\",null,{\"children\":\"above\"}],\" the component that calls it. It searches upwards and \",[\"$r\",\"strong\",null,{\"children\":\"does not\"}],\" consider context providers in the component from which you’re calling \",[\"$r\",\"code\",null,{\"children\":\"use(context)\"}],\".\"]}]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { createContext, use } from 'react';\\n\\nconst ThemeContext = createContext(null);\\n\\nexport default function MyApp() {\\n  return (\\n    <ThemeContext.Provider value=\\\"dark\\\">\\n      <Form />\\n    </ThemeContext.Provider>\\n  )\\n}\\n\\nfunction Form() {\\n  return (\\n    <Panel title=\\\"Welcome\\\">\\n      <Button show={true}>Sign up</Button>\\n      <Button show={false}>Log in</Button>\\n    </Panel>\\n  );\\n}\\n\\nfunction Panel({ title, children }) {\\n  const theme = use(ThemeContext);\\n  const className = 'panel-' + theme;\\n  return (\\n    <section className={className}>\\n      <h1>{title}</h1>\\n      {children}\\n    </section>\\n  )\\n}\\n\\nfunction Button({ show, children }) {\\n  if (show) {\\n    const theme = use(ThemeContext);\\n    const className = 'button-' + theme;\\n    return (\\n      <button className={className}>\\n        {children}\\n      </button>\\n    );\\n  }\\n  return false\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".panel-light,\\n.panel-dark {\\n  border: 1px solid black;\\n  border-radius: 4px;\\n  padding: 20px;\\n}\\n.panel-light {\\n  color: #222;\\n  background: #fff;\\n}\\n\\n.panel-dark {\\n  color: #fff;\\n  background: rgb(23, 32, 42);\\n}\\n\\n.button-light,\\n.button-dark {\\n  border: 1px solid #777;\\n  padding: 5px;\\n  margin-right: 10px;\\n  margin-top: 10px;\\n}\\n\\n.button-dark {\\n  background: #222;\\n  color: #fff;\\n}\\n\\n.button-light {\\n  background: #fff;\\n  color: #222;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"72\",{\"children\":[\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"streaming-data-from-server-to-client\",\"children\":\"Streaming data from the server to the client \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Data can be streamed from the server to the client by passing a Promise as a prop from a \",[\"$r\",\"CodeStep\",null,{\"step\":1,\"children\":\"Server Component\"}],\" to a \",[\"$r\",\"CodeStep\",null,{\"step\":2,\"children\":\"Client Component\"}],\".\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[1, 4, \\\"App\\\"], [2, 2, \\\"Message\\\"], [3, 7, \\\"Suspense\\\"], [4, 8, \\\"messagePromise\\\", 30], [4, 5, \\\"messagePromise\\\"]]\",\"children\":\"import { fetchMessage } from './lib.js';\\nimport { Message } from './message.js';\\n\\nexport default function App() {\\n  const messagePromise = fetchMessage();\\n  return (\\n    <Suspense fallback={<p>waiting for message...</p>}>\\n      <Message messagePromise={messagePromise} />\\n    </Suspense>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"The \",[\"$r\",\"CodeStep\",null,{\"step\":2,\"children\":\"Client Component\"}],\" then takes \",[\"$r\",\"CodeStep\",null,{\"step\":4,\"children\":\"the Promise it received as a prop\"}],\" and passes it to the \",[\"$r\",\"CodeStep\",null,{\"step\":5,\"children\":[\"$r\",\"code\",null,{\"children\":\"use\"}]}],\" API. This allows the \",[\"$r\",\"CodeStep\",null,{\"step\":2,\"children\":\"Client Component\"}],\" to read the value from \",[\"$r\",\"CodeStep\",null,{\"step\":4,\"children\":\"the Promise\"}],\" that was initially created by the Server Component.\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[2, 6, \\\"Message\\\"], [4, 6, \\\"messagePromise\\\"], [4, 7, \\\"messagePromise\\\"], [5, 7, \\\"use\\\"]]\",\"children\":\"// message.js\\n'use client';\\n\\nimport { use } from 'react';\\n\\nexport function Message({ messagePromise }) {\\n  const messageContent = use(messagePromise);\\n  return <p>Here is the message: {messageContent}</p>;\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Because \",[\"$r\",\"CodeStep\",null,{\"step\":2,\"children\":[\"$r\",\"code\",null,{\"children\":\"Message\"}]}],\" is wrapped in \",[\"$r\",\"CodeStep\",null,{\"step\":3,\"children\":[\"$r\",\"a\",null,{\"href\":\"/reference/react/Suspense\",\"children\":[\"$r\",\"code\",null,{\"children\":\"Suspense\"}]}]}],\", the fallback will be displayed until the Promise is resolved. When the Promise is resolved, the value will be read by the \",[\"$r\",\"CodeStep\",null,{\"step\":5,\"children\":[\"$r\",\"code\",null,{\"children\":\"use\"}]}],\" API and the \",[\"$r\",\"CodeStep\",null,{\"step\":2,\"children\":[\"$r\",\"code\",null,{\"children\":\"Message\"}]}],\" component will replace the Suspense fallback.\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/message.js active\",\"children\":\"\\\"use client\\\";\\n\\nimport { use, Suspense } from \\\"react\\\";\\n\\nfunction Message({ messagePromise }) {\\n  const messageContent = use(messagePromise);\\n  return <p>Here is the message: {messageContent}</p>;\\n}\\n\\nexport function MessageContainer({ messagePromise }) {\\n  return (\\n    <Suspense fallback={<p>⌛Downloading message...</p>}>\\n      <Message messagePromise={messagePromise} />\\n    </Suspense>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js hidden\",\"children\":\"import { useState } from \\\"react\\\";\\nimport { MessageContainer } from \\\"./message.js\\\";\\n\\nfunction fetchMessage() {\\n  return new Promise((resolve) => setTimeout(resolve, 1000, \\\"⚛️\\\"));\\n}\\n\\nexport default function App() {\\n  const [messagePromise, setMessagePromise] = useState(null);\\n  const [show, setShow] = useState(false);\\n  function download() {\\n    setMessagePromise(fetchMessage());\\n    setShow(true);\\n  }\\n\\n  if (show) {\\n    return <MessageContainer messagePromise={messagePromise} />;\\n  } else {\\n    return <button onClick={download}>Download message</button>;\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/index.js hidden\",\"children\":\"import React, { StrictMode } from 'react';\\nimport { createRoot } from 'react-dom/client';\\nimport './styles.css';\\n\\n// TODO: update this example to use\\n// the Codesandbox Server Component\\n// demo environment once it is created\\nimport App from './App';\\n\\nconst root = createRoot(document.getElementById('root'));\\nroot.render(\\n  <StrictMode>\\n    <App />\\n  </StrictMode>\\n);\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"90\",{\"children\":[\"\\n\",[\"$r\",\"Note\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":\"When passing a Promise from a Server Component to a Client Component, its resolved value must be serializable to pass between server and client. Data types like functions aren’t serializable and cannot be the resolved value of such a Promise.\"}]}],\"\\n\",[\"$r\",\"DeepDive\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"resolve-promise-in-server-or-client-component\",\"children\":\"Should I resolve a Promise in a Server or Client Component? \"}],[\"$r\",\"p\",null,{\"children\":[\"A Promise can be passed from a Server Component to a Client Component and resolved in the Client Component with the \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\" API. You can also resolve the Promise in a Server Component with \",[\"$r\",\"code\",null,{\"children\":\"await\"}],\" and pass the required data to the Client Component as a prop.\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export default async function App() {\\n  const messageContent = await fetchMessage();\\n  return <Message messageContent={messageContent} />\\n}\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"But using \",[\"$r\",\"code\",null,{\"children\":\"await\"}],\" in a \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/components#server-components\",\"children\":\"Server Component\"}],\" will block its rendering until the \",[\"$r\",\"code\",null,{\"children\":\"await\"}],\" statement is finished. Passing a Promise from a Server Component to a Client Component prevents the Promise from blocking the rendering of the Server Component.\"]}]]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"dealing-with-rejected-promises\",\"children\":\"Dealing with rejected Promises \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"In some cases a Promise passed to \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\" could be rejected. You can handle rejected Promises by either:\"]}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"#displaying-an-error-to-users-with-error-boundary\",\"children\":\"Displaying an error to users with an error boundary.\"}]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"#providing-an-alternative-value-with-promise-catch\",\"children\":[\"Providing an alternative value with \",[\"$r\",\"code\",null,{\"children\":\"Promise.catch\"}]]}]}],\"\\n\"]}],\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"use\"}],\" cannot be called in a try-catch block. Instead of a try-catch block \",[\"$r\",\"a\",null,{\"href\":\"#displaying-an-error-to-users-with-error-boundary\",\"children\":\"wrap your component in an Error Boundary\"}],\", or \",[\"$r\",\"a\",null,{\"href\":\"#providing-an-alternative-value-with-promise-catch\",\"children\":[\"provide an alternative value to use with the Promise’s \",[\"$r\",\"code\",null,{\"children\":\".catch\"}],\" method\"]}],\".\"]}]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"displaying-an-error-to-users-with-error-boundary\",\"children\":\"Displaying an error to users with an error boundary \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"If you’d like to display an error to your users when a Promise is rejected, you can use an \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Component#catching-rendering-errors-with-an-error-boundary\",\"children\":\"error boundary\"}],\". To use an error boundary, wrap the component where you are calling the \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\" API in an error boundary. If the Promise passed to \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\" is rejected the fallback for the error boundary will be displayed.\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/message.js active\",\"children\":\"\\\"use client\\\";\\n\\nimport { use, Suspense } from \\\"react\\\";\\nimport { ErrorBoundary } from \\\"react-error-boundary\\\";\\n\\nexport function MessageContainer({ messagePromise }) {\\n  return (\\n    <ErrorBoundary fallback={<p>⚠️Something went wrong</p>}>\\n      <Suspense fallback={<p>⌛Downloading message...</p>}>\\n        <Message messagePromise={messagePromise} />\\n      </Suspense>\\n    </ErrorBoundary>\\n  );\\n}\\n\\nfunction Message({ messagePromise }) {\\n  const content = use(messagePromise);\\n  return <p>Here is the message: {content}</p>;\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js hidden\",\"children\":\"import { useState } from \\\"react\\\";\\nimport { MessageContainer } from \\\"./message.js\\\";\\n\\nfunction fetchMessage() {\\n  return new Promise((resolve, reject) => setTimeout(reject, 1000));\\n}\\n\\nexport default function App() {\\n  const [messagePromise, setMessagePromise] = useState(null);\\n  const [show, setShow] = useState(false);\\n  function download() {\\n    setMessagePromise(fetchMessage());\\n    setShow(true);\\n  }\\n\\n  if (show) {\\n    return <MessageContainer messagePromise={messagePromise} />;\\n  } else {\\n    return <button onClick={download}>Download message</button>;\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/index.js hidden\",\"children\":\"import React, { StrictMode } from 'react';\\nimport { createRoot } from 'react-dom/client';\\nimport './styles.css';\\n\\n// TODO: update this example to use\\n// the Codesandbox Server Component\\n// demo environment once it is created\\nimport App from './App';\\n\\nconst root = createRoot(document.getElementById('root'));\\nroot.render(\\n  <StrictMode>\\n    <App />\\n  </StrictMode>\\n);\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json hidden\",\"children\":\"{\\n  \\\"dependencies\\\": {\\n    \\\"react\\\": \\\"19.0.0\\\",\\n    \\\"react-dom\\\": \\\"19.0.0\\\",\\n    \\\"react-scripts\\\": \\\"^5.0.0\\\",\\n    \\\"react-error-boundary\\\": \\\"4.0.3\\\"\\n  },\\n  \\\"main\\\": \\\"/index.js\\\"\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"last\",{\"children\":[\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"providing-an-alternative-value-with-promise-catch\",\"children\":[\"Providing an alternative value with \",[\"$r\",\"code\",null,{\"children\":\"Promise.catch\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"If you’d like to provide an alternative value when the Promise passed to \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\" is rejected you can use the Promise’s \",[\"$r\",\"CodeStep\",null,{\"step\":1,\"children\":[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"catch\"}]}]}],\" method.\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[1, 6, \\\"catch\\\"],[2, 7, \\\"return\\\"]]\",\"children\":\"import { Message } from './message.js';\\n\\nexport default function App() {\\n  const messagePromise = new Promise((resolve, reject) => {\\n    reject();\\n  }).catch(() => {\\n    return \\\"no new message found.\\\";\\n  });\\n\\n  return (\\n    <Suspense fallback={<p>waiting for message...</p>}>\\n      <Message messagePromise={messagePromise} />\\n    </Suspense>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"To use the Promise’s \",[\"$r\",\"CodeStep\",null,{\"step\":1,\"children\":[\"$r\",\"code\",null,{\"children\":\"catch\"}]}],\" method, call \",[\"$r\",\"CodeStep\",null,{\"step\":1,\"children\":[\"$r\",\"code\",null,{\"children\":\"catch\"}]}],\" on the Promise object. \",[\"$r\",\"CodeStep\",null,{\"step\":1,\"children\":[\"$r\",\"code\",null,{\"children\":\"catch\"}]}],\" takes a single argument: a function that takes an error message as an argument. Whatever is \",[\"$r\",\"CodeStep\",null,{\"step\":2,\"children\":\"returned\"}],\" by the function passed to \",[\"$r\",\"CodeStep\",null,{\"step\":1,\"children\":[\"$r\",\"code\",null,{\"children\":\"catch\"}]}],\" will be used as the resolved value of the Promise.\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"troubleshooting\",\"children\":\"Troubleshooting \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"suspense-exception-error\",\"children\":\"“Suspense Exception: This is not a real error!” \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"You are either calling \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\" outside of a React Component or Hook function, or calling \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\" in a try–catch block. If you are calling \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\" inside a try–catch block, wrap your component in an error boundary, or call the Promise’s \",[\"$r\",\"code\",null,{\"children\":\"catch\"}],\" to catch the error and resolve the Promise with another value. \",[\"$r\",\"a\",null,{\"href\":\"#dealing-with-rejected-promises\",\"children\":\"See these examples\"}],\".\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"If you are calling \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\" outside a React Component or Hook function, move the \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\" call to a React Component or Hook function.\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-jsx\",\"children\":\"function MessageComponent({messagePromise}) {\\n  function download() {\\n    // ❌ the function calling `use` is not a Component or Hook\\n    const message = use(messagePromise);\\n    // ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Instead, call \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\" outside any component closures, where the function that calls \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\" is a Component or Hook.\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-jsx\",\"children\":\"function MessageComponent({messagePromise}) {\\n  // ✅ `use` is being called from a component. \\n  const message = use(messagePromise);\\n  // ...\\n\"}]}]]}]]","meta":{"title":"use"},"languages":null},"__N_SSG":true}