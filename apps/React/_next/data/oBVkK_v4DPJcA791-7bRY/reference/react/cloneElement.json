{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"Overview\",\"depth\":2},{\"url\":\"#reference\",\"depth\":2,\"text\":\"Reference \"},{\"url\":\"#cloneelement\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"cloneElement(element, props, ...children)\"}],\" \"]},{\"url\":\"#usage\",\"depth\":2,\"text\":\"Usage \"},{\"url\":\"#overriding-props-of-an-element\",\"depth\":3,\"text\":\"Overriding props of an element \"},{\"url\":\"#alternatives\",\"depth\":2,\"text\":\"Alternatives \"},{\"url\":\"#passing-data-with-a-render-prop\",\"depth\":3,\"text\":\"Passing data with a render prop \"},{\"url\":\"#passing-data-through-context\",\"depth\":3,\"text\":\"Passing data through context \"},{\"url\":\"#extracting-logic-into-a-custom-hook\",\"depth\":3,\"text\":\"Extracting logic into a custom Hook \"}]","content":"[[\"$r\",\"MaxWidth\",\"62\",{\"children\":[[\"$r\",\"Pitfall\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"Using \",[\"$r\",\"code\",null,{\"children\":\"cloneElement\"}],\" is uncommon and can lead to fragile code. \",[\"$r\",\"a\",null,{\"href\":\"#alternatives\",\"children\":\"See common alternatives.\"}]]}]}],\"\\n\",[\"$r\",\"Intro\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"cloneElement\"}],\" lets you create a new React element using another element as a starting point.\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const clonedElement = cloneElement(element, props, ...children)\\n\"}]}]]}],\"\\n\",[\"$r\",\"InlineToc\",null,{}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"reference\",\"children\":\"Reference \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"cloneelement\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"cloneElement(element, props, ...children)\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Call \",[\"$r\",\"code\",null,{\"children\":\"cloneElement\"}],\" to create a React element based on the \",[\"$r\",\"code\",null,{\"children\":\"element\"}],\", but with different \",[\"$r\",\"code\",null,{\"children\":\"props\"}],\" and \",[\"$r\",\"code\",null,{\"children\":\"children\"}],\":\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { cloneElement } from 'react';\\n\\n// ...\\nconst clonedElement = cloneElement(\\n  <Row title=\\\"Cabbage\\\">\\n    Hello\\n  </Row>,\\n  { isHighlighted: true },\\n  'Goodbye'\\n);\\n\\nconsole.log(clonedElement); // <Row title=\\\"Cabbage\\\" isHighlighted={true}>Goodbye</Row>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"#usage\",\"children\":\"See more examples below.\"}]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"parameters\",\"children\":\"Parameters \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"element\"}],\": The \",[\"$r\",\"code\",null,{\"children\":\"element\"}],\" argument must be a valid React element. For example, it could be a JSX node like \",[\"$r\",\"code\",null,{\"children\":\"<Something />\"}],\", the result of calling \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/createElement\",\"children\":[\"$r\",\"code\",null,{\"children\":\"createElement\"}]}],\", or the result of another \",[\"$r\",\"code\",null,{\"children\":\"cloneElement\"}],\" call.\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"props\"}],\": The \",[\"$r\",\"code\",null,{\"children\":\"props\"}],\" argument must either be an object or \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\". If you pass \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\", the cloned element will retain all of the original \",[\"$r\",\"code\",null,{\"children\":\"element.props\"}],\". Otherwise, for every prop in the \",[\"$r\",\"code\",null,{\"children\":\"props\"}],\" object, the returned element will “prefer” the value from \",[\"$r\",\"code\",null,{\"children\":\"props\"}],\" over the value from \",[\"$r\",\"code\",null,{\"children\":\"element.props\"}],\". The rest of the props will be filled from the original \",[\"$r\",\"code\",null,{\"children\":\"element.props\"}],\". If you pass \",[\"$r\",\"code\",null,{\"children\":\"props.key\"}],\" or \",[\"$r\",\"code\",null,{\"children\":\"props.ref\"}],\", they will replace the original ones.\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"optional\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"...children\"}],\": Zero or more child nodes. They can be any React nodes, including React elements, strings, numbers, \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/createPortal\",\"children\":\"portals\"}],\", empty nodes (\",[\"$r\",\"code\",null,{\"children\":\"null\"}],\", \",[\"$r\",\"code\",null,{\"children\":\"undefined\"}],\", \",[\"$r\",\"code\",null,{\"children\":\"true\"}],\", and \",[\"$r\",\"code\",null,{\"children\":\"false\"}],\"), and arrays of React nodes. If you don’t pass any \",[\"$r\",\"code\",null,{\"children\":\"...children\"}],\" arguments, the original \",[\"$r\",\"code\",null,{\"children\":\"element.props.children\"}],\" will be preserved.\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"returns\",\"children\":\"Returns \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"cloneElement\"}],\" returns a React element object with a few properties:\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"type\"}],\": Same as \",[\"$r\",\"code\",null,{\"children\":\"element.type\"}],\".\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"props\"}],\": The result of shallowly merging \",[\"$r\",\"code\",null,{\"children\":\"element.props\"}],\" with the overriding \",[\"$r\",\"code\",null,{\"children\":\"props\"}],\" you have passed.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"ref\"}],\": The original \",[\"$r\",\"code\",null,{\"children\":\"element.ref\"}],\", unless it was overridden by \",[\"$r\",\"code\",null,{\"children\":\"props.ref\"}],\".\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"key\"}],\": The original \",[\"$r\",\"code\",null,{\"children\":\"element.key\"}],\", unless it was overridden by \",[\"$r\",\"code\",null,{\"children\":\"props.key\"}],\".\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"Usually, you’ll return the element from your component or make it a child of another element. Although you may read the element’s properties, it’s best to treat every element as opaque after it’s created, and only render it.\"}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"caveats\",\"children\":\"Caveats \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Cloning an element \",[\"$r\",\"strong\",null,{\"children\":\"does not modify the original element.\"}]]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"You should only \",[\"$r\",\"strong\",null,{\"children\":[\"pass children as multiple arguments to \",[\"$r\",\"code\",null,{\"children\":\"cloneElement\"}],\" if they are all statically known,\"]}],\" like \",[\"$r\",\"code\",null,{\"children\":\"cloneElement(element, null, child1, child2, child3)\"}],\". If your children are dynamic, pass the entire array as the third argument: \",[\"$r\",\"code\",null,{\"children\":\"cloneElement(element, null, listItems)\"}],\". This ensures that React will \",[\"$r\",\"a\",null,{\"href\":\"/learn/rendering-lists#keeping-list-items-in-order-with-key\",\"children\":[\"warn you about missing \",[\"$r\",\"code\",null,{\"children\":\"key\"}],\"s\"]}],\" for any dynamic lists. For static lists this is not necessary because they never reorder.\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"cloneElement\"}],\" makes it harder to trace the data flow, so \",[\"$r\",\"strong\",null,{\"children\":[\"try the \",[\"$r\",\"a\",null,{\"href\":\"#alternatives\",\"children\":\"alternatives\"}],\" instead.\"]}]]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"usage\",\"children\":\"Usage \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"overriding-props-of-an-element\",\"children\":\"Overriding props of an element \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"To override the props of some \",[\"$r\",\"CodeStep\",null,{\"step\":1,\"children\":\"React element\"}],\", pass it to \",[\"$r\",\"code\",null,{\"children\":\"cloneElement\"}],\" with the \",[\"$r\",\"CodeStep\",null,{\"step\":2,\"children\":\"props you want to override\"}],\":\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[1, 5, \\\"<Row title=\\\\\\\"Cabbage\\\\\\\" />\\\"], [2, 6, \\\"{ isHighlighted: true }\\\"], [3, 4, \\\"clonedElement\\\"]]\",\"children\":\"import { cloneElement } from 'react';\\n\\n// ...\\nconst clonedElement = cloneElement(\\n  <Row title=\\\"Cabbage\\\" />,\\n  { isHighlighted: true }\\n);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Here, the resulting \",[\"$r\",\"CodeStep\",null,{\"step\":3,\"children\":\"cloned element\"}],\" will be \",[\"$r\",\"code\",null,{\"children\":\"<Row title=\\\"Cabbage\\\" isHighlighted={true} />\"}],\".\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"$r\",\"strong\",null,{\"children\":\"Let’s walk through an example to see when it’s useful.\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Imagine a \",[\"$r\",\"code\",null,{\"children\":\"List\"}],\" component that renders its \",[\"$r\",\"a\",null,{\"href\":\"/learn/passing-props-to-a-component#passing-jsx-as-children\",\"children\":[\"$r\",\"code\",null,{\"children\":\"children\"}]}],\" as a list of selectable rows with a “Next” button that changes which row is selected. The \",[\"$r\",\"code\",null,{\"children\":\"List\"}],\" component needs to render the selected \",[\"$r\",\"code\",null,{\"children\":\"Row\"}],\" differently, so it clones every \",[\"$r\",\"code\",null,{\"children\":\"<Row>\"}],\" child that it has received, and adds an extra \",[\"$r\",\"code\",null,{\"children\":\"isHighlighted: true\"}],\" or \",[\"$r\",\"code\",null,{\"children\":\"isHighlighted: false\"}],\" prop:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{6-8}\",\"children\":\"export default function List({ children }) {\\n  const [selectedIndex, setSelectedIndex] = useState(0);\\n  return (\\n    <div className=\\\"List\\\">\\n      {Children.map(children, (child, index) =>\\n        cloneElement(child, {\\n          isHighlighted: index === selectedIndex \\n        })\\n      )}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Let’s say the original JSX received by \",[\"$r\",\"code\",null,{\"children\":\"List\"}],\" looks like this:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2-4}\",\"children\":\"<List>\\n  <Row title=\\\"Cabbage\\\" />\\n  <Row title=\\\"Garlic\\\" />\\n  <Row title=\\\"Apple\\\" />\\n</List>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"By cloning its children, the \",[\"$r\",\"code\",null,{\"children\":\"List\"}],\" can pass extra information to every \",[\"$r\",\"code\",null,{\"children\":\"Row\"}],\" inside. The result looks like this:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4,8,12}\",\"children\":\"<List>\\n  <Row\\n    title=\\\"Cabbage\\\"\\n    isHighlighted={true} \\n  />\\n  <Row\\n    title=\\\"Garlic\\\"\\n    isHighlighted={false} \\n  />\\n  <Row\\n    title=\\\"Apple\\\"\\n    isHighlighted={false} \\n  />\\n</List>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Notice how pressing “Next” updates the state of the \",[\"$r\",\"code\",null,{\"children\":\"List\"}],\", and highlights a different row:\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import List from './List.js';\\nimport Row from './Row.js';\\nimport { products } from './data.js';\\n\\nexport default function App() {\\n  return (\\n    <List>\\n      {products.map(product =>\\n        <Row\\n          key={product.id}\\n          title={product.title} \\n        />\\n      )}\\n    </List>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/List.js active\",\"children\":\"import { Children, cloneElement, useState } from 'react';\\n\\nexport default function List({ children }) {\\n  const [selectedIndex, setSelectedIndex] = useState(0);\\n  return (\\n    <div className=\\\"List\\\">\\n      {Children.map(children, (child, index) =>\\n        cloneElement(child, {\\n          isHighlighted: index === selectedIndex \\n        })\\n      )}\\n      <hr />\\n      <button onClick={() => {\\n        setSelectedIndex(i =>\\n          (i + 1) % Children.count(children)\\n        );\\n      }}>\\n        Next\\n      </button>\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Row.js\",\"children\":\"export default function Row({ title, isHighlighted }) {\\n  return (\\n    <div className={[\\n      'Row',\\n      isHighlighted ? 'RowHighlighted' : ''\\n    ].join(' ')}>\\n      {title}\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/data.js\",\"children\":\"export const products = [\\n  { title: 'Cabbage', id: 1 },\\n  { title: 'Garlic', id: 2 },\\n  { title: 'Apple', id: 3 },\\n];\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".List {\\n  display: flex;\\n  flex-direction: column;\\n  border: 2px solid grey;\\n  padding: 5px;\\n}\\n\\n.Row {\\n  border: 2px dashed black;\\n  padding: 5px;\\n  margin: 5px;\\n}\\n\\n.RowHighlighted {\\n  background: #ffa;\\n}\\n\\nbutton {\\n  height: 40px;\\n  font-size: 20px;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"88\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"To summarize, the \",[\"$r\",\"code\",null,{\"children\":\"List\"}],\" cloned the \",[\"$r\",\"code\",null,{\"children\":\"<Row />\"}],\" elements it received and added an extra prop to them.\"]}],\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"Cloning children makes it hard to tell how the data flows through your app. Try one of the \",[\"$r\",\"a\",null,{\"href\":\"#alternatives\",\"children\":\"alternatives.\"}]]}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"alternatives\",\"children\":\"Alternatives \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"passing-data-with-a-render-prop\",\"children\":\"Passing data with a render prop \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Instead of using \",[\"$r\",\"code\",null,{\"children\":\"cloneElement\"}],\", consider accepting a \",[\"$r\",\"em\",null,{\"children\":\"render prop\"}],\" like \",[\"$r\",\"code\",null,{\"children\":\"renderItem\"}],\". Here, \",[\"$r\",\"code\",null,{\"children\":\"List\"}],\" receives \",[\"$r\",\"code\",null,{\"children\":\"renderItem\"}],\" as a prop. \",[\"$r\",\"code\",null,{\"children\":\"List\"}],\" calls \",[\"$r\",\"code\",null,{\"children\":\"renderItem\"}],\" for every item and passes \",[\"$r\",\"code\",null,{\"children\":\"isHighlighted\"}],\" as an argument:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{1,7}\",\"children\":\"export default function List({ items, renderItem }) {\\n  const [selectedIndex, setSelectedIndex] = useState(0);\\n  return (\\n    <div className=\\\"List\\\">\\n      {items.map((item, index) => {\\n        const isHighlighted = index === selectedIndex;\\n        return renderItem(item, isHighlighted);\\n      })}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"The \",[\"$r\",\"code\",null,{\"children\":\"renderItem\"}],\" prop is called a “render prop” because it’s a prop that specifies how to render something. For example, you can pass a \",[\"$r\",\"code\",null,{\"children\":\"renderItem\"}],\" implementation that renders a \",[\"$r\",\"code\",null,{\"children\":\"<Row>\"}],\" with the given \",[\"$r\",\"code\",null,{\"children\":\"isHighlighted\"}],\" value:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3,7}\",\"children\":\"<List\\n  items={products}\\n  renderItem={(product, isHighlighted) =>\\n    <Row\\n      key={product.id}\\n      title={product.title}\\n      isHighlighted={isHighlighted}\\n    />\\n  }\\n/>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"The end result is the same as with \",[\"$r\",\"code\",null,{\"children\":\"cloneElement\"}],\":\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4,8,12}\",\"children\":\"<List>\\n  <Row\\n    title=\\\"Cabbage\\\"\\n    isHighlighted={true} \\n  />\\n  <Row\\n    title=\\\"Garlic\\\"\\n    isHighlighted={false} \\n  />\\n  <Row\\n    title=\\\"Apple\\\"\\n    isHighlighted={false} \\n  />\\n</List>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"However, you can clearly trace where the \",[\"$r\",\"code\",null,{\"children\":\"isHighlighted\"}],\" value is coming from.\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import List from './List.js';\\nimport Row from './Row.js';\\nimport { products } from './data.js';\\n\\nexport default function App() {\\n  return (\\n    <List\\n      items={products}\\n      renderItem={(product, isHighlighted) =>\\n        <Row\\n          key={product.id}\\n          title={product.title}\\n          isHighlighted={isHighlighted}\\n        />\\n      }\\n    />\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/List.js active\",\"children\":\"import { useState } from 'react';\\n\\nexport default function List({ items, renderItem }) {\\n  const [selectedIndex, setSelectedIndex] = useState(0);\\n  return (\\n    <div className=\\\"List\\\">\\n      {items.map((item, index) => {\\n        const isHighlighted = index === selectedIndex;\\n        return renderItem(item, isHighlighted);\\n      })}\\n      <hr />\\n      <button onClick={() => {\\n        setSelectedIndex(i =>\\n          (i + 1) % items.length\\n        );\\n      }}>\\n        Next\\n      </button>\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Row.js\",\"children\":\"export default function Row({ title, isHighlighted }) {\\n  return (\\n    <div className={[\\n      'Row',\\n      isHighlighted ? 'RowHighlighted' : ''\\n    ].join(' ')}>\\n      {title}\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/data.js\",\"children\":\"export const products = [\\n  { title: 'Cabbage', id: 1 },\\n  { title: 'Garlic', id: 2 },\\n  { title: 'Apple', id: 3 },\\n];\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".List {\\n  display: flex;\\n  flex-direction: column;\\n  border: 2px solid grey;\\n  padding: 5px;\\n}\\n\\n.Row {\\n  border: 2px dashed black;\\n  padding: 5px;\\n  margin: 5px;\\n}\\n\\n.RowHighlighted {\\n  background: #ffa;\\n}\\n\\nbutton {\\n  height: 40px;\\n  font-size: 20px;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"116\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"This pattern is preferred to \",[\"$r\",\"code\",null,{\"children\":\"cloneElement\"}],\" because it is more explicit.\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"passing-data-through-context\",\"children\":\"Passing data through context \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Another alternative to \",[\"$r\",\"code\",null,{\"children\":\"cloneElement\"}],\" is to \",[\"$r\",\"a\",null,{\"href\":\"/learn/passing-data-deeply-with-context\",\"children\":\"pass data through context.\"}]]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"For example, you can call \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/createContext\",\"children\":[\"$r\",\"code\",null,{\"children\":\"createContext\"}]}],\" to define a \",[\"$r\",\"code\",null,{\"children\":\"HighlightContext\"}],\":\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export const HighlightContext = createContext(false);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Your \",[\"$r\",\"code\",null,{\"children\":\"List\"}],\" component can wrap every item it renders into a \",[\"$r\",\"code\",null,{\"children\":\"HighlightContext\"}],\" provider:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{8,10}\",\"children\":\"export default function List({ items, renderItem }) {\\n  const [selectedIndex, setSelectedIndex] = useState(0);\\n  return (\\n    <div className=\\\"List\\\">\\n      {items.map((item, index) => {\\n        const isHighlighted = index === selectedIndex;\\n        return (\\n          <HighlightContext.Provider key={item.id} value={isHighlighted}>\\n            {renderItem(item)}\\n          </HighlightContext.Provider>\\n        );\\n      })}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"With this approach, \",[\"$r\",\"code\",null,{\"children\":\"Row\"}],\" does not need to receive an \",[\"$r\",\"code\",null,{\"children\":\"isHighlighted\"}],\" prop at all. Instead, it reads the context:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Row.js {2}\",\"children\":\"export default function Row({ title }) {\\n  const isHighlighted = useContext(HighlightContext);\\n  // ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"This allows the calling component to not know or worry about passing \",[\"$r\",\"code\",null,{\"children\":\"isHighlighted\"}],\" to \",[\"$r\",\"code\",null,{\"children\":\"<Row>\"}],\":\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4}\",\"children\":\"<List\\n  items={products}\\n  renderItem={product =>\\n    <Row title={product.title} />\\n  }\\n/>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Instead, \",[\"$r\",\"code\",null,{\"children\":\"List\"}],\" and \",[\"$r\",\"code\",null,{\"children\":\"Row\"}],\" coordinate the highlighting logic through context.\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import List from './List.js';\\nimport Row from './Row.js';\\nimport { products } from './data.js';\\n\\nexport default function App() {\\n  return (\\n    <List\\n      items={products}\\n      renderItem={(product) =>\\n        <Row title={product.title} />\\n      }\\n    />\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/List.js active\",\"children\":\"import { useState } from 'react';\\nimport { HighlightContext } from './HighlightContext.js';\\n\\nexport default function List({ items, renderItem }) {\\n  const [selectedIndex, setSelectedIndex] = useState(0);\\n  return (\\n    <div className=\\\"List\\\">\\n      {items.map((item, index) => {\\n        const isHighlighted = index === selectedIndex;\\n        return (\\n          <HighlightContext.Provider\\n            key={item.id}\\n            value={isHighlighted}\\n          >\\n            {renderItem(item)}\\n          </HighlightContext.Provider>\\n        );\\n      })}\\n      <hr />\\n      <button onClick={() => {\\n        setSelectedIndex(i =>\\n          (i + 1) % items.length\\n        );\\n      }}>\\n        Next\\n      </button>\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Row.js\",\"children\":\"import { useContext } from 'react';\\nimport { HighlightContext } from './HighlightContext.js';\\n\\nexport default function Row({ title }) {\\n  const isHighlighted = useContext(HighlightContext);\\n  return (\\n    <div className={[\\n      'Row',\\n      isHighlighted ? 'RowHighlighted' : ''\\n    ].join(' ')}>\\n      {title}\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/HighlightContext.js\",\"children\":\"import { createContext } from 'react';\\n\\nexport const HighlightContext = createContext(false);\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/data.js\",\"children\":\"export const products = [\\n  { title: 'Cabbage', id: 1 },\\n  { title: 'Garlic', id: 2 },\\n  { title: 'Apple', id: 3 },\\n];\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".List {\\n  display: flex;\\n  flex-direction: column;\\n  border: 2px solid grey;\\n  padding: 5px;\\n}\\n\\n.Row {\\n  border: 2px dashed black;\\n  padding: 5px;\\n  margin: 5px;\\n}\\n\\n.RowHighlighted {\\n  background: #ffa;\\n}\\n\\nbutton {\\n  height: 40px;\\n  font-size: 20px;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"134\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"/reference/react/useContext#passing-data-deeply-into-the-tree\",\"children\":\"Learn more about passing data through context.\"}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"extracting-logic-into-a-custom-hook\",\"children\":\"Extracting logic into a custom Hook \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Another approach you can try is to extract the “non-visual” logic into your own Hook, and use the information returned by your Hook to decide what to render. For example, you could write a \",[\"$r\",\"code\",null,{\"children\":\"useList\"}],\" custom Hook like this:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function useList(items) {\\n  const [selectedIndex, setSelectedIndex] = useState(0);\\n\\n  function onNext() {\\n    setSelectedIndex(i =>\\n      (i + 1) % items.length\\n    );\\n  }\\n\\n  const selected = items[selectedIndex];\\n  return [selected, onNext];\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"Then you could use it like this:\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2,9,13}\",\"children\":\"export default function App() {\\n  const [selected, onNext] = useList(products);\\n  return (\\n    <div className=\\\"List\\\">\\n      {products.map(product =>\\n        <Row\\n          key={product.id}\\n          title={product.title}\\n          isHighlighted={selected === product}\\n        />\\n      )}\\n      <hr />\\n      <button onClick={onNext}>\\n        Next\\n      </button>\\n    </div>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"The data flow is explicit, but the state is inside the \",[\"$r\",\"code\",null,{\"children\":\"useList\"}],\" custom Hook that you can use from any component:\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import Row from './Row.js';\\nimport useList from './useList.js';\\nimport { products } from './data.js';\\n\\nexport default function App() {\\n  const [selected, onNext] = useList(products);\\n  return (\\n    <div className=\\\"List\\\">\\n      {products.map(product =>\\n        <Row\\n          key={product.id}\\n          title={product.title}\\n          isHighlighted={selected === product}\\n        />\\n      )}\\n      <hr />\\n      <button onClick={onNext}>\\n        Next\\n      </button>\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/useList.js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function useList(items) {\\n  const [selectedIndex, setSelectedIndex] = useState(0);\\n\\n  function onNext() {\\n    setSelectedIndex(i =>\\n      (i + 1) % items.length\\n    );\\n  }\\n\\n  const selected = items[selectedIndex];\\n  return [selected, onNext];\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Row.js\",\"children\":\"export default function Row({ title, isHighlighted }) {\\n  return (\\n    <div className={[\\n      'Row',\\n      isHighlighted ? 'RowHighlighted' : ''\\n    ].join(' ')}>\\n      {title}\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/data.js\",\"children\":\"export const products = [\\n  { title: 'Cabbage', id: 1 },\\n  { title: 'Garlic', id: 2 },\\n  { title: 'Apple', id: 3 },\\n];\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".List {\\n  display: flex;\\n  flex-direction: column;\\n  border: 2px solid grey;\\n  padding: 5px;\\n}\\n\\n.Row {\\n  border: 2px dashed black;\\n  padding: 5px;\\n  margin: 5px;\\n}\\n\\n.RowHighlighted {\\n  background: #ffa;\\n}\\n\\nbutton {\\n  height: 40px;\\n  font-size: 20px;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"last\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"This approach is particularly useful if you want to reuse this logic between different components.\"}]]}]]","meta":{"title":"cloneElement"},"languages":null},"__N_SSG":true}