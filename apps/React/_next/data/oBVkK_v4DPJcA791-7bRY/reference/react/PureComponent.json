{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"Overview\",\"depth\":2},{\"url\":\"#reference\",\"depth\":2,\"text\":\"Reference \"},{\"url\":\"#purecomponent\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"PureComponent\"}],\" \"]},{\"url\":\"#usage\",\"depth\":2,\"text\":\"Usage \"},{\"url\":\"#skipping-unnecessary-re-renders-for-class-components\",\"depth\":3,\"text\":\"Skipping unnecessary re-renders for class components \"},{\"url\":\"#alternatives\",\"depth\":2,\"text\":\"Alternatives \"},{\"url\":\"#migrating-from-a-purecomponent-class-component-to-a-function\",\"depth\":3,\"text\":[\"Migrating from a \",[\"$r\",\"code\",null,{\"children\":\"PureComponent\"}],\" class component to a function \"]}]","content":"[[\"$r\",\"MaxWidth\",\"34\",{\"children\":[[\"$r\",\"Pitfall\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"We recommend defining components as functions instead of classes. \",[\"$r\",\"a\",null,{\"href\":\"#alternatives\",\"children\":\"See how to migrate.\"}]]}]}],\"\\n\",[\"$r\",\"Intro\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"PureComponent\"}],\" is similar to \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Component\",\"children\":[\"$r\",\"code\",null,{\"children\":\"Component\"}]}],\" but it skips re-renders for same props and state. Class components are still supported by React, but we don’t recommend using them in new code.\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"class Greeting extends PureComponent {\\n  render() {\\n    return <h1>Hello, {this.props.name}!</h1>;\\n  }\\n}\\n\"}]}]]}],\"\\n\",[\"$r\",\"InlineToc\",null,{}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"reference\",\"children\":\"Reference \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"purecomponent\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"PureComponent\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"To skip re-rendering a class component for same props and state, extend \",[\"$r\",\"code\",null,{\"children\":\"PureComponent\"}],\" instead of \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Component\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"Component\"}],\":\"]}]]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { PureComponent } from 'react';\\n\\nclass Greeting extends PureComponent {\\n  render() {\\n    return <h1>Hello, {this.props.name}!</h1>;\\n  }\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"PureComponent\"}],\" is a subclass of \",[\"$r\",\"code\",null,{\"children\":\"Component\"}],\" and supports \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Component#reference\",\"children\":[\"all the \",[\"$r\",\"code\",null,{\"children\":\"Component\"}],\" APIs.\"]}],\" Extending \",[\"$r\",\"code\",null,{\"children\":\"PureComponent\"}],\" is equivalent to defining a custom \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Component#shouldcomponentupdate\",\"children\":[\"$r\",\"code\",null,{\"children\":\"shouldComponentUpdate\"}]}],\" method that shallowly compares props and state.\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"#usage\",\"children\":\"See more examples below.\"}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"usage\",\"children\":\"Usage \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"skipping-unnecessary-re-renders-for-class-components\",\"children\":\"Skipping unnecessary re-renders for class components \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"React normally re-renders a component whenever its parent re-renders. As an optimization, you can create a component that React will not re-render when its parent re-renders so long as its new props and state are the same as the old props and state. \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Component\",\"children\":\"Class components\"}],\" can opt into this behavior by extending \",[\"$r\",\"code\",null,{\"children\":\"PureComponent\"}],\":\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{1}\",\"children\":\"class Greeting extends PureComponent {\\n  render() {\\n    return <h1>Hello, {this.props.name}!</h1>;\\n  }\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"A React component should always have \",[\"$r\",\"a\",null,{\"href\":\"/learn/keeping-components-pure\",\"children\":\"pure rendering logic.\"}],\" This means that it must return the same output if its props, state, and context haven’t changed. By using \",[\"$r\",\"code\",null,{\"children\":\"PureComponent\"}],\", you are telling React that your component complies with this requirement, so React doesn’t need to re-render as long as its props and state haven’t changed. However, your component will still re-render if a context that it’s using changes.\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"In this example, notice that the \",[\"$r\",\"code\",null,{\"children\":\"Greeting\"}],\" component re-renders whenever \",[\"$r\",\"code\",null,{\"children\":\"name\"}],\" is changed (because that’s one of its props), but not when \",[\"$r\",\"code\",null,{\"children\":\"address\"}],\" is changed (because it’s not passed to \",[\"$r\",\"code\",null,{\"children\":\"Greeting\"}],\" as a prop):\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { PureComponent, useState } from 'react';\\n\\nclass Greeting extends PureComponent {\\n  render() {\\n    console.log(\\\"Greeting was rendered at\\\", new Date().toLocaleTimeString());\\n    return <h3>Hello{this.props.name && ', '}{this.props.name}!</h3>;\\n  }\\n}\\n\\nexport default function MyApp() {\\n  const [name, setName] = useState('');\\n  const [address, setAddress] = useState('');\\n  return (\\n    <>\\n      <label>\\n        Name{': '}\\n        <input value={name} onChange={e => setName(e.target.value)} />\\n      </label>\\n      <label>\\n        Address{': '}\\n        <input value={address} onChange={e => setAddress(e.target.value)} />\\n      </label>\\n      <Greeting name={name} />\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label {\\n  display: block;\\n  margin-bottom: 16px;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"46\",{\"children\":[\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"We recommend defining components as functions instead of classes. \",[\"$r\",\"a\",null,{\"href\":\"#alternatives\",\"children\":\"See how to migrate.\"}]]}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"alternatives\",\"children\":\"Alternatives \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"migrating-from-a-purecomponent-class-component-to-a-function\",\"children\":[\"Migrating from a \",[\"$r\",\"code\",null,{\"children\":\"PureComponent\"}],\" class component to a function \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"We recommend using function components instead of \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Component\",\"children\":\"class components\"}],\" in new code. If you have some existing class components using \",[\"$r\",\"code\",null,{\"children\":\"PureComponent\"}],\", here is how you can convert them. This is the original code:\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { PureComponent, useState } from 'react';\\n\\nclass Greeting extends PureComponent {\\n  render() {\\n    console.log(\\\"Greeting was rendered at\\\", new Date().toLocaleTimeString());\\n    return <h3>Hello{this.props.name && ', '}{this.props.name}!</h3>;\\n  }\\n}\\n\\nexport default function MyApp() {\\n  const [name, setName] = useState('');\\n  const [address, setAddress] = useState('');\\n  return (\\n    <>\\n      <label>\\n        Name{': '}\\n        <input value={name} onChange={e => setName(e.target.value)} />\\n      </label>\\n      <label>\\n        Address{': '}\\n        <input value={address} onChange={e => setAddress(e.target.value)} />\\n      </label>\\n      <Greeting name={name} />\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label {\\n  display: block;\\n  margin-bottom: 16px;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"50\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"When you \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Component#alternatives\",\"children\":\"convert this component from a class to a function,\"}],\" wrap it in \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/memo\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"memo\"}],\":\"]}]]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { memo, useState } from 'react';\\n\\nconst Greeting = memo(function Greeting({ name }) {\\n  console.log(\\\"Greeting was rendered at\\\", new Date().toLocaleTimeString());\\n  return <h3>Hello{name && ', '}{name}!</h3>;\\n});\\n\\nexport default function MyApp() {\\n  const [name, setName] = useState('');\\n  const [address, setAddress] = useState('');\\n  return (\\n    <>\\n      <label>\\n        Name{': '}\\n        <input value={name} onChange={e => setName(e.target.value)} />\\n      </label>\\n      <label>\\n        Address{': '}\\n        <input value={address} onChange={e => setAddress(e.target.value)} />\\n      </label>\\n      <Greeting name={name} />\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label {\\n  display: block;\\n  margin-bottom: 16px;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"last\",{\"children\":[\"\\n\",[\"$r\",\"Note\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"Unlike \",[\"$r\",\"code\",null,{\"children\":\"PureComponent\"}],\", \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/memo\",\"children\":[\"$r\",\"code\",null,{\"children\":\"memo\"}]}],\" does not compare the new and the old state. In function components, calling the \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useState#setstate\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"set\"}],\" function\"]}],\" with the same state \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/memo#updating-a-memoized-component-using-state\",\"children\":\"already prevents re-renders by default,\"}],\" even without \",[\"$r\",\"code\",null,{\"children\":\"memo\"}],\".\"]}]}]]}]]","meta":{"title":"PureComponent"},"languages":null},"__N_SSG":true}