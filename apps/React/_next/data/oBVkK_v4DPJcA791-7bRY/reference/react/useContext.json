{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"Overview\",\"depth\":2},{\"url\":\"#reference\",\"depth\":2,\"text\":\"Reference \"},{\"url\":\"#usecontext\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"useContext(SomeContext)\"}],\" \"]},{\"url\":\"#usage\",\"depth\":2,\"text\":\"Usage \"},{\"url\":\"#passing-data-deeply-into-the-tree\",\"depth\":3,\"text\":\"Passing data deeply into the tree \"},{\"url\":\"#updating-data-passed-via-context\",\"depth\":3,\"text\":\"Updating data passed via context \"},{\"url\":\"#specifying-a-fallback-default-value\",\"depth\":3,\"text\":\"Specifying a fallback default value \"},{\"url\":\"#overriding-context-for-a-part-of-the-tree\",\"depth\":3,\"text\":\"Overriding context for a part of the tree \"},{\"url\":\"#optimizing-re-renders-when-passing-objects-and-functions\",\"depth\":3,\"text\":\"Optimizing re-renders when passing objects and functions \"},{\"url\":\"#troubleshooting\",\"depth\":2,\"text\":\"Troubleshooting \"},{\"url\":\"#my-component-doesnt-see-the-value-from-my-provider\",\"depth\":3,\"text\":\"My component doesn’t see the value from my provider \"},{\"url\":\"#i-am-always-getting-undefined-from-my-context-although-the-default-value-is-different\",\"depth\":3,\"text\":[\"I am always getting \",[\"$r\",\"code\",null,{\"children\":\"undefined\"}],\" from my context although the default value is different \"]}]","content":"[[\"$r\",\"MaxWidth\",\"48\",{\"children\":[[\"$r\",\"Intro\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useContext\"}],\" is a React Hook that lets you read and subscribe to \",[\"$r\",\"a\",null,{\"href\":\"/learn/passing-data-deeply-with-context\",\"children\":\"context\"}],\" from your component.\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const value = useContext(SomeContext)\\n\"}]}]]}],\"\\n\",[\"$r\",\"InlineToc\",null,{}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"reference\",\"children\":\"Reference \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"usecontext\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"useContext(SomeContext)\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Call \",[\"$r\",\"code\",null,{\"children\":\"useContext\"}],\" at the top level of your component to read and subscribe to \",[\"$r\",\"a\",null,{\"href\":\"/learn/passing-data-deeply-with-context\",\"children\":\"context.\"}]]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useContext } from 'react';\\n\\nfunction MyComponent() {\\n  const theme = useContext(ThemeContext);\\n  // ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"#usage\",\"children\":\"See more examples below.\"}]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"parameters\",\"children\":\"Parameters \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"SomeContext\"}],\": The context that you’ve previously created with \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/createContext\",\"children\":[\"$r\",\"code\",null,{\"children\":\"createContext\"}]}],\". The context itself does not hold the information, it only represents the kind of information you can provide or read from components.\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"returns\",\"children\":\"Returns \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useContext\"}],\" returns the context value for the calling component. It is determined as the \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" passed to the closest \",[\"$r\",\"code\",null,{\"children\":\"SomeContext.Provider\"}],\" above the calling component in the tree. If there is no such provider, then the returned value will be the \",[\"$r\",\"code\",null,{\"children\":\"defaultValue\"}],\" you have passed to \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/createContext\",\"children\":[\"$r\",\"code\",null,{\"children\":\"createContext\"}]}],\" for that context. The returned value is always up-to-date. React automatically re-renders components that read some context if it changes.\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"caveats\",\"children\":\"Caveats \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useContext()\"}],\" call in a component is not affected by providers returned from the \",[\"$r\",\"em\",null,{\"children\":\"same\"}],\" component. The corresponding \",[\"$r\",\"code\",null,{\"children\":\"<Context.Provider>\"}],\" \",[\"$r\",\"strong\",null,{\"children\":[\"needs to be \",[\"$r\",\"em\",null,{\"children\":\"above\"}]]}],\" the component doing the \",[\"$r\",\"code\",null,{\"children\":\"useContext()\"}],\" call.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"React \",[\"$r\",\"strong\",null,{\"children\":\"automatically re-renders\"}],\" all the children that use a particular context starting from the provider that receives a different \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\". The previous and the next values are compared with the \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"Object.is\"}]}],\" comparison. Skipping re-renders with \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/memo\",\"children\":[\"$r\",\"code\",null,{\"children\":\"memo\"}]}],\" does not prevent the children receiving fresh context values.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"If your build system produces duplicates modules in the output (which can happen with symlinks), this can break context. Passing something via context only works if \",[\"$r\",\"code\",null,{\"children\":\"SomeContext\"}],\" that you use to provide context and \",[\"$r\",\"code\",null,{\"children\":\"SomeContext\"}],\" that you use to read it are \",[\"$r\",\"strong\",null,{\"children\":[[\"$r\",\"em\",null,{\"children\":\"exactly\"}],\" the same object\"]}],\", as determined by a \",[\"$r\",\"code\",null,{\"children\":\"===\"}],\" comparison.\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"usage\",\"children\":\"Usage \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"passing-data-deeply-into-the-tree\",\"children\":\"Passing data deeply into the tree \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Call \",[\"$r\",\"code\",null,{\"children\":\"useContext\"}],\" at the top level of your component to read and subscribe to \",[\"$r\",\"a\",null,{\"href\":\"/learn/passing-data-deeply-with-context\",\"children\":\"context.\"}]]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[2, 4, \\\"theme\\\"], [1, 4, \\\"ThemeContext\\\"]]\",\"children\":\"import { useContext } from 'react';\\n\\nfunction Button() {\\n  const theme = useContext(ThemeContext);\\n  // ... \\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useContext\"}],\" returns the \",[\"$r\",\"CodeStep\",null,{\"step\":2,\"children\":\"context value\"}],\" for the \",[\"$r\",\"CodeStep\",null,{\"step\":1,\"children\":\"context\"}],\" you passed. To determine the context value, React searches the component tree and finds \",[\"$r\",\"strong\",null,{\"children\":\"the closest context provider above\"}],\" for that particular context.\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"To pass context to a \",[\"$r\",\"code\",null,{\"children\":\"Button\"}],\", wrap it or one of its parent components into the corresponding context provider:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[1, 3, \\\"ThemeContext\\\"], [2, 3, \\\"\\\\\\\"dark\\\\\\\"\\\"], [1, 5, \\\"ThemeContext\\\"]]\",\"children\":\"function MyPage() {\\n  return (\\n    <ThemeContext.Provider value=\\\"dark\\\">\\n      <Form />\\n    </ThemeContext.Provider>\\n  );\\n}\\n\\nfunction Form() {\\n  // ... renders buttons inside ...\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"It doesn’t matter how many layers of components there are between the provider and the \",[\"$r\",\"code\",null,{\"children\":\"Button\"}],\". When a \",[\"$r\",\"code\",null,{\"children\":\"Button\"}],\" \",[\"$r\",\"em\",null,{\"children\":\"anywhere\"}],\" inside of \",[\"$r\",\"code\",null,{\"children\":\"Form\"}],\" calls \",[\"$r\",\"code\",null,{\"children\":\"useContext(ThemeContext)\"}],\", it will receive \",[\"$r\",\"code\",null,{\"children\":\"\\\"dark\\\"\"}],\" as the value.\"]}],\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useContext()\"}],\" always looks for the closest provider \",[\"$r\",\"em\",null,{\"children\":\"above\"}],\" the component that calls it. It searches upwards and \",[\"$r\",\"strong\",null,{\"children\":\"does not\"}],\" consider providers in the component from which you’re calling \",[\"$r\",\"code\",null,{\"children\":\"useContext()\"}],\".\"]}]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { createContext, useContext } from 'react';\\n\\nconst ThemeContext = createContext(null);\\n\\nexport default function MyApp() {\\n  return (\\n    <ThemeContext.Provider value=\\\"dark\\\">\\n      <Form />\\n    </ThemeContext.Provider>\\n  )\\n}\\n\\nfunction Form() {\\n  return (\\n    <Panel title=\\\"Welcome\\\">\\n      <Button>Sign up</Button>\\n      <Button>Log in</Button>\\n    </Panel>\\n  );\\n}\\n\\nfunction Panel({ title, children }) {\\n  const theme = useContext(ThemeContext);\\n  const className = 'panel-' + theme;\\n  return (\\n    <section className={className}>\\n      <h1>{title}</h1>\\n      {children}\\n    </section>\\n  )\\n}\\n\\nfunction Button({ children }) {\\n  const theme = useContext(ThemeContext);\\n  const className = 'button-' + theme;\\n  return (\\n    <button className={className}>\\n      {children}\\n    </button>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".panel-light,\\n.panel-dark {\\n  border: 1px solid black;\\n  border-radius: 4px;\\n  padding: 20px;\\n}\\n.panel-light {\\n  color: #222;\\n  background: #fff;\\n}\\n\\n.panel-dark {\\n  color: #fff;\\n  background: rgb(23, 32, 42);\\n}\\n\\n.button-light,\\n.button-dark {\\n  border: 1px solid #777;\\n  padding: 5px;\\n  margin-right: 10px;\\n  margin-top: 10px;\\n}\\n\\n.button-dark {\\n  background: #222;\\n  color: #fff;\\n}\\n\\n.button-light {\\n  background: #fff;\\n  color: #222;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"60\",{\"children\":[\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"updating-data-passed-via-context\",\"children\":\"Updating data passed via context \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Often, you’ll want the context to change over time. To update context, combine it with \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useState\",\"children\":\"state.\"}],\" Declare a state variable in the parent component, and pass the current state down as the \",[\"$r\",\"CodeStep\",null,{\"step\":2,\"children\":\"context value\"}],\" to the provider.\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2} [[1, 4, \\\"ThemeContext\\\"], [2, 4, \\\"theme\\\"], [1, 11, \\\"ThemeContext\\\"]]\",\"children\":\"function MyPage() {\\n  const [theme, setTheme] = useState('dark');\\n  return (\\n    <ThemeContext.Provider value={theme}>\\n      <Form />\\n      <Button onClick={() => {\\n        setTheme('light');\\n      }}>\\n        Switch to light theme\\n      </Button>\\n    </ThemeContext.Provider>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Now any \",[\"$r\",\"code\",null,{\"children\":\"Button\"}],\" inside of the provider will receive the current \",[\"$r\",\"code\",null,{\"children\":\"theme\"}],\" value. If you call \",[\"$r\",\"code\",null,{\"children\":\"setTheme\"}],\" to update the \",[\"$r\",\"code\",null,{\"children\":\"theme\"}],\" value that you pass to the provider, all \",[\"$r\",\"code\",null,{\"children\":\"Button\"}],\" components will re-render with the new \",[\"$r\",\"code\",null,{\"children\":\"'light'\"}],\" value.\"]}],\"\\n\"]}],[\"$r\",\"Recipes\",null,{\"titleText\":\"Examples of updating context\",\"titleId\":\"examples-basic\",\"children\":[[\"$r\",\"h4\",null,{\"id\":\"updating-a-value-via-context\",\"children\":\"Updating a value via context \"}],[\"$r\",\"p\",null,{\"children\":[\"In this example, the \",[\"$r\",\"code\",null,{\"children\":\"MyApp\"}],\" component holds a state variable which is then passed to the \",[\"$r\",\"code\",null,{\"children\":\"ThemeContext\"}],\" provider. Checking the “Dark mode” checkbox updates the state. Changing the provided value re-renders all the components using that context.\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { createContext, useContext, useState } from 'react';\\n\\nconst ThemeContext = createContext(null);\\n\\nexport default function MyApp() {\\n  const [theme, setTheme] = useState('light');\\n  return (\\n    <ThemeContext.Provider value={theme}>\\n      <Form />\\n      <label>\\n        <input\\n          type=\\\"checkbox\\\"\\n          checked={theme === 'dark'}\\n          onChange={(e) => {\\n            setTheme(e.target.checked ? 'dark' : 'light')\\n          }}\\n        />\\n        Use dark mode\\n      </label>\\n    </ThemeContext.Provider>\\n  )\\n}\\n\\nfunction Form({ children }) {\\n  return (\\n    <Panel title=\\\"Welcome\\\">\\n      <Button>Sign up</Button>\\n      <Button>Log in</Button>\\n    </Panel>\\n  );\\n}\\n\\nfunction Panel({ title, children }) {\\n  const theme = useContext(ThemeContext);\\n  const className = 'panel-' + theme;\\n  return (\\n    <section className={className}>\\n      <h1>{title}</h1>\\n      {children}\\n    </section>\\n  )\\n}\\n\\nfunction Button({ children }) {\\n  const theme = useContext(ThemeContext);\\n  const className = 'button-' + theme;\\n  return (\\n    <button className={className}>\\n      {children}\\n    </button>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".panel-light,\\n.panel-dark {\\n  border: 1px solid black;\\n  border-radius: 4px;\\n  padding: 20px;\\n  margin-bottom: 10px;\\n}\\n.panel-light {\\n  color: #222;\\n  background: #fff;\\n}\\n\\n.panel-dark {\\n  color: #fff;\\n  background: rgb(23, 32, 42);\\n}\\n\\n.button-light,\\n.button-dark {\\n  border: 1px solid #777;\\n  padding: 5px;\\n  margin-right: 10px;\\n  margin-top: 10px;\\n}\\n\\n.button-dark {\\n  background: #222;\\n  color: #fff;\\n}\\n\\n.button-light {\\n  background: #fff;\\n  color: #222;\\n}\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":[\"Note that \",[\"$r\",\"code\",null,{\"children\":\"value=\\\"dark\\\"\"}],\" passes the \",[\"$r\",\"code\",null,{\"children\":\"\\\"dark\\\"\"}],\" string, but \",[\"$r\",\"code\",null,{\"children\":\"value={theme}\"}],\" passes the value of the JavaScript \",[\"$r\",\"code\",null,{\"children\":\"theme\"}],\" variable with \",[\"$r\",\"a\",null,{\"href\":\"/learn/javascript-in-jsx-with-curly-braces\",\"children\":\"JSX curly braces.\"}],\" Curly braces also let you pass context values that aren’t strings.\"]}],[\"$r\",\"Solution\",null,{}],[\"$r\",\"h4\",null,{\"id\":\"updating-an-object-via-context\",\"children\":\"Updating an object via context \"}],[\"$r\",\"p\",null,{\"children\":[\"In this example, there is a \",[\"$r\",\"code\",null,{\"children\":\"currentUser\"}],\" state variable which holds an object. You combine \",[\"$r\",\"code\",null,{\"children\":\"{ currentUser, setCurrentUser }\"}],\" into a single object and pass it down through the context inside the \",[\"$r\",\"code\",null,{\"children\":\"value={}\"}],\". This lets any component below, such as \",[\"$r\",\"code\",null,{\"children\":\"LoginButton\"}],\", read both \",[\"$r\",\"code\",null,{\"children\":\"currentUser\"}],\" and \",[\"$r\",\"code\",null,{\"children\":\"setCurrentUser\"}],\", and then call \",[\"$r\",\"code\",null,{\"children\":\"setCurrentUser\"}],\" when needed.\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { createContext, useContext, useState } from 'react';\\n\\nconst CurrentUserContext = createContext(null);\\n\\nexport default function MyApp() {\\n  const [currentUser, setCurrentUser] = useState(null);\\n  return (\\n    <CurrentUserContext.Provider\\n      value={{\\n        currentUser,\\n        setCurrentUser\\n      }}\\n    >\\n      <Form />\\n    </CurrentUserContext.Provider>\\n  );\\n}\\n\\nfunction Form({ children }) {\\n  return (\\n    <Panel title=\\\"Welcome\\\">\\n      <LoginButton />\\n    </Panel>\\n  );\\n}\\n\\nfunction LoginButton() {\\n  const {\\n    currentUser,\\n    setCurrentUser\\n  } = useContext(CurrentUserContext);\\n\\n  if (currentUser !== null) {\\n    return <p>You logged in as {currentUser.name}.</p>;\\n  }\\n\\n  return (\\n    <Button onClick={() => {\\n      setCurrentUser({ name: 'Advika' })\\n    }}>Log in as Advika</Button>\\n  );\\n}\\n\\nfunction Panel({ title, children }) {\\n  return (\\n    <section className=\\\"panel\\\">\\n      <h1>{title}</h1>\\n      {children}\\n    </section>\\n  )\\n}\\n\\nfunction Button({ children, onClick }) {\\n  return (\\n    <button className=\\\"button\\\" onClick={onClick}>\\n      {children}\\n    </button>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label {\\n  display: block;\\n}\\n\\n.panel {\\n  border: 1px solid black;\\n  border-radius: 4px;\\n  padding: 20px;\\n  margin-bottom: 10px;\\n}\\n\\n.button {\\n  border: 1px solid #777;\\n  padding: 5px;\\n  margin-right: 10px;\\n  margin-top: 10px;\\n}\\n\"}]}]]}],[\"$r\",\"Solution\",null,{}],[\"$r\",\"h4\",null,{\"id\":\"multiple-contexts\",\"children\":\"Multiple contexts \"}],[\"$r\",\"p\",null,{\"children\":[\"In this example, there are two independent contexts. \",[\"$r\",\"code\",null,{\"children\":\"ThemeContext\"}],\" provides the current theme, which is a string, while \",[\"$r\",\"code\",null,{\"children\":\"CurrentUserContext\"}],\" holds the object representing the current user.\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { createContext, useContext, useState } from 'react';\\n\\nconst ThemeContext = createContext(null);\\nconst CurrentUserContext = createContext(null);\\n\\nexport default function MyApp() {\\n  const [theme, setTheme] = useState('light');\\n  const [currentUser, setCurrentUser] = useState(null);\\n  return (\\n    <ThemeContext.Provider value={theme}>\\n      <CurrentUserContext.Provider\\n        value={{\\n          currentUser,\\n          setCurrentUser\\n        }}\\n      >\\n        <WelcomePanel />\\n        <label>\\n          <input\\n            type=\\\"checkbox\\\"\\n            checked={theme === 'dark'}\\n            onChange={(e) => {\\n              setTheme(e.target.checked ? 'dark' : 'light')\\n            }}\\n          />\\n          Use dark mode\\n        </label>\\n      </CurrentUserContext.Provider>\\n    </ThemeContext.Provider>\\n  )\\n}\\n\\nfunction WelcomePanel({ children }) {\\n  const {currentUser} = useContext(CurrentUserContext);\\n  return (\\n    <Panel title=\\\"Welcome\\\">\\n      {currentUser !== null ?\\n        <Greeting /> :\\n        <LoginForm />\\n      }\\n    </Panel>\\n  );\\n}\\n\\nfunction Greeting() {\\n  const {currentUser} = useContext(CurrentUserContext);\\n  return (\\n    <p>You logged in as {currentUser.name}.</p>\\n  )\\n}\\n\\nfunction LoginForm() {\\n  const {setCurrentUser} = useContext(CurrentUserContext);\\n  const [firstName, setFirstName] = useState('');\\n  const [lastName, setLastName] = useState('');\\n  const canLogin = firstName.trim() !== '' && lastName.trim() !== '';\\n  return (\\n    <>\\n      <label>\\n        First name{': '}\\n        <input\\n          required\\n          value={firstName}\\n          onChange={e => setFirstName(e.target.value)}\\n        />\\n      </label>\\n      <label>\\n        Last name{': '}\\n        <input\\n        required\\n          value={lastName}\\n          onChange={e => setLastName(e.target.value)}\\n        />\\n      </label>\\n      <Button\\n        disabled={!canLogin}\\n        onClick={() => {\\n          setCurrentUser({\\n            name: firstName + ' ' + lastName\\n          });\\n        }}\\n      >\\n        Log in\\n      </Button>\\n      {!canLogin && <i>Fill in both fields.</i>}\\n    </>\\n  );\\n}\\n\\nfunction Panel({ title, children }) {\\n  const theme = useContext(ThemeContext);\\n  const className = 'panel-' + theme;\\n  return (\\n    <section className={className}>\\n      <h1>{title}</h1>\\n      {children}\\n    </section>\\n  )\\n}\\n\\nfunction Button({ children, disabled, onClick }) {\\n  const theme = useContext(ThemeContext);\\n  const className = 'button-' + theme;\\n  return (\\n    <button\\n      className={className}\\n      disabled={disabled}\\n      onClick={onClick}\\n    >\\n      {children}\\n    </button>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label {\\n  display: block;\\n}\\n\\n.panel-light,\\n.panel-dark {\\n  border: 1px solid black;\\n  border-radius: 4px;\\n  padding: 20px;\\n  margin-bottom: 10px;\\n}\\n.panel-light {\\n  color: #222;\\n  background: #fff;\\n}\\n\\n.panel-dark {\\n  color: #fff;\\n  background: rgb(23, 32, 42);\\n}\\n\\n.button-light,\\n.button-dark {\\n  border: 1px solid #777;\\n  padding: 5px;\\n  margin-right: 10px;\\n  margin-top: 10px;\\n}\\n\\n.button-dark {\\n  background: #222;\\n  color: #fff;\\n}\\n\\n.button-light {\\n  background: #fff;\\n  color: #222;\\n}\\n\"}]}]]}],[\"$r\",\"Solution\",null,{}],[\"$r\",\"h4\",null,{\"id\":\"extracting-providers-to-a-component\",\"children\":\"Extracting providers to a component \"}],[\"$r\",\"p\",null,{\"children\":[\"As your app grows, it is expected that you’ll have a “pyramid” of contexts closer to the root of your app. There is nothing wrong with that. However, if you dislike the nesting aesthetically, you can extract the providers into a single component. In this example, \",[\"$r\",\"code\",null,{\"children\":\"MyProviders\"}],\" hides the “plumbing” and renders the children passed to it inside the necessary providers. Note that the \",[\"$r\",\"code\",null,{\"children\":\"theme\"}],\" and \",[\"$r\",\"code\",null,{\"children\":\"setTheme\"}],\" state is needed in \",[\"$r\",\"code\",null,{\"children\":\"MyApp\"}],\" itself, so \",[\"$r\",\"code\",null,{\"children\":\"MyApp\"}],\" still owns that piece of the state.\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { createContext, useContext, useState } from 'react';\\n\\nconst ThemeContext = createContext(null);\\nconst CurrentUserContext = createContext(null);\\n\\nexport default function MyApp() {\\n  const [theme, setTheme] = useState('light');\\n  return (\\n    <MyProviders theme={theme} setTheme={setTheme}>\\n      <WelcomePanel />\\n      <label>\\n        <input\\n          type=\\\"checkbox\\\"\\n          checked={theme === 'dark'}\\n          onChange={(e) => {\\n            setTheme(e.target.checked ? 'dark' : 'light')\\n          }}\\n        />\\n        Use dark mode\\n      </label>\\n    </MyProviders>\\n  );\\n}\\n\\nfunction MyProviders({ children, theme, setTheme }) {\\n  const [currentUser, setCurrentUser] = useState(null);\\n  return (\\n    <ThemeContext.Provider value={theme}>\\n      <CurrentUserContext.Provider\\n        value={{\\n          currentUser,\\n          setCurrentUser\\n        }}\\n      >\\n        {children}\\n      </CurrentUserContext.Provider>\\n    </ThemeContext.Provider>\\n  );\\n}\\n\\nfunction WelcomePanel({ children }) {\\n  const {currentUser} = useContext(CurrentUserContext);\\n  return (\\n    <Panel title=\\\"Welcome\\\">\\n      {currentUser !== null ?\\n        <Greeting /> :\\n        <LoginForm />\\n      }\\n    </Panel>\\n  );\\n}\\n\\nfunction Greeting() {\\n  const {currentUser} = useContext(CurrentUserContext);\\n  return (\\n    <p>You logged in as {currentUser.name}.</p>\\n  )\\n}\\n\\nfunction LoginForm() {\\n  const {setCurrentUser} = useContext(CurrentUserContext);\\n  const [firstName, setFirstName] = useState('');\\n  const [lastName, setLastName] = useState('');\\n  const canLogin = firstName !== '' && lastName !== '';\\n  return (\\n    <>\\n      <label>\\n        First name{': '}\\n        <input\\n          required\\n          value={firstName}\\n          onChange={e => setFirstName(e.target.value)}\\n        />\\n      </label>\\n      <label>\\n        Last name{': '}\\n        <input\\n        required\\n          value={lastName}\\n          onChange={e => setLastName(e.target.value)}\\n        />\\n      </label>\\n      <Button\\n        disabled={!canLogin}\\n        onClick={() => {\\n          setCurrentUser({\\n            name: firstName + ' ' + lastName\\n          });\\n        }}\\n      >\\n        Log in\\n      </Button>\\n      {!canLogin && <i>Fill in both fields.</i>}\\n    </>\\n  );\\n}\\n\\nfunction Panel({ title, children }) {\\n  const theme = useContext(ThemeContext);\\n  const className = 'panel-' + theme;\\n  return (\\n    <section className={className}>\\n      <h1>{title}</h1>\\n      {children}\\n    </section>\\n  )\\n}\\n\\nfunction Button({ children, disabled, onClick }) {\\n  const theme = useContext(ThemeContext);\\n  const className = 'button-' + theme;\\n  return (\\n    <button\\n      className={className}\\n      disabled={disabled}\\n      onClick={onClick}\\n    >\\n      {children}\\n    </button>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label {\\n  display: block;\\n}\\n\\n.panel-light,\\n.panel-dark {\\n  border: 1px solid black;\\n  border-radius: 4px;\\n  padding: 20px;\\n  margin-bottom: 10px;\\n}\\n.panel-light {\\n  color: #222;\\n  background: #fff;\\n}\\n\\n.panel-dark {\\n  color: #fff;\\n  background: rgb(23, 32, 42);\\n}\\n\\n.button-light,\\n.button-dark {\\n  border: 1px solid #777;\\n  padding: 5px;\\n  margin-right: 10px;\\n  margin-top: 10px;\\n}\\n\\n.button-dark {\\n  background: #222;\\n  color: #fff;\\n}\\n\\n.button-light {\\n  background: #fff;\\n  color: #222;\\n}\\n\"}]}]]}],[\"$r\",\"Solution\",null,{}],[\"$r\",\"h4\",null,{\"id\":\"scaling-up-with-context-and-a-reducer\",\"children\":\"Scaling up with context and a reducer \"}],[\"$r\",\"p\",null,{\"children\":[\"In larger apps, it is common to combine context with a \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useReducer\",\"children\":\"reducer\"}],\" to extract the logic related to some state out of components. In this example, all the “wiring” is hidden in the \",[\"$r\",\"code\",null,{\"children\":\"TasksContext.js\"}],\", which contains a reducer and two separate contexts.\"]}],[\"$r\",\"p\",null,{\"children\":[\"Read a \",[\"$r\",\"a\",null,{\"href\":\"/learn/scaling-up-with-reducer-and-context\",\"children\":\"full walkthrough\"}],\" of this example.\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import AddTask from './AddTask.js';\\nimport TaskList from './TaskList.js';\\nimport { TasksProvider } from './TasksContext.js';\\n\\nexport default function TaskApp() {\\n  return (\\n    <TasksProvider>\\n      <h1>Day off in Kyoto</h1>\\n      <AddTask />\\n      <TaskList />\\n    </TasksProvider>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TasksContext.js\",\"children\":\"import { createContext, useContext, useReducer } from 'react';\\n\\nconst TasksContext = createContext(null);\\n\\nconst TasksDispatchContext = createContext(null);\\n\\nexport function TasksProvider({ children }) {\\n  const [tasks, dispatch] = useReducer(\\n    tasksReducer,\\n    initialTasks\\n  );\\n\\n  return (\\n    <TasksContext.Provider value={tasks}>\\n      <TasksDispatchContext.Provider value={dispatch}>\\n        {children}\\n      </TasksDispatchContext.Provider>\\n    </TasksContext.Provider>\\n  );\\n}\\n\\nexport function useTasks() {\\n  return useContext(TasksContext);\\n}\\n\\nexport function useTasksDispatch() {\\n  return useContext(TasksDispatchContext);\\n}\\n\\nfunction tasksReducer(tasks, action) {\\n  switch (action.type) {\\n    case 'added': {\\n      return [...tasks, {\\n        id: action.id,\\n        text: action.text,\\n        done: false\\n      }];\\n    }\\n    case 'changed': {\\n      return tasks.map(t => {\\n        if (t.id === action.task.id) {\\n          return action.task;\\n        } else {\\n          return t;\\n        }\\n      });\\n    }\\n    case 'deleted': {\\n      return tasks.filter(t => t.id !== action.id);\\n    }\\n    default: {\\n      throw Error('Unknown action: ' + action.type);\\n    }\\n  }\\n}\\n\\nconst initialTasks = [\\n  { id: 0, text: 'Philosopher’s Path', done: true },\\n  { id: 1, text: 'Visit the temple', done: false },\\n  { id: 2, text: 'Drink matcha', done: false }\\n];\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/AddTask.js\",\"children\":\"import { useState, useContext } from 'react';\\nimport { useTasksDispatch } from './TasksContext.js';\\n\\nexport default function AddTask() {\\n  const [text, setText] = useState('');\\n  const dispatch = useTasksDispatch();\\n  return (\\n    <>\\n      <input\\n        placeholder=\\\"Add task\\\"\\n        value={text}\\n        onChange={e => setText(e.target.value)}\\n      />\\n      <button onClick={() => {\\n        setText('');\\n        dispatch({\\n          type: 'added',\\n          id: nextId++,\\n          text: text,\\n        }); \\n      }}>Add</button>\\n    </>\\n  );\\n}\\n\\nlet nextId = 3;\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TaskList.js\",\"children\":\"import { useState, useContext } from 'react';\\nimport { useTasks, useTasksDispatch } from './TasksContext.js';\\n\\nexport default function TaskList() {\\n  const tasks = useTasks();\\n  return (\\n    <ul>\\n      {tasks.map(task => (\\n        <li key={task.id}>\\n          <Task task={task} />\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\\nfunction Task({ task }) {\\n  const [isEditing, setIsEditing] = useState(false);\\n  const dispatch = useTasksDispatch();\\n  let taskContent;\\n  if (isEditing) {\\n    taskContent = (\\n      <>\\n        <input\\n          value={task.text}\\n          onChange={e => {\\n            dispatch({\\n              type: 'changed',\\n              task: {\\n                ...task,\\n                text: e.target.value\\n              }\\n            });\\n          }} />\\n        <button onClick={() => setIsEditing(false)}>\\n          Save\\n        </button>\\n      </>\\n    );\\n  } else {\\n    taskContent = (\\n      <>\\n        {task.text}\\n        <button onClick={() => setIsEditing(true)}>\\n          Edit\\n        </button>\\n      </>\\n    );\\n  }\\n  return (\\n    <label>\\n      <input\\n        type=\\\"checkbox\\\"\\n        checked={task.done}\\n        onChange={e => {\\n          dispatch({\\n            type: 'changed',\\n            task: {\\n              ...task,\\n              done: e.target.checked\\n            }\\n          });\\n        }}\\n      />\\n      {taskContent}\\n      <button onClick={() => {\\n        dispatch({\\n          type: 'deleted',\\n          id: task.id\\n        });\\n      }}>\\n        Delete\\n      </button>\\n    </label>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin: 5px; }\\nli { list-style-type: none; }\\nul, li { margin: 0; padding: 0; }\\n\"}]}]]}],[\"$r\",\"Solution\",null,{}]]}],[\"$r\",\"MaxWidth\",\"80\",{\"children\":[\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"specifying-a-fallback-default-value\",\"children\":\"Specifying a fallback default value \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"If React can’t find any providers of that particular \",[\"$r\",\"CodeStep\",null,{\"step\":1,\"children\":\"context\"}],\" in the parent tree, the context value returned by \",[\"$r\",\"code\",null,{\"children\":\"useContext()\"}],\" will be equal to the \",[\"$r\",\"CodeStep\",null,{\"step\":3,\"children\":\"default value\"}],\" that you specified when you \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/createContext\",\"children\":\"created that context\"}],\":\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[1, 1, \\\"ThemeContext\\\"], [3, 1, \\\"null\\\"]]\",\"children\":\"const ThemeContext = createContext(null);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"The default value \",[\"$r\",\"strong\",null,{\"children\":\"never changes\"}],\". If you want to update context, use it with state as \",[\"$r\",\"a\",null,{\"href\":\"#updating-data-passed-via-context\",\"children\":\"described above.\"}]]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Often, instead of \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\", there is some more meaningful value you can use as a default, for example:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[1, 1, \\\"ThemeContext\\\"], [3, 1, \\\"light\\\"]]\",\"children\":\"const ThemeContext = createContext('light');\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"This way, if you accidentally render some component without a corresponding provider, it won’t break. This also helps your components work well in a test environment without setting up a lot of providers in the tests.\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"In the example below, the “Toggle theme” button is always light because it’s \",[\"$r\",\"strong\",null,{\"children\":\"outside any theme context provider\"}],\" and the default context theme value is \",[\"$r\",\"code\",null,{\"children\":\"'light'\"}],\". Try editing the default theme to be \",[\"$r\",\"code\",null,{\"children\":\"'dark'\"}],\".\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { createContext, useContext, useState } from 'react';\\n\\nconst ThemeContext = createContext('light');\\n\\nexport default function MyApp() {\\n  const [theme, setTheme] = useState('light');\\n  return (\\n    <>\\n      <ThemeContext.Provider value={theme}>\\n        <Form />\\n      </ThemeContext.Provider>\\n      <Button onClick={() => {\\n        setTheme(theme === 'dark' ? 'light' : 'dark');\\n      }}>\\n        Toggle theme\\n      </Button>\\n    </>\\n  )\\n}\\n\\nfunction Form({ children }) {\\n  return (\\n    <Panel title=\\\"Welcome\\\">\\n      <Button>Sign up</Button>\\n      <Button>Log in</Button>\\n    </Panel>\\n  );\\n}\\n\\nfunction Panel({ title, children }) {\\n  const theme = useContext(ThemeContext);\\n  const className = 'panel-' + theme;\\n  return (\\n    <section className={className}>\\n      <h1>{title}</h1>\\n      {children}\\n    </section>\\n  )\\n}\\n\\nfunction Button({ children, onClick }) {\\n  const theme = useContext(ThemeContext);\\n  const className = 'button-' + theme;\\n  return (\\n    <button className={className} onClick={onClick}>\\n      {children}\\n    </button>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".panel-light,\\n.panel-dark {\\n  border: 1px solid black;\\n  border-radius: 4px;\\n  padding: 20px;\\n  margin-bottom: 10px;\\n}\\n.panel-light {\\n  color: #222;\\n  background: #fff;\\n}\\n\\n.panel-dark {\\n  color: #fff;\\n  background: rgb(23, 32, 42);\\n}\\n\\n.button-light,\\n.button-dark {\\n  border: 1px solid #777;\\n  padding: 5px;\\n  margin-right: 10px;\\n  margin-top: 10px;\\n}\\n\\n.button-dark {\\n  background: #222;\\n  color: #fff;\\n}\\n\\n.button-light {\\n  background: #fff;\\n  color: #222;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"92\",{\"children\":[\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"overriding-context-for-a-part-of-the-tree\",\"children\":\"Overriding context for a part of the tree \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"You can override the context for a part of the tree by wrapping that part in a provider with a different value.\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3,5}\",\"children\":\"<ThemeContext.Provider value=\\\"dark\\\">\\n  ...\\n  <ThemeContext.Provider value=\\\"light\\\">\\n    <Footer />\\n  </ThemeContext.Provider>\\n  ...\\n</ThemeContext.Provider>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"You can nest and override providers as many times as you need.\"}],\"\\n\"]}],[\"$r\",\"Recipes\",null,{\"titleText\":\"Examples of overriding context\",\"children\":[[\"$r\",\"h4\",null,{\"id\":\"overriding-a-theme\",\"children\":\"Overriding a theme \"}],[\"$r\",\"p\",null,{\"children\":[\"Here, the button \",[\"$r\",\"em\",null,{\"children\":\"inside\"}],\" the \",[\"$r\",\"code\",null,{\"children\":\"Footer\"}],\" receives a different context value (\",[\"$r\",\"code\",null,{\"children\":\"\\\"light\\\"\"}],\") than the buttons outside (\",[\"$r\",\"code\",null,{\"children\":\"\\\"dark\\\"\"}],\").\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { createContext, useContext } from 'react';\\n\\nconst ThemeContext = createContext(null);\\n\\nexport default function MyApp() {\\n  return (\\n    <ThemeContext.Provider value=\\\"dark\\\">\\n      <Form />\\n    </ThemeContext.Provider>\\n  )\\n}\\n\\nfunction Form() {\\n  return (\\n    <Panel title=\\\"Welcome\\\">\\n      <Button>Sign up</Button>\\n      <Button>Log in</Button>\\n      <ThemeContext.Provider value=\\\"light\\\">\\n        <Footer />\\n      </ThemeContext.Provider>\\n    </Panel>\\n  );\\n}\\n\\nfunction Footer() {\\n  return (\\n    <footer>\\n      <Button>Settings</Button>\\n    </footer>\\n  );\\n}\\n\\nfunction Panel({ title, children }) {\\n  const theme = useContext(ThemeContext);\\n  const className = 'panel-' + theme;\\n  return (\\n    <section className={className}>\\n      {title && <h1>{title}</h1>}\\n      {children}\\n    </section>\\n  )\\n}\\n\\nfunction Button({ children }) {\\n  const theme = useContext(ThemeContext);\\n  const className = 'button-' + theme;\\n  return (\\n    <button className={className}>\\n      {children}\\n    </button>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"footer {\\n  margin-top: 20px;\\n  border-top: 1px solid #aaa;\\n}\\n\\n.panel-light,\\n.panel-dark {\\n  border: 1px solid black;\\n  border-radius: 4px;\\n  padding: 20px;\\n}\\n.panel-light {\\n  color: #222;\\n  background: #fff;\\n}\\n\\n.panel-dark {\\n  color: #fff;\\n  background: rgb(23, 32, 42);\\n}\\n\\n.button-light,\\n.button-dark {\\n  border: 1px solid #777;\\n  padding: 5px;\\n  margin-right: 10px;\\n  margin-top: 10px;\\n}\\n\\n.button-dark {\\n  background: #222;\\n  color: #fff;\\n}\\n\\n.button-light {\\n  background: #fff;\\n  color: #222;\\n}\\n\"}]}]]}],[\"$r\",\"Solution\",null,{}],[\"$r\",\"h4\",null,{\"id\":\"automatically-nested-headings\",\"children\":\"Automatically nested headings \"}],[\"$r\",\"p\",null,{\"children\":[\"You can “accumulate” information when you nest context providers. In this example, the \",[\"$r\",\"code\",null,{\"children\":\"Section\"}],\" component keeps track of the \",[\"$r\",\"code\",null,{\"children\":\"LevelContext\"}],\" which specifies the depth of the section nesting. It reads the \",[\"$r\",\"code\",null,{\"children\":\"LevelContext\"}],\" from the parent section, and provides the \",[\"$r\",\"code\",null,{\"children\":\"LevelContext\"}],\" number increased by one to its children. As a result, the \",[\"$r\",\"code\",null,{\"children\":\"Heading\"}],\" component can automatically decide which of the \",[\"$r\",\"code\",null,{\"children\":\"<h1>\"}],\", \",[\"$r\",\"code\",null,{\"children\":\"<h2>\"}],\", \",[\"$r\",\"code\",null,{\"children\":\"<h3>\"}],\", …, tags to use based on how many \",[\"$r\",\"code\",null,{\"children\":\"Section\"}],\" components it is nested inside of.\"]}],[\"$r\",\"p\",null,{\"children\":[\"Read a \",[\"$r\",\"a\",null,{\"href\":\"/learn/passing-data-deeply-with-context\",\"children\":\"detailed walkthrough\"}],\" of this example.\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import Heading from './Heading.js';\\nimport Section from './Section.js';\\n\\nexport default function Page() {\\n  return (\\n    <Section>\\n      <Heading>Title</Heading>\\n      <Section>\\n        <Heading>Heading</Heading>\\n        <Heading>Heading</Heading>\\n        <Heading>Heading</Heading>\\n        <Section>\\n          <Heading>Sub-heading</Heading>\\n          <Heading>Sub-heading</Heading>\\n          <Heading>Sub-heading</Heading>\\n          <Section>\\n            <Heading>Sub-sub-heading</Heading>\\n            <Heading>Sub-sub-heading</Heading>\\n            <Heading>Sub-sub-heading</Heading>\\n          </Section>\\n        </Section>\\n      </Section>\\n    </Section>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Section.js\",\"children\":\"import { useContext } from 'react';\\nimport { LevelContext } from './LevelContext.js';\\n\\nexport default function Section({ children }) {\\n  const level = useContext(LevelContext);\\n  return (\\n    <section className=\\\"section\\\">\\n      <LevelContext.Provider value={level + 1}>\\n        {children}\\n      </LevelContext.Provider>\\n    </section>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Heading.js\",\"children\":\"import { useContext } from 'react';\\nimport { LevelContext } from './LevelContext.js';\\n\\nexport default function Heading({ children }) {\\n  const level = useContext(LevelContext);\\n  switch (level) {\\n    case 0:\\n      throw Error('Heading must be inside a Section!');\\n    case 1:\\n      return <h1>{children}</h1>;\\n    case 2:\\n      return <h2>{children}</h2>;\\n    case 3:\\n      return <h3>{children}</h3>;\\n    case 4:\\n      return <h4>{children}</h4>;\\n    case 5:\\n      return <h5>{children}</h5>;\\n    case 6:\\n      return <h6>{children}</h6>;\\n    default:\\n      throw Error('Unknown level: ' + level);\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/LevelContext.js\",\"children\":\"import { createContext } from 'react';\\n\\nexport const LevelContext = createContext(0);\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".section {\\n  padding: 10px;\\n  margin: 5px;\\n  border-radius: 5px;\\n  border: 1px solid #aaa;\\n}\\n\"}]}]]}],[\"$r\",\"Solution\",null,{}]]}],[\"$r\",\"MaxWidth\",\"last\",{\"children\":[\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"optimizing-re-renders-when-passing-objects-and-functions\",\"children\":\"Optimizing re-renders when passing objects and functions \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"You can pass any values via context, including objects and functions.\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[2, 10, \\\"{ currentUser, login }\\\"]] \",\"children\":\"function MyApp() {\\n  const [currentUser, setCurrentUser] = useState(null);\\n\\n  function login(response) {\\n    storeCredentials(response.credentials);\\n    setCurrentUser(response.user);\\n  }\\n\\n  return (\\n    <AuthContext.Provider value={{ currentUser, login }}>\\n      <Page />\\n    </AuthContext.Provider>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Here, the \",[\"$r\",\"CodeStep\",null,{\"step\":2,\"children\":\"context value\"}],\" is a JavaScript object with two properties, one of which is a function. Whenever \",[\"$r\",\"code\",null,{\"children\":\"MyApp\"}],\" re-renders (for example, on a route update), this will be a \",[\"$r\",\"em\",null,{\"children\":\"different\"}],\" object pointing at a \",[\"$r\",\"em\",null,{\"children\":\"different\"}],\" function, so React will also have to re-render all components deep in the tree that call \",[\"$r\",\"code\",null,{\"children\":\"useContext(AuthContext)\"}],\".\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"In smaller apps, this is not a problem. However, there is no need to re-render them if the underlying data, like \",[\"$r\",\"code\",null,{\"children\":\"currentUser\"}],\", has not changed. To help React take advantage of that fact, you may wrap the \",[\"$r\",\"code\",null,{\"children\":\"login\"}],\" function with \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useCallback\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useCallback\"}]}],\" and wrap the object creation into \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useMemo\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useMemo\"}]}],\". This is a performance optimization:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{6,9,11,14,17}\",\"children\":\"import { useCallback, useMemo } from 'react';\\n\\nfunction MyApp() {\\n  const [currentUser, setCurrentUser] = useState(null);\\n\\n  const login = useCallback((response) => {\\n    storeCredentials(response.credentials);\\n    setCurrentUser(response.user);\\n  }, []);\\n\\n  const contextValue = useMemo(() => ({\\n    currentUser,\\n    login\\n  }), [currentUser, login]);\\n\\n  return (\\n    <AuthContext.Provider value={contextValue}>\\n      <Page />\\n    </AuthContext.Provider>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"As a result of this change, even if \",[\"$r\",\"code\",null,{\"children\":\"MyApp\"}],\" needs to re-render, the components calling \",[\"$r\",\"code\",null,{\"children\":\"useContext(AuthContext)\"}],\" won’t need to re-render unless \",[\"$r\",\"code\",null,{\"children\":\"currentUser\"}],\" has changed.\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Read more about \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useMemo#skipping-re-rendering-of-components\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useMemo\"}]}],\" and \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useCallback#skipping-re-rendering-of-components\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"useCallback\"}],\".\"]}]]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"troubleshooting\",\"children\":\"Troubleshooting \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"my-component-doesnt-see-the-value-from-my-provider\",\"children\":\"My component doesn’t see the value from my provider \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"There are a few common ways that this can happen:\"}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"You’re rendering \",[\"$r\",\"code\",null,{\"children\":\"<SomeContext.Provider>\"}],\" in the same component (or below) as where you’re calling \",[\"$r\",\"code\",null,{\"children\":\"useContext()\"}],\". Move \",[\"$r\",\"code\",null,{\"children\":\"<SomeContext.Provider>\"}],\" \",[\"$r\",\"em\",null,{\"children\":\"above and outside\"}],\" the component calling \",[\"$r\",\"code\",null,{\"children\":\"useContext()\"}],\".\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"You may have forgotten to wrap your component with \",[\"$r\",\"code\",null,{\"children\":\"<SomeContext.Provider>\"}],\", or you might have put it in a different part of the tree than you thought. Check whether the hierarchy is right using \",[\"$r\",\"a\",null,{\"href\":\"/learn/react-developer-tools\",\"children\":\"React DevTools.\"}]]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"You might be running into some build issue with your tooling that causes \",[\"$r\",\"code\",null,{\"children\":\"SomeContext\"}],\" as seen from the providing component and \",[\"$r\",\"code\",null,{\"children\":\"SomeContext\"}],\" as seen by the reading component to be two different objects. This can happen if you use symlinks, for example. You can verify this by assigning them to globals like \",[\"$r\",\"code\",null,{\"children\":\"window.SomeContext1\"}],\" and \",[\"$r\",\"code\",null,{\"children\":\"window.SomeContext2\"}],\" and then checking whether \",[\"$r\",\"code\",null,{\"children\":\"window.SomeContext1 === window.SomeContext2\"}],\" in the console. If they’re not the same, fix that issue on the build tool level.\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"i-am-always-getting-undefined-from-my-context-although-the-default-value-is-different\",\"children\":[\"I am always getting \",[\"$r\",\"code\",null,{\"children\":\"undefined\"}],\" from my context although the default value is different \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"You might have a provider without a \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" in the tree:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{1,2}\",\"children\":\"// 🚩 Doesn't work: no value prop\\n<ThemeContext.Provider>\\n   <Button />\\n</ThemeContext.Provider>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"If you forget to specify \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\", it’s like passing \",[\"$r\",\"code\",null,{\"children\":\"value={undefined}\"}],\".\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"You may have also mistakingly used a different prop name by mistake:\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{1,2}\",\"children\":\"// 🚩 Doesn't work: prop should be called \\\"value\\\"\\n<ThemeContext.Provider theme={theme}>\\n   <Button />\\n</ThemeContext.Provider>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"In both of these cases you should see a warning from React in the console. To fix them, call the prop \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\":\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{1,2}\",\"children\":\"// ✅ Passing the value prop\\n<ThemeContext.Provider value={theme}>\\n   <Button />\\n</ThemeContext.Provider>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Note that the \",[\"$r\",\"a\",null,{\"href\":\"#specifying-a-fallback-default-value\",\"children\":[\"default value from your \",[\"$r\",\"code\",null,{\"children\":\"createContext(defaultValue)\"}],\" call\"]}],\" is only used \",[\"$r\",\"strong\",null,{\"children\":\"if there is no matching provider above at all.\"}],\" If there is a \",[\"$r\",\"code\",null,{\"children\":\"<SomeContext.Provider value={undefined}>\"}],\" component somewhere in the parent tree, the component calling \",[\"$r\",\"code\",null,{\"children\":\"useContext(SomeContext)\"}],\" \",[\"$r\",\"em\",null,{\"children\":\"will\"}],\" receive \",[\"$r\",\"code\",null,{\"children\":\"undefined\"}],\" as the context value.\"]}]]}]]","meta":{"title":"useContext"},"languages":null},"__N_SSG":true}