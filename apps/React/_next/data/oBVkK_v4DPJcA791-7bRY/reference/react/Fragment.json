{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"Overview\",\"depth\":2},{\"url\":\"#reference\",\"depth\":2,\"text\":\"Reference \"},{\"url\":\"#fragment\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"<Fragment>\"}],\" \"]},{\"url\":\"#usage\",\"depth\":2,\"text\":\"Usage \"},{\"url\":\"#returning-multiple-elements\",\"depth\":3,\"text\":\"Returning multiple elements \"},{\"url\":\"#assigning-multiple-elements-to-a-variable\",\"depth\":3,\"text\":\"Assigning multiple elements to a variable \"},{\"url\":\"#grouping-elements-with-text\",\"depth\":3,\"text\":\"Grouping elements with text \"},{\"url\":\"#rendering-a-list-of-fragments\",\"depth\":3,\"text\":\"Rendering a list of Fragments \"}]","content":"[[\"$r\",\"MaxWidth\",\"32\",{\"children\":[[\"$r\",\"Intro\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"<Fragment>\"}],\", often used via \",[\"$r\",\"code\",null,{\"children\":\"<>...</>\"}],\" syntax, lets you group elements without a wrapper node.\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"<>\\n  <OneChild />\\n  <AnotherChild />\\n</>\\n\"}]}]]}],\"\\n\",[\"$r\",\"InlineToc\",null,{}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"reference\",\"children\":\"Reference \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"fragment\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"<Fragment>\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Wrap elements in \",[\"$r\",\"code\",null,{\"children\":\"<Fragment>\"}],\" to group them together in situations where you need a single element. Grouping elements in \",[\"$r\",\"code\",null,{\"children\":\"Fragment\"}],\" has no effect on the resulting DOM; it is the same as if the elements were not grouped. The empty JSX tag \",[\"$r\",\"code\",null,{\"children\":\"<></>\"}],\" is shorthand for \",[\"$r\",\"code\",null,{\"children\":\"<Fragment></Fragment>\"}],\" in most cases.\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"props\",\"children\":\"Props \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"optional\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"key\"}],\": Fragments declared with the explicit \",[\"$r\",\"code\",null,{\"children\":\"<Fragment>\"}],\" syntax may have \",[\"$r\",\"a\",null,{\"href\":\"/learn/rendering-lists#keeping-list-items-in-order-with-key\",\"children\":\"keys.\"}]]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"caveats\",\"children\":\"Caveats \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"If you want to pass \",[\"$r\",\"code\",null,{\"children\":\"key\"}],\" to a Fragment, you can’t use the \",[\"$r\",\"code\",null,{\"children\":\"<>...</>\"}],\" syntax. You have to explicitly import \",[\"$r\",\"code\",null,{\"children\":\"Fragment\"}],\" from \",[\"$r\",\"code\",null,{\"children\":\"'react'\"}],\" and render \",[\"$r\",\"code\",null,{\"children\":\"<Fragment key={yourKey}>...</Fragment>\"}],\".\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"React does not \",[\"$r\",\"a\",null,{\"href\":\"/learn/preserving-and-resetting-state\",\"children\":\"reset state\"}],\" when you go from rendering \",[\"$r\",\"code\",null,{\"children\":\"<><Child /></>\"}],\" to \",[\"$r\",\"code\",null,{\"children\":\"[<Child />]\"}],\" or back, or when you go from rendering \",[\"$r\",\"code\",null,{\"children\":\"<><Child /></>\"}],\" to \",[\"$r\",\"code\",null,{\"children\":\"<Child />\"}],\" and back. This only works a single level deep: for example, going from \",[\"$r\",\"code\",null,{\"children\":\"<><><Child /></></>\"}],\" to \",[\"$r\",\"code\",null,{\"children\":\"<Child />\"}],\" resets the state. See the precise semantics \",[\"$r\",\"a\",null,{\"href\":\"https://gist.github.com/clemmy/b3ef00f9507909429d8aa0d3ee4f986b\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"here.\"}]]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"usage\",\"children\":\"Usage \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"returning-multiple-elements\",\"children\":\"Returning multiple elements \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Use \",[\"$r\",\"code\",null,{\"children\":\"Fragment\"}],\", or the equivalent \",[\"$r\",\"code\",null,{\"children\":\"<>...</>\"}],\" syntax, to group multiple elements together. You can use it to put multiple elements in any place where a single element can go. For example, a component can only return one element, but by using a Fragment you can group multiple elements together and then return them as a group:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3,6}\",\"children\":\"function Post() {\\n  return (\\n    <>\\n      <PostTitle />\\n      <PostBody />\\n    </>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Fragments are useful because grouping elements with a Fragment has no effect on layout or styles, unlike if you wrapped the elements in another container like a DOM element. If you inspect this example with the browser tools, you’ll see that all \",[\"$r\",\"code\",null,{\"children\":\"<h1>\"}],\" and \",[\"$r\",\"code\",null,{\"children\":\"<article>\"}],\" DOM nodes appear as siblings without wrappers around them:\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export default function Blog() {\\n  return (\\n    <>\\n      <Post title=\\\"An update\\\" body=\\\"It's been a while since I posted...\\\" />\\n      <Post title=\\\"My new blog\\\" body=\\\"I am starting a new blog!\\\" />\\n    </>\\n  )\\n}\\n\\nfunction Post({ title, body }) {\\n  return (\\n    <>\\n      <PostTitle title={title} />\\n      <PostBody body={body} />\\n    </>\\n  );\\n}\\n\\nfunction PostTitle({ title }) {\\n  return <h1>{title}</h1>\\n}\\n\\nfunction PostBody({ body }) {\\n  return (\\n    <article>\\n      <p>{body}</p>\\n    </article>\\n  );\\n}\\n\"}]}]}],[\"$r\",\"MaxWidth\",\"62\",{\"children\":[\"\\n\",[\"$r\",\"DeepDive\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"how-to-write-a-fragment-without-the-special-syntax\",\"children\":\"How to write a Fragment without the special syntax? \"}],[\"$r\",\"p\",null,{\"children\":[\"The example above is equivalent to importing \",[\"$r\",\"code\",null,{\"children\":\"Fragment\"}],\" from React:\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{1,5,8}\",\"children\":\"import { Fragment } from 'react';\\n\\nfunction Post() {\\n  return (\\n    <Fragment>\\n      <PostTitle />\\n      <PostBody />\\n    </Fragment>\\n  );\\n}\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"Usually you won’t need this unless you need to \",[\"$r\",\"a\",null,{\"href\":\"#rendering-a-list-of-fragments\",\"children\":[\"pass a \",[\"$r\",\"code\",null,{\"children\":\"key\"}],\" to your \",[\"$r\",\"code\",null,{\"children\":\"Fragment\"}],\".\"]}]]}]]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"assigning-multiple-elements-to-a-variable\",\"children\":\"Assigning multiple elements to a variable \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"Like any other element, you can assign Fragment elements to variables, pass them as props, and so on:\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function CloseDialog() {\\n  const buttons = (\\n    <>\\n      <OKButton />\\n      <CancelButton />\\n    </>\\n  );\\n  return (\\n    <AlertDialog buttons={buttons}>\\n      Are you sure you want to leave this page?\\n    </AlertDialog>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"grouping-elements-with-text\",\"children\":\"Grouping elements with text \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"You can use \",[\"$r\",\"code\",null,{\"children\":\"Fragment\"}],\" to group text together with components:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function DateRangePicker({ start, end }) {\\n  return (\\n    <>\\n      From\\n      <DatePicker date={start} />\\n      to\\n      <DatePicker date={end} />\\n    </>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"rendering-a-list-of-fragments\",\"children\":\"Rendering a list of Fragments \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Here’s a situation where you need to write \",[\"$r\",\"code\",null,{\"children\":\"Fragment\"}],\" explicitly instead of using the \",[\"$r\",\"code\",null,{\"children\":\"<></>\"}],\" syntax. When you \",[\"$r\",\"a\",null,{\"href\":\"/learn/rendering-lists\",\"children\":\"render multiple elements in a loop\"}],\", you need to assign a \",[\"$r\",\"code\",null,{\"children\":\"key\"}],\" to each element. If the elements within the loop are Fragments, you need to use the normal JSX element syntax in order to provide the \",[\"$r\",\"code\",null,{\"children\":\"key\"}],\" attribute:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3,6}\",\"children\":\"function Blog() {\\n  return posts.map(post =>\\n    <Fragment key={post.id}>\\n      <PostTitle title={post.title} />\\n      <PostBody body={post.body} />\\n    </Fragment>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"You can inspect the DOM to verify that there are no wrapper elements around the Fragment children:\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { Fragment } from 'react';\\n\\nconst posts = [\\n  { id: 1, title: 'An update', body: \\\"It's been a while since I posted...\\\" },\\n  { id: 2, title: 'My new blog', body: 'I am starting a new blog!' }\\n];\\n\\nexport default function Blog() {\\n  return posts.map(post =>\\n    <Fragment key={post.id}>\\n      <PostTitle title={post.title} />\\n      <PostBody body={post.body} />\\n    </Fragment>\\n  );\\n}\\n\\nfunction PostTitle({ title }) {\\n  return <h1>{title}</h1>\\n}\\n\\nfunction PostBody({ body }) {\\n  return (\\n    <article>\\n      <p>{body}</p>\\n    </article>\\n  );\\n}\\n\"}]}]}]]","meta":{"title":"<Fragment> (<>...</>)"},"languages":null},"__N_SSG":true}