{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"Overview\",\"depth\":2},{\"url\":\"#reference\",\"depth\":2,\"text\":\"Reference \"},{\"url\":\"#rendertostring\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"renderToString(reactNode, options?)\"}],\" \"]},{\"url\":\"#usage\",\"depth\":2,\"text\":\"Usage \"},{\"url\":\"#rendering-a-react-tree-as-html-to-a-string\",\"depth\":3,\"text\":\"Rendering a React tree as HTML to a string \"},{\"url\":\"#alternatives\",\"depth\":2,\"text\":\"Alternatives \"},{\"url\":\"#migrating-from-rendertostring-to-a-streaming-method-on-the-server\",\"depth\":3,\"text\":[\"Migrating from \",[\"$r\",\"code\",null,{\"children\":\"renderToString\"}],\" to a streaming render on the server \"]},{\"url\":\"#migrating-from-rendertostring-to-a-static-prerender-on-the-server\",\"depth\":3,\"text\":[\"Migrating from \",[\"$r\",\"code\",null,{\"children\":\"renderToString\"}],\" to a static prerender on the server \"]},{\"url\":\"#removing-rendertostring-from-the-client-code\",\"depth\":3,\"text\":[\"Removing \",[\"$r\",\"code\",null,{\"children\":\"renderToString\"}],\" from the client code \"]},{\"url\":\"#troubleshooting\",\"depth\":2,\"text\":\"Troubleshooting \"},{\"url\":\"#when-a-component-suspends-the-html-always-contains-a-fallback\",\"depth\":3,\"text\":\"When a component suspends, the HTML always contains a fallback \"}]","content":"[[\"$r\",\"MaxWidth\",\"last\",{\"children\":[[\"$r\",\"Pitfall\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"renderToString\"}],\" does not support streaming or waiting for data. \",[\"$r\",\"a\",null,{\"href\":\"#alternatives\",\"children\":\"See the alternatives.\"}]]}]}],\"\\n\",[\"$r\",\"Intro\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"renderToString\"}],\" renders a React tree to an HTML string.\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const html = renderToString(reactNode, options?)\\n\"}]}]]}],\"\\n\",[\"$r\",\"InlineToc\",null,{}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"reference\",\"children\":\"Reference \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"rendertostring\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"renderToString(reactNode, options?)\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"On the server, call \",[\"$r\",\"code\",null,{\"children\":\"renderToString\"}],\" to render your app to HTML.\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { renderToString } from 'react-dom/server';\\n\\nconst html = renderToString(<App />);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"On the client, call \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/client/hydrateRoot\",\"children\":[\"$r\",\"code\",null,{\"children\":\"hydrateRoot\"}]}],\" to make the server-generated HTML interactive.\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"#usage\",\"children\":\"See more examples below.\"}]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"parameters\",\"children\":\"Parameters \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"reactNode\"}],\": A React node you want to render to HTML. For example, a JSX node like \",[\"$r\",\"code\",null,{\"children\":\"<App />\"}],\".\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"optional\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"options\"}],\": An object for server render.\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"optional\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"identifierPrefix\"}],\": A string prefix React uses for IDs generated by \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useId\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"useId\"}],\".\"]}],\" Useful to avoid conflicts when using multiple roots on the same page. Must be the same prefix as passed to \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/client/hydrateRoot#parameters\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"hydrateRoot\"}],\".\"]}]]}],\"\\n\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"returns\",\"children\":\"Returns \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"An HTML string.\"}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"caveats\",\"children\":\"Caveats \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"renderToString\"}],\" has limited Suspense support. If a component suspends, \",[\"$r\",\"code\",null,{\"children\":\"renderToString\"}],\" immediately sends its fallback as HTML.\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"renderToString\"}],\" works in the browser, but using it in the client code is \",[\"$r\",\"a\",null,{\"href\":\"#removing-rendertostring-from-the-client-code\",\"children\":\"not recommended.\"}]]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"usage\",\"children\":\"Usage \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"rendering-a-react-tree-as-html-to-a-string\",\"children\":\"Rendering a React tree as HTML to a string \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Call \",[\"$r\",\"code\",null,{\"children\":\"renderToString\"}],\" to render your app to an HTML string which you can send with your server response:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{5-6}\",\"children\":\"import { renderToString } from 'react-dom/server';\\n\\n// The route handler syntax depends on your backend framework\\napp.use('/', (request, response) => {\\n  const html = renderToString(<App />);\\n  response.send(html);\\n});\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"This will produce the initial non-interactive HTML output of your React components. On the client, you will need to call \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/client/hydrateRoot\",\"children\":[\"$r\",\"code\",null,{\"children\":\"hydrateRoot\"}]}],\" to \",[\"$r\",\"em\",null,{\"children\":\"hydrate\"}],\" that server-generated HTML and make it interactive.\"]}],\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"renderToString\"}],\" does not support streaming or waiting for data. \",[\"$r\",\"a\",null,{\"href\":\"#alternatives\",\"children\":\"See the alternatives.\"}]]}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"alternatives\",\"children\":\"Alternatives \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"migrating-from-rendertostring-to-a-streaming-method-on-the-server\",\"children\":[\"Migrating from \",[\"$r\",\"code\",null,{\"children\":\"renderToString\"}],\" to a streaming render on the server \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"renderToString\"}],\" returns a string immediately, so it does not support streaming content as it loads.\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"When possible, we recommend using these fully-featured alternatives:\"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"If you use Node.js, use \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/server/renderToPipeableStream\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"renderToPipeableStream\"}],\".\"]}]]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"If you use Deno or a modern edge runtime with \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/API/Streams_API\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Web Streams\"}],\", use \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/server/renderToReadableStream\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"renderToReadableStream\"}],\".\"]}]]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"You can continue using \",[\"$r\",\"code\",null,{\"children\":\"renderToString\"}],\" if your server environment does not support streams.\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"migrating-from-rendertostring-to-a-static-prerender-on-the-server\",\"children\":[\"Migrating from \",[\"$r\",\"code\",null,{\"children\":\"renderToString\"}],\" to a static prerender on the server \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"renderToString\"}],\" returns a string immediately, so it does not support waiting for data to load for static HTML generation.\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"We recommend using these fully-featured alternatives:\"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"If you use Node.js, use \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/static/prerenderToNodeStream\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"prerenderToNodeStream\"}],\".\"]}]]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"If you use Deno or a modern edge runtime with \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/API/Streams_API\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Web Streams\"}],\", use \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/static/prerender\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"prerender\"}],\".\"]}]]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"You can continue using \",[\"$r\",\"code\",null,{\"children\":\"renderToString\"}],\" if your static site generation environment does not support streams.\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"removing-rendertostring-from-the-client-code\",\"children\":[\"Removing \",[\"$r\",\"code\",null,{\"children\":\"renderToString\"}],\" from the client code \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Sometimes, \",[\"$r\",\"code\",null,{\"children\":\"renderToString\"}],\" is used on the client to convert some component to HTML.\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{1-2}\",\"children\":\"// 🚩 Unnecessary: using renderToString on the client\\nimport { renderToString } from 'react-dom/server';\\n\\nconst html = renderToString(<MyIcon />);\\nconsole.log(html); // For example, \\\"<svg>...</svg>\\\"\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Importing \",[\"$r\",\"code\",null,{\"children\":\"react-dom/server\"}],\" \",[\"$r\",\"strong\",null,{\"children\":\"on the client\"}],\" unnecessarily increases your bundle size and should be avoided. If you need to render some component to HTML in the browser, use \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/client/createRoot\",\"children\":[\"$r\",\"code\",null,{\"children\":\"createRoot\"}]}],\" and read HTML from the DOM:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { createRoot } from 'react-dom/client';\\nimport { flushSync } from 'react-dom';\\n\\nconst div = document.createElement('div');\\nconst root = createRoot(div);\\nflushSync(() => {\\n  root.render(<MyIcon />);\\n});\\nconsole.log(div.innerHTML); // For example, \\\"<svg>...</svg>\\\"\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"The \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/flushSync\",\"children\":[\"$r\",\"code\",null,{\"children\":\"flushSync\"}]}],\" call is necessary so that the DOM is updated before reading its \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"innerHTML\"}]}],\" property.\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"troubleshooting\",\"children\":\"Troubleshooting \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"when-a-component-suspends-the-html-always-contains-a-fallback\",\"children\":\"When a component suspends, the HTML always contains a fallback \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"renderToString\"}],\" does not fully support Suspense.\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"If some component suspends (for example, because it’s defined with \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/lazy\",\"children\":[\"$r\",\"code\",null,{\"children\":\"lazy\"}]}],\" or fetches data), \",[\"$r\",\"code\",null,{\"children\":\"renderToString\"}],\" will not wait for its content to resolve. Instead, \",[\"$r\",\"code\",null,{\"children\":\"renderToString\"}],\" will find the closest \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Suspense\",\"children\":[\"$r\",\"code\",null,{\"children\":\"<Suspense>\"}]}],\" boundary above it and render its \",[\"$r\",\"code\",null,{\"children\":\"fallback\"}],\" prop in the HTML. The content will not appear until the client code loads.\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"To solve this, use one of the \",[\"$r\",\"a\",null,{\"href\":\"#alternatives\",\"children\":\"recommended streaming solutions.\"}],\" For server side rendering, they can stream content in chunks as it resolves on the server so that the user sees the page being progressively filled in before the client code loads. For static site generation, they can wait for all the content to resolve before generating the static HTML.\"]}]]}]]","meta":{"title":"renderToString"},"languages":null},"__N_SSG":true}