{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"Overview\",\"depth\":2},{\"url\":\"#reference\",\"depth\":2,\"text\":\"Reference \"},{\"url\":\"#createroot\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"createRoot(domNode, options?)\"}],\" \"]},{\"url\":\"#root-render\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"root.render(reactNode)\"}],\" \"]},{\"url\":\"#root-unmount\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"root.unmount()\"}],\" \"]},{\"url\":\"#usage\",\"depth\":2,\"text\":\"Usage \"},{\"url\":\"#rendering-an-app-fully-built-with-react\",\"depth\":3,\"text\":\"Rendering an app fully built with React \"},{\"url\":\"#rendering-a-page-partially-built-with-react\",\"depth\":3,\"text\":\"Rendering a page partially built with React \"},{\"url\":\"#updating-a-root-component\",\"depth\":3,\"text\":\"Updating a root component \"},{\"url\":\"#show-a-dialog-for-uncaught-errors\",\"depth\":3,\"text\":\"Show a dialog for uncaught errors \"},{\"url\":\"#displaying-error-boundary-errors\",\"depth\":3,\"text\":\"Displaying Error Boundary errors \"},{\"url\":\"#displaying-a-dialog-for-recoverable-errors\",\"depth\":3,\"text\":\"Displaying a dialog for recoverable errors \"},{\"url\":\"#troubleshooting\",\"depth\":2,\"text\":\"Troubleshooting \"},{\"url\":\"#ive-created-a-root-but-nothing-is-displayed\",\"depth\":3,\"text\":\"I’ve created a root, but nothing is displayed \"},{\"url\":\"#im-getting-an-error-you-passed-a-second-argument-to-root-render\",\"depth\":3,\"text\":\"I’m getting an error: “You passed a second argument to root.render” \"},{\"url\":\"#im-getting-an-error-target-container-is-not-a-dom-element\",\"depth\":3,\"text\":\"I’m getting an error: “Target container is not a DOM element” \"},{\"url\":\"#im-getting-an-error-functions-are-not-valid-as-a-react-child\",\"depth\":3,\"text\":\"I’m getting an error: “Functions are not valid as a React child.” \"},{\"url\":\"#my-server-rendered-html-gets-re-created-from-scratch\",\"depth\":3,\"text\":\"My server-rendered HTML gets re-created from scratch \"}]","content":"[[\"$r\",\"MaxWidth\",\"98\",{\"children\":[[\"$r\",\"Intro\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"createRoot\"}],\" lets you create a root to display React components inside a browser DOM node.\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const root = createRoot(domNode, options?)\\n\"}]}]]}],\"\\n\",[\"$r\",\"InlineToc\",null,{}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"reference\",\"children\":\"Reference \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"createroot\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"createRoot(domNode, options?)\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Call \",[\"$r\",\"code\",null,{\"children\":\"createRoot\"}],\" to create a React root for displaying content inside a browser DOM element.\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { createRoot } from 'react-dom/client';\\n\\nconst domNode = document.getElementById('root');\\nconst root = createRoot(domNode);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"React will create a root for the \",[\"$r\",\"code\",null,{\"children\":\"domNode\"}],\", and take over managing the DOM inside it. After you’ve created a root, you need to call \",[\"$r\",\"a\",null,{\"href\":\"#root-render\",\"children\":[\"$r\",\"code\",null,{\"children\":\"root.render\"}]}],\" to display a React component inside of it:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"root.render(<App />);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"An app fully built with React will usually only have one \",[\"$r\",\"code\",null,{\"children\":\"createRoot\"}],\" call for its root component. A page that uses “sprinkles” of React for parts of the page may have as many separate roots as needed.\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"#usage\",\"children\":\"See more examples below.\"}]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"parameters\",\"children\":\"Parameters \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"domNode\"}],\": A \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/API/Element\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"DOM element.\"}],\" React will create a root for this DOM element and allow you to call functions on the root, such as \",[\"$r\",\"code\",null,{\"children\":\"render\"}],\" to display rendered React content.\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"optional\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"options\"}],\": An object with options for this React root.\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"optional\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"onCaughtError\"}],\": Callback called when React catches an error in an Error Boundary. Called with the \",[\"$r\",\"code\",null,{\"children\":\"error\"}],\" caught by the Error Boundary, and an \",[\"$r\",\"code\",null,{\"children\":\"errorInfo\"}],\" object containing the \",[\"$r\",\"code\",null,{\"children\":\"componentStack\"}],\".\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"optional\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"onUncaughtError\"}],\": Callback called when an error is thrown and not caught by an Error Boundary. Called with the \",[\"$r\",\"code\",null,{\"children\":\"error\"}],\" that was thrown, and an \",[\"$r\",\"code\",null,{\"children\":\"errorInfo\"}],\" object containing the \",[\"$r\",\"code\",null,{\"children\":\"componentStack\"}],\".\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"optional\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"onRecoverableError\"}],\": Callback called when React automatically recovers from errors. Called with an \",[\"$r\",\"code\",null,{\"children\":\"error\"}],\" React throws, and an \",[\"$r\",\"code\",null,{\"children\":\"errorInfo\"}],\" object containing the \",[\"$r\",\"code\",null,{\"children\":\"componentStack\"}],\". Some recoverable errors may include the original error cause as \",[\"$r\",\"code\",null,{\"children\":\"error.cause\"}],\".\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"optional\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"identifierPrefix\"}],\": A string prefix React uses for IDs generated by \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useId\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"useId\"}],\".\"]}],\" Useful to avoid conflicts when using multiple roots on the same page.\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"returns\",\"children\":\"Returns \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"createRoot\"}],\" returns an object with two methods: \",[\"$r\",\"a\",null,{\"href\":\"#root-render\",\"children\":[\"$r\",\"code\",null,{\"children\":\"render\"}]}],\" and \",[\"$r\",\"a\",null,{\"href\":\"#root-unmount\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"unmount\"}],\".\"]}]]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"caveats\",\"children\":\"Caveats \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"If your app is server-rendered, using \",[\"$r\",\"code\",null,{\"children\":\"createRoot()\"}],\" is not supported. Use \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/client/hydrateRoot\",\"children\":[\"$r\",\"code\",null,{\"children\":\"hydrateRoot()\"}]}],\" instead.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"You’ll likely have only one \",[\"$r\",\"code\",null,{\"children\":\"createRoot\"}],\" call in your app. If you use a framework, it might do this call for you.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"When you want to render a piece of JSX in a different part of the DOM tree that isn’t a child of your component (for example, a modal or a tooltip), use \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/createPortal\",\"children\":[\"$r\",\"code\",null,{\"children\":\"createPortal\"}]}],\" instead of \",[\"$r\",\"code\",null,{\"children\":\"createRoot\"}],\".\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"root-render\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"root.render(reactNode)\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Call \",[\"$r\",\"code\",null,{\"children\":\"root.render\"}],\" to display a piece of \",[\"$r\",\"a\",null,{\"href\":\"/learn/writing-markup-with-jsx\",\"children\":\"JSX\"}],\" (“React node”) into the React root’s browser DOM node.\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"root.render(<App />);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"React will display \",[\"$r\",\"code\",null,{\"children\":\"<App />\"}],\" in the \",[\"$r\",\"code\",null,{\"children\":\"root\"}],\", and take over managing the DOM inside it.\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"#usage\",\"children\":\"See more examples below.\"}]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"root-render-parameters\",\"children\":\"Parameters \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"reactNode\"}],\": A \",[\"$r\",\"em\",null,{\"children\":\"React node\"}],\" that you want to display. This will usually be a piece of JSX like \",[\"$r\",\"code\",null,{\"children\":\"<App />\"}],\", but you can also pass a React element constructed with \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/createElement\",\"children\":[\"$r\",\"code\",null,{\"children\":\"createElement()\"}]}],\", a string, a number, \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\", or \",[\"$r\",\"code\",null,{\"children\":\"undefined\"}],\".\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"root-render-returns\",\"children\":\"Returns \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"root.render\"}],\" returns \",[\"$r\",\"code\",null,{\"children\":\"undefined\"}],\".\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"root-render-caveats\",\"children\":\"Caveats \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"The first time you call \",[\"$r\",\"code\",null,{\"children\":\"root.render\"}],\", React will clear all the existing HTML content inside the React root before rendering the React component into it.\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"If your root’s DOM node contains HTML generated by React on the server or during the build, use \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/client/hydrateRoot\",\"children\":[\"$r\",\"code\",null,{\"children\":\"hydrateRoot()\"}]}],\" instead, which attaches the event handlers to the existing HTML.\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"If you call \",[\"$r\",\"code\",null,{\"children\":\"render\"}],\" on the same root more than once, React will update the DOM as necessary to reflect the latest JSX you passed. React will decide which parts of the DOM can be reused and which need to be recreated by \",[\"$r\",\"a\",null,{\"href\":\"/learn/preserving-and-resetting-state\",\"children\":\"“matching it up”\"}],\" with the previously rendered tree. Calling \",[\"$r\",\"code\",null,{\"children\":\"render\"}],\" on the same root again is similar to calling the \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useState#setstate\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"set\"}],\" function\"]}],\" on the root component: React avoids unnecessary DOM updates.\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"root-unmount\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"root.unmount()\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Call \",[\"$r\",\"code\",null,{\"children\":\"root.unmount\"}],\" to destroy a rendered tree inside a React root.\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"root.unmount();\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"An app fully built with React will usually not have any calls to \",[\"$r\",\"code\",null,{\"children\":\"root.unmount\"}],\".\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"This is mostly useful if your React root’s DOM node (or any of its ancestors) may get removed from the DOM by some other code. For example, imagine a jQuery tab panel that removes inactive tabs from the DOM. If a tab gets removed, everything inside it (including the React roots inside) would get removed from the DOM as well. In that case, you need to tell React to “stop” managing the removed root’s content by calling \",[\"$r\",\"code\",null,{\"children\":\"root.unmount\"}],\". Otherwise, the components inside the removed root won’t know to clean up and free up global resources like subscriptions.\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Calling \",[\"$r\",\"code\",null,{\"children\":\"root.unmount\"}],\" will unmount all the components in the root and “detach” React from the root DOM node, including removing any event handlers or state in the tree.\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"root-unmount-parameters\",\"children\":\"Parameters \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"root.unmount\"}],\" does not accept any parameters.\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"root-unmount-returns\",\"children\":\"Returns \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"root.unmount\"}],\" returns \",[\"$r\",\"code\",null,{\"children\":\"undefined\"}],\".\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"root-unmount-caveats\",\"children\":\"Caveats \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Calling \",[\"$r\",\"code\",null,{\"children\":\"root.unmount\"}],\" will unmount all the components in the tree and “detach” React from the root DOM node.\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Once you call \",[\"$r\",\"code\",null,{\"children\":\"root.unmount\"}],\" you cannot call \",[\"$r\",\"code\",null,{\"children\":\"root.render\"}],\" again on the same root. Attempting to call \",[\"$r\",\"code\",null,{\"children\":\"root.render\"}],\" on an unmounted root will throw a “Cannot update an unmounted root” error. However, you can create a new root for the same DOM node after the previous root for that node has been unmounted.\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"usage\",\"children\":\"Usage \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"rendering-an-app-fully-built-with-react\",\"children\":\"Rendering an app fully built with React \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"If your app is fully built with React, create a single root for your entire app.\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[1, 3, \\\"document.getElementById('root')\\\"], [2, 4, \\\"<App />\\\"]]\",\"children\":\"import { createRoot } from 'react-dom/client';\\n\\nconst root = createRoot(document.getElementById('root'));\\nroot.render(<App />);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"Usually, you only need to run this code once at startup. It will:\"}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"Find the \",[\"$r\",\"CodeStep\",null,{\"step\":1,\"children\":\"browser DOM node\"}],\" defined in your HTML.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"Display the \",[\"$r\",\"CodeStep\",null,{\"step\":2,\"children\":\"React component\"}],\" for your app inside.\"]}],\"\\n\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-html\",\"meta\":\"index.html\",\"children\":\"<!DOCTYPE html>\\n<html>\\n  <head><title>My app</title></head>\\n  <body>\\n    <!-- This is the DOM node -->\\n    <div id=\\\"root\\\"></div>\\n  </body>\\n</html>\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/index.js active\",\"children\":\"import { createRoot } from 'react-dom/client';\\nimport App from './App.js';\\nimport './styles.css';\\n\\nconst root = createRoot(document.getElementById('root'));\\nroot.render(<App />);\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function App() {\\n  return (\\n    <>\\n      <h1>Hello, world!</h1>\\n      <Counter />\\n    </>\\n  );\\n}\\n\\nfunction Counter() {\\n  const [count, setCount] = useState(0);\\n  return (\\n    <button onClick={() => setCount(count + 1)}>\\n      You clicked me {count} times\\n    </button>\\n  );\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"116\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"$r\",\"strong\",null,{\"children\":[\"If your app is fully built with React, you shouldn’t need to create any more roots, or to call \",[\"$r\",\"a\",null,{\"href\":\"#root-render\",\"children\":[\"$r\",\"code\",null,{\"children\":\"root.render\"}]}],\" again.\"]}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"From this point on, React will manage the DOM of your entire app. To add more components, \",[\"$r\",\"a\",null,{\"href\":\"/learn/importing-and-exporting-components\",\"children\":[\"nest them inside the \",[\"$r\",\"code\",null,{\"children\":\"App\"}],\" component.\"]}],\" When you need to update the UI, each of your components can do this by \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useState\",\"children\":\"using state.\"}],\" When you need to display extra content like a modal or a tooltip outside the DOM node, \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/createPortal\",\"children\":\"render it with a portal.\"}]]}],\"\\n\",[\"$r\",\"Note\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":\"When your HTML is empty, the user sees a blank page until the app’s JavaScript code loads and runs:\"}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-html\",\"children\":\"<div id=\\\"root\\\"></div>\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"This can feel very slow! To solve this, you can generate the initial HTML from your components \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/server\",\"children\":\"on the server or during the build.\"}],\" Then your visitors can read text, see images, and click links before any of the JavaScript code loads. We recommend \",[\"$r\",\"a\",null,{\"href\":\"/learn/start-a-new-react-project#production-grade-react-frameworks\",\"children\":\"using a framework\"}],\" that does this optimization out of the box. Depending on when it runs, this is called \",[\"$r\",\"em\",null,{\"children\":\"server-side rendering (SSR)\"}],\" or \",[\"$r\",\"em\",null,{\"children\":\"static site generation (SSG).\"}]]}]]}],\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":[\"Apps using server rendering or static generation must call \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/client/hydrateRoot\",\"children\":[\"$r\",\"code\",null,{\"children\":\"hydrateRoot\"}]}],\" instead of \",[\"$r\",\"code\",null,{\"children\":\"createRoot\"}],\".\"]}],\" React will then \",[\"$r\",\"em\",null,{\"children\":\"hydrate\"}],\" (reuse) the DOM nodes from your HTML instead of destroying and re-creating them.\"]}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"rendering-a-page-partially-built-with-react\",\"children\":\"Rendering a page partially built with React \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"If your page \",[\"$r\",\"a\",null,{\"href\":\"/learn/add-react-to-an-existing-project#using-react-for-a-part-of-your-existing-page\",\"children\":\"isn’t fully built with React\"}],\", you can call \",[\"$r\",\"code\",null,{\"children\":\"createRoot\"}],\" multiple times to create a root for each top-level piece of UI managed by React. You can display different content in each root by calling \",[\"$r\",\"a\",null,{\"href\":\"#root-render\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"root.render\"}],\".\"]}]]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Here, two different React components are rendered into two DOM nodes defined in the \",[\"$r\",\"code\",null,{\"children\":\"index.html\"}],\" file:\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-html\",\"meta\":\"public/index.html\",\"children\":\"<!DOCTYPE html>\\n<html>\\n  <head><title>My app</title></head>\\n  <body>\\n    <nav id=\\\"navigation\\\"></nav>\\n    <main>\\n      <p>This paragraph is not rendered by React (open index.html to verify).</p>\\n      <section id=\\\"comments\\\"></section>\\n    </main>\\n  </body>\\n</html>\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/index.js active\",\"children\":\"import './styles.css';\\nimport { createRoot } from 'react-dom/client';\\nimport { Comments, Navigation } from './Components.js';\\n\\nconst navDomNode = document.getElementById('navigation');\\nconst navRoot = createRoot(navDomNode); \\nnavRoot.render(<Navigation />);\\n\\nconst commentDomNode = document.getElementById('comments');\\nconst commentRoot = createRoot(commentDomNode); \\ncommentRoot.render(<Comments />);\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Components.js\",\"children\":\"export function Navigation() {\\n  return (\\n    <ul>\\n      <NavLink href=\\\"/\\\">Home</NavLink>\\n      <NavLink href=\\\"/about\\\">About</NavLink>\\n    </ul>\\n  );\\n}\\n\\nfunction NavLink({ href, children }) {\\n  return (\\n    <li>\\n      <a href={href}>{children}</a>\\n    </li>\\n  );\\n}\\n\\nexport function Comments() {\\n  return (\\n    <>\\n      <h2>Comments</h2>\\n      <Comment text=\\\"Hello!\\\" author=\\\"Sophie\\\" />\\n      <Comment text=\\\"How are you?\\\" author=\\\"Sunil\\\" />\\n    </>\\n  );\\n}\\n\\nfunction Comment({ text, author }) {\\n  return (\\n    <p>{text} — <i>{author}</i></p>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"nav ul { padding: 0; margin: 0; }\\nnav ul li { display: inline-block; margin-right: 20px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"134\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"You could also create a new DOM node with \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"document.createElement()\"}]}],\" and add it to the document manually.\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const domNode = document.createElement('div');\\nconst root = createRoot(domNode); \\nroot.render(<Comment />);\\ndocument.body.appendChild(domNode); // You can add it anywhere in the document\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"To remove the React tree from the DOM node and clean up all the resources used by it, call \",[\"$r\",\"a\",null,{\"href\":\"#root-unmount\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"root.unmount\"}],\".\"]}]]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"root.unmount();\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"This is mostly useful if your React components are inside an app written in a different framework.\"}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"updating-a-root-component\",\"children\":\"Updating a root component \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"You can call \",[\"$r\",\"code\",null,{\"children\":\"render\"}],\" more than once on the same root. As long as the component tree structure matches up with what was previously rendered, React will \",[\"$r\",\"a\",null,{\"href\":\"/learn/preserving-and-resetting-state\",\"children\":\"preserve the state.\"}],\" Notice how you can type in the input, which means that the updates from repeated \",[\"$r\",\"code\",null,{\"children\":\"render\"}],\" calls every second in this example are not destructive:\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/index.js active\",\"children\":\"import { createRoot } from 'react-dom/client';\\nimport './styles.css';\\nimport App from './App.js';\\n\\nconst root = createRoot(document.getElementById('root'));\\n\\nlet i = 0;\\nsetInterval(() => {\\n  root.render(<App counter={i} />);\\n  i++;\\n}, 1000);\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"export default function App({counter}) {\\n  return (\\n    <>\\n      <h1>Hello, world! {counter}</h1>\\n      <input placeholder=\\\"Type something here\\\" />\\n    </>\\n  );\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"150\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"It is uncommon to call \",[\"$r\",\"code\",null,{\"children\":\"render\"}],\" multiple times. Usually, your components will \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useState\",\"children\":\"update state\"}],\" instead.\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"show-a-dialog-for-uncaught-errors\",\"children\":\"Show a dialog for uncaught errors \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"By default, React will log all uncaught errors to the console. To implement your own error reporting, you can provide the optional \",[\"$r\",\"code\",null,{\"children\":\"onUncaughtError\"}],\" root option:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[1, 6, \\\"onUncaughtError\\\"], [2, 6, \\\"error\\\", 1], [3, 6, \\\"errorInfo\\\"], [4, 10, \\\"componentStack\\\"]]\",\"children\":\"import { createRoot } from 'react-dom/client';\\n\\nconst root = createRoot(\\n  document.getElementById('root'),\\n  {\\n    onUncaughtError: (error, errorInfo) => {\\n      console.error(\\n        'Uncaught error',\\n        error,\\n        errorInfo.componentStack\\n      );\\n    }\\n  }\\n);\\nroot.render(<App />);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"The \",[\"$r\",\"CodeStep\",null,{\"step\":1,\"children\":\"onUncaughtError\"}],\" option is a function called with two arguments:\"]}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"The \",[\"$r\",\"CodeStep\",null,{\"step\":2,\"children\":\"error\"}],\" that was thrown.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"An \",[\"$r\",\"CodeStep\",null,{\"step\":3,\"children\":\"errorInfo\"}],\" object that contains the \",[\"$r\",\"CodeStep\",null,{\"step\":4,\"children\":\"componentStack\"}],\" of the error.\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"You can use the \",[\"$r\",\"code\",null,{\"children\":\"onUncaughtError\"}],\" root option to display error dialogs:\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-html\",\"meta\":\"index.html hidden\",\"children\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My app</title>\\n</head>\\n<body>\\n<!--\\n  Error dialog in raw HTML\\n  since an error in the React app may crash.\\n-->\\n<div id=\\\"error-dialog\\\" class=\\\"hidden\\\">\\n  <h1 id=\\\"error-title\\\" class=\\\"text-red\\\"></h1>\\n  <h3>\\n    <pre id=\\\"error-message\\\"></pre>\\n  </h3>\\n  <p>\\n    <pre id=\\\"error-body\\\"></pre>\\n  </p>\\n  <h4 class=\\\"-mb-20\\\">This error occurred at:</h4>\\n  <pre id=\\\"error-component-stack\\\" class=\\\"nowrap\\\"></pre>\\n  <h4 class=\\\"mb-0\\\">Call stack:</h4>\\n  <pre id=\\\"error-stack\\\" class=\\\"nowrap\\\"></pre>\\n  <div id=\\\"error-cause\\\">\\n    <h4 class=\\\"mb-0\\\">Caused by:</h4>\\n    <pre id=\\\"error-cause-message\\\"></pre>\\n    <pre id=\\\"error-cause-stack\\\" class=\\\"nowrap\\\"></pre>\\n  </div>\\n  <button\\n    id=\\\"error-close\\\"\\n    class=\\\"mb-10\\\"\\n    onclick=\\\"document.getElementById('error-dialog').classList.add('hidden')\\\"\\n  >\\n    Close\\n  </button>\\n  <h3 id=\\\"error-not-dismissible\\\">This error is not dismissible.</h3>\\n</div>\\n<!-- This is the DOM node -->\\n<div id=\\\"root\\\"></div>\\n</body>\\n</html>\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"meta\":\"src/styles.css active\",\"children\":\"label, button { display: block; margin-bottom: 20px; }\\nhtml, body { min-height: 300px; }\\n\\n#error-dialog {\\n  position: absolute;\\n  top: 0;\\n  right: 0;\\n  bottom: 0;\\n  left: 0;\\n  background-color: white;\\n  padding: 15px;\\n  opacity: 0.9;\\n  text-wrap: wrap;\\n  overflow: scroll;\\n}\\n\\n.text-red {\\n  color: red;\\n}\\n\\n.-mb-20 {\\n  margin-bottom: -20px;\\n}\\n\\n.mb-0 {\\n  margin-bottom: 0;\\n}\\n\\n.mb-10 {\\n  margin-bottom: 10px;\\n}\\n\\npre {\\n  text-wrap: wrap;\\n}\\n\\npre.nowrap {\\n  text-wrap: nowrap;\\n}\\n\\n.hidden {\\n display: none;  \\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/reportError.js hidden\",\"children\":\"function reportError({ title, error, componentStack, dismissable }) {\\n  const errorDialog = document.getElementById(\\\"error-dialog\\\");\\n  const errorTitle = document.getElementById(\\\"error-title\\\");\\n  const errorMessage = document.getElementById(\\\"error-message\\\");\\n  const errorBody = document.getElementById(\\\"error-body\\\");\\n  const errorComponentStack = document.getElementById(\\\"error-component-stack\\\");\\n  const errorStack = document.getElementById(\\\"error-stack\\\");\\n  const errorClose = document.getElementById(\\\"error-close\\\");\\n  const errorCause = document.getElementById(\\\"error-cause\\\");\\n  const errorCauseMessage = document.getElementById(\\\"error-cause-message\\\");\\n  const errorCauseStack = document.getElementById(\\\"error-cause-stack\\\");\\n  const errorNotDismissible = document.getElementById(\\\"error-not-dismissible\\\");\\n  \\n  // Set the title\\n  errorTitle.innerText = title;\\n  \\n  // Display error message and body\\n  const [heading, body] = error.message.split(/\\\\n(.*)/s);\\n  errorMessage.innerText = heading;\\n  if (body) {\\n    errorBody.innerText = body;\\n  } else {\\n    errorBody.innerText = '';\\n  }\\n\\n  // Display component stack\\n  errorComponentStack.innerText = componentStack;\\n\\n  // Display the call stack\\n  // Since we already displayed the message, strip it, and the first Error: line.\\n  errorStack.innerText = error.stack.replace(error.message, '').split(/\\\\n(.*)/s)[1];\\n  \\n  // Display the cause, if available\\n  if (error.cause) {\\n    errorCauseMessage.innerText = error.cause.message;\\n    errorCauseStack.innerText = error.cause.stack;\\n    errorCause.classList.remove('hidden');\\n  } else {\\n    errorCause.classList.add('hidden');\\n  }\\n  // Display the close button, if dismissible\\n  if (dismissable) {\\n    errorNotDismissible.classList.add('hidden');\\n    errorClose.classList.remove(\\\"hidden\\\");\\n  } else {\\n    errorNotDismissible.classList.remove('hidden');\\n    errorClose.classList.add(\\\"hidden\\\");\\n  }\\n  \\n  // Show the dialog\\n  errorDialog.classList.remove(\\\"hidden\\\");\\n}\\n\\nexport function reportCaughtError({error, cause, componentStack}) {\\n  reportError({ title: \\\"Caught Error\\\", error, componentStack,  dismissable: true});\\n}\\n\\nexport function reportUncaughtError({error, cause, componentStack}) {\\n  reportError({ title: \\\"Uncaught Error\\\", error, componentStack, dismissable: false });\\n}\\n\\nexport function reportRecoverableError({error, cause, componentStack}) {\\n  reportError({ title: \\\"Recoverable Error\\\", error, componentStack,  dismissable: true });\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/index.js active\",\"children\":\"import { createRoot } from \\\"react-dom/client\\\";\\nimport App from \\\"./App.js\\\";\\nimport {reportUncaughtError} from \\\"./reportError\\\";\\nimport \\\"./styles.css\\\";\\n\\nconst container = document.getElementById(\\\"root\\\");\\nconst root = createRoot(container, {\\n  onUncaughtError: (error, errorInfo) => {\\n    if (error.message !== 'Known error') {\\n      reportUncaughtError({\\n        error,\\n        componentStack: errorInfo.componentStack\\n      });\\n    }\\n  }\\n});\\nroot.render(<App />);\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function App() {\\n  const [throwError, setThrowError] = useState(false);\\n  \\n  if (throwError) {\\n    foo.bar = 'baz';\\n  }\\n  \\n  return (\\n    <div>\\n      <span>This error shows the error dialog:</span>\\n      <button onClick={() => setThrowError(true)}>\\n        Throw error\\n      </button>\\n    </div>\\n  );\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"164\",{\"children\":[\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"displaying-error-boundary-errors\",\"children\":\"Displaying Error Boundary errors \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"By default, React will log all errors caught by an Error Boundary to \",[\"$r\",\"code\",null,{\"children\":\"console.error\"}],\". To override this behavior, you can provide the optional \",[\"$r\",\"code\",null,{\"children\":\"onCaughtError\"}],\" root option to handle errors caught by an \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Component#catching-rendering-errors-with-an-error-boundary\",\"children\":\"Error Boundary\"}],\":\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[1, 6, \\\"onCaughtError\\\"], [2, 6, \\\"error\\\", 1], [3, 6, \\\"errorInfo\\\"], [4, 10, \\\"componentStack\\\"]]\",\"children\":\"import { createRoot } from 'react-dom/client';\\n\\nconst root = createRoot(\\n  document.getElementById('root'),\\n  {\\n    onCaughtError: (error, errorInfo) => {\\n      console.error(\\n        'Caught error',\\n        error,\\n        errorInfo.componentStack\\n      );\\n    }\\n  }\\n);\\nroot.render(<App />);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"The \",[\"$r\",\"CodeStep\",null,{\"step\":1,\"children\":\"onCaughtError\"}],\" option is a function called with two arguments:\"]}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"The \",[\"$r\",\"CodeStep\",null,{\"step\":2,\"children\":\"error\"}],\" that was caught by the boundary.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"An \",[\"$r\",\"CodeStep\",null,{\"step\":3,\"children\":\"errorInfo\"}],\" object that contains the \",[\"$r\",\"CodeStep\",null,{\"step\":4,\"children\":\"componentStack\"}],\" of the error.\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"You can use the \",[\"$r\",\"code\",null,{\"children\":\"onCaughtError\"}],\" root option to display error dialogs or filter known errors from logging:\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-html\",\"meta\":\"index.html hidden\",\"children\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My app</title>\\n</head>\\n<body>\\n<!--\\n  Error dialog in raw HTML\\n  since an error in the React app may crash.\\n-->\\n<div id=\\\"error-dialog\\\" class=\\\"hidden\\\">\\n  <h1 id=\\\"error-title\\\" class=\\\"text-red\\\"></h1>\\n  <h3>\\n    <pre id=\\\"error-message\\\"></pre>\\n  </h3>\\n  <p>\\n    <pre id=\\\"error-body\\\"></pre>\\n  </p>\\n  <h4 class=\\\"-mb-20\\\">This error occurred at:</h4>\\n  <pre id=\\\"error-component-stack\\\" class=\\\"nowrap\\\"></pre>\\n  <h4 class=\\\"mb-0\\\">Call stack:</h4>\\n  <pre id=\\\"error-stack\\\" class=\\\"nowrap\\\"></pre>\\n  <div id=\\\"error-cause\\\">\\n    <h4 class=\\\"mb-0\\\">Caused by:</h4>\\n    <pre id=\\\"error-cause-message\\\"></pre>\\n    <pre id=\\\"error-cause-stack\\\" class=\\\"nowrap\\\"></pre>\\n  </div>\\n  <button\\n    id=\\\"error-close\\\"\\n    class=\\\"mb-10\\\"\\n    onclick=\\\"document.getElementById('error-dialog').classList.add('hidden')\\\"\\n  >\\n    Close\\n  </button>\\n  <h3 id=\\\"error-not-dismissible\\\">This error is not dismissible.</h3>\\n</div>\\n<!-- This is the DOM node -->\\n<div id=\\\"root\\\"></div>\\n</body>\\n</html>\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"meta\":\"src/styles.css active\",\"children\":\"label, button { display: block; margin-bottom: 20px; }\\nhtml, body { min-height: 300px; }\\n\\n#error-dialog {\\n  position: absolute;\\n  top: 0;\\n  right: 0;\\n  bottom: 0;\\n  left: 0;\\n  background-color: white;\\n  padding: 15px;\\n  opacity: 0.9;\\n  text-wrap: wrap;\\n  overflow: scroll;\\n}\\n\\n.text-red {\\n  color: red;\\n}\\n\\n.-mb-20 {\\n  margin-bottom: -20px;\\n}\\n\\n.mb-0 {\\n  margin-bottom: 0;\\n}\\n\\n.mb-10 {\\n  margin-bottom: 10px;\\n}\\n\\npre {\\n  text-wrap: wrap;\\n}\\n\\npre.nowrap {\\n  text-wrap: nowrap;\\n}\\n\\n.hidden {\\n display: none;  \\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/reportError.js hidden\",\"children\":\"function reportError({ title, error, componentStack, dismissable }) {\\n  const errorDialog = document.getElementById(\\\"error-dialog\\\");\\n  const errorTitle = document.getElementById(\\\"error-title\\\");\\n  const errorMessage = document.getElementById(\\\"error-message\\\");\\n  const errorBody = document.getElementById(\\\"error-body\\\");\\n  const errorComponentStack = document.getElementById(\\\"error-component-stack\\\");\\n  const errorStack = document.getElementById(\\\"error-stack\\\");\\n  const errorClose = document.getElementById(\\\"error-close\\\");\\n  const errorCause = document.getElementById(\\\"error-cause\\\");\\n  const errorCauseMessage = document.getElementById(\\\"error-cause-message\\\");\\n  const errorCauseStack = document.getElementById(\\\"error-cause-stack\\\");\\n  const errorNotDismissible = document.getElementById(\\\"error-not-dismissible\\\");\\n\\n  // Set the title\\n  errorTitle.innerText = title;\\n\\n  // Display error message and body\\n  const [heading, body] = error.message.split(/\\\\n(.*)/s);\\n  errorMessage.innerText = heading;\\n  if (body) {\\n    errorBody.innerText = body;\\n  } else {\\n    errorBody.innerText = '';\\n  }\\n\\n  // Display component stack\\n  errorComponentStack.innerText = componentStack;\\n\\n  // Display the call stack\\n  // Since we already displayed the message, strip it, and the first Error: line.\\n  errorStack.innerText = error.stack.replace(error.message, '').split(/\\\\n(.*)/s)[1];\\n\\n  // Display the cause, if available\\n  if (error.cause) {\\n    errorCauseMessage.innerText = error.cause.message;\\n    errorCauseStack.innerText = error.cause.stack;\\n    errorCause.classList.remove('hidden');\\n  } else {\\n    errorCause.classList.add('hidden');\\n  }\\n  // Display the close button, if dismissible\\n  if (dismissable) {\\n    errorNotDismissible.classList.add('hidden');\\n    errorClose.classList.remove(\\\"hidden\\\");\\n  } else {\\n    errorNotDismissible.classList.remove('hidden');\\n    errorClose.classList.add(\\\"hidden\\\");\\n  }\\n\\n  // Show the dialog\\n  errorDialog.classList.remove(\\\"hidden\\\");\\n}\\n\\nexport function reportCaughtError({error, cause, componentStack}) {\\n  reportError({ title: \\\"Caught Error\\\", error, componentStack,  dismissable: true});\\n}\\n\\nexport function reportUncaughtError({error, cause, componentStack}) {\\n  reportError({ title: \\\"Uncaught Error\\\", error, componentStack, dismissable: false });\\n}\\n\\nexport function reportRecoverableError({error, cause, componentStack}) {\\n  reportError({ title: \\\"Recoverable Error\\\", error, componentStack,  dismissable: true });\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/index.js active\",\"children\":\"import { createRoot } from \\\"react-dom/client\\\";\\nimport App from \\\"./App.js\\\";\\nimport {reportCaughtError} from \\\"./reportError\\\";\\nimport \\\"./styles.css\\\";\\n\\nconst container = document.getElementById(\\\"root\\\");\\nconst root = createRoot(container, {\\n  onCaughtError: (error, errorInfo) => {\\n    if (error.message !== 'Known error') {\\n      reportCaughtError({\\n        error, \\n        componentStack: errorInfo.componentStack,\\n      });\\n    }\\n  }\\n});\\nroot.render(<App />);\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\nimport { ErrorBoundary } from \\\"react-error-boundary\\\";\\n\\nexport default function App() {\\n  const [error, setError] = useState(null);\\n  \\n  function handleUnknown() {\\n    setError(\\\"unknown\\\");\\n  }\\n\\n  function handleKnown() {\\n    setError(\\\"known\\\");\\n  }\\n  \\n  return (\\n    <>\\n      <ErrorBoundary\\n        fallbackRender={fallbackRender}\\n        onReset={(details) => {\\n          setError(null);\\n        }}\\n      >\\n        {error != null && <Throw error={error} />}\\n        <span>This error will not show the error dialog:</span>\\n        <button onClick={handleKnown}>\\n          Throw known error\\n        </button>\\n        <span>This error will show the error dialog:</span>\\n        <button onClick={handleUnknown}>\\n          Throw unknown error\\n        </button>\\n      </ErrorBoundary>\\n      \\n    </>\\n  );\\n}\\n\\nfunction fallbackRender({ resetErrorBoundary }) {\\n  return (\\n    <div role=\\\"alert\\\">\\n      <h3>Error Boundary</h3>\\n      <p>Something went wrong.</p>\\n      <button onClick={resetErrorBoundary}>Reset</button>\\n    </div>\\n  );\\n}\\n\\nfunction Throw({error}) {\\n  if (error === \\\"known\\\") {\\n    throw new Error('Known error')\\n  } else {\\n    foo.bar = 'baz';\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json hidden\",\"children\":\"{\\n  \\\"dependencies\\\": {\\n    \\\"react\\\": \\\"19.0.0-rc-3edc000d-20240926\\\",\\n    \\\"react-dom\\\": \\\"19.0.0-rc-3edc000d-20240926\\\",\\n    \\\"react-scripts\\\": \\\"^5.0.0\\\",\\n    \\\"react-error-boundary\\\": \\\"4.0.3\\\"\\n  },\\n  \\\"main\\\": \\\"/index.js\\\"\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"178\",{\"children\":[\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"displaying-a-dialog-for-recoverable-errors\",\"children\":\"Displaying a dialog for recoverable errors \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"React may automatically render a component a second time to attempt to recover from an error thrown in render. If successful, React will log a recoverable error to the console to notify the developer. To override this behavior, you can provide the optional \",[\"$r\",\"code\",null,{\"children\":\"onRecoverableError\"}],\" root option:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[1, 6, \\\"onRecoverableError\\\"], [2, 6, \\\"error\\\", 1], [3, 10, \\\"error.cause\\\"], [4, 6, \\\"errorInfo\\\"], [5, 11, \\\"componentStack\\\"]]\",\"children\":\"import { createRoot } from 'react-dom/client';\\n\\nconst root = createRoot(\\n  document.getElementById('root'),\\n  {\\n    onRecoverableError: (error, errorInfo) => {\\n      console.error(\\n        'Recoverable error',\\n        error,\\n        error.cause,\\n        errorInfo.componentStack,\\n      );\\n    }\\n  }\\n);\\nroot.render(<App />);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"The \",[\"$r\",\"CodeStep\",null,{\"step\":1,\"children\":\"onRecoverableError\"}],\" option is a function called with two arguments:\"]}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"The \",[\"$r\",\"CodeStep\",null,{\"step\":2,\"children\":\"error\"}],\" that React throws. Some errors may include the original cause as \",[\"$r\",\"CodeStep\",null,{\"step\":3,\"children\":\"error.cause\"}],\".\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"An \",[\"$r\",\"CodeStep\",null,{\"step\":4,\"children\":\"errorInfo\"}],\" object that contains the \",[\"$r\",\"CodeStep\",null,{\"step\":5,\"children\":\"componentStack\"}],\" of the error.\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"You can use the \",[\"$r\",\"code\",null,{\"children\":\"onRecoverableError\"}],\" root option to display error dialogs:\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-html\",\"meta\":\"index.html hidden\",\"children\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n  <title>My app</title>\\n</head>\\n<body>\\n<!--\\n  Error dialog in raw HTML\\n  since an error in the React app may crash.\\n-->\\n<div id=\\\"error-dialog\\\" class=\\\"hidden\\\">\\n  <h1 id=\\\"error-title\\\" class=\\\"text-red\\\"></h1>\\n  <h3>\\n    <pre id=\\\"error-message\\\"></pre>\\n  </h3>\\n  <p>\\n    <pre id=\\\"error-body\\\"></pre>\\n  </p>\\n  <h4 class=\\\"-mb-20\\\">This error occurred at:</h4>\\n  <pre id=\\\"error-component-stack\\\" class=\\\"nowrap\\\"></pre>\\n  <h4 class=\\\"mb-0\\\">Call stack:</h4>\\n  <pre id=\\\"error-stack\\\" class=\\\"nowrap\\\"></pre>\\n  <div id=\\\"error-cause\\\">\\n    <h4 class=\\\"mb-0\\\">Caused by:</h4>\\n    <pre id=\\\"error-cause-message\\\"></pre>\\n    <pre id=\\\"error-cause-stack\\\" class=\\\"nowrap\\\"></pre>\\n  </div>\\n  <button\\n    id=\\\"error-close\\\"\\n    class=\\\"mb-10\\\"\\n    onclick=\\\"document.getElementById('error-dialog').classList.add('hidden')\\\"\\n  >\\n    Close\\n  </button>\\n  <h3 id=\\\"error-not-dismissible\\\">This error is not dismissible.</h3>\\n</div>\\n<!-- This is the DOM node -->\\n<div id=\\\"root\\\"></div>\\n</body>\\n</html>\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"meta\":\"src/styles.css active\",\"children\":\"label, button { display: block; margin-bottom: 20px; }\\nhtml, body { min-height: 300px; }\\n\\n#error-dialog {\\n  position: absolute;\\n  top: 0;\\n  right: 0;\\n  bottom: 0;\\n  left: 0;\\n  background-color: white;\\n  padding: 15px;\\n  opacity: 0.9;\\n  text-wrap: wrap;\\n  overflow: scroll;\\n}\\n\\n.text-red {\\n  color: red;\\n}\\n\\n.-mb-20 {\\n  margin-bottom: -20px;\\n}\\n\\n.mb-0 {\\n  margin-bottom: 0;\\n}\\n\\n.mb-10 {\\n  margin-bottom: 10px;\\n}\\n\\npre {\\n  text-wrap: wrap;\\n}\\n\\npre.nowrap {\\n  text-wrap: nowrap;\\n}\\n\\n.hidden {\\n display: none;  \\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/reportError.js hidden\",\"children\":\"function reportError({ title, error, componentStack, dismissable }) {\\n  const errorDialog = document.getElementById(\\\"error-dialog\\\");\\n  const errorTitle = document.getElementById(\\\"error-title\\\");\\n  const errorMessage = document.getElementById(\\\"error-message\\\");\\n  const errorBody = document.getElementById(\\\"error-body\\\");\\n  const errorComponentStack = document.getElementById(\\\"error-component-stack\\\");\\n  const errorStack = document.getElementById(\\\"error-stack\\\");\\n  const errorClose = document.getElementById(\\\"error-close\\\");\\n  const errorCause = document.getElementById(\\\"error-cause\\\");\\n  const errorCauseMessage = document.getElementById(\\\"error-cause-message\\\");\\n  const errorCauseStack = document.getElementById(\\\"error-cause-stack\\\");\\n  const errorNotDismissible = document.getElementById(\\\"error-not-dismissible\\\");\\n\\n  // Set the title\\n  errorTitle.innerText = title;\\n\\n  // Display error message and body\\n  const [heading, body] = error.message.split(/\\\\n(.*)/s);\\n  errorMessage.innerText = heading;\\n  if (body) {\\n    errorBody.innerText = body;\\n  } else {\\n    errorBody.innerText = '';\\n  }\\n\\n  // Display component stack\\n  errorComponentStack.innerText = componentStack;\\n\\n  // Display the call stack\\n  // Since we already displayed the message, strip it, and the first Error: line.\\n  errorStack.innerText = error.stack.replace(error.message, '').split(/\\\\n(.*)/s)[1];\\n\\n  // Display the cause, if available\\n  if (error.cause) {\\n    errorCauseMessage.innerText = error.cause.message;\\n    errorCauseStack.innerText = error.cause.stack;\\n    errorCause.classList.remove('hidden');\\n  } else {\\n    errorCause.classList.add('hidden');\\n  }\\n  // Display the close button, if dismissible\\n  if (dismissable) {\\n    errorNotDismissible.classList.add('hidden');\\n    errorClose.classList.remove(\\\"hidden\\\");\\n  } else {\\n    errorNotDismissible.classList.remove('hidden');\\n    errorClose.classList.add(\\\"hidden\\\");\\n  }\\n\\n  // Show the dialog\\n  errorDialog.classList.remove(\\\"hidden\\\");\\n}\\n\\nexport function reportCaughtError({error, cause, componentStack}) {\\n  reportError({ title: \\\"Caught Error\\\", error, componentStack,  dismissable: true});\\n}\\n\\nexport function reportUncaughtError({error, cause, componentStack}) {\\n  reportError({ title: \\\"Uncaught Error\\\", error, componentStack, dismissable: false });\\n}\\n\\nexport function reportRecoverableError({error, cause, componentStack}) {\\n  reportError({ title: \\\"Recoverable Error\\\", error, componentStack,  dismissable: true });\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/index.js active\",\"children\":\"import { createRoot } from \\\"react-dom/client\\\";\\nimport App from \\\"./App.js\\\";\\nimport {reportRecoverableError} from \\\"./reportError\\\";\\nimport \\\"./styles.css\\\";\\n\\nconst container = document.getElementById(\\\"root\\\");\\nconst root = createRoot(container, {\\n  onRecoverableError: (error, errorInfo) => {\\n    reportRecoverableError({\\n      error,\\n      cause: error.cause,\\n      componentStack: errorInfo.componentStack,\\n    });\\n  }\\n});\\nroot.render(<App />);\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\nimport { ErrorBoundary } from \\\"react-error-boundary\\\";\\n\\n// 🚩 Bug: Never do this. This will force an error.\\nlet errorThrown = false;\\nexport default function App() {\\n  return (\\n    <>\\n      <ErrorBoundary\\n        fallbackRender={fallbackRender}\\n      >\\n        {!errorThrown && <Throw />}\\n        <p>This component threw an error, but recovered during a second render.</p>\\n        <p>Since it recovered, no Error Boundary was shown, but <code>onRecoverableError</code> was used to show an error dialog.</p>\\n      </ErrorBoundary>\\n      \\n    </>\\n  );\\n}\\n\\nfunction fallbackRender() {\\n  return (\\n    <div role=\\\"alert\\\">\\n      <h3>Error Boundary</h3>\\n      <p>Something went wrong.</p>\\n    </div>\\n  );\\n}\\n\\nfunction Throw({error}) {\\n  // Simulate an external value changing during concurrent render.\\n  errorThrown = true;\\n  foo.bar = 'baz';\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json hidden\",\"children\":\"{\\n  \\\"dependencies\\\": {\\n    \\\"react\\\": \\\"19.0.0-rc-3edc000d-20240926\\\",\\n    \\\"react-dom\\\": \\\"19.0.0-rc-3edc000d-20240926\\\",\\n    \\\"react-scripts\\\": \\\"^5.0.0\\\",\\n    \\\"react-error-boundary\\\": \\\"4.0.3\\\"\\n  },\\n  \\\"main\\\": \\\"/index.js\\\"\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"last\",{\"children\":[\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"troubleshooting\",\"children\":\"Troubleshooting \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"ive-created-a-root-but-nothing-is-displayed\",\"children\":\"I’ve created a root, but nothing is displayed \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Make sure you haven’t forgotten to actually \",[\"$r\",\"em\",null,{\"children\":\"render\"}],\" your app into the root:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{5}\",\"children\":\"import { createRoot } from 'react-dom/client';\\nimport App from './App.js';\\n\\nconst root = createRoot(document.getElementById('root'));\\nroot.render(<App />);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"Until you do that, nothing is displayed.\"}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"im-getting-an-error-you-passed-a-second-argument-to-root-render\",\"children\":\"I’m getting an error: “You passed a second argument to root.render” \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"A common mistake is to pass the options for \",[\"$r\",\"code\",null,{\"children\":\"createRoot\"}],\" to \",[\"$r\",\"code\",null,{\"children\":\"root.render(...)\"}],\":\"]}],\"\\n\",[\"$r\",\"ConsoleBlock\",null,{\"level\":\"error\",\"children\":[\"$r\",\"p\",null,{\"children\":\"Warning: You passed a second argument to root.render(…) but it only accepts one argument.\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"To fix, pass the root options to \",[\"$r\",\"code\",null,{\"children\":\"createRoot(...)\"}],\", not \",[\"$r\",\"code\",null,{\"children\":\"root.render(...)\"}],\":\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2,5}\",\"children\":\"// 🚩 Wrong: root.render only takes one argument.\\nroot.render(App, {onUncaughtError});\\n\\n// ✅ Correct: pass options to createRoot.\\nconst root = createRoot(container, {onUncaughtError}); \\nroot.render(<App />);\\n\"}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"im-getting-an-error-target-container-is-not-a-dom-element\",\"children\":\"I’m getting an error: “Target container is not a DOM element” \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"This error means that whatever you’re passing to \",[\"$r\",\"code\",null,{\"children\":\"createRoot\"}],\" is not a DOM node.\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"If you’re not sure what’s happening, try logging it:\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2}\",\"children\":\"const domNode = document.getElementById('root');\\nconsole.log(domNode); // ???\\nconst root = createRoot(domNode);\\nroot.render(<App />);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"For example, if \",[\"$r\",\"code\",null,{\"children\":\"domNode\"}],\" is \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\", it means that \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"getElementById\"}]}],\" returned \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\". This will happen if there is no node in the document with the given ID at the time of your call. There may be a few reasons for it:\"]}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"The ID you’re looking for might differ from the ID you used in the HTML file. Check for typos!\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"Your bundle’s \",[\"$r\",\"code\",null,{\"children\":\"<script>\"}],\" tag cannot “see” any DOM nodes that appear \",[\"$r\",\"em\",null,{\"children\":\"after\"}],\" it in the HTML.\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Another common way to get this error is to write \",[\"$r\",\"code\",null,{\"children\":\"createRoot(<App />)\"}],\" instead of \",[\"$r\",\"code\",null,{\"children\":\"createRoot(domNode)\"}],\".\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"im-getting-an-error-functions-are-not-valid-as-a-react-child\",\"children\":\"I’m getting an error: “Functions are not valid as a React child.” \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"This error means that whatever you’re passing to \",[\"$r\",\"code\",null,{\"children\":\"root.render\"}],\" is not a React component.\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"This may happen if you call \",[\"$r\",\"code\",null,{\"children\":\"root.render\"}],\" with \",[\"$r\",\"code\",null,{\"children\":\"Component\"}],\" instead of \",[\"$r\",\"code\",null,{\"children\":\"<Component />\"}],\":\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2,5}\",\"children\":\"// 🚩 Wrong: App is a function, not a Component.\\nroot.render(App);\\n\\n// ✅ Correct: <App /> is a component.\\nroot.render(<App />);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Or if you pass a function to \",[\"$r\",\"code\",null,{\"children\":\"root.render\"}],\", instead of the result of calling it:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2,5}\",\"children\":\"// 🚩 Wrong: createApp is a function, not a component.\\nroot.render(createApp);\\n\\n// ✅ Correct: call createApp to return a component.\\nroot.render(createApp());\\n\"}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"my-server-rendered-html-gets-re-created-from-scratch\",\"children\":\"My server-rendered HTML gets re-created from scratch \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"If your app is server-rendered and includes the initial HTML generated by React, you might notice that creating a root and calling \",[\"$r\",\"code\",null,{\"children\":\"root.render\"}],\" deletes all that HTML, and then re-creates all the DOM nodes from scratch. This can be slower, resets focus and scroll positions, and may lose other user input.\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Server-rendered apps must use \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/client/hydrateRoot\",\"children\":[\"$r\",\"code\",null,{\"children\":\"hydrateRoot\"}]}],\" instead of \",[\"$r\",\"code\",null,{\"children\":\"createRoot\"}],\":\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{1,4-7}\",\"children\":\"import { hydrateRoot } from 'react-dom/client';\\nimport App from './App.js';\\n\\nhydrateRoot(\\n  document.getElementById('root'),\\n  <App />\\n);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Note that its API is different. In particular, usually there will be no further \",[\"$r\",\"code\",null,{\"children\":\"root.render\"}],\" call.\"]}]]}]]","meta":{"title":"createRoot"},"languages":null},"__N_SSG":true}