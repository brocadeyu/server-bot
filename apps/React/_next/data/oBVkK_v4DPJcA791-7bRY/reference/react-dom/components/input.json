{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"Overview\",\"depth\":2},{\"url\":\"#reference\",\"depth\":2,\"text\":\"Reference \"},{\"url\":\"#input\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"<input>\"}],\" \"]},{\"url\":\"#usage\",\"depth\":2,\"text\":\"Usage \"},{\"url\":\"#displaying-inputs-of-different-types\",\"depth\":3,\"text\":\"Displaying inputs of different types \"},{\"url\":\"#providing-a-label-for-an-input\",\"depth\":3,\"text\":\"Providing a label for an input \"},{\"url\":\"#providing-an-initial-value-for-an-input\",\"depth\":3,\"text\":\"Providing an initial value for an input \"},{\"url\":\"#reading-the-input-values-when-submitting-a-form\",\"depth\":3,\"text\":\"Reading the input values when submitting a form \"},{\"url\":\"#controlling-an-input-with-a-state-variable\",\"depth\":3,\"text\":\"Controlling an input with a state variable \"},{\"url\":\"#optimizing-re-rendering-on-every-keystroke\",\"depth\":3,\"text\":\"Optimizing re-rendering on every keystroke \"},{\"url\":\"#troubleshooting\",\"depth\":2,\"text\":\"Troubleshooting \"},{\"url\":\"#my-text-input-doesnt-update-when-i-type-into-it\",\"depth\":3,\"text\":\"My text input doesn’t update when I type into it \"},{\"url\":\"#my-checkbox-doesnt-update-when-i-click-on-it\",\"depth\":3,\"text\":\"My checkbox doesn’t update when I click on it \"},{\"url\":\"#my-input-caret-jumps-to-the-beginning-on-every-keystroke\",\"depth\":3,\"text\":\"My input caret jumps to the beginning on every keystroke \"},{\"url\":\"#im-getting-an-error-a-component-is-changing-an-uncontrolled-input-to-be-controlled\",\"depth\":3,\"text\":\"I’m getting an error: “A component is changing an uncontrolled input to be controlled” \"}]","content":"[[\"$r\",\"MaxWidth\",\"48\",{\"children\":[[\"$r\",\"Intro\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[\"The \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"built-in browser \",[\"$r\",\"code\",null,{\"children\":\"<input>\"}],\" component\"]}],\" lets you render different kinds of form inputs.\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"<input />\\n\"}]}]]}],\"\\n\",[\"$r\",\"InlineToc\",null,{}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"reference\",\"children\":\"Reference \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"input\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"<input>\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"To display an input, render the \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"built-in browser \",[\"$r\",\"code\",null,{\"children\":\"<input>\"}]]}],\" component.\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"<input name=\\\"myInput\\\" />\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"#usage\",\"children\":\"See more examples below.\"}]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"props\",\"children\":\"Props \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"<input>\"}],\" supports all \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/components/common#props\",\"children\":\"common element props.\"}]]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#formaction\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"formAction\"}]}],\": A string or function. Overrides the parent \",[\"$r\",\"code\",null,{\"children\":\"<form action>\"}],\" for \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"submit\\\"\"}],\" and \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"image\\\"\"}],\". When a URL is passed to \",[\"$r\",\"code\",null,{\"children\":\"action\"}],\" the form will behave like a standard HTML form. When a function is passed to \",[\"$r\",\"code\",null,{\"children\":\"formAction\"}],\" the function will handle the form submission. See \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/components/form#props\",\"children\":[\"$r\",\"code\",null,{\"children\":\"<form action>\"}]}],\".\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"You can \",[\"$r\",\"a\",null,{\"href\":\"#controlling-an-input-with-a-state-variable\",\"children\":\"make an input controlled\"}],\" by passing one of these props:\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement#checked\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"checked\"}]}],\": A boolean. For a checkbox input or a radio button, controls whether it is selected.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement#value\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"value\"}]}],\": A string. For a text input, controls its text. (For a radio button, specifies its form data.)\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"When you pass either of them, you must also pass an \",[\"$r\",\"code\",null,{\"children\":\"onChange\"}],\" handler that updates the passed value.\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"These \",[\"$r\",\"code\",null,{\"children\":\"<input>\"}],\" props are only relevant for uncontrolled inputs:\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement#defaultChecked\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"defaultChecked\"}]}],\": A boolean. Specifies \",[\"$r\",\"a\",null,{\"href\":\"#providing-an-initial-value-for-an-input\",\"children\":\"the initial value\"}],\" for \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"checkbox\\\"\"}],\" and \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"radio\\\"\"}],\" inputs.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement#defaultValue\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"defaultValue\"}]}],\": A string. Specifies \",[\"$r\",\"a\",null,{\"href\":\"#providing-an-initial-value-for-an-input\",\"children\":\"the initial value\"}],\" for a text input.\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"These \",[\"$r\",\"code\",null,{\"children\":\"<input>\"}],\" props are relevant both for uncontrolled and controlled inputs:\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#accept\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"accept\"}]}],\": A string. Specifies which filetypes are accepted by a \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"file\\\"\"}],\" input.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#alt\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"alt\"}]}],\": A string. Specifies the alternative image text for a \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"image\\\"\"}],\" input.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#capture\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"capture\"}]}],\": A string. Specifies the media (microphone, video, or camera) captured by a \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"file\\\"\"}],\" input.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#autocomplete\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"autoComplete\"}]}],\": A string. Specifies one of the possible \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete#values\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"autocomplete behaviors.\"}]]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#autofocus\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"autoFocus\"}]}],\": A boolean. If \",[\"$r\",\"code\",null,{\"children\":\"true\"}],\", React will focus the element on mount.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#dirname\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"dirname\"}]}],\": A string. Specifies the form field name for the element’s directionality.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#disabled\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"disabled\"}]}],\": A boolean. If \",[\"$r\",\"code\",null,{\"children\":\"true\"}],\", the input will not be interactive and will appear dimmed.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"children\"}],\": \",[\"$r\",\"code\",null,{\"children\":\"<input>\"}],\" does not accept children.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#form\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"form\"}]}],\": A string. Specifies the \",[\"$r\",\"code\",null,{\"children\":\"id\"}],\" of the \",[\"$r\",\"code\",null,{\"children\":\"<form>\"}],\" this input belongs to. If omitted, it’s the closest parent form.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#formaction\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"formAction\"}]}],\": A string. Overrides the parent \",[\"$r\",\"code\",null,{\"children\":\"<form action>\"}],\" for \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"submit\\\"\"}],\" and \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"image\\\"\"}],\".\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#formenctype\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"formEnctype\"}]}],\": A string. Overrides the parent \",[\"$r\",\"code\",null,{\"children\":\"<form enctype>\"}],\" for \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"submit\\\"\"}],\" and \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"image\\\"\"}],\".\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#formmethod\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"formMethod\"}]}],\": A string. Overrides the parent \",[\"$r\",\"code\",null,{\"children\":\"<form method>\"}],\" for \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"submit\\\"\"}],\" and \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"image\\\"\"}],\".\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#formnovalidate\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"formNoValidate\"}]}],\": A string. Overrides the parent \",[\"$r\",\"code\",null,{\"children\":\"<form noValidate>\"}],\" for \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"submit\\\"\"}],\" and \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"image\\\"\"}],\".\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#formtarget\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"formTarget\"}]}],\": A string. Overrides the parent \",[\"$r\",\"code\",null,{\"children\":\"<form target>\"}],\" for \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"submit\\\"\"}],\" and \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"image\\\"\"}],\".\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#height\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"height\"}]}],\": A string. Specifies the image height for \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"image\\\"\"}],\".\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#list\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"list\"}]}],\": A string. Specifies the \",[\"$r\",\"code\",null,{\"children\":\"id\"}],\" of the \",[\"$r\",\"code\",null,{\"children\":\"<datalist>\"}],\" with the autocomplete options.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#max\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"max\"}]}],\": A number. Specifies the maximum value of numerical and datetime inputs.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#maxlength\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"maxLength\"}]}],\": A number. Specifies the maximum length of text and other inputs.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#min\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"min\"}]}],\": A number. Specifies the minimum value of numerical and datetime inputs.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#minlength\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"minLength\"}]}],\": A number. Specifies the minimum length of text and other inputs.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#multiple\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"multiple\"}]}],\": A boolean. Specifies whether multiple values are allowed for \",[\"$r\",\"code\",null,{\"children\":\"<type=\\\"file\\\"\"}],\" and \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"email\\\"\"}],\".\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"name\"}]}],\": A string. Specifies the name for this input that’s \",[\"$r\",\"a\",null,{\"href\":\"#reading-the-input-values-when-submitting-a-form\",\"children\":\"submitted with the form.\"}]]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"onChange\"}],\": An \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/components/common#event-handler\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"Event\"}],\" handler\"]}],\" function. Required for \",[\"$r\",\"a\",null,{\"href\":\"#controlling-an-input-with-a-state-variable\",\"children\":\"controlled inputs.\"}],\" Fires immediately when the input’s value is changed by the user (for example, it fires on every keystroke). Behaves like the browser \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"input\"}],\" event.\"]}]]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"onChangeCapture\"}],\": A version of \",[\"$r\",\"code\",null,{\"children\":\"onChange\"}],\" that fires in the \",[\"$r\",\"a\",null,{\"href\":\"/learn/responding-to-events#capture-phase-events\",\"children\":\"capture phase.\"}]]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"onInput\"}]}],\": An \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/components/common#event-handler\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"Event\"}],\" handler\"]}],\" function. Fires immediately when the value is changed by the user. For historical reasons, in React it is idiomatic to use \",[\"$r\",\"code\",null,{\"children\":\"onChange\"}],\" instead which works similarly.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"onInputCapture\"}],\": A version of \",[\"$r\",\"code\",null,{\"children\":\"onInput\"}],\" that fires in the \",[\"$r\",\"a\",null,{\"href\":\"/learn/responding-to-events#capture-phase-events\",\"children\":\"capture phase.\"}]]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/invalid_event\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"onInvalid\"}]}],\": An \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/components/common#event-handler\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"Event\"}],\" handler\"]}],\" function. Fires if an input fails validation on form submit. Unlike the built-in \",[\"$r\",\"code\",null,{\"children\":\"invalid\"}],\" event, the React \",[\"$r\",\"code\",null,{\"children\":\"onInvalid\"}],\" event bubbles.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"onInvalidCapture\"}],\": A version of \",[\"$r\",\"code\",null,{\"children\":\"onInvalid\"}],\" that fires in the \",[\"$r\",\"a\",null,{\"href\":\"/learn/responding-to-events#capture-phase-events\",\"children\":\"capture phase.\"}]]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/select_event\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"onSelect\"}]}],\": An \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/components/common#event-handler\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"Event\"}],\" handler\"]}],\" function. Fires after the selection inside the \",[\"$r\",\"code\",null,{\"children\":\"<input>\"}],\" changes. React extends the \",[\"$r\",\"code\",null,{\"children\":\"onSelect\"}],\" event to also fire for empty selection and on edits (which may affect the selection).\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"onSelectCapture\"}],\": A version of \",[\"$r\",\"code\",null,{\"children\":\"onSelect\"}],\" that fires in the \",[\"$r\",\"a\",null,{\"href\":\"/learn/responding-to-events#capture-phase-events\",\"children\":\"capture phase.\"}]]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#pattern\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"pattern\"}]}],\": A string. Specifies the pattern that the \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" must match.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#placeholder\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"placeholder\"}]}],\": A string. Displayed in a dimmed color when the input value is empty.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#readonly\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"readOnly\"}]}],\": A boolean. If \",[\"$r\",\"code\",null,{\"children\":\"true\"}],\", the input is not editable by the user.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#required\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"required\"}]}],\": A boolean. If \",[\"$r\",\"code\",null,{\"children\":\"true\"}],\", the value must be provided for the form to submit.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#size\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"size\"}]}],\": A number. Similar to setting width, but the unit depends on the control.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#src\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"src\"}]}],\": A string. Specifies the image source for a \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"image\\\"\"}],\" input.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#step\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"step\"}]}],\": A positive number or an \",[\"$r\",\"code\",null,{\"children\":\"'any'\"}],\" string. Specifies the distance between valid values.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#type\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"type\"}]}],\": A string. One of the \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#input_types\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"input types.\"}]]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#width\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"width\"}]}],\":  A string. Specifies the image width for a \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"image\\\"\"}],\" input.\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"caveats\",\"children\":\"Caveats \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"Checkboxes need \",[\"$r\",\"code\",null,{\"children\":\"checked\"}],\" (or \",[\"$r\",\"code\",null,{\"children\":\"defaultChecked\"}],\"), not \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" (or \",[\"$r\",\"code\",null,{\"children\":\"defaultValue\"}],\").\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"If a text input receives a string \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" prop, it will be \",[\"$r\",\"a\",null,{\"href\":\"#controlling-an-input-with-a-state-variable\",\"children\":\"treated as controlled.\"}]]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"If a checkbox or a radio button receives a boolean \",[\"$r\",\"code\",null,{\"children\":\"checked\"}],\" prop, it will be \",[\"$r\",\"a\",null,{\"href\":\"#controlling-an-input-with-a-state-variable\",\"children\":\"treated as controlled.\"}]]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"An input can’t be both controlled and uncontrolled at the same time.\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"An input cannot switch between being controlled or uncontrolled over its lifetime.\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"Every controlled input needs an \",[\"$r\",\"code\",null,{\"children\":\"onChange\"}],\" event handler that synchronously updates its backing value.\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"usage\",\"children\":\"Usage \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"displaying-inputs-of-different-types\",\"children\":\"Displaying inputs of different types \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"To display an input, render an \",[\"$r\",\"code\",null,{\"children\":\"<input>\"}],\" component. By default, it will be a text input. You can pass \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"checkbox\\\"\"}],\" for a checkbox, \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"radio\\\"\"}],\" for a radio button, \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#input_types\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"or one of the other input types.\"}]]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export default function MyForm() {\\n  return (\\n    <>\\n      <label>\\n        Text input: <input name=\\\"myInput\\\" />\\n      </label>\\n      <hr />\\n      <label>\\n        Checkbox: <input type=\\\"checkbox\\\" name=\\\"myCheckbox\\\" />\\n      </label>\\n      <hr />\\n      <p>\\n        Radio buttons:\\n        <label>\\n          <input type=\\\"radio\\\" name=\\\"myRadio\\\" value=\\\"option1\\\" />\\n          Option 1\\n        </label>\\n        <label>\\n          <input type=\\\"radio\\\" name=\\\"myRadio\\\" value=\\\"option2\\\" />\\n          Option 2\\n        </label>\\n        <label>\\n          <input type=\\\"radio\\\" name=\\\"myRadio\\\" value=\\\"option3\\\" />\\n          Option 3\\n        </label>\\n      </p>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label { display: block; }\\ninput { margin: 5px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"58\",{\"children\":[\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"providing-a-label-for-an-input\",\"children\":\"Providing a label for an input \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Typically, you will place every \",[\"$r\",\"code\",null,{\"children\":\"<input>\"}],\" inside a \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"<label>\"}]}],\" tag. This tells the browser that this label is associated with that input. When the user clicks the label, the browser will automatically focus the input. It’s also essential for accessibility: a screen reader will announce the label caption when the user focuses the associated input.\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"If you can’t nest \",[\"$r\",\"code\",null,{\"children\":\"<input>\"}],\" into a \",[\"$r\",\"code\",null,{\"children\":\"<label>\"}],\", associate them by passing the same ID to \",[\"$r\",\"code\",null,{\"children\":\"<input id>\"}],\" and \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/htmlFor\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"<label htmlFor>\"}],\".\"]}],\" To avoid conflicts between multiple instances of one component, generate such an ID with \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useId\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"useId\"}],\".\"]}]]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useId } from 'react';\\n\\nexport default function Form() {\\n  const ageInputId = useId();\\n  return (\\n    <>\\n      <label>\\n        Your first name:\\n        <input name=\\\"firstName\\\" />\\n      </label>\\n      <hr />\\n      <label htmlFor={ageInputId}>Your age:</label>\\n      <input id={ageInputId} name=\\\"age\\\" type=\\\"number\\\" />\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"input { margin: 5px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"66\",{\"children\":[\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"providing-an-initial-value-for-an-input\",\"children\":\"Providing an initial value for an input \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"You can optionally specify the initial value for any input. Pass it as the \",[\"$r\",\"code\",null,{\"children\":\"defaultValue\"}],\" string for text inputs. Checkboxes and radio buttons should specify the initial value with the \",[\"$r\",\"code\",null,{\"children\":\"defaultChecked\"}],\" boolean instead.\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export default function MyForm() {\\n  return (\\n    <>\\n      <label>\\n        Text input: <input name=\\\"myInput\\\" defaultValue=\\\"Some initial value\\\" />\\n      </label>\\n      <hr />\\n      <label>\\n        Checkbox: <input type=\\\"checkbox\\\" name=\\\"myCheckbox\\\" defaultChecked={true} />\\n      </label>\\n      <hr />\\n      <p>\\n        Radio buttons:\\n        <label>\\n          <input type=\\\"radio\\\" name=\\\"myRadio\\\" value=\\\"option1\\\" />\\n          Option 1\\n        </label>\\n        <label>\\n          <input\\n            type=\\\"radio\\\"\\n            name=\\\"myRadio\\\"\\n            value=\\\"option2\\\"\\n            defaultChecked={true} \\n          />\\n          Option 2\\n        </label>\\n        <label>\\n          <input type=\\\"radio\\\" name=\\\"myRadio\\\" value=\\\"option3\\\" />\\n          Option 3\\n        </label>\\n      </p>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label { display: block; }\\ninput { margin: 5px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"74\",{\"children\":[\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"reading-the-input-values-when-submitting-a-form\",\"children\":\"Reading the input values when submitting a form \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Add a \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"<form>\"}]}],\" around your inputs with a \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"<button type=\\\"submit\\\">\"}]}],\" inside. It will call your \",[\"$r\",\"code\",null,{\"children\":\"<form onSubmit>\"}],\" event handler. By default, the browser will send the form data to the current URL and refresh the page. You can override that behavior by calling \",[\"$r\",\"code\",null,{\"children\":\"e.preventDefault()\"}],\". Read the form data with \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/API/FormData\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"new FormData(e.target)\"}]}],\".\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export default function MyForm() {\\n  function handleSubmit(e) {\\n    // Prevent the browser from reloading the page\\n    e.preventDefault();\\n\\n    // Read the form data\\n    const form = e.target;\\n    const formData = new FormData(form);\\n\\n    // You can pass formData as a fetch body directly:\\n    fetch('/some-api', { method: form.method, body: formData });\\n\\n    // Or you can work with it as a plain object:\\n    const formJson = Object.fromEntries(formData.entries());\\n    console.log(formJson);\\n  }\\n\\n  return (\\n    <form method=\\\"post\\\" onSubmit={handleSubmit}>\\n      <label>\\n        Text input: <input name=\\\"myInput\\\" defaultValue=\\\"Some initial value\\\" />\\n      </label>\\n      <hr />\\n      <label>\\n        Checkbox: <input type=\\\"checkbox\\\" name=\\\"myCheckbox\\\" defaultChecked={true} />\\n      </label>\\n      <hr />\\n      <p>\\n        Radio buttons:\\n        <label><input type=\\\"radio\\\" name=\\\"myRadio\\\" value=\\\"option1\\\" /> Option 1</label>\\n        <label><input type=\\\"radio\\\" name=\\\"myRadio\\\" value=\\\"option2\\\" defaultChecked={true} /> Option 2</label>\\n        <label><input type=\\\"radio\\\" name=\\\"myRadio\\\" value=\\\"option3\\\" /> Option 3</label>\\n      </p>\\n      <hr />\\n      <button type=\\\"reset\\\">Reset form</button>\\n      <button type=\\\"submit\\\">Submit form</button>\\n    </form>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label { display: block; }\\ninput { margin: 5px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"100\",{\"children\":[\"\\n\",[\"$r\",\"Note\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"Give a \",[\"$r\",\"code\",null,{\"children\":\"name\"}],\" to every \",[\"$r\",\"code\",null,{\"children\":\"<input>\"}],\", for example \",[\"$r\",\"code\",null,{\"children\":\"<input name=\\\"firstName\\\" defaultValue=\\\"Taylor\\\" />\"}],\". The \",[\"$r\",\"code\",null,{\"children\":\"name\"}],\" you specified will be used as a key in the form data, for example \",[\"$r\",\"code\",null,{\"children\":\"{ firstName: \\\"Taylor\\\" }\"}],\".\"]}]}],\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"By default, \",[\"$r\",\"em\",null,{\"children\":\"any\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"<button>\"}],\" inside a \",[\"$r\",\"code\",null,{\"children\":\"<form>\"}],\" will submit it. This can be surprising! If you have your own custom \",[\"$r\",\"code\",null,{\"children\":\"Button\"}],\" React component, consider returning \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/button\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"<button type=\\\"button\\\">\"}]}],\" instead of \",[\"$r\",\"code\",null,{\"children\":\"<button>\"}],\". Then, to be explicit, use \",[\"$r\",\"code\",null,{\"children\":\"<button type=\\\"submit\\\">\"}],\" for buttons that \",[\"$r\",\"em\",null,{\"children\":\"are\"}],\" supposed to submit the form.\"]}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"controlling-an-input-with-a-state-variable\",\"children\":\"Controlling an input with a state variable \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"An input like \",[\"$r\",\"code\",null,{\"children\":\"<input />\"}],\" is \",[\"$r\",\"em\",null,{\"children\":\"uncontrolled.\"}],\" Even if you \",[\"$r\",\"a\",null,{\"href\":\"#providing-an-initial-value-for-an-input\",\"children\":\"pass an initial value\"}],\" like \",[\"$r\",\"code\",null,{\"children\":\"<input defaultValue=\\\"Initial text\\\" />\"}],\", your JSX only specifies the initial value. It does not control what the value should be right now.\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":[\"To render a \",[\"$r\",\"em\",null,{\"children\":\"controlled\"}],\" input, pass the \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" prop to it (or \",[\"$r\",\"code\",null,{\"children\":\"checked\"}],\" for checkboxes and radios).\"]}],\" React will force the input to always have the \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" you passed. Usually, you would do this by declaring a \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useState\",\"children\":\"state variable:\"}]]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2,6,7}\",\"children\":\"function Form() {\\n  const [firstName, setFirstName] = useState(''); // Declare a state variable...\\n  // ...\\n  return (\\n    <input\\n      value={firstName} // ...force the input's value to match the state variable...\\n      onChange={e => setFirstName(e.target.value)} // ... and update the state variable on any edits!\\n    />\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"A controlled input makes sense if you needed state anyway—for example, to re-render your UI on every edit:\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2,9}\",\"children\":\"function Form() {\\n  const [firstName, setFirstName] = useState('');\\n  return (\\n    <>\\n      <label>\\n        First name:\\n        <input value={firstName} onChange={e => setFirstName(e.target.value)} />\\n      </label>\\n      {firstName !== '' && <p>Your name is {firstName}.</p>}\\n      ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"It’s also useful if you want to offer multiple ways to adjust the input state (for example, by clicking a button):\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3-4,10-11,14}\",\"children\":\"function Form() {\\n  // ...\\n  const [age, setAge] = useState('');\\n  const ageAsNumber = Number(age);\\n  return (\\n    <>\\n      <label>\\n        Age:\\n        <input\\n          value={age}\\n          onChange={e => setAge(e.target.value)}\\n          type=\\\"number\\\"\\n        />\\n        <button onClick={() => setAge(ageAsNumber + 10)}>\\n          Add 10 years\\n        </button>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"The \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" you pass to controlled components should not be \",[\"$r\",\"code\",null,{\"children\":\"undefined\"}],\" or \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\". If you need the initial value to be empty (such as with the \",[\"$r\",\"code\",null,{\"children\":\"firstName\"}],\" field below), initialize your state variable to an empty string (\",[\"$r\",\"code\",null,{\"children\":\"''\"}],\").\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function Form() {\\n  const [firstName, setFirstName] = useState('');\\n  const [age, setAge] = useState('20');\\n  const ageAsNumber = Number(age);\\n  return (\\n    <>\\n      <label>\\n        First name:\\n        <input\\n          value={firstName}\\n          onChange={e => setFirstName(e.target.value)}\\n        />\\n      </label>\\n      <label>\\n        Age:\\n        <input\\n          value={age}\\n          onChange={e => setAge(e.target.value)}\\n          type=\\\"number\\\"\\n        />\\n        <button onClick={() => setAge(ageAsNumber + 10)}>\\n          Add 10 years\\n        </button>\\n      </label>\\n      {firstName !== '' &&\\n        <p>Your name is {firstName}.</p>\\n      }\\n      {ageAsNumber > 0 &&\\n        <p>Your age is {ageAsNumber}.</p>\\n      }\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label { display: block; }\\ninput { margin: 5px; }\\np { font-weight: bold; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"last\",{\"children\":[\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":[\"If you pass \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" without \",[\"$r\",\"code\",null,{\"children\":\"onChange\"}],\", it will be impossible to type into the input.\"]}],\" When you control an input by passing some \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" to it, you \",[\"$r\",\"em\",null,{\"children\":\"force\"}],\" it to always have the value you passed. So if you pass a state variable as a \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" but forget to update that state variable synchronously during the \",[\"$r\",\"code\",null,{\"children\":\"onChange\"}],\" event handler, React will revert the input after every keystroke back to the \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" that you specified.\"]}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"optimizing-re-rendering-on-every-keystroke\",\"children\":\"Optimizing re-rendering on every keystroke \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"When you use a controlled input, you set the state on every keystroke. If the component containing your state re-renders a large tree, this can get slow. There’s a few ways you can optimize re-rendering performance.\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"For example, suppose you start with a form that re-renders all page content on every keystroke:\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{5-8}\",\"children\":\"function App() {\\n  const [firstName, setFirstName] = useState('');\\n  return (\\n    <>\\n      <form>\\n        <input value={firstName} onChange={e => setFirstName(e.target.value)} />\\n      </form>\\n      <PageContent />\\n    </>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Since \",[\"$r\",\"code\",null,{\"children\":\"<PageContent />\"}],\" doesn’t rely on the input state, you can move the input state into its own component:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4,10-17}\",\"children\":\"function App() {\\n  return (\\n    <>\\n      <SignupForm />\\n      <PageContent />\\n    </>\\n  );\\n}\\n\\nfunction SignupForm() {\\n  const [firstName, setFirstName] = useState('');\\n  return (\\n    <form>\\n      <input value={firstName} onChange={e => setFirstName(e.target.value)} />\\n    </form>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"This significantly improves performance because now only \",[\"$r\",\"code\",null,{\"children\":\"SignupForm\"}],\" re-renders on every keystroke.\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"If there is no way to avoid re-rendering (for example, if \",[\"$r\",\"code\",null,{\"children\":\"PageContent\"}],\" depends on the search input’s value), \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useDeferredValue#deferring-re-rendering-for-a-part-of-the-ui\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useDeferredValue\"}]}],\" lets you keep the controlled input responsive even in the middle of a large re-render.\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"troubleshooting\",\"children\":\"Troubleshooting \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"my-text-input-doesnt-update-when-i-type-into-it\",\"children\":\"My text input doesn’t update when I type into it \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"If you render an input with \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" but no \",[\"$r\",\"code\",null,{\"children\":\"onChange\"}],\", you will see an error in the console:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"// 🔴 Bug: controlled text input with no onChange handler\\n<input value={something} />\\n\"}]}],\"\\n\",[\"$r\",\"ConsoleBlock\",null,{\"level\":\"error\",\"children\":[\"$r\",\"p\",null,{\"children\":[\"You provided a \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" prop to a form field without an \",[\"$r\",\"code\",null,{\"children\":\"onChange\"}],\" handler. This will render a read-only field. If the field should be mutable use \",[\"$r\",\"code\",null,{\"children\":\"defaultValue\"}],\". Otherwise, set either \",[\"$r\",\"code\",null,{\"children\":\"onChange\"}],\" or \",[\"$r\",\"code\",null,{\"children\":\"readOnly\"}],\".\"]}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"As the error message suggests, if you only wanted to \",[\"$r\",\"a\",null,{\"href\":\"#providing-an-initial-value-for-an-input\",\"children\":[\"specify the \",[\"$r\",\"em\",null,{\"children\":\"initial\"}],\" value,\"]}],\" pass \",[\"$r\",\"code\",null,{\"children\":\"defaultValue\"}],\" instead:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"// ✅ Good: uncontrolled input with an initial value\\n<input defaultValue={something} />\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"If you want \",[\"$r\",\"a\",null,{\"href\":\"#controlling-an-input-with-a-state-variable\",\"children\":\"to control this input with a state variable,\"}],\" specify an \",[\"$r\",\"code\",null,{\"children\":\"onChange\"}],\" handler:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"// ✅ Good: controlled input with onChange\\n<input value={something} onChange={e => setSomething(e.target.value)} />\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"If the value is intentionally read-only, add a \",[\"$r\",\"code\",null,{\"children\":\"readOnly\"}],\" prop to suppress the error:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"// ✅ Good: readonly controlled input without on change\\n<input value={something} readOnly={true} />\\n\"}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"my-checkbox-doesnt-update-when-i-click-on-it\",\"children\":\"My checkbox doesn’t update when I click on it \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"If you render a checkbox with \",[\"$r\",\"code\",null,{\"children\":\"checked\"}],\" but no \",[\"$r\",\"code\",null,{\"children\":\"onChange\"}],\", you will see an error in the console:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"// 🔴 Bug: controlled checkbox with no onChange handler\\n<input type=\\\"checkbox\\\" checked={something} />\\n\"}]}],\"\\n\",[\"$r\",\"ConsoleBlock\",null,{\"level\":\"error\",\"children\":[\"$r\",\"p\",null,{\"children\":[\"You provided a \",[\"$r\",\"code\",null,{\"children\":\"checked\"}],\" prop to a form field without an \",[\"$r\",\"code\",null,{\"children\":\"onChange\"}],\" handler. This will render a read-only field. If the field should be mutable use \",[\"$r\",\"code\",null,{\"children\":\"defaultChecked\"}],\". Otherwise, set either \",[\"$r\",\"code\",null,{\"children\":\"onChange\"}],\" or \",[\"$r\",\"code\",null,{\"children\":\"readOnly\"}],\".\"]}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"As the error message suggests, if you only wanted to \",[\"$r\",\"a\",null,{\"href\":\"#providing-an-initial-value-for-an-input\",\"children\":[\"specify the \",[\"$r\",\"em\",null,{\"children\":\"initial\"}],\" value,\"]}],\" pass \",[\"$r\",\"code\",null,{\"children\":\"defaultChecked\"}],\" instead:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"// ✅ Good: uncontrolled checkbox with an initial value\\n<input type=\\\"checkbox\\\" defaultChecked={something} />\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"If you want \",[\"$r\",\"a\",null,{\"href\":\"#controlling-an-input-with-a-state-variable\",\"children\":\"to control this checkbox with a state variable,\"}],\" specify an \",[\"$r\",\"code\",null,{\"children\":\"onChange\"}],\" handler:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"// ✅ Good: controlled checkbox with onChange\\n<input type=\\\"checkbox\\\" checked={something} onChange={e => setSomething(e.target.checked)} />\\n\"}]}],\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"You need to read \",[\"$r\",\"code\",null,{\"children\":\"e.target.checked\"}],\" rather than \",[\"$r\",\"code\",null,{\"children\":\"e.target.value\"}],\" for checkboxes.\"]}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"If the checkbox is intentionally read-only, add a \",[\"$r\",\"code\",null,{\"children\":\"readOnly\"}],\" prop to suppress the error:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"// ✅ Good: readonly controlled input without on change\\n<input type=\\\"checkbox\\\" checked={something} readOnly={true} />\\n\"}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"my-input-caret-jumps-to-the-beginning-on-every-keystroke\",\"children\":\"My input caret jumps to the beginning on every keystroke \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"If you \",[\"$r\",\"a\",null,{\"href\":\"#controlling-an-input-with-a-state-variable\",\"children\":\"control an input,\"}],\" you must update its state variable to the input’s value from the DOM during \",[\"$r\",\"code\",null,{\"children\":\"onChange\"}],\".\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"You can’t update it to something other than \",[\"$r\",\"code\",null,{\"children\":\"e.target.value\"}],\" (or \",[\"$r\",\"code\",null,{\"children\":\"e.target.checked\"}],\" for checkboxes):\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function handleChange(e) {\\n  // 🔴 Bug: updating an input to something other than e.target.value\\n  setFirstName(e.target.value.toUpperCase());\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"You also can’t update it asynchronously:\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function handleChange(e) {\\n  // 🔴 Bug: updating an input asynchronously\\n  setTimeout(() => {\\n    setFirstName(e.target.value);\\n  }, 100);\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"To fix your code, update it synchronously to \",[\"$r\",\"code\",null,{\"children\":\"e.target.value\"}],\":\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function handleChange(e) {\\n  // ✅ Updating a controlled input to e.target.value synchronously\\n  setFirstName(e.target.value);\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"If this doesn’t fix the problem, it’s possible that the input gets removed and re-added from the DOM on every keystroke. This can happen if you’re accidentally \",[\"$r\",\"a\",null,{\"href\":\"/learn/preserving-and-resetting-state\",\"children\":\"resetting state\"}],\" on every re-render, for example if the input or one of its parents always receives a different \",[\"$r\",\"code\",null,{\"children\":\"key\"}],\" attribute, or if you nest component function definitions (which is not supported and causes the “inner” component to always be considered a different tree).\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"im-getting-an-error-a-component-is-changing-an-uncontrolled-input-to-be-controlled\",\"children\":\"I’m getting an error: “A component is changing an uncontrolled input to be controlled” \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"If you provide a \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" to the component, it must remain a string throughout its lifetime.\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"You cannot pass \",[\"$r\",\"code\",null,{\"children\":\"value={undefined}\"}],\" first and later pass \",[\"$r\",\"code\",null,{\"children\":\"value=\\\"some string\\\"\"}],\" because React won’t know whether you want the component to be uncontrolled or controlled. A controlled component should always receive a string \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\", not \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\" or \",[\"$r\",\"code\",null,{\"children\":\"undefined\"}],\".\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"If your \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" is coming from an API or a state variable, it might be initialized to \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\" or \",[\"$r\",\"code\",null,{\"children\":\"undefined\"}],\". In that case, either set it to an empty string (\",[\"$r\",\"code\",null,{\"children\":\"''\"}],\") initially, or pass \",[\"$r\",\"code\",null,{\"children\":\"value={someValue ?? ''}\"}],\" to ensure \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" is a string.\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Similarly, if you pass \",[\"$r\",\"code\",null,{\"children\":\"checked\"}],\" to a checkbox, ensure it’s always a boolean.\"]}]]}]]","meta":{"title":"<input>"},"languages":null},"__N_SSG":true}