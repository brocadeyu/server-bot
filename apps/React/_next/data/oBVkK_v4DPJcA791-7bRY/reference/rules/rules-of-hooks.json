{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"Overview\",\"depth\":2},{\"url\":\"#only-call-hooks-at-the-top-level\",\"depth\":2,\"text\":\"Only call Hooks at the top level \"},{\"url\":\"#only-call-hooks-from-react-functions\",\"depth\":2,\"text\":\"Only call Hooks from React functions \"}]","content":"[[\"$r\",\"MaxWidth\",\"last\",{\"children\":[[\"$r\",\"Intro\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":\"Hooks are defined using JavaScript functions, but they represent a special type of reusable UI logic with restrictions on where they can be called.\"}]}],\"\\n\",[\"$r\",\"InlineToc\",null,{}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"only-call-hooks-at-the-top-level\",\"children\":\"Only call Hooks at the top level \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Functions whose names start with \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\" are called \",[\"$r\",\"a\",null,{\"href\":\"/reference/react\",\"children\":[\"$r\",\"em\",null,{\"children\":\"Hooks\"}]}],\" in React.\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":[\"Don‚Äôt call Hooks inside loops, conditions, nested functions, or \",[\"$r\",\"code\",null,{\"children\":\"try\"}],\"/\",[\"$r\",\"code\",null,{\"children\":\"catch\"}],\"/\",[\"$r\",\"code\",null,{\"children\":\"finally\"}],\" blocks.\"]}],\" Instead, always use Hooks at the top level of your React function, before any early returns. You can only call Hooks while React is rendering a function component:\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"‚úÖ Call them at the top level in the body of a \",[\"$r\",\"a\",null,{\"href\":\"/learn/your-first-component\",\"children\":\"function component\"}],\".\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"‚úÖ Call them at the top level in the body of a \",[\"$r\",\"a\",null,{\"href\":\"/learn/reusing-logic-with-custom-hooks\",\"children\":\"custom Hook\"}],\".\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js{2-3,8-9}\",\"children\":\"function Counter() {\\n  // ‚úÖ Good: top-level in a function component\\n  const [count, setCount] = useState(0);\\n  // ...\\n}\\n\\nfunction useWindowWidth() {\\n  // ‚úÖ Good: top-level in a custom Hook\\n  const [width, setWidth] = useState(window.innerWidth);\\n  // ...\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"It‚Äôs \",[\"$r\",\"strong\",null,{\"children\":\"not\"}],\" supported to call Hooks (functions starting with \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\") in any other cases, for example:\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"üî¥ Do not call Hooks inside conditions or loops.\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"üî¥ Do not call Hooks after a conditional \",[\"$r\",\"code\",null,{\"children\":\"return\"}],\" statement.\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"üî¥ Do not call Hooks in event handlers.\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"üî¥ Do not call Hooks in class components.\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"üî¥ Do not call Hooks inside functions passed to \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\", \",[\"$r\",\"code\",null,{\"children\":\"useReducer\"}],\", or \",[\"$r\",\"code\",null,{\"children\":\"useEffect\"}],\".\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"üî¥ Do not call Hooks inside \",[\"$r\",\"code\",null,{\"children\":\"try\"}],\"/\",[\"$r\",\"code\",null,{\"children\":\"catch\"}],\"/\",[\"$r\",\"code\",null,{\"children\":\"finally\"}],\" blocks.\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"If you break these rules, you might see this error.\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js{3-4,11-12,20-21}\",\"children\":\"function Bad({ cond }) {\\n  if (cond) {\\n    // üî¥ Bad: inside a condition (to fix, move it outside!)\\n    const theme = useContext(ThemeContext);\\n  }\\n  // ...\\n}\\n\\nfunction Bad() {\\n  for (let i = 0; i < 10; i++) {\\n    // üî¥ Bad: inside a loop (to fix, move it outside!)\\n    const theme = useContext(ThemeContext);\\n  }\\n  // ...\\n}\\n\\nfunction Bad({ cond }) {\\n  if (cond) {\\n    return;\\n  }\\n  // üî¥ Bad: after a conditional return (to fix, move it before the return!)\\n  const theme = useContext(ThemeContext);\\n  // ...\\n}\\n\\nfunction Bad() {\\n  function handleClick() {\\n    // üî¥ Bad: inside an event handler (to fix, move it outside!)\\n    const theme = useContext(ThemeContext);\\n  }\\n  // ...\\n}\\n\\nfunction Bad() {\\n  const style = useMemo(() => {\\n    // üî¥ Bad: inside useMemo (to fix, move it outside!)\\n    const theme = useContext(ThemeContext);\\n    return createStyle(theme);\\n  });\\n  // ...\\n}\\n\\nclass Bad extends React.Component {\\n  render() {\\n    // üî¥ Bad: inside a class component (to fix, write a function component instead of a class!)\\n    useEffect(() => {})\\n    // ...\\n  }\\n}\\n\\nfunction Bad() {\\n  try {\\n    // üî¥ Bad: inside try/catch/finally block (to fix, move it outside!)\\n    const [x, setX] = useState(0);\\n  } catch {\\n    const [x, setX] = useState(1);\\n  }\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"You can use the \",[\"$r\",\"a\",null,{\"href\":\"https://www.npmjs.com/package/eslint-plugin-react-hooks\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"eslint-plugin-react-hooks\"}],\" plugin\"]}],\" to catch these mistakes.\"]}],\"\\n\",[\"$r\",\"Note\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"/learn/reusing-logic-with-custom-hooks\",\"children\":\"Custom Hooks\"}],\" \",[\"$r\",\"em\",null,{\"children\":\"may\"}],\" call other Hooks (that‚Äôs their whole purpose). This works because custom Hooks are also supposed to only be called while a function component is rendering.\"]}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"only-call-hooks-from-react-functions\",\"children\":\"Only call Hooks from React functions \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"Don‚Äôt call Hooks from regular JavaScript functions. Instead, you can:\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"‚úÖ Call Hooks from React function components.\\n‚úÖ Call Hooks from \",[\"$r\",\"a\",null,{\"href\":\"/learn/reusing-logic-with-custom-hooks#extracting-your-own-custom-hook-from-a-component\",\"children\":\"custom Hooks\"}],\".\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"By following this rule, you ensure that all stateful logic in a component is clearly visible from its source code.\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2,5}\",\"children\":\"function FriendList() {\\n  const [onlineStatus, setOnlineStatus] = useOnlineStatus(); // ‚úÖ\\n}\\n\\nfunction setOnlineStatus() { // ‚ùå Not a component or custom Hook!\\n  const [onlineStatus, setOnlineStatus] = useOnlineStatus();\\n}\\n\"}]}]]}]]","meta":{"title":"Rules of Hooks"},"languages":null},"__N_SSG":true}