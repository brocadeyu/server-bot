<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>releases-atom</id>
    <title>Rsbuild Releases</title>
    <updated>2024-12-23T16:13:23.320Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://rsbuild.dev"/>
    <icon>https://assets.rspack.dev/rsbuild/favicon-128x128.png</icon>
    <entry>
        <title type="html"><![CDATA[Announcing Rsbuild 1.0]]></title>
        <id>14</id>
        <link href="https://rsbuild.dev/community/releases/v1-0"/>
        <updated>2024-09-10T18:00:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="announcing-rsbuild-10">Announcing Rsbuild 1.0<a aria-hidden="true" href="#announcing-rsbuild-10">#</a></h1>
<blockquote>
<p>September 10, 2024</p>
</blockquote>
<p><img src="https://assets.rspack.dev/rsbuild/assets/rsbuild-1-0-banner.png" alt=""></img></p>
<p>We are pleased to announce the release of Rsbuild 1.0!</p>
<h2 id="why-rsbuild">Why Rsbuild<a aria-hidden="true" href="#why-rsbuild">#</a></h2>
<p>For a long time, developers using webpack have been bothered by two major issues: <strong>slow build times and configuration complexity</strong>.</p>
<p>We have used Rust to rewrite webpack into <a href="https://github.com/web-infra-dev/rspack" target="_blank" rel="noopener noreferrer">Rspack</a>, which addresses the slow build issue. However, to maintain compatibility with the webpack ecosystem, Rspack retains webpack's configuration and API, which means it still has some complexity and a learning curve.</p>
<h3 id="evolution-of-the-ecosystem">Evolution of the ecosystem<a aria-hidden="true" href="#evolution-of-the-ecosystem">#</a></h3>
<p>In the early days, there were some excellent tools within the webpack ecosystem, such as Create React App (CRA) and Vue CLI. These tools provided best practices for building React or Vue applications, while hiding the complex webpack configuration. As a result, many React and Vue users used these tools to build applications without having to configure webpack from scratch.</p>
<p>As the ecosystem evolved, full-stack web frameworks such as Next.js, Nuxt, and Remix became popular; Vite was introduced as a lightweight build tool and also gained popularity. However, CRA and Vue CLI gradually stopped being maintained.</p>
<p>When we look at the npm download numbers for webpack, CRA, and Vue CLI, we find that a large number of projects are still using these tools. For example, webpack has about 25 million weekly downloads, and CRA has nearly 3 million weekly downloads. Many of these projects are CSR applications that do not require the SSR features of full-stack frameworks. Vite seems like a good choice, but after using Vite in our ByteDance projects, we found that migrating from webpack to Vite comes with high costs and introduces new problems, such as dev and build inconsistency, and slow page refreshes in large applications during development.</p>
<p>For the webpack ecosystem, we discovered a sad fact: <strong>the webpack ecosystem lacks a build tool that is easy to use and well maintained</strong>. The tool should be as user-friendly as CRA and Vue CLI, fully meet the needs of CSR application development, and have features such as fast startup and plugin support similar to Vite.</p>
<h3 id="the-birth-of-rsbuild">The birth of Rsbuild<a aria-hidden="true" href="#the-birth-of-rsbuild">#</a></h3>
<p>During the development of Rspack, we became aware of the above problems and decided to create a modern build tool based on Rspack called <strong>Rsbuild</strong>.</p>
<p><img src="https://assets.rspack.dev/rsbuild/assets/rsbuild-1-0-build-tools.png" alt=""></img></p>
<p>Rsbuild is built on top of Rspack. We designed Rsbuild with an easy-to-use, TypeScript-friendly API and a set of carefully designed configurations to fully leverage the Rspack's build performance while reducing configuration complexity and high up-front costs.</p>
<p>When developing Rsbuild, we learned best practices from the best tools in the community and focused on two usage scenarios:</p>
<ul>
<li>As a lightweight build tool: Helps developers quickly setup web applications with out-of-the-box support for CSR applications.</li>
<li>As a shared infrastructure: Provides <a href="https://rsbuild.dev/api/start/" target="_blank" rel="noopener noreferrer">JavaScript API</a> and <a href="https://rsbuild.dev/plugins/dev/" target="_blank" rel="noopener noreferrer">Plugin API</a> for higher-level tools and frameworks, allowing developers to easily build their tools or frameworks on top of Rsbuild.</li>
</ul>
<h2 id="performance">Performance<a aria-hidden="true" href="#performance">#</a></h2>
<p><strong>Rsbuild is currently the fastest build tool in the webpack and Rspack ecosystem</strong>. Here is a comparison between Rsbuild, Create React App, Vite, and Rspack CLI:</p>
<table>
<thead>
<tr>
<th>Metric</th>
<th>Create React App</th>
<th>Vite (with SWC)</th>
<th>Rspack CLI</th>
<th>Rsbuild</th>
<th>Rsbuild vs CRA</th>
</tr>
</thead>
<tbody>
<tr>
<td>dev startup time (1000 modules)</td>
<td>5.47s</td>
<td>1.29s</td>
<td>0.66s</td>
<td>0.39s</td>
<td><strong>14x faster</strong></td>
</tr>
<tr>
<td>build time (1000 modules)</td>
<td>5.69s</td>
<td>1.39s</td>
<td>0.51s</td>
<td>0.27s</td>
<td><strong>20x faster</strong></td>
</tr>
<tr>
<td>npm dependencies count</td>
<td>1241</td>
<td>15</td>
<td>283</td>
<td>14</td>
<td><strong>99% reduction</strong></td>
</tr>
<tr>
<td>npm install size</td>
<td>146.6MB</td>
<td>56.3MB</td>
<td>75.1MB</td>
<td>59.1MB</td>
<td><strong>60% reduction</strong></td>
</tr>
</tbody>
</table>
<p>Compared to the <a href="https://www.npmjs.com/package/@rspack/cli" target="_blank" rel="noopener noreferrer">Rspack CLI</a>, Rsbuild provides a richer set of features while demonstrating superior performance.</p>
<p>This is because Rspack CLI needs to maintain compatibility with the <a href="https://www.npmjs.com/package/webpack-cli" target="_blank" rel="noopener noreferrer">webpack-cli</a>. It relies on the <code>webpack-dev-server</code> and provides the same default behavior as webpack, which has some performance limitations. Rsbuild, on the other hand, is designed for modern web development. We have reimplemented a lighter CLI, dev server, and build process for Rsbuild, resulting in faster startup speeds and fewer npm dependencies.</p>
<blockquote>
<p>See the <a href="https://rsbuild.dev/guide/start/index" target="_blank" rel="noopener noreferrer">Rsbuild Introduction</a> for more comparisons between Rsbuild, webpack, Vue CLI, and Vite.</p>
</blockquote>
<h2 id="who-is-using">Who is using<a aria-hidden="true" href="#who-is-using">#</a></h2>
<p>In the <a href="https://rspack.dev/blog/announcing-1-0" target="_blank" rel="noopener noreferrer">Rspack 1.0 Announcement</a>, we introduced that Rspack is growing rapidly, with almost half of Rspack users using Rsbuild and giving us lots of positive feedback.</p>
<p>At ByteDance, we use Rsbuild as the cornerstone of our internal web frameworks to support thousands of web projects. These projects cover diverse use cases, including desktop web applications, mobile web applications, cross-platform web applications, documentation sites, and more.</p>
<p>For the community, we have open-sourced a high-performance toolchain based on Rsbuild, including the static site generator <a href="https://github.com/web-infra-dev/rspress" target="_blank" rel="noopener noreferrer">Rspress</a>, the library development tool <a href="https://github.com/web-infra-dev/rslib" target="_blank" rel="noopener noreferrer">Rslib</a>, the full-stack React framework <a href="https://github.com/web-infra-dev/modern.js" target="_blank" rel="noopener noreferrer">Modern.js</a>, and the <a href="https://github.com/rspack-contrib/storybook-rsbuild" target="_blank" rel="noopener noreferrer">Storybook Rsbuild</a>. The extensibility of Rsbuild allows these tools to flexibly integrate with Rsbuild and share its plugin ecosystem.</p>
<p>After releasing Rsbuild 1.0, we also plan to collaborate with some excellent teams like <a href="https://github.com/remix-run/remix" target="_blank" rel="noopener noreferrer">Remix</a>, to bring Rsbuild to more web frameworks.</p>
<h2 id="plugin-ecosystem">Plugin ecosystem<a aria-hidden="true" href="#plugin-ecosystem">#</a></h2>
<p>The Rsbuild plugin ecosystem is constantly evolving. There are currently over 50 <a href="https://github.com/web-infra-dev/awesome-rspack?tab=readme-ov-file#rsbuild-plugins" target="_blank" rel="noopener noreferrer">Rsbuild plugins</a> available in the community. We provide several advanced features through plugins to support the development of production-grade applications, such as <a href="https://github.com/rspack-contrib/rsbuild-plugin-type-check" target="_blank" rel="noopener noreferrer">type checking</a>, <a href="https://github.com/rspack-contrib/rsbuild-plugin-check-syntax" target="_blank" rel="noopener noreferrer">compatibility checking</a>, and <a href="https://rsbuild.dev/plugins/list/plugin-assets-retry" target="_blank" rel="noopener noreferrer">static assets retry</a>. Thanks to Rspack's compatibility with webpack, Rsbuild also supports most webpack plugins.</p>
<p>Compared to webpack or Rspack, the Rsbuild plugin API is more straightforward and beginner-friendly, allowing developers to easily create plugins to meet their specific needs.</p>
<p>For example, let's implement a plugin that outputs a file to the dist directory. The implementation comparison between Rspack and Rsbuild is as follows:</p>
<p><img src="https://assets.rspack.dev/rsbuild/assets/rsbuild-1-0-plugin-compare.png" alt=""></img></p>
<p>As shown, the API style of the Rsbuild plugin is similar to esbuild, it can be defined by a function. The plugin hooks have been simplified to avoid verbose APIs, making plugin development more intuitive.</p>
<h2 id="how-to-use-10">How to use 1.0<a aria-hidden="true" href="#how-to-use-10">#</a></h2>
<ul>
<li>If you haven't used Rsbuild before, you can experience it through the <a href="https://codesandbox.io/p/github/rspack-contrib/rsbuild-codesandbox-example" target="_blank" rel="noopener noreferrer">CodeSandbox example</a> or refer to the <a href="https://rsbuild.dev/guide/start/quick-start" target="_blank" rel="noopener noreferrer">Quick Start</a> to use Rsbuild.</li>
<li>If you are using Rsbuild 0.7 or earlier, please note that 1.0 includes some breaking changes. You can refer to the <a href="https://rsbuild.dev/guide/migration/rsbuild-0-x" target="_blank" rel="noopener noreferrer">Migrating from 0.x</a> document to upgrade.</li>
<li>Rsbuild also provides migration guides for projects that use webpack, CRA, Vue CLI, etc. See <a href="https://rsbuild.dev/guide/start/quick-start#migrate-from-existing-projects" target="_blank" rel="noopener noreferrer">Migrate from Existing Projects</a>.</li>
</ul>
<blockquote>
<p>Give a star 🌟 to the <a href="https://github.com/web-infra-dev/rsbuild" target="_blank" rel="noopener noreferrer">Rsbuild GitHub repository</a>.</p>
</blockquote>
<h2 id="whats-next">What's next<a aria-hidden="true" href="#whats-next">#</a></h2>
<p>Rsbuild 1.0 provides several advanced features for the development of enterprise applications and higher-level tools, such as the <a href="https://rsbuild.dev/guide/advanced/environments" target="_blank" rel="noopener noreferrer">multi-environment build API</a>, <a href="https://rsbuild.dev/guide/advanced/ssr" target="_blank" rel="noopener noreferrer">SSR API</a>, <a href="https://rsbuild.dev/plugins/dev/" target="_blank" rel="noopener noreferrer">plugin API</a>, <a href="https://rsbuild.dev/guide/advanced/module-federation" target="_blank" rel="noopener noreferrer">Module Federation support</a>, and <a href="https://github.com/web-infra-dev/rslib" target="_blank" rel="noopener noreferrer">library build (Rslib)</a>. We plan to continue to enhance these features to better support the development of the Rsbuild ecosystem.</p>
<p>In the next 12 to 18 months, Rsbuild will evolve together with Rspack, adopting Rspack's new features as soon as they become available. These features include persistent caching, faster HMR, and TypeScript-based optimizations. For more details, see <a href="https://rspack.dev/blog/announcing-1-0#whats-next" target="_blank" rel="noopener noreferrer">Rspack - What's next</a>.</p>
<p>Finally, a big thank you to all the developers who have contributed to Rsbuild ❤️:</p>
<p><img src="https://assets.rspack.dev/rsbuild/assets/rsbuild-1-0-contributors.png" alt=""></img></p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Announcing Rsbuild 0.7]]></title>
        <id>13</id>
        <link href="https://rsbuild.dev/community/releases/v0-7"/>
        <updated>2024-05-28T18:00:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="announcing-rsbuild-07">Announcing Rsbuild 0.7<a aria-hidden="true" href="#announcing-rsbuild-07">#</a></h1>
<blockquote>
<p>May 28, 2024</p>
</blockquote>
<p><img src="https://assets.rspack.dev/rsbuild/rsbuild-banner-v0-7.png" alt=""></img></p>
<p>Rsbuild 0.7 has been released with Rspack 0.7!</p>
<p>This is the last minor release before the Rsbuild 1.0. After this, the Rspack team will focus on the development of 1.0 and aim to launch the Rspack / Rsbuild 1.0 alpha version soon.</p>
<p>Notable changes in Rsbuild 0.7:</p>
<ul>
<li><a href="#support-for-storybook">Support for Storybook</a></li>
<li><a href="#faster-sass-compilation">Faster Sass Compilation</a></li>
<li><a href="#better-css-supports">Better CSS supports</a></li>
<li><a href="#typed-css-modules">Typed CSS Modules</a></li>
<li><a href="#esmcjs-exports">ESM/CJS Exports</a></li>
<li><a href="#breaking-changes">Breaking Changes</a></li>
</ul>
<h2 id="support-for-storybook">Support for Storybook<a aria-hidden="true" href="#support-for-storybook">#</a></h2>
<p>Rsbuild now supports Storybook!</p>
<p><a href="https://github.com/rspack-contrib/storybook-rsbuild" target="_blank" rel="noopener noreferrer">storybook-builder-rsbuild</a> is a Storybook builder based on Storybook v8 and Rsbuild that allows you to quickly build your components and stories.</p>
<p><img src="https://assets.rspack.dev/rsbuild/rsbuild-banner-with-storybook.png" alt=""></img></p>
<ul>
<li>For projects using Rsbuild, you can now quickly integrate Storybook and reuse your existing Rsbuild config.</li>
<li>For projects using the Storybook webpack builder, you can now upgrade to Rsbuild and <strong>get ~5x faster build performance</strong>.</li>
</ul>
<p>We also provide <code>storybook-react-rsbuild</code> and <code>storybook-vue3-rsbuild</code> to support React and Vue 3. For example, to integrate React:</p>
<pre><code meta="">

const config: StorybookConfig = {
  framework: 'storybook-react-rsbuild',
};

export default config;
</code></pre>
<p><img src="https://assets.rspack.dev/rsbuild/assets/storybook-rsbuild-preview.png" alt=""></img></p>
<blockquote>
<p>For more usage, please refer to <a href="https://github.com/rspack-contrib/storybook-rsbuild" target="_blank" rel="noopener noreferrer">storybook-rsbuild repository</a>.</p>
</blockquote>
<h2 id="faster-sass-compilation">Faster Sass Compilation<a aria-hidden="true" href="#faster-sass-compilation">#</a></h2>
<p>In Rsbuild 0.7, <strong>Sass compilation is 3~10 times faster</strong>. The performance improvements are particularly noticeable on large projects.</p>
<p>Comparison of build times for Rsbuild 0.6 and 0.7 when compiling Bootstrap's Sass code:</p>
<p><img src="https://assets.rspack.dev/rsbuild/assets/sass-embedded-compare.jpeg" alt=""></img></p>
<p>This improvement is due to Rsbuild's default use of <a href="https://www.npmjs.com/package/sass-embedded" target="_blank" rel="noopener noreferrer">sass-embedded</a>, a JavaScript wrapper around the native Dart Sass executable that provides a consistent API and superior performance.</p>
<p>Rsbuild has also enabled the latest sass-loader's <a href="https://github.com/webpack-contrib/sass-loader/releases/tag/v14.2.0" target="_blank" rel="noopener noreferrer">modern-compiler</a> API. This can enable Sass's shared resources feature, which allows the same compiler process to be reused when compiling multiple files, improving build performance.</p>
<h2 id="better-css-supports">Better CSS Supports<a aria-hidden="true" href="#better-css-supports">#</a></h2>
<p>Rsbuild now uses <a href="https://www.rspack.dev/plugins/rspack/css-extract-rspack-plugin" target="_blank" rel="noopener noreferrer">CssExtractRspackPlugin</a> to extract CSS into separate files, rather than using the <a href="https://www.rspack.dev/config/experiments#experimentscss" target="_blank" rel="noopener noreferrer">experimental.css</a> config to do so.</p>
<p>This allows Rsbuild to support more CSS features, including:</p>
<ul>
<li>Support for using <code><style module></code> in the Vue SFC:</li>
</ul>
<pre><code meta=""><template>
  <p :class="$style.red">Red</p>
</template>

<style module>
  .red {
    color: red;
  }
</style>
</code></pre>
<ul>
<li>Support for complex CSS Modules <code>:global()</code> syntax</li>
</ul>
<pre><code meta="">:local(.parent):global(.child) > ul {
  color: red;
}
</code></pre>
<ul>
<li>Support for more CSS Modules options, such as <a href="/config/output/css-modules#cssmodulesexportglobals">cssModules.exportGlobals</a></li>
<li>Now you can use <a href="/config/tools/css-extract">tools.cssExtract</a> to configure CssExtractRspackPlugin.</li>
</ul>
<h2 id="typed-css-modules">Typed CSS Modules<a aria-hidden="true" href="#typed-css-modules">#</a></h2>
<p>Rsbuild 0.7 added a new <a href="https://github.com/rspack-contrib/rsbuild-plugin-typed-css-modules" target="_blank" rel="noopener noreferrer">Typed CSS Modules plugin</a>, which is used to generate type declaration files for CSS Modules in the project.</p>
<p>When you use CSS Modules in a TypeScript project, the default type definition is as follows. It can only provide basic type support, and cannot accurately prompt which class names are exported by CSS Modules.</p>
<pre><code meta="">declare module '*.module.css' {
  const classes: { readonly [key: string]: string };
  export default classes;
}
</code></pre>
<p>After using the Typed CSS Modules plugin, Rsbuild will generate type declaration files for all CSS Modules in the project, providing accurate type hints.</p>
<p>For example, create two files named <code>src/index.ts</code> and <code>src/index.module.css</code>:</p>
<pre><code meta="">

console.log(styles.pageHeader);
</code></pre>
<pre><code meta="">.page-header {
  color: black;
}
</code></pre>
<p>After building, Rsbuild will generate a <code>src/index.module.css.d.ts</code> type declaration file:</p>
<pre><code meta="">interface CssExports {
  'page-header': string;
  pageHeader: string;
}
declare const cssExports: CssExports;
export default cssExports;
</code></pre>
<p>Now when you open the <code>src/index.ts</code> file, you can see that the <code>styles</code> object already has an accurate type.</p>
<h2 id="esmcjs-exports">ESM/CJS Exports<a aria-hidden="true" href="#esmcjs-exports">#</a></h2>
<p>Now, all packages of Rsbuild provide exports in both ES modules and CommonJS formats, and <a href="https://nodejs.org/api/packages.html#type" target="_blank" rel="noopener noreferrer">"type"="module"</a> has been declared in the package.json.</p>
<p><img src="https://assets.rspack.dev/rsbuild/assets/rsbuild-dual-package-example.png" alt=""></img></p>
<p>This allows you to use <code>import</code> or <code>require</code> to use the JavaScript API of Rsbuild:</p>
<pre><code>// ES module


// CommonJS
const { createRsbuild } = require('@rsbuild/core');
</code></pre>
<p>ESM/CJS interop is a tricky issue, so we will provide both formats for a long time to make it easier for more users to use.</p>
<h2 id="breaking-changes">Breaking Changes<a aria-hidden="true" href="#breaking-changes">#</a></h2>
<h3 id="upgrade-rspack-to-07">Upgrade Rspack to 0.7<a aria-hidden="true" href="#upgrade-rspack-to-07">#</a></h3>
<p>Rsbuild has upgraded the dependent Rspack to version 0.7 and adapted to the breaking changes included in it. Typically, these breaking changes will not affect you.</p>
<p>In the new version, Rspack supports lazy compilation, which can significantly improve the dev startup time for large projects. Please refer to <a href="https://rspack.dev/blog/announcing-0-7" target="_blank" rel="noopener noreferrer">Announcing Rspack 0.7</a> to learn more.</p>
<p>In Rsbuild, you can use <a href="/config/dev/lazy-compilation">dev.lazyCompilation</a> to enable lazy compilation.</p>
<h3 id="sass-and-less-plugins">Sass and Less Plugins<a aria-hidden="true" href="#sass-and-less-plugins">#</a></h3>
<p>Rsbuild's Sass and Less plugins are now two separate npm packages instead of being built into <code>@rsbuild/core</code> as before. This change allows users to enable Sass and Less compilation as needed.</p>
<p>For example, projects using CSS solutions such as Tailwind CSS, CSS-in-JS, etc., no longer need to install the dependencies required for Sass and Less, <strong>saving about 7MB of disk space</strong>.</p>
<ul>
<li>If your project requires compiling <code>.scss</code> or <code>.sass</code> files, please install and register the <a href="/plugins/list/plugin-sass">@rsbuild/plugin-sass</a> plugin:</li>
</ul>
<pre><code meta="">

export default {
  plugins: [pluginSass()],
};
</code></pre>
<ul>
<li>If your project requires compiling <code>.less</code> files, please install and register the <a href="/plugins/list/plugin-less">@rsbuild/plugin-less</a> plugin:</li>
</ul>
<pre><code meta="">

export default {
  plugins: [pluginLess()],
};
</code></pre>
<h3 id="dataurilimit-defaults">dataUriLimit Defaults<a aria-hidden="true" href="#dataurilimit-defaults">#</a></h3>
<p>The default value for <a href="/config/output/data-uri-limit">output.dataUriLimit</a> has been changed from <code>10000 (10kB)</code> to <code>4096 (4KiB)</code>.</p>
<p>This is because more applications are currently using HTTP 2.0, so splitting assets into separate files would perform better. Meanwhile, inlining assets over 4KiB can make the JS bundle to be too large and not cache friendly.</p>
<p>If you prefer the previous defaults, add the following config:</p>
<pre><code meta="">export default {
  output: {
    dataUriLimit: 10000,
  },
};
</code></pre>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Announcing Rsbuild 0.6]]></title>
        <id>12</id>
        <link href="https://rsbuild.dev/community/releases/v0-6"/>
        <updated>2024-04-10T18:00:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="announcing-rsbuild-06">Announcing Rsbuild 0.6<a aria-hidden="true" href="#announcing-rsbuild-06">#</a></h1>
<blockquote>
<p>April 10, 2024</p>
</blockquote>
<p><img src="https://assets.rspack.dev/rsbuild/rsbuild-banner-v0-6.png" alt=""></img></p>
<p>Rsbuild 0.6 has been released along with Rspack 0.6!</p>
<p>Notable changes:</p>
<ul>
<li>Upgrade to Rspack 0.6</li>
<li>Error overlay enabled by default</li>
<li>Support for Vue JSX HMR</li>
<li>New transform plugin API</li>
<li>Default port changed to 3000</li>
</ul>
<h2 id="upgrade-to-rspack-06">Upgrade to Rspack 0.6<a aria-hidden="true" href="#upgrade-to-rspack-06">#</a></h2>
<p>Rsbuild has upgraded the dependent Rspack to version 0.6, and adapted the breaking changes of CSS Modules contained in Rspack 0.6.</p>
<p>In the new version, Rspack has enabled the new tree shaking algorithm by default, resulting in a significant improvement in bundle size and artifact stability. Please refer to the <a href="https://rspack.dev/blog/announcing-0-6" target="_blank" rel="noopener noreferrer">Rspack 0.6 release announcement</a> to learn more.</p>
<h2 id="error-overlay-enabled-by-default">Error overlay enabled by default<a aria-hidden="true" href="#error-overlay-enabled-by-default">#</a></h2>
<p>Starting from Rsbuild 0.6, the default value of <a href="/config/dev/client">dev.client.overlay</a> has been adjusted to <code>true</code>. This means that when a compilation error occurs, Rsbuild will pop up the error overlay by default to display the error information:</p>
<p><img src="https://assets.rspack.dev/rsbuild/assets/rsbuild-error-overlay.png" alt=""></img></p>
<p>If you do not need this feature, you can set <code>dev.client.overlay</code> to <code>false</code> to disable it.</p>
<pre><code meta="">export default defineConfig({
  dev: {
    client: {
      overlay: false,
    },
  },
});
</code></pre>
<h2 id="support-for-vue-jsx-hmr">Support for Vue JSX HMR<a aria-hidden="true" href="#support-for-vue-jsx-hmr">#</a></h2>
<p><code>@rsbuild/plugin-vue-jsx</code> now supports JSX HMR. When you modify JSX code in a Vue 3 application, it will automatically trigger hot module replacement and preserve the current page state.</p>
<p>This feature is implemented by community contributor <a href="https://github.com/liyincode" target="_blank" rel="noopener noreferrer">@liyincode</a> ❤️, and released as a standalone package <a href="https://github.com/liyincode/babel-plugin-vue-jsx-hmr" target="_blank" rel="noopener noreferrer">babel-plugin-vue-jsx-hmr</a>, for use in projects outside of Rsbuild.</p>
<h2 id="new-transform-api">New transform API<a aria-hidden="true" href="#new-transform-api">#</a></h2>
<p>Rsbuild plugin now supports the <a href="/plugins/dev/core#apitransform">transform API</a>, which can be thought of as a lightweight implementation of Rspack loader. It provides a simple and easy to use API and automatically calls Rspack loader at the backend to transform the code.</p>
<p>In Rsbuild plugins, you can quickly implement code transformation functions using <code>api.transform</code>, which can handle the majority of common scenarios without having to learn how to write an Rspack loader.</p>
<p>For example, match modules with the <code>.pug</code> extension and transform them to JavaScript code:</p>
<pre><code>

const pluginPug = () => ({
  name: 'my-pug-plugin',
  setup(api) {
    api.transform({ test: /\.pug$/ }, ({ code }) => {
      const templateCode = pug.compileClient(code, {});
      return `${templateCode}; module.exports = template;`;
    });
  },
});
</code></pre>
<p>For some complex code transformation scenarios, <code>api.transform</code> may not be sufficient. In such situations, you can implement it using the Rspack loader.</p>
<h2 id="default-port-changed-to-3000">Default port changed to 3000<a aria-hidden="true" href="#default-port-changed-to-3000">#</a></h2>
<p>Rsbuild has changed the default value of <a href="/config/server/port">server.port</a> from <code>8080</code> to <code>3000</code>.</p>
<p>Port 3000 is commonly used for web development, and is also the default port used by tools such as create-react-app. Changing the default port to 3000 can prevent possible port conflicts when using 8080.</p>
<p>If you need to use port 8080, you can manually set it as follows:</p>
<pre><code meta="">export default defineConfig({
  server: {
    port: 8080,
  },
});
</code></pre>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Announcing Rsbuild 0.5]]></title>
        <id>11</id>
        <link href="https://rsbuild.dev/community/releases/v0-5"/>
        <updated>2024-03-19T08:00:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="announcing-rsbuild-05">Announcing Rsbuild 0.5<a aria-hidden="true" href="#announcing-rsbuild-05">#</a></h1>
<blockquote>
<p>March 19, 2024</p>
</blockquote>
<p><img src="https://assets.rspack.dev/rsbuild/rsbuild-banner-v0-5.png" alt=""></img></p>
<p>Rsbuild 0.5 is an important milestone. As of this release, most of the Rsbuild API has reached a stable state and we expect to release Rsbuild 1.0 in Q3 2024.</p>
<p>Main changes:</p>
<ul>
<li>⚡️ Support for <a href="https://lightningcss.dev/" target="_blank" rel="noopener noreferrer">Lightning CSS</a> to speed up CSS compilation.</li>
<li>🌟 Support for custom server based on the new JavaScript API.</li>
<li>🍭 Refactor the SVGR plugin to support more usages.</li>
<li>📍 Support for custom minify options.</li>
</ul>
<h2 id="️-supports-lightning-css">⚡️ Supports Lightning CSS<a aria-hidden="true" href="#️-supports-lightning-css">#</a></h2>
<p>Lightning CSS is a high performance CSS parser, transformer and minifier written in Rust. It supports parsing and transforming many modern CSS features into syntax supported by target browsers, and also provides a better compression ratio.</p>
<p>Rsbuild provides the Lightning CSS plugin to use Lightning CSS on an opt-in basis, replacing the built-in PostCSS, autoprefixer, and SWC CSS minimizer in Rsbuild.</p>
<p>All you need to do is register the Lightning CSS plugin in the Rsbuild configuration to complete the switch:</p>
<pre><code meta="">

export default {
  plugins: [pluginLightningcss()],
};
</code></pre>
<p>In a real large-scale web application, we have integrated the Rsbuild Lightning CSS plugin and used <a href="https://rsdoctor.dev/" target="_blank" rel="noopener noreferrer">Rsdoctor</a> to analyze the changes in build time:</p>
<ul>
<li>CSS compilation time was reduced from 8.4s to 0.12s, a 70x improvement.</li>
<li>The overall build time was reduced from 33.1s to 25.4s, a 30% increase.</li>
</ul>
<h2 id="-support-for-custom-server">🌟 Support for Custom Server<a aria-hidden="true" href="#-support-for-custom-server">#</a></h2>
<p>Rsbuild now supports replacing the dev server with a custom server that reuses Rsbuild's page preview, routing, and module hot update features. This makes it easier to integrate Rsbuild with other Node.js frameworks.</p>
<p>For example, you can implement a custom server based on express:</p>
<pre><code>


async function startCustomServer() {
  const app = express();
  const rsbuild = await createRsbuild();
  const { port, middlewares } = await rsbuild.createDevServer();

  app.use(middlewares);
  app.listen(port);
}
</code></pre>
<p>For more details, please refer to <a href="/api/javascript-api/instance#rsbuildcreatedevserver">Rsbuild - createDevServer</a>.</p>
<h2 id="-refactoring-svgr-plugin">🍭 Refactoring SVGR Plugin<a aria-hidden="true" href="#-refactoring-svgr-plugin">#</a></h2>
<p>In versions prior to 0.5.0, the default usage of the SVGR plugin was the same as create-react-app, allowing SVGs to be used via mixed import:</p>
<pre><code>

console.log(logoUrl); // -> string
console.log(Logo); // -> React component
</code></pre>
<p>However, there are two problems with this approach:</p>
<ol>
<li><strong>Increased bundle size</strong>: Mixed import causes a single SVG module to be compiled into two types of code (even if some exports are not used), which will increase the bundle size.</li>
<li><strong>Slow down compiling</strong>: Mixed import will cause extra compilation overhead. Even if the ReactComponent export is not used in the code, the SVG file will still be compiled by SVGR. And SVGR is based on Babel, which has a high performance overhead.</li>
</ol>
<p>So we have refactored the <code>@rsbuild/plugin-svgr</code> plugin to support converting SVGs to React components via the <code>?react</code> query. This approach can solve the problems mentioned above, and is more in line with community best practices.</p>
<pre><code>


console.log(logoUrl); // -> string
console.log(Logo); // -> React component
</code></pre>
<p>The SVGR plugin now supports switching between different SVGR usages. If a project needs to use the previous mixed import usage, you can manually enable the <a href="/plugins/list/plugin-svgr#mixedimport">mixedImport</a> option:</p>
<pre><code>pluginSvgr({
  mixedImport: true,
});
</code></pre>
<h2 id="-custom-minify-options">📍 Custom Minify Options<a aria-hidden="true" href="#-custom-minify-options">#</a></h2>
<p>The <code>output.disableMinimize</code> option has been renamed to <a href="/config/output/minify">output.minify</a>, and it allows customizing JS and HTML minification options.</p>
<pre><code meta="">export default {
  output: {
    minify: {
      jsOptions: {
        minimizerOptions: {
          mangle: false,
        },
      },
    },
  },
};
</code></pre>
<p>Projects using <code>output.disableMinimize</code> can refer to the example below:</p>
<pre><code>export default {
  output: {
-    disableMinimize: true,
+    minify: false,
  },
};
</code></pre>
<blockquote>
<p>See <a href="https://github.com/web-infra-dev/rsbuild/issues/1681" target="_blank" rel="noopener noreferrer">"allow customize minify options"</a>.</p>
</blockquote>
<hr></hr>
<p>For more information, please refer to:</p>
<ul>
<li><a href="https://github.com/web-infra-dev/rsbuild/releases/tag/v0.5.0" target="_blank" rel="noopener noreferrer">Rsbuild 0.5.0 Changelog</a></li>
<li><a href="https://github.com/web-infra-dev/rsbuild/discussions/1732" target="_blank" rel="noopener noreferrer">Rsbuild 0.5.0 Breaking Changes</a></li>
</ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Announcing Rsbuild 0.4]]></title>
        <id>10</id>
        <link href="https://rsbuild.dev/community/releases/v0-4"/>
        <updated>2024-02-06T08:00:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="announcing-rsbuild-04">Announcing Rsbuild 0.4<a aria-hidden="true" href="#announcing-rsbuild-04">#</a></h1>
<blockquote>
<p>February 06, 2024</p>
</blockquote>
<p><img src="https://assets.rspack.dev/rsbuild/rsbuild-banner-v0-4.png" alt=""></img></p>
<p>Rsbuild 0.4 provides built-in support for module federation. It also contains some incompatible API updates. Please refer to the current document for upgrading.</p>
<h3 id="module-federation-config">Module Federation Config<a aria-hidden="true" href="#module-federation-config">#</a></h3>
<p>Rsbuild now provides a builtin <a href="/config/module-federation/options">moduleFederation</a> option, which will make configuring Module Federation in Rsbuild much easier.</p>
<ul>
<li><strong>Example:</strong></li>
</ul>
<pre><code meta="">export default defineConfig({
  moduleFederation: {
    options: {
      // ModuleFederationPluginOptions
    },
  },
});
</code></pre>
<p>When you use this option, Rsbuild will automatically set the default <code>publicPath</code> and <code>splitChunks</code> config, making module federation ready to use out of the box.</p>
<blockquote>
<p>See <a href="https://github.com/web-infra-dev/rsbuild/discussions/1461" target="_blank" rel="noopener noreferrer">RFC - Provide first-class support for Module Federation</a> for details.</p>
</blockquote>
<h3 id="plugin-hook-order">Plugin Hook Order<a aria-hidden="true" href="#plugin-hook-order">#</a></h3>
<p>In Rsbuild plugin, you can now declare the order of hooks using the <code>order</code> field:</p>
<pre><code>const myPlugin = () => ({
  setup: (api) => {
    api.modifyRsbuildConfig({
      handler: () => console.log('hello'),
      order: 'pre',
    });
  },
});
</code></pre>
<blockquote>
<p>For more details, see <a href="/plugins/dev/hooks">Plugin Hooks</a>.</p>
</blockquote>
<h3 id="rename-disablefilenamehash">Rename disableFilenameHash<a aria-hidden="true" href="#rename-disablefilenamehash">#</a></h3>
<p>The <code>output.disableFilenameHash</code> config has been renamed to <a href="/config/output/filename-hash">output.filenameHash</a>.</p>
<ul>
<li>Before:</li>
</ul>
<pre><code>export default {
  output: {
    disableFilenameHash: true,
  },
};
</code></pre>
<ul>
<li>After:</li>
</ul>
<pre><code>export default {
  output: {
    filenameHash: false,
  },
};
</code></pre>
<h2 id="remove-postcss-flexbugs-fixes">Remove postcss-flexbugs-fixes<a aria-hidden="true" href="#remove-postcss-flexbugs-fixes">#</a></h2>
<p>Rsbuild 0.4 removed the builtin <a href="https://github.com/luisrudge/postcss-flexbugs-fixes" target="_blank" rel="noopener noreferrer">postcss-flexbugs-fixes</a> plugin.</p>
<p>This plugin is used to fix some flex bugs for IE 10 / 11. Considering that modern browsers no longer have these flex issues, we removed this plugin to improve build performance.</p>
<p>If your project needs to be compatible with IE 10 / 11 and encounters these flex issues, you can manually add this plugin in Rsbuild:</p>
<ul>
<li>Install plugin:</li>
</ul>
<pre><code>npm add postcss-flexbugs-fixes -D
</code></pre>
<ul>
<li>Register plugin in <code>postcss.config.cjs</code>:</li>
</ul>
<pre><code>module.exports = {
  'postcss-flexbugs-fixes': {},
};
</code></pre>
<h2 id="pure-react-plugin">Pure React Plugin<a aria-hidden="true" href="#pure-react-plugin">#</a></h2>
<p>The React plugin has removed default <a href="/config/source/transform-import">source.transformImport</a> config for <a href="https://www.npmjs.com/package/antd" target="_blank" rel="noopener noreferrer">antd</a> v4 and <a href="https://www.npmjs.com/package/@arco-design/web-react" target="_blank" rel="noopener noreferrer">@arco-design/web-react</a>.</p>
<p>Configurations related to the UI library should be provided in the UI library-specific plugins, such as <code>rsbuild-plugin-antd</code> or <code>rsbuild-plugin-arco</code>, and the React plugin will concentrate on providing fundamental abilities for React.</p>
<ul>
<li>If your project is using <code>antd</code> v3 or v4, you can manually add the following config:</li>
</ul>
<pre><code meta="">export default {
  source: {
    transformImport: [
      {
        libraryName: 'antd',
        libraryDirectory: 'es',
        style: 'css',
      },
    ],
  },
};
</code></pre>
<ul>
<li>If your project is using <code>@arco-design/web-react</code>, you can manually add the following config:</li>
</ul>
<pre><code meta="">export default {
  source: {
    transformImport: [
      {
        libraryName: '@arco-design/web-react',
        libraryDirectory: 'es',
        camelToDashComponentName: false,
        style: 'css',
      },
      {
        libraryName: '@arco-design/web-react/icon',
        libraryDirectory: 'react-icon',
        camelToDashComponentName: false,
      },
    ],
  },
};
</code></pre>
<h2 id="javascript-api">JavaScript API<a aria-hidden="true" href="#javascript-api">#</a></h2>
<p>The <code>loadConfig</code> method now returns both the contents of the config and the path to the config file:</p>
<pre><code>

// 0.3
const config = await loadConfig();

// 0.4
const { content, filePath } = await loadConfig();
</code></pre>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Announcing Rsbuild 0.3]]></title>
        <id>9</id>
        <link href="https://rsbuild.dev/community/releases/v0-3"/>
        <updated>2024-01-10T08:00:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="announcing-rsbuild-03">Announcing Rsbuild 0.3<a aria-hidden="true" href="#announcing-rsbuild-03">#</a></h1>
<blockquote>
<p>January 10, 2024</p>
</blockquote>
<p><img src="https://assets.rspack.dev/rsbuild/rsbuild-banner-v0-3.png" alt=""></img></p>
<p>Rsbuild 0.3 version has upgraded Rspack to 0.5 and now supports Module Federation. In addition, it includes some incompatible API changes. Please refer to the current documentation for upgrading.</p>
<h2 id="rspack-05">Rspack 0.5<a aria-hidden="true" href="#rspack-05">#</a></h2>
<p>Bump Rspack to v0.5.0, see: <a href="https://rspack.dev/blog/announcing-0-5" target="_blank" rel="noopener noreferrer">Rspack 0.5 Release Announcement</a></p>
<p>Notable changes:</p>
<ul>
<li><a href="https://rspack.dev/blog/module-federation-added-to-rspack" target="_blank" rel="noopener noreferrer">Module Federation added to Rspack</a></li>
<li><a href="https://rspack.dev/blog/announcing-0-5#make-swchelpers-and-react-refresh-as-peerdependencies" target="_blank" rel="noopener noreferrer">Remove deprecated builtins options</a></li>
</ul>
<h2 id="toml--yaml-plugin">TOML / YAML Plugin<a aria-hidden="true" href="#toml--yaml-plugin">#</a></h2>
<p>The need to import TOML and YAML in JS is not common, so Rsbuild core will no longer support import TOML and YAML by default in v0.3.0.</p>
<p>The TOML and YAML plugin will become a independent plugin:</p>
<ul>
<li>TOML:</li>
</ul>
<pre><code>// rsbuild.config.ts


export default {
  plugins: [pluginToml()],
};
</code></pre>
<ul>
<li>YAML:</li>
</ul>
<pre><code>// rsbuild.config.ts


export default {
  plugins: [pluginYaml()],
};
</code></pre>
<h2 id="javascript-api">JavaScript API<a aria-hidden="true" href="#javascript-api">#</a></h2>
<p>Some JavaScript APIs have changed:</p>
<ul>
<li>The <code>printURLs</code> option of <code>rsbuild.startDevServer</code> is deprecated, use <a href="/config/server/print-urls">server.printUrls</a> instead.</li>
<li>The <code>logger</code> option of <code>rsbuild.startDevServer</code> is deprecated, use <a href="/api/javascript-api/core#logger">logger.override()</a> instead.</li>
</ul>
<h2 id="node-target">Node Target<a aria-hidden="true" href="#node-target">#</a></h2>
<ul>
<li>Adjust default browserslist for node target, from <code>node >= 14</code> to <code>node >= 16</code>.</li>
<li>The default value of <code>output.distPath.server</code> is changed from <code>'bundles'</code> to <code>'server'</code></li>
</ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Announcing Rsbuild 0.2]]></title>
        <id>8</id>
        <link href="https://rsbuild.dev/community/releases/v0-2"/>
        <updated>2023-12-11T08:00:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="announcing-rsbuild-02">Announcing Rsbuild 0.2<a aria-hidden="true" href="#announcing-rsbuild-02">#</a></h1>
<blockquote>
<p>December 11, 2023</p>
</blockquote>
<p><img src="https://assets.rspack.dev/rsbuild/rsbuild-banner-v0-2.png" alt=""></img></p>
<p>The Rsbuild 0.2 contains some incompatible API changes. Please refer to the current documentation for upgrading.</p>
<h2 id="targets">Targets<a aria-hidden="true" href="#targets">#</a></h2>
<p>We will move the <code>target</code> option of <code>createRsbuild</code> to rsbuild config, this change allows user to configure <code>targets</code> in the rsbuild config file.</p>
<ul>
<li>before:</li>
</ul>
<pre><code>const rsbuild = await createRsbuild({
  target: ['web', 'node'],
});
</code></pre>
<ul>
<li>after:</li>
</ul>
<pre><code>// rsbuild.config.ts
export default {
  output: {
    targets: ['web', 'node'],
  },
};
</code></pre>
<blockquote>
<p>Only affect JavaScript API. Users using the Rsbuild CLI do not need to change.</p>
</blockquote>
<h2 id="entry">Entry<a aria-hidden="true" href="#entry">#</a></h2>
<p>Remove the deprecated <code>source.entries</code> config.</p>
<p><code>source.entries</code> has been renamed to <code>source.entry</code> since Rsbuild 0.1.0, and we will remove the legacy <code>source.entries</code> config in Rsbuild v0.2.0.</p>
<ul>
<li>before:</li>
</ul>
<pre><code>// rsbuild.config.ts
export default {
  source: {
    entries: {},
  },
};
</code></pre>
<ul>
<li>after:</li>
</ul>
<pre><code>// rsbuild.config.ts
export default {
  source: {
    entry: {},
  },
};
</code></pre>
<h2 id="write-to-disk">Write to Disk<a aria-hidden="true" href="#write-to-disk">#</a></h2>
<p><code>dev.writeToDisk</code> defaults to <code>false</code>.</p>
<p>Motivation:</p>
<ul>
<li>Reduce fs overhead and improve dev server performance.</li>
<li>Avoid trigger watcher of UnoCSS and other tools. See <a href="https://github.com/web-infra-dev/rsbuild/issues/654" target="_blank" rel="noopener noreferrer">#654</a>.</li>
<li>Align the default behavior with webpack-dev-middleware and other community dev servers.</li>
</ul>
<p>User can enable writeToDisk manually:</p>
<pre><code>export default {
  dev: {
    writeToDisk: true,
  },
};
</code></pre>
<h2 id="babel-plugin">Babel Plugin<a aria-hidden="true" href="#babel-plugin">#</a></h2>
<p><code>@rsbuild/plugin-babel</code> will move all babel-loader options to <code>babelLoaderOptions</code>:</p>
<ul>
<li>before:</li>
</ul>
<pre><code>pluginBabel({
  plugins: [],
  presets: [],
});
</code></pre>
<ul>
<li>after:</li>
</ul>
<pre><code>pluginBabel([
  babelLoaderOptions: {
    plugins: [],
    presets: [],
  }
]);
</code></pre>
<p>This change allows us to add more options for <code>pluginBabel</code>, such as <code>include</code> and <code>exclude</code>.</p>
<h2 id="source-map">Source Map<a aria-hidden="true" href="#source-map">#</a></h2>
<p><code>output.disableSourceMap</code> has been renamed to <code>output.sourceMap</code>.</p>
<ul>
<li>before:</li>
</ul>
<pre><code>export default {
  output: {
    disableSourceMap: {
      js: true,
      css: true,
    },
  },
};
</code></pre>
<ul>
<li>after:</li>
</ul>
<pre><code>export default {
  output: {
    sourceMap: {
      js: false,
      css: false,
    },
  },
};
</code></pre>
<p>The default value of source map has also been updated to improve build performance.</p>
<ul>
<li>before: generate JS / CSS source map in development, generate JS source map in production.</li>
<li>after: generate JS source map in development, no source map are generated in production.</li>
</ul>
<h2 id="inject-styles">Inject Styles<a aria-hidden="true" href="#inject-styles">#</a></h2>
<p>Rename <code>output.disableCssExtract</code> to <code>output.injectStyles</code> to be clearer:</p>
<ul>
<li>before:</li>
</ul>
<pre><code>export default {
  output: {
    disableCssExtract: true,
  },
};
</code></pre>
<ul>
<li>after:</li>
</ul>
<pre><code>export default {
  output: {
    injectStyles: true,
  },
};
</code></pre>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Announcing Rsbuild 0.1]]></title>
        <id>7</id>
        <link href="https://rsbuild.dev/community/releases/v0-1"/>
        <updated>2023-11-22T08:00:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="announcing-rsbuild-01">Announcing Rsbuild 0.1<a aria-hidden="true" href="#announcing-rsbuild-01">#</a></h1>
<blockquote>
<p>November 22, 2023</p>
</blockquote>
<p><img src="https://assets.rspack.dev/rsbuild/rsbuild-banner-v0-1.png" alt=""></img></p>
<p>We are pleased to announce <strong>the release of</strong> <strong><a href="https://github.com/web-infra-dev/rsbuild" target="_blank" rel="noopener noreferrer">Rsbuild</a></strong> <strong>0.1!</strong></p>
<p>Rsbuild is an Rspack-based build tool, designed to be <strong>an enhanced Rspack</strong> <strong>CLI</strong> that is both more user friendly and out-of-the-box. Rsbuild is the ideal solution for those looking to migrate from Webpack to Rspack. It significantly reduces configuration by 90% while offering a 10x build speed.</p>
<h3 id="-performance">🚀 Performance<a aria-hidden="true" href="#-performance">#</a></h3>
<p>The build performance of Rsbuild is on par with native Rspack. Considering that Rsbuild includes more out-of-the-box features, its performance will be slightly lower than Rspack.</p>
<p>This is the time it takes to build 1000 React components:</p>

<blockquote>
<p>The data is based on the benchmark built by the Farm team, more info in <a href="https://github.com/rspack-contrib/performance-compare" target="_blank" rel="noopener noreferrer">performance-compare</a>.</p>
</blockquote>
<h3 id="-features">🔥 Features<a aria-hidden="true" href="#-features">#</a></h3>
<p>Rsbuild has the following features:</p>
<ul>
<li>
<p><strong>Easy to Configure</strong>: One of the goals of Rsbuild is to provide out-of-the-box build capabilities for Rspack users, allowing developers to start a web project with zero configuration. In addition, Rsbuild provides semantic build configuration to reduce the learning curve for Rspack configuration.</p>
</li>
<li>
<p><strong>Performance Oriented</strong>: Rsbuild integrates high-performance Rust-based tools from the community, including <a href="https://github.com/web-infra-dev/rspack" target="_blank" rel="noopener noreferrer">Rspack</a>, <a href="https://swc.rs/" target="_blank" rel="noopener noreferrer">SWC</a> and <a href="https://lightningcss.dev/" target="_blank" rel="noopener noreferrer">Lightning CSS</a>, to deliver top-notch build speed and development experience. Compared to webpack-based tools like Create React App and Vue CLI, Rsbuild provides 5 to 10 times faster build performance and lighter dependencies.</p>
</li>
<li>
<p><strong>Plugin Ecosystem</strong>: Rsbuild has a lightweight plugin system and includes a range of high-quality official plugins. Furthermore, Rsbuild is compatible with most webpack plugins and all Rspack plugins, allowing users to leverage existing community or in-house plugins in Rsbuild without the need for rewriting code.</p>
</li>
<li>
<p><strong>Stable Artifacts</strong>: Rsbuild is designed with a strong focus on the stability of build artifacts. It ensures high consistency between artifacts in the development and production builds, and automatically completes syntax downgrading and polyfill injection. Rsbuild also provides plugins for type checking and artifact syntax validation to prevent quality and compatibility issues in production code.</p>
</li>
<li>
<p><strong>Framework Agnostic</strong>: Rsbuild is not coupled with any front-end UI framework. It supports frameworks like React, Vue, Svelte, Solid and Preact through plugins, and plans to support more UI frameworks from the community in the future.</p>
</li>
</ul>
<h3 id="-next-step">💡 Next Step<a aria-hidden="true" href="#-next-step">#</a></h3>
<p>Currently, Rsbuild is still evolving rapidly and plans to introduce many more powerful new features.</p>
<p>For example, we are developing <strong>Rsdoctor</strong>, a robust build analysis tool that can be used with all Rspack and Webpack projects. It will provide a visual user interface to help developers analyze build times, duplicate dependencies, code transformation processes, and more, making it easier to locate and resolve build issues.</p>
<p><img src="https://assets.rspack.dev/rsbuild/assets/rsdoctor-preview.jpg" alt="Rsdoctor preview"></img></p>
<p>We will be releasing the first working version of Rsdoctor soon. Thereafter, Rsbuild will iterate in sync with Rspack, with plans to release version 1.0 in the first half of 2024.</p>]]></content>
    </entry>
</feed>