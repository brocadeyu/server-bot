[{"id":0,"title":"Rsbuild Core","content":"#\n\nThis section describes some of the core methods provided by Rsbuild.\n\n\ncreateRsbuild#\n\nCreate an Rsbuild instance.\n\n * Type:\n\n\n\n * Example:\n\n\n\n\nOptions#\n\nThe first parameter of createRsbuild is an options object, you can pass in the\nfollowing options:\n\n\n\n * cwd: The root path of the current build, defaults to process.cwd().\n * environment: Only build specified environments.\n * rsbuildConfig: Rsbuild configuration object. Refer to Configuration Overview\n   for all available configuration options.\n\n\nloadConfig#\n\nLoad Rsbuild configuration file.\n\n * Type:\n\n\n\n * Example:\n\n\n\nIf the Rsbuild config file does not exist in the cwd directory, the return value\nof the loadConfig method is { content: {}, filePath: null }.\n\n\nSpecify the configuration file#\n\nUse the path option to load the my-config.ts configuration file:\n\n\n\n\nPassing meta object#\n\nLoad the configuration file and pass in a custom meta object:\n\n\n\nIn the defineConfig configuration function, you can access the foo variable\nthrough the meta object:\n\n\n\n\nloadEnv#\n\nLoad the .env file and return all environment variables starting with the\nspecified prefixes.\n\n * Type:\n\n\n\n * Example:\n\n\n\nThis method will also load files such as .env.local and .env.[mode], see\nEnvironment Variables for details.\n\nTIP\n\nRsbuild CLI will automatically call the loadEnv() method. If you are using the\nRsbuild CLI, you can set the mode parameter through the --env-mode option.\n\n\nmergeRsbuildConfig#\n\nUsed to merge multiple Rsbuild configuration objects.\n\nThe mergeRsbuildConfig function takes multiple configuration objects as\nparameters. It deep merges each configuration object, automatically combining\nmultiple function values into an array of sequentially executed functions, and\nreturns a merged configuration object.\n\n * Type:\n\n\n\n\nBasic Example#\n\n\n\n> This method will not modify the config object in the input parameter.\n\n\nMerge Rules#\n\nIn addition to deep merging, the mergeRsbuildConfig function also handles some\noptions in a special way.\n\nFor example, tools.rspack can be set as a function. When multiple configuration\nobjects contain tools.rspack, mergeRsbuildConfig will not simply retain the last\nfunction. On the contrary, it will merge all tools.rspack functions or objects\ninto an array.\n\n\n\nIn the above example, the merged configuration is in the following format. The\narray first contains an object { someOption: true }, followed by two functions\nin the order they were merged.\n\nEach item in the array will be executed in sequence, and the output of the\nprevious function will serve as the input to the next one, ultimately generating\nan Rspack configuration.\n\n\n\nBy this way, we can ensure that when merging multiple configuration objects, the\nsame multiple tools.rspack fields can all be effective.\n\nIn Rsbuild, most options that support function values use this rule, such as\ntools.postcss, tools.less, tools.bundlerChain, etc.\n\n\nlogger#\n\nUsed to output log information in a unified format, based on rslog.\n\n * Example:\n\n\n\n\nCustom Logger#\n\nYou can use the logger.override method to override partial or all methods of the\ndefault logger:\n\n\n\n\nrspack#\n\nThe rspack object exported from @rspack/core.\n\nYou can import to the rspack object from @rsbuild/core without the need to\ninstall the @rspack/core dependency.\n\n * Type: Rspack\n * Example:\n\n\n\n> Please refer to Rspack - JavaScript API for more information.\n\n\nversion#\n\nThe version of @rsbuild/core currently in use.\n\n * Type: string\n * Example:\n\n\n\n\nensureAssetPrefix#\n\nThe ensureAssetPrefix function is used to prepend a given assetPrefix to a\nstring that might be a URL. If the input string is already a complete URL, it\nreturns the string directly.\n\n * Type:\n\n\n\n * Example:\n\n","routePath":"/api/javascript-api/core","lang":"en","toc":[{"text":"createRsbuild","id":"creatersbuild","depth":2,"charIndex":73},{"text":"Options","id":"options","depth":3,"charIndex":146},{"text":"loadConfig","id":"loadconfig","depth":2,"charIndex":505},{"text":"Specify the configuration file","id":"specify-the-configuration-file","depth":3,"charIndex":723},{"text":"Passing meta object","id":"passing-meta-object","depth":3,"charIndex":825},{"text":"loadEnv","id":"loadenv","depth":2,"charIndex":1017},{"text":"mergeRsbuildConfig","id":"mergersbuildconfig","depth":2,"charIndex":1419},{"text":"Basic Example","id":"basic-example","depth":3,"charIndex":1777},{"text":"Merge Rules","id":"merge-rules","depth":3,"charIndex":1869},{"text":"logger","id":"logger","depth":2,"charIndex":2890},{"text":"Custom Logger","id":"custom-logger","depth":3,"charIndex":2984},{"text":"rspack","id":"rspack","depth":2,"charIndex":3101},{"text":"version","id":"version","depth":2,"charIndex":3367},{"text":"ensureAssetPrefix","id":"ensureassetprefix","depth":2,"charIndex":3457}],"domain":"","frontmatter":{},"version":""},{"id":1,"title":"Environment API","content":"#\n\nHere you can find all the environment related APIs.\n\n> See Multi-Environment Builds for more details.\n\n\nEnvironment Context#\n\nEnvironment context is a read-only object that provides some context information\nabout the current environment.\n\nIn Rsbuild's Plugin hooks, you can get the environment context object through\nthe environment or environments parameter.\n\n\n\n\nname#\n\nThe unique name of the current environment is used to distinguish and locate the\nenvironment, corresponds to the key in the environments configuration.\n\n * Type: string\n * Example:\n\n\n\n\nbrowserslist#\n\nThe browserslist configuration of the current environment. See Browserslist for\nmore details.\n\n * Type: string[]\n * Example:\n\n\n\n\nconfig#\n\nThe normalized Rsbuild config for the current environment.\n\n * Type:\n\n\n\n * Example:\n\n\n\n\ndistPath#\n\nThe absolute path of the output directory, corresponding to the\noutput.distPath.root config in RsbuildConfig.\n\n * Type: string\n\n\n\n\nentry#\n\nThe entry object from the source.entry option.\n\n * Type:\n\n\n\n * Example:\n\n\n\n\nhtmlPaths#\n\nThe path information for all HTML assets.\n\nThis API will return an object, the key is the entry name and the value is the\nrelative path of the HTML file in the dist directory.\n\n * Type:\n\n\n\n * Example:\n\n\n\n\ntsconfigPath#\n\nThe absolute path of the tsconfig.json file, or undefined if the tsconfig.json\nfile does not exist in current project.\n\n * Type:\n\n\n\n * Example:\n\n\n\n\nEnvironment API#\n\nEnvironment API provides some APIs related to the multi-environment build.\n\nYou can use environment API via rsbuild.createDevServer() or\ndev.setupMiddlewares, which allows you to get the build outputs information for\na specific environment in the server side.\n\n\n\n\ngetStats#\n\nGet the build stats of current environment.\n\n * Type:\n\n\n\n * Example:\n\n\n\n\nloadBundle#\n\nLoad and execute the bundles on the server side. This method returns the exports\nof the entry module.\n\n * Type:\n\n\n\n * Example:\n\n\n\n\ngetTransformedHtml#\n\nGet the HTML template content after compilation and transformation.\n\n * Type:\n\n\n\n * Example:\n\n\n\nThis method returns the complete HTML string, including all resources and\ncontent injected through HTML plugins.","routePath":"/api/javascript-api/environment-api","lang":"en","toc":[{"text":"Environment Context","id":"environment-context","depth":2,"charIndex":106},{"text":"name","id":"name","depth":3,"charIndex":366},{"text":"browserslist","id":"browserslist","depth":3,"charIndex":558},{"text":"config","id":"config","depth":3,"charIndex":702},{"text":"distPath","id":"distpath","depth":3,"charIndex":799},{"text":"entry","id":"entry","depth":3,"charIndex":941},{"text":"htmlPaths","id":"htmlpaths","depth":3,"charIndex":1025},{"text":"tsconfigPath","id":"tsconfigpath","depth":3,"charIndex":1242},{"text":"Environment API","id":"environment-api-1","depth":2,"charIndex":-1},{"text":"getStats","id":"getstats","depth":3,"charIndex":1687},{"text":"loadBundle","id":"loadbundle","depth":3,"charIndex":1771},{"text":"getTransformedHtml","id":"gettransformedhtml","depth":3,"charIndex":1915}],"domain":"","frontmatter":{},"version":""},{"id":2,"title":"Rsbuild Instance","content":"#\n\nThis section describes all the properties and methods on the Rsbuild instance\nobject.\n\n\nrsbuild.context#\n\nrsbuild.context is a read-only object that provides some context infos.\n\n\ncontext.version#\n\nThe version of @rsbuild/core currently in use.\n\n * Type:\n\n\n\n\ncontext.rootPath#\n\nThe root path of current build, corresponding to the cwd option of createRsbuild\nmethod.\n\n * Type:\n\n\n\n\ncontext.distPath#\n\nThe absolute path of the output directory, corresponding to the\noutput.distPath.root config in RsbuildConfig.\n\nWhen there are multiple environments, Rsbuild will try to get the parent\ndistPath of all environments as context.distPath.\n\nIf you want to get the absolute path to the output directory of a specified\nenvironment, it is recommended to use environment.distPath.\n\n * Type:\n\n\n\n\ncontext.cachePath#\n\nThe absolute path of the build cache files.\n\n * Type:\n\n\n\n\ncontext.devServer#\n\nDev server information, including the current dev server hostname and port\nnumber.\n\n * Type:\n\n\n\n\ncontext.bundlerType#\n\nThe bundler type of current build.\n\n * Type:\n\n\n\n> Rsbuild internally supports switching to webpack for comparative testing, so\n> this field is provided for differentiation. Usually, you do not need to use\n> this field.\n\n\nrsbuild.build#\n\nPerform a production mode build.\n\n * Type:\n\n\n\n * Example:\n\n\n\n\nMonitor file changes#\n\nIf you need to watch file changes and re-build, you can set the watch option to\ntrue.\n\n\n\nIn watch mode, the rsbuild.build() returns a close method, which can be used to\nstop watching:\n\n\n\n\nStats Object#\n\nIn non-watch mode, the `rsbuild.build() returns an Rspack stats object:\n\n\n\n\nCustom Compiler#\n\nIn some cases, you may want to use a custom compiler:\n\n\n\n\nrsbuild.startDevServer#\n\nStart the local dev server.\n\n * Type:\n\n\n\n * Example:\n\nStart dev server:\n\n\n\nAfter successfully starting dev server, you can see the following logs:\n\n\n\nstartDevServer returns the following parameters:\n\n * urls: URLs to access dev server.\n * port: The actual listening port number.\n * server: Server instance object.\n\n\n\n\nCustom Compiler#\n\nIn some cases, you may want to use a custom compiler:\n\n\n\n\nGet Port Silently#\n\nIn some cases, the default startup port number is already occupied. In this\nsituation, Rsbuild will automatically increment the port number until it finds\nan available one. This process will output a prompt log. If you do not want this\nlog, you can set getPortSilently to true.\n\n\n\n\nrsbuild.createDevServer#\n\nRsbuild comes with a built-in dev server designed to improve the development\nexperience. When you run the rsbuild dev command, the server will start,\nproviding features such as page preview, routing, and hot module reloading.\n\nIf you want to integrate Rsbuild dev server into an custom server, you can use\nthis method to get the instance methods of dev server and call them on demand.\n\n * Type:\n\n\n\n * Example:\n\nHere is an example with express:\n\n\n\nFor detailed usage, please refer to: Example.\n\nIf you want to use Rsbuild DevServer to start the project directly, you can use\nthe Rsbuild - startDevServer method directly. startDevServer is actually\nsyntactic sugar for the following code:\n\n\n\n\nconnectWebSocket#\n\nRsbuild has a builtin WebSocket handler to support HMR:\n\n 1. When a user accesses a page through browser, a WebSocket connection request\n    is automatically initiated to the server.\n 2. After the Rsbuild dev server detects the connection request, it instructs\n    the builtin WebSocket handler to process it.\n 3. After the browser successfully establishes a connection with the Rsbuild\n    WebSocket handler, real-time communication is possible.\n 4. The Rsbuild WebSocket handler notifies the browser after each recompilation\n    is complete. The browser then sends a hot-update.(js|json) request to the\n    dev server to load the new compiled module.\n\nWhen you use custom server, you may encounter HMR connection error problems.\nThis is because the custom server does not forward WebSocket connection requests\nto Rsbuild's WebSocket handler.\n\nAt this time, you need to use the connectWebSocket method to enable Rsbuild to\nsense and process the WebSocket connection request from the browser.\n\n\n\n\nrsbuild.preview#\n\nStart a server to preview the production build locally. This method should be\nexecuted after rsbuild.build.\n\n * Type:\n\n\n\n * Example:\n\nStart the server:\n\n\n\npreview returns the following parameters:\n\n * urls: URLs to access server.\n * port: The actual listening port number.\n * server: Server instance object.\n\n\n\n\nrsbuild.createCompiler#\n\nCreate an Rspack Compiler instance. If there are multiple environments for this\nbuild, the return value is MultiCompiler.\n\n * Type:\n\n\n\n * Example:\n\n\n\n> You do not need to use this API unless you need to custom the dev server or\n> other advanced scenarios.\n\n\nrsbuild.addPlugins#\n\nRegister one or more Rsbuild plugins, which can be called multiple times.\n\nThis method needs to be called before compiling. If it is called after\ncompiling, it will not affect the compilation result.\n\n * Type:\n\n\n\n * Example:\n\n\n\n\nrsbuild.getPlugins#\n\nGet all the Rsbuild plugins registered in the current Rsbuild instance.\n\n * Type:\n\n\n\n * Example:\n\n\n\n\nrsbuild.removePlugins#\n\nRemoves one or more Rsbuild plugins, which can be called multiple times.\n\nThis method needs to be called before compiling. If it is called after\ncompiling, it will not affect the compilation result.\n\n * Type:\n\n\n\n * Example:\n\n\n\n\nrsbuild.isPluginExists#\n\n * Example:\n\n\n\n\nrsbuild.initConfigs#\n\nThe initConfigs method is used to initialize the internal configs of Rsbuild and\nreturn the Rspack config generated internally by Rsbuild.\n\nUsually, you do not need to call the initConfigs method, because it will be\nautomatically called when methods such as rsbuild.build, rsbuild.startDevServer\nare called.\n\n * Type:\n\n\n\n * Example:\n\n\n\n\nrsbuild.inspectConfig#\n\nThe inspectConfig method is typically used for debugging the internal\nconfiguration of Rsbuild. It returns the internally generated Rsbuild config and\nRspack config, serializes them into strings, and supports writing them to the\ndisk.\n\nIf you need to view the Rsbuild and Rspack configurations during the build\nprocess, you can use debug mode, or obtain them through hooks such as\nonBeforeBuild, onBeforeCreateCompile.\n\n * Type:\n\n\n\n\nExample#\n\nGet the content of configs in string format:\n\n\n\nWrite the config content to disk:\n\n\n\n\nOutput Path#\n\nYou can set the output path using outputPath. The default value is\noutput.distPath.root.\n\nIf outputPath is a relative path, it will be concatenated relative to the value\nof output.distPath.root. You can also set outputPath to an absolute path, in\nwhich case the files will be written directly to that path. For example:\n\n\n\n\nrsbuild.onBeforeCreateCompiler#\n\n * Example:\n\n\n\n\nrsbuild.onAfterCreateCompiler#\n\n * Example:\n\n\n\n\nrsbuild.onBeforeBuild#\n\n * Example:\n\n\n\n\nrsbuild.onAfterBuild#\n\n * Example:\n\n\n\n\nrsbuild.onCloseBuild#\n\n * Example:\n\n\n\n\nrsbuild.onBeforeStartDevServer#\n\n * Example:\n\n\n\n\nrsbuild.onAfterStartDevServer#\n\n * Example:\n\n\n\n\nrsbuild.onCloseDevServer#\n\n * Example:\n\n\n\n\nrsbuild.onBeforeStartProdServer#\n\n * Example:\n\n\n\n\nrsbuild.onAfterStartProdServer#\n\n * Example:\n\n\n\n\nrsbuild.onDevCompileDone#\n\n * Example:\n\n\n\n\nrsbuild.onExit#\n\n * Example:\n\n\n\n\nrsbuild.getRsbuildConfig#\n\n * Example:\n\n\n\n\nrsbuild.getNormalizedConfig#\n\n * Example:\n\n","routePath":"/api/javascript-api/instance","lang":"en","toc":[{"text":"rsbuild.context","id":"rsbuildcontext","depth":2,"charIndex":90},{"text":"context.version","id":"contextversion","depth":3,"charIndex":182},{"text":"context.rootPath","id":"contextrootpath","depth":3,"charIndex":261},{"text":"context.distPath","id":"contextdistpath","depth":3,"charIndex":383},{"text":"context.cachePath","id":"contextcachepath","depth":3,"charIndex":787},{"text":"context.devServer","id":"contextdevserver","depth":3,"charIndex":865},{"text":"context.bundlerType","id":"contextbundlertype","depth":3,"charIndex":982},{"text":"rsbuild.build","id":"rsbuildbuild","depth":2,"charIndex":1225},{"text":"Monitor file changes","id":"monitor-file-changes","depth":3,"charIndex":1303},{"text":"Stats Object","id":"stats-object","depth":3,"charIndex":1514},{"text":"Custom Compiler","id":"custom-compiler","depth":3,"charIndex":1605},{"text":"rsbuild.startDevServer","id":"rsbuildstartdevserver","depth":2,"charIndex":1681},{"text":"Custom Compiler","id":"custom-compiler-1","depth":3,"charIndex":2024},{"text":"Get Port Silently","id":"get-port-silently","depth":3,"charIndex":2100},{"text":"rsbuild.createDevServer","id":"rsbuildcreatedevserver","depth":2,"charIndex":2402},{"text":"connectWebSocket","id":"connectwebsocket","depth":3,"charIndex":3119},{"text":"rsbuild.preview","id":"rsbuildpreview","depth":2,"charIndex":4135},{"text":"rsbuild.createCompiler","id":"rsbuildcreatecompiler","depth":2,"charIndex":4465},{"text":"rsbuild.addPlugins","id":"rsbuildaddplugins","depth":2,"charIndex":4748},{"text":"rsbuild.getPlugins","id":"rsbuildgetplugins","depth":2,"charIndex":4998},{"text":"rsbuild.removePlugins","id":"rsbuildremoveplugins","depth":2,"charIndex":5120},{"text":"rsbuild.isPluginExists","id":"rsbuildispluginexists","depth":2,"charIndex":5372},{"text":"rsbuild.initConfigs","id":"rsbuildinitconfigs","depth":2,"charIndex":5413},{"text":"rsbuild.inspectConfig","id":"rsbuildinspectconfig","depth":2,"charIndex":5772},{"text":"Example","id":"example","depth":3,"charIndex":6229},{"text":"Output Path","id":"output-path","depth":3,"charIndex":6325},{"text":"rsbuild.onBeforeCreateCompiler","id":"rsbuildonbeforecreatecompiler","depth":2,"charIndex":6663},{"text":"rsbuild.onAfterCreateCompiler","id":"rsbuildonaftercreatecompiler","depth":2,"charIndex":6712},{"text":"rsbuild.onBeforeBuild","id":"rsbuildonbeforebuild","depth":2,"charIndex":6760},{"text":"rsbuild.onAfterBuild","id":"rsbuildonafterbuild","depth":2,"charIndex":6800},{"text":"rsbuild.onCloseBuild","id":"rsbuildonclosebuild","depth":2,"charIndex":6839},{"text":"rsbuild.onBeforeStartDevServer","id":"rsbuildonbeforestartdevserver","depth":2,"charIndex":6878},{"text":"rsbuild.onAfterStartDevServer","id":"rsbuildonafterstartdevserver","depth":2,"charIndex":6927},{"text":"rsbuild.onCloseDevServer","id":"rsbuildonclosedevserver","depth":2,"charIndex":6975},{"text":"rsbuild.onBeforeStartProdServer","id":"rsbuildonbeforestartprodserver","depth":2,"charIndex":7018},{"text":"rsbuild.onAfterStartProdServer","id":"rsbuildonafterstartprodserver","depth":2,"charIndex":7068},{"text":"rsbuild.onDevCompileDone","id":"rsbuildondevcompiledone","depth":2,"charIndex":7117},{"text":"rsbuild.onExit","id":"rsbuildonexit","depth":2,"charIndex":7160},{"text":"rsbuild.getRsbuildConfig","id":"rsbuildgetrsbuildconfig","depth":2,"charIndex":7193},{"text":"rsbuild.getNormalizedConfig","id":"rsbuildgetnormalizedconfig","depth":2,"charIndex":7236}],"domain":"","frontmatter":{},"version":""},{"id":3,"title":"Rsbuild Types","content":"#\n\nThis section describes some of the type definitions provided by the Rsbuild.\n\n\nRsbuildInstance#\n\nThe type of Rsbuild instance, corresponding to the return value of the\ncreateRsbuild method.\n\n\n\n\nRsbuildConfig#\n\nThe type of Rsbuild configuration.\n\n\n\nYou can also import the type definitions of each field in the Rsbuild config:\n\n\n\n\nNormalizedConfig#\n\nThe type of Rsbuild configuration after normalization, corresponding to the\nreturn value of the getNormalizedConfig method.\n\n\n\nYou can also import the type definitions of each field in the normalized config:\n\n\n\n\nNormalizedEnvironmentConfig#\n\nThe type of Rsbuild environment configuration after normalization, corresponding\nto the return value of the getNormalizedConfig({ environment }) method.\n\n\n\n\nRsbuildContext#\n\nThe type of the context property in the Rsbuild instance.\n\n\n\n\nRsbuildPlugin#\n\nThe type of Rsbuild plugin.\n\n\n\n\nRsbuildPluginAPI#\n\nThe type of the api object passed into the setup function in the Rsbuild plugin.\n\n\n\n\nRsbuildTarget#\n\nThe type of build target.\n\n\n\n\nCreateRsbuildOptions#\n\nThe param type of createRsbuild method.\n\n\n\n\nInspectConfigOptions#\n\nThe param type of rsbuild.inspectConfig method.\n\n\n\n\nRspack#\n\nIncludes all types exported by @rspack/core, such as Rspack.Configuration.\n\n\n\n\nOthers#\n\n * OnExitFn\n * OnAfterBuildFn\n * OnAfterCreateCompilerFn\n * OnAfterStartDevServerFn\n * OnAfterStartProdServerFn\n * OnBeforeBuildFn\n * OnBeforeStartDevServerFn\n * OnBeforeStartProdServerFn\n * OnBeforeCreateCompilerFn\n * OnCloseDevServerFn\n * OnDevCompileDoneFn\n * ModifyRsbuildConfigFn\n * ModifyBundlerChainFn\n * ModifyRspackConfigFn\n * TransformFn,\n * TransformHandler\n * more...","routePath":"/api/javascript-api/types","lang":"en","toc":[{"text":"RsbuildInstance","id":"rsbuildinstance","depth":2,"charIndex":81},{"text":"RsbuildConfig","id":"rsbuildconfig","depth":2,"charIndex":196},{"text":"NormalizedConfig","id":"normalizedconfig","depth":2,"charIndex":332},{"text":"NormalizedEnvironmentConfig","id":"normalizedenvironmentconfig","depth":2,"charIndex":563},{"text":"RsbuildContext","id":"rsbuildcontext","depth":2,"charIndex":750},{"text":"RsbuildPlugin","id":"rsbuildplugin","depth":2,"charIndex":829},{"text":"RsbuildPluginAPI","id":"rsbuildpluginapi","depth":2,"charIndex":877},{"text":"RsbuildTarget","id":"rsbuildtarget","depth":2,"charIndex":981},{"text":"CreateRsbuildOptions","id":"creatersbuildoptions","depth":2,"charIndex":1027},{"text":"InspectConfigOptions","id":"inspectconfigoptions","depth":2,"charIndex":1094},{"text":"Rspack","id":"rspack","depth":2,"charIndex":1169},{"text":"Others","id":"others","depth":2,"charIndex":1257}],"domain":"","frontmatter":{},"version":""},{"id":4,"title":"JavaScript API","content":"#\n\nRsbuild provides a complete set of JavaScript APIs for developers to build\nhigher level tools or frameworks on top of Rsbuild.\n\nRsbuild's JavaScript API can be used in Node.js, Deno, or Bun.\n\n\nAccess Example#\n\nHere is a basic example of how to access the Rsbuild JavaScript API.\n\n\n1. Install Rsbuild#\n\nYou need to install the @rsbuild/core package:\n\n\n2. Create an Rsbuild Instance#\n\nYou can call the createRsbuild method to create an Rsbuild instance:\n\n\n\nThe createRsbuild method provides some options, which you can learn more about\nin the API - createRsbuild.\n\n\n3. Call Rsbuild Instance Method#\n\nThe Rsbuild instance provides some methods, which you can use it according to\nthe usage scenarios.\n\nTo start local development, it is recommended to use the rsbuild.startDevServer\nmethod, which will start a local dev server.\n\n\n\nAfter successfully starting dev server, you can see the following logs:\n\n\n\nTo deploy the App to production environment, it is recommended to use the\nrsbuild.build method, which will build the production outputs.\n\n\n\n> For more introduction of Rsbuild instance methods, please read the Rsbuild\n> Instance chapter.\n\nAfter completing the above three steps, you have learned the basic usage of\nRsbuild. Next, you can customize the build process through the Rsbuild plugin\nand Rsbuild configs.\n\n\nExports Format#\n\nRsbuild provides exports in both ES Modules and CommonJS formats:\n\n\n\n\n\n> It is recommended to use ES modules format, which is more in line with the\n> community standards.","routePath":"/api/start/","lang":"en","toc":[{"text":"Access Example","id":"access-example","depth":2,"charIndex":195},{"text":"1. Install Rsbuild","id":"1-install-rsbuild","depth":3,"charIndex":283},{"text":"2. Create an Rsbuild Instance","id":"2-create-an-rsbuild-instance","depth":3,"charIndex":353},{"text":"3. Call Rsbuild Instance Method","id":"3-call-rsbuild-instance-method","depth":3,"charIndex":566},{"text":"Exports Format","id":"exports-format","depth":2,"charIndex":1318}],"domain":"","frontmatter":{},"version":""},{"id":5,"title":"Community","content":"#\n\n\nVersion#\n\nRsbuild follows the Semantic Versioning specification.\n\nFor more details, see Releases.\n\n\nTeam#\n\nThe development of Rsbuild is driven by ByteDance's Rspack team and community\ncontributors.\n\nFor information about the team members, please refer to Rspack - Core team.\n\n\nCommunication#\n\nYou can communicate with the developers of Rsbuild through the following\nchannels:\n\n * GitHub Discussions\n * Discord\n * Twitter\n\n\nContribution#\n\nContributions to Rsbuild are welcomed!\n\nPlease refer to the Rsbuild Contribution Guide.\n\n\nBlogs#\n\nPlease visit Rspack - Blog to read our latest articles and announcements.\n\n\nExamples#\n\nPlease visit rspack-contrib/rspack-examples to view or contribute to the example\nprojects of Rsbuild.","routePath":"/community/","lang":"en","toc":[{"text":"Version","id":"version","depth":2,"charIndex":3},{"text":"Team","id":"team","depth":2,"charIndex":103},{"text":"Communication","id":"communication","depth":2,"charIndex":281},{"text":"Contribution","id":"contribution","depth":2,"charIndex":427},{"text":"Blogs","id":"blogs","depth":2,"charIndex":532},{"text":"Examples","id":"examples","depth":2,"charIndex":616}],"domain":"","frontmatter":{},"version":""},{"id":6,"title":"Overview","content":"#\n\n\nChangelog#\n\nPlease visit GitHub - release to view the changes for each version of Rsbuild.\n\n\nSemantic Version#\n\nRsbuild follows the Semantic Versioning specification.\n\n * Major version: contains incompatible API changes.\n * Minor version: contains backward compatible features and fixes.\n * Patch version: contains backwards compatible bug fixes.\n\n\nRelease cycle#\n\n * Rsbuild will release several patch versions every week.","routePath":"/community/releases/","lang":"en","toc":[{"text":"Changelog","id":"changelog","depth":2,"charIndex":3},{"text":"Semantic Version","id":"semantic-version","depth":2,"charIndex":96},{"text":"Release cycle","id":"release-cycle","depth":2,"charIndex":352}],"domain":"","frontmatter":{},"version":""},{"id":7,"title":"Announcing Rsbuild 0.1","content":"#\n\n> November 22, 2023\n\n\n\nWe are pleased to announce the release of Rsbuild 0.1!\n\nRsbuild is an Rspack-based build tool, designed to be an enhanced Rspack CLI\nthat is both more user friendly and out-of-the-box. Rsbuild is the ideal\nsolution for those looking to migrate from Webpack to Rspack. It significantly\nreduces configuration by 90% while offering a 10x build speed.\n\n\n🚀 Performance#\n\nThe build performance of Rsbuild is on par with native Rspack. Considering that\nRsbuild includes more out-of-the-box features, its performance will be slightly\nlower than Rspack.\n\nThis is the time it takes to build 1000 React components:\n\n> The data is based on the benchmark built by the Farm team, more info in\n> performance-compare.\n\n\n🔥 Features#\n\nRsbuild has the following features:\n\n * Easy to Configure: One of the goals of Rsbuild is to provide out-of-the-box\n   build capabilities for Rspack users, allowing developers to start a web\n   project with zero configuration. In addition, Rsbuild provides semantic build\n   configuration to reduce the learning curve for Rspack configuration.\n\n * Performance Oriented: Rsbuild integrates high-performance Rust-based tools\n   from the community, including Rspack, SWC and Lightning CSS, to deliver\n   top-notch build speed and development experience. Compared to webpack-based\n   tools like Create React App and Vue CLI, Rsbuild provides 5 to 10 times\n   faster build performance and lighter dependencies.\n\n * Plugin Ecosystem: Rsbuild has a lightweight plugin system and includes a\n   range of high-quality official plugins. Furthermore, Rsbuild is compatible\n   with most webpack plugins and all Rspack plugins, allowing users to leverage\n   existing community or in-house plugins in Rsbuild without the need for\n   rewriting code.\n\n * Stable Artifacts: Rsbuild is designed with a strong focus on the stability of\n   build artifacts. It ensures high consistency between artifacts in the\n   development and production builds, and automatically completes syntax\n   downgrading and polyfill injection. Rsbuild also provides plugins for type\n   checking and artifact syntax validation to prevent quality and compatibility\n   issues in production code.\n\n * Framework Agnostic: Rsbuild is not coupled with any front-end UI framework.\n   It supports frameworks like React, Vue, Svelte, Solid and Preact through\n   plugins, and plans to support more UI frameworks from the community in the\n   future.\n\n\n💡 Next Step#\n\nCurrently, Rsbuild is still evolving rapidly and plans to introduce many more\npowerful new features.\n\nFor example, we are developing Rsdoctor, a robust build analysis tool that can\nbe used with all Rspack and Webpack projects. It will provide a visual user\ninterface to help developers analyze build times, duplicate dependencies, code\ntransformation processes, and more, making it easier to locate and resolve build\nissues.\n\n\n\nWe will be releasing the first working version of Rsdoctor soon. Thereafter,\nRsbuild will iterate in sync with Rspack, with plans to release version 1.0 in\nthe first half of 2024.","routePath":"/community/releases/v0-1","lang":"en","toc":[{"text":"🚀 Performance","id":"-performance","depth":3,"charIndex":375},{"text":"🔥 Features","id":"-features","depth":3,"charIndex":730},{"text":"💡 Next Step","id":"-next-step","depth":3,"charIndex":2441}],"domain":"","frontmatter":{"published_at":"2023-11-22T08:00:00.000Z"},"version":""},{"id":8,"title":"Announcing Rsbuild 0.2","content":"#\n\n> December 11, 2023\n\n\n\nThe Rsbuild 0.2 contains some incompatible API changes. Please refer to the\ncurrent documentation for upgrading.\n\n\nTargets#\n\nWe will move the target option of createRsbuild to rsbuild config, this change\nallows user to configure targets in the rsbuild config file.\n\n * before:\n\n\n\n * after:\n\n\n\n> Only affect JavaScript API. Users using the Rsbuild CLI do not need to change.\n\n\nEntry#\n\nRemove the deprecated source.entries config.\n\nsource.entries has been renamed to source.entry since Rsbuild 0.1.0, and we will\nremove the legacy source.entries config in Rsbuild v0.2.0.\n\n * before:\n\n\n\n * after:\n\n\n\n\nWrite to Disk#\n\ndev.writeToDisk defaults to false.\n\nMotivation:\n\n * Reduce fs overhead and improve dev server performance.\n * Avoid trigger watcher of UnoCSS and other tools. See #654.\n * Align the default behavior with webpack-dev-middleware and other community\n   dev servers.\n\nUser can enable writeToDisk manually:\n\n\n\n\nBabel Plugin#\n\n@rsbuild/plugin-babel will move all babel-loader options to babelLoaderOptions:\n\n * before:\n\n\n\n * after:\n\n\n\nThis change allows us to add more options for pluginBabel, such as include and\nexclude.\n\n\nSource Map#\n\noutput.disableSourceMap has been renamed to output.sourceMap.\n\n * before:\n\n\n\n * after:\n\n\n\nThe default value of source map has also been updated to improve build\nperformance.\n\n * before: generate JS / CSS source map in development, generate JS source map\n   in production.\n * after: generate JS source map in development, no source map are generated in\n   production.\n\n\nInject Styles#\n\nRename output.disableCssExtract to output.injectStyles to be clearer:\n\n * before:\n\n\n\n * after:\n\n","routePath":"/community/releases/v0-2","lang":"en","toc":[{"text":"Targets","id":"targets","depth":2,"charIndex":140},{"text":"Entry","id":"entry","depth":2,"charIndex":401},{"text":"Write to Disk","id":"write-to-disk","depth":2,"charIndex":624},{"text":"Babel Plugin","id":"babel-plugin","depth":2,"charIndex":946},{"text":"Source Map","id":"source-map","depth":2,"charIndex":1159},{"text":"Inject Styles","id":"inject-styles","depth":2,"charIndex":1541}],"domain":"","frontmatter":{"published_at":"2023-12-11T08:00:00.000Z"},"version":""},{"id":9,"title":"Announcing Rsbuild 0.3","content":"#\n\n> January 10, 2024\n\n\n\nRsbuild 0.3 version has upgraded Rspack to 0.5 and now supports Module\nFederation. In addition, it includes some incompatible API changes. Please refer\nto the current documentation for upgrading.\n\n\nRspack 0.5#\n\nBump Rspack to v0.5.0, see: Rspack 0.5 Release Announcement\n\nNotable changes:\n\n * Module Federation added to Rspack\n * Remove deprecated builtins options\n\n\nTOML / YAML Plugin#\n\nThe need to import TOML and YAML in JS is not common, so Rsbuild core will no\nlonger support import TOML and YAML by default in v0.3.0.\n\nThe TOML and YAML plugin will become a independent plugin:\n\n * TOML:\n\n\n\n * YAML:\n\n\n\n\nJavaScript API#\n\nSome JavaScript APIs have changed:\n\n * The printURLs option of rsbuild.startDevServer is deprecated, use\n   server.printUrls instead.\n * The logger option of rsbuild.startDevServer is deprecated, use\n   logger.override() instead.\n\n\nNode Target#\n\n * Adjust default browserslist for node target, from node >= 14 to node >= 16.\n * The default value of output.distPath.server is changed from 'bundles' to\n   'server'","routePath":"/community/releases/v0-3","lang":"en","toc":[{"text":"Rspack 0.5","id":"rspack-05","depth":2,"charIndex":222},{"text":"TOML / YAML Plugin","id":"toml--yaml-plugin","depth":2,"charIndex":391},{"text":"JavaScript API","id":"javascript-api","depth":2,"charIndex":634},{"text":"Node Target","id":"node-target","depth":2,"charIndex":883}],"domain":"","frontmatter":{"published_at":"2024-01-10T08:00:00.000Z"},"version":""},{"id":10,"title":"Announcing Rsbuild 0.4","content":"#\n\n> February 06, 2024\n\n\n\nRsbuild 0.4 provides built-in support for module federation. It also contains\nsome incompatible API updates. Please refer to the current document for\nupgrading.\n\n\nModule Federation Config#\n\nRsbuild now provides a builtin moduleFederation option, which will make\nconfiguring Module Federation in Rsbuild much easier.\n\n * Example:\n\n\n\nWhen you use this option, Rsbuild will automatically set the default publicPath\nand splitChunks config, making module federation ready to use out of the box.\n\n> See RFC - Provide first-class support for Module Federation for details.\n\n\nPlugin Hook Order#\n\nIn Rsbuild plugin, you can now declare the order of hooks using the order field:\n\n\n\n> For more details, see Plugin Hooks.\n\n\nRename disableFilenameHash#\n\nThe output.disableFilenameHash config has been renamed to output.filenameHash.\n\n * Before:\n\n\n\n * After:\n\n\n\n\nRemove postcss-flexbugs-fixes#\n\nRsbuild 0.4 removed the builtin postcss-flexbugs-fixes plugin.\n\nThis plugin is used to fix some flex bugs for IE 10 / 11. Considering that\nmodern browsers no longer have these flex issues, we removed this plugin to\nimprove build performance.\n\nIf your project needs to be compatible with IE 10 / 11 and encounters these flex\nissues, you can manually add this plugin in Rsbuild:\n\n * Install plugin:\n\n\n\n * Register plugin in postcss.config.cjs:\n\n\n\n\nPure React Plugin#\n\nThe React plugin has removed default source.transformImport config for antd v4\nand @arco-design/web-react.\n\nConfigurations related to the UI library should be provided in the UI\nlibrary-specific plugins, such as rsbuild-plugin-antd or rsbuild-plugin-arco,\nand the React plugin will concentrate on providing fundamental abilities for\nReact.\n\n * If your project is using antd v3 or v4, you can manually add the following\n   config:\n\n\n\n * If your project is using @arco-design/web-react, you can manually add the\n   following config:\n\n\n\n\nJavaScript API#\n\nThe loadConfig method now returns both the contents of the config and the path\nto the config file:\n\n","routePath":"/community/releases/v0-4","lang":"en","toc":[{"text":"Module Federation Config","id":"module-federation-config","depth":3,"charIndex":188},{"text":"Plugin Hook Order","id":"plugin-hook-order","depth":3,"charIndex":593},{"text":"Rename disableFilenameHash","id":"rename-disablefilenamehash","depth":3,"charIndex":737},{"text":"Remove postcss-flexbugs-fixes","id":"remove-postcss-flexbugs-fixes","depth":2,"charIndex":874},{"text":"Pure React Plugin","id":"pure-react-plugin","depth":2,"charIndex":1352},{"text":"JavaScript API","id":"javascript-api","depth":2,"charIndex":1907}],"domain":"","frontmatter":{"published_at":"2024-02-06T08:00:00.000Z"},"version":""},{"id":11,"title":"Announcing Rsbuild 0.5","content":"#\n\n> March 19, 2024\n\n\n\nRsbuild 0.5 is an important milestone. As of this release, most of the Rsbuild\nAPI has reached a stable state and we expect to release Rsbuild 1.0 in Q3 2024.\n\nMain changes:\n\n * ⚡️ Support for Lightning CSS to speed up CSS compilation.\n * 🌟 Support for custom server based on the new JavaScript API.\n * 🍭 Refactor the SVGR plugin to support more usages.\n * 📍 Support for custom minify options.\n\n\n⚡️ Supports Lightning CSS#\n\nLightning CSS is a high performance CSS parser, transformer and minifier written\nin Rust. It supports parsing and transforming many modern CSS features into\nsyntax supported by target browsers, and also provides a better compression\nratio.\n\nRsbuild provides the Lightning CSS plugin to use Lightning CSS on an opt-in\nbasis, replacing the built-in PostCSS, autoprefixer, and SWC CSS minimizer in\nRsbuild.\n\nAll you need to do is register the Lightning CSS plugin in the Rsbuild\nconfiguration to complete the switch:\n\n\n\nIn a real large-scale web application, we have integrated the Rsbuild Lightning\nCSS plugin and used Rsdoctor to analyze the changes in build time:\n\n * CSS compilation time was reduced from 8.4s to 0.12s, a 70x improvement.\n * The overall build time was reduced from 33.1s to 25.4s, a 30% increase.\n\n\n🌟 Support for Custom Server#\n\nRsbuild now supports replacing the dev server with a custom server that reuses\nRsbuild's page preview, routing, and module hot update features. This makes it\neasier to integrate Rsbuild with other Node.js frameworks.\n\nFor example, you can implement a custom server based on express:\n\n\n\nFor more details, please refer to Rsbuild - createDevServer.\n\n\n🍭 Refactoring SVGR Plugin#\n\nIn versions prior to 0.5.0, the default usage of the SVGR plugin was the same as\ncreate-react-app, allowing SVGs to be used via mixed import:\n\n\n\nHowever, there are two problems with this approach:\n\n 1. Increased bundle size: Mixed import causes a single SVG module to be\n    compiled into two types of code (even if some exports are not used), which\n    will increase the bundle size.\n 2. Slow down compiling: Mixed import will cause extra compilation overhead.\n    Even if the ReactComponent export is not used in the code, the SVG file will\n    still be compiled by SVGR. And SVGR is based on Babel, which has a high\n    performance overhead.\n\nSo we have refactored the @rsbuild/plugin-svgr plugin to support converting SVGs\nto React components via the ?react query. This approach can solve the problems\nmentioned above, and is more in line with community best practices.\n\n\n\nThe SVGR plugin now supports switching between different SVGR usages. If a\nproject needs to use the previous mixed import usage, you can manually enable\nthe mixedImport option:\n\n\n\n\n📍 Custom Minify Options#\n\nThe output.disableMinimize option has been renamed to output.minify, and it\nallows customizing JS and HTML minification options.\n\n\n\nProjects using output.disableMinimize can refer to the example below:\n\n\n\n> See \"allow customize minify options\".\n\n--------------------------------------------------------------------------------\n\nFor more information, please refer to:\n\n * Rsbuild 0.5.0 Changelog\n * Rsbuild 0.5.0 Breaking Changes","routePath":"/community/releases/v0-5","lang":"en","toc":[{"text":"⚡️ Supports Lightning CSS","id":"️-supports-lightning-css","depth":2,"charIndex":421},{"text":"🌟 Support for Custom Server","id":"-support-for-custom-server","depth":2,"charIndex":1266},{"text":"🍭 Refactoring SVGR Plugin","id":"-refactoring-svgr-plugin","depth":2,"charIndex":1646},{"text":"📍 Custom Minify Options","id":"-custom-minify-options","depth":2,"charIndex":2733}],"domain":"","frontmatter":{"published_at":"2024-03-19T08:00:00.000Z"},"version":""},{"id":12,"title":"Announcing Rsbuild 0.6","content":"#\n\n> April 10, 2024\n\n\n\nRsbuild 0.6 has been released along with Rspack 0.6!\n\nNotable changes:\n\n * Upgrade to Rspack 0.6\n * Error overlay enabled by default\n * Support for Vue JSX HMR\n * New transform plugin API\n * Default port changed to 3000\n\n\nUpgrade to Rspack 0.6#\n\nRsbuild has upgraded the dependent Rspack to version 0.6, and adapted the\nbreaking changes of CSS Modules contained in Rspack 0.6.\n\nIn the new version, Rspack has enabled the new tree shaking algorithm by\ndefault, resulting in a significant improvement in bundle size and artifact\nstability. Please refer to the Rspack 0.6 release announcement to learn more.\n\n\nError overlay enabled by default#\n\nStarting from Rsbuild 0.6, the default value of dev.client.overlay has been\nadjusted to true. This means that when a compilation error occurs, Rsbuild will\npop up the error overlay by default to display the error information:\n\n\n\nIf you do not need this feature, you can set dev.client.overlay to false to\ndisable it.\n\n\n\n\nSupport for Vue JSX HMR#\n\n@rsbuild/plugin-vue-jsx now supports JSX HMR. When you modify JSX code in a Vue\n3 application, it will automatically trigger hot module replacement and preserve\nthe current page state.\n\nThis feature is implemented by community contributor @liyincode ❤️, and released\nas a standalone package babel-plugin-vue-jsx-hmr, for use in projects outside of\nRsbuild.\n\n\nNew transform API#\n\nRsbuild plugin now supports the transform API, which can be thought of as a\nlightweight implementation of Rspack loader. It provides a simple and easy to\nuse API and automatically calls Rspack loader at the backend to transform the\ncode.\n\nIn Rsbuild plugins, you can quickly implement code transformation functions\nusing api.transform, which can handle the majority of common scenarios without\nhaving to learn how to write an Rspack loader.\n\nFor example, match modules with the .pug extension and transform them to\nJavaScript code:\n\n\n\nFor some complex code transformation scenarios, api.transform may not be\nsufficient. In such situations, you can implement it using the Rspack loader.\n\n\nDefault port changed to 3000#\n\nRsbuild has changed the default value of server.port from 8080 to 3000.\n\nPort 3000 is commonly used for web development, and is also the default port\nused by tools such as create-react-app. Changing the default port to 3000 can\nprevent possible port conflicts when using 8080.\n\nIf you need to use port 8080, you can manually set it as follows:\n\n","routePath":"/community/releases/v0-6","lang":"en","toc":[{"text":"Upgrade to Rspack 0.6","id":"upgrade-to-rspack-06","depth":2,"charIndex":244},{"text":"Error overlay enabled by default","id":"error-overlay-enabled-by-default","depth":2,"charIndex":629},{"text":"Support for Vue JSX HMR","id":"support-for-vue-jsx-hmr","depth":2,"charIndex":985},{"text":"New transform API","id":"new-transform-api","depth":2,"charIndex":1370},{"text":"Default port changed to 3000","id":"default-port-changed-to-3000","depth":2,"charIndex":2078}],"domain":"","frontmatter":{"published_at":"2024-04-10T18:00:00.000Z"},"version":""},{"id":13,"title":"Announcing Rsbuild 0.7","content":"#\n\n> May 28, 2024\n\n\n\nRsbuild 0.7 has been released with Rspack 0.7!\n\nThis is the last minor release before the Rsbuild 1.0. After this, the Rspack\nteam will focus on the development of 1.0 and aim to launch the Rspack / Rsbuild\n1.0 alpha version soon.\n\nNotable changes in Rsbuild 0.7:\n\n * Support for Storybook\n * Faster Sass Compilation\n * Better CSS supports\n * Typed CSS Modules\n * ESM/CJS Exports\n * Breaking Changes\n\n\nSupport for Storybook#\n\nRsbuild now supports Storybook!\n\nstorybook-builder-rsbuild is a Storybook builder based on Storybook v8 and\nRsbuild that allows you to quickly build your components and stories.\n\n\n\n * For projects using Rsbuild, you can now quickly integrate Storybook and reuse\n   your existing Rsbuild config.\n * For projects using the Storybook webpack builder, you can now upgrade to\n   Rsbuild and get ~5x faster build performance.\n\nWe also provide storybook-react-rsbuild and storybook-vue3-rsbuild to support\nReact and Vue 3. For example, to integrate React:\n\n\n\n\n\n> For more usage, please refer to storybook-rsbuild repository.\n\n\nFaster Sass Compilation#\n\nIn Rsbuild 0.7, Sass compilation is 3~10 times faster. The performance\nimprovements are particularly noticeable on large projects.\n\nComparison of build times for Rsbuild 0.6 and 0.7 when compiling Bootstrap's\nSass code:\n\n\n\nThis improvement is due to Rsbuild's default use of sass-embedded, a JavaScript\nwrapper around the native Dart Sass executable that provides a consistent API\nand superior performance.\n\nRsbuild has also enabled the latest sass-loader's modern-compiler API. This can\nenable Sass's shared resources feature, which allows the same compiler process\nto be reused when compiling multiple files, improving build performance.\n\n\nBetter CSS Supports#\n\nRsbuild now uses CssExtractRspackPlugin to extract CSS into separate files,\nrather than using the experimental.css config to do so.\n\nThis allows Rsbuild to support more CSS features, including:\n\n * Support for using\n   * Support for complex CSS Modules :global() syntax\n   \n   \n   \n   * Support for more CSS Modules options, such as cssModules.exportGlobals\n   * Now you can use tools.cssExtract to configure CssExtractRspackPlugin.\n   \n   \n   Typed CSS Modules#\n   \n   Rsbuild 0.7 added a new Typed CSS Modules plugin, which is used to generate\n   type declaration files for CSS Modules in the project.\n   \n   When you use CSS Modules in a TypeScript project, the default type definition\n   is as follows. It can only provide basic type support, and cannot accurately\n   prompt which class names are exported by CSS Modules.\n   \n   \n   \n   After using the Typed CSS Modules plugin, Rsbuild will generate type\n   declaration files for all CSS Modules in the project, providing accurate type\n   hints.\n   \n   For example, create two files named src/index.ts and src/index.module.css:\n   \n   \n   \n   \n   \n   After building, Rsbuild will generate a src/index.module.css.d.ts type\n   declaration file:\n   \n   \n   \n   Now when you open the src/index.ts file, you can see that the styles object\n   already has an accurate type.\n   \n   \n   ESM/CJS Exports#\n   \n   Now, all packages of Rsbuild provide exports in both ES modules and CommonJS\n   formats, and \"type\"=\"module\" has been declared in the package.json.\n   \n   \n   \n   This allows you to use import or require to use the JavaScript API of\n   Rsbuild:\n   \n   \n   \n   ESM/CJS interop is a tricky issue, so we will provide both formats for a long\n   time to make it easier for more users to use.\n   \n   \n   Breaking Changes#\n   \n   \n   Upgrade Rspack to 0.7#\n   \n   Rsbuild has upgraded the dependent Rspack to version 0.7 and adapted to the\n   breaking changes included in it. Typically, these breaking changes will not\n   affect you.\n   \n   In the new version, Rspack supports lazy compilation, which can significantly\n   improve the dev startup time for large projects. Please refer to Announcing\n   Rspack 0.7 to learn more.\n   \n   In Rsbuild, you can use dev.lazyCompilation to enable lazy compilation.\n   \n   \n   Sass and Less Plugins#\n   \n   Rsbuild's Sass and Less plugins are now two separate npm packages instead of\n   being built into @rsbuild/core as before. This change allows users to enable\n   Sass and Less compilation as needed.\n   \n   For example, projects using CSS solutions such as Tailwind CSS, CSS-in-JS,\n   etc., no longer need to install the dependencies required for Sass and Less,\n   saving about 7MB of disk space.\n   \n   * If your project requires compiling .scss or .sass files, please install and\n     register the @rsbuild/plugin-sass plugin:\n   \n   \n   \n   * If your project requires compiling .less files, please install and register\n     the @rsbuild/plugin-less plugin:\n   \n   \n   \n   \n   dataUriLimit Defaults#\n   \n   The default value for output.dataUriLimit has been changed from 10000 (10kB)\n   to 4096 (4KiB).\n   \n   This is because more applications are currently using HTTP 2.0, so splitting\n   assets into separate files would perform better. Meanwhile, inlining assets\n   over 4KiB can make the JS bundle to be too large and not cache friendly.\n   \n   If you prefer the previous defaults, add the following config:\n   \n   ","routePath":"/community/releases/v0-7","lang":"en","toc":[{"text":"Support for Storybook","id":"support-for-storybook","depth":2,"charIndex":422},{"text":"Faster Sass Compilation","id":"faster-sass-compilation","depth":2,"charIndex":1066},{"text":"Better CSS Supports","id":"better-css-supports","depth":2,"charIndex":1734},{"text":"Typed CSS Modules","id":"typed-css-modules","depth":2,"charIndex":-1},{"text":"ESM/CJS Exports","id":"esmcjs-exports","depth":2,"charIndex":-1},{"text":"Breaking Changes","id":"breaking-changes","depth":2,"charIndex":-1},{"text":"Upgrade Rspack to 0.7","id":"upgrade-rspack-to-07","depth":3,"charIndex":-1},{"text":"Sass and Less Plugins","id":"sass-and-less-plugins","depth":3,"charIndex":-1},{"text":"dataUriLimit Defaults","id":"dataurilimit-defaults","depth":3,"charIndex":-1}],"domain":"","frontmatter":{"published_at":"2024-05-28T18:00:00.000Z"},"version":""},{"id":14,"title":"Announcing Rsbuild 1.0","content":"#\n\n> September 10, 2024\n\n\n\nWe are pleased to announce the release of Rsbuild 1.0!\n\n\nWhy Rsbuild#\n\nFor a long time, developers using webpack have been bothered by two major\nissues: slow build times and configuration complexity.\n\nWe have used Rust to rewrite webpack into Rspack, which addresses the slow build\nissue. However, to maintain compatibility with the webpack ecosystem, Rspack\nretains webpack's configuration and API, which means it still has some\ncomplexity and a learning curve.\n\n\nEvolution of the ecosystem#\n\nIn the early days, there were some excellent tools within the webpack ecosystem,\nsuch as Create React App (CRA) and Vue CLI. These tools provided best practices\nfor building React or Vue applications, while hiding the complex webpack\nconfiguration. As a result, many React and Vue users used these tools to build\napplications without having to configure webpack from scratch.\n\nAs the ecosystem evolved, full-stack web frameworks such as Next.js, Nuxt, and\nRemix became popular; Vite was introduced as a lightweight build tool and also\ngained popularity. However, CRA and Vue CLI gradually stopped being maintained.\n\nWhen we look at the npm download numbers for webpack, CRA, and Vue CLI, we find\nthat a large number of projects are still using these tools. For example,\nwebpack has about 25 million weekly downloads, and CRA has nearly 3 million\nweekly downloads. Many of these projects are CSR applications that do not\nrequire the SSR features of full-stack frameworks. Vite seems like a good\nchoice, but after using Vite in our ByteDance projects, we found that migrating\nfrom webpack to Vite comes with high costs and introduces new problems, such as\ndev and build inconsistency, and slow page refreshes in large applications\nduring development.\n\nFor the webpack ecosystem, we discovered a sad fact: the webpack ecosystem lacks\na build tool that is easy to use and well maintained. The tool should be as\nuser-friendly as CRA and Vue CLI, fully meet the needs of CSR application\ndevelopment, and have features such as fast startup and plugin support similar\nto Vite.\n\n\nThe birth of Rsbuild#\n\nDuring the development of Rspack, we became aware of the above problems and\ndecided to create a modern build tool based on Rspack called Rsbuild.\n\n\n\nRsbuild is built on top of Rspack. We designed Rsbuild with an easy-to-use,\nTypeScript-friendly API and a set of carefully designed configurations to fully\nleverage the Rspack's build performance while reducing configuration complexity\nand high up-front costs.\n\nWhen developing Rsbuild, we learned best practices from the best tools in the\ncommunity and focused on two usage scenarios:\n\n * As a lightweight build tool: Helps developers quickly setup web applications\n   with out-of-the-box support for CSR applications.\n * As a shared infrastructure: Provides JavaScript API and Plugin API for\n   higher-level tools and frameworks, allowing developers to easily build their\n   tools or frameworks on top of Rsbuild.\n\n\nPerformance#\n\nRsbuild is currently the fastest build tool in the webpack and Rspack ecosystem.\nHere is a comparison between Rsbuild, Create React App, Vite, and Rspack CLI:\n\nMETRIC                            CREATE REACT APP   VITE (WITH SWC)   RSPACK CLI   RSBUILD   RSBUILD VS CRA\ndev startup time (1000 modules)   5.47s              1.29s             0.66s        0.39s     14x faster\nbuild time (1000 modules)         5.69s              1.39s             0.51s        0.27s     20x faster\nnpm dependencies count            1241               15                283          14        99% reduction\nnpm install size                  146.6MB            56.3MB            75.1MB       59.1MB    60% reduction\n\nCompared to the Rspack CLI, Rsbuild provides a richer set of features while\ndemonstrating superior performance.\n\nThis is because Rspack CLI needs to maintain compatibility with the webpack-cli.\nIt relies on the webpack-dev-server and provides the same default behavior as\nwebpack, which has some performance limitations. Rsbuild, on the other hand, is\ndesigned for modern web development. We have reimplemented a lighter CLI, dev\nserver, and build process for Rsbuild, resulting in faster startup speeds and\nfewer npm dependencies.\n\n> See the Rsbuild Introduction for more comparisons between Rsbuild, webpack,\n> Vue CLI, and Vite.\n\n\nWho is using#\n\nIn the Rspack 1.0 Announcement, we introduced that Rspack is growing rapidly,\nwith almost half of Rspack users using Rsbuild and giving us lots of positive\nfeedback.\n\nAt ByteDance, we use Rsbuild as the cornerstone of our internal web frameworks\nto support thousands of web projects. These projects cover diverse use cases,\nincluding desktop web applications, mobile web applications, cross-platform web\napplications, documentation sites, and more.\n\nFor the community, we have open-sourced a high-performance toolchain based on\nRsbuild, including the static site generator Rspress, the library development\ntool Rslib, the full-stack React framework Modern.js, and the Storybook Rsbuild.\nThe extensibility of Rsbuild allows these tools to flexibly integrate with\nRsbuild and share its plugin ecosystem.\n\nAfter releasing Rsbuild 1.0, we also plan to collaborate with some excellent\nteams like Remix, to bring Rsbuild to more web frameworks.\n\n\nPlugin ecosystem#\n\nThe Rsbuild plugin ecosystem is constantly evolving. There are currently over 50\nRsbuild plugins available in the community. We provide several advanced features\nthrough plugins to support the development of production-grade applications,\nsuch as type checking, compatibility checking, and static assets retry. Thanks\nto Rspack's compatibility with webpack, Rsbuild also supports most webpack\nplugins.\n\nCompared to webpack or Rspack, the Rsbuild plugin API is more straightforward\nand beginner-friendly, allowing developers to easily create plugins to meet\ntheir specific needs.\n\nFor example, let's implement a plugin that outputs a file to the dist directory.\nThe implementation comparison between Rspack and Rsbuild is as follows:\n\n\n\nAs shown, the API style of the Rsbuild plugin is similar to esbuild, it can be\ndefined by a function. The plugin hooks have been simplified to avoid verbose\nAPIs, making plugin development more intuitive.\n\n\nHow to use 1.0#\n\n * If you haven't used Rsbuild before, you can experience it through the\n   CodeSandbox example or refer to the Quick Start to use Rsbuild.\n * If you are using Rsbuild 0.7 or earlier, please note that 1.0 includes some\n   breaking changes. You can refer to the Migrating from 0.x document to\n   upgrade.\n * Rsbuild also provides migration guides for projects that use webpack, CRA,\n   Vue CLI, etc. See Migrate from Existing Projects.\n\n> Give a star 🌟 to the Rsbuild GitHub repository.\n\n\nWhat's next#\n\nRsbuild 1.0 provides several advanced features for the development of enterprise\napplications and higher-level tools, such as the multi-environment build API,\nSSR API, plugin API, Module Federation support, and library build (Rslib). We\nplan to continue to enhance these features to better support the development of\nthe Rsbuild ecosystem.\n\nIn the next 12 to 18 months, Rsbuild will evolve together with Rspack, adopting\nRspack's new features as soon as they become available. These features include\npersistent caching, faster HMR, and TypeScript-based optimizations. For more\ndetails, see Rspack - What's next.\n\nFinally, a big thank you to all the developers who have contributed to Rsbuild\n❤️:\n\n","routePath":"/community/releases/v1-0","lang":"en","toc":[{"text":"Why Rsbuild","id":"why-rsbuild","depth":2,"charIndex":83},{"text":"Evolution of the ecosystem","id":"evolution-of-the-ecosystem","depth":3,"charIndex":491},{"text":"The birth of Rsbuild","id":"the-birth-of-rsbuild","depth":3,"charIndex":2091},{"text":"Performance","id":"performance","depth":2,"charIndex":2981},{"text":"Who is using","id":"who-is-using","depth":2,"charIndex":4325},{"text":"Plugin ecosystem","id":"plugin-ecosystem","depth":2,"charIndex":5281},{"text":"How to use 1.0","id":"how-to-use-10","depth":2,"charIndex":6243},{"text":"What's next","id":"whats-next","depth":2,"charIndex":6749}],"domain":"","frontmatter":{"published_at":"2024-09-10T18:00:00.000Z"},"version":""},{"id":15,"title":"dev.assetPrefix","content":"#\n\n * Type: boolean | string | 'auto'\n * Default: server.base\n\nSet the URL prefix of static assets in development mode.\n\nassetPrefix will affect the URLs of most of the static assets, including\nJavaScript files, CSS files, images, videos, etc. If an incorrect value is\nspecified, you'll receive 404 errors while loading these resources.\n\nThis config is only used in development mode. In the production mode, please use\nthe output.assetPrefix to set the URL prefix.\n\n\nDefault Value#\n\nThe default value of dev.assetPrefix is the same as server.base.\n\nWhen server.base is /foo, index.html and other static assets can be accessed\nthrough http://localhost:3000/foo/.\n\nIt should be noted that when customizing the dev.assetPrefix option, if you want\nstatic assets to be normally accessible through the Rsbuild dev server,\ndev.assetPrefix should contain the same URL prefix as server.base, such as:\n\n\n\n\nBoolean Type#\n\nIf assetPrefix is set to true, the URL prefix will be http://localhost:/:\n\n\n\nThe resource URL loaded in the browser is as follows:\n\n\n\nIf assetPrefix is set to false or not set, / is used as the default value.\n\n\nString type#\n\nWhen the value of assetPrefix is a string type, the string will be used as a\nprefix and automatically appended to the static resource URL.\n\n * For example, set to a path relative to the root directory:\n\n\n\nThe resource URL loaded in the browser is as follows:\n\n\n\n * For example, set to a complete URL:\n\n\n\nThe resource URL loaded in the browser is as follows:\n\n\n\n\nPort placeholder#\n\nThe port number that Rsbuild server listens on may change. For example, if the\nport is in use, Rsbuild will automatically increment the port number until it\nfinds an available port.\n\nTo avoid dev.assetPrefix becoming invalid due to port changes, you can use one\nof the following methods:\n\n * Enable server.strictPort.\n * Use the placeholder to refer to the current port number. Rsbuild will replace\n   the placeholder with the actual port number it is listening on.\n\n\n\n\nPath Types#\n\nassetPrefix can be set to the following types of paths:\n\n * absolute path: This is the most common practice, can be specific server\n   paths, like /assets/.\n * 'auto': Rspack will automatically calculate the path and generate relative\n   paths based on file location.\n\nTIP\n\nIt's not recommended to set assetPrefix as a relative path, such as './assets/'.\nThis is because when assets are at different path depths, using relative paths\nmay cause assets to load incorrectly.\n\n\nCompare with publicPath#\n\nThe functionality of dev.assetPrefix is basically the same as the\noutput.publicPath config in Rspack.\n\nThe differences from the native configuration are as follows:\n\n * dev.assetPrefix only takes effect in development mode.\n * dev.assetPrefix default value is the same as server.base.\n * dev.assetPrefix automatically appends a trailing / by default.\n * The value of dev.assetPrefix is written to the process.env.ASSET_PREFIX\n   environment variable (can only be accessed in client code).","routePath":"/config/dev/asset-prefix","lang":"en","toc":[{"text":"Default Value","id":"default-value","depth":2,"charIndex":466},{"text":"Boolean Type","id":"boolean-type","depth":2,"charIndex":895},{"text":"String type","id":"string-type","depth":2,"charIndex":1121},{"text":"Port placeholder","id":"port-placeholder","depth":3,"charIndex":1497},{"text":"Path Types","id":"path-types","depth":2,"charIndex":1986},{"text":"Compare with `publicPath`","id":"compare-with-publicpath","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":16,"title":"dev.cliShortcuts","content":"#\n\n * Type:\n\n\n\n * Default: true when using Rsbuild CLI, false otherwise.\n * Version: >= 1.0.11\n\nWhether to enable CLI shortcuts.\n\n\nAll Shortcuts#\n\nPress h + Enter to show all shortcuts:\n\n\n\n\nExample#\n\n * Enable:\n\n\n\n * Disable:\n\n\n\n\nCustom Shortcuts#\n\ncustom option can be used to custom shortcuts, the value is a function that\nreceives the default shortcuts array and returns a new shortcuts array.\n\n * Add custom shortcuts:\n\n\n\n * Disable some shortcuts:\n\n\n\n\nPrint Help#\n\nhelp option can be used to control whether to print the help hint when the\nserver is started:\n\n\n\n * Disable:\n\n","routePath":"/config/dev/cli-shortcuts","lang":"en","toc":[{"text":"All Shortcuts","id":"all-shortcuts","depth":2,"charIndex":130},{"text":"Example","id":"example","depth":2,"charIndex":189},{"text":"Custom Shortcuts","id":"custom-shortcuts","depth":2,"charIndex":229},{"text":"Print Help","id":"print-help","depth":2,"charIndex":456}],"domain":"","frontmatter":{},"version":""},{"id":17,"title":"dev.client","content":"#\n\nConfigure the client code injected by Rsbuild during the development process.\nThis can be used to set the WebSocket URL for HMR.\n\n * Type:\n\n\n\n * Default:\n\n\n\n\nConfigure WebSocket URL#\n\nBy default, when you start the dev server and visit the http://localhost:3000/,\na WebSocket request is made to ws://localhost:3000/rsbuild-hmr, establishing a\nconnection between the page and the dev server.\n\nIn some development scenarios, you may need to adjust the WebSocket URL to\nensure that the WebSocket request can connect correctly.\n\nFor example, if you are developing using a proxy tool, you may actually be\naccessing an online domain. In this case, you can manually configure dev.client\nto point the WebSocket URL to your local dev server. Below is an example where\nthe WebSocket request URL is ws://127.0.0.1:3000/rsbuild-hmr:\n\n\n\n\nPort placeholder#\n\nThe port number that Rsbuild server listens on may change. For example, if the\nport is in use, Rsbuild will automatically increment the port number until it\nfinds an available port.\n\nTo avoid client.port becoming invalid due to port changes, you can use one of\nthe following methods:\n\n * Enable server.strictPort.\n * Use the placeholder to refer to the current port number. Rsbuild will replace\n   the placeholder with the actual port number it is listening on.\n\n\n\n\nhot-update files#\n\nDuring the HMR process, the page will make GET requests to get hot-update files,\nincluding *.hot-update.json and *.hot-update.js. These files contain the\nnecessary information for hot updates, such as the updated modules and their\ncode.\n\nHot-update files are considered to be static assets. If you need to configure\nthe URL for hot-update files, please use the dev.assetPrefix option.\n\n\nError Overlay#\n\nThe dev.client.overlay option allows you to choose whether or not to enable the\nerror overlay feature.\n\nBy default, Rsbuild will display an error overlay in the browser when a\ncompilation error occurs, providing error messages and stacks:\n\n\n\nIf you need to disable the error overlay, you can set it to false:\n\n\n\nTIP\n\nThe error overlay feature requires the current browser to support Web\nComponents. If the browser does not support it, the overlay will not be\ndisplayed.","routePath":"/config/dev/client","lang":"en","toc":[{"text":"Configure WebSocket URL","id":"configure-websocket-url","depth":2,"charIndex":160},{"text":"Port placeholder","id":"port-placeholder","depth":3,"charIndex":827},{"text":"hot-update files","id":"hot-update-files","depth":2,"charIndex":1312},{"text":"Error Overlay","id":"error-overlay","depth":2,"charIndex":1718}],"domain":"","frontmatter":{},"version":""},{"id":18,"title":"dev.hmr","content":"#\n\n * Type: boolean\n * Default: true\n\nWhether to enable Hot Module Replacement.\n\nPlease refer to Hot Module Replacement for more information.\n\n> You can configure the HMR behavior of the client code via dev.client.\n\n\nDisabling HMR#\n\nIf dev.hmr is set to false, HMR and react-refresh will be disabled and Rsbuild\nwill automatically fall back to dev.liveReload.\n\n","routePath":"/config/dev/hmr","lang":"en","toc":[{"text":"Disabling HMR","id":"disabling-hmr","depth":2,"charIndex":216}],"domain":"","frontmatter":{},"version":""},{"id":19,"title":"dev.lazyCompilation","content":"#\n\n * Type:\n\n\n\n * Default: false\n\nUsed to enable lazy compilation (compilation on demand), implemented based on\nRspack's experiments.lazyCompilation.\n\n\nIntroduction#\n\nLazy compilation is an excellent way to improve dev startup performance. It\ncompiles modules on demand rather than compiling all modules at startup. This\nmeans developers can quickly see the application running when they start the dev\nserver and build the necessary modules in stages.\n\nAlthough Rspack itself has good performance, the overall build time can still be\nless than ideal when building applications with a large number of modules. This\nis because the modules in the application need to be compiled by various\nloaders, such as postcss-loader, sass-loader, vue-loader, etc., which introduce\nadditional compilation overhead.\n\nWith lazy compilation enabled, Rspack will only compile the entrypoints and\ndynamic import modules that are requested. This can significantly reduce the\nnumber of modules that are compiled at development startup, improving startup\ntime.\n\n\nLimitations#\n\n * Lazy compilation is only effective for dev builds.\n * Lazy compilation is still an experimental feature in Rspack. In some\n   scenarios, it may not work as expected or may not significantly improve\n   performance.\n * Lazy compilation depends on Rspack's local dev server. If you proxy a domain\n   to localhost for development, it will not work properly. So if you need to\n   use a proxy, please disable lazy compilation.\n\n\nExample#\n\n\nEnable Lazy Compilation#\n\n\n\nThis is equivalent to the following configuration:\n\n\n\n\nEntry Modules#\n\nUse lazyCompilation.entries to control whether to lazily compile entry modules:\n\n\n\nWith the entries option enabled, Rsbuild will not compile all pages when you\nstart the dev server. Instead, it will only compile a specific page when you\nvisit it.\n\nWhen lazily compiling entry modules, please note:\n\n * It only applies to multi-page applications (MPA) and does not optimize\n   single-page applications (SPA).\n * When you visit a page, you need to wait for the page to finish compiling\n   before you can see its content.\n\n\nAsync Modules#\n\nUse lazyCompilation.imports to control whether to lazily compile dynamic\nimported modules.\n\n\n\nWhen the imports option is enabled, all async modules will only be compiled when\nrequested. If your project is a single-page application (SPA) and you have split\nthe routes using dynamic import, this will significantly speed up the startup\ntime.","routePath":"/config/dev/lazy-compilation","lang":"en","toc":[{"text":"Introduction","id":"introduction","depth":2,"charIndex":151},{"text":"Limitations","id":"limitations","depth":2,"charIndex":1039},{"text":"Example","id":"example","depth":2,"charIndex":1479},{"text":"Enable Lazy Compilation","id":"enable-lazy-compilation","depth":3,"charIndex":1490},{"text":"Entry Modules","id":"entry-modules","depth":3,"charIndex":1573},{"text":"Async Modules","id":"async-modules","depth":3,"charIndex":2110}],"domain":"","frontmatter":{},"version":""},{"id":20,"title":"dev.liveReload","content":"#\n\n * Type: boolean\n * Default: true\n\nWhether to reload the page when source files are changed.\n\nBy default, Rsbuild uses HMR as the preferred method to update modules. If HMR\nis disabled or cannot be used in certain scenarios, it will automatically\nfallback to liveReload.\n\nPlease refer to Hot Module Replacement for more information.\n\n\nDisabling liveReload#\n\nIf you need to disable liveReload, you can set both dev.hmr and dev.liveReload\nto false. Then, no Web Socket requests will be made to the dev server on the\npage, and the page will not automatically refresh when file change.\n\n","routePath":"/config/dev/live-reload","lang":"en","toc":[{"text":"Disabling liveReload","id":"disabling-livereload","depth":2,"charIndex":337}],"domain":"","frontmatter":{},"version":""},{"id":21,"title":"dev.progressBar","content":"#\n\n * Type:\n\n\n\n * Default: process.env.NODE_ENV === 'production'\n\nWhether to display progress bar during compilation.\n\nBy default, Rsbuild only enables the progress bar when production building.\n\n * Example: Enable the progress bar.\n\n\n\n * Example: Disable the progress bar.\n\n\n\n * Example: Modify the progress bar id\n\nIf you need to modify the text displayed on the left side of the progress bar,\nyou can set the id option:\n\n","routePath":"/config/dev/progress-bar","lang":"en","toc":[],"domain":"","frontmatter":{},"version":""},{"id":22,"title":"dev.setupMiddlewares","content":"#\n\n * Type:\n\n\n\n * Default: undefined\n\nProvides the ability to execute a custom function and apply custom middlewares.\n\n\nExecution Order#\n\nThe order among several different types of middleware is: unshift => internal\nmiddlewares => push.\n\n\n\n\nServer API#\n\nIn the setupMiddlewares function, you can access the server object, which\nprovides some server APIs.\n\n\nsockWrite#\n\nsockWrite allows middlewares to send some message to HMR client, and then the\nHMR client will take different actions depending on the message type.\n\nFor example, if you send a 'content-changed' message, the page will reload.\n\n\n\n\nenvironments#\n\nenvironments includes Rsbuild's environment API, which allows you to get the\nbuild outputs information for a specific environment in the server side.\n\n","routePath":"/config/dev/setup-middlewares","lang":"en","toc":[{"text":"Execution Order","id":"execution-order","depth":2,"charIndex":119},{"text":"Server API","id":"server-api","depth":2,"charIndex":240},{"text":"sockWrite","id":"sockwrite","depth":3,"charIndex":356},{"text":"environments","id":"environments","depth":3,"charIndex":597}],"domain":"","frontmatter":{},"version":""},{"id":23,"title":"dev.watchFiles","content":"#\n\n * Type:\n\n\n\n * Default: undefined\n\nWatch specified files and directories for changes. When a file change is\ndetected, it can trigger a page reload or restart the dev server.\n\n\npaths#\n\n * Type: string | string[]\n * Default: undefined\n\nPaths of the files or directories to be watched, supports glob syntax. It can be\na single path or an array of multiple paths.\n\n * Watching a single file:\n\n\n\n * Using glob to match multiple files:\n\n\n\n * Watching multiple file paths:\n\n\n\n\ntype#\n\n * Type: 'reload-page' | 'reload-server'\n * Default: 'reload-page'\n\nSpecifies whether to trigger a page reload or restart the dev server when a file\nchanges.\n\n\nreload-page#\n\nreload-page means that when a file changes, the page opened in the browser will\nautomatically reload. If the type is not explicitly specified, Rsbuild will\ndefault to the reload-page behavior.\n\nThis can be used to watch changes to static assets, such as files in the public\ndirectory.\n\n\n\n> If both dev.hmr and dev.liveReload are set to false, the page will not\n> automatically reload.\n\n\nreload-server#\n\nreload-server means that the dev server will automatically restart when a file\nchanges. This can be used to watch changes to configuration files, such as\nmodules imported by the rsbuild.config.ts file.\n\nFor example, if you maintain some common configuration files in the config\ndirectory, such as common.ts, you want the dev server to automatically restart\nwhen these files change. Example configuration:\n\n\n\nIt should be noted that the reload-server functionality is provided by Rsbuild\nCLI. If you are using a custom server or an upper-layer framework based on the\nRsbuild, this configuration is currently not supported.\n\n\noptions#\n\n * Type: ChokidarOptions\n * Default: undefined\n\nwatchFiles is implemented based on chokidar v4, and you can pass chokidar\noptions through options.\n\n\n\n\nNotes#\n\nwatchFiles is not applicable for watching build dependency files. When an\nRsbuild build starts, the underlying Rspack will automatically watches all build\ndependencies. Any changes to these files will trigger a new build.\n\nIf you want to prevent some files from triggering a rebuild when they change,\nyou can use Rspack's watchOptions.ignored configuration item.\n\n> See HMR - File Watching for more details.","routePath":"/config/dev/watch-files","lang":"en","toc":[{"text":"paths","id":"paths","depth":2,"charIndex":178},{"text":"type","id":"type","depth":2,"charIndex":472},{"text":"reload-page","id":"reload-page","depth":3,"charIndex":639},{"text":"reload-server","id":"reload-server","depth":3,"charIndex":1040},{"text":"options","id":"options","depth":2,"charIndex":1680},{"text":"Notes","id":"notes","depth":2,"charIndex":1841}],"domain":"","frontmatter":{},"version":""},{"id":24,"title":"dev.writeToDisk","content":"#\n\n * Type: boolean | ((filename: string) => boolean)\n * Default: false\n\nControls whether the build output from development mode is written to disk.\n\nTIP\n\nIn development mode, Rsbuild stores the build outputs in memory on the dev\nserver by default, rather than writing then to disk. This can reduce the\noverhead of fs operations. You can refer to View Static Assets to view all\nstatic assets generated in the current build.\n\n\nWriting to Disk#\n\nYou can choose to write the build output to disk, which is usually used for\ninspecting the content of the build output or configuring proxy rules for static\nassets.\n\nSimply set the dev.writeToDisk option to true:\n\n\n\nTIP\n\nSetting writeToDisk: true is used for viewing the build output from development\nmode. It does not change the behavior of the dev server. When accessing files\nthrough a browser, the dev server will still read the file content from memory.\n\n\nMatching Specific Files#\n\nYou can also set dev.writeToDisk to a function to match only certain files. When\nthe function returns false, the file will not be written; when it returns true,\nthe file will be written to disk.\n\nFor example, to write files to disk while excluding hot-update temporary files:\n\n","routePath":"/config/dev/write-to-disk","lang":"en","toc":[{"text":"Writing to Disk","id":"writing-to-disk","depth":2,"charIndex":425},{"text":"Matching Specific Files","id":"matching-specific-files","depth":2,"charIndex":904}],"domain":"","frontmatter":{},"version":""},{"id":25,"title":"environments","content":"#\n\nRsbuild supports building outputs for multiple environments. You can use\nenvironments to define different Rsbuild configurations for each environment.\n\n> Please refer to Multi-Environment Builds for more information.\n\n * Type:\n\n\n\n * Default: undefined\n\n\nExample#\n\nConfigure Rsbuild configuration for web (client) and node (SSR) environments:\n\n\n\nFor the web environment, the merged Rsbuild configuration is:\n\n\n\nFor the node environment, the merged Rsbuild configuration is:\n\n","routePath":"/config/environments","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":256}],"domain":"","frontmatter":{},"version":""},{"id":26,"title":"html.appIcon","content":"#\n\n * Type:\n\n\n\n * Default: undefined\n\nSet the web application icons to display when added to the home screen of a\nmobile device:\n\n * Generate the web app manifest file and its icons field.\n * Generate the apple-touch-icon and manifest tags in the HTML file.\n\nTIP\n\nRefer to the following documents for more information:\n\n * MDN - Web app manifests\n * How to Favicon: Six files that fit most needs\n\n\nExample#\n\nFor display on different devices, you will need to prepare several icons of\ndifferent sizes.\n\nThe most commonly used icon sizes are 192x192 and 512x512, and you can customize\nthe icon sizes and quantities to suit your needs.\n\n\n\nAfter compilation, the following tags will be automatically generated in the\nHTML:\n\n\n\nHere, manifest.webmanifest is a JSON file that contains information about the\napplication's name, icons, and other details.\n\n\n\nIcon size\n\nFor Chromium, you must provide at least a 192x192 pixel icon and a 512x512 pixel\nicon. If only those two icon sizes are provided, Chrome automatically scales the\nicons to fit the device. If you'd prefer to scale your own icons, and adjust\nthem for pixel-perfection, provide icons in increments of 48dp.\n\n\nname#\n\n * Type: string\n * Default value: undefined\n\nThe name of the application that will be displayed when it is added to the home\nscreen of the mobile device. If not set, the manifest.webmanifest file will not\nbe generated.\n\n> For more details, see Web app manifests - name.\n\n\nicons#\n\n * Type: AppIconItem[]\n * Default value: undefined\n\nThe list of icons:\n\n * src is the path of the icon, which can be a URL, an absolute file path, or a\n   relative path to the project root.\n * size is the size of the icon in pixels.\n * target refers to the intended target for the icon, which can be either\n   apple-touch-icon or web-app-manifest. If target is not set, by default, the\n   manifest file will include all icons, while the apple-touch-icon tags will\n   only include icons smaller than 200x200.\n\n\nExample#\n\nsrc can be set to an absolute path:\n\n\n\nUse target to specify the target for the icon:\n\n\n\n\nfilename#\n\n * Type: string\n * Default value: 'manifest.webmanifest'\n\nThe filename of the manifest file.\n\n","routePath":"/config/html/app-icon","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":397},{"text":"name","id":"name","depth":2,"charIndex":1164},{"text":"icons","id":"icons","depth":2,"charIndex":1443},{"text":"Example","id":"example-1","depth":3,"charIndex":1961},{"text":"filename","id":"filename","depth":3,"charIndex":2061}],"domain":"","frontmatter":{},"version":""},{"id":27,"title":"html.crossorigin","content":"#\n\n * Type: boolean | 'anonymous' | 'use-credentials'\n * Default: false\n\nSet the crossorigin attribute of the\n\nThe","routePath":"/config/html/crossorigin","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":-1},{"text":"Optional Values","id":"optional-values","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":28,"title":"html.favicon","content":"#\n\n * Type: string ｜ Function\n * Default: undefined\n\nSet the favicon icon path for all pages, can be set as:\n\n * a URL.\n * an absolute file path.\n * a relative path relative to the project root.\n\nAfter config this option, the favicon will be automatically copied to the dist\ndirectory during the compilation, and the corresponding link tag will be added\nto the HTML.\n\nTIP\n\nRsbuild also provides html.appIcon to set the icon of the web application.\n\n\nExample#\n\nSet as a relative path:\n\n\n\nSet to an absolute path:\n\n\n\nSet to a URL:\n\n\n\nAfter recompiling, the following tags are automatically generated in the HTML:\n\n\n\n\nFunction Usage#\n\n * Type:\n\n\n\nWhen html.favicon is of type Function, the function receives an object as input,\nwith the following properties:\n\n * value: the default favicon configuration for Rsbuild.\n * entryName: the name of the current entry.\n\nIn the context of MPA (Multi-Page Application), you can return different favicon\nbased on the entry name, thus generating different tags for each page:\n\n","routePath":"/config/html/favicon","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":449},{"text":"Function Usage","id":"function-usage","depth":2,"charIndex":614}],"domain":"","frontmatter":{},"version":""},{"id":29,"title":"html.inject","content":"\n<%= htmlPlugin.tags.bodyTags %>","routePath":"/config/html/inject","lang":"en","toc":[{"text":"Default inject position","id":"default-inject-position","depth":2,"charIndex":-1},{"text":"Inject into body","id":"inject-into-body","depth":2,"charIndex":-1},{"text":"Function Usage","id":"function-usage","depth":2,"charIndex":-1},{"text":"Manual Injection","id":"manual-injection","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":30,"title":"html.meta","content":"#\n\n * Type: Object | Function\n * Default:\n\n\n\nConfigure the tag of the HTML.\n\nTIP\n\nIf the HTML template used in the current project already contains the charset or\nviewport meta tags, then the tags in the HTML template take precedence.\n\n\nString Type#\n\n * Type:\n\n\n\nWhen the value of a meta object is a string, the key of the object is\nautomatically mapped to name, and the value is mapped to content.\n\nFor example to set description:\n\n\n\nThe generated meta tag in HTML is:\n\n\n\n\nObject Type#\n\n * Type:\n\n\n\nWhen the value of a meta object is an object, the key: value of the object is\nmapped to the attribute of the meta tag.\n\nIn this case, the name and content properties will not be set by default.\n\nFor example to set charset:\n\n\n\nThe meta tag in HTML is:\n\n\n\n\nFunction Usage#\n\n * Type:\n\n\n\nWhen html.meta is of type Function, the function receives an object as an\nargument with the following properties:\n\n * value: the default meta configuration of Rsbuild.\n * entryName: the name of the current entry.\n\nYou can directly modify the configuration object and not return anything, or you\ncan return an object as the final configuration.\n\nFor example, you can directly modify the built-in meta configuration object:\n\n\n\nIn the MPA (Multi-Page Application) scenario, you can return different meta\nconfigurations based on the entry name, thus generating different meta tags for\neach page:\n\n\n\n\nRemove Default Value#\n\nSetting the value of the meta object to false and the meta tag will not be\ngenerated.\n\nFor example to remove the viewport:\n\n","routePath":"/config/html/meta","lang":"en","toc":[{"text":"String Type","id":"string-type","depth":2,"charIndex":236},{"text":"Object Type","id":"object-type","depth":2,"charIndex":473},{"text":"Function Usage","id":"function-usage","depth":2,"charIndex":754},{"text":"Remove Default Value","id":"remove-default-value","depth":2,"charIndex":1379}],"domain":"","frontmatter":{},"version":""},{"id":31,"title":"html.mountId","content":"","routePath":"/config/html/mount-id","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":-1},{"text":"Notes","id":"notes","depth":2,"charIndex":-1},{"text":"Update Relevant Code","id":"update-relevant-code","depth":3,"charIndex":-1},{"text":"Custom Templates","id":"custom-templates","depth":3,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":32,"title":"html.outputStructure","content":"#\n\n * Type: 'flat' | 'nested'\n * Default: 'flat'\n\nDefine the directory structure of the HTML output files.\n\n\nExample#\n\nBy default, the structure of HTML files in the dist directory is flat:\n\n\n\nYou can set html.outputStructure to nested:\n\n\n\nAfter rebuild, the directory structure of the HTML files is:\n\n\n\n> If you want to set the parent path of the HTML files, use the\n> output.distPath.html config.","routePath":"/config/html/output-structure","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":108}],"domain":"","frontmatter":{},"version":""},{"id":33,"title":"html.scriptLoading","content":"","routePath":"/config/html/script-loading","lang":"en","toc":[{"text":"defer","id":"defer","depth":3,"charIndex":-1},{"text":"blocking","id":"blocking","depth":3,"charIndex":-1},{"text":"module","id":"module","depth":3,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":34,"title":"html.tags","content":"","routePath":"/config/html/tags","lang":"en","toc":[{"text":"Tag Object","id":"tag-object","depth":2,"charIndex":-1},{"text":"Set tag insertion position","id":"set-tag-insertion-position","depth":3,"charIndex":-1},{"text":"Tags Handler","id":"tags-handler","depth":2,"charIndex":-1},{"text":"Limitation","id":"limitation","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":35,"title":"html.templateParameters","content":"#\n\n * Type: Record | Function\n * Default:\n\n\n\nDefine the parameters in the HTML template, see HTML Template - Template\nParameters for detailed usage.\n\n\nObject Usage#\n\nIf the value of templateParameters is an object, it will be merged with the\ndefault parameters using Object.assign.\n\nFor example, if you need to use the foo parameter in an HTML template, you can\nadd the following settings:\n\n\n\nThen, you can read the parameter in the HTML template using <%= foo %>:\n\n\n\nThe compiled HTML code will be:\n\n\n\n\nFunction Usage#\n\n * Type:\n\n\n\nWhen html.templateParameters is of type Function, the function receives two\nparameters:\n\n * value: Default templateParameters configuration of Rsbuild.\n * utils: An object containing the entryName field, corresponding to the name of\n   the current entry.\n\nIn the context of a multi-page application (MPA), you can set different\ntemplateParameters based on the entry name:\n\n","routePath":"/config/html/template-parameters","lang":"en","toc":[{"text":"Object Usage","id":"object-usage","depth":2,"charIndex":150},{"text":"Function Usage","id":"function-usage","depth":2,"charIndex":503}],"domain":"","frontmatter":{},"version":""},{"id":36,"title":"html.template","content":"","routePath":"/config/html/template","lang":"en","toc":[{"text":"String Usage","id":"string-usage","depth":2,"charIndex":-1},{"text":"Function Usage","id":"function-usage","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":37,"title":"html.title","content":"#\n\n * Type: string ｜ Function\n * Default: 'Rsbuild App'\n\nSet the title tag of the HTML page.\n\nTIP\n\nIf the HTML template used in the current project already includes the </code>\ntag, the <code>html.title</code> will not take effect. </p></div></div> <h2\nid=\"string-usage\">String Usage<a aria-hidden=\"true\"\nhref=\"#string-usage\">#</a></h2> <p><code>html.title</code> can be directly set\nas a string:</p> <pre><code>export default { html: { title: 'Example', }, };\n</code></pre> <p>The <code>title</code> tag generated in HTML will be:</p>\n<pre><code><title>Example\n\n\nFunction Usage#\n\n * Type:\n\n\n\nWhen html.title is of type Function, the function receives an object as the\nargument, and the object's values include:\n\n * value: the default title configuration of Rsbuild.\n * entryName: the name of the current entry.\n\nIn the MPA (multi-page application) scenario, you can return different title\nstrings based on the entry name, thus generating different title tags for each\npage:\n\n\n\n\nUnset </code> Tag<a aria-hidden=\"true\" href=\"#unset-title-tag\">#</a></h2>\n<p>When <code>html.title</code> is set to an empty string, Rsbuild will not\ninject the <code><title></code> tag:</p> <pre><code>export default { html: {\ntitle: '', }, }; </code></pre>","routePath":"/config/html/title","lang":"en","toc":[{"text":"String Usage","id":"string-usage","depth":2,"charIndex":-1},{"text":"Function Usage","id":"function-usage","depth":2,"charIndex":563},{"text":"Unset `<title>` Tag","id":"unset-title-tag","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":38,"title":"Config Overview","content":"#\n\nThis page lists all the configurations for Rsbuild. See \"Configure Rsbuild\" for\ndetail.","routePath":"/config/","lang":"en","toc":[],"domain":"","frontmatter":{},"version":""},{"id":39,"title":"mode","content":"#\n\n * Type: 'production' | 'development' | 'none'\n * Version: >= 1.0.0\n\nSpecify the build mode for Rsbuild, as each mode has different default behavior\nand optimizations. For example, the production mode will compress code by\ndefault.\n\nThe value of Rsbuild mode is also be passed to the mode configuration of Rspack.\n\nTIP\n\nThe value of mode does not affect the loading results of the .env file, as the\n.env file is resolved before the Rsbuild configuration file.\n\nRsbuild CLI supports using the --env-mode option to specify the env mode. See\n\"Env mode\" for more details.\n\n\nDefault Values#\n\nThe default value of mode depends on the process.env.NODE_ENV environment\nvariable:\n\n * If NODE_ENV is production, the default value is production.\n * If NODE_ENV is development, the default value is development.\n * If NODE_ENV has any other value, the default value is none.\n\nIf you set the value of mode, the value of NODE_ENV will be ignored.\n\n\n\n\nCommand Line#\n\nWhen using Rsbuild's command line:\n\n * rsbuild dev will set the default values of NODE_ENV and mode to development.\n * rsbuild build and rsbuild preview will set the default values of NODE_ENV and\n   mode to production.\n\n\nJavaScript API#\n\nWhen using Rsbuild's JavaScript API:\n\n * rsbuild.startDevServer and rsbuild.createDevServer will set the default\n   values of NODE_ENV and mode to development.\n * rsbuild.build and rsbuild.preview will set the default values of NODE_ENV and\n   mode to production.\n\n\nDevelopment Mode#\n\nIf the value of mode is development:\n\n * Enable HMR and register the HotModuleReplacementPlugin.\n * Generate JavaScript source maps, but do not generate CSS source maps. See\n   output.sourceMap for details.\n * The process.env.NODE_ENV in the source code will be replaced with\n   'development'.\n * The import.meta.env.MODE in the source code will be replaced with\n   'development'.\n * The import.meta.env.DEV in the source code will be replaced with true.\n * The import.meta.env.PROD in the source code will be replaced with false.\n\n\nProduction Mode#\n\nIf the value of mode is production:\n\n * Enable JavaScript code minification and register the\n   SwcJsMinimizerRspackPlugin.\n * Enable CSS code minification and register the\n   LightningCssMinimizerRspackPlugin.\n * Generated JavaScript and CSS filenames will have hash suffixes, see\n   output.filenameHash.\n * Generated CSS Modules classnames will be shorter, see\n   cssModules.localIdentName.\n * Do not generate JavaScript and CSS source maps, see output.sourceMap.\n * The process.env.NODE_ENV in the source code will be replaced with\n   'production'.\n * The import.meta.env.MODE in the source code will be replaced with\n   'production'.\n * The import.meta.env.DEV in the source code will be replaced with false.\n * The import.meta.env.PROD in the source code will be replaced with true.\n\n\nNone Mode#\n\nIf the value of mode is none:\n\n * Do not enable any optimizations.\n * The process.env.NODE_ENV in the source code will not be replaced.\n * The import.meta.env.MODE in the source code will be replaced with 'none'.\n * The import.meta.env.DEV in the source code will be replaced with false.\n * The import.meta.env.PROD in the source code will be replaced with false.","routePath":"/config/mode","lang":"en","toc":[{"text":"Default Values","id":"default-values","depth":2,"charIndex":572},{"text":"Command Line","id":"command-line","depth":3,"charIndex":939},{"text":"JavaScript API","id":"javascript-api","depth":3,"charIndex":1176},{"text":"Development Mode","id":"development-mode","depth":2,"charIndex":1459},{"text":"Production Mode","id":"production-mode","depth":2,"charIndex":2011},{"text":"None Mode","id":"none-mode","depth":2,"charIndex":2819}],"domain":"","frontmatter":{},"version":""},{"id":40,"title":"moduleFederation.options","content":"#\n\n * Type: Rspack.ModuleFederationPluginOptions\n * Default: undefined\n\nUsed to configure the Rspack's Module Federation plugin (Module Federation\nv1.5).\n\nTIP\n\nThere are several versions of Module Federation implementations. Before using\nmoduleFederation.options, please read the Module Federation guide to understand\nthe differences between different versions and how to make choices.\n\n\nIntroduction#\n\nWhen using Module Federation, it is recommended that you use the\nmoduleFederation.options option provided by Rsbuild. This option will\nautomatically adjust some related configurations to ensure that the module\nfederation application can run correctly.\n\nWhen you set the moduleFederation.options option, Rsbuild will take the\nfollowing actions:\n\n * Automatically register the ModuleFederationPlugin plugin, and pass the value\n   of options to the plugin.\n * Set the default value of the provider's dev.assetPrefix configuration to\n   true. This will ensure that the static asset URL is correct for remote\n   modules.\n * Set the default value of Rspack's output.uniqueName configuration to\n   moduleFederation.options.name, this allows HMR to work as expected.\n * Turn off the split-by-experience rules in Rsbuild's performance.chunkSplit as\n   it may conflict with shared modules, refer to #3161.\n * Turn off the splitChunks rule of remote entry.\n\n\nUsage#\n\nThe type of moduleFederation.options is exactly the same as the\nModuleFederationPlugin plugin of Rspack:\n\n\n\nPlease refer to the ModuleFederationPlugin document for all available options.\n\n\nExample#\n\nHere is a minimal example:\n\n * Remote App\n\n\n\n * Host App\n\n\n\nFor more examples, please see:\n\n * Rsbuild - module-federation example\n * module-federation/module-federation-examples","routePath":"/config/module-federation/options","lang":"en","toc":[{"text":"Introduction","id":"introduction","depth":2,"charIndex":387},{"text":"Usage","id":"usage","depth":2,"charIndex":1350},{"text":"Example","id":"example","depth":2,"charIndex":1547}],"domain":"","frontmatter":{},"version":""},{"id":41,"title":"output.assetPrefix","content":"#\n\n * Type: string | 'auto'\n * Default: server.base\n\nIn production mode, use this option to set the URL prefix for static assets,\nsuch as setting it to a CDN URL.\n\nassetPrefix will affect the URLs of most of the static assets, including\nJavaScript files, CSS files, images, videos, etc. If an incorrect value is\nspecified, you'll receive 404 errors while loading these resources.\n\nThis config is only used in production mode. In development mode, please use the\ndev.assetPrefix to set the URL prefix.\n\n\nExample#\n\nSetting output.assetPrefix will add the value as a prefix to the URLs of all\nstatic assets like JavaScript, CSS, images, etc.\n\n * For example, setting it to a CDN address:\n\n\n\nAfter the build, the URL of the JS file will be:\n\n\n\n * Setting it to a relative path:\n\n\n\nAfter the build, the URL of the JS file will be:\n\n\n\n\nDefault Value#\n\nThe default value of output.assetPrefix is the same as server.base.\n\nWhen server.base is /foo, index.html and static assets can be accessed through\nhttp://localhost:3000/foo/.\n\nIt should be noted that when customizing the output.assetPrefix option, if you\nwant static assets to be accessible normally during Rsbuild preview,\noutput.assetPrefix should contain the same URL prefix as server.base, such as:\n\n\n\n\nPath Types#\n\nassetPrefix can be set to the following types of paths:\n\n * absolute path: This is the most common practice, can be specific server\n   paths, like /assets/, or setting to CDN paths, like\n   https://cdn.example.com/assets/.\n * relative path: such as ./assets/.\n * 'auto': Rspack will automatically calculate the path and generate relative\n   paths based on file location.\n\nTIP\n\nIt's not recommended to set assetPrefix as a relative path, such as './assets/'.\nThis is because when assets are at different path depths, using relative paths\nmay cause assets to load incorrectly.\n\n\nCompare with publicPath#\n\nThe functionality of output.assetPrefix is basically the same as the\noutput.publicPath config in Rspack.\n\nThe differences from the native configuration are as follows:\n\n * output.assetPrefix only takes effect in production mode.\n * output.assetPrefix default value is the same as server.base.\n * output.assetPrefix automatically appends a trailing / by default.\n * The value of output.assetPrefix is written to the process.env.ASSET_PREFIX\n   environment variable (can only be accessed in client code).","routePath":"/config/output/asset-prefix","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":502},{"text":"Default Value","id":"default-value","depth":2,"charIndex":829},{"text":"Path Types","id":"path-types","depth":2,"charIndex":1253},{"text":"Compare with `publicPath`","id":"compare-with-publicpath","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":42,"title":"output.charset","content":"#\n\n * Type: 'ascii' | 'utf8'\n * Default: 'utf8'\n\nThe charset config allows you to specify the character encoding for output files\nto ensure they are displayed correctly in different environments.\n\n\nUTF8#\n\nBy default, the output of Rsbuild is encoded in UTF-8, which is the most\ncommonly used character encoding in web applications.\n\nWhen your web server returns the resource, please ensure that it sends the\ncorrect Content-Type response header so that the browser can parse it correctly.\n\n\nASCII#\n\nIf you want the output files to use ASCII encoding, you can set this in the\nconfig file like this:\n\n\n\nWhen using ASCII encoding, all non-ASCII characters are escaped with\nbackslashes, which may make the files slightly larger and harder to read.\n\n\nNotes#\n\nCurrently, the charset option only affects files compiled with SWC, which by\ndefault includes JavaScript and TypeScript files. However, HTML and CSS files\nare not affected by the charset option.\n\nFor HTML files, Rsbuild adds a tag by default. You can change this using the\nhtml.meta option.","routePath":"/config/output/charset","lang":"en","toc":[{"text":"UTF8","id":"utf8","depth":2,"charIndex":197},{"text":"ASCII","id":"ascii","depth":2,"charIndex":490},{"text":"Notes","id":"notes","depth":2,"charIndex":745}],"domain":"","frontmatter":{},"version":""},{"id":43,"title":"output.cleanDistPath","content":"#\n\n * Type: boolean | 'auto'\n * Default: 'auto'\n\nWhether to clean up all files under the output directory before the build starts\n(the output directory defaults to dist).\n\n\nDefault Behavior#\n\nThe default value of output.cleanDistPath is 'auto'. If the output directory is\na subdir of the project root path, Rsbuild will automatically clean all files\nunder the build directory.\n\nWhen output.distPath.root is an external directory, or equals to the project\nroot directory, cleanDistPath is not enabled by default, to avoid accidentally\ndeleting files from other directories.\n\n\n\n\nForced Switch#\n\nYou can set cleanDistPath to true to force it to be enabled, or set it to false\nto force it to be disabled.\n\n\n\n\nConditional#\n\nIf you only need to clean files in production mode, but not in development mode,\nyou can configure it as:\n\n","routePath":"/config/output/clean-dist-path","lang":"en","toc":[{"text":"Default Behavior","id":"default-behavior","depth":2,"charIndex":172},{"text":"Forced Switch","id":"forced-switch","depth":2,"charIndex":576},{"text":"Conditional","id":"conditional","depth":2,"charIndex":704}],"domain":"","frontmatter":{},"version":""},{"id":44,"title":"output.copy","content":"#\n\n * Type: Rspack.CopyRspackPluginOptions |\n   Rspack.CopyRspackPluginOptions['patterns']\n * Default: undefined\n\nCopies the specified file or directory to the dist directory, implemented based\non rspack.CopyRspackPlugin.\n\n> Please refer to the configuration options here: rspack.CopyRspackPlugin.\n\n\nExample#\n\nCopy files from ./src/assets to the ./dist directory:\n\n\n\nCopy files from ./src/assets to the ./dist/assets directory:\n\n","routePath":"/config/output/copy","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":299}],"domain":"","frontmatter":{},"version":""},{"id":45,"title":"output.cssModules","content":"#\n\n * Type: CSSModules\n\nFor custom CSS Modules configuration.\n\nThe CSS Modules feature of Rsbuild is based on the modules option of css-loader.\nYou can refer to css-loader - modules to learn more.\n\n\ncssModules.auto#\n\nThe auto configuration option allows CSS Modules to be automatically enabled\nbased on their filenames.\n\n * Type:\n\n\n\n * Default: true\n\nType description:\n\n * true: enable CSS Modules for all files matching\n   /\\.module\\.\\w+$/i.test(filename) regexp.\n * false: disable CSS Modules.\n * RegExp: enable CSS Modules for all files matching /RegExp/i.test(filename)\n   regexp.\n * function: enable CSS Modules for files based on the filename satisfying your\n   filter function check.\n\n\n\n\ncssModules.exportLocalsConvention#\n\nStyle of exported class names.\n\n * Type:\n\n\n\n * Default: 'camelCase'\n\nType description:\n\n * asIs: Class names will be exported as is.\n * camelCase: Class names will be camelized, the original class name will be\n   exported.\n * camelCaseOnly: Class names will be camelized, the original class name will\n   not be exported.\n * dashes: Only dashes in class names will be camelized, the original class name\n   will be exported.\n * dashesOnly: Dashes in class names will be camelized, the original class name\n   will not be exported.\n\n\n\n\ncssModules.exportGlobals#\n\n * Type: boolean\n * Default: false\n\nAllows exporting names from global class names, so you can use them via import.\n\n\nExample#\n\nSet the exportGlobals to true:\n\n\n\nUse :global() in CSS Modules:\n\n\n\nThen you can import the class name wrapped with :global():\n\n\n\n\ncssModules.localIdentName#\n\n * Type: string\n * Default:\n\n\n\nSets the format of the class names generated by CSS Modules after compilation.\n\n\nDefault Value#\n\nlocalIdentName has different default values in development and production.\n\nIn a production, Rsbuild will generate shorter class names to reduce the bundle\nsize.\n\n\n\n\nTemplate String#\n\nYou can use the following template strings in localIdentName:\n\n * [name] - the basename of the asset.\n * [local] - original class.\n * [hash] - the hash of the string.\n * [folder] - the folder relative path.\n * [path] - the relative path.\n * [file] - filename and path.\n * [ext] - extension with leading dot.\n * [hash::]: hash with hash settings.\n\n\nExample#\n\nSet localIdentName to other value:\n\n\n\n\ncssModules.mode#\n\n * Type:\n\n\n\n * Default: 'local'\n\nControls the mode of compilation applied to the CSS Modules.\n\n\nOptional values#\n\ncssModules.mode can take one of the following values:\n\n 1. 'local' (default): This enables the CSS Modules specification for scoping\n    CSS locally. Class and ID selectors are rewritten to be module-scoped, and\n    @value bindings are injected.\n 2. 'global': This opts-out of the CSS Modules behavior, disabling both local\n    scoping and injecting @value bindings. Global selectors are preserved as-is.\n 3. 'pure': This enables dead-code elimination by removing any unused local\n    classnames and values from the final CSS. It still performs local scoping\n    and @value injection.\n 4. 'icss': This compiles to the low-level Interoperable CSS format, which\n    provides a syntax for declaring :import and :export dependencies between CSS\n    and other languages. It does not perform any scoping or @value injection.\n\nThe 'local' mode is the most common use case for CSS Modules, enabling modular\nand locally-scoped styles within components. The other modes may be used in\nspecific scenarios.\n\nFor example:\n\n\n\n\nFunction#\n\nYou can also pass a function to modules.mode that determines the mode based on\nthe resource path, query, or fragment. This allows you to use different modes\nfor different files.\n\nFor example, to use local scoping for .module.css files and global styles for\nother files:\n\n\n\n\ncssModules.namedExport#\n\n * Type: boolean\n * Default: false\n\nWhether to enable ES modules named export for class names.\n\n\n\n\nExample#\n\n\n\n * namedExport: false:\n\n\n\n * namedExport: true:\n\n\n\nTIP\n\nWhen namedExport is set to true, the default class exported by CSS Modules will\nbe automatically renamed to _default class because default is a reserved word in\nECMA modules.","routePath":"/config/output/css-modules","lang":"en","toc":[{"text":"cssModules.auto","id":"cssmodulesauto","depth":2,"charIndex":198},{"text":"cssModules.exportLocalsConvention","id":"cssmodulesexportlocalsconvention","depth":2,"charIndex":694},{"text":"cssModules.exportGlobals","id":"cssmodulesexportglobals","depth":2,"charIndex":1262},{"text":"Example","id":"example","depth":3,"charIndex":1407},{"text":"cssModules.localIdentName","id":"cssmoduleslocalidentname","depth":2,"charIndex":1547},{"text":"Default Value","id":"default-value","depth":3,"charIndex":1687},{"text":"Template String","id":"template-string","depth":3,"charIndex":1869},{"text":"Example","id":"example-1","depth":3,"charIndex":2235},{"text":"cssModules.mode","id":"cssmodulesmode","depth":2,"charIndex":2284},{"text":"Optional values","id":"optional-values","depth":3,"charIndex":2398},{"text":"Function","id":"function","depth":3,"charIndex":3429},{"text":"cssModules.namedExport","id":"cssmodulesnamedexport","depth":2,"charIndex":3714},{"text":"Example","id":"example-2","depth":3,"charIndex":3838}],"domain":"","frontmatter":{},"version":""},{"id":46,"title":"output.dataUriLimit","content":"#\n\n * Type:\n\n\n\n * Default:\n\n\n\nSet the size threshold to inline static assets such as images and fonts.\n\nBy default, static assets will be Base64 encoded and inline into the page if the\nsize is less than 4KiB.\n\nYou can adjust the threshold by setting the dataUriLimit config.\n\nDetail:\n\n * svg: The threshold of the SVG image.\n * font: The threshold of the font file.\n * image: The threshold of non-SVG images.\n * media: The threshold of media assets such as videos.\n * assets: The threshold of other static assets. Such as the assets defined in\n   Extend Asset Types.\n\n\nExample#\n\n * Inline all static assets less than 10KiB:\n\n\n\n * Disable inlining of static assets:\n\n\n\n * Inline all static assets:\n\n\n\n * Set the threshold for image assets to 5KiB, do not inline video assets:\n\n","routePath":"/config/output/data-uri-limit","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":568}],"domain":"","frontmatter":{},"version":""},{"id":47,"title":"output.distPath","content":"#\n\n * Type:\n\n\n\n * Default:\n\n\n\nSet the directory of the dist files. Rsbuild will output files to the\ncorresponding subdirectory according to the file type.\n\nDetail:\n\n * root: The root directory of all output files.\n * html: The output directory of HTML files.\n * js: The output directory of JavaScript files.\n * jsAsync: The output directory of async JavaScript files, which by default\n   will be output to the async subdirectory of distPath.js.\n * css: The output directory of CSS style files.\n * cssAsync: The output directory of async CSS files, which by default will be\n   output to the async subdirectory of distPath.css.\n * svg: The output directory of SVG images.\n * font: The output directory of font files.\n * wasm: The output directory of WebAssembly files.\n * image: The output directory of non-SVG images.\n * media: The output directory of media assets, such as videos.\n * assets: The output directory of other static assets. Such as the assets\n   defined in Extend Asset Types.\n\n\nRoot Directory#\n\nThe root is the root directory of the build artifacts and can be specified as a\nrelative or absolute path. If the value of root is a relative path, it will be\nappended to the project's root directory to form an absolute path.\n\nOther directories can only be specified as relative paths and will be output\nrelative to the root directory.\n\n\nExample#\n\nThe JavaScript files will be output to the distPath.root + distPath.js\ndirectory, which is dist/static/js.\n\nIf you need to output JavaScript files to the build/resource/js directory, you\ncan add following config:\n\n","routePath":"/config/output/dist-path","lang":"en","toc":[{"text":"Root Directory","id":"root-directory","depth":3,"charIndex":991},{"text":"Example","id":"example","depth":3,"charIndex":1346}],"domain":"","frontmatter":{},"version":""},{"id":48,"title":"output.emitAssets","content":"#\n\n * Type: boolean\n * Default: true\n\nControl whether to emit static assets such as images, fonts, audio, video, etc.\n\nIn scenarios such as SSR, you may not need to emit duplicate static assets.\nTherefore, you can return false in emitAssets to emitting assets.\n\n\nExample#\n\nFor example, the following example will emit static assets when building web\nbundles, and avoid emitting when building node bundles.\n\n","routePath":"/config/output/emit-assets","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":262}],"domain":"","frontmatter":{},"version":""},{"id":49,"title":"output.emitCss","content":"#\n\n * Type: boolean\n * Default: true when output.target is web, otherwise false\n\nWhether to emit CSS to the output bundles.\n\nIf false, the CSS will not be extracted to separate files or injected into the\nJavaScript bundles via output.injectStyles.\n\nTIP\n\nWhen output.emitCss is false, the class name information of CSS Modules will\nstill be injected into the JS bundles, which helps to ensure the correctness of\nCSS Modules class names in SSR.\n\n\nExample#\n\nWhen building Node.js bundles, if you need to output CSS files, you can set\noutput.emitCss to true:\n\n","routePath":"/config/output/emit-css","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":444}],"domain":"","frontmatter":{},"version":""},{"id":50,"title":"output.externals","content":"#\n\n * Type:\n\n\n\n * Default: undefined\n\nAt build time, prevent some import dependencies from being packed into bundles\nin your code, and instead fetch them externally at runtime.\n\n> For more information, please see: Rspack Externals.\n\n\nExample#\n\nExclude the react-dom dependency from the build product. To get this module at\nruntime, the value of react-dom will globally retrieve the ReactDOM variable.\n\n\n\nTIP\n\nIf output.target is web-worker, externals will not take effect. This is because\nthe Web Worker environment can not access global variables.","routePath":"/config/output/externals","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":233}],"domain":"","frontmatter":{},"version":""},{"id":51,"title":"output.filenameHash","content":"#\n\n * Type: boolean | string\n * Default: true\n\nWhether to add a hash value to the filename after the production build.\n\n\nDisable hash#\n\nBy default, the filename of the output files will include a hash value:\n\n\n\nYou can set output.filenameHash to false to disable this behavior:\n\n\n\nAfter rebuilding, the output filenames becomes:\n\n\n\n\nHash Format#\n\nThe default hash format is contenthash:8, which generates an 8-bit hash based on\nthe content of the file.\n\nYou can set output.filenameHash to other formats supported by Rspack and\ncustomize the length.\n\n\n\nThe optional hash formats are:\n\n * fullhash: The hash value of the entire compilation. If any file changes, the\n   hash values of all output files in the entire project will change.\n * chunkhash: The hash value of the chunk. The hash value will only change when\n   the content of the chunk (and its included modules) changes.\n * contenthash: The hash value of the file content. The hash value will only\n   change when the content of the file itself changes.\n\n\nNotes#\n\n * output.filename has a higher priority than output.filenameHash.\n * By default, when the target is not web, the hash will not be included in the\n   filename of the output files, such as Node.js bundles.\n * By default, the filename in development mode does not include a hash.","routePath":"/config/output/filename-hash","lang":"en","toc":[{"text":"Disable hash","id":"disable-hash","depth":3,"charIndex":120},{"text":"Hash Format","id":"hash-format","depth":3,"charIndex":332},{"text":"Notes","id":"notes","depth":3,"charIndex":1011}],"domain":"","frontmatter":{},"version":""},{"id":52,"title":"output.filename","content":"#\n\n * Type:\n\n\n\n * Default:\n\n\n\nSets the filename of dist files.\n\nAfter the production build, Rsbuild will add a hash in the middle of the\nfilename by default. If you don't need to add it, you can set\noutput.filenameHash to false to disable this behavior.\n\nThe following are the details of each filename:\n\n * html: The name of the HTML file.\n * js: The name of the JavaScript files.\n * css: The name of the CSS files.\n * svg: The name of the SVG images.\n * font: The name of the font files.\n * image: The name of non-SVG images.\n * media: The name of media assets, such as video.\n * assets: The name of other static assets. Such as the assets defined in Extend\n   Asset Types.\n\n> See Output Files for more information.\n\n\nExample#\n\nTo set the name of the JavaScript file to [name]_script.js, use the following\nconfiguration:\n\n\n\nFilename hash\n\nUsually, Rsbuild only set the filename hash in the production mode (i.e., when\nprocess.env.NODE_ENV === 'production').\n\nIf you set the filename hash in the development mode, it may cause HMR to fail\n(especially for CSS files). This is because every time the file content changes,\nthe hash value changes, preventing bundler from reading the latest file content.\n\n\nTemplate Strings#\n\nIn the value of output.filename, you can use template strings to dynamically\ngenerate file names.\n\nCommon template strings include:\n\n * [name] - entry name, which is the key of source.entry.\n * [contenthash] - hash value generated based on file content.\n * [contenthash:] - hash value generated based on file content, with specified\n   hash length.\n * [ext] - file extension, including the dot.\n\n> For more template strings, refer to Rspack - Template String.\n\nTIP\n * filename.html can only use certain template strings like [name] and\n   [contenthash:].\n * filename.js and filename.css do not support [ext].\n\n\nFilename of Async Modules#\n\nWhen you import a module via dynamic import, the module will be bundled into a\nsingle file, and its default naming rules are as follows:\n\n * In the development mode, the filename will be generated based on the module\n   path, such as dist/static/js/async/src_add_ts.js.\n * In the production mode, it will be a random numeric id, such as\n   dist/static/js/async/798.27e3083e.js. This is to avoid leaking the source\n   code path in the production mode, and the number of characters is also less.\n\n\n\nIf you want to specify a fixed name for the async module, you can use the magic\ncomments provided by Rspack to achieve this, using webpackChunkName to specify\nthe module name:\n\n\n\nAfter specifying the module name as above, the generated file will be\ndist/static/js/async/my-chunk-name.js.\n\n\nUsing Function#\n\nYou can pass a function to output.filename.js or output.filename.css, allowing\nyou to dynamically generate filenames based on file information:\n\n\n\nTIP\n\nExcept for output.filename.js, other types of files currently do not support\nusing functions.\n\n\nQuery Hash#\n\nIf you need to generate hash values on the URL query of assets, you can refer\nto:\n\n\n\nIn this case, the filenames of JS and CSS will not include the hash, while the\nURLs in the HTML will contain a hash query.\n\n","routePath":"/config/output/filename","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":718},{"text":"Template Strings","id":"template-strings","depth":2,"charIndex":1202},{"text":"Filename of Async Modules","id":"filename-of-async-modules","depth":2,"charIndex":1832},{"text":"Using Function","id":"using-function","depth":2,"charIndex":2647},{"text":"Query Hash","id":"query-hash","depth":2,"charIndex":2912}],"domain":"","frontmatter":{},"version":""},{"id":53,"title":"output.injectStyles","content":"#\n\n * Type: boolean\n * Default: false\n\nWhether to inject styles into DOM.\n\nBy default, Rsbuild will extract CSS into a separate .css file and output it to\nthe dist directory. When this option is set to true, CSS files will be inlined\ninto JS files and inserted on the page at runtime via","routePath":"/config/output/inject-styles","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":-1},{"text":"Configure style-loader","id":"configure-style-loader","depth":2,"charIndex":-1},{"text":"Usage Scenario","id":"usage-scenario","depth":3,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":54,"title":"output.inlineScripts","content":"","routePath":"/config/output/inline-scripts","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":-1},{"text":"Script Tag Position","id":"script-tag-position","depth":3,"charIndex":-1},{"text":"Using RegExp","id":"using-regexp","depth":3,"charIndex":-1},{"text":"Using Function","id":"using-function","depth":3,"charIndex":-1},{"text":"Async Chunks","id":"async-chunks","depth":3,"charIndex":-1},{"text":"Options","id":"options","depth":2,"charIndex":-1},{"text":"enable","id":"enable","depth":3,"charIndex":-1},{"text":"test","id":"test","depth":3,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":55,"title":"output.inlineStyles","content":"","routePath":"/config/output/inline-styles","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":-1},{"text":"Using RegExp","id":"using-regexp","depth":3,"charIndex":-1},{"text":"Using Function","id":"using-function","depth":3,"charIndex":-1},{"text":"Options","id":"options","depth":2,"charIndex":-1},{"text":"enable","id":"enable","depth":3,"charIndex":-1},{"text":"test","id":"test","depth":3,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":56,"title":"output.legalComments","content":"#\n\n * Type: 'linked' | 'inline' | 'none'\n * Default: 'linked'\n\nConfigure how to handle the legal comment.\n\nA \"legal comment\" is considered to be any statement-level comment in JS or\nrule-level comment in CSS that contains @license or @preserve or that starts\nwith //! or /*!. These comments are preserved in output files by default since\nthat follows the intent of the original authors of the code.\n\nThis behavior can be configured by using one of the following options:\n\n * linked: Extract all legal comments to a .LEGAL.txt file and link to them with\n   a comment.\n * inline: Preserve all legal comments in original position.\n * none: Remove all legal comments.\n\n\nExample#\n\nRemove all legal comments:\n\n","routePath":"/config/output/legal-comments","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":665}],"domain":"","frontmatter":{},"version":""},{"id":57,"title":"output.manifest","content":"#\n\n * Type: string | boolean\n * Default: false\n\nWhether to generate a manifest file that contains information of all assets, and\nthe mapping relationship between entry module and assets.\n\nWhen output.manifest is set to true, Rsbuild will generate a manifest.json file\nafter building. When the value of output.manifest is a string, it will be used\nas the manifest file name or path.\n\n\nOutput#\n\nThe default output file structure of manifest is:\n\n\n\n\nBasic Example#\n\nEnable asset manifest:\n\n\n\nAfter building, there will be a dist/manifest.json file:\n\n\n\n\nSet Path#\n\noutput.manifest can be a path relative to the dist directory, for example,\noutput to dist/static/my-manifest.json:\n\n","routePath":"/config/output/manifest","lang":"en","toc":[{"text":"Output","id":"output","depth":2,"charIndex":383},{"text":"Basic Example","id":"basic-example","depth":2,"charIndex":446},{"text":"Set Path","id":"set-path","depth":2,"charIndex":549}],"domain":"","frontmatter":{},"version":""},{"id":58,"title":"output.minify","content":"#\n\n * Type:\n\n\n\n * Default: true\n\nConfigure whether to enable code minification in production mode, or to\nconfigure minimizer options.\n\nBy default, JS and CSS code will be automatically minimized in production mode\nto improve page performance. If you do not want to minify the code, you can set\nminify to false to disable minification for all code. Alternatively, you can\ncontrol the behavior of code minification through detailed configuration of the\nminify option. Below are detailed explanations for each configuration option:\n\nHere are explanations for each field:\n\n * js: Whether to enable minification for JavaScript code.\n * jsOptions: JS code minification configuration, which will be merged with the\n   default configuration and passed to SWC.\n * css: Whether to enable minification for CSS code.\n * cssOptions: CSS code minification configuration, which will be merged with\n   the default configuration and passed to Lightning CSS.\n\n\nExample#\n\n\nDisable all minification#\n\n\n\nTIP\n\nThis configuration is usually used for debugging and troubleshooting. It is not\nrecommended to disable code minification in production builds, as it will\nsignificantly degrade the page performance.\n\n\nDisable JavaScript minification#\n\n\n\n\nJavaScript minify options#\n\noutput.minify.jsOptions is used to configure SWC's minification options. For\ndetailed configurations, please refer to SwcJsMinimizerRspackPlugin. The\nfollowing configuration will override the default settings, disable the mangle\nfeature.\n\n\n\n> Refer to Configure SWC for more details.\n\n\nCSS minify options#\n\noutput.minify.cssOptions is used to configure Lightning CSS's minification\noptions. For specific configuration items, please refer to\nLightningCssMinimizerRspackPlugin Documentation.\n\n","routePath":"/config/output/minify","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":942},{"text":"Disable all minification","id":"disable-all-minification","depth":3,"charIndex":953},{"text":"Disable JavaScript minification","id":"disable-javascript-minification","depth":3,"charIndex":1187},{"text":"JavaScript minify options","id":"javascript-minify-options","depth":3,"charIndex":1224},{"text":"CSS minify options","id":"css-minify-options","depth":3,"charIndex":1538}],"domain":"","frontmatter":{},"version":""},{"id":59,"title":"output.overrideBrowserslist","content":"#\n\n * Type: string[]\n * Default: undefined\n\nSpecifies the range of target browsers that the project is compatible with.\n\nThis value will be used by tools such as SWC and Lightning CSS to identify the\nJavaScript syntax that need to be transformed and the CSS browser prefixes that\nneed to be added.\n\n\nPriority#\n\nThe overrideBrowserslist config will override the .browserslistrc config file in\nthe project and the browserslist field in package.json.\n\nIn most cases, it is recommended to use the .browserslistrc file rather than the\noverrideBrowserslist config. Because the .browserslistrc file is the official\nconfig file, it is more general and can be recognized by other libraries in the\ncommunity.\n\n> For more details, see Browserslist.\n\n\nDefault Value#\n\nIf there is no browserslist configs defined in the project, nor\noverrideBrowserslist defined, then Rsbuild will set the default browserslist to:\n\n\n\n\nExample#\n\nAn example compatible with mobile scenarios:\n\n\n\nCheck out the browserslist documentation to learn more about browserslist.\n\n\nSet by environment#\n\nWhen you build for multiple environments, you can set different browserslist for\neach environment:\n\nFor example, set different browserslist for web and node environments:\n\n","routePath":"/config/output/override-browserslist","lang":"en","toc":[{"text":"Priority","id":"priority","depth":2,"charIndex":299},{"text":"Default Value","id":"default-value","depth":2,"charIndex":739},{"text":"Example","id":"example","depth":2,"charIndex":904},{"text":"Set by environment","id":"set-by-environment","depth":2,"charIndex":1039}],"domain":"","frontmatter":{},"version":""},{"id":60,"title":"output.polyfill","content":"#\n\n * Type: 'entry' | 'usage' | 'off'\n * Default: 'off'\n\nControl the injection mode of the polyfills.\n\n> Please refer to the Polyfill Mode for more details.\n\n\nOptional Value#\n\n\nusage#\n\nWhen output.polyfill is configured as 'usage', Rsbuild will inject the polyfills\nbased on the APIs used in each file.\n\n\n\n\nentry#\n\nWhen output.polyfill is configured as 'entry', Rsbuild will inject the polyfills\nin each entry file.\n\n\n\n\noff#\n\nWhen output.polyfill is configured as 'off', Rsbuild will not inject the\npolyfills, and developers need to ensure code compatibility themselves.\n\n","routePath":"/config/output/polyfill","lang":"en","toc":[{"text":"Optional Value","id":"optional-value","depth":2,"charIndex":158},{"text":"usage","id":"usage","depth":3,"charIndex":176},{"text":"entry","id":"entry","depth":3,"charIndex":306},{"text":"off","id":"off","depth":3,"charIndex":419}],"domain":"","frontmatter":{},"version":""},{"id":61,"title":"output.sourceMap","content":"#\n\n * Type:\n\n\n\n * Default:\n\n\n\nUsed to set whether to generate source map files, and which format of source map\nto generate.\n\nWhat is a source map\n\nSource map is an information file that saves the source code mapping\nrelationship. It records each location of the compiled code and the\ncorresponding pre-compilation location. With source map, you can directly view\nthe source code when debugging the compiled code.\n\n\nDefault Behavior#\n\nBy default, the source map generation rules for Rsbuild are as follows:\n\n * In development mode, source maps for JS files are generated for development\n   debugging, while source maps for CSS files are not generated.\n * In production mode, no source maps for JS and CSS files are generated to\n   improve build performance.\n\n\nBoolean value#\n\nIf output.sourceMap is true, the source map will be generated according to the\nmode, equivalent to:\n\n\n\nIf output.sourceMap is false, no source map will be generated, equivalent to:\n\n\n\n\nJS Source Map#\n\nThe source map for JS files is controlled by sourceMap.js and can be configured\nby passing in all the source map formats supported by Rspack's devtool option.\nSetting it to false will disable the source map.\n\nFor example, if you need to generate high-quality source maps in all\nenvironments, you can set it as follows:\n\n\n\nYou can also set different source map formats based on the environment.\n\n\n\n\nCSS Source Map#\n\nThe source map for CSS files is controlled by sourceMap.css. Setting it to true\nwill enable the source map, while setting it to false will disable it.\n\nFor example, if you need to generate a source map for CSS files, you can set it\nas follows:\n\n\n\nIn production builds, it is not recommended to enable both output.injectStyles\nand output.sourceMap.css, as output.injectStyles will inject the source map into\nthe JS bundles, which will increase the file size and slow down the page loading\nspeed.\n\nYou can only enable the CSS file source map in the development mode:\n\n","routePath":"/config/output/source-map","lang":"en","toc":[{"text":"Default Behavior","id":"default-behavior","depth":2,"charIndex":414},{"text":"Boolean value","id":"boolean-value","depth":2,"charIndex":758},{"text":"JS Source Map","id":"js-source-map","depth":2,"charIndex":959},{"text":"CSS Source Map","id":"css-source-map","depth":2,"charIndex":1373}],"domain":"","frontmatter":{},"version":""},{"id":62,"title":"output.target","content":"#\n\n * Type:\n\n\n\n * Default: 'web'\n * Version: >= 1.0.0\n\nSetting the build target of Rsbuild.\n\nRsbuild supports multiple build targets for running in different environments.\nAfter setting the target type, the default configuration of Rsbuild will change\naccordingly.\n\n\nDefault Target#\n\nBy default, the target is set to 'web' and will build outputs for running in the\nbrowser.\n\nRsbuild will read the Browserslist config in the project to determine the range\nof browsers.\n\n\nOptional Targets#\n\nIn addition to 'web', target can also be set to the following values:\n\n * 'node': Build for Node.js environment, usually used in SSR or other\n   scenarios.\n * 'web-worker': Build for web worker environment.\n\nFor example, to build for the Node.js environment:\n\n\n\n\nParallel Builds#\n\nYou can use environments to build multiple targets in parallel.\n\nFor example, to build web outputs and node outputs at the same time:\n\n\n\n\nNode Target#\n\nRefers to the build target running in the Node.js environment, usually used in\nscenarios such as SSR.\n\nWhen target is set to 'node', Rsbuild will:\n\n * Set Rspack's target to 'node'.\n * No HTML files will be generated, and HTML-related logic will not be executed,\n   since HTML is not required by the Node.js environment.\n * The default code split strategy will be disabled, but dynamic import can\n   still work.\n * Disable the HMR.\n * Set the default value of Browserslist to ['node >= 16'].\n * Set the default value of output.emitCss to false. This means that CSS code\n   will not be extracted to separate files, but the id information of CSS\n   Modules will be included in the bundle.\n\n\nNode Addons#\n\nWhen target is set to 'node', Rsbuild allows you to import Node.js Addons in\nJavaScript files.\n\nFor example:\n\n\n\nThe referenced addons file will be output to the dist directory:\n\n\n\n\nWeb Worker Target#\n\nRefers to the build target running in the Web Worker environment.\n\nWhen target is set to 'web-worker', Rsbuild will:\n\n * Set Rspack's target to 'webworker'.\n * No HTML files will be generated, and HTML-related logic will not be executed,\n   since HTML is not required by the Web Worker environment.\n * CSS code will not be bundled or extracted, but the id information of CSS\n   Modules will be included in the bundle (the default value of output.emitCss\n   is false).\n * The default code split strategy will be disabled, and dynamic import can not\n   work, because the Web Worker only runs a single JavaScript file.\n * Set the default value of output.emitCss to false. This means that CSS code\n   will not be extracted to separate files, but the id information of CSS\n   Modules will be included in the bundle.\n * Disable the HMR.\n\nFor more information, please refer to: Using Web Workers.\n\n\nOther targets#\n\nRspack supports other target types, such as electron-main and electron-renderer.\n\nRsbuild currently does not support these targets. You can configure these\ntargets using tools.rspack.\n\nFor example, setting the target to 'electron-main' will override the default\n'web' set by Rsbuild.\n\n","routePath":"/config/output/target","lang":"en","toc":[{"text":"Default Target","id":"default-target","depth":2,"charIndex":266},{"text":"Optional Targets","id":"optional-targets","depth":2,"charIndex":469},{"text":"Parallel Builds","id":"parallel-builds","depth":2,"charIndex":751},{"text":"Node Target","id":"node-target","depth":2,"charIndex":907},{"text":"Node Addons","id":"node-addons","depth":3,"charIndex":1610},{"text":"Web Worker Target","id":"web-worker-target","depth":2,"charIndex":1805},{"text":"Other targets","id":"other-targets","depth":2,"charIndex":2717}],"domain":"","frontmatter":{},"version":""},{"id":63,"title":"performance.bundleAnalyze","content":"#\n\n * Type: Object | undefined\n\nUsed to enable the webpack-bundle-analyzer plugin to analyze the size of the\noutput.\n\nBy default, Rsbuild does not enable webpack-bundle-analyzer. When this feature\nis enabled, the default configuration is as follows:\n\n\n\n\nEnable Bundle Analyze#\n\nYou have two ways to enable webpack-bundle-analyzer to analyze the size of the\noutput files.\n\n\nVia Environment Variable#\n\nAdd the environment variable BUNDLE_ANALYZE=true, for example:\n\n\n\nSince the Windows system does not support the above usage, you can also use\ncross-env to set environment variables. This ensures compatibility across\ndifferent systems:\n\n\n\n\nVia Configuration#\n\nConfigure performance.bundleAnalyze to enable it permanently:\n\n\n\n\nAnalysis Result#\n\nAfter enabling it, Rsbuild will generate an HTML file that analyzes the size of\nthe output files, and print the following log in the Terminal:\n\n\n\nYou can manually open the file in the browser and view the detail of the bundle\nsize. When an area is larger, it indicates that its corresponding bundle size is\nlarger.\n\n\n\n\nOverride Default Configuration#\n\nYou can override the default configuration through performance.bundleAnalyze,\nsuch as enabling the server mode:\n\n\n\n\nSize Types#\n\nIn the webpack-bundle-analyzer panel, you can control size types in the upper\nleft corner (default is Parsed):\n\n * Stat: The size obtained from the stats object of the bundler, which reflects\n   the size of the code before minification.\n * Parsed: The size of the file on the disk, which reflects the size of the code\n   after minification.\n * Gzipped: The file size requested in the browser reflects the size of the code\n   after minification and gzip.\n\n\nGenerate stats.json#\n\nBy setting generateStatsFile to true, stats JSON file will be generated in\nbundle output directory.\n\n\n\n\nNotes#\n\n 1. Enabling the server mode will cause the build process to not exit normally.\n 2. Enabling bundleAnalyzer will reduce build speed. Therefore, this\n    configuration should not be enabled during daily development, and it is\n    recommended to enable it on demand through the BUNDLE_ANALYZE environment\n    variable.\n 3. Since no code minification and other optimizations are performed in the dev\n    phase, the real output size cannot be reflected, so it is recommended to\n    analyze the output size in the build phase.\n 4. If the bundleAnalyzer is enabled during the dev phase, in order to ensure\n    that webpack-bundle-analyzer can access the contents of static assets,\n    Rsbuild will automatically enable the dev.writeToDisk option.","routePath":"/config/performance/bundle-analyze","lang":"en","toc":[{"text":"Enable Bundle Analyze","id":"enable-bundle-analyze","depth":2,"charIndex":253},{"text":"Via Environment Variable","id":"via-environment-variable","depth":3,"charIndex":372},{"text":"Via Configuration","id":"via-configuration","depth":3,"charIndex":638},{"text":"Analysis Result","id":"analysis-result","depth":3,"charIndex":724},{"text":"Override Default Configuration","id":"override-default-configuration","depth":2,"charIndex":1061},{"text":"Size Types","id":"size-types","depth":2,"charIndex":1210},{"text":"Generate stats.json","id":"generate-statsjson","depth":2,"charIndex":1679},{"text":"Notes","id":"notes","depth":2,"charIndex":1805}],"domain":"","frontmatter":{},"version":""},{"id":64,"title":"performance.chunkSplit","content":"#\n\n * Type: ChunkSplit\n * Default: { strategy: 'split-by-experience' }\n\nperformance.chunkSplit is used to configure the chunk splitting strategy. The\ntype of ChunkSplit is as follows:\n\nTIP\n\nPlease refer to the Code Splitting for the detailed usage.\n\n\nchunkSplit.strategy#\n\nRsbuild supports the following chunk splitting strategies:\n\n * split-by-experience: an empirical splitting strategy, automatically splits\n   some commonly used npm packages into chunks of moderate size.\n * split-by-module: split by NPM package granularity, each NPM package\n   corresponds to a chunk.\n * split-by-size: automatically split according to module size.\n * all-in-one: bundle all codes into one chunk.\n * single-vendor: bundle all NPM packages into a single chunk.\n * custom: custom chunk splitting strategy.\n\n\nType Definition#\n\nThe type of performance.chunkSplit is as follows:\n\n\n\n\nDefault Strategy#\n\nBy default, Rsbuild uses the split-by-experience strategy. If you want to use\nother chunk splitting strategies, you can specify them through the strategy\noption, for example:\n\n\n\n\nchunkSplit.minSize#\n\n * Type: number\n * Default: 10000\n\nWhen chunkSplit.strategy is split-by-size, you can specify the minimum size of a\nchunk via chunkSplit.minSize, the unit is bytes. The default value is 10000. For\nexample:\n\n\n\n\nchunkSplit.maxSize#\n\n * Type: number\n * Default: Number.POSITIVE_INFINITY\n\nWhen chunkSplit.strategy is split-by-size, you can specify the maximum size of a\nchunk via chunkSplit.maxSize, the unit is bytes. The default value is\nNumber.POSITIVE_INFINITY. For example:\n\n\n\n\nchunkSplit.forceSplitting#\n\n * Type: RegExp[] | Record\n * Default: []\n\nVia chunkSplit.forceSplitting, you can specify the NPM packages that need to be\nforced to split.\n\nFor example, split the axios library under node_modules into axios.js:\n\n\n\nThis is an easier way than configuring Rspack's splitChunks directly.\n\nTIP\n\nChunks split using the forceSplitting configuration will be inserted into the\nHTML file as resources requested for the initial screen using","routePath":"/config/performance/chunk-split","lang":"en","toc":[{"text":"chunkSplit.strategy","id":"chunksplitstrategy","depth":2,"charIndex":250},{"text":"Type Definition","id":"type-definition","depth":2,"charIndex":794},{"text":"Default Strategy","id":"default-strategy","depth":3,"charIndex":866},{"text":"chunkSplit.minSize","id":"chunksplitminsize","depth":2,"charIndex":1064},{"text":"chunkSplit.maxSize","id":"chunksplitmaxsize","depth":2,"charIndex":1295},{"text":"chunkSplit.forceSplitting","id":"chunksplitforcesplitting","depth":2,"charIndex":1564},{"text":"chunkSplit.splitChunks","id":"chunksplitsplitchunks","depth":2,"charIndex":-1},{"text":"chunkSplit.override","id":"chunksplitoverride","depth":2,"charIndex":-1},{"text":"Targets","id":"targets","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":65,"title":"performance.dnsPrefetch","content":"#\n\n * Type: string[] | undefined\n * Default: undefined\n\nInjects tags into the HTML file.\n\n\nWhen to use#\n\nWhen a browser requests a resource from a (third party) server, that\ncross-origin's domain name must be resolved to an IP address before the browser\ncan issue the request. This process is known as DNS resolution. While DNS\ncaching can help to reduce this latency, DNS resolution can add significant\nlatency to requests.\n\nConfiguring dns-prefetch can resolve the domain before requesting resources,\nreducing request latency and improving loading performance.\n\nFor more information, please refer to: Using dns-prefetch.\n\n\nExample#\n\n\n\nThe generated HTML tag in HTML is:\n\n\n\n\nNotes#\n\nIn general, a website should not configure more than 10 DNS prefetches.\n\nUsing too many DNS prefetches can lead to performance issues because browsers\nhave limits on the number of DNS requests they can maintain. Excessive DNS\nprefetching, or prefetching for domains that are not ultimately used can cause\nresource contention and may reduce browser efficiency.\n\nFor more details, refer to What Is a DNS Prefetch?.","routePath":"/config/performance/dns-prefetch","lang":"en","toc":[{"text":"When to use","id":"when-to-use","depth":2,"charIndex":90},{"text":"Example","id":"example","depth":2,"charIndex":624},{"text":"Notes","id":"notes","depth":2,"charIndex":675}],"domain":"","frontmatter":{},"version":""},{"id":66,"title":"performance.preconnect","content":"#\n\n * Type:\n\n\n\n * Default: undefined\n\nInjects tags into the HTML file.\n\n\nWhen to use#\n\nThe preconnect keyword for the rel attribute of the element is a hint to\nbrowsers that the user is likely to need resources from the target resource's\norigin, and therefore the browser can likely improve the user experience by\npreemptively initiating a connection to that origin.\n\nPreconnecting speeds up future loads from a given origin by preemptively\nperforming part or all of the handshake (DNS+TCP for HTTP, and DNS+TCP+TLS for\nHTTPS origins).\n\nwill provide a benefit to any future cross-origin HTTP request, navigation or\nsubresource. It has no benefit on same-origin requests because the connection is\nalready open.\n\nIf a page needs to make connections to many third-party domains, preconnecting\nthem all can be counterproductive. The hint is best used for only the most\ncritical connections. For the others, just use to save time on the first step —\nthe DNS lookup.\n\n\nExample#\n\n\n\nThe generated HTML tag is:\n\n\n\n\nOptions#\n\n\nhref#\n\n * Type: string\n * Default: undefined\n\nSpecify the URL to preconnect to.\n\n\n\n\ncrossorigin#\n\n * Type: boolean\n * Default: false\n\nSpecify whether to add the crossorigin attribute.\n\n\n\nThe generated HTML tag is:\n\n\n\nTIP\n\nRefer to this link to understand the use cases of the crossorigin attribute.","routePath":"/config/performance/preconnect","lang":"en","toc":[{"text":"When to use","id":"when-to-use","depth":2,"charIndex":72},{"text":"Example","id":"example","depth":2,"charIndex":962},{"text":"Options","id":"options","depth":2,"charIndex":1005},{"text":"href","id":"href","depth":3,"charIndex":1016},{"text":"crossorigin","id":"crossorigin","depth":3,"charIndex":1100}],"domain":"","frontmatter":{},"version":""},{"id":67,"title":"performance.prefetch","content":"#\n\n * Type: undefined | true | PrefetchOption\n\n\n\n * Default: undefined\n\nInject the tags for the static assets generated by Rsbuild.\n\n\nWhat is prefetch#\n\nThe prefetch keyword for the rel attribute of the element provides a hint to\nbrowsers that the user is likely to need the target resource for future\nnavigation, and therefore the browser can likely improve the user experience by\npreemptively fetching and caching the resource.\n\n\nEnable prefetch#\n\nWhen performance.prefetch is set to true, Rsbuild will use the following default\noptions to prefetch resources. This means prefetching all asynchronous resources\non the current page, including asynchronous JS and its associated CSS, image,\nfont, and other resources.\n\n\n\nFor example, if you dynamically import other modules in the entry file:\n\n\n\nThe tags injected in HTML are as follows:\n\n\n\n\nInject Manually#\n\nThe performance.prefetch can only inject the prefetch tags for static resources\ngenerated by Rsbuild. If you need to prefetch other resources, you can manually\nadd tags through html.tags :\n\n\n\nThe injected HTML tag is as follows:\n\n\n\n\nOptions#\n\nWhen the value of performance.prefetch is object type, the Rsbuild will enable\nthe prefetch capability for the specified resource according to the current\noptions.\n\n\nprefetch.type#\n\nThe type field controls which resources will be pre-fetched, and supports\nsecondary filtering of specified resources through include and exclude.\n\nCurrently supported resource types are as follows:\n\n * async-chunks: prefetch all asynchronous resources (on the current page),\n   including asynchronous JS and its associated CSS, image, font and other\n   resources.\n * initial: prefetch all non-async resources (on the current page). It should be\n   noted that if the current script has been added to the HTML template, no\n   additional pre-fetching will be performed.\n * all-chunks: prefetch all resources (on the current page), including all\n   asynchronous and non-asynchronous resources.\n * all-assets: prefetch all resources, and resources of other pages will be\n   included in the MPA scenario.\n\n\nExample#\n\nWhen you want to prefetch all image resources in png format on the current page,\nyou can configure it as follows:\n\n","routePath":"/config/performance/prefetch","lang":"en","toc":[{"text":"What is prefetch","id":"what-is-prefetch","depth":2,"charIndex":133},{"text":"Enable prefetch","id":"enable-prefetch","depth":2,"charIndex":431},{"text":"Inject Manually","id":"inject-manually","depth":2,"charIndex":840},{"text":"Options","id":"options","depth":2,"charIndex":1091},{"text":"prefetch.type","id":"prefetchtype","depth":3,"charIndex":1267},{"text":"Example","id":"example","depth":3,"charIndex":2084}],"domain":"","frontmatter":{},"version":""},{"id":68,"title":"performance.preload","content":"#\n\n * Type: undefined | true | PreloadOption\n\n\n\n * Default: undefined\n\nInject the tags for the static assets generated by Rsbuild.\n\n\nWhat is preload#\n\nThe preload value of the element's rel attribute lets you declare fetch requests\nin the HTML's , specifying resources that your page will need very soon, which\nyou want to start loading early in the page lifecycle, before browsers' main\nrendering machinery kicks in.\n\nThis ensures they are available earlier and are less likely to block the page's\nrender, improving performance. Even though the name contains the term load, it\ndoesn't load and execute the script but only schedules it to be downloaded and\ncached with a higher priority.\n\n\nEnable preload#\n\nWhen performance.preload is set to true, Rsbuild will use the following default\noptions to preload resources. This means preloading all asynchronous resources\non the current page, including asynchronous JS and its associated CSS, image,\nfont, and other resources.\n\n\n\nFor example, if you dynamically import other modules in the entry file:\n\n\n\nThe tags injected in HTML are as follows:\n\n\n\n\nInject Manually#\n\nThe performance.preload can only inject the preload tags for static resources\ngenerated by Rsbuild. If you need to preload other resources, you can manually\nadd tags through html.tags :\n\n\n\nThe injected HTML tag is as follows:\n\n\n\n\nOptions#\n\nWhen the value of performance.preload is object type, the Rsbuild will enable\nthe preload capability for the specified resource according to the current\noptions.\n\n\npreload.type#\n\nThe type field controls which resources will be pre-fetched, and supports\nsecondary filtering of specified resources through include and exclude.\n\nCurrently supported resource types are as follows:\n\n * async-chunks: preload all asynchronous resources (on the current page),\n   including asynchronous JS and its associated CSS, image, font and other\n   resources.\n * initial: preload all non-async resources (on the current page). It should be\n   noted that if the current script has been added to the HTML template, no\n   additional pre-fetching will be performed.\n * all-chunks: preload all resources (on the current page), including all\n   asynchronous and non-asynchronous resources.\n * all-assets: preload all resources, and resources of other pages will be\n   included in the MPA scenario.\n\n\nExample#\n\nWhen you want to preload all image resources in png format on the current page,\nyou can configure it as follows:\n\n","routePath":"/config/performance/preload","lang":"en","toc":[{"text":"What is preload","id":"what-is-preload","depth":2,"charIndex":132},{"text":"Enable preload","id":"enable-preload","depth":2,"charIndex":689},{"text":"Inject Manually","id":"inject-manually","depth":2,"charIndex":1094},{"text":"Options","id":"options","depth":2,"charIndex":1342},{"text":"preload.type","id":"preloadtype","depth":3,"charIndex":1516},{"text":"Example","id":"example","depth":3,"charIndex":2328}],"domain":"","frontmatter":{},"version":""},{"id":69,"title":"performance.printFileSize","content":"#\n\n * Type:\n\n\n\n * Default: true\n\nWhether to print the file sizes after production build.\n\n\nDefault Outputs#\n\nThe default output log is as follows:\n\n\n\n\nDisable Outputs#\n\nIf you don't want to print any information, you can disable it by setting\nprintFileSize to false:\n\n\n\n\nOptions#\n\nYou can customize the output format through the options.\n\n\ntotal#\n\n * Type: boolean\n * Default: true\n\nWhether to output the total size of all static assets.\n\n\n\nTIP\n\nIf the current build only generates one static asset, the total size will not be\nprinted.\n\n\ndetail#\n\n * Type: boolean\n * Default: true\n\nWhether to output the size of each static asset.\n\nIf you don't need to view the size of each static asset, you can set detail to\nfalse. In this case, only the total size will be output:\n\n\n\n\ncompressed#\n\n * Type: boolean\n * Default: false when output.target is node, otherwise true\n\nWhether to output the gzip-compressed size of each static asset.\n\nIf you don't need to view the gzipped size, you can set compressed to false.\nThis can save some gzip computation time for large projects:\n\n\n\nTIP\n\nThis data is only for reference to the size after gzip compression. Rsbuild does\nnot enable gzip compression for static assets. Usually, you need to enable gzip\ncompression on the server side, for example, using the gzip module of nginx.\n\n\ninclude#\n\n * Type:\n\n\n\n * Default: undefined\n\nA filter function to determine which static assets to print.\n\nIf returned false, the static asset will be excluded and not included in the\ntotal size or detailed size.\n\nFor example, only output static assets larger than 10kB:\n\n\n\nOr only output .js files larger than 10kB:\n\n\n\n\nexclude#\n\n * Type:\n\n\n\n * Default: (asset) => /\\.(?:map|LICENSE\\.txt)$/.test(asset.name)\n\nA filter function to determine which static assets to exclude. If both include\nand exclude are set, exclude will take precedence.\n\nRsbuild defaults to excluding source map and license files, as these files do\nnot affect page load performance.\n\nFor example, exclude .html files in addition to the default:\n\n","routePath":"/config/performance/print-file-size","lang":"en","toc":[{"text":"Default Outputs","id":"default-outputs","depth":2,"charIndex":90},{"text":"Disable Outputs","id":"disable-outputs","depth":2,"charIndex":150},{"text":"Options","id":"options","depth":2,"charIndex":270},{"text":"total","id":"total","depth":3,"charIndex":339},{"text":"detail","id":"detail","depth":3,"charIndex":537},{"text":"compressed","id":"compressed","depth":3,"charIndex":771},{"text":"include","id":"include","depth":3,"charIndex":1315},{"text":"exclude","id":"exclude","depth":3,"charIndex":1636}],"domain":"","frontmatter":{},"version":""},{"id":70,"title":"performance.profile","content":"#\n\n * Type: boolean\n * Default: false\n\nWhether capture timing information for each module, same as the profile config\nof Rspack.\n\nAfter enabled:\n\n * Rsbuild will auto-generate dist/stats.json file through bundle analyzer.\n * Rspack will include the build time information when generating stats.json or\n   other statistics files.\n\n\nExample#\n\n\n\nWhen enabled, Rspack generates a JSON file with some statistics about the module\nthat includes information about timing information for each module.\n\n\nGuide#\n\nPlease refer to the Build Profiling section for more methods to analyze build\nperformance.","routePath":"/config/performance/profile","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":330},{"text":"Guide","id":"guide","depth":2,"charIndex":493}],"domain":"","frontmatter":{},"version":""},{"id":71,"title":"performance.removeConsole","content":"#\n\n * Type: boolean | ConsoleType[]\n * Default: false\n\nWhether to remove console.[methodName] in production build.\n\n\nRemove all#\n\nWhen removeConsole is set to true, all types of console.[methodName] are\nremoved:\n\n\n\n\nSpecific Type#\n\nYou can also specify to remove only certain types of console.[methodName], such\nas console.log and console.warn:\n\n\n\nThe following types of console are currently supported:\n\n","routePath":"/config/performance/remove-console","lang":"en","toc":[{"text":"Remove all","id":"remove-all","depth":2,"charIndex":116},{"text":"Specific Type","id":"specific-type","depth":2,"charIndex":215}],"domain":"","frontmatter":{},"version":""},{"id":72,"title":"performance.removeMomentLocale","content":"#\n\n * Type: boolean\n * Default: false\n\nWhether to remove the locales of moment.js.\n\nmoment.js contains a lot of locales by default, which will increase the bundle\nsize.\n\nWhen moment.js is used in the project, it is recommended to enable this option\nto automatically exclude all locales:\n\n\n\nOnce enabled, you can load a specific locale via:\n\n","routePath":"/config/performance/remove-moment-locale","lang":"en","toc":[],"domain":"","frontmatter":{},"version":""},{"id":73,"title":"plugins","content":"#\n\nUsed to register Rsbuild plugins.\n\nAsync plugin (promise) in the plugins array will be resolved, and falsy values\nwill be ignored.\n\n * Type:\n\n\n\n * Default: undefined\n\n> Please check out the Plugin List page to discover all available plugins.\n\n\nExample#\n\nFor example, register the Stylus plugin in Rsbuild.\n\n * Installing the plugin:\n\n * Registering the plugin:\n\n\n\n\nExecution Order#\n\nBy default, plugins are executed in the order they appear in the plugins array.\nBuilt-in Rsbuild plugins are executed before user-registered plugins.\n\nWhen a plugin internally uses fields that control the order, such as pre and\npost, the execution order is adjusted based on them. See Pre Plugins for more\ndetails.\n\n\nNested Plugins#\n\nRsbuild also supports adding nested plugins. You can pass in an array containing\nmultiple plugins, similar to a plugin preset collection. This is particularly\nuseful for implementing complex functionalities that require a combination of\nmultiple plugins (such as framework integration).\n\n\n\n\nLocal Plugins#\n\nIf your local code repository contains Rsbuild plugins, you can import them\nusing relative paths.\n\n\n\n\nPlugin Options#\n\nIf a plugin provides custom options, you can pass the configurations through the\nplugin function's parameters.\n\n\n\n\nPlugin registration phase#\n\nIt should be noted that plugin registration can only be performed during the\nRsbuild initialization phase. You cannot dynamically add other plugins within a\nplugin through the plugin API:\n\n\n\n\nRspack Plugins#\n\nThe plugins option is used to register Rsbuild plugins. If you need to register\nRspack or Webpack plugins, please use tools.rspack.\n\n\n\n\nUnplugin#\n\nunplugin is a unified plugin system for various build tools. You can use plugins\nimplemented based on unplugin in Rsbuild, just import the /rspack subpath of the\nplugin and register it via tools.rspack.\n\nHere is an example of using unplugin-vue-components:\n\n\n\nTIP\n\nWhen using the transform hook in unplugin, please use the transformInclude hook\nto match the specified module. When the transform hook matches the .html module,\nit will replace the default EJS transformation of the html-rspack-plugin.\n\n> Please ensure that the version of unplugin package is >= v1.6.0.","routePath":"/config/plugins","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":246},{"text":"Execution Order","id":"execution-order","depth":2,"charIndex":367},{"text":"Nested Plugins","id":"nested-plugins","depth":2,"charIndex":702},{"text":"Local Plugins","id":"local-plugins","depth":2,"charIndex":1010},{"text":"Plugin Options","id":"plugin-options","depth":2,"charIndex":1128},{"text":"Plugin registration phase","id":"plugin-registration-phase","depth":2,"charIndex":1260},{"text":"Rspack Plugins","id":"rspack-plugins","depth":2,"charIndex":1480},{"text":"Unplugin","id":"unplugin","depth":2,"charIndex":1633}],"domain":"","frontmatter":{},"version":""},{"id":74,"title":"resolve.aliasStrategy","content":"#\n\n * Type: 'prefer-tsconfig' | 'prefer-alias'\n * Default: 'prefer-tsconfig'\n * Version: >=1.1.7\n\nControl the priority between the paths option in tsconfig.json and the\nresolve.alias option of Rsbuild.\n\n\nprefer-tsconfig#\n\nBy default, resolve.aliasStrategy is set to 'prefer-tsconfig'. In this case,\nboth the paths option in tsconfig.json and the alias option in the bundler will\ntake effect, but the paths option in tsconfig has a higher priority.\n\nFor example, if the following configurations are set at the same time:\n\n * tsconfig paths:\n\n\n\n * resolve.alias:\n\n\n\nSince the tsconfig paths have a higher priority, the following will happen:\n\n * @common will use the value defined in tsconfig paths, pointing to\n   ./src/common-1\n * @utils will use the value defined in resolve.alias, pointing to ./src/utils\n\n\nprefer-alias#\n\nIf the value of resolve.aliasStrategy is set to prefer-alias, the paths option\nin tsconfig.json will only be used to provide TypeScript type definitions and\nwill not affect the bundling result. In this case, the bundler will only read\nthe alias option as the path alias.\n\n\n\nFor example, if the following configurations are set at the same time:\n\n * tsconfig paths:\n\n\n\n * resolve.alias:\n\n\n\nSince the tsconfig paths are only used to provide types, only the @common alias\nwill be effective, pointing to the ./src/common-2 directory.\n\nIn most cases, you don't need to use prefer-alias, but you can consider using it\nif you need to dynamically generate some alias configurations. For example,\ngenerating the alias option based on environment variables:\n\n","routePath":"/config/resolve/alias-strategy","lang":"en","toc":[{"text":"prefer-tsconfig","id":"prefer-tsconfig","depth":3,"charIndex":203},{"text":"prefer-alias","id":"prefer-alias","depth":3,"charIndex":808}],"domain":"","frontmatter":{},"version":""},{"id":75,"title":"resolve.alias","content":"#\n\n * Type:\n\n\n\n * Default:\n\n\n\n * Version: >=1.1.7\n\nCreate aliases to import or require certain modules, same as the resolve.alias\nconfig of Rspack.\n\nFor TypeScript projects, you only need to configure compilerOptions.paths in the\ntsconfig.json file. The Rsbuild will automatically recognize it, so there is no\nneed to configure the resolve.alias option separately. For more details, please\nrefer to Path Aliases.\n\nTIP\n\nIn versions prior to Rsbuild 1.1.7, you can use the source.alias to set alias,\nbut it will be removed in the next major version.\n\n\nObject Type#\n\nThe alias can be an Object, and the relative path will be automatically\nconverted to absolute path.\n\n\n\nWith above configuration, if @common/Foo.tsx is import in the code, it will be\nmapped to the /src/common/Foo.tsx path.\n\n\nFunction Type#\n\nThe alias can be a function, it will accept the previous alias object, and you\ncan modify it.\n\n\n\nIf you need to remove the built-in @swc/helpers alias, you can delete it in the\nfunction:\n\n\n\nYou can also return a new object as the final result in the function, which will\nreplace the preset alias object.\n\n\n\n\nSet by environment#\n\nWhen you build for multiple environments, you can set different alias for each\nenvironment:\n\nFor example, set different alias for web and node environments:\n\n\n\n\nExact Matching#\n\nBy default, resolve.alias will automatically match sub-paths, for example, with\nthe following configuration:\n\n\n\nIt will match as follows:\n\n\n\nYou can add the $ symbol to enable exact matching, which will not automatically\nmatch sub-paths.\n\n\n\nIt will match as follows:\n\n\n\n\nHandling npm packages#\n\nYou can use alias to resolve an npm package to a specific directory.\n\nFor example, if multiple versions of the react are installed in the project, you\ncan alias react to the version installed in the root node_modules directory to\navoid bundling multiple copies of the React code.\n\n\n\nWhen using alias to handle npm packages, please be aware of whether different\nmajor versions of the package are being used in the project.\n\nFor example, if a module or npm dependency in your project uses the React 19\nAPI, and you alias React to version 17, the module will not be able to reference\nthe React 19 API, resulting in code exceptions.\n\n\nHandling Loader#\n\nresolve.alias does not support creating aliases for loaders.\n\nIf you need to create aliases for loaders, you can use Rspack's resolveLoader\nconfiguration.\n\n","routePath":"/config/resolve/alias","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":2,"charIndex":549},{"text":"Function Type","id":"function-type","depth":2,"charIndex":787},{"text":"Set by environment","id":"set-by-environment","depth":2,"charIndex":1111},{"text":"Exact Matching","id":"exact-matching","depth":2,"charIndex":1293},{"text":"Handling npm packages","id":"handling-npm-packages","depth":2,"charIndex":1581},{"text":"Handling Loader","id":"handling-loader","depth":2,"charIndex":2236}],"domain":"","frontmatter":{},"version":""},{"id":76,"title":"resolve.dedupe","content":"#\n\n * Type: string[]\n * Default: undefined\n * Version: >= 1.1.7\n\nForce Rsbuild to resolve the specified packages from project root, which is\nuseful for deduplicating packages and reducing the bundle size.\n\n\nExample#\n\nFor example, assume your project is based on React 19, and you are using the foo\npackage that depends on React 17, then your project will have two different\nversions of the React:\n\n\n\nIn this case, you can use the resolve.dedupe config to remove the duplicate\nReact packages, and resolve all react and react-dom packages to\n/node_modules/react and /node_modules/react-dom:\n\n\n\nNote that using resolve.dedupe to unify different major versions of a package,\nit may cause some packages to fail because they may depend on specific versions\nof APIs or features.\n\nFor example, if foo depends on a React 17-specific API or feature, then unifying\nReact 17 and React 19 with React 19 using resolve.dedupe may cause foo to fail.\n\n\nHow it works#\n\nresolve.dedupe is implemented based on resolve.alias, it will get the path of\nthe specified package through require.resolve in the project root directory and\nset it to the alias.\n\nIn the above example, resolve.dedupe will be converted to the following alias\nconfig:\n\n\n\nThe alias generated by resolve.dedupe will be merged with the configured\nresolve.alias in the project, and the resolve.alias config will take precedence\nwhen the keys are the same.","routePath":"/config/resolve/dedupe","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":206},{"text":"How it works","id":"how-it-works","depth":2,"charIndex":935}],"domain":"","frontmatter":{},"version":""},{"id":77,"title":"resolve.extensions","content":"#\n\n * Type: string[]\n * Default: ['.ts', '.tsx', '.mjs', '.js', '.jsx', '.json']\n * Version: >= 1.1.9\n\nAutomatically resolve file extensions when importing modules. This means you can\nimport files without explicitly writing their extensions.\n\nFor example, if importing './index', Rsbuild will try to resolve using the\nfollowing order\n\n * ./index.ts\n * ./index.tsx\n * ./index.mjs\n * ./index.js\n * ./index.jsx\n * ./index.json\n\nTIP\n\nIt is not recommended to omit .vue or other custom import extension names using\nresolve.extensions, as this may interfere IDE and type support.\n\n\nExample#\n\nThe value of resolve.extensions overrides the default value of Rsbuild:\n\n\n\n\nRspack Config#\n\nresolve.extensions is provided by Rspack, see Rspack - resolve.extensions.\n\nYou can also configure it using tools.rspack:\n\n\n\nThe difference between them is how the configuration is merged.\n\ntools.rspack merges the configuration arrays based on webpack-merge, which means\ntools.rspack.resolve.extensions will merge with the default value of Rsbuild,\nrather than overriding it.","routePath":"/config/resolve/extensions","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":575},{"text":"Rspack Config","id":"rspack-config","depth":2,"charIndex":661}],"domain":"","frontmatter":{},"version":""},{"id":78,"title":"root","content":"#\n\n * Type: string\n * Default: process.cwd()\n * Version: >= 1.0.0\n\nSpecify the project root directory. Can be an absolute path, or a path relative\nto process.cwd().\n\nThe value of Rsbuild root is also be passed to the context configuration of\nRspack.\n\nTIP\n\nThe value of root does not affect the path of the .env file, as the .env file is\nresolved before the Rsbuild configuration file.\n\nRsbuild CLI supports using the --root option to specify the root directory,\nwhich can affect the path of the .env file. See \"CLI\" for more details.\n\n\nExample#\n\n * Relative path:\n\n\n\n * Absolute path:\n\n","routePath":"/config/root","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":535}],"domain":"","frontmatter":{},"version":""},{"id":79,"title":"security.nonce","content":"#\n\n * Type:\n\n\n\n * Default: undefined\n\nAdding a nonce attribute to the scripts resources introduced for HTML. This\nallows the browser to determine whether the script can be executed when it\nparses inline scripts with matching nonce values.\n\n\nWhat is nonce#\n\nThe nonce mechanism plays a crucial role in Content Security Policy (CSP),\nenhancing webpage security. It allows developers to define a unique and random\nstring value, i.e., nonce, for inline","routePath":"/config/security/nonce","lang":"en","toc":[{"text":"What is nonce","id":"what-is-nonce","depth":2,"charIndex":240},{"text":"Example","id":"example","depth":2,"charIndex":-1},{"text":"Scope of Effect","id":"scope-of-effect","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":80,"title":"security.sri","content":"#\n\n * Type:\n\n\n\n * Default: undefined\n\nAdding an integrity attribute to\n\n\nNote#\n\nThe security.sri in Rsbuild will only apply to the tags generated by Rsbuild and\nwill not apply to:\n\n * The original tags in the HTML template.\n * The tags injected asynchronously by Rspack.\n * The tags inserted through client JavaScript code.\n\nRsbuild will handle the following tags:\n\n * \n * \n * \n\n\nOptions#\n\n\nenable#\n\n * Type: 'auto' | boolean\n * Default: false\n\nWhether to enable SRI. 'auto' means it's enabled in production mode and disabled\nin development mode.\n\n\n\n> Typically, you do not need to enable SRI in development mode.\n\n\nalgorithm#\n\n * Type: 'sha256' | 'sha384' | 'sha512'\n * Default: 'sha384'\n\nSpecifies the algorithm used to compute the integrity hash.\n\nFor example, set to sha512:\n\n\n\nThe generated value of integrity attribute will be prefixed with sha512-:\n\n\n\n> Reference: Cryptographic hash functions.","routePath":"/config/security/sri","lang":"en","toc":[{"text":"What is SRI","id":"what-is-sri","depth":2,"charIndex":-1},{"text":"Example","id":"example","depth":2,"charIndex":-1},{"text":"Note","id":"note","depth":2,"charIndex":72},{"text":"Options","id":"options","depth":2,"charIndex":379},{"text":"enable","id":"enable","depth":3,"charIndex":390},{"text":"algorithm","id":"algorithm","depth":3,"charIndex":615}],"domain":"","frontmatter":{},"version":""},{"id":81,"title":"server.base","content":"#\n\n * Type: string\n * Default: /\n * Version: >= 1.0.10\n\nserver.base is used to configure the base path of the server.\n\n\nExample#\n\nBy default, the base path of the server is /, and users can access index.html\nthrough http://localhost:3000.\n\nIf you want to access index.html through http://localhost:3000/foo/, you can\nchange server.base to /foo.\n\n\n\n\nURL prefix of assets#\n\nBy default, dev.assetPrefix and output.assetPrefix will read the value of\nserver.base as the default value.\n\nWhen server.base is /foo, the default resource URL loaded in the browser is as\nfollows:\n\n\n\nThen, index.html and static assets can be accessed through\nhttp://localhost:3000/foo/.\n\nIf you do not want to use this default behavior, you can override it by\nexplicitly setting dev.assetPrefix / output.assetPrefix :\n\n","routePath":"/config/server/base","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":119},{"text":"URL prefix of assets","id":"url-prefix-of-assets","depth":2,"charIndex":348}],"domain":"","frontmatter":{},"version":""},{"id":82,"title":"server.compress","content":"#\n\n * Type: boolean\n * Default: true\n\nWhether to enable gzip compression for served static assets.\n\nIf you want to disable the gzip compression, you can set compress to false:\n\n","routePath":"/config/server/compress","lang":"en","toc":[],"domain":"","frontmatter":{},"version":""},{"id":83,"title":"server.cors","content":"#\n\n * Type: boolean | import('cors').CorsOptions\n * Default: true\n * Version: >= 1.1.11\n\nConfigure CORS options for the dev server or preview server, based on the cors\nmiddleware.\n\n * true：Enable CORS with default options.\n * false：Disable CORS.\n * object：Enable CORS with the specified options.\n\n\nExample#\n\nOnly enable CORS for the dev server:\n\n\n\nDisable CORS:\n\n\n\n\nOptions#\n\nThe cors option can be an object, which is the same as the cors middleware\noptions.\n\nThe default configuration is the equivalent of:\n\n\n\nFor example, use the origin option to configure the Access-Control-Allow-Origin\nheader:\n\n","routePath":"/config/server/cors","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":297},{"text":"Options","id":"options","depth":2,"charIndex":365}],"domain":"","frontmatter":{},"version":""},{"id":84,"title":"server.headers","content":"#\n\n * Type: Record\n * Default: undefined\n\nAdds headers to all responses.\n\n","routePath":"/config/server/headers","lang":"en","toc":[],"domain":"","frontmatter":{},"version":""},{"id":85,"title":"server.historyApiFallback","content":"#\n\n * Type: boolean | ConnectHistoryApiFallbackOptions\n * Default: false\n\nWhen Rsbuild's default page routing behavior cannot meet your needs, for\nexample, if you want to be able to access main.html when accessing /, you can\nset it up using server.historyApiFallback.\n\n\nExample#\n\nSet historyApiFallback.index to main.html, then main.html can be accessed when\naccessing / or other routes that would otherwise 404.\n\n\n\nWhen your application contains multiple entries, you may want different visits\nto fallback to different pages. At this point, you can set more complex rules\nvia the rewrites option:\n\n\n\nFor more options and information, see the connect-history-api-fallback\ndocumentation.","routePath":"/config/server/history-api-fallback","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":269}],"domain":"","frontmatter":{},"version":""},{"id":86,"title":"server.host","content":"#\n\n * Type: string\n * Default: 0.0.0.0\n\nSpecify the host that the Rsbuild Server listens to.\n\nBy default, the Rsbuild Server will listen to 0.0.0.0, which means listening to\nall IPv4 network interfaces, including localhost and public network addresses.\n\nYou can use server.host or the --host CLI param to set the host (The priority of\n--host option is higher than server.host).\n\nIf you want the Rsbuild Server to listen only on localhost, you can set it to:\n\n\n\n\nIPv6 Support#\n\nIf you want the Rsbuild Server to listen all IPv6 network interfaces, you can\nset it to:\n\n\n\nIf you want the Rsbuild Server to listen a specified IPv6 host, you can set it\nto:\n\n\n\nAt this point, you can access the page via http://[::1]:3000/.","routePath":"/config/server/host","lang":"en","toc":[{"text":"IPv6 Support","id":"ipv6-support","depth":2,"charIndex":461}],"domain":"","frontmatter":{},"version":""},{"id":87,"title":"server.htmlFallback","content":"#\n\n * Type: false | 'index'\n * Default: 'index'\n\nWhether to support HTML fallback. By default, when the request meets the\nfollowing conditions and the corresponding resource is not found, it will\nfallback to index.html:\n\n * The request is a GET or HEAD request\n * Which accepts text/html (the request header accept type is text/html or */*)\n\n\n\nTIP\n\nWhen htmlFallback cannot meet your needs, you can use server.historyApiFallback\nfor more flexible settings.","routePath":"/config/server/html-fallback","lang":"en","toc":[],"domain":"","frontmatter":{},"version":""},{"id":88,"title":"server.https","content":"#\n\n * Type:\n\n\n\n * Default: undefined\n\nAfter configuring this option, you can enable HTTPS Server, and disabling the\nHTTP Server.\n\nHTTP:\n\n\n\nHTTPS:\n\n\n\nTIP\n\nRsbuild enables HTTP/2 server by default. However, when you use server.proxy,\nthe server will downgrade to HTTP/1, because the underlying http-proxy does not\nsupport HTTP/2.\n\n\nSet Certificate#\n\nYou can manually pass in the certificate and the private key required in the\nserver.https option. This parameter will be directly passed to the createServer\nmethod of the https module in Node.js.\n\nFor details, please refer to https.createServer.\n\n\n\nTIP\n\nThe certificates used for local development are typically generated using\nmkcert. Please read \"How to use HTTPS for local development\" to learn how to use\nit.\n\n\nSelf-signed Certificate#\n\nFor basic configuration requirements, you can add the @rsbuild/plugin-basic-ssl\nplugin, which will automatically create a self-signed certificate and set\nserver.https option by default.\n\n","routePath":"/config/server/https","lang":"en","toc":[{"text":"Set Certificate","id":"set-certificate","depth":2,"charIndex":329},{"text":"Self-signed Certificate","id":"self-signed-certificate","depth":2,"charIndex":762}],"domain":"","frontmatter":{},"version":""},{"id":89,"title":"server.open","content":"#\n\n * Type:\n\n\n\n * Default: undefined\n\nserver.open is used to configure a set of page URLs that Rsbuild will\nautomatically open in the browser after starting the server.\n\n> You can also use the --open option of Rsbuild CLI to open the pages. When\n> using server.open and --open at the same time, --open takes precedence.\n\n\nExample#\n\nserver.open can be set to the following values.\n\n * Open the project's default preview page, which defaults to http://localhost:.\n   If server.host is configured, it defaults to http://:.\n\n\n\n * Open the specified page:\n\n\n\n * Open the specified path, equivalent to http://localhost:/home:\n\n\n\n * Open multiple pages:\n\n\n\n * Open a non-localhost URL (used with proxy):\n\n\n\n\nPort placeholder#\n\nThe port number that Rsbuild server listens on may change. For example, if the\nport is in use, Rsbuild will automatically increment the port number until it\nfinds an available port.\n\nTo avoid server.open becoming invalid due to port changes, you can use one of\nthe following methods:\n\n * Enable server.strictPort.\n * Use the placeholder to refer to the current port number. Rsbuild will replace\n   the placeholder with the actual port number it is listening on.\n\n\n\n\nOpen the specified browser#\n\nRsbuild by default will open the page in the system's default browser.\n\nOn macOS, you can open the specified browser when dev server starts, by set\nenvironment variable BROWSER, support values:\n\n * Google Chrome Canary\n * Google Chrome Dev\n * Google Chrome Beta\n * Google Chrome\n * Microsoft Edge\n * Brave Browser\n * Vivaldi\n * Chromium\n\nFor example:\n\n\n\nTIP\n\nYou can set BROWSER in the local .env.local file, which helps avoid impacting\nother developers.\n\n\nCallback#\n\nBy using open.before, you can trigger a callback function before opening the\npage.\n\n\n\nWhen using open.before, the page URLs can be configured via open.target.\n\n","routePath":"/config/server/open","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":321},{"text":"Port placeholder","id":"port-placeholder","depth":2,"charIndex":700},{"text":"Open the specified browser","id":"open-the-specified-browser","depth":2,"charIndex":1185},{"text":"Callback","id":"callback","depth":2,"charIndex":1671}],"domain":"","frontmatter":{},"version":""},{"id":90,"title":"server.port","content":"#\n\n * Type: number\n * Default: 3000\n\nSpecify a port number for Rsbuild Server to listen.\n\nBy default, Rsbuild Server listens on port 3000 and automatically increments the\nport number when the port is occupied. If you enable the server.strictPort\nconfig, Rsbuild Server will throw an error instead of incrementing the port\nnumber when the port is occupied.\n\nRsbuild CLI provides the --port option to set the port number, and the --port\noption has higher priority than server.port config.\n\n\n\n\nExample#\n\nSet the port to 8080:\n\n\n\nSet different port numbers for development and preview servers:\n\n","routePath":"/config/server/port","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":490}],"domain":"","frontmatter":{},"version":""},{"id":91,"title":"server.printUrls","content":"#\n\n * Type:\n\n\n\n * Default: true\n\nWhether to print the server's URLs.\n\nBy default, when you start the dev server or preview server, Rsbuild will print\nthe following logs:\n\n\n\n\nCustom Logging#\n\nserver.printUrls can be set to a function, with parameters including port,\nprotocol, urls and routes.\n\n\nModify URL#\n\nIf the printUrls function returns an URLs array, Rsbuild prints these URLs to\nthe terminal in the default format:\n\n\n\nOutput:\n\n\n\n\nFully Customizable#\n\nIf the printUrls function does not return a value, Rsbuild will not print the\nserver's URL addresses. You can customize the log content based on the\nparameters and output it to the terminal yourself.\n\n\n\n\nMPA Output#\n\nIf the current project contains multiple pages, you can generate a separate URL\nfor each page based on the routes parameter.\n\nFor example, when the project contains two pages, index and detail, the content\nof the routes would be:\n\n\n\n\nDisable Output#\n\nSetting server.printUrls to false will prevent Rsbuild from printing the server\nURLs.\n\n\n\n\nHTML Disabled#\n\nIf tools.htmlPlugin is set to false, Rsbuild will not generate HTML files or\noutput the server URL.\n\nHowever, you can still print the server URLs using the server.printUrls\nfunction, which has a higher priority.\n\n\n\nOutput:\n\n","routePath":"/config/server/print-urls","lang":"en","toc":[{"text":"Custom Logging","id":"custom-logging","depth":2,"charIndex":173},{"text":"Modify URL","id":"modify-url","depth":3,"charIndex":294},{"text":"Fully Customizable","id":"fully-customizable","depth":3,"charIndex":436},{"text":"MPA Output","id":"mpa-output","depth":3,"charIndex":661},{"text":"Disable Output","id":"disable-output","depth":2,"charIndex":908},{"text":"HTML Disabled","id":"html-disabled","depth":3,"charIndex":1015}],"domain":"","frontmatter":{},"version":""},{"id":92,"title":"server.proxy","content":"#\n\n * Type: Record | Record | ProxyOptions[] | ProxyOptions\n * Default: undefined\n\nConfigure proxy rules for the dev server or preview server to proxy requests to\nthe specified service.\n\n\nExample#\n\n\nBasic Usage#\n\n\n\nA request to /api/users will now proxy the request to\nhttp://localhost:3000/api/users.\n\nYou can also proxy to an online domain name, such as:\n\n\n\n\nPath Rewrite#\n\nIf you don't want /api to be passed along, we need to rewrite the path:\n\n\n\n\nProxy WebSocket#\n\nIf you want to proxy WebSocket requests, you can enable it through set ws to\ntrue:\n\n\n\n\nOptions#\n\nThe Rsbuild server proxy makes use of the http-proxy-middleware package. Check\nout its documentation for more advanced usages.\n\nThe full type definition of Rsbuild server proxy is:\n\n\n\nIn addition to the http-proxy-middleware option, Rsbuild also support the bypass\nand context options.\n\n\nbypass#\n\nBypass the proxy based on the return value of a function.\n\n * Return null or undefined to continue processing the request with proxy.\n * Return true to continue processing the request without proxy.\n * Return false to produce a 404 error for the request.\n * Return a path to serve from, instead of continuing to proxy the request.\n\n\n\n\ncontext#\n\nUsed to proxy multiple specified paths to the same target.\n\n","routePath":"/config/server/proxy","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":187},{"text":"Basic Usage","id":"basic-usage","depth":3,"charIndex":198},{"text":"Path Rewrite","id":"path-rewrite","depth":3,"charIndex":360},{"text":"Proxy WebSocket","id":"proxy-websocket","depth":3,"charIndex":451},{"text":"Options","id":"options","depth":2,"charIndex":556},{"text":"bypass","id":"bypass","depth":3,"charIndex":854},{"text":"context","id":"context","depth":3,"charIndex":1198}],"domain":"","frontmatter":{},"version":""},{"id":93,"title":"server.publicDir","content":"#\n\n * Type:\n\n\n\n * Default:\n\n\n\nBy default, Rsbuild will use the public directory as the directory for serving\npublic assets, files in this directory will be served at server.base path\n(default /).\n\n> Related document: Public Folder.\n\n\nOptions#\n\n\nname#\n\n * Type: string\n * Default: 'public'\n\nThe name of the public directory. The value of name can be set to a relative\npath or an absolute path. Relative path will be resolved relative to the project\nroot directory.\n\n * Relative path example:\n\n\n\n * Absolute path example:\n\n\n\n\ncopyOnBuild#\n\n * Type: boolean\n * Default: true\n\nWhether to copy files from the publicDir to the distDir on production build.\n\nFor example, disable copyOnBuild:\n\n\n\nNote that setting the value of copyOnBuild to false means that when you run\nrsbuild preview for a production preview, you will not be able to access the\ncorresponding static resources.\n\nTIP\n\nDuring dev builds, if you need to copy some static assets to the output\ndirectory, you can use the output.copy option instead.\n\n\nwatch#\n\n * Type: boolean\n * Default: false\n\nWhether to watch the public directory and reload the page when the files change.\n\nSetting watch to true allows the dev server to watch changes to files in the\nspecified public directory and reload the page when the files are changed:\n\n\n\nNote that the watch option is only valid in development mode. If dev.hmr and\ndev.liveReload are both set to false, watch will be ignored.\n\n\nMultiple Directories#\n\nThe server.publicDir can be configured as an array, allowing you to serve\nmultiple directories as static assets folders:\n\n\n\n\nDisabled#\n\nYou can set publicDir to false to disable the static assets serving:\n\n","routePath":"/config/server/public-dir","lang":"en","toc":[{"text":"Options","id":"options","depth":2,"charIndex":233},{"text":"name","id":"name","depth":3,"charIndex":244},{"text":"copyOnBuild","id":"copyonbuild","depth":3,"charIndex":523},{"text":"watch","id":"watch","depth":3,"charIndex":1007},{"text":"Multiple Directories","id":"multiple-directories","depth":2,"charIndex":1428},{"text":"Disabled","id":"disabled","depth":2,"charIndex":1576}],"domain":"","frontmatter":{},"version":""},{"id":94,"title":"server.strictPort","content":"#\n\n * Type: boolean\n * Default: false\n\nWhen a port is occupied, Rsbuild will automatically increment the port number\nuntil an available port is found.\n\nSet strictPort to true and Rsbuild will throw an exception when the port is\noccupied.\n\n\nExample#\n\n","routePath":"/config/server/strict-port","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":239}],"domain":"","frontmatter":{},"version":""},{"id":95,"title":"source.assetsInclude","content":"#\n\n * Type: Rspack.RuleSetCondition\n * Default: undefined\n * Version: >= 1.0.18\n\nInclude additional files that should be treated as static assets.\n\nBy default, Rsbuild treats common image, font, audio, and video files as static\nassets. Through the source.assetsInclude config, you can specify additional file\ntypes that should be treated as static assets. These added static assets are\nprocessed using the same rules as the built-in supported static assets, see\nStatic Assets.\n\nThe value of source.assetsInclude is the same as the test option in Rspack\nloader. It can be a regular expression, string, array, logical condition, etc.\nFor more details, see Rspack RuleSetCondition.\n\n\nExample#\n\n * Treating .json5 files as static assets:\n\n\n\n * Treating multiple file types as static assets:\n\n\n\n * Treating specific files as static assets:\n\n","routePath":"/config/source/assets-include","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":680}],"domain":"","frontmatter":{},"version":""},{"id":96,"title":"source.decorators","content":"#\n\n * Type:\n\n\n\nUsed to configure the decorators syntax.\n\n\ndecorators.version#\n\n * Type: 'legacy' | '2022-03'\n * Default: '2022-03'\n\nSpecify the decorator syntax version to be used.\n\n\n2022-03#\n\n2022-03 corresponds to the Stage 3 decorator proposal, equivalent to the\ndecorator syntax supported by TypeScript 5.0 by default.\n\n\n\nReference documentation:\n\n * JavaScript meta programming with the 2022-03 decorators API\n * TypeScript 5.0 Decorators\n\n\nlegacy#\n\nEquivalent to TypeScript's experimentalDecorators: true.\n\n\n\nReference documentation:\n\n * A Complete Guide to TypeScript Decorators\n * TypeScript Decorators","routePath":"/config/source/decorators","lang":"en","toc":[{"text":"decorators.version","id":"decoratorsversion","depth":2,"charIndex":57},{"text":"2022-03","id":"2022-03","depth":3,"charIndex":182},{"text":"legacy","id":"legacy","depth":3,"charIndex":445}],"domain":"","frontmatter":{},"version":""},{"id":97,"title":"source.define","content":"#\n\n * Type: Record\n * Default: {}\n\nReplaces variables in your code with other values or expressions at compile\ntime. This can be useful for allowing different behavior between development\nbuilds and production builds.\n\nEach key passed into options is an identifier or multiple identifiers joined\nwith ..\n\n * If the value is a string it will be used as a code fragment.\n * If the value isn't a string, it will be stringified (including functions).\n * If the value is an object all keys are defined the same way.\n * If you prefix typeof to the key, it's only defined for typeof calls.\n\n> For more usage, please refer to Using define and Rspack - DefinePlugin.\n\n\nExample#\n\n\n\nExpressions will be replaced with the corresponding code fragments:\n\n","routePath":"/config/source/define","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":659}],"domain":"","frontmatter":{},"version":""},{"id":98,"title":"source.entry","content":"#\n\n * Type:\n\n\n\n * Default:\n\n\n\nUsed to set the entry modules for building.\n\nThe usage of source.entry is similar to the entry option in Rspack. The main\ndifference is that Rsbuild will register html-rspack-plugin for each entry in\nsource.entry to generate the corresponding HTML files.\n\n * Example:\n\n\n\nThe generated directory structure is as follows:\n\n\n\nIf you do not need to generate HTML files, you can set tools.htmlPlugin to false\nto disable this behavior.\n\n\nDescription Object#\n\nsource.entry also supports Rspack's entry description object. For example:\n\n\n\nRsbuild has added an html attribute for the description object, which is used to\ncontrol whether an HTML file is generated.\n\nFor example, the bar entry does not generate an HTML file:\n\n\n\n> For the complete usage of the description object, please refer to Rspack -\n> Entry Description Object.\n\n\nSet by environment#\n\nWhen you build for multiple environments, you can set different entry for each\nenvironment:\n\nFor example, set different entry for web and node environments:\n\n","routePath":"/config/source/entry","lang":"en","toc":[{"text":"Description Object","id":"description-object","depth":2,"charIndex":461},{"text":"Set by environment","id":"set-by-environment","depth":2,"charIndex":854}],"domain":"","frontmatter":{},"version":""},{"id":99,"title":"source.exclude","content":"#\n\n * Type: Rspack.RuleSetCondition\n * Default: []\n\nSpecifies JavaScript/TypeScript files that do not need to be compiled. The usage\nis consistent with Rule.exclude in Rspack, which supports passing in strings or\nregular expressions to match the module path.\n\nFor example:\n\n\n\n> Refer to source.include to learn more.\n\n\nNot compiled vs Not bundled#\n\nsource.exclude is used to specify JavaScript/TypeScript files that do not need\nto be compiled. This means that these files will not be translated by SWC or\nBabel, but they will still be bundled into the outputs (if referenced).\n\nIf you want certain files to be ignored and not bundled into the outputs, you\ncan use Rspack's IgnorePlugin.\n\n","routePath":"/config/source/exclude","lang":"en","toc":[{"text":"Not compiled vs Not bundled","id":"not-compiled-vs-not-bundled","depth":3,"charIndex":318}],"domain":"","frontmatter":{},"version":""},{"id":100,"title":"source.include","content":"#\n\n * Type: Rspack.RuleSetCondition\n * Default:\n\n\n\nThe source.include is used to specify additional JavaScript files that need to\nbe compiled.\n\nTo avoid redundant compilation, by default, Rsbuild only compiles JavaScript\nfiles in the current directory and TypeScript and JSX files in all directories.\nIt does not compile JavaScript files under node_modules.\n\nThrough the source.include config, you can specify directories or modules that\nneed to be compiled by Rsbuild. The usage of source.include is consistent with\nRule.include in Rspack, which supports passing in strings or regular expressions\nto match the module path.\n\nFor example:\n\n\n\n\nCompile npm Packages#\n\nA typical usage scenario is to compile npm packages under node_modules, because\nsome third-party dependencies have ESNext syntax, which may cause them to fail\nto run on low-version browsers. You can solve the problem by using this config\nto specify the dependencies that need to be compiled.\n\nTIP\n\nIf you are unsure which third-party dependencies in node_modules contain ESNext\nsyntax, you can use the @rsbuild/plugin-check-syntax for checking. The plugin\ncan help you find the modules that contain ESNext syntax.\n\nTake query-string as an example, you can add the following config:\n\n\n\nThe above two methods match the absolute paths of files using \"path prefixes\"\nand \"regular expressions\" respectively. It is worth noting that all referenced\nmodules in the project will be matched. Therefore, you should avoid using overly\nloose values for matching to prevent compilation performance issues or\ncompilation errors.\n\nTIP\n\nIn the regular expression example above, we use [\\\\/] to match the path\nseparator because different operating systems use different path separators.\nUsing [\\\\/] ensures that the paths can be matched in macOS, Linux and Windows.\n\n\nCompile Sub Dependencies#\n\nWhen you compile an npm package via source.include, Rsbuild will only compile\nthe matching module by default, not the Sub Dependencies of the module.\n\nTake query-string for example, it depends on the decode-uri-component package,\nwhich also has ESNext code, so you need to add the decode-uri-component package\nto source.include as well.\n\n\n\n\nCompile Libraries in Monorepo#\n\nWhen developing in Monorepo, if you need to refer to the source code of other\nlibraries in Monorepo, you can add the corresponding library to source.include:\n\n\n\n\nMatching Symlink#\n\nIf you match a module that is symlinked to the current project, then you need to\nmatch the real path of the module, not the symlinked path.\n\nFor example, if you symlink the packages/foo path in Monorepo to the\nnode_modules/foo path of the current project, you need to match the packages/foo\npath, not the node_modules/foo path.\n\n\nCompile node_modules#\n\nIn general, source.include should not be used to compile the entire node_modules\ndirectory. For example, the following configuration is not recommended:\n\n\n\nThis is because most of the npm packages in node_modules are already compiled,\nand it is usually unnecessary to recompile them. Compiling the entire\nnode_modules will increase compilation time and may cause unexpected errors in\ncertain npm packages, such as core-js, which may result in runtime exceptions\nafter compilation.\n\nIf you are willing to accept the increase in compilation time, you can use the\nfollowing configuration to compile all JavaScript files but exclude `core-js':\n\n","routePath":"/config/source/include","lang":"en","toc":[{"text":"Compile npm Packages","id":"compile-npm-packages","depth":2,"charIndex":641},{"text":"Compile Sub Dependencies","id":"compile-sub-dependencies","depth":2,"charIndex":1814},{"text":"Compile Libraries in Monorepo","id":"compile-libraries-in-monorepo","depth":2,"charIndex":2182},{"text":"Matching Symlink","id":"matching-symlink","depth":2,"charIndex":2376},{"text":"Compile node_modules","id":"compile-node_modules","depth":2,"charIndex":2725}],"domain":"","frontmatter":{},"version":""},{"id":101,"title":"source.preEntry","content":"#\n\n * Type: string | string[]\n * Default: undefined\n\nAdd a script before the entry file of each page. This script will be executed\nbefore the page code. It can be used to execute global logics, such as injecting\npolyfills, setting global styles, etc.\n\n\nAdd a Single Script#\n\nFirst create a src/polyfill.ts file:\n\n\n\nThen configure src/polyfill.ts to source.preEntry:\n\n\n\nRe-run the compilation and visit any page, you can see that the code in\nsrc/polyfill.ts has been executed, and the I am a polyfill is logged in the\nconsole.\n\n\nAdd Global Style#\n\nYou can also configure the global style through source.preEntry, this CSS code\nwill be loaded earlier than the page code, such as introducing a normalize.css\nfile:\n\n\n\n\nAdd Multiple Scripts#\n\nYou can add multiple scripts by setting preEntry to an array, and they will be\nexecuted in array order:\n\n","routePath":"/config/source/pre-entry","lang":"en","toc":[{"text":"Add a Single Script","id":"add-a-single-script","depth":2,"charIndex":252},{"text":"Add Global Style","id":"add-global-style","depth":2,"charIndex":527},{"text":"Add Multiple Scripts","id":"add-multiple-scripts","depth":2,"charIndex":714}],"domain":"","frontmatter":{},"version":""},{"id":102,"title":"source.transformImport","content":"#\n\n * Type:\n\n\n\n * Default: undefined\n\nTransform the import path, which can be used to modularly import the subpath of\nthird-party packages. The functionality is similar to babel-plugin-import.\n\n\nExample#\n\n\nImport antd on demand#\n\nWhen using the antd component library (versions below v5), you can import\ncomponents on demand with the following config:\n\n\n\nThe source code is:\n\n\n\nWill be transformed into:\n\n\n\n\nImport lodash on demand#\n\nWhen using lodash, you can automatically refer to the subpath through\ntransformImport to reduce bundle size.\n\n\n\nThe source code is:\n\n\n\nWill be transformed to:\n\n\n\nPlease avoid the following usage, otherwise all of lodash's code will be\nimported:\n\n\n\n\nScope#\n\ntransformImport is only applicable to modules compiled by Rsbuild. Note that\nRsbuild does not compile JavaScript files in the node_modules by default. This\nmeans that the code in the node_modules directory will not be processed by\ntransformImport.\n\nIf you want to process the code in node_modules through transformImport, please\nadd the relevant modules to the source.include config.\n\n\n\n\nOptions#\n\n\nlibraryName#\n\n * Type: string\n\nThe original import path that needs to be transformed.\n\n\nlibraryDirectory#\n\n * Type: string\n * Default: 'lib'\n\nUsed to splice the transformed path, the splicing rule is\n${libraryName}/${libraryDirectory}/${member}, where member is the imported\nmember.\n\nExample:\n\n\n\nOut:\n\n\n\n\nstyle#\n\n * Type: boolean\n * Default: undefined\n\nDetermines whether to import related styles. If it is true, the path\n${libraryName}/${libraryDirectory}/${member}/style will be imported. If it is\nfalse or undefined, the style will not be imported.\n\nWhen it is set to true:\n\n\n\nOut:\n\n\n\n\nstyleLibraryDirectory#\n\n * Type: string\n * Default: undefined\n\nThis configuration is used to splice the import path when importing styles. If\nthis configuration is specified, the style configuration option will be ignored.\nThe spliced import path is ${libraryName}/${styleLibraryDirectory}/${member}.\n\nWhen it is set to styles:\n\n\n\nOut:\n\n\n\n\ncamelToDashComponentName#\n\n * Type: boolean\n * Default: true\n\nWhether to convert camelCase imports to kebab-case.\n\nExample:\n\n\n\nOut:\n\n\n\n\ntransformToDefaultImport#\n\n * Type: boolean\n * Default: true\n\nWhether to convert import statements to default imports.\n\nExample:\n\n\n\nOut:\n\n\n\n\ncustomName#\n\n * Type: string\n * Default: undefined\n\nCustomize the transformed path.\n\nFor example, the following config will transform into .\n\n\n\nIn addition, you can also declare the format of the path after transformation,\nsuch as setting it to my-lib/{{ camelCase member }} to convert member into camel\ncase.\n\nThe following formats are supported:\n\n * kebabCase: lowercase letters, words joined by hyphens. For example:\n   my-variable-name.\n * snakeCase: lowercase letters, words joined by underscores. For example:\n   my_variable_name.\n * camelCase: first letter lowercase, the first letter of each following word\n   uppercase. For example: myVariableName.\n * upperCase: uppercase letters, other characters unchanged. For example:\n   MY-VARIABLE-NAME.\n * lowerCase: lowercase letters, other characters unchanged. For example:\n   my-variable-name.\n\n\ncustomStyleName#\n\n * Type: string\n * Default: undefined\n\nCustomize the transformed style path, the usage is consistent with customName.\n\n\nFunction Type#\n\nThe transformImport can be a function, it will accept the previous value, and\nyou can modify it.\n\n\n\nYou can also return a new value as the final result in the function, which will\nreplace the previous value.\n\n","routePath":"/config/source/transform-import","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":194},{"text":"Import antd on demand","id":"import-antd-on-demand","depth":3,"charIndex":205},{"text":"Import lodash on demand","id":"import-lodash-on-demand","depth":3,"charIndex":407},{"text":"Scope","id":"scope","depth":2,"charIndex":682},{"text":"Options","id":"options","depth":2,"charIndex":1078},{"text":"libraryName","id":"libraryname","depth":3,"charIndex":1089},{"text":"libraryDirectory","id":"librarydirectory","depth":3,"charIndex":1177},{"text":"style","id":"style","depth":3,"charIndex":1394},{"text":"styleLibraryDirectory","id":"stylelibrarydirectory","depth":3,"charIndex":1678},{"text":"camelToDashComponentName","id":"cameltodashcomponentname","depth":3,"charIndex":2018},{"text":"transformToDefaultImport","id":"transformtodefaultimport","depth":3,"charIndex":2154},{"text":"customName","id":"customname","depth":3,"charIndex":2295},{"text":"customStyleName","id":"customstylename","depth":3,"charIndex":3145},{"text":"Function Type","id":"function-type","depth":2,"charIndex":3283}],"domain":"","frontmatter":{},"version":""},{"id":103,"title":"source.tsconfigPath","content":"#\n\n * Type: string\n * Default: 'tsconfig.json'\n\nConfigure a custom tsconfig.json file path to use, can be a relative or absolute\npath.\n\n\nPurpose#\n\nThe tsconfig.json configuration file affects the following behaviors of Rsbuild:\n\n * The paths field is used to configure Path Aliases.\n * Sets the scope and rules for the @rsbuild/plugin-type-check.\n\n\nExample#\n\nThe value of source.tsconfigPath can be set to a relative or an absolute path.\nRelative path will be resolved relative to the project root directory.\n\n * Relative path example:\n\n\n\n * Absolute path example:\n\n","routePath":"/config/source/tsconfig-path","lang":"en","toc":[{"text":"Purpose","id":"purpose","depth":2,"charIndex":136},{"text":"Example","id":"example","depth":2,"charIndex":348}],"domain":"","frontmatter":{},"version":""},{"id":104,"title":"tools.bundlerChain","content":"#\n\n * Type:\n\n\n\n * Default: undefined\n\nYou can use rspack-chain to modify the default Rspack config through\ntools.bundlerChain. Its value is a function that takes two arguments:\n\n * The first argument is a rspack-chain instance, which you can use to modify\n   the Rspack config.\n * The second argument is an utils object, including env, isProd, CHAIN_ID, etc.\n\n> tools.bundlerChain will be executed earlier than tools.rspack, so it will be\n> overridden by tools.rspack.\n\nTIP\n\nThe built-in Rspack config in Rsbuild may change with iterations, and these\nchanges won't be reflected in semver. Therefore, your custom config may become\ninvalid when you upgrade Rsbuild.\n\n\nExamples#\n\nPlease refer to: RspackChain examples.\n\n\nUtils#\n\n\nenv#\n\n * Type: 'development' | 'production' | 'test'\n\nThe env parameter can be used to determine whether the current environment is\ndevelopment, production or test. For example:\n\n\n\n\nisDev#\n\n * Type: boolean\n\nUsed to determine whether the current build is a development build, such as:\n\n\n\n\nisProd#\n\n * Type: boolean\n\nUsed to determine whether the current build is a production build, such as:\n\n\n\n\ntarget#\n\n * Type: 'web' | 'node' | 'web-worker'\n\nThe target parameter can be used to determine the build target environment. For\nexample:\n\n\n\n\nisServer#\n\n * Type: boolean\n\nDetermines whether the target environment is node, equivalent to target ===\n'node'.\n\n\n\n\nisWebWorker#\n\n * Type: boolean\n\nDetermines whether the target environment is web-worker, equivalent to target\n=== 'web-worker'.\n\n\n\n\nHtmlPlugin#\n\n * Type: typeof import('html-rspack-plugin')\n\nThe instance of html-rspack-plugin:\n\n\n\n\nCHAIN_ID#\n\nSome common Chain IDs are predefined in the Rsbuild, and you can use these IDs\nto locate the built-in Rule or Plugin.\n\nTIP\n\nPlease note that some of the rules or plugins listed below are not available by\ndefault. They will only be included in the Rspack or webpack configuration when\nyou enable specific options or register certain plugins.\n\nFor example, the RULE.STYLUS rule exists only when the Stylus plugin is\nregistered.\n\n\nCHAIN_ID.RULE#\n\nID            DESCRIPTION\nRULE.JS       Rule for js and ts\nRULE.SVG      Rule for svg\nRULE.CSS      Rule for css\nRULE.LESS     Rule for less\nRULE.SASS     Rule for sass\nRULE.YAML     Rule for yaml\nRULE.WASM     Rule for WASM\nRULE.FONT     Rule for font\nRULE.IMAGE    Rule for image\nRULE.MEDIA    Rule for media\nRULE.VUE      Rule for vue (requires Vue plugin)\nRULE.SVELTE   Rule for svelte (requires Svelte plugin)\nRULE.STYLUS   Rule for stylus (requires Stylus plugin)\n\n\nCHAIN_ID.ONE_OF#\n\nONE_OF.[ID] can match a certain type of rule in the rule array.\n\nID                  DESCRIPTION\nONE_OF.SVG_URL      Rules for SVG, output as a separate file\nONE_OF.SVG_INLINE   Rules for SVG, inlined into bundles as data URIs\nONE_OF.SVG_ASSETS   Rules for SVG, automatic choice between data URI and\n                    separate file\n\n\nCHAIN_ID.USE#\n\nUSE.[ID] can match a certain loader.\n\nID                DESCRIPTION\nUSE.SWC           correspond to builtin:swc-loader\nUSE.STYLE         correspond to style-loader\nUSE.POSTCSS       correspond to postcss-loader\nUSE.LESS          correspond to less-loader (requires Less plugin)\nUSE.SASS          correspond to sass-loader (requires Sass plugin)\nUSE.RESOLVE_URL   correspond to resolve-url-loader (requires Sass plugin)\nUSE.VUE           correspond to vue-loader (requires Vue plugin)\nUSE.SVGR          correspond to svgr-loader (requires Svgr plugin)\nUSE.BABEL         correspond to babel-loader (requires Babel plugin)\nUSE.SVELTE        correspond to svelte-loader (requires Svelte plugin)\nUSE.STYLUS        correspond to stylus-loader (requires Stylus plugin)\n\n\nCHAIN_ID.PLUGIN#\n\nPLUGIN.[ID] can match a certain Rspack or Webpack plugin.\n\nID                         DESCRIPTION\nPLUGIN.HTML                correspond to HtmlRspackPlugin, you need to concat the entry\n                           name when using: ${PLUGIN.HTML}-${entryName}\nPLUGIN.BUNDLE_ANALYZER     correspond to WebpackBundleAnalyzer\nPLUGIN.VUE_LOADER_PLUGIN   correspond to VueLoaderPlugin\n\n\nCHAIN_ID.MINIMIZER#\n\nMINIMIZER.[ID] can match a certain minimizer.\n\nID              DESCRIPTION\nMINIMIZER.JS    correspond to SwcJsMinimizerRspackPlugin\nMINIMIZER.CSS   correspond to LightningCssMinimizerRspackPlugin","routePath":"/config/tools/bundler-chain","lang":"en","toc":[{"text":"Examples","id":"examples","depth":2,"charIndex":665},{"text":"Utils","id":"utils","depth":2,"charIndex":717},{"text":"env","id":"env","depth":3,"charIndex":726},{"text":"isDev","id":"isdev","depth":3,"charIndex":908},{"text":"isProd","id":"isprod","depth":3,"charIndex":1015},{"text":"target","id":"target","depth":3,"charIndex":1122},{"text":"isServer","id":"isserver","depth":3,"charIndex":1264},{"text":"isWebWorker","id":"iswebworker","depth":3,"charIndex":1381},{"text":"HtmlPlugin","id":"htmlplugin","depth":3,"charIndex":1513},{"text":"CHAIN_ID","id":"chain_id","depth":2,"charIndex":1612},{"text":"CHAIN_ID.RULE","id":"chain_idrule","depth":3,"charIndex":2051},{"text":"CHAIN_ID.ONE_OF","id":"chain_idone_of","depth":3,"charIndex":2539},{"text":"CHAIN_ID.USE","id":"chain_iduse","depth":3,"charIndex":2893},{"text":"CHAIN_ID.PLUGIN","id":"chain_idplugin","depth":3,"charIndex":3672},{"text":"CHAIN_ID.MINIMIZER","id":"chain_idminimizer","depth":3,"charIndex":4070}],"domain":"","frontmatter":{},"version":""},{"id":105,"title":"tools.cssExtract","content":"#\n\n * Type:\n\n\n\n * Default:\n\n\n\n * Version: >= 0.7.0\n\nRsbuild uses the CssExtractRspackPlugin plugin by default to extract CSS into\nseparate files.\n\nThe options for CssExtractRspackPlugin can be changed through tools.cssExtract.\n\n\npluginOptions#\n\n * Type: CssExtractRspackPluginOptions\n * Example:\n\n\n\n\nloaderOptions#\n\n * Type: CssExtractRspackLoaderOptions\n * Example:\n\n\n\n> Please refer to the CssExtractRspackPlugin plugin documentation to learn about\n> all available options.","routePath":"/config/tools/css-extract","lang":"en","toc":[{"text":"pluginOptions","id":"pluginoptions","depth":2,"charIndex":228},{"text":"loaderOptions","id":"loaderoptions","depth":2,"charIndex":299}],"domain":"","frontmatter":{},"version":""},{"id":106,"title":"tools.cssLoader","content":"#\n\n * Type: Object | Function\n\n\n\nRsbuild uses css-loader by default to handle CSS resources. You can modify the\noptions of css-loader through tools.cssLoader.\n\nTIP\n\nIf you need to modify the options related to CSS Modules, it is recommended to\nuse the output.cssModules config first.\n\n\nObject Type#\n\nWhen this value is an Object, it is merged with the default config via deep\nmerge. For example:\n\n\n\n\nFunction Type#\n\nWhen the value is a Function, the default config is passed in as the first\nparameter. You can modify the config object directly, or return an object as the\nfinal config. For example:\n\n","routePath":"/config/tools/css-loader","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":3,"charIndex":285},{"text":"Function Type","id":"function-type","depth":3,"charIndex":399}],"domain":"","frontmatter":{},"version":""},{"id":107,"title":"tools.htmlPlugin","content":"#\n\n * Type: boolean | Object | Function\n * Default:\n\n\n\nThe configs of html-rspack-plugin can be modified through tools.htmlPlugin.\n\nRsbuild internally implements HTML-related features based on html-rspack-plugin.\nIt is a fork of html-webpack-plugin, with the same features and options.\n\nTIP\n\nIf you need to modify options such as title, template, templateParameters, meta,\nit is recommended to use the corresponding HTML configurations provided by\nRsbuild first, such as html.title, html .template etc.\n\nThis is because Rsbuild provides some internal optimization processing for these\nHTML configurations. For example, if the HTML template used by the current\nproject already contains the </code> tag, then <code>html.title</code> will not\ntake effect. </p></div></div> <h2 id=\"object-type\">Object Type<a\naria-hidden=\"true\" href=\"#object-type\">#</a></h2> <p>When\n<code>tools.htmlPlugin</code> is <code>Object</code> type, the value will be\nmerged with the default config via <code>Object.assign</code>.</p>\n<pre><code>export default { tools: { htmlPlugin: { scriptLoading: 'blocking', },\n}, }; </code></pre> <h2 id=\"function-type\">Function Type<a aria-hidden=\"true\"\nhref=\"#function-type\">#</a></h2> <p>When <code>tools.htmlPlugin</code> is a\nFunction:</p> <ul> <li>The first parameter is the default config, which can be\nmodified directly.</li> <li>The second parameter is also an object, containing\nthe entry name and the entry value.</li> <li>The Function can return a new\nobject as the final config.</li> </ul> <pre><code>export default { tools: {\nhtmlPlugin(config, { entryName, entryValue }) { if (entryName === 'main') {\nconfig.scriptLoading = 'blocking'; } }, }, }; </code></pre> <h2\nid=\"disable-html\">Disable HTML<a aria-hidden=\"true\"\nhref=\"#disable-html\">#</a></h2> <p>Setting <code>tools.htmlPlugin</code> to\n<code>false</code> can disable the built-in <code>html-rspack-plugin</code> in\nRsbuild, and no HTML files will be generated.</p> <pre><code>export default {\ntools: { htmlPlugin: false, }, }; </code></pre> <h2 id=\"example\">Example<a\naria-hidden=\"true\" href=\"#example\">#</a></h2> <h3\nid=\"modify-html-file-name\">Modify HTML File Name<a aria-hidden=\"true\"\nhref=\"#modify-html-file-name\">#</a></h3> <p>The <code>filename</code> option can\nbe used to modify the file name of the HTML output.</p> <p>For example, in\nproduction mode, a <code>hash</code> can be added to the file name:</p>\n<pre><code>export default { tools: { htmlPlugin(config, { entryName }) { if\n(process.env.NODE_ENV === 'production') { config.filename =\n`${entryName}.[contenthash:8].html`; } }, }, }; </code></pre> <h2\nid=\"html-minification\">HTML Minification<a aria-hidden=\"true\"\nhref=\"#html-minification\">#</a></h2> <p>Rsbuild currently does not minify HTML\nfiles. If you need to minify HTML files, you can use the <a\nhref=\"https://github.com/rspack-contrib/rsbuild-plugin-html-minifier-terser\"\ntarget=\"_blank\" rel=\"noopener noreferrer\">rsbuild-plugin-html-minifier-terser\nplugin</a>.</p>","routePath":"/config/tools/html-plugin","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":2,"charIndex":-1},{"text":"Function Type","id":"function-type","depth":2,"charIndex":-1},{"text":"Disable HTML","id":"disable-html","depth":2,"charIndex":-1},{"text":"Example","id":"example","depth":2,"charIndex":-1},{"text":"Modify HTML File Name","id":"modify-html-file-name","depth":3,"charIndex":-1},{"text":"HTML Minification","id":"html-minification","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":108,"title":"tools.lightningcssLoader","content":"#\n\n * Type: Rspack.LightningcssLoaderOptions | Function | boolean\n * Default:\n\n\n\n * Version: >= 1.0.0\n\nYou can set the options for builtin:lightningcss-loader through\ntools.lightningcssLoader.\n\n\nObject Type#\n\nWhen tools.lightningcssLoader is an object, it will be merged with the default\nconfiguration using Object.assign.\n\nFor example, you can disable the addition of vendor prefixes through\ntools.lightningcssLoader.exclude. In this case, you can use PostCSS's\nautoprefixer plugin to add vendor prefixes.\n\n\n\n\nFunction Type#\n\nWhen tools.lightningcssLoader is a function, the default options will be passed\nin as the first parameter. You can directly modify this object or return a new\nobject as the final options to be used. For example:\n\n\n\n\nDisable loader#\n\nSet tools.lightningcssLoader to false to disable the built-in\nlightningcss-loader in Rsbuild:\n\n\n\nTIP\n\nSet tools.lightningcssLoader to false only disables the lightningcss-loader. If\nyou need to disable the full functionality of Lightning CSS, please refer to\nDisabling Lightning CSS.","routePath":"/config/tools/lightningcss-loader","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":2,"charIndex":194},{"text":"Function Type","id":"function-type","depth":2,"charIndex":510},{"text":"Disable loader","id":"disable-loader","depth":2,"charIndex":742}],"domain":"","frontmatter":{},"version":""},{"id":109,"title":"tools.postcss","content":"#\n\n * Type: Object | Function\n * Default:\n\n\n\nRsbuild integrates PostCSS by default, you can configure postcss-loader through\ntools.postcss.\n\n\nFunction Type#\n\nWhen tools.postcss is a function, the default options will be passed in as the\nfirst parameter. You can directly modify this object or return a new object as\nthe final options to be used. For example:\n\nFor example, to add a PostCSS plugin, you can call the addPlugins utility\nfunction:\n\n\n\nIf you need to pass parameters to the PostCSS plugin, you can call the PostCSS\nplugin as a function:\n\n\n\nYou can also modify the default postcss-loader options:\n\n\n\ntools.postcss can return a config object and completely replace the default\nconfig:\n\n\n\n\nObject Type#\n\nWhen tools.postcss is an object, it will be merged with the default\nconfiguration using Object.assign. Note that Object.assign is a shallow copy and\nwill completely overwrite the built-in presets or plugins array, please use it\nwith caution.\n\n\n\n\nUtils#\n\n\naddPlugins#\n\n * Type: (plugins: PostCSSPlugin | PostCSSPlugin[]) => void\n\nFor adding additional PostCSS plugins, You can pass in a single PostCSS plugin,\nor an array of PostCSS plugins.\n\n\n\n\nPractice#\n\n\nMultiple PostCSS Options#\n\ntools.postcss.postcssOptions can be set to a function, which receives the\nRspack's loaderContext as a parameter. This allows you to use different PostCSS\noptions for different file paths.\n\nFor example, use postcss-plugin-a for file paths containing foo, and use\npostcss-plugin-b for other file paths:\n\n\n\nTIP\n\nIf the project contains a postcss.config.* config file, its content will be\nmerged with tools.postcss.postcssOptions, and the latter's priority is higher.\nThe plugins array will be merged into a single array.\n\n\nNotes#\n\n\nPostCSS Version#\n\nRsbuild uses the PostCSS v8. When you use third-party PostCSS plugins, please\npay attention to whether the PostCSS version is compatible. Some legacy plugins\nmay not work in PostCSS v8.\n\n\nPostCSS Config Loading#\n\nRsbuild uses postcss-load-config to load PostCSS config files and merge them\nwith the default config.\n\nRsbuild internally sets the postcss-loader's postcssOptions.config option to\nfalse to avoid loading config files repeatedly.","routePath":"/config/tools/postcss","lang":"en","toc":[{"text":"Function Type","id":"function-type","depth":2,"charIndex":141},{"text":"Object Type","id":"object-type","depth":2,"charIndex":697},{"text":"Utils","id":"utils","depth":2,"charIndex":957},{"text":"addPlugins","id":"addplugins","depth":3,"charIndex":966},{"text":"Practice","id":"practice","depth":2,"charIndex":1156},{"text":"Multiple PostCSS Options","id":"multiple-postcss-options","depth":3,"charIndex":1168},{"text":"Notes","id":"notes","depth":2,"charIndex":1715},{"text":"PostCSS Version","id":"postcss-version","depth":3,"charIndex":1724},{"text":"PostCSS Config Loading","id":"postcss-config-loading","depth":3,"charIndex":1930}],"domain":"","frontmatter":{},"version":""},{"id":110,"title":"tools.rspack","content":"#\n\n * Type: Rspack.Configuration | Function | undefined\n * Default: undefined\n\ntools.rspack is used to configure Rspack.\n\nTIP\n\nThe built-in Rspack config in Rsbuild may change with iterations, and these\nchanges won't be reflected in semver. Therefore, your custom config may become\ninvalid when you upgrade Rsbuild.\n\n\nObject Type#\n\ntools.rspack can be configured as an object to be deep merged with the built-in\nRspack configuration through webpack-merge.\n\nFor example, add resolve.alias configuration:\n\n\n\nWhen merging configurations, webpack-merge will automatically concatenate arrays\nsuch as plugins, module.rules, resolve.extensions, etc.\n\n\n\nIf you need to override a configuration rather than merge it with the default\nvalue, you can use the function type of tools.rspack.\n\n\nFunction Type#\n\ntools.rspack can be configured as a function. The first parameter of this\nfunction is the built-in Rspack configuration object, you can modify this\nobject, and then return it. For example:\n\n\n\nTIP\n\nThe object returned by the tools.rspack function is used directly as the final\nRspack configuration and is not merged with the built-in Rspack configuration.\n\ntools.rspack can also be an async function:\n\n\n\n\nUtils#\n\nThe second parameter of this function is an object, which contains some utility\nfunctions and properties, as follows:\n\n\nenv#\n\n * Type: 'development' | 'production' | 'test'\n\nThe env parameter can be used to determine whether the current environment is\ndevelopment, production or test. For example:\n\n\n\n\nisDev#\n\n * Type: boolean\n\nUsed to determine whether the current build is a development build, such as:\n\n\n\n\nisProd#\n\n * Type: boolean\n\nUsed to determine whether the current build is a production build, such as:\n\n\n\n\ntarget#\n\n * Type: 'web' | 'node' | 'web-worker'\n\nThe target parameter can be used to determine the build target environment. For\nexample:\n\n\n\n\nisServer#\n\n * Type: boolean\n\nDetermines whether the target environment is node, equivalent to target ===\n'node'.\n\n\n\n\nisWebWorker#\n\n * Type: boolean\n\nDetermines whether the target environment is web-worker, equivalent to target\n=== 'web-worker'.\n\n\n\n\nrspack#\n\n * Type: Rspack\n\nThe Rspack instance. For example:\n\n\n\n\nHtmlPlugin#\n\n * Type: typeof import('html-rspack-plugin')\n\nThe instance of html-rspack-plugin:\n\n\n\n\naddRules#\n\n * Type: (rules: RuleSetRule | RuleSetRule[]) => void\n\nAdd additional Rspack rules to the head of the internal Rspack module rules\narray.\n\nIt should be noted that Rspack loaders will be executed in right-to-left order.\nIf you want the loader you added to be executed before other loaders (Normal\nPhase), you should use appendRules to add the rule to the end.\n\nFor example:\n\n\n\n\nappendRules#\n\n * Type: (rules: RuleSetRule | RuleSetRule[]) => void\n\nAdd additional Rspack rules to the end of the internal Rspack module rules\narray.\n\nFor example:\n\n\n\n\nprependPlugins#\n\n * Type: (plugins: BundlerPluginInstance | BundlerPluginInstance[]) => void\n\nAdd additional plugins to the head of the internal Rspack plugins array, and the\nplugin will be executed first.\n\n\n\n\nappendPlugins#\n\n * Type: (plugins: BundlerPluginInstance | BundlerPluginInstance[]) => void\n\nAdd additional plugins at the end of the internal Rspack plugins array, the\nplugin will be executed last.\n\n\n\n\nremovePlugin#\n\n * Type: (name: string) => void\n\nRemove the internal Rspack plugin, the parameter is the constructor.name of the\nplugin.\n\nFor example, remove the internal webpack-bundle-analyzer:\n\n\n\n\nmergeConfig#\n\n * Type: (...configs:Rspack.Configuration[]) =>Rspack.Configuration\n\nUsed to merge multiple Rspack configs, same as webpack-merge.\n\n\n\nTIP\n\nThe mergeConfig method will create a new config object without modifying the\noriginal config object, so you need to return the result of mergeConfig.","routePath":"/config/tools/rspack","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":2,"charIndex":317},{"text":"Function Type","id":"function-type","depth":2,"charIndex":779},{"text":"Utils","id":"utils","depth":2,"charIndex":1199},{"text":"env","id":"env","depth":3,"charIndex":1327},{"text":"isDev","id":"isdev","depth":3,"charIndex":1509},{"text":"isProd","id":"isprod","depth":3,"charIndex":1616},{"text":"target","id":"target","depth":3,"charIndex":1723},{"text":"isServer","id":"isserver","depth":3,"charIndex":1865},{"text":"isWebWorker","id":"iswebworker","depth":3,"charIndex":1982},{"text":"rspack","id":"rspack","depth":3,"charIndex":2114},{"text":"HtmlPlugin","id":"htmlplugin","depth":3,"charIndex":2178},{"text":"addRules","id":"addrules","depth":3,"charIndex":2277},{"text":"appendRules","id":"appendrules","depth":3,"charIndex":2665},{"text":"prependPlugins","id":"prependplugins","depth":3,"charIndex":2834},{"text":"appendPlugins","id":"appendplugins","depth":3,"charIndex":3044},{"text":"removePlugin","id":"removeplugin","depth":3,"charIndex":3247},{"text":"mergeConfig","id":"mergeconfig","depth":3,"charIndex":3446}],"domain":"","frontmatter":{},"version":""},{"id":111,"title":"tools.styleLoader","content":"#\n\n * Type: Object | Function\n * Default: {}\n\nThe config of style-loader can be set through tools.styleLoader.\n\nIt is worth noting that Rsbuild does not enable style-loader by default. You can\nuse output.injectStyles config to enable it.\n\n\nObject Type#\n\nWhen tools.styleLoader is an object, it will be merged with the default\nconfiguration using Object.assign.\n\n\n\n\nFunction Type#\n\nWhen tools.styleLoader is a function, the default options will be passed in as\nthe first parameter. You can directly modify this object or return a new object\nas the final options to be used. For example:\n\n","routePath":"/config/tools/style-loader","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":2,"charIndex":239},{"text":"Function Type","id":"function-type","depth":2,"charIndex":364}],"domain":"","frontmatter":{},"version":""},{"id":112,"title":"tools.swc","content":"#\n\n * Type: Object | Function\n * Default:\n\n\n\nYou can set the options of builtin:swc-loader through tools.swc.\n\n> Refer to Configure SWC for more details.\n\n\nObject Type#\n\ntools.swc can be configured as an object, this object will be deeply merged with\nthe built-in builtin:swc-loader option.\n\n\n\n\nFunction Type#\n\ntools.swc can also be configured as a function, this function takes one\nargument, which is the built-in builtin:swc-loader option. You can modify this\nobject then return a new config. For example:\n\n\n\nTIP\n\nThe object returned by the tools.swc function will be used directly as the final\nbuiltin:swc-loader option, and will not be merged with the built-in\nbuiltin:swc-loader option anymore.","routePath":"/config/tools/swc","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":2,"charIndex":155},{"text":"Function Type","id":"function-type","depth":2,"charIndex":294}],"domain":"","frontmatter":{},"version":""},{"id":113,"title":"Path Aliases","content":"#\n\nPath aliases allow developers to define aliases for modules, making it easier to\nreference them in code. This can be useful when you want to use a short,\neasy-to-remember name for a module instead of a long, complex path.\n\nFor example, if you frequently reference the src/common/request.ts module in\nyour project, you can define an alias for it as @request and then use `` in your\ncode instead of writing the full relative path every time. This also allows you\nto move the module to a different location without needing to update all the\nimport statements in your code.\n\n\n\nIn Rsbuild, there are two ways to set up path aliases:\n\n * Use the paths configuration in tsconfig.json.\n * Use the resolve.alias configuration.\n\n\npaths in tsconfig.json#\n\nYou can configure aliases through the paths configuration in tsconfig.json,\nwhich is the recommended approach in TypeScript projects as it also resolves the\nTS type issues related to path aliases.\n\nFor example:\n\n\n\nAfter configuring, if you reference @common/Foo.tsx in your code, it will be\nmapped to the /src/common/Foo.tsx path.\n\nTIP\n\nYou can refer to the TypeScript - paths documentation for more details.\n\n\njsconfig.json#\n\nIn non-TypeScript projects, if you need to set path aliases through the paths\nfield in jsconfig.json, you can use the source.tsconfigPath option to set it.\n\nAfter adding the following configuration, Rsbuild will recognize the paths field\nin jsconfig.json.\n\n\n\n\nresolve.alias Configuration#\n\nRsbuild provides the resolve.alias configuration option, which corresponds to\nthe webpack/Rspack native resolve.alias configuration. You can configure this\noption using an object or a function.\n\n\nUse Cases#\n\nSince the paths configuration in tsconfig.json is written in a static JSON file,\nit lacks dynamism.\n\nThe resolve.alias configuration can address this limitation by allowing you to\ndynamically set the resolve.alias using JavaScript code, such as based on\nenvironment variables.\n\n\nObject Usage#\n\nYou can configure resolve.alias using an object, where the relative paths will\nbe automatically resolved to absolute paths.\n\nFor example:\n\n\n\nAfter configuring, if you reference @common/Foo.tsx in your code, it will be\nmapped to the /src/common/Foo.tsx path.\n\n\nFunction Usage#\n\nYou can also configure resolve.alias as a function, which receives the built-in\nalias object and allows you to modify it.\n\nFor example:\n\n\n\n\nPriority#\n\nThe paths configuration in tsconfig.json takes precedence over the resolve.alias\nconfiguration. When a path matches the rules defined in both paths and\nresolve.alias, the value defined in paths will be used.\n\nYou can adjust the priority of these two options using resolve.aliasStrategy.","routePath":"/guide/advanced/alias","lang":"en","toc":[{"text":"`paths` in tsconfig.json","id":"paths-in-tsconfigjson","depth":2,"charIndex":-1},{"text":"jsconfig.json","id":"jsconfigjson","depth":2,"charIndex":1158},{"text":"`resolve.alias` Configuration","id":"resolvealias-configuration","depth":2,"charIndex":-1},{"text":"Use Cases","id":"use-cases","depth":3,"charIndex":1660},{"text":"Object Usage","id":"object-usage","depth":3,"charIndex":1951},{"text":"Function Usage","id":"function-usage","depth":3,"charIndex":2226},{"text":"Priority","id":"priority","depth":3,"charIndex":2383}],"domain":"","frontmatter":{},"version":""},{"id":114,"title":"Browser Compatibility","content":"#\n\nThis chapter introduces how to use the capabilities provided by Rsbuild to deal\nwith browser compatibility issues.\n\n\nSet browserslist#\n\nBefore dealing with compatibility issues, you first need to clarify which\nbrowsers your project needs to support, and add the corresponding browserslist\nconfig.\n\n * If you haven't set browserslist yet, please read the Browserslist chapter\n   first.\n\n * If you have set a browserslist, Rsbuild will automatically compile according\n   to that scope, downgrade JavaScript syntax and CSS syntax, and inject the\n   required polyfill. In most cases, you can safely use modern ECMAScript\n   features without worrying about compatibility issues.\n\nAfter setting the browserslist, if you still encountered some compatibility\nissues, please continue reading below contents to find some solutions.\n\nWhat is polyfill\n\nA polyfill is a piece of code that provides the functionality of a newer feature\nto older browsers that do not support that feature natively. It is used to fill\nin the gaps in older browsers' implementations of web standards, allowing\ndevelopers to use newer features safely without having to worry about whether or\nnot they will work in older browsers. For example, if a browser does not support\nthe Array.map() method, a polyfill can be used to provide that functionality,\nallowing code that uses Array.prototype.flat() to work in that browser.\nPolyfills are commonly used to ensure that web applications can work on a wide\nrange of browsers, including older ones.\n\n\nBackground knowledge#\n\nBefore dealing with compatibility issues, it is recommended that you understand\nthe following background knowledge to better handle related issues.\n\n\nSyntax downgrade and API downgrade#\n\nWhen you use higher-version syntax and API in your project, in order to make the\ncompiled code run stably in lower-version browsers, we need to downgrade two\nparts: syntax downgrade and API downgrade.\n\nRsbuild downgrades syntax through syntax transpilation, and downgrades API\nthrough inject polyfill.\n\n> Grammar and API are not strongly bound. When browser manufacturers implement\n> the engine, they will support some syntax or implement some APIs in advance\n> according to the specification or their own needs. Therefore, browsers from\n> different manufacturers in the same period are not necessarily compatible with\n> syntax and API. So in general practice, syntax and API are handled in two\n> parts.\n\n\nSyntax transpilation#\n\nSyntax is a series of rules for how a programming language organizes code, and\ncode that does not follow these rules cannot be correctly recognized by the\nprogramming language's engine and therefore cannot be run. In JavaScript, the\nfollowing examples are syntax rules:\n\n * In const foo = 1, const means to declare an immutable constant.\n * In foo?.bar?.baz, ?. indicates optional chaining of access properties.\n * In async function () {}, async means to declare an asynchronous function.\n\nBecause the parsers of different browsers can support different syntax,\nespecially the old version of the browser engine can support less grammar, so\nwhen some syntax are run in the lower version of the browser engine, an error\nwill be reported at the stage of parsing the AST .\n\nFor example, the following code will report an error in IE browser or a lower\nversion of Node.js:\n\n\n\nWhen we run this code in a low version of Node.js, the following error message\nwill appear:\n\n\n\nIt is obvious from the error message that this is a syntax error. This means\nthat this syntax is not supported in lower versions of the engine.\n\nSyntax can not be supported by polyfill or shim. If you want to run some syntax\nthat it does not originally support in a low-version browser, you need to\ntranspile the code into a syntax that the low-version engine can support.\n\nTranspile the above code into the following code to run in lower version\nengines:\n\n\n\nAfter transpilation, the syntax of the code has changed, and some syntax that\nthe engine of the lower version cannot understand has been replaced with the\nsyntax it can understand, but the meaning of the code itself has not changed.\n\nIf the engine encounters an unrecognized syntax when converting to AST, it will\nreport a syntax error and abort the code execution process. In this case, if\nyour project does not use capabilities such as SSR or SSG, the page will be\nblank, making the page unavailable.\n\nIf the code is successfully converted to AST, the engine will convert the AST\ninto executable code and execute it normally inside the engine.\n\n\nAPI Polyfill#\n\nJavaScript is an interpreted scripting language, unlike compiled languages like\nRust. Rust will check the calls in the code during the compilation phase, and\nJavaScript does not know whether the function called by this line of code exists\nbefore it actually runs to a certain line of code, so some errors will only\nappear at runtime.\n\nFor example:\n\n\n\nThe above code has correct syntax and can be converted to AST correctly in the\nfirst stage of the engine runtime, but when it is actually running, because the\nmethod notExistedMethod does not exist on String.prototype, an error will be\nreported:\n\n\n\nWith the iteration of ECMAScript, some new methods will be added to be built-in\nobjects. For example, String.prototype.replaceAll was introduced in ES2021, then\nthe replaceAll method does not exist in the built-in object String.prototype of\nmost browser engines before 2021, so the following code works in the latest\nChrome, but not in earlier versions:\n\n\n\nIn order to solve the problem that String.prototype lacks replaceAll in older\nbrowsers, we can extend the String.prototype object in older browsers and add\nthe replaceAll method to it, for example:\n\n\n\n> This technique of providing implementations for legacy environments to align\n> new APIs is called polyfill.\n\n\nDowngrade method#\n\nIn Rsbuild, we divide code into three categories:\n\n * The first category is the source code in the current project.\n * The second category is third-party dependencies installed through npm.\n * The third category is the code out of the current project, such as the code\n   in other directories in the monorepo.\n\nBy default, Rsbuild will only compile and downgrade the first category, other\ncategories will not be downgraded by default.\n\nThere are several considerations for this approach:\n\n * Downgrading all third-party party dependencies will significantly reduce\n   build performance.\n * Most third-party dependencies have been downgraded before release, and the\n   second downgrade may introduce new problems.\n * The code out of the current project may have been compiled, or the\n   compilation config may be different.\n\n\nDowngrade the current project code#\n\nThe code of the current project will be downgraded by default, so you don't need\nto add additional config, just make sure that the browserslist config is set\ncorrectly.\n\n\nDowngrade third-party dependencies#\n\nWhen you find that a third-party dependencies causes compatibility issues, you\ncan add this dependency to Rsbuild's source.include config, Make Rsbuild do\nextra compilation for this dependency.\n\nTaking the npm package query-string as an example, you can add the following\nconfig:\n\n\n\nPlease refer to source.include document for detailed usage guide.\n\n\nDowngrade the code out of the current project#\n\nWhen you import the code out of the current project, if the code has not been\ncompiled, then you also need to configure source.include to it to compile.\n\nFor example, if you need to reference a module under the packages directory in\nthe monorepo, you can add the following config:\n\n\n\n\nPolyfill mode#\n\nRsbuild compiles JavaScript code using SWC and supports injecting polyfills such\nas core-js and @swc/helpers.\n\nIn different usage scenarios, you may need different polyfill solutions. Rsbuild\nprovides output.polyfill config to switch between different polyfill modes.\n\n\nDefault Behavior#\n\nRsbuild does not inject any polyfills by default:\n\n\n\n\nUsage mode#\n\nWhen you enable the usage mode, Rsbuild will analyze the source code in the\nproject and determine which polyfills need to be injected.\n\nFor example, the code uses the Map object:\n\n\n\nAfter compilation, only the polyfills for Map will be injected into this file:\n\n\n\nThe advantage of this method is that the size of the injected polyfill is\nsmaller, which is suitable for projects with higher requirements on bundle size.\nThe disadvantage is that polyfill may not be fully injected, because third-party\ndependencies will not be compiled and downgraded by default, so the polyfill\nrequired by third-party dependencies will not be analyzed. If you need to\nanalyze a third-party dependency, you also need to add it to source.include\nconfig.\n\nThe config of usage mode is:\n\n\n\n\nEntry mode#\n\nWhen using the entry mode, Rsbuild will analyze which core-js methods need to be\ninjected according to the browserslist set by the current project, and inject\nthem to the entry file of each page. The polyfill injected in this way is more\ncomprehensive, and there is no need to worry about the project source code and\nthird-party dependencies polyfill issues. However, because some unused polyfill\ncodes are included, the bundle size may increase.\n\nThe config of entry mode is:\n\n\n\n\nUA Polyfill#\n\nCloudflare provides a polyfill service that can automatically generate polyfill\nbundle based on the user's browser User-Agent.\n\nYou can use the html.tags config of Rsbuild to inject scripts. For example,\ninjecting a","routePath":"/guide/advanced/browser-compatibility","lang":"en","toc":[{"text":"Set browserslist","id":"set-browserslist","depth":2,"charIndex":119},{"text":"Background knowledge","id":"background-knowledge","depth":2,"charIndex":1512},{"text":"Syntax downgrade and API downgrade","id":"syntax-downgrade-and-api-downgrade","depth":3,"charIndex":1685},{"text":"Syntax transpilation","id":"syntax-transpilation","depth":3,"charIndex":2428},{"text":"API Polyfill","id":"api-polyfill","depth":3,"charIndex":4524},{"text":"Downgrade method","id":"downgrade-method","depth":2,"charIndex":5809},{"text":"Downgrade the current project code","id":"downgrade-the-current-project-code","depth":3,"charIndex":6653},{"text":"Downgrade third-party dependencies","id":"downgrade-third-party-dependencies","depth":3,"charIndex":6861},{"text":"Downgrade the code out of the current project","id":"downgrade-the-code-out-of-the-current-project","depth":3,"charIndex":7249},{"text":"Polyfill mode","id":"polyfill-mode","depth":2,"charIndex":7582},{"text":"Default Behavior","id":"default-behavior","depth":3,"charIndex":7868},{"text":"Usage mode","id":"usage-mode","depth":3,"charIndex":7941},{"text":"Entry mode","id":"entry-mode","depth":3,"charIndex":8723},{"text":"UA Polyfill","id":"ua-polyfill","depth":3,"charIndex":9217}],"domain":"","frontmatter":{},"version":""},{"id":115,"title":"Browserslist","content":"#\n\nRsbuild supports using Browserslist to specify which browsers should be\nsupported in your Web application.\n\n\nWhat is Browserslist#\n\nSince different browsers support ECMAScript and CSS differently, developers need\nto set the correct browser range for web applications.\n\nBrowserslist can specify which browsers your web application can run in, it\nprovides a configuration for specifying browsers range. Browserslist has become\na standard in the industry, it is used by libraries such as SWC, Lightning CSS,\nBabel, ESLint, PostCSS and webpack.\n\nWhen you specify a browser range through Browserslist, Rsbuild will compile\nJavaScript and CSS code to the specified syntax.\n\n\nPolyfill Injection#\n\nIf you enabled output.polyfill, Rsbuild will also inject the corresponding\npolyfill code based on browserslist. When you only need to support more modern\nbrowsers, the build process will introduce less compatibility code and\npolyfills, and the performance of the page will be better.\n\n\n\nFor example, when you need to be compatible with IE11 browser, Rsbuild will\ncompile the code to ES5 and inject the polyfill required by IE11 through\ncore-js.\n\n> Please refer to Browser Compatibility for more information.\n\n\nSet Browserslist#\n\nYou can set the Browserslist value in the package.json or .browserslistrc file\nin the root directory of the current project.\n\n\nExample#\n\nSet via browserslist in package.json:\n\n\n\nSet via a separate .browserslistrc file:\n\n\n\n\nEffective Scope#\n\nBy default, the .browserslistrc file only takes effect for browser-side bundles,\nincluding the web and web-worker target types.\n\nWhen you are building multiple targets at the same time, for example if the\ntargets contains both web and node, only the web bundles will be affected by the\n.browserslistrc file. If you want to make changes to the node bundles, you can\nuse the output.overrideBrowserslist configuration below.\n\n\nSet by Env#\n\nYou can set different browserslist based on NODE_ENV to specify different\nbrowser ranges for development and production.\n\nFor example, set values based on keys in the package.json:\n\n\n\nOr in .browserslistrc:\n\n\n\n\noverrideBrowserslist#\n\nIn addition to the above standard usage, Rsbuild also provides\noutput.overrideBrowserslist config, which can also set the value of\nBrowserslist.\n\noverrideBrowserslist can be set to an array, which is written in the same way as\nthe browserslistrc configuration, but has a higher priority than browserslistrc.\n\n\n\nIn most cases, it is recommended to use the .browserslistrc file rather than the\noverrideBrowserslist config. Because the .browserslistrc file is the official\nconfig file, it is more general and can be recognized by other libraries in the\ncommunity.\n\n\nCommonly used Browserslist#\n\nThe following are some commonly used Browserslist, you can choose according to\nyour project type.\n\n\nDesktop PC scenario#\n\nIn the desktop PC scenario, if you need to be compatible with IE 11 browsers,\nyou can set Browserslist to:\n\n\n\nThe above Browserslist will compile the code to the ES5 specification. For the\nspecific browser list, please check browserslist.dev.\n\nIf you don't need to be compatible with IE 11 browsers, you can adjust\nBrowserslist to get a more performant output, such as:\n\n * Set to browsers that supports native ES Modules (recommended):\n\n\n\n * Set to browsers that support ES6:\n\n\n\n\nMobile H5 scenario#\n\nThe mobile H5 scenario is mainly compatible with iOS and Android systems,\nusually we set Browserslist as:\n\n\n\nThe above Browserslist will compile the code to the ES5 specification, which is\ncompatible with most mobile scenarios on the market. For the detailed browsers\nlist, please check browserslist.dev.\n\n\n\nYou can also choose to use the ES6 specification in the H5 scene, which will\nmake the performance of the page better. The corresponding Browserslist is as\nfollows:\n\n\n\n\nDefault Browserslist#\n\nRsbuild will set different default values of Browserslist according to\noutput.target, but we recommend that you explicitly set Browserslist in your\nproject, which will make the compatible scope of the project more clear.\n\n\nWeb Target#\n\nThe default values of web target are as follows:\n\n\n\nUnder this browser range, JavaScript code will be compatible with browsers that\nsupport native ES Modules.\n\n\nNode Target#\n\nNode target will be compatible with Node.js 16.0 by default.\n\n\n\n\nWeb Worker Target#\n\nThe default Browserslist of the web worker target is consistent with the web\ntarget.\n\n\n\n\nService Worker Target#\n\nThe default Browserslist of the service worker target is consistent with the web\ntarget.\n\n\n\n\nQuery browser support#\n\nWhen developing, we need to know the browser support of certain features or\nAPIs. At this time, we can check on the caniuse website.\n\nFor example, we need to know the browser support of Promise, just enter Promise\nin caniuse, and you can see the following results:\n\n\n\nAs can be seen from the above table, Promise is natively supported in Chrome 33\nand iOS 8, but not in IE 11.","routePath":"/guide/advanced/browserslist","lang":"en","toc":[{"text":"What is Browserslist","id":"what-is-browserslist","depth":2,"charIndex":111},{"text":"Polyfill Injection","id":"polyfill-injection","depth":2,"charIndex":671},{"text":"Set Browserslist","id":"set-browserslist","depth":2,"charIndex":1202},{"text":"Example","id":"example","depth":3,"charIndex":1348},{"text":"Effective Scope","id":"effective-scope","depth":3,"charIndex":1444},{"text":"Set by Env","id":"set-by-env","depth":3,"charIndex":1886},{"text":"overrideBrowserslist","id":"overridebrowserslist","depth":3,"charIndex":2110},{"text":"Commonly used Browserslist","id":"commonly-used-browserslist","depth":2,"charIndex":2696},{"text":"Desktop PC scenario","id":"desktop-pc-scenario","depth":3,"charIndex":2825},{"text":"Mobile H5 scenario","id":"mobile-h5-scenario","depth":3,"charIndex":3328},{"text":"Default Browserslist","id":"default-browserslist","depth":2,"charIndex":3825},{"text":"Web Target","id":"web-target","depth":3,"charIndex":4071},{"text":"Node Target","id":"node-target","depth":3,"charIndex":4245},{"text":"Web Worker Target","id":"web-worker-target","depth":3,"charIndex":4324},{"text":"Service Worker Target","id":"service-worker-target","depth":3,"charIndex":4433},{"text":"Query browser support","id":"query-browser-support","depth":2,"charIndex":4550}],"domain":"","frontmatter":{},"version":""},{"id":116,"title":"Environment Variables","content":"#\n\nRsbuild supports injecting env variables or expressions into the code during\nbuild, which is helpful for distinguishing the running environment or replacing\nconstants.\n\nThis chapter introduces how to use env variables in Rsbuild.\n\n\nDefault Variables#\n\nRsbuild by default injects the some env variables into the code using\nsource.define. These will be replaced with specified values during the build:\n\nimport.meta.env contains these env variables:\n\n * import.meta.env.MODE\n * import.meta.env.DEV\n * import.meta.env.PROD\n * import.meta.env.BASE_URL\n * import.meta.env.ASSET_PREFIX\n\nprocess.env contains these env variables:\n\n * process.env.BASE_URL\n * process.env.ASSET_PREFIX\n * process.env.NODE_ENV: This variable is injected by Rspack. For details,\n   please refer to Rspack - optimization.nodeEnv)\n\n\nimport.meta.env.MODE#\n\nYou can use import.meta.env.MODE in the client code to read the value of the\nmode configuration.\n\n\n\nIn development mode, the above code will be compiled to:\n\n\n\nIn production mode, the above code will be compiled to:\n\n\n\nDuring code minification, if (false) { ... } will be recognized as invalid code\nand removed automatically.\n\n\nimport.meta.env.DEV#\n\nIf mode is 'development', the value is true; otherwise, it is false.\n\n\n\n\nimport.meta.env.PROD#\n\nIf mode is 'production', the value is true; otherwise, it is false.\n\n\n\n\nimport.meta.env.BASE_URL#\n\nYou can use import.meta.env.BASE_URL in the client code to access the server's\nbase path, which is determined by the server.base configuration, which is\nhelpful for referencing public folder assets in the code.\n\nFor example, we set the base path of the server to /foo through server.base\nconfiguration:\n\n\n\nThen, the access URL to the favicon.ico file in the public directory is\nhttp://localhost:3000/foo/favicon.ico. You can use import.meta.env.BASE_URL to\nconcatenate the URL in JS files:\n\n\n\n\nimport.meta.env.ASSET_PREFIX#\n\nYou can use import.meta.env.ASSET_PREFIX in the client code to access the URL\nprefix of static assets.\n\n * In development, it is equivalent to the value set by dev.assetPrefix.\n * In production, it is equivalent to the value set by output.assetPrefix.\n * Rsbuild will automatically remove the trailing slash from assetPrefix to make\n   string concatenation easier.\n\nFor example, we copy the static/icon.png image to the dist directory through\noutput.copy configuration:\n\n\n\nThen we can access the image URL in the client code:\n\n\n\nIn development mode, the above code will be compiled to:\n\n\n\nIn production mode, the above code will be compiled to:\n\n\n\n\nprocess.env.BASE_URL#\n\nRsbuild also allows using process.env.BASE_URL, which is an alias of\nimport.meta.env.BASE_URL.\n\nFor example, in the HTML template, you can use process.env.BASE_URL to\nconcatenate the URL:\n\n\n\n\nprocess.env.ASSET_PREFIX#\n\nRsbuild also allows using process.env.ASSET_PREFIX, which is an alias of\nimport.meta.env.ASSET_PREFIX.\n\nFor example, in the HTML template, you can use process.env.ASSET_PREFIX to\nconcatenate the URL:\n\n\n\n\nprocess.env.NODE_ENV#\n\nBy default, Rsbuild will automatically set the process.env.NODE_ENV environment\nvariable to 'development' in development mode and 'production' in production\nmode.\n\nYou can use process.env.NODE_ENV directly in Node.js and in the client code.\n\n\n\nIn development mode, the above code will be compiled to:\n\n\n\nIn production mode, the above code will be compiled to:\n\n\n\nDuring code minification, if (false) { ... } will be recognized as invalid code\nand removed automatically.\n\n\n.env File#\n\nWhen a .env file exists in the project root directory, Rsbuild CLI will\nautomatically use dotenv to load these env variables and add them to the current\nNode.js process. The Public Variables will be exposed in the client code.\n\nYou can access these env variables through import.meta.env.[name] or\nprocess.env.[name].\n\n\nFile Types#\n\nRsbuild supports reading the following types of env files:\n\nFILE NAME                DESCRIPTION\n.env                     Loaded by default in all scenarios.\n.env.local               Local usage of the .env file, should be added to .gitignore.\n.env.development         Read when process.env.NODE_ENV is 'development'.\n.env.production          Read when process.env.NODE_ENV is 'production'.\n.env.development.local   Local usage of the .env.development file, should be added to\n                         .gitignore.\n.env.production.local    Local usage of the .env.production file, should be added to\n                         .gitignore.\n\nIf several of the above files exist at the same time, they will all be loaded,\nwith the files listed at the bottom of the table having higher priority.\n\n\nEnv Mode#\n\nRsbuild also supports reading .env.[mode] and .env.[mode].local files. You can\nspecify the env mode using the --env-mode flag.\n\nFor example, set the env mode as test:\n\n\n\nRsbuild will then read the following files in sequence:\n\n * .env\n * .env.local\n * .env.test\n * .env.test.local\n\nTIP\n\nThe --env-mode option takes precedence over process.env.NODE_ENV.\n\nIt is recommended to use --env-mode to set the env mode, and not to modify\nprocess.env.NODE_ENV.\n\n\nEnv Directory#\n\nBy default, the .env file is located in the root directory of the project. You\ncan specify the env directory by using the --env-dir option in the CLI.\n\nFor example, to specify the env directory as config:\n\n\n\nIn this case, Rsbuild will read the ./config/.env and other env files.\n\n\nExample#\n\nFor example, create a .env file and add the following contents:\n\n\n\nThen in the rsbuild.config.ts file, you can access the above env variables using\nimport.meta.env.[name] or process.env.[name]:\n\n\n\nNow, create a .env.local file and add the following contents:\n\n\n\nThe value of BAR is overwritten to '2':\n\n\n\n\nManually Load Env#\n\nIf you are not using the Rsbuild CLI and are using the Rsbuild JavaScript API\ninstead, you will need to manually call the loadEnv method to read env variables\nand inject them into the code via the source.define config.\n\n\n\n\nPublic Variables#\n\nAll env variables starting with PUBLIC_ can be accessed in client code. For\nexample, if the following variables are defined:\n\n\n\nIn the client code, you can access these env variables through\nimport.meta.env.PUBLIC_* or process.env.PUBLIC_*. Rsbuild will match the\nidentifiers and replace them with the corresponding values.\n\n\n\nTIP\n * The content of public variables will be exposed to your client code, so\n   please avoid including sensitive information in public variables.\n * Public variables are replaced through source.define. Please read \"Using\n   define\" to understand the principles and notes of define.\n\n\nReplacement Scope#\n\nPublic variables will replace identifiers in the client code, with the\nreplacement scope including:\n\n * JavaScript files, and files that can be converted into JavaScript code, such\n   as .js, .ts, .tsx, etc.\n * HTML template files, for example:\n\n\n\nNote that public variables will not replace identifiers in the following files:\n\n * CSS files, such as .css, .scss, .less, etc.\n\n\nCustom Prefix#\n\nRsbuild provides the loadEnv method, which can inject env variables with any\nprefix into client code.\n\nFor example, when migrating a Create React App project to Rsbuild, you can read\nenv variables starting with REACT_APP_ and inject them through the source.define\nconfig as follows:\n\n\n\n\nUsing define#\n\nBy using source.define, you can replace global identifiers with some expressions\nor values in compile time.\n\ndefine is similar to the macro definition capabilities provided by other\nlanguages. It is often used to inject env variables and other information to the\ncode during build time.\n\n\nReplace Identifiers#\n\nThe most basic use case for define is to replace global identifiers in compile\ntime.\n\nThe value of the environment variable NODE_ENV will change the behavior of many\nvendor packages. Usually, we need to set it to production.\n\n\n\nNote that the value provided here must be a JSON string, e.g.\nprocess.env.NODE_ENV with a value of \"production\" should be passed in as\n\"\\\"production\\\"\" to be processed correctly.\n\nSimilarly { foo: \"bar\" } should be converted to \"{\\\"foo\\\":\\\"bar\\\"}\", which if\npassed directly into the original object would mean replacing the identifier\nprocess.env.NODE_ENV.foo with the identifier bar.\n\nFor more about source.define, just refer to API References.\n\nTIP\n\nThe environment variable NODE_ENV shown in the example above is already injected\nby the Rsbuild, and you usually do not need to configure it manually.\n\n\nIdentifiers Matching#\n\nNote that source.define can only match complete global identifiers. You can\nthink of it as a text replacement process.\n\nIf the identifier in the code does not exactly match the key defined in define,\nRsbuild will not be able to replace it.\n\n\n\n\nprocess.env Replacement#\n\nWhen using source.define, please avoid replacing the entire process.env object,\ne.g. the following usage is not recommended:\n\n\n\nIf the above usage is adopted, the following problems will be caused:\n\n 1. Some unused env variables are additionally injected, causing the env\n    variables of the dev server to be leaked into the front-end code.\n 2. As each process.env code will be replaced by a complete environment variable\n    object, the bundle size of the front-end code will increase and the\n    performance will decrease.\n\nTherefore, please inject the env variables on process.env according to actual\nneeds and avoid replacing them in its entirety.\n\n\nType Declarations#\n\nWhen you access an environment variable in a TypeScript file, TypeScript may\nprompt that the variable lacks a type definition, and you need to add the\ncorresponding type declaration.\n\nFor example, if you reference a PUBLIC_FOO variable, the following prompt will\nappear in the TypeScript file:\n\n\n\nTo fix this, you can create a src/env.d.ts file in your project and add the\nfollowing content:\n\n\n\n\nimport.meta.env#\n\nYou can extend the type of import.meta.env like this:\n\n\n\n\nprocess.env#\n\nIf the type for process.env is missing, please install the dependency\n@types/node:\n\nThen extend the type of process.env:\n\n\n\n\nTree Shaking#\n\ndefine can also be used to mark dead code to assist the Rspack with tree shaking\noptimization.\n\nBuild artifacts for different languages is achieved by replacing\nimport.meta.env.LANGUAGE with a specific value, for example.\n\n\n\nFor an internationalized code:\n\n\n\nSpecifying the environment variable LANGUAGE=zh and then running build will\neliminate the dead code.\n\n\n\nUnused components will not be bundled, and their dependencies will be removed\naccordingly, resulting in smaller build outputs.","routePath":"/guide/advanced/env-vars","lang":"en","toc":[{"text":"Default Variables","id":"default-variables","depth":2,"charIndex":234},{"text":"import.meta.env.MODE","id":"importmetaenvmode","depth":3,"charIndex":804},{"text":"import.meta.env.DEV","id":"importmetaenvdev","depth":3,"charIndex":1155},{"text":"import.meta.env.PROD","id":"importmetaenvprod","depth":3,"charIndex":1250},{"text":"import.meta.env.BASE_URL","id":"importmetaenvbase_url","depth":3,"charIndex":1345},{"text":"import.meta.env.ASSET_PREFIX","id":"importmetaenvasset_prefix","depth":3,"charIndex":1866},{"text":"process.env.BASE_URL","id":"processenvbase_url","depth":3,"charIndex":2546},{"text":"process.env.ASSET_PREFIX","id":"processenvasset_prefix","depth":3,"charIndex":2761},{"text":"process.env.NODE_ENV","id":"processenvnode_env","depth":3,"charIndex":2992},{"text":"`.env` File","id":"env-file","depth":2,"charIndex":-1},{"text":"File Types","id":"file-types","depth":3,"charIndex":3818},{"text":"Env Mode","id":"env-mode","depth":3,"charIndex":4622},{"text":"Env Directory","id":"env-directory","depth":3,"charIndex":5086},{"text":"Example","id":"example","depth":3,"charIndex":5383},{"text":"Manually Load Env","id":"manually-load-env","depth":3,"charIndex":5699},{"text":"Public Variables","id":"public-variables","depth":2,"charIndex":5942},{"text":"Replacement Scope","id":"replacement-scope","depth":3,"charIndex":6574},{"text":"Custom Prefix","id":"custom-prefix","depth":3,"charIndex":6972},{"text":"Using define","id":"using-define","depth":2,"charIndex":7275},{"text":"Replace Identifiers","id":"replace-identifiers","depth":3,"charIndex":7579},{"text":"Identifiers Matching","id":"identifiers-matching","depth":3,"charIndex":8434},{"text":"process.env Replacement","id":"processenv-replacement","depth":3,"charIndex":8701},{"text":"Type Declarations","id":"type-declarations","depth":2,"charIndex":9382},{"text":"import.meta.env","id":"importmetaenv","depth":3,"charIndex":9798},{"text":"process.env","id":"processenv","depth":3,"charIndex":9874},{"text":"Tree Shaking","id":"tree-shaking","depth":2,"charIndex":10013}],"domain":"","frontmatter":{},"version":""},{"id":117,"title":"Multi-Environment Builds","content":"#\n\nRsbuild supports building outputs for multiple environments at the same time.\nYou can use environments to build multiple environments in parallel and set a\ndifferent Rsbuild config for each environment.\n\n\nWhat is environment#\n\nThe environment refers to the runtime environment for build output. Common\nenvironments include browsers, Node.js, and Workers. Rsbuild allows you to\ndefine any environment names and set build options for each environment\nindividually.\n\nA typical scenario is server-side rendering (SSR). You can define two\nenvironments, web and node, where the build targets (output.target) are web and\nnode. These are used for client-side rendering (CSR) and server-side rendering\n(SSR) scenarios.\n\nYou can also define different environments for the same build target, for\nexample:\n\n * Define rsc and ssr environments, both targeting node, used separately for\n   React Server Components and SSR.\n * Define desktop and mobile environments, both targeting web, used separately\n   for desktop and mobile browsers.\n\nWithout the environments configuration, you would need to define multiple\nconfigurations for these scenarios and run multiple independent Rsbuild builds.\nNow, with the environments configuration, you can complete the build for\nmultiple outputs in a single Rsbuild run (Rsbuild achieves this using Rspack's\nMultiCompiler).\n\nIn Rsbuild, each environment is associated with an Rsbuild configuration, an\nRspack configuration, and a set of build outputs. Rsbuild plugin developers can\ncustomize the build process for a specified environment based on the environment\nname, such as modifying Rsbuild or Rspack configurations, registering or\nremoving plugins, adjusting Rspack rules, and viewing assets information.\n\n\nEnvironment configs#\n\nRsbuild supports defining different Rsbuild configs for each environment through\nenvironments.\n\nFor example, if your project wants to support the SSR function, you need to\ndefine different configs for client and SSR respectively. You can define a web\nand node environment respectively.\n\n\n\n\nConfig Merging#\n\nIf you configure environments, Rsbuild will merge the config in environments\nwith the outer base config. When merging, the config in environments has higher\npriority.\n\nIn the example above, after merging the configs, Rsbuild generates two\nstandalone environment configs for building web and node environments.\n\n * web environments config: Generated by merging base config with\n   environments.web\n * node environments config: Generated by merging base config with\n   environments.node\n\nThen, Rsbuild will use these environments configs to internally generate two\nRspack configs and execute a single build using Rspack’s MultiCompiler.\n\n\nDebug Config#\n\nWhen you execute the command npx rsbuild inspect in the project root directory,\nyou will find the following output:\n\n * rsbuild.config.[name].mjs: Indicates the Rsbuild config used for a certain\n   environment during build.\n * rspack.config.[name].mjs: Indicates the Rspack config corresponding to a\n   certain environment when building.\n\n\n\n\nDefault environment#\n\nWhen environments is not specified, Rsbuild will by default create an\nenvironment with the same name based on the currently target type (the value of\noutput.target).\n\n\n\nThe above config is equivalent to a simplification of the following config:\n\n\n\n\nSpecify environment build#\n\nBy default, Rsbuild will build all environments in the Rsbuild configuration\nwhen you execute rsbuild dev or rsbuild build. You can build only the specified\nenvironment via --environment .\n\n\n\n\nAdd plugins for specified environment#\n\nPlugins configured through the plugins field support running in all\nenvironments. If you want a plugin to run only in a specified environment, you\ncan configure the plugin in the specified environment.\n\nFor example, enable the React plugin only in the web environment:\n\n\n\nIf you are a plugin developer, you can view Developing environment plugins for\ndetails.\n\n\nPlugin API#\n\n\nUpdate environment config#\n\nRsbuild supports modifying or adding environment config through the\nmodifyRsbuildConfig hook.\n\n\n\n\nConfiguring a specific environment#\n\nRsbuild supports modifying the Rsbuild config of a specific environment through\nthe modifyEnvironmentConfig hook.\n\n\n\n\nEnvironment context#\n\nEnvironment context is a read-only object that provides some context infos about\nthe current environment. Rsbuild supports obtaining environment context\ninformation in plugin hooks.\n\nFor some plugin hooks related to the build environment (such as\nmodifyRspackConfig and modifyBundlerChain), Rsbuild supports obtaining the\ncurrent environment context through the environment parameter.\n\n\n\nFor some global plugin hooks (such as onDevCompileDone, onBeforeStartDevServer,\netc.), Rsbuild supports obtaining the context of all environments through the\nenvironments parameter.\n\n\n\n\nEnvironment API#\n\nRsbuild server provides a series of APIs related to the build environment. Users\ncan operate the build artifacts in a specific environment on the server side\nthrough the Rsbuild environment API.\n\nYou can use the environment API in Rsbuild DevMiddleware or Custom Server.\n\nFor example, you can quickly implement an SSR function through the Rsbuild\nenvironment API in development mode:\n\n\n\nFor detailed usage, please refer to: SSR + Express Example.\n\n\nBuild order#\n\nBy default, Rsbuild builds all environments in parallel.\n\nIf you need to control the build order between different environments, you can\nset build dependencies through Rspack's dependencies configuration.\n\nFor example, if you need to build the web environment first, then build the node\nenvironment, you can add the following configuration:\n\n\n\nWe can use a simple plugin to test the build order of multiple environments:\n\n","routePath":"/guide/advanced/environments","lang":"en","toc":[{"text":"What is environment","id":"what-is-environment","depth":2,"charIndex":207},{"text":"Environment configs","id":"environment-configs","depth":2,"charIndex":1736},{"text":"Config Merging","id":"config-merging","depth":3,"charIndex":2048},{"text":"Debug Config","id":"debug-config","depth":3,"charIndex":2702},{"text":"Default environment","id":"default-environment","depth":2,"charIndex":3059},{"text":"Specify environment build","id":"specify-environment-build","depth":2,"charIndex":3330},{"text":"Add plugins for specified environment","id":"add-plugins-for-specified-environment","depth":2,"charIndex":3551},{"text":"Plugin API","id":"plugin-api","depth":2,"charIndex":3953},{"text":"Update environment config","id":"update-environment-config","depth":3,"charIndex":3967},{"text":"Configuring a specific environment","id":"configuring-a-specific-environment","depth":3,"charIndex":4093},{"text":"Environment context","id":"environment-context","depth":2,"charIndex":4248},{"text":"Environment API","id":"environment-api","depth":2,"charIndex":4844},{"text":"Build order","id":"build-order","depth":2,"charIndex":5311}],"domain":"","frontmatter":{},"version":""},{"id":118,"title":"Hot Module Replacement","content":"#\n\nHot Module Replacement (HMR) exchanges, adds, or removes modules while an\napplication is running, without a full reload. This can significantly speed up\ndevelopment in a few ways:\n\n * Retain application state which is lost during a full reload.\n * Save valuable development time by only updating what's changed.\n * Instantly update the browser when modifications are made to CSS / JS in the\n   source code, which is almost comparable to changing styles directly in the\n   browser's dev tools.\n\n\nHMR Toggle#\n\nRsbuild has built-in support for HMR, which is enabled by default in development\nmode.\n\nIf you do not need to use HMR, you can set dev.hmr to false. This will disable\nHMR and react-refresh will, and Rsbuild will automatically fallback to\ndev.liveReload.\n\n\n\nIf you need to disable both HMR and liveReload, you can set both dev.hmr and\ndev.liveReload to false. Then, no Web Socket requests will be made to the dev\nserver on the page, and the page will not automatically refresh when files\nchange.\n\n\n\n\nSpecify HMR URL#\n\nBy default, Rsbuild uses the host and port number of the current page to splice\nthe WebSocket URL for HMR.\n\nWhen the HMR connection fails, you can specify the WebSocket URL by customizing\ndev.client config.\n\n\n\n\nFile Watching#\n\nBy default, Rsbuild does not watching files in the .git/ and node_modules/\ndirectories. When files in these directories changed, Rsbuild will not trigger a\nrebuild. This helps to reduce memory usage and improve build performance.\n\nIf you want to watch these directories, you can manually configure Rspack's\nwatchOptions.ignored to override the default behavior.\n\nFor example, to watch the node_modules/ directory and ignore the .git/\ndirectory, you can configure it as follows:\n\n\n\n\nFAQ#\n\nPlease refer to HMR FAQ.","routePath":"/guide/advanced/hmr","lang":"en","toc":[{"text":"HMR Toggle","id":"hmr-toggle","depth":2,"charIndex":497},{"text":"Specify HMR URL","id":"specify-hmr-url","depth":2,"charIndex":1009},{"text":"File Watching","id":"file-watching","depth":2,"charIndex":1238},{"text":"FAQ","id":"faq","depth":2,"charIndex":1736}],"domain":"","frontmatter":{},"version":""},{"id":119,"title":"Module Federation","content":"#\n\nModule Federation is an architectural pattern for JavaScript application\ndecomposition (similar to microservices on the server-side), allowing you to\nshare code and resources between multiple JavaScript applications (or\nmicro-frontends).\n\nThe Rspack team works closely with the Module Federation development team and\nprovides first-class support for Module Federation.\n\n\nUse Cases#\n\nModule Federation has several typical use cases, including:\n\n * Allowing independent applications (called \"micro-frontends\" in micro-frontend\n   architecture) to share modules without recompiling the entire application.\n * Different teams working on different parts of the same application without\n   needing to recompile the entire application.\n * Dynamic code loading and sharing between applications at runtime.\n\nModule Federation can help you:\n\n * Reduce code duplication\n * Improve code maintainability\n * Reduce the overall size of applications\n * Improve application performance\n\n\nHow to use#\n\nModule Federation (MF) currently has multiple major versions, and you can choose\none based on your needs.\n\nHere are the characteristics of several versions:\n\nVERSION   DESCRIPTION                                                   FEATURES                                                       USE CASES\nMF v2.0   Enhanced version of Module Federation, implemented based on   - Provides additional out-of-the-box features such as          Projects that need to use advanced capabilities of MF 2.0\n          Module Federation v1.5                                        dynamic TS type hints, Chrome DevTools, preloading, etc.-\n                                                                        More suitable for micro-frontend architecture supporting\n                                                                        large-scale Web applications - Includes all features of\n                                                                        Module Federation 1.5\nMF v1.5   Version built into Rspack                                     - Supports module export, module loading, dependency sharing   Projects that don't need to use the extra capabilities of MF\n                                                                        capabilities of Module Federation v1.0- Added runtime plugin   2.0\n                                                                        functionality, allowing users to extend the behavior and\n                                                                        functionality of module federation\n\n\nModule Federation v2.0#\n\nModule Federation 2.0 provides some additional out-of-the-box features based on\nModule Federation, such as dynamic TS type hints, Chrome devtools, Runtime\nplugins, preloading, making Module Federation more suitable for micro-frontend\narchitecture supporting large-scale Web applications. Module Federation v2.0 is\nimplemented based on v1.5.\n\nYou need to install the additional @module-federation/rsbuild-plugin plugin to\nuse Module Federation v2.0.\n\n\n\nPlease refer to the Module Federation v2.0 official documentation for detailed\nusage.\n\n\nModule Federation v1.5#\n\nThis is the version built into Rspack. In addition to supporting Module\nFederation v1.0's capabilities such as module export, module loading, and\ndependency sharing, it also adds runtime plugin functionality, allowing users to\nextend the behavior and functionality of module federation.\n\nYou can use it through Rsbuild's moduleFederation.options, no need to install\nany plugins.\n\n\n\n\nExample Repositories#\n\nRsbuild has provided some example projects of Module Federation, you can refer\nto:\n\n * Module Federation v2.0 Example\n * Module Federation v1.5 Example","routePath":"/guide/advanced/module-federation","lang":"en","toc":[{"text":"Use Cases","id":"use-cases","depth":2,"charIndex":373},{"text":"How to use","id":"how-to-use","depth":2,"charIndex":973},{"text":"Module Federation v2.0","id":"module-federation-v20","depth":3,"charIndex":2536},{"text":"Module Federation v1.5","id":"module-federation-v15","depth":3,"charIndex":3101},{"text":"Example Repositories","id":"example-repositories","depth":2,"charIndex":3509}],"domain":"","frontmatter":{},"version":""},{"id":120,"title":"REM adaptation","content":"#","routePath":"/guide/advanced/rem","lang":"en","toc":[],"domain":"","frontmatter":{},"version":""},{"id":121,"title":"Server-Side Rendering (SSR)","content":"","routePath":"/guide/advanced/ssr","lang":"en","toc":[{"text":"What is SSR","id":"what-is-ssr","depth":2,"charIndex":-1},{"text":"File Structure","id":"file-structure","depth":2,"charIndex":-1},{"text":"Create SSR configuration","id":"create-ssr-configuration","depth":2,"charIndex":-1},{"text":"Custom server","id":"custom-server","depth":2,"charIndex":-1},{"text":"Modify startup script","id":"modify-startup-script","depth":2,"charIndex":-1},{"text":"Get Manifest","id":"get-manifest","depth":2,"charIndex":-1},{"text":"Examples","id":"examples","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":122,"title":"CLI","content":"#\n\nRsbuild comes with a lightweight CLI that includes commands such as rsbuild dev\nand rsbuild build.\n\n\nrsbuild -h#\n\nTo view all available CLI commands, run the following command in the project\ndirectory:\n\n\n\nThe output is shown below:\n\n\n\n\nrsbuild dev#\n\nThe rsbuild dev command is used to start a local dev server and compile the\nsource code for development.\n\n\n\n\nOpening Page#\n\nThe --open option allows you to automatically open a page when starting the dev\nserver, which is equivalent to setting server.open to true.\n\n\n\nThe --open option also supports specifying the URL to be opened, for example:\n\n\n\nThe --open option can also be abbreviated to -o:\n\n\n\nTIP\n\nWhen using server.open and --open at the same time, --open takes precedence.\n\n\nrsbuild build#\n\nThe rsbuild build command will build the outputs for production in the dist/\ndirectory by default.\n\n\n\n\nrsbuild preview#\n\nThe rsbuild preview command is used to preview the production build outputs\nlocally. Note that you need to execute the rsbuild build command beforehand to\ngenerate the build outputs.\n\n\n\nTIP\n\nThe preview command is only used for local preview. Do not use it for production\nservers, as it is not designed for that.\n\n\nrsbuild inspect#\n\nThe rsbuild inspect command is used to view the Rsbuild config and Rspack config\nof the project.\n\n\n\nWhen you run the command npx rsbuild inspect in the project root directory, the\nfollowing files will be generated in the dist/.rsbuild directory of the project:\n\n * rsbuild.config.mjs: Represents the Rsbuild configuration used during the\n   build.\n * rspack.config.web.mjs: Represents the Rspack configuration used during the\n   build.\n\n\n\n\nSpecifying Mode#\n\nBy default, the inspect command outputs the configuration for the development\nmode. You can add the --env production option to output the configuration for\nthe production mode:\n\n\n\n\nVerbose content#\n\nBy default, the inspect command omits the content of functions in the\nconfiguration object. You can add the --verbose option to output the complete\ncontent of functions:\n\n\n\n\nMultiple Targets#\n\nIf the current project has multiple build targets, such as building browser\nartifact and Node.js artifact simultaneously, multiple Rspack configuration\nfiles will be generated in the dist/.rsbuild directory.\n\n","routePath":"/guide/basic/cli","lang":"en","toc":[{"text":"rsbuild -h","id":"rsbuild--h","depth":2,"charIndex":103},{"text":"rsbuild dev","id":"rsbuild-dev","depth":2,"charIndex":238},{"text":"Opening Page","id":"opening-page","depth":3,"charIndex":361},{"text":"rsbuild build","id":"rsbuild-build","depth":2,"charIndex":736},{"text":"rsbuild preview","id":"rsbuild-preview","depth":2,"charIndex":855},{"text":"rsbuild inspect","id":"rsbuild-inspect","depth":2,"charIndex":1188},{"text":"Specifying Mode","id":"specifying-mode","depth":3,"charIndex":1646},{"text":"Verbose content","id":"verbose-content","depth":3,"charIndex":1845},{"text":"Multiple Targets","id":"multiple-targets","depth":3,"charIndex":2037}],"domain":"","frontmatter":{},"version":""},{"id":123,"title":"Configure Rsbuild","content":"#\n\nRsbuild provides a wide range of configuration options and sets a common default\nvalue for each option, which can meet the requirements of most use cases.\nTherefore, in most cases, you don't need to declare any Rsbuild configurations\nand can use it out of the box.\n\nIf you need to customize build behaviors, you can use these configuration\noptions.\n\n\nConfiguration Structure#\n\nThe configuration structure of Rsbuild looks like this:\n\n\n\nYou can find detailed descriptions of all configs on the Configure Overview\npage.\n\n\nConfiguration File#\n\nWhen you use the CLI of Rsbuild, Rsbuild will automatically read the\nconfiguration file in the root directory of the current project and resolve it\nin the following order:\n\n * rsbuild.config.mjs\n * rsbuild.config.ts\n * rsbuild.config.js\n * rsbuild.config.cjs\n * rsbuild.config.mts\n * rsbuild.config.cts\n\nWe recommend using the .mjs or .ts format for the configuration file and\nimporting the defineConfig utility function from @rsbuild/core. It provides\nfriendly TypeScript type hints and autocompletion, which can help you avoid\nerrors in the configuration.\n\nFor example, in rsbuild.config.ts, you can define the Rsbuild resolve.alias\nconfiguration:\n\n\n\nIf you are developing a non-TypeScript project, you can use the .mjs format for\nthe configuration file:\n\n\n\nTIP\n\nWhen you use the .ts, .mts, and .cts extensions, Rsbuild will use jiti to load\nconfiguration files, providing interoperability between ESM and CommonJS. The\nbehavior of module resolution differs slightly from the native behavior of\nNode.js.\n\n\nSpecify Config File#\n\nRsbuild CLI uses the --config option to specify the config file, which can be\nset to a relative path or an absolute path.\n\nFor example, if you need to use the rsbuild.prod.config.mjs file when running\nbuild, you can add the following scripts to package.json:\n\n\n\nYou can also abbreviate the --config option to -c:\n\n\n\n\nUsing Environment Variables#\n\nIn the configuration file, you can use Node.js environment variables such as\nprocess.env.NODE_ENV to dynamically set different configurations:\n\n\n\n\nExport Function#\n\nRsbuild supports the export of a function in the config file, where you can\ndynamically compute the config and return it to Rsbuild.\n\n\n\nTIP\n\nThe exported config function must provide a return value. If you do not need to\nreturn any config, you can return an empty object.\n\nThe function accepts the following parameters:\n\n\nenv#\n\n * Type: string\n * Default: process.env.NODE_ENV\n\nThe current running environment.\n\n * When running rsbuild dev, the default value of env is development.\n * When running rsbuild build or rsbuild preview, the default value of env is\n   production.\n\n\nenvMode#\n\n * Type: string\n * Default: process.env.NODE_ENV\n\nThe current value of the CLI parameter --env-mode.\n\nFor example, when running rsbuild build --env-mode test, the value of envMode is\ntest.\n\n\ncommand#\n\n * Type: string\n\nThe current running CLI command, such as dev, build, preview.\n\n\nExport Async Function#\n\nRsbuild also supports the export of an async function in the config file, where\nyou can perform some async operations:\n\n\n\n\nMerge Configurations#\n\nYou can use the mergeRsbuildConfig function exported by @rsbuild/core to merge\nmultiple configurations.\n\n\n\n\nDebug the config#\n\nYou can enable Rsbuild's debug mode by adding the DEBUG=rsbuild environment\nvariable when executing a build.\n\n\n\nIn debug mode, Rsbuild will write the Rsbuild config to the dist directory,\nwhich is convenient for developers to view and debug.\n\n\n\nOpen the generated /dist/.rsbuild/rsbuild.config.mjs file to see the complete\ncontent of the Rsbuild config.\n\nFor a complete introduction to debug mode, see the Debug Mode chapter.","routePath":"/guide/basic/configure-rsbuild","lang":"en","toc":[{"text":"Configuration Structure","id":"configuration-structure","depth":2,"charIndex":353},{"text":"Configuration File","id":"configuration-file","depth":2,"charIndex":522},{"text":"Specify Config File","id":"specify-config-file","depth":2,"charIndex":1551},{"text":"Using Environment Variables","id":"using-environment-variables","depth":2,"charIndex":1890},{"text":"Export Function","id":"export-function","depth":2,"charIndex":2067},{"text":"env","id":"env","depth":3,"charIndex":2407},{"text":"envMode","id":"envmode","depth":3,"charIndex":2662},{"text":"command","id":"command","depth":3,"charIndex":2863},{"text":"Export Async Function","id":"export-async-function","depth":2,"charIndex":2954},{"text":"Merge Configurations","id":"merge-configurations","depth":2,"charIndex":3101},{"text":"Debug the config","id":"debug-the-config","depth":2,"charIndex":3232}],"domain":"","frontmatter":{},"version":""},{"id":124,"title":"Configure Rspack","content":"#\n\nRsbuild supports directly modifying the Rspack configuration object, and also\nsupports modifying the built-in Rspack configuration of Rsbuild through\nrspack-chain.\n\nTIP\n\nThe built-in Rspack config in Rsbuild may change with iterations, and these\nchanges won't be reflected in semver. Therefore, your custom config may become\ninvalid when you upgrade Rsbuild.\n\n\nView Rspack Config#\n\nRsbuild provides the rsbuild inspect command to view the final Rspack config\ngenerated by Rsbuild.\n\nYou can also view it through debug mode.\n\n\nModify Config Object#\n\nYou can use the tools.rspack option of Rsbuild to modify the Rspack config\nobject.\n\nFor example, register Rspack plugins or webpack plugins:\n\n\n\nOr modify the Rspack config with a function:\n\n\n\n> Please refer to the tools.rspack documentation for detailed usage.\n\n\nUse Bundler Chain#\n\n\ntools.bundlerChain#\n\nRsbuild provides the tools.bundlerChain config to modify the rspack-chain. Its\nvalue is a function that takes two arguments:\n\n * The first argument is an rspack-chain instance, which you can use to modify\n   the Rspack config.\n * The second argument is an utils object, including env, isProd, CHAIN_ID, etc.\n\nHere's a basic example:\n\n\n\ntools.bundlerChain can also be an async function:\n\n\n\n\nBasics#\n\nBefore using the rspack-chain to modify the Rspack configuration, it is\nrecommended to familiarize yourself with some basics.\n\nAbout ID#\n\nIn short, the rspack-chain requires users to set a unique ID for each rule,\nloader, plugin, and minimizer. With this ID, you can easily find the desired\nobject from deeply nested objects.\n\nRsbuild exports all internally defined IDs through the CHAIN_ID object, so you\ncan quickly locate the loader or plugin you want to modify using these exported\nIDs, without the need for complex traversal in the Rspack configuration object.\n\nFor example, you can remove the built-in HTML plugin using CHAIN_ID.PLUGIN.HTML:\n\n\n\nID Types#\n\nThe CHAIN_ID object contains various IDs, which correspond to the following\nconfigurations:\n\nCHAIN_ID FIELD            CORRESPONDING CONFIGURATION   DESCRIPTION\nCHAIN_ID.PLUGIN           plugins[i]                    Corresponds to a plugin in the Rspack configuration\nCHAIN_ID.RULE             module.rules[i]               Corresponds to a rule in the Rspack configuration\nCHAIN_ID.USE              module.rules[i].loader        Corresponds to a loader in the Rspack configuration\nCHAIN_ID.MINIMIZER        optimization.minimizer        Corresponds to a minimizer in the Rspack configuration\nCHAIN_ID.RESOLVE_PLUGIN   resolve.plugins[i]            Corresponds to a resolve plugin in the Rspack configuration\n\n\nExamples#\n\nConfigure loader#\n\nHere are examples of adding, modifying, and removing Rspack loaders.\n\n * Add a loader to handle .md files:\n\n\n\n * Modify options of the built-in SWC loader:\n\n\n\n * Remove the built-in SWC loader:\n\n\n\n * Insert a loader after the built-in SWC loader that executes earlier:\n\n\n\n> Note: Rspack loaders are executed in reverse order.\n\n * Insert a loader before the built-in SWC loader that executes later:\n\n\n\n * Remove the built-in CSS handling rule:\n\n\n\nConfigure Plugin#\n\nHere are examples of adding, modifying, and deleting Rspack plugins.\n\n\n\nModify based on environment#\n\nIn the tools.bundlerChain function, you can access various environment\nidentifiers in the second parameter, such as development/production build, SSR\nbuild, Web Worker build, to achieve configuration modifications for different\nenvironments.\n\n\n\nThe above are some common configuration examples. For the complete rspack-chain\nAPI, please refer to the rspack-chain documentation.\n\n\nConfiguration modification order#\n\nRsbuild supports modifying the Rspack configuration object through tools.rspack,\ntools.bundlerChain, modifyBundlerChain, etc.\n\nThe order of execution between them is:\n\n * modifyBundlerChain\n * tools.bundleChain\n * modifyRspackConfig\n * tools.rspack","routePath":"/guide/basic/configure-rspack","lang":"en","toc":[{"text":"View Rspack Config","id":"view-rspack-config","depth":2,"charIndex":363},{"text":"Modify Config Object","id":"modify-config-object","depth":2,"charIndex":527},{"text":"Use Bundler Chain","id":"use-bundler-chain","depth":2,"charIndex":813},{"text":"tools.bundlerChain","id":"toolsbundlerchain","depth":3,"charIndex":834},{"text":"Basics","id":"basics","depth":3,"charIndex":1245},{"text":"About ID","id":"about-id","depth":4,"charIndex":1381},{"text":"ID Types","id":"id-types","depth":4,"charIndex":1905},{"text":"Examples","id":"examples","depth":3,"charIndex":2628},{"text":"Configure loader","id":"configure-loader","depth":4,"charIndex":2639},{"text":"Configure Plugin","id":"configure-plugin","depth":4,"charIndex":3104},{"text":"Modify based on environment","id":"modify-based-on-environment","depth":4,"charIndex":3195},{"text":"Configuration modification order","id":"configuration-modification-order","depth":2,"charIndex":3605}],"domain":"","frontmatter":{},"version":""},{"id":125,"title":"Configure SWC","content":"#\n\nSWC (Speedy Web Compiler) is a transformer and minimizer for JavaScript and\nTypeScript based on Rust. SWC provides similar functionality to Babel and\nTerser, and it is 20x faster than Babel on a single thread and 70x faster on\nfour cores.\n\nRsbuild enables the following SWC features by default:\n\n * Transform JavaScript and TypeScript code using Rspack's builtin:swc-loader,\n   which is the Rust version of swc-loader.\n * Minify JavaScript code using Rspack's SwcJsMinimizerRspackPlugin.\n\n\nLoader Options#\n\nThe options for builtin:swc-loader are consistent with the JS version of\nswc-loader. Rsbuild provides the tools.swc option to configure\nbuiltin:swc-loader. Here are some examples:\n\n\nRegister SWC Plugin#\n\ntools.swc can be used to register SWC's Wasm plugins, for example, registering\n@swc/plugin-styled-components:\n\n\n\n> You can check out the awesome-swc repository to see the SWC plugins available\n> in the community.\n\n\nSWC Plugin Version#\n\nPlease note that the SWC plugin is still an experimental feature, and the SWC\nWasm plugin is currently not backward compatible. The version of the SWC plugin\nis closely tied to the version of swc_core that Rspack depends on.\n\nThis means that you must to choose an SWC plugin that matches the current\nversion of swc_core to ensure that it works properly. If the version of the SWC\nplugin you are using does not match the version of swc_core that Rspack depends\non, Rspack will throw the following error during the build process:\n\n\n\nIf you encounter the above issues, a common solution is to upgrade both the\nRsbuild and SWC plugins to the latest versions.\n\nAlternatively, you can follow these steps to select a suitable SWC plugin\nversion:\n\n 1. Check the current version of Rspack you are using, this can be done by\n    enabling debug mode.\n 2. Visit plugins.swc.rs and select the version of Rspack you are currently\n    using.\n 3. The website will list the range of SWC plugin versions that match to your\n    current Rspack version. Then select the matched version of the SWC plugin to\n    use.\n\nIf the SWC plugin you are using is not listed on plugins.swc.rs, you can find\nthe version information of swc_core in the Cargo.toml file within the Rust code\nrepository. For example, in the Rspack repository, you can open Cargo.toml and\nsearch for the keyword swc_core to find the version. Then read SWC - Selecting\nthe version for further guidance.\n\n\nEnable Emotion Support#\n\nExample of enabling the Emotion support using the builtin:swc-loader:\n\n\n\nFor more options, please refer to @swc/plugin-emotion.\n\n\nEnable Relay Support#\n\nExample of enabling the Relay support using the builtin:swc-loader:\n\n\n\nFor more options, please refer to @swc/plugin-relay.\n\n\nMinimizer Options#\n\nRsbuild provides the output.minify.js option to configure the\nSwcJsMinimizerRspackPlugin. Here are some examples:\n\n\nExclude Files#\n\nYou can exclude certain files from being minified using the exclude option:\n\n\n\n\nSwitching Minimizer#\n\nIf the SwcJsMinimizerRspackPlugin does not meet your needs, you can switch to\nother minimizers through the tools.bundlerChain option.\n\nFor example, to switch to Terser for minifying JavaScript, which is more stable\nbut performs worse compared to SWC:\n\n","routePath":"/guide/basic/configure-swc","lang":"en","toc":[{"text":"Loader Options","id":"loader-options","depth":2,"charIndex":492},{"text":"Register SWC Plugin","id":"register-swc-plugin","depth":3,"charIndex":691},{"text":"SWC Plugin Version","id":"swc-plugin-version","depth":3,"charIndex":928},{"text":"Enable Emotion Support","id":"enable-emotion-support","depth":3,"charIndex":2397},{"text":"Enable Relay Support","id":"enable-relay-support","depth":3,"charIndex":2552},{"text":"Minimizer Options","id":"minimizer-options","depth":2,"charIndex":2701},{"text":"Exclude Files","id":"exclude-files","depth":3,"charIndex":2837},{"text":"Switching Minimizer","id":"switching-minimizer","depth":2,"charIndex":2933}],"domain":"","frontmatter":{},"version":""},{"id":126,"title":"Use CSS Modules","content":"#\n\nCSS Modules allows us to write CSS code in a modular way, and these styles can\nbe imported and used in JavaScript files. Using CSS Modules can automatically\ngenerate unique class names, isolate styles between different modules, and avoid\nclass name conflicts.\n\nRsbuild supports CSS Modules by default, you don't need to add additional\nconfiguration. Our convention is to use the [name].module.css filename to enable\nCSS Modules.\n\nThe following style files are considered CSS Modules:\n\n * *.module.css\n * *.module.less\n * *.module.sass\n * *.module.scss\n * *.module.styl\n * *.module.stylus\n\n\nUsage Example#\n\n * Write style:\n\n\n\n * Using styles:\n\n\n\n\nNamed Import#\n\nIf you prefer to use named imports in CSS Modules, you can enable it through the\noutput.cssModules.namedExport config.\n\n\n\nIf enabled, you can reference class names using named imports:\n\n\n\n\nCSS Modules Recognition Rules#\n\nBy default, only files ending with *.module.css are recognized as CSS Modules.\n\nIf you want to treat other CSS files as CSS Modules as well, you can achieve\nthis by configuring output.cssModules.auto.\n\nFor example:\n\n\n\nAfter this configuration, the following two files will be recognized as CSS\nModules:\n\n\n\n\nCustom Class Names#\n\nCustomizing the class names generated by CSS Modules is also a commonly used\nfunction, you can use output.cssModules.localIdentName to configure it.\n\n\n\nIf you need to customize other configs of CSS Modules, you can set them via\noutput.cssModules.\n\n\nType Declaration#\n\nWhen you import CSS Modules in TypeScript code, TypeScript may prompt that the\nmodule is missing a type definition:\n\n\n\nTo fix this, you need to add a type declaration file for the CSS Modules, please\ncreate a src/env.d.ts file, and add the corresponding type declaration.\n\n * Method 1: If the @rsbuild/core package is installed, you can reference the\n   preset types provided by @rsbuild/core:\n\n\n\n * Method 2: Manually add the required type declarations:\n\n\n\n * Method 3: If you need to use named imports to reference class names, you can\n   use a looser type declaration:\n\n\n\nAfter adding the type declaration, if the type error still exists, you can try\nto restart the current IDE, or adjust the directory where env.d.ts is located,\nmaking sure the TypeScript can correctly identify the type definition.\n\n\nType Generation#\n\nAlthough the above method can provide the type of CSS Modules, it cannot\naccurately prompt which classNames are exported by a certain CSS file.\n\nRsbuild supports generating accurate type declarations for CSS Modules, you only\nneed to register the @rsbuild/plugin-typed-css-modules, and then execute the\nbuild, Rsbuild will generate type declaration files for all CSS Modules.\n\n\n\n\nExample#\n\nFor example, create two files named src/index.ts and src/index.module.css:\n\n\n\n\n\nAfter building, Rsbuild will generate a src/index.module.css.d.ts type\ndeclaration file:\n\n\n\nNow when you open the src/index.ts file, you can see that the styles object\nalready has an accurate type.","routePath":"/guide/basic/css-modules","lang":"en","toc":[{"text":"Usage Example","id":"usage-example","depth":2,"charIndex":592},{"text":"Named Import","id":"named-import","depth":2,"charIndex":648},{"text":"CSS Modules Recognition Rules","id":"css-modules-recognition-rules","depth":2,"charIndex":852},{"text":"Custom Class Names","id":"custom-class-names","depth":2,"charIndex":1191},{"text":"Type Declaration","id":"type-declaration","depth":2,"charIndex":1461},{"text":"Type Generation","id":"type-generation","depth":2,"charIndex":2286},{"text":"Example","id":"example","depth":3,"charIndex":2684}],"domain":"","frontmatter":{},"version":""},{"id":127,"title":"Import CSS Files","content":"#\n\nRsbuild provides out-of-the-box support for CSS, including PostCSS, CSS Modules,\nCSS preprocessors, CSS inlining, and CSS compression.\n\nRsbuild also provides several configurations that allow customization of the\nprocessing rules for CSS files.\n\n\nLightning CSS#\n\nTIP\n\nLightning CSS is a high performance CSS parser, transformer and minifier written\nin Rust. It supports parsing and transforming many modern CSS features into\nsyntax supported by target browsers, and also provides a better compression\nratio.\n\nRsbuild uses Rspack's built-in lightningcss-loader to transform CSS code. It\nautomatically reads the project's browserslist config and converts the CSS code\nto syntax supported by target browsers.\n\n\nFeatures#\n\n * Lightning CSS automatically adds vendor prefixes like -webkit-, -moz-, -ms-,\n   etc., so you don't need to manually add prefixes or use the autoprefixer\n   plugin.\n * Lightning CSS automatically downgrades CSS syntax, allowing you to use modern\n   CSS features such as CSS nesting and custom media queries in your code\n   without worrying about browser compatibility issues.\n * You can use tools.lightningcssLoader to customize the options for\n   lightningcss-loader.\n\n\nDisabling Lightning CSS#\n\nIf Lightning CSS does not meet your needs, you can disable Lightning CSS and use\nPostCSS to transform your CSS code.\n\nSteps:\n\n 1. Set tools.lightningcssLoader to false to disable the Lightning CSS loader.\n 2. Use @rsbuild/plugin-css-minimizer to switch the CSS minifier from Lightning\n    CSS to cssnano or another CSS minifier.\n\n\n\n 3. Refer to Using PostCSS to configure the PostCSS plugins you need. Here are\n    some commonly used PostCSS plugins:\n\n * autoprefixer: Adds vendor prefixes.\n * postcss-preset-env: Converts modern CSS into something most browsers can\n   understand.\n * postcss-nesting: Supports CSS nesting.\n\n\nCSS Minification#\n\nWhen building for production, Rsbuild enables Rspack's built-in\nLightningCssMinimizerRspackPlugin plugin to minify CSS assets for better\ntransmission efficiency.\n\n * You can disable CSS minification through the output.minify option or\n   customize the options for LightningCssMinimizerRspackPlugin.\n * You can use @rsbuild/plugin-css-minimizer to customize the CSS minimizer,\n   switching to cssnano or other CSS minimizer.\n\n\nUsing PostCSS#\n\nRsbuild supports transforming CSS code through PostCSS. You can configure\nPostCSS in the following ways:\n\n 1. Rsbuild uses postcss-load-config to load the PostCSS configuration file in\n    the root directory of the current project, such as postcss.config.js:\n\n\n\n 2. Configure the postcss-loader through Rsbuild's tools.postcss option, which\n    supports modifying the built-in configuration through a function, for\n    example:\n\n\n\n * When you configure both the postcss.config.js file and the tools.postcss\n   option, both will take effect, and the tools.postcss option will take\n   precedence.\n * If there is no postcss.config.js file in the project and the tools.postcss\n   option is not configured, Rsbuild will not register postcss-loader.\n\n\nUsing CSS Modules#\n\nRsbuild supports CSS Modules by default, please read the Using CSS Modules\nchapter for the complete usage of CSS Modules.\n\n\nUsing CSS preprocessors#\n\nRsbuild supports popular CSS preprocessors through plugins, including Sass, Less\nand Stylus. See how to use them:\n\n * Sass Plugin\n * Less Plugin\n * Stylus Plugin\n\n\nCSS-in-JS#\n\nPlease read the React - CSS-in-JS section to learn how to use common CSS-in-JS\nlibraries in Rsbuild.\n\n\nInline CSS Files#\n\nBy default, Rsbuild will extract CSS into a separate .css file and output it to\nthe dist directory.\n\nIf you want to inline styles into your JS file, you can set output.injectStyles\nto true to disable CSS extraction logic. When the JS file is requested by the\nbrowser, JS dynamically inserts the","routePath":"/guide/basic/css-usage","lang":"en","toc":[{"text":"Lightning CSS","id":"lightning-css","depth":2,"charIndex":249},{"text":"Features","id":"features","depth":3,"charIndex":710},{"text":"Disabling Lightning CSS","id":"disabling-lightning-css","depth":3,"charIndex":1194},{"text":"CSS Minification","id":"css-minification","depth":2,"charIndex":1846},{"text":"Using PostCSS","id":"using-postcss","depth":2,"charIndex":2291},{"text":"Using CSS Modules","id":"using-css-modules","depth":2,"charIndex":3053},{"text":"Using CSS preprocessors","id":"using-css-preprocessors","depth":2,"charIndex":3197},{"text":"CSS-in-JS","id":"css-in-js","depth":2,"charIndex":3387},{"text":"Inline CSS Files","id":"inline-css-files","depth":2,"charIndex":3502},{"text":"Import CSS in node_modules","id":"import-css-in-node_modules","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":128,"title":"HTML Template","content":"","routePath":"/guide/basic/html-template","lang":"en","toc":[{"text":"Set Template","id":"set-template","depth":2,"charIndex":-1},{"text":"Set Page Title","id":"set-page-title","depth":2,"charIndex":-1},{"text":"Set Page Icon","id":"set-page-icon","depth":2,"charIndex":-1},{"text":"Set Meta Tags","id":"set-meta-tags","depth":2,"charIndex":-1},{"text":"Default Template Engine","id":"default-template-engine","depth":2,"charIndex":-1},{"text":"Template Parameters","id":"template-parameters","depth":3,"charIndex":-1},{"text":"Parameter Escaping","id":"parameter-escaping","depth":3,"charIndex":-1},{"text":"Other Template Engines","id":"other-template-engines","depth":2,"charIndex":-1},{"text":"EJS","id":"ejs","depth":3,"charIndex":-1},{"text":"Pug","id":"pug","depth":3,"charIndex":-1},{"text":"Injecting Tags","id":"injecting-tags","depth":2,"charIndex":-1},{"text":"HTML Plugin","id":"html-plugin","depth":2,"charIndex":-1},{"text":"HTML Minification","id":"html-minification","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":129,"title":"Import JSON Files","content":"#\n\nRsbuild supports import JSON files in code, and also supports import YAML and\nToml files and converting them to JSON format.\n\n\nJSON file#\n\nYou can import JSON files directly in JavaScript files.\n\n\nExample#\n\n\n\n\n\n\nNamed Import#\n\nRsbuild also supports importing JSON files via named import:\n\n\n\n\nYAML file#\n\nYAML is a data serialization language commonly used for writing configuration\nfiles.\n\nRsbuild provides the @rsbuild/plugin-yaml. After registering the plugin, you can\nimport .yaml or .yml files in JavaScript and they will be automatically\nconverted to JavaScript objects.\n\n\n\n\nExample#\n\n\n\n\n\n\nTOML file#\n\nTOML is a semantically explicit, easy-to-read configuration file format.\n\nRsbuild provides the @rsbuild/plugin-toml. After registering the plugin, you can\nimport .toml files in JavaScript and it will be automatically converted to\nJavaScript objects.\n\n\n\n\nExample#\n\n\n\n\n\n\nType Declaration#\n\nWhen you import YAML or Toml files in TypeScript code, please create a\nsrc/env.d.ts file in your project and add the corresponding type declarations.\n\n * Method 1: If the @rsbuild/core package is installed, you can reference the\n   preset types provided by @rsbuild/core:\n\n\n\n * Method 2: Manually add the required type declarations:\n\n","routePath":"/guide/basic/json-files","lang":"en","toc":[{"text":"JSON file","id":"json-file","depth":2,"charIndex":129},{"text":"Example","id":"example","depth":3,"charIndex":199},{"text":"Named Import","id":"named-import","depth":3,"charIndex":214},{"text":"YAML file","id":"yaml-file","depth":2,"charIndex":294},{"text":"Example","id":"example-1","depth":3,"charIndex":582},{"text":"TOML file","id":"toml-file","depth":2,"charIndex":597},{"text":"Example","id":"example-2","depth":3,"charIndex":863},{"text":"Type Declaration","id":"type-declaration","depth":2,"charIndex":878}],"domain":"","frontmatter":{},"version":""},{"id":130,"title":"Output Files","content":"#\n\nThis chapter will introduces the directory structure of output files and how to\ncontrol the output directory of different types of files.\n\nIf you want to know how to deploy the build outputs of Rsbuild as a static site,\nplease refer to Deploy Static Site.\n\n\nDefault Directory Structure#\n\nThe following is a basic directory for output files. By default, the compiled\nfiles will be output in the dist directory of current project.\n\n\n\nThe most common output files are HTML files, JS files, and CSS files:\n\n * HTML files: default output to the root of dist directory.\n * JS files: default output to static/js directory,\n * CSS files: default output to the static/css directory.\n\nIn addition, JS files and CSS files sometimes generate some related files:\n\n * License files: contains open source license, which is output to the same\n   level directory of the JS file, and adds .LICENSE.txt suffix.\n * Source Map files: contains the source code mappings, which is output to the\n   same level directory of JS files and CSS files, and adds a .map suffix.\n\nIn the filename, [name] represents the entry name corresponding to this file,\nsuch as index, main. [hash] is the hash value generated based on the content of\nthe file.\n\n\nDevelopment Mode Output#\n\nIn development mode, Rsbuild stores the build outputs in memory on the dev\nserver by default, rather than writing then to disk. This can reduce the\noverhead of fs operations. You can refer to View Static Assets to view all\nstatic assets generated in the current build.\n\nYou can choose to write the output files to disk, which is typically used for\ninspecting the contents of the build artifacts or configuring proxy rules for\nstatic assets.\n\nJust set the dev.writeToDisk configuration to true:\n\n\n\n\nModify the Directory#\n\nRsbuild provides some configs to modify the directory or filename, you can:\n\n * Modify the filename through output.filename.\n * Modify the output path of through output.distPath.\n * Modify the license file through output.legalComments.\n * Modify Source Map file through output.sourceMap.\n * Modify the output structure of the HTML files through html.outputStructure.\n\n\nStatic Assets#\n\nWhen you import static assets such as images, SVG, fonts, media, etc. in the\ncode, they will also be output to the dist/static directory, and automatically\nassigned to the corresponding subdirectories according to the file type:\n\n\n\nYou can use the output.distPath config to uniformly input these static assets\ninto a directory, for example, output to the assets directory:\n\n\n\nThe above config produces the following directory structure:\n\n\n\n\nNode.js Output Directory#\n\nWhen the output.target of Rsbuild is 'node', Rsbuild will generate output files\nfor Node.js:\n\n\n\nNode.js outputs usually only contain JS files, no HTML or CSS. And the JS file\nnames will not contain hash.\n\nYou can modify the output path of Node.js files via the environments config.\n\nFor example, output Node.js files to the server directory:\n\n\n\n\nFlatten the Directory#\n\nSometimes you don't want the dist directory to have too many levels, you can set\nthe directory to an empty string to flatten the generated directory.\n\nSee the example below:\n\n\n\nThe above config produces the following directory structure:\n\n","routePath":"/guide/basic/output-files","lang":"en","toc":[{"text":"Default Directory Structure","id":"default-directory-structure","depth":2,"charIndex":260},{"text":"Development Mode Output","id":"development-mode-output","depth":2,"charIndex":1219},{"text":"Modify the Directory","id":"modify-the-directory","depth":2,"charIndex":1743},{"text":"Static Assets","id":"static-assets","depth":2,"charIndex":2135},{"text":"Node.js Output Directory","id":"nodejs-output-directory","depth":2,"charIndex":2592},{"text":"Flatten the Directory","id":"flatten-the-directory","depth":2,"charIndex":2965}],"domain":"","frontmatter":{},"version":""},{"id":131,"title":"Server","content":"#\n\nRsbuild comes with a built-in dev server designed to improve the development\nexperience. When you run the rsbuild dev or rsbuild preview commands, the server\nwill start, providing features such as page preview, routing, and hot module\nreloading.\n\n\nBase Path#\n\nBy default, the base path of the server is /, and users can access output files\nsuch as index.html and public folder assets through http://localhost:3000/.\n\nRsbuild supports modifying the base path of the server through server.base. If\nyou to access these files through http://localhost:3000/foo/, you can configure\nthe following:\n\n\n\n\nView Static Assets#\n\nAfter starting the dev server, you can access /rsbuild-dev-server to view all\nstatic assets generated during the current build.\n\nFor example, open http://localhost:3000/rsbuild-dev-server in the browser, you\nwill see:\n\n\nPage Routing#\n\nRsbuild Server offers a set of default routing convention, and allows users to\ncustomize it through configurations.\n\n\nDefault Behavior#\n\nRsbuild Server will generate the corresponding page route based on the\nserver.base and source.entry configurations.\n\nWhen entry is index, the page can be accessed through /; when entry is foo, the\npage can be accessed through /foo.\n\nWhen server.base is /base, the index page can be accessed through /base and the\nfoo page can be accessed through /base/foo.\n\n\n\n\nFallback Behavior#\n\nBy default, when the request meets the following conditions and the\ncorresponding resource is not found, it will fallback to index.html:\n\n * The request is a GET or HEAD request\n * Which accepts text/html (the request header accept type is text/html or */*)\n\n\n\n\nCustom Fallback Behavior#\n\nWhen Rsbuild's default server.htmlFallback configuration cannot meet your needs,\nfor example, if you want to be able to access main.html when accessing /, you\ncan set it up using server.historyApiFallback.\n\n\n\n\nHTML Output Path#\n\nNormally, / points to the dist root directory, and the HTML file is output to\nthe dist root directory. At this time, the corresponding HTML page can be\naccessed through /some-path.\n\nIf you output HTML files to other subdirectories by modifying\noutput.distPath.html, you need to access the corresponding HTML page through\n/[htmlPath]/some-path.\n\nFor example, if you set the HTML file to be output to the HTML directory,\nindex.html will be accessed through /html/, and foo.html will be accessed\nthrough /html/foo.\n\n\n\n\nRspack Dev Server#\n\nThe built-in dev server of Rspack CLI is @rspack/dev-server. Rsbuild does not\nuse @rspack/dev-server, but instead implemented its own more lightweight\nversion.\n\n\nComparison#\n\nThe dev server of Rsbuild and @rspack/dev-server have the following differences:\n\n * Configuration: Rsbuild provides richer server configuration options.\n * Log Format: The log format of Rspack CLI is basically consistent with Webpack\n   CLI, while Rsbuild's logs are clearer and more readable.\n * Dependencies: @rspack/dev-server is based on express with many third-party\n   dependencies. Rsbuild, on the other hand, uses lighter libraries such as\n   connect.\n\n\nConfiguration#\n\nRsbuild does not support using Rspack's devServer config. Instead, you can use\nRsbuild's dev and server configs.\n\nIn Rsbuild, dev contains some configs that are only work in development mode,\nwhile the server config works for both dev and preview servers.\n\nBelow are the Rsbuild configs that correspond to the Rspack CLI's devServer\nconfig:\n\nRSPACK CLI                     RSBUILD\ndevServer.client               dev.client\ndevServer.compress             server.compress\ndevServer.headers              server.headers\ndevServer.historyApiFallback   server.historyApiFallback\ndevServer.host                 server.host\ndevServer.hot                  dev.hmr\ndevServer.liveReload           dev.liveReload\ndevServer.open                 server.open\ndevServer.port                 server.port\ndevServer.proxy                server.proxy\ndevServer.setupMiddlewares     dev.setupMiddlewares\ndevServer.static               server.publicDir\ndevServer.watchFiles           dev.watchFiles\n\n> For more configurations, please refer to Config Overview.\n\n\nExtend middleware#\n\nRsbuild server does not use any Node.js frameworks, and the req and res provided\nby Rsbuild middleware are both native Node.js objects.\n\nThis means that when you migrate from other server-side frameworks (such as\nExpress), the original middleware may not necessarily be used directly in\nRsbuild. For example, the req.params,req.path, req.search, req.query and other\nproperties provided by Express cannot be accessed in the Rsbuild middleware.\n\nIf you need to use existing middleware in Rsbuild, this can be done by passing\nthe server application as middleware as follows:\n\n\n\n\nCustom Server#\n\nIf you want to integrate Rsbuild dev server into a custom server, you can get\nthe instance methods of Rsbuild dev server through the createDevServer method of\nRsbuild and call them on demand.\n\nFor details, please refer to Rsbuild - createDevServer.","routePath":"/guide/basic/server","lang":"en","toc":[{"text":"Base Path","id":"base-path","depth":2,"charIndex":250},{"text":"View Static Assets","id":"view-static-assets","depth":2,"charIndex":597},{"text":"Page Routing","id":"page-routing","depth":2,"charIndex":838},{"text":"Default Behavior","id":"default-behavior","depth":3,"charIndex":971},{"text":"Fallback Behavior","id":"fallback-behavior","depth":3,"charIndex":1351},{"text":"Custom Fallback Behavior","id":"custom-fallback-behavior","depth":3,"charIndex":1633},{"text":"HTML Output Path","id":"html-output-path","depth":3,"charIndex":1870},{"text":"Rspack Dev Server","id":"rspack-dev-server","depth":2,"charIndex":2405},{"text":"Comparison","id":"comparison","depth":3,"charIndex":2587},{"text":"Configuration","id":"configuration","depth":3,"charIndex":3063},{"text":"Extend middleware","id":"extend-middleware","depth":2,"charIndex":4119},{"text":"Custom Server","id":"custom-server","depth":2,"charIndex":4715}],"domain":"","frontmatter":{},"version":""},{"id":132,"title":"Import Static Assets","content":"#\n\nRsbuild supports import static assets, including images, fonts, audio and video.\n\nWhat is Static Assets\n\nStatic assets are files that are part of a web application and do not change,\neven when the application is being used. Examples of static assets include\nimages, fonts, medias, stylesheets, and JavaScript files. These assets are\ntypically stored on a web server or CDN, and delivered to the user's web browser\nwhen the Web application is accessed. Because they do not change, static assets\ncan be cached by the browser, which helps to improve the performance of the Web\napplication.\n\n\nAssets Format#\n\nThe following are the formats supported by Rsbuild by default:\n\n * images: png, jpg, jpeg, gif, svg, bmp, webp, ico, apng, avif, tif, tiff,\n   jfif, pjpeg, pjp.\n * fonts: woff, woff2, eot, ttf, otf, ttc.\n * audio: mp3, wav, flac, aac, m4a, opus.\n * video: mp4, webm, ogg, mov.\n\nIf you need to import assets in other formats, please refer to Extend Asset\nTypes.\n\nSVG images\n\nSVG image is a special case. Rsbuild support convert SVG to React components, so\nSVG is processed separately. For details, see SVGR Plugin.\n\n\nImport Assets in JS file#\n\nIn JS files, you can import static assets with relative paths:\n\n\n\nImport with alias is also available:\n\n\n\n\nURL assets#\n\nRsbuild supports using JavaScript's native URL and import.meta.url to import\nstatic assets.\n\n\n\nIf you use new URL() to reference .js or .ts files, they will be treated as URL\nassets and will not be processed by Rsbuild's built-in swc-loader.\n\n\n\nSimilarly, when using new URL() to reference .css or .scss files, they will be\ntreated as URL assets and will not be processed by Rsbuild's built-in CSS\nloaders.\n\n\n\n\nImport Assets in CSS file#\n\nIn CSS files, you can reference static assets in relative paths:\n\n\n\nImport with alias are also supported:\n\n\n\nIf you want to reference static assets in absolute paths in CSS files:\n\n\n\nBy default, the built-in css-loader in Rsbuild will resolve absolute paths in\nurl() and look for the specified modules. If you want to skip resolving absolute\npaths, you can configure tools.cssLoader to filter out the specified paths. The\nfiltered paths are left as they are in the code.\n\n\n\n\nImport Results#\n\nThe result of importing static assets depends on the file size:\n\n * When the file size is greater than 4KiB, a URL will be returned, and the file\n   will be output to the dist directory.\n * When the file size is less than 4KiB, it will be automatically inlined to\n   Base64 format.\n\n\n\nFor a more detailed introduction to asset inlining, please refer to the Static\nAsset Inlining chapter.\n\n\nOutput Files#\n\nWhen static assets are imported, they will be output to the dist directory. You\ncan:\n\n * Modify the output filename through output.filename.\n * Modify the output path through output.distPath.\n\nPlease read Output Files for details.\n\n\nURL Prefix#\n\nThe URL returned after importing a asset will automatically include the path\nprefix:\n\n * In development, using dev.assetPrefix to set the path prefix.\n * In production, using output.assetPrefix to set the path prefix.\n\nFor example, you can set output.assetPrefix to https://example.com:\n\n\n\n\nPublic Folder#\n\nThe public folder at the project root can be used to place some static assets.\nThese assets will not be built by Rsbuild and can be directly referenced via\nURL.\n\n * When you start the dev server, these assets will be served under the root\n   server.base path, default /.\n * When you perform a production build, these assets will be copied to the dist\n   directory.\n\nFor example, you can place files such as robots.txt, manifest.json, or\nfavicon.ico in the public folder.\n\n\nHow to reference#\n\nYou can reference files in the public directory via a URL.\n\nFor example, in an HTML template, the ./public/favicon.ico file can be\nreferenced as /favicon.ico, BASE_URL is the base path of the server.\n\n\n\n\nNotes#\n\nHere are some notes on using the public folder:\n\n * When referencing assets in the public folder via URL, please use absolute\n   paths instead of relative paths to ensure that the assets can be accessed\n   correctly after deployment.\n\n\n\n * Please avoid importing files from the public directory into the source code.\n   The correct approach is to reference them by URL. You can place static assets\n   imported into the source code in the /src/assets directory.\n\n\n\n * During the production build, the files in public folder will be copied to the\n   output folder (default is dist). Please be careful to avoid name conflicts\n   with the output files. When files in the public folder have the same name as\n   outputs, the outputs have higher priority and will overwrite the files with\n   the same name in the public folder. This feature can be disabled by setting\n   server.publicDir.copyOnBuild to false.\n\n\nCustom Behavior#\n\nRsbuild provides the server.publicDir option which can be used to customize the\nname and behavior of the public folder, as well as to disable it.\n\n\n\n\nType Declaration#\n\nWhen you import static assets in TypeScript code, TypeScript may prompt that the\nmodule is missing a type definition:\n\n\n\nTo fix this, you need to add a type declaration file for the static assets,\nplease create a src/env.d.ts file, and add the corresponding type declaration.\n\n * Method 1: If the @rsbuild/core package is installed, you can reference the\n   preset types provided by @rsbuild/core:\n\n\n\n * Method 2: Manually add the required type declarations:\n\n\n\nAfter adding the type declaration, if the type error still exists, you can try\nto restart the current IDE, or adjust the directory where env.d.ts is located,\nmaking sure the TypeScript can correctly identify the type definition.\n\n\nExtend Asset Types#\n\nIf the built-in asset types in Rsbuild cannot meet your requirements, you can\nextend additional static asset types in the following ways.\n\n\nUse source.assetsInclude#\n\nBy using the source.assetsInclude config, you can specify additional file types\nto be treated as static assets.\n\n\n\nAfter adding the above configuration, you can import *.pdf files in your code,\nfor example:\n\n\n\n\nUse tools.rspack#\n\nYou can modify the built-in Rspack configuration and add custom static assets\nhandling rules via tools.rspack.\n\nFor example, to treat *.pdf files as assets and output them to the dist\ndirectory, you can add the following configuration:\n\n\n\nFor more information about asset modules, please refer to Rspack - Asset\nmodules.\n\n\nRelated Configurations#\n\nExtended static asset types will be affected by the following configurations:\n\n * output.filename.assets: Set the name of extended static assets.\n * output.distPath.assets: Set the output directory of extended static assets.\n * output.dataUriLimit.assets: Set the threshold of inlining for extended static\n   assets.\n\n\nCustom Rules#\n\nIn some scenarios, you may need to bypass the built-in assets processing rules\nof Rsbuild and add some custom rules.\n\nTaking PNG image as an example, you need to:\n\n 1. Modify the built-in Rspack config via tools.bundlerChain to exclude .png\n    files using the exclude method.\n 2. Add custom asset processing rules via tools.rspack.\n\n\n\n\nImage Format#\n\nWhen using image assets, you can choose a appropriate image format according to\nthe pros and cons in the table below.\n\nFORMAT   PROS                                                     CONS                                                         SCENARIOS\nPNG      Lossless compression, no loss of picture details, no     Not suitable for pictures with complex color tables          Suitable for pictures with few colors and well-defined\n         distortion, support for translucency                                                                                  borders, suitable for logos, icons, transparent images and\n                                                                                                                               other scenes\nJPG      Rich colors                                              Lossy compression, which will cause image distortion, does   Suitable for pictures with a large number of colors,\n                                                                  not support transparency                                     gradients, and overly complex pictures, suitable for\n                                                                                                                               portrait photos, landscapes and other scenes\nWebP     Supports both lossy and lossless compression, supports   iOS compatibility is not good                                Pixel images of almost any scene, and the hosting\n         transparency, and is much smaller than PNG and JPG                                                                    environment that supports WebP, should prefer WebP image\n                                                                                                                               format\nSVG      Lossless format, no distortion, supports transparency    Not suitable for complex graphics                            Suitable for vector graphics, suitable for icons","routePath":"/guide/basic/static-assets","lang":"en","toc":[{"text":"Assets Format","id":"assets-format","depth":2,"charIndex":591},{"text":"Import Assets in JS file","id":"import-assets-in-js-file","depth":2,"charIndex":1123},{"text":"URL assets","id":"url-assets","depth":3,"charIndex":1257},{"text":"Import Assets in CSS file","id":"import-assets-in-css-file","depth":2,"charIndex":1681},{"text":"Import Results","id":"import-results","depth":2,"charIndex":2184},{"text":"Output Files","id":"output-files","depth":2,"charIndex":2591},{"text":"URL Prefix","id":"url-prefix","depth":2,"charIndex":2839},{"text":"Public Folder","id":"public-folder","depth":2,"charIndex":3143},{"text":"How to reference","id":"how-to-reference","depth":3,"charIndex":3632},{"text":"Notes","id":"notes","depth":3,"charIndex":3855},{"text":"Custom Behavior","id":"custom-behavior","depth":3,"charIndex":4768},{"text":"Type Declaration","id":"type-declaration","depth":2,"charIndex":4936},{"text":"Extend Asset Types","id":"extend-asset-types","depth":2,"charIndex":5648},{"text":"Use `source.assetsInclude`","id":"use-sourceassetsinclude","depth":3,"charIndex":-1},{"text":"Use `tools.rspack`","id":"use-toolsrspack","depth":3,"charIndex":-1},{"text":"Related Configurations","id":"related-configurations","depth":3,"charIndex":6389},{"text":"Custom Rules","id":"custom-rules","depth":2,"charIndex":6733},{"text":"Image Format","id":"image-format","depth":2,"charIndex":7085}],"domain":"","frontmatter":{},"version":""},{"id":133,"title":"Deploy Static Site","content":"#\n\nThis section introduces how to deploy the build outputs of Rsbuild as a static\nsite.\n\n\nBackground Information#\n\nBefore starting the deployment, you need to understand some background\ninformation:\n\n * The CLI commands used for building and previewing outputs.\n * The directory structure of the build outputs.\n * The URL prefix of static assets.\n\n\nBuild Commands#\n\nThe build commands provided by Rsbuild:\n\n * build command, used to generate the build outputs for production deployment.\n * preview command, used to preview the production build outputs locally. Note\n   that you need to execute the rsbuild build command beforehand to generate the\n   build outputs.\n\n\n\nTIP\n\nThe preview command is only used for local preview. Do not use it for production\nservers, as it is not designed for that.\n\n\nOutput Directory#\n\nRsbuild's build outputs typically includes HTML, JS, CSS, and other assets, and\nis output to the dist directory by default. The name and structure of the dist\ndirectory can be changed using some configuration options. See the Output Files\nsection for more information.\n\n\n\n\nAsset Prefix#\n\nWe can divide the build output into two parts: HTML files and static assets.\n\n * HTML files refer to files with the .html suffix in the output directory,\n   which usually need to be deployed on the server.\n * Static assets are located in the static directory of the output folder, which\n   contains assets such as JavaScript, CSS, and images. They can be deployed\n   either on the server or on a CDN.\n\nIf the static assets are deployed in a subdirectory of the server, you can\nconfigure output.assetPrefix as the base path:\n\n\n\nIf you want to place these static assets on a CDN for better performance, rather\nthan directly on the server like HTML, you will need to configure the\noutput.assetPrefix to the CDN address to allow the application to properly\nreference these static assets.\n\n\n\nIn this way, when referencing static assets in HTML, the specified prefix will\nbe automatically added, for example:\n\n\n\n\nGitHub Pages#\n\nGitHub Pages is a static site hosting service that takes HTML, CSS, and\nJavaScript files straight from a repository on GitHub\n\nThe following are step-by-step examples on how to deploy on GitHub Pages.\n\n 1. Set the URL prefix for static assets through output.assetPrefix.\n\n\n\n 2. Open the \"Settings\" page of GitHub repository, click \"Pages\" from the left\n    menu to access the configuration page of GitHub Pages.\n 3. Select \"Source\" -> \"GitHub Actions\" and click \"create your own\" to create a\n    GitHub Action config file.\n 4. Paste the following content into the input box and name the file\n    github-pages.yml (you can adjust the content and name of the file as\n    needed).\n\n\n\n 5. Commit and wait for GitHub Actions to execute. Once it's done, you can visit\n    https://.github.io// to view the deployed page.\n\n\nNetlify#\n\nNetlify Core is a frontend cloud solution for developers to build and deploy\nfuture-proof digital solutions with modern, composable tooling.\n\n\nAdd New Site#\n\nNetlify provides a detailed guide, you can follow the instructions in Netlify -\nAdd new site, set up some basic information, and then you can start the\ndeployment.\n\nYou need to configure the following two fields:\n\n * Build command: fill in the build command of the project, it is typically npm\n   run build.\n * Publish directory: fill in the output directory in the project, the default\n   is dist.\n\nThen click on the Deploy site button to start the deployment.\n\n\nCustom Domains#\n\nIf you want to make your sites accessible at your own domain names, you can\nconfigure it in the \"Domain management\" section of Netlify.\n\n> Detailed guide: Netlify - Custom domains.\n\n\nVercel#\n\nVercel is a platform for developers that provides the tools, workflows, and\ninfrastructure you need to build and deploy your web apps faster, without the\nneed for additional configuration.\n\n\nAdd New Site#\n\nVercel provides a detailed guide that you can follow Vercel - Projects to create\na project in your dashboard and configure some basic information to start\ndeployment.\n\nYou only need to configure the fields under \"Build and Output Settings\":\n\n * Output directory: fill in the output directory in the project, the default is\n   dist.\n\nThen click the Deploy button to start the deployment.\n\n\nConfigure Domains#\n\nIf you want to make your sites accessible at your own domain names, you can\nconfigure it in the \"Domains\" section of Vercel.\n\n> Detailed guide: Vercel - Domains.\n\n\nCloudflare Pages#\n\nCloudflare Pages is a static site hosting platform provided by Cloudflare.\n\nYou can follow the Cloudflare Pages - Git integration guide to integrate with\nGit and deploy your site to Cloudflare Pages.\n\nWhen configuring, you need to fill in the following fields in the \"Build\nsettings\":\n\n * Build command: fill in the build command of the project, it is typically npm\n   run build.\n * Build output directory: fill in the output directory in the project, the\n   default is dist.\n\nThen click on the Save and Deploy button to start the deployment.","routePath":"/guide/basic/static-deploy","lang":"en","toc":[{"text":"Background Information","id":"background-information","depth":2,"charIndex":89},{"text":"Build Commands","id":"build-commands","depth":3,"charIndex":348},{"text":"Output Directory","id":"output-directory","depth":3,"charIndex":796},{"text":"Asset Prefix","id":"asset-prefix","depth":3,"charIndex":1088},{"text":"GitHub Pages","id":"github-pages","depth":2,"charIndex":2010},{"text":"Netlify","id":"netlify","depth":2,"charIndex":2841},{"text":"Add New Site","id":"add-new-site","depth":3,"charIndex":2994},{"text":"Custom Domains","id":"custom-domains","depth":3,"charIndex":3473},{"text":"Vercel","id":"vercel","depth":2,"charIndex":3673},{"text":"Add New Site","id":"add-new-site-1","depth":3,"charIndex":3873},{"text":"Configure Domains","id":"configure-domains","depth":3,"charIndex":4277},{"text":"Cloudflare Pages","id":"cloudflare-pages","depth":2,"charIndex":4461}],"domain":"","frontmatter":{},"version":""},{"id":134,"title":"Use Tailwind CSS","content":"#\n\nTailwind CSS is a CSS framework and design system based on utility class, which\ncan quickly add common styles to components, and support flexible extension of\ntheme styles.\n\nYou can integrate Tailwind CSS in Rsbuild via PostCSS plugins.\n\n\nInstalling Tailwind CSS#\n\nSince Rsbuild has built-in support for postcss and autoprefixer, you only need\nto install tailwindcss and there is no need to install other npm packages:\n\n\nConfiguring PostCSS#\n\nYou can register the tailwindcss PostCSS plugin through postcss.config.cjs or\ntools.postcss.\n\n\n\nTIP\n\nRsbuild has built-in autoprefixer, so you only need to register the tailwindcss\nplugin.\n\n\nConfiguring Tailwind CSS#\n\nCreate a tailwind.config.js file in the root directory of your project and add\nthe following content:\n\n\n\nTIP\n\nThe above configuration is for reference only and can be modified to suit the\nneeds of your project. For example, non-TypeScript projects do not need to\ninclude ts and tsx files.\n\nIt should be noted that the content option should include the paths to all\nsource files that contain Tailwind class names. For details, please refer to\ntailwindcss - Content Configuration.\n\n\n\n\nOther Configuration Methods#\n\n * You can directly pass the Tailwind CSS configuration to postcss.config.cjs:\n\n\n\n * You can also set the Tailwind CSS configuration through tools.postcss:\n\n\n\nBut we recommend placing the Tailwind CSS configuration in tailwind.config.*\nbecause other methods may cause the Tailwind CSS build performance to degrade,\nrefer to tailwindcss/issues/14229.\n\n\nImporting CSS#\n\nAdd the @tailwind directives in your CSS entry file:\n\n\n\nDepending on your needs, you can selectively import the CSS styles provided by\nTailwind CSS. Please refer to the @tailwind documentation for detailed usage of\nthe @tailwind directives.\n\n\nDone#\n\nYou have now completed all the steps to integrate Tailwind CSS in Rsbuild!\n\nYou can use Tailwind's utility classes in any component or HTML, such as:\n\n\n\nFor more usage details, refer to the Tailwind CSS documentation.\n\n\nVS Code Extension#\n\nTailwind CSS provides a Tailwind CSS IntelliSense plugin for VS Code to\nautomatically complete Tailwind CSS class names, CSS functions, and directives.\n\nYou can install this plugin in VS Code to enable the autocompletion feature.\n\n\nBuild Performance#\n\nWhen using Tailwind CSS, if the content field in tailwind.config.js is not\ncorrectly configured, this can lead to poor build performance and HMR\nperformance. This is because Tailwind CSS internally matches files based on the\nglob defined in content. The more files it matches, the greater the performance\noverhead.\n\nTherefore, we recommend that you specify the paths to be scanned accurately to\navoid unnecessary performance overhead. For example, only include HTML or JS\nfiles in the project source code that actually contain Tailwind class names, and\navoid including irrelevant files or directories, especially the node_modules\ndirectory.\n\nHere is an bad example of scanning the node_modules:\n\n\n\n\nOptimize CSS Size#\n\nIf you need to optimize the size of Tailwind CSS styles, you can try\nrsbuild-plugin-tailwindcss.\n\nThis plugin reads the module graph information of Rspack, automatically sets the\naccurate content configuration to generate minimal Tailwind CSS styles.\n\n\n\n> See rsbuild-plugin-tailwindcss for more information.","routePath":"/guide/basic/tailwindcss","lang":"en","toc":[{"text":"Installing Tailwind CSS","id":"installing-tailwind-css","depth":2,"charIndex":241},{"text":"Configuring PostCSS","id":"configuring-postcss","depth":2,"charIndex":423},{"text":"Configuring Tailwind CSS","id":"configuring-tailwind-css","depth":2,"charIndex":636},{"text":"Other Configuration Methods","id":"other-configuration-methods","depth":3,"charIndex":1146},{"text":"Importing CSS","id":"importing-css","depth":2,"charIndex":1528},{"text":"Done","id":"done","depth":2,"charIndex":1787},{"text":"VS Code Extension","id":"vs-code-extension","depth":2,"charIndex":2014},{"text":"Build Performance","id":"build-performance","depth":2,"charIndex":2266},{"text":"Optimize CSS Size","id":"optimize-css-size","depth":2,"charIndex":2985}],"domain":"","frontmatter":{},"version":""},{"id":135,"title":"Use TypeScript","content":"#\n\nRsbuild supports TypeScript by default, allowing you to directly use .ts and\n.tsx files in your projects.\n\n\nTypeScript Transpilation#\n\nRsbuild uses SWC by default for transpiling TypeScript code, and it also\nsupports switching to Babel for transpilation.\n\n\nisolatedModules#\n\nUnlike the native TypeScript compiler, tools like SWC and Babel compile each\nfile separately and cannot determine whether an imported name is a type or a\nvalue. Therefore, when using TypeScript in Rsbuild, you need to enable the\nisolatedModules option in your tsconfig.json file:\n\n\n\nThis option can help you avoid using certain syntax that cannot be correctly\ncompiled by SWC and Babel, such as cross-file type references. It will guide you\nto correct the corresponding usage:\n\n\n\n> See SWC - Migrating from tsc for more details about the differences between\n> SWC and tsc.\n\n\nPreset types#\n\n@rsbuild/core provides some preset type definitions, including CSS Modules,\nstatic assets, import.meta and other types.\n\nYou can create a src/env.d.ts file to reference it:\n\n\n\n\nType Checking#\n\nWhen transpiling TypeScript code using tools like SWC and Babel, type checking\nis not performed.\n\nRsbuild provides the Type Check plugin, which runs TypeScript type checking in a\nseparate process. The plugin internally integrates ts-checker-rspack-plugin.\n\nPlease refer to the @rsbuild/plugin-type-check for usage instructions.\n\n\ntsconfig.json Path#\n\nRsbuild by default reads the tsconfig.json file from the root directory. You can\nuse the source.tsconfigPath to configure a custom tsconfig.json file path.\n\n\n\n\nPath Extensions#\n\nWhen importing another module in a TypeScript module, TypeScript allows using\nthe .js file extension:\n\n\n\nRsbuild supports this feature through Rspack's extensionAlias configuration. In\nTypeScript projects, Rsbuild adds the following configuration by default:\n\n\n\nThis means:\n\n * You can use the .js extension to import .ts or .tsx files.\n * You can use the .jsx extension to import .tsx files.","routePath":"/guide/basic/typescript","lang":"en","toc":[{"text":"TypeScript Transpilation","id":"typescript-transpilation","depth":2,"charIndex":110},{"text":"isolatedModules","id":"isolatedmodules","depth":3,"charIndex":259},{"text":"Preset types","id":"preset-types","depth":2,"charIndex":852},{"text":"Type Checking","id":"type-checking","depth":2,"charIndex":1044},{"text":"tsconfig.json Path","id":"tsconfigjson-path","depth":2,"charIndex":1390},{"text":"Path Extensions","id":"path-extensions","depth":2,"charIndex":1571}],"domain":"","frontmatter":{},"version":""},{"id":136,"title":"Use UnoCSS","content":"#\n\nUnoCSS is the instant atomic CSS engine, that is designed to be flexible and\nextensible. The core is un-opinionated, and all the CSS utilities are provided\nvia presets.\n\nYou can integrate UnoCSS in Rsbuild via PostCSS plugins.\n\n\nInstalling UnoCSS#\n\nYou need to install unocss and @unocss/postcss first.\n\n\nConfiguring PostCSS#\n\nYou can register the unocss PostCSS plugin through postcss.config.mjs or\ntools.postcss.\n\n\n\nRsbuild has integrated autoprefixer, so you only need to register the UnoCSS\nplugin.\n\n\nConfiguring UnoCSS#\n\nCreate a uno.config.ts file in the root directory of your project and add the\nfollowing content:\n\n\n\nTIP\n\nThe above configuration is for reference only and can be modified to suit the\nneeds of your project.\n\n\nImporting CSS#\n\nAdd the @unocss directives in your CSS entry file:\n\n\n\nDepending on your needs, you can selectively import the CSS styles provided by\nUnoCSS. Please refer to the unocss documentation for detailed usage of the\nUnoCSS.\n\n\nDone#\n\nYou have now completed all the steps to integrate UnoCSS in Rsbuild!\n\nYou can use UnoCSS's utility classes in any component or HTML, such as:\n\n\n\nFor more usage details, refer to the UnoCSS documentation.\n\n\nVS Code Extension#\n\nUnoCSS provides a VS Code Extension plugin for VS Code to decoration and tooltip\nfor matched utilities.\n\nYou can install this plugin in VS Code to enable more intelligent features.","routePath":"/guide/basic/unocss","lang":"en","toc":[{"text":"Installing UnoCSS","id":"installing-unocss","depth":2,"charIndex":231},{"text":"Configuring PostCSS","id":"configuring-postcss","depth":2,"charIndex":307},{"text":"Configuring UnoCSS","id":"configuring-unocss","depth":2,"charIndex":507},{"text":"Importing CSS","id":"importing-css","depth":2,"charIndex":736},{"text":"Done","id":"done","depth":2,"charIndex":970},{"text":"VS Code Extension","id":"vs-code-extension","depth":2,"charIndex":1183}],"domain":"","frontmatter":{},"version":""},{"id":137,"title":"Upgrade Rsbuild","content":"#\n\nThis section explains how to upgrade the project's Rsbuild dependencies to the\nlatest version.\n\n> Please see Releases to understand the Rsbuild release strategy.\n\n\nUsing Taze#\n\nWe recommend using Taze to upgrade the Rsbuild version. Taze is a CLI tool for\nupdating npm dependencies.\n\n\nUsage#\n\nRun the following command to upgrade all dependencies that include rsbuild in\ntheir names:\n\n\n\nThe result will look similar to:\n\n\n\nYou can also adjust the include pattern to match specific packages, for example,\nto upgrade only packages under the @rsbuild scope:\n\n\n\n\nOptions#\n\nHere are some examples of using taze options.\n\n * In a monorepo, you can add the -r option to upgrade recursively:\n\n\n\n * Add -l to upgrade locked versions:\n\n\n\n * To upgrade to a major version:\n\n\n\n> For more options, please refer to the taze documentation.","routePath":"/guide/basic/upgrade-rsbuild","lang":"en","toc":[{"text":"Using Taze","id":"using-taze","depth":2,"charIndex":166},{"text":"Usage","id":"usage","depth":3,"charIndex":287},{"text":"Options","id":"options","depth":3,"charIndex":561}],"domain":"","frontmatter":{},"version":""},{"id":138,"title":"Import Wasm Assets","content":"#\n\nRsbuild supports import WebAssembly assets in code.\n\nWhat is WebAssembly\n\nWebAssembly (Wasm) is a portable, high-performance binary format designed to\nexecute CPU-intensive computing tasks in modern web browsers, bringing\nperformance and reliability similar to native compiled code to the web platform.\n\n\nImport#\n\nYou can import a WebAssembly module directly in a JavaScript file:\n\n\n\nWebAssembly modules can also be imported via dynamic import:\n\n\n\nYou can also get the path of a WebAssembly module using the new URL syntax:\n\n\n\n\nOutput Directory#\n\nWhen a .wasm asset is imported, it will be output by Rsbuild to the\ndist/static/wasm directory by default.\n\nYou can change the output directory of .wasm files via output.distPath config.\n\n\n\n\nType Declaration#\n\nWhen you import a Wasm file in TypeScript code, you usually need to add the\ncorresponding type declaration.\n\nFor example, the add.wasm file exports an add() method, then you can create an\nadd.wasm.d.ts file in the same directory and add the corresponding type\ndeclaration:\n\n","routePath":"/guide/basic/wasm-assets","lang":"en","toc":[{"text":"Import","id":"import","depth":2,"charIndex":307},{"text":"Output Directory","id":"output-directory","depth":2,"charIndex":530},{"text":"Type Declaration","id":"type-declaration","depth":2,"charIndex":740}],"domain":"","frontmatter":{},"version":""},{"id":139,"title":"Use Web Workers","content":"#\n\nThis chapter introduces how to configure and use Web Workers in Rsbuild project.\n\nWeb Workers\n\nWeb Workers are a type of JavaScript program that runs in the background,\nindependently of other scripts, without affecting the performance of the page.\nThis makes it possible to run long-running scripts, such as ones that handle\ncomplex calculations or access remote resources, without blocking the user\ninterface or other scripts. Web workers provide an easy way to run tasks in the\nbackground and improve the overall performance of web applications.\n\n\nUse Web Workers#\n\n\nImport with Constructors#\n\nWeb Workers are first-class citizens of Rspack, which means you don't need any\nloader to use web workers directly in Rspack or Rsbuild projects.\n\nFor example, create a file called worker.js:\n\n\n\nThen use this worker in the main thread:\n\n\n\nFor more details, please refer to Rspack - Web Workers.\n\n\nUsing worker-loader#\n\n> worker-loader is no longer maintained, it is recommended to use the new\n> Worker() syntax.\n\nIf your project already uses worker-loader, or you want to use the inline and\nother features provided by worker-loader, you can use worker-rspack-loader as an\nalternative to worker-loader in the Rsbuild or Rspack project.\n\n\n\n\nLoading scripts from remote URLs (cross-origin)#\n\nBy default, the worker script will be emitted as a separate chunk. This script\nsupports uploading to CDN, but must obey the same-origin policy.\n\nIf you want your worker scripts to be accessible across domains, a common\nsolution is to load via importScripts (not subject to CORS), you can refer to\nthe following code:\n\n\n\nFor detailed discussions on cross-domain issues, please refer to Discussions -\nwebpack 5 web worker support for CORS?\n\n\nBuild Web Workers outputs#\n\nRsbuild supports building Web Workers outputs independently, which is helpful\nwhen you need to provide Web Workers outputs for use by other applications.\n\nYou can set Rsbuild's output.target configuration to 'web-worker', and Rsbuild\nwill generate build outputs suitable for the Web Workers environment.\n\n","routePath":"/guide/basic/web-workers","lang":"en","toc":[{"text":"Use Web Workers","id":"use-web-workers-1","depth":2,"charIndex":-1},{"text":"Import with Constructors","id":"import-with-constructors","depth":3,"charIndex":571},{"text":"Using worker-loader","id":"using-worker-loader","depth":3,"charIndex":894},{"text":"Loading scripts from remote URLs (cross-origin)","id":"loading-scripts-from-remote-urls-cross-origin","depth":3,"charIndex":1236},{"text":"Build Web Workers outputs","id":"build-web-workers-outputs","depth":2,"charIndex":1726}],"domain":"","frontmatter":{},"version":""},{"id":140,"title":"Build Profiling","content":"#\n\nPerforming a performance analysis can help you identify performance bottlenecks\nin your project, allowing for targeted optimization.\n\n\nUsing Rsdoctor#\n\nRsdoctor is a build analyser that can visually display the compilation time of\neach loaders and plugins.\n\nPlease refer to Use Rsdoctor for more information.\n\n\nNode.js Profiling#\n\nWhen Rsbuild executes a build, it will include the runtime overhead of both\nJavaScript and Rust code, and the overhead of data communication between\nJavaScript and Rust.\n\nIn general, the performance overhead on the JavaScript side will be greater than\nthat on the Rust side. You can use Node.js profiling to analyze the overhead on\nthe JS side, which helps to identify performance bottlenecks on the JS side.\n\nFor example, to perform the CPU profiling analysis, run the following command in\nthe root directory of your project:\n\n\n\nThe above commands will generate a *.cpuprofile file. We can use speedscope to\nvisualize this file:\n\n\n\n\nRspack Profiling#\n\nRsbuild supports the use of the RSPACK_PROFILE environment variable for Rspack\nbuild performance profile.\n\n\n\nThe command will generate a rspack-profile-${timestamp} folder in the dist\nfolder, and it will contain logging.json, trace.json and jscpuprofile.json\nfiles:\n\n * trace.json: The time spent on each phase of the Rust side is recorded at a\n   granular level using tracing and can be viewed using ui.perfetto.dev.\n * jscpuprofile.json: The time spent at each stage on the JavaScript side is\n   recorded at a granular level using Node.js inspector and can be viewed using\n   speedscope.app.\n * logging.json: Includes some logging information that keeps a coarse-grained\n   record of how long each phase of the build took. (Not supported in\n   development mode yet)\n\n> For more information about Rspack build performance analysis, please refer to\n> Rspack - Profiling.","routePath":"/guide/debug/build-profiling","lang":"en","toc":[{"text":"Using Rsdoctor","id":"using-rsdoctor","depth":2,"charIndex":137},{"text":"Node.js Profiling","id":"nodejs-profiling","depth":2,"charIndex":313},{"text":"Rspack Profiling","id":"rspack-profiling","depth":2,"charIndex":967}],"domain":"","frontmatter":{},"version":""},{"id":141,"title":"Debug Mode","content":"#\n\nRsbuild provides a debug mode to troubleshoot problems, you can add the\nDEBUG=rsbuild environment variable when building to enable Rsbuild's debug mode.\n\n\n\nIn debug mode, Rsbuild will output some additional log information, and write\nthe Rsbuild config and Rspack config to the dist directory, which is convenient\nfor developers to view and debug.\n\n\nLog Information#\n\nIn debug mode, you will see some logs in the terminal starting with rsbuild,\nincluding internal operations performed by Rsbuild and the current version of\nRspack being used.\n\n\n\nIn addition, the following logs will be output in the terminal, indicating that\nthe Rsbuild has written the internally generated build configs to disk, and you\ncan open these config files to view the corresponding content.\n\n\n\n\nRsbuild Config File#\n\nIn debug mode, Rsbuild will automatically generate\ndist/.rsbuild/rsbuild.config.mjs file, which contains the final generated\nRsbuild config. In this file, you can know the final result of the Rsbuild\nconfig you passed in after being processed by the framework and Rsbuild.\n\nThe structure of the file is as follows:\n\n\n\nFor a complete introduction to Rsbuild config, please see the Configure Rsbuild\nchapter.\n\n\nRspack Config File#\n\nRsbuild will also automatically generate dist/.rsbuild/rspack.config.web.mjs\nfile, which contains the final generated Rspack config. In this file, you can\nsee what is included in the config that Rsbuild finally passes to Rspack.\n\nThe structure of the file is as follows:\n\n\n\nFor a complete introduction to Rspack configs, please see Rspack official\ndocumentation.","routePath":"/guide/debug/debug-mode","lang":"en","toc":[{"text":"Log Information","id":"log-information","depth":2,"charIndex":352},{"text":"Rsbuild Config File","id":"rsbuild-config-file","depth":2,"charIndex":774},{"text":"Rspack Config File","id":"rspack-config-file","depth":2,"charIndex":1205}],"domain":"","frontmatter":{},"version":""},{"id":142,"title":"Use Rsdoctor","content":"#\n\nRsdoctor is a build analyzer that can visually display the build process, such\nas compilation time, code changes before and after compilation, module reference\nrelationships, duplicate modules, etc.\n\nIf you need to debug the build outputs or build process, you can use Rsdoctor\nfor troubleshooting.\n\n\nQuick Start#\n\nIn a Rsbuild-based project, you can enable Rsdoctor as follows:\n\n 1. Install the Rsdoctor plugin:\n\n 2. Add RSDOCTOR=true env variable before the CLI command:\n\n\n\nSince the Windows system does not support the above usage, you can also use\ncross-env to set environment variables. This ensures compatibility across\ndifferent systems:\n\n\n\nAfter running the above commands, Rsbuild will automatically register the\nRsdoctor plugin, and after the build is completed, it will open the build\nanalysis page. For complete features, please refer to Rsdoctor document.\n\n\nOptions#\n\nIf you need to configure the options provided by the Rsdoctor plugin, please\nmanually register the Rsdoctor plugin:\n\n","routePath":"/guide/debug/rsdoctor","lang":"en","toc":[{"text":"Quick Start","id":"quick-start","depth":2,"charIndex":303},{"text":"Options","id":"options","depth":2,"charIndex":873}],"domain":"","frontmatter":{},"version":""},{"id":143,"title":"Exceptions FAQ","content":"#\n\n\nFind ESNext code in the compiled files?#\n\nBy default, Rsbuild does not compile JavaScript files under node_modules. If an\nnpm package used in the project contains ESNext syntax, it will be bundled into\nthe output.\n\nWhen this happens, you can specify directories or modules that need to be\ncompiled additionally through the source.include configuration option.\n\n--------------------------------------------------------------------------------\n\n\nCompile error Error: [object Object] is not a PostCSS plugin ?#\n\nCurrently, Rsbuild is using PostCSS v8. If you encounter the Error: [object\nObject] is not a PostCSS plugin error during the compilation process, it is\nusually caused by referencing the wrong version of PostCSS, for example, the\nversion of postcss (peerDependencies) in cssnano does not meet expectations.\n\nYou can find the dependencies of UNMET PEER DEPENDENCY through npm ls postcss,\nand then install the correct version of dependencies by specifying the PostCSS\nversion in package.json.\n\n\n\n--------------------------------------------------------------------------------\n\n\nCompile error You may need additional loader?#\n\nIf the following error message is encountered during the compilation process, it\nmeans that there are individual files that cannot be compiled correctly.\n\n\n\nPlease check if any file formats not supported by Rsbuild are being referenced,\nand configure the corresponding Rspack loader to compile them.\n\n--------------------------------------------------------------------------------\n\n\nCompilation error export 'foo' (imported as 'foo') was not found in './utils'?#\n\nIf you encounter this error during the compilation process, it means that your\ncode is referencing an export that does not exist.\n\nFor example, in the following code, index.ts is importing the foo variable from\nutils.ts, but utils.ts only exports the bar variable.\n\n\n\nIn this case, Rsbuild will throw the following error:\n\n\n\nIf you encounter this issue, the first step is to check the import/export\nstatements in your code and correct any invalid code.\n\nThere are some common mistakes:\n\n * Importing a non-existent variable:\n\n\n\n * Re-exporting a type without adding the type modifier, causing transpilers\n   like SWC or Babel to fail in recognizing the type export, resulting in\n   compilation errors.\n\n\n\nIn some cases, the error may be caused by a third-party dependency that you\ncannot modify directly. In this situation, if you are sure that the issue does\nnot affect your application, you can add the following configuration to change\nthe log level from error to warn:\n\n\n\nHowever, it is important to contact the developer of the third-party dependency\nimmediately to fix the issue.\n\n> You can refer to the Rspack documentation for more details on\n> module.parser.javascript.exportsPresence.\n\n--------------------------------------------------------------------------------\n\n\nTree shaking does not take effect?#\n\nRsbuild will enable the tree shaking of Rspack by default during the production\nbuild. Whether tree shaking can take effect depends on whether the code can meet\nthe conditions of Rspack's tree shaking.\n\nIf you find that tree shaking is not working as expected, you can check whether\nthe sideEffects config of the related npm package is correct. If you do not\nunderstand the role of sideEffects, or if you are interested in the principles\nbehind tree shaking, you can read Rspack Official Documentation - Tree Shaking.\n\n--------------------------------------------------------------------------------\n\n\nJavaScript heap out of memory when compiling?#\n\nThis error indicates that there is a memory overflow problem during the\npackaging process. In most cases, it is because the bundled content exceeds the\ndefault memory limit of Node.js.\n\nIn case of OOM issues, the easiest way to fix this is by increasing the memory\ncap, Node.js provides the --max-old-space-size option to set this. You can set\nthis parameter by adding NODE_OPTIONS before the CLI command.\n\nFor example, add parameters before the rsbuild build command:\n\n\n\nIf you are executing other commands, such as rsbuild dev, please add parameters\nbefore the corresponding command.\n\nThe value of the max_old_space_size parameter represents the upper limit of the\nmemory size (MB). Generally, it can be set to 16384 (16GB).\n\nThe following parameters are explained in more detail in the official Node.js\ndocumentation:\n\n * NODE_OPTIONS\n * --max-old-space-size\n\nIn addition to increasing the memory limit, it is also a solution to improve\nefficiency by enabling some compilation strategies, please refer to Improve\nBuild Performance.\n\nIf the above methods cannot solve your problem, it may be that some abnormal\nlogic in the project has caused memory overflow. You can debug recent code\nchanges and locate the root cause of problems. If it cannot be located, please\ncontact us.\n\n--------------------------------------------------------------------------------\n\n\nCan't resolve 'core-js/modules/abc.js' when compiling?#\n\nIf you get an error similar to the following when compiling, it means that\ncore-js cannot be resolved properly in the project.\n\n\n\nUsually, you don't need to install core-js in the project, because the Rsbuild\nalready has a built-in core-js v3.\n\nIf there is an error that core-js cannot be found, there may be several reasons:\n\n 1. The current project overrides the built-in alias configuration of Rsbuild,\n    causing the incorrect resolution of the core-js path when referenced. In\n    this case, you can check the alias configuration of the project.\n 2. Some code in the project depends on core-js v2. In this case, you usually\n    need to find out the corresponding code and upgrade core-js to the v3.\n 3. An npm package in node_modules imported core-js, but does not declare the\n    core-js dependency in dependencies. In this case, you need to declare the\n    core-js dependency in the corresponding npm package, or install a copy of\n    core-js in the project root directory.","routePath":"/guide/faq/exceptions","lang":"en","toc":[{"text":"Find ESNext code in the compiled files?","id":"find-esnext-code-in-the-compiled-files","depth":3,"charIndex":3},{"text":"Compile error `Error: [object Object] is not a PostCSS plugin` ?","id":"compile-error-error-object-object-is-not-a-postcss-plugin-","depth":3,"charIndex":-1},{"text":"Compile error `You may need additional loader`?","id":"compile-error-you-may-need-additional-loader","depth":3,"charIndex":-1},{"text":"Compilation error `export 'foo' (imported as 'foo') was not found in './utils'`?","id":"compilation-error-export-foo-imported-as-foo-was-not-found-in-utils","depth":3,"charIndex":-1},{"text":"Tree shaking does not take effect?","id":"tree-shaking-does-not-take-effect","depth":3,"charIndex":2880},{"text":"`JavaScript heap out of memory` when compiling?","id":"javascript-heap-out-of-memory-when-compiling","depth":3,"charIndex":-1},{"text":"`Can't resolve 'core-js/modules/abc.js'` when compiling?","id":"cant-resolve-core-jsmodulesabcjs-when-compiling","depth":3,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":144,"title":"Features FAQ","content":"#\n\n\nHow to import UI Component library on demand?#\n\nIf you need to configure the on-demand import of the component library, you can\nconfigure it through source.transformImport, which is equivalent to\nbabel-plugin-import.\n\n\n\n--------------------------------------------------------------------------------\n\n\nHow to run ESLint during compilation?#\n\nFor the sake of compilation performance, Rsbuild will not perform ESLint\nverification during the compilation process by default. If you require this\nfeature, you can use Rsbuild's ESLint plugin.\n\n--------------------------------------------------------------------------------\n\n\nHow to configure CDN path for static assets?#\n\nIf you need to upload static assets such as JS and CSS to CDN for use, you can\nset the URL prefix of static assets through the output.assetPrefix\nconfiguration.\n\n\n\n--------------------------------------------------------------------------------\n\n\nHow to remove console after production build?#\n\nFor the production build, we can remove the console from the code, so as to\navoid the log of the development mode being output to the production.\n\nRsbuild provides a configuration option to remove console by default, please see\nperformance.removeConsole.\n\n--------------------------------------------------------------------------------\n\n\nHow to view the final generated Rspack configuration?#\n\nBy using the Rsbuild debug mode, you can view the Rspack configuration generated\nby Rsbuild.\n\nYou can enable the debug mode of Rsbuild by adding the DEBUG=rsbuild environment\nvariable when performing the build. In this mode, the internally generated\nRspack configuration will be outputted to the \"dist\" directory.\n\n\n\n--------------------------------------------------------------------------------\n\n\nHow to ignore specific warnings?#\n\nBy default, Rsbuild will print all error and warning logs generated by the build\nprocess.\n\nIf a large number of warning logs are generated due to the three-party package,\nit cannot be processed temporarily, and you want to ignore it. Specific warning\nlogs can be ignored through the ignoreWarnings configuration provided by Rspack.\n\n\n\nFor details, please refer to: ignoreWarnings.","routePath":"/guide/faq/features","lang":"en","toc":[{"text":"How to import UI Component library on demand?","id":"how-to-import-ui-component-library-on-demand","depth":3,"charIndex":3},{"text":"How to run ESLint during compilation?","id":"how-to-run-eslint-during-compilation","depth":3,"charIndex":306},{"text":"How to configure CDN path for static assets?","id":"how-to-configure-cdn-path-for-static-assets","depth":3,"charIndex":625},{"text":"How to remove console after production build?","id":"how-to-remove-console-after-production-build","depth":3,"charIndex":919},{"text":"How to view the final generated Rspack configuration?","id":"how-to-view-the-final-generated-rspack-configuration","depth":3,"charIndex":1306},{"text":"How to ignore specific warnings?","id":"how-to-ignore-specific-warnings","depth":3,"charIndex":1762}],"domain":"","frontmatter":{},"version":""},{"id":145,"title":"General FAQ","content":"#\n\n\nWhat is the relationship between Rsbuild and Rspack?#\n\nRspack is the base bundler for Rsbuild. The goal of Rsbuild is to provide\nout-of-the-box building capabilities for Rspack users, allowing developers to\nstart a web project with zero configuration.\n\nThe main differences between Rspack and Rsbuild are:\n\n * Rspack projects need to be configured from scratch, while Rsbuild provides\n   default best practice configurations and supports extending Rspack\n   configurations.\n * Rspack projects require integration with loaders and plugins from the\n   community to support different scenarios, while Rsbuild provides official\n   plugins and default support for common frontend frameworks and build\n   capabilities.\n * The capabilities of Rspack CLI are comparable to webpack CLI, with relatively\n   streamlined functionality, while Rsbuild provides a more powerful CLI and a\n   more complete dev server.\n\n--------------------------------------------------------------------------------\n\n\nCan Rsbuild be used to build libraries or UI components?#\n\nRsbuild is out-of-the-box for building web applications.\n\nFor libraries and UI components, it is recommended to use Rslib, which is a\nlibrary development tool based on Rsbuild, and can reuse the configuration and\nplugins of Rsbuild.\n\n--------------------------------------------------------------------------------\n\n\nWhat is the relationship between Rsbuild and Modern.js?#\n\nModern.js is a progressive web development framework built on top of Rsbuild.\nThe building capabilities of Modern.js are based on Rsbuild.\n\nThe main differences between Modern.js and Rsbuild are:\n\n * Modern.js is based on React, while Rsbuild is not coupled with any frontend\n   UI framework.\n * Modern.js is a full-stack solution, providing runtime and server-side\n   capabilities, while Rsbuild is a build tool with other capabilities\n   extendable through plugins.\n * Modern.js has more built-in features, while Rsbuild pursues lightweight and\n   flexibility.","routePath":"/guide/faq/general","lang":"en","toc":[{"text":"What is the relationship between Rsbuild and Rspack?","id":"what-is-the-relationship-between-rsbuild-and-rspack","depth":3,"charIndex":3},{"text":"Can Rsbuild be used to build libraries or UI components?","id":"can-rsbuild-be-used-to-build-libraries-or-ui-components","depth":3,"charIndex":989},{"text":"What is the relationship between Rsbuild and Modern.js?","id":"what-is-the-relationship-between-rsbuild-and-modernjs","depth":3,"charIndex":1365}],"domain":"","frontmatter":{},"version":""},{"id":146,"title":"HMR FAQ","content":"#\n\n\nHow to troubleshooting HMR ineffective issues?#\n\nThere are several possible reasons why HMR may not be work. This document will\ncover most common causes and provide guidance for troubleshooting. Please refer\nto the following content for troubleshooting.\n\nBefore starting the troubleshooting process, it is helpful to have a basic\nunderstanding of how HMR works:\n\nHMR Principle\n 1. The browser establishes a WebSocket connection with the dev server for\n    real-time communication.\n 2. Whenever the dev server finishes recompiling, it sends a notification to the\n    browser via the WebSocket. The browser then sends a hot-update.(js|json)\n    request to the dev server to load the newly compiled module.\n 3. After receiving the new module, if it is a React project, React Refresh, an\n    official React tool, is used to update React components. Other frameworks\n    have similar tools.\n\nAfter understanding the principle of HMR, you can follow these steps for basic\ntroubleshooting:\n\n1. Check the WebSocket Connection#\n\nOpen the browser console and check for the presence of the [HMR] connected. log.\n\n * If it is present, the WebSocket connection is working correctly. You can\n   continue with the following steps.\n * If it is not present, open the Network panel in Chrome and check the status\n   of the ws://[host]:[port]/rsbuild-hmr request. If the request is failed, this\n   indicates that the HMR failed because the WebSocket connection was not\n   successfully established.\n\nThere can be various reasons why the WebSocket connection fails to establish,\nsuch as using a network proxy that prevents the WebSocket request from reaching\nthe dev server. You can check whether the WebSocket request address matches your\ndev server address. If it does not match, you can configure the WebSocket\nrequest address using dev.client.\n\n2. Check the hot-update Requests#\n\nWhen you modify the code of a module and trigger a recompilation, the browser\nsends several hot-update.json and hot-update.js requests to the dev server to\nfetch the updated code.\n\nYou can try modifying a module and inspect the content of the\nhot-update.(js|json) requests. If the content of the request is the latest code,\nit indicates that the hot update request is working correctly.\n\nIf the content of the request is incorrect, it is likely due to a network proxy.\nCheck whether the address of the hot-update.(js|json) request matches your dev\nserver address. If it does not match, you need to adjust the proxy rules to\nroute the hot-update.(js|json) request to the dev server address.\n\n3. Check for Other Causes#\n\nIf the above two steps do not reveal any issues, it is possible that other\nfactors are causing the HMR to fail. For example, it could be that the code does\nnot meet React's requirements for HMR. You can refer to the following questions\nfor further troubleshooting.\n\n--------------------------------------------------------------------------------\n\n\nHMR not working when external React?#\n\nTo ensure that HMR works properly, we need to use the development builds of\nReact and ReactDOM.\n\nIf you exclude React via externals when bundling, the production build of React\nis usually injected through CDN, and this can cause HMR to fail.\n\n\n\nTo solve this problem, you need to reference the React development artifacts and\ninstall React DevTools, then hot reloading will work properly.\n\nIf you are unsure about the type of React build you are using, you can refer to\nthe React documentation - Use the Production Build.\n\n--------------------------------------------------------------------------------\n\n\nHMR not working when setting filename hash in development mode?#\n\nUsually, we only set the filename hash in the production mode (i.e., when\nprocess.env.NODE_ENV === 'production').\n\nIf you set the filename hash in the development mode, it may cause HMR to fail\n(especially for CSS files). This is because every time the file content changes,\nthe hash value changes, preventing tools like mini-css-extract-plugin from\nreading the latest file content.\n\n * Correct usage:\n\n\n\n * Incorrect usage:\n\n\n\n--------------------------------------------------------------------------------\n\n\nHMR not working when use https?#\n\nIf https is enabled, the HMR connection may fail due to a certificate issue, and\nif you open the console, you will get an HMR connect failed error.\n\n\n\nThe solution to this problem is to click on \"Advanced\" -> \"Proceed to some page\n(unsafe)\" on the Chrome problem page.\n\n> Tips: When accessing the page through Localhost, the words \"Your connection is\n> not private\" may not appear and can be handled by visiting the Network domain.","routePath":"/guide/faq/hmr","lang":"en","toc":[{"text":"How to troubleshooting HMR ineffective issues?","id":"how-to-troubleshooting-hmr-ineffective-issues","depth":3,"charIndex":3},{"text":"1. Check the WebSocket Connection","id":"1-check-the-websocket-connection","depth":4,"charIndex":987},{"text":"2. Check the hot-update Requests","id":"2-check-the-hot-update-requests","depth":4,"charIndex":1831},{"text":"3. Check for Other Causes","id":"3-check-for-other-causes","depth":4,"charIndex":2557},{"text":"HMR not working when external React?","id":"hmr-not-working-when-external-react","depth":3,"charIndex":2934},{"text":"HMR not working when setting filename hash in development mode?","id":"hmr-not-working-when-setting-filename-hash-in-development-mode","depth":3,"charIndex":3579},{"text":"HMR not working when use https?","id":"hmr-not-working-when-use-https","depth":3,"charIndex":4156}],"domain":"","frontmatter":{},"version":""},{"id":147,"title":"Preact","content":"#\n\nIn this document, you will learn how to build a Preact application using\nRsbuild.\n\n\nCreate Preact Project#\n\nYou can use create-rsbuild to create a project with Rsbuild + Preact. Just\nexecute the following command:\n\nThen select Preact when prompted to \"Select framework\".\n\n\nUse Preact in an existing project#\n\nTo compile Preact, you need to register the Rsbuild Preact Plugin. The plugin\nwill automatically add the necessary configuration for Preact builds.\n\nFor example, register in rsbuild.config.ts:\n\n\n\n\nPreact Fast Refresh#\n\nPreact plugin uses @preact/prefresh and @rspack/plugin-preact-refresh to hot\nreload Preact components.\n\n\nRecognition#\n\nPrefresh need to be able to recognize your components, this means that\ncomponents should start with a capital letter and hook should start with use\nfollowed by a capital letter. This allows the plugin to effectively recognize\nthese.\n\nDo note that a component as seen below is not named:\n\n\n\nInstead do:\n\n\n\nWhen you are working with HOC's be sure to lift up the displayName so the plugin\ncan recognize it as a component.","routePath":"/guide/framework/preact","lang":"en","toc":[{"text":"Create Preact Project","id":"create-preact-project","depth":2,"charIndex":86},{"text":"Use Preact in an existing project","id":"use-preact-in-an-existing-project","depth":2,"charIndex":275},{"text":"Preact Fast Refresh","id":"preact-fast-refresh","depth":2,"charIndex":508},{"text":"Recognition","id":"recognition","depth":3,"charIndex":635}],"domain":"","frontmatter":{},"version":""},{"id":148,"title":"React","content":"#\n\nIn this document, you will learn how to build a React application using Rsbuild.\n\n\nCreate React Project#\n\nYou can use create-rsbuild to create a project with Rsbuild + React. Just\nexecute the following command:\n\nThen select React when prompted to \"Select framework\".\n\n\nUse React in an existing project#\n\nTo compile React, you need to register the Rsbuild React Plugin. The plugin will\nautomatically add the necessary configuration for React builds.\n\nFor example, register in rsbuild.config.ts:\n\n\n\nTIP\n\nFor projects using Create React App, you can refer to the CRA Migration Guide.\n\n\nUse SVGR#\n\nRsbuild supports convert SVG to React components via SVGR.\n\nIf you need to use svgr, you also need to register the SVGR plugin.\n\n\nReact Fast Refresh#\n\nRsbuild uses React's official Fast Refresh capability to perform component hot\nupdates.\n\nNote that React Refresh requires components to be written according to the\nstandards. Otherwise HMR may not work. You can use eslint-plugin-react-refresh\nfor validation.\n\nFor example, if the hot update of the React component cannot take effect, or the\nstate of the React component is lost after the hot update, it is usually because\nyour React component uses an anonymous function. In the official practice of\nReact Fast Refresh, it is required that the component cannot be an anonymous\nfunction, otherwise the state of the React component cannot be preserved after\nhot update.\n\nHere are some examples of wrong usage:\n\n\n\nThe correct usage is to declare a name for each component function:\n\n\n\n\nReact Compiler#\n\nReact Compiler is an experimental compiler introduced in React 19 that can\nautomatically optimize your React code.\n\nBefore you start using React Compiler, it's recommended to read the React\nCompiler documentation to understand the functionality, current state, and usage\nof the React Compiler.\n\n\nHow to use#\n\nThe steps to use React Compiler in Rsbuild:\n\n 1. Upgrade versions of react and react-dom to 19. If you are unable to upgrade,\n    you can install the extra react-compiler-runtime package which will allow\n    the compiled code to run on versions prior to 19.\n 2. React Compiler currently only provides a Babel plugin, you need to install\n    @rsbuild/plugin-babel and babel-plugin-react-compiler.\n 3. Register the Babel plugin in your Rsbuild config file:\n\n\n\n> You can also refer to the example project.\n\n\nConfiguration#\n\nSet the config for React Compiler as follows:\n\n\n\nFor React 17 and 18 projects, you need to install react-compiler-runtime and\nspecify the target:\n\n\n\n\nRouter#\n\n\nTanStack Router#\n\nTanStack Router is a fully type-safe React router with built-in data fetching,\nstale-while revalidate caching and first-class search-param APIs.\n\nTanStack Router provides @tanstack/router-plugin to integrate with Rsbuild,\nwhich provides support for file-based routing. See:\n\n * File-Based Routing documentation\n * TanStack Router + Rsbuild Example\n\n\nCSS-in-JS#\n\n\nUse styled-components#\n\nRsbuild supports compiling styled-components, improve the debugging experience\nand add server-side rendering support to styled-components.\n\nIf you need to use styled-components, We recommend using the\n@rsbuild/plugin-styled-components.\n\n> You can refer to this example: styled-components.\n\n\nUsing Emotion#\n\nRsbuild supports compiling Emotion, you can add the following configuration to\nuse:\n\n * swcReactOptions.importSource\n * @swc/plugin-emotion\n\n\n\n> You can refer to this example: emotion.\n\n\nUse styled-jsx#\n\nYou can use styled-jsx through @swc/plugin-styled-jsx:\n\n\n\nPlease note, you must select the SWC plugin that matches the current version of\n@swc/core for SWC to work, see tools.swc.\n\n> You can refer to this example: styled-jsx.\n\n\nUse vanilla-extract#\n\nRsbuild supports @vanilla-extract/webpack-plugin. You can add the following\nconfig to use vanilla-extract:\n\n\n\n> You can refer to this example: vanilla-extract.\n\n\nUse StyleX#\n\nYou can use StyleX via unplugin-stylex:\n\n\n\n> You can refer to this example: stylex.","routePath":"/guide/framework/react","lang":"en","toc":[{"text":"Create React Project","id":"create-react-project","depth":2,"charIndex":85},{"text":"Use React in an existing project","id":"use-react-in-an-existing-project","depth":2,"charIndex":271},{"text":"Use SVGR","id":"use-svgr","depth":2,"charIndex":585},{"text":"React Fast Refresh","id":"react-fast-refresh","depth":2,"charIndex":726},{"text":"React Compiler","id":"react-compiler","depth":2,"charIndex":1529},{"text":"How to use","id":"how-to-use","depth":3,"charIndex":1842},{"text":"Configuration","id":"configuration","depth":3,"charIndex":2360},{"text":"Router","id":"router","depth":2,"charIndex":2526},{"text":"TanStack Router","id":"tanstack-router","depth":3,"charIndex":2536},{"text":"CSS-in-JS","id":"css-in-js","depth":2,"charIndex":2904},{"text":"Use styled-components","id":"use-styled-components","depth":3,"charIndex":2917},{"text":"Using Emotion","id":"using-emotion","depth":3,"charIndex":3232},{"text":"Use styled-jsx","id":"use-styled-jsx","depth":3,"charIndex":3435},{"text":"Use vanilla-extract","id":"use-vanilla-extract","depth":3,"charIndex":3680},{"text":"Use StyleX","id":"use-stylex","depth":3,"charIndex":3864}],"domain":"","frontmatter":{},"version":""},{"id":149,"title":"Solid","content":"#\n\nIn this document, you will learn how to build a Solid application using Rsbuild.\n\n\nCreate Solid Project#\n\nYou can use create-rsbuild to create a project with Rsbuild + Solid. Just\nexecute the following command:\n\nThen select Solid when prompted to \"Select framework\".\n\n\nUse Solid in an existing project#\n\nTo compile Solid components, you need to register the Rsbuild Solid plugin. The\nplugin will automatically add the necessary configuration for Solid builds.\n\nFor example, register in rsbuild.config.ts:\n\n","routePath":"/guide/framework/solid","lang":"en","toc":[{"text":"Create Solid Project","id":"create-solid-project","depth":2,"charIndex":85},{"text":"Use Solid in an existing project","id":"use-solid-in-an-existing-project","depth":2,"charIndex":271}],"domain":"","frontmatter":{},"version":""},{"id":150,"title":"Svelte","content":"#\n\nIn this document, you will learn how to build a Svelte 5 or Svelte 4 application\nusing Rsbuild.\n\n\nCreate Svelte Project#\n\nYou can use create-rsbuild to create a project with Rsbuild + Svelte. Just\nexecute the following command:\n\nThen select Svelte 5 or Svelte 4 when prompted to \"Select framework\".\n\n\nUse Svelte in an existing project#\n\nTo compile Svelte components (.svelte files), you need to register the Rsbuild\nSvelte plugin. The plugin will automatically add the necessary configuration for\nSvelte builds.\n\nFor example, register in rsbuild.config.ts:\n\n","routePath":"/guide/framework/svelte","lang":"en","toc":[{"text":"Create Svelte Project","id":"create-svelte-project","depth":2,"charIndex":100},{"text":"Use Svelte in an existing project","id":"use-svelte-in-an-existing-project","depth":2,"charIndex":303}],"domain":"","frontmatter":{},"version":""},{"id":151,"title":"Vue","content":"#\n\nIn this document, you will learn how to build a Vue 3 or Vue 2 application using\nRsbuild.\n\n\nCreate Vue Project#\n\nYou can use create-rsbuild to create a project with Rsbuild + Vue. Just execute\nthe following command:\n\nThen select Vue 3 or Vue 2 when prompted to \"Select framework\".\n\n\nVue 3#\n\n\nUse Vue in an existing project#\n\nTo compile Vue SFC (Single File Components), you need to register the Rsbuild\nVue plugin. The plugin will automatically add the necessary configuration for\nVue builds.\n\nFor example, register in rsbuild.config.ts:\n\n\n\nTIP\n\nFor projects using Vue CLI, you can refer to the Vue CLI Migration Guide.\n\n\nUse the JSX syntax of Vue#\n\nIf you need to use the JSX syntax of Vue, you also need to register the\n@rsbuild/plugin-vue-jsx.\n\n\nTypeScript Support#\n\nRsbuild supports compiling TypeScript by default.\n\nPlease refer to the TypeScript - IDE Support section of the Vue documentation to\nlearn how to set up Vue TypeScript support in your IDE.\n\n\nVue 2#\n\n\nUse Vue 2 in an existing project#\n\nTo compile Vue SFC (Single File Components), you need to register the Rsbuild\nVue 2 plugin. The plugin will automatically add the necessary configuration for\nVue builds.\n\nFor example, register in rsbuild.config.ts:\n\n\n\nTIP\n * The Vue 2 plugin only supports Vue >= 2.7.0.\n * For projects using Vue CLI, you can refer to the Vue CLI Migration Guide.\n\n\nUse the JSX syntax of Vue#\n\nIf you need to use the JSX syntax of Vue, you also need to register the\n@rsbuild/plugin-vue2-jsx.\n\n\nType Declarations#\n\nIn a TypeScript project, you need to add type definitions for *.vue files so\nthat TypeScript can recognize them correctly.\n\nCreate env.d.ts in the src directory and add the following content:\n\n","routePath":"/guide/framework/vue","lang":"en","toc":[{"text":"Create Vue Project","id":"create-vue-project","depth":2,"charIndex":94},{"text":"Vue 3","id":"vue-3","depth":2,"charIndex":285},{"text":"Use Vue in an existing project","id":"use-vue-in-an-existing-project","depth":3,"charIndex":294},{"text":"Use the JSX syntax of Vue","id":"use-the-jsx-syntax-of-vue","depth":3,"charIndex":624},{"text":"TypeScript Support","id":"typescript-support","depth":3,"charIndex":751},{"text":"Vue 2","id":"vue-2","depth":2,"charIndex":962},{"text":"Use Vue 2 in an existing project","id":"use-vue-2-in-an-existing-project","depth":3,"charIndex":971},{"text":"Use the JSX syntax of Vue","id":"use-the-jsx-syntax-of-vue-1","depth":3,"charIndex":1355},{"text":"Type Declarations","id":"type-declarations","depth":3,"charIndex":1483}],"domain":"","frontmatter":{},"version":""},{"id":152,"title":"Create React App","content":"#\n\nThis chapter introduces how to migrate a Create React App (CRA) or CRACO project\nto Rsbuild.\n\nCRA eject\n\nIf your project has already run the CRA eject command, then most of the content\nin this document will no longer be applicable.\n\nAfter ejecting a CRA project, it becomes more like a project directly using\nwebpack, so you can refer to the webpack migration guide.\n\n\nInstalling Dependencies#\n\nFirst, you need to replace the npm dependencies of CRA with Rsbuild's\ndependencies.\n\n * Remove CRA dependencies:\n\n> For projects using CRACO, you can also remove the @craco/craco dependency.\n\n * Install Rsbuild dependencies:\n\n\nUpdating npm scripts#\n\nNext, you need to update the npm scripts in package.json to Rsbuild's CLI\ncommands.\n\n\n\nTIP\n\nRsbuild does not integrate testing frameworks, so it does not provide a command\nto replace react-scripts test. You can directly use testing frameworks such as\nJest or Vitest. You can refer to the Rsbuild react-jest example project for\nconfiguration.\n\n\nCreating Configuration File#\n\nCreate a Rsbuild configuration file rsbuild.config.ts in the same directory as\npackage.json and add the following content:\n\n\n\n\nHTML Template#\n\nCRA uses the public/index.html file as the default HTML template. In Rsbuild,\nyou can specify the HTML template through html.template:\n\n\n\nIn the HTML template, if you are using the %PUBLIC_URL% variable from CRA,\nreplace it with Rsbuild's assetPrefix variable and use a forward slash for\nconcatenation:\n\n\n\nThis completes the basic migration from CRA to Rsbuild. You can now run the npm\nrun start command to try starting the dev server.\n\n\nOutput Directory#\n\nBy default, CRA outputs to the build directory, while Rsbuild's default output\ndirectory is dist.\n\nYou can configure Rsbuild's output.distPath.root option to change the directory\nto build, in line with CRA:\n\n\n\n> For more details, please refer to the Output Files section.\n\n\nUsing CSS Preprocessors#\n\nRsbuild supports CSS preprocessors such as Sass and Less through plugins. Please\nrefer to:\n\n * Sass Plugin\n * Less Plugin\n * Stylus Plugin\n\n\nUsing SVGR#\n\nIf you are using the \"SVG to React Component\" feature of CRA (i.e., SVGR), you\nalso need to install the SVGR plugin for Rsbuild.\n\nFor example, if you are using the following usage:\n\n\n\nYou only need to install and register @rsbuild/plugin-svgr:\n\n\n\nPlease refer to the SVGR plugin documentation to learn how to use SVGR in\nRsbuild.\n\n\nConfiguration Migration#\n\nHere is the corresponding Rsbuild configuration for CRA configuration:\n\nCRA                       RSBUILD\nHOST                      server.host\nPORT                      server.port\nHTTPS                     server.https\nWDS_SOCKET_HOST           dev.client.host\nWDS_SOCKET_PATH           dev.client.path\nWDS_SOCKET_PORT           dev.client.port\nPUBLIC_URL                dev.assetPrefix / output.assetPrefix\nBUILD_PATH                output.distPath\nGENERATE_SOURCEMAP        output.sourceMap\nIMAGE_INLINE_SIZE_LIMIT   output.dataUriLimit\nFAST_REFRESH              dev.hmr\nTSC_COMPILE_ON_ERROR      @rsbuild/plugin-type-check\n\nNotes:\n\n * The above table does not cover all configurations of CRA, feel free to add\n   more.\n\n\nCompile node_modules#\n\nBy default, CRA uses Babel to compile dependencies in node_modules, but Rsbuild\ndoes not, to avoid the performance overhead and potential compilation errors\ncaused by secondary compilation.\n\nIf you need to handle syntax compatibility issues caused by dependencies in\nnode_modules, you can use the source.include config to compile node_modules.\n\n\nEnv Variables#\n\nCRA injects environment variables starting with REACT_APP_ into the client code\nby default, while Rsbuild injects environment variables starting with PUBLIC_ by\ndefault (see public variables).\n\nTo be compatible with CRA's behavior, you can manually call Rsbuild's loadEnv\nmethod to read environment variables starting with REACT_APP_, and inject them\ninto the client code through the source.define config.\n\n\n\nNote that CRA allows access to the full process.env object in the code and also\nallows destructuring of process.env. However, Rsbuild does not define the\nprocess.env object due to bundle size and security concerns.\n\n\n\nIn Rsbuild, you can use the source.define config to set process.env and read the\nrawPublicVars returned by the loadEnv method to allow the above usage:\n\n\n\n\nImport Unknown Assets#\n\nIn CRA, if you import an asset that the build tool cannot recognize, CRA will by\ndefault output the file to the build/static/media directory, for example, the\ndocument.pdf file:\n\n\n\nIn Rsbuild, when importing unrecognized assets, Rsbuild will logs errors:\n\n\n\nTo resolve this error, you can use the following methods:\n\n * Configure a suitable loader to handle this type of asset via tools.rspack.\n * Configure asset modules rule to handle this type of asset via tools.rspack.\n\nFor example, you can add the following asset modules config to get the same\noutput result as CRA:\n\n\n\n\nRemove react-app-polyfill#\n\nCRA provides react-app-polyfill to manually inject polyfill code.\n\nIn the Rsbuild project, you can remove the dependency and code related to\nreact-app-polyfill, as Rsbuild will automatically read the browserslist config\nand inject polyfill code as needed.\n\n\n\nYou can read Browser Compatibility to understand how Rsbuild handles polyfills.\n\n\nAdd ESLint plugin#\n\nCRA has the eslint-webpack-plugin enabled by default and includes a set of\nbuilt-in ESLint rules.\n\nIn an Rsbuild project, if you need similar functionality, you can add\n@rsbuild/plugin-eslint and use eslint-config-react-app as the ESLint ruleset.\n\n\n\n\nReading jsconfig.json#\n\nIn non-TypeScript projects, CRA supports reading the paths field in\njsconfig.json as the path alias.\n\nIf you want to use this feature in Rsbuild, you can refer to the Path Alias -\njsconfig.json.\n\n\nCRACO Migration#\n\nIf your project is using CRACO to override CRA configuration, you can refer to\nthe table below for migration:\n\nCRACO                    RSBUILD\nwebpack.configure        tools.rspack\nwebpack.alias            resolve.alias\nwebpack.plugins.add      appendPlugins of tools.rspack\nwebpack.plugins.remove   removePlugin of tools.rspack\nstyle.modules            output.cssModules\nstyle.css                tools.cssLoader\nstyle.sass               Sass Plugin\nstyle.postcss            tools.postcss\nbabel                    Babel Plugin\ntypescript               @rsbuild/plugin-type-check\ndevServer                server configs\n\n\nExample#\n\nHere is an example of migrating from webpack.configure to tools.rspack:\n\n * Before migration:\n\n\n\n * After migration:\n\n\n\n\nContents Supplement#\n\nThe current document only covers part of the migration process. If you find\nsuitable content to add, feel free to contribute to the documentation via pull\nrequest 🤝.\n\n> The documentation for rsbuild can be found in the rsbuild/website directory.","routePath":"/guide/migration/cra","lang":"en","toc":[{"text":"Installing Dependencies","id":"installing-dependencies","depth":2,"charIndex":371},{"text":"Updating npm scripts","id":"updating-npm-scripts","depth":2,"charIndex":624},{"text":"Creating Configuration File","id":"creating-configuration-file","depth":2,"charIndex":991},{"text":"HTML Template","id":"html-template","depth":2,"charIndex":1148},{"text":"Output Directory","id":"output-directory","depth":2,"charIndex":1602},{"text":"Using CSS Preprocessors","id":"using-css-preprocessors","depth":2,"charIndex":1895},{"text":"Using SVGR","id":"using-svgr","depth":2,"charIndex":2062},{"text":"Configuration Migration","id":"configuration-migration","depth":2,"charIndex":2407},{"text":"Compile node_modules","id":"compile-node_modules","depth":2,"charIndex":3159},{"text":"Env Variables","id":"env-variables","depth":2,"charIndex":3528},{"text":"Import Unknown Assets","id":"import-unknown-assets","depth":2,"charIndex":4327},{"text":"Remove react-app-polyfill","id":"remove-react-app-polyfill","depth":2,"charIndex":4928},{"text":"Add ESLint plugin","id":"add-eslint-plugin","depth":2,"charIndex":5297},{"text":"Reading jsconfig.json","id":"reading-jsconfigjson","depth":2,"charIndex":5568},{"text":"CRACO Migration","id":"craco-migration","depth":2,"charIndex":5789},{"text":"Example","id":"example","depth":3,"charIndex":6429},{"text":"Contents Supplement","id":"contents-supplement","depth":2,"charIndex":6560}],"domain":"","frontmatter":{},"version":""},{"id":153,"title":"Modern.js Builder","content":"#\n\nThis chapter introduces how to migrate a Modern.js Builder (or EdenX Builder)\nproject to Rsbuild.\n\n\nKey Differences#\n\nRsbuild is the new version of Modern.js Builder, with the following key\ndifferences:\n\n * Rsbuild has better performance. When using Rspack simultaneously, the startup\n   speed and build speed of Rsbuild are 1.5 to 2 times faster than Builder.\n * Rsbuild only supports Rspack as the bundler and no longer supports Webpack.\n * Rsbuild's CLI tool and dev server are more powerful and support more\n   features.\n\n\nInstalling Dependencies#\n\nFirst, you need to replace the npm dependencies related to Builder with\nRsbuild's dependencies.\n\n * Remove Builder's dependencies:\n\n * Install Rsbuild's dependencies:\n\n\nUpdating npm Scripts#\n\nNext, you need to update the npm scripts in the package.json to Rsbuild's CLI\ncommands.\n\n\n\n\nModifying Configuration Files#\n\n * Rename builder.config.ts to rsbuild.config.ts.\n * Change the import of the defineConfig method from @modern-js/builder-cli to\n   @rsbuild/core.\n * Change the builderPlugins field to plugins.\n\n\n\n\nReplacing Plugins#\n\nRsbuild and Builder have incompatible plugin systems, so you need to replace\nBuilder's plugins with Rsbuild's plugins.\n\nThe following table shows the correspondence between Builder plugins and Rsbuild\nplugins:\n\nBUILDER                                    RSBUILD\n@modern-js/builder-plugin-vue              @rsbuild/plugin-vue\n@modern-js/builder-plugin-vue2             @rsbuild/plugin-vue2\n@modern-js/builder-plugin-stylus           @rsbuild/plugin-stylus\n@modern-js/builder-plugin-node-polyfill    @rsbuild/plugin-node-polyfill\n@modern-js/builder-plugin-image-compress   @rsbuild/plugin-image-compress\n@modern-js/builder-plugin-swc              Enabled by default, no need to use\n@modern-js/builder-plugin-esbuild          No longer supported\n\nFor example, if you were using @modern-js/builder-plugin-vue, you need to first\ninstall @rsbuild/plugin-vue, then import the plugin in rsbuild.config.ts and add\nit to the plugins field.\n\n\n\n\nAdd React-related Plugins#\n\nRsbuild is not coupled with any front-end UI framework. Therefore, if you are a\nReact project, you need to manually add React Plugin:\n\n\n\nIf you are using SVGR in your current project, you also need to register SVGR\nPlugin:\n\n\n\nIf you are a user of other frameworks, you can refer to Rsbuild Plugin List to\nselect the corresponding framework plugin.\n\n\nConfiguration Migration#\n\nMost configs in Rsbuild and Builder are consistent, with only a few adjustments.\n\nYou can refer to the Rsbuild options to view the configs of Rsbuild.\n\nIt is worth noting that, compared to Builder, there are some differences in\ndefault values and behaviors in Rsbuild:\n\n * Browserslist: The default is minimum compatible with browsers that support\n   Native ES Modules, refer to Default Browserslist.\n * HTML file output path: default output to the root of dist directory, refer to\n   Default Directory Structure.\n * Polyfill injection method: Inject on demand by default, refer to\n   output.polyfill.\n * TypeScript type check: not enabled by default, you need to manually register\n   the @rsbuild/plugin-type-check.\n * Modify DevServer configuration: Modify dev and server configuration instead.\n\n\nValidating Results#\n\nAfter completing the above steps, you have migrated from Modern.js Builder to\nRsbuild. You can now try starting the dev server by running the npm run dev\ncommand.\n\nIf you encounter any issues during the build process, please debug according to\nthe error logs.\n\n\nContents Supplement#\n\nThe current document only covers part of the migration process. If you find\nsuitable content to add, feel free to contribute to the documentation via pull\nrequest 🤝.\n\n> The documentation for rsbuild can be found in the rsbuild/website directory.","routePath":"/guide/migration/modern-builder","lang":"en","toc":[{"text":"Key Differences","id":"key-differences","depth":2,"charIndex":102},{"text":"Installing Dependencies","id":"installing-dependencies","depth":2,"charIndex":529},{"text":"Updating npm Scripts","id":"updating-npm-scripts","depth":2,"charIndex":724},{"text":"Modifying Configuration Files","id":"modifying-configuration-files","depth":2,"charIndex":839},{"text":"Replacing Plugins","id":"replacing-plugins","depth":2,"charIndex":1069},{"text":"Add React-related Plugins","id":"add-react-related-plugins","depth":2,"charIndex":2023},{"text":"Configuration Migration","id":"configuration-migration","depth":2,"charIndex":2401},{"text":"Validating Results","id":"validating-results","depth":2,"charIndex":3226},{"text":"Contents Supplement","id":"contents-supplement","depth":2,"charIndex":3509}],"domain":"","frontmatter":{},"version":""},{"id":154,"title":"Migrating from Rsbuild 0.x","content":"#\n\nThe document lists all breaking changes from Rsbuild 0.7 to 1.0. You can refer\nto this document for migration.\n\n> See Breaking changes in Rsbuild v1.0.0 for details.\n\n\n[Important] Lightning CSS loader#\n\nRsbuild now enables lightningcss-loader by default to transform CSS files, it\nreplaces autoprefixer to add vendor prefixes and provides better performance.\n\n * @rsbuild/plugin-lightningcss has been deprecated and no longer needed.\n * tools.autoprefixer config has been removed.\n\nConsidering that Lightning CSS has some uncovered edge cases, you can still\nenable autoprefixer via the postcss config file:\n\n\n\n\n[Important] output.polyfill#\n\nRsbuild v1 set output.polyfill to 'off' by default, this can reduce the polyfill\ncode and generate smaller bundles by default.\n\nIf your application need polyfill, please set output.polyfill to 'usage' or\n'entry':\n\n\n\n\n[Important] source.decorators#\n\nRsbuild now uses 2022-11 decorators version by default. This allows Rsbuild to\nalign the default behavior with TypeScript >= 5.0 and esbuild >= 0.21.0.\n\nIf you are using the legacy decorators, you can add the following config:\n\n\n\n\n[Important] output.targets#\n\nTIP\n\nRsbuild v1 removes the output.targets option and the target parameters of\nsource.alias /source.entry and other configs, and instead configures it through\nenvironments to provide more flexible multi-environment config capabilities.\n\nCompared with the original options, environments has a wider coverage and can\nperform differentiated config of more configs in multiple environments. For\ndetails, please refer to Multiple-Environment Builds.\n\nRemoved output.targets config, use output.target and environments config\ninstead.\n\n * before:\n\n\n\n * after:\n\n\n\n\n[Important] Rspack Config Validation#\n\nRsbuild now enables Rspack's scheme validation by default to ensure the Rspack\nconfiguration is correct.\n\n * If there is a type error in the Rspack config object, an error will be thrown\n   and the build will be aborted.\n * If there are extra fields in the Rspack config object, an error will be\n   thrown, but the build will not fail.\n\n> For more details, see Rspack - RSPACK_CONFIG_VALIDATE.\n\n\nsource.alias#\n\nRemoved target param for source.alias function, use environments config instead.\n\n * before:\n\n\n\n * after:\n\n\n\n\nsource.entry#\n\nRemoved function usage of source.entry, use environments config instead.\n\n * before:\n\n\n\n * after:\n\n\n\n\noutput.overrideBrowserslist#\n\noutput.overrideBrowserslist no longer supports Record type, use environments\nconfig instead.\n\n * before:\n\n\n\n * after:\n\n\n\n\noutput.emitAssets#\n\noutput.emitAssets changed to boolean type, use environments config instead.\n\n * before:\n\n\n\n * after:\n\n\n\n\noutput.distPath.server#\n\nRemoved output.distPath.server, use the environments config instead.\n\n\n\n\noutput.minify.html#\n\nRsbuild v1 removed the output.minify.html and output.minify.htmlOptions options,\nand no longer minify the HTML files.\n\nPreviously Rsbuild uses html-minifier-terser to minify the HTML files. But the\nperformance of html-minifier-terser can not meet the needs of Rsbuild\napplications, and In most cases, there is little benefit in compressing HTML.\n\nAt this stage, Rsbuild will not built-in html-minifier-terser, so we provide a\nstandalone rsbuild-plugin-html-minifier-terser to support HTML minification.\n\n\n\nAnd we plan to use some faster Rust-based HTML minimizer in the future.\n\n\noutput.charset#\n\nThe default value of output.charset has been changed from ascii to utf8.\n\nIf you need to use ascii, you can add the following config:\n\n\n\n\ndev.startUrl#\n\ndev.startUrl has been renamed to server.open:\n\n\n\n\ndev.client.port#\n\nThe default value of dev.client.port changed from to '' (use location.port).\n\nUse the previous value if you want to keep the behavior:\n\n\n\n\nhtml.appIcon#\n\nPreviously, html.appIcon did not support for web app manifests, meaning it was\nonly available on iOS.\n\nNow html.appIcon supports generating web app manifests, and the type of\nhtml.appIcon has been changed.\n\n * before:\n\n\n\n * after:\n\n\n\n\nOthers#\n\nRsbuild 1.0 has made some adjustments and optimizations to plugins API and dev\nserver API.\n\nIncludes:\n\n * The onBeforeBuild hook supports triggering multiple times in watch mode.\n * Added onBeforeEnvironmentCompile and onAfterEnvironmentCompile hooks, which\n   are triggered before/after executing the build of a single environment\n   respectively.\n * Removed api.getHtmlPaths and replaced it with environment.htmlPaths.\n * Removed api.context.entry and replaced it with environment.entry.\n * Removed api.context.targets and replaced it with environment.target.\n * Removed rsbuildServer.onHTTPUpgrade and replaced it with\n   rsbuildServer.connectWebSocket.","routePath":"/guide/migration/rsbuild-0-x","lang":"en","toc":[{"text":"[Important] Lightning CSS loader","id":"important-lightning-css-loader","depth":2,"charIndex":170},{"text":"[Important] output.polyfill","id":"important-outputpolyfill","depth":2,"charIndex":613},{"text":"[Important] source.decorators","id":"important-sourcedecorators","depth":2,"charIndex":860},{"text":"[Important] output.targets","id":"important-outputtargets","depth":2,"charIndex":1123},{"text":"[Important] Rspack Config Validation","id":"important-rspack-config-validation","depth":2,"charIndex":1709},{"text":"source.alias","id":"sourcealias","depth":2,"charIndex":2144},{"text":"source.entry","id":"sourceentry","depth":2,"charIndex":2269},{"text":"output.overrideBrowserslist","id":"outputoverridebrowserslist","depth":2,"charIndex":2386},{"text":"output.emitAssets","id":"outputemitassets","depth":2,"charIndex":2538},{"text":"output.distPath.server","id":"outputdistpathserver","depth":2,"charIndex":2663},{"text":"output.minify.html","id":"outputminifyhtml","depth":2,"charIndex":2761},{"text":"output.charset","id":"outputcharset","depth":2,"charIndex":3362},{"text":"dev.startUrl","id":"devstarturl","depth":2,"charIndex":3517},{"text":"dev.client.port","id":"devclientport","depth":2,"charIndex":3582},{"text":"html.appIcon","id":"htmlappicon","depth":2,"charIndex":3739},{"text":"Others","id":"others","depth":2,"charIndex":3989}],"domain":"","frontmatter":{},"version":""},{"id":155,"title":"Vite","content":"#\n\nThis chapter introduces how to migrate a Vite project to Rsbuild.\n\n\nInstalling Dependencies#\n\nFirst, you need to replace the npm dependencies of Vite with Rsbuild's\ndependencies.\n\n * Remove Vite dependencies:\n\n * Install Rsbuild dependencies:\n\n\nUpdating npm scripts#\n\nNext, you need to update the npm scripts in your package.json to use Rsbuild's\nCLI commands.\n\n\n\n\nCreate Configuration File#\n\nCreate a Rsbuild configuration file rsbuild.config.ts in the same directory as\npackage.json, and add the following content:\n\n\n\n\nBuild Entry#\n\nThe default build entry points for Rsbuild and Vite are different. Vite uses\nindex.html as the default entry, while Rsbuild uses src/index.js.\n\nWhen migrating from Vite to Rsbuild, you can use Rsbuild's source.entry to set\nthe build entry and html.template to set the template.\n\nUsing a newly created Vite project as an example, first delete the\n\nThen add the following config.\n\n\n\nRsbuild will automatically inject the","routePath":"/guide/migration/vite","lang":"en","toc":[{"text":"Installing Dependencies","id":"installing-dependencies","depth":2,"charIndex":70},{"text":"Updating npm scripts","id":"updating-npm-scripts","depth":2,"charIndex":247},{"text":"Create Configuration File","id":"create-configuration-file","depth":2,"charIndex":367},{"text":"Build Entry","id":"build-entry","depth":2,"charIndex":523},{"text":"Migrating Plugins","id":"migrating-plugins","depth":2,"charIndex":-1},{"text":"Configuration Migration","id":"configuration-migration","depth":2,"charIndex":-1},{"text":"Environment Variables","id":"environment-variables","depth":2,"charIndex":-1},{"text":"Preset Types","id":"preset-types","depth":2,"charIndex":-1},{"text":"Glob Import","id":"glob-import","depth":2,"charIndex":-1},{"text":"Validating Results","id":"validating-results","depth":2,"charIndex":-1},{"text":"Contents Supplement","id":"contents-supplement","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":156,"title":"Vue CLI","content":"#\n\nThis chapter introduces how to migrate a Vue CLI project to Rsbuild.\n\n\nInstall Dependencies#\n\nFirst, you need to replace the npm dependencies of Vue CLI with Rsbuild's\ndependencies.\n\n * Remove Vue CLI dependencies:\n\n * Install Rsbuild dependencies:\n\nTIP\n\nIf your project is based on Vue 2, replace @rsbuild/plugin-vue with\n@rsbuild/plugin-vue2.\n\n\nUpdate npm scripts#\n\nNext, you need to update the npm scripts in the package.json file to Rsbuild's\nCLI commands.\n\n\n\nTIP\n\nRsbuild does not integrate ESLint, so it does not provide a command to replace\nvue-cli-service lint. You can directly use ESLint's CLI commands as an\nalternative.\n\n\nCreate Configuration File#\n\nCreate a Rsbuild configuration file rsbuild.config.ts in the same directory as\npackage.json, and add the following content:\n\n\n\nTIP\n\nIf your project is based on Vue 2, use ``.\n\n\nHTML Template#\n\nVue CLI uses the public/index.html file as the default HTML template. In\nRsbuild, you can specify the HTML template through html.template:\n\n\n\nIn the HTML template, if you are using the BASE_URL variable from Vue CLI,\nreplace it with Rsbuild's assetPrefix variable and use a forward slash for\nconcatenation:\n\n\n\nThis completes the basic migration from Vue CLI to Rsbuild. You can now run the\nnpm run serve command to try starting the dev server.\n\n\nConfiguration Migration#\n\nHere is the corresponding Rsbuild configuration for Vue CLI configuration:\n\nVUE CLI                               RSBUILD\npublicPath                            dev.assetPrefix / output.assetPrefix\noutputDir / assetsDir                 output.distPath\nfilenameHashing                       output.filenameHash\npages                                 source.entry / html.template / html.title\ntranspileDependencies                 source.include\nproductionSourceMap / css.sourceMap   output.sourceMap\ncrossorigin                           html.crossorigin\nconfigureWebpack                      tools.rspack\nchainWebpack                          tools.bundlerChain\ncss.extract                           output.injectStyles\ncss.loaderOptions                     tools.cssLoader / less / sass / postcss\ndevServer.proxy                       server.proxy\n\nNotes:\n\n * When migrating configureWebpack, note that most of the Webpack and Rsbuild\n   configs are the same, but there are also some differences or functionalities\n   not implemented in Rsbuild.\n * The above table does not cover all configurations of Vue CLI, feel free to\n   add more.\n\n\nEnvironment Variables#\n\nVue CLI injects environment variables starting with VUE_APP_ into the client\ncode by default, while Rsbuild injects environment variables starting with\nPUBLIC_ by default (see public variables).\n\nTo be compatible with Vue CLI's behavior, you can manually call Rsbuild's\nloadEnv method to read environment variables starting with VUE_APP_, and inject\nthem into the client code through the source.define config.\n\n\n\n\nContents Supplement#\n\nThe current document only covers part of the migration process. If you find\nsuitable content to add, feel free to contribute to the documentation via pull\nrequest 🤝.\n\n> The documentation for rsbuild can be found in the rsbuild/website directory.","routePath":"/guide/migration/vue-cli","lang":"en","toc":[{"text":"Install Dependencies","id":"install-dependencies","depth":2,"charIndex":73},{"text":"Update npm scripts","id":"update-npm-scripts","depth":2,"charIndex":349},{"text":"Create Configuration File","id":"create-configuration-file","depth":2,"charIndex":636},{"text":"HTML Template","id":"html-template","depth":2,"charIndex":841},{"text":"Configuration Migration","id":"configuration-migration","depth":2,"charIndex":1303},{"text":"Environment Variables","id":"environment-variables","depth":2,"charIndex":2467},{"text":"Contents Supplement","id":"contents-supplement","depth":2,"charIndex":2905}],"domain":"","frontmatter":{},"version":""},{"id":157,"title":"Webpack","content":"#\n\nThis section introduces how to migrate a project using webpack to Rsbuild.\n\n\nInstalling Dependencies#\n\nFirst, you need to replace the npm dependencies of webpack with Rsbuild's\ndependencies.\n\n * Remove webpack dependencies:\n\n * Install Rsbuild dependencies:\n\n\nUpdating npm scripts#\n\nNext, you need to update the npm scripts in your package.json to use Rsbuild's\nCLI commands.\n\n\n\n\nCreate Configuration File#\n\nCreate a Rsbuild configuration file rsbuild.config.ts in the same directory as\npackage.json, and add the following content:\n\n\n\n> See Configure Rsbuild for more.\n\n\nConfiguration Migration#\n\nIn a webpack project, there might be some complex webpack.config.js\nconfiguration files.\n\nAfter migrating to Rsbuild, most webpack configurations are built-in and do not\nrequire manual configuration, such as output, resolve, module.rules, etc.\n\nFor the few webpack configurations that need to be migrated, you can choose the\nfollowing options:\n\n * Use the tools.rspack option (Rspack and webpack configurations are basically\n   equivalent).\n\n\n\n * Use encapsulated configs in Rsbuild, for example, options for css-loader can\n   be set through tools.cssLoader.\n\n> See Configure Rspack for more.\n\n\nBuild Entry#\n\nwebpack uses the entry field to set the build entry. In Rsbuild, you can use\nsource.entry to set it.\n\n\n\n\nCleaning Up Config#\n\nSince Rsbuild has built-in some common loaders and plugins, you can remove the\nfollowing dependencies, which will significantly improve the dependency\ninstallation speed of the project:\n\n * css-loader\n * babel-loader\n * style-loader\n * postcss-loader\n * html-webpack-plugin\n * mini-css-extract-plugin\n * autoprefixer\n * @babel/core\n * @babel/preset-env\n * @babel/preset-typescript\n * @babel/runtime\n * ...\n\nTIP\n\nThe above only lists some of the common dependencies that can be removed. In\nactual webpack projects, there may be many other dependencies, please handle\nthem as appropriate.\n\n\nUsing Plugins#\n\nRsbuild offers a rich set of plugins that provide out-of-the-box support for\ncommon scenarios. You can refer to the Plugin List documentation to learn about\nthese plugins.\n\nTaking a React project as an example, let's see how to integrate Rsbuild\nplugins. First, you can remove some React-related build dependencies that are\nalready built into the Rsbuild React plugin, such as:\n\n * react-refresh\n * @babel/preset-react\n * @pmmmwh/react-refresh-webpack-plugin\n\nThen see the React Plugin documentation, register it and use it as follows:\n\n\n\nMost of the common webpack loaders and plugins can still be used in Rsbuild, but\nwe recommend prioritizing the plugins provided by Rsbuild. This can further\nsimplify your configuration. Below is their mapping relationship:\n\nWEBPACK                          RSBUILD\n@babel/preset-react              React Plugin\nvue-loader                       Vue Plugin or Vue 2 Plugin\nsvelte-loader                    Svelte Plugin\nbabel-preset-solid               Solid Plugin\nbabel-loader                     Babel Plugin\nsass-loader                      Sass Plugin\nless-loader                      Less Plugin\nstylus-loader                    Stylus Plugin\nmdx-loader                       MDX Plugin\npug-loader                       Pug Plugin\nyaml-loader                      Yaml Plugin\ntoml-loader                      Toml Plugin\n@svgr/webpack                    SVGR Plugin\nfork-ts-checker-webpack-plugin   @rsbuild/plugin-type-check\nnode-polyfill-webpack-plugin     Node Polyfill Plugin\n@vue/babel-plugin-jsx            Vue JSX Plugin\n@vue/babel-preset-jsx            Vue 2 JSX Plugin\neslint-webpack-plugin            ESLint Plugin\nbabel-plugin-styled-components   Styled Components Plugin\n\n\nConfigure Dev Server#\n\nRsbuild does not support the use of Rspack's devServer config. Please refer to\nRspack Dev Server for replacement.\n\n\nValidating Results#\n\nAfter completing the above steps, you have completed the basic migration from\nwebpack to Rsbuild. You can now run the npm run dev command to try starting the\ndev server.\n\nIf you encounter any issues during the build process, please debug according to\nthe error log, or check the webpack configuration to see if there are any\nnecessary configurations that have not been migrated to Rsbuild.\n\n\nContents Supplement#\n\nThe current document only covers part of the migration process. If you find\nsuitable content to add, feel free to contribute to the documentation via pull\nrequest 🤝.\n\n> The documentation for rsbuild can be found in the rsbuild/website directory.","routePath":"/guide/migration/webpack","lang":"en","toc":[{"text":"Installing Dependencies","id":"installing-dependencies","depth":2,"charIndex":79},{"text":"Updating npm scripts","id":"updating-npm-scripts","depth":2,"charIndex":262},{"text":"Create Configuration File","id":"create-configuration-file","depth":2,"charIndex":382},{"text":"Configuration Migration","id":"configuration-migration","depth":2,"charIndex":573},{"text":"Build Entry","id":"build-entry","depth":3,"charIndex":1194},{"text":"Cleaning Up Config","id":"cleaning-up-config","depth":3,"charIndex":1313},{"text":"Using Plugins","id":"using-plugins","depth":3,"charIndex":1923},{"text":"Configure Dev Server","id":"configure-dev-server","depth":3,"charIndex":3667},{"text":"Validating Results","id":"validating-results","depth":2,"charIndex":3806},{"text":"Contents Supplement","id":"contents-supplement","depth":2,"charIndex":4219}],"domain":"","frontmatter":{},"version":""},{"id":158,"title":"Improve Build Performance","content":"#\n\nRsbuild optimizes build performance by default, but as the project becomes\nlarger, you may encounter some build performance problems.\n\nThis document provides some optional speed-up methods, developers can choose\nsome of them to improve the build performance.\n\n\nPerformance Profiling#\n\nPerforming a performance analysis can help you identify performance bottlenecks\nin your project, allowing for targeted optimization.\n\nPlease refer to the Performance Building Analysis section for more information.\n\n\nGeneral Optimization#\n\nThe following are some general optimization methods, which can speed up the\ndevelopment build and production build.\n\n\nReducing Modules#\n\nOptimizing the number of modules referenced by the application can reduce the\nbundle size and improve build performance. Please read the Bundle Size\nOptimization section to learn some optimization methods.\n\n\nDevelopment optimization#\n\nThe following are methods for improving performance in development mode.\n\n\nEnable Lazy Compilation#\n\nEnabling lazy compilation can significantly reduce the number of modules\ncompiled at dev startup and improve startup time.\n\n\n\n> Please refer to dev.lazyCompilation for more information.\n\n\nSource Map Format#\n\nIn order to provide a good debugging experience, Rsbuild uses the\ncheap-module-source-map format source map by default in development mode, which\nis a high-quality source map format and will bring certain performance overhead.\n\nYou can improve build speed by adjusting the source map format in development\nmode through output.sourceMap.\n\nFor example to disable source map:\n\n\n\nOr set the source map format of the development mode to the cheapest eval\nformat:\n\n\n\n> For detailed differences between different source map formats, see Rspack -\n> devtool.\n\n\nBrowserslist for development#\n\nThis strategy is similar to \"Adjust Browserslist\", the difference is that we can\nset different browserslist for development and production mode, thereby reducing\nthe compilation overhead in development mode.\n\nFor example, you can add the following config to .browserslistrc, which means\nthat only the latest browsers are compatible in development mode, and the actual\nbrowsers are compatible in the production mode:\n\n\n\nNote that this can lead to some differences in the build result between\ndevelopment and production modes.","routePath":"/guide/optimization/build-performance","lang":"en","toc":[{"text":"Performance Profiling","id":"performance-profiling","depth":2,"charIndex":263},{"text":"General Optimization","id":"general-optimization","depth":2,"charIndex":503},{"text":"Reducing Modules","id":"reducing-modules","depth":3,"charIndex":644},{"text":"Development optimization","id":"development-optimization","depth":2,"charIndex":871},{"text":"Enable Lazy Compilation","id":"enable-lazy-compilation","depth":2,"charIndex":973},{"text":"Source Map Format","id":"source-map-format","depth":3,"charIndex":1187},{"text":"Browserslist for development","id":"browserslist-for-development","depth":3,"charIndex":1759}],"domain":"","frontmatter":{},"version":""},{"id":159,"title":"Code Splitting","content":"#\n\nA great chunk splitting strategy is very important to improve the loading\nperformance of the application. It can make full use of the browser's caching\nmechanism to reduce the number of requests and improve the loading speed of the\napplication.\n\nSeveral chunk splitting strategies are built into Rsbuild. These should meet the\nneeds of most applications. You can also customize the chunk splitting config to\nsuit your own usage scenario.\n\n> See Rspack - Code Splitting for more details.\n\n\nStrategies#\n\n> The chunk splitting config of Rsbuild is in performance.chunkSplit.\n\nRsbuild supports the following chunk splitting strategies:\n\n * split-by-experience: an empirical splitting strategy, automatically splits\n   some commonly used npm packages into chunks of moderate size.\n * split-by-module: split by NPM package granularity, each NPM package\n   corresponds to a chunk.\n * split-by-size: automatically split according to module size.\n * all-in-one: bundle all codes into one chunk.\n * single-vendor: bundle all NPM packages into a single chunk.\n * custom: custom chunk splitting strategy.\n\n\nsplit-by-experience#\n\n\nBehavior#\n\nRsbuild adopts the split-by-experience strategy by default, which is a strategy\nwe have developed from experience. Specifically, when the following npm packages\nare referenced in your project, they will automatically be split into separate\nchunks:\n\n * lib-polyfill.js: includes core-js, @swc/helpers, tslib.\n * lib-axios.js: includes axios and related packages.\n\nGrouping commonly used packages in this way and then splitting them into\nindividual chunks helps with browser caching.\n\n\nConfig#\n\n\n\n\nNotes#\n\n * If the npm packages mentioned above are not installed or used in the project,\n   the corresponding chunk will not be generated.\n\n\nsplit-by-module#\n\n\nBehavior#\n\nSplit each NPM package into a Chunk.\n\nWARNING\n\nThis strategy will split the node_modules in the most granular way, and at the\nsame time, under HTTP/2, multiplexing will speed up the loading time of\nresources.However, in non-HTTP/2 environments, it needs to be used with caution\nbecause of HTTP head-of-line blocking problem.\n\n\nConfig#\n\n\n\n\nNotes#\n\n * This configuration will split the node_modules into smaller chunks, resulting\n   in a large number of file requests.\n * When using HTTP/2, resource loading time will be accelerated and cache hit\n   rate will be improved due to multiplexing.\n * When not using HTTP/2, the performance of page loading may be reduced due to\n   HTTP head-of-line blocking. Please use with caution.\n\n\nall-in-one#\n\n\nBehavior#\n\nThis strategy puts all source code and third-party dependencies in the same\nChunk.\n\n\nConfig#\n\n\n\n\nNotes#\n\n * This configuration will bundle all the generated JS code into one file\n   (except for dynamically imported chunks).\n * The size of a single JS file may be very large, leading to a decrease in page\n   loading performance.\n\nIf you need to bundle the chunks split by dynamic import into the single file,\nyou can set the output.asyncChunks option in Rspack to false:\n\n\n\n\nsingle-vendor#\n\n\nBehavior#\n\nThis strategy puts third-party dependencies in one Chunk, and source code in\nanother chunk.\n\n\nConfig#\n\n\n\n\nNotes#\n\n * The size of a single vendor file may be very large, leading to a decrease in\n   page loading performance.\n\n\nsplit-by-size#\n\n\nBehavior#\n\nUnder this strategy, after setting minSize, maxSize to a fixed value, Rsbuild\nwill automatically split them without extra config.\n\n\nConfig#\n\n\n\n\nCustom Splitting Strategy#\n\nIn addition to using the built-in strategies, you can also customize the\nsplitting strategy to meet more customization needs. Custom strategy is divided\ninto two parts:\n\n * Custom group\n * Custom Rspack splitChunks config\n\nIt is worth noting that these two custom capabilities can be used together with\nthe built-in strategy, that is, you can use the built-in strategy to split\ncommonly used packages, and then use the custom function to split other\npackages.\n\n\nCustom Group#\n\nRsbuild supports custom group, which is more flexible than the built-in\nstrategies, and simpler than writing Rspack's splitChunks config.\n\nFor example, split the axios library under node_modules into axios.js:\n\n\n\nThrough forceSplitting config, you can easily split some packages into a Chunk.\n\nNotes#\n\nChunks split using the forceSplitting configuration will be inserted into the\nHTML file as resources requested for the initial screen using","routePath":"/guide/optimization/code-splitting","lang":"en","toc":[{"text":"Strategies","id":"strategies","depth":2,"charIndex":491},{"text":"split-by-experience","id":"split-by-experience","depth":2,"charIndex":1097},{"text":"Behavior","id":"behavior","depth":3,"charIndex":1120},{"text":"Config","id":"config","depth":3,"charIndex":1615},{"text":"Notes","id":"notes","depth":3,"charIndex":1627},{"text":"split-by-module","id":"split-by-module","depth":2,"charIndex":1768},{"text":"Behavior","id":"behavior-1","depth":3,"charIndex":1787},{"text":"Config","id":"config-1","depth":3,"charIndex":2125},{"text":"Notes","id":"notes-1","depth":3,"charIndex":2137},{"text":"all-in-one","id":"all-in-one","depth":2,"charIndex":2527},{"text":"Behavior","id":"behavior-2","depth":3,"charIndex":2541},{"text":"Config","id":"config-2","depth":3,"charIndex":2637},{"text":"Notes","id":"notes-2","depth":3,"charIndex":2649},{"text":"single-vendor","id":"single-vendor","depth":2,"charIndex":3027},{"text":"Behavior","id":"behavior-3","depth":3,"charIndex":3044},{"text":"Config","id":"config-3","depth":3,"charIndex":3149},{"text":"Notes","id":"notes-3","depth":3,"charIndex":3161},{"text":"split-by-size","id":"split-by-size","depth":2,"charIndex":3280},{"text":"Behavior","id":"behavior-4","depth":3,"charIndex":3297},{"text":"Config","id":"config-4","depth":3,"charIndex":3440},{"text":"Custom Splitting Strategy","id":"custom-splitting-strategy","depth":2,"charIndex":3452},{"text":"Custom Group","id":"custom-group","depth":3,"charIndex":3942},{"text":"Notes","id":"notes-4","depth":4,"charIndex":4251},{"text":"Custom Config","id":"custom-config","depth":3,"charIndex":-1},{"text":"Using Dynamic Import for Code Splitting","id":"using-dynamic-import-for-code-splitting","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":160,"title":"Inline Static Assets","content":"#\n\nInline static assets refer to the practice of including the content of a static\nasset directly in a HTML or JS file, instead of linking to an external file.\nThis can improve the performance of a website by reducing the number of HTTP\nrequests that the browser has to make to load the page.\n\nHowever, static assets inlining also has some disadvantages, such as increasing\nthe size of a single file, which may lead to slower loading. Therefore, in the\nactual scenario, it is necessary to decide whether to use static assets inlining\naccording to the specific situation.\n\nRsbuild will automatically inline static assets that are less than 4KiB, but\nsometimes you may need to manually control assets to force them to be inlined or\nnot, and this document explains how to precisely control the inlining behavior\nof static assets.\n\n\nAutomatic Inlining#\n\nBy default, Rsbuild will inline assets when the file size of is less than a\nthreshold (the default is 4KiB). When inlined, the asset will be converted to a\nBase64 encoded string and will no longer send a separate HTTP request. When the\nfile size is greater than this threshold, it is loaded as a separate file with a\nseparate HTTP request.\n\nThe threshold can be modified with the output.dataUriLimit config. For example,\nset the threshold of images to 5000 Bytes, and set media assets not to be\ninlined:\n\n\n\n\nForce Inlining#\n\nYou can force an asset to be inlined by adding the inline query when importing\nthe asset, regardless of whether the asset's size is smaller than the size\nthreshold.\n\n\n\nIn the above example, the foo.png image will always be inlined, regardless of\nwhether the size of the image is larger than the threshold.\n\n\nReferenced from CSS file#\n\nWhen you reference a static asset in your CSS file, you can also force inline\nthe asset with the inline query.\n\n\n\nDo you really need to force inlining?\n\nInline large assets will significantly increase the first paint time or first\ncontentful paint time of a page, which will hurt user experience. And when you\ninline a static asset multiple times into a CSS file, the base64 content will be\nrepeatedly injected, causing the bundle size to grow . Please use forced\ninlining with caution.\n\n\nForce no inlining#\n\nWhen you want to always treat some assets as separate files, no matter how small\nthe asset is, you can add the url query to force the asset not to be inlined.\n\n\n\nIn the above example, the foo.png image will always be loaded as a separate\nfile, even if the size of the image is smaller than the threshold.\n\n\nReferenced from CSS file#\n\nWhen you reference a static asset in your CSS file, you can also force the asset\nnot to be inlined with url query.\n\n\n\nDo you really need to exclude assets from inlining?\n\nExcluding assets from inlining will increase the number of assets that the Web\nApp needs to load. This will reduce the efficiency of loading assets in a weak\nnetwork environment or in scenarios where HTTP2 is not enabled. Please use force\nno Inline with caution.\n\n\nInline JS files#\n\nIn addition to inlining static assets into JS files, Rsbuild also supports\ninlining JS files into HTML files.\n\nJust enable the output.inlineScripts config, and the generated JS files will not\nbe written into the output directory, but will be directly inlined to the\ncorresponding in the HTML file.\n\n\n\n\nInline CSS files#\n\nYou can also inline CSS files into HTML files.\n\nJust enable the output.inlineStyles config, the generated CSS file will not be\nwritten into the output directory, but will be directly inlined to the\ncorresponding in the HTML file.\n\n\n\n\nType Declaration#\n\nWhen you use URL queries such as ?inline and ?url in TypeScript code, TypeScript\nmay prompt that the module is missing a type definition:\n\n\n\nTo fix this, you can add type declarations for these URL queries, please create\nsrc/env.d.ts file and add the following type declarations.\n\n * Method 1: If the @rsbuild/core package is installed, you can reference the\n   preset types provided by @rsbuild/core:\n\n\n\n * Method 2: Manually add the required type declarations:\n\n","routePath":"/guide/optimization/inline-assets","lang":"en","toc":[{"text":"Automatic Inlining","id":"automatic-inlining","depth":2,"charIndex":828},{"text":"Force Inlining","id":"force-inlining","depth":2,"charIndex":1357},{"text":"Referenced from CSS file","id":"referenced-from-css-file","depth":3,"charIndex":1682},{"text":"Force no inlining","id":"force-no-inlining","depth":2,"charIndex":2198},{"text":"Referenced from CSS file","id":"referenced-from-css-file-1","depth":3,"charIndex":2525},{"text":"Inline JS files","id":"inline-js-files","depth":2,"charIndex":2988},{"text":"Inline CSS files","id":"inline-css-files","depth":2,"charIndex":3308},{"text":"Type Declaration","id":"type-declaration","depth":2,"charIndex":3561}],"domain":"","frontmatter":{},"version":""},{"id":161,"title":"Bundle Size Optimization","content":"#\n\nBundle size optimization is an important part in production build because it\ndirectly affects the user experience of online users. In this document, we will\nintroduce some common bundle size optimization methods in Rsbuild.\n\n\nReduce duplicate dependencies#\n\nIt is common for web projects to bundle multiple versions of third-party\ndependencies. Duplicate dependencies can lead to increased bundle size and\nslower build speed.\n\n\nDetect duplicate dependencies#\n\nYou can use Rsdoctor to detect whether there are duplicate dependencies in the\nproject. Rsdoctor will analyze during the build process, find any duplicate\nbundled dependencies and display them visually:\n\n\n\nFor more details, see Rsdoctor - Duplicate Dependency Problem.\n\n\nEliminate duplicate dependencies#\n\nWe can eliminate duplicate dependencies with the package manager.\n\n * Rsbuild provides the resolve.dedupe config, which allows you to force the\n   specified packages to be resolved from the project root directory, thereby\n   removing duplicate packages.\n\n * If you are using pnpm >= 7.26.0, you can use the pnpm dedupe command to\n   upgrade and eliminate duplicate dependencies.\n\n\n\n * If you are using pnpm < 7.26.0, you can use pnpm-deduplicate to analyze all\n   duplicate dependencies, then update dependencies or declare pnpm overrides to\n   merge duplicated dependencies.\n\n\n\n * If you are using yarn, you can use yarn-deduplicate to automatically merge\n   duplicated dependencies:\n\n\n\n\nUse lightweight libraries#\n\nIt is recommended to using lightweight libraries in your project, such as\nreplacing moment with day.js.\n\nIf you want to find out the large libraries in the project, you can add the\nBUNDLE_ANALYZE=true environment variable when building:\n\n\n\nSee the performance.bundleAnalyze configuration for details.\n\n\nAdjust Browserslist#\n\nThe Rsbuild will compile the code according to the project's Browserslist\nconfig, and inject some Polyfills. If the project does not need to be compatible\nwith legacy browsers, you can adjust the Browserslist and drop some legacy\nbrowsers, thereby reducing the compilation overhead on syntax and polyfill.\n\nRsbuild's default Browserslist config is:\n\n\n\nFor example, if you only need to be compatible with browsers above Chrome 100,\nyou can change it to:\n\n\n\nTIP\n\nPlease read the Browserslist chapter to know more about the usage of\nBrowserslist.\n\n\nUsage polyfill#\n\nIf the current project's output.polyfill is set to 'entry', and you are certain\nthat third-party dependencies do not require additional polyfills, you can\nchange it to usage.\n\nIn usage mode, Rsbuild analyzes the syntax used in the source code and injects\nthe required polyfill code on demand to reduce the size of polyfill.\n\n\n\nTIP\n\nPlease read the Browser Compatibility chapter to know more about the usage of\nBrowserslist.\n\n\nImage Compression#\n\nIn general front-end projects, the size of image often accounts for a large\nproportion of the total bundle size of the project.So if the image size can be\nreduced as much as possible, it will have a significant optimization effect on\nthe project bundle size. You can enable image compression by registering a\nplugin in the Rsbuild:\n\n\n\nSee details in @rsbuild/plugin-image-compress.\n\n\nSplit Chunk#\n\nA great chunk splitting strategy is very important to improve the loading\nperformance of the application. It can make full use of the browser's caching\nmechanism to reduce the number of requests and improve the loading speed of the\napplication.\n\nSeveral chunk splitting strategies are built into Rsbuild. These should meet the\nneeds of most applications. You can also customize the chunk splitting config to\nsuit your own usage scenario.\n\nFor example, split the axios library under node_modules into axios.js:\n\n","routePath":"/guide/optimization/optimize-bundle","lang":"en","toc":[{"text":"Reduce duplicate dependencies","id":"reduce-duplicate-dependencies","depth":2,"charIndex":228},{"text":"Detect duplicate dependencies","id":"detect-duplicate-dependencies","depth":3,"charIndex":430},{"text":"Eliminate duplicate dependencies","id":"eliminate-duplicate-dependencies","depth":3,"charIndex":733},{"text":"Use lightweight libraries","id":"use-lightweight-libraries","depth":2,"charIndex":1457},{"text":"Adjust Browserslist","id":"adjust-browserslist","depth":2,"charIndex":1788},{"text":"Usage polyfill","id":"usage-polyfill","depth":2,"charIndex":2356},{"text":"Image Compression","id":"image-compression","depth":2,"charIndex":2799},{"text":"Split Chunk","id":"split-chunk","depth":2,"charIndex":3203}],"domain":"","frontmatter":{},"version":""},{"id":162,"title":"Features","content":"#\n\nHere are all the main features supported by Rsbuild.\n\n\nJavaScript#\n\nFEATURES               DESCRIPTION                                                    LINKS\nRspack bundler         Use Rspack as the bundler by default                           -\nSWC compilation        Transform and minify JavaScript and TypeScript code with SWC   -\n                       by default\nTS compilation         TS files are compiled by SWC by default                        \nCode minification      Code minification is enabled by default in production mode     \nPolyfill injection     core-js and other polyfills are injected by default            \nSourceMap generation   Source maps are generated in development mode by default       \nAlias                  Optional feature, set import alias                             \nBabel compilation      Optional feature, use Babel to transform JavaScript and        \n                       TypeScript code\nNode outputs           Optional feature, support building bundles that run in         \n                       Node.js environment\nWeb Worker outputs     Optional feature, support building bundles that run in a Web   \n                       Worker environment\nBrowserslist           Optional feature, using browserslist (opens new window) to     \n                       specify which browsers should be supported in your Web\n                       application.\nCompatibility check    Optional feature, analyze if there are incompatible advanced   \n                       syntax in the outputs within the current browser scope\nEnvironment variable   Optional feature, inject environment variables or              \n                       expressions into the code\nNode Polyfill          Optional feature, inject polyfills for Node core modules on    \n                       the browser side\nType check             Optional feature, run type checker to check for type issues    \n                       in code\nModule Federation      Optional feature, dynamically load modules and share           \n                       dependencies\n\n\nCSS#\n\nFEATURES                  DESCRIPTION                                                  LINKS\nLightning CSS             Use Lightning CSS to downgrade CSS syntax by default         \nPostCSS transformation    Optional feature, use PostCSS to transform CSS files         \nSass preprocessing        Optional feature, compile Sass/Scss files                    \nLess preprocessing        Optional feature, compile Less files                         \nStylus preprocessing      Optional feature, compile Stylus files                       \nCSS Modules compilation   Support compiling *.module.* files by default                \nCSS Modules type          Optional feature, generate type definition for CSS Modules   \nCSS minification          CSS minification is enabled by default in production build   \nInline CSS into JS        Optional feature, inline CSS files to JavaScript files       \n\n\nHTML#\n\nFEATURES                  DESCRIPTION                                    LINKS\nSet title                 Set HTML title tag                             \nSet meta                  Set HTML meta tag                              \nSet favicon               Set favicon for page                           \nSet app icon              Set apple icon for iOS                         \nUse EJS template engine   Optional feature, use EJS template engine      \nUse Pug template engine   Optional feature, use pug template engine      \nInline JS files           Optional feature, inline JS files into HTML    \nInline CSS files          Optional feature, inline CSS files into HTML   \n\n\nDevelopment and Preview#\n\nFEATURES     DESCRIPTION                                                    LINKS\nPublic Dir   Use the public directory as the directory for serving public   \n             assets by default\nProxy        Optional feature, proxy requests to the specified service      \nOpen page    Optional feature, automatically open page in browser when      \n             starting server\nHTTPS        Optional feature, enable HTTPS server                          \n\n\nFrontend Framework#\n\nFEATURES        DESCRIPTION                                                 LINKS\nReact           Optional feature, enable compilation of React JSX           \nReact Refresh   Optional feature, enable React Refresh                      \nSVGR            Optional feature, transform SVG to React component          \nVue 3 SFC       Optional feature, enable compilation of Vue 3 SFC (Single   \n                File Components)\nVue 3 JSX       Optional feature, enable compilation of Vue 3 JSX syntax    \nVue 2 SFC       Optional feature, enable compilation of Vue 2 SFC (Single   \n                File Components)\nVue 2 JSX       Optional feature, enable compilation of Vue 2 JSX syntax    \nSvelte          Optional feature, enable compilation of Svelte component    \nSolid           Optional feature, enable compilation of Solid JSX           \n\n\nStatic Assets#\n\nFEATURES                 DESCRIPTION                                                  LINKS\nImport image assets      Support for import image assets in code                      \nImport font assets       Support for import font assets in code                       \nImport video assets      Support for import video assets in code                      \nImport Wasm assets       Support for import WebAssembly assets in code                \nImport node addons       Support for import Node.js addons in code                    \nInline static assets     Small assets are inlined into JS by default                  \nClean up static assets   Automatically clean up static assets in the dist directory   \n                         before each build\nCopy static assets       Optional feature, copy static assets to the dist directory   \n\n\nPerformance#\n\nFEATURES                     DESCRIPTION                                                    LINKS\nChunk Splitting              A variety of chunk splitting strategies are built into         \n                             Rsbuild to automatically split the bundle into files of\n                             moderate size\nPrint File Size              After the production build, All bundle sizes is displayed by   \n                             default\nAnalyze bundle size          Optional feature, analyze bundle size through Bundle           \n                             Analyzer\nRemove console               Optional feature, remove console.[methodName] in code          \nOptimize moment.js size      Optional feature, remove the redundant locale files of         \n                             moment.js\nComponent on-demand import   Optional feature, selectively import code and styles from      \n                             component libraries\nImage compression            Optional feature, compress used image resources                \nPreload                      Optional feature, preemptively fetch and cache the target      \n                             resource for current navigation\nPrefetch                     Optional feature, preemptively fetch and cache the target      \n                             resource for a followup navigation\nPreconnect                   Optional feature, preemptively connect to the target           \n                             resource's origin\nDNS prefetch                 Optional feature, preemptively perform DNS resolution for      \n                             the target resource's origin","routePath":"/guide/start/features","lang":"en","toc":[{"text":"JavaScript","id":"javascript","depth":2,"charIndex":57},{"text":"CSS","id":"css","depth":2,"charIndex":2064},{"text":"HTML","id":"html","depth":2,"charIndex":2957},{"text":"Development and Preview","id":"development-and-preview","depth":2,"charIndex":3637},{"text":"Frontend Framework","id":"frontend-framework","depth":2,"charIndex":4115},{"text":"Static Assets","id":"static-assets","depth":2,"charIndex":4979},{"text":"Performance","id":"performance","depth":2,"charIndex":5828}],"domain":"","frontmatter":{},"version":""},{"id":163,"title":"Glossary","content":"#\n\n\nBundler#\n\nRefers to module bundlers such as Rspack and webpack.\n\nThe main goal of bundlers is to bundle JavaScript, CSS and other files together,\nand the bundled files can be used in the browser, Node.js or other environments.\nWhen bundler processes the Web application, it builds a dependency graph and\nthen combines every module into one or more bundles.\n\n\nCSR#\n\nCSR stands for \"Client-Side Rendering\". It means that the page is rendered in\nthe browser using JavaScript, and logic such as data fetching, templates, and\nrouting is completed on the client side rather than the server.\n\nIn CSR, the server sends an empty HTML shell and some JavaScript scripts to the\nbrowser, and the browser fetching data from the server's API and renders dynamic\ncontent to the page.\n\n\nEnvironment#\n\nThe runtime environment for build output, see Multi-Environment Builds.\n\n\nMicro-frontend#\n\nMicro-frontend (MFE) is an architecture style similar to microservices. It is a\ncomposition of multiple independently delivered frontend applications, forming a\ncohesive whole. MFE decomposes frontend applications into smaller, simpler\napplications that can be developed, tested, and deployed independently while\nstill appearing as a cohesive single product to users.\n\nIt primarily addresses two problems:\n\n * Difficulty in maintaining large and complex applications as they evolve over\n   time.\n * Inefficiency caused by cross-team or cross-department collaboration in\n   project development.\n\n\nModern.js#\n\nModern.js is an open source web engineering system from ByteDance, which\nprovides multiple solutions to help developers solve problems in different\ndevelopment scenarios.\n\n\nModule Federation#\n\nModule Federation is an architectural pattern for JavaScript application\ndecomposition (similar to microservices on the server-side), allowing you to\nshare code and resources between multiple JavaScript applications (or\nmicro-frontends).\n\nSee Module Federation for more details.\n\n\nRspack#\n\nRspack is a high performance JavaScript bundler written in Rust. It offers\nstrong compatibility with the webpack ecosystem, allowing for seamless\nreplacement of webpack, and provides lightning fast build speeds.\n\n\nRspress#\n\nRspress is a fast static site generator based on Rsbuild.\n\n\nSSR#\n\nSSR stands for \"Server-Side Rendering\". It means that the HTML of the web page\nis generated by the server and sent to the client, rather than sending only an\nempty HTML shell and relying on JavaScript to generate the page content.\n\nSee Server-Side Rendering (SSR) for more details.\n\n\nSWC#\n\nSWC (Speedy Web Compiler) is a transformer and minimizer for JavaScript and\nTypeScript based on Rust.\n\nSee Configure SWC for more details.\n\n\nMore#\n\nSee more glossary in Rspack - Glossary.","routePath":"/guide/start/glossary","lang":"en","toc":[{"text":"Bundler","id":"bundler","depth":2,"charIndex":3},{"text":"CSR","id":"csr","depth":2,"charIndex":362},{"text":"Environment","id":"environment","depth":2,"charIndex":773},{"text":"Micro-frontend","id":"micro-frontend","depth":2,"charIndex":861},{"text":"Modern.js","id":"modernjs","depth":2,"charIndex":1474},{"text":"Module Federation","id":"module-federation","depth":2,"charIndex":1659},{"text":"Rspack","id":"rspack","depth":2,"charIndex":1960},{"text":"Rspress","id":"rspress","depth":2,"charIndex":2183},{"text":"SSR","id":"ssr","depth":2,"charIndex":2253},{"text":"SWC","id":"swc","depth":2,"charIndex":2543},{"text":"More","id":"more","depth":2,"charIndex":2690}],"domain":"","frontmatter":{},"version":""},{"id":164,"title":"Introduction","content":"#\n\nRsbuild is a high-performance build tool powered by Rspack. It provides a set of\nthoughtfully designed default build configs, offering an out-of-the-box\ndevelopment experience and can fully unleash the performance advantages of\nRspack.\n\nRsbuild provides rich build features, including the compilation of TypeScript,\nJSX, Sass, Less, CSS Modules, Wasm, and others. It also supports Module\nFederation, image compression, type checking, PostCSS, Lightning CSS, and more.\n\n\n💡 Comparisons#\n\nRsbuild is a build tool that is on par with Vite, Create React App, or Vue CLI.\nThey all come with builtin dev servers, command line tools, and sensible build\nconfigurations to provide the out-of-the-box experience.\n\n\n\n\nCRA / Vue CLI#\n\nYou can think of Rsbuild as a modernized version of Create React App or Vue CLI,\nwith these main differences:\n\n * The underlying bundler is switched from Webpack to Rspack, providing 5 to 10\n   times the build performance.\n * It is decoupled from frontend UI frameworks and supports all UI frameworks\n   via plugins, including React, Vue, Svelte, Solid, etc.\n * It offers better extensibility. You can extend Rsbuild flexibly via\n   Configurations, Plugin API, and JavaScript API.\n\n\nVite#\n\nRsbuild shares many similarities with Vite, as they are both aim to improve the\nfrontend development experience. The main differences are:\n\n * Production consistency: Rsbuild uses Rspack for bundling during both the\n   development and production builds, thus ensuring a high level of consistency\n   between the development and production outputs. Vite, on the other hand, uses\n   ESM for module loading during development, which improves the startup speed,\n   but may lead to inconsistencies between the development and production\n   outputs.\n * Ecosystem compatibility: Rsbuild is compatible with most webpack plugins and\n   all Rspack plugins, while Vite is compatible with Rollup plugins. If you're\n   currently using more plugins and loaders from the webpack ecosystem,\n   migrating to Rsbuild would be relatively easy.\n * Module Federation: The Rsbuild team works closely with the Module Federation\n   development team, providing first-class support for Module Federation to help\n   you develop large web applications with micro frontend architecture.\n\n\n🚀 Performance#\n\nRsbuild can fully leverage the build performance of Rspack. Here is the time\ntaken to build 1000 React components:\n\n> The above data comes from the performance-compare benchmark.\n\n\n🔥 Features#\n\nRsbuild has the following features:\n\n * Easy to Configure: One of the goals of Rsbuild is to provide out-of-the-box\n   build capabilities for Rspack users, allowing developers to start a web\n   project with zero configuration. In addition, Rsbuild provides semantic build\n   configuration to reduce the learning curve for Rspack configuration.\n\n * Performance Oriented: Rsbuild integrates high-performance Rust-based tools\n   from the community, including Rspack, SWC and Lightning CSS, to deliver\n   first-class build speed and development experience.\n\n * Plugin Ecosystem: Rsbuild has a lightweight plugin system and includes a\n   range of high-quality official plugins. Furthermore, Rsbuild is compatible\n   with most webpack plugins and all Rspack plugins, allowing users to leverage\n   existing community or in-house plugins in Rsbuild without the need for\n   rewriting code.\n\n * Stable Artifacts: Rsbuild is designed with a strong focus on the stability of\n   build artifacts. It ensures high consistency between artifacts in the\n   development and production builds, and automatically completes syntax\n   downgrading and polyfill injection. Rsbuild also provides plugins for type\n   checking and artifact syntax validation to prevent quality and compatibility\n   issues in production code.\n\n * Framework Agnostic: Rsbuild is not coupled with any front-end UI framework.\n   It supports frameworks like React, Vue, Svelte, Solid, and Preact through\n   plugins, and plans to support more UI frameworks from the community in the\n   future.\n\n\n🎯 Ecosystem#\n\nRsbuild provides JavaScript API and plugin API for higher-level frameworks and\ntools. For example, we have implemented Rspress and Rslib based on Rsbuild,\ntaking full advantage of its capabilities and ecosystem.\n\nThe following diagram illustrates the relationship between Rsbuild and other\ntools in the ecosystem:\n\n\n\n\n🦀 Links#\n\n * Rspack: A fast Rust-based web bundler.\n * Rspress: A fast static site generator based on Rsbuild.\n * Rsdoctor: A one-stop build analyzer for Rspack and webpack.\n * Rslib: The library development tool powered by Rsbuild.\n * Modern.js: A progressive React framework based on Rsbuild.\n * awesome-rspack: A curated list of awesome things related to Rspack and\n   Rsbuild.\n * rspack-examples: Examples for Rspack, Rsbuild, Rspress and Rsdoctor.\n * storybook-rsbuild: Storybook builder powered by Rsbuild.\n * rsbuild-plugin-template: Use this template to create your own Rsbuild plugin.\n * rstack-design-resources: Design resources for Rspack, Rsbuild, Rspress and\n   Rsdoctor.\n\n\n🧑‍💻 Community#\n\nCome and chat with us on Discord! The Rspack / Rsbuild team and users are active\nthere, and we're always looking for contributions.\n\n\n✨ Next Step#\n\nYou may want:","routePath":"/guide/start/","lang":"en","toc":[{"text":"💡 Comparisons","id":"-comparisons","depth":2,"charIndex":472},{"text":"CRA / Vue CLI","id":"cra--vue-cli","depth":3,"charIndex":709},{"text":"Vite","id":"vite","depth":3,"charIndex":1208},{"text":"🚀 Performance","id":"-performance","depth":2,"charIndex":2274},{"text":"🔥 Features","id":"-features","depth":2,"charIndex":2472},{"text":"🎯 Ecosystem","id":"-ecosystem","depth":2,"charIndex":4031},{"text":"🦀 Links","id":"-links","depth":2,"charIndex":4364},{"text":"🧑‍💻 Community","id":"-community","depth":2,"charIndex":5052},{"text":"✨ Next Step","id":"-next-step","depth":2,"charIndex":5204}],"domain":"","frontmatter":{},"version":""},{"id":165,"title":"Quick Start","content":"#\n\n\nOnline Example#\n\nWe provide an online example based on Rsbuild. The example gives an intuitive\nfeel for the build performance of Rspack and the development experience of\nRsbuild:\n\n * Rsbuild CodeSandbox example\n\n\nSetup Environment#\n\nRsbuild supports using Node.js, Deno, or Bun as the runtime.\n\n\nNode.js#\n\nFor Node.js, you will need to install Node.js >= version 16, it is recommended\nto use the Node.js LTS version.\n\nCheck the current Node.js version with the following command:\n\n\n\nIf you do not have Node.js installed in current environment, or the installed\nversion is too low, you can use nvm or fnm to install.\n\nHere is an example of how to install via nvm:\n\n\n\n\nCreating an Rsbuild Project#\n\nYou can use the create-rsbuild to create a new Rsbuild project. Just execute the\nfollowing command:\n\nThen follow the prompts to complete the operation.\n\n\nTemplates#\n\nWhen creating a project, you can choose from the following templates provided by\ncreate-rsbuild:\n\nTEMPLATE   DESCRIPTION          OPTIONAL FEATURES\nvanilla    Vanilla JavaScript   TypeScript\nreact      React 19             TypeScript\nvue3       Vue 3                TypeScript\nvue2       Vue 2                TypeScript\nlit        Lit                  TypeScript\npreact     Preact               TypeScript\nsvelte     Svelte 5             TypeScript\nsolid      Solid                TypeScript\n\n\nOptional Tools#\n\ncreate-rsbuild can help you set up some commonly used tools, including Biome,\nESLint, and prettier. You can use the arrow keys and the space bar to make your\nselections. If you don't need these tools, you can simply press Enter to skip.\n\n\n\nTIP\n\nBiome provides similar linting and formatting features to ESLint and Prettier.\nIf you select Biome, you typically won't need to choose ESLint or Prettier as\nwell.\n\n\nCurrent Directory#\n\nIf you need to create a project in the current directory, you can set the target\nfolder to .:\n\n\n\n\nQuick Creation#\n\ncreate-rsbuild provides some CLI flags. By setting these CLI flags, you can skip\nthe interactive selection steps and create the project with one command.\n\nFor example, to create a React project in the my-project directory with one\ncommand:\n\n\n\nAll the CLI flags of create-rsbuild:\n\n\n\n\nMigrate from Existing Projects#\n\nIf you need to migrate from an existing project to Rsbuild, you can refer to the\nfollowing guides:\n\n * Migrate from webpack\n * Migrate from Create React App\n * Migrate from Vue CLI\n * Migrate from Vite\n * Migrate from Modern.js Builder\n\n\nOther Projects#\n\nFor other types of projects, you can manually install the @rsbuild/core package:\n\nThen refer to the guide and documentation to enable the features you need:\n\n * See CLI to learn about available CLI commands.\n * See Plugin List to select Rsbuild plugins.\n * See Configure Rsbuild to configure Rsbuild.\n\n\nCommand Line Interface#\n\nRsbuild comes with a lightweight CLI that includes commands such as dev and\nbuild.\n\n\n\nRefer to the CLI to learn about all available commands and options.\n\n\nEntry Module#\n\nBy default, Rsbuild CLI uses src/index.(js|ts|jsx|tsx) as the entry module. You\ncan modify the entry module using the source.entry option.\n\n\nCore Packages#\n\n\n@rsbuild/core#\n\nRsbuild core package, providing CLI commands and JavaScript API.\n\n\ncreate-rsbuild#\n\nCreate a new Rsbuild project.\n\n\nNext Step#\n\nYou may want:","routePath":"/guide/start/quick-start","lang":"en","toc":[{"text":"Online Example","id":"online-example","depth":2,"charIndex":3},{"text":"Setup Environment","id":"setup-environment","depth":2,"charIndex":216},{"text":"Node.js","id":"nodejs","depth":3,"charIndex":299},{"text":"Creating an Rsbuild Project","id":"creating-an-rsbuild-project","depth":2,"charIndex":670},{"text":"Templates","id":"templates","depth":3,"charIndex":854},{"text":"Optional Tools","id":"optional-tools","depth":3,"charIndex":1360},{"text":"Current Directory","id":"current-directory","depth":3,"charIndex":1787},{"text":"Quick Creation","id":"quick-creation","depth":3,"charIndex":1905},{"text":"Migrate from Existing Projects","id":"migrate-from-existing-projects","depth":2,"charIndex":2206},{"text":"Other Projects","id":"other-projects","depth":3,"charIndex":2477},{"text":"Command Line Interface","id":"command-line-interface","depth":2,"charIndex":2797},{"text":"Entry Module","id":"entry-module","depth":2,"charIndex":2978},{"text":"Core Packages","id":"core-packages","depth":2,"charIndex":3134},{"text":"@rsbuild/core","id":"rsbuildcore","depth":3,"charIndex":3151},{"text":"create-rsbuild","id":"create-rsbuild","depth":3,"charIndex":3234},{"text":"Next Step","id":"next-step","depth":2,"charIndex":3283}],"domain":"","frontmatter":{},"version":""},{"id":167,"title":"Plugin Core","content":"#\n\nThis section describes the core plugin types and APIs.\n\n\nRsbuildPlugin#\n\nThe type of the plugin object. The plugin object contains the following\nproperties:\n\n * name: The name of the plugin, a unique identifier.\n * setup: The setup function of the plugin, which can be an async function. This\n   function is called once when the plugin is initialized. The plugin API\n   provides the context info, utility functions and lifecycle hooks. For a\n   complete introduction to lifecycle hooks, please read the Plugin Hooks\n   chapter.\n * pre: Declare the names of pre-plugins, which will be executed before the\n   current plugin.\n * post: Declare the names of post-plugins, which will be executed after the\n   current plugin.\n * remove: Declare the plugins that need to be removed, you can pass an array of\n   plugin names.\n\nThe type of the plugin object, which contains the following properties:\n\n\n\nYou can import this type from @rsbuild/core:\n\n\n\n\nPre-Plugins#\n\nBy default, plugins are executed in the order they are added. You can declare\npre-execution plugins using the pre field.\n\nFor example, consider the following two plugins:\n\n\n\nThe Bar plugin is configured with the Foo plugin in its pre field, so the Foo\nplugin will always be executed before the Bar plugin.\n\n\nPost-Plugins#\n\nSimilarly, you can declare post-execution plugins using the post field.\n\n\n\nThe Bar plugin is configured with the Foo plugin in its post field, so the Foo\nplugin will always be executed after the Bar plugin.\n\n\nRemoving Plugins#\n\nYou can remove other plugins within a plugin using the remove field.\n\n\n\nFor example, if you register both the Foo and Bar plugins mentioned above, the\nFoo plugin will not take effect because the Bar plugin declares the removal of\nthe Foo plugin.\n\nIt should be noted that if the current plugin is registered as a specific\nenvironment plugin, only the removal of plugins in the same environment is\nsupported, and global plugins cannot be removed.\n\n\napi.context#\n\napi.context is a read-only object that provides some context information.\n\nThe content of api.context is exactly the same as rsbuild.context, please refer\nto rsbuild.context.\n\n * Example:\n\n\n\n\napi.getRsbuildConfig#\n\n * Example:\n\n\n\n\napi.getNormalizedConfig#\n\n * Example:\n\n\n\n\napi.isPluginExists#\n\n * Example:\n\n\n\n\napi.transform#\n\nUsed to transform the code of modules.\n\n * Type:\n\n\n\napi.transform accepts two params:\n\n * descriptor: an object describing the module's matching conditions.\n * handler: a transformation function that takes the current module code and\n   returns the transformed code.\n\n\nExample#\n\nFor example, match modules with the .pug extension and transform them to\nJavaScript code:\n\n\n\n\nDescriptor Param#\n\nThe descriptor param is an object describing the module's matching conditions.\n\n * Type:\n\n\n\nThe descriptor param supports the following matching conditions:\n\n * test: matches module's path (without query), the same as Rspack's Rule.test.\n\n\n\n * targets: matches the Rsbuild output.target, and applies the current transform\n   function only to the matched targets.\n\n\n\n * environments: matches the Rsbuild environment name, and applies the current\n   transform function only to the matched environments.\n\n\n\n * resourceQuery: matches module's query, the same as Rspack's\n   Rule.resourceQuery.\n\n\n\n * raw: if raw is true, the transform handler will receive the Buffer type code\n   instead of the string type.\n\n\n\n * layer: the same as Rspack's Rule.layer.\n * issuerLayer: the same as Rspack's Rule.issuerLayer.\n\n\nHandler Param#\n\nThe handler param is a transformation function that takes the current module\ncode and returns the transformed code.\n\n * Type:\n\n\n\nThe handler function provides the following params:\n\n * code: The code of the module.\n * resource: The absolute path of the module, including the query.\n * resourcePath: The absolute path of the module, without the query.\n * resourceQuery: The query of the module.\n * environment: The environment context for current build.\n * addDependency: Add an additional file as the dependency. The file will be\n   watched and changes to the file will trigger rebuild. The same as Rspack\n   loader's this.addDependency.\n * emitFile: Emits a file to the build output. The same as Rspack loader's\n   this.emitFile.\n\nFor example:\n\n\n\n\nDifference with loader#\n\napi.transform can be thought of as a lightweight implementation of Rspack\nloader. It provides a simple and easy to use API and automatically calls Rspack\nloader at the backend to transform the code.\n\nIn Rsbuild plugins, you can quickly implement code transformation functions\nusing api.transform, which can handle the majority of common scenarios without\nhaving to learn how to write an Rspack loader.\n\nNote that for some complex code transformation scenarios, api.transform may not\nbe sufficient. In such situations, you can implement it using the Rspack loader.\n\n\napi.resolve#\n\nIntercept and modify module request information before module resolution begins.\nThe same as Rspack's normalModuleFactory.hooks.resolve hook.\n\n * Version: >= 1.0.17\n * Type:\n\n\n\n\nExample#\n\n * Modify the request of a.js file：\n\n\n\n\nHandler Param#\n\nThe handler parameter is a callback function that receives a module require\ninformation and allows you to modify it.\n\n * Type:\n\n\n\nThe handler function provides the following parameters:\n\n * resolveData: Module request information. For details, please refer to Rspack\n   - resolve hook.\n * compiler: The Compiler object of Rspack.\n * compilation: The Compilation object of Rspack.\n * environment: The environment context of the current build.\n\n\napi.processAssets#\n\nModify assets before emitting, the same as Rspack's\ncompilation.hooks.processAssets hook.\n\n * Version: >= 1.0.0\n * Type:\n\n\n\napi.processAssets accepts two params:\n\n * descriptor: an object to describes the stage and matching conditions that\n   trigger processAssets.\n * handler: A callback function that receives the assets object and allows you\n   to modify it.\n\n\nExample#\n\n * Emit a new asset in the additional stage:\n\n\n\n * Updating an existing asset:\n\n\n\n * Removing an asset:\n\n\n\n\nDescriptor Param#\n\nThe descriptor parameter is an object to describes the stage and matching\nconditions that trigger processAssets.\n\n * Type:\n\n\n\nThe descriptor param supports the following properties:\n\n * stage: Rspack internally divides processAssets into multiple stages (refer to\n   process assets stages). You can choose the appropriate stage based on the\n   operations you need to perform.\n\n\n\n * targets: Matches the Rsbuild output.target, and applies the current\n   processAssets function only to the matched targets.\n\n\n\n * environments: matches the Rsbuild environment name, and applies the current\n   processAssets function only to the matched environments.\n\n\n\n\nHandler Param#\n\nThe handler parameter is a callback function that receives an assets object and\nallows you to modify it.\n\n * Type:\n\n\n\nThe handler function provides the following parameters:\n\n * assets: An object where key is the asset's pathname, and the value is data of\n   the asset represented by the Source.\n * compiler: The Compiler object of Rspack.\n * compilation: The Compilation object of Rspack.\n * environment: The environment context of the current build.\n * sources: The Rspack Sources object, which contains multiple classes which\n   represent a Source.\n\n\nProcess assets stages#\n\nHere's the list of supported stages. Rspack will execute these stages\nsequentially from top to bottom. Please select the appropriate stage based on\nthe operation you need to perform.\n\n * additional — add additional assets to the compilation.\n * pre-process — basic preprocessing of the assets.\n * derived — derive new assets from the existing assets.\n * additions — add additional sections to the existing assets e.g. banner or\n   initialization code.\n * optimize — optimize existing assets in a general way.\n * optimize-count — optimize the count of existing assets, e.g. by merging them.\n * optimize-compatibility — optimize the compatibility of existing assets, e.g.\n   add polyfills or vendor prefixes.\n * optimize-size — optimize the size of existing assets, e.g. by minimizing or\n   omitting whitespace.\n * dev-tooling — add development tooling to the assets, e.g. by extracting a\n   source map.\n * optimize-inline — optimize the numbers of existing assets by inlining assets\n   into other assets.\n * summarize — summarize the list of existing assets.\n * optimize-hash — optimize the hashes of the assets, e.g. by generating real\n   hashes of the asset content.\n * optimize-transfer — optimize the transfer of existing assets, e.g. by\n   preparing a compressed (gzip) file as separate asset.\n * analyse — analyze the existing assets.\n * report — creating assets for the reporting purposes.\n\n\napi.expose#\n\nUsed for plugin communication.\n\napi.expose can explicitly expose some properties or methods of the current\nplugin, and other plugins can get these APIs through api.useExposed.\n\n * Type:\n\n\n\n * Example:\n\n\n\n\napi.useExposed#\n\nUsed for plugin communication.\n\napi.useExposed can get the properties or methods exposed by other plugins.\n\n * Type:\n\n\n\n * Example:\n\n\n\n\nIdentifiers#\n\nYou can use Symbol as a unique identifier to avoid potential naming conflicts:\n\n\n\n\nType Declaration#\n\nYou can declare types through the generics of the function:\n\n\n\n\nExecution Order#\n\nWhen communicating between plugins, you need to be aware of the order in which\nthe plugins are executed.\n\nFor example, in the above example, if pluginParent is not registered, or\nregisters after pluginChild, then api.useExposed('plugin-parent') will return an\nundefined.\n\nYou can use the pre, post options of the plugin object, and the order option of\nthe plugin hook to ensure the order is correct.","routePath":"/plugins/dev/core","lang":"en","toc":[{"text":"RsbuildPlugin","id":"rsbuildplugin","depth":2,"charIndex":59},{"text":"Pre-Plugins","id":"pre-plugins","depth":3,"charIndex":944},{"text":"Post-Plugins","id":"post-plugins","depth":3,"charIndex":1266},{"text":"Removing Plugins","id":"removing-plugins","depth":3,"charIndex":1490},{"text":"api.context","id":"apicontext","depth":2,"charIndex":1956},{"text":"api.getRsbuildConfig","id":"apigetrsbuildconfig","depth":2,"charIndex":2162},{"text":"api.getNormalizedConfig","id":"apigetnormalizedconfig","depth":2,"charIndex":2201},{"text":"api.isPluginExists","id":"apiispluginexists","depth":2,"charIndex":2243},{"text":"api.transform","id":"apitransform","depth":2,"charIndex":2280},{"text":"Example","id":"example","depth":3,"charIndex":2565},{"text":"Descriptor Param","id":"descriptor-param","depth":3,"charIndex":2669},{"text":"Handler Param","id":"handler-param","depth":3,"charIndex":3495},{"text":"Difference with loader","id":"difference-with-loader","depth":3,"charIndex":4260},{"text":"api.resolve","id":"apiresolve","depth":2,"charIndex":4851},{"text":"Example","id":"example-1","depth":3,"charIndex":5043},{"text":"Handler Param","id":"handler-param-1","depth":3,"charIndex":5093},{"text":"api.processAssets","id":"apiprocessassets","depth":2,"charIndex":5553},{"text":"Example","id":"example-2","depth":3,"charIndex":5937},{"text":"Descriptor Param","id":"descriptor-param-1","depth":3,"charIndex":6055},{"text":"Handler Param","id":"handler-param-2","depth":3,"charIndex":6725},{"text":"Process assets stages","id":"process-assets-stages","depth":3,"charIndex":7295},{"text":"api.expose","id":"apiexpose","depth":2,"charIndex":8717},{"text":"api.useExposed","id":"apiuseexposed","depth":2,"charIndex":8935},{"text":"Identifiers","id":"identifiers","depth":3,"charIndex":9088},{"text":"Type Declaration","id":"type-declaration","depth":3,"charIndex":9185},{"text":"Execution Order","id":"execution-order","depth":3,"charIndex":9268}],"domain":"","frontmatter":{},"version":""},{"id":168,"title":"Plugin Hooks","content":"bodyTags: HtmlBasicTag[]; }; type Context = { /** * The Compiler object of\nRspack. */ compiler: Rspack.Compiler; /** * The Compilation object of Rspack. */\ncompilation: Rspack.Compilation; /** * URL prefix of assets. * @example\n'https://example.com/' */ assetPrefix: string; /** * The name of the HTML file,\nrelative to the dist directory. * @example 'index.html' */ filename: string; /**\n* The environment context for current build. */ environment: EnvironmentContext;\n}; function ModifyHTMLTags( callback: (tags: HTMLTags, context: Context) =>\nMaybePromise, ): void;","routePath":"/plugins/dev/hooks","lang":"en","toc":[{"text":"Overview","id":"overview","depth":2,"charIndex":-1},{"text":"Common Hooks","id":"common-hooks","depth":3,"charIndex":-1},{"text":"Dev Hooks","id":"dev-hooks","depth":3,"charIndex":-1},{"text":"Build Hooks","id":"build-hooks","depth":3,"charIndex":-1},{"text":"Preview Hooks","id":"preview-hooks","depth":3,"charIndex":-1},{"text":"Hooks Order","id":"hooks-order","depth":2,"charIndex":-1},{"text":"Dev Hooks","id":"dev-hooks-1","depth":3,"charIndex":-1},{"text":"Build Hooks","id":"build-hooks-1","depth":3,"charIndex":-1},{"text":"Preview Hooks","id":"preview-hooks-1","depth":3,"charIndex":-1},{"text":"Global Hooks vs Environment Hooks","id":"global-hooks-vs-environment-hooks","depth":2,"charIndex":-1},{"text":"Global Hooks","id":"global-hooks","depth":3,"charIndex":-1},{"text":"Environment Hooks","id":"environment-hooks","depth":3,"charIndex":-1},{"text":"Callback Order","id":"callback-order","depth":2,"charIndex":-1},{"text":"Default Behavior","id":"default-behavior","depth":3,"charIndex":-1},{"text":"`order` Field","id":"order-field","depth":3,"charIndex":-1},{"text":"Common Hooks","id":"common-hooks-1","depth":2,"charIndex":-1},{"text":"modifyRsbuildConfig","id":"modifyrsbuildconfig","depth":3,"charIndex":-1},{"text":"modifyEnvironmentConfig","id":"modifyenvironmentconfig","depth":3,"charIndex":-1},{"text":"modifyRspackConfig","id":"modifyrspackconfig","depth":3,"charIndex":-1},{"text":"modifyBundlerChain","id":"modifybundlerchain","depth":3,"charIndex":-1},{"text":"modifyHTMLTags","id":"modifyhtmltags","depth":3,"charIndex":-1},{"text":"onBeforeCreateCompiler","id":"onbeforecreatecompiler","depth":3,"charIndex":-1},{"text":"onAfterCreateCompiler","id":"onaftercreatecompiler","depth":3,"charIndex":-1},{"text":"onBeforeEnvironmentCompile","id":"onbeforeenvironmentcompile","depth":3,"charIndex":-1},{"text":"onAfterEnvironmentCompile","id":"onafterenvironmentcompile","depth":3,"charIndex":-1},{"text":"Build Hooks","id":"build-hooks-2","depth":2,"charIndex":-1},{"text":"onBeforeBuild","id":"onbeforebuild","depth":3,"charIndex":-1},{"text":"onAfterBuild","id":"onafterbuild","depth":3,"charIndex":-1},{"text":"onCloseBuild","id":"onclosebuild","depth":3,"charIndex":-1},{"text":"Dev Hooks","id":"dev-hooks-2","depth":2,"charIndex":-1},{"text":"onBeforeStartDevServer","id":"onbeforestartdevserver","depth":3,"charIndex":-1},{"text":"onAfterStartDevServer","id":"onafterstartdevserver","depth":3,"charIndex":-1},{"text":"onAfterEnvironmentCompile","id":"onafterenvironmentcompile-1","depth":3,"charIndex":-1},{"text":"onDevCompileDone","id":"ondevcompiledone","depth":3,"charIndex":-1},{"text":"onCloseDevServer","id":"onclosedevserver","depth":3,"charIndex":-1},{"text":"Preview Hooks","id":"preview-hooks-2","depth":2,"charIndex":-1},{"text":"onBeforeStartProdServer","id":"onbeforestartprodserver","depth":3,"charIndex":-1},{"text":"onAfterStartProdServer","id":"onafterstartprodserver","depth":3,"charIndex":-1},{"text":"Other Hooks","id":"other-hooks","depth":2,"charIndex":-1},{"text":"onExit","id":"onexit","depth":3,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":169,"title":"Plugin System","content":"#\n\nRsbuild provides a lightweight yet powerful plugin system to implement most of\nits functionality and allows for user extension.\n\nPlugins written by developers can modify the default behavior of Rsbuild and add\nvarious additional features, including but not limited to:\n\n * Get context information\n * Register lifecycle hooks\n * Transform module source code\n * Modify Rspack configuration\n * Modify Rsbuild configuration\n * ...\n\n\nComparison#\n\nBefore developing a Rsbuild plugin, you may have been familiar with the plugin\nsystems of tools such as Webpack, Vite, esbuild, etc.\n\nGenerally, Rsbuild's plugin API is similar to esbuild, and compared with Webpack\n/ Rspack plugins, Rsbuild's plugin API is more simple and easier to get started\nwith.\n\n\n\nFrom a functional perspective, Rsbuild's plugin API mainly revolves around\nRsbuild's operation process and build configuration and provides some hooks for\nextension. On the other hand, Rspack's plugin API is more complex and rich,\ncapable of modifying every aspect of the bundling process.\n\nRspack plugins can be integrated into Rsbuild plugins. If the hooks provided by\nRsbuild do not meet your requirements, you can also implement the functionality\nusing Rspack plugin and register Rspack plugins in the Rsbuild plugin:\n\n\n\n\nDeveloping Plugins#\n\nPlugins provide a function similar to (options?: PluginOptions) => RsbuildPlugin\nas an entry point.\n\n\nPlugin Example#\n\n\n\nRegistering the plugin:\n\n\n\n\nPlugin Structure#\n\nFunction-based plugins can accept an options object and return a plugin\ninstance, managing internal state through closures.\n\nThe roles of each part are as follows:\n\n * The name property is used to label the plugin's name.\n * setup serves as the main entry point for the plugin logic.\n * The api object contains various hooks and utility functions.\n\n\nNaming Convention#\n\nThe naming convention for plugins is as follows:\n\n * The function of the plugin is named pluginAbc and exported by name.\n * The name of the plugin follows the format scope:foo-bar or plugin-foo-bar,\n   adding scope: can avoid naming conflicts with other plugins.\n\nHere is an example:\n\n\n\nTIP\n\nThe name of official Rsbuild plugins uniformly uses rsbuild: as a prefix, for\nexample, rsbuild:react corresponds to @rsbuild/plugin-react.\n\n\nTemplate Repository#\n\nrsbuild-plugin-template is a minimal Rsbuild plugin template repository that you\ncan use as a basis for developing your Rsbuild plugin.\n\n\nEnvironment Plugin#\n\nRsbuild supports building outputs for multiple environments at the same time,\nand supports add plugins for specified environment.\n\nIf you want the plugin you develop to support use as an Environment plugin, you\nneed to pay attention to the following points:\n\n 1. Each environment has its own Rsbuild config:\n    * Use environment context instead of getRsbuildConfig to get environment\n      information.\n    * When modifying the Rsbuild config for a specific environment, prioritize\n      using modifyEnvironmentConfig instead of modifyRsbuildConfig to avoid\n      affecting other environments.\n 2. Be aware of side effects, your plugin code may be executed multiple times:\n    * When the same plugin is registered multiple times in different\n      environments, it will be regarded as multiple Rsbuild plugins (even if\n      they point to the same plugin instance), because they have different\n      Rsbuild environment contexts.\n\nHere is an example:\n\n\n\n\nReference Other Plugins#\n\nRsbuild's plugins config supports passing a nested array, which means you can\nreference and register other Rsbuild plugins within your plugin.\n\nFor example, register pluginBar within pluginFoo:\n\n\n\n\nLifetime Hooks#\n\nRsbuild uses lifetime planning work internally, and plugins can also register\nhooks to take part in any stage of the workflow and implement their own\nfeatures.\n\nThe full list of Rsbuild's lifetime hooks can be found in the API References.\n\nThe Rsbuild does not take over the hooks of the underlying Rspack, whose\ndocuments can be found here: Rspack Plugin API.\n\n\nUse Rsbuild Config#\n\nCustom plugins can usually get config from function parameters, just define and\nuse it at your pleasure.\n\nBut sometimes you may need to read and change the public config of the Rsbuild.\nTo begin with, you should understand how the Rsbuild generates and uses its\nconfig:\n\n * Read, parse config and merge with default values.\n * Plugins modify the config by api.modifyRsbuildConfig(...).\n * Normalize the config and provide it to consume, then the config can no longer\n   be modified.\n\nRefer to this tiny example:\n\n\n\nThere are 3 ways to use Rsbuild config:\n\n * register callback with api.modifyRsbuildConfig(config => {}) to modify\n   config.\n * use api.getRsbuildConfig() to get Rsbuild config.\n * use api.getNormalizedConfig() to get finally normalized config.\n\nWhen normalized, it will again merge the config object with the default values\nand make sure the optional properties exist. So for PluginUploadDist, part of\nits type looks like:\n\n\n\nThe return value type of getNormalizedConfig() is slightly different from that\nof RsbuildConfig and is narrowed compared to the types described elsewhere in\nthe documentation. You don't need to fill in the defaults when you use it.\n\nTherefore, the best way to use configuration options is to\n\n * Modify the config with api.modifyRsbuildConfig(config => {})\n * Read api.getNormalizedConfig() as the actual config used by the plugin in the\n   further lifetime.\n\n\nModify Rspack Configuration#\n\nRsbuild plugin allows you to modify the built-in Rspack configuration,\nincluding:\n\n * api.modifyRspackConfig: Modify the Rspack configuration object.\n * api.modifyBundlerChain: Modify the Rspack configuration through rspack-chain.\n\n\nExample#\n\nFor example, register eslint-rspack-plugin via Rsbuild plugin:\n\n","routePath":"/plugins/dev/","lang":"en","toc":[{"text":"Comparison","id":"comparison","depth":2,"charIndex":431},{"text":"Developing Plugins","id":"developing-plugins","depth":2,"charIndex":1274},{"text":"Plugin Example","id":"plugin-example","depth":3,"charIndex":1397},{"text":"Plugin Structure","id":"plugin-structure","depth":3,"charIndex":1444},{"text":"Naming Convention","id":"naming-convention","depth":3,"charIndex":1813},{"text":"Template Repository","id":"template-repository","depth":3,"charIndex":2266},{"text":"Environment Plugin","id":"environment-plugin","depth":3,"charIndex":2426},{"text":"Reference Other Plugins","id":"reference-other-plugins","depth":3,"charIndex":3403},{"text":"Lifetime Hooks","id":"lifetime-hooks","depth":2,"charIndex":3627},{"text":"Use Rsbuild Config","id":"use-rsbuild-config","depth":2,"charIndex":4007},{"text":"Modify Rspack Configuration","id":"modify-rspack-configuration","depth":2,"charIndex":5432},{"text":"Example","id":"example","depth":3,"charIndex":5695}],"domain":"","frontmatter":{},"version":""},{"id":170,"title":"Plugin List","content":"#\n\n\nPlugin System#\n\nYou can read about the functionality of Rsbuild plugins and how to develop an\nRsbuild plugin in the Plugin System documentation.\n\n\nUsing Plugins#\n\nYou can register Rsbuild plugins in the rsbuild.config.ts file using the plugins\noption. For more details, refer to plugins.\n\nIf you are using Rsbuild's JavaScript API, you can register the plugin using the\naddPlugins method.\n\n\nOfficial Plugins#\n\nThe following are official plugins that can be used in Rsbuild.\n\n\nFor React#\n\nPlugins available for the React framework:\n\n * React Plugin: Provides support for React.\n * SVGR Plugin: Support convert SVG to React components.\n * Styled Components Plugin: Provide compile-time support for styled-components.\n\n\nFor Vue#\n\nPlugins available for the Vue framework:\n\n * Vue Plugin: Provides support for Vue 3 SFC (Single File Components).\n * Vue JSX Plugin: Provides support for Vue 3 JSX / TSX syntax.\n * Vue2 Plugin: Provides support for Vue 2 SFC (Single File Components).\n * Vue2 JSX Plugin: Provides support for Vue 2 JSX / TSX syntax.\n\n\nFor Preact#\n\nPlugins available for the Preact framework:\n\n * Preact Plugin: Provides support for Preact.\n\n\nFor Svelte#\n\nPlugins available for the Svelte framework:\n\n * Svelte Plugin: Provides support for Svelte components (.svelte files).\n\n\nFor Solid#\n\nPlugins available for the Solid framework:\n\n * Solid Plugin: Provides support for Solid.\n\n\nCommon#\n\nThe following are common framework-agnostic plugins:\n\n * Assets Retry Plugin: Used to automatically resend requests when static assets\n   fail to load.\n * Babel Plugin: Provides support for Babel transpilation capabilities.\n * Sass Plugin: Use Sass as the CSS preprocessor.\n * Less Plugin: Use Less as the CSS preprocessor.\n * Stylus Plugin: Use Stylus as the CSS preprocessor.\n * Basic SSL Plugin: Generate an untrusted, self-signed certificate for the\n   HTTPS server.\n * ESLint Plugin: Run ESLint checks during the compilation.\n * Type Check Plugin: Run TypeScript type checker on a separate process.\n * Image Compress Plugin: Compress the image assets.\n * MDX Plugin: Provide support for MDX.\n * Node Polyfill Plugin: Used to inject polyfills of Node core modules in the\n   browser side.\n * Source Build Plugin: This plugin is designed for the monorepo scenario. It\n   supports referencing source code from other subdirectories and performs build\n   and hot update.\n * Check Syntax Plugin: Check the syntax compatibility of output files and\n   determine if there are any advanced syntaxes that could cause compatibility\n   issues.\n * CSS Minimizer Plugin: Used to customize CSS minimizer, switch to cssnano or\n   other tools for CSS compression.\n * Typed CSS Modules Plugin: Generate TypeScript declaration file for CSS\n   Modules.\n * Pug Plugin: Provides support for the Pug template engine.\n * Rem Plugin: Implements the rem adaptive layout for mobile pages.\n * UMD Plugin: Generate outputs in UMD format.\n * YAML Plugin: Import YAML files and convert them into JavaScript objects.\n * TOML Plugin: Import TOML files and convert them into JavaScript objects.\n\nTIP\n\nYou can find the source code of all official plugins in web-infra-dev/rsbuild\nand rspack-contrib.\n\n\nCommunity Plugins#\n\nYou can check out the Rsbuild plugins provided by the community at\nawesome-rspack - Rsbuild Plugins.\n\nYou can also discover more Rsbuild plugins on npm by searching for the keyword\nrsbuild-plugin.","routePath":"/plugins/list/","lang":"en","toc":[{"text":"Plugin System","id":"plugin-system","depth":2,"charIndex":3},{"text":"Using Plugins","id":"using-plugins","depth":2,"charIndex":150},{"text":"Official Plugins","id":"official-plugins","depth":2,"charIndex":394},{"text":"For React","id":"for-react","depth":3,"charIndex":479},{"text":"For Vue","id":"for-vue","depth":3,"charIndex":720},{"text":"For Preact","id":"for-preact","depth":3,"charIndex":1048},{"text":"For Svelte","id":"for-svelte","depth":3,"charIndex":1155},{"text":"For Solid","id":"for-solid","depth":3,"charIndex":1289},{"text":"Common","id":"common","depth":3,"charIndex":1392},{"text":"Community Plugins","id":"community-plugins","depth":2,"charIndex":3171}],"domain":"","frontmatter":{},"version":""},{"id":171,"title":"Assets Retry Plugin","content":"+ <%= htmlPlugin.tags.bodyTags %>","routePath":"/plugins/list/plugin-assets-retry","lang":"en","toc":[{"text":"Quick Start","id":"quick-start","depth":2,"charIndex":-1},{"text":"Install Plugin","id":"install-plugin","depth":3,"charIndex":-1},{"text":"Register Plugin","id":"register-plugin","depth":3,"charIndex":-1},{"text":"Options","id":"options","depth":2,"charIndex":-1},{"text":"domain","id":"domain","depth":3,"charIndex":-1},{"text":"type","id":"type","depth":3,"charIndex":-1},{"text":"max","id":"max","depth":3,"charIndex":-1},{"text":"test","id":"test","depth":3,"charIndex":-1},{"text":"crossOrigin","id":"crossorigin","depth":3,"charIndex":-1},{"text":"onRetry","id":"onretry","depth":3,"charIndex":-1},{"text":"onSuccess","id":"onsuccess","depth":3,"charIndex":-1},{"text":"onFail","id":"onfail","depth":3,"charIndex":-1},{"text":"addQuery","id":"addquery","depth":3,"charIndex":-1},{"text":"inlineScript","id":"inlinescript","depth":3,"charIndex":-1},{"text":"minify","id":"minify","depth":3,"charIndex":-1},{"text":"Notes","id":"notes","depth":2,"charIndex":-1},{"text":"Limitation","id":"limitation","depth":2,"charIndex":-1},{"text":"Module Federation","id":"module-federation","depth":3,"charIndex":-1},{"text":"Micro-frontend","id":"micro-frontend","depth":3,"charIndex":-1},{"text":"Assets in custom templates","id":"assets-in-custom-templates","depth":3,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":172,"title":"Babel Plugin","content":"#\n\nRsbuild uses SWC transpilation by default. When existing functions cannot meet\nthe requirements, and some Babel presets or plugins need to be added for\nadditional processing, you can use Rsbuild's Babel Plugin.\n\n\nQuick Start#\n\n\nInstall Plugin#\n\nYou can install the plugin using the following command:\n\n\nRegister Plugin#\n\nYou can register the plugin in the rsbuild.config.ts file:\n\n\n\n\nCompilation Cache#\n\nAfter using the Babel plugin, Rsbuild will perform the Babel transpilation in\naddition to the standard SWC transpilation, which adds additional compilation\noverhead. This can cause a noticeable decrease in build speed.\n\nTo reduce the overhead of Babel transpilation, the @rsbuild/plugin-babel enables\nBabel compilation cache by default. If you want to disable the cache, you can\nset performance.buildCache to false:\n\n\n\n\nOptions#\n\n\nbabelLoaderOptions#\n\nOptions passed to babel-loader, please refer to the babel-loader documentation\nfor detailed usage.\n\n * Type: Object | Function\n * Default:\n\n\n\nFunction Type#\n\nWhen configuration is of type Function, the default Babel configuration will be\npassed as the first parameter. You can directly modify the configuration object\nor return an object as the final babel-loader configuration.\n\n\n\nThe second parameter of the function provides some more convenient utility\nfunctions. Please continue reading the documentation below.\n\nTIP\n\nThe above example is just for reference, usually you don't need to manually\nconfigure babel-plugin-import, because the Rsbuild already provides a more\ngeneral source.transformImport configuration.\n\nObject Type#\n\nWhen configuration's type is Object, the config will be shallow merged with\ndefault config by Object.assign.\n\nCAUTION\n\nNote that Object.assign is a shallow copy and will completely overwrite the\nbuilt-in presets or plugins array, please use it with caution.\n\n\n\nUtil Functions#\n\nWhen configuration is a Function, the tool functions available for the second\nparameter are as follows:\n\naddPlugins#\n\n * Type: (plugins: BabelPlugin[]) => void\n\nAdd some Babel plugins. For example:\n\n\n\naddPresets#\n\n * Type: (presets: BabelPlugin[]) => void\n\nAdd Babel preset configuration. (No need to add presets in most cases)\n\n\n\nremovePlugins#\n\n * Type: (plugins: string | string[]) => void\n\nTo remove the Babel plugin, just pass in the name of the plugin to be removed,\nyou can pass in a single string or an array of strings.\n\n\n\nremovePresets#\n\n * Type: (presets: string | string[]) => void\n\nTo remove the Babel preset configuration, pass in the name of the preset to be\nremoved, you can pass in a single string or an array of strings.\n\n\n\n\ninclude#\n\n * Type: string | RegExp | (string | RegExp)[]\n * Default: undefined\n\nUsed to specify the files that need to be compiled by Babel.\n\nDue to the performance overhead of Babel compilation, matching only certain\nfiles through include can reduce the number of modules compiled by Babel,\nthereby improving build performance.\n\nFor example, to only compile .custom.js files and ignore files under\nnode_modules:\n\n\n\nTIP\n\nWhen you configure the include or exclude options, Rsbuild will create a\nseparate Rspack rule to apply babel-loader and swc-loader.\n\nThis separate rule is completely independent of the SWC rule built into Rsbuild\nand is not affected by source.include and source.exclude.\n\n\nexclude#\n\n * Type: string | RegExp | (string | RegExp)[]\n * Default: undefined\n\nUsed to specify the files that do not need to be compiled by Babel.\n\nDue to the performance overhead of Babel compilation, excluding certain files\nthrough exclude can reduce the number of modules compiled by Babel, thereby\nimproving build performance.\n\n\nDebugging Configs#\n\nAfter modifying the babel-loader configuration, you can view the final generated\nconfiguration in Rsbuild debug mode.\n\nFirst, enable debug mode by using the DEBUG=rsbuild option:\n\n\n\nThen open the generated rspack.config.web.mjs file and search for the\nbabel-loader keyword to see the complete babel-loader configuration.\n\n\nFAQ#\n\n\nCompilation Freezes#\n\nAfter using the babel plugin, if the compilation progress bar is stuck, but\nthere is no Error log on the terminal, it is usually because an exception\noccurred during the compilation. In some cases, when Error is caught by webpack\nor other modules, the error log can not be output correctly. The most common\nscenario is that there is an exception in the Babel config, which is caught by\nwebpack, and webpack swallows the Error in some cases.\n\nSolution:\n\nIf this problem occurs after you modify the Babel config, it is recommended to\ncheck for the following incorrect usages:\n\n 1. You have configured a plugin or preset that does not exist, maybe the name\n    is misspelled, or it is not installed correctly.\n\n\n\n 2. Whether multiple babel-plugin-imports are configured, but the name of each\n    babel-plugin-import is not declared in the third item of the array.\n\n\n\n","routePath":"/plugins/list/plugin-babel","lang":"en","toc":[{"text":"Quick Start","id":"quick-start","depth":2,"charIndex":215},{"text":"Install Plugin","id":"install-plugin","depth":3,"charIndex":230},{"text":"Register Plugin","id":"register-plugin","depth":3,"charIndex":305},{"text":"Compilation Cache","id":"compilation-cache","depth":2,"charIndex":386},{"text":"Options","id":"options","depth":2,"charIndex":826},{"text":"babelLoaderOptions","id":"babelloaderoptions","depth":3,"charIndex":837},{"text":"Function Type","id":"function-type","depth":4,"charIndex":1000},{"text":"Object Type","id":"object-type","depth":4,"charIndex":1579},{"text":"Util Functions","id":"util-functions","depth":4,"charIndex":1854},{"text":"include","id":"include","depth":3,"charIndex":2614},{"text":"exclude","id":"exclude","depth":3,"charIndex":3308},{"text":"Debugging Configs","id":"debugging-configs","depth":2,"charIndex":3642},{"text":"FAQ","id":"faq","depth":2,"charIndex":3985},{"text":"Compilation Freezes","id":"compilation-freezes","depth":3,"charIndex":3992}],"domain":"","frontmatter":{},"version":""},{"id":173,"title":"Less Plugin","content":"#\n\nUse Less as the CSS preprocessor, implemented based on less-loader.\n\n\nQuick Start#\n\n\nInstall Plugin#\n\nYou can install the plugin using the following command:\n\nTIP\n * The Less plugin only supports @rsbuild/core versions >= 0.7.0.\n * If the @rsbuild/core version is lower than 0.7.0, it has builtin support for\n   the Less plugin, you do not need to install it.\n\n\nRegister Plugin#\n\nYou can register the plugin in the rsbuild.config.ts file:\n\n\n\nAfter registering the plugin, you can import *.less or *.module.less files into\nthe code without adding other configs.\n\n\nOptions#\n\nIf you need to customize the compilation behavior of Less, you can use the\nfollowing configs.\n\n\nlessLoaderOptions#\n\nYou can modify the config of less-loader via lessLoaderOptions.\n\n * Type: Object | Function\n * Default:\n\n\n\n * Example:\n\nIf lessLoaderOptions is an object, it is merged with the default config through\nObject.assign in a shallow way. It should be noted that lessOptions is merged\nthrough deepMerge in a deep way.\n\n\n\nIf lessLoaderOptions is a function, the default config is passed as the first\nparameter, which can be directly modified or returned as the final result.\n\n\n\nTIP\n\nThe lessLoaderOptions.lessOptions config is passed to Less. See the Less\ndocumentation for all available options.\n\n\ninclude#\n\n * Type: RuleSetCondition\n * Default: /\\.less$/\n * Version: >= 1.1.0\n\nInclude some .less files, they will be transformed by less-loader. The value is\nthe same as the rule.test option in Rspack.\n\nFor example:\n\n\n\n\nexclude#\n\n * Type: RuleSetCondition\n * Default: undefined\n\nExclude some .less files, they will not be transformed by less-loader.\n\nFor example:\n\n\n\n\nModifying Less Version#\n\nIn some scenarios, if you need to use a specific version of Less instead of the\nbuilt-in Less v4 in Rsbuild, you can install the desired Less version in your\nproject and set it up using the implementation option of the less-loader.\n\n\n\n\nPractices#\n\n\nConfigure multiple Less plugins#\n\nBy using the include and exclude options, you can register multiple Less plugins\nand specify different options for each plugin.\n\nFor example:\n\n\n\n\nFAQ#\n\n\nDivision in Less file doesn't work?#\n\nThe built-in Less version for @rsbuild/plugin-less is v4. Compared to v3, there\nare some differences in the division syntax in Less v4:\n\n\n\nThe division syntax in Less can be modified through configuration. For more\ndetails, see Less - Math.","routePath":"/plugins/list/plugin-less","lang":"en","toc":[{"text":"Quick Start","id":"quick-start","depth":2,"charIndex":72},{"text":"Install Plugin","id":"install-plugin","depth":3,"charIndex":87},{"text":"Register Plugin","id":"register-plugin","depth":3,"charIndex":364},{"text":"Options","id":"options","depth":2,"charIndex":565},{"text":"lessLoaderOptions","id":"lessloaderoptions","depth":3,"charIndex":671},{"text":"include","id":"include","depth":3,"charIndex":1282},{"text":"exclude","id":"exclude","depth":3,"charIndex":1504},{"text":"Modifying Less Version","id":"modifying-less-version","depth":2,"charIndex":1652},{"text":"Practices","id":"practices","depth":2,"charIndex":1913},{"text":"Configure multiple Less plugins","id":"configure-multiple-less-plugins","depth":3,"charIndex":1926},{"text":"FAQ","id":"faq","depth":2,"charIndex":2106},{"text":"Division in Less file doesn't work?","id":"division-in-less-file-doesnt-work","depth":3,"charIndex":2113}],"domain":"","frontmatter":{},"version":""},{"id":174,"title":"Preact Plugin","content":"#\n\nThe Preact plugin provides support for Preact, integrating features such as JSX\ncompilation and React aliasing.\n\n\nQuick Start#\n\n\nInstall Plugin#\n\nYou can install the plugin using the following command:\n\n\nRegister Plugin#\n\nYou can register the plugin in the rsbuild.config.ts file:\n\n\n\nAfter registering the plugin, you can directly develop Preact.\n\n\nOptions#\n\n\nreactAliasesEnabled#\n\nWhether to aliases react, react-dom to preact/compat.\n\n * Type: boolean\n * Default: true\n * Example: Disable aliases.\n\n\n\n\nprefreshEnabled#\n\nWhether to inject Prefresh for HMR.\n\n * Type: boolean\n * Default: true\n * Version: >= v1.1.0\n * Example: Disable Prefresh.\n\n\n\n\ninclude#\n\nInclude files to be processed by the @rspack/plugin-preact-refresh plugin. The\nvalue is the same as the rule.test option in Rspack.\n\n * Type: RuleSetCondition\n * Default: /\\.(?:js|jsx|mjs|cjs|ts|tsx|mts|cts)$/\n * Version: >= v1.1.0\n\n\n\n\nexclude#\n\nExclude files from being processed by the @rspack/plugin-preact-refresh plugin.\nThe value is the same as the rule.exclude option in Rspack.\n\n * Type: RuleSetCondition\n * Default: /[\\\\/]node_modules[\\\\/]/\n * Version: >= v1.1.0\n\n","routePath":"/plugins/list/plugin-preact","lang":"en","toc":[{"text":"Quick Start","id":"quick-start","depth":2,"charIndex":116},{"text":"Install Plugin","id":"install-plugin","depth":3,"charIndex":131},{"text":"Register Plugin","id":"register-plugin","depth":3,"charIndex":206},{"text":"Options","id":"options","depth":2,"charIndex":351},{"text":"reactAliasesEnabled","id":"reactaliasesenabled","depth":3,"charIndex":362},{"text":"prefreshEnabled","id":"prefreshenabled","depth":3,"charIndex":506},{"text":"include","id":"include","depth":3,"charIndex":651},{"text":"exclude","id":"exclude","depth":3,"charIndex":897}],"domain":"","frontmatter":{},"version":""},{"id":175,"title":"React Plugin","content":"#\n\nThe React plugin provides support for React, integrating features such as JSX\ncompilation and React Refresh.\n\n\nQuick Start#\n\n\nInstall Plugin#\n\nYou can install the plugin using the following command:\n\n\nRegister Plugin#\n\nYou can register the plugin in the rsbuild.config.ts file:\n\n\n\nAfter registering the plugin, you can directly develop React.\n\n\nOptions#\n\n\nswcReactOptions#\n\nConfigure the behavior of SWC to transform React code, the same as SWC's\njsc.transform.react option.\n\n * Type:\n\n\n\n * Default:\n\n\n\n\nswcReactOptions.runtime#\n\n * Type: 'automatic' | 'classic'\n * Default: 'automatic'\n\nBy default, Rsbuild uses the new JSX runtime introduced in React 17, which is\nruntime: 'automatic'.\n\nIf your current React version is lower than 16.14.0, you can set runtime to\n'classic':\n\n\n\n> React 16.14.0 can use the new JSX runtime.\n\nWhen using the classic JSX runtime, you need to manually import React in your\ncode:\n\n\n\n\nswcReactOptions.importSource#\n\n * Type: string\n * Default: 'react'\n\nWhen runtime is 'automatic', you can specify the import path of the JSX runtime\nthrough importSource.\n\nFor example, when using Emotion, you can set importSource to '@emotion/react':\n\n\n\n\nsplitChunks#\n\nWhen chunkSplit.strategy set to split-by-experience, Rsbuild will automatically\nsplit react and router related packages into separate chunks by default:\n\n * lib-react.js: includes react, react-dom, and react's sub-dependencies\n   (scheduler).\n * lib-router.js: includes react-router, react-router-dom, and react-router's\n   sub-dependencies (history, @remix-run/router).\n\nThis option is used to control this behavior and determine whether the react and\nrouter related packages need to be split into separate chunks.\n\n * Type:\n\n\n\n * Default:\n\n\n\n * Example:\n\n\n\n\nenableProfiler#\n\n * Type: boolean\n * Default: false\n\nWhen set to true, enables the React Profiler for performance analysis in\nproduction builds. Use the React DevTools to examine profiling results and\nidentify potential performance optimizations. Profiling adds a slight overhead,\nso it's disabled by default in production mode.\n\n\n\nSet REACT_PROFILER=true when running build script:\n\n\n\nSince the Windows system does not support the above usage, you can also use\ncross-env to set environment variables. This ensures compatibility across\ndifferent systems:\n\n\n\n> See the React docs for details about profiling using the React DevTools.\n\n\nreactRefreshOptions#\n\n * Type:\n\n\n\n * Default:\n\n\n\nSet the options for @rspack/plugin-react-refresh. The passed value will be\nshallowly merged with the default value.\n\n * Example:\n\n\n\n\nfastRefresh#\n\n * Type: boolean\n * Default: true\n\nWhether to enable React Fast Refresh in development mode.\n\nIf you need to disable Fast Refresh, you can set it to false:\n\n","routePath":"/plugins/list/plugin-react","lang":"en","toc":[{"text":"Quick Start","id":"quick-start","depth":2,"charIndex":113},{"text":"Install Plugin","id":"install-plugin","depth":3,"charIndex":128},{"text":"Register Plugin","id":"register-plugin","depth":3,"charIndex":203},{"text":"Options","id":"options","depth":2,"charIndex":347},{"text":"swcReactOptions","id":"swcreactoptions","depth":3,"charIndex":358},{"text":"swcReactOptions.runtime","id":"swcreactoptionsruntime","depth":3,"charIndex":506},{"text":"swcReactOptions.importSource","id":"swcreactoptionsimportsource","depth":3,"charIndex":915},{"text":"splitChunks","id":"splitchunks","depth":3,"charIndex":1169},{"text":"enableProfiler","id":"enableprofiler","depth":3,"charIndex":1743},{"text":"reactRefreshOptions","id":"reactrefreshoptions","depth":3,"charIndex":2378},{"text":"fastRefresh","id":"fastrefresh","depth":3,"charIndex":2560}],"domain":"","frontmatter":{},"version":""},{"id":176,"title":"Sass Plugin","content":"#\n\nUse Sass as the CSS preprocessor, implemented based on sass-loader.\n\n\nQuick Start#\n\n\nInstall Plugin#\n\nYou can install the plugin using the following command:\n\nTIP\n * The Sass plugin only supports @rsbuild/core versions >= 0.7.0.\n * If the @rsbuild/core version is lower than 0.7.0, it has builtin support for\n   the Sass plugin, you do not need to install it.\n\n\nRegister Plugin#\n\nYou can register the plugin in the rsbuild.config.ts file:\n\n\n\nAfter registering the plugin, you can import *.scss, *.sass, *.module.scss or\n*.module.sass files into the code without adding other configs.\n\n\nOptions#\n\nIf you need to customize the compilation behavior of Sass, you can use the\nfollowing configs.\n\n\nsassLoaderOptions#\n\nModify the config of sass-loader.\n\n * Type: Object | Function\n * Default:\n\n\n\n * Example:\n\nIf sassLoaderOptions is an object, it is merged with the default config through\nObject.assign. It should be noted that sassOptions is merged through deepMerge\nin a deep way.\n\n\n\nIf sassLoaderOptions is a function, the default config is passed as the first\nparameter, which can be directly modified or returned as the final result.\n\n\n\n\ninclude#\n\n * Type: RuleSetCondition\n * Default: /\\.s(?:a|c)ss$/\n * Version: >= 1.1.0\n\nInclude some .scss or .sass files, they will be transformed by sass-loader. The\nvalue is the same as the rule.test option in Rspack.\n\nFor example:\n\n\n\n\nexclude#\n\n * Type: RuleSetCondition\n * Default: undefined\n\nExclude some .sass or .scss files, they will not be transformed by sass-loader.\n\nFor example:\n\n\n\n\nPractices#\n\n\nModify Sass Implementation#\n\nSass provides several implementations, including sass, sass-embedded, and\nnode-sass.\n\nRsbuild uses the latest sass-embedded implementation by default. sass-embedded\nis a JavaScript wrapper around the native Dart Sass executable, providing a\nconsistent API and optimal performance.\n\nIf you need to use a different Sass implementation instead of the built-in\nsass-embedded included in Rsbuild, you can install the preferred Sass\nimplementation in your project and specify it using the sass-loader's\nimplementation option.\n\n\n\nTIP\n\nSwitching from sass-embedded to another Sass implementation can significantly\ndecrease build performance.\n\n\nSelect Sass API#\n\nRsbuild uses the latest modern-compiler API by default. If you rely on the\nlegacy API of Sass, you can set the api option of the sass-loader to legacy to\nmaintain compatibility with some deprecated Sass syntax.\n\n\n\nTIP\n\nSass's legacy API has been deprecated and will be removed in Sass 2.0. It is\nrecommended to migrate to the modern-compiler API. For more details, see Sass -\nLegacy JS API.\n\n\nIgnore Sass Deprecation Warnings#\n\nSass uses warning logs to notify you of deprecated usages that will be removed\nin future major releases of Sass. It is recommended to make changes as suggested\nby the logs. If you do not want to see these logs, you can ignore these warnings\nby using the silenceDeprecations option in Sass.\n\nFor example, @import has been deprecated in Sass. If you use this syntax, Sass\nwill output the following prompt:\n\n\n\n@rsbuild/plugin-sass adds the following configuration by default to silence the\n@import warning, if you need to silence other deprecated warnings, you can use\nthe same method.\n\n\n\n> For more information, see Sass Deprecations.\n\n\nConfigure multiple Sass plugins#\n\nBy using the include and exclude options, you can register multiple Sass plugins\nand specify different options for each plugin.\n\nFor example:\n\n","routePath":"/plugins/list/plugin-sass","lang":"en","toc":[{"text":"Quick Start","id":"quick-start","depth":2,"charIndex":72},{"text":"Install Plugin","id":"install-plugin","depth":3,"charIndex":87},{"text":"Register Plugin","id":"register-plugin","depth":3,"charIndex":364},{"text":"Options","id":"options","depth":2,"charIndex":588},{"text":"sassLoaderOptions","id":"sassloaderoptions","depth":3,"charIndex":694},{"text":"include","id":"include","depth":3,"charIndex":1138},{"text":"exclude","id":"exclude","depth":3,"charIndex":1375},{"text":"Practices","id":"practices","depth":2,"charIndex":1532},{"text":"Modify Sass Implementation","id":"modify-sass-implementation","depth":3,"charIndex":1545},{"text":"Select Sass API","id":"select-sass-api","depth":3,"charIndex":2210},{"text":"Ignore Sass Deprecation Warnings","id":"ignore-sass-deprecation-warnings","depth":3,"charIndex":2621},{"text":"Configure multiple Sass plugins","id":"configure-multiple-sass-plugins","depth":3,"charIndex":3291}],"domain":"","frontmatter":{},"version":""},{"id":177,"title":"Solid Plugin","content":"#\n\nThe Solid plugin provides support for Solid features. The plugin internally\nintegrates babel-preset-solid.\n\nTIP\n\nThe Solid plugin relies on Babel transpilation and requires an additional Babel\nPlugin. At the same time, adding the Babel plugin will cause additional\ncompilation overhead.\n\n\nQuick Start#\n\n\nInstall Plugin#\n\nYou can install the plugin using the following command:\n\n\nRegister Plugin#\n\nYou can register the plugin in the rsbuild.config.ts file:\n\n\n\nAfter registering the plugin, you can directly develop Solid.\n\nTIP\n\nSince the Solid JSX relies on Babel for compilation, you need to additionally\nadd the Babel plugin.\n\nBabel compilation will introduce extra overhead, in the example above, we use\ninclude to match .jsx and .tsx files, thereby reducing the performance cost\nbrought by Babel.\n\n\nOptions#\n\nIf you need to customize the compilation behavior of Solid, you can use the\nfollowing configs.\n\n\nsolidPresetOptions#\n\nOptions passed to babel-preset-solid, please refer to the babel-preset-solid\ndocumentation for detailed usage.\n\n * Type: SolidPresetOptions\n * Default: {}\n * Example:\n\n","routePath":"/plugins/list/plugin-solid","lang":"en","toc":[{"text":"Quick Start","id":"quick-start","depth":2,"charIndex":291},{"text":"Install Plugin","id":"install-plugin","depth":3,"charIndex":306},{"text":"Register Plugin","id":"register-plugin","depth":3,"charIndex":381},{"text":"Options","id":"options","depth":2,"charIndex":804},{"text":"solidPresetOptions","id":"solidpresetoptions","depth":3,"charIndex":911}],"domain":"","frontmatter":{},"version":""},{"id":178,"title":"Stylus Plugin","content":"#\n\nStylus is an Expressive, dynamic and robust CSS preprocessor. With Stylus\nplugins, you can use Stylus as the CSS preprocessor.\n\n\nQuick Start#\n\n\nInstall Plugin#\n\nYou can install the plugin using the following command:\n\n\nRegister Plugin#\n\nYou can register the plugin in the rsbuild.config.ts file:\n\n\n\n\nExample#\n\nAfter registering the plugin, you can import *.styl, *.stylus, *.module.styl or\n*.module.stylus files into the code without adding other configs.\n\n * normalize.styl:\n\n\n\n * title.module.styl:\n\n\n\n * index.js:\n\n\n\n\nOptions#\n\nIf you need to customize the compilation behavior of Stylus, you can use the\nfollowing configs.\n\n\nstylusOptions#\n\n-Type:\n\n\n\n * Default: undefined\n\nOptions passed to Stylus, please refer to the Stylus documentation for specific\nusage.\n\n\n\n\nsourceMap#\n\n * Type: boolean\n * Default: the same as output.sourceMap.css\n\nWhether to generate source map.\n\n","routePath":"/plugins/list/plugin-stylus","lang":"en","toc":[{"text":"Quick Start","id":"quick-start","depth":2,"charIndex":131},{"text":"Install Plugin","id":"install-plugin","depth":3,"charIndex":146},{"text":"Register Plugin","id":"register-plugin","depth":3,"charIndex":221},{"text":"Example","id":"example","depth":2,"charIndex":302},{"text":"Options","id":"options","depth":2,"charIndex":523},{"text":"stylusOptions","id":"stylusoptions","depth":3,"charIndex":631},{"text":"sourceMap","id":"sourcemap","depth":3,"charIndex":771}],"domain":"","frontmatter":{},"version":""},{"id":179,"title":"Svelte Plugin","content":"#\n\nThe Svelte plugin provides support for Svelte components (.svelte files). The\nplugin internally integrates svelte-loader.\n\n\nQuick Start#\n\n\nInstall Plugin#\n\nYou can install the plugin using the following command:\n\n\nRegister Plugin#\n\nYou can register the plugin in the rsbuild.config.ts file:\n\n\n\nAfter registering the plugin, you can import *.svelte files in your code.\n\n\nOptions#\n\nIf you need to customize the compilation behavior of Svelte, you can use the\nfollowing configs.\n\n\nsvelteLoaderOptions#\n\nOptions passed to svelte-loader, please refer to the svelte-loader documentation\nfor detailed usage.\n\n * Type: SvelteLoaderOptions\n * Default:\n\n\n\n * Example:\n\n\n\n\npreprocessOptions#\n\nOptions passed to svelte-preprocess, please refer to the svelte-preprocess\ndocumentation for detailed usage.\n\n * Type: AutoPreprocessOptions\n * Default: undefined\n\n\n\n * Example:\n\n","routePath":"/plugins/list/plugin-svelte","lang":"en","toc":[{"text":"Quick Start","id":"quick-start","depth":2,"charIndex":126},{"text":"Install Plugin","id":"install-plugin","depth":3,"charIndex":141},{"text":"Register Plugin","id":"register-plugin","depth":3,"charIndex":216},{"text":"Options","id":"options","depth":2,"charIndex":372},{"text":"svelteLoaderOptions","id":"svelteloaderoptions","depth":3,"charIndex":480},{"text":"preprocessOptions","id":"preprocessoptions","depth":3,"charIndex":664}],"domain":"","frontmatter":{},"version":""},{"id":180,"title":"SVGR Plugin","content":"#\n\nBy default, Rsbuild will treat SVG files as static assets. For processing rules,\nplease refer to: Import Static Assets.\n\nWith SVGR plugin, Rsbuild supports transform SVG to React components via SVGR.\n\n\nQuick Start#\n\n\nInstall Plugin#\n\nYou can install the plugin using the following command:\n\n\nRegister Plugin#\n\nYou can register the plugin in the rsbuild.config.ts file:\n\n\n\n\nExample#\n\n\nDefault Usage#\n\nAfter registering the plugin, when import an SVG in a JS file, if the imported\npath contains the ?react suffix, Rsbuild will call SVGR to transform the SVG\ninto a React component.\n\n\n\nIf the imported path does not contain the ?react suffix, then the SVG will be\ntreated as a normal static asset and you will get a URL string or base64 URL,\nsee Import Static Assets.\n\n\n\n\nNamed Import#\n\n@rsbuild/plugin-svgr supports named imports for ReactComponent when using SVGR.\nYou need to set svgrOptions.exportType to 'named':\n\n\n\n\n\n@rsbuild/plugin-svgr also supports default imports and mixed imports:\n\n * Enable default imports by setting svgrOptions.exportType to 'default'.\n * Enable mixed imports by setting the mixedImport option to use both default\n   and named imports at the same time.\n\n\nOptions#\n\nIf you need to customize the compilation behavior of Svgr, you can use the\nfollowing configs.\n\n * Type:\n\n\n\n\nsvgrOptions#\n\nModify the options of SVGR, the passed object will be deep merged with the\ndefault value. See SVGR - Options for details.\n\n * Type: import('@svgr/core').Config\n * Default:\n\n\n\n * Example:\n\n\n\nWhen you set svgoConfig.plugins, the configuration for plugins with the same\nname is automatically merged. For example, the following configuration will be\nmerged with the built-in preset-default:\n\n\n\nThe merged svgoConfig will be:\n\n\n\n\nsvgrOptions.exportType#\n\nSet the export type of SVG React components.\n\n * Type: 'default' | 'named'\n * Default: undefined\n\nexportType can be set as:\n\n * default: use default export.\n * named: use ReactComponent named export.\n\nFor example, set the default export of SVG file as a React component:\n\n\n\nThen import the SVG, you'll get a React component instead of a URL:\n\n\n\nAt this time, you can also specify the ?url query to import the URL, for\nexample:\n\n\n\nTIP\n\nWhen svgrOptions.exportType is set to 'default', the named imports\n(ReactComponent) cannot be used.\n\n\nmixedImport#\n\n * Type: boolean\n * Default: false\n\nWhether to enable mixed import, allowing to use default import and named import\nat the same time.\n\nMixed import is usually used with svgrOptions.exportType: 'named', for example:\n\n\n\nAt this time, the imported SVG file will export both URL and the React\ncomponent:\n\n\n\nLimitations#\n\nIt is recommended to use ?react to transform SVG to React component instead of\nusing mixed import. Because mixed import has the following limitations:\n\n 1. Increased bundle size: Mixed import causes a single SVG module to be\n    compiled into two types of code (even if some exports are not used), which\n    will increase the bundle size.\n 2. Slow down compiling: Mixed import will cause extra compilation overhead.\n    Even if the ReactComponent export is not used in the code, the SVG file will\n    still be compiled by SVGR. And SVGR is based on Babel, which has a high\n    performance overhead.\n\n\nquery#\n\n * Type: RegExp\n * Default: /react/\n\nUsed to custom the query suffix to match SVGR transformation.\n\nFor example, if you need to match import paths with the ?svgr suffix:\n\n\n\n\n\n\nexclude#\n\n * Type: RuleSetCondition\n * Default: undefined\n\nExclude some SVG files, they will not be transformed by SVGR.\n\nFor example, if a project includes a.svg and b.svg, you can add b.svg to\nexclude:\n\n\n\nWhen imported, a.svg will be transformed into a React component, while b.svg\nwill be treated as a regular static asset:\n\n\n\n\nexcludeImporter#\n\n * Type: RuleSetCondition\n * Default: undefined\n\nExclude some modules, the SVGs imported by these modules will not be transformed\nby SVGR.\n\nFor example, if your project contains page-a/index.ts and page-b/index.ts, you\ncan add page-b to excludeImporter:\n\n\n\n * SVGs referenced in page-a will be transformed to React components:\n\n\n\n * SVGs referenced in page-b will be treated as static assets:\n\n\n\nTIP\n\nThe query in the module path has a higher priority than exclude and\nexcludeImporter. For example, if a module is excluded, adding ?react can still\nmake it transformed by SVGR.\n\n\nType Declaration#\n\nWhen you reference an SVG asset in TypeScript code, TypeScript may prompt that\nthe module is missing a type definition:\n\n\n\nTo fix this, you need to add type declaration for the SVG assets, please create\na src/env.d.ts file, and add the type declaration.\n\n * By default, you can add the following type declarations:\n\n\n\n * If the value of svgrOptions.exportType is 'default', set the type declaration\n   to:\n\n\n\n * If the value of svgrOptions.exportType is 'named', set the type declaration\n   to:\n\n\n\n * If the value of svgrOptions.exportType is 'named', and mixedImport is\n   enabled, set the type declaration to:\n\n\n\nAfter adding the type declarations, if the type error still exists, you can try\nto restart the IDE, or adjust the directory where env.d.ts is located, making\nsure the TypeScript can correctly identify the type definition.","routePath":"/plugins/list/plugin-svgr","lang":"en","toc":[{"text":"Quick Start","id":"quick-start","depth":2,"charIndex":204},{"text":"Install Plugin","id":"install-plugin","depth":3,"charIndex":219},{"text":"Register Plugin","id":"register-plugin","depth":3,"charIndex":294},{"text":"Example","id":"example","depth":2,"charIndex":375},{"text":"Default Usage","id":"default-usage","depth":3,"charIndex":386},{"text":"Named Import","id":"named-import","depth":3,"charIndex":771},{"text":"Options","id":"options","depth":2,"charIndex":1186},{"text":"svgrOptions","id":"svgroptions","depth":3,"charIndex":1304},{"text":"svgrOptions.exportType","id":"svgroptionsexporttype","depth":3,"charIndex":1743},{"text":"mixedImport","id":"mixedimport","depth":3,"charIndex":2305},{"text":"Limitations","id":"limitations","depth":4,"charIndex":2622},{"text":"query","id":"query","depth":3,"charIndex":3237},{"text":"exclude","id":"exclude","depth":3,"charIndex":3421},{"text":"excludeImporter","id":"excludeimporter","depth":3,"charIndex":3752},{"text":"Type Declaration","id":"type-declaration","depth":2,"charIndex":4349}],"domain":"","frontmatter":{},"version":""},{"id":181,"title":"Vue Plugin","content":"#\n\nThe Vue plugin provides support for Vue 3 SFC (Single File Components). The\nplugin internally integrates vue-loader v17.\n\nTIP\n\nFor Vue 3 JSX / TSX syntax, please use the Vue JSX plugin.\n\n\nQuick Start#\n\n\nInstall Plugin#\n\nYou can install the plugin using the following command:\n\n\nRegister Plugin#\n\nYou can register the plugin in the rsbuild.config.ts file:\n\n\n\nAfter registering the plugin, you can import *.vue SFC files in your code.\n\n\nOptions#\n\nIf you need to customize the compilation behavior of Vue, you can use the\nfollowing configs.\n\n\nvueLoaderOptions#\n\nOptions passed to vue-loader, please refer to the vue-loader documentation for\ndetailed usage.\n\n * Type: VueLoaderOptions\n * Default:\n\n\n\n * Example:\n\n\n\n\nsplitChunks#\n\nWhen chunkSplit.strategy set to split-by-experience, Rsbuild will automatically\nsplit vue and router related packages into separate chunks by default:\n\n * lib-vue.js: includes vue, vue-loader, and vue's sub-dependencies\n   (@vue/shared, @vue/reactivity, @vue/runtime-dom, @vue/runtime-core).\n * lib-router.js: includes vue-router.\n\nThis option is used to control this behavior and determine whether the vue and\nrouter related packages need to be split into separate chunks.\n\n * Type:\n\n\n\n * Default:\n\n\n\n * Example:\n\n\n\n\nFAQ#\n\n\n/deep/ selector causes compilation error#\n\n/deep/ is a deprecated usage as of Vue v2.7. Since it is not a valid CSS syntax,\nCSS compilation tools like Lightning CSS will fail to compile it.\n\nYou can use :deep() instead. See Vue - Deep Selectors for more details.\n\n\n\n> You can also refer to Vue - RFC 0023 for more details.","routePath":"/plugins/list/plugin-vue","lang":"en","toc":[{"text":"Quick Start","id":"quick-start","depth":2,"charIndex":190},{"text":"Install Plugin","id":"install-plugin","depth":3,"charIndex":205},{"text":"Register Plugin","id":"register-plugin","depth":3,"charIndex":280},{"text":"Options","id":"options","depth":2,"charIndex":437},{"text":"vueLoaderOptions","id":"vueloaderoptions","depth":3,"charIndex":542},{"text":"splitChunks","id":"splitchunks","depth":3,"charIndex":714},{"text":"FAQ","id":"faq","depth":2,"charIndex":1246},{"text":"/deep/ selector causes compilation error","id":"deep-selector-causes-compilation-error","depth":3,"charIndex":1253}],"domain":"","frontmatter":{},"version":""}]