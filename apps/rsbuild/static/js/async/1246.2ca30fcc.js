"use strict";(self.webpackChunkrsbuild_website=self.webpackChunkrsbuild_website||[]).push([["1246"],{78215:function(e,s,n){n.r(s),n.d(s,{default:function(){return o}});var t=n(55367),r=n(26971);function i(e){let s=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",h3:"h3",pre:"pre",blockquote:"blockquote",ul:"ul",li:"li"},(0,r.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(s.h1,{id:"use-typescript",children:["Use TypeScript",(0,t.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#use-typescript",children:"#"})]}),"\n",(0,t.jsxs)(s.p,{children:["Rsbuild supports TypeScript by default, allowing you to directly use ",(0,t.jsx)(s.code,{children:".ts"})," and ",(0,t.jsx)(s.code,{children:".tsx"})," files in your projects."]}),"\n",(0,t.jsxs)(s.h2,{id:"typescript-transpilation",children:["TypeScript Transpilation",(0,t.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#typescript-transpilation",children:"#"})]}),"\n",(0,t.jsx)(s.p,{children:"Rsbuild uses SWC by default for transpiling TypeScript code, and it also supports switching to Babel for transpilation."}),"\n",(0,t.jsxs)(s.h3,{id:"isolatedmodules",children:["isolatedModules",(0,t.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#isolatedmodules",children:"#"})]}),"\n",(0,t.jsxs)(s.p,{children:["Unlike the native TypeScript compiler, tools like SWC and Babel compile each file separately and cannot determine whether an imported name is a type or a value. Therefore, when using TypeScript in Rsbuild, you need to enable the ",(0,t.jsx)(s.a,{href:"https://typescriptlang.org/tsconfig/#isolatedModules",target:"_blank",rel:"noopener noreferrer",children:"isolatedModules"})," option in your ",(0,t.jsx)(s.code,{children:"tsconfig.json"})," file:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-json",meta:'title="tsconfig.json"',children:'{\n  "compilerOptions": {\n    "isolatedModules": true\n  }\n}\n'})}),"\n",(0,t.jsx)(s.p,{children:"This option can help you avoid using certain syntax that cannot be correctly compiled by SWC and Babel, such as cross-file type references. It will guide you to correct the corresponding usage:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:"// Wrong\nexport { SomeType } from './types';\n\n// Correct\nexport type { SomeType } from './types';\n"})}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsxs)(s.p,{children:["See ",(0,t.jsx)(s.a,{href:"https://swc.rs/docs/migrating-from-tsc",target:"_blank",rel:"noopener noreferrer",children:"SWC - Migrating from tsc"})," for more details about the differences between SWC and tsc."]}),"\n"]}),"\n",(0,t.jsxs)(s.h2,{id:"preset-types",children:["Preset types",(0,t.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#preset-types",children:"#"})]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"@rsbuild/core"})," provides some preset type definitions, including CSS Modules, static assets, ",(0,t.jsx)(s.code,{children:"import.meta"})," and other types."]}),"\n",(0,t.jsxs)(s.p,{children:["You can create a ",(0,t.jsx)(s.code,{children:"src/env.d.ts"})," file to reference it:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",meta:'title="src/env.d.ts"',children:'/// <reference types="@rsbuild/core/types" />\n'})}),"\n",(0,t.jsxs)(s.h2,{id:"type-checking",children:["Type Checking",(0,t.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#type-checking",children:"#"})]}),"\n",(0,t.jsx)(s.p,{children:"When transpiling TypeScript code using tools like SWC and Babel, type checking is not performed."}),"\n",(0,t.jsxs)(s.p,{children:["Rsbuild provides the Type Check plugin, which runs TypeScript type checking in a separate process. The plugin internally integrates ",(0,t.jsx)(s.a,{href:"https://github.com/rspack-contrib/ts-checker-rspack-plugin",target:"_blank",rel:"noopener noreferrer",children:"ts-checker-rspack-plugin"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["Please refer to the ",(0,t.jsx)(s.a,{href:"https://github.com/rspack-contrib/rsbuild-plugin-type-check",target:"_blank",rel:"noopener noreferrer",children:"@rsbuild/plugin-type-check"})," for usage instructions."]}),"\n",(0,t.jsxs)(s.h2,{id:"tsconfigjson-path",children:["tsconfig.json Path",(0,t.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#tsconfigjson-path",children:"#"})]}),"\n",(0,t.jsxs)(s.p,{children:["Rsbuild by default reads the ",(0,t.jsx)(s.code,{children:"tsconfig.json"})," file from the root directory. You can use the ",(0,t.jsx)(s.a,{href:"/config/source/tsconfig-path",children:"source.tsconfigPath"})," to configure a custom tsconfig.json file path."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:"export default {\n  source: {\n    tsconfigPath: './tsconfig.custom.json',\n  },\n};\n"})}),"\n",(0,t.jsxs)(s.h2,{id:"path-extensions",children:["Path Extensions",(0,t.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#path-extensions",children:"#"})]}),"\n",(0,t.jsxs)(s.p,{children:["When importing another module in a TypeScript module, TypeScript allows using the ",(0,t.jsx)(s.code,{children:".js"})," file extension:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",meta:'title="src/index.ts"',children:"// The actual referenced module could be `./some-module.ts` or `./some-module.tsx`\nimport { someFn } from './some-module.js';\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Rsbuild supports this feature through Rspack's ",(0,t.jsx)(s.a,{href:"https://rspack.dev/config/resolve#resolveextensionalias",target:"_blank",rel:"noopener noreferrer",children:"extensionAlias"})," configuration. In TypeScript projects, Rsbuild adds the following configuration by default:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",children:"const rspackConfig = {\n  resolve: {\n    extensionAlias: {\n      '.js': ['.ts', '.tsx', '.js'],\n      '.jsx': ['.tsx', '.jsx'],\n    },\n  },\n};\n"})}),"\n",(0,t.jsx)(s.p,{children:"This means:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["You can use the ",(0,t.jsx)(s.code,{children:".js"})," extension to import ",(0,t.jsx)(s.code,{children:".ts"})," or ",(0,t.jsx)(s.code,{children:".tsx"})," files."]}),"\n",(0,t.jsxs)(s.li,{children:["You can use the ",(0,t.jsx)(s.code,{children:".jsx"})," extension to import ",(0,t.jsx)(s.code,{children:".tsx"})," files."]}),"\n"]})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,r.ah)(),e.components);return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(i,{...e})}):i(e)}let o=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["en%2Fguide%2Fbasic%2Ftypescript.mdx"]={toc:[{text:"TypeScript Transpilation",id:"typescript-transpilation",depth:2},{text:"isolatedModules",id:"isolatedmodules",depth:3},{text:"Preset types",id:"preset-types",depth:2},{text:"Type Checking",id:"type-checking",depth:2},{text:"tsconfig.json Path",id:"tsconfigjson-path",depth:2},{text:"Path Extensions",id:"path-extensions",depth:2}],title:"Use TypeScript",frontmatter:{}}}}]);