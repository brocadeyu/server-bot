"use strict";(self.webpackChunkrsbuild_website=self.webpackChunkrsbuild_website||[]).push([["6490"],{29913:function(n,e,r){r.r(e),r.d(e,{default:function(){return l}});var i=r(55367),s=r(26971);function t(n){let e=Object.assign({h1:"h1",a:"a",p:"p",blockquote:"blockquote",h2:"h2",code:"code",pre:"pre",h3:"h3",ul:"ul",li:"li",strong:"strong"},(0,s.ah)(),n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.h1,{id:"environment-api",children:["Environment API",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#environment-api",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"Here you can find all the environment related APIs."}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:["See ",(0,i.jsx)(e.a,{href:"/guide/advanced/environments",children:"Multi-Environment Builds"})," for more details."]}),"\n"]}),"\n",(0,i.jsxs)(e.h2,{id:"environment-context",children:["Environment Context",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#environment-context",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"Environment context is a read-only object that provides some context information about the current environment."}),"\n",(0,i.jsxs)(e.p,{children:["In Rsbuild's ",(0,i.jsx)(e.a,{href:"/plugins/dev/hooks#plugin-hooks",children:"Plugin hooks"}),", you can get the environment context object through the ",(0,i.jsx)(e.code,{children:"environment"})," or ",(0,i.jsx)(e.code,{children:"environments"})," parameter."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"type EnvironmentContext = {\n  name: string;\n  browserslist: string[];\n  config: NormalizedEnvironmentConfig;\n  distPath: string;\n  entry: RsbuildEntry;\n  htmlPaths: Record<string, string>;\n  tsconfigPath?: string;\n};\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"name",children:["name",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#name",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["The unique name of the current environment is used to distinguish and locate the environment, corresponds to the key in the ",(0,i.jsx)(e.a,{href:"/config/environments",children:"environments"})," configuration."]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Type:"})," ",(0,i.jsx)(e.code,{children:"string"})]}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.strong,{children:"Example:"})}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"api.modifyRspackConfig((config, { environment }) => {\n  if (environment.name === 'node') {\n    // modify config for node environment\n  }\n  return config;\n});\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"browserslist",children:["browserslist",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#browserslist",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["The browserslist configuration of the current environment. See ",(0,i.jsx)(e.a,{href:"/guide/advanced/browserslist",children:"Browserslist"})," for more details."]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Type:"})," ",(0,i.jsx)(e.code,{children:"string[]"})]}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.strong,{children:"Example:"})}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"api.modifyRspackConfig((config, { environment }) => {\n  console.log(environment.browserslist);\n  return config;\n});\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"config",children:["config",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#config",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"The normalized Rsbuild config for the current environment."}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.strong,{children:"Type:"})}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"type NormalizedEnvironmentConfig = DeepReadonly<{\n  dev: NormalizedDevConfig;\n  html: NormalizedHtmlConfig;\n  tools: NormalizedToolsConfig;\n  source: NormalizedSourceConfig;\n  server: NormalizedServerConfig;\n  output: NormalizedOutputConfig;\n  plugins?: RsbuildPlugins;\n  security: NormalizedSecurityConfig;\n  performance: NormalizedPerformanceConfig;\n  moduleFederation?: ModuleFederationConfig;\n}>;\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.strong,{children:"Example:"})}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"api.modifyRspackConfig((config, { environment }) => {\n  // Rspack config\n  console.log(config);\n  // Rsbuild config for current environment\n  console.log(environment.config);\n  return config;\n});\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"distpath",children:["distPath",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#distpath",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["The absolute path of the output directory, corresponding to the ",(0,i.jsx)(e.a,{href:"/config/output/dist-path",children:"output.distPath.root"})," config in ",(0,i.jsx)(e.code,{children:"RsbuildConfig"}),"."]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Type:"})," ",(0,i.jsx)(e.code,{children:"string"})]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"api.modifyRspackConfig((config, { environment }) => {\n  console.log(environment.distPath);\n  return config;\n});\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"entry",children:["entry",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#entry",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["The entry object from the ",(0,i.jsx)(e.a,{href:"/config/source/entry",children:"source.entry"})," option."]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.strong,{children:"Type:"})}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"type RsbuildEntry = Record<string, string | string[] | EntryDescription>;\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.strong,{children:"Example:"})}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"api.modifyRspackConfig((config, { environment }) => {\n  console.log(environment.entry);\n  return config;\n});\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"htmlpaths",children:["htmlPaths",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#htmlpaths",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"The path information for all HTML assets."}),"\n",(0,i.jsx)(e.p,{children:"This API will return an object, the key is the entry name and the value is the relative path of the HTML file in the dist directory."}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.strong,{children:"Type:"})}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"type htmlPaths = Record<string, string>;\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.strong,{children:"Example:"})}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"api.modifyRspackConfig((config, { environment }) => {\n  console.log(environment.htmlPaths);\n  return config;\n});\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"tsconfigpath",children:["tsconfigPath",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#tsconfigpath",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["The absolute path of the tsconfig.json file, or ",(0,i.jsx)(e.code,{children:"undefined"})," if the tsconfig.json file does not exist in current project."]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.strong,{children:"Type:"})}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"type TsconfigPath = string | undefined;\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.strong,{children:"Example:"})}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"api.modifyRspackConfig((config, { environment }) => {\n  console.log(environment.tsconfigPath);\n  return config;\n});\n"})}),"\n",(0,i.jsxs)(e.h2,{id:"environment-api-1",children:["Environment API",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#environment-api-1",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"Environment API provides some APIs related to the multi-environment build."}),"\n",(0,i.jsxs)(e.p,{children:["You can use environment API via ",(0,i.jsx)(e.a,{href:"/api/javascript-api/instance#rsbuildcreatedevserver",children:"rsbuild.createDevServer()"})," or ",(0,i.jsx)(e.a,{href:"/config/dev/setup-middlewares",children:"dev.setupMiddlewares"}),", which allows you to get the build outputs information for a specific environment in the server side."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"type EnvironmentAPI = {\n  [name: string]: {\n    getStats: () => Promise<Stats>;\n    loadBundle: <T = unknown>(entryName: string) => Promise<T>;\n    getTransformedHtml: (entryName: string) => Promise<string>;\n  };\n};\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"getstats",children:["getStats",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#getstats",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"Get the build stats of current environment."}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.strong,{children:"Type:"})}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"type GetStats = () => Promise<Stats>;\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.strong,{children:"Example:"})}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"const webStats = await environments.web.getStats();\n\nconsole.log(webStats.toJson({ all: false }));\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"loadbundle",children:["loadBundle",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#loadbundle",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"Load and execute the bundles on the server side. This method returns the exports of the entry module."}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.strong,{children:"Type:"})}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"/**\n * @param entryName - Entry name, corresponding to a key in Rsbuild `source.entry`\n * @returns The return value of the entry module\n */\ntype LoadBundle = <T = unknown>(entryName: string) => Promise<T>;\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.strong,{children:"Example:"})}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"// Load the bundle of `main` entry\nconst result = await environments.node.loadBundle('main');\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"gettransformedhtml",children:["getTransformedHtml",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#gettransformedhtml",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"Get the HTML template content after compilation and transformation."}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.strong,{children:"Type:"})}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"type GetTransformedHtml = (entryName: string) => Promise<string>;\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.strong,{children:"Example:"})}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"// Get the HTML content of main entry\nconst html = await environments.web.getTransformedHtml('main');\n"})}),"\n",(0,i.jsx)(e.p,{children:"This method returns the complete HTML string, including all resources and content injected through HTML plugins."})]})}function o(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(t,{...n})}):t(n)}let l=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["en%2Fapi%2Fjavascript-api%2Fenvironment-api.mdx"]={toc:[{text:"Environment Context",id:"environment-context",depth:2},{text:"name",id:"name",depth:3},{text:"browserslist",id:"browserslist",depth:3},{text:"config",id:"config",depth:3},{text:"distPath",id:"distpath",depth:3},{text:"entry",id:"entry",depth:3},{text:"htmlPaths",id:"htmlpaths",depth:3},{text:"tsconfigPath",id:"tsconfigpath",depth:3},{text:"Environment API",id:"environment-api-1",depth:2},{text:"getStats",id:"getstats",depth:3},{text:"loadBundle",id:"loadbundle",depth:3},{text:"getTransformedHtml",id:"gettransformedhtml",depth:3}],title:"Environment API",frontmatter:{}}}}]);