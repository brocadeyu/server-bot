"use strict";(self.webpackChunkrsbuild_website=self.webpackChunkrsbuild_website||[]).push([["4592"],{20915:function(e,n,s){s.r(n),s.d(n,{default:function(){return t}});var r=s(55367),i=s(26971);function o(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",ul:"ul",li:"li",strong:"strong",pre:"pre",code:"code",h3:"h3",div:"div",blockquote:"blockquote"},(0,i.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"rsbuild-core",children:["Rsbuild Core",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rsbuild-core",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"This section describes some of the core methods provided by Rsbuild."}),"\n",(0,r.jsxs)(n.h2,{id:"creatersbuild",children:["createRsbuild",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#creatersbuild",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Create an ",(0,r.jsx)(n.a,{href:"/api/javascript-api/instance",children:"Rsbuild instance"}),"."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Type:"})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function createRsbuild(\n  options?: CreateRsbuildOptions,\n): Promise<RsbuildInstance>;\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { createRsbuild } from '@rsbuild/core';\n\nconst rsbuild = await createRsbuild({\n  rsbuildConfig: {\n    // rsbuild configs\n  },\n});\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"options",children:["Options",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#options",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["The first parameter of ",(0,r.jsx)(n.code,{children:"createRsbuild"})," is an ",(0,r.jsx)(n.code,{children:"options"})," object, you can pass in the following options:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type CreateRsbuildOptions = {\n  cwd?: string;\n  environment?: string[];\n  rsbuildConfig?: RsbuildConfig;\n};\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"cwd"}),": The root path of the current build, defaults to ",(0,r.jsx)(n.code,{children:"process.cwd()"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"environment"}),": Only build specified ",(0,r.jsx)(n.a,{href:"/guide/advanced/environments",children:"environments"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"rsbuildConfig"}),": Rsbuild configuration object. Refer to ",(0,r.jsx)(n.a,{href:"/config/",children:"Configuration Overview"})," for all available configuration options."]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"loadconfig",children:["loadConfig",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#loadconfig",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Load Rsbuild configuration file."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Type:"})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function loadConfig(params?: {\n  // Default is process.cwd()\n  cwd?: string;\n  // Specify the configuration file, can be a relative or absolute path\n  path?: string;\n  meta?: Record<string, unknown>;\n  envMode?: string;\n}): Promise<{\n  content: RsbuildConfig;\n  filePath: string | null;\n}>;\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { loadConfig } from '@rsbuild/core';\n\n// Load `rsbuild.config.*` file by default\nconst { content } = await loadConfig();\n\nconsole.log(content); // -> Rsbuild config object\n\nconst rsbuild = await createRsbuild({\n  rsbuildConfig: content,\n});\n"})}),"\n",(0,r.jsxs)(n.p,{children:["If the Rsbuild config file does not exist in the cwd directory, the return value of the loadConfig method is ",(0,r.jsx)(n.code,{children:"{ content: {}, filePath: null }"}),"."]}),"\n",(0,r.jsxs)(n.h3,{id:"specify-the-configuration-file",children:["Specify the configuration file",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#specify-the-configuration-file",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Use the ",(0,r.jsx)(n.code,{children:"path"})," option to load the ",(0,r.jsx)(n.code,{children:"my-config.ts"})," configuration file:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { join } from 'node:path';\nimport { loadConfig } from '@rsbuild/core';\n\nconst { content } = await loadConfig({\n  path: join(__dirname, 'my-config.ts'),\n});\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"passing-meta-object",children:["Passing meta object",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#passing-meta-object",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Load the configuration file and pass in a custom meta object:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { join } from 'node:path';\nimport { loadConfig } from '@rsbuild/core';\n\nconst { content } = await loadConfig({\n  meta: {\n    foo: 'bar',\n  },\n});\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In the ",(0,r.jsx)(n.code,{children:"defineConfig"})," configuration function, you can access the ",(0,r.jsx)(n.code,{children:"foo"})," variable through the ",(0,r.jsx)(n.code,{children:"meta"})," object:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="rsbuild.config.ts"',children:"export default defineConfig((config, { meta }) => {\n  console.log(meta.foo); // bar\n  return config;\n});\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"loadenv",children:["loadEnv",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#loadenv",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Load the ",(0,r.jsx)(n.code,{children:".env"})," file and return all environment variables starting with the specified prefixes."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Type:"})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type LoadEnvOptions = {\n  /**\n   * The root path to load the env file\n   * @default process.cwd()\n   */\n  cwd?: string;\n  /**\n   * Used to specify the name of the .env.[mode] file\n   * Equivalent to Rsbuild CLI's `--env-mode` option\n   * @default process.env.NODE_ENV\n   */\n  mode?: string;\n  /**\n   * The prefix of public variables\n   * @default ['PUBLIC_']\n   */\n  prefixes?: string[];\n};\n\nfunction loadEnv(options: LoadEnvOptions): {\n  /** All env variables in the .env file */\n  parsed: Record<string, string>;\n  /** The absolute paths to all env files */\n  filePaths: string[];\n  /**\n   * Env variables that start with prefixes.\n   *\n   * @example\n   * ```ts\n   * {\n   *   PUBLIC_FOO: 'bar',\n   * }\n   * ```\n   **/\n  rawPublicVars: Record<string, string | undefined>;\n  /**\n   * Formatted env variables that start with prefixes.\n   * The keys contain the prefixes `process.env.*` and `import.meta.env.*`.\n   * The values are processed by `JSON.stringify`.\n   *\n   * @example\n   * ```ts\n   * {\n   *   'process.env.PUBLIC_FOO': '\"bar\"',\n   *   'import.meta.env.PUBLIC_FOO': '\"bar\"',\n   * }\n   * ```\n   **/\n  publicVars: Record<string, string>;\n  /** Clear the env variables mounted on `process.env` */\n  cleanup: () => void;\n};\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { loadEnv, mergeRsbuildConfig } from '@rsbuild/core';\n\nconst { parsed, publicVars } = loadEnv();\n\nconst mergedConfig = mergeRsbuildConfig(\n  {\n    source: {\n      define: publicVars,\n    },\n  },\n  userConfig,\n);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This method will also load files such as ",(0,r.jsx)(n.code,{children:".env.local"})," and ",(0,r.jsx)(n.code,{children:".env.[mode]"}),", see ",(0,r.jsx)(n.a,{href:"/guide/advanced/env-vars",children:"Environment Variables"})," for details."]}),"\n",(0,r.jsxs)(n.div,{className:"rspress-directive tip",children:[(0,r.jsx)(n.div,{className:"rspress-directive-title",children:"TIP"}),(0,r.jsx)(n.div,{className:"rspress-directive-content",children:(0,r.jsxs)(n.p,{children:["Rsbuild CLI will automatically call the ",(0,r.jsx)(n.code,{children:"loadEnv()"})," method. If you are using the Rsbuild CLI, you can set the ",(0,r.jsx)(n.code,{children:"mode"})," parameter through the ",(0,r.jsx)(n.a,{href:"/guide/advanced/env-vars#env-mode",children:"--env-mode"})," option.\n"]})})]}),"\n",(0,r.jsxs)(n.h2,{id:"mergersbuildconfig",children:["mergeRsbuildConfig",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#mergersbuildconfig",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Used to merge multiple Rsbuild configuration objects."}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"mergeRsbuildConfig"})," function takes multiple configuration objects as parameters. It deep merges each configuration object, automatically combining multiple function values into an array of sequentially executed functions, and returns a merged configuration object."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Type:"})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function mergeRsbuildConfig(...configs: RsbuildConfig[]): RsbuildConfig;\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"basic-example",children:["Basic Example",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#basic-example",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { mergeRsbuildConfig } from '@rsbuild/core';\n\nconst config1 = {\n  dev: {\n    https: false,\n  },\n};\nconst config2 = {\n  dev: {\n    https: true,\n  },\n};\n\nconst mergedConfig = mergeRsbuildConfig(config1, config2);\n\nconsole.log(mergedConfig); // { dev: { https: true } }\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"This method will not modify the config object in the input parameter."}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"merge-rules",children:["Merge Rules",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#merge-rules",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["In addition to deep merging, the ",(0,r.jsx)(n.code,{children:"mergeRsbuildConfig"})," function also handles some options in a special way."]}),"\n",(0,r.jsxs)(n.p,{children:["For example, ",(0,r.jsx)(n.a,{href:"/config/tools/rspack",children:"tools.rspack"})," can be set as a function. When multiple configuration objects contain ",(0,r.jsx)(n.code,{children:"tools.rspack"}),", ",(0,r.jsx)(n.code,{children:"mergeRsbuildConfig"})," will not simply retain the last function. On the contrary, it will merge all ",(0,r.jsx)(n.code,{children:"tools.rspack"})," functions or objects into an array."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { mergeRsbuildConfig } from '@rsbuild/core';\n\nconst config1 = {\n  tools: {\n    rspack: {\n      someOption: true,\n    },\n  },\n};\nconst config2 = {\n  tools: {\n    rspack: (config) => {\n      console.log('function 1');\n      return config;\n    },\n  },\n};\nconst config3 = {\n  tools: {\n    rspack: (config) => {\n      console.log('function 2');\n      return config;\n    },\n  },\n};\n\nconst mergedConfig = mergeRsbuildConfig(config1, config2, config3);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In the above example, the merged configuration is in the following format. The array first contains an object ",(0,r.jsx)(n.code,{children:"{ someOption: true }"}),", followed by two functions in the order they were merged."]}),"\n",(0,r.jsx)(n.p,{children:"Each item in the array will be executed in sequence, and the output of the previous function will serve as the input to the next one, ultimately generating an Rspack configuration."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const mergedConfig = {\n  tools: {\n    rspack: [\n      {\n        someOption: true,\n      },\n      (config) => {\n        console.log('function 1');\n        return config;\n      },\n      (config) => {\n        console.log('function 2');\n        return config;\n      },\n    ],\n  },\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["By this way, we can ensure that when merging multiple configuration objects, the same multiple ",(0,r.jsx)(n.code,{children:"tools.rspack"})," fields can all be effective."]}),"\n",(0,r.jsxs)(n.p,{children:["In Rsbuild, most options that support function values use this rule, such as ",(0,r.jsx)(n.code,{children:"tools.postcss"}),", ",(0,r.jsx)(n.code,{children:"tools.less"}),", ",(0,r.jsx)(n.code,{children:"tools.bundlerChain"}),", etc."]}),"\n",(0,r.jsxs)(n.h2,{id:"logger",children:["logger",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#logger",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Used to output log information in a unified format, based on ",(0,r.jsx)(n.a,{href:"https://github.com/rspack-contrib/rslog",target:"_blank",rel:"noopener noreferrer",children:"rslog"}),"."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { logger } from '@rsbuild/core';\n\n// A gradient welcome log\nlogger.greet(`\\n➜ Rsbuild v1.0.0\\n`);\n\n// Info\nlogger.info('This is a info message');\n\n// Start\nlogger.start('This is a start message');\n\n// Warn\nlogger.warn('This is a warn message');\n\n// Ready\nlogger.ready('This is a ready message');\n\n// Success\nlogger.success('This is a success message');\n\n// Error\nlogger.error('This is a error message');\nlogger.error(new Error('This is a error message with stack'));\n\n// Debug\nlogger.debug('This is a debug message');\n\n// Same as console.log\nlogger.log('This is a log message');\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"custom-logger",children:["Custom Logger",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#custom-logger",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["You can use the ",(0,r.jsx)(n.code,{children:"logger.override"})," method to override partial or all methods of the default logger:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { logger } from '@rsbuild/core';\n\nlogger.override({\n  log: (message) => {\n    console.log(`[log] ${message}`);\n  },\n  info: (message) => {\n    console.log(`[info] ${message}`);\n  },\n  warn: (message) => {\n    console.warn(`[warn] ${message}`);\n  },\n  start: (message) => {\n    console.log(`[start] ${message}`);\n  },\n  ready: (message) => {\n    console.log(`[ready] ${message}`);\n  },\n  error: (message) => {\n    console.error(`[error] ${message}`);\n  },\n  success: (message) => {\n    console.error(`[success] ${message}`);\n  },\n  debug: (message) => {\n    if (process.env.DEBUG) {\n      console.log(`[debug] ${message}`);\n    }\n  },\n});\n\nlogger.info('hello'); // [info] hello\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"rspack",children:["rspack",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rspack",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"rspack"})," object exported from ",(0,r.jsx)(n.code,{children:"@rspack/core"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["You can import to the ",(0,r.jsx)(n.code,{children:"rspack"})," object from ",(0,r.jsx)(n.code,{children:"@rsbuild/core"})," without the need to install the ",(0,r.jsx)(n.code,{children:"@rspack/core"})," dependency."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Type:"})," ",(0,r.jsx)(n.code,{children:"Rspack"})]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { rspack } from '@rsbuild/core';\n\nconsole.log(rspack.rspackVersion); // 1.0.0\nconsole.log(rspack.util.createHash);\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Please refer to ",(0,r.jsx)(n.a,{href:"https://rspack.dev/api/javascript-api/",target:"_blank",rel:"noopener noreferrer",children:"Rspack - JavaScript API"})," for more information."]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"version",children:["version",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#version",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["The version of ",(0,r.jsx)(n.code,{children:"@rsbuild/core"})," currently in use."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Type:"})," ",(0,r.jsx)(n.code,{children:"string"})]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { version } from '@rsbuild/core';\n\nconsole.log(version); // 1.0.0\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"ensureassetprefix",children:["ensureAssetPrefix",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#ensureassetprefix",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"ensureAssetPrefix"})," function is used to prepend a given ",(0,r.jsx)(n.code,{children:"assetPrefix"})," to a string that might be a URL. If the input string is already a complete URL, it returns the string directly."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Type:"})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function ensureAssetPrefix(\n  // URL string to be processed, can be a relative path or an absolute URL\n  url: string,\n  // URL prefix to be appended\n  assetPrefix: string\n) => string;\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { ensureAssetPrefix } from '@rsbuild/core';\n\nensureAssetPrefix('foo/bar.js', '/static/');\n// -> '/static/foo/bar.js'\n\nensureAssetPrefix('foo/bar.js', 'https://example.com/static/');\n// -> 'https://example.com/static/foo/bar.js'\n\nensureAssetPrefix(\n  'https://example.com/index.html',\n  'https://example.com/static/',\n);\n// -> 'https://example.com/index.html'\n"})})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}let t=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["en%2Fapi%2Fjavascript-api%2Fcore.mdx"]={toc:[{text:"createRsbuild",id:"creatersbuild",depth:2},{text:"Options",id:"options",depth:3},{text:"loadConfig",id:"loadconfig",depth:2},{text:"Specify the configuration file",id:"specify-the-configuration-file",depth:3},{text:"Passing meta object",id:"passing-meta-object",depth:3},{text:"loadEnv",id:"loadenv",depth:2},{text:"mergeRsbuildConfig",id:"mergersbuildconfig",depth:2},{text:"Basic Example",id:"basic-example",depth:3},{text:"Merge Rules",id:"merge-rules",depth:3},{text:"logger",id:"logger",depth:2},{text:"Custom Logger",id:"custom-logger",depth:3},{text:"rspack",id:"rspack",depth:2},{text:"version",id:"version",depth:2},{text:"ensureAssetPrefix",id:"ensureassetprefix",depth:2}],title:"Rsbuild Core",frontmatter:{}}}}]);