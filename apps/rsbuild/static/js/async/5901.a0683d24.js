"use strict";(self.webpackChunkrsbuild_website=self.webpackChunkrsbuild_website||[]).push([["5901"],{34204:function(e,r,n){n.r(r),n.d(r,{default:function(){return l}});var s=n(55367),i=n(26971);function d(e){let r=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",pre:"pre",code:"code",ul:"ul",li:"li",blockquote:"blockquote"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.h1,{id:"构建性能分析",children:["构建性能分析",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#构建性能分析",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"进行构建性能分析可以帮助你确定项目中的性能瓶颈，从而采取针对性的优化。"}),"\n",(0,s.jsxs)(r.h2,{id:"使用-rsdoctor",children:["使用 Rsdoctor",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#使用-rsdoctor",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"Rsdoctor 是一个构建分析工具，能够可视化地展示各个 loaders 和 plugins 的编译耗时。"}),"\n",(0,s.jsxs)(r.p,{children:["请参考 ",(0,s.jsx)(r.a,{href:"/guide/debug/rsdoctor",children:"使用 Rsdoctor"})," 了解更多。"]}),"\n",(0,s.jsxs)(r.h2,{id:"nodejs-profiling",children:["Node.js Profiling",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#nodejs-profiling",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"当 Rsbuild 执行一次构建时，会包含 JavaScript 和 Rust 两侧的代码运行开销，以及 JavaScript 和 Rust 之间的数据通信开销。"}),"\n",(0,s.jsx)(r.p,{children:"通常而言，JavaScript 侧的性能开销会大于 Rust 侧，你可以使用 Node.js 的 profiling 来分析 JS 侧的开销，这有助于发现 JS 侧的性能瓶颈。"}),"\n",(0,s.jsxs)(r.p,{children:["例如，进行 ",(0,s.jsx)(r.a,{href:"https://nodejs.org/docs/v20.17.0/api/cli.html#--cpu-prof",target:"_blank",rel:"noopener noreferrer",children:"CPU profiling"})," 分析，在项目根目录执行以下命令："]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"# dev\nnode --cpu-prof ./node_modules/@rsbuild/core/bin/rsbuild.js dev\n\n# build\nnode --cpu-prof ./node_modules/@rsbuild/core/bin/rsbuild.js build\n"})}),"\n",(0,s.jsxs)(r.p,{children:["以上命令执行后会生成一个 ",(0,s.jsx)(r.code,{children:"*.cpuprofile"})," 文件，我们可以使用 ",(0,s.jsx)(r.a,{href:"https://github.com/jlfwong/speedscope",target:"_blank",rel:"noopener noreferrer",children:"speedscope"})," 来可视化查看该文件："]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"# 安装 speedscope\nnpm install -g speedscope\n\n# 查看 cpuprofile 内容\n# 请将文件名替换为本地文件的名称\nspeedscope CPU.date.000000.00000.0.001.cpuprofile\n"})}),"\n",(0,s.jsxs)(r.h2,{id:"rspack-profiling",children:["Rspack Profiling",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#rspack-profiling",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["Rsbuild 支持使用 ",(0,s.jsx)(r.code,{children:"RSPACK_PROFILE"})," 环境变量来对 Rspack 进行构建性能分析。"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-json",meta:'title="package.json"',children:'{\n  "scripts": {\n    "dev:profile": "RSPACK_PROFILE=ALL rsbuild dev",\n    "build:profile": "RSPACK_PROFILE=ALL rsbuild build"\n  }\n}\n'})}),"\n",(0,s.jsxs)(r.p,{children:["执行该命令后，会在产物目录下生成一个 ",(0,s.jsx)(r.code,{children:"rspack-profile-${timestamp}"})," 文件夹，该文件夹下会包含 ",(0,s.jsx)(r.code,{children:"logging.json"}),"、",(0,s.jsx)(r.code,{children:"trace.json"})," 和 ",(0,s.jsx)(r.code,{children:"jscpuprofile.json"})," 三个文件："]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"trace.json"}),"：使用 tracing 细粒度地记录了 Rust 侧各个阶段的耗时，可以使用 ",(0,s.jsx)(r.a,{href:"https://ui.perfetto.dev/",target:"_blank",rel:"noopener noreferrer",children:"ui.perfetto.dev"})," 进行查看。"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"jscpuprofile.json"}),"：使用 ",(0,s.jsx)(r.a,{href:"https://nodejs.org/dist/latest-v18.x/docs/api/inspector.html",target:"_blank",rel:"noopener noreferrer",children:"Node.js inspector"})," 细粒度地记录了 JavaScript 侧的各个阶段的耗时，可以使用 ",(0,s.jsx)(r.a,{href:"https://www.speedscope.app/",target:"_blank",rel:"noopener noreferrer",children:"speedscope.app"})," 进行查看。"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"logging.json"}),"：包含一些日志信息，粗粒度地记录了构建的各个阶段耗时（开发模式下暂不支持）。"]}),"\n"]}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsxs)(r.p,{children:["更多 Rspack 构建性能分析用法，可参考 ",(0,s.jsx)(r.a,{href:"https://rspack.dev/contribute/development/profiling",target:"_blank",rel:"noopener noreferrer",children:"Rspack - Profiling"}),"。"]}),"\n"]})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,i.ah)(),e.components);return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}let l=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["zh%2Fguide%2Fdebug%2Fbuild-profiling.mdx"]={toc:[{text:"使用 Rsdoctor",id:"使用-rsdoctor",depth:2},{text:"Node.js Profiling",id:"nodejs-profiling",depth:2},{text:"Rspack Profiling",id:"rspack-profiling",depth:2}],title:"构建性能分析",frontmatter:{}}}}]);