"use strict";(self.webpackChunkrsbuild_website=self.webpackChunkrsbuild_website||[]).push([["5012"],{20615:function(e,n,i){i.r(n),i.d(n,{default:function(){return l}});var s=i(55367),t=i(26971);function r(e){let n=Object.assign({h1:"h1",a:"a",ul:"ul",li:"li",strong:"strong",code:"code",p:"p",div:"div",h2:"h2",pre:"pre",h3:"h3"},(0,t.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"performancechunksplit",children:["performance.chunkSplit",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#performancechunksplit",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type:"})," ",(0,s.jsx)(n.code,{children:"ChunkSplit"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Default:"})," ",(0,s.jsx)(n.code,{children:"{ strategy: 'split-by-experience' }"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"performance.chunkSplit"})," is used to configure the chunk splitting strategy. The type of ",(0,s.jsx)(n.code,{children:"ChunkSplit"})," is as follows:"]}),"\n",(0,s.jsxs)(n.div,{className:"rspress-directive tip",children:[(0,s.jsx)(n.div,{className:"rspress-directive-title",children:"TIP"}),(0,s.jsx)(n.div,{className:"rspress-directive-content",children:(0,s.jsxs)(n.p,{children:["Please refer to the ",(0,s.jsx)(n.a,{href:"/guide/optimization/code-splitting",children:"Code Splitting"})," for the detailed usage.\n"]})})]}),"\n",(0,s.jsxs)(n.h2,{id:"chunksplitstrategy",children:["chunkSplit.strategy",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#chunksplitstrategy",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Rsbuild supports the following chunk splitting strategies:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"split-by-experience"}),": an empirical splitting strategy, automatically splits some commonly used npm packages into chunks of moderate size."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"split-by-module"}),": split by NPM package granularity, each NPM package corresponds to a chunk."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"split-by-size"}),": automatically split according to module size."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"all-in-one"}),": bundle all codes into one chunk."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"single-vendor"}),": bundle all NPM packages into a single chunk."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"custom"}),": custom chunk splitting strategy."]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"type-definition",children:["Type Definition",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#type-definition",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["The type of ",(0,s.jsx)(n.code,{children:"performance.chunkSplit"})," is as follows:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"type ForceSplitting = RegExp[] | Record<string, RegExp>;\n\ninterface BaseChunkSplit {\n  strategy?:\n    | 'split-by-module'\n    | 'split-by-experience'\n    | 'all-in-one'\n    | 'single-vendor';\n  override?: Rspack.OptimizationSplitChunksOptions;\n  forceSplitting?: ForceSplitting;\n}\n\ninterface SplitBySize extends BaseSplitRules {\n  strategy: 'split-by-size';\n  minSize?: number;\n  maxSize?: number;\n}\n\ninterface SplitCustom extends BaseSplitRules {\n  strategy: 'custom';\n  splitChunks?: SplitChunks;\n}\n\ntype ChunkSplit = BaseChunkSplit | SplitBySize | SplitCustom;\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"default-strategy",children:["Default Strategy",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#default-strategy",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["By default, Rsbuild uses the ",(0,s.jsx)(n.code,{children:"split-by-experience"})," strategy. If you want to use other chunk splitting strategies, you can specify them through the ",(0,s.jsx)(n.code,{children:"strategy"})," option, for example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default {\n  performance: {\n    chunkSplit: {\n      strategy: 'all-in-one',\n    },\n  },\n};\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"chunksplitminsize",children:["chunkSplit.minSize",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#chunksplitminsize",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type:"})," ",(0,s.jsx)(n.code,{children:"number"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Default:"})," ",(0,s.jsx)(n.code,{children:"10000"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["When ",(0,s.jsx)(n.code,{children:"chunkSplit.strategy"})," is ",(0,s.jsx)(n.code,{children:"split-by-size"}),", you can specify the minimum size of a chunk via ",(0,s.jsx)(n.code,{children:"chunkSplit.minSize"}),", the unit is bytes. The default value is ",(0,s.jsx)(n.code,{children:"10000"}),". For example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default {\n  performance: {\n    chunkSplit: {\n      strategy: 'split-by-size',\n      minSize: 20000,\n    },\n  },\n};\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"chunksplitmaxsize",children:["chunkSplit.maxSize",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#chunksplitmaxsize",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type:"})," ",(0,s.jsx)(n.code,{children:"number"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Default:"})," ",(0,s.jsx)(n.code,{children:"Number.POSITIVE_INFINITY"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["When ",(0,s.jsx)(n.code,{children:"chunkSplit.strategy"})," is ",(0,s.jsx)(n.code,{children:"split-by-size"}),", you can specify the maximum size of a chunk via ",(0,s.jsx)(n.code,{children:"chunkSplit.maxSize"}),", the unit is bytes. The default value is ",(0,s.jsx)(n.code,{children:"Number.POSITIVE_INFINITY"}),". For example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default {\n  performance: {\n    chunkSplit: {\n      strategy: 'split-by-size',\n      maxSize: 50000,\n    },\n  },\n};\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"chunksplitforcesplitting",children:["chunkSplit.forceSplitting",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#chunksplitforcesplitting",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type:"})," ",(0,s.jsx)(n.code,{children:"RegExp[] | Record<string, RegExp>"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Default:"})," ",(0,s.jsx)(n.code,{children:"[]"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Via ",(0,s.jsx)(n.code,{children:"chunkSplit.forceSplitting"}),", you can specify the NPM packages that need to be forced to split."]}),"\n",(0,s.jsxs)(n.p,{children:["For example, split the ",(0,s.jsx)(n.code,{children:"axios"})," library under node_modules into ",(0,s.jsx)(n.code,{children:"axios.js"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default {\n  performance: {\n    chunkSplit: {\n      forceSplitting: {\n        axios: /node_modules[\\\\/]axios/,\n      },\n    },\n  },\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This is an easier way than configuring Rspack's ",(0,s.jsx)(n.a,{href:"https://rspack.dev/config/optimization#optimizationsplitchunks",target:"_blank",rel:"noopener noreferrer",children:"splitChunks"})," directly."]}),"\n",(0,s.jsxs)(n.div,{className:"rspress-directive tip",children:[(0,s.jsx)(n.div,{className:"rspress-directive-title",children:"TIP"}),(0,s.jsx)(n.div,{className:"rspress-directive-content",children:(0,s.jsxs)(n.p,{children:["Chunks split using the ",(0,s.jsx)(n.code,{children:"forceSplitting"})," configuration will be inserted into the HTML file as resources requested for the initial screen using ",(0,s.jsx)(n.code,{children:"<script>"})," tags. Therefore, please split them appropriately based on the actual scenario to avoid excessive size of initial screen resources.\n"]})})]}),"\n",(0,s.jsxs)(n.h2,{id:"chunksplitsplitchunks",children:["chunkSplit.splitChunks",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#chunksplitsplitchunks",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["When ",(0,s.jsx)(n.code,{children:"chunkSplit.strategy"})," is ",(0,s.jsx)(n.code,{children:"custom"}),", you can specify the custom Rspack chunk splitting config via ",(0,s.jsx)(n.code,{children:"chunkSplit.splitChunks"}),". This config will be merged with the Rspack splitChunks config (the ",(0,s.jsx)(n.code,{children:"cacheGroups"})," config will also be merged). For example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default {\n  performance: {\n    chunkSplit: {\n      strategy: 'custom',\n      splitChunks: {\n        cacheGroups: {\n          react: {\n            test: /node_modules[\\\\/](react|react-dom)[\\\\/]/,\n            name: 'react',\n            chunks: 'all',\n          },\n        },\n      },\n    },\n  },\n};\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"chunksplitoverride",children:["chunkSplit.override",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#chunksplitoverride",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["When ",(0,s.jsx)(n.code,{children:"chunkSplit.strategy"})," is ",(0,s.jsx)(n.code,{children:"split-by-experience"}),", ",(0,s.jsx)(n.code,{children:"split-by-module"}),", ",(0,s.jsx)(n.code,{children:"split-by-size"})," or ",(0,s.jsx)(n.code,{children:"single-vendor"}),", you can specify the custom Rspack chunk splitting config via ",(0,s.jsx)(n.code,{children:"chunkSplit.override"}),". This config will be merged with the Rspack splitChunks config (the ",(0,s.jsx)(n.code,{children:"cacheGroups"})," config will also be merged). For example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default {\n  performance: {\n    chunkSplit: {\n      override: {\n        cacheGroups: {\n          react: {\n            test: /node_modules[\\\\/](react|react-dom)[\\\\/]/,\n            name: 'react',\n            chunks: 'all',\n          },\n        },\n      },\n    },\n  },\n};\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"targets",children:["Targets",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#targets",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"performance.chunkSplit"})," only works when ",(0,s.jsx)(n.a,{href:"/config/output/target",children:"output.target"})," is ",(0,s.jsx)(n.code,{children:"web"}),". This means that when ",(0,s.jsx)(n.code,{children:"output.target"})," is ",(0,s.jsx)(n.code,{children:"node"})," or ",(0,s.jsx)(n.code,{children:"web-worker"}),", ",(0,s.jsx)(n.code,{children:"performance.chunkSplit"})," will not take effect."]}),"\n",(0,s.jsxs)(n.p,{children:["Typically, Node bundles do not need to be split to optimize loading performance, if you need to split Node bundles, you can use the ",(0,s.jsx)(n.a,{href:"/config/tools/rspack",children:"tools.rspack"})," configuration to configure Rspack's ",(0,s.jsx)(n.a,{href:"https://rspack.dev/plugins/webpack/split-chunks-plugin#optimizationsplitchunks",target:"_blank",rel:"noopener noreferrer",children:"optimization.splitChunks"})," option:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"export default {\n  tools: {\n    rspack: {\n      optimization: {\n        splitChunks: {\n          // options\n        },\n      },\n    },\n  },\n};\n"})})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(r,{...e})}):r(e)}let l=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["en%2Fconfig%2Fperformance%2Fchunk-split.mdx"]={toc:[{text:"chunkSplit.strategy",id:"chunksplitstrategy",depth:2},{text:"Type Definition",id:"type-definition",depth:2},{text:"Default Strategy",id:"default-strategy",depth:3},{text:"chunkSplit.minSize",id:"chunksplitminsize",depth:2},{text:"chunkSplit.maxSize",id:"chunksplitmaxsize",depth:2},{text:"chunkSplit.forceSplitting",id:"chunksplitforcesplitting",depth:2},{text:"chunkSplit.splitChunks",id:"chunksplitsplitchunks",depth:2},{text:"chunkSplit.override",id:"chunksplitoverride",depth:2},{text:"Targets",id:"targets",depth:2}],title:"performance.chunkSplit",frontmatter:{}}}}]);