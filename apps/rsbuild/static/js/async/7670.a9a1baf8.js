"use strict";(self.webpackChunkrsbuild_website=self.webpackChunkrsbuild_website||[]).push([["7670"],{14359:function(n,e,s){s.r(e),s.d(e,{default:function(){return d}});var r=s(55367),i=s(26971);function c(n){let e=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",ul:"ul",li:"li",strong:"strong",pre:"pre",code:"code",h3:"h3",div:"div",blockquote:"blockquote"},(0,i.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.h1,{id:"rsbuild-core",children:["Rsbuild Core",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#rsbuild-core",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"本章节描述了 Rsbuild 提供的一些核心方法。"}),"\n",(0,r.jsxs)(e.h2,{id:"creatersbuild",children:["createRsbuild",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#creatersbuild",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["创建一个 ",(0,r.jsx)(e.a,{href:"/api/javascript-api/instance",children:"Rsbuild 实例对象"}),"。"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"类型："})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"function createRsbuild(\n  options?: CreateRsbuildOptions,\n): Promise<RsbuildInstance>;\n"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"示例："})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"import { createRsbuild } from '@rsbuild/core';\n\nconst rsbuild = await createRsbuild({\n  rsbuildConfig: {\n    // rsbuild configs\n  },\n});\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"options",children:["Options",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#options",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"createRsbuild"})," 的第一个参数是一个 ",(0,r.jsx)(e.code,{children:"options"})," 对象，你可以传入以下选项："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"type CreateRsbuildOptions = {\n  cwd?: string;\n  environment?: string[];\n  rsbuildConfig?: RsbuildConfig;\n};\n"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"cwd"}),"：当前执行构建的根路径，默认值为 ",(0,r.jsx)(e.code,{children:"process.cwd()"})]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"environment"}),"：只构建指定的 ",(0,r.jsx)(e.a,{href:"/guide/advanced/environments",children:"environments"}),"。"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"rsbuildConfig"}),"：Rsbuild 配置对象。参考 ",(0,r.jsx)(e.a,{href:"/config/",children:"配置总览"})," 查看所有可用的配置项。"]}),"\n"]}),"\n",(0,r.jsxs)(e.h2,{id:"loadconfig",children:["loadConfig",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#loadconfig",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"加载 Rsbuild 配置文件。"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"类型："})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"function loadConfig(params?: {\n  // 默认为 process.cwd()\n  cwd?: string;\n  // 指定配置文件路径，可以为相对路径或绝对路径\n  path?: string;\n  meta?: Record<string, unknown>;\n  envMode?: string;\n}): Promise<{\n  content: RsbuildConfig;\n  filePath: string | null;\n}>;\n"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"示例："})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"import { loadConfig } from '@rsbuild/core';\n\n// 默认加载 `rsbuild.config.*` 配置文件\nconst { content } = await loadConfig();\n\nconsole.log(content); // -> Rsbuild config object\n\nconst rsbuild = await createRsbuild({\n  rsbuildConfig: content,\n});\n"})}),"\n",(0,r.jsxs)(e.p,{children:["如果 cwd 目录下不存在 Rsbuild 配置文件，loadConfig 方法的返回值为 ",(0,r.jsx)(e.code,{children:"{ content: {}, filePath: null }"}),"。"]}),"\n",(0,r.jsxs)(e.h3,{id:"指定配置文件",children:["指定配置文件",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#指定配置文件",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["使用 ",(0,r.jsx)(e.code,{children:"path"})," 选项加载 ",(0,r.jsx)(e.code,{children:"my-config.ts"})," 配置文件："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"import { join } from 'node:path';\nimport { loadConfig } from '@rsbuild/core';\n\nconst { content } = await loadConfig({\n  path: join(__dirname, 'my-config.ts'),\n});\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"传入-meta-对象",children:["传入 meta 对象",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#传入-meta-对象",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"加载配置文件，并传入自定义的 meta 对象："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"import { join } from 'node:path';\nimport { loadConfig } from '@rsbuild/core';\n\nconst { content } = await loadConfig({\n  meta: {\n    foo: 'bar',\n  },\n});\n"})}),"\n",(0,r.jsxs)(e.p,{children:["在 ",(0,r.jsx)(e.code,{children:"defineConfig"})," 定义的配置函数中，你可以通过 ",(0,r.jsx)(e.code,{children:"meta"})," 对象访问到 ",(0,r.jsx)(e.code,{children:"foo"})," 变量："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",meta:'title="rsbuild.config.ts"',children:"export default defineConfig((config, { meta }) => {\n  console.log(meta.foo); // bar\n  return config;\n});\n"})}),"\n",(0,r.jsxs)(e.h2,{id:"loadenv",children:["loadEnv",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#loadenv",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["加载 ",(0,r.jsx)(e.code,{children:".env"})," 文件，并返回所有以 prefixes 开头的环境变量。"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"类型："})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"type LoadEnvOptions = {\n  /**\n   * 加载 env 文件的根路径\n   * @default process.cwd()\n   */\n  cwd?: string;\n  /**\n   * 用于指定 .env.[mode] 文件的名称\n   * 等价于 Rsbuild CLI 的 `--env-mode` 选项\n   * @default process.env.NODE_ENV\n   */\n  mode?: string;\n  /**\n   * public 变量的前缀\n   * @default ['PUBLIC_']\n   */\n  prefixes?: string[];\n};\n\nfunction loadEnv(options: LoadEnvOptions): {\n  /** .env 文件包含的所有环境变量 */\n  parsed: Record<string, string>;\n  /** 所有 env 文件的绝对路径 */\n  filePaths: string[];\n  /**\n   * 以 prefixes 开头的环境变量\n   *\n   * @example\n   * ```ts\n   * {\n   *   PUBLIC_FOO: 'bar',\n   * }\n   * ```\n   **/\n  rawPublicVars: Record<string, string | undefined>;\n  /**\n   * 以 prefix 开头的环境变量，并经过格式化。\n   * key 包含前缀 `process.env.*` 和 `import.meta.env.*`。\n   * value 经过 `JSON.stringify` 处理。\n   *\n   * @example\n   * ```ts\n   * {\n   *   'process.env.PUBLIC_FOO': '\"bar\"',\n   *   'import.meta.env.PUBLIC_FOO': '\"bar\"',\n   * }\n   * ```\n   **/\n  publicVars: Record<string, string>;\n  /** 从 `process.env` 上清除挂载的环境变量 */\n  cleanup: () => void;\n};\n"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"示例："})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"import { loadEnv, mergeRsbuildConfig } from '@rsbuild/core';\n\nconst { parsed, publicVars } = loadEnv();\n\nconst mergedConfig = mergeRsbuildConfig(\n  {\n    source: {\n      define: publicVars,\n    },\n  },\n  userConfig,\n);\n"})}),"\n",(0,r.jsxs)(e.p,{children:["该方法也会加载 ",(0,r.jsx)(e.code,{children:".env.local"})," 和 ",(0,r.jsx)(e.code,{children:".env.[mode]"})," 等文件，详见 ",(0,r.jsx)(e.a,{href:"/guide/advanced/env-vars",children:"环境变量"}),"。"]}),"\n",(0,r.jsxs)(e.div,{className:"rspress-directive tip",children:[(0,r.jsx)(e.div,{className:"rspress-directive-title",children:"TIP"}),(0,r.jsx)(e.div,{className:"rspress-directive-content",children:(0,r.jsxs)(e.p,{children:["Rsbuild CLI 会自动调用 ",(0,r.jsx)(e.code,{children:"loadEnv()"})," 方法，如果你在使用 Rsbuild CLI，可以通过 ",(0,r.jsx)(e.a,{href:"/guide/advanced/env-vars#env-%E6%A8%A1%E5%BC%8F",children:"--env-mode"})," 选项来设置 ",(0,r.jsx)(e.code,{children:"mode"})," 参数。\n"]})})]}),"\n",(0,r.jsxs)(e.h2,{id:"mergersbuildconfig",children:["mergeRsbuildConfig",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#mergersbuildconfig",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"用于合并多份 Rsbuild 配置对象。"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"mergeRsbuildConfig"})," 函数接收多个配置对象作为参数，它会将每一个配置对象进行深层合并，自动将多个函数项合并为顺序执行的函数数组，返回一个合并后的配置对象。"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"类型："})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"function mergeRsbuildConfig(...configs: RsbuildConfig[]): RsbuildConfig;\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"基础示例",children:["基础示例",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#基础示例",children:"#"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"import { mergeRsbuildConfig } from '@rsbuild/core';\n\nconst config1 = {\n  dev: {\n    https: false,\n  },\n};\nconst config2 = {\n  dev: {\n    https: true,\n  },\n};\n\nconst mergedConfig = mergeRsbuildConfig(config1, config2);\n\nconsole.log(mergedConfig); // { dev: { https: true } }\n"})}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"该方法不会修改入参中的 config 对象。"}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"合并规则",children:["合并规则",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#合并规则",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["除了深层合并外，",(0,r.jsx)(e.code,{children:"mergeRsbuildConfig"})," 函数还会对部分选项进行特殊处理。"]}),"\n",(0,r.jsxs)(e.p,{children:["比如 ",(0,r.jsx)(e.a,{href:"/config/tools/rspack",children:"tools.rspack"})," 可以被设置为一个函数，当多份配置对象都包含 ",(0,r.jsx)(e.code,{children:"tools.rspack"})," 时，",(0,r.jsx)(e.code,{children:"mergeRsbuildConfig"})," 不会简单地保留最后一个函数。相反，它会将所有的 ",(0,r.jsx)(e.code,{children:"tools.rspack"})," 函数或对象合并到一个数组中。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"import { mergeRsbuildConfig } from '@rsbuild/core';\n\nconst config1 = {\n  tools: {\n    rspack: {\n      someOption: true,\n    },\n  },\n};\nconst config2 = {\n  tools: {\n    rspack: (config) => {\n      console.log('function 1');\n      return config;\n    },\n  },\n};\nconst config3 = {\n  tools: {\n    rspack: (config) => {\n      console.log('function 2');\n      return config;\n    },\n  },\n};\n\nconst mergedConfig = mergeRsbuildConfig(config1, config2, config3);\n"})}),"\n",(0,r.jsxs)(e.p,{children:["在以上示例中，合并后的配置为以下形式，该数组首先包含了一个对象 ",(0,r.jsx)(e.code,{children:"{ someOption: true }"}),"，然后是按合并顺序排列的两个函数。"]}),"\n",(0,r.jsx)(e.p,{children:"数组中的每一项会依次执行，并且上一个函数的输出将作为下一个函数的输入，最终生成一份 Rspack 配置。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"const mergedConfig = {\n  tools: {\n    rspack: [\n      {\n        someOption: true,\n      },\n      (config) => {\n        console.log('function 1');\n        return config;\n      },\n      (config) => {\n        console.log('function 2');\n        return config;\n      },\n    ],\n  },\n};\n"})}),"\n",(0,r.jsxs)(e.p,{children:["通过这种方法，我们可以确保合并多份配置对象时，相同的多个 ",(0,r.jsx)(e.code,{children:"tools.rspack"})," 字段均能够生效。"]}),"\n",(0,r.jsxs)(e.p,{children:["在 Rsbuild 中，大部分支持函数值的选项都使用上述规则，比如 ",(0,r.jsx)(e.code,{children:"tools.postcss"}),"、",(0,r.jsx)(e.code,{children:"tools.less"}),"、",(0,r.jsx)(e.code,{children:"tools.bundlerChain"})," 等。"]}),"\n",(0,r.jsxs)(e.h2,{id:"logger",children:["logger",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#logger",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["用于输出格式统一的日志信息，基于 ",(0,r.jsx)(e.a,{href:"https://github.com/rspack-contrib/rslog",target:"_blank",rel:"noopener noreferrer",children:"rslog"}),"。"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"示例："})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"import { logger } from '@rsbuild/core';\n\n// A gradient welcome log\nlogger.greet(`\\n➜ Rsbuild v1.0.0\\n`);\n\n// Info\nlogger.info('This is a info message');\n\n// Start\nlogger.start('This is a start message');\n\n// Warn\nlogger.warn('This is a warn message');\n\n// Ready\nlogger.ready('This is a ready message');\n\n// Success\nlogger.success('This is a success message');\n\n// Error\nlogger.error('This is a error message');\nlogger.error(new Error('This is a error message with stack'));\n\n// Debug\nlogger.debug('This is a debug message');\n\n// Same as console.log\nlogger.log('This is a log message');\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"自定义-logger",children:["自定义 Logger",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#自定义-logger",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["你可以使用 ",(0,r.jsx)(e.code,{children:"logger.override"})," 方法来覆盖默认 logger 的部分或全部方法："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"import { logger } from '@rsbuild/core';\n\nlogger.override({\n  log: (message) => {\n    console.log(`[log] ${message}`);\n  },\n  info: (message) => {\n    console.log(`[info] ${message}`);\n  },\n  warn: (message) => {\n    console.warn(`[warn] ${message}`);\n  },\n  start: (message) => {\n    console.log(`[start] ${message}`);\n  },\n  ready: (message) => {\n    console.log(`[ready] ${message}`);\n  },\n  error: (message) => {\n    console.error(`[error] ${message}`);\n  },\n  success: (message) => {\n    console.error(`[success] ${message}`);\n  },\n  debug: (message) => {\n    if (process.env.DEBUG) {\n      console.log(`[debug] ${message}`);\n    }\n  },\n});\n\nlogger.info('hello'); // [info] hello\n"})}),"\n",(0,r.jsxs)(e.h2,{id:"rspack",children:["rspack",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#rspack",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["由 ",(0,r.jsx)(e.code,{children:"@rspack/core"})," 导出的 ",(0,r.jsx)(e.code,{children:"rspack"})," 对象。"]}),"\n",(0,r.jsxs)(e.p,{children:["你可以直接从 ",(0,r.jsx)(e.code,{children:"@rsbuild/core"})," 中引用 ",(0,r.jsx)(e.code,{children:"rspack"})," 对象，而无须额外安装 ",(0,r.jsx)(e.code,{children:"@rspack/core"})," 依赖。"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"类型："})," ",(0,r.jsx)(e.code,{children:"Rspack"})]}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"示例："})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"import { rspack } from '@rsbuild/core';\n\nconsole.log(rspack.rspackVersion); // 1.0.0\nconsole.log(rspack.util.createHash);\n"})}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:["请参考 ",(0,r.jsx)(e.a,{href:"https://rspack.dev/zh/api/javascript-api/",target:"_blank",rel:"noopener noreferrer",children:"Rspack - JavaScript API"})," 了解更多。"]}),"\n"]}),"\n",(0,r.jsxs)(e.h2,{id:"version",children:["version",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#version",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["当前使用的 ",(0,r.jsx)(e.code,{children:"@rsbuild/core"})," 的版本。"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"类型："})," ",(0,r.jsx)(e.code,{children:"string"})]}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"示例："})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"import { version } from '@rsbuild/core';\n\nconsole.log(version); // 1.0.0\n"})}),"\n",(0,r.jsxs)(e.h2,{id:"ensureassetprefix",children:["ensureAssetPrefix",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#ensureassetprefix",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"ensureAssetPrefix"})," 函数用于将给定的 ",(0,r.jsx)(e.code,{children:"assetPrefix"})," 拼接到一个可能是 URL 的字符串前面。如果传入的字符串已经是一个完整的 URL，则直接返回该字符串。"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"类型："})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"function ensureAssetPrefix(\n  // 需要处理的 URL 字符串。可以是相对路径或绝对 URL\n  url: string,\n  // 需要拼接的 URL 前缀\n  assetPrefix: string\n) => string;\n"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"示例："})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"import { ensureAssetPrefix } from '@rsbuild/core';\n\nensureAssetPrefix('foo/bar.js', '/static/');\n// -> '/static/foo/bar.js'\n\nensureAssetPrefix('foo/bar.js', 'https://example.com/static/');\n// -> 'https://example.com/static/foo/bar.js'\n\nensureAssetPrefix(\n  'https://example.com/index.html',\n  'https://example.com/static/',\n);\n// -> 'https://example.com/index.html'\n"})})]})}function o(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,i.ah)(),n.components);return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(c,{...n})}):c(n)}let d=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["zh%2Fapi%2Fjavascript-api%2Fcore.mdx"]={toc:[{text:"createRsbuild",id:"creatersbuild",depth:2},{text:"Options",id:"options",depth:3},{text:"loadConfig",id:"loadconfig",depth:2},{text:"指定配置文件",id:"指定配置文件",depth:3},{text:"传入 meta 对象",id:"传入-meta-对象",depth:3},{text:"loadEnv",id:"loadenv",depth:2},{text:"mergeRsbuildConfig",id:"mergersbuildconfig",depth:2},{text:"基础示例",id:"基础示例",depth:3},{text:"合并规则",id:"合并规则",depth:3},{text:"logger",id:"logger",depth:2},{text:"自定义 Logger",id:"自定义-logger",depth:3},{text:"rspack",id:"rspack",depth:2},{text:"version",id:"version",depth:2},{text:"ensureAssetPrefix",id:"ensureassetprefix",depth:2}],title:"Rsbuild Core",frontmatter:{}}}}]);