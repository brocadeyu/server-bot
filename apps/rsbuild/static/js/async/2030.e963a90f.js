"use strict";(self.webpackChunkrsbuild_website=self.webpackChunkrsbuild_website||[]).push([["2030"],{30201:function(e,n,r){r.r(n),r.d(n,{default:function(){return d}});var s=r(55367),i=r(26971);function l(e){let n=Object.assign({h1:"h1",a:"a",blockquote:"blockquote",p:"p",img:"img",ul:"ul",li:"li",h2:"h2",pre:"pre",code:"code",ol:"ol",strong:"strong",hr:"hr"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"rsbuild-05-发布",children:["Rsbuild 0.5 发布",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rsbuild-05-发布",children:"#"})]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"March 19, 2024"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://assets.rspack.dev/rsbuild/rsbuild-banner-v0-5.png",alt:""})}),"\n",(0,s.jsx)(n.p,{children:"Rsbuild 0.5 是一个重要的里程碑，从该版本开始，Rsbuild 的绝大部分 API 已经达到稳定状态，我们预计在 2024 年 Q3 发布 Rsbuild v1.0。"}),"\n",(0,s.jsx)(n.p,{children:"主要变更："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["⚡️ 支持启用 ",(0,s.jsx)(n.a,{href:"https://lightningcss.dev/",target:"_blank",rel:"noopener noreferrer",children:"Lightning CSS"})," 以加速 CSS 编译。"]}),"\n",(0,s.jsx)(n.li,{children:"\uD83C\uDF1F 支持基于新的 JavaScript API 实现自定义 server。"}),"\n",(0,s.jsx)(n.li,{children:"\uD83C\uDF6D 重构 SVGR 插件以支持更丰富的用法。"}),"\n",(0,s.jsx)(n.li,{children:"\uD83D\uDCCD 支持自定义压缩选项。"}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"️-支持-lightning-css",children:["⚡️ 支持 Lightning CSS",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#️-支持-lightning-css",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Lightning CSS 是一个基于 Rust 编写的高性能 CSS 解析、转译和压缩工具。它支持将许多现代的 CSS 特性解析并转化为指定浏览器支持的语法，并提供更好的压缩比例。"}),"\n",(0,s.jsx)(n.p,{children:"Rsbuild 提供了 Lightning CSS 插件，用于按需开启 Lightning CSS 能力，并替代 Rsbuild 内置的 PostCSS、autoprefixer 和 SWC CSS minimizer。"}),"\n",(0,s.jsx)(n.p,{children:"只需要在 Rsbuild 配置中注册 Lightning CSS 插件，即可完成切换："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",meta:'title="rsbuild.config.ts"',children:"import { pluginLightningcss } from '@rsbuild/plugin-lightningcss';\n\nexport default {\n  plugins: [pluginLightningcss()],\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["在一个真实的大型 Web 应用中，我们接入了 Rsbuild Lightning CSS 插件，并使用 ",(0,s.jsx)(n.a,{href:"https://rsdoctor.dev/",target:"_blank",rel:"noopener noreferrer",children:"Rsdoctor"})," 分析构建耗时的变化："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"CSS 编译耗时由 8.4s 降低到 0.12s，提升 70 倍。"}),"\n",(0,s.jsx)(n.li,{children:"整体构建耗时由 33.1s 降低到 25.4s，提升 30%。"}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"-支持自定义-server",children:["\uD83C\uDF1F 支持自定义 Server",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#-支持自定义-server",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Rsbuild 现在支持将 dev server 替换为自定义的 server，并复用 Rsbuild 提供的页面预览、路由、模块热更新等功能。这将使得 Rsbuild 与其他 Node.js 框架结合使用变得更加容易。"}),"\n",(0,s.jsx)(n.p,{children:"比如基于 express 实现自定义 server："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import express from 'express';\nimport { createRsbuild } from '@rsbuild/core';\n\nasync function startCustomServer() {\n  const app = express();\n  const rsbuild = await createRsbuild();\n  const { port, middlewares } = await rsbuild.createDevServer();\n\n  app.use(middlewares);\n  app.listen(port);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["详情可参考 ",(0,s.jsx)(n.a,{href:"https://rsbuild.dev/zh/api/javascript-api/instance#rsbuildcreatedevserver",target:"_blank",rel:"noopener noreferrer",children:"Rsbuild - createDevServer"}),"。"]}),"\n",(0,s.jsxs)(n.h2,{id:"-重构-svgr-插件",children:["\uD83C\uDF6D 重构 SVGR 插件",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#-重构-svgr-插件",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"在 0.5.0 之前的版本中，SVGR 插件的默认用法与 create-react-app 保持一致，允许以混合导入的形式使用 SVG："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import logoUrl, { ReactComponent as Logo } from './logo.svg';\n\nconsole.log(logoUrl); // -> string\nconsole.log(Logo); // -> React component\n"})}),"\n",(0,s.jsx)(n.p,{children:"但这种做法存在两个问题："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"包体积增加"}),"：混合导入会导致单个 SVG 模块被编译为两种代码（即使部分导出没有被使用），这会增加产物的包体积。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"编译速度下降"}),"：混合导入会产生额外的编译开销。即使代码中未使用到 ReactComponent 导出，SVG 文件仍然会被 SVGR 编译。而 SVGR 是基于 Babel 实现的，性能开销较大。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["因此，我们重构了 ",(0,s.jsx)(n.code,{children:"@rsbuild/plugin-svgr"})," 插件，支持通过 ",(0,s.jsx)(n.code,{children:"?react"})," query 来将 SVG 转换为 React 组件，这种用法能够解决以上问题，且更符合当前社区的最佳实践。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"import logoUrl from './logo.svg';\nimport Logo from './logo.svg?react';\n\nconsole.log(logoUrl); // -> string\nconsole.log(Logo); // -> React component\n"})}),"\n",(0,s.jsxs)(n.p,{children:["SVGR 插件现在支持在多种 SVGR 用法之间切换，如果项目需要使用之前的混合导入用法，可以手动开启 ",(0,s.jsx)(n.a,{href:"/plugins/list/plugin-svgr#mixedimport",children:"mixedImport"})," 选项："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"pluginSvgr({\n  mixedImport: true,\n});\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"-自定义压缩选项",children:["\uD83D\uDCCD 自定义压缩选项",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#-自定义压缩选项",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"output.disableMinimize"})," 选项已经被重命名为 ",(0,s.jsx)(n.a,{href:"/config/output/minify",children:"output.minify"}),"，并允许自定义 JS 和 HTML 的压缩选项。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:'title="rsbuild.config.ts"',children:"export default {\n  output: {\n    minify: {\n      jsOptions: {\n        minimizerOptions: {\n          mangle: false,\n        },\n      },\n    },\n  },\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["使用 ",(0,s.jsx)(n.code,{children:"output.disableMinimize"})," 的项目可以参考以下示例："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff",children:"export default {\n  output: {\n-    disableMinimize: true,\n+    minify: false,\n  },\n};\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["详见 ",(0,s.jsx)(n.a,{href:"https://github.com/web-infra-dev/rsbuild/issues/1681",target:"_blank",rel:"noopener noreferrer",children:'"allow customize minify options"'}),"。"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"更多内容请参考："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/web-infra-dev/rsbuild/releases/tag/v0.5.0",target:"_blank",rel:"noopener noreferrer",children:"Rsbuild 0.5.0 更新日志"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/web-infra-dev/rsbuild/discussions/1732",target:"_blank",rel:"noopener noreferrer",children:"Rsbuild 0.5.0 不兼容更新"})}),"\n"]})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}let d=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["zh%2Fcommunity%2Freleases%2Fv0-5.mdx"]={toc:[{text:"⚡️ 支持 Lightning CSS",id:"️-支持-lightning-css",depth:2},{text:"\uD83C\uDF1F 支持自定义 Server",id:"-支持自定义-server",depth:2},{text:"\uD83C\uDF6D 重构 SVGR 插件",id:"-重构-svgr-插件",depth:2},{text:"\uD83D\uDCCD 自定义压缩选项",id:"-自定义压缩选项",depth:2}],title:"Rsbuild 0.5 发布",frontmatter:{published_at:"2024-03-19T08:00:00.000Z"}}}}]);