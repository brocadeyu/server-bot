"use strict";(self.webpackChunkrsbuild_website=self.webpackChunkrsbuild_website||[]).push([["6563"],{79889:function(s,e,n){n.r(e),n.d(e,{default:function(){return d}});var t=n(55367),c=n(26971);function o(s){let e=Object.assign({h1:"h1",a:"a",ul:"ul",li:"li",strong:"strong",code:"code",pre:"pre",p:"p",h2:"h2",h3:"h3",div:"div"},(0,c.ah)(),s.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.h1,{id:"toolspostcss",children:["tools.postcss",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#toolspostcss",children:"#"})]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"类型："})," ",(0,t.jsx)(e.code,{children:"Object | Function"})]}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.strong,{children:"默认值："})}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"const defaultOptions = {\n  postcssOptions: {\n    config: false,\n    sourceMap: rsbuildConfig.output.sourceMap.css,\n  },\n};\n"})}),"\n",(0,t.jsxs)(e.p,{children:["Rsbuild 默认集成 PostCSS，你可以通过 ",(0,t.jsx)(e.code,{children:"tools.postcss"})," 对 ",(0,t.jsx)(e.a,{href:"https://github.com/webpack-contrib/postcss-loader",target:"_blank",rel:"noopener noreferrer",children:"postcss-loader"})," 进行配置。"]}),"\n",(0,t.jsxs)(e.h2,{id:"function-类型",children:["Function 类型",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#function-类型",children:"#"})]}),"\n",(0,t.jsxs)(e.p,{children:["当 ",(0,t.jsx)(e.code,{children:"tools.postcss"})," 是一个 function 时，默认选项会作为第一个参数传入，你可以直接修改这个对象，也可以返回一个新的对象作为最终使用的选项。函数的第二个参数为修改 ",(0,t.jsx)(e.code,{children:"postcss-loader"})," 配置的工具函数。"]}),"\n",(0,t.jsxs)(e.p,{children:["例如，需要新增一个 PostCSS 插件，调用 ",(0,t.jsx)(e.a,{href:"#addplugins",children:"addPlugins"})," 工具函数即可："]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"export default {\n  tools: {\n    postcss: (opts, { addPlugins }) => {\n      addPlugins(require('postcss-px-to-viewport'));\n    },\n  },\n};\n"})}),"\n",(0,t.jsx)(e.p,{children:"需要给 PostCSS 插件传递参数时，可以将 PostCSS 插件作为一个函数调用："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"export default {\n  tools: {\n    postcss: (opts, { addPlugins }) => {\n      const viewportPlugin = require('postcss-px-to-viewport')({\n        viewportWidth: 375,\n      });\n      addPlugins(viewportPlugin);\n    },\n  },\n};\n"})}),"\n",(0,t.jsxs)(e.p,{children:["也可以修改默认的 ",(0,t.jsx)(e.code,{children:"postcss-loader"})," 选项："]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"export default {\n  tools: {\n    postcss: (opts) => {\n      opts.sourceMap = false;\n    },\n  },\n};\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:"tools.postcss"})," 可以返回一个配置对象，并完全替换默认配置："]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"export default {\n  tools: {\n    postcss: () => {\n      return {\n        postcssOptions: {\n          plugins: [require('postcss-px-to-viewport')],\n        },\n      };\n    },\n  },\n};\n"})}),"\n",(0,t.jsxs)(e.h2,{id:"object-类型",children:["Object 类型",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#object-类型",children:"#"})]}),"\n",(0,t.jsxs)(e.p,{children:["当 ",(0,t.jsx)(e.code,{children:"tools.postcss"})," 是一个 object 时，它会与默认配置通过 ",(0,t.jsx)(e.code,{children:"Object.assign"})," 合并。注意 ",(0,t.jsx)(e.code,{children:"Object.assign"})," 是浅拷贝，它会完全覆盖内置的 ",(0,t.jsx)(e.code,{children:"plugins"})," 数组，请谨慎使用。"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"export default {\n  tools: {\n    postcss: {\n      // 由于使用 `Object.assign` 合并，因此默认的 postcssOptions 会被覆盖。\n      postcssOptions: {\n        plugins: [require('postcss-px-to-viewport')],\n      },\n    },\n  },\n};\n"})}),"\n",(0,t.jsxs)(e.h2,{id:"工具函数",children:["工具函数",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#工具函数",children:"#"})]}),"\n",(0,t.jsxs)(e.h3,{id:"addplugins",children:["addPlugins",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#addplugins",children:"#"})]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"类型："})," ",(0,t.jsx)(e.code,{children:"(plugins: PostCSSPlugin | PostCSSPlugin[]) => void"})]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"用于添加额外的 PostCSS 插件，你可以传入单个 PostCSS 插件，也可以传入 PostCSS 插件数组。"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"export default {\n  tools: {\n    postcss: (config, { addPlugins }) => {\n      // 添加一个插件\n      addPlugins(require('postcss-preset-env'));\n      // 批量添加插件\n      addPlugins([require('postcss-preset-env'), require('postcss-import')]);\n    },\n  },\n};\n"})}),"\n",(0,t.jsxs)(e.h2,{id:"实践",children:["实践",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#实践",children:"#"})]}),"\n",(0,t.jsxs)(e.h3,{id:"多份-postcss-选项",children:["多份 PostCSS 选项",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#多份-postcss-选项",children:"#"})]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:"tools.postcss.postcssOptions"})," 可以设置为一个函数，函数接收 Rspack 的 ",(0,t.jsx)(e.code,{children:"loaderContext"})," 作为参数，这允许你根据不同的文件路径使用不同的 PostCSS 选项。"]}),"\n",(0,t.jsxs)(e.p,{children:["例如，为路径中包含 ",(0,t.jsx)(e.code,{children:"foo"})," 的文件使用 ",(0,t.jsx)(e.code,{children:"postcss-plugin-a"}),"，为其他文件使用 ",(0,t.jsx)(e.code,{children:"postcss-plugin-b"}),"："]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"export default {\n  tools: {\n    postcss: {\n      postcssOptions: (loaderContext) => {\n        if (/foo/.test(loaderContext.resourcePath)) {\n          return {\n            plugins: [require('postcss-plugin-a')],\n          };\n        }\n        return {\n          plugins: [require('postcss-plugin-b')],\n        };\n      },\n    },\n  },\n};\n"})}),"\n",(0,t.jsxs)(e.div,{className:"rspress-directive tip",children:[(0,t.jsx)(e.div,{className:"rspress-directive-title",children:"TIP"}),(0,t.jsx)(e.div,{className:"rspress-directive-content",children:(0,t.jsxs)(e.p,{children:["如果项目中包含 ",(0,t.jsx)(e.code,{children:"postcss.config.*"})," 配置文件，该文件的内容会与 ",(0,t.jsx)(e.code,{children:"tools.postcss.postcssOptions"})," 合并，后者的优先级更高，",(0,t.jsx)(e.code,{children:"plugins"})," 数组会被合并到一个数组中。\n"]})})]}),"\n",(0,t.jsxs)(e.h2,{id:"注意事项",children:["注意事项",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#注意事项",children:"#"})]}),"\n",(0,t.jsxs)(e.h3,{id:"postcss-版本",children:["PostCSS 版本",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#postcss-版本",children:"#"})]}),"\n",(0,t.jsx)(e.p,{children:"Rsbuild 中使用的 PostCSS 版本为 v8，当你引入社区中的 PostCSS 插件时，请注意版本是否适配，部分旧版本插件可能无法在 PostCSS v8 下运行。"}),"\n",(0,t.jsxs)(e.h3,{id:"postcss-配置加载",children:["PostCSS 配置加载",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#postcss-配置加载",children:"#"})]}),"\n",(0,t.jsxs)(e.p,{children:["Rsbuild 使用 ",(0,t.jsx)(e.a,{href:"https://github.com/postcss/postcss-load-config",target:"_blank",rel:"noopener noreferrer",children:"postcss-load-config"})," 加载 PostCSS 配置文件，并将其与默认配置合并。"]}),"\n",(0,t.jsxs)(e.p,{children:["Rsbuild 内部将 ",(0,t.jsx)(e.code,{children:"postcss-loader"})," 的 ",(0,t.jsx)(e.code,{children:"postcssOptions.config"})," 选项始终设置为 ",(0,t.jsx)(e.code,{children:"false"}),"，以避免重复加载配置文件。"]})]})}function r(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,c.ah)(),s.components);return e?(0,t.jsx)(e,{...s,children:(0,t.jsx)(o,{...s})}):o(s)}let d=r;r.__RSPRESS_PAGE_META={},r.__RSPRESS_PAGE_META["zh%2Fconfig%2Ftools%2Fpostcss.mdx"]={toc:[{text:"Function 类型",id:"function-类型",depth:2},{text:"Object 类型",id:"object-类型",depth:2},{text:"工具函数",id:"工具函数",depth:2},{text:"addPlugins",id:"addplugins",depth:3},{text:"实践",id:"实践",depth:2},{text:"多份 PostCSS 选项",id:"多份-postcss-选项",depth:3},{text:"注意事项",id:"注意事项",depth:2},{text:"PostCSS 版本",id:"postcss-版本",depth:3},{text:"PostCSS 配置加载",id:"postcss-配置加载",depth:3}],title:"tools.postcss",frontmatter:{}}}}]);