"use strict";(self.webpackChunkrsbuild_website=self.webpackChunkrsbuild_website||[]).push([["2994"],{18137:function(e,s,n){n.r(s),n.d(s,{default:function(){return t}});var d=n(55367),l=n(26971);function r(e){let s=Object.assign({h1:"h1",a:"a",p:"p",code:"code",ul:"ul",li:"li",h2:"h2",pre:"pre",strong:"strong",h3:"h3"},(0,l.ah)(),e.components);return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(s.h1,{id:"使用-css-modules",children:["使用 CSS Modules",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#使用-css-modules",children:"#"})]}),"\n",(0,d.jsxs)(s.p,{children:[(0,d.jsx)(s.a,{href:"https://github.com/css-modules/css-modules",target:"_blank",rel:"noopener noreferrer",children:"CSS Modules"})," 让我们能以模块化的方式编写 CSS 代码，并且可以在 JavaScript 文件中导入和使用这些样式。使用 CSS Modules 可以自动生成唯一的类名，隔离不同模块之间的样式，避免类名冲突。"]}),"\n",(0,d.jsxs)(s.p,{children:["Rsbuild 默认支持使用 CSS Modules，无需添加额外的配置。我们约定使用 ",(0,d.jsx)(s.code,{children:"[name].module.css"})," 文件名来启用 CSS Modules。"]}),"\n",(0,d.jsx)(s.p,{children:"以下样式文件会被视为 CSS Modules："}),"\n",(0,d.jsxs)(s.ul,{children:["\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"*.module.css"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"*.module.less"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"*.module.sass"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"*.module.scss"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"*.module.styl"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"*.module.stylus"})}),"\n"]}),"\n",(0,d.jsxs)(s.h2,{id:"用法示例",children:["用法示例",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#用法示例",children:"#"})]}),"\n",(0,d.jsxs)(s.ul,{children:["\n",(0,d.jsx)(s.li,{children:"编写样式："}),"\n"]}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-css",meta:'title="button.module.css"',children:".red {\n  background: red;\n}\n"})}),"\n",(0,d.jsxs)(s.ul,{children:["\n",(0,d.jsx)(s.li,{children:"使用样式："}),"\n"]}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-tsx",meta:'title="Button.tsx"',children:"import styles from './button.module.css';\n\nexport default () => {\n  return <button className={styles.red}>Button</button>;\n};\n"})}),"\n",(0,d.jsxs)(s.h2,{id:"具名导入",children:["具名导入",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#具名导入",children:"#"})]}),"\n",(0,d.jsxs)(s.p,{children:["如果你倾向于在 CSS Modules 中使用具名导入，可以通过 ",(0,d.jsx)(s.a,{href:"/config/output/css-modules#cssmodulesnamedexport",children:"output.cssModules.namedExport"})," 配置项来开启。"]}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-ts",meta:'title="rsbuild.config.ts"',children:"export default {\n  output: {\n    cssModules: {\n      namedExport: true,\n    },\n  },\n};\n"})}),"\n",(0,d.jsx)(s.p,{children:"开启后，你可以通过具名导入来引用类名："}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-tsx",meta:'title="Button.tsx"',children:"import { red } from './button.module.css';\n\nexport default () => {\n  return <button className={red}>Button</button>;\n};\n"})}),"\n",(0,d.jsxs)(s.h2,{id:"css-modules-识别规则",children:["CSS Modules 识别规则",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#css-modules-识别规则",children:"#"})]}),"\n",(0,d.jsxs)(s.p,{children:["在默认情况下，只有 ",(0,d.jsx)(s.code,{children:"*.module.css"})," 结尾的文件才被视为 CSS Modules 模块。"]}),"\n",(0,d.jsxs)(s.p,{children:["如果你想将其他 CSS 文件也当做 CSS Modules 模块进行处理，可以通过配置 ",(0,d.jsx)(s.a,{href:"/config/output/css-modules#cssmodulesauto",children:"output.cssModules.auto"})," 来实现。"]}),"\n",(0,d.jsx)(s.p,{children:"比如："}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-ts",children:"export default {\n  output: {\n    cssModules: {\n      auto: (resource) => {\n        return resource.includes('.module.') || resource.includes('shared/');\n      },\n    },\n  },\n};\n"})}),"\n",(0,d.jsx)(s.p,{children:"设置后，以下两个文件都会被视为 CSS Modules："}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-ts",children:"import styles1 from './foo.module.css';\nimport styles2 from './shared/bar.css';\n"})}),"\n",(0,d.jsxs)(s.h2,{id:"自定义类名",children:["自定义类名",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#自定义类名",children:"#"})]}),"\n",(0,d.jsxs)(s.p,{children:["自定义 CSS Modules 生成的类名也是我们比较常用的功能，你可以使用 ",(0,d.jsx)(s.a,{href:"/config/output/css-modules#cssmoduleslocalidentname",children:"output.cssModules.localIdentName"})," 来进行配置。"]}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-ts",children:"export default {\n  output: {\n    cssModules: {\n      localIdentName: '[hash:base64:4]',\n    },\n  },\n};\n"})}),"\n",(0,d.jsxs)(s.p,{children:["如果你需要自定义 CSS Modules 的其他配置，可以通过 ",(0,d.jsx)(s.a,{href:"/config/output/css-modules",children:"output.cssModules"})," 进行设置。"]}),"\n",(0,d.jsxs)(s.h2,{id:"类型声明",children:["类型声明",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#类型声明",children:"#"})]}),"\n",(0,d.jsx)(s.p,{children:"当你在 TypeScript 代码中引用 CSS Modules 时，TypeScript 可能会提示该模块缺少类型定义："}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{children:"TS2307: Cannot find module './index.module.css' or its corresponding type declarations.\n"})}),"\n",(0,d.jsxs)(s.p,{children:["此时你需要为 CSS Modules 添加类型声明文件，请在项目中创建 ",(0,d.jsx)(s.code,{children:"src/env.d.ts"})," 文件，并添加相应的类型声明。"]}),"\n",(0,d.jsxs)(s.ul,{children:["\n",(0,d.jsxs)(s.li,{children:["方法一：如果项目里安装了 ",(0,d.jsx)(s.code,{children:"@rsbuild/core"})," 包，你可以直接引用 ",(0,d.jsx)(s.code,{children:"@rsbuild/core"})," 提供的 ",(0,d.jsx)(s.a,{href:"/guide/basic/typescript#%E9%A2%84%E8%AE%BE%E7%B1%BB%E5%9E%8B",children:"预设类型"}),"："]}),"\n"]}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-ts",children:'/// <reference types="@rsbuild/core/types" />\n'})}),"\n",(0,d.jsxs)(s.ul,{children:["\n",(0,d.jsx)(s.li,{children:"方法二：手动添加需要的类型声明："}),"\n"]}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-ts",meta:'title="src/env.d.ts"',children:"declare module '*.module.css' {\n  const classes: { readonly [key: string]: string };\n  export default classes;\n}\ndeclare module '*.module.scss' {\n  const classes: { readonly [key: string]: string };\n  export default classes;\n}\ndeclare module '*.module.sass' {\n  const classes: { readonly [key: string]: string };\n  export default classes;\n}\ndeclare module '*.module.less' {\n  const classes: { readonly [key: string]: string };\n  export default classes;\n}\ndeclare module '*.module.styl' {\n  const classes: { readonly [key: string]: string };\n  export default classes;\n}\ndeclare module '*.module.stylus' {\n  const classes: { readonly [key: string]: string };\n  export default classes;\n}\n"})}),"\n",(0,d.jsxs)(s.ul,{children:["\n",(0,d.jsxs)(s.li,{children:["方法三：如果你需要使用",(0,d.jsx)(s.strong,{children:"具名导入"}),"来引用类名，可以更松散的类型定义："]}),"\n"]}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-ts",meta:'title="src/env.d.ts"',children:"declare module '*.module.css';\ndeclare module '*.module.scss';\ndeclare module '*.module.sass';\ndeclare module '*.module.less';\ndeclare module '*.module.styl';\ndeclare module '*.module.stylus';\n"})}),"\n",(0,d.jsxs)(s.p,{children:["添加类型声明后，如果依然存在类型错误，请尝试重启当前 IDE，或者调整 ",(0,d.jsx)(s.code,{children:"env.d.ts"})," 所在的目录，使 TypeScript 能够正确识别类型定义。"]}),"\n",(0,d.jsxs)(s.h2,{id:"类型生成",children:["类型生成",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#类型生成",children:"#"})]}),"\n",(0,d.jsx)(s.p,{children:"上述方法虽然可以解决 CSS Modules 在 TypeScript 中的类型问题，但是无法准确地提示出 CSS Modules 导出了哪些类名。"}),"\n",(0,d.jsxs)(s.p,{children:["Rsbuild 支持为 CSS Modules 生成准确的类型声明，你只需要开启 ",(0,d.jsx)(s.a,{href:"https://github.com/rspack-contrib/rsbuild-plugin-typed-css-modules",target:"_blank",rel:"noopener noreferrer",children:"@rsbuild/plugin-typed-css-modules"}),"，再执行构建命令，Rsbuild 就会为项目中所有的 CSS Modules 文件生成类型声明文件。"]}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-ts",meta:'title="rsbuild.config.ts"',children:"import { pluginTypedCSSModules } from '@rsbuild/plugin-typed-css-modules';\n\nexport default {\n  plugins: [pluginTypedCSSModules()],\n};\n"})}),"\n",(0,d.jsxs)(s.h3,{id:"示例",children:["示例",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#示例",children:"#"})]}),"\n",(0,d.jsxs)(s.p,{children:["例如，创建 ",(0,d.jsx)(s.code,{children:"src/index.ts"})," 和 ",(0,d.jsx)(s.code,{children:"src/index.module.css"})," 两个文件："]}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-tsx",meta:'title="src/index.ts"',children:"import styles from './index.module.css';\n\nconsole.log(styles.pageHeader);\n"})}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-css",meta:'title="index.module.css"',children:".page-header {\n  color: black;\n}\n"})}),"\n",(0,d.jsxs)(s.p,{children:["构建后，Rsbuild 会自动生成 ",(0,d.jsx)(s.code,{children:"src/index.module.css.d.ts"})," 类型声明文件："]}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-ts",meta:'title="src/index.module.css.d.ts"',children:"interface CssExports {\n  'page-header': string;\n  pageHeader: string;\n}\ndeclare const cssExports: CssExports;\nexport default cssExports;\n"})}),"\n",(0,d.jsxs)(s.p,{children:["此时再打开 ",(0,d.jsx)(s.code,{children:"src/index.ts"})," 文件，可以看到 ",(0,d.jsx)(s.code,{children:"styles"})," 对象已经具备了准确的类型。"]})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,l.ah)(),e.components);return s?(0,d.jsx)(s,{...e,children:(0,d.jsx)(r,{...e})}):r(e)}let t=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["zh%2Fguide%2Fbasic%2Fcss-modules.mdx"]={toc:[{text:"用法示例",id:"用法示例",depth:2},{text:"具名导入",id:"具名导入",depth:2},{text:"CSS Modules 识别规则",id:"css-modules-识别规则",depth:2},{text:"自定义类名",id:"自定义类名",depth:2},{text:"类型声明",id:"类型声明",depth:2},{text:"类型生成",id:"类型生成",depth:2},{text:"示例",id:"示例",depth:3}],title:"使用 CSS Modules",frontmatter:{}}}}]);