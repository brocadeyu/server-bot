"use strict";(self.webpackChunkrsbuild_website=self.webpackChunkrsbuild_website||[]).push([["6515"],{9265:function(e,r,s){s.r(r),s.d(r,{default:function(){return a}});var n=s(55367),i=s(26971);function l(e){let r=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",h3:"h3",img:"img",ul:"ul",li:"li",code:"code",pre:"pre",div:"div"},(0,i.ah)(),e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(r.h1,{id:"产物体积优化",children:["产物体积优化",(0,n.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#产物体积优化",children:"#"})]}),"\n",(0,n.jsx)(r.p,{children:"产物体积的优化在生产环境中是非常重要的，因为它直接影响到了线上的用户体验。在这篇文档中，我们将介绍在 Rsbuild 中一些常见的产物体积优化方式。"}),"\n",(0,n.jsxs)(r.h2,{id:"减少重复依赖",children:["减少重复依赖",(0,n.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#减少重复依赖",children:"#"})]}),"\n",(0,n.jsx)(r.p,{children:"在 Web 项目中，经常出现某些第三方依赖被打包了多个版本的现象。重复依赖会导致包体积变大、构建速度变慢。"}),"\n",(0,n.jsxs)(r.h3,{id:"检测重复依赖",children:["检测重复依赖",(0,n.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#检测重复依赖",children:"#"})]}),"\n",(0,n.jsxs)(r.p,{children:["你可以使用 ",(0,n.jsx)(r.a,{href:"https://rsdoctor.dev",target:"_blank",rel:"noopener noreferrer",children:"Rsdoctor"})," 来检测项目中是否存在重复依赖，Rsdoctor 会在构建过程中进行分析，找出所有重复打包的依赖包，并可视化展示出来："]}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.img,{src:"https://assets.rspack.dev/rsbuild/assets/rsdoctor-duplicated-packages.png",alt:""})}),"\n",(0,n.jsxs)(r.p,{children:["详见 ",(0,n.jsx)(r.a,{href:"https://rsdoctor.dev/zh/blog/topic/duplicate-pkg-problem",target:"_blank",rel:"noopener noreferrer",children:"Rsdoctor - 重复依赖问题"}),"。"]}),"\n",(0,n.jsxs)(r.h3,{id:"消除重复依赖",children:["消除重复依赖",(0,n.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#消除重复依赖",children:"#"})]}),"\n",(0,n.jsx)(r.p,{children:"我们可以通过一些配置项和工具来检测或消除重复依赖。"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsxs)(r.p,{children:["Rsbuild 提供了 ",(0,n.jsx)(r.a,{href:"/config/resolve/dedupe",children:"resolve.dedupe"})," 配置项，它允许你强制从项目根目录解析指定的包，从而移除重复包。"]}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsxs)(r.p,{children:["如果你在使用 ",(0,n.jsx)(r.code,{children:"pnpm >= 7.26.0"}),"，可以使用 pnpm 自带的 ",(0,n.jsx)(r.a,{href:"https://pnpm.io/cli/dedupe",target:"_blank",rel:"noopener noreferrer",children:"pnpm dedupe"})," 命令来升级和消除其中的重复依赖。"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"pnpm dedupe\n"})}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["如果你在使用 ",(0,n.jsx)(r.code,{children:"pnpm < 7.26.0"})," 版本，可以使用 ",(0,n.jsx)(r.a,{href:"https://github.com/ocavue/pnpm-deduplicate",target:"_blank",rel:"noopener noreferrer",children:"pnpm-deduplicate"})," 来分析出所有的重复依赖，并通过升级依赖或声明 ",(0,n.jsx)(r.a,{href:"https://pnpm.io/package_json#pnpmoverrides",target:"_blank",rel:"noopener noreferrer",children:"pnpm overrides"})," 进行版本合并。"]}),"\n"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"npx pnpm-deduplicate --list\n"})}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["如果你在使用 ",(0,n.jsx)(r.code,{children:"yarn"}),"，可以使用 ",(0,n.jsx)(r.a,{href:"https://github.com/scinos/yarn-deduplicate",target:"_blank",rel:"noopener noreferrer",children:"yarn-deduplicate"})," 来自动合并重复依赖："]}),"\n"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"npx yarn-deduplicate && yarn\n"})}),"\n",(0,n.jsxs)(r.h2,{id:"使用更轻量的库",children:["使用更轻量的库",(0,n.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#使用更轻量的库",children:"#"})]}),"\n",(0,n.jsxs)(r.p,{children:["建议将项目中体积较大的三方库替换为更轻量的库，比如将 ",(0,n.jsx)(r.a,{href:"https://momentjs.com/",target:"_blank",rel:"noopener noreferrer",children:"moment"})," 替换为 ",(0,n.jsx)(r.a,{href:"https://day.js.org/",target:"_blank",rel:"noopener noreferrer",children:"day.js"}),"。"]}),"\n",(0,n.jsxs)(r.p,{children:["如果你需要找出项目中体积较大的三方库，可以在执行构建时添加 ",(0,n.jsx)(r.code,{children:"BUNDLE_ANALYZE=true"})," 环境变量："]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"BUNDLE_ANALYZE=true pnpm build\n"})}),"\n",(0,n.jsxs)(r.p,{children:["详见 ",(0,n.jsx)(r.a,{href:"/config/performance/bundle-analyze",children:"performance.bundleAnalyze"})," 配置项。"]}),"\n",(0,n.jsxs)(r.h2,{id:"提升-browserslist-范围",children:["提升 Browserslist 范围",(0,n.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#提升-browserslist-范围",children:"#"})]}),"\n",(0,n.jsx)(r.p,{children:"Rsbuild 会根据项目的 Browserslist 配置范围进行代码编译，并注入相应的 Polyfill。如果项目不需要兼容旧版浏览器，可以根据实际情况来提升 Browserslist 范围，从而减少在语法和 Polyfill 上的编译开销。"}),"\n",(0,n.jsx)(r.p,{children:"Rsbuild 默认的 Browserslist 配置为："}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-js",children:"['chrome >= 87', 'edge >= 88', 'firefox >= 78', 'safari >= 14'];\n"})}),"\n",(0,n.jsx)(r.p,{children:"比如只兼容 Chrome 100 以上的浏览器，可以改成："}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-js",children:"['Chrome >= 100'];\n"})}),"\n",(0,n.jsxs)(r.div,{className:"rspress-directive tip",children:[(0,n.jsx)(r.div,{className:"rspress-directive-title",children:"TIP"}),(0,n.jsx)(r.div,{className:"rspress-directive-content",children:(0,n.jsxs)(r.p,{children:["请阅读 ",(0,n.jsx)(r.a,{href:"/guide/advanced/browserslist",children:"设置浏览器范围"})," 章节来了解更多关于 Browserslist 的用法。\n"]})})]}),"\n",(0,n.jsxs)(r.h2,{id:"按需引入-polyfill",children:["按需引入 polyfill",(0,n.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#按需引入-polyfill",children:"#"})]}),"\n",(0,n.jsxs)(r.p,{children:["如果当前项目的 ",(0,n.jsx)(r.a,{href:"/config/output/polyfill",children:"output.polyfill"})," 为 ",(0,n.jsx)(r.code,{children:"'entry'"}),"，在明确第三方依赖不需要额外 polyfill 的情况下，你可以将它设置为 ",(0,n.jsx)(r.code,{children:"usage"})," 。"]}),"\n",(0,n.jsxs)(r.p,{children:["在 ",(0,n.jsx)(r.code,{children:"usage"})," 模式下，Rsbuild 会分析源代码中使用的语法，按需注入所需的 polyfill 代码，从而减少 polyfill 的代码量。"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-js",children:"export default {\n  output: {\n    polyfill: 'usage',\n  },\n};\n"})}),"\n",(0,n.jsxs)(r.div,{className:"rspress-directive tip",children:[(0,n.jsx)(r.div,{className:"rspress-directive-title",children:"TIP"}),(0,n.jsx)(r.div,{className:"rspress-directive-content",children:(0,n.jsxs)(r.p,{children:["请阅读 ",(0,n.jsx)(r.a,{href:"/guide/advanced/browser-compatibility",children:"浏览器兼容性"})," 章节来了解更多关于 polyfill 的用法。\n"]})})]}),"\n",(0,n.jsxs)(r.h2,{id:"使用图片压缩",children:["使用图片压缩",(0,n.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#使用图片压缩",children:"#"})]}),"\n",(0,n.jsx)(r.p,{children:"在一般的前端项目中，图片资源的体积往往是项目产物体积的大头，因此如果能尽可能精简图片的体积，那么将会对项目的打包产物体积起到明显的优化效果。你可以在 Rsbuild 中注册插件来启用图片压缩功能:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",meta:'title="rsbuild.config.ts"',children:"import { pluginImageCompress } from '@rsbuild/plugin-image-compress';\n\nexport default {\n  plugins: [pluginImageCompress()],\n};\n"})}),"\n",(0,n.jsxs)(r.p,{children:["详见 ",(0,n.jsx)(r.a,{href:"https://github.com/rspack-contrib/rsbuild-plugin-image-compress",target:"_blank",rel:"noopener noreferrer",children:"@rsbuild/plugin-image-compress"}),"。"]}),"\n",(0,n.jsxs)(r.h2,{id:"代码拆包",children:["代码拆包",(0,n.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#代码拆包",children:"#"})]}),"\n",(0,n.jsx)(r.p,{children:"良好的拆包策略对于提升应用的加载性能是十分重要的，可以充分利用浏览器的缓存机制，减少请求数量，加快页面加载速度。"}),"\n",(0,n.jsxs)(r.p,{children:["在 Rsbuild 中内置了",(0,n.jsx)(r.a,{href:"/guide/optimization/code-splitting",children:"多种拆包策略"}),"，可以满足大部分应用的需求，你也可以根据自己的使用场景，自定义拆包配置。"]}),"\n",(0,n.jsxs)(r.p,{children:["比如将 node_modules 下的 ",(0,n.jsx)(r.code,{children:"axios"})," 库拆分到 ",(0,n.jsx)(r.code,{children:"axios.js"})," 中："]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-js",children:"export default {\n  performance: {\n    chunkSplit: {\n      strategy: 'split-by-experience',\n      forceSplitting: {\n        axios: /node_modules[\\\\/]axios/,\n      },\n    },\n  },\n};\n"})})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,i.ah)(),e.components);return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}let a=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["zh%2Fguide%2Foptimization%2Foptimize-bundle.mdx"]={toc:[{text:"减少重复依赖",id:"减少重复依赖",depth:2},{text:"检测重复依赖",id:"检测重复依赖",depth:3},{text:"消除重复依赖",id:"消除重复依赖",depth:3},{text:"使用更轻量的库",id:"使用更轻量的库",depth:2},{text:"提升 Browserslist 范围",id:"提升-browserslist-范围",depth:2},{text:"按需引入 polyfill",id:"按需引入-polyfill",depth:2},{text:"使用图片压缩",id:"使用图片压缩",depth:2},{text:"代码拆包",id:"代码拆包",depth:2}],title:"产物体积优化",frontmatter:{}}}}]);