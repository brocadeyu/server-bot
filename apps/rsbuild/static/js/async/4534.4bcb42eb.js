"use strict";(self.webpackChunkrsbuild_website=self.webpackChunkrsbuild_website||[]).push([["4534"],{37130:function(e,n,i){i.r(n),i.d(n,{default:function(){return l}});var s=i(55367),r=i(26971);function t(e){let n=Object.assign({h1:"h1",a:"a",blockquote:"blockquote",p:"p",img:"img",ul:"ul",li:"li",h2:"h2",pre:"pre",code:"code",ol:"ol",strong:"strong",hr:"hr"},(0,r.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"announcing-rsbuild-05",children:["Announcing Rsbuild 0.5",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#announcing-rsbuild-05",children:"#"})]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"March 19, 2024"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://assets.rspack.dev/rsbuild/rsbuild-banner-v0-5.png",alt:""})}),"\n",(0,s.jsx)(n.p,{children:"Rsbuild 0.5 is an important milestone. As of this release, most of the Rsbuild API has reached a stable state and we expect to release Rsbuild 1.0 in Q3 2024."}),"\n",(0,s.jsx)(n.p,{children:"Main changes:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["⚡️ Support for ",(0,s.jsx)(n.a,{href:"https://lightningcss.dev/",target:"_blank",rel:"noopener noreferrer",children:"Lightning CSS"})," to speed up CSS compilation."]}),"\n",(0,s.jsx)(n.li,{children:"\uD83C\uDF1F Support for custom server based on the new JavaScript API."}),"\n",(0,s.jsx)(n.li,{children:"\uD83C\uDF6D Refactor the SVGR plugin to support more usages."}),"\n",(0,s.jsx)(n.li,{children:"\uD83D\uDCCD Support for custom minify options."}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"️-supports-lightning-css",children:["⚡️ Supports Lightning CSS",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#️-supports-lightning-css",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Lightning CSS is a high performance CSS parser, transformer and minifier written in Rust. It supports parsing and transforming many modern CSS features into syntax supported by target browsers, and also provides a better compression ratio."}),"\n",(0,s.jsx)(n.p,{children:"Rsbuild provides the Lightning CSS plugin to use Lightning CSS on an opt-in basis, replacing the built-in PostCSS, autoprefixer, and SWC CSS minimizer in Rsbuild."}),"\n",(0,s.jsx)(n.p,{children:"All you need to do is register the Lightning CSS plugin in the Rsbuild configuration to complete the switch:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",meta:'title="rsbuild.config.ts"',children:"import { pluginLightningcss } from '@rsbuild/plugin-lightningcss';\n\nexport default {\n  plugins: [pluginLightningcss()],\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In a real large-scale web application, we have integrated the Rsbuild Lightning CSS plugin and used ",(0,s.jsx)(n.a,{href:"https://rsdoctor.dev/",target:"_blank",rel:"noopener noreferrer",children:"Rsdoctor"})," to analyze the changes in build time:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"CSS compilation time was reduced from 8.4s to 0.12s, a 70x improvement."}),"\n",(0,s.jsx)(n.li,{children:"The overall build time was reduced from 33.1s to 25.4s, a 30% increase."}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"-support-for-custom-server",children:["\uD83C\uDF1F Support for Custom Server",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#-support-for-custom-server",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Rsbuild now supports replacing the dev server with a custom server that reuses Rsbuild's page preview, routing, and module hot update features. This makes it easier to integrate Rsbuild with other Node.js frameworks."}),"\n",(0,s.jsx)(n.p,{children:"For example, you can implement a custom server based on express:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import express from 'express';\nimport { createRsbuild } from '@rsbuild/core';\n\nasync function startCustomServer() {\n  const app = express();\n  const rsbuild = await createRsbuild();\n  const { port, middlewares } = await rsbuild.createDevServer();\n\n  app.use(middlewares);\n  app.listen(port);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["For more details, please refer to ",(0,s.jsx)(n.a,{href:"/api/javascript-api/instance#rsbuildcreatedevserver",children:"Rsbuild - createDevServer"}),"."]}),"\n",(0,s.jsxs)(n.h2,{id:"-refactoring-svgr-plugin",children:["\uD83C\uDF6D Refactoring SVGR Plugin",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#-refactoring-svgr-plugin",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"In versions prior to 0.5.0, the default usage of the SVGR plugin was the same as create-react-app, allowing SVGs to be used via mixed import:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import logoUrl, { ReactComponent as Logo } from './logo.svg';\n\nconsole.log(logoUrl); // -> string\nconsole.log(Logo); // -> React component\n"})}),"\n",(0,s.jsx)(n.p,{children:"However, there are two problems with this approach:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Increased bundle size"}),": Mixed import causes a single SVG module to be compiled into two types of code (even if some exports are not used), which will increase the bundle size."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Slow down compiling"}),": Mixed import will cause extra compilation overhead. Even if the ReactComponent export is not used in the code, the SVG file will still be compiled by SVGR. And SVGR is based on Babel, which has a high performance overhead."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["So we have refactored the ",(0,s.jsx)(n.code,{children:"@rsbuild/plugin-svgr"})," plugin to support converting SVGs to React components via the ",(0,s.jsx)(n.code,{children:"?react"})," query. This approach can solve the problems mentioned above, and is more in line with community best practices."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"import logoUrl from './logo.svg';\nimport Logo from './logo.svg?react';\n\nconsole.log(logoUrl); // -> string\nconsole.log(Logo); // -> React component\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The SVGR plugin now supports switching between different SVGR usages. If a project needs to use the previous mixed import usage, you can manually enable the ",(0,s.jsx)(n.a,{href:"/plugins/list/plugin-svgr#mixedimport",children:"mixedImport"})," option:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"pluginSvgr({\n  mixedImport: true,\n});\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"-custom-minify-options",children:["\uD83D\uDCCD Custom Minify Options",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#-custom-minify-options",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"output.disableMinimize"})," option has been renamed to ",(0,s.jsx)(n.a,{href:"/config/output/minify",children:"output.minify"}),", and it allows customizing JS and HTML minification options."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:'title="rsbuild.config.ts"',children:"export default {\n  output: {\n    minify: {\n      jsOptions: {\n        minimizerOptions: {\n          mangle: false,\n        },\n      },\n    },\n  },\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Projects using ",(0,s.jsx)(n.code,{children:"output.disableMinimize"})," can refer to the example below:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff",children:"export default {\n  output: {\n-    disableMinimize: true,\n+    minify: false,\n  },\n};\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["See ",(0,s.jsx)(n.a,{href:"https://github.com/web-infra-dev/rsbuild/issues/1681",target:"_blank",rel:"noopener noreferrer",children:'"allow customize minify options"'}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"For more information, please refer to:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/web-infra-dev/rsbuild/releases/tag/v0.5.0",target:"_blank",rel:"noopener noreferrer",children:"Rsbuild 0.5.0 Changelog"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/web-infra-dev/rsbuild/discussions/1732",target:"_blank",rel:"noopener noreferrer",children:"Rsbuild 0.5.0 Breaking Changes"})}),"\n"]})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(t,{...e})}):t(e)}let l=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["en%2Fcommunity%2Freleases%2Fv0-5.mdx"]={toc:[{text:"⚡️ Supports Lightning CSS",id:"️-supports-lightning-css",depth:2},{text:"\uD83C\uDF1F Support for Custom Server",id:"-support-for-custom-server",depth:2},{text:"\uD83C\uDF6D Refactoring SVGR Plugin",id:"-refactoring-svgr-plugin",depth:2},{text:"\uD83D\uDCCD Custom Minify Options",id:"-custom-minify-options",depth:2}],title:"Announcing Rsbuild 0.5",frontmatter:{published_at:"2024-03-19T08:00:00.000Z"}}}}]);