"use strict";(self.webpackChunkrsbuild_website=self.webpackChunkrsbuild_website||[]).push([["7006"],{22140:function(e,n,s){s.r(n),s.d(n,{default:function(){return l}});var i=s(55367),d=s(26971);function r(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",pre:"pre",code:"code",ul:"ul",li:"li",div:"div",h3:"h3",strong:"strong"},(0,d.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"配置-rsbuild",children:["配置 Rsbuild",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#配置-rsbuild",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Rsbuild 提供了丰富的配置项，并为每个配置项预设了一个通用的默认值，它可以满足大部分使用场景。因此，在大多数情况下，你不需要声明任何 Rsbuild 配置，直接开箱使用即可。"}),"\n",(0,i.jsx)(n.p,{children:"如果你需要定制一些构建行为，那么可以使用这些配置项。"}),"\n",(0,i.jsxs)(n.h2,{id:"配置结构",children:["配置结构",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#配置结构",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Rsbuild 的配置结构如下所示："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",meta:'title="rsbuild.config.mjs"',children:"export default {\n  plugins: [\n    // 配置 Rsbuild 插件\n  ],\n  dev: {\n    // 与本地开发有关的选项\n  },\n  html: {\n    // 与 HTML 生成有关的选项\n  },\n  tools: {\n    // 与底层工具有关的选项\n  },\n  output: {\n    // 与构建产物有关的选项\n  },\n  resolve: {\n    // 与模块解析相关的选项\n  },\n  source: {\n    // 与输入的源代码相关的选项\n  },\n  server: {\n    // 与 Rsbuild 服务器有关的选项\n    // 在本地开发和预览时都会生效\n  },\n  security: {\n    // 与 Web 安全有关的选项\n  },\n  performance: {\n    // 与构建性能、运行时性能有关的选项\n  },\n  moduleFederation: {\n    // 与模块联邦有关的选项\n  },\n  environments: {\n    // 为每个环境定义不同的 Rsbuild 配置\n  },\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:["你可以在 ",(0,i.jsx)(n.a,{href:"/config/",children:"Config 总览"})," 页面找到所有配置项的详细说明。"]}),"\n",(0,i.jsxs)(n.h2,{id:"配置文件",children:["配置文件",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#配置文件",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"当你使用 Rsbuild 的 CLI 命令时，Rsbuild 会自动读取当前项目根目录下的配置文件，按照以下顺序进行解析："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"rsbuild.config.mjs"}),"\n",(0,i.jsx)(n.li,{children:"rsbuild.config.ts"}),"\n",(0,i.jsx)(n.li,{children:"rsbuild.config.js"}),"\n",(0,i.jsx)(n.li,{children:"rsbuild.config.cjs"}),"\n",(0,i.jsx)(n.li,{children:"rsbuild.config.mts"}),"\n",(0,i.jsx)(n.li,{children:"rsbuild.config.cts"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["我们推荐使用 ",(0,i.jsx)(n.code,{children:".mjs"})," 或 ",(0,i.jsx)(n.code,{children:".ts"})," 格式的配置文件，并从 ",(0,i.jsx)(n.code,{children:"@rsbuild/core"})," 中导入 ",(0,i.jsx)(n.code,{children:"defineConfig"})," 工具函数, 它提供了友好的 TypeScript 类型推导和自动补全，可以帮助你避免配置中的错误。"]}),"\n",(0,i.jsxs)(n.p,{children:["比如在 ",(0,i.jsx)(n.code,{children:"rsbuild.config.ts"})," 中，你可以定义 Rsbuild 的 ",(0,i.jsx)(n.a,{href:"/config/resolve/alias",children:"resolve.alias"})," 配置："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",meta:'title="rsbuild.config.ts"',children:"import { defineConfig } from '@rsbuild/core';\n\nexport default defineConfig({\n  resolve: {\n    alias: {\n      '@common': './src/common',\n    },\n  },\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:["如果你在开发一个非 TypeScript 项目，可以使用 ",(0,i.jsx)(n.code,{children:".mjs"})," 格式的配置文件："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",meta:'title="rsbuild.config.mjs"',children:"import { defineConfig } from '@rsbuild/core';\n\nexport default defineConfig({\n  resolve: {\n    alias: (opts) => {\n      opts['@common'] = './src/common';\n    },\n  },\n});\n"})}),"\n",(0,i.jsxs)(n.div,{className:"rspress-directive tip",children:[(0,i.jsx)(n.div,{className:"rspress-directive-title",children:"TIP"}),(0,i.jsx)(n.div,{className:"rspress-directive-content",children:(0,i.jsxs)(n.p,{children:["当你使用 ",(0,i.jsx)(n.code,{children:".ts"}),", ",(0,i.jsx)(n.code,{children:".mts"})," 和 ",(0,i.jsx)(n.code,{children:".cts"})," 后缀时，Rsbuild 会使用 ",(0,i.jsx)(n.a,{href:"https://github.com/unjs/jiti",target:"_blank",rel:"noopener noreferrer",children:"jiti"})," 来加载配置文件，提供 ESM 与 CommonJS 的互操作性，模块解析的行为与 Node.js 原生行为存在一定差异。\n"]})})]}),"\n",(0,i.jsxs)(n.h2,{id:"指定配置文件",children:["指定配置文件",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#指定配置文件",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["Rsbuild CLI 通过 ",(0,i.jsx)(n.code,{children:"--config"})," 选项来指定配置文件，可以设置为相对路径或绝对路径。"]}),"\n",(0,i.jsxs)(n.p,{children:["例如，你需要在执行 ",(0,i.jsx)(n.code,{children:"build"})," 命令时使用 ",(0,i.jsx)(n.code,{children:"rsbuild.prod.config.mjs"})," 文件，可以在 ",(0,i.jsx)(n.code,{children:"package.json"})," 中添加如下配置："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",meta:'title="package.json"',children:'{\n  "scripts": {\n    "build": "rsbuild build --config rsbuild.prod.config.mjs"\n  }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["你也可以将 ",(0,i.jsx)(n.code,{children:"--config"})," 选项缩写为 ",(0,i.jsx)(n.code,{children:"-c"}),"："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"rsbuild build -c rsbuild.prod.config.mjs\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"使用环境变量",children:["使用环境变量",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用环境变量",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["在配置文件中，你可以使用 ",(0,i.jsx)(n.code,{children:"process.env.NODE_ENV"})," 等 Node.js 环境变量，来动态写入不同的配置："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",meta:'title="rsbuild.config.ts"',children:"import { defineConfig } from '@rsbuild/core';\n\nexport default defineConfig({\n  resolve: {\n    alias: {\n      '@request':\n        process.env.NODE_ENV === 'development'\n          ? './src/request.dev.js'\n          : './src/request.prod.js',\n    },\n  },\n});\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"导出配置函数",children:["导出配置函数",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#导出配置函数",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Rsbuild 支持在配置文件中导出一个函数，你可以在函数中动态计算配置，并返回给 Rsbuild。"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",meta:'title="rsbuild.config.js"',children:"import { defineConfig } from '@rsbuild/core';\n\nexport default defineConfig(({ env, command, envMode }) => ({\n  resolve: {\n    alias: {\n      '@foo': env === 'development' ? './src/foo.dev.ts' : './src/foo.prod.ts',\n    },\n  },\n}));\n"})}),"\n",(0,i.jsxs)(n.div,{className:"rspress-directive tip",children:[(0,i.jsx)(n.div,{className:"rspress-directive-title",children:"TIP"}),(0,i.jsx)(n.div,{className:"rspress-directive-content",children:(0,i.jsx)(n.p,{children:"导出的配置函数必须提供一个返回值，如果你不需要返回任何配置，可以 return 一个空对象。"})})]}),"\n",(0,i.jsx)(n.p,{children:"该函数接受以下入参："}),"\n",(0,i.jsxs)(n.h3,{id:"env",children:["env",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#env",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"类型："})," ",(0,i.jsx)(n.code,{children:"string"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"默认值："})," ",(0,i.jsx)(n.code,{children:"process.env.NODE_ENV"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"当前运行的环境。"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["运行 ",(0,i.jsx)(n.code,{children:"rsbuild dev"})," 时，env 的默认值为 ",(0,i.jsx)(n.code,{children:"development"}),"。"]}),"\n",(0,i.jsxs)(n.li,{children:["运行 ",(0,i.jsx)(n.code,{children:"rsbuild build"})," 或 ",(0,i.jsx)(n.code,{children:"rsbuild preview"})," 时，env 的默认值为 ",(0,i.jsx)(n.code,{children:"production"}),"。"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"envmode",children:["envMode",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#envmode",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"类型："})," ",(0,i.jsx)(n.code,{children:"string"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"默认值："})," ",(0,i.jsx)(n.code,{children:"process.env.NODE_ENV"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["CLI 参数 ",(0,i.jsx)(n.code,{children:"--env-mode"})," 当前的值。"]}),"\n",(0,i.jsxs)(n.p,{children:["比如，当运行 ",(0,i.jsx)(n.code,{children:"rsbuild build --env-mode test"})," 时，",(0,i.jsx)(n.code,{children:"envMode"})," 的值为 ",(0,i.jsx)(n.code,{children:"test"}),"。"]}),"\n",(0,i.jsxs)(n.h3,{id:"command",children:["command",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#command",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"类型："})," ",(0,i.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["当前运行的 CLI 命令，如 ",(0,i.jsx)(n.code,{children:"dev"}),"、",(0,i.jsx)(n.code,{children:"build"}),"、",(0,i.jsx)(n.code,{children:"preview"}),"。"]}),"\n",(0,i.jsxs)(n.h2,{id:"导出异步函数",children:["导出异步函数",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#导出异步函数",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Rsbuild 也支持在配置文件中导出一个异步函数，你可以在函数中进行一些异步操作："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",meta:'title="rsbuild.config.js"',children:"import { defineConfig } from '@rsbuild/core';\n\nexport default defineConfig(async ({ env, command }) => {\n  const result = await someAsyncFunction();\n\n  return {\n    html: {\n      title: result,\n    },\n  };\n});\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"合并配置",children:["合并配置",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#合并配置",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["你可以使用 ",(0,i.jsx)(n.code,{children:"@rsbuild/core"})," 导出的 ",(0,i.jsx)(n.a,{href:"/api/javascript-api/core#mergersbuildconfig",children:"mergeRsbuildConfig"})," 函数来合并多个配置。"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",meta:'title="rsbuild.config.ts"',children:"import { defineConfig, mergeRsbuildConfig } from '@rsbuild/core';\n\nconst config1 = defineConfig({\n  dev: { port: '3000' },\n});\nconst config2 = defineConfig({\n  dev: { port: '3001' },\n});\n\n// { dev: { port: '3001' }\nexport default mergeRsbuildConfig(config1, config2);\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"调试配置",children:["调试配置",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#调试配置",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["在执行构建时，你可以添加 ",(0,i.jsx)(n.code,{children:"DEBUG=rsbuild"})," 环境变量来开启 Rsbuild 的调试模式。"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"DEBUG=rsbuild pnpm dev\n"})}),"\n",(0,i.jsx)(n.p,{children:"在调试模式下，Rsbuild 会将内部最终生成的 Rsbuild 配置写入到产物目录下，便于开发者查看和调试。"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Inspect config succeed, open following files to view the content:\n\n  - Rsbuild Config: /Project/demo/dist/.rsbuild/rsbuild.config.mjs\n  - Rspack Config (web): /Project/demo/dist/.rsbuild/rspack.config.web.mjs\n"})}),"\n",(0,i.jsxs)(n.p,{children:["打开生成的 ",(0,i.jsx)(n.code,{children:"/dist/.rsbuild/rsbuild.config.mjs"})," 文件，即可查看 Rsbuild 配置的完整内容。"]}),"\n",(0,i.jsxs)(n.p,{children:["关于调试模式的完整介绍，请查看 ",(0,i.jsx)(n.a,{href:"/guide/debug/debug-mode",children:"开启调试模式"})," 章节。"]})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(r,{...e})}):r(e)}let l=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["zh%2Fguide%2Fbasic%2Fconfigure-rsbuild.mdx"]={toc:[{text:"配置结构",id:"配置结构",depth:2},{text:"配置文件",id:"配置文件",depth:2},{text:"指定配置文件",id:"指定配置文件",depth:2},{text:"使用环境变量",id:"使用环境变量",depth:2},{text:"导出配置函数",id:"导出配置函数",depth:2},{text:"env",id:"env",depth:3},{text:"envMode",id:"envmode",depth:3},{text:"command",id:"command",depth:3},{text:"导出异步函数",id:"导出异步函数",depth:2},{text:"合并配置",id:"合并配置",depth:2},{text:"调试配置",id:"调试配置",depth:2}],title:"配置 Rsbuild",frontmatter:{}}}}]);