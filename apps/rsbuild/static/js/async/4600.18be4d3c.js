"use strict";(self.webpackChunkrsbuild_website=self.webpackChunkrsbuild_website||[]).push([["4600"],{75604:function(n,e,i){i.r(e),i.d(e,{default:()=>E});var r=i("55367"),s=i("26971"),o=i("86697"),l=i("46607"),d=i("15730");function c(n){let e=Object.assign({p:"p",code:"code",a:"a",ul:"ul",li:"li",strong:"strong",pre:"pre"},(0,s.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"onBeforeEnvironmentCompile"})," 是在执行单个 environment 的构建前触发的回调函数。"]}),"\n",(0,r.jsxs)(e.p,{children:["你可以通过 ",(0,r.jsx)(e.code,{children:"bundlerConfig"})," 参数获取到当前 environment 对应的 ",(0,r.jsx)(e.a,{href:"https://rspack.dev/config/",target:"_blank",rel:"noopener noreferrer",children:"Rspack 配置"}),"。"]}),"\n",(0,r.jsxs)(e.p,{children:["另外，你可以通过 ",(0,r.jsx)(e.code,{children:"isWatch"})," 判断是否是 dev 或者 build watch 模式，并在 watch 模式下通过 ",(0,r.jsx)(e.code,{children:"isFirstCompile"})," 来判断是否为首次构建。"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"类型："})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"function OnBeforeEnvironmentCompile(\n  callback: (params: {\n    isWatch: boolean;\n    isFirstCompile: boolean;\n    bundlerConfig?: Rspack.Configuration;\n    environment: EnvironmentContext;\n  }) => Promise<void> | void,\n): void;\n"})})]})}function h(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(c,{...n})}):c(n)}function a(n){let e=Object.assign({p:"p",code:"code",a:"a",ul:"ul",li:"li",strong:"strong",pre:"pre"},(0,s.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"onAfterEnvironmentCompile"})," 是在执行单个 environment 的构建后触发的回调函数，你可以通过 ",(0,r.jsx)(e.a,{href:"https://rspack.dev/api/javascript-api/stats",target:"_blank",rel:"noopener noreferrer",children:"stats"})," 参数获取到构建结果信息。"]}),"\n",(0,r.jsxs)(e.p,{children:["另外，你可以通过 ",(0,r.jsx)(e.code,{children:"isWatch"})," 判断是否是 dev 或者 build watch 模式，并通过 ",(0,r.jsx)(e.code,{children:"isFirstCompile"})," 来判断是否为首次构建。"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"类型："})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"function OnAfterEnvironmentCompile(\n  callback: (params: {\n    isFirstCompile: boolean;\n    isWatch: boolean;\n    stats?: Stats;\n    environment: EnvironmentContext;\n  }) => Promise<void> | void,\n): void;\n"})})]})}function t(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(a,{...n})}):a(n)}h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["zh%2Fshared%2FonBeforeEnvironmentCompile.mdx"]={toc:[],title:"",frontmatter:{}};t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["zh%2Fshared%2FonAfterEnvironmentCompile.mdx"]={toc:[],title:"",frontmatter:{}};var x=i("68755"),f=i("38622"),m=i("1168"),j=i("10566"),p=i("9096"),u=i("89548"),g=i("16716"),v=i("94791"),b=i("89142"),C=i("33329");function k(n){let e=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",h3:"h3",ul:"ul",li:"li",code:"code",pre:"pre",div:"div",strong:"strong"},(0,s.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.h1,{id:"plugin-hooks",children:["Plugin Hooks",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#plugin-hooks",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"本章节介绍 Rsbuild 插件可用的 plugin hooks。"}),"\n",(0,r.jsxs)(e.h2,{id:"总览",children:["总览",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总览",children:"#"})]}),"\n",(0,r.jsxs)(e.h3,{id:"common-hooks",children:["Common Hooks",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#common-hooks",children:"#"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"#modifyrsbuildconfig",children:"modifyRsbuildConfig"}),"：修改传递给 Rsbuild 的配置。"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"#modifyenvironmentconfig",children:"modifyEnvironmentConfig"}),": 修改特定 environment 的 Rsbuild 配置。"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"#modifyrspackconfig",children:"modifyRspackConfig"}),"：修改传递给 Rspack 的配置。"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"#modifybundlerchain",children:"modifyBundlerChain"}),"：通过 chain API 修改 Rspack 的配置。"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"#modifyhtmltags",children:"modifyHTMLTags"}),"：修改注入到 HTML 中的标签。"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"#onbeforecreatecompiler",children:"onBeforeCreateCompiler"}),"：在创建 compiler 实例前调用。"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"#onaftercreatecompiler",children:"onAfterCreateCompiler"}),"：在创建 compiler 实例后、执行构建前调用。"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"#onbeforeenvironmentcompile",children:"onBeforeEnvironmentCompile"}),": 在每次执行单个 environment 的构建前调用。"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"#onafterenvironmentcompile",children:"onAfterEnvironmentCompile"}),": 在每次单个 environment 的构建结束后调用。"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"#onexit",children:"onExit"}),"：在进程即将退出时调用。"]}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"dev-hooks",children:["Dev Hooks",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#dev-hooks",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["仅在执行 ",(0,r.jsx)(e.code,{children:"rsbuild dev"})," 命令或 ",(0,r.jsx)(e.code,{children:"rsbuild.startDevServer()"})," 方法时调用。"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"#onbeforestartdevserver",children:"onBeforeStartDevServer"}),"：在启动开发服务器前调用。"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"#onafterstartdevserver",children:"onAfterStartDevServer"}),"：在启动开发服务器后调用。"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"#ondevcompiledone",children:"onDevCompileDone"}),"：在每次开发模式构建结束后调用。"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["仅在 Rsbuild restart 时，或是执行 ",(0,r.jsx)(e.code,{children:"rsbuild.startDevServer()"})," 的 ",(0,r.jsx)(e.code,{children:"close()"})," 方法时调用。"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"#onclosedevserver",children:"onCloseDevServer"}),"：在关闭开发服务器时调用。"]}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"build-hooks",children:["Build Hooks",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#build-hooks",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["仅在执行 ",(0,r.jsx)(e.code,{children:"rsbuild build"})," 命令或 ",(0,r.jsx)(e.code,{children:"rsbuild.build()"})," 方法时调用。"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"#onbeforebuild",children:"onBeforeBuild"}),"：在执行生产模式构建前调用。"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"#onafterbuild",children:"onAfterBuild"}),"：在执行生产模式构建后调用，可以获取到构建结果信息。"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["仅在 Rsbuild restart 时，或是执行 ",(0,r.jsx)(e.code,{children:"rsbuild.build()"})," 的 ",(0,r.jsx)(e.code,{children:"close()"})," 方法时调用。"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"#onclosebuild",children:"onCloseBuild"}),"：在关闭构建时调用。"]}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"preview-hooks",children:["Preview Hooks",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#preview-hooks",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["仅在执行 ",(0,r.jsx)(e.code,{children:"rsbuild preview"})," 命令或 ",(0,r.jsx)(e.code,{children:"rsbuild.preview()"})," 方法时调用。"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"#onbeforestartprodserver",children:"onBeforeStartProdServer"}),"：在启动生产服务器前调用。"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"#onafterstartprodserver",children:"onAfterStartProdServer"}),"：在启动生产服务器后调用。"]}),"\n"]}),"\n",(0,r.jsxs)(e.h2,{id:"hooks-顺序",children:["Hooks 顺序",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#hooks-顺序",children:"#"})]}),"\n",(0,r.jsxs)(e.h3,{id:"dev-hooks-1",children:["Dev Hooks",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#dev-hooks-1",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["执行 ",(0,r.jsx)(e.code,{children:"rsbuild dev"})," 命令或 ",(0,r.jsx)(e.code,{children:"rsbuild.startDevServer()"})," 方法时，Rsbuild 会依次执行以下 hooks："]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#modifyrsbuildconfig",children:"modifyRsbuildConfig"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#modifyenvironmentconfig",children:"modifyEnvironmentConfig"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#onbeforestartdevserver",children:"onBeforeStartDevServer"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#modifybundlerchain",children:"modifyBundlerChain"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#modifyrspackconfig",children:"modifyRspackConfig"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#onbeforecreatecompiler",children:"onBeforeCreateCompiler"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#onaftercreatecompiler",children:"onAfterCreateCompiler"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#onbeforeenvironmentcompile",children:"onBeforeEnvironmentCompile"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#onafterstartdevserver",children:"onAfterStartDevServer"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#modifyhtmltags",children:"modifyHTMLTags"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#onafterenvironmentcompile",children:"onAfterEnvironmentCompile"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#ondevcompiledone",children:"onDevCompileDone"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#onclosedevserver",children:"onCloseDevServer"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#onexit",children:"onExit"})}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"当 rebuild 时，以下 hooks 会再次触发："}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#onbeforeenvironmentcompile",children:"onBeforeEnvironmentCompile"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#modifyhtmltags",children:"modifyHTMLTags"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#onafterenvironmentcompile",children:"onAfterEnvironmentCompile"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#ondevcompiledone",children:"onDevCompileDone"})}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"build-hooks-1",children:["Build Hooks",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#build-hooks-1",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["执行 ",(0,r.jsx)(e.code,{children:"rsbuild build"})," 命令或 ",(0,r.jsx)(e.code,{children:"rsbuild.build()"})," 方法时，Rsbuild 会依次执行以下 hooks："]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#modifyrsbuildconfig",children:"modifyRsbuildConfig"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#modifyenvironmentconfig",children:"modifyEnvironmentConfig"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#modifybundlerchain",children:"modifyBundlerChain"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#modifyrspackconfig",children:"modifyRspackConfig"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#onbeforecreatecompiler",children:"onBeforeCreateCompiler"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#onaftercreatecompiler",children:"onAfterCreateCompiler"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#onbeforebuild",children:"onBeforeBuild"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#onbeforeenvironmentcompile",children:"onBeforeEnvironmentCompile"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#modifyhtmltags",children:"modifyHTMLTags"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#onafterenvironmentcompile",children:"onAfterEnvironmentCompile"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#onafterbuild",children:"onAfterBuild"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#onclosebuild",children:"onCloseBuild"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#onexit",children:"onExit"})}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"当 rebuild 时，以下 hooks 会再次触发："}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#onbeforebuild",children:"onBeforeBuild"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#onbeforeenvironmentcompile",children:"onBeforeEnvironmentCompile"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#modifyhtmltags",children:"modifyHTMLTags"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#onafterenvironmentcompile",children:"onAfterEnvironmentCompile"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#onafterbuild",children:"onAfterBuild"})}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"preview-hooks-1",children:["Preview Hooks",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#preview-hooks-1",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["执行 ",(0,r.jsx)(e.code,{children:"rsbuild preview"})," 命令或 ",(0,r.jsx)(e.code,{children:"rsbuild.preview()"})," 方法时，Rsbuild 会依次执行以下 hooks："]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#modifyrsbuildconfig",children:"modifyRsbuildConfig"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#modifyenvironmentconfig",children:"modifyEnvironmentConfig"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#onbeforestartprodserver",children:"onBeforeStartProdServer"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#onafterstartprodserver",children:"onAfterStartProdServer"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#onexit",children:"onExit"})}),"\n"]}),"\n",(0,r.jsxs)(e.h2,{id:"global-hooks-vs-environment-hooks",children:["Global Hooks vs Environment Hooks",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#global-hooks-vs-environment-hooks",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"在 Rsbuild 中，有一些插件 hooks 是全局 hooks，这些 hook 的执行往往和 Rsbuild 自身的启动流程或全局逻辑相关，在所有 environment 下共享。如："}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"modifyRsbuildConfig"})," 用来修改 Rsbuild 的基础配置，基础配置最终会和 environment 配置合并；"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"onBeforeStartDevServer"}),"、",(0,r.jsx)(e.code,{children:"onAfterStartDevServer"})," 和 Rsbuild dev server 启动流程相关，所有 environments 共享 Rsbuild 的 dev server、middlewares、Web Socket。"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"与之对应的，有一些插件 hooks 是和当前 environment 相关的 hook，这些 hook 执行时会带有特定的 environment 上下文，并根据 environment 的不同而触发多次。"}),"\n",(0,r.jsxs)(e.h3,{id:"global-hooks",children:["Global Hooks",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#global-hooks",children:"#"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#modifyrsbuildconfig",children:"modifyRsbuildConfig"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#onbeforestartdevserver",children:"onBeforeStartDevServer"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#onbeforecreatecompiler",children:"onBeforeCreateCompiler"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#onaftercreatecompiler",children:"onAfterCreateCompiler"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#onafterstartdevserver",children:"onAfterStartDevServer"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#ondevcompiledone",children:"onDevCompileDone"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#onclosedevserver",children:"onCloseDevServer"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#onbeforebuild",children:"onBeforeBuild"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#onafterbuild",children:"onAfterBuild"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#onclosebuild",children:"onCloseBuild"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#onbeforestartprodserver",children:"onBeforeStartProdServer"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#onafterstartprodserver",children:"onAfterStartProdServer"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#onexit",children:"onExit"})}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"environment-hooks",children:["Environment Hooks",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#environment-hooks",children:"#"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#modifyenvironmentconfig",children:"modifyEnvironmentConfig"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#modifybundlerchain",children:"modifyBundlerChain"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#modifyrspackconfig",children:"modifyRspackConfig"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#modifyhtmltags",children:"modifyHTMLTags"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#onbeforeenvironmentcompile",children:"onBeforeEnvironmentCompile"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#onafterenvironmentcompile",children:"onAfterEnvironmentCompile"})}),"\n"]}),"\n",(0,r.jsxs)(e.h2,{id:"回调函数顺序",children:["回调函数顺序",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#回调函数顺序",children:"#"})]}),"\n",(0,r.jsxs)(e.h3,{id:"默认行为",children:["默认行为",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#默认行为",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"如果多个插件注册了相同的 hook，那么 hook 的回调函数会按照注册时的顺序执行。"}),"\n",(0,r.jsxs)(e.p,{children:["在以下例子中，控制台会依次输出 ",(0,r.jsx)(e.code,{children:"'1'"})," 和 ",(0,r.jsx)(e.code,{children:"'2'"}),"："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"const plugin1 = () => ({\n  setup: (api) => {\n    api.modifyRsbuildConfig(() => console.log('1'));\n  },\n});\n\nconst plugin2 = () => ({\n  setup: (api) => {\n    api.modifyRsbuildConfig(() => console.log('2'));\n  },\n});\n\nrsbuild.addPlugins([plugin1, plugin2]);\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"order-字段",children:["order 字段",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#order-字段",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["在注册 hook 时，可以通过 ",(0,r.jsx)(e.code,{children:"order"})," 字段来声明 hook 的顺序。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"type HookDescriptor<T extends (...args: any[]) => any> = {\n  handler: T;\n  order: 'pre' | 'post' | 'default';\n};\n"})}),"\n",(0,r.jsxs)(e.p,{children:["在以下例子中，控制台会依次输出 ",(0,r.jsx)(e.code,{children:"'2'"})," 和 ",(0,r.jsx)(e.code,{children:"'1'"}),"，因为 plugin2 在调用 modifyRsbuildConfig 时设置了 order 为 ",(0,r.jsx)(e.code,{children:"pre"}),"。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"const plugin1 = () => ({\n  setup: (api) => {\n    api.modifyRsbuildConfig(() => console.log('1'));\n  },\n});\n\nconst plugin2 = () => ({\n  setup: (api) => {\n    api.modifyRsbuildConfig({\n      handler: () => console.log('2'),\n      order: 'pre',\n    });\n  },\n});\n\nrsbuild.addPlugins([plugin1, plugin2]);\n"})}),"\n",(0,r.jsxs)(e.h2,{id:"common-hooks-1",children:["Common Hooks",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#common-hooks-1",children:"#"})]}),"\n",(0,r.jsxs)(e.h3,{id:"modifyrsbuildconfig",children:["modifyRsbuildConfig",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#modifyrsbuildconfig",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"修改传递给 Rsbuild 的配置项，你可以直接修改传入的 config 对象，也可以返回一个新的对象来替换传入的对象。"}),"\n",(0,r.jsxs)(e.div,{className:"rspress-directive warning",children:[(0,r.jsx)(e.div,{className:"rspress-directive-title",children:"WARNING"}),(0,r.jsx)(e.div,{className:"rspress-directive-content",children:(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"modifyRsbuildConfig"})," 为全局 hook。如果你希望你开发的插件支持",(0,r.jsx)(e.a,{href:"/guide/advanced/environments#%E4%B8%BA%E6%8C%87%E5%AE%9A%E7%8E%AF%E5%A2%83%E6%B7%BB%E5%8A%A0%E6%8F%92%E4%BB%B6",children:"仅在特定的 environment 下生效"}),"，应避免使用 ",(0,r.jsx)(e.code,{children:"modifyRsbuildConfig"}),"，可使用 ",(0,r.jsx)(e.a,{href:"/plugins/dev/hooks#modifyenvironmentconfig",children:"modifyEnvironmentConfig"})," 代替。\n"]})})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"类型："})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"type ModifyRsbuildConfigUtils = {\n  mergeRsbuildConfig: typeof mergeRsbuildConfig;\n};\n\nfunction ModifyRsbuildConfig(\n  callback: (\n    config: RsbuildConfig,\n    utils: ModifyRsbuildConfigUtils,\n  ) => MaybePromise<RsbuildConfig | void>,\n): void;\n"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"示例："})," 为某个配置项设置一个默认值："]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"const myPlugin = () => ({\n  setup: (api) => {\n    api.modifyRsbuildConfig((config) => {\n      config.html ||= {};\n      config.html.title = 'My Default Title';\n    });\n  },\n});\n"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"示例："})," 通过 ",(0,r.jsx)(e.code,{children:"mergeRsbuildConfig"})," 合并配置多个对象，并返回合并后的对象。"]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"import type { RsbuildConfig } from '@rsbuild/core';\n\nconst myPlugin = () => ({\n  setup: (api) => {\n    api.modifyRsbuildConfig((userConfig, { mergeRsbuildConfig }) => {\n      const extraConfig: RsbuildConfig = {\n        source: {\n          // ...\n        },\n        output: {\n          // ...\n        },\n      };\n\n      // extraConfig 会覆盖 userConfig 里的字段，\n      // 如果你不希望覆盖 userConfig，可以调整为 `mergeRsbuildConfig(extraConfig, userConfig)`\n      return mergeRsbuildConfig(userConfig, extraConfig);\n    });\n  },\n});\n"})}),"\n",(0,r.jsxs)(e.div,{className:"rspress-directive tip",children:[(0,r.jsx)(e.div,{className:"rspress-directive-title",children:"TIP"}),(0,r.jsx)(e.div,{className:"rspress-directive-content",children:(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"modifyRsbuildConfig"})," 不能用于注册额外的 Rsbuild 插件。这是因为在执行 ",(0,r.jsx)(e.code,{children:"modifyRsbuildConfig"})," 时，Rsbuild 已经初始化了所有插件，并开始执行 hooks 的回调函数。详情可参考 ",(0,r.jsx)(e.a,{href:"/config/plugins#%E6%8F%92%E4%BB%B6%E6%B3%A8%E5%86%8C%E6%97%B6%E6%9C%BA",children:"插件注册时机"}),"。\n"]})})]}),"\n",(0,r.jsxs)(e.h3,{id:"modifyenvironmentconfig",children:["modifyEnvironmentConfig",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#modifyenvironmentconfig",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"修改特定 environment 的 Rsbuild 配置。"}),"\n",(0,r.jsx)(e.p,{children:"在回调函数中，入参里的 config 对象已经合并了公共的 Rsbuild 配置，你可以直接修改这个 config 对象，也可以返回一个新的对象来替换它。"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"类型："})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"type ArrayAtLeastOne<A, B> = [A, ...Array<A | B>] | [...Array<A | B>, A];\n\ntype ModifyEnvironmentConfigUtils = {\n  /** 当前 environment 名称 */\n  name: string;\n  mergeEnvironmentConfig: (\n    ...configs: ArrayAtLeastOne<MergedEnvironmentConfig, EnvironmentConfig>\n  ) => EnvironmentConfig;\n};\n\nfunction ModifyEnvironmentConfig(\n  callback: (\n    config: EnvironmentConfig,\n    utils: ModifyEnvironmentConfigUtils,\n  ) => MaybePromise<EnvironmentConfig | void>,\n): void;\n"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"示例："})," 为指定 environment 的 Rsbuild config 设置一个默认值："]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"const myPlugin = () => ({\n  setup: (api) => {\n    api.modifyEnvironmentConfig((config, { name }) => {\n      if (name !== 'web') {\n        return config;\n      }\n      config.html.title = 'My Default Title';\n    });\n  },\n});\n"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"示例："})," 通过 ",(0,r.jsx)(e.code,{children:"mergeEnvironmentConfig"})," 合并配置多个对象，并返回合并后的对象。"]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"import type { EnvironmentConfig } from '@rsbuild/core';\n\nconst myPlugin = () => ({\n  setup: (api) => {\n    api.modifyEnvironmentConfig((userConfig, { mergeEnvironmentConfig }) => {\n      const extraConfig: EnvironmentConfig = {\n        source: {\n          // ...\n        },\n        output: {\n          // ...\n        },\n      };\n\n      // extraConfig 会覆盖 userConfig 里的字段\n      // 如果你不希望覆盖 userConfig，可以调整为 `mergeEnvironmentConfig(extraConfig, userConfig)`\n      return mergeEnvironmentConfig(userConfig, extraConfig);\n    });\n  },\n});\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"modifyrspackconfig",children:["modifyRspackConfig",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#modifyrspackconfig",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"修改 Rspack 配置，你可以直接修改传入的 config 对象，也可以返回一个新的对象来替换传入的对象。"}),"\n",(0,r.jsxs)(e.div,{className:"rspress-directive tip",children:[(0,r.jsx)(e.div,{className:"rspress-directive-title",children:"TIP"}),(0,r.jsx)(e.div,{className:"rspress-directive-content",children:(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"modifyRspackConfig"})," 的执行时机早于 ",(0,r.jsx)(e.a,{href:"/config/tools/rspack",children:"tools.rspack"}),"。因此，无法在 ",(0,r.jsx)(e.code,{children:"modifyRspackConfig"})," 中获取到 ",(0,r.jsx)(e.code,{children:"tools.rspack"})," 所做的修改。\n"]})})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"类型："})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"type ModifyRspackConfigUtils = {\n  environment: EnvironmentContext;\n  env: string;\n  isDev: boolean;\n  isProd: boolean;\n  target: RsbuildTarget;\n  isServer: boolean;\n  isWebWorker: boolean;\n  rspack: Rspack;\n};\n\nfunction ModifyRspackConfig(\n  callback: (\n    config: Rspack.Configuration,\n    utils: ModifyRspackConfigUtils,\n  ) => Promise<RspackConfig | void> | Rspack.Configuration | void,\n): void;\n"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"示例："})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"const myPlugin = () => ({\n  setup: (api) => {\n    api.modifyRspackConfig((config, utils) => {\n      if (utils.env === 'development') {\n        config.devtool = 'eval-cheap-source-map';\n      }\n    });\n  },\n});\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"modifybundlerchain",children:["modifyBundlerChain",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#modifybundlerchain",children:"#"})]}),"\n","\n",(0,r.jsx)(o.Z,{}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"modifyBundlerChain"})," 用于调用 rspack-chain 来修改 Rspack 的配置，它的用法与 ",(0,r.jsx)(e.a,{href:"/config/tools/bundler-chain",children:"tools.bundlerChain"})," 相同。"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"类型："})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"type ModifyBundlerChainUtils = {\n  environment: EnvironmentContext;\n  env: string;\n  isDev: boolean;\n  isProd: boolean;\n  target: RsbuildTarget;\n  isServer: boolean;\n  isWebWorker: boolean;\n  CHAIN_ID: ChainIdentifier;\n  HtmlPlugin: typeof import('html-rspack-plugin');\n  bundler: {\n    BannerPlugin: rspack.BannerPlugin;\n    DefinePlugin: rspack.DefinePlugin;\n    IgnorePlugin: rspack.IgnorePlugin;\n    ProvidePlugin: rspack.ProvidePlugin;\n    HotModuleReplacementPlugin: rspack.HotModuleReplacementPlugin;\n  };\n};\n\nfunction ModifyBundlerChain(\n  callback: (\n    chain: RspackChain,\n    utils: ModifyBundlerChainUtils,\n  ) => Promise<void> | void,\n): void;\n"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"示例："})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"import { BundleAnalyzerPlugin } from 'webpack-bundle-analyzer';\n\nconst myPlugin = () => ({\n  setup: (api) => {\n    api.modifyBundlerChain((chain, utils) => {\n      if (utils.env === 'development') {\n        chain.devtool('eval');\n      }\n\n      chain.plugin('bundle-analyze').use(BundleAnalyzerPlugin);\n    });\n  },\n});\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"modifyhtmltags",children:["modifyHTMLTags",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#modifyhtmltags",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"修改注入到 HTML 中的标签。"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"类型："})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"type HtmlBasicTag = {\n  // 标签名\n  tag: string;\n  // 标签的属性\n  attrs?: Record<string, string | boolean | null | undefined>;\n  // 标签的 innerHTML\n  children?: string;\n};\n\ntype HTMLTags = {\n  // 插入到 <head> 的标签组\n  headTags: HtmlBasicTag[];\n  // 插入到 <body> 的标签组\n  bodyTags: HtmlBasicTag[];\n};\n\ntype Context = {\n  /**\n   * Rspack 的 Compiler 对象\n   */\n  compiler: Rspack.Compiler;\n  /**\n   * Rspack 的 Compilation 对象\n   */\n  compilation: Rspack.Compilation;\n  /**\n   * 静态资源的 URL 前缀\n   * @example 'https://example.com/'\n   */\n  assetPrefix: string;\n  /**\n   * HTML 文件的名称，相对于 dist 目录\n   * @example 'index.html'\n   */\n  filename: string;\n  /**\n   * 当前构建的 environment 上下文\n   */\n  environment: EnvironmentContext;\n};\n\nfunction ModifyHTMLTags(\n  callback: (tags: HTMLTags, context: Context) => MaybePromise<HTMLTags>,\n): void;\n"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"示例："})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"const myPlugin = () => ({\n  setup: (api) => {\n    api.modifyHTMLTags(({ headTags, bodyTags }) => {\n      headTags.push({\n        tag: 'script',\n        attrs: { src: 'https://example.com/foo.js' },\n      });\n      bodyTags.push({\n        tag: 'script',\n        children: 'console.log(\"hello world!\");',\n      });\n\n      return { headTags, bodyTags };\n    });\n  },\n});\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"onbeforecreatecompiler",children:["onBeforeCreateCompiler",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#onbeforecreatecompiler",children:"#"})]}),"\n","\n",(0,r.jsx)(l.Z,{}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"示例："})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"const myPlugin = () => ({\n  setup: (api) => {\n    api.onBeforeCreateCompiler(({ bundlerConfigs }) => {\n      console.log('the bundler config is ', bundlerConfigs);\n    });\n  },\n});\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"onaftercreatecompiler",children:["onAfterCreateCompiler",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#onaftercreatecompiler",children:"#"})]}),"\n","\n",(0,r.jsx)(d.Z,{}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"示例："})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"const myPlugin = () => ({\n  setup: (api) => {\n    api.onAfterCreateCompiler(({ compiler }) => {\n      console.log('the compiler is ', compiler);\n    });\n  },\n});\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"onbeforeenvironmentcompile",children:["onBeforeEnvironmentCompile",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#onbeforeenvironmentcompile",children:"#"})]}),"\n","\n",(0,r.jsx)(h,{}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"示例："})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"const myPlugin = () => ({\n  setup: (api) => {\n    api.onBeforeEnvironmentCompile(({ bundlerConfig, environment }) => {\n      console.log(\n        `the bundler config for the ${environment.name} is `,\n        bundlerConfig,\n      );\n    });\n  },\n});\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"onafterenvironmentcompile",children:["onAfterEnvironmentCompile",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#onafterenvironmentcompile",children:"#"})]}),"\n","\n",(0,r.jsx)(t,{}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"示例："})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"const myPlugin = () => ({\n  setup: (api) => {\n    api.onAfterEnvironmentCompile(({ isFirstCompile, stats }) => {\n      console.log(stats?.toJson(), isFirstCompile);\n    });\n  },\n});\n"})}),"\n",(0,r.jsxs)(e.h2,{id:"build-hooks-2",children:["Build Hooks",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#build-hooks-2",children:"#"})]}),"\n",(0,r.jsxs)(e.h3,{id:"onbeforebuild",children:["onBeforeBuild",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#onbeforebuild",children:"#"})]}),"\n","\n",(0,r.jsx)(x.Z,{}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"示例："})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"const myPlugin = () => ({\n  setup: (api) => {\n    api.onBeforeBuild(({ bundlerConfigs }) => {\n      console.log('the bundler config is ', bundlerConfigs);\n    });\n  },\n});\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"onafterbuild",children:["onAfterBuild",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#onafterbuild",children:"#"})]}),"\n","\n",(0,r.jsx)(f.Z,{}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"示例："})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"const myPlugin = () => ({\n  setup: (api) => {\n    api.onAfterBuild(({ isFirstCompile, stats }) => {\n      console.log(stats?.toJson(), isFirstCompile);\n    });\n  },\n});\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"onclosebuild",children:["onCloseBuild",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#onclosebuild",children:"#"})]}),"\n","\n",(0,r.jsx)(m.Z,{}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"示例："})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"const myPlugin = () => ({\n  setup: (api) => {\n    api.onCloseBuild(() => {\n      console.log('close build!');\n    });\n  },\n});\n"})}),"\n",(0,r.jsxs)(e.h2,{id:"dev-hooks-2",children:["Dev Hooks",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#dev-hooks-2",children:"#"})]}),"\n",(0,r.jsxs)(e.h3,{id:"onbeforestartdevserver",children:["onBeforeStartDevServer",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#onbeforestartdevserver",children:"#"})]}),"\n","\n",(0,r.jsx)(j.Z,{}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"示例："})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"const myPlugin = () => ({\n  setup: (api) => {\n    api.onBeforeStartDevServer(() => {\n      console.log('before start!');\n    });\n  },\n});\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"onafterstartdevserver",children:["onAfterStartDevServer",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#onafterstartdevserver",children:"#"})]}),"\n","\n",(0,r.jsx)(p.Z,{}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"示例："})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"const myPlugin = () => ({\n  setup: (api) => {\n    api.onAfterStartDevServer(({ port, routes }) => {\n      console.log('this port is: ', port);\n      console.log('this routes is: ', routes);\n    });\n  },\n});\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"onafterenvironmentcompile-1",children:["onAfterEnvironmentCompile",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#onafterenvironmentcompile-1",children:"#"})]}),"\n","\n",(0,r.jsx)(t,{}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"示例："})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"const myPlugin = () => ({\n  setup: (api) => {\n    api.onAfterEnvironmentCompile(({ isFirstCompile }) => {\n      if (isFirstCompile) {\n        console.log('first compile!');\n      } else {\n        console.log('re-compile!');\n      }\n    });\n  },\n});\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"ondevcompiledone",children:["onDevCompileDone",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#ondevcompiledone",children:"#"})]}),"\n","\n",(0,r.jsx)(u.Z,{}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"示例："})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"const myPlugin = () => ({\n  setup: (api) => {\n    api.onDevCompileDone(({ isFirstCompile }) => {\n      if (isFirstCompile) {\n        console.log('first compile!');\n      } else {\n        console.log('re-compile!');\n      }\n    });\n  },\n});\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"onclosedevserver",children:["onCloseDevServer",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#onclosedevserver",children:"#"})]}),"\n","\n",(0,r.jsx)(g.Z,{}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"示例："})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"rsbuild.onCloseDevServer(async () => {\n  console.log('close dev server!');\n});\n"})}),"\n",(0,r.jsxs)(e.h2,{id:"preview-hooks-2",children:["Preview Hooks",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#preview-hooks-2",children:"#"})]}),"\n",(0,r.jsxs)(e.h3,{id:"onbeforestartprodserver",children:["onBeforeStartProdServer",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#onbeforestartprodserver",children:"#"})]}),"\n","\n",(0,r.jsx)(v.Z,{}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"示例："})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"const myPlugin = () => ({\n  setup: (api) => {\n    api.onBeforeStartProdServer(() => {\n      console.log('before start!');\n    });\n  },\n});\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"onafterstartprodserver",children:["onAfterStartProdServer",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#onafterstartprodserver",children:"#"})]}),"\n","\n",(0,r.jsx)(b.Z,{}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"示例："})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"const myPlugin = () => ({\n  setup: (api) => {\n    api.onAfterStartProdServer(({ port, routes }) => {\n      console.log('this port is: ', port);\n      console.log('this routes is: ', routes);\n    });\n  },\n});\n"})}),"\n",(0,r.jsxs)(e.h2,{id:"other-hooks",children:["Other Hooks",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#other-hooks",children:"#"})]}),"\n",(0,r.jsxs)(e.h3,{id:"onexit",children:["onExit",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#onexit",children:"#"})]}),"\n","\n",(0,r.jsx)(C.Z,{}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"示例："})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"const myPlugin = () => ({\n  setup: (api) => {\n    api.onExit(() => {\n      console.log('exit!');\n    });\n  },\n});\n"})})]})}function y(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(k,{...n})}):k(n)}let E=y;y.__RSPRESS_PAGE_META={},y.__RSPRESS_PAGE_META["zh%2Fplugins%2Fdev%2Fhooks.mdx"]={toc:[{text:"总览",id:"总览",depth:2},{text:"Common Hooks",id:"common-hooks",depth:3},{text:"Dev Hooks",id:"dev-hooks",depth:3},{text:"Build Hooks",id:"build-hooks",depth:3},{text:"Preview Hooks",id:"preview-hooks",depth:3},{text:"Hooks 顺序",id:"hooks-顺序",depth:2},{text:"Dev Hooks",id:"dev-hooks-1",depth:3},{text:"Build Hooks",id:"build-hooks-1",depth:3},{text:"Preview Hooks",id:"preview-hooks-1",depth:3},{text:"Global Hooks vs Environment Hooks",id:"global-hooks-vs-environment-hooks",depth:2},{text:"Global Hooks",id:"global-hooks",depth:3},{text:"Environment Hooks",id:"environment-hooks",depth:3},{text:"回调函数顺序",id:"回调函数顺序",depth:2},{text:"默认行为",id:"默认行为",depth:3},{text:"order 字段",id:"order-字段",depth:3},{text:"Common Hooks",id:"common-hooks-1",depth:2},{text:"modifyRsbuildConfig",id:"modifyrsbuildconfig",depth:3},{text:"modifyEnvironmentConfig",id:"modifyenvironmentconfig",depth:3},{text:"modifyRspackConfig",id:"modifyrspackconfig",depth:3},{text:"modifyBundlerChain",id:"modifybundlerchain",depth:3},{text:"modifyHTMLTags",id:"modifyhtmltags",depth:3},{text:"onBeforeCreateCompiler",id:"onbeforecreatecompiler",depth:3},{text:"onAfterCreateCompiler",id:"onaftercreatecompiler",depth:3},{text:"onBeforeEnvironmentCompile",id:"onbeforeenvironmentcompile",depth:3},{text:"onAfterEnvironmentCompile",id:"onafterenvironmentcompile",depth:3},{text:"Build Hooks",id:"build-hooks-2",depth:2},{text:"onBeforeBuild",id:"onbeforebuild",depth:3},{text:"onAfterBuild",id:"onafterbuild",depth:3},{text:"onCloseBuild",id:"onclosebuild",depth:3},{text:"Dev Hooks",id:"dev-hooks-2",depth:2},{text:"onBeforeStartDevServer",id:"onbeforestartdevserver",depth:3},{text:"onAfterStartDevServer",id:"onafterstartdevserver",depth:3},{text:"onAfterEnvironmentCompile",id:"onafterenvironmentcompile-1",depth:3},{text:"onDevCompileDone",id:"ondevcompiledone",depth:3},{text:"onCloseDevServer",id:"onclosedevserver",depth:3},{text:"Preview Hooks",id:"preview-hooks-2",depth:2},{text:"onBeforeStartProdServer",id:"onbeforestartprodserver",depth:3},{text:"onAfterStartProdServer",id:"onafterstartprodserver",depth:3},{text:"Other Hooks",id:"other-hooks",depth:2},{text:"onExit",id:"onexit",depth:3}],title:"Plugin Hooks",frontmatter:{}}},86697:function(n,e,i){i.d(e,{Z:function(){return d}});var r=i(55367),s=i(26971);function o(n){let e=Object.assign({p:"p",a:"a",code:"code"},(0,s.ah)(),n.components);return(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"https://github.com/rspack-contrib/rspack-chain",target:"_blank",rel:"noopener noreferrer",children:"rspack-chain"})," 是一个用于配置 Rspack 的工具库。它提供了链式 API，使得配置 Rspack 变得更加灵活。通过使用 ",(0,r.jsx)(e.code,{children:"rspack-chain"}),"，你可以更方便地修改和扩展 Rspack 配置，而不需要直接操作复杂的配置对象。"]})}function l(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(o,{...n})}):o(n)}let d=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["zh%2Fshared%2FrspackChain.mdx"]={toc:[],title:"",frontmatter:{}}}}]);