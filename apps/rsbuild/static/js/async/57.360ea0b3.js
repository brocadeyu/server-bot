"use strict";(self.webpackChunkrsbuild_website=self.webpackChunkrsbuild_website||[]).push([["57"],{98129:function(e,n,s){s.r(n),s.d(n,{default:function(){return t}});var r=s(55367),i=s(26971);function a(e){let n=Object.assign({h1:"h1",a:"a",ul:"ul",li:"li",strong:"strong",pre:"pre",code:"code",p:"p",h2:"h2",h3:"h3",blockquote:"blockquote"},(0,i.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"devwatchfiles",children:["dev.watchFiles",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#devwatchfiles",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Type:"})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type WatchFiles = {\n  paths: string | string[];\n  type?: 'reload-page' | 'reload-server';\n  // watch options for chokidar\n  options?: ChokidarOptions;\n};\n\ntype WatchFilesConfig = WatchFiles | WatchFiles[];\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Default:"})," ",(0,r.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Watch specified files and directories for changes. When a file change is detected, it can trigger a page reload or restart the dev server."}),"\n",(0,r.jsxs)(n.h2,{id:"paths",children:["paths",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#paths",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Type:"})," ",(0,r.jsx)(n.code,{children:"string | string[]"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Default:"})," ",(0,r.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Paths of the files or directories to be watched, supports glob syntax. It can be a single path or an array of multiple paths."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Watching a single file:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"export default {\n  dev: {\n    watchFiles: {\n      paths: 'public/demo.txt',\n    },\n  },\n};\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Using glob to match multiple files:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"export default {\n  dev: {\n    watchFiles: {\n      paths: 'src/**/*.txt',\n    },\n  },\n};\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Watching multiple file paths:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"export default {\n  dev: {\n    watchFiles: {\n      paths: ['src/**/*.txt', 'public/**/*'],\n    },\n  },\n};\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"type",children:["type",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#type",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Type:"})," ",(0,r.jsx)(n.code,{children:"'reload-page' | 'reload-server'"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Default:"})," ",(0,r.jsx)(n.code,{children:"'reload-page'"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Specifies whether to trigger a page reload or restart the dev server when a file changes."}),"\n",(0,r.jsxs)(n.h3,{id:"reload-page",children:["reload-page",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#reload-page",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"reload-page"})," means that when a file changes, the page opened in the browser will automatically reload. If the type is not explicitly specified, Rsbuild will default to the ",(0,r.jsx)(n.code,{children:"reload-page"})," behavior."]}),"\n",(0,r.jsxs)(n.p,{children:["This can be used to watch changes to static assets, such as files in the ",(0,r.jsx)(n.code,{children:"public"})," directory."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"export default {\n  dev: {\n    watchFiles: {\n      type: 'reload-page',\n      paths: 'public/**/*',\n    },\n  },\n};\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["If both ",(0,r.jsx)(n.a,{href:"/config/dev/hmr",children:"dev.hmr"})," and ",(0,r.jsx)(n.a,{href:"/config/dev/live-reload",children:"dev.liveReload"})," are set to ",(0,r.jsx)(n.code,{children:"false"}),", the page will not automatically reload."]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"reload-server",children:["reload-server",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#reload-server",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"reload-server"})," means that the dev server will automatically restart when a file changes. This can be used to watch changes to configuration files, such as modules imported by the ",(0,r.jsx)(n.code,{children:"rsbuild.config.ts"})," file."]}),"\n",(0,r.jsxs)(n.p,{children:["For example, if you maintain some common configuration files in the ",(0,r.jsx)(n.code,{children:"config"})," directory, such as ",(0,r.jsx)(n.code,{children:"common.ts"}),", you want the dev server to automatically restart when these files change. Example configuration:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="rsbuild.config.ts"',children:"import { commonConfig } from './config/common';\n\nexport default {\n  ...commonConfig,\n  dev: {\n    watchFiles: {\n      type: 'reload-server',\n      paths: ['./config/*.ts'],\n    },\n  },\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"It should be noted that the reload-server functionality is provided by Rsbuild CLI. If you are using a custom server or an upper-layer framework based on the Rsbuild, this configuration is currently not supported."}),"\n",(0,r.jsxs)(n.h2,{id:"options",children:["options",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#options",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Type:"})," ",(0,r.jsx)(n.code,{children:"ChokidarOptions"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Default:"})," ",(0,r.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"watchFiles"})," is implemented based on ",(0,r.jsx)(n.a,{href:"https://github.com/paulmillr/chokidar#api",target:"_blank",rel:"noopener noreferrer",children:"chokidar v4"}),", and you can pass chokidar options through ",(0,r.jsx)(n.code,{children:"options"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"export default {\n  dev: {\n    watchFiles: {\n      paths: 'src/**/*.txt',\n      options: {\n        usePolling: false,\n      },\n    },\n  },\n};\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"notes",children:["Notes",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#notes",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"watchFiles"})," is not applicable for watching build dependency files. When an Rsbuild build starts, the underlying Rspack will automatically watches all build dependencies. Any changes to these files will trigger a new build."]}),"\n",(0,r.jsxs)(n.p,{children:["If you want to prevent some files from triggering a rebuild when they change, you can use Rspack's ",(0,r.jsx)(n.a,{href:"https://rspack.dev/config/watch#watchoptionsignored",target:"_blank",rel:"noopener noreferrer",children:"watchOptions.ignored"})," configuration item."]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["See ",(0,r.jsx)(n.a,{href:"/guide/advanced/hmr#file-watching",children:"HMR - File Watching"})," for more details."]}),"\n"]})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}let t=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["en%2Fconfig%2Fdev%2Fwatch-files.mdx"]={toc:[{text:"paths",id:"paths",depth:2},{text:"type",id:"type",depth:2},{text:"reload-page",id:"reload-page",depth:3},{text:"reload-server",id:"reload-server",depth:3},{text:"options",id:"options",depth:2},{text:"Notes",id:"notes",depth:2}],title:"dev.watchFiles",frontmatter:{}}}}]);