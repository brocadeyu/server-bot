"use strict";(self.webpackChunkrsbuild_website=self.webpackChunkrsbuild_website||[]).push([["5189"],{68007:function(e,n,r){r.r(n),r.d(n,{default:function(){return R}});var s=r(55367),i=r(26971),l=r(49881),d=r(46607),t=r(15730),c=r(68755),o=r(38622),a=r(1168),h=r(10566),u=r(9096),x=r(16716),p=r(94791),j=r(89142),g=r(89548),b=r(33329),m=r(82706),v=r(5409);function f(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",code:"code",h3:"h3",ul:"ul",li:"li",strong:"strong",pre:"pre",blockquote:"blockquote",ol:"ol"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"rsbuild-instance",children:["Rsbuild Instance",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rsbuild-instance",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"本章节描述了 Rsbuild 实例对象上所有的属性和方法。"}),"\n",(0,s.jsxs)(n.h2,{id:"rsbuildcontext",children:["rsbuild.context",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rsbuildcontext",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"rsbuild.context"})," 是一个只读对象，提供一些上下文信息。"]}),"\n",(0,s.jsxs)(n.h3,{id:"contextversion",children:["context.version",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#contextversion",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["当前使用的 ",(0,s.jsx)(n.code,{children:"@rsbuild/core"})," 版本。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"type Version = string;\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"contextrootpath",children:["context.rootPath",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#contextrootpath",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["当前执行构建的根路径，对应调用 ",(0,s.jsx)(n.a,{href:"/api/javascript-api/core#creatersbuild",children:"createRsbuild"})," 时传入的 ",(0,s.jsx)(n.code,{children:"cwd"})," 选项。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"type RootPath = string;\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"contextdistpath",children:["context.distPath",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#contextdistpath",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["构建产物输出目录的绝对路径，对应 ",(0,s.jsx)(n.code,{children:"RsbuildConfig"})," 中的 ",(0,s.jsx)(n.a,{href:"/config/output/dist-path",children:"output.distPath.root"})," 配置项。"]}),"\n",(0,s.jsxs)(n.p,{children:["当有多个环境时，Rsbuild 会尝试获取所有环境的父 distPath 作为 ",(0,s.jsx)(n.code,{children:"context.distPath"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["如果要获取指定环境的输出目录的绝对路径，建议使用 ",(0,s.jsx)(n.a,{href:"/api/javascript-api/environment-api#distpath",children:"environment.distPath"}),"。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"type DistPath = string;\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"contextcachepath",children:["context.cachePath",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#contextcachepath",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"构建过程中生成的缓存文件所在的绝对路径。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"type CachePath = string;\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"contextdevserver",children:["context.devServer",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#contextdevserver",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Dev server 相关信息，包含了当前 dev server 的 hostname 和端口号。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"type DevServer = {\n  hostname: string;\n  port: number;\n};\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"contextbundlertype",children:["context.bundlerType",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#contextbundlertype",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"当前执行构建的构建工具类型。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"type bundlerType = 'rspack' | 'webpack';\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Rsbuild 内部支持切换到 webpack 进行对照测试，因此提供了该字段进行区分，通常你不需要使用此字段。"}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"rsbuildenvironments",children:["rsbuild.environments",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rsbuildenvironments",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"target",children:["target",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#target",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["构建产物类型，对应 Rsbuild 的 ",(0,s.jsx)(n.a,{href:"/config/output/target",children:"output.target"})," 配置。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"type RsbuildTarget = 'web' | 'node' | 'web-worker';\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"tsconfigpath",children:["tsconfigPath",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#tsconfigpath",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["tsconfig.json 文件的绝对路径，若项目中不存在 tsconfig.json 文件，则为 ",(0,s.jsx)(n.code,{children:"undefined"}),"。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"type TsconfigPath = string | undefined;\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"rsbuildbuild",children:["rsbuild.build",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rsbuildbuild",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"调用 build 方法时，会执行一次生产模式构建。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"type BuildOptions = {\n  /**\n   * 是否监听文件变化并重新构建\n   *\n   * @default false\n   */\n  watch?: boolean;\n  /**\n   * 使用自定义的 Rspack Compiler 对象\n   */\n  compiler?: Compiler | MultiCompiler;\n};\n\nfunction Build(options?: BuildOptions): Promise<{\n  /**\n   * Rspack 的 [stats](https://rspack.dev/api/javascript-api/stats) 对象。\n   */\n  stats?: Rspack.Stats | Rspack.MultiStats;\n  /**\n   * 停止监听文件变化。\n   */\n  close: () => Promise<void>;\n}>;\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"示例："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { logger } from '@rsbuild/core';\n\n// Example 1: run build\nawait rsbuild.build();\n\n// Example 2: build and handle the error\ntry {\n  await rsbuild.build();\n} catch (err) {\n  logger.error('Failed to build.');\n  logger.error(err);\n  process.exit(1);\n}\n\n// Example 3: build and get all stats\nconst { stats } = await rsbuild.build();\n\nif (stats) {\n  const { assets } = stats.toJson({ assets: true });\n  console.log(assets);\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"监听文件变化",children:["监听文件变化",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#监听文件变化",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["如果需要自动监听文件变化并重新执行构建，可以将 ",(0,s.jsx)(n.code,{children:"watch"})," 参数设置为 ",(0,s.jsx)(n.code,{children:"true"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"await rsbuild.build({\n  watch: true,\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["在 watch 模式下，",(0,s.jsx)(n.code,{children:"rsbuild.build()"})," 会返回一个 ",(0,s.jsx)(n.code,{children:"close"})," 方法，调用该方法将会结束监听："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const result = await rsbuild.build({\n  watch: true,\n});\n\nawait result.close();\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"stats-对象",children:["Stats 对象",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#stats-对象",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在非 watch 模式下，",(0,s.jsx)(n.code,{children:"rsbuild.build()"})," 会返回一个 Rspack 的 ",(0,s.jsx)(n.a,{href:"https://rspack.dev/api/javascript-api/stats",target:"_blank",rel:"noopener noreferrer",children:"stats"})," 对象："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const result = await rsbuild.build();\n\nconsole.log(result.stats);\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"自定义-compiler",children:["自定义 Compiler",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#自定义-compiler",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"个别情况下，你可能希望使用自定义的 compiler："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { rspack } from '@rsbuild/core';\n\nconst compiler = rspack({\n  // ...\n});\nawait rsbuild.build({\n  compiler,\n});\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"rsbuildstartdevserver",children:["rsbuild.startDevServer",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rsbuildstartdevserver",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"启动本地 dev server。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"type StartDevServerOptions = {\n  /**\n   * 使用自定义的 Rspack Compiler 对象\n   */\n  compiler?: Compiler | MultiCompiler;\n  /**\n   * 是否在启动时静默获取端口号，不输出任何日志\n   * @default false\n   */\n  getPortSilently?: boolean;\n};\n\ntype StartServerResult = {\n  urls: string[];\n  port: number;\n  server: Server;\n};\n\nfunction StartDevServer(\n  options?: StartDevServerOptions,\n): Promise<StartServerResult>;\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"示例："})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"启动 dev server："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { logger } from '@rsbuild/core';\n\n// Start dev server\nawait rsbuild.startDevServer();\n\n// Start dev server and handle the error\ntry {\n  await rsbuild.startDevServer();\n} catch (err) {\n  logger.error('Failed to start dev server.');\n  logger.error(err);\n  process.exit(1);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"成功启动 dev server 后，可以看到以下日志信息："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"  ➜ Local:    http://localhost:3000\n  ➜ Network:  http://192.168.0.1:3000\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"startDevServer"})," 会返回以下参数："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"urls"}),"：访问 dev server 的 URLs"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"port"})," 实际监听的端口号"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"server"}),"：Server 实例对象"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const { urls, port, server } = await rsbuild.startDevServer();\nconsole.log(urls); // ['http://localhost:3000', 'http://192.168.0.1:3000']\nconsole.log(port); // 3000\n\n// 关闭 dev server\nawait server.close();\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"自定义-compiler-1",children:["自定义 Compiler",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#自定义-compiler-1",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"个别情况下，你可能希望使用自定义的 compiler："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { rspack } from '@rsbuild/core';\n\nconst compiler = rspack({\n  // ...\n});\nawait rsbuild.startDevServer({\n  compiler,\n});\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"静默获取端口号",children:["静默获取端口号",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#静默获取端口号",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["某些情况下，默认启动的端口号已经被占用，此时 Rsbuild 会自动递增端口号，直至找到一个可用端口。这个过程会输出提示日志，如果你不希望这段日志，可以将 ",(0,s.jsx)(n.code,{children:"getPortSilently"})," 设置为 ",(0,s.jsx)(n.code,{children:"true"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"await rsbuild.startDevServer({\n  getPortSilently: true,\n});\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"rsbuildcreatedevserver",children:["rsbuild.createDevServer",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rsbuildcreatedevserver",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Rsbuild 配备了一个内置的开发服务器，当你执行 ",(0,s.jsx)(n.code,{children:"rsbuild dev"})," 时，将启动 Rsbuild dev server，并提供页面预览、路由、模块热更新等功能。"]}),"\n",(0,s.jsx)(n.p,{children:"如果你希望将 Rsbuild dev server 集成到自定义的 server 中，可以通过该方法获取 dev server 的实例方法，按需进行调用。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"type EnvironmentAPI = {\n  [name: string]: {\n    /**\n     * 获取当前环境的构建信息\n     */\n    getStats: () => Promise<Stats>;\n    /**\n     * 在服务端加载并执行构建产物\n     *\n     * @param entryName - 入口名称，和 Rsbuild source.entry 的某一个 key 值对应\n     * @returns 入口模块的返回值\n     */\n    loadBundle: <T = unknown>(entryName: string) => Promise<T>;\n    /**\n     * 获取编译后的 HTML 模版内容\n     */\n    getTransformedHtml: (entryName: string) => Promise<string>;\n  };\n};\n\ntype RsbuildDevServer = {\n  /**\n   * 监听 Rsbuild server\n   * 当你使用自定义 server 时，不需要调用该方法\n   */\n  listen: () => Promise<{\n    port: number;\n    urls: string[];\n    server: {\n      close: () => Promise<void>;\n    };\n  }>;\n  /**\n   * Rsbuild server 提供的 environment API\n   */\n  environments: EnvironmentAPI;\n  /**\n   * 解析后的端口号\n   * 默认情况下，Rsbuild Server 会监听 `3000` 端口，如果端口被占用，则自动递增端口号\n   */\n  port: number;\n  /**\n   * `connect` 实例\n   * 可用于向 dev server 附加自定义中间件\n   */\n  middlewares: Connect.Server;\n  /**\n   * 通知 Rsbuild 自定义 Server 已启动\n   * Rsbuild 会在此阶段触发 `onAfterStartDevServer` 钩子\n   */\n  afterListen: () => Promise<void>;\n  /**\n   * 激活 socket 连接\n   * 这确保了 HMR 正常工作\n   */\n  connectWebSocket: (options: { server: HTTPServer }) => void;\n  /**\n   * 关闭 Rsbuild server\n   */\n  close: () => Promise<void>;\n  /**\n   * 打印 server URLs\n   */\n  printUrls: () => void;\n  /**\n   * 启动服务器后，在浏览器中打开 URL\n   */\n  open: () => Promise<void>;\n};\n\ntype CreateDevServerOptions = {\n  /**\n   * 自定义 Compiler 对象\n   */\n  compiler?: Compiler | MultiCompiler;\n  /**\n   * 是否在启动时静默获取端口号，不输出任何日志\n   * @default false\n   */\n  getPortSilently?: boolean;\n  /**\n   * 是否触发 Rsbuild 编译\n   * @default true\n   */\n  runCompile?: boolean;\n};\n\nfunction CreateDevServer(\n  options?: CreateDevServerOptions,\n): Promise<RsbuildDevServer>;\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"示例："})}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["下面是一个在 ",(0,s.jsx)(n.a,{href:"https://expressjs.com/",target:"_blank",rel:"noopener noreferrer",children:"express"})," 中集成 Rsbuild DevServer 的例子:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { createRsbuild } from '@rsbuild/core';\nimport express from 'express';\n\nexport async function startDevServer() {\n  // 初始化 Rsbuild\n  const rsbuild = await createRsbuild({});\n\n  const app = express();\n\n  // 创建 Rsbuild DevServer 实例\n  const rsbuildServer = await rsbuild.createDevServer();\n\n  // 使用 Rsbuild 的内置中间件\n  app.use(rsbuildServer.middlewares);\n\n  const httpServer = app.listen(rsbuildServer.port, async () => {\n    // 通知 Rsbuild 自定义 Server 已启动\n    await rsbuildServer.afterListen();\n  });\n\n  rsbuildServer.connectWebSocket({ server: httpServer });\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["详细使用情况可参考：",(0,s.jsx)(n.a,{href:"https://github.com/rspack-contrib/rspack-examples/blob/main/rsbuild/express/server.mjs",target:"_blank",rel:"noopener noreferrer",children:"示例"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["如果你希望直接使用 Rsbuild DevServer 启动项目，可以直接使用 ",(0,s.jsx)(n.a,{href:"#rsbuildstartdevserver",children:"Rsbuild - startDevServer"})," 方法。 ",(0,s.jsx)(n.code,{children:"startDevServer"})," 实际上是以下代码的语法糖："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const server = await rsbuild.createDevServer();\n\nawait server.listen();\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"connectwebsocket",children:["connectWebSocket",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#connectwebsocket",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Rsbuild 内置了 WebSocket 处理器以支持 HMR 功能："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"当用户通过浏览器访问页面时，会自动向服务器发起 WebSocket 连接请求。"}),"\n",(0,s.jsx)(n.li,{children:"Rsbuild 开发服务器检测到连接请求后，会指示内置的 WebSocket 处理器进行处理。"}),"\n",(0,s.jsx)(n.li,{children:"浏览器与 Rsbuild WebSocket 处理器成功建立连接后，便可进行实时通信。"}),"\n",(0,s.jsxs)(n.li,{children:["每次重新编译完成后，Rsbuild WebSocket 处理器会通知浏览器。随后，浏览器向开发服务器发送 ",(0,s.jsx)(n.code,{children:"hot-update.(js|json)"})," 请求，以加载编译后的新模块。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["当你使用自定义的 server 时，可能会遇到 HMR 连接报错的问题，这是因为自定义的 server 没有将 WebSocket 连接请求转发给 Rsbuild 的 WebSocket 处理器。此时需要通过 ",(0,s.jsx)(n.code,{children:"connectWebSocket"})," 方法已使 Rsbuild 能够感知并处理来自浏览器的 WebSocket 连接请求。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const rsbuildServer = await rsbuild.createDevServer();\n\nconst httpServer = app.listen(rsbuildServer.port);\n\nrsbuildServer.connectWebSocket({ server: httpServer });\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"rsbuildpreview",children:["rsbuild.preview",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rsbuildpreview",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在本地启动 server 来预览生产模式构建的产物，需要在 ",(0,s.jsx)(n.a,{href:"#rsbuildbuild",children:"rsbuild.build"})," 方法之后执行。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"type PreviewOptions = {\n  /**\n   * 是否在启动时静默获取端口号，不输出任何日志\n   * @default false\n   */\n  getPortSilently?: boolean;\n  /**\n   * 是否检查 dist 目录存在且不为空\n   * @default true\n   */\n  checkDistDir?: boolean;\n};\n\ntype StartServerResult = {\n  urls: string[];\n  port: number;\n  server: {\n    close: () => Promise<void>;\n  };\n};\n\nfunction preview(options?: PreviewOptions): Promise<StartServerResult>;\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"示例："})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"启动 Server："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { logger } from '@rsbuild/core';\n\n// Start preview server\nawait rsbuild.preview();\n\n// Start preview server and handle the error\ntry {\n  await rsbuild.preview();\n} catch (err) {\n  logger.error('Failed to start preview server.');\n  logger.error(err);\n  process.exit(1);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"preview"})," 会返回以下参数："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"urls"}),"：访问 Server 的 URLs"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"port"})," 实际监听的端口号"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"server"}),"：Server 实例对象"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const { urls, port, server } = await rsbuild.preview();\nconsole.log(urls); // ['http://localhost:3000', 'http://192.168.0.1:3000']\nconsole.log(port); // 3000\n\n// 关闭 Server\nawait server.close();\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"rsbuildcreatecompiler",children:["rsbuild.createCompiler",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rsbuildcreatecompiler",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["创建一个 Rspack ",(0,s.jsx)(n.a,{href:"https://rspack.dev/api/javascript-api/compiler",target:"_blank",rel:"noopener noreferrer",children:"Compiler"})," 实例；如果本次构建存在多个 ",(0,s.jsx)(n.a,{href:"/config/environments",children:"environments"}),"，则返回值为 ",(0,s.jsx)(n.code,{children:"MultiCompiler"}),"。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"function CreateCompiler(): Promise<Compiler | MultiCompiler>;\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"示例："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const compiler = await rsbuild.createCompiler();\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"大部分场景下，你不需要使用该 API，除非需要进行自定义 dev server 等高级操作。"}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"rsbuildaddplugins",children:["rsbuild.addPlugins",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rsbuildaddplugins",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"注册一个或多个 Rsbuild 插件，可以被多次调用。"}),"\n",(0,s.jsx)(n.p,{children:"该方法需要在开始编译前调用，如果在开始编译之后调用，则不会影响编译结果。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"type AddPluginsOptions = { before?: string; environment?: string };\n\nfunction AddPlugins(\n  plugins: Array<RsbuildPlugin | Falsy>,\n  options?: AddPluginsOptions,\n): void;\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"示例："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"rsbuild.addPlugins([pluginFoo(), pluginBar()]);\n\n// 在 bar 插件之前插入\nrsbuild.addPlugins([pluginFoo()], { before: 'bar' });\n\n// 为 node 环境添加插件\nrsbuild.addPlugins([pluginFoo()], { environment: 'node' });\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"rsbuildgetplugins",children:["rsbuild.getPlugins",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rsbuildgetplugins",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"获取当前 Rsbuild 实例中注册的所有 Rsbuild 插件。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"function GetPlugins(): RsbuildPlugin[];\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"示例："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"console.log(rsbuild.getPlugins());\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"rsbuildremoveplugins",children:["rsbuild.removePlugins",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rsbuildremoveplugins",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"移除一个或多个 Rsbuild 插件，可以被多次调用。"}),"\n",(0,s.jsx)(n.p,{children:"该方法需要在开始编译前调用，如果在开始编译之后调用，则不会影响编译结果。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"function RemovePlugins(pluginNames: string[]): void;\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"示例："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// 添加插件\nconst pluginFoo = pluginFoo();\nrsbuild.addPlugins(pluginFoo);\n\n// 移除插件\nrsbuild.removePlugins([pluginFoo.name]);\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"rsbuildispluginexists",children:["rsbuild.isPluginExists",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rsbuildispluginexists",children:"#"})]}),"\n","\n",(0,s.jsx)(l.Z,{}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"示例："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"rsbuild.addPlugins([pluginFoo()]);\n\nrsbuild.isPluginExists(pluginFoo().name); // true\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"rsbuildinitconfigs",children:["rsbuild.initConfigs",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rsbuildinitconfigs",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"initConfigs 方法用于初始化 Rsbuild 内部的配置，并返回 Rsbuild 内部生成的 Rspack 配置。"}),"\n",(0,s.jsxs)(n.p,{children:["通常你不需要调用 initConfigs 方法，因为调用 ",(0,s.jsx)(n.a,{href:"#rsbuildbuild",children:"rsbuild.build"}),"、",(0,s.jsx)(n.a,{href:"#rsbuildstartdevserver",children:"rsbuild.startDevServer"})," 等方法时会自动调用 initConfigs。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"function InitConfigs(): Promise<{\n  rspackConfigs: Rspack.Configuration[];\n}>;\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"示例："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const { rspackConfigs } = await rsbuild.initConfigs();\n\nconsole.log(rspackConfigs);\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"rsbuildinspectconfig",children:["rsbuild.inspectConfig",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rsbuildinspectconfig",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"inspectConfig 方法通常用于调试 Rsbuild 内部的配置，它会返回 Rsbuild 内部生成的 Rsbuild 配置和 Rspack 配置，将它们序列化为字符串，并支持写入到磁盘上。"}),"\n",(0,s.jsxs)(n.p,{children:["如果你需要在构建过程中查看 Rsbuild 和 Rspack 配置，可以使用 ",(0,s.jsx)(n.a,{href:"/guide/debug/debug-mode",children:"调试模式"}),"，也可以通过 ",(0,s.jsx)(n.a,{href:"#rsbuildonbeforebuild",children:"onBeforeBuild"}),"、",(0,s.jsx)(n.a,{href:"#rsbuildonbeforecreatecompiler",children:"onBeforeCreateCompile"})," 等 hooks 来获取。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'type InspectConfigOptions = {\n  // 查看指定环境下的配置\n  // 默认为 "development"，可以设置为 "production"\n  mode?: RsbuildMode;\n  // 是否开启冗余模式，展示配置中函数的完整内容\n  // 默认为 `false`\n  verbose?: boolean;\n  // 指定输出路径\n  // 默认为 `output.distPath.root` 的值\n  outputPath?: string;\n  // 是否将结果写入到磁盘中\n  // 默认为 `false`\n  writeToDisk?: boolean;\n};\n\nasync function InspectConfig(options?: InspectConfigOptions): Promise<{\n  rsbuildConfig: string;\n  bundlerConfigs: string[];\n  environmentConfigs: string[];\n  origin: {\n    rsbuildConfig: RsbuildConfig;\n    environmentConfigs: Record<string, EnvironmentConfig>;\n    bundlerConfigs: BundlerConfigs[];\n  };\n}>;\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"示例",children:["示例",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#示例",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"拿到字符串格式的 configs 内容："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const { rsbuildConfig, bundlerConfigs } = await rsbuild.inspectConfig();\n\nconsole.log(rsbuildConfig, bundlerConfigs);\n"})}),"\n",(0,s.jsx)(n.p,{children:"直接将配置内容写入到磁盘上："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"await rsbuild.inspectConfig({\n  writeToDisk: true,\n});\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"输出路径",children:["输出路径",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#输出路径",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["你可以通过 ",(0,s.jsx)(n.code,{children:"outputPath"})," 来设置输出目录，默认为 ",(0,s.jsx)(n.a,{href:"/config/output/dist-path",children:"output.distPath.root"})," 的值。"]}),"\n",(0,s.jsxs)(n.p,{children:["当 ",(0,s.jsx)(n.code,{children:"outputPath"})," 是一个相对路径时，会相对于 ",(0,s.jsx)(n.code,{children:"output.distPath.root"})," 的值进行拼接。你也可以将 ",(0,s.jsx)(n.code,{children:"outputPath"})," 设置为一个绝对路径，此时会直接将文件写入到该路径下。比如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import path from 'node:path';\n\nawait rsbuild.inspectConfig({\n  writeToDisk: true,\n  outputPath: path.join(__dirname, 'custom-dir'),\n});\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"rsbuildonbeforecreatecompiler",children:["rsbuild.onBeforeCreateCompiler",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rsbuildonbeforecreatecompiler",children:"#"})]}),"\n","\n",(0,s.jsx)(d.Z,{}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"示例："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"rsbuild.onBeforeCreateCompiler(({ bundlerConfigs }) => {\n  console.log('the Rspack config is ', bundlerConfigs);\n});\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"rsbuildonaftercreatecompiler",children:["rsbuild.onAfterCreateCompiler",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rsbuildonaftercreatecompiler",children:"#"})]}),"\n","\n",(0,s.jsx)(t.Z,{}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"示例："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"rsbuild.onAfterCreateCompiler(({ compiler }) => {\n  console.log('the compiler is ', compiler);\n});\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"rsbuildonbeforebuild",children:["rsbuild.onBeforeBuild",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rsbuildonbeforebuild",children:"#"})]}),"\n","\n",(0,s.jsx)(c.Z,{}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"示例："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"rsbuild.onBeforeBuild(({ bundlerConfigs }) => {\n  console.log('the Rspack config is ', bundlerConfigs);\n});\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"rsbuildonafterbuild",children:["rsbuild.onAfterBuild",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rsbuildonafterbuild",children:"#"})]}),"\n","\n",(0,s.jsx)(o.Z,{}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"示例："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"rsbuild.onAfterBuild(({ stats }) => {\n  console.log(stats?.toJson());\n});\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"rsbuildonclosebuild",children:["rsbuild.onCloseBuild",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rsbuildonclosebuild",children:"#"})]}),"\n","\n",(0,s.jsx)(a.Z,{}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"示例："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"rsbuild.onCloseBuild(async () => {\n  console.log('close build!');\n});\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"rsbuildonbeforestartdevserver",children:["rsbuild.onBeforeStartDevServer",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rsbuildonbeforestartdevserver",children:"#"})]}),"\n","\n",(0,s.jsx)(h.Z,{}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"示例："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"rsbuild.onBeforeStartDevServer(() => {\n  console.log('before start!');\n});\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"rsbuildonafterstartdevserver",children:["rsbuild.onAfterStartDevServer",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rsbuildonafterstartdevserver",children:"#"})]}),"\n","\n",(0,s.jsx)(u.Z,{}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"示例："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"rsbuild.onAfterStartDevServer(({ port, routes }) => {\n  console.log('this port is: ', port);\n  console.log('this routes is: ', routes);\n});\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"rsbuildonclosedevserver",children:["rsbuild.onCloseDevServer",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rsbuildonclosedevserver",children:"#"})]}),"\n","\n",(0,s.jsx)(x.Z,{}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"示例："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"rsbuild.onCloseDevServer(async () => {\n  console.log('close dev server!');\n});\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"rsbuildonbeforestartprodserver",children:["rsbuild.onBeforeStartProdServer",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rsbuildonbeforestartprodserver",children:"#"})]}),"\n","\n",(0,s.jsx)(p.Z,{}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"示例："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"rsbuild.onBeforeStartProdServer(() => {\n  console.log('before start!');\n});\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"rsbuildonafterstartprodserver",children:["rsbuild.onAfterStartProdServer",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rsbuildonafterstartprodserver",children:"#"})]}),"\n","\n",(0,s.jsx)(j.Z,{}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"示例："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"rsbuild.onAfterStartProdServer(({ port, routes }) => {\n  console.log('this port is: ', port);\n  console.log('this routes is: ', routes);\n});\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"rsbuildondevcompiledone",children:["rsbuild.onDevCompileDone",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rsbuildondevcompiledone",children:"#"})]}),"\n","\n",(0,s.jsx)(g.Z,{}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"示例："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"rsbuild.onDevCompileDone(({ isFirstCompile }) => {\n  if (isFirstCompile) {\n    console.log('first compile!');\n  } else {\n    console.log('re-compile!');\n  }\n});\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"rsbuildonexit",children:["rsbuild.onExit",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rsbuildonexit",children:"#"})]}),"\n","\n",(0,s.jsx)(b.Z,{}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"示例："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"rsbuild.onExit(() => {\n  console.log('exit!');\n});\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"rsbuildgetrsbuildconfig",children:["rsbuild.getRsbuildConfig",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rsbuildgetrsbuildconfig",children:"#"})]}),"\n","\n",(0,s.jsx)(m.Z,{}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"示例："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"rsbuild.onBeforeBuild(() => {\n  const config = rsbuild.getRsbuildConfig();\n  console.log(config.html?.title);\n});\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"rsbuildgetnormalizedconfig",children:["rsbuild.getNormalizedConfig",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rsbuildgetnormalizedconfig",children:"#"})]}),"\n","\n",(0,s.jsx)(v.Z,{}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"示例："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"rsbuild.onBeforeBuild(() => {\n  const config = rsbuild.getNormalizedConfig();\n  console.log(config.html.title);\n});\n"})})]})}function S(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(f,{...e})}):f(e)}let R=S;S.__RSPRESS_PAGE_META={},S.__RSPRESS_PAGE_META["zh%2Fapi%2Fjavascript-api%2Finstance.mdx"]={toc:[{text:"rsbuild.context",id:"rsbuildcontext",depth:2},{text:"context.version",id:"contextversion",depth:3},{text:"context.rootPath",id:"contextrootpath",depth:3},{text:"context.distPath",id:"contextdistpath",depth:3},{text:"context.cachePath",id:"contextcachepath",depth:3},{text:"context.devServer",id:"contextdevserver",depth:3},{text:"context.bundlerType",id:"contextbundlertype",depth:3},{text:"rsbuild.environments",id:"rsbuildenvironments",depth:2},{text:"target",id:"target",depth:3},{text:"tsconfigPath",id:"tsconfigpath",depth:3},{text:"rsbuild.build",id:"rsbuildbuild",depth:2},{text:"监听文件变化",id:"监听文件变化",depth:3},{text:"Stats 对象",id:"stats-对象",depth:3},{text:"自定义 Compiler",id:"自定义-compiler",depth:3},{text:"rsbuild.startDevServer",id:"rsbuildstartdevserver",depth:2},{text:"自定义 Compiler",id:"自定义-compiler-1",depth:3},{text:"静默获取端口号",id:"静默获取端口号",depth:3},{text:"rsbuild.createDevServer",id:"rsbuildcreatedevserver",depth:2},{text:"connectWebSocket",id:"connectwebsocket",depth:3},{text:"rsbuild.preview",id:"rsbuildpreview",depth:2},{text:"rsbuild.createCompiler",id:"rsbuildcreatecompiler",depth:2},{text:"rsbuild.addPlugins",id:"rsbuildaddplugins",depth:2},{text:"rsbuild.getPlugins",id:"rsbuildgetplugins",depth:2},{text:"rsbuild.removePlugins",id:"rsbuildremoveplugins",depth:2},{text:"rsbuild.isPluginExists",id:"rsbuildispluginexists",depth:2},{text:"rsbuild.initConfigs",id:"rsbuildinitconfigs",depth:2},{text:"rsbuild.inspectConfig",id:"rsbuildinspectconfig",depth:2},{text:"示例",id:"示例",depth:3},{text:"输出路径",id:"输出路径",depth:3},{text:"rsbuild.onBeforeCreateCompiler",id:"rsbuildonbeforecreatecompiler",depth:2},{text:"rsbuild.onAfterCreateCompiler",id:"rsbuildonaftercreatecompiler",depth:2},{text:"rsbuild.onBeforeBuild",id:"rsbuildonbeforebuild",depth:2},{text:"rsbuild.onAfterBuild",id:"rsbuildonafterbuild",depth:2},{text:"rsbuild.onCloseBuild",id:"rsbuildonclosebuild",depth:2},{text:"rsbuild.onBeforeStartDevServer",id:"rsbuildonbeforestartdevserver",depth:2},{text:"rsbuild.onAfterStartDevServer",id:"rsbuildonafterstartdevserver",depth:2},{text:"rsbuild.onCloseDevServer",id:"rsbuildonclosedevserver",depth:2},{text:"rsbuild.onBeforeStartProdServer",id:"rsbuildonbeforestartprodserver",depth:2},{text:"rsbuild.onAfterStartProdServer",id:"rsbuildonafterstartprodserver",depth:2},{text:"rsbuild.onDevCompileDone",id:"rsbuildondevcompiledone",depth:2},{text:"rsbuild.onExit",id:"rsbuildonexit",depth:2},{text:"rsbuild.getRsbuildConfig",id:"rsbuildgetrsbuildconfig",depth:2},{text:"rsbuild.getNormalizedConfig",id:"rsbuildgetnormalizedconfig",depth:2}],title:"Rsbuild Instance",frontmatter:{}}},5409:function(e,n,r){r.d(n,{Z:function(){return t}});var s=r(55367),i=r(26971);function l(e){let n=Object.assign({p:"p",a:"a",code:"code",ul:"ul",li:"li",strong:"strong",pre:"pre"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["获取归一化后的全部 Rsbuild 配置，或指定环境的 Rsbuild 配置。该方法必须在 ",(0,s.jsx)(n.a,{href:"/plugins/dev/hooks#modifyrsbuildconfig",children:"modifyRsbuildConfig"})," 钩子执行完成后才能被调用。"]}),"\n",(0,s.jsxs)(n.p,{children:["相较于 ",(0,s.jsx)(n.code,{children:"getRsbuildConfig"})," 方法，该方法返回的配置经过了归一化处理，配置的类型定义会得到收敛，比如 ",(0,s.jsx)(n.code,{children:"config.html"})," 的 ",(0,s.jsx)(n.code,{children:"undefined"})," 类型将被移除。"]}),"\n",(0,s.jsx)(n.p,{children:"推荐优先使用该方法获取配置。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"/** 获取指定环境的 Rsbuild 配置 */\nfunction GetNormalizedConfig(options: {\n  environment: string;\n}): Readonly<NormalizedEnvironmentConfig>;\n\n/** 获取全部的 Rsbuild 配置 */\nfunction GetNormalizedConfig(): Readonly<NormalizedConfig>;\n"})})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}let t=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["zh%2Fshared%2FgetNormalizedConfig.mdx"]={toc:[],title:"",frontmatter:{}}},82706:function(e,n,r){r.d(n,{Z:function(){return t}});var s=r(55367),i=r(26971);function l(e){let n=Object.assign({p:"p",ul:"ul",li:"li",strong:"strong",pre:"pre",code:"code"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"获取 Rsbuild 配置。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"type GetRsbuildConfig = {\n  (): Readonly<RsbuildConfig>;\n  (type: 'original' | 'current'): Readonly<RsbuildConfig>;\n  (type: 'normalized'): NormalizedConfig;\n};\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"参数："})}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["你可以通过 ",(0,s.jsx)(n.code,{children:"type"})," 参数来指定读取的 Rsbuild 配置类型："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// 获取用户定义的原始 Rsbuild 配置。\ngetRsbuildConfig('original');\n\n// 获取当前的 Rsbuild 配置。\n// 在 Rsbuild 的不同执行阶段，该配置的内容会发生变化。\n// 比如 `modifyRsbuildConfig` 钩子执行后会修改当前 Rsbuild 配置的内容。\ngetRsbuildConfig('current');\n\n// 获取归一化后的 Rsbuild 配置。\n// 该方法必须在 `modifyRsbuildConfig` 钩子执行完成后才能被调用。\n// 等价于 `getNormalizedConfig` 方法。\ngetRsbuildConfig('normalized');\n"})})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}let t=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["zh%2Fshared%2FgetRsbuildConfig.mdx"]={toc:[],title:"",frontmatter:{}}},49881:function(e,n,r){r.d(n,{Z:function(){return t}});var s=r(55367),i=r(26971);function l(e){let n=Object.assign({p:"p",ul:"ul",li:"li",strong:"strong",pre:"pre",code:"code"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"判断某个插件是否已经被注册。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"function IsPluginExists(pluginName: string): boolean;\n"})})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}let t=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["zh%2Fshared%2FisPluginExists.mdx"]={toc:[],title:"",frontmatter:{}}}}]);