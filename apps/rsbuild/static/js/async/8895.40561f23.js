"use strict";(self.webpackChunkrsbuild_website=self.webpackChunkrsbuild_website||[]).push([["8895"],{76:function(e,n,s){s.r(n),s.d(n,{default:function(){return t}});var r=s(55367),i=s(26971),l=s(82706),d=s(5409),c=s(49881);function a(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",ul:"ul",li:"li",code:"code",pre:"pre",h3:"h3",strong:"strong"},(0,i.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"plugin-core",children:["Plugin Core",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#plugin-core",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"本章节描述了 Rsbuild 插件核心的类型定义和 API。"}),"\n",(0,r.jsxs)(n.h2,{id:"rsbuildplugin",children:["RsbuildPlugin",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rsbuildplugin",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"插件对象的类型，插件对象包含以下属性："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"name"}),"：插件的名称，唯一标识符。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"setup"}),"：插件逻辑的主入口函数，可以是一个异步函数。该函数仅会在初始化插件时执行一次。插件 API 对象上挂载了提供给插件使用的上下文数据、工具函数和注册生命周期钩子的函数，关于生命周期钩子的完整介绍，请阅读 ",(0,r.jsx)(n.a,{href:"/plugins/dev/hooks",children:"Plugin Hooks"})," 章节。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"pre"}),"：声明前置插件的名称，这些插件会在当前插件之前执行。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"post"}),"：声明后置插件的名称，这些插件会在当前插件之后执行。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"remove"}),"：声明需要移除的插件，可以传入插件 name 的数组。"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type RsbuildPlugin = {\n  name: string;\n  pre?: string[];\n  post?: string[];\n  remove?: string[];\n  setup: (api: RsbuildPluginAPI) => Promise<void> | void;\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["你可以从 ",(0,r.jsx)(n.code,{children:"@rsbuild/core"})," 中导入该类型："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import type { RsbuildPlugin } from '@rsbuild/core';\n\nexport default (): RsbuildPlugin => ({\n  name: 'plugin-foo',\n\n  pre: ['plugin-bar'],\n\n  setup: (api) => {\n    api.onAfterBuild(() => {\n      console.log('after build!');\n    });\n  },\n});\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"前置插件",children:["前置插件",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前置插件",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["默认情况下，插件会按照添加顺序依次执行，通过 ",(0,r.jsx)(n.code,{children:"pre"})," 字段可以声明前置执行的插件。"]}),"\n",(0,r.jsx)(n.p,{children:"比如有下面两个插件："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const pluginFoo = {\n  name: 'plugin-foo',\n};\n\nconst pluginBar = {\n  name: 'plugin-bar',\n  pre: ['plugin-foo'],\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Bar 插件在 ",(0,r.jsx)(n.code,{children:"pre"})," 字段中配置了 Foo 插件，因此 Foo 插件一定会在 Bar 插件之前执行。"]}),"\n",(0,r.jsxs)(n.h3,{id:"后置插件",children:["后置插件",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#后置插件",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["同样的，通过 ",(0,r.jsx)(n.code,{children:"post"})," 字段可以声明后置执行的插件。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const pluginFoo = {\n  name: 'plugin-foo',\n};\n\nconst pluginBar = {\n  name: 'plugin-bar',\n  post: ['plugin-foo'],\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Bar 插件在 ",(0,r.jsx)(n.code,{children:"post"})," 字段中配置了 Foo 插件，因此 Foo 插件一定会在 Bar 插件之后执行。"]}),"\n",(0,r.jsxs)(n.h3,{id:"移除插件",children:["移除插件",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#移除插件",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["通过 ",(0,r.jsx)(n.code,{children:"remove"})," 字段可以在一个插件中移除其他插件。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const pluginFoo = {\n  name: 'plugin-foo',\n};\n\nconst pluginBar = {\n  name: 'plugin-bar',\n  remove: ['plugin-foo'],\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"比如同时注册上述的 Foo 和 Bar 插件，由于 Bar 插件声明 remove 了 Foo 插件，因此 Foo 插件不会生效。"}),"\n",(0,r.jsxs)(n.p,{children:["需要注意的是：如果当前插件注册为",(0,r.jsx)(n.a,{href:"/guide/advanced/environments#%E4%B8%BA%E6%8C%87%E5%AE%9A%E7%8E%AF%E5%A2%83%E6%B7%BB%E5%8A%A0%E6%8F%92%E4%BB%B6",children:"特定环境插件"}),"，则仅支持移除同环境插件，不能移除全局插件。"]}),"\n",(0,r.jsxs)(n.h2,{id:"apicontext",children:["api.context",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#apicontext",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"api.context"})," 是一个只读对象，提供一些上下文信息。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"api.context"})," 的内容与 ",(0,r.jsx)(n.code,{children:"rsbuild.context"})," 完全一致，请参考 ",(0,r.jsx)(n.a,{href:"/api/javascript-api/instance#rsbuildcontext",children:"rsbuild.context"}),"。"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"示例："})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const pluginFoo = () => ({\n  setup(api) {\n    console.log(api.context.distPath);\n  },\n});\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"apigetrsbuildconfig",children:["api.getRsbuildConfig",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#apigetrsbuildconfig",children:"#"})]}),"\n","\n",(0,r.jsx)(l.Z,{}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"示例："})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const pluginFoo = () => ({\n  setup(api) {\n    const config = api.getRsbuildConfig();\n    console.log(config.html?.title);\n  },\n});\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"apigetnormalizedconfig",children:["api.getNormalizedConfig",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#apigetnormalizedconfig",children:"#"})]}),"\n","\n",(0,r.jsx)(d.Z,{}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"示例："})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const pluginFoo = () => ({\n  setup(api) {\n    const config = api.getNormalizedConfig();\n    console.log(config.html.title);\n  },\n});\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"apiispluginexists",children:["api.isPluginExists",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#apiispluginexists",children:"#"})]}),"\n","\n",(0,r.jsx)(c.Z,{}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"示例："})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"export default () => ({\n  setup: (api) => {\n    console.log(api.isPluginExists('plugin-foo'));\n  },\n});\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"apitransform",children:["api.transform",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#apitransform",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"用于转换模块的代码。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function Transform(\n  descriptor: TransformDescriptor,\n  handler: TransformHandler,\n): void;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"api.transform"})," 接受两个参数："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"descriptor"}),"：一个对象，用于描述模块的匹配条件。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"handler"}),"：一个转换函数，接收模块当前的代码，并返回转换后的代码。"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"示例",children:["示例",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#示例",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["比如匹配以 ",(0,r.jsx)(n.code,{children:".pug"})," 为后缀的模块，并转换为 JavaScript 代码："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import pug from 'pug';\n\nconst pluginPug = () => ({\n  name: 'my-pug-plugin',\n  setup(api) {\n    api.transform({ test: /\\.pug$/ }, ({ code }) => {\n      const templateCode = pug.compileClient(code, {});\n      return `${templateCode}; module.exports = template;`;\n    });\n  },\n});\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"descriptor-参数",children:["descriptor 参数",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#descriptor-参数",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"descriptor 参数是一个对象，用于描述模块的匹配条件。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type TransformDescriptor = {\n  test?: RuleSetCondition;\n  targets?: RsbuildTarget[];\n  environments?: string[];\n  resourceQuery?: RuleSetCondition;\n  raw?: boolean;\n  layer?: string;\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"descriptor 参数支持设置以下匹配条件："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"test"}),"：匹配模块的路径（不包含 query），等价于 Rspack 的 ",(0,r.jsx)(n.a,{href:"https://rspack.dev/config/module#ruletest",target:"_blank",rel:"noopener noreferrer",children:"Rule.test"}),"。"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"api.transform({ test: /\\.pug$/ }, ({ code }) => {\n  // ...\n});\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"targets"}),"：匹配 Rsbuild ",(0,r.jsx)(n.a,{href:"/config/output/target",children:"output.target"}),"，仅对匹配的 targets 应用当前 transform 函数。"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"api.transform({ test: /\\.pug$/, targets: ['web'] }, ({ code }) => {\n  // ...\n});\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"environments"}),"：匹配 Rsbuild ",(0,r.jsx)(n.a,{href:"/guide/advanced/environments",children:"environment"})," name，仅对匹配的 environments 应用当前 transform 函数。"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"api.transform({ test: /\\.pug$/, environments: ['web'] }, ({ code }) => {\n  // ...\n});\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"resourceQuery"}),"：匹配模块的 query，等价于 Rspack 的 ",(0,r.jsx)(n.a,{href:"https://rspack.dev/config/module#ruleresourcequery",target:"_blank",rel:"noopener noreferrer",children:"Rule.resourceQuery"}),"。"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"api.transform({ resourceQuery: /raw/ }, ({ code }) => {\n  // ...\n});\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"raw"}),"：如果 ",(0,r.jsx)(n.code,{children:"raw"})," 为 ",(0,r.jsx)(n.code,{children:"true"}),"，则 transform 函数将接收到 Buffer 类型的代码，而不是 string 类型。"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"api.transform({ test: /\\.node$/, raw: true }, ({ code }) => {\n  // ...\n});\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"layer"}),"：等同于 Rspack 的 ",(0,r.jsx)(n.a,{href:"https://rspack.dev/config/module#rulelayer",target:"_blank",rel:"noopener noreferrer",children:"Rule.layer"}),"。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"issuerLayer"}),"：等同于 Rspack 的 ",(0,r.jsx)(n.a,{href:"https://rspack.dev/config/module#ruleissuerlayer",target:"_blank",rel:"noopener noreferrer",children:"Rule.issuerLayer"}),"。"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"handler-参数",children:["handler 参数",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#handler-参数",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"handler 参数是一个转换函数，接收模块当前的代码，并返回转换后的代码。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type TransformContext = {\n  code: string;\n  resource: string;\n  resourcePath: string;\n  resourceQuery: string;\n  environment: EnvironmentContext;\n  addDependency: (file: string) => void;\n  emitFile: (\n    name: string,\n    content: string | Buffer,\n    sourceMap?: string,\n    assetInfo?: Record<string, any>,\n  ) => void;\n};\n\ntype TransformResult =\n  | string\n  | {\n      code: string;\n      map?: string | Rspack.sources.RawSourceMap | null;\n    };\n\ntype TransformHandler = (\n  context: TransformContext,\n) => MaybePromise<TransformResult>;\n"})}),"\n",(0,r.jsx)(n.p,{children:"handler 函数提供以下参数："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"code"}),"：模块的代码。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"resource"}),"：模块的绝对路径，包含 query。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"resourcePath"}),"：模块的绝对路径，不包含 query。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"resourceQuery"}),"：模块路径上的 query。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"environment"}),": 当前构建的 ",(0,r.jsx)(n.a,{href:"/api/javascript-api/environment-api#environment-context",children:"environment 上下文"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"addDependency"}),"：添加一个额外的文件作为依赖。该文件将被监听，并在发生变更时触发重新构建。与 Rspack loader 的 ",(0,r.jsx)(n.a,{href:"https://rspack.dev/api/loader-api/context#thisadddependency",target:"_blank",rel:"noopener noreferrer",children:"this.addDependency"})," 相同。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"emitFile"}),"：将一个文件输出到构建结果中。与 Rspack loader 的 ",(0,r.jsx)(n.a,{href:"https://rspack.dev/api/loader-api/context#thisemitfile",target:"_blank",rel:"noopener noreferrer",children:"this.emitFile"})," 相同。"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"比如："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"api.transform(\n  { test: /\\.pug$/ },\n  ({ code, resource, resourcePath, resourceQuery }) => {\n    console.log(code); // -> some code\n    console.log(resource); // -> '/home/user/project/src/template.pug?foo=123'\n    console.log(resourcePath); // -> '/home/user/project/src/template.pug'\n    console.log(resourceQuery); // -> '?foo=123'\n  },\n);\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"与-loader-的区别",children:["与 loader 的区别",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#与-loader-的区别",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"api.transform"})," 可以理解为 Rspack loader 的一个轻量化实现，它提供了简单易用的 API，并在底层自动调用 Rspack loader 进行代码转换。"]}),"\n",(0,r.jsxs)(n.p,{children:["在 Rsbuild 插件中，你可以通过 ",(0,r.jsx)(n.code,{children:"api.transform"})," 快速实现代码转换功能，能够满足大部分常见场景，而无须学习 Rspack loader 的编写方法。"]}),"\n",(0,r.jsxs)(n.p,{children:["注意，对于一些复杂的代码转换场景，",(0,r.jsx)(n.code,{children:"api.transform"})," 可能无法满足，此时你可以使用 Rspack loader 进行实现。"]}),"\n",(0,r.jsxs)(n.h2,{id:"apiresolve",children:["api.resolve",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#apiresolve",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["在模块解析开始之前，拦截并修改模块的请求信息。等价于 Rspack 的 ",(0,r.jsx)(n.a,{href:"https://rspack.dev/zh/api/plugin-api/normal-module-factory-hooks#resolve",target:"_blank",rel:"noopener noreferrer",children:"normalModuleFactory.hooks.resolve"})," hook。"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"版本："})," ",(0,r.jsx)(n.code,{children:">= 1.0.17"})]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function ResolveFn(handler: ResolveHandler): void;\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"示例-1",children:["示例",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#示例-1",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["修改 ",(0,r.jsx)(n.code,{children:"a.js"})," 文件请求："]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"api.resolve(({ resolveData }) => {\n  if (resolveData.request === './a.js') {\n    resolveData.request = './b.js';\n  }\n});\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"handler-参数-1",children:[(0,r.jsx)(n.code,{children:"handler"})," 参数",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#handler-参数-1",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"handler 参数是一个回调函数，接收一个模块的请求信息，并允许你修改它。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type ResolveHandler = (context: {\n  resolveData: Rspack.ResolveData;\n  compiler: Rspack.Compiler;\n  compilation: Rspack.Compilation;\n  environment: EnvironmentContext;\n}) => Promise<void> | void;\n"})}),"\n",(0,r.jsx)(n.p,{children:"handler 函数提供以下参数："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"resolveData"}),"：当前模块请求信息，详情可参考 ",(0,r.jsx)(n.a,{href:"https://rspack.dev/zh/api/plugin-api/normal-module-factory-hooks#resolve",target:"_blank",rel:"noopener noreferrer",children:"Rspack - resolve 钩子"}),"。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"compiler"}),"：Rspack 的 Compiler 对象。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"compilation"}),"：Rspack 的 Compilation 对象。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"environment"}),": 当前构建的 ",(0,r.jsx)(n.a,{href:"/api/javascript-api/environment-api#environment-context",children:"environment 上下文"}),"。"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"apiprocessassets",children:["api.processAssets",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#apiprocessassets",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["在输出产物之前对 assets 进行修改，等价于 Rspack 的 ",(0,r.jsx)(n.a,{href:"https://rspack.dev/api/plugin-api/compilation-hooks#processassets",target:"_blank",rel:"noopener noreferrer",children:"compilation.hooks.processAssets"})," hook。"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"版本："})," ",(0,r.jsx)(n.code,{children:">= 1.0.0"})]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function processAssets(\n  descriptor: ProcessAssetsDescriptor,\n  handler: ProcessAssetsHandler,\n): void;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"api.processAssets"})," 接受两个参数："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"descriptor"}),"：一个对象，用于描述 processAssets 触发的 stage 和匹配条件。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"handler"}),"：一个回调函数，接收 assets 对象并允许你修改它。"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"示例-2",children:["示例",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#示例-2",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["在 ",(0,r.jsx)(n.code,{children:"additional"})," 阶段输出一个新的 asset："]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"api.processAssets(\n  { stage: 'additional' },\n  ({ assets, sources, compilation }) => {\n    const source = new sources.RawSource('This is a new asset!');\n    compilation.emitAsset('new-asset.txt', source);\n  },\n);\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"更新一个已经存在的 asset："}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"api.processAssets(\n  { stage: 'additions' },\n  ({ assets, sources, compilation }) => {\n    const asset = assets['foo.js'];\n    if (!asset) {\n      return;\n    }\n\n    const oldContent = asset.source();\n    const newContent = oldContent + '\\nconsole.log(\"hello world!\")';\n    const source = new sources.RawSource(newContent);\n\n    compilation.updateAsset(assetName, source);\n  },\n);\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"移除一个 asset："}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"api.processAssets({ stage: 'optimize' }, ({ assets, compilation }) => {\n  const assetName = 'unwanted-script.js';\n  if (assets[assetName]) {\n    compilation.deleteAsset(assetName);\n  }\n});\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"descriptor-参数-1",children:["descriptor 参数",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#descriptor-参数-1",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"descriptor 参数是一个对象，用于描述 processAssets 触发的 stage 和匹配条件。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type ProcessAssetsDescriptor = {\n  stage: ProcessAssetsStage;\n  targets?: RsbuildTarget[];\n  environments?: string[];\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"descriptor 参数支持设置以下属性："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"stage"}),"：Rspack 内部将 processAssets 划分为多个 stages（参考 ",(0,r.jsx)(n.a,{href:"#process-assets-stages",children:"process assets stages"}),"，你可以根据需要进行的操作来选择合适的 stage。"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"api.processAssets({ stage: 'additional' }, ({ assets }) => {\n  // ...\n});\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"targets"}),"：匹配 Rsbuild ",(0,r.jsx)(n.a,{href:"/config/output/target",children:"output.target"}),"，仅对匹配的 targets 应用当前 processAssets 函数。"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"api.processAssets({ stage: 'additional', targets: ['web'] }, ({ assets }) => {\n  // ...\n});\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"environments"}),"：匹配 Rsbuild ",(0,r.jsx)(n.a,{href:"/guide/advanced/environments",children:"environment"})," name，仅对匹配的 environments 应用当前 processAssets 函数。"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"api.processAssets(\n  { stage: 'additional', environments: ['web'] },\n  ({ assets }) => {\n    // ...\n  },\n);\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"handler-参数-2",children:["handler 参数",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#handler-参数-2",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"handler 参数是一个回调函数，接收一个 assets 对象，并允许你修改它。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type ProcessAssetsHandler = (context: {\n  assets: Record<string, Rspack.sources.Source>;\n  compiler: Rspack.Compiler;\n  compilation: Rspack.Compilation;\n  environment: EnvironmentContext;\n  sources: RspackSources;\n}) => Promise<void> | void;\n"})}),"\n",(0,r.jsx)(n.p,{children:"handler 函数提供以下参数："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"assets"}),"：一个对象，其中 key 是 asset 的路径名，值是由 ",(0,r.jsx)(n.a,{href:"https://github.com/webpack/webpack-sources#source",target:"_blank",rel:"noopener noreferrer",children:"Source"})," 表示的 asset 数据。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"compiler"}),"：Rspack 的 Compiler 对象。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"compilation"}),"：Rspack 的 Compilation 对象。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"environment"}),": 当前构建的 ",(0,r.jsx)(n.a,{href:"/api/javascript-api/environment-api#environment-context",children:"environment 上下文"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"sources"}),"：",(0,r.jsx)(n.a,{href:"https://github.com/webpack/webpack-sources#source",target:"_blank",rel:"noopener noreferrer",children:"Rspack Sources"})," 对象，它包含了多种表示 Sources 的 classes。"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"process-assets-stages",children:["Process assets stages",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#process-assets-stages",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"下面是支持的 stage 列表，Rspack 会按由上至下的顺序依次执行这些 stages，请根据你需要进行的操作来选择合适的 stage。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"additional"})," — 在编译中添加额外的 asset。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"pre-process"})," — asset 进行了基础的预处理。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"derived"})," — 从现有 asset 中派生新的 asset。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"additions"})," — 为现有的 asset 添加额外的内容，例如 banner 或初始代码。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"optimize"})," — 以通用的方式优化现有 asset。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"optimize-count"})," — 优化现有 asset 的数量，例如，进行合并操作。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"optimize-compatibility"})," — 优化现有 asset 的兼容性，例如添加 polyfills 或者 vendor prefixes。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"optimize-size"})," — 优化现有 asset 的大小，例如进行压缩或者删除空格。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dev-tooling"})," — 为 asset 添加开发者工具，例如，提取 source map。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"optimize-inline"})," — 将 asset 内联到其他 asset 中来优化现有 asset 数量。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"summarize"})," — 整理现有 asset 列表。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"optimize-hash"})," — 优化 asset 的 hash 值，例如，生成基于 asset 内容的真实 hash 值。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"optimize-transfer"})," — 优化已有 asset 的转换操作，例如对 asset 进行压缩，并作为独立的 asset。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"analyse"})," — 分析已有 asset。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"report"})," — 创建用于上报的 asset。"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"apiexpose",children:["api.expose",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#apiexpose",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"用于插件间通信。"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"api.expose"})," 可以显式暴露当前插件的一些属性或方法，其他插件可以通过 ",(0,r.jsx)(n.code,{children:"api.useExposed"})," 来获取这些 API。"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"/**\n * @param id 唯一标识符，使用 Symbol 可以避免命名冲突\n * @param api 需要暴露的属性或方法，建议使用对象格式\n */\nfunction expose<T = any>(id: string | symbol, api: T): void;\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"示例："})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const pluginParent = () => ({\n  name: 'plugin-parent',\n  setup(api) {\n    api.expose('plugin-parent', {\n      value: 1,\n      double: (val: number) => val * 2,\n    });\n  },\n});\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"apiuseexposed",children:["api.useExposed",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#apiuseexposed",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"用于插件间通信。"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"api.useExposed"})," 可以获取到其他插件暴露的属性或方法。"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"/**\n * @param id 唯一标识符\n * @returns 获取的属性或方法\n */\nfunction useExposed<T = any>(id: string | symbol): T | undefined;\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"示例："})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const pluginChild = () => ({\n  name: 'plugin-child',\n  pre: ['plugin-parent'],\n  setup(api) {\n    const parentApi = api.useExposed('plugin-parent');\n    if (parentApi) {\n      console.log(parentApi.value); // -> 1\n      console.log(parentApi.double(1)); // -> 2\n    }\n  },\n});\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"标识符",children:["标识符",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#标识符",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"你可以使用 Symbol 作为唯一标识符，从而避免潜在的命名冲突："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// pluginParent.ts\nexport const PARENT_API_ID = Symbol('plugin-parent');\n\nconst pluginParent = () => ({\n  name: 'plugin-parent',\n  setup(api) {\n    api.expose(PARENT_API_ID, {\n      // some api\n    });\n  },\n});\n\n// pluginChild.ts\nimport { PARENT_API_ID } from './pluginParent';\n\nconst pluginChild = () => ({\n  name: 'plugin-child',\n  setup(api) {\n    const parentApi = api.useExposed(PARENT_API_ID);\n    if (parentApi) {\n      console.log(parentApi);\n    }\n  },\n});\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"类型声明",children:["类型声明",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#类型声明",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"你可以通过函数的泛型来声明类型："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// pluginParent.ts\nexport type ParentAPI = {\n  // ...\n};\n\n// pluginChild.ts\nimport type { ParentAPI } from './pluginParent';\n\nconst pluginChild = () => ({\n  name: 'plugin-child',\n  setup(api) {\n    const parentApi = api.useExposed<ParentAPI>(PARENT_API_ID);\n    if (parentApi) {\n      console.log(parentApi);\n    }\n  },\n});\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"执行顺序",children:["执行顺序",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#执行顺序",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"在进行插件间通信时，你需要留意插件的执行顺序。"}),"\n",(0,r.jsxs)(n.p,{children:["比如，在上面的示例中，如果 ",(0,r.jsx)(n.code,{children:"pluginParent"})," 未注册，或者注册顺序晚于 ",(0,r.jsx)(n.code,{children:"pluginChild"}),"，那么 ",(0,r.jsx)(n.code,{children:"api.useExposed('plugin-parent')"})," 会返回一个 ",(0,r.jsx)(n.code,{children:"undefined"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["你可以使用插件对象的 ",(0,r.jsx)(n.code,{children:"pre"}),"、",(0,r.jsx)(n.code,{children:"post"})," 选项，以及插件 hook 的 ",(0,r.jsx)(n.code,{children:"order"})," 选项来保证顺序是正确的。"]})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}let t=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["zh%2Fplugins%2Fdev%2Fcore.mdx"]={toc:[{text:"RsbuildPlugin",id:"rsbuildplugin",depth:2},{text:"前置插件",id:"前置插件",depth:3},{text:"后置插件",id:"后置插件",depth:3},{text:"移除插件",id:"移除插件",depth:3},{text:"api.context",id:"apicontext",depth:2},{text:"api.getRsbuildConfig",id:"apigetrsbuildconfig",depth:2},{text:"api.getNormalizedConfig",id:"apigetnormalizedconfig",depth:2},{text:"api.isPluginExists",id:"apiispluginexists",depth:2},{text:"api.transform",id:"apitransform",depth:2},{text:"示例",id:"示例",depth:3},{text:"descriptor 参数",id:"descriptor-参数",depth:3},{text:"handler 参数",id:"handler-参数",depth:3},{text:"与 loader 的区别",id:"与-loader-的区别",depth:3},{text:"api.resolve",id:"apiresolve",depth:2},{text:"示例",id:"示例-1",depth:3},{text:"`handler` 参数",id:"handler-参数-1",depth:3},{text:"api.processAssets",id:"apiprocessassets",depth:2},{text:"示例",id:"示例-2",depth:3},{text:"descriptor 参数",id:"descriptor-参数-1",depth:3},{text:"handler 参数",id:"handler-参数-2",depth:3},{text:"Process assets stages",id:"process-assets-stages",depth:3},{text:"api.expose",id:"apiexpose",depth:2},{text:"api.useExposed",id:"apiuseexposed",depth:2},{text:"标识符",id:"标识符",depth:3},{text:"类型声明",id:"类型声明",depth:3},{text:"执行顺序",id:"执行顺序",depth:3}],title:"Plugin Core",frontmatter:{}}},5409:function(e,n,s){s.d(n,{Z:function(){return c}});var r=s(55367),i=s(26971);function l(e){let n=Object.assign({p:"p",a:"a",code:"code",ul:"ul",li:"li",strong:"strong",pre:"pre"},(0,i.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["获取归一化后的全部 Rsbuild 配置，或指定环境的 Rsbuild 配置。该方法必须在 ",(0,r.jsx)(n.a,{href:"/plugins/dev/hooks#modifyrsbuildconfig",children:"modifyRsbuildConfig"})," 钩子执行完成后才能被调用。"]}),"\n",(0,r.jsxs)(n.p,{children:["相较于 ",(0,r.jsx)(n.code,{children:"getRsbuildConfig"})," 方法，该方法返回的配置经过了归一化处理，配置的类型定义会得到收敛，比如 ",(0,r.jsx)(n.code,{children:"config.html"})," 的 ",(0,r.jsx)(n.code,{children:"undefined"})," 类型将被移除。"]}),"\n",(0,r.jsx)(n.p,{children:"推荐优先使用该方法获取配置。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"/** 获取指定环境的 Rsbuild 配置 */\nfunction GetNormalizedConfig(options: {\n  environment: string;\n}): Readonly<NormalizedEnvironmentConfig>;\n\n/** 获取全部的 Rsbuild 配置 */\nfunction GetNormalizedConfig(): Readonly<NormalizedConfig>;\n"})})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}let c=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["zh%2Fshared%2FgetNormalizedConfig.mdx"]={toc:[],title:"",frontmatter:{}}},82706:function(e,n,s){s.d(n,{Z:function(){return c}});var r=s(55367),i=s(26971);function l(e){let n=Object.assign({p:"p",ul:"ul",li:"li",strong:"strong",pre:"pre",code:"code"},(0,i.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"获取 Rsbuild 配置。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type GetRsbuildConfig = {\n  (): Readonly<RsbuildConfig>;\n  (type: 'original' | 'current'): Readonly<RsbuildConfig>;\n  (type: 'normalized'): NormalizedConfig;\n};\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"参数："})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["你可以通过 ",(0,r.jsx)(n.code,{children:"type"})," 参数来指定读取的 Rsbuild 配置类型："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// 获取用户定义的原始 Rsbuild 配置。\ngetRsbuildConfig('original');\n\n// 获取当前的 Rsbuild 配置。\n// 在 Rsbuild 的不同执行阶段，该配置的内容会发生变化。\n// 比如 `modifyRsbuildConfig` 钩子执行后会修改当前 Rsbuild 配置的内容。\ngetRsbuildConfig('current');\n\n// 获取归一化后的 Rsbuild 配置。\n// 该方法必须在 `modifyRsbuildConfig` 钩子执行完成后才能被调用。\n// 等价于 `getNormalizedConfig` 方法。\ngetRsbuildConfig('normalized');\n"})})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}let c=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["zh%2Fshared%2FgetRsbuildConfig.mdx"]={toc:[],title:"",frontmatter:{}}},49881:function(e,n,s){s.d(n,{Z:function(){return c}});var r=s(55367),i=s(26971);function l(e){let n=Object.assign({p:"p",ul:"ul",li:"li",strong:"strong",pre:"pre",code:"code"},(0,i.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"判断某个插件是否已经被注册。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function IsPluginExists(pluginName: string): boolean;\n"})})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}let c=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["zh%2Fshared%2FisPluginExists.mdx"]={toc:[],title:"",frontmatter:{}}}}]);