"use strict";(self.webpackChunkrsbuild_website=self.webpackChunkrsbuild_website||[]).push([["4511"],{91274:function(n,e,s){s.r(e),s.d(e,{default:function(){return a}});var i=s(55367),d=s(26971),r=s(86697);function l(n){let e=Object.assign({h1:"h1",a:"a",p:"p",code:"code",div:"div",h2:"h2",pre:"pre",blockquote:"blockquote",h3:"h3",ul:"ul",li:"li",h4:"h4",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,d.ah)(),n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.h1,{id:"配置-rspack",children:["配置 Rspack",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#配置-rspack",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["Rsbuild 支持直接修改 Rspack 配置对象，也支持通过 ",(0,i.jsx)(e.code,{children:"rspack-chain"})," 来修改 Rsbuild 内置的 Rspack 配置。"]}),"\n",(0,i.jsxs)(e.div,{className:"rspress-directive tip",children:[(0,i.jsx)(e.div,{className:"rspress-directive-title",children:"TIP"}),(0,i.jsx)(e.div,{className:"rspress-directive-content",children:(0,i.jsx)(e.p,{children:"Rsbuild 内置的 Rspack 配置会随着迭代而发生变化，这些变化不会反映在 semver 中，因此在升级 Rsbuild 时，你的自定义配置可能会失效。"})})]}),"\n",(0,i.jsxs)(e.h2,{id:"查看-rspack-配置",children:["查看 Rspack 配置",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#查看-rspack-配置",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["Rsbuild 提供了 ",(0,i.jsx)(e.a,{href:"/guide/basic/cli#rsbuild-inspect",children:"rsbuild inspect"})," 命令来查看 Rsbuild 最终生成的 Rspack 配置。"]}),"\n",(0,i.jsxs)(e.p,{children:["你也可以通过 ",(0,i.jsx)(e.a,{href:"/guide/debug/debug-mode",children:"调试模式"})," 来查看。"]}),"\n",(0,i.jsxs)(e.h2,{id:"修改配置对象",children:["修改配置对象",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#修改配置对象",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["你可以使用 Rsbuild 的 ",(0,i.jsx)(e.a,{href:"/config/tools/rspack",children:"tools.rspack"})," 选项来修改 Rspack 配置对象。"]}),"\n",(0,i.jsx)(e.p,{children:"比如注册 Rspack 插件或 webpack 插件："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",meta:'title="rsbuild.config.ts"',children:"export default {\n  tools: {\n    rspack: {\n      plugins: [SomeWebpackPlugin()],\n    },\n  },\n};\n"})}),"\n",(0,i.jsx)(e.p,{children:"比如以函数的形式修改 Rspack 配置："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",meta:'title="rsbuild.config.ts"',children:"export default {\n  tools: {\n    rspack: (config, { env }) => {\n      if (env === 'development') {\n        config.devtool = 'cheap-module-eval-source-map';\n      }\n      return config;\n    },\n  },\n};\n"})}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:["请查看 ",(0,i.jsx)(e.a,{href:"/config/tools/rspack",children:"tools.rspack 文档"})," 来了解完整用法。"]}),"\n"]}),"\n",(0,i.jsxs)(e.h2,{id:"使用-rspack-chain",children:["使用 Rspack Chain",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#使用-rspack-chain",children:"#"})]}),"\n","\n",(0,i.jsx)(r.Z,{}),"\n",(0,i.jsxs)(e.h3,{id:"toolsbundlerchain",children:["tools.bundlerChain",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#toolsbundlerchain",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["Rsbuild 提供了 ",(0,i.jsx)(e.a,{href:"/config/tools/bundler-chain",children:"tools.bundlerChain"})," 配置项来修改 rspack-chain。"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"tools.bundlerChain"})," 的值是一个函数，接收两个参数："]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["第一个参数为 ",(0,i.jsx)(e.code,{children:"rspack-chain"})," 实例，你可以通过 它来修改默认的 Rspack 配置。"]}),"\n",(0,i.jsxs)(e.li,{children:["第二个参数为一个",(0,i.jsx)(e.a,{href:"/config/tools/bundler-chain#%E5%B7%A5%E5%85%B7%E5%AF%B9%E8%B1%A1",children:"工具对象"}),"，包括 ",(0,i.jsx)(e.code,{children:"env"}),"、",(0,i.jsx)(e.code,{children:"isProd"}),"、",(0,i.jsx)(e.code,{children:"CHAIN_ID"})," 等。"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"下面是一个基本示例："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",meta:'title="rsbuild.config.ts"',children:"export default {\n  tools: {\n    bundlerChain: (chain, { env }) => {\n      if (env === 'development') {\n        chain.devtool('cheap-module-eval-source-map');\n      }\n    },\n  },\n};\n"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"tools.bundlerChain"})," 还可以是一个异步函数："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",meta:'title="rsbuild.config.ts"',children:"export default {\n  tools: {\n    bundlerChain: (chain, { env }) => {\n      const value = await fetchValue();\n      chain.devtool(value);\n    },\n  },\n};\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"背景知识",children:["背景知识",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#背景知识",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"在开始使用 rspack-chain 来修改 Rspack 配置之前，请先了解一些背景知识。"}),"\n",(0,i.jsxs)(e.h4,{id:"关于-id",children:["关于 ID",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#关于-id",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"简单来说，rspack-chain 要求使用者为每个 Rule、Loader、Plugin、Minimizer 都设置一个独一无二的 id，通过这个 id，就可以便捷地从嵌套层级很深的对象中找到所需的对象。"}),"\n",(0,i.jsxs)(e.p,{children:["Rsbuild 将内部定义的全部 id 都通过 ",(0,i.jsx)(e.code,{children:"CHAIN_ID"})," 对象导出，因此你可以通过这些导出的 id，快速定位到你想要修改的 Loader 或 Plugin，而不需要在 Rspack 配置对象里通过复杂的遍历寻找。"]}),"\n",(0,i.jsxs)(e.p,{children:["比如通过 ",(0,i.jsx)(e.code,{children:"CHAIN_ID.PLUGIN.HTML"})," 来删除内置的 HTML 插件："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",meta:'title="rsbuild.config.ts"',children:"export default {\n  tools: {\n    bundlerChain: (chain, { CHAIN_ID }) => {\n      //\n      chain.plugins.delete(CHAIN_ID.PLUGIN.HTML);\n    },\n  },\n};\n"})}),"\n",(0,i.jsxs)(e.h4,{id:"id-类型",children:["ID 类型",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#id-类型",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"CHAIN_ID"})," 对象包含了多种 id，对应的含义如下："]}),"\n",(0,i.jsxs)(e.table,{children:["\n",(0,i.jsxs)(e.thead,{children:["\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.th,{children:"CHAIN_ID 字段"}),"\n",(0,i.jsx)(e.th,{children:"对应的配置"}),"\n",(0,i.jsx)(e.th,{children:"描述"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.tbody,{children:["\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"CHAIN_ID.PLUGIN"})}),"\n",(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"plugins[i]"})}),"\n",(0,i.jsx)(e.td,{children:"对应 Rspack 配置中的一个插件"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"CHAIN_ID.RULE"})}),"\n",(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"module.rules[i]"})}),"\n",(0,i.jsx)(e.td,{children:"对应 Rspack 配置中的一个 Rule"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"CHAIN_ID.USE"})}),"\n",(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"module.rules[i].loader"})}),"\n",(0,i.jsx)(e.td,{children:"对应 Rspack 配置中的一个 Loader"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"CHAIN_ID.MINIMIZER"})}),"\n",(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"optimization.minimizer"})}),"\n",(0,i.jsx)(e.td,{children:"对应 Rspack 配置中的一个压缩工具"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"CHAIN_ID.RESOLVE_PLUGIN"})}),"\n",(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"resolve.plugins[i]"})}),"\n",(0,i.jsx)(e.td,{children:"对应 Rspack 配置中的一个 Resolve 插件"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.h3,{id:"示例",children:["示例",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#示例",children:"#"})]}),"\n",(0,i.jsxs)(e.h4,{id:"配置-loader",children:["配置 loader",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#配置-loader",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"下面是新增、修改和删除 Rspack loader 的示例。"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["新增一个 loader 来处理 ",(0,i.jsx)(e.code,{children:".md"})," 文件："]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",meta:'title="rsbuild.config.mjs"',children:"export default {\n  tools: {\n    bundlerChain: (chain) => {\n      chain.module\n        .rule('md')\n        .test(/\\.md$/)\n        .use('md-loader')\n        // loader 的包名或模块路径\n        .loader('md-loader');\n    },\n  },\n};\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"修改内置的 SWC loader 选项："}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",meta:'title="rsbuild.config.mjs"',children:"export default {\n  tools: {\n    bundlerChain: (chain, { CHAIN_ID }) => {\n      chain.module\n        .rule(CHAIN_ID.RULE.JS)\n        .use(CHAIN_ID.USE.SWC)\n        .tap((options) => {\n          console.log(options);\n          return options;\n        });\n    },\n  },\n};\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"删除内置的 SWC loader："}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",meta:'title="rsbuild.config.mjs"',children:"export default {\n  tools: {\n    bundlerChain: (chain, { CHAIN_ID }) => {\n      chain.module.rule(CHAIN_ID.RULE.JS).uses.delete(CHAIN_ID.USE.SWC);\n    },\n  },\n};\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"在内置的 SWC loader 之后插入一个 loader，它会早于 SWC loader 执行："}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",meta:'title="rsbuild.config.mjs"',children:"export default {\n  tools: {\n    bundlerChain: (chain, { CHAIN_ID }) => {\n      chain.module\n        .rule(CHAIN_ID.RULE.JS)\n        .use('my-loader')\n        .after(CHAIN_ID.USE.SWC)\n        // loader 的包名或模块路径\n        .loader('my-loader')\n        .options({\n          // some options\n        });\n    },\n  },\n};\n"})}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsx)(e.p,{children:"注意：Rspack 的 loader 是以相反顺序执行的。"}),"\n"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"在内置的 SWC loader 之前插入一个 loader，它会晚于 SWC loader 执行："}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",meta:'title="rsbuild.config.mjs"',children:"export default {\n  tools: {\n    bundlerChain: (chain, { CHAIN_ID }) => {\n      chain.module\n        .rule(CHAIN_ID.RULE.JS)\n        // loader id，没有实际意义，仅用于定位\n        .use('my-loader')\n        .before(CHAIN_ID.USE.SWC)\n        // loader 的包名或模块路径\n        .loader('my-loader')\n        .options({\n          // some options\n        });\n    },\n  },\n};\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"删除内置的 CSS 处理规则："}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",meta:'title="rsbuild.config.mjs"',children:"export default {\n  tools: {\n    bundlerChain: (chain, { CHAIN_ID }) => {\n      chain.module.rules.delete(CHAIN_ID.RULE.CSS);\n    },\n  },\n};\n"})}),"\n",(0,i.jsxs)(e.h4,{id:"配置-plugin",children:["配置 Plugin",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#配置-plugin",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"下面是新增、修改和删除 Rspack 插件的示例。"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",meta:'title="rsbuild.config.mjs"',children:"export default {\n  tools: {\n    bundlerChain: (chain, { bundler, CHAIN_ID }) => {\n      // 新增插件\n      chain.plugin('custom-define').use(bundler.DefinePlugin, [\n        {\n          'process.env': {\n            NODE_ENV: JSON.stringify(process.env.NODE_ENV),\n          },\n        },\n      ]);\n\n      // 修改插件\n      chain.plugin(CHAIN_ID.PLUGIN.HMR).tap((options) => {\n        options[0].fullBuildTimeout = 200;\n        return options;\n      });\n\n      // 删除插件\n      chain.plugins.delete(CHAIN_ID.PLUGIN.HMR);\n    },\n  },\n};\n"})}),"\n",(0,i.jsxs)(e.h4,{id:"根据环境修改",children:["根据环境修改",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#根据环境修改",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["在 ",(0,i.jsx)(e.code,{children:"tools.bundlerChain"})," 函数的第二个参数中，你可以拿到各种环境的标识，如开发/生产模式构建、 SSR 构建、Web Worker 构建，从而实现不同环境下的配置修改。"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",meta:'title="rsbuild.config.mjs"',children:"export default {\n  tools: {\n    bundlerChain: (chain, { env, isProd, target, isServer, isWebWorker }) => {\n      if (env === 'development' || env === 'test') {\n        // ...\n      }\n      if (isProd) {\n        // ...\n      }\n      if (target === 'node') {\n        // ...\n      }\n      if (isServer) {\n        // ...\n      }\n      if (isWebWorker) {\n        // ...\n      }\n    },\n  },\n};\n"})}),"\n",(0,i.jsxs)(e.p,{children:["以上是一些常见的配置示例，完整的 API 请见 ",(0,i.jsx)(e.a,{href:"https://github.com/rspack-contrib/rspack-chain",target:"_blank",rel:"noopener noreferrer",children:"rspack-chain 文档"}),"。"]}),"\n",(0,i.jsxs)(e.h2,{id:"配置修改顺序",children:["配置修改顺序",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#配置修改顺序",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["Rsbuild 支持通过 ",(0,i.jsx)(e.code,{children:"tools.rspack"}),"、",(0,i.jsx)(e.code,{children:"tools.bundlerChain"}),"、",(0,i.jsx)(e.code,{children:"modifyBundlerChain"})," 等方式修改 Rspack 配置对象。"]}),"\n",(0,i.jsx)(e.p,{children:"它们之间的执行顺序依次为："}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"/plugins/dev/hooks#modifybundlerchain",children:"modifyBundlerChain"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"/config/tools/bundler-chain",children:"tools.bundleChain"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"/plugins/dev/hooks#modifyrspackconfig",children:"modifyRspackConfig"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"/config/tools/rspack",children:"tools.rspack"})}),"\n"]})]})}function c(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,d.ah)(),n.components);return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(l,{...n})}):l(n)}let a=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["zh%2Fguide%2Fbasic%2Fconfigure-rspack.mdx"]={toc:[{text:"查看 Rspack 配置",id:"查看-rspack-配置",depth:2},{text:"修改配置对象",id:"修改配置对象",depth:2},{text:"使用 Rspack Chain",id:"使用-rspack-chain",depth:2},{text:"tools.bundlerChain",id:"toolsbundlerchain",depth:3},{text:"背景知识",id:"背景知识",depth:3},{text:"关于 ID",id:"关于-id",depth:4},{text:"ID 类型",id:"id-类型",depth:4},{text:"示例",id:"示例",depth:3},{text:"配置 loader",id:"配置-loader",depth:4},{text:"配置 Plugin",id:"配置-plugin",depth:4},{text:"根据环境修改",id:"根据环境修改",depth:4},{text:"配置修改顺序",id:"配置修改顺序",depth:2}],title:"配置 Rspack",frontmatter:{}}},86697:function(n,e,s){s.d(e,{Z:function(){return c}});var i=s(55367),d=s(26971);function r(n){let e=Object.assign({p:"p",a:"a",code:"code"},(0,d.ah)(),n.components);return(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.a,{href:"https://github.com/rspack-contrib/rspack-chain",target:"_blank",rel:"noopener noreferrer",children:"rspack-chain"})," 是一个用于配置 Rspack 的工具库。它提供了链式 API，使得配置 Rspack 变得更加灵活。通过使用 ",(0,i.jsx)(e.code,{children:"rspack-chain"}),"，你可以更方便地修改和扩展 Rspack 配置，而不需要直接操作复杂的配置对象。"]})}function l(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,d.ah)(),n.components);return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(r,{...n})}):r(n)}let c=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["zh%2Fshared%2FrspackChain.mdx"]={toc:[],title:"",frontmatter:{}}}}]);