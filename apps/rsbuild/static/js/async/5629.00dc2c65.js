"use strict";(self.webpackChunkrsbuild_website=self.webpackChunkrsbuild_website||[]).push([["5629"],{88534:function(e,s,n){n.r(s),n.d(s,{default:function(){return c}});var r=n(55367),o=n(26971);function d(e){let s=Object.assign({h1:"h1",a:"a",h3:"h3",p:"p",code:"code",hr:"hr",pre:"pre",ul:"ul",li:"li",blockquote:"blockquote",ol:"ol"},(0,o.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(s.h1,{id:"异常类问题",children:["异常类问题",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#异常类问题",children:"#"})]}),"\n",(0,r.jsxs)(s.h3,{id:"编译产物中存在未编译的-esnext-代码",children:["编译产物中存在未编译的 ESNext 代码？",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#编译产物中存在未编译的-esnext-代码",children:"#"})]}),"\n",(0,r.jsxs)(s.p,{children:["默认情况下，Rsbuild 不会编译 ",(0,r.jsx)(s.code,{children:"node_modules"})," 下的 JavaScript 文件。如果项目引入的 npm 包中含有 ESNext 语法，会被打包进产物中。"]}),"\n",(0,r.jsxs)(s.p,{children:["遇到这种情况时，可以通过 ",(0,r.jsx)(s.a,{href:"/config/source/include",children:"source.include"})," 配置项来指定需要额外进行编译的目录或模块。"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsxs)(s.h3,{id:"编译时报错-you-may-need-additional-loader",children:["编译时报错 ",(0,r.jsx)(s.code,{children:"You may need additional loader"}),"？",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#编译时报错-you-may-need-additional-loader",children:"#"})]}),"\n",(0,r.jsx)(s.p,{children:"如果编译过程中遇到了以下报错提示，表示存在个别文件无法被正确编译。"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"Module parse failed: Unexpected token\nFile was processed with these loaders:\n * some-loader/index.js\n\nYou may need an additional loader to handle the result of these loaders.\n"})}),"\n",(0,r.jsx)(s.p,{children:"请检查是否引用了 Rsbuild 不支持的文件格式，并自行配置相应的 Rspack loader 对其进行编译。"}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsxs)(s.h3,{id:"编译时报错-error-object-object-is-not-a-postcss-plugin-",children:["编译时报错 ",(0,r.jsx)(s.code,{children:"Error: [object Object] is not a PostCSS plugin"})," ?",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#编译时报错-error-object-object-is-not-a-postcss-plugin-",children:"#"})]}),"\n",(0,r.jsxs)(s.p,{children:["目前，Rsbuild 使用的是 v8 版本的 PostCSS。如果编译过程中遇到了 ",(0,r.jsx)(s.code,{children:"Error: [object Object] is not a PostCSS plugin"})," 报错提示，通常是由于引用到了错误的 PostCSS 版本导致，常见的如 ",(0,r.jsx)(s.code,{children:"cssnano"})," 中 ",(0,r.jsx)(s.code,{children:"postcss"})," (peerDependencies) 版本不符合预期。"]}),"\n",(0,r.jsxs)(s.p,{children:["可以通过 ",(0,r.jsx)(s.code,{children:"npm ls postcss"})," 查找 ",(0,r.jsx)(s.code,{children:"UNMET PEER DEPENDENCY"})," 的依赖，然后在 package.json 中通过指定 PostCSS 版本等方式安装正确的依赖版本即可。"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"npm ls postcss\n\n ├─┬ css-loader@6.3.0\n │ └── UNMET PEER DEPENDENCY postcss@8.3.9\n ├─┬ css-minimizer-webpack-plugin@3.0.0\n │ └── UNMET PEER DEPENDENCY postcss@8.3.9\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsxs)(s.h3,{id:"编译时报错-export-foo-imported-as-foo-was-not-found-in-utils",children:["编译时报错 ",(0,r.jsx)(s.code,{children:"export 'foo' (imported as 'foo') was not found in './utils'"}),"？",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#编译时报错-export-foo-imported-as-foo-was-not-found-in-utils",children:"#"})]}),"\n",(0,r.jsx)(s.p,{children:"如果编译的过程中出现此报错，说明代码中引用了一个不存在的导出。"}),"\n",(0,r.jsxs)(s.p,{children:["比如以下例子，",(0,r.jsx)(s.code,{children:"index.ts"})," 中引用了 ",(0,r.jsx)(s.code,{children:"utils.ts"})," 中的 ",(0,r.jsx)(s.code,{children:"foo"})," 变量， 但 ",(0,r.jsx)(s.code,{children:"utils.ts"})," 实际上只导出了 ",(0,r.jsx)(s.code,{children:"bar"})," 变量。"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"// utils.ts\nexport const bar = 'bar';\n\n// index.ts\nimport { foo } from './utils';\n"})}),"\n",(0,r.jsx)(s.p,{children:"在这种情况下，Rsbuild 会抛出以下错误："}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"Compile Error:\nFile: ./src/index.ts\nexport 'foo' (imported as 'foo') was not found in './utils' (possible exports: bar)\n"})}),"\n",(0,r.jsx)(s.p,{children:"当你遇到该问题时，首先需要检查相关代码里 import / export 的内容是否正确，并修正相关错误。"}),"\n",(0,r.jsx)(s.p,{children:"常见的错误写法有："}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"引入了不存在的变量："}),"\n"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"// utils.ts\nexport const bar = 'bar';\n\n// index.ts\nimport { foo } from './utils';\n"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["re-export 了一个类型，但是没有添加 ",(0,r.jsx)(s.code,{children:"type"})," 修饰符，导致 SWC、Babel 等转译工具无法识别到类型导出，导致编译异常。"]}),"\n"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"// utils.ts\nexport type Foo = 'bar';\n\n// index.ts\nexport { Foo } from './utils'; // 错误写法\nexport type { Foo } from './utils'; // 正确写法\n"})}),"\n",(0,r.jsxs)(s.p,{children:["在个别情况下，以上报错是由第三方依赖引入的，你无法直接修改它。此时，如果你确定该问题不影响你的应用，那么可以添加以下配置，将 ",(0,r.jsx)(s.code,{children:"error"})," 日志修改为 ",(0,r.jsx)(s.code,{children:"warn"})," 级别："]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",meta:'title="rsbuild.config.ts"',children:"export default {\n  tools: {\n    rspack: {\n      module: {\n        parser: {\n          javascript: {\n            exportsPresence: 'warn',\n          },\n        },\n      },\n    },\n  },\n};\n"})}),"\n",(0,r.jsx)(s.p,{children:"同时，你需要尽快联系第三方依赖的开发者来修复相应的问题。"}),"\n",(0,r.jsxs)(s.blockquote,{children:["\n",(0,r.jsxs)(s.p,{children:["你可以查看 Rspack 的文档来了解 ",(0,r.jsx)(s.a,{href:"https://rspack.dev/config/module#moduleparserjavascriptexportspresence",target:"_blank",rel:"noopener noreferrer",children:"module.parser.javascript.exportsPresence"})," 的更多细节。"]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsxs)(s.h3,{id:"打包后发现-tree-shaking-没有生效",children:["打包后发现 tree shaking 没有生效？",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#打包后发现-tree-shaking-没有生效",children:"#"})]}),"\n",(0,r.jsx)(s.p,{children:"Rsbuild 在生产构建时会默认开启 Rspack 的 tree shaking 功能，tree shaking 是否能够生效，取决于代码能否满足 Rspack 的 tree shaking 条件。"}),"\n",(0,r.jsxs)(s.p,{children:["如果你发现 tree shaking 没有按照预期生效，可以检查下相关 npm 包的 ",(0,r.jsx)(s.code,{children:"sideEffects"})," 配置是否正确，如果你不了解 ",(0,r.jsx)(s.code,{children:"sideEffects"})," 的作用，或是对 tree shaking 背后的原理感兴趣，可以阅读 ",(0,r.jsx)(s.a,{href:"https://rspack.dev/guide/optimization/tree-shaking",target:"_blank",rel:"noopener noreferrer",children:"Rspack 官方文档 - Tree Shaking"}),"。"]}),"\n",(0,r.jsx)(s.p,{children:"如果你是 npm 包的开发者，可以阅读这篇文章："}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://zhuanlan.zhihu.com/p/594124786",target:"_blank",rel:"noopener noreferrer",children:"如何编写一个友好支持 Tree-shaking 的库"})}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsxs)(s.h3,{id:"打包时出现-javascript-heap-out-of-memory",children:["打包时出现 ",(0,r.jsx)(s.code,{children:"JavaScript heap out of memory"}),"?",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#打包时出现-javascript-heap-out-of-memory",children:"#"})]}),"\n",(0,r.jsx)(s.p,{children:"该报错表示打包过程中出现了内存溢出问题，大多数情况下是由于打包的内容较多，超出了 Node.js 默认的内存上限。"}),"\n",(0,r.jsxs)(s.p,{children:["如果出现 OOM 问题，最简单的方法是通过增加内存上限来解决，Node.js 提供了 ",(0,r.jsx)(s.code,{children:"--max-old-space-size"})," 选项来对此进行设置。你可以在 CLI 命令前添加 ",(0,r.jsx)(s.a,{href:"https://nodejs.org/api/cli.html#node_optionsoptions",target:"_blank",rel:"noopener noreferrer",children:"NODE_OPTIONS"})," 来设置此参数。"]}),"\n",(0,r.jsxs)(s.p,{children:["比如，在 ",(0,r.jsx)(s.code,{children:"rsbuild build"})," 命令前添加参数："]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-diff",meta:'title="package.json"',children:'{\n  "scripts": {\n-   "build": "rsbuild build"\n+   "build": "NODE_OPTIONS=--max_old_space_size=16384 rsbuild build"\n  }\n}\n'})}),"\n",(0,r.jsxs)(s.p,{children:["如果你执行的是其他命令，比如 ",(0,r.jsx)(s.code,{children:"rsbuild dev"}),"，请在对应的命令前添加参数。"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"max_old_space_size"})," 参数的值代表内存上限大小（MB），一般情况下设置为 ",(0,r.jsx)(s.code,{children:"16384"}),"（16GB）即可。"]}),"\n",(0,r.jsx)(s.p,{children:"Node.js 官方文档中有对以下参数更详细的解释："}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://nodejs.org/api/cli.html#node_optionsoptions",target:"_blank",rel:"noopener noreferrer",children:"NODE_OPTIONS"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://nodejs.org/api/cli.html#--max-old-space-sizesize-in-megabytes",target:"_blank",rel:"noopener noreferrer",children:"--max-old-space-size"})}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["除了增加内存上限，通过开启一些编译策略来提升构建效率也是一个解决方案，请参考 ",(0,r.jsx)(s.a,{href:"/guide/optimization/build-performance",children:"提升构建性能"}),"。"]}),"\n",(0,r.jsx)(s.p,{children:"如果以上方式无法解决你的问题，可能是项目中某些异常逻辑导致了内存非正常溢出。你可以排查近期的代码变更，定位问题的根因。如果无法定位，请联系我们进行排查。"}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsxs)(s.h3,{id:"打包时出现-cant-resolve-core-jsmodulesabcjs",children:["打包时出现 ",(0,r.jsx)(s.code,{children:"Can't resolve 'core-js/modules/abc.js'"}),"？",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#打包时出现-cant-resolve-core-jsmodulesabcjs",children:"#"})]}),"\n",(0,r.jsxs)(s.p,{children:["如果你在打包时出现了类似下面的报错，表示项目中的 ",(0,r.jsx)(s.a,{href:"https://github.com/zloirock/core-js",target:"_blank",rel:"noopener noreferrer",children:"core-js"})," 无法被正确引用。"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"Module not found: Can't resolve 'core-js/modules/es.error.cause.js'\n"})}),"\n",(0,r.jsxs)(s.p,{children:["通常来说，你无须在项目中安装 ",(0,r.jsx)(s.code,{children:"core-js"}),"，因为 Rsbuild 已经内置了一份 ",(0,r.jsx)(s.code,{children:"core-js"})," v3。"]}),"\n",(0,r.jsxs)(s.p,{children:["如果出现 ",(0,r.jsx)(s.code,{children:"core-js"})," 找不到的报错，可能有以下几个原因："]}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:["当前项目覆盖了 Rsbuild 内置的 ",(0,r.jsx)(s.code,{children:"alias"})," 配置，导致引用 ",(0,r.jsx)(s.code,{children:"core-js"})," 时，没有解析到正确的 ",(0,r.jsx)(s.code,{children:"core-js"})," 路径，这种情况下，你可以检查项目的 ",(0,r.jsx)(s.code,{children:"alias"})," 配置。"]}),"\n",(0,r.jsxs)(s.li,{children:["项目里某一处代码依赖了 ",(0,r.jsx)(s.code,{children:"core-js"})," v2 版本。这种情况通常需要你找出对应的代码，并升级其中的 ",(0,r.jsx)(s.code,{children:"core-js"})," 到 v3 版本。"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"node_modules"})," 中的某一个 npm 包引用了 ",(0,r.jsx)(s.code,{children:"core-js"}),"，但是没有在 ",(0,r.jsx)(s.code,{children:"dependencies"})," 中声明 ",(0,r.jsx)(s.code,{children:"core-js"})," 依赖。这种情况需要你在对应的 npm 包中声明 ",(0,r.jsx)(s.code,{children:"core-js"})," 依赖，或者在项目根目录下安装一份 ",(0,r.jsx)(s.code,{children:"core-js"}),"。"]}),"\n"]})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,o.ah)(),e.components);return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}let c=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["zh%2Fguide%2Ffaq%2Fexceptions.mdx"]={toc:[{text:"编译产物中存在未编译的 ESNext 代码？",id:"编译产物中存在未编译的-esnext-代码",depth:3},{text:"编译时报错 `You may need additional loader`？",id:"编译时报错-you-may-need-additional-loader",depth:3},{text:"编译时报错 `Error: [object Object] is not a PostCSS plugin` ?",id:"编译时报错-error-object-object-is-not-a-postcss-plugin-",depth:3},{text:"编译时报错 `export 'foo' (imported as 'foo') was not found in './utils'`？",id:"编译时报错-export-foo-imported-as-foo-was-not-found-in-utils",depth:3},{text:"打包后发现 tree shaking 没有生效？",id:"打包后发现-tree-shaking-没有生效",depth:3},{text:"打包时出现 `JavaScript heap out of memory`?",id:"打包时出现-javascript-heap-out-of-memory",depth:3},{text:"打包时出现 `Can't resolve 'core-js/modules/abc.js'`？",id:"打包时出现-cant-resolve-core-jsmodulesabcjs",depth:3}],title:"异常类问题",frontmatter:{}}}}]);