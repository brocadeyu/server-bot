"use strict";(self.webpackChunkrsbuild_website=self.webpackChunkrsbuild_website||[]).push([["2383"],{5205:function(n,e,r){r.r(e),r.d(e,{default:function(){return l}});var s=r(55367),t=r(26971);function c(n){let e=Object.assign({h1:"h1",a:"a",ul:"ul",li:"li",strong:"strong",pre:"pre",code:"code",p:"p",h2:"h2",blockquote:"blockquote"},(0,t.ah)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.h1,{id:"sourceentry",children:["source.entry",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#sourceentry",children:"#"})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.strong,{children:"类型："})}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"type Entry = Record<\n  string,\n  string | string[] | (Rspack.EntryDescription & { html?: boolean })\n>;\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.strong,{children:"默认值："})}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"const defaultEntry = {\n  // 默认支持其他后缀，如 ts、tsx、jsx、mjs、cjs\n  index: 'src/index.js',\n};\n"})}),"\n",(0,s.jsx)(e.p,{children:"用于设置构建的入口模块。"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"source.entry"})," 的用法与 Rspack 的 ",(0,s.jsx)(e.a,{href:"https://rspack.dev/config/entry",target:"_blank",rel:"noopener noreferrer",children:"entry"})," 选项类似，它们的主要区别在于，Rsbuild 会为 ",(0,s.jsx)(e.code,{children:"source.entry"})," 中的每一个入口注册 ",(0,s.jsx)(e.a,{href:"https://github.com/rspack-contrib/html-rspack-plugin",target:"_blank",rel:"noopener noreferrer",children:"html-rspack-plugin"}),"，从而生成对应的 HTML 文件。"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.strong,{children:"示例："})}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",meta:'title="rsbuild.config.ts"',children:"export default {\n  source: {\n    entry: {\n      foo: './src/pages/foo/index.ts',\n      bar: './src/pages/bar/index.ts',\n    },\n  },\n};\n"})}),"\n",(0,s.jsx)(e.p,{children:"生成的目录结构如下："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-text",children:".\n├── foo.html\n├── bar.html\n└── static\n    ├── css\n    │   ├── foo.css\n    │   └── bar.css\n    └── js\n        ├── foo.js\n        └── bar.js\n"})}),"\n",(0,s.jsxs)(e.p,{children:["如果你不需要生成 HTML 文件，可以将 ",(0,s.jsx)(e.a,{href:"/config/tools/html-plugin",children:"tools.htmlPlugin"})," 设置为 ",(0,s.jsx)(e.code,{children:"false"})," 来禁用这一行为。"]}),"\n",(0,s.jsxs)(e.h2,{id:"描述对象",children:["描述对象",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#描述对象",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"source.entry"})," 同样支持 Rspack 的 entry 描述对象写法，比如："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",meta:'title="rsbuild.config.ts"',children:"export default {\n  source: {\n    entry: {\n      foo: {\n        import: './src/foo.js',\n        runtime: 'foo',\n      },\n      bar: {\n        import: './src/bar.js',\n        runtime: 'bar',\n      },\n    },\n  },\n};\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Rsbuild 为描述对象添加了 ",(0,s.jsx)(e.code,{children:"html"})," 属性，用于控制是否生成 HTML 文件。"]}),"\n",(0,s.jsxs)(e.p,{children:["例如，",(0,s.jsx)(e.code,{children:"bar"})," 入口不生成 HTML 文件："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",meta:'title="rsbuild.config.ts"',children:"export default {\n  source: {\n    entry: {\n      foo: './src/foo.js',\n      bar: {\n        import: './src/bar.js',\n        html: false,\n      },\n    },\n  },\n};\n"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["关于描述对象的完整用法，请参考 ",(0,s.jsx)(e.a,{href:"https://rspack.dev/config/entry#%E5%85%A5%E5%8F%A3%E6%8F%8F%E8%BF%B0%E5%AF%B9%E8%B1%A1",target:"_blank",rel:"noopener noreferrer",children:"Rspack - 入口描述对象"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"基于-environment-设置",children:["基于 environment 设置",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#基于-environment-设置",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["当你面向多个 ",(0,s.jsx)(e.a,{href:"/config/environments",children:"environments"})," 构建时，可以为每个 environment 设置不同的 entry："]}),"\n",(0,s.jsxs)(e.p,{children:["比如为 ",(0,s.jsx)(e.code,{children:"web"})," 和 ",(0,s.jsx)(e.code,{children:"node"})," 环境设置不同的 entry："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"export default {\n  environments: {\n    web: {\n      source: {\n        entry: {\n          index: './src/index.client.js',\n        },\n      },\n      output: {\n        target: 'web',\n      },\n    },\n    node: {\n      source: {\n        entry: {\n          index: './src/index.server.js',\n        },\n      },\n      output: {\n        target: 'node',\n      },\n    },\n  },\n};\n"})})]})}function i(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,t.ah)(),n.components);return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}let l=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["zh%2Fconfig%2Fsource%2Fentry.mdx"]={toc:[{text:"描述对象",id:"描述对象",depth:2},{text:"基于 environment 设置",id:"基于-environment-设置",depth:2}],title:"source.entry",frontmatter:{}}}}]);