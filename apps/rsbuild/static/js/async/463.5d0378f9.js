"use strict";(self.webpackChunkrsbuild_website=self.webpackChunkrsbuild_website||[]).push([["463"],{32137:function(e,n,r){r.r(n),r.d(n,{default:function(){return a}});var s=r(55367),t=r(26971);function i(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",pre:"pre",code:"code",ul:"ul",li:"li"},(0,t.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"服务端渲染ssr",children:["服务端渲染（SSR）",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#服务端渲染ssr",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"本章节介绍如何使用 Rsbuild 实现 SSR 功能。"}),"\n",(0,s.jsxs)(n.p,{children:["值得注意的是，Rsbuild 自身不提供开箱即用的 SSR 能力，而是提供 low-level 的 API 和配置来允许框架开发者实现 SSR。如果你需要使用开箱即用的 SSR 支持，可以考虑使用基于 Rsbuild 的框架，例如 ",(0,s.jsx)(n.a,{href:"https://github.com/web-infra-dev/modern.js",target:"_blank",rel:"noopener noreferrer",children:"Modern.js"}),"。"]}),"\n",(0,s.jsxs)(n.h2,{id:"什么是-ssr",children:["什么是 SSR",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#什么是-ssr",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:'SSR 是 "Server-Side Rendering"（服务端渲染）的缩写。它表示由服务器生成网页的 HTML，并将其发送给客户端，而不是只发送一个空的 HTML 外壳，并依赖 JavaScript 来生成页面内容。'}),"\n",(0,s.jsx)(n.p,{children:"在传统的客户端渲染中，服务器会向客户端发送一个空的 HTML 外壳和一些 JavaScript 脚本，然后从服务器的 API 中获取数据，并用动态内容填充页面。这会导致页面的初始加载时间较慢，不利于用户体验和 SEO。"}),"\n",(0,s.jsx)(n.p,{children:"使用 SSR 后，服务器会生成已经包含动态内容的 HTML，并将其发送给客户端。这使得首屏加载速度更快，并对 SEO 更加友好，因为搜索引擎可以爬取到渲染后的页面。"}),"\n",(0,s.jsxs)(n.h2,{id:"文件结构",children:["文件结构",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#文件结构",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"一个典型的 SSR 应用会包含以下文件："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"- index.html\n- server.js          # 自定义服务器脚本\n- src/\n  - App.js           # 导出 App 代码\n  - index.client.js  # 客户端入口，挂载 App 组件到 Dom 元素\n  - index.server.js  # 服务端入口，通过 SSR API 渲染 App 组件\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"index.html"})," 中需要定义 SSR 渲染占位符："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<div id="root">\x3c!--app-content--\x3e</div>\n'})}),"\n",(0,s.jsxs)(n.h2,{id:"创建-ssr-配置",children:["创建 SSR 配置",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#创建-ssr-配置",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"SSR 场景下，需要同时产出 web 和 node 两种类型的产物，分别用于客户端渲染（CSR）和服务器端渲染（SSR）。"}),"\n",(0,s.jsxs)(n.p,{children:["此时可以使用 Rsbuild 的",(0,s.jsx)(n.a,{href:"/guide/advanced/environments",children:"多环境构建"}),"能力，定义如下配置："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:"title=rsbuild.config.ts",children:"export default {\n  environments: {\n    // 配置 web 环境，用于浏览器端\n    web: {\n      source: {\n        entry: {\n          index: './src/index.client.js',\n        },\n      },\n      output: {\n        // 浏览器产物的 target 类型为 'web'\n        target: 'web',\n      },\n      html: {\n        // 自定义 HTML 模版\n        template: './index.html',\n      },\n    },\n    // 配置 node 环境，用于 SSR\n    node: {\n      source: {\n        entry: {\n          index: './src/index.server.js',\n        },\n      },\n      output: {\n        // Node.js 产物的 target 类型为 'node'\n        target: 'node',\n      },\n    },\n  },\n};\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"自定义-server",children:["自定义 Server",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#自定义-server",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Rsbuild 并未内置 SSR 渲染能力，你可以通过 Rsbuild 的",(0,s.jsx)(n.a,{href:"/guide/basic/server#%E8%87%AA%E5%AE%9A%E4%B9%89-server",children:"自定义 Server"})," 和 ",(0,s.jsx)(n.a,{href:"/guide/advanced/environments#environment-api",children:"Environment API"})," 实现 SSR 渲染："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:"title=server.mjs",children:"import express from 'express';\nimport { createRsbuild, loadConfig } from '@rsbuild/core';\n\n// 实现 SSR 渲染功能\nconst serverRender = (serverAPI) => async (_req, res) => {\n  // 加载 SSR bundle\n  const indexModule = await serverAPI.environments.node.loadBundle('index');\n\n  const markup = indexModule.render();\n\n  const template = await serverAPI.environments.web.getTransformedHtml('index');\n\n  // 将 SSR 渲染内容插入到 HTML 模版中\n  const html = template.replace('\x3c!--app-content--\x3e', markup);\n\n  res.writeHead(200, {\n    'Content-Type': 'text/html',\n  });\n  res.end(html);\n};\n\n// 自定义 Server\nasync function startDevServer() {\n  const { content } = await loadConfig({});\n\n  const rsbuild = await createRsbuild({\n    rsbuildConfig: content,\n  });\n\n  const app = express();\n\n  const rsbuildServer = await rsbuild.createDevServer();\n\n  const serverRenderMiddleware = serverRender(rsbuildServer);\n\n  // 访问 /index.html 时进行 SSR 渲染\n  app.get('/', async (req, res, next) => {\n    try {\n      await serverRenderMiddleware(req, res, next);\n    } catch (err) {\n      logger.error('SSR render error, downgrade to CSR...\\n', err);\n      next();\n    }\n  });\n\n  app.use(rsbuildServer.middlewares);\n\n  const httpServer = app.listen(rsbuildServer.port, async () => {\n    await rsbuildServer.afterListen();\n  });\n\n  rsbuildServer.connectWebSocket({ server: httpServer });\n}\n\nstartDevServer(process.cwd());\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"修改启动脚本",children:["修改启动脚本",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#修改启动脚本",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["使用自定义 Server 后，需要将启动命令由 ",(0,s.jsx)(n.code,{children:"rsbuild dev"})," 改为 ",(0,s.jsx)(n.code,{children:"node ./server.mjs"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["如果需要预览 SSR 渲染的线上效果，同样需要修改预览命令。SSR Prod Server 示例参考：",(0,s.jsx)(n.a,{href:"https://github.com/rspack-contrib/rspack-examples/blob/main/rsbuild/ssr-express/prod-server.mjs",target:"_blank",rel:"noopener noreferrer",children:"Example"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",meta:"title=package.json",children:'{\n  "scripts": {\n    "build": "rsbuild build",\n    "dev": "node ./server.mjs",\n    "preview": "node ./prod-server.mjs"\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["现在，执行 ",(0,s.jsx)(n.code,{children:"npm run dev"})," 命令即可启动带有 SSR 渲染功能的开发服务器，访问 ",(0,s.jsx)(n.code,{children:"http://localhost:3000/"})," 即可看到 SSR 内容已经渲染到了 HTML 页面上。"]}),"\n",(0,s.jsxs)(n.h2,{id:"获取资源清单",children:["获取资源清单",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#获取资源清单",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["默认情况下，和当前页面关联的 scripts 和 links 会自动插入到 HTML 模版中，此时通过 ",(0,s.jsx)(n.a,{href:"/guide/advanced/environments#environment-api",children:"getTransformedHtml"})," 即可获取编译后的 HTML 模版内容。"]}),"\n",(0,s.jsxs)(n.p,{children:["当需要在服务器端动态生成 HTML 时，你需要将 JavaScript 和 CSS 资源的 URL 注入到 HTML 中。通过配置 ",(0,s.jsx)(n.a,{href:"/config/output/manifest",children:"output.manifest"}),"，你可以方便地获取这些资源的清单信息。示例如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:"title=rsbuild.config.ts",children:"export default {\n  output: {\n    manifest: true,\n  },\n};\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:"title=server.ts",children:"async function renderHtmlPage(): Promise<string> {\n  const manifest = await fs.promises.readFile('./dist/manifest.json', 'utf-8');\n\n  const { entries } = JSON.parse(manifest);\n  const { js, css } = entries['index'].initial;\n\n  const scriptTags = js\n    .map((file) => `<script src=\"${file}\" defer><\/script>`)\n    .join('\\n');\n  const styleTags = css\n    .map((file) => `<link rel=\"stylesheet\" href=\"${file}\">`)\n    .join('\\n');\n\n  return `\n    <!DOCTYPE html>\n    <html>\n      <head>\n        ${scriptTags}\n        ${styleTags}\n      </head>\n      <body>\n        <div id=\"root\"></div>\n      </body>\n    </html>`;\n}\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"示例项目",children:["示例项目",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#示例项目",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/rspack-contrib/rspack-examples/blob/main/rsbuild/ssr-express",target:"_blank",rel:"noopener noreferrer",children:"SSR + Express Example"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/rspack-contrib/rspack-examples/blob/main/rsbuild/ssr-express-with-manifest",target:"_blank",rel:"noopener noreferrer",children:"SSR + Express + Manifest Example"})}),"\n"]})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}let a=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["zh%2Fguide%2Fadvanced%2Fssr.mdx"]={toc:[{text:"什么是 SSR",id:"什么是-ssr",depth:2},{text:"文件结构",id:"文件结构",depth:2},{text:"创建 SSR 配置",id:"创建-ssr-配置",depth:2},{text:"自定义 Server",id:"自定义-server",depth:2},{text:"修改启动脚本",id:"修改启动脚本",depth:2},{text:"获取资源清单",id:"获取资源清单",depth:2},{text:"示例项目",id:"示例项目",depth:2}],title:"服务端渲染（SSR）",frontmatter:{}}}}]);