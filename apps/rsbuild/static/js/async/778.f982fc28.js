"use strict";(self.webpackChunkrsbuild_website=self.webpackChunkrsbuild_website||[]).push([["778"],{71205:function(n,e,r){r.r(e),r.d(e,{default:function(){return o}});var i=r(55367),s=r(26971);function d(n){let e=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",code:"code",ul:"ul",li:"li",pre:"pre",h3:"h3",strong:"strong"},(0,s.ah)(),n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.h1,{id:"多环境构建",children:["多环境构建",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#多环境构建",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["Rsbuild 支持同时为多个环境构建产物。你可以使用 ",(0,i.jsx)(e.a,{href:"/config/environments",children:"environments"})," 来并行构建多个环境，并为每个环境设置不同的 Rsbuild 配置。"]}),"\n",(0,i.jsxs)(e.h2,{id:"什么是-environment",children:["什么是 environment",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#什么是-environment",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"environment"})," 指的是构建产物的运行环境，常见的运行环境有浏览器、Node.js 和 Workers。Rsbuild 允许你定义任意的 environment 名称，并为这些 environment 分别设置构建选项。"]}),"\n",(0,i.jsxs)(e.p,{children:["一个典型的场景是服务器端渲染（SSR），你可以定义 ",(0,i.jsx)(e.code,{children:"web"})," 和 ",(0,i.jsx)(e.code,{children:"node"})," 两个 environments，它们的构建目标（",(0,i.jsx)(e.a,{href:"/config/output/target",children:"output.target"}),"）分别是 ",(0,i.jsx)(e.code,{children:"web"})," 和 ",(0,i.jsx)(e.code,{children:"node"}),"，并用于客户端渲染（CSR）和服务器端渲染（SSR）场景。"]}),"\n",(0,i.jsx)(e.p,{children:"此外，你还可以为同一个构建目标定义不同的 environment，例如："}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["定义 ",(0,i.jsx)(e.code,{children:"rsc"})," 和 ",(0,i.jsx)(e.code,{children:"ssr"})," 两个环境，它们的构建目标都是 ",(0,i.jsx)(e.code,{children:"node"}),"，分别用于 React Server Components 和 SSR。"]}),"\n",(0,i.jsxs)(e.li,{children:["定义 ",(0,i.jsx)(e.code,{children:"desktop"})," 和 ",(0,i.jsx)(e.code,{children:"mobile"})," 两个环境，它们的构建目标都是 ",(0,i.jsx)(e.code,{children:" web"}),"，分别用于桌面端浏览器和移动端浏览器。"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["如果没有 ",(0,i.jsx)(e.code,{children:"environments"})," 配置，你需要为这些场景定义多份配置，并执行多次独立的 Rsbuild 构建。现在通过 ",(0,i.jsx)(e.code,{children:"environments"})," 配置，你可以在一次 Rsbuild 构建中完成多种产物的构建（Rsbuild 基于 Rspack 的 ",(0,i.jsx)(e.code,{children:"MultiCompiler"})," 来实现这一点）。"]}),"\n",(0,i.jsxs)(e.p,{children:["Rsbuild 中的每个 ",(0,i.jsx)(e.code,{children:"environment"})," 关联一份 Rsbuild 配置、一份 Rspack 配置和一份构建产物。Rsbuild 插件的开发者可以基于 ",(0,i.jsx)(e.code,{children:"environment"})," 名称，对指定环境的构建流程进行定制，如修改 Rsbuild 或 Rspack 配置、注册或移除插件、调整 Rspack 规则和查看静态资源信息等。"]}),"\n",(0,i.jsxs)(e.h2,{id:"多环境配置",children:["多环境配置",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#多环境配置",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["Rsbuild 支持通过 ",(0,i.jsx)(e.a,{href:"/config/environments",children:"environments"})," 为每个环境定义不同的 Rsbuild 配置。"]}),"\n",(0,i.jsx)(e.p,{children:"例如，假如你的项目希望支持 SSR 功能，你需要分别为 client 和 SSR 定义不同的配置，你可以分别定义一个 web 和 node 的 environment。"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",meta:"title=rsbuild.config.ts",children:"export default {\n  environments: {\n    // 配置 web 环境，用于浏览器端\n    web: {\n      source: {\n        entry: {\n          index: './src/index.client.js',\n        },\n      },\n      output: {\n        // 浏览器产物的 target 类型为 'web'\n        target: 'web',\n      },\n      resolve: {\n        alias: {\n          '@common': './src/client/common',\n        },\n      },\n    },\n    // 配置 node 环境，用于 SSR\n    node: {\n      source: {\n        entry: {\n          index: './src/index.server.js',\n        },\n      },\n      output: {\n        // Node.js 产物的 target 类型为 'node'\n        target: 'node',\n      },\n      resolve: {\n        alias: {\n          '@common': './src/server/common',\n        },\n      },\n    },\n  },\n};\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"配置合并",children:["配置合并",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#配置合并",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["当你配置 ",(0,i.jsx)(e.code,{children:"environments"})," 时，Rsbuild 会将 ",(0,i.jsx)(e.code,{children:"environments"})," 里的配置与外层的基础配置进行合并。合并时，",(0,i.jsx)(e.code,{children:"environments"})," 中的配置具有更高的优先级。"]}),"\n",(0,i.jsx)(e.p,{children:"在上述例子中，在合并配置后，Rsbuild 会生成两份独立的 environments 配置，分别用于构建 web 和 node 环境的产物。"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"web environments config"}),"：由 base config 和 ",(0,i.jsx)(e.code,{children:"environments.web"})," 合并生成"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"node environments config"}),"：由 base config 和 ",(0,i.jsx)(e.code,{children:"environments.node"})," 合并生成"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"接着，Rsbuild 会基于这些 environments 配置，在内部生成两份 Rspack 配置，并通过 Rspack 的 MultiCompiler 来执行单次构建。"}),"\n",(0,i.jsxs)(e.h3,{id:"配置调试",children:["配置调试",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#配置调试",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["当你在项目根目录下执行命令 ",(0,i.jsx)(e.code,{children:"npx rsbuild inspect"})," 后，会发现有如下输出："]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"rsbuild.config.[name].mjs: 表示在构建时某个 environment 对应使用的 Rsbuild 配置。"}),"\n",(0,i.jsx)(e.li,{children:"rspack.config.[name].mjs: 表示在构建时某个 environment 对应使用的 Rspack 配置。"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"➜ npx rsbuild inspect\n\nInspect config succeed, open following files to view the content:\n\n  - Rsbuild Config (web): /project/dist/.rsbuild/rsbuild.config.web.mjs\n  - Rsbuild Config (node): /project/dist/.rsbuild/rsbuild.config.node.mjs\n  - Rspack Config (web): /project/dist/.rsbuild/rspack.config.web.mjs\n  - Rspack Config (node): /project/dist/.rsbuild/rspack.config.node.mjs\n"})}),"\n",(0,i.jsxs)(e.h2,{id:"默认-environment",children:["默认 environment",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#默认-environment",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["当 environments 未指定时，Rsbuild 默认会根据当前的产物类型 (",(0,i.jsx)(e.a,{href:"/config/output/target",children:"output.target"})," 的值) 创建一个同名的环境。"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",meta:"title=rsbuild.config.ts",children:"export default {\n  output: {\n    target: 'web',\n  },\n};\n"})}),"\n",(0,i.jsx)(e.p,{children:"以上配置相当于下面配置的语法糖："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",meta:"title=rsbuild.config.ts",children:"export default {\n  environments: {\n    web: {\n      output: {\n        target: 'web',\n      },\n    },\n  },\n};\n"})}),"\n",(0,i.jsxs)(e.h2,{id:"仅构建指定环境",children:["仅构建指定环境",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#仅构建指定环境",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["默认情况下，当你执行 ",(0,i.jsx)(e.code,{children:"rsbuild dev"})," 或 ",(0,i.jsx)(e.code,{children:"rsbuild build"})," 时，Rsbuild 会构建所有 Rsbuild 配置中的环境。你可以通过 ",(0,i.jsx)(e.code,{children:"--environment <name>"})," 仅构建指定环境。"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# 构建所有环境\nrsbuild dev\n\n# 仅构建 web 环境\nrsbuild dev --environment web\n\n# 构建 web 和 ssr 环境\nrsbuild dev --environment web --environment node\n\n# 构建多个环境可以简写为：\nrsbuild dev --environment web,node\n"})}),"\n",(0,i.jsxs)(e.h2,{id:"为指定环境添加插件",children:["为指定环境添加插件",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#为指定环境添加插件",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["通过 ",(0,i.jsx)(e.a,{href:"/config/plugins",children:"plugins"})," 字段配置的插件支持在所有环境下运行，如果你希望某个插件仅在指定环境下运行时，将该插件配置在特定 ",(0,i.jsx)(e.code,{children:"environment"})," 下即可。"]}),"\n",(0,i.jsx)(e.p,{children:"例如，仅在 web 环境下开启 React 插件："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",meta:"title=rsbuild.config.ts",children:"import { pluginReact } from '@rsbuild/plugin-react';\n\nexport default {\n  environments: {\n    web: {\n      output: {\n        target: 'web',\n      },\n      plugins: [pluginReact()],\n    },\n    node: {\n      output: {\n        target: 'node',\n      },\n    },\n  },\n};\n"})}),"\n",(0,i.jsxs)(e.p,{children:["如果你是插件开发者，可查看 ",(0,i.jsx)(e.a,{href:"/plugins/dev/index#environment-%E6%8F%92%E4%BB%B6",children:"开发 Environment 插件"})," 了解详情。"]}),"\n",(0,i.jsxs)(e.h2,{id:"插件-api",children:["插件 API",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#插件-api",children:"#"})]}),"\n",(0,i.jsxs)(e.h3,{id:"更新配置",children:["更新配置",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#更新配置",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["Rsbuild 支持通过 ",(0,i.jsx)(e.a,{href:"/plugins/dev/hooks#modifyrsbuildconfig",children:"modifyRsbuildConfig"})," 钩子新增或修改 environment 配置。"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"const myPlugin = () => ({\n  setup: (api) => {\n    api.modifyRsbuildConfig((config, { mergeRsbuildConfig }) => {\n      return mergeRsbuildConfig(config, {\n        environments: {\n          web1: {\n            source: {\n              entry: {\n                index: './src/web1/index',\n              },\n            },\n          },\n        },\n      });\n    });\n  },\n});\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"配置特定-environment",children:["配置特定 environment",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#配置特定-environment",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["Rsbuild 支持通过 ",(0,i.jsx)(e.a,{href:"/plugins/dev/hooks#modifyenvironmentconfig",children:"modifyEnvironmentConfig"})," 钩子修改特定 environment 的 Rsbuild 配置。"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"const myPlugin = () => ({\n  setup: (api) => {\n    api.modifyEnvironmentConfig((config, { name }) => {\n      if (name !== 'web') {\n        return config;\n      }\n      config.html.title = 'My Default Title';\n    });\n  },\n});\n"})}),"\n",(0,i.jsxs)(e.h2,{id:"environment-上下文",children:["Environment 上下文",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#environment-上下文",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.a,{href:"/api/javascript-api/environment-api#environment-context",children:"Environment context"})," 是一个只读对象，提供一些和当前环境有关的上下文信息。Rsbuild 支持在 plugin hook 中获取 environment context 信息。"]}),"\n",(0,i.jsxs)(e.p,{children:["对于一些与构建环境相关的 plugin hooks（如 ",(0,i.jsx)(e.a,{href:"/plugins/dev/hooks#modifyrspackconfig",children:"modifyRspackConfig"}),"、",(0,i.jsx)(e.a,{href:"/plugins/dev/hooks#modifybundlerchain",children:"modifyBundlerChain"})," 等）, Rsbuild 支持通过 ",(0,i.jsx)(e.code,{children:"environment"})," 参数获取当前 environment 上下文。"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"const myPlugin = () => ({\n  setup: (api) => {\n    api.modifyRspackConfig((rspackConfig, { environment }) => {\n      if (environment.name === 'node') {\n        // do some thing\n      }\n    });\n  },\n});\n"})}),"\n",(0,i.jsxs)(e.p,{children:["对于一些全局的 plugin hooks（如 ",(0,i.jsx)(e.a,{href:"/plugins/dev/hooks#ondevcompiledone",children:"onDevCompileDone"}),"、",(0,i.jsx)(e.a,{href:"/plugins/dev/hooks#onbeforestartdevserver",children:"onBeforeStartDevServer"})," 等）， Rsbuild 支持通过 ",(0,i.jsx)(e.code,{children:"environments"})," 参数获取所有环境的上下文。"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"const myPlugin = () => ({\n  setup: (api) => {\n    api.onDevCompileDone(({ environments }) => {\n      environments.forEach((environment) => {\n        console.log('environment', environment);\n      });\n    });\n  },\n});\n"})}),"\n",(0,i.jsxs)(e.h2,{id:"environment-api",children:["Environment API",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#environment-api",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["Rsbuild Server 提供了一系列和构建环境相关的 API，用户可通过 Rsbuild ",(0,i.jsx)(e.a,{href:"/api/javascript-api/environment-api#environment-api",children:"environment API"})," 在服务器端操作特定环境下的构建产物。"]}),"\n",(0,i.jsxs)(e.p,{children:["你可以在 ",(0,i.jsx)(e.a,{href:"/config/dev/setup-middlewares",children:"Rsbuild DevMiddleware"})," 或",(0,i.jsx)(e.a,{href:"/api/javascript-api/instance#rsbuildcreatedevserver",children:"自定义 Server"})," 中使用 environment API。"]}),"\n",(0,i.jsx)(e.p,{children:"例如，你可以通过 Rsbuild environment API 在开发模式下快速实现一个 SSR 功能："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"import express from 'express';\nimport { createRsbuild, loadConfig } from '@rsbuild/core';\n\nconst serverRender = (serverAPI) => async (_req, res) => {\n  const indexModule = await serverAPI.environments.node.loadBundle('index');\n\n  const markup = indexModule.render();\n\n  const template = await serverAPI.environments.web.getTransformedHtml('index');\n\n  const html = template.replace('\x3c!--app-content--\x3e', markup);\n\n  res.writeHead(200, {\n    'Content-Type': 'text/html',\n  });\n  res.end(html);\n};\n\nexport async function startDevServer() {\n  const { content } = await loadConfig({});\n\n  // Init Rsbuild\n  const rsbuild = await createRsbuild({\n    rsbuildConfig: content,\n  });\n\n  const app = express();\n\n  // Create Rsbuild DevServer instance\n  const rsbuildServer = await rsbuild.createDevServer();\n\n  const serverRenderMiddleware = serverRender(rsbuildServer);\n\n  app.get('/', async (req, res, next) => {\n    try {\n      await serverRenderMiddleware(req, res, next);\n    } catch (err) {\n      logger.error('SSR render error, downgrade to CSR...\\n', err);\n      next();\n    }\n  });\n\n  // Apply Rsbuild’s built-in middlewares\n  app.use(rsbuildServer.middlewares);\n\n  // ...\n}\n"})}),"\n",(0,i.jsxs)(e.p,{children:["详细使用情况可参考：",(0,i.jsx)(e.a,{href:"https://github.com/rspack-contrib/rspack-examples/tree/main/rsbuild/ssr-express",target:"_blank",rel:"noopener noreferrer",children:"SSR + Express 示例"}),"。"]}),"\n",(0,i.jsxs)(e.h2,{id:"构建顺序",children:["构建顺序",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#构建顺序",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"默认情况下，Rsbuild 会并行构建所有环境。"}),"\n",(0,i.jsxs)(e.p,{children:["如果你需要控制不同环境之间的构建顺序，可以通过 Rspack 的 ",(0,i.jsx)(e.a,{href:"https://rspack.dev/zh/config/other-options#dependencies",target:"_blank",rel:"noopener noreferrer",children:"dependencies"})," 配置来设置构建依赖关系。"]}),"\n",(0,i.jsxs)(e.p,{children:["例如，假设你需要先完成 ",(0,i.jsx)(e.code,{children:"web"})," 环境的构建，再开始构建 ",(0,i.jsx)(e.code,{children:"node"})," 环境，可以添加如下配置："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",meta:"title=rsbuild.config.ts",children:"export default {\n  environments: {\n    web: {\n      tools: {\n        rspack: {\n          name: 'foo',\n        },\n      },\n    },\n    node: {\n      tools: {\n        rspack: {\n          dependencies: ['foo'],\n        },\n      },\n    },\n  },\n};\n"})}),"\n",(0,i.jsx)(e.p,{children:"我们可以通过一个简单的插件来测试多个环境的构建顺序："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"const testPlugin: RsbuildPlugin = {\n  name: 'test-plugin',\n  setup(api) {\n    api.onBeforeEnvironmentCompile(({ environment }) => {\n      console.log('build start:', environment.name);\n    });\n\n    api.onAfterEnvironmentCompile(({ stats, environment }) => {\n      console.log('build done:', environment.name);\n      console.log('stats', stats);\n    });\n  },\n};\n\n// 插件会依次输出：\n// - build start: web\n// - build done: web\n// - stats: { ... }\n// - build start: node\n// - build done: node\n// - stats: { ... }\n"})})]})}function t(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}let o=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["zh%2Fguide%2Fadvanced%2Fenvironments.mdx"]={toc:[{text:"什么是 environment",id:"什么是-environment",depth:2},{text:"多环境配置",id:"多环境配置",depth:2},{text:"配置合并",id:"配置合并",depth:3},{text:"配置调试",id:"配置调试",depth:3},{text:"默认 environment",id:"默认-environment",depth:2},{text:"仅构建指定环境",id:"仅构建指定环境",depth:2},{text:"为指定环境添加插件",id:"为指定环境添加插件",depth:2},{text:"插件 API",id:"插件-api",depth:2},{text:"更新配置",id:"更新配置",depth:3},{text:"配置特定 environment",id:"配置特定-environment",depth:3},{text:"Environment 上下文",id:"environment-上下文",depth:2},{text:"Environment API",id:"environment-api",depth:2},{text:"构建顺序",id:"构建顺序",depth:2}],title:"多环境构建",frontmatter:{}}}}]);