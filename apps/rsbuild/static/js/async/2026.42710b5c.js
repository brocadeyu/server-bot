"use strict";(self.webpackChunkrsbuild_website=self.webpackChunkrsbuild_website||[]).push([["2026"],{91597:function(e,n,s){s.r(n),s.d(n,{default:function(){return l}});var t=s(55367),i=s(26971);function a(e){let n=Object.assign({h1:"h1",a:"a",ul:"ul",li:"li",strong:"strong",pre:"pre",code:"code",p:"p",blockquote:"blockquote",h2:"h2",div:"div"},(0,i.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"outputfilename",children:["output.filename",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#outputfilename",children:"#"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Type:"})}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"type FilenameConfig = {\n  html?: string;\n  js?:\n    | string\n    | ((\n        pathData: Rspack.PathData,\n        assetInfo: Rspack.JsAssetInfo | undefined,\n      ) => string);\n  css?:\n    | string\n    | ((\n        pathData: Rspack.PathData,\n        assetInfo: Rspack.JsAssetInfo | undefined,\n      ) => string);\n  svg?: string;\n  font?: string;\n  image?: string;\n  media?: string;\n  assets?: string;\n};\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Default:"})}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Development mode\nconst devDefaultFilename = {\n  html: '[name].html',\n  js: '[name].js',\n  css: '[name].css',\n  svg: '[name].[contenthash:8].svg',\n  font: '[name].[contenthash:8][ext]',\n  image: '[name].[contenthash:8][ext]',\n  media: '[name].[contenthash:8][ext]',\n  assets: '[name].[contenthash:8][ext]',\n};\n\n// Production mode\nconst prodDefaultFilename = {\n  html: '[name].html',\n  js: output.target === 'node' ? '[name].js' : '[name].[contenthash:8].js',\n  css: '[name].[contenthash:8].css',\n  svg: '[name].[contenthash:8].svg',\n  font: '[name].[contenthash:8][ext]',\n  image: '[name].[contenthash:8][ext]',\n  media: '[name].[contenthash:8][ext]',\n  assets: '[name].[contenthash:8][ext]',\n};\n"})}),"\n",(0,t.jsx)(n.p,{children:"Sets the filename of dist files."}),"\n",(0,t.jsxs)(n.p,{children:["After the production build, Rsbuild will add a hash in the middle of the filename by default. If you don't need to add it, you can set ",(0,t.jsx)(n.a,{href:"/config/output/filename-hash",children:"output.filenameHash"})," to ",(0,t.jsx)(n.code,{children:"false"})," to disable this behavior."]}),"\n",(0,t.jsx)(n.p,{children:"The following are the details of each filename:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"html"}),": The name of the HTML file."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"js"}),": The name of the JavaScript files."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"css"}),": The name of the CSS files."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"svg"}),": The name of the SVG images."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"font"}),": The name of the font files."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"image"}),": The name of non-SVG images."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"media"}),": The name of media assets, such as video."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"assets"}),": The name of other static assets. Such as the assets defined in ",(0,t.jsx)(n.a,{href:"/guide/basic/static-assets#extend-asset-types",children:"Extend Asset Types"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["See ",(0,t.jsx)(n.a,{href:"/guide/basic/output-files",children:"Output Files"})," for more information."]}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"example",children:["Example",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#example",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["To set the name of the JavaScript file to ",(0,t.jsx)(n.code,{children:"[name]_script.js"}),", use the following configuration:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"export default {\n  output: {\n    filename: {\n      js:\n        process.env.NODE_ENV === 'production'\n          ? '[name]_script.[contenthash:8].js'\n          : '[name]_script.js',\n    },\n  },\n};\n"})}),"\n",(0,t.jsxs)(n.div,{className:"rspress-directive tip",children:[(0,t.jsx)(n.div,{className:"rspress-directive-title",children:"Filename hash"}),(0,t.jsxs)(n.div,{className:"rspress-directive-content",children:[(0,t.jsxs)(n.p,{children:["Usually, Rsbuild only set the filename hash in the production mode (i.e., when ",(0,t.jsx)(n.code,{children:"process.env.NODE_ENV === 'production'"}),")."]}),"\n",(0,t.jsx)(n.p,{children:"If you set the filename hash in the development mode, it may cause HMR to fail (especially for CSS files). This is because every time the file content changes, the hash value changes, preventing bundler from reading the latest file content.\n"})]})]}),"\n",(0,t.jsxs)(n.h2,{id:"template-strings",children:["Template Strings",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#template-strings",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["In the value of ",(0,t.jsx)(n.code,{children:"output.filename"}),", you can use template strings to dynamically generate file names."]}),"\n",(0,t.jsx)(n.p,{children:"Common template strings include:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"[name]"})," - entry name, which is the key of ",(0,t.jsx)(n.a,{href:"/config/source/entry",children:"source.entry"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"[contenthash]"})," - hash value generated based on file content."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"[contenthash:<length>]"})," - hash value generated based on file content, with specified hash length."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"[ext]"})," - file extension, including the dot."]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["For more template strings, refer to ",(0,t.jsx)(n.a,{href:"https://rspack.dev/config/output#template-string",target:"_blank",rel:"noopener noreferrer",children:"Rspack - Template String"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.div,{className:"rspress-directive tip",children:[(0,t.jsx)(n.div,{className:"rspress-directive-title",children:"TIP"}),(0,t.jsxs)(n.div,{className:"rspress-directive-content",children:["\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"filename.html"})," can only use certain template strings like ",(0,t.jsx)(n.code,{children:"[name]"})," and ",(0,t.jsx)(n.code,{children:"[contenthash:<length>]"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"filename.js"})," and ",(0,t.jsx)(n.code,{children:"filename.css"})," do not support ",(0,t.jsx)(n.code,{children:"[ext]"}),"."]}),"\n"]}),"\n"]})]}),"\n",(0,t.jsxs)(n.h2,{id:"filename-of-async-modules",children:["Filename of Async Modules",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#filename-of-async-modules",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"When you import a module via dynamic import, the module will be bundled into a single file, and its default naming rules are as follows:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["In the development mode, the filename will be generated based on the module path, such as ",(0,t.jsx)(n.code,{children:"dist/static/js/async/src_add_ts.js"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["In the production mode, it will be a random numeric id, such as ",(0,t.jsx)(n.code,{children:"dist/static/js/async/798.27e3083e.js"}),". This is to avoid leaking the source code path in the production mode, and the number of characters is also less."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",meta:'title="src/index.ts"',children:"const { add } = await import('./add.ts');\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If you want to specify a fixed name for the async module, you can use the ",(0,t.jsx)(n.a,{href:"https://rspack.dev/api/modules#magic-comments",target:"_blank",rel:"noopener noreferrer",children:"magic comments"})," provided by Rspack to achieve this, using ",(0,t.jsx)(n.code,{children:"webpackChunkName "})," to specify the module name:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",meta:'title="src/index.ts"',children:"const { add } = await import(\n  /* webpackChunkName: \"my-chunk-name\" */ './add.ts'\n);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["After specifying the module name as above, the generated file will be ",(0,t.jsx)(n.code,{children:"dist/static/js/async/my-chunk-name.js"}),"."]}),"\n",(0,t.jsxs)(n.h2,{id:"using-function",children:["Using Function",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#using-function",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["You can pass a function to ",(0,t.jsx)(n.code,{children:"output.filename.js"})," or ",(0,t.jsx)(n.code,{children:"output.filename.css"}),", allowing you to dynamically generate filenames based on file information:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"export default {\n  output: {\n    filename: {\n      js: (pathData, assetInfo) => {\n        console.log(pathData); // You can check the contents of pathData here\n\n        if (pathData.chunk?.name === 'index') {\n          const isProd = process.env.NODE_ENV === 'production';\n          return isProd ? '[name].[contenthash:8].js' : '[name].js';\n        }\n\n        return '/some-path/[name].js';\n      },\n      css: (pathData, assetInfo) => {\n        if (pathData.chunk?.name === 'index') {\n          const isProd = process.env.NODE_ENV === 'production';\n          return isProd ? '[name].[contenthash:8].css' : '[name].css';\n        }\n\n        return '/some-path/[name].css';\n      },\n    },\n  },\n};\n"})}),"\n",(0,t.jsxs)(n.div,{className:"rspress-directive tip",children:[(0,t.jsx)(n.div,{className:"rspress-directive-title",children:"TIP"}),(0,t.jsx)(n.div,{className:"rspress-directive-content",children:(0,t.jsxs)(n.p,{children:["Except for ",(0,t.jsx)(n.code,{children:"output.filename.js"}),", other types of files currently do not support using functions.\n"]})})]}),"\n",(0,t.jsxs)(n.h2,{id:"query-hash",children:["Query Hash",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#query-hash",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"If you need to generate hash values on the URL query of assets, you can refer to:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const isProd = process.env.NODE_ENV === 'production';\n\nexport default {\n  output: {\n    filename: {\n      js: isProd ? '[name].js?v=[contenthash:8]' : `[name].js`,\n      css: isProd ? '[name].css?v=[contenthash:8]' : `[name].css`,\n    },\n  },\n};\n"})}),"\n",(0,t.jsx)(n.p,{children:"In this case, the filenames of JS and CSS will not include the hash, while the URLs in the HTML will contain a hash query."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<!doctype html>\n<html>\n  <head>\n    <script defer src="/static/js/index.js?v=b8565050"><\/script>\n    <link href="/static/css/index.css?v=02d157ca" rel="stylesheet" />\n  </head>\n</html>\n'})})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}let l=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["en%2Fconfig%2Foutput%2Ffilename.mdx"]={toc:[{text:"Example",id:"example",depth:2},{text:"Template Strings",id:"template-strings",depth:2},{text:"Filename of Async Modules",id:"filename-of-async-modules",depth:2},{text:"Using Function",id:"using-function",depth:2},{text:"Query Hash",id:"query-hash",depth:2}],title:"output.filename",frontmatter:{}}}}]);