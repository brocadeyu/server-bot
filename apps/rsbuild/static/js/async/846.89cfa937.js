"use strict";(self.webpackChunkrsbuild_website=self.webpackChunkrsbuild_website||[]).push([["846"],{90376:function(e,n,s){s.r(n),s.d(n,{default:function(){return a}});var r=s(55367),i=s(26971),d=s(38146);function c(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",code:"code",ul:"ul",li:"li",h3:"h3",pre:"pre",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",div:"div",ol:"ol"},(0,i.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"环境变量",children:["环境变量",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#环境变量",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Rsbuild 支持在构建过程中向代码中注入环境变量或表达式，这对于区分运行环境、替换常量值等场景很有帮助。"}),"\n",(0,r.jsx)(n.p,{children:"本章节将介绍如何在 Rsbuild 中使用环境变量。"}),"\n",(0,r.jsxs)(n.h2,{id:"默认环境变量",children:["默认环境变量",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#默认环境变量",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Rsbuild 默认通过 ",(0,r.jsx)(n.a,{href:"#%E4%BD%BF%E7%94%A8-define",children:"source.define"})," 向代码中注入以下环境变量，它们会在构建时被替换为指定的值："]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"import.meta.env"})," 包含以下环境变量："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#importmetaenvmode",children:"import.meta.env.MODE"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#importmetaenvdev",children:"import.meta.env.DEV"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#importmetaenvprod",children:"import.meta.env.PROD"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#importmetaenvbase_url",children:"import.meta.env.BASE_URL"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#importmetaenvasset_prefix",children:"import.meta.env.ASSET_PREFIX"})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"process.env"})," 包含以下环境变量："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#processenvbase_url",children:"process.env.BASE_URL"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#processenvasset_prefix",children:"process.env.ASSET_PREFIX"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#processenvnode_env",children:"process.env.NODE_ENV"}),"：该变量由 Rspack 注入，如需关闭或修改，可参考 ",(0,r.jsx)(n.a,{href:"https://rspack.dev/zh/config/optimization#optimizationnodeenv",target:"_blank",rel:"noopener noreferrer",children:"Rspack - optimization.nodeEnv"})]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"importmetaenvmode",children:["import.meta.env.MODE",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#importmetaenvmode",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["你可以在 client 代码中使用 ",(0,r.jsx)(n.code,{children:"import.meta.env.MODE"})," 来读取 ",(0,r.jsx)(n.a,{href:"/config/mode",children:"mode"})," 配置项的值。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"if (import.meta.env.MODE === 'development') {\n  console.log('this is development mode');\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"在开发模式，以上代码会被编译为："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"if (true) {\n  console.log('this is development mode');\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"在生产模式，以上代码会被编译为："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"if (false) {\n  console.log('this is development mode');\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["在代码压缩过程中，",(0,r.jsx)(n.code,{children:"if (false) { ... }"})," 会被识别为无效代码，并被自动移除。"]}),"\n",(0,r.jsxs)(n.h3,{id:"importmetaenvdev",children:["import.meta.env.DEV",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#importmetaenvdev",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["当 ",(0,r.jsx)(n.a,{href:"/config/mode",children:"mode"})," 为 ",(0,r.jsx)(n.code,{children:"'development'"})," 时，值为 ",(0,r.jsx)(n.code,{children:"true"}),"，否则为 ",(0,r.jsx)(n.code,{children:"false"}),"。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"if (import.meta.env.DEV) {\n  console.log('this is development mode');\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"importmetaenvprod",children:["import.meta.env.PROD",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#importmetaenvprod",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["当 ",(0,r.jsx)(n.a,{href:"/config/mode",children:"mode"})," 为 ",(0,r.jsx)(n.code,{children:"'production'"})," 时，值为 ",(0,r.jsx)(n.code,{children:"true"}),"，否则为 ",(0,r.jsx)(n.code,{children:"false"}),"。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"if (import.meta.env.PROD) {\n  console.log('this is production mode');\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"importmetaenvbase_url",children:["import.meta.env.BASE_URL",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#importmetaenvbase_url",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["你可以在 client 代码中使用 ",(0,r.jsx)(n.code,{children:"import.meta.env.BASE_URL"})," 来访问服务端的",(0,r.jsx)(n.a,{href:"/guide/basic/server#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%9F%BA%E7%A1%80%E8%B7%AF%E5%BE%84",children:"基础路径"}),"，它由 ",(0,r.jsx)(n.a,{href:"/config/server/base",children:"server.base"})," 配置项决定，这有助于在代码中引用 ",(0,r.jsx)(n.a,{href:"/guide/basic/static-assets#public-%E7%9B%AE%E5%BD%95",children:"public 目录"})," 下的资源。"]}),"\n",(0,r.jsxs)(n.p,{children:["比如，我们通过 ",(0,r.jsx)(n.a,{href:"/config/server/base",children:"server.base"})," 配置，将服务端的基础路径设置为 ",(0,r.jsx)(n.code,{children:"/foo"}),"："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"export default {\n  server: {\n    base: '/foo',\n  },\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["此时，public 目录下 ",(0,r.jsx)(n.code,{children:"favicon.ico"})," 文件的访问 URL 为 ",(0,r.jsx)(n.code,{children:"http://localhost:3000/foo/favicon.ico"}),"，在 JS 文件中可以使用 ",(0,r.jsx)(n.code,{children:"import.meta.env.BASE_URL"})," 来拼接 URL："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",meta:'title="index.js"',children:'const image = new Image();\n// 等价于 "/foo/favicon.ico"\nimage.src = `${import.meta.env.BASE_URL}/favicon.ico`;\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"importmetaenvasset_prefix",children:["import.meta.env.ASSET_PREFIX",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#importmetaenvasset_prefix",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["你可以在 client 代码中使用 ",(0,r.jsx)(n.code,{children:"import.meta.env.ASSET_PREFIX"})," 来访问静态资源的前缀。"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["在开发模式下，它等同于 ",(0,r.jsx)(n.a,{href:"/config/dev/asset-prefix",children:"dev.assetPrefix"})," 设置的值。"]}),"\n",(0,r.jsxs)(n.li,{children:["在生产模式下，它等同于 ",(0,r.jsx)(n.a,{href:"/config/output/asset-prefix",children:"output.assetPrefix"})," 设置的值。"]}),"\n",(0,r.jsxs)(n.li,{children:["Rsbuild 会自动移除 ",(0,r.jsx)(n.code,{children:"assetPrefix"})," 尾部的斜线符号，以便于进行字符串拼接。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["比如，我们通过 ",(0,r.jsx)(n.a,{href:"/config/output/copy",children:"output.copy"})," 配置，将 ",(0,r.jsx)(n.code,{children:"static/icon.png"})," 图片拷贝到 ",(0,r.jsx)(n.code,{children:"dist"})," 目录下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"export default {\n  dev: {\n    assetPrefix: '/',\n  },\n  output: {\n    copy: [{ from: './static', to: 'static' }],\n    assetPrefix: 'https://example.com',\n  },\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"此时，我们可以在 client 代码中通过以下方式来拼接图片 URL："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"const Image = <img src={`${import.meta.env.ASSET_PREFIX}/static/icon.png`} />;\n"})}),"\n",(0,r.jsx)(n.p,{children:"在开发模式，以上代码会被编译为："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"const Image = <img src={`/static/icon.png`} />;\n"})}),"\n",(0,r.jsx)(n.p,{children:"在生产模式，以上代码会被编译为："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"const Image = <img src={`https://example.com/static/icon.png`} />;\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"processenvbase_url",children:["process.env.BASE_URL",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#processenvbase_url",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Rsbuild 也允许使用 ",(0,r.jsx)(n.code,{children:"process.env.BASE_URL"}),"，它是 ",(0,r.jsx)(n.a,{href:"#importmetaenvbase_url",children:"import.meta.env.BASE_URL"})," 的别名。"]}),"\n",(0,r.jsxs)(n.p,{children:["例如，在 HTML 模板中，可以使用 ",(0,r.jsx)(n.code,{children:"process.env.BASE_URL"})," 来拼接 URL："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",meta:'title="index.html"',children:'\x3c!-- 等价于 "/foo/favicon.ico" --\x3e\n<link rel="icon" href="<%= process.env.BASE_URL %>/favicon.ico" />\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"processenvasset_prefix",children:["process.env.ASSET_PREFIX",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#processenvasset_prefix",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Rsbuild 也允许使用 ",(0,r.jsx)(n.code,{children:"process.env.ASSET_PREFIX"}),"，它是 ",(0,r.jsx)(n.a,{href:"#importmetaenvasset_prefix",children:"import.meta.env.ASSET_PREFIX"})," 的别名。"]}),"\n",(0,r.jsxs)(n.p,{children:["例如，在 HTML 模板中，可以使用 ",(0,r.jsx)(n.code,{children:"process.env.ASSET_PREFIX"})," 来拼接 URL："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",meta:'title="index.html"',children:'\x3c!-- 等价于 "https://example.com/static/icon.png" --\x3e\n<link rel="icon" href="<%= process.env.ASSET_PREFIX %>/static/icon.png" />\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"processenvnode_env",children:["process.env.NODE_ENV",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#processenvnode_env",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["默认情况下，Rsbuild 会自动设置 ",(0,r.jsx)(n.code,{children:"process.env.NODE_ENV"})," 环境变量，在开发模式为 ",(0,r.jsx)(n.code,{children:"'development'"}),"，生产模式为 ",(0,r.jsx)(n.code,{children:"'production'"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["你可以在 Node.js 和 client 代码中直接使用 ",(0,r.jsx)(n.code,{children:"process.env.NODE_ENV"}),"。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"if (process.env.NODE_ENV === 'development') {\n  console.log('this is a development log');\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"在开发模式，以上代码会被编译为："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"if (true) {\n  console.log('this is a development log');\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"在生产模式，以上代码会被编译为："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"if (false) {\n  console.log('this is a development log');\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["在代码压缩过程中，",(0,r.jsx)(n.code,{children:"if (false) { ... }"})," 会被识别为无效代码，并被自动移除。"]}),"\n",(0,r.jsxs)(n.h2,{id:"env-文件",children:[(0,r.jsx)(n.code,{children:".env"})," 文件",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#env-文件",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["当项目根目录存在 ",(0,r.jsx)(n.code,{children:".env"})," 文件时，Rsbuild CLI 会自动使用 ",(0,r.jsx)(n.a,{href:"https://npmjs.com/package/dotenv",target:"_blank",rel:"noopener noreferrer",children:"dotenv"})," 来加载这些环境变量，并添加到当前 Node.js 进程中，其中的 ",(0,r.jsx)(n.a,{href:"#public-%E5%8F%98%E9%87%8F",children:"public 变量"})," 会被暴露在 ",(0,r.jsx)(n.code,{children:"client"})," 代码中。"]}),"\n",(0,r.jsxs)(n.p,{children:["你可以通过 ",(0,r.jsx)(n.code,{children:"import.meta.env.[name]"})," 或 ",(0,r.jsx)(n.code,{children:"process.env.[name]"})," 来访问这些环境变量。"]}),"\n",(0,r.jsxs)(n.h3,{id:"文件类型",children:["文件类型",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#文件类型",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Rsbuild 支持读取以下 env 文件："}),"\n",(0,r.jsxs)(n.table,{children:["\n",(0,r.jsxs)(n.thead,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.th,{children:"文件名"}),"\n",(0,r.jsx)(n.th,{children:"描述"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.tbody,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:".env"})}),"\n",(0,r.jsx)(n.td,{children:"在所有场景下默认加载。"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:".env.local"})}),"\n",(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:".env"})," 文件的本地用法，需要添加到 .gitignore 中。"]}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:".env.development"})}),"\n",(0,r.jsxs)(n.td,{children:["当 ",(0,r.jsx)(n.code,{children:"process.env.NODE_ENV"})," 为 ",(0,r.jsx)(n.code,{children:"'development'"})," 时读取。"]}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:".env.production"})}),"\n",(0,r.jsxs)(n.td,{children:["当 ",(0,r.jsx)(n.code,{children:"process.env.NODE_ENV"})," 为 ",(0,r.jsx)(n.code,{children:"'production'"})," 时读取。"]}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:".env.development.local"})}),"\n",(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:".env.development"})," 文件的本地用法，需要添加到 .gitignore 中。"]}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:".env.production.local"})}),"\n",(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:".env.production"})," 文件的本地用法，需要添加到 .gitignore 中。"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"如果同时存在上述的多个文件，那么多个文件都会被读取，并且表格下方的文件具有更高的优先级。"}),"\n",(0,r.jsxs)(n.h3,{id:"env-模式",children:["Env 模式",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#env-模式",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Rsbuild 也支持读取 ",(0,r.jsx)(n.code,{children:".env.[mode]"})," 和 ",(0,r.jsx)(n.code,{children:".env.[mode].local"})," 文件，你可以通过 CLI 的 ",(0,r.jsx)(n.code,{children:"--env-mode <mode>"})," 选项来指定 env 模式。"]}),"\n",(0,r.jsxs)(n.p,{children:["比如，指定 env 模式为 ",(0,r.jsx)(n.code,{children:"test"}),"："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx rsbuild dev --env-mode test\n"})}),"\n",(0,r.jsx)(n.p,{children:"Rsbuild 会依次读取以下文件："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:".env"}),"\n",(0,r.jsx)(n.li,{children:".env.local"}),"\n",(0,r.jsx)(n.li,{children:".env.test"}),"\n",(0,r.jsx)(n.li,{children:".env.test.local"}),"\n"]}),"\n",(0,r.jsxs)(n.div,{className:"rspress-directive tip",children:[(0,r.jsx)(n.div,{className:"rspress-directive-title",children:"TIP"}),(0,r.jsxs)(n.div,{className:"rspress-directive-content",children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--env-mode"})," 选项的优先级高于 ",(0,r.jsx)(n.code,{children:"process.env.NODE_ENV"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["推荐使用 ",(0,r.jsx)(n.code,{children:"--env-mode"})," 来指定 env 模式，不建议修改 ",(0,r.jsx)(n.code,{children:"process.env.NODE_ENV"}),"。"]}),"\n"]})]}),"\n",(0,r.jsxs)(n.h3,{id:"env-目录",children:["Env 目录",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#env-目录",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["默认情况下，",(0,r.jsx)(n.code,{children:".env"})," 文件位于项目的根目录。你可以通过 CLI 的 ",(0,r.jsx)(n.code,{children:"--env-dir <dir>"})," 选项来指定 env 目录。"]}),"\n",(0,r.jsxs)(n.p,{children:["比如，指定 env 目录为 ",(0,r.jsx)(n.code,{children:"config"}),"："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx rsbuild dev --env-dir config\n"})}),"\n",(0,r.jsxs)(n.p,{children:["这种情况下，Rsbuild 会读取 ",(0,r.jsx)(n.code,{children:"./config/.env"})," 等 env 文件。"]}),"\n",(0,r.jsxs)(n.h3,{id:"示例",children:["示例",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#示例",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["比如创建 ",(0,r.jsx)(n.code,{children:".env"})," 文件并添加以下内容："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",meta:'title=".env"',children:"FOO=hello\nBAR=1\n"})}),"\n",(0,r.jsxs)(n.p,{children:["然后在 ",(0,r.jsx)(n.code,{children:"rsbuild.config.ts"})," 文件中，你可以通过 ",(0,r.jsx)(n.code,{children:"import.meta.env.[name]"})," 或 ",(0,r.jsx)(n.code,{children:"process.env.[name]"})," 访问到上述环境变量："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="rsbuild.config.ts"',children:"console.log(import.meta.env.FOO); // 'hello'\nconsole.log(import.meta.env.BAR); // '1'\n\nconsole.log(process.env.FOO); // 'hello'\nconsole.log(process.env.BAR); // '1'\n"})}),"\n",(0,r.jsxs)(n.p,{children:["此时，创建一个 ",(0,r.jsx)(n.code,{children:".env.local"})," 文件，添加以下内容："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",meta:'title=".env.local"',children:"BAR=2\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"BAR"})," 的值会被覆盖为 ",(0,r.jsx)(n.code,{children:"'2'"}),"："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="rsbuild.config.ts"',children:"console.log(import.meta.env.BAR); // '2'\nconsole.log(process.env.BAR); // '2'\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"手动加载",children:["手动加载",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#手动加载",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["如果你没有使用 Rsbuild 的 CLI，而是使用了 Rsbuild 的 ",(0,r.jsx)(n.a,{href:"/api/start/index",children:"JavaScript API"}),"，那么你需要手动调用 Rsbuild 提供的 ",(0,r.jsx)(n.a,{href:"/api/javascript-api/core#loadenv",children:"loadEnv"})," 方法来读取环境变量，并通过 ",(0,r.jsx)(n.a,{href:"/config/source/define",children:"source.define"})," 配置项注入到代码中。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { loadEnv, mergeRsbuildConfig } from '@rsbuild/core';\n\n// 默认情况下，`publicVars` 是以 `PUBLIC_` 为前缀的变量\nconst { parsed, publicVars } = loadEnv();\n\nconst mergedConfig = mergeRsbuildConfig(\n  {\n    source: {\n      define: publicVars,\n    },\n  },\n  userConfig,\n);\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"public-变量",children:["public 变量",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#public-变量",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["所有以 ",(0,r.jsx)(n.code,{children:"PUBLIC_"})," 开头的环境变量可以在 client 代码中访问，比如定义了以下变量："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",meta:'title=".env"',children:"PUBLIC_NAME=jack\nPASSWORD=123\n"})}),"\n",(0,r.jsxs)(n.p,{children:["在 client 代码中，你可以通过 ",(0,r.jsx)(n.code,{children:"import.meta.env.PUBLIC_*"})," 或 ",(0,r.jsx)(n.code,{children:"process.env.PUBLIC_*"})," 访问这些环境变量，Rsbuild 会匹配标识符替换为相应的值。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="src/index.ts"',children:"console.log(import.meta.env.PUBLIC_NAME); // -> 'jack'\nconsole.log(import.meta.env.PASSWORD); // -> undefined\n\nconsole.log(process.env.PUBLIC_NAME); // -> 'jack'\nconsole.log(process.env.PASSWORD); // -> undefined\n"})}),"\n",(0,r.jsxs)(n.div,{className:"rspress-directive tip",children:[(0,r.jsx)(n.div,{className:"rspress-directive-title",children:"TIP"}),(0,r.jsxs)(n.div,{className:"rspress-directive-content",children:["\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"public 变量的内容会出现在你的 client 代码中，请避免在 public 变量中包含敏感信息。"}),"\n",(0,r.jsxs)(n.li,{children:["public 变量是通过 ",(0,r.jsx)(n.a,{href:"/config/source/define",children:"source.define"})," 替换的，请阅读",(0,r.jsx)(n.a,{href:"#%E4%BD%BF%E7%94%A8-define",children:"「使用 define」"}),"来了解 define 的原理和注意事项。"]}),"\n"]}),"\n"]})]}),"\n",(0,r.jsxs)(n.h3,{id:"替换范围",children:["替换范围",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#替换范围",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"public 变量会替换 client 代码中的标识符，替换范围包含："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["JavaScript 文件，以及能转换为 JavaScript 代码的文件，比如 ",(0,r.jsx)(n.code,{children:".js"}),"，",(0,r.jsx)(n.code,{children:".ts"}),"，",(0,r.jsx)(n.code,{children:".tsx"})," 等。"]}),"\n",(0,r.jsx)(n.li,{children:"HTML 模板文件，比如："}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ejs",meta:'title="template.html"',children:"<div><%= process.env.PUBLIC_NAME %></div>\n"})}),"\n",(0,r.jsx)(n.p,{children:"注意，public 变量不会替换以下文件中的标识符："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["CSS 文件，比如 ",(0,r.jsx)(n.code,{children:".css"}),", ",(0,r.jsx)(n.code,{children:".scss"}),", ",(0,r.jsx)(n.code,{children:".less"})," 等。"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"自定义前缀",children:["自定义前缀",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#自定义前缀",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Rsbuild 提供了 ",(0,r.jsx)(n.a,{href:"/api/javascript-api/core#loadenv",children:"loadEnv"})," 方法，可以把任何前缀的环境变量注入到 client 代码中。"]}),"\n",(0,r.jsxs)(n.p,{children:["比如将一个 Create React App 项目迁移到 Rsbuild 时，你可以通过以下方式来读取 ",(0,r.jsx)(n.code,{children:"REACT_APP_"})," 开头的环境变量，并通过 ",(0,r.jsx)(n.a,{href:"/config/source/define",children:"source.define"})," 配置项注入："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="rsbuild.config.ts"',children:"import { defineConfig, loadEnv } from '@rsbuild/core';\n\nconst { publicVars } = loadEnv({ prefixes: ['REACT_APP_'] });\n\nexport default defineConfig({\n  source: {\n    define: publicVars,\n  },\n});\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"使用-define",children:["使用 define",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用-define",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["通过 ",(0,r.jsx)(n.a,{href:"/config/source/define",children:"source.define"})," 选项，你可以在构建时将代码中的全局标识符替换成其它值或者表达式。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"define"})," 类似于其它一些语言提供的宏定义能力，它常用于在构建时向代码注入环境变量等信息。"]}),"\n",(0,r.jsxs)(n.h3,{id:"替换标识符",children:["替换标识符",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#替换标识符",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"define 最基础的用途是在构建时替换代码中的全局标识符。"}),"\n",(0,r.jsxs)(n.p,{children:["例如环境变量 ",(0,r.jsx)(n.code,{children:"NODE_ENV"})," 的值会影响许多第三方模块的行为，在构建线上应用的产物时通常需要将它设置为 ",(0,r.jsx)(n.code,{children:'"production"'}),"："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"export default {\n  source: {\n    define: {\n      'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV),\n    },\n  },\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["需要注意的是这里提供的值必须是 JSON 字符串，例如 ",(0,r.jsx)(n.code,{children:"process.env.NODE_ENV"})," 的值为 ",(0,r.jsx)(n.code,{children:'"production"'})," 则传入的值应当是 ",(0,r.jsx)(n.code,{children:'"\\"production\\""'})," 才能够正确被处理。"]}),"\n",(0,r.jsxs)(n.p,{children:["同理 ",(0,r.jsx)(n.code,{children:'{ foo: "bar" }'})," 也应该被转换成 ",(0,r.jsx)(n.code,{children:'"{\\"foo\\":\\"bar\\"}"'}),"，如果直接传入原始对象则意味着把标识符 ",(0,r.jsx)(n.code,{children:"process.env.NODE_ENV.foo"})," 替换为标识符 ",(0,r.jsx)(n.code,{children:"bar"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"source.define"})," 的具体行为请参考 ",(0,r.jsx)(n.a,{href:"/config/source/define",children:"API 文档"}),"。"]}),"\n",(0,r.jsxs)(n.div,{className:"rspress-directive tip",children:[(0,r.jsx)(n.div,{className:"rspress-directive-title",children:"TIP"}),(0,r.jsx)(n.div,{className:"rspress-directive-content",children:(0,r.jsxs)(n.p,{children:["以上例子中的环境变量 ",(0,r.jsx)(n.code,{children:"NODE_ENV"})," 已经由 Rsbuild 自动注入，通常你不需要手动配置它的值。\n"]})})]}),"\n",(0,r.jsxs)(n.h3,{id:"标识符匹配",children:["标识符匹配",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#标识符匹配",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["需要注意的是，",(0,r.jsx)(n.code,{children:"source.define"})," 只能匹配完整的全局标识符，你可以将它理解为一个文本替换的过程。"]}),"\n",(0,r.jsxs)(n.p,{children:["如果代码里的标识符与 ",(0,r.jsx)(n.code,{children:"define"})," 里定义的 key 不是完全相同的，Rsbuild 将无法替换它。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// Good\nconsole.log(process.env.NODE_ENV); // 'production'\n\n// Bad\nconsole.log(process.env['NODE_ENV']); // process is not defined!\n\n// Bad\nconsole.log(process.env?.NODE_ENV); // process is not defined!\n\n// Bad\nconst { NODE_ENV } = process.env;\nconsole.log(NODE_ENV); // process is not defined!\n\n// Bad\nconst env = process.env;\nconsole.log(env.NODE_ENV); // process is not defined!\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"processenv-替换方式",children:["process.env 替换方式",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#processenv-替换方式",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["在使用 ",(0,r.jsx)(n.code,{children:"source.define"})," 时，请避免替换整个 ",(0,r.jsx)(n.code,{children:"process.env"})," 对象，比如下面的用法是不推荐的："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"export default {\n  source: {\n    define: {\n      'process.env': JSON.stringify(process.env),\n    },\n  },\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"如果你采用了上述用法，将会导致如下问题："}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"额外注入了一些未使用的环境变量，导致开发服务器的环境变量被泄露到前端代码中。"}),"\n",(0,r.jsxs)(n.li,{children:["由于每一处 ",(0,r.jsx)(n.code,{children:"process.env"})," 代码都会被替换为完整的环境变量对象，导致前端代码的包体积增加，性能降低。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["因此，请按照实际需求来注入 ",(0,r.jsx)(n.code,{children:"process.env"})," 上的环境变量，避免全量替换。"]}),"\n",(0,r.jsxs)(n.h2,{id:"类型声明",children:["类型声明",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#类型声明",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"当你在 TypeScript 代码中访问环境变量时，TypeScript 可能会提示该变量缺少类型定义，此时你需要添加相应的类型声明。"}),"\n",(0,r.jsxs)(n.p,{children:["比如你引用了一个 ",(0,r.jsx)(n.code,{children:"PUBLIC_FOO"})," 变量，在 TypeScript 文件中会出现如下提示："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"TS2304: Cannot find name 'PUBLIC_FOO'.\n"})}),"\n",(0,r.jsxs)(n.p,{children:["此时，你可以在项目中创建 ",(0,r.jsx)(n.code,{children:"src/env.d.ts"})," 文件，并添加以下内容："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="src/env.d.ts"',children:"declare const PUBLIC_FOO: string;\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"importmetaenv",children:["import.meta.env",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#importmetaenv",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["你可以像这样来扩展 ",(0,r.jsx)(n.code,{children:"import.meta.env"})," 的类型："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="src/env.d.ts"',children:"interface ImportMetaEnv {\n  // import.meta.env.PUBLIC_FOO\n  readonly PUBLIC_FOO: string;\n}\n\ninterface ImportMeta {\n  readonly env: ImportMetaEnv;\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"processenv",children:["process.env",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#processenv",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["如果缺少 ",(0,r.jsx)(n.code,{children:"process.env"})," 的类型，请安装 ",(0,r.jsx)(n.a,{href:"https://www.npmjs.com/package/@types/node",target:"_blank",rel:"noopener noreferrer",children:"@types/node"})," 依赖："]}),"\n","\n",(0,r.jsx)(d.PackageManagerTabs,{command:"add @types/node -D"}),"\n",(0,r.jsxs)(n.p,{children:["然后扩展 ",(0,r.jsx)(n.code,{children:"process.env"})," 的类型："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="src/env.d.ts"',children:"declare namespace NodeJS {\n  interface ProcessEnv {\n    // process.env.PUBLIC_FOO\n    PUBLIC_FOO: string;\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"tree-shaking",children:["Tree Shaking",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#tree-shaking",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"define"})," 还可以用于标记死代码以协助 Rspack 进行 tree shaking 优化。"]}),"\n",(0,r.jsxs)(n.p,{children:["例如通过将 ",(0,r.jsx)(n.code,{children:"import.meta.env.LANGUAGE"})," 替换为具体值来实现针对不同语言的产物进行差异化构建："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="rsbuild.config.ts"',children:"export default {\n  source: {\n    define: {\n      'import.meta.env.LANGUAGE': JSON.stringify(import.meta.env.LANGUAGE),\n    },\n  },\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"对于一段国际化代码："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const App = () => {\n  if (import.meta.env.LANGUAGE === 'en') {\n    return <EntryFoo />;\n  } else if (import.meta.env.LANGUAGE === 'zh') {\n    return <EntryBar />;\n  }\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["指定环境变量 ",(0,r.jsx)(n.code,{children:"LANGUAGE=zh"})," 并执行构建，得到的产物会移除多余的代码："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const App = () => {\n  if (false) {\n  } else if (true) {\n    return <EntryBar />;\n  }\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"未用到的组件不会被打包，它们的外部依赖也会对应地被移除，最终可以得到体积更小的构建产物。"})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}let a=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["zh%2Fguide%2Fadvanced%2Fenv-vars.mdx"]={toc:[{text:"默认环境变量",id:"默认环境变量",depth:2},{text:"import.meta.env.MODE",id:"importmetaenvmode",depth:3},{text:"import.meta.env.DEV",id:"importmetaenvdev",depth:3},{text:"import.meta.env.PROD",id:"importmetaenvprod",depth:3},{text:"import.meta.env.BASE_URL",id:"importmetaenvbase_url",depth:3},{text:"import.meta.env.ASSET_PREFIX",id:"importmetaenvasset_prefix",depth:3},{text:"process.env.BASE_URL",id:"processenvbase_url",depth:3},{text:"process.env.ASSET_PREFIX",id:"processenvasset_prefix",depth:3},{text:"process.env.NODE_ENV",id:"processenvnode_env",depth:3},{text:"`.env` 文件",id:"env-文件",depth:2},{text:"文件类型",id:"文件类型",depth:3},{text:"Env 模式",id:"env-模式",depth:3},{text:"Env 目录",id:"env-目录",depth:3},{text:"示例",id:"示例",depth:3},{text:"手动加载",id:"手动加载",depth:3},{text:"public 变量",id:"public-变量",depth:2},{text:"替换范围",id:"替换范围",depth:3},{text:"自定义前缀",id:"自定义前缀",depth:3},{text:"使用 define",id:"使用-define",depth:2},{text:"替换标识符",id:"替换标识符",depth:3},{text:"标识符匹配",id:"标识符匹配",depth:3},{text:"process.env 替换方式",id:"processenv-替换方式",depth:3},{text:"类型声明",id:"类型声明",depth:2},{text:"import.meta.env",id:"importmetaenv",depth:3},{text:"process.env",id:"processenv",depth:3},{text:"Tree Shaking",id:"tree-shaking",depth:2}],title:"环境变量",frontmatter:{}}}}]);