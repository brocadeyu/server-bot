"use strict";(self.webpackChunkrsbuild_website=self.webpackChunkrsbuild_website||[]).push([["9974"],{79924:function(e,n,s){s.r(n),s.d(n,{default:function(){return l}});var t=s(55367),r=s(26971);function a(e){let n=Object.assign({h1:"h1",a:"a",ul:"ul",li:"li",strong:"strong",pre:"pre",code:"code",p:"p",h2:"h2",h3:"h3"},(0,r.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"htmltags",children:["html.tags",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#htmltags",children:"#"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"type TagsConfig = HtmlTag | HtmlTagHandler | Array<HtmlTag | HtmlTagHandler>;\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"默认值："})," ",(0,t.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"添加和修改最终注入到 HTML 页面的标签。"}),"\n",(0,t.jsxs)(n.h2,{id:"对象形式",children:["对象形式",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#对象形式",children:"#"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"type HtmlTag = {\n  tag: string;\n  attrs?: Record<string, string | boolean | null | undefined>;\n  children?: string;\n  /** @default false */\n  hash?: boolean | string | ((url: string, hash: string) => string);\n  /** @default true */\n  publicPath?: boolean | string | ((url: string, publicPath: string) => string);\n  /**\n   * 定义当前标签相对于原有标签的插入位置。\n   * 设为 `true` 时，将被插入原有标签之后；设为 `false` 时，将被插入原有标签之前。\n   * @default true\n   */\n  append?: boolean;\n  /**\n   * 是否将标签添加到 head 中 (仅对于允许包含在 head 中的元素会默认启用)\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head#see_also}\n   */\n  head?: boolean;\n};\n"})}),"\n",(0,t.jsx)(n.p,{children:"对象形式的配置项可以用于描述需要注入的标签，并可以通过参数控制注入的位置："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"export default {\n  output: {\n    assetPrefix: 'https://example.com/',\n  },\n  html: {\n    tags: [\n      {\n        tag: 'script',\n        attrs: { src: 'a.js' },\n        head: true,\n        append: true,\n        publicPath: true,\n        hash: true,\n      },\n    ],\n  },\n};\n"})}),"\n",(0,t.jsxs)(n.p,{children:["这样的配置将会在 HTML 的 ",(0,t.jsx)(n.code,{children:"head"})," 最后添加一个 ",(0,t.jsx)(n.code,{children:"script"})," 标签："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<html>\n  <head>\n    \x3c!-- some other headTags... --\x3e\n    <script src="https://example.com/a.js?8327ec63"><\/script>\n  </head>\n  <body>\n    \x3c!-- some other bodyTags... --\x3e\n  </body>\n</html>\n'})}),"\n",(0,t.jsxs)(n.p,{children:["标签中表示外部资源文件路径的字段会受到 ",(0,t.jsx)(n.code,{children:"publicPath"})," 和 ",(0,t.jsx)(n.code,{children:"hash"})," 选项的影响，这些字段包括 ",(0,t.jsx)(n.code,{children:"script"})," 标签的 ",(0,t.jsx)(n.code,{children:"src"})," 和 ",(0,t.jsx)(n.code,{children:"link"})," 标签的 ",(0,t.jsx)(n.code,{children:"href"}),"。"]}),"\n",(0,t.jsxs)(n.p,{children:["启用 ",(0,t.jsx)(n.code,{children:"publicPath"})," 会让标签中表示路径的属性被拼接上 ",(0,t.jsx)(n.a,{href:"/config/output/asset-prefix",children:"output.assetPrefix"})," 字段。而 ",(0,t.jsx)(n.code,{children:"hash"})," 字段会让文件名后多出一个哈希查询用于控制浏览器缓存，哈希字符串与 HTML 文件产物的哈希值相同。"]}),"\n",(0,t.jsx)(n.p,{children:"用户也可以向这两个配置传入函数，以自行控制路径拼接的逻辑。"}),"\n",(0,t.jsxs)(n.h3,{id:"设置标签插入位置",children:["设置标签插入位置",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#设置标签插入位置",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["标签最终的插入位置由 ",(0,t.jsx)(n.code,{children:"head"})," 和 ",(0,t.jsx)(n.code,{children:"append"})," 选项决定，当两个元素的 ",(0,t.jsx)(n.code,{children:"head"})," 和 ",(0,t.jsx)(n.code,{children:"append"})," 配置相同时，将被插入到相同区域，并且维持彼此之间的相对位置。"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"append"})," 用于描述是将该标签添加到原有标签的末尾还是开头"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"head"})," 用于描述是否将该标签添加到页面 ",(0,t.jsx)(n.code,{children:"<head>"})," 中"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"最终在页面中的插入位置如下："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:"<html>\n  <head>\n    \x3c!-- tags with `{ head: true, append: false }` here. --\x3e\n    \x3c!-- some other headTags... --\x3e\n    \x3c!-- tags with `{ head: true, append: true }` here. --\x3e\n  </head>\n  <body>\n    \x3c!-- tags with `{ head: false, append: false }` here. --\x3e\n    \x3c!-- some other bodyTags... --\x3e\n    \x3c!-- tags with `{ head: false, append: true }` here. --\x3e\n  </body>\n</html>\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"函数形式",children:["函数形式",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#函数形式",children:"#"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"type HtmlTagContext = {\n  hash: string;\n  entryName: string;\n  outputName: string;\n  publicPath: string;\n};\n\ntype HtmlTagHandler = (\n  tags: HtmlTag[],\n  context: HtmlTagContext,\n) => HtmlTag[] | void;\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"html.tags"})," 也支持传入回调函数，通过在回调中编写逻辑可以任意修改标签列表，常用于",(0,t.jsx)(n.strong,{children:"修改标签列表"}),"或是",(0,t.jsx)(n.strong,{children:"在插入标签的同时确保其相对位置"}),"。"]}),"\n",(0,t.jsx)(n.p,{children:"回调函数接受 tags 列表作为参数，并需要修改或直接返回新的 tags 数组："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"export default {\n  html: {\n    tags: [\n      (tags) => [{ tag: 'script', attrs: { src: 'a.js' } }, ...tags],\n      (tags) => {\n        // 修改 'a.js' 标签\n        const target = tags.find((tag) => tag.attrs?.src === 'a.js');\n        if (target) {\n          target.attrs!.defer = true;\n        }\n      },\n      (tags) => {\n        // 将 'b.js' 插入到 'a.js' 之后\n        const targetIndex = tags.findIndex((tag) => tag.attrs?.src === 'a.js');\n\n        tags.splice(targetIndex + 1, 0, {\n          tag: 'script',\n          attrs: { src: 'd.js' },\n        });\n      },\n    ],\n  },\n};\n"})}),"\n",(0,t.jsx)(n.p,{children:"最终产物将会类似："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<html>\n  <head>\n    <script src="/a.js" defer><\/script>\n    <script src="/d.js"><\/script>\n    \x3c!-- some other headTags... --\x3e\n  </head>\n  <body>\n    \x3c!-- some bodyTags... --\x3e\n  </body>\n</html>\n'})}),"\n",(0,t.jsxs)(n.h2,{id:"限制",children:["限制",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#限制",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["这个配置用于在 Rsbuild 构建完成后修改 HTML 产物的内容，并不会引入和解析新的模块。因此，它无法用于引入未编译的源码文件，也无法代替 ",(0,t.jsx)(n.a,{href:"/config/source/pre-entry",children:"source.preEntry"})," 等配置。"]}),"\n",(0,t.jsx)(n.p,{children:"例如对于以下项目："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"web-app\n├── src\n│   ├── index.tsx\n│   └── polyfill.ts\n└── rsbuild.config.ts\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",meta:'title="rsbuild.config.ts"',children:"export default {\n  output: {\n    assetPrefix: 'https://example.com/',\n  },\n  html: {\n    tags: [{ tag: 'script', attrs: { src: './src/polyfill.ts' } }],\n  },\n};\n"})}),"\n",(0,t.jsxs)(n.p,{children:["这里的 tag 对象将会在简单处理后直接添加到 HTML 产物中，但对应的 ",(0,t.jsx)(n.code,{children:"polyfill.ts"})," 将不会被转译、打包，也因此应用会在处理这行脚本时出现 404 错误。"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<body>\n  <script src="https://example.com/src/polyfill.ts"><\/script>\n</body>\n'})}),"\n",(0,t.jsx)(n.p,{children:"合理的使用场景包括："}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["注入 CDN 上 ",(0,t.jsx)(n.strong,{children:"路径确定"})," 的静态资源"]}),"\n",(0,t.jsx)(n.li,{children:"注入需要首屏加载的内联脚本"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"例如以下示例的使用方式："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"web-app\n├── src\n│   └── index.tsx\n├── public\n│   └── service-worker.js\n└── rsbuild.config.ts\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",meta:'title="rsbuild.config.ts"',children:"function report() {\n  fetch('https://www.example.com/report');\n}\n\nexport default {\n  html: {\n    output: {\n      assetPrefix: 'https://example.com/',\n    },\n    tags: [\n      // Inject asset from the `public` directory.\n      { tag: 'script', attrs: { src: 'service-worker.js' } },\n      // Inject asset from other CDN url.\n      {\n        tag: 'script',\n        publicPath: false,\n        attrs: { src: 'https://cdn.example.com/foo.js' },\n      },\n      // Inject inline script.\n      {\n        tag: 'script',\n        children: report.toString() + '\\nreport()',\n      },\n    ],\n  },\n};\n"})}),"\n",(0,t.jsx)(n.p,{children:"得到的产物将会类似："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<body>\n  <script src="https://example.com/service-worker.js"><\/script>\n  <script src="https://cdn.example.com/foo.js"><\/script>\n  <script>\n    function report() {\n      fetch(\'https://www.example.com/report\');\n    }\n    report();\n  <\/script>\n</body>\n'})})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}let l=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["zh%2Fconfig%2Fhtml%2Ftags.mdx"]={toc:[{text:"对象形式",id:"对象形式",depth:2},{text:"设置标签插入位置",id:"设置标签插入位置",depth:3},{text:"函数形式",id:"函数形式",depth:2},{text:"限制",id:"限制",depth:2}],title:"html.tags",frontmatter:{}}}}]);