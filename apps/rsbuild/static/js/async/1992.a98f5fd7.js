"use strict";(self.webpackChunkrsbuild_website=self.webpackChunkrsbuild_website||[]).push([["1992"],{19721:function(e,n,r){r.r(n),r.d(n,{default:function(){return h}});var s=r(55367),t=r(26971);function i(e){let n=Object.assign({h1:"h1",a:"a",ul:"ul",li:"li",strong:"strong",code:"code",p:"p",h2:"h2",h3:"h3",pre:"pre"},(0,t.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"serverproxy",children:["server.proxy",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#serverproxy",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"类型："})," ",(0,s.jsx)(n.code,{children:"Record<string, string> | Record<string, ProxyOptions> | ProxyOptions[] | ProxyOptions"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"默认值："})," ",(0,s.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"为开发服务器或预览服务器配置代理规则，将请求代理到指定的服务上。"}),"\n",(0,s.jsxs)(n.h2,{id:"示例",children:["示例",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#示例",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"基础用法",children:["基础用法",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#基础用法",children:"#"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default {\n  server: {\n    proxy: {\n      // http://localhost:3000/api -> http://localhost:3000/api\n      // http://localhost:3000/api/foo -> http://localhost:3000/api/foo\n      '/api': 'http://localhost:3000',\n    },\n  },\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["此时，",(0,s.jsx)(n.code,{children:"/api/users"})," 请求将会代理到 ",(0,s.jsx)(n.a,{href:"http://localhost:3000/api/users%E3%80%82",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:3000/api/users。"})]}),"\n",(0,s.jsx)(n.p,{children:"你也可以代理到线上域名，比如:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default {\n  server: {\n    proxy: {\n      // http://localhost:3000/api -> https://nodejs.org/api\n      // http://localhost:3000/api/foo -> https://nodejs.org/api/foo\n      '/api': 'https://nodejs.org',\n    },\n  },\n};\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"重写路径",children:["重写路径",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#重写路径",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["如果你不想传递 ",(0,s.jsx)(n.code,{children:"/api"}),"，可以通过 ",(0,s.jsx)(n.code,{children:"pathRewrite"})," 重写请求路径："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default {\n  server: {\n    proxy: {\n      // http://localhost:3000/api -> http://localhost:3000\n      // http://localhost:3000/api/foo -> http://localhost:3000/foo\n      '/api': {\n        target: 'http://localhost:3000',\n        pathRewrite: { '^/api': '' },\n      },\n    },\n  },\n};\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"代理-websocket-请求",children:["代理 WebSocket 请求",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#代理-websocket-请求",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["如果你希望代理 WebSocket 请求，可以通过 ",(0,s.jsx)(n.code,{children:"ws"})," 开启："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default {\n  server: {\n    proxy: {\n      '/rsbuild-hmr': {\n        target: 'http://localhost:3000', // 将会代理到 ws://localhost:3000/rsbuild-hmr\n        ws: true,\n      },\n    },\n  },\n};\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"选项",children:["选项",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#选项",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Rsbuild server proxy 基于 ",(0,s.jsx)(n.a,{href:"https://github.com/chimurai/http-proxy-middleware/tree/2.x",target:"_blank",rel:"noopener noreferrer",children:"http-proxy-middleware"})," 实现。你可以使用 http-proxy-middleware 的所有配置项，具体可以查看文档。"]}),"\n",(0,s.jsx)(n.p,{children:"Rsbuild server proxy 完整类型定义为："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import type { Options as HttpProxyOptions } from 'http-proxy-middleware';\n\ntype Filter = string | string[] | ((pathname: string, req: Request) => boolean);\n\ntype ProxyOptions = HttpProxyOptions & {\n  bypass?: (\n    req: IncomingMessage,\n    res: ServerResponse,\n    proxyOptions: ProxyOptions,\n  ) => string | undefined | null | boolean;\n  context?: Filter;\n};\n\ntype ProxyConfig =\n  | ProxyOptions\n  | ProxyOptions[]\n  | Record<string, string>\n  | Record<string, ProxyOptions>;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["除了 ",(0,s.jsx)(n.code,{children:"http-proxy-middleware"})," 的选项外，Rsbuild 还支持 ",(0,s.jsx)(n.code,{children:"bypass"})," 和 ",(0,s.jsx)(n.code,{children:"context"})," 两个选项。"]}),"\n",(0,s.jsxs)(n.h3,{id:"bypass",children:["bypass",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#bypass",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"根据函数的返回值绕过代理。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["返回 ",(0,s.jsx)(n.code,{children:"null"})," 或 ",(0,s.jsx)(n.code,{children:"undefined"})," 会继续用代理处理请求。"]}),"\n",(0,s.jsxs)(n.li,{children:["返回 ",(0,s.jsx)(n.code,{children:"true"})," 会跳过代理继续处理请求。"]}),"\n",(0,s.jsxs)(n.li,{children:["返回 ",(0,s.jsx)(n.code,{children:"false"})," 会返回 404 错误。"]}),"\n",(0,s.jsx)(n.li,{children:"返回一个具体的服务路径，将会使用此路径替代原请求路径。"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// 自定义 bypass 方法\nexport default {\n  server: {\n    proxy: {\n      '/api': {\n        target: 'http://localhost:3000',\n        bypass: function (req, res, proxyOptions) {\n          if (req.headers.accept.indexOf('html') !== -1) {\n            console.log('Skipping proxy for browser request.');\n            return '/index.html';\n          }\n        },\n      },\n    },\n  },\n};\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"context",children:["context",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#context",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"用于代理多个指定的路径到同一个目标。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default {\n  server: {\n    proxy: [\n      {\n        context: ['/auth', '/api'],\n        target: 'http://localhost:3000',\n      },\n    ],\n  },\n};\n"})})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}let h=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["zh%2Fconfig%2Fserver%2Fproxy.mdx"]={toc:[{text:"示例",id:"示例",depth:2},{text:"基础用法",id:"基础用法",depth:3},{text:"重写路径",id:"重写路径",depth:3},{text:"代理 WebSocket 请求",id:"代理-websocket-请求",depth:3},{text:"选项",id:"选项",depth:2},{text:"bypass",id:"bypass",depth:3},{text:"context",id:"context",depth:3}],title:"server.proxy",frontmatter:{}}}}]);