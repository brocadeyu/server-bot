"use strict";(self.webpackChunkrsbuild_website=self.webpackChunkrsbuild_website||[]).push([["5431"],{15886:function(e,n,o){o.r(n),o.d(n,{default:function(){return a}});var r=o(55367),i=o(26971);function t(e){let n=Object.assign({h1:"h1",a:"a",h3:"h3",p:"p",pre:"pre",code:"code",hr:"hr"},(0,i.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"features-faq",children:["Features FAQ",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#features-faq",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"how-to-import-ui-component-library-on-demand",children:["How to import UI Component library on demand?",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#how-to-import-ui-component-library-on-demand",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["If you need to configure the on-demand import of the component library, you can configure it through ",(0,r.jsx)(n.a,{href:"/config/source/transform-import",children:"source.transformImport"}),", which is equivalent to ",(0,r.jsx)(n.a,{href:"https://npmjs.com/package/babel-plugin-import",target:"_blank",rel:"noopener noreferrer",children:"babel-plugin-import"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"export default {\n  source: {\n    transformImport: [\n      {\n        libraryName: 'my-components',\n        libraryDirectory: 'es',\n        style: true,\n      },\n    ],\n  },\n};\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h3,{id:"how-to-run-eslint-during-compilation",children:["How to run ESLint during compilation?",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#how-to-run-eslint-during-compilation",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["For the sake of compilation performance, Rsbuild will not perform ESLint verification during the compilation process by default. If you require this feature, you can use Rsbuild's ",(0,r.jsx)(n.a,{href:"https://github.com/rspack-contrib/rsbuild-plugin-eslint",target:"_blank",rel:"noopener noreferrer",children:"ESLint plugin"}),"."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h3,{id:"how-to-configure-cdn-path-for-static-assets",children:["How to configure CDN path for static assets?",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#how-to-configure-cdn-path-for-static-assets",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["If you need to upload static assets such as JS and CSS to CDN for use, you can set the URL prefix of static assets through the ",(0,r.jsx)(n.a,{href:"/config/output/asset-prefix",children:"output.assetPrefix"})," configuration."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"export default {\n  output: {\n    assetPrefix: 'https://cdn.example.com/assets/',\n  },\n};\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h3,{id:"how-to-remove-console-after-production-build",children:["How to remove console after production build?",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#how-to-remove-console-after-production-build",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["For the production build, we can remove the ",(0,r.jsx)(n.code,{children:"console"})," from the code, so as to avoid the log of the development mode being output to the production."]}),"\n",(0,r.jsxs)(n.p,{children:["Rsbuild provides a configuration option to remove console by default, please see ",(0,r.jsx)(n.a,{href:"/config/performance/remove-console",children:"performance.removeConsole"}),"."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h3,{id:"how-to-view-the-final-generated-rspack-configuration",children:["How to view the final generated Rspack configuration?",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#how-to-view-the-final-generated-rspack-configuration",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"By using the Rsbuild debug mode, you can view the Rspack configuration generated by Rsbuild."}),"\n",(0,r.jsxs)(n.p,{children:["You can enable the debug mode of Rsbuild by adding the ",(0,r.jsx)(n.code,{children:"DEBUG=rsbuild"}),' environment variable when performing the build. In this mode, the internally generated Rspack configuration will be outputted to the "dist" directory.']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"âžœ DEBUG=rsbuild pnpm dev\n\n  ...\n  rsbuild init plugins\n  rsbuild init plugins done\n  rsbuild Use Rspack v1.0.0\n  ...\n\nInspect config succeed, open following files to view the content:\n\n  - Rsbuild Config: /root/my-project/dist/.rsbuild/rsbuild.config.mjs\n  - Rspack Config (web): /root/my-project/dist/.rsbuild/rspack.config.web.mjs\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h3,{id:"how-to-ignore-specific-warnings",children:["How to ignore specific warnings?",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#how-to-ignore-specific-warnings",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"By default, Rsbuild will print all error and warning logs generated by the build process."}),"\n",(0,r.jsxs)(n.p,{children:["If a large number of warning logs are generated due to the three-party package, it cannot be processed temporarily, and you want to ignore it. Specific warning logs can be ignored through the ",(0,r.jsx)(n.code,{children:"ignoreWarnings"})," configuration provided by Rspack."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"export default {\n  tools: {\n    rspack: {\n      ignoreWarnings: [/Using \\/ for division outside of calc()/],\n    },\n  },\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["For details, please refer to: ",(0,r.jsx)(n.a,{href:"https://rspack.dev/config/other-options#ignorewarnings",target:"_blank",rel:"noopener noreferrer",children:"ignoreWarnings"}),"."]})]})}function s(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(t,{...e})}):t(e)}let a=s;s.__RSPRESS_PAGE_META={},s.__RSPRESS_PAGE_META["en%2Fguide%2Ffaq%2Ffeatures.mdx"]={toc:[{text:"How to import UI Component library on demand?",id:"how-to-import-ui-component-library-on-demand",depth:3},{text:"How to run ESLint during compilation?",id:"how-to-run-eslint-during-compilation",depth:3},{text:"How to configure CDN path for static assets?",id:"how-to-configure-cdn-path-for-static-assets",depth:3},{text:"How to remove console after production build?",id:"how-to-remove-console-after-production-build",depth:3},{text:"How to view the final generated Rspack configuration?",id:"how-to-view-the-final-generated-rspack-configuration",depth:3},{text:"How to ignore specific warnings?",id:"how-to-ignore-specific-warnings",depth:3}],title:"Features FAQ",frontmatter:{}}}}]);