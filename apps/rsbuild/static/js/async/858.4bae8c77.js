"use strict";(self.webpackChunkrsbuild_website=self.webpackChunkrsbuild_website||[]).push([["858"],{72308:function(e,n,r){r.r(n),r.d(n,{default:function(){return a}});var i=r(55367),o=r(26971);function s(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",pre:"pre",code:"code",ul:"ul",li:"li",blockquote:"blockquote"},(0,o.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"build-profiling",children:["Build Profiling",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#build-profiling",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Performing a performance analysis can help you identify performance bottlenecks in your project, allowing for targeted optimization."}),"\n",(0,i.jsxs)(n.h2,{id:"using-rsdoctor",children:["Using Rsdoctor",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#using-rsdoctor",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Rsdoctor is a build analyser that can visually display the compilation time of each loaders and plugins."}),"\n",(0,i.jsxs)(n.p,{children:["Please refer to ",(0,i.jsx)(n.a,{href:"/guide/debug/rsdoctor",children:"Use Rsdoctor"})," for more information."]}),"\n",(0,i.jsxs)(n.h2,{id:"nodejs-profiling",children:["Node.js Profiling",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#nodejs-profiling",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"When Rsbuild executes a build, it will include the runtime overhead of both JavaScript and Rust code, and the overhead of data communication between JavaScript and Rust."}),"\n",(0,i.jsx)(n.p,{children:"In general, the performance overhead on the JavaScript side will be greater than that on the Rust side. You can use Node.js profiling to analyze the overhead on the JS side, which helps to identify performance bottlenecks on the JS side."}),"\n",(0,i.jsxs)(n.p,{children:["For example, to perform the ",(0,i.jsx)(n.a,{href:"https://nodejs.org/docs/v20.17.0/api/cli.html#--cpu-prof",target:"_blank",rel:"noopener noreferrer",children:"CPU profiling"})," analysis, run the following command in the root directory of your project:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# dev\nnode --cpu-prof ./node_modules/@rsbuild/core/bin/rsbuild.js dev\n\n# build\nnode --cpu-prof ./node_modules/@rsbuild/core/bin/rsbuild.js build\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The above commands will generate a ",(0,i.jsx)(n.code,{children:"*.cpuprofile"})," file. We can use ",(0,i.jsx)(n.a,{href:"https://github.com/jlfwong/speedscope",target:"_blank",rel:"noopener noreferrer",children:"speedscope"})," to visualize this file:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Install speedscope\nnpm install -g speedscope\n\n# View cpuprofile content\n# Replace the name with the local file name\nspeedscope CPU.date.000000.00000.0.001.cpuprofile\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"rspack-profiling",children:["Rspack Profiling",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rspack-profiling",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["Rsbuild supports the use of the ",(0,i.jsx)(n.code,{children:"RSPACK_PROFILE"})," environment variable for Rspack build performance profile."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",meta:'title="package.json"',children:'{\n  "scripts": {\n    "dev:profile": "RSPACK_PROFILE=ALL rsbuild dev",\n    "build:profile": "RSPACK_PROFILE=ALL rsbuild build"\n  }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The command will generate a ",(0,i.jsx)(n.code,{children:"rspack-profile-${timestamp}"})," folder in the dist folder, and it will contain ",(0,i.jsx)(n.code,{children:"logging.json"}),", ",(0,i.jsx)(n.code,{children:"trace.json"})," and ",(0,i.jsx)(n.code,{children:"jscpuprofile.json"})," files:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"trace.json"}),": The time spent on each phase of the Rust side is recorded at a granular level using tracing and can be viewed using ",(0,i.jsx)(n.a,{href:"https://ui.perfetto.dev/",target:"_blank",rel:"noopener noreferrer",children:"ui.perfetto.dev"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"jscpuprofile.json"}),": The time spent at each stage on the JavaScript side is recorded at a granular level using ",(0,i.jsx)(n.a,{href:"https://nodejs.org/dist/latest-v18.x/docs/api/inspector.html",target:"_blank",rel:"noopener noreferrer",children:"Node.js inspector"})," and can be viewed using ",(0,i.jsx)(n.a,{href:"https://www.speedscope.app/",target:"_blank",rel:"noopener noreferrer",children:"speedscope.app"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"logging.json"}),": Includes some logging information that keeps a coarse-grained record of how long each phase of the build took. (Not supported in development mode yet)"]}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["For more information about Rspack build performance analysis, please refer to ",(0,i.jsx)(n.a,{href:"https://rspack.dev/contribute/development/profiling",target:"_blank",rel:"noopener noreferrer",children:"Rspack - Profiling"}),"."]}),"\n"]})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,o.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(s,{...e})}):s(e)}let a=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["en%2Fguide%2Fdebug%2Fbuild-profiling.mdx"]={toc:[{text:"Using Rsdoctor",id:"using-rsdoctor",depth:2},{text:"Node.js Profiling",id:"nodejs-profiling",depth:2},{text:"Rspack Profiling",id:"rspack-profiling",depth:2}],title:"Build Profiling",frontmatter:{}}}}]);